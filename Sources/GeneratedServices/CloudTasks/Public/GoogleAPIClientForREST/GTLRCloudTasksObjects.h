// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Tasks API (cloudtasks/v2)
// Description:
//   Manages the execution of large numbers of distributed requests.
// Documentation:
//   https://cloud.google.com/tasks/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudTasks_AppEngineHttpRequest;
@class GTLRCloudTasks_AppEngineHttpRequest_Headers;
@class GTLRCloudTasks_AppEngineRouting;
@class GTLRCloudTasks_Attempt;
@class GTLRCloudTasks_Binding;
@class GTLRCloudTasks_Expr;
@class GTLRCloudTasks_GetPolicyOptions;
@class GTLRCloudTasks_HttpRequest;
@class GTLRCloudTasks_HttpRequest_Headers;
@class GTLRCloudTasks_Location;
@class GTLRCloudTasks_Location_Labels;
@class GTLRCloudTasks_Location_Metadata;
@class GTLRCloudTasks_OAuthToken;
@class GTLRCloudTasks_OidcToken;
@class GTLRCloudTasks_Policy;
@class GTLRCloudTasks_Queue;
@class GTLRCloudTasks_RateLimits;
@class GTLRCloudTasks_RetryConfig;
@class GTLRCloudTasks_StackdriverLoggingConfig;
@class GTLRCloudTasks_Status;
@class GTLRCloudTasks_Status_Details_Item;
@class GTLRCloudTasks_Task;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudTasks_AppEngineHttpRequest.httpMethod

/**
 *  HTTP DELETE
 *
 *  Value: "DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Delete;
/**
 *  HTTP GET
 *
 *  Value: "GET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Get;
/**
 *  HTTP HEAD
 *
 *  Value: "HEAD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Head;
/**
 *  HTTP method unspecified
 *
 *  Value: "HTTP_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_HttpMethodUnspecified;
/**
 *  HTTP OPTIONS
 *
 *  Value: "OPTIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Options;
/**
 *  HTTP PATCH
 *
 *  Value: "PATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Patch;
/**
 *  HTTP POST
 *
 *  Value: "POST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Post;
/**
 *  HTTP PUT
 *
 *  Value: "PUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Put;

// ----------------------------------------------------------------------------
// GTLRCloudTasks_CreateTaskRequest.responseView

/**
 *  The basic view omits fields which can be large or can contain sensitive
 *  data. This view does not include the body in AppEngineHttpRequest. Bodies
 *  are desirable to return only when needed, because they can be large and
 *  because of the sensitivity of the data that you choose to store in it.
 *
 *  Value: "BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_CreateTaskRequest_ResponseView_Basic;
/**
 *  All information is returned. Authorization for FULL requires
 *  `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
 *  permission on the Queue resource.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_CreateTaskRequest_ResponseView_Full;
/**
 *  Unspecified. Defaults to BASIC.
 *
 *  Value: "VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_CreateTaskRequest_ResponseView_ViewUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudTasks_HttpRequest.httpMethod

/**
 *  HTTP DELETE
 *
 *  Value: "DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_HttpRequest_HttpMethod_Delete;
/**
 *  HTTP GET
 *
 *  Value: "GET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_HttpRequest_HttpMethod_Get;
/**
 *  HTTP HEAD
 *
 *  Value: "HEAD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_HttpRequest_HttpMethod_Head;
/**
 *  HTTP method unspecified
 *
 *  Value: "HTTP_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_HttpRequest_HttpMethod_HttpMethodUnspecified;
/**
 *  HTTP OPTIONS
 *
 *  Value: "OPTIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_HttpRequest_HttpMethod_Options;
/**
 *  HTTP PATCH
 *
 *  Value: "PATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_HttpRequest_HttpMethod_Patch;
/**
 *  HTTP POST
 *
 *  Value: "POST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_HttpRequest_HttpMethod_Post;
/**
 *  HTTP PUT
 *
 *  Value: "PUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_HttpRequest_HttpMethod_Put;

// ----------------------------------------------------------------------------
// GTLRCloudTasks_Queue.state

/**
 *  The queue is disabled. A queue becomes `DISABLED` when
 *  [queue.yaml](https://cloud.google.com/appengine/docs/python/config/queueref)
 *  or
 *  [queue.xml](https://cloud.google.com/appengine/docs/standard/java/config/queueref)
 *  is uploaded which does not contain the queue. You cannot directly disable a
 *  queue. When a queue is disabled, tasks can still be added to a queue but the
 *  tasks are not dispatched. To permanently delete this queue and all of its
 *  tasks, call DeleteQueue.
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_Queue_State_Disabled;
/**
 *  Tasks are paused by the user. If the queue is paused then Cloud Tasks will
 *  stop delivering tasks from it, but more tasks can still be added to it by
 *  the user.
 *
 *  Value: "PAUSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_Queue_State_Paused;
/**
 *  The queue is running. Tasks can be dispatched. If the queue was created
 *  using Cloud Tasks and the queue has had no activity (method calls or task
 *  dispatches) for 30 days, the queue may take a few minutes to re-activate.
 *  Some method calls may return NOT_FOUND and tasks may not be dispatched for a
 *  few minutes until the queue has been re-activated.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_Queue_State_Running;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_Queue_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudTasks_RunTaskRequest.responseView

/**
 *  The basic view omits fields which can be large or can contain sensitive
 *  data. This view does not include the body in AppEngineHttpRequest. Bodies
 *  are desirable to return only when needed, because they can be large and
 *  because of the sensitivity of the data that you choose to store in it.
 *
 *  Value: "BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_RunTaskRequest_ResponseView_Basic;
/**
 *  All information is returned. Authorization for FULL requires
 *  `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
 *  permission on the Queue resource.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_RunTaskRequest_ResponseView_Full;
/**
 *  Unspecified. Defaults to BASIC.
 *
 *  Value: "VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_RunTaskRequest_ResponseView_ViewUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudTasks_Task.view

/**
 *  The basic view omits fields which can be large or can contain sensitive
 *  data. This view does not include the body in AppEngineHttpRequest. Bodies
 *  are desirable to return only when needed, because they can be large and
 *  because of the sensitivity of the data that you choose to store in it.
 *
 *  Value: "BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_Task_View_Basic;
/**
 *  All information is returned. Authorization for FULL requires
 *  `cloudtasks.tasks.fullView` [Google IAM](https://cloud.google.com/iam/)
 *  permission on the Queue resource.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_Task_View_Full;
/**
 *  Unspecified. Defaults to BASIC.
 *
 *  Value: "VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudTasks_Task_View_ViewUnspecified;

/**
 *  App Engine HTTP request. The message defines the HTTP request that is sent
 *  to an App Engine app when the task is dispatched. Using AppEngineHttpRequest
 *  requires
 *  [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control)
 *  Google IAM permission for the project and the following scope:
 *  `https://www.googleapis.com/auth/cloud-platform` The task will be delivered
 *  to the App Engine app which belongs to the same project as the queue. For
 *  more information, see [How Requests are
 *  Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)
 *  and how routing is affected by [dispatch
 *  files](https://cloud.google.com/appengine/docs/python/config/dispatchref).
 *  Traffic is encrypted during transport and never leaves Google datacenters.
 *  Because this traffic is carried over a communication mechanism internal to
 *  Google, you cannot explicitly set the protocol (for example, HTTP or HTTPS).
 *  The request to the handler, however, will appear to have used the HTTP
 *  protocol. The AppEngineRouting used to construct the URL that the task is
 *  delivered to can be set at the queue-level or task-level: * If
 *  app_engine_routing_override is set on the queue, this value is used for all
 *  tasks in the queue, no matter what the setting is for the task-level
 *  app_engine_routing. The `url` that the task will be sent to is: * `url =`
 *  host `+` relative_uri Tasks can be dispatched to secure app handlers,
 *  unsecure app handlers, and URIs restricted with [`login:
 *  admin`](https://cloud.google.com/appengine/docs/standard/python/config/appref).
 *  Because tasks are not run as any user, they cannot be dispatched to URIs
 *  restricted with [`login:
 *  required`](https://cloud.google.com/appengine/docs/standard/python/config/appref)
 *  Task dispatches also do not follow redirects. The task attempt has succeeded
 *  if the app's request handler returns an HTTP response code in the range
 *  [`200` - `299`]. The task attempt has failed if the app's handler returns a
 *  non-2xx response code or Cloud Tasks does not receive response before the
 *  deadline. Failed tasks will be retried according to the retry configuration.
 *  `503` (Service Unavailable) is considered an App Engine system error instead
 *  of an application error and will cause Cloud Tasks' traffic congestion
 *  control to temporarily throttle the queue's dispatches. Unlike other types
 *  of task targets, a `429` (Too Many Requests) response from an app handler
 *  does not cause traffic congestion control to throttle the queue.
 */
@interface GTLRCloudTasks_AppEngineHttpRequest : GTLRObject

/**
 *  Task-level setting for App Engine routing. * If app_engine_routing_override
 *  is set on the queue, this value is used for all tasks in the queue, no
 *  matter what the setting is for the task-level app_engine_routing.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_AppEngineRouting *appEngineRouting;

/**
 *  HTTP request body. A request body is allowed only if the HTTP method is POST
 *  or PUT. It is an error to set a body on a task with an incompatible
 *  HttpMethod.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *body;

/**
 *  HTTP request headers. This map contains the header field names and values.
 *  Headers can be set when the task is created. Repeated headers are not
 *  supported but a header value can contain commas. Cloud Tasks sets some
 *  headers to default values: * `User-Agent`: By default, this header is
 *  `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can
 *  be modified, but Cloud Tasks will append `"AppEngine-Google;
 *  (+http://code.google.com/appengine)"` to the modified `User-Agent`. If the
 *  task has a body, Cloud Tasks sets the following headers: * `Content-Type`:
 *  By default, the `Content-Type` header is set to
 *  `"application/octet-stream"`. The default can be overridden by explicitly
 *  setting `Content-Type` to a particular media type when the task is created.
 *  For example, `Content-Type` can be set to `"application/json"`. *
 *  `Content-Length`: This is computed by Cloud Tasks. This value is output
 *  only. It cannot be changed. The headers below cannot be set or overridden: *
 *  `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some
 *  headers when the task is dispatched, such as headers containing information
 *  about the task; see [request
 *  headers](https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_request_headers).
 *  These headers are set only when the task is dispatched, so they are not
 *  visible when the task is returned in a Cloud Tasks response. Although there
 *  is no specific limit for the maximum number of headers or the size, there is
 *  a limit on the maximum size of the Task. For more information, see the
 *  CreateTask documentation.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_AppEngineHttpRequest_Headers *headers;

/**
 *  The HTTP method to use for the request. The default is POST. The app's
 *  request handler for the task's target URL must be able to handle HTTP
 *  requests with this http_method, otherwise the task attempt fails with error
 *  code 405 (Method Not Allowed). See [Writing a push task request
 *  handler](https://cloud.google.com/appengine/docs/java/taskqueue/push/creating-handlers#writing_a_push_task_request_handler)
 *  and the App Engine documentation for your runtime on [How Requests are
 *  Handled](https://cloud.google.com/appengine/docs/standard/python3/how-requests-are-handled).
 *
 *  Likely values:
 *    @arg @c kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Delete HTTP DELETE
 *        (Value: "DELETE")
 *    @arg @c kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Get HTTP GET
 *        (Value: "GET")
 *    @arg @c kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Head HTTP HEAD
 *        (Value: "HEAD")
 *    @arg @c kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_HttpMethodUnspecified
 *        HTTP method unspecified (Value: "HTTP_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Options HTTP
 *        OPTIONS (Value: "OPTIONS")
 *    @arg @c kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Patch HTTP PATCH
 *        (Value: "PATCH")
 *    @arg @c kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Post HTTP POST
 *        (Value: "POST")
 *    @arg @c kGTLRCloudTasks_AppEngineHttpRequest_HttpMethod_Put HTTP PUT
 *        (Value: "PUT")
 */
@property(nonatomic, copy, nullable) NSString *httpMethod;

/**
 *  The relative URI. The relative URI must begin with "/" and must be a valid
 *  HTTP relative URI. It can contain a path and query string arguments. If the
 *  relative URI is empty, then the root path "/" will be used. No spaces are
 *  allowed, and the maximum length allowed is 2083 characters.
 */
@property(nonatomic, copy, nullable) NSString *relativeUri;

@end


/**
 *  HTTP request headers. This map contains the header field names and values.
 *  Headers can be set when the task is created. Repeated headers are not
 *  supported but a header value can contain commas. Cloud Tasks sets some
 *  headers to default values: * `User-Agent`: By default, this header is
 *  `"AppEngine-Google; (+http://code.google.com/appengine)"`. This header can
 *  be modified, but Cloud Tasks will append `"AppEngine-Google;
 *  (+http://code.google.com/appengine)"` to the modified `User-Agent`. If the
 *  task has a body, Cloud Tasks sets the following headers: * `Content-Type`:
 *  By default, the `Content-Type` header is set to
 *  `"application/octet-stream"`. The default can be overridden by explicitly
 *  setting `Content-Type` to a particular media type when the task is created.
 *  For example, `Content-Type` can be set to `"application/json"`. *
 *  `Content-Length`: This is computed by Cloud Tasks. This value is output
 *  only. It cannot be changed. The headers below cannot be set or overridden: *
 *  `Host` * `X-Google-*` * `X-AppEngine-*` In addition, Cloud Tasks sets some
 *  headers when the task is dispatched, such as headers containing information
 *  about the task; see [request
 *  headers](https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_request_headers).
 *  These headers are set only when the task is dispatched, so they are not
 *  visible when the task is returned in a Cloud Tasks response. Although there
 *  is no specific limit for the maximum number of headers or the size, there is
 *  a limit on the maximum size of the Task. For more information, see the
 *  CreateTask documentation.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudTasks_AppEngineHttpRequest_Headers : GTLRObject
@end


/**
 *  App Engine Routing. Defines routing characteristics specific to App Engine -
 *  service, version, and instance. For more information about services,
 *  versions, and instances see [An Overview of App
 *  Engine](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine),
 *  [Microservices Architecture on Google App
 *  Engine](https://cloud.google.com/appengine/docs/python/microservices-on-app-engine),
 *  [App Engine Standard request
 *  routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed),
 *  and [App Engine Flex request
 *  routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
 *  Using AppEngineRouting requires
 *  [`appengine.applications.get`](https://cloud.google.com/appengine/docs/admin-api/access-control)
 *  Google IAM permission for the project and the following scope:
 *  `https://www.googleapis.com/auth/cloud-platform`
 */
@interface GTLRCloudTasks_AppEngineRouting : GTLRObject

/**
 *  Output only. The host that the task is sent to. The host is constructed from
 *  the domain name of the app associated with the queue's project ID (for
 *  example .appspot.com), and the service, version, and instance. Tasks which
 *  were created using the App Engine SDK might have a custom domain name. For
 *  more information, see [How Requests are
 *  Routed](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed).
 */
@property(nonatomic, copy, nullable) NSString *host;

/**
 *  App instance. By default, the task is sent to an instance which is available
 *  when the task is attempted. Requests can only be sent to a specific instance
 *  if [manual scaling is used in App Engine
 *  Standard](https://cloud.google.com/appengine/docs/python/an-overview-of-app-engine?hl=en_US#scaling_types_and_instance_classes).
 *  App Engine Flex does not support instances. For more information, see [App
 *  Engine Standard request
 *  routing](https://cloud.google.com/appengine/docs/standard/python/how-requests-are-routed)
 *  and [App Engine Flex request
 *  routing](https://cloud.google.com/appengine/docs/flexible/python/how-requests-are-routed).
 */
@property(nonatomic, copy, nullable) NSString *instance;

/**
 *  App service. By default, the task is sent to the service which is the
 *  default service when the task is attempted. For some queues or tasks which
 *  were created using the App Engine Task Queue API, host is not parsable into
 *  service, version, and instance. For example, some tasks which were created
 *  using the App Engine SDK use a custom domain name; custom domains are not
 *  parsed by Cloud Tasks. If host is not parsable, then service, version, and
 *  instance are the empty string.
 */
@property(nonatomic, copy, nullable) NSString *service;

/**
 *  App version. By default, the task is sent to the version which is the
 *  default version when the task is attempted. For some queues or tasks which
 *  were created using the App Engine Task Queue API, host is not parsable into
 *  service, version, and instance. For example, some tasks which were created
 *  using the App Engine SDK use a custom domain name; custom domains are not
 *  parsed by Cloud Tasks. If host is not parsable, then service, version, and
 *  instance are the empty string.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  The status of a task attempt.
 */
@interface GTLRCloudTasks_Attempt : GTLRObject

/**
 *  Output only. The time that this attempt was dispatched. `dispatch_time` will
 *  be truncated to the nearest microsecond.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *dispatchTime;

/**
 *  Output only. The response from the worker for this attempt. If
 *  `response_time` is unset, then the task has not been attempted or is
 *  currently running and the `response_status` field is meaningless.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_Status *responseStatus;

/**
 *  Output only. The time that this attempt response was received.
 *  `response_time` will be truncated to the nearest microsecond.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *responseTime;

/**
 *  Output only. The time that this attempt was scheduled. `schedule_time` will
 *  be truncated to the nearest microsecond.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleTime;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRCloudTasks_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`:
 *  An email address (plus unique identifier) representing a user that has been
 *  recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. * `domain:{domain}`: The G Suite domain (primary) that
 *  represents all the users of that domain. For example, `google.com` or
 *  `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  Request message for CreateTask.
 */
@interface GTLRCloudTasks_CreateTaskRequest : GTLRObject

/**
 *  The response_view specifies which subset of the Task will be returned. By
 *  default response_view is BASIC; not all information is retrieved by default
 *  because some data, such as payloads, might be desirable to return only when
 *  needed because of its large size or because of the sensitivity of data that
 *  it contains. Authorization for FULL requires `cloudtasks.tasks.fullView`
 *  [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudTasks_CreateTaskRequest_ResponseView_Basic The basic
 *        view omits fields which can be large or can contain sensitive data.
 *        This view does not include the body in AppEngineHttpRequest. Bodies
 *        are desirable to return only when needed, because they can be large
 *        and because of the sensitivity of the data that you choose to store in
 *        it. (Value: "BASIC")
 *    @arg @c kGTLRCloudTasks_CreateTaskRequest_ResponseView_Full All
 *        information is returned. Authorization for FULL requires
 *        `cloudtasks.tasks.fullView` [Google
 *        IAM](https://cloud.google.com/iam/) permission on the Queue resource.
 *        (Value: "FULL")
 *    @arg @c kGTLRCloudTasks_CreateTaskRequest_ResponseView_ViewUnspecified
 *        Unspecified. Defaults to BASIC. (Value: "VIEW_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *responseView;

/**
 *  Required. The task to add. Task names have the following format:
 *  `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID`.
 *  The user can optionally specify a task name. If a name is not specified then
 *  the system will generate a random unique task id, which will be set in the
 *  task returned in the response. If schedule_time is not set or is in the past
 *  then Cloud Tasks will set it to the current time. Task De-duplication:
 *  Explicitly specifying a task ID enables task de-duplication. If a task's ID
 *  is identical to that of an existing task or a task that was deleted or
 *  executed recently then the call will fail with ALREADY_EXISTS. If the task's
 *  queue was created using Cloud Tasks, then another task with the same name
 *  can't be created for ~1hour after the original task was deleted or executed.
 *  If the task's queue was created using queue.yaml or queue.xml, then another
 *  task with the same name can't be created for ~9days after the original task
 *  was deleted or executed. Because there is an extra lookup cost to identify
 *  duplicate task names, these CreateTask calls have significantly increased
 *  latency. Using hashed strings for the task id or for the prefix of the task
 *  id is recommended. Choosing task ids that are sequential or have sequential
 *  prefixes, for example using a timestamp, causes an increase in latency and
 *  error rates in all task commands. The infrastructure relies on an
 *  approximately uniform distribution of task ids to store and serve tasks
 *  efficiently.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_Task *task;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRCloudTasks_Empty : GTLRObject
@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRCloudTasks_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Request message for `GetIamPolicy` method.
 */
@interface GTLRCloudTasks_GetIamPolicyRequest : GTLRObject

/**
 *  OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *  `GetIamPolicy`.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_GetPolicyOptions *options;

@end


/**
 *  Encapsulates settings provided to GetIamPolicy.
 */
@interface GTLRCloudTasks_GetPolicyOptions : GTLRObject

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedPolicyVersion;

@end


/**
 *  HTTP request. The task will be pushed to the worker as an HTTP request. If
 *  the worker or the redirected worker acknowledges the task by returning a
 *  successful HTTP response code ([`200` - `299`]), the task will be removed
 *  from the queue. If any other HTTP response code is returned or no response
 *  is received, the task will be retried according to the following: *
 *  User-specified throttling: retry configuration, rate limits, and the queue's
 *  state. * System throttling: To prevent the worker from overloading, Cloud
 *  Tasks may temporarily reduce the queue's effective rate. User-specified
 *  settings will not be changed. System throttling happens because: * Cloud
 *  Tasks backs off on all errors. Normally the backoff specified in rate limits
 *  will be used. But if the worker returns `429` (Too Many Requests), `503`
 *  (Service Unavailable), or the rate of errors is high, Cloud Tasks will use a
 *  higher backoff rate. The retry specified in the `Retry-After` HTTP response
 *  header is considered. * To prevent traffic spikes and to smooth sudden
 *  increases in traffic, dispatches ramp up slowly when the queue is newly
 *  created or idle and if large numbers of tasks suddenly become available to
 *  dispatch (due to spikes in create task rates, the queue being unpaused, or
 *  many tasks that are scheduled at the same time).
 */
@interface GTLRCloudTasks_HttpRequest : GTLRObject

/**
 *  HTTP request body. A request body is allowed only if the HTTP method is
 *  POST, PUT, or PATCH. It is an error to set body on a task with an
 *  incompatible HttpMethod.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *body;

/**
 *  HTTP request headers. This map contains the header field names and values.
 *  Headers can be set when the task is created. These headers represent a
 *  subset of the headers that will accompany the task's HTTP request. Some HTTP
 *  request headers will be ignored or replaced. A partial list of headers that
 *  will be ignored or replaced is: * Host: This will be computed by Cloud Tasks
 *  and derived from HttpRequest.url. * Content-Length: This will be computed by
 *  Cloud Tasks. * User-Agent: This will be set to `"Google-Cloud-Tasks"`. *
 *  `X-Google-*`: Google use only. * `X-AppEngine-*`: Google use only.
 *  `Content-Type` won't be set by Cloud Tasks. You can explicitly set
 *  `Content-Type` to a media type when the task is created. For example,
 *  `Content-Type` can be set to `"application/octet-stream"` or
 *  `"application/json"`. Headers which can have multiple values (according to
 *  RFC2616) can be specified using comma-separated values. The size of the
 *  headers must be less than 80KB.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_HttpRequest_Headers *headers;

/**
 *  The HTTP method to use for the request. The default is POST.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudTasks_HttpRequest_HttpMethod_Delete HTTP DELETE (Value:
 *        "DELETE")
 *    @arg @c kGTLRCloudTasks_HttpRequest_HttpMethod_Get HTTP GET (Value: "GET")
 *    @arg @c kGTLRCloudTasks_HttpRequest_HttpMethod_Head HTTP HEAD (Value:
 *        "HEAD")
 *    @arg @c kGTLRCloudTasks_HttpRequest_HttpMethod_HttpMethodUnspecified HTTP
 *        method unspecified (Value: "HTTP_METHOD_UNSPECIFIED")
 *    @arg @c kGTLRCloudTasks_HttpRequest_HttpMethod_Options HTTP OPTIONS
 *        (Value: "OPTIONS")
 *    @arg @c kGTLRCloudTasks_HttpRequest_HttpMethod_Patch HTTP PATCH (Value:
 *        "PATCH")
 *    @arg @c kGTLRCloudTasks_HttpRequest_HttpMethod_Post HTTP POST (Value:
 *        "POST")
 *    @arg @c kGTLRCloudTasks_HttpRequest_HttpMethod_Put HTTP PUT (Value: "PUT")
 */
@property(nonatomic, copy, nullable) NSString *httpMethod;

/**
 *  If specified, an [OAuth
 *  token](https://developers.google.com/identity/protocols/OAuth2) will be
 *  generated and attached as an `Authorization` header in the HTTP request.
 *  This type of authorization should generally only be used when calling Google
 *  APIs hosted on *.googleapis.com.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_OAuthToken *oauthToken;

/**
 *  If specified, an
 *  [OIDC](https://developers.google.com/identity/protocols/OpenIDConnect) token
 *  will be generated and attached as an `Authorization` header in the HTTP
 *  request. This type of authorization can be used for many scenarios,
 *  including calling Cloud Run, or endpoints where you intend to validate the
 *  token yourself.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_OidcToken *oidcToken;

/**
 *  Required. The full url path that the request will be sent to. This string
 *  must begin with either "http://" or "https://". Some examples are:
 *  `http://acme.com` and `https://acme.com/sales:8080`. Cloud Tasks will encode
 *  some characters for safety and compatibility. The maximum allowed URL length
 *  is 2083 characters after encoding. The `Location` header response from a
 *  redirect response [`300` - `399`] may be followed. The redirect is not
 *  counted as a separate attempt.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  HTTP request headers. This map contains the header field names and values.
 *  Headers can be set when the task is created. These headers represent a
 *  subset of the headers that will accompany the task's HTTP request. Some HTTP
 *  request headers will be ignored or replaced. A partial list of headers that
 *  will be ignored or replaced is: * Host: This will be computed by Cloud Tasks
 *  and derived from HttpRequest.url. * Content-Length: This will be computed by
 *  Cloud Tasks. * User-Agent: This will be set to `"Google-Cloud-Tasks"`. *
 *  `X-Google-*`: Google use only. * `X-AppEngine-*`: Google use only.
 *  `Content-Type` won't be set by Cloud Tasks. You can explicitly set
 *  `Content-Type` to a media type when the task is created. For example,
 *  `Content-Type` can be set to `"application/octet-stream"` or
 *  `"application/json"`. Headers which can have multiple values (according to
 *  RFC2616) can be specified using comma-separated values. The size of the
 *  headers must be less than 80KB.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudTasks_HttpRequest_Headers : GTLRObject
@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudTasks_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudTasks_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for ListQueues.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "queues" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudTasks_ListQueuesResponse : GTLRCollectionObject

/**
 *  A token to retrieve next page of results. To return the next page of
 *  results, call ListQueues with this value as the page_token. If the
 *  next_page_token is empty, there are no more results. The page token is valid
 *  for only 2 hours.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of queues.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudTasks_Queue *> *queues;

@end


/**
 *  Response message for listing tasks using ListTasks.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "tasks" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudTasks_ListTasksResponse : GTLRCollectionObject

/**
 *  A token to retrieve next page of results. To return the next page of
 *  results, call ListTasks with this value as the page_token. If the
 *  next_page_token is empty, there are no more results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of tasks.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudTasks_Task *> *tasks;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRCloudTasks_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudTasks_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudTasks_Location_Metadata : GTLRObject
@end


/**
 *  Contains information needed for generating an [OAuth
 *  token](https://developers.google.com/identity/protocols/OAuth2). This type
 *  of authorization should generally only be used when calling Google APIs
 *  hosted on *.googleapis.com.
 */
@interface GTLRCloudTasks_OAuthToken : GTLRObject

/**
 *  OAuth scope to be used for generating OAuth access token. If not specified,
 *  "https://www.googleapis.com/auth/cloud-platform" will be used.
 */
@property(nonatomic, copy, nullable) NSString *scope;

/**
 *  [Service account email](https://cloud.google.com/iam/docs/service-accounts)
 *  to be used for generating OAuth token. The service account must be within
 *  the same project as the queue. The caller must have
 *  iam.serviceAccounts.actAs permission for the service account.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccountEmail;

@end


/**
 *  Contains information needed for generating an [OpenID Connect
 *  token](https://developers.google.com/identity/protocols/OpenIDConnect). This
 *  type of authorization can be used for many scenarios, including calling
 *  Cloud Run, or endpoints where you intend to validate the token yourself.
 */
@interface GTLRCloudTasks_OidcToken : GTLRObject

/**
 *  Audience to be used when generating OIDC token. If not specified, the URI
 *  specified in target will be used.
 */
@property(nonatomic, copy, nullable) NSString *audience;

/**
 *  [Service account email](https://cloud.google.com/iam/docs/service-accounts)
 *  to be used for generating OIDC token. The service account must be within the
 *  same project as the queue. The caller must have iam.serviceAccounts.actAs
 *  permission for the service account.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccountEmail;

@end


/**
 *  Request message for PauseQueue.
 */
@interface GTLRCloudTasks_PauseQueueRequest : GTLRObject
@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRCloudTasks_Policy : GTLRObject

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudTasks_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Request message for PurgeQueue.
 */
@interface GTLRCloudTasks_PurgeQueueRequest : GTLRObject
@end


/**
 *  A queue is a container of related tasks. Queues are configured to manage how
 *  those tasks are dispatched. Configurable properties include rate limits,
 *  retry options, queue types, and others.
 */
@interface GTLRCloudTasks_Queue : GTLRObject

/**
 *  Overrides for task-level app_engine_routing. These settings apply only to
 *  App Engine tasks in this queue. Http tasks are not affected. If set,
 *  `app_engine_routing_override` is used for all App Engine tasks in the queue,
 *  no matter what the setting is for the task-level app_engine_routing.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_AppEngineRouting *appEngineRoutingOverride;

/**
 *  Caller-specified and required in CreateQueue, after which it becomes output
 *  only. The queue name. The queue name must have the following format:
 *  `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID` * `PROJECT_ID`
 *  can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-), colons (:), or
 *  periods (.). For more information, see [Identifying
 *  projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects)
 *  * `LOCATION_ID` is the canonical ID for the queue's location. The list of
 *  available locations can be obtained by calling ListLocations. For more
 *  information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can
 *  contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum
 *  length is 100 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The last time this queue was purged. All tasks that were
 *  created before this time were purged. A queue can be purged using
 *  PurgeQueue, the [App Engine Task Queue SDK, or the Cloud
 *  Console](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/deleting-tasks-and-queues#purging_all_tasks_from_a_queue).
 *  Purge time will be truncated to the nearest microsecond. Purge time will be
 *  unset if the queue has never been purged.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *purgeTime;

/**
 *  Rate limits for task dispatches. rate_limits and retry_config are related
 *  because they both control task attempts. However they control task attempts
 *  in different ways: * rate_limits controls the total rate of dispatches from
 *  a queue (i.e. all traffic dispatched from the queue, regardless of whether
 *  the dispatch is from a first attempt or a retry). * retry_config controls
 *  what happens to particular a task after its first attempt fails. That is,
 *  retry_config controls task retries (the second attempt, third attempt, etc).
 *  The queue's actual dispatch rate is the result of: * Number of tasks in the
 *  queue * User-specified throttling: rate_limits, retry_config, and the
 *  queue's state. * System throttling due to `429` (Too Many Requests) or `503`
 *  (Service Unavailable) responses from the worker, high error rates, or to
 *  smooth sudden large traffic spikes.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_RateLimits *rateLimits;

/**
 *  Settings that determine the retry behavior. * For tasks created using Cloud
 *  Tasks: the queue-level retry settings apply to all tasks in the queue that
 *  were created using Cloud Tasks. Retry settings cannot be set on individual
 *  tasks. * For tasks created using the App Engine SDK: the queue-level retry
 *  settings apply to all tasks in the queue which do not have retry settings
 *  explicitly set on the task and were created by the App Engine SDK. See [App
 *  Engine
 *  documentation](https://cloud.google.com/appengine/docs/standard/python/taskqueue/push/retrying-tasks).
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_RetryConfig *retryConfig;

/**
 *  Configuration options for writing logs to [Stackdriver
 *  Logging](https://cloud.google.com/logging/docs/). If this field is unset,
 *  then no logs are written.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_StackdriverLoggingConfig *stackdriverLoggingConfig;

/**
 *  Output only. The state of the queue. `state` can only be changed by calling
 *  PauseQueue, ResumeQueue, or uploading
 *  [queue.yaml/xml](https://cloud.google.com/appengine/docs/python/config/queueref).
 *  UpdateQueue cannot be used to change `state`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudTasks_Queue_State_Disabled The queue is disabled. A
 *        queue becomes `DISABLED` when
 *        [queue.yaml](https://cloud.google.com/appengine/docs/python/config/queueref)
 *        or
 *        [queue.xml](https://cloud.google.com/appengine/docs/standard/java/config/queueref)
 *        is uploaded which does not contain the queue. You cannot directly
 *        disable a queue. When a queue is disabled, tasks can still be added to
 *        a queue but the tasks are not dispatched. To permanently delete this
 *        queue and all of its tasks, call DeleteQueue. (Value: "DISABLED")
 *    @arg @c kGTLRCloudTasks_Queue_State_Paused Tasks are paused by the user.
 *        If the queue is paused then Cloud Tasks will stop delivering tasks
 *        from it, but more tasks can still be added to it by the user. (Value:
 *        "PAUSED")
 *    @arg @c kGTLRCloudTasks_Queue_State_Running The queue is running. Tasks
 *        can be dispatched. If the queue was created using Cloud Tasks and the
 *        queue has had no activity (method calls or task dispatches) for 30
 *        days, the queue may take a few minutes to re-activate. Some method
 *        calls may return NOT_FOUND and tasks may not be dispatched for a few
 *        minutes until the queue has been re-activated. (Value: "RUNNING")
 *    @arg @c kGTLRCloudTasks_Queue_State_StateUnspecified Unspecified state.
 *        (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Rate limits. This message determines the maximum rate that tasks can be
 *  dispatched by a queue, regardless of whether the dispatch is a first task
 *  attempt or a retry. Note: The debugging command, RunTask, will run a task
 *  even if the queue has reached its RateLimits.
 */
@interface GTLRCloudTasks_RateLimits : GTLRObject

/**
 *  Output only. The max burst size. Max burst size limits how fast tasks in
 *  queue are processed when many tasks are in the queue and the rate is high.
 *  This field allows the queue to have a high rate so processing starts shortly
 *  after a task is enqueued, but still limits resource usage when many tasks
 *  are enqueued in a short period of time. The [token
 *  bucket](https://wikipedia.org/wiki/Token_Bucket) algorithm is used to
 *  control the rate of task dispatches. Each queue has a token bucket that
 *  holds tokens, up to the maximum specified by `max_burst_size`. Each time a
 *  task is dispatched, a token is removed from the bucket. Tasks will be
 *  dispatched until the queue's bucket runs out of tokens. The bucket will be
 *  continuously refilled with new tokens based on max_dispatches_per_second.
 *  Cloud Tasks will pick the value of `max_burst_size` based on the value of
 *  max_dispatches_per_second. For queues that were created or updated using
 *  `queue.yaml/xml`, `max_burst_size` is equal to
 *  [bucket_size](https://cloud.google.com/appengine/docs/standard/python/config/queueref#bucket_size).
 *  Since `max_burst_size` is output only, if UpdateQueue is called on a queue
 *  created by `queue.yaml/xml`, `max_burst_size` will be reset based on the
 *  value of max_dispatches_per_second, regardless of whether
 *  max_dispatches_per_second is updated.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxBurstSize;

/**
 *  The maximum number of concurrent tasks that Cloud Tasks allows to be
 *  dispatched for this queue. After this threshold has been reached, Cloud
 *  Tasks stops dispatching tasks until the number of concurrent requests
 *  decreases. If unspecified when the queue is created, Cloud Tasks will pick
 *  the default. The maximum allowed value is 5,000. This field has the same
 *  meaning as [max_concurrent_requests in
 *  queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#max_concurrent_requests).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxConcurrentDispatches;

/**
 *  The maximum rate at which tasks are dispatched from this queue. If
 *  unspecified when the queue is created, Cloud Tasks will pick the default. *
 *  The maximum allowed value is 500. This field has the same meaning as [rate
 *  in
 *  queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#rate).
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxDispatchesPerSecond;

@end


/**
 *  Request message for ResumeQueue.
 */
@interface GTLRCloudTasks_ResumeQueueRequest : GTLRObject
@end


/**
 *  Retry config. These settings determine when a failed task attempt is
 *  retried.
 */
@interface GTLRCloudTasks_RetryConfig : GTLRObject

/**
 *  Number of attempts per task. Cloud Tasks will attempt the task
 *  `max_attempts` times (that is, if the first attempt fails, then there will
 *  be `max_attempts - 1` retries). Must be >= -1. If unspecified when the queue
 *  is created, Cloud Tasks will pick the default. -1 indicates unlimited
 *  attempts. This field has the same meaning as [task_retry_limit in
 *  queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxAttempts;

/**
 *  A task will be scheduled for retry between min_backoff and max_backoff
 *  duration after it fails, if the queue's RetryConfig specifies that the task
 *  should be retried. If unspecified when the queue is created, Cloud Tasks
 *  will pick the default. `max_backoff` will be truncated to the nearest
 *  second. This field has the same meaning as [max_backoff_seconds in
 *  queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
 */
@property(nonatomic, strong, nullable) GTLRDuration *maxBackoff;

/**
 *  The time between retries will double `max_doublings` times. A task's retry
 *  interval starts at min_backoff, then doubles `max_doublings` times, then
 *  increases linearly, and finally retries at intervals of max_backoff up to
 *  max_attempts times. For example, if min_backoff is 10s, max_backoff is 300s,
 *  and `max_doublings` is 3, then the a task will first be retried in 10s. The
 *  retry interval will double three times, and then increase linearly by 2^3 *
 *  10s. Finally, the task will retry at intervals of max_backoff until the task
 *  has been attempted max_attempts times. Thus, the requests will retry at 10s,
 *  20s, 40s, 80s, 160s, 240s, 300s, 300s, .... If unspecified when the queue is
 *  created, Cloud Tasks will pick the default. This field has the same meaning
 *  as [max_doublings in
 *  queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxDoublings;

/**
 *  If positive, `max_retry_duration` specifies the time limit for retrying a
 *  failed task, measured from when the task was first attempted. Once
 *  `max_retry_duration` time has passed *and* the task has been attempted
 *  max_attempts times, no further attempts will be made and the task will be
 *  deleted. If zero, then the task age is unlimited. If unspecified when the
 *  queue is created, Cloud Tasks will pick the default. `max_retry_duration`
 *  will be truncated to the nearest second. This field has the same meaning as
 *  [task_age_limit in
 *  queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
 */
@property(nonatomic, strong, nullable) GTLRDuration *maxRetryDuration;

/**
 *  A task will be scheduled for retry between min_backoff and max_backoff
 *  duration after it fails, if the queue's RetryConfig specifies that the task
 *  should be retried. If unspecified when the queue is created, Cloud Tasks
 *  will pick the default. `min_backoff` will be truncated to the nearest
 *  second. This field has the same meaning as [min_backoff_seconds in
 *  queue.yaml/xml](https://cloud.google.com/appengine/docs/standard/python/config/queueref#retry_parameters).
 */
@property(nonatomic, strong, nullable) GTLRDuration *minBackoff;

@end


/**
 *  Request message for forcing a task to run now using RunTask.
 */
@interface GTLRCloudTasks_RunTaskRequest : GTLRObject

/**
 *  The response_view specifies which subset of the Task will be returned. By
 *  default response_view is BASIC; not all information is retrieved by default
 *  because some data, such as payloads, might be desirable to return only when
 *  needed because of its large size or because of the sensitivity of data that
 *  it contains. Authorization for FULL requires `cloudtasks.tasks.fullView`
 *  [Google IAM](https://cloud.google.com/iam/) permission on the Task resource.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudTasks_RunTaskRequest_ResponseView_Basic The basic view
 *        omits fields which can be large or can contain sensitive data. This
 *        view does not include the body in AppEngineHttpRequest. Bodies are
 *        desirable to return only when needed, because they can be large and
 *        because of the sensitivity of the data that you choose to store in it.
 *        (Value: "BASIC")
 *    @arg @c kGTLRCloudTasks_RunTaskRequest_ResponseView_Full All information
 *        is returned. Authorization for FULL requires
 *        `cloudtasks.tasks.fullView` [Google
 *        IAM](https://cloud.google.com/iam/) permission on the Queue resource.
 *        (Value: "FULL")
 *    @arg @c kGTLRCloudTasks_RunTaskRequest_ResponseView_ViewUnspecified
 *        Unspecified. Defaults to BASIC. (Value: "VIEW_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *responseView;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRCloudTasks_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_Policy *policy;

@end


/**
 *  Configuration options for writing logs to [Stackdriver
 *  Logging](https://cloud.google.com/logging/docs/).
 */
@interface GTLRCloudTasks_StackdriverLoggingConfig : GTLRObject

/**
 *  Specifies the fraction of operations to write to [Stackdriver
 *  Logging](https://cloud.google.com/logging/docs/). This field may contain any
 *  value between 0.0 and 1.0, inclusive. 0.0 is the default and means that no
 *  operations are logged.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *samplingRatio;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudTasks_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudTasks_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudTasks_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudTasks_Status_Details_Item : GTLRObject
@end


/**
 *  A unit of scheduled work.
 */
@interface GTLRCloudTasks_Task : GTLRObject

/**
 *  HTTP request that is sent to the App Engine app handler. An App Engine task
 *  is a task that has AppEngineHttpRequest set.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_AppEngineHttpRequest *appEngineHttpRequest;

/**
 *  Output only. The time that the task was created. `create_time` will be
 *  truncated to the nearest second.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The number of attempts dispatched. This count includes attempts
 *  which have been dispatched but haven't received a response.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dispatchCount;

/**
 *  The deadline for requests sent to the worker. If the worker does not respond
 *  by this deadline then the request is cancelled and the attempt is marked as
 *  a `DEADLINE_EXCEEDED` failure. Cloud Tasks will retry the task according to
 *  the RetryConfig. Note that when the request is cancelled, Cloud Tasks will
 *  stop listening for the response, but whether the worker stops processing
 *  depends on the worker. For example, if the worker is stuck, it may not react
 *  to cancelled requests. The default and maximum values depend on the type of
 *  request: * For HTTP tasks, the default is 10 minutes. The deadline must be
 *  in the interval [15 seconds, 30 minutes]. * For App Engine tasks, 0
 *  indicates that the request has the default deadline. The default deadline
 *  depends on the [scaling
 *  type](https://cloud.google.com/appengine/docs/standard/go/how-instances-are-managed#instance_scaling)
 *  of the service: 10 minutes for standard apps with automatic scaling, 24
 *  hours for standard apps with manual and basic scaling, and 60 minutes for
 *  flex apps. If the request deadline is set, it must be in the interval [15
 *  seconds, 24 hours 15 seconds]. Regardless of the task's `dispatch_deadline`,
 *  the app handler will not run for longer than than the service's timeout. We
 *  recommend setting the `dispatch_deadline` to at most a few seconds more than
 *  the app handler's timeout. For more information see
 *  [Timeouts](https://cloud.google.com/tasks/docs/creating-appengine-handlers#timeouts).
 *  `dispatch_deadline` will be truncated to the nearest millisecond. The
 *  deadline is an approximate deadline.
 */
@property(nonatomic, strong, nullable) GTLRDuration *dispatchDeadline;

/**
 *  Output only. The status of the task's first attempt. Only dispatch_time will
 *  be set. The other Attempt information is not retained by Cloud Tasks.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_Attempt *firstAttempt;

/**
 *  HTTP request that is sent to the worker. An HTTP task is a task that has
 *  HttpRequest set.
 */
@property(nonatomic, strong, nullable) GTLRCloudTasks_HttpRequest *httpRequest;

/** Output only. The status of the task's last attempt. */
@property(nonatomic, strong, nullable) GTLRCloudTasks_Attempt *lastAttempt;

/**
 *  Optionally caller-specified in CreateTask. The task name. The task name must
 *  have the following format:
 *  `projects/PROJECT_ID/locations/LOCATION_ID/queues/QUEUE_ID/tasks/TASK_ID` *
 *  `PROJECT_ID` can contain letters ([A-Za-z]), numbers ([0-9]), hyphens (-),
 *  colons (:), or periods (.). For more information, see [Identifying
 *  projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects#identifying_projects)
 *  * `LOCATION_ID` is the canonical ID for the task's location. The list of
 *  available locations can be obtained by calling ListLocations. For more
 *  information, see https://cloud.google.com/about/locations/. * `QUEUE_ID` can
 *  contain letters ([A-Za-z]), numbers ([0-9]), or hyphens (-). The maximum
 *  length is 100 characters. * `TASK_ID` can contain only letters ([A-Za-z]),
 *  numbers ([0-9]), hyphens (-), or underscores (_). The maximum length is 500
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The number of attempts which have received a response.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *responseCount;

/**
 *  The time when the task is scheduled to be attempted or retried.
 *  `schedule_time` will be truncated to the nearest microsecond.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleTime;

/**
 *  Output only. The view specifies which subset of the Task has been returned.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudTasks_Task_View_Basic The basic view omits fields which
 *        can be large or can contain sensitive data. This view does not include
 *        the body in AppEngineHttpRequest. Bodies are desirable to return only
 *        when needed, because they can be large and because of the sensitivity
 *        of the data that you choose to store in it. (Value: "BASIC")
 *    @arg @c kGTLRCloudTasks_Task_View_Full All information is returned.
 *        Authorization for FULL requires `cloudtasks.tasks.fullView` [Google
 *        IAM](https://cloud.google.com/iam/) permission on the Queue resource.
 *        (Value: "FULL")
 *    @arg @c kGTLRCloudTasks_Task_View_ViewUnspecified Unspecified. Defaults to
 *        BASIC. (Value: "VIEW_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *view;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRCloudTasks_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRCloudTasks_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
