// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Deploy API (clouddeploy/v1)
// Documentation:
//   https://cloud.google.com/deploy/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudDeploy_AdvanceChildRolloutJob;
@class GTLRCloudDeploy_AdvanceChildRolloutJobRun;
@class GTLRCloudDeploy_AdvanceRolloutOperation;
@class GTLRCloudDeploy_AdvanceRolloutRule;
@class GTLRCloudDeploy_AnthosCluster;
@class GTLRCloudDeploy_AuditConfig;
@class GTLRCloudDeploy_AuditLogConfig;
@class GTLRCloudDeploy_Automation;
@class GTLRCloudDeploy_Automation_Annotations;
@class GTLRCloudDeploy_Automation_Labels;
@class GTLRCloudDeploy_AutomationResourceSelector;
@class GTLRCloudDeploy_AutomationRolloutMetadata;
@class GTLRCloudDeploy_AutomationRule;
@class GTLRCloudDeploy_AutomationRuleCondition;
@class GTLRCloudDeploy_AutomationRun;
@class GTLRCloudDeploy_Binding;
@class GTLRCloudDeploy_BuildArtifact;
@class GTLRCloudDeploy_Canary;
@class GTLRCloudDeploy_CanaryDeployment;
@class GTLRCloudDeploy_ChildRolloutJobs;
@class GTLRCloudDeploy_CloudRunConfig;
@class GTLRCloudDeploy_CloudRunLocation;
@class GTLRCloudDeploy_CloudRunMetadata;
@class GTLRCloudDeploy_CloudRunRenderMetadata;
@class GTLRCloudDeploy_CreateChildRolloutJob;
@class GTLRCloudDeploy_CreateChildRolloutJobRun;
@class GTLRCloudDeploy_CustomCanaryDeployment;
@class GTLRCloudDeploy_CustomMetadata;
@class GTLRCloudDeploy_CustomMetadata_Values;
@class GTLRCloudDeploy_CustomTarget;
@class GTLRCloudDeploy_CustomTargetDeployMetadata;
@class GTLRCloudDeploy_CustomTargetSkaffoldActions;
@class GTLRCloudDeploy_CustomTargetType;
@class GTLRCloudDeploy_CustomTargetType_Annotations;
@class GTLRCloudDeploy_CustomTargetType_Labels;
@class GTLRCloudDeploy_Date;
@class GTLRCloudDeploy_DefaultPool;
@class GTLRCloudDeploy_DeliveryPipeline;
@class GTLRCloudDeploy_DeliveryPipeline_Annotations;
@class GTLRCloudDeploy_DeliveryPipeline_Labels;
@class GTLRCloudDeploy_DeployArtifact;
@class GTLRCloudDeploy_DeployJob;
@class GTLRCloudDeploy_DeployJobRun;
@class GTLRCloudDeploy_DeployJobRunMetadata;
@class GTLRCloudDeploy_DeploymentJobs;
@class GTLRCloudDeploy_DeployParameters;
@class GTLRCloudDeploy_DeployParameters_MatchTargetLabels;
@class GTLRCloudDeploy_DeployParameters_Values;
@class GTLRCloudDeploy_ExecutionConfig;
@class GTLRCloudDeploy_Expr;
@class GTLRCloudDeploy_GatewayServiceMesh;
@class GTLRCloudDeploy_GkeCluster;
@class GTLRCloudDeploy_Job;
@class GTLRCloudDeploy_JobRun;
@class GTLRCloudDeploy_KubernetesConfig;
@class GTLRCloudDeploy_Location;
@class GTLRCloudDeploy_Location_Labels;
@class GTLRCloudDeploy_Location_Metadata;
@class GTLRCloudDeploy_Metadata;
@class GTLRCloudDeploy_MultiTarget;
@class GTLRCloudDeploy_Operation;
@class GTLRCloudDeploy_Operation_Metadata;
@class GTLRCloudDeploy_Operation_Response;
@class GTLRCloudDeploy_Phase;
@class GTLRCloudDeploy_PhaseArtifact;
@class GTLRCloudDeploy_PhaseConfig;
@class GTLRCloudDeploy_PipelineCondition;
@class GTLRCloudDeploy_PipelineReadyCondition;
@class GTLRCloudDeploy_Policy;
@class GTLRCloudDeploy_Postdeploy;
@class GTLRCloudDeploy_PostdeployJob;
@class GTLRCloudDeploy_PostdeployJobRun;
@class GTLRCloudDeploy_Predeploy;
@class GTLRCloudDeploy_PredeployJob;
@class GTLRCloudDeploy_PredeployJobRun;
@class GTLRCloudDeploy_PrivatePool;
@class GTLRCloudDeploy_PromoteReleaseOperation;
@class GTLRCloudDeploy_PromoteReleaseRule;
@class GTLRCloudDeploy_Release;
@class GTLRCloudDeploy_Release_Annotations;
@class GTLRCloudDeploy_Release_DeployParameters;
@class GTLRCloudDeploy_Release_Labels;
@class GTLRCloudDeploy_Release_TargetArtifacts;
@class GTLRCloudDeploy_Release_TargetRenders;
@class GTLRCloudDeploy_ReleaseCondition;
@class GTLRCloudDeploy_ReleaseReadyCondition;
@class GTLRCloudDeploy_RenderMetadata;
@class GTLRCloudDeploy_RepairMode;
@class GTLRCloudDeploy_RepairPhase;
@class GTLRCloudDeploy_RepairRolloutOperation;
@class GTLRCloudDeploy_RepairRolloutRule;
@class GTLRCloudDeploy_Retry;
@class GTLRCloudDeploy_RetryAttempt;
@class GTLRCloudDeploy_RetryPhase;
@class GTLRCloudDeploy_Rollback;
@class GTLRCloudDeploy_RollbackAttempt;
@class GTLRCloudDeploy_RollbackTargetConfig;
@class GTLRCloudDeploy_Rollout;
@class GTLRCloudDeploy_Rollout_Annotations;
@class GTLRCloudDeploy_Rollout_Labels;
@class GTLRCloudDeploy_RuntimeConfig;
@class GTLRCloudDeploy_SerialPipeline;
@class GTLRCloudDeploy_ServiceNetworking;
@class GTLRCloudDeploy_SkaffoldGCSSource;
@class GTLRCloudDeploy_SkaffoldGitSource;
@class GTLRCloudDeploy_SkaffoldModules;
@class GTLRCloudDeploy_SkaffoldSupportedCondition;
@class GTLRCloudDeploy_SkaffoldVersion;
@class GTLRCloudDeploy_Stage;
@class GTLRCloudDeploy_Standard;
@class GTLRCloudDeploy_Status;
@class GTLRCloudDeploy_Status_Details_Item;
@class GTLRCloudDeploy_Strategy;
@class GTLRCloudDeploy_Target;
@class GTLRCloudDeploy_Target_Annotations;
@class GTLRCloudDeploy_Target_DeployParameters;
@class GTLRCloudDeploy_Target_Labels;
@class GTLRCloudDeploy_TargetArtifact;
@class GTLRCloudDeploy_TargetArtifact_PhaseArtifacts;
@class GTLRCloudDeploy_TargetAttribute;
@class GTLRCloudDeploy_TargetAttribute_Labels;
@class GTLRCloudDeploy_TargetRender;
@class GTLRCloudDeploy_TargetsPresentCondition;
@class GTLRCloudDeploy_TargetsTypeCondition;
@class GTLRCloudDeploy_VerifyJob;
@class GTLRCloudDeploy_VerifyJobRun;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_AutomationEvent.type

/**
 *  A process aborted.
 *
 *  Value: "TYPE_PROCESS_ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationEvent_Type_TypeProcessAborted;
/**
 *  A Pub/Sub notification failed to be sent.
 *
 *  Value: "TYPE_PUBSUB_NOTIFICATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationEvent_Type_TypePubsubNotificationFailure;
/**
 *  Deprecated: This field is never used. Use release_render log type instead.
 *
 *  Value: "TYPE_RENDER_STATUES_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationEvent_Type_TypeRenderStatuesChange GTLR_DEPRECATED;
/**
 *  Resource deleted.
 *
 *  Value: "TYPE_RESOURCE_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationEvent_Type_TypeResourceDeleted;
/**
 *  Resource state changed.
 *
 *  Value: "TYPE_RESOURCE_STATE_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationEvent_Type_TypeResourceStateChange;
/**
 *  Restriction check failed.
 *
 *  Value: "TYPE_RESTRICTION_VIOLATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationEvent_Type_TypeRestrictionViolated;
/**
 *  Rollout updated.
 *
 *  Value: "TYPE_ROLLOUT_UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationEvent_Type_TypeRolloutUpdate;
/**
 *  Type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationEvent_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_AutomationRun.state

/**
 *  The `AutomationRun` was cancelled.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationRun_State_Cancelled;
/**
 *  The `AutomationRun` has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationRun_State_Failed;
/**
 *  The `AutomationRun` is in progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationRun_State_InProgress;
/**
 *  The `AutomationRun` is pending.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationRun_State_Pending;
/**
 *  The `AutomationRun` has an unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationRun_State_StateUnspecified;
/**
 *  The `AutomationRun` has succeeded.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationRun_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_AutomationRunEvent.type

/**
 *  A process aborted.
 *
 *  Value: "TYPE_PROCESS_ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationRunEvent_Type_TypeProcessAborted;
/**
 *  A Pub/Sub notification failed to be sent.
 *
 *  Value: "TYPE_PUBSUB_NOTIFICATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationRunEvent_Type_TypePubsubNotificationFailure;
/**
 *  Deprecated: This field is never used. Use release_render log type instead.
 *
 *  Value: "TYPE_RENDER_STATUES_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationRunEvent_Type_TypeRenderStatuesChange GTLR_DEPRECATED;
/**
 *  Resource deleted.
 *
 *  Value: "TYPE_RESOURCE_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationRunEvent_Type_TypeResourceDeleted;
/**
 *  Resource state changed.
 *
 *  Value: "TYPE_RESOURCE_STATE_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationRunEvent_Type_TypeResourceStateChange;
/**
 *  Restriction check failed.
 *
 *  Value: "TYPE_RESTRICTION_VIOLATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationRunEvent_Type_TypeRestrictionViolated;
/**
 *  Rollout updated.
 *
 *  Value: "TYPE_ROLLOUT_UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationRunEvent_Type_TypeRolloutUpdate;
/**
 *  Type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AutomationRunEvent_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_DeliveryPipelineNotificationEvent.type

/**
 *  A process aborted.
 *
 *  Value: "TYPE_PROCESS_ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeProcessAborted;
/**
 *  A Pub/Sub notification failed to be sent.
 *
 *  Value: "TYPE_PUBSUB_NOTIFICATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypePubsubNotificationFailure;
/**
 *  Deprecated: This field is never used. Use release_render log type instead.
 *
 *  Value: "TYPE_RENDER_STATUES_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeRenderStatuesChange GTLR_DEPRECATED;
/**
 *  Resource deleted.
 *
 *  Value: "TYPE_RESOURCE_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeResourceDeleted;
/**
 *  Resource state changed.
 *
 *  Value: "TYPE_RESOURCE_STATE_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeResourceStateChange;
/**
 *  Restriction check failed.
 *
 *  Value: "TYPE_RESTRICTION_VIOLATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeRestrictionViolated;
/**
 *  Rollout updated.
 *
 *  Value: "TYPE_ROLLOUT_UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeRolloutUpdate;
/**
 *  Type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_DeployJobRun.failureCause

/**
 *  Cloud Build failed to fulfill Cloud Deploy's request. See failure_message
 *  for additional details.
 *
 *  Value: "CLOUD_BUILD_REQUEST_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeployJobRun_FailureCause_CloudBuildRequestFailed;
/**
 *  Cloud Build is not available, either because it is not enabled or because
 *  Cloud Deploy has insufficient permissions. See [Required
 *  permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
 *
 *  Value: "CLOUD_BUILD_UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeployJobRun_FailureCause_CloudBuildUnavailable;
/**
 *  The deploy job run did not complete within the alloted time.
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeployJobRun_FailureCause_DeadlineExceeded;
/**
 *  The deploy operation had a feature configured that is not supported.
 *
 *  Value: "DEPLOY_FEATURE_NOT_SUPPORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeployJobRun_FailureCause_DeployFeatureNotSupported;
/**
 *  The deploy operation did not complete successfully; check Cloud Build logs.
 *
 *  Value: "EXECUTION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeployJobRun_FailureCause_ExecutionFailed;
/**
 *  No reason for failure is specified.
 *
 *  Value: "FAILURE_CAUSE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeployJobRun_FailureCause_FailureCauseUnspecified;
/**
 *  There were missing resources in the runtime environment required for a
 *  canary deployment. Check the Cloud Build logs for more information.
 *
 *  Value: "MISSING_RESOURCES_FOR_CANARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeployJobRun_FailureCause_MissingResourcesForCanary;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_ExecutionConfig.usages

/**
 *  Use for deploying and deployment hooks.
 *
 *  Value: "DEPLOY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ExecutionConfig_Usages_Deploy;
/**
 *  Default value. This value is unused.
 *
 *  Value: "EXECUTION_ENVIRONMENT_USAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ExecutionConfig_Usages_ExecutionEnvironmentUsageUnspecified;
/**
 *  Use for postdeploy job execution.
 *
 *  Value: "POSTDEPLOY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ExecutionConfig_Usages_Postdeploy;
/**
 *  Use for predeploy job execution.
 *
 *  Value: "PREDEPLOY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ExecutionConfig_Usages_Predeploy;
/**
 *  Use for rendering.
 *
 *  Value: "RENDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ExecutionConfig_Usages_Render;
/**
 *  Use for deployment verification.
 *
 *  Value: "VERIFY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ExecutionConfig_Usages_Verify;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_Job.state

/**
 *  The Job was aborted.
 *
 *  Value: "ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Job_State_Aborted;
/**
 *  The Job is disabled.
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Job_State_Disabled;
/**
 *  The Job failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Job_State_Failed;
/**
 *  The Job was ignored.
 *
 *  Value: "IGNORED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Job_State_Ignored;
/**
 *  The Job is in progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Job_State_InProgress;
/**
 *  The Job is waiting for an earlier Phase(s) or Job(s) to complete.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Job_State_Pending;
/**
 *  The Job was skipped.
 *
 *  Value: "SKIPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Job_State_Skipped;
/**
 *  The Job has an unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Job_State_StateUnspecified;
/**
 *  The Job succeeded.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Job_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_JobRun.state

/**
 *  The `JobRun` has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRun_State_Failed;
/**
 *  The `JobRun` is in progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRun_State_InProgress;
/**
 *  The `JobRun` has an unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRun_State_StateUnspecified;
/**
 *  The `JobRun` has succeeded.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRun_State_Succeeded;
/**
 *  The `JobRun` was terminated.
 *
 *  Value: "TERMINATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRun_State_Terminated;
/**
 *  The `JobRun` is terminating.
 *
 *  Value: "TERMINATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRun_State_Terminating;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_JobRunNotificationEvent.type

/**
 *  A process aborted.
 *
 *  Value: "TYPE_PROCESS_ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeProcessAborted;
/**
 *  A Pub/Sub notification failed to be sent.
 *
 *  Value: "TYPE_PUBSUB_NOTIFICATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypePubsubNotificationFailure;
/**
 *  Deprecated: This field is never used. Use release_render log type instead.
 *
 *  Value: "TYPE_RENDER_STATUES_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeRenderStatuesChange GTLR_DEPRECATED;
/**
 *  Resource deleted.
 *
 *  Value: "TYPE_RESOURCE_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeResourceDeleted;
/**
 *  Resource state changed.
 *
 *  Value: "TYPE_RESOURCE_STATE_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeResourceStateChange;
/**
 *  Restriction check failed.
 *
 *  Value: "TYPE_RESTRICTION_VIOLATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeRestrictionViolated;
/**
 *  Rollout updated.
 *
 *  Value: "TYPE_ROLLOUT_UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeRolloutUpdate;
/**
 *  Type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_Phase.state

/**
 *  The Phase was aborted.
 *
 *  Value: "ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Phase_State_Aborted;
/**
 *  The Phase has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Phase_State_Failed;
/**
 *  The Phase is in progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Phase_State_InProgress;
/**
 *  The Phase is waiting for an earlier Phase(s) to complete.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Phase_State_Pending;
/**
 *  The Phase was skipped.
 *
 *  Value: "SKIPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Phase_State_Skipped;
/**
 *  The Phase has an unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Phase_State_StateUnspecified;
/**
 *  The Phase has succeeded.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Phase_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_PostdeployJobRun.failureCause

/**
 *  Cloud Build failed to fulfill Cloud Deploy's request. See failure_message
 *  for additional details.
 *
 *  Value: "CLOUD_BUILD_REQUEST_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_PostdeployJobRun_FailureCause_CloudBuildRequestFailed;
/**
 *  Cloud Build is not available, either because it is not enabled or because
 *  Cloud Deploy has insufficient permissions. See [required
 *  permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
 *
 *  Value: "CLOUD_BUILD_UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_PostdeployJobRun_FailureCause_CloudBuildUnavailable;
/**
 *  The postdeploy job run did not complete within the alloted time.
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_PostdeployJobRun_FailureCause_DeadlineExceeded;
/**
 *  The postdeploy operation did not complete successfully; check Cloud Build
 *  logs.
 *
 *  Value: "EXECUTION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_PostdeployJobRun_FailureCause_ExecutionFailed;
/**
 *  No reason for failure is specified.
 *
 *  Value: "FAILURE_CAUSE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_PostdeployJobRun_FailureCause_FailureCauseUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_PredeployJobRun.failureCause

/**
 *  Cloud Build failed to fulfill Cloud Deploy's request. See failure_message
 *  for additional details.
 *
 *  Value: "CLOUD_BUILD_REQUEST_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_PredeployJobRun_FailureCause_CloudBuildRequestFailed;
/**
 *  Cloud Build is not available, either because it is not enabled or because
 *  Cloud Deploy has insufficient permissions. See [required
 *  permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
 *
 *  Value: "CLOUD_BUILD_UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_PredeployJobRun_FailureCause_CloudBuildUnavailable;
/**
 *  The predeploy job run did not complete within the alloted time.
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_PredeployJobRun_FailureCause_DeadlineExceeded;
/**
 *  The predeploy operation did not complete successfully; check Cloud Build
 *  logs.
 *
 *  Value: "EXECUTION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_PredeployJobRun_FailureCause_ExecutionFailed;
/**
 *  No reason for failure is specified.
 *
 *  Value: "FAILURE_CAUSE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_PredeployJobRun_FailureCause_FailureCauseUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_Release.renderState

/**
 *  All rendering operations have completed, and one or more have failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Release_RenderState_Failed;
/**
 *  Rendering has started and is not complete.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Release_RenderState_InProgress;
/**
 *  The render state is unspecified.
 *
 *  Value: "RENDER_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Release_RenderState_RenderStateUnspecified;
/**
 *  All rendering operations have completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Release_RenderState_Succeeded;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_ReleaseNotificationEvent.type

/**
 *  A process aborted.
 *
 *  Value: "TYPE_PROCESS_ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeProcessAborted;
/**
 *  A Pub/Sub notification failed to be sent.
 *
 *  Value: "TYPE_PUBSUB_NOTIFICATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypePubsubNotificationFailure;
/**
 *  Deprecated: This field is never used. Use release_render log type instead.
 *
 *  Value: "TYPE_RENDER_STATUES_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeRenderStatuesChange GTLR_DEPRECATED;
/**
 *  Resource deleted.
 *
 *  Value: "TYPE_RESOURCE_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeResourceDeleted;
/**
 *  Resource state changed.
 *
 *  Value: "TYPE_RESOURCE_STATE_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeResourceStateChange;
/**
 *  Restriction check failed.
 *
 *  Value: "TYPE_RESTRICTION_VIOLATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeRestrictionViolated;
/**
 *  Rollout updated.
 *
 *  Value: "TYPE_ROLLOUT_UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeRolloutUpdate;
/**
 *  Type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_ReleaseRenderEvent.releaseRenderState

/**
 *  All rendering operations have completed, and one or more have failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseRenderEvent_ReleaseRenderState_Failed;
/**
 *  Rendering has started and is not complete.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseRenderEvent_ReleaseRenderState_InProgress;
/**
 *  The render state is unspecified.
 *
 *  Value: "RENDER_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseRenderEvent_ReleaseRenderState_RenderStateUnspecified;
/**
 *  All rendering operations have completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseRenderEvent_ReleaseRenderState_Succeeded;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_ReleaseRenderEvent.type

/**
 *  A process aborted.
 *
 *  Value: "TYPE_PROCESS_ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseRenderEvent_Type_TypeProcessAborted;
/**
 *  A Pub/Sub notification failed to be sent.
 *
 *  Value: "TYPE_PUBSUB_NOTIFICATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseRenderEvent_Type_TypePubsubNotificationFailure;
/**
 *  Deprecated: This field is never used. Use release_render log type instead.
 *
 *  Value: "TYPE_RENDER_STATUES_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseRenderEvent_Type_TypeRenderStatuesChange GTLR_DEPRECATED;
/**
 *  Resource deleted.
 *
 *  Value: "TYPE_RESOURCE_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseRenderEvent_Type_TypeResourceDeleted;
/**
 *  Resource state changed.
 *
 *  Value: "TYPE_RESOURCE_STATE_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseRenderEvent_Type_TypeResourceStateChange;
/**
 *  Restriction check failed.
 *
 *  Value: "TYPE_RESTRICTION_VIOLATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseRenderEvent_Type_TypeRestrictionViolated;
/**
 *  Rollout updated.
 *
 *  Value: "TYPE_ROLLOUT_UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseRenderEvent_Type_TypeRolloutUpdate;
/**
 *  Type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseRenderEvent_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_Retry.backoffMode

/**
 *  Increases the wait time exponentially.
 *
 *  Value: "BACKOFF_MODE_EXPONENTIAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Retry_BackoffMode_BackoffModeExponential;
/**
 *  Increases the wait time linearly.
 *
 *  Value: "BACKOFF_MODE_LINEAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Retry_BackoffMode_BackoffModeLinear;
/**
 *  No WaitMode is specified.
 *
 *  Value: "BACKOFF_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Retry_BackoffMode_BackoffModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_RetryAttempt.state

/**
 *  The `repair` action was cancelled.
 *
 *  Value: "REPAIR_STATE_CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RetryAttempt_State_RepairStateCancelled;
/**
 *  The `repair` action has failed.
 *
 *  Value: "REPAIR_STATE_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RetryAttempt_State_RepairStateFailed;
/**
 *  The `repair` action is in progress.
 *
 *  Value: "REPAIR_STATE_IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RetryAttempt_State_RepairStateInProgress;
/**
 *  The `repair` action is pending.
 *
 *  Value: "REPAIR_STATE_PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RetryAttempt_State_RepairStatePending;
/**
 *  The `repair` action was skipped.
 *
 *  Value: "REPAIR_STATE_SKIPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RetryAttempt_State_RepairStateSkipped;
/**
 *  The `repair` action has succeeded.
 *
 *  Value: "REPAIR_STATE_SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RetryAttempt_State_RepairStateSucceeded;
/**
 *  The `repair` has an unspecified state.
 *
 *  Value: "REPAIR_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RetryAttempt_State_RepairStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_RetryPhase.backoffMode

/**
 *  Increases the wait time exponentially.
 *
 *  Value: "BACKOFF_MODE_EXPONENTIAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RetryPhase_BackoffMode_BackoffModeExponential;
/**
 *  Increases the wait time linearly.
 *
 *  Value: "BACKOFF_MODE_LINEAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RetryPhase_BackoffMode_BackoffModeLinear;
/**
 *  No WaitMode is specified.
 *
 *  Value: "BACKOFF_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RetryPhase_BackoffMode_BackoffModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_RollbackAttempt.state

/**
 *  The `repair` action was cancelled.
 *
 *  Value: "REPAIR_STATE_CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RollbackAttempt_State_RepairStateCancelled;
/**
 *  The `repair` action has failed.
 *
 *  Value: "REPAIR_STATE_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RollbackAttempt_State_RepairStateFailed;
/**
 *  The `repair` action is in progress.
 *
 *  Value: "REPAIR_STATE_IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RollbackAttempt_State_RepairStateInProgress;
/**
 *  The `repair` action is pending.
 *
 *  Value: "REPAIR_STATE_PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RollbackAttempt_State_RepairStatePending;
/**
 *  The `repair` action was skipped.
 *
 *  Value: "REPAIR_STATE_SKIPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RollbackAttempt_State_RepairStateSkipped;
/**
 *  The `repair` action has succeeded.
 *
 *  Value: "REPAIR_STATE_SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RollbackAttempt_State_RepairStateSucceeded;
/**
 *  The `repair` has an unspecified state.
 *
 *  Value: "REPAIR_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RollbackAttempt_State_RepairStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_Rollout.approvalState

/**
 *  The `Rollout` has an unspecified approval state.
 *
 *  Value: "APPROVAL_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_ApprovalState_ApprovalStateUnspecified;
/**
 *  The `Rollout` has been approved.
 *
 *  Value: "APPROVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_ApprovalState_Approved;
/**
 *  The `Rollout` does not require approval.
 *
 *  Value: "DOES_NOT_NEED_APPROVAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_ApprovalState_DoesNotNeedApproval;
/**
 *  The `Rollout` requires approval.
 *
 *  Value: "NEEDS_APPROVAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_ApprovalState_NeedsApproval;
/**
 *  The `Rollout` has been rejected.
 *
 *  Value: "REJECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_ApprovalState_Rejected;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_Rollout.deployFailureCause

/**
 *  Cloud Build failed to fulfill Cloud Deploy's request. See failure_message
 *  for additional details.
 *
 *  Value: "CLOUD_BUILD_REQUEST_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_DeployFailureCause_CloudBuildRequestFailed;
/**
 *  Cloud Build is not available, either because it is not enabled or because
 *  Cloud Deploy has insufficient permissions. See [required
 *  permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
 *
 *  Value: "CLOUD_BUILD_UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_DeployFailureCause_CloudBuildUnavailable;
/**
 *  Deployment did not complete within the alloted time.
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_DeployFailureCause_DeadlineExceeded;
/**
 *  The deploy operation did not complete successfully; check Cloud Build logs.
 *
 *  Value: "EXECUTION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_DeployFailureCause_ExecutionFailed;
/**
 *  No reason for failure is specified.
 *
 *  Value: "FAILURE_CAUSE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_DeployFailureCause_FailureCauseUnspecified;
/**
 *  A Rollout operation had a feature configured that is not supported.
 *
 *  Value: "OPERATION_FEATURE_NOT_SUPPORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_DeployFailureCause_OperationFeatureNotSupported;
/**
 *  Release is abandoned.
 *
 *  Value: "RELEASE_ABANDONED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_DeployFailureCause_ReleaseAbandoned;
/**
 *  Release is in a failed state.
 *
 *  Value: "RELEASE_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_DeployFailureCause_ReleaseFailed;
/**
 *  No Skaffold verify configuration was found.
 *
 *  Value: "VERIFICATION_CONFIG_NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_DeployFailureCause_VerificationConfigNotFound;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_Rollout.state

/**
 *  An approver rejected the `Rollout`.
 *
 *  Value: "APPROVAL_REJECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_ApprovalRejected;
/**
 *  The `Rollout` has been cancelled.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_Cancelled;
/**
 *  The `Rollout` is in the process of being cancelled.
 *
 *  Value: "CANCELLING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_Cancelling;
/**
 *  The `Rollout` has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_Failed;
/**
 *  The `Rollout` is halted.
 *
 *  Value: "HALTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_Halted;
/**
 *  The `Rollout` is being deployed.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_InProgress;
/**
 *  The `Rollout` is waiting for an earlier Rollout(s) to complete on this
 *  `Target`.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_Pending;
/**
 *  The `Rollout` needs approval.
 *
 *  Value: "PENDING_APPROVAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_PendingApproval;
/**
 *  The `Rollout` is waiting for the `Release` to be fully rendered.
 *
 *  Value: "PENDING_RELEASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_PendingRelease;
/**
 *  The `Rollout` has an unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_StateUnspecified;
/**
 *  The `Rollout` has completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_RolloutNotificationEvent.type

/**
 *  A process aborted.
 *
 *  Value: "TYPE_PROCESS_ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeProcessAborted;
/**
 *  A Pub/Sub notification failed to be sent.
 *
 *  Value: "TYPE_PUBSUB_NOTIFICATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypePubsubNotificationFailure;
/**
 *  Deprecated: This field is never used. Use release_render log type instead.
 *
 *  Value: "TYPE_RENDER_STATUES_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeRenderStatuesChange GTLR_DEPRECATED;
/**
 *  Resource deleted.
 *
 *  Value: "TYPE_RESOURCE_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeResourceDeleted;
/**
 *  Resource state changed.
 *
 *  Value: "TYPE_RESOURCE_STATE_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeResourceStateChange;
/**
 *  Restriction check failed.
 *
 *  Value: "TYPE_RESTRICTION_VIOLATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeRestrictionViolated;
/**
 *  Rollout updated.
 *
 *  Value: "TYPE_ROLLOUT_UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeRolloutUpdate;
/**
 *  Type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_RolloutUpdateEvent.rolloutUpdateType

/**
 *  Rollout has been advanced.
 *
 *  Value: "ADVANCED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Advanced;
/**
 *  Rollout requires advance to the next phase.
 *
 *  Value: "ADVANCE_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_AdvanceRequired;
/**
 *  Rollout requires approval.
 *
 *  Value: "APPROVAL_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_ApprovalRequired;
/**
 *  Rollout has been approved.
 *
 *  Value: "APPROVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Approved;
/**
 *  Rollout state updated to cancelled.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Cancelled;
/**
 *  Rollout state updated to cancelling.
 *
 *  Value: "CANCELLING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Cancelling;
/**
 *  Rollout state updated to failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Failed;
/**
 *  Rollout state updated to halted.
 *
 *  Value: "HALTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Halted;
/**
 *  Rollout state updated to in progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_InProgress;
/**
 *  rollout state updated to pending.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Pending;
/**
 *  Rollout state updated to pending release.
 *
 *  Value: "PENDING_RELEASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_PendingRelease;
/**
 *  Rollout has been rejected.
 *
 *  Value: "REJECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Rejected;
/**
 *  Rollout update type unspecified.
 *
 *  Value: "ROLLOUT_UPDATE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_RolloutUpdateTypeUnspecified;
/**
 *  Rollout state updated to succeeded.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Succeeded;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_RolloutUpdateEvent.type

/**
 *  A process aborted.
 *
 *  Value: "TYPE_PROCESS_ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_Type_TypeProcessAborted;
/**
 *  A Pub/Sub notification failed to be sent.
 *
 *  Value: "TYPE_PUBSUB_NOTIFICATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_Type_TypePubsubNotificationFailure;
/**
 *  Deprecated: This field is never used. Use release_render log type instead.
 *
 *  Value: "TYPE_RENDER_STATUES_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_Type_TypeRenderStatuesChange GTLR_DEPRECATED;
/**
 *  Resource deleted.
 *
 *  Value: "TYPE_RESOURCE_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_Type_TypeResourceDeleted;
/**
 *  Resource state changed.
 *
 *  Value: "TYPE_RESOURCE_STATE_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_Type_TypeResourceStateChange;
/**
 *  Restriction check failed.
 *
 *  Value: "TYPE_RESTRICTION_VIOLATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_Type_TypeRestrictionViolated;
/**
 *  Rollout updated.
 *
 *  Value: "TYPE_ROLLOUT_UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_Type_TypeRolloutUpdate;
/**
 *  Type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutUpdateEvent_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_SkaffoldSupportedCondition.skaffoldSupportState

/**
 *  This Skaffold version is in maintenance mode.
 *
 *  Value: "SKAFFOLD_SUPPORT_STATE_MAINTENANCE_MODE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_SkaffoldSupportedCondition_SkaffoldSupportState_SkaffoldSupportStateMaintenanceMode;
/**
 *  This Skaffold version is currently supported.
 *
 *  Value: "SKAFFOLD_SUPPORT_STATE_SUPPORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_SkaffoldSupportedCondition_SkaffoldSupportState_SkaffoldSupportStateSupported;
/**
 *  Default value. This value is unused.
 *
 *  Value: "SKAFFOLD_SUPPORT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_SkaffoldSupportedCondition_SkaffoldSupportState_SkaffoldSupportStateUnspecified;
/**
 *  This Skaffold version is no longer supported.
 *
 *  Value: "SKAFFOLD_SUPPORT_STATE_UNSUPPORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_SkaffoldSupportedCondition_SkaffoldSupportState_SkaffoldSupportStateUnsupported;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_TargetNotificationEvent.type

/**
 *  A process aborted.
 *
 *  Value: "TYPE_PROCESS_ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeProcessAborted;
/**
 *  A Pub/Sub notification failed to be sent.
 *
 *  Value: "TYPE_PUBSUB_NOTIFICATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetNotificationEvent_Type_TypePubsubNotificationFailure;
/**
 *  Deprecated: This field is never used. Use release_render log type instead.
 *
 *  Value: "TYPE_RENDER_STATUES_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeRenderStatuesChange GTLR_DEPRECATED;
/**
 *  Resource deleted.
 *
 *  Value: "TYPE_RESOURCE_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeResourceDeleted;
/**
 *  Resource state changed.
 *
 *  Value: "TYPE_RESOURCE_STATE_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeResourceStateChange;
/**
 *  Restriction check failed.
 *
 *  Value: "TYPE_RESTRICTION_VIOLATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeRestrictionViolated;
/**
 *  Rollout updated.
 *
 *  Value: "TYPE_ROLLOUT_UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeRolloutUpdate;
/**
 *  Type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_TargetRender.failureCause

/**
 *  Cloud Build failed to fulfill Cloud Deploy's request. See failure_message
 *  for additional details.
 *
 *  Value: "CLOUD_BUILD_REQUEST_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_FailureCause_CloudBuildRequestFailed;
/**
 *  Cloud Build is not available, either because it is not enabled or because
 *  Cloud Deploy has insufficient permissions. See [required
 *  permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
 *
 *  Value: "CLOUD_BUILD_UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_FailureCause_CloudBuildUnavailable;
/**
 *  The render operation did not complete successfully because the custom action
 *  required for predeploy or postdeploy was not found in the Skaffold
 *  configuration. See failure_message for additional details.
 *
 *  Value: "CUSTOM_ACTION_NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_FailureCause_CustomActionNotFound;
/**
 *  Release failed during rendering because the release configuration is not
 *  supported with the specified deployment strategy.
 *
 *  Value: "DEPLOYMENT_STRATEGY_NOT_SUPPORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_FailureCause_DeploymentStrategyNotSupported;
/**
 *  The render operation did not complete successfully; check Cloud Build logs.
 *
 *  Value: "EXECUTION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_FailureCause_ExecutionFailed;
/**
 *  No reason for failure is specified.
 *
 *  Value: "FAILURE_CAUSE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_FailureCause_FailureCauseUnspecified;
/**
 *  The render operation had a feature configured that is not supported.
 *
 *  Value: "RENDER_FEATURE_NOT_SUPPORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_FailureCause_RenderFeatureNotSupported;
/**
 *  The render operation did not complete successfully because the verification
 *  stanza required for verify was not found on the Skaffold configuration.
 *
 *  Value: "VERIFICATION_CONFIG_NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_FailureCause_VerificationConfigNotFound;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_TargetRender.renderingState

/**
 *  The render operation has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_RenderingState_Failed;
/**
 *  The render operation is in progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_RenderingState_InProgress;
/**
 *  The render operation has completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_RenderingState_Succeeded;
/**
 *  The render operation state is unspecified.
 *
 *  Value: "TARGET_RENDER_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_RenderingState_TargetRenderStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_VerifyJobRun.failureCause

/**
 *  Cloud Build failed to fulfill Cloud Deploy's request. See failure_message
 *  for additional details.
 *
 *  Value: "CLOUD_BUILD_REQUEST_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_VerifyJobRun_FailureCause_CloudBuildRequestFailed;
/**
 *  Cloud Build is not available, either because it is not enabled or because
 *  Cloud Deploy has insufficient permissions. See [required
 *  permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
 *
 *  Value: "CLOUD_BUILD_UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_VerifyJobRun_FailureCause_CloudBuildUnavailable;
/**
 *  The verify job run did not complete within the alloted time.
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_VerifyJobRun_FailureCause_DeadlineExceeded;
/**
 *  The verify operation did not complete successfully; check Cloud Build logs.
 *
 *  Value: "EXECUTION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_VerifyJobRun_FailureCause_ExecutionFailed;
/**
 *  No reason for failure is specified.
 *
 *  Value: "FAILURE_CAUSE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_VerifyJobRun_FailureCause_FailureCauseUnspecified;
/**
 *  No Skaffold verify configuration was found.
 *
 *  Value: "VERIFICATION_CONFIG_NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_VerifyJobRun_FailureCause_VerificationConfigNotFound;

/**
 *  The request object used by `AbandonRelease`.
 */
@interface GTLRCloudDeploy_AbandonReleaseRequest : GTLRObject
@end


/**
 *  The response object for `AbandonRelease`.
 */
@interface GTLRCloudDeploy_AbandonReleaseResponse : GTLRObject
@end


/**
 *  An advanceChildRollout Job.
 */
@interface GTLRCloudDeploy_AdvanceChildRolloutJob : GTLRObject
@end


/**
 *  AdvanceChildRolloutJobRun contains information specific to a
 *  advanceChildRollout `JobRun`.
 */
@interface GTLRCloudDeploy_AdvanceChildRolloutJobRun : GTLRObject

/**
 *  Output only. Name of the `ChildRollout`. Format is
 *  `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
 */
@property(nonatomic, copy, nullable) NSString *rollout;

/** Output only. the ID of the ChildRollout's Phase. */
@property(nonatomic, copy, nullable) NSString *rolloutPhaseId;

@end


/**
 *  Contains the information of an automated advance-rollout operation.
 */
@interface GTLRCloudDeploy_AdvanceRolloutOperation : GTLRObject

/** Output only. The phase the rollout will be advanced to. */
@property(nonatomic, copy, nullable) NSString *destinationPhase;

/**
 *  Output only. The name of the rollout that initiates the `AutomationRun`.
 */
@property(nonatomic, copy, nullable) NSString *rollout;

/** Output only. The phase of a deployment that initiated the operation. */
@property(nonatomic, copy, nullable) NSString *sourcePhase;

/** Output only. How long the operation will be paused. */
@property(nonatomic, strong, nullable) GTLRDuration *wait;

@end


/**
 *  The request object used by `AdvanceRollout`.
 */
@interface GTLRCloudDeploy_AdvanceRolloutRequest : GTLRObject

/** Required. The phase ID to advance the `Rollout` to. */
@property(nonatomic, copy, nullable) NSString *phaseId;

@end


/**
 *  The response object from `AdvanceRollout`.
 */
@interface GTLRCloudDeploy_AdvanceRolloutResponse : GTLRObject
@end


/**
 *  The `AdvanceRollout` automation rule will automatically advance a successful
 *  Rollout to the next phase.
 */
@interface GTLRCloudDeploy_AdvanceRolloutRule : GTLRObject

/** Output only. Information around the state of the Automation rule. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_AutomationRuleCondition *condition;

/**
 *  Required. ID of the rule. This id must be unique in the `Automation`
 *  resource to which this rule belongs. The format is `a-z{0,62}`.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Optional. Proceeds only after phase name matched any one in the list. This
 *  value must consist of lower-case letters, numbers, and hyphens, start with a
 *  letter and end with a letter or a number, and have a max length of 63
 *  characters. In other words, it must match the following regex:
 *  `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourcePhases;

/** Optional. How long to wait after a rollout is finished. */
@property(nonatomic, strong, nullable) GTLRDuration *wait;

@end


/**
 *  Information specifying an Anthos Cluster.
 */
@interface GTLRCloudDeploy_AnthosCluster : GTLRObject

/**
 *  Membership of the GKE Hub-registered cluster to which to apply the Skaffold
 *  configuration. Format is
 *  `projects/{project}/locations/{location}/memberships/{membership_name}`.
 */
@property(nonatomic, copy, nullable) NSString *membership;

@end


/**
 *  The request object used by `ApproveRollout`.
 */
@interface GTLRCloudDeploy_ApproveRolloutRequest : GTLRObject

/**
 *  Required. True = approve; false = reject
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *approved;

@end


/**
 *  The response object from `ApproveRollout`.
 */
@interface GTLRCloudDeploy_ApproveRolloutResponse : GTLRObject
@end


/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRCloudDeploy_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRCloudDeploy_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_AuditLogConfig_LogType_AdminRead Admin reads.
 *        Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRCloudDeploy_AuditLogConfig_LogType_DataRead Data reads.
 *        Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRCloudDeploy_AuditLogConfig_LogType_DataWrite Data writes.
 *        Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRCloudDeploy_AuditLogConfig_LogType_LogTypeUnspecified Default
 *        case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  An `Automation` resource in the Cloud Deploy API. An `Automation` enables
 *  the automation of manually driven actions for a Delivery Pipeline, which
 *  includes Release promotion among Targets, Rollout repair and Rollout
 *  deployment strategy advancement. The intention of Automation is to reduce
 *  manual intervention in the continuous delivery process.
 */
@interface GTLRCloudDeploy_Automation : GTLRObject

/**
 *  Optional. User annotations. These attributes can only be set and used by the
 *  user, and not by Cloud Deploy. Annotations must meet the following
 *  constraints: * Annotations are key/value pairs. * Valid annotation keys have
 *  two segments: an optional prefix and name, separated by a slash (`/`). * The
 *  name segment is required and must be 63 characters or less, beginning and
 *  ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`),
 *  underscores (`_`), dots (`.`), and alphanumerics between. * The prefix is
 *  optional. If specified, the prefix must be a DNS subdomain: a series of DNS
 *  labels separated by dots(`.`), not longer than 253 characters in total,
 *  followed by a slash (`/`). See
 *  https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set
 *  for more details.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Automation_Annotations *annotations;

/** Output only. Time at which the automation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. Description of the `Automation`. Max length is 255 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. The weak etag of the `Automation` resource. This checksum is
 *  computed by the server based on the value of other fields, and may be sent
 *  on update and delete requests to ensure the client has an up-to-date value
 *  before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. Labels are attributes that can be set and used by both the user
 *  and by Cloud Deploy. Labels must meet the following constraints: * Keys and
 *  values can contain only lowercase letters, numeric characters, underscores,
 *  and dashes. * All characters must use UTF-8 encoding, and international
 *  characters are allowed. * Keys must start with a lowercase letter or
 *  international character. * Each resource is limited to a maximum of 64
 *  labels. Both keys and values are additionally constrained to be <= 63
 *  characters.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Automation_Labels *labels;

/**
 *  Output only. Name of the `Automation`. Format is
 *  `projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/automations/{automation}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. List of Automation rules associated with the Automation resource.
 *  Must have at least one rule and limited to 250 rules per Delivery Pipeline.
 *  Note: the order of the rules here is not the same as the order of execution.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_AutomationRule *> *rules;

/** Required. Selected resources to which the automation will be applied. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_AutomationResourceSelector *selector;

/**
 *  Required. Email address of the user-managed IAM service account that creates
 *  Cloud Deploy release and rollout resources.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Optional. When Suspended, automation is deactivated from execution.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *suspended;

/** Output only. Unique identifier of the `Automation`. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Time at which the automation was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. User annotations. These attributes can only be set and used by the
 *  user, and not by Cloud Deploy. Annotations must meet the following
 *  constraints: * Annotations are key/value pairs. * Valid annotation keys have
 *  two segments: an optional prefix and name, separated by a slash (`/`). * The
 *  name segment is required and must be 63 characters or less, beginning and
 *  ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`),
 *  underscores (`_`), dots (`.`), and alphanumerics between. * The prefix is
 *  optional. If specified, the prefix must be a DNS subdomain: a series of DNS
 *  labels separated by dots(`.`), not longer than 253 characters in total,
 *  followed by a slash (`/`). See
 *  https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/#syntax-and-character-set
 *  for more details.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Automation_Annotations : GTLRObject
@end


/**
 *  Optional. Labels are attributes that can be set and used by both the user
 *  and by Cloud Deploy. Labels must meet the following constraints: * Keys and
 *  values can contain only lowercase letters, numeric characters, underscores,
 *  and dashes. * All characters must use UTF-8 encoding, and international
 *  characters are allowed. * Keys must start with a lowercase letter or
 *  international character. * Each resource is limited to a maximum of 64
 *  labels. Both keys and values are additionally constrained to be <= 63
 *  characters.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Automation_Labels : GTLRObject
@end


/**
 *  Payload proto for "clouddeploy.googleapis.com/automation" Platform Log event
 *  that describes the Automation related events.
 */
@interface GTLRCloudDeploy_AutomationEvent : GTLRObject

/** The name of the `AutomationRun`. */
@property(nonatomic, copy, nullable) NSString *automation;

/**
 *  Debug message for when there is an update on the AutomationRun. Provides
 *  further details about the resource creation or state change.
 */
@property(nonatomic, copy, nullable) NSString *message;

/** Unique identifier of the `DeliveryPipeline`. */
@property(nonatomic, copy, nullable) NSString *pipelineUid;

/**
 *  Type of this notification, e.g. for a Pub/Sub failure.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_AutomationEvent_Type_TypeProcessAborted A process
 *        aborted. (Value: "TYPE_PROCESS_ABORTED")
 *    @arg @c kGTLRCloudDeploy_AutomationEvent_Type_TypePubsubNotificationFailure
 *        A Pub/Sub notification failed to be sent. (Value:
 *        "TYPE_PUBSUB_NOTIFICATION_FAILURE")
 *    @arg @c kGTLRCloudDeploy_AutomationEvent_Type_TypeRenderStatuesChange
 *        Deprecated: This field is never used. Use release_render log type
 *        instead. (Value: "TYPE_RENDER_STATUES_CHANGE")
 *    @arg @c kGTLRCloudDeploy_AutomationEvent_Type_TypeResourceDeleted Resource
 *        deleted. (Value: "TYPE_RESOURCE_DELETED")
 *    @arg @c kGTLRCloudDeploy_AutomationEvent_Type_TypeResourceStateChange
 *        Resource state changed. (Value: "TYPE_RESOURCE_STATE_CHANGE")
 *    @arg @c kGTLRCloudDeploy_AutomationEvent_Type_TypeRestrictionViolated
 *        Restriction check failed. (Value: "TYPE_RESTRICTION_VIOLATED")
 *    @arg @c kGTLRCloudDeploy_AutomationEvent_Type_TypeRolloutUpdate Rollout
 *        updated. (Value: "TYPE_ROLLOUT_UPDATE")
 *    @arg @c kGTLRCloudDeploy_AutomationEvent_Type_TypeUnspecified Type is
 *        unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  AutomationResourceSelector contains the information to select the resources
 *  to which an Automation is going to be applied.
 */
@interface GTLRCloudDeploy_AutomationResourceSelector : GTLRObject

/** Contains attributes about a target. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_TargetAttribute *> *targets;

@end


/**
 *  AutomationRolloutMetadata contains Automation-related actions that were
 *  performed on a rollout.
 */
@interface GTLRCloudDeploy_AutomationRolloutMetadata : GTLRObject

/**
 *  Output only. The IDs of the AutomationRuns initiated by an advance rollout
 *  rule.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *advanceAutomationRuns;

/**
 *  Output only. The ID of the AutomationRun initiated by a promote release
 *  rule.
 */
@property(nonatomic, copy, nullable) NSString *promoteAutomationRun;

/**
 *  Output only. The IDs of the AutomationRuns initiated by a repair rollout
 *  rule.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *repairAutomationRuns;

@end


/**
 *  `AutomationRule` defines the automation activities.
 */
@interface GTLRCloudDeploy_AutomationRule : GTLRObject

/**
 *  Optional. The `AdvanceRolloutRule` will automatically advance a successful
 *  Rollout.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_AdvanceRolloutRule *advanceRolloutRule;

/**
 *  Optional. `PromoteReleaseRule` will automatically promote a release from the
 *  current target to a specified target.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_PromoteReleaseRule *promoteReleaseRule;

/**
 *  Optional. The `RepairRolloutRule` will automatically repair a failed
 *  rollout.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_RepairRolloutRule *repairRolloutRule;

@end


/**
 *  `AutomationRuleCondition` contains conditions relevant to an `Automation`
 *  rule.
 */
@interface GTLRCloudDeploy_AutomationRuleCondition : GTLRObject

/** Optional. Details around targets enumerated in the rule. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_TargetsPresentCondition *targetsPresentCondition;

@end


/**
 *  An `AutomationRun` resource in the Cloud Deploy API. An `AutomationRun`
 *  represents an execution instance of an automation rule.
 */
@interface GTLRCloudDeploy_AutomationRun : GTLRObject

/** Output only. Advances a rollout to the next phase. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_AdvanceRolloutOperation *advanceRolloutOperation;

/** Output only. The ID of the automation that initiated the operation. */
@property(nonatomic, copy, nullable) NSString *automationId;

/**
 *  Output only. Snapshot of the Automation taken at AutomationRun creation
 *  time.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Automation *automationSnapshot;

/** Output only. Time at which the `AutomationRun` was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The weak etag of the `AutomationRun` resource. This checksum is
 *  computed by the server based on the value of other fields, and may be sent
 *  on update and delete requests to ensure the client has an up-to-date value
 *  before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. Time the `AutomationRun` expires. An `AutomationRun` expires
 *  after 14 days from its creation date.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/**
 *  Output only. Name of the `AutomationRun`. Format is
 *  `projects/{project}/locations/{location}/deliveryPipelines/{delivery_pipeline}/automationRuns/{automation_run}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. Promotes a release to a specified 'Target'. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_PromoteReleaseOperation *promoteReleaseOperation;

/** Output only. Repairs a failed 'Rollout'. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_RepairRolloutOperation *repairRolloutOperation;

/**
 *  Output only. The ID of the automation rule that initiated the operation.
 */
@property(nonatomic, copy, nullable) NSString *ruleId;

/**
 *  Output only. Email address of the user-managed IAM service account that
 *  performs the operations against Cloud Deploy resources.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Output only. Current state of the `AutomationRun`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_AutomationRun_State_Cancelled The `AutomationRun`
 *        was cancelled. (Value: "CANCELLED")
 *    @arg @c kGTLRCloudDeploy_AutomationRun_State_Failed The `AutomationRun`
 *        has failed. (Value: "FAILED")
 *    @arg @c kGTLRCloudDeploy_AutomationRun_State_InProgress The
 *        `AutomationRun` is in progress. (Value: "IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_AutomationRun_State_Pending The `AutomationRun`
 *        is pending. (Value: "PENDING")
 *    @arg @c kGTLRCloudDeploy_AutomationRun_State_StateUnspecified The
 *        `AutomationRun` has an unspecified state. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_AutomationRun_State_Succeeded The `AutomationRun`
 *        has succeeded. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Explains the current state of the `AutomationRun`. Present only
 *  when an explanation is needed.
 */
@property(nonatomic, copy, nullable) NSString *stateDescription;

/**
 *  Output only. The ID of the target that represents the promotion stage that
 *  initiates the `AutomationRun`. The value of this field is the last segment
 *  of a target name.
 */
@property(nonatomic, copy, nullable) NSString *targetId;

/** Output only. Time at which the automationRun was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Output only. Earliest time the `AutomationRun` will attempt to resume.
 *  Wait-time is configured by `wait` in automation rule.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *waitUntilTime;

@end


/**
 *  Payload proto for "clouddeploy.googleapis.com/automation_run" Platform Log
 *  event that describes the AutomationRun related events.
 */
@interface GTLRCloudDeploy_AutomationRunEvent : GTLRObject

/** Identifier of the `Automation`. */
@property(nonatomic, copy, nullable) NSString *automationId;

/** The name of the `AutomationRun`. */
@property(nonatomic, copy, nullable) NSString *automationRun;

/** ID of the `Target` to which the `AutomationRun` is created. */
@property(nonatomic, copy, nullable) NSString *destinationTargetId;

/**
 *  Debug message for when there is an update on the AutomationRun. Provides
 *  further details about the resource creation or state change.
 */
@property(nonatomic, copy, nullable) NSString *message;

/** Unique identifier of the `DeliveryPipeline`. */
@property(nonatomic, copy, nullable) NSString *pipelineUid;

/** Identifier of the `Automation` rule. */
@property(nonatomic, copy, nullable) NSString *ruleId;

/**
 *  Type of this notification, e.g. for a Pub/Sub failure.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_AutomationRunEvent_Type_TypeProcessAborted A
 *        process aborted. (Value: "TYPE_PROCESS_ABORTED")
 *    @arg @c kGTLRCloudDeploy_AutomationRunEvent_Type_TypePubsubNotificationFailure
 *        A Pub/Sub notification failed to be sent. (Value:
 *        "TYPE_PUBSUB_NOTIFICATION_FAILURE")
 *    @arg @c kGTLRCloudDeploy_AutomationRunEvent_Type_TypeRenderStatuesChange
 *        Deprecated: This field is never used. Use release_render log type
 *        instead. (Value: "TYPE_RENDER_STATUES_CHANGE")
 *    @arg @c kGTLRCloudDeploy_AutomationRunEvent_Type_TypeResourceDeleted
 *        Resource deleted. (Value: "TYPE_RESOURCE_DELETED")
 *    @arg @c kGTLRCloudDeploy_AutomationRunEvent_Type_TypeResourceStateChange
 *        Resource state changed. (Value: "TYPE_RESOURCE_STATE_CHANGE")
 *    @arg @c kGTLRCloudDeploy_AutomationRunEvent_Type_TypeRestrictionViolated
 *        Restriction check failed. (Value: "TYPE_RESTRICTION_VIOLATED")
 *    @arg @c kGTLRCloudDeploy_AutomationRunEvent_Type_TypeRolloutUpdate Rollout
 *        updated. (Value: "TYPE_ROLLOUT_UPDATE")
 *    @arg @c kGTLRCloudDeploy_AutomationRunEvent_Type_TypeUnspecified Type is
 *        unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRCloudDeploy_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `domain:{domain}`: The G Suite domain
 *  (primary) that represents all the users of that domain. For example,
 *  `google.com` or `example.com`. *
 *  `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workforce identity pool. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
 *  All workforce identities in a group. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All workforce identities with a specific attribute value. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/
 *  *`: All identities in a workforce identity pool. *
 *  `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workload identity pool. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
 *  A workload identity pool group. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All identities in a workload identity pool with a certain attribute. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/
 *  *`: All identities in a workload identity pool. *
 *  `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. *
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  Deleted single identity in a workforce identity pool. For example,
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  Description of an a image to use during Skaffold rendering.
 */
@interface GTLRCloudDeploy_BuildArtifact : GTLRObject

/** Image name in Skaffold configuration. */
@property(nonatomic, copy, nullable) NSString *image;

/**
 *  Image tag to use. This will generally be the full path to an image, such as
 *  "gcr.io/my-project/busybox:1.2.3" or
 *  "gcr.io/my-project/busybox\@sha256:abc123".
 */
@property(nonatomic, copy, nullable) NSString *tag;

@end


/**
 *  Canary represents the canary deployment strategy.
 */
@interface GTLRCloudDeploy_Canary : GTLRObject

/** Configures the progressive based deployment for a Target. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CanaryDeployment *canaryDeployment;

/**
 *  Configures the progressive based deployment for a Target, but allows
 *  customizing at the phase level where a phase represents each of the
 *  percentage deployments.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CustomCanaryDeployment *customCanaryDeployment;

/**
 *  Optional. Runtime specific configurations for the deployment strategy. The
 *  runtime configuration is used to determine how Cloud Deploy will split
 *  traffic to enable a progressive deployment.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_RuntimeConfig *runtimeConfig;

@end


/**
 *  CanaryDeployment represents the canary deployment configuration
 */
@interface GTLRCloudDeploy_CanaryDeployment : GTLRObject

/**
 *  Required. The percentage based deployments that will occur as a part of a
 *  `Rollout`. List is expected in ascending order and each integer n is 0 <= n
 *  < 100.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *percentages;

/**
 *  Optional. Configuration for the postdeploy job of the last phase. If this is
 *  not configured, there will be no postdeploy job for this phase.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Postdeploy *postdeploy;

/**
 *  Optional. Configuration for the predeploy job of the first phase. If this is
 *  not configured, there will be no predeploy job for this phase.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Predeploy *predeploy;

/**
 *  Whether to run verify tests after each percentage deployment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verify;

@end


/**
 *  The request object used by `CancelAutomationRun`.
 */
@interface GTLRCloudDeploy_CancelAutomationRunRequest : GTLRObject
@end


/**
 *  The response object from `CancelAutomationRun`.
 */
@interface GTLRCloudDeploy_CancelAutomationRunResponse : GTLRObject
@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRCloudDeploy_CancelOperationRequest : GTLRObject
@end


/**
 *  The request object used by `CancelRollout`.
 */
@interface GTLRCloudDeploy_CancelRolloutRequest : GTLRObject
@end


/**
 *  The response object from `CancelRollout`.
 */
@interface GTLRCloudDeploy_CancelRolloutResponse : GTLRObject
@end


/**
 *  ChildRollouts job composition
 */
@interface GTLRCloudDeploy_ChildRolloutJobs : GTLRObject

/** Output only. List of AdvanceChildRolloutJobs */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Job *> *advanceRolloutJobs;

/** Output only. List of CreateChildRolloutJobs */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Job *> *createRolloutJobs;

@end


/**
 *  CloudRunConfig contains the Cloud Run runtime configuration.
 */
@interface GTLRCloudDeploy_CloudRunConfig : GTLRObject

/**
 *  Whether Cloud Deploy should update the traffic stanza in a Cloud Run Service
 *  on the user's behalf to facilitate traffic splitting. This is required to be
 *  true for CanaryDeployments, but optional for CustomCanaryDeployments.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *automaticTrafficControl;

/**
 *  Optional. A list of tags that are added to the canary revision while the
 *  canary phase is in progress.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *canaryRevisionTags;

/**
 *  Optional. A list of tags that are added to the prior revision while the
 *  canary phase is in progress.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *priorRevisionTags;

/**
 *  Optional. A list of tags that are added to the final stable revision when
 *  the stable phase is applied.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *stableRevisionTags;

@end


/**
 *  Information specifying where to deploy a Cloud Run Service.
 */
@interface GTLRCloudDeploy_CloudRunLocation : GTLRObject

/**
 *  Required. The location for the Cloud Run Service. Format must be
 *  `projects/{project}/locations/{location}`.
 */
@property(nonatomic, copy, nullable) NSString *location;

@end


/**
 *  CloudRunMetadata contains information from a Cloud Run deployment.
 */
@interface GTLRCloudDeploy_CloudRunMetadata : GTLRObject

/**
 *  Output only. The name of the Cloud Run job that is associated with a
 *  `Rollout`. Format is
 *  `projects/{project}/locations/{location}/jobs/{job_name}`.
 */
@property(nonatomic, copy, nullable) NSString *job;

/** Output only. The Cloud Run Revision id associated with a `Rollout`. */
@property(nonatomic, copy, nullable) NSString *revision;

/**
 *  Output only. The name of the Cloud Run Service that is associated with a
 *  `Rollout`. Format is
 *  `projects/{project}/locations/{location}/services/{service}`.
 */
@property(nonatomic, copy, nullable) NSString *service;

/**
 *  Output only. The Cloud Run Service urls that are associated with a
 *  `Rollout`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *serviceUrls;

@end


/**
 *  CloudRunRenderMetadata contains Cloud Run information associated with a
 *  `Release` render.
 */
@interface GTLRCloudDeploy_CloudRunRenderMetadata : GTLRObject

/**
 *  Output only. The name of the Cloud Run Service in the rendered manifest.
 *  Format is `projects/{project}/locations/{location}/services/{service}`.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Service-wide configuration.
 */
@interface GTLRCloudDeploy_Config : GTLRObject

/**
 *  Default Skaffold version that is assigned when a Release is created without
 *  specifying a Skaffold version.
 */
@property(nonatomic, copy, nullable) NSString *defaultSkaffoldVersion;

/** Name of the configuration. */
@property(nonatomic, copy, nullable) NSString *name;

/** All supported versions of Skaffold. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_SkaffoldVersion *> *supportedVersions;

@end


/**
 *  A createChildRollout Job.
 */
@interface GTLRCloudDeploy_CreateChildRolloutJob : GTLRObject
@end


/**
 *  CreateChildRolloutJobRun contains information specific to a
 *  createChildRollout `JobRun`.
 */
@interface GTLRCloudDeploy_CreateChildRolloutJobRun : GTLRObject

/**
 *  Output only. Name of the `ChildRollout`. Format is
 *  `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
 */
@property(nonatomic, copy, nullable) NSString *rollout;

/** Output only. The ID of the childRollout Phase initiated by this JobRun. */
@property(nonatomic, copy, nullable) NSString *rolloutPhaseId;

@end


/**
 *  CustomCanaryDeployment represents the custom canary deployment
 *  configuration.
 */
@interface GTLRCloudDeploy_CustomCanaryDeployment : GTLRObject

/**
 *  Required. Configuration for each phase in the canary deployment in the order
 *  executed.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_PhaseConfig *> *phaseConfigs;

@end


/**
 *  CustomMetadata contains information from a user-defined operation.
 */
@interface GTLRCloudDeploy_CustomMetadata : GTLRObject

/** Output only. Key-value pairs provided by the user-defined operation. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CustomMetadata_Values *values;

@end


/**
 *  Output only. Key-value pairs provided by the user-defined operation.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_CustomMetadata_Values : GTLRObject
@end


/**
 *  Information specifying a Custom Target.
 */
@interface GTLRCloudDeploy_CustomTarget : GTLRObject

/**
 *  Required. The name of the CustomTargetType. Format must be
 *  `projects/{project}/locations/{location}/customTargetTypes/{custom_target_type}`.
 */
@property(nonatomic, copy, nullable) NSString *customTargetType;

@end


/**
 *  CustomTargetDeployMetadata contains information from a Custom Target deploy
 *  operation.
 */
@interface GTLRCloudDeploy_CustomTargetDeployMetadata : GTLRObject

/**
 *  Output only. Skip message provided in the results of a custom deploy
 *  operation.
 */
@property(nonatomic, copy, nullable) NSString *skipMessage;

@end


/**
 *  CustomTargetSkaffoldActions represents the `CustomTargetType` configuration
 *  using Skaffold custom actions.
 */
@interface GTLRCloudDeploy_CustomTargetSkaffoldActions : GTLRObject

/** Required. The Skaffold custom action responsible for deploy operations. */
@property(nonatomic, copy, nullable) NSString *deployAction;

/**
 *  Optional. List of Skaffold modules Cloud Deploy will include in the Skaffold
 *  Config as required before performing diagnose.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_SkaffoldModules *> *includeSkaffoldModules;

/**
 *  Optional. The Skaffold custom action responsible for render operations. If
 *  not provided then Cloud Deploy will perform the render operations via
 *  `skaffold render`.
 */
@property(nonatomic, copy, nullable) NSString *renderAction;

@end


/**
 *  A `CustomTargetType` resource in the Cloud Deploy API. A `CustomTargetType`
 *  defines a type of custom target that can be referenced in a `Target` in
 *  order to facilitate deploying to other systems besides the supported
 *  runtimes.
 */
@interface GTLRCloudDeploy_CustomTargetType : GTLRObject

/**
 *  Optional. User annotations. These attributes can only be set and used by the
 *  user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations
 *  for more details such as format and size limitations.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CustomTargetType_Annotations *annotations;

/** Output only. Time at which the `CustomTargetType` was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Configures render and deploy for the `CustomTargetType` using Skaffold
 *  custom actions.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CustomTargetSkaffoldActions *customActions;

/** Output only. Resource id of the `CustomTargetType`. */
@property(nonatomic, copy, nullable) NSString *customTargetTypeId;

/**
 *  Optional. Description of the `CustomTargetType`. Max length is 255
 *  characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. This checksum is computed by the server based on the value of
 *  other fields, and may be sent on update and delete requests to ensure the
 *  client has an up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. Labels are attributes that can be set and used by both the user
 *  and by Cloud Deploy. Labels must meet the following constraints: * Keys and
 *  values can contain only lowercase letters, numeric characters, underscores,
 *  and dashes. * All characters must use UTF-8 encoding, and international
 *  characters are allowed. * Keys must start with a lowercase letter or
 *  international character. * Each resource is limited to a maximum of 64
 *  labels. Both keys and values are additionally constrained to be <= 128
 *  bytes.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CustomTargetType_Labels *labels;

/**
 *  Optional. Name of the `CustomTargetType`. Format is
 *  `projects/{project}/locations/{location}/customTargetTypes/a-z{0,62}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. Unique identifier of the `CustomTargetType`. */
@property(nonatomic, copy, nullable) NSString *uid;

/**
 *  Output only. Most recent time at which the `CustomTargetType` was updated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. User annotations. These attributes can only be set and used by the
 *  user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations
 *  for more details such as format and size limitations.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_CustomTargetType_Annotations : GTLRObject
@end


/**
 *  Optional. Labels are attributes that can be set and used by both the user
 *  and by Cloud Deploy. Labels must meet the following constraints: * Keys and
 *  values can contain only lowercase letters, numeric characters, underscores,
 *  and dashes. * All characters must use UTF-8 encoding, and international
 *  characters are allowed. * Keys must start with a lowercase letter or
 *  international character. * Each resource is limited to a maximum of 64
 *  labels. Both keys and values are additionally constrained to be <= 128
 *  bytes.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_CustomTargetType_Labels : GTLRObject
@end


/**
 *  Represents a whole or partial calendar date, such as a birthday. The time of
 *  day and time zone are either specified elsewhere or are insignificant. The
 *  date is relative to the Gregorian Calendar. This can represent one of the
 *  following: * A full date, with non-zero year, month, and day values. * A
 *  month and day, with a zero year (for example, an anniversary). * A year on
 *  its own, with a zero month and a zero day. * A year and month, with a zero
 *  day (for example, a credit card expiration date). Related types: *
 *  google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
@interface GTLRCloudDeploy_Date : GTLRObject

/**
 *  Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
 *  to specify a year by itself or a year and month where the day isn't
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of a year. Must be from 1 to 12, or 0 to specify a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  Execution using the default Cloud Build pool.
 */
@interface GTLRCloudDeploy_DefaultPool : GTLRObject

/**
 *  Optional. Cloud Storage location where execution outputs should be stored.
 *  This can either be a bucket ("gs://my-bucket") or a path within a bucket
 *  ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the
 *  same region will be used.
 */
@property(nonatomic, copy, nullable) NSString *artifactStorage;

/**
 *  Optional. Google service account to use for execution. If unspecified, the
 *  project execution service account (-compute\@developer.gserviceaccount.com)
 *  will be used.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

@end


/**
 *  A `DeliveryPipeline` resource in the Cloud Deploy API. A `DeliveryPipeline`
 *  defines a pipeline through which a Skaffold configuration can progress.
 */
@interface GTLRCloudDeploy_DeliveryPipeline : GTLRObject

/**
 *  User annotations. These attributes can only be set and used by the user, and
 *  not by Cloud Deploy.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeliveryPipeline_Annotations *annotations;

/** Output only. Information around the state of the Delivery Pipeline. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_PipelineCondition *condition;

/** Output only. Time at which the pipeline was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Description of the `DeliveryPipeline`. Max length is 255 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  This checksum is computed by the server based on the value of other fields,
 *  and may be sent on update and delete requests to ensure the client has an
 *  up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Labels are attributes that can be set and used by both the user and by Cloud
 *  Deploy. Labels must meet the following constraints: * Keys and values can
 *  contain only lowercase letters, numeric characters, underscores, and dashes.
 *  * All characters must use UTF-8 encoding, and international characters are
 *  allowed. * Keys must start with a lowercase letter or international
 *  character. * Each resource is limited to a maximum of 64 labels. Both keys
 *  and values are additionally constrained to be <= 128 bytes.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeliveryPipeline_Labels *labels;

/**
 *  Optional. Name of the `DeliveryPipeline`. Format is
 *  `projects/{project}/locations/{location}/deliveryPipelines/a-z{0,62}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_SerialPipeline *serialPipeline;

/**
 *  When suspended, no new releases or rollouts can be created, but in-progress
 *  ones will complete.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *suspended;

/** Output only. Unique identifier of the `DeliveryPipeline`. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Most recent time at which the pipeline was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  User annotations. These attributes can only be set and used by the user, and
 *  not by Cloud Deploy.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_DeliveryPipeline_Annotations : GTLRObject
@end


/**
 *  Labels are attributes that can be set and used by both the user and by Cloud
 *  Deploy. Labels must meet the following constraints: * Keys and values can
 *  contain only lowercase letters, numeric characters, underscores, and dashes.
 *  * All characters must use UTF-8 encoding, and international characters are
 *  allowed. * Keys must start with a lowercase letter or international
 *  character. * Each resource is limited to a maximum of 64 labels. Both keys
 *  and values are additionally constrained to be <= 128 bytes.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_DeliveryPipeline_Labels : GTLRObject
@end


/**
 *  Payload proto for "clouddeploy.googleapis.com/deliverypipeline_notification"
 *  Platform Log event that describes the failure to send delivery pipeline
 *  status change Pub/Sub notification.
 */
@interface GTLRCloudDeploy_DeliveryPipelineNotificationEvent : GTLRObject

/** The name of the `Delivery Pipeline`. */
@property(nonatomic, copy, nullable) NSString *deliveryPipeline;

/** Debug message for when a notification fails to send. */
@property(nonatomic, copy, nullable) NSString *message;

/** Unique identifier of the `DeliveryPipeline`. */
@property(nonatomic, copy, nullable) NSString *pipelineUid;

/**
 *  Type of this notification, e.g. for a Pub/Sub failure.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeProcessAborted
 *        A process aborted. (Value: "TYPE_PROCESS_ABORTED")
 *    @arg @c kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypePubsubNotificationFailure
 *        A Pub/Sub notification failed to be sent. (Value:
 *        "TYPE_PUBSUB_NOTIFICATION_FAILURE")
 *    @arg @c kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeRenderStatuesChange
 *        Deprecated: This field is never used. Use release_render log type
 *        instead. (Value: "TYPE_RENDER_STATUES_CHANGE")
 *    @arg @c kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeResourceDeleted
 *        Resource deleted. (Value: "TYPE_RESOURCE_DELETED")
 *    @arg @c kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeResourceStateChange
 *        Resource state changed. (Value: "TYPE_RESOURCE_STATE_CHANGE")
 *    @arg @c kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeRestrictionViolated
 *        Restriction check failed. (Value: "TYPE_RESTRICTION_VIOLATED")
 *    @arg @c kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeRolloutUpdate
 *        Rollout updated. (Value: "TYPE_ROLLOUT_UPDATE")
 *    @arg @c kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeUnspecified
 *        Type is unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The artifacts produced by a deploy operation.
 */
@interface GTLRCloudDeploy_DeployArtifact : GTLRObject

/**
 *  Output only. URI of a directory containing the artifacts. All paths are
 *  relative to this location.
 */
@property(nonatomic, copy, nullable) NSString *artifactUri;

/**
 *  Output only. File paths of the manifests applied during the deploy operation
 *  relative to the URI.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *manifestPaths;

@end


/**
 *  A deploy Job.
 */
@interface GTLRCloudDeploy_DeployJob : GTLRObject
@end


/**
 *  DeployJobRun contains information specific to a deploy `JobRun`.
 */
@interface GTLRCloudDeploy_DeployJobRun : GTLRObject

/** Output only. The artifact of a deploy job run, if available. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeployArtifact *artifact;

/**
 *  Output only. The resource name of the Cloud Build `Build` object that is
 *  used to deploy. Format is
 *  `projects/{project}/locations/{location}/builds/{build}`.
 */
@property(nonatomic, copy, nullable) NSString *build;

/**
 *  Output only. The reason the deploy failed. This will always be unspecified
 *  while the deploy is in progress or if it succeeded.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_DeployJobRun_FailureCause_CloudBuildRequestFailed
 *        Cloud Build failed to fulfill Cloud Deploy's request. See
 *        failure_message for additional details. (Value:
 *        "CLOUD_BUILD_REQUEST_FAILED")
 *    @arg @c kGTLRCloudDeploy_DeployJobRun_FailureCause_CloudBuildUnavailable
 *        Cloud Build is not available, either because it is not enabled or
 *        because Cloud Deploy has insufficient permissions. See [Required
 *        permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
 *        (Value: "CLOUD_BUILD_UNAVAILABLE")
 *    @arg @c kGTLRCloudDeploy_DeployJobRun_FailureCause_DeadlineExceeded The
 *        deploy job run did not complete within the alloted time. (Value:
 *        "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRCloudDeploy_DeployJobRun_FailureCause_DeployFeatureNotSupported
 *        The deploy operation had a feature configured that is not supported.
 *        (Value: "DEPLOY_FEATURE_NOT_SUPPORTED")
 *    @arg @c kGTLRCloudDeploy_DeployJobRun_FailureCause_ExecutionFailed The
 *        deploy operation did not complete successfully; check Cloud Build
 *        logs. (Value: "EXECUTION_FAILED")
 *    @arg @c kGTLRCloudDeploy_DeployJobRun_FailureCause_FailureCauseUnspecified
 *        No reason for failure is specified. (Value:
 *        "FAILURE_CAUSE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_DeployJobRun_FailureCause_MissingResourcesForCanary
 *        There were missing resources in the runtime environment required for a
 *        canary deployment. Check the Cloud Build logs for more information.
 *        (Value: "MISSING_RESOURCES_FOR_CANARY")
 */
@property(nonatomic, copy, nullable) NSString *failureCause;

/**
 *  Output only. Additional information about the deploy failure, if available.
 */
@property(nonatomic, copy, nullable) NSString *failureMessage;

/** Output only. Metadata containing information about the deploy job run. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeployJobRunMetadata *metadata;

@end


/**
 *  DeployJobRunMetadata surfaces information associated with a `DeployJobRun`
 *  to the user.
 */
@interface GTLRCloudDeploy_DeployJobRunMetadata : GTLRObject

/**
 *  Output only. The name of the Cloud Run Service that is associated with a
 *  `DeployJobRun`.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CloudRunMetadata *cloudRun;

/** Output only. Custom metadata provided by user-defined deploy operation. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CustomMetadata *custom;

/** Output only. Custom Target metadata associated with a `DeployJobRun`. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CustomTargetDeployMetadata *customTarget;

@end


/**
 *  Deployment job composition.
 */
@interface GTLRCloudDeploy_DeploymentJobs : GTLRObject

/** Output only. The deploy Job. This is the deploy job in the phase. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Job *deployJob;

/** Output only. The postdeploy Job, which is the last job on the phase. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Job *postdeployJob;

/** Output only. The predeploy Job, which is the first job on the phase. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Job *predeployJob;

/**
 *  Output only. The verify Job. Runs after a deploy if the deploy succeeds.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Job *verifyJob;

@end


/**
 *  DeployParameters contains deploy parameters information.
 */
@interface GTLRCloudDeploy_DeployParameters : GTLRObject

/**
 *  Optional. Deploy parameters are applied to targets with match labels. If
 *  unspecified, deploy parameters are applied to all targets (including child
 *  targets of a multi-target).
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeployParameters_MatchTargetLabels *matchTargetLabels;

/** Required. Values are deploy parameters in key-value pairs. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeployParameters_Values *values;

@end


/**
 *  Optional. Deploy parameters are applied to targets with match labels. If
 *  unspecified, deploy parameters are applied to all targets (including child
 *  targets of a multi-target).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_DeployParameters_MatchTargetLabels : GTLRObject
@end


/**
 *  Required. Values are deploy parameters in key-value pairs.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_DeployParameters_Values : GTLRObject
@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRCloudDeploy_Empty : GTLRObject
@end


/**
 *  Configuration of the environment to use when calling Skaffold.
 */
@interface GTLRCloudDeploy_ExecutionConfig : GTLRObject

/**
 *  Optional. Cloud Storage location in which to store execution outputs. This
 *  can either be a bucket ("gs://my-bucket") or a path within a bucket
 *  ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the
 *  same region will be used.
 */
@property(nonatomic, copy, nullable) NSString *artifactStorage;

/** Optional. Use default Cloud Build pool. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DefaultPool *defaultPool;

/**
 *  Optional. Execution timeout for a Cloud Build Execution. This must be
 *  between 10m and 24h in seconds format. If unspecified, a default timeout of
 *  1h is used.
 */
@property(nonatomic, strong, nullable) GTLRDuration *executionTimeout;

/** Optional. Use private Cloud Build pool. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_PrivatePool *privatePool;

/**
 *  Optional. Google service account to use for execution. If unspecified, the
 *  project execution service account (-compute\@developer.gserviceaccount.com)
 *  is used.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/** Required. Usages when this configuration should be applied. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *usages;

/**
 *  Optional. The resource name of the `WorkerPool`, with the format
 *  `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this
 *  optional field is unspecified, the default Cloud Build pool will be used.
 */
@property(nonatomic, copy, nullable) NSString *workerPool;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRCloudDeploy_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Information about the Kubernetes Gateway API service mesh configuration.
 */
@interface GTLRCloudDeploy_GatewayServiceMesh : GTLRObject

/**
 *  Required. Name of the Kubernetes Deployment whose traffic is managed by the
 *  specified HTTPRoute and Service.
 */
@property(nonatomic, copy, nullable) NSString *deployment;

/** Required. Name of the Gateway API HTTPRoute. */
@property(nonatomic, copy, nullable) NSString *httpRoute;

/**
 *  Optional. The time to wait for route updates to propagate. The maximum
 *  configurable time is 3 hours, in seconds format. If unspecified, there is no
 *  wait time.
 */
@property(nonatomic, strong, nullable) GTLRDuration *routeUpdateWaitTime;

/** Required. Name of the Kubernetes Service. */
@property(nonatomic, copy, nullable) NSString *service;

/**
 *  Optional. The amount of time to migrate traffic back from the canary Service
 *  to the original Service during the stable phase deployment. If specified,
 *  must be between 15s and 3600s. If unspecified, there is no cutback time.
 */
@property(nonatomic, strong, nullable) GTLRDuration *stableCutbackDuration;

@end


/**
 *  Information specifying a GKE Cluster.
 */
@interface GTLRCloudDeploy_GkeCluster : GTLRObject

/**
 *  Information specifying a GKE Cluster. Format is
 *  `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}`.
 */
@property(nonatomic, copy, nullable) NSString *cluster;

/**
 *  Optional. If true, `cluster` is accessed using the private IP address of the
 *  control plane endpoint. Otherwise, the default IP address of the control
 *  plane endpoint is used. The default IP address is the private IP address for
 *  clusters with private control-plane endpoints and the public IP address
 *  otherwise. Only specify this option when `cluster` is a [private GKE
 *  cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *internalIp;

@end


/**
 *  The request object used by `IgnoreJob`.
 */
@interface GTLRCloudDeploy_IgnoreJobRequest : GTLRObject

/** Required. The job ID for the Job to ignore. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** Required. The phase ID the Job to ignore belongs to. */
@property(nonatomic, copy, nullable) NSString *phaseId;

@end


/**
 *  The response object from `IgnoreJob`.
 */
@interface GTLRCloudDeploy_IgnoreJobResponse : GTLRObject
@end


/**
 *  Job represents an operation for a `Rollout`.
 */
@interface GTLRCloudDeploy_Job : GTLRObject

/** Output only. An advanceChildRollout Job. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_AdvanceChildRolloutJob *advanceChildRolloutJob;

/** Output only. A createChildRollout Job. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CreateChildRolloutJob *createChildRolloutJob;

/** Output only. A deploy Job. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeployJob *deployJob;

/**
 *  Output only. The ID of the Job.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Output only. The name of the `JobRun` responsible for the most recent
 *  invocation of this Job.
 */
@property(nonatomic, copy, nullable) NSString *jobRun;

/** Output only. A postdeploy Job. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_PostdeployJob *postdeployJob;

/** Output only. A predeploy Job. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_PredeployJob *predeployJob;

/**
 *  Output only. Additional information on why the Job was skipped, if
 *  available.
 */
@property(nonatomic, copy, nullable) NSString *skipMessage;

/**
 *  Output only. The current state of the Job.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_Job_State_Aborted The Job was aborted. (Value:
 *        "ABORTED")
 *    @arg @c kGTLRCloudDeploy_Job_State_Disabled The Job is disabled. (Value:
 *        "DISABLED")
 *    @arg @c kGTLRCloudDeploy_Job_State_Failed The Job failed. (Value:
 *        "FAILED")
 *    @arg @c kGTLRCloudDeploy_Job_State_Ignored The Job was ignored. (Value:
 *        "IGNORED")
 *    @arg @c kGTLRCloudDeploy_Job_State_InProgress The Job is in progress.
 *        (Value: "IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_Job_State_Pending The Job is waiting for an
 *        earlier Phase(s) or Job(s) to complete. (Value: "PENDING")
 *    @arg @c kGTLRCloudDeploy_Job_State_Skipped The Job was skipped. (Value:
 *        "SKIPPED")
 *    @arg @c kGTLRCloudDeploy_Job_State_StateUnspecified The Job has an
 *        unspecified state. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_Job_State_Succeeded The Job succeeded. (Value:
 *        "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. A verify Job. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_VerifyJob *verifyJob;

@end


/**
 *  A `JobRun` resource in the Cloud Deploy API. A `JobRun` contains information
 *  of a single `Rollout` job evaluation.
 */
@interface GTLRCloudDeploy_JobRun : GTLRObject

/** Output only. Information specific to an advanceChildRollout `JobRun` */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_AdvanceChildRolloutJobRun *advanceChildRolloutJobRun;

/** Output only. Information specific to a createChildRollout `JobRun`. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CreateChildRolloutJobRun *createChildRolloutJobRun;

/** Output only. Time at which the `JobRun` was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Information specific to a deploy `JobRun`. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeployJobRun *deployJobRun;

/** Output only. Time at which the `JobRun` ended. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. This checksum is computed by the server based on the value of
 *  other fields, and may be sent on update and delete requests to ensure the
 *  client has an up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Output only. ID of the `Rollout` job this `JobRun` corresponds to. */
@property(nonatomic, copy, nullable) NSString *jobId;

/**
 *  Optional. Name of the `JobRun`. Format is
 *  `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{releases}/rollouts/{rollouts}/jobRuns/{uuid}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. ID of the `Rollout` phase this `JobRun` belongs in. */
@property(nonatomic, copy, nullable) NSString *phaseId;

/** Output only. Information specific to a postdeploy `JobRun`. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_PostdeployJobRun *postdeployJobRun;

/** Output only. Information specific to a predeploy `JobRun`. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_PredeployJobRun *predeployJobRun;

/** Output only. Time at which the `JobRun` was started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. The current state of the `JobRun`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_JobRun_State_Failed The `JobRun` has failed.
 *        (Value: "FAILED")
 *    @arg @c kGTLRCloudDeploy_JobRun_State_InProgress The `JobRun` is in
 *        progress. (Value: "IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_JobRun_State_StateUnspecified The `JobRun` has an
 *        unspecified state. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_JobRun_State_Succeeded The `JobRun` has
 *        succeeded. (Value: "SUCCEEDED")
 *    @arg @c kGTLRCloudDeploy_JobRun_State_Terminated The `JobRun` was
 *        terminated. (Value: "TERMINATED")
 *    @arg @c kGTLRCloudDeploy_JobRun_State_Terminating The `JobRun` is
 *        terminating. (Value: "TERMINATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. Unique identifier of the `JobRun`. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Information specific to a verify `JobRun`. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_VerifyJobRun *verifyJobRun;

@end


/**
 *  Payload proto for "clouddeploy.googleapis.com/jobrun_notification" Platform
 *  Log event that describes the failure to send JobRun resource update Pub/Sub
 *  notification.
 */
@interface GTLRCloudDeploy_JobRunNotificationEvent : GTLRObject

/** The name of the `JobRun`. */
@property(nonatomic, copy, nullable) NSString *jobRun;

/** Debug message for when a notification fails to send. */
@property(nonatomic, copy, nullable) NSString *message;

/** Unique identifier of the `DeliveryPipeline`. */
@property(nonatomic, copy, nullable) NSString *pipelineUid;

/**
 *  The name of the `Release`.
 *
 *  Remapped to 'releaseProperty' to avoid NSObject's 'release'.
 */
@property(nonatomic, copy, nullable) NSString *releaseProperty;

/** Unique identifier of the `Release`. */
@property(nonatomic, copy, nullable) NSString *releaseUid;

/** The name of the `Rollout`. */
@property(nonatomic, copy, nullable) NSString *rollout;

/** Unique identifier of the `Rollout`. */
@property(nonatomic, copy, nullable) NSString *rolloutUid;

/** ID of the `Target`. */
@property(nonatomic, copy, nullable) NSString *targetId;

/**
 *  Type of this notification, e.g. for a Pub/Sub failure.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeProcessAborted A
 *        process aborted. (Value: "TYPE_PROCESS_ABORTED")
 *    @arg @c kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypePubsubNotificationFailure
 *        A Pub/Sub notification failed to be sent. (Value:
 *        "TYPE_PUBSUB_NOTIFICATION_FAILURE")
 *    @arg @c kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeRenderStatuesChange
 *        Deprecated: This field is never used. Use release_render log type
 *        instead. (Value: "TYPE_RENDER_STATUES_CHANGE")
 *    @arg @c kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeResourceDeleted
 *        Resource deleted. (Value: "TYPE_RESOURCE_DELETED")
 *    @arg @c kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeResourceStateChange
 *        Resource state changed. (Value: "TYPE_RESOURCE_STATE_CHANGE")
 *    @arg @c kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeRestrictionViolated
 *        Restriction check failed. (Value: "TYPE_RESTRICTION_VIOLATED")
 *    @arg @c kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeRolloutUpdate
 *        Rollout updated. (Value: "TYPE_ROLLOUT_UPDATE")
 *    @arg @c kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeUnspecified Type
 *        is unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  KubernetesConfig contains the Kubernetes runtime configuration.
 */
@interface GTLRCloudDeploy_KubernetesConfig : GTLRObject

/** Kubernetes Gateway API service mesh configuration. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_GatewayServiceMesh *gatewayServiceMesh;

/** Kubernetes Service networking configuration. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_ServiceNetworking *serviceNetworking;

@end


/**
 *  The response object from `ListAutomationRuns`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "automationRuns" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRCloudDeploy_ListAutomationRunsResponse : GTLRCollectionObject

/**
 *  The `AutomationRuns` objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_AutomationRun *> *automationRuns;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response object from `ListAutomations`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "automations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudDeploy_ListAutomationsResponse : GTLRCollectionObject

/**
 *  The `Automation` objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Automation *> *automations;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response object from `ListCustomTargetTypes.`
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "customTargetTypes" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRCloudDeploy_ListCustomTargetTypesResponse : GTLRCollectionObject

/**
 *  The `CustomTargetType` objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_CustomTargetType *> *customTargetTypes;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response object from `ListDeliveryPipelines`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "deliveryPipelines" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRCloudDeploy_ListDeliveryPipelinesResponse : GTLRCollectionObject

/**
 *  The `DeliveryPipeline` objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_DeliveryPipeline *> *deliveryPipelines;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  ListJobRunsResponse is the response object returned by `ListJobRuns`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "jobRuns" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudDeploy_ListJobRunsResponse : GTLRCollectionObject

/**
 *  The `JobRun` objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_JobRun *> *jobRuns;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudDeploy_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudDeploy_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Operation *> *operations;

@end


/**
 *  The response object from `ListReleases`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "releases" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudDeploy_ListReleasesResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The `Release` objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Release *> *releases;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  ListRolloutsResponse is the response object reutrned by `ListRollouts`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rollouts" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudDeploy_ListRolloutsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The `Rollout` objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Rollout *> *rollouts;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response object from `ListTargets`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "targets" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudDeploy_ListTargetsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The `Target` objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Target *> *targets;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  A resource that represents a Google Cloud location.
 */
@interface GTLRCloudDeploy_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudDeploy_Location_Metadata : GTLRObject
@end


/**
 *  Metadata includes information associated with a `Rollout`.
 */
@interface GTLRCloudDeploy_Metadata : GTLRObject

/**
 *  Output only. AutomationRolloutMetadata contains the information about the
 *  interactions between Automation service and this rollout.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_AutomationRolloutMetadata *automation;

/**
 *  Output only. The name of the Cloud Run Service that is associated with a
 *  `Rollout`.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CloudRunMetadata *cloudRun;

/**
 *  Output only. Custom metadata provided by user-defined `Rollout` operations.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CustomMetadata *custom;

@end


/**
 *  Information specifying a multiTarget.
 */
@interface GTLRCloudDeploy_MultiTarget : GTLRObject

/** Required. The target_ids of this multiTarget. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *targetIds;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudDeploy_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudDeploy_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudDeploy_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRCloudDeploy_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Phase represents a collection of jobs that are logically grouped together
 *  for a `Rollout`.
 */
@interface GTLRCloudDeploy_Phase : GTLRObject

/** Output only. ChildRollout job composition. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_ChildRolloutJobs *childRolloutJobs;

/** Output only. Deployment job composition. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeploymentJobs *deploymentJobs;

/**
 *  Output only. The ID of the Phase.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Output only. Additional information on why the Phase was skipped, if
 *  available.
 */
@property(nonatomic, copy, nullable) NSString *skipMessage;

/**
 *  Output only. Current state of the Phase.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_Phase_State_Aborted The Phase was aborted.
 *        (Value: "ABORTED")
 *    @arg @c kGTLRCloudDeploy_Phase_State_Failed The Phase has failed. (Value:
 *        "FAILED")
 *    @arg @c kGTLRCloudDeploy_Phase_State_InProgress The Phase is in progress.
 *        (Value: "IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_Phase_State_Pending The Phase is waiting for an
 *        earlier Phase(s) to complete. (Value: "PENDING")
 *    @arg @c kGTLRCloudDeploy_Phase_State_Skipped The Phase was skipped.
 *        (Value: "SKIPPED")
 *    @arg @c kGTLRCloudDeploy_Phase_State_StateUnspecified The Phase has an
 *        unspecified state. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_Phase_State_Succeeded The Phase has succeeded.
 *        (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Contains the paths to the artifacts, relative to the URI, for a phase.
 */
@interface GTLRCloudDeploy_PhaseArtifact : GTLRObject

/**
 *  Output only. File path of the directory of rendered job manifests relative
 *  to the URI. This is only set if it is applicable.
 */
@property(nonatomic, copy, nullable) NSString *jobManifestsPath;

/** Output only. File path of the rendered manifest relative to the URI. */
@property(nonatomic, copy, nullable) NSString *manifestPath;

/**
 *  Output only. File path of the resolved Skaffold configuration relative to
 *  the URI.
 */
@property(nonatomic, copy, nullable) NSString *skaffoldConfigPath;

@end


/**
 *  PhaseConfig represents the configuration for a phase in the custom canary
 *  deployment.
 */
@interface GTLRCloudDeploy_PhaseConfig : GTLRObject

/**
 *  Required. Percentage deployment for the phase.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *percentage;

/**
 *  Required. The ID to assign to the `Rollout` phase. This value must consist
 *  of lower-case letters, numbers, and hyphens, start with a letter and end
 *  with a letter or a number, and have a max length of 63 characters. In other
 *  words, it must match the following regex:
 *  `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
 */
@property(nonatomic, copy, nullable) NSString *phaseId;

/**
 *  Optional. Configuration for the postdeploy job of this phase. If this is not
 *  configured, there will be no postdeploy job for this phase.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Postdeploy *postdeploy;

/**
 *  Optional. Configuration for the predeploy job of this phase. If this is not
 *  configured, there will be no predeploy job for this phase.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Predeploy *predeploy;

/**
 *  Skaffold profiles to use when rendering the manifest for this phase. These
 *  are in addition to the profiles list specified in the `DeliveryPipeline`
 *  stage.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *profiles;

/**
 *  Whether to run verify tests after the deployment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verify;

@end


/**
 *  PipelineCondition contains all conditions relevant to a Delivery Pipeline.
 */
@interface GTLRCloudDeploy_PipelineCondition : GTLRObject

/** Details around the Pipeline's overall status. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_PipelineReadyCondition *pipelineReadyCondition;

/** Details around targets enumerated in the pipeline. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_TargetsPresentCondition *targetsPresentCondition;

/**
 *  Details on the whether the targets enumerated in the pipeline are of the
 *  same type.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_TargetsTypeCondition *targetsTypeCondition;

@end


/**
 *  PipelineReadyCondition contains information around the status of the
 *  Pipeline.
 */
@interface GTLRCloudDeploy_PipelineReadyCondition : GTLRObject

/**
 *  True if the Pipeline is in a valid state. Otherwise at least one condition
 *  in `PipelineCondition` is in an invalid state. Iterate over those conditions
 *  and see which condition(s) has status = false to find out what is wrong with
 *  the Pipeline.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *status;

/** Last time the condition was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** ``` { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
 *  members: - user:mike\@example.com - group:admins\@example.com -
 *  domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 ``` For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRCloudDeploy_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Postdeploy contains the postdeploy job configuration information.
 */
@interface GTLRCloudDeploy_Postdeploy : GTLRObject

/**
 *  Optional. A sequence of Skaffold custom actions to invoke during execution
 *  of the postdeploy job.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *actions;

@end


/**
 *  A postdeploy Job.
 */
@interface GTLRCloudDeploy_PostdeployJob : GTLRObject

/** Output only. The custom actions that the postdeploy Job executes. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *actions;

@end


/**
 *  PostdeployJobRun contains information specific to a postdeploy `JobRun`.
 */
@interface GTLRCloudDeploy_PostdeployJobRun : GTLRObject

/**
 *  Output only. The resource name of the Cloud Build `Build` object that is
 *  used to execute the custom actions associated with the postdeploy Job.
 *  Format is `projects/{project}/locations/{location}/builds/{build}`.
 */
@property(nonatomic, copy, nullable) NSString *build;

/**
 *  Output only. The reason the postdeploy failed. This will always be
 *  unspecified while the postdeploy is in progress or if it succeeded.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_PostdeployJobRun_FailureCause_CloudBuildRequestFailed
 *        Cloud Build failed to fulfill Cloud Deploy's request. See
 *        failure_message for additional details. (Value:
 *        "CLOUD_BUILD_REQUEST_FAILED")
 *    @arg @c kGTLRCloudDeploy_PostdeployJobRun_FailureCause_CloudBuildUnavailable
 *        Cloud Build is not available, either because it is not enabled or
 *        because Cloud Deploy has insufficient permissions. See [required
 *        permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
 *        (Value: "CLOUD_BUILD_UNAVAILABLE")
 *    @arg @c kGTLRCloudDeploy_PostdeployJobRun_FailureCause_DeadlineExceeded
 *        The postdeploy job run did not complete within the alloted time.
 *        (Value: "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRCloudDeploy_PostdeployJobRun_FailureCause_ExecutionFailed The
 *        postdeploy operation did not complete successfully; check Cloud Build
 *        logs. (Value: "EXECUTION_FAILED")
 *    @arg @c kGTLRCloudDeploy_PostdeployJobRun_FailureCause_FailureCauseUnspecified
 *        No reason for failure is specified. (Value:
 *        "FAILURE_CAUSE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *failureCause;

/**
 *  Output only. Additional information about the postdeploy failure, if
 *  available.
 */
@property(nonatomic, copy, nullable) NSString *failureMessage;

@end


/**
 *  Predeploy contains the predeploy job configuration information.
 */
@interface GTLRCloudDeploy_Predeploy : GTLRObject

/**
 *  Optional. A sequence of Skaffold custom actions to invoke during execution
 *  of the predeploy job.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *actions;

@end


/**
 *  A predeploy Job.
 */
@interface GTLRCloudDeploy_PredeployJob : GTLRObject

/** Output only. The custom actions that the predeploy Job executes. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *actions;

@end


/**
 *  PredeployJobRun contains information specific to a predeploy `JobRun`.
 */
@interface GTLRCloudDeploy_PredeployJobRun : GTLRObject

/**
 *  Output only. The resource name of the Cloud Build `Build` object that is
 *  used to execute the custom actions associated with the predeploy Job. Format
 *  is `projects/{project}/locations/{location}/builds/{build}`.
 */
@property(nonatomic, copy, nullable) NSString *build;

/**
 *  Output only. The reason the predeploy failed. This will always be
 *  unspecified while the predeploy is in progress or if it succeeded.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_PredeployJobRun_FailureCause_CloudBuildRequestFailed
 *        Cloud Build failed to fulfill Cloud Deploy's request. See
 *        failure_message for additional details. (Value:
 *        "CLOUD_BUILD_REQUEST_FAILED")
 *    @arg @c kGTLRCloudDeploy_PredeployJobRun_FailureCause_CloudBuildUnavailable
 *        Cloud Build is not available, either because it is not enabled or
 *        because Cloud Deploy has insufficient permissions. See [required
 *        permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
 *        (Value: "CLOUD_BUILD_UNAVAILABLE")
 *    @arg @c kGTLRCloudDeploy_PredeployJobRun_FailureCause_DeadlineExceeded The
 *        predeploy job run did not complete within the alloted time. (Value:
 *        "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRCloudDeploy_PredeployJobRun_FailureCause_ExecutionFailed The
 *        predeploy operation did not complete successfully; check Cloud Build
 *        logs. (Value: "EXECUTION_FAILED")
 *    @arg @c kGTLRCloudDeploy_PredeployJobRun_FailureCause_FailureCauseUnspecified
 *        No reason for failure is specified. (Value:
 *        "FAILURE_CAUSE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *failureCause;

/**
 *  Output only. Additional information about the predeploy failure, if
 *  available.
 */
@property(nonatomic, copy, nullable) NSString *failureMessage;

@end


/**
 *  Execution using a private Cloud Build pool.
 */
@interface GTLRCloudDeploy_PrivatePool : GTLRObject

/**
 *  Optional. Cloud Storage location where execution outputs should be stored.
 *  This can either be a bucket ("gs://my-bucket") or a path within a bucket
 *  ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the
 *  same region will be used.
 */
@property(nonatomic, copy, nullable) NSString *artifactStorage;

/**
 *  Optional. Google service account to use for execution. If unspecified, the
 *  project execution service account (-compute\@developer.gserviceaccount.com)
 *  will be used.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Required. Resource name of the Cloud Build worker pool to use. The format is
 *  `projects/{project}/locations/{location}/workerPools/{pool}`.
 */
@property(nonatomic, copy, nullable) NSString *workerPool;

@end


/**
 *  Contains the information of an automated promote-release operation.
 */
@interface GTLRCloudDeploy_PromoteReleaseOperation : GTLRObject

/**
 *  Output only. The starting phase of the rollout created by this operation.
 */
@property(nonatomic, copy, nullable) NSString *phase;

/**
 *  Output only. The name of the rollout that initiates the `AutomationRun`.
 */
@property(nonatomic, copy, nullable) NSString *rollout;

/**
 *  Output only. The ID of the target that represents the promotion stage to
 *  which the release will be promoted. The value of this field is the last
 *  segment of a target name.
 */
@property(nonatomic, copy, nullable) NSString *targetId;

/** Output only. How long the operation will be paused. */
@property(nonatomic, strong, nullable) GTLRDuration *wait;

@end


/**
 *  `PromoteRelease` rule will automatically promote a release from the current
 *  target to a specified target.
 */
@interface GTLRCloudDeploy_PromoteReleaseRule : GTLRObject

/** Output only. Information around the state of the Automation rule. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_AutomationRuleCondition *condition;

/**
 *  Optional. The starting phase of the rollout created by this operation.
 *  Default to the first phase.
 */
@property(nonatomic, copy, nullable) NSString *destinationPhase;

/**
 *  Optional. The ID of the stage in the pipeline to which this `Release` is
 *  deploying. If unspecified, default it to the next stage in the promotion
 *  flow. The value of this field could be one of the following: * The last
 *  segment of a target name. It only needs the ID to determine if the target is
 *  one of the stages in the promotion sequence defined in the pipeline. *
 *  "\@next", the next target in the promotion sequence.
 */
@property(nonatomic, copy, nullable) NSString *destinationTargetId;

/**
 *  Required. ID of the rule. This id must be unique in the `Automation`
 *  resource to which this rule belongs. The format is `a-z{0,62}`.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Optional. How long the release need to be paused until being promoted to the
 *  next target.
 */
@property(nonatomic, strong, nullable) GTLRDuration *wait;

@end


/**
 *  A `Release` resource in the Cloud Deploy API. A `Release` defines a specific
 *  Skaffold configuration instance that can be deployed.
 */
@interface GTLRCloudDeploy_Release : GTLRObject

/**
 *  Output only. Indicates whether this is an abandoned release.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *abandoned;

/**
 *  User annotations. These attributes can only be set and used by the user, and
 *  not by Cloud Deploy. See https://google.aip.dev/128#annotations for more
 *  details such as format and size limitations.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Release_Annotations *annotations;

/** List of artifacts to pass through to Skaffold command. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_BuildArtifact *> *buildArtifacts;

/** Output only. Information around the state of the Release. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_ReleaseCondition *condition;

/** Output only. Time at which the `Release` was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. Snapshot of the custom target types referenced by the targets
 *  taken at release creation time.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_CustomTargetType *> *customTargetTypeSnapshots;

/**
 *  Output only. Snapshot of the parent pipeline taken at release creation time.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeliveryPipeline *deliveryPipelineSnapshot;

/** Optional. The deploy parameters to use for all targets in this release. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Release_DeployParameters *deployParameters;

/**
 *  Description of the `Release`. Max length is 255 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  This checksum is computed by the server based on the value of other fields,
 *  and may be sent on update and delete requests to ensure the client has an
 *  up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Labels are attributes that can be set and used by both the user and by Cloud
 *  Deploy. Labels must meet the following constraints: * Keys and values can
 *  contain only lowercase letters, numeric characters, underscores, and dashes.
 *  * All characters must use UTF-8 encoding, and international characters are
 *  allowed. * Keys must start with a lowercase letter or international
 *  character. * Each resource is limited to a maximum of 64 labels. Both keys
 *  and values are additionally constrained to be <= 128 bytes.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Release_Labels *labels;

/**
 *  Optional. Name of the `Release`. Format is
 *  `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/a-z{0,62}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. Time at which the render completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *renderEndTime;

/** Output only. Time at which the render began. */
@property(nonatomic, strong, nullable) GTLRDateTime *renderStartTime;

/**
 *  Output only. Current state of the render operation.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_Release_RenderState_Failed All rendering
 *        operations have completed, and one or more have failed. (Value:
 *        "FAILED")
 *    @arg @c kGTLRCloudDeploy_Release_RenderState_InProgress Rendering has
 *        started and is not complete. (Value: "IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_Release_RenderState_RenderStateUnspecified The
 *        render state is unspecified. (Value: "RENDER_STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_Release_RenderState_Succeeded All rendering
 *        operations have completed successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *renderState;

/** Filepath of the Skaffold config inside of the config URI. */
@property(nonatomic, copy, nullable) NSString *skaffoldConfigPath;

/** Cloud Storage URI of tar.gz archive containing Skaffold configuration. */
@property(nonatomic, copy, nullable) NSString *skaffoldConfigUri;

/**
 *  The Skaffold version to use when operating on this release, such as
 *  "1.20.0". Not all versions are valid; Cloud Deploy supports a specific set
 *  of versions. If unset, the most recent supported Skaffold version will be
 *  used.
 */
@property(nonatomic, copy, nullable) NSString *skaffoldVersion;

/**
 *  Output only. Map from target ID to the target artifacts created during the
 *  render operation.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Release_TargetArtifacts *targetArtifacts;

/**
 *  Output only. Map from target ID to details of the render operation for that
 *  target.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Release_TargetRenders *targetRenders;

/** Output only. Snapshot of the targets taken at release creation time. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Target *> *targetSnapshots;

/** Output only. Unique identifier of the `Release`. */
@property(nonatomic, copy, nullable) NSString *uid;

@end


/**
 *  User annotations. These attributes can only be set and used by the user, and
 *  not by Cloud Deploy. See https://google.aip.dev/128#annotations for more
 *  details such as format and size limitations.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Release_Annotations : GTLRObject
@end


/**
 *  Optional. The deploy parameters to use for all targets in this release.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Release_DeployParameters : GTLRObject
@end


/**
 *  Labels are attributes that can be set and used by both the user and by Cloud
 *  Deploy. Labels must meet the following constraints: * Keys and values can
 *  contain only lowercase letters, numeric characters, underscores, and dashes.
 *  * All characters must use UTF-8 encoding, and international characters are
 *  allowed. * Keys must start with a lowercase letter or international
 *  character. * Each resource is limited to a maximum of 64 labels. Both keys
 *  and values are additionally constrained to be <= 128 bytes.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Release_Labels : GTLRObject
@end


/**
 *  Output only. Map from target ID to the target artifacts created during the
 *  render operation.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudDeploy_TargetArtifact. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudDeploy_Release_TargetArtifacts : GTLRObject
@end


/**
 *  Output only. Map from target ID to details of the render operation for that
 *  target.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudDeploy_TargetRender. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudDeploy_Release_TargetRenders : GTLRObject
@end


/**
 *  ReleaseCondition contains all conditions relevant to a Release.
 */
@interface GTLRCloudDeploy_ReleaseCondition : GTLRObject

/** Details around the Releases's overall status. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_ReleaseReadyCondition *releaseReadyCondition;

/** Details around the support state of the release's Skaffold version. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_SkaffoldSupportedCondition *skaffoldSupportedCondition;

@end


/**
 *  Payload proto for "clouddeploy.googleapis.com/release_notification" Platform
 *  Log event that describes the failure to send release status change Pub/Sub
 *  notification.
 */
@interface GTLRCloudDeploy_ReleaseNotificationEvent : GTLRObject

/** Debug message for when a notification fails to send. */
@property(nonatomic, copy, nullable) NSString *message;

/** Unique identifier of the `DeliveryPipeline`. */
@property(nonatomic, copy, nullable) NSString *pipelineUid;

/**
 *  The name of the `Release`.
 *
 *  Remapped to 'releaseProperty' to avoid NSObject's 'release'.
 */
@property(nonatomic, copy, nullable) NSString *releaseProperty;

/** Unique identifier of the `Release`. */
@property(nonatomic, copy, nullable) NSString *releaseUid;

/**
 *  Type of this notification, e.g. for a Pub/Sub failure.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeProcessAborted
 *        A process aborted. (Value: "TYPE_PROCESS_ABORTED")
 *    @arg @c kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypePubsubNotificationFailure
 *        A Pub/Sub notification failed to be sent. (Value:
 *        "TYPE_PUBSUB_NOTIFICATION_FAILURE")
 *    @arg @c kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeRenderStatuesChange
 *        Deprecated: This field is never used. Use release_render log type
 *        instead. (Value: "TYPE_RENDER_STATUES_CHANGE")
 *    @arg @c kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeResourceDeleted
 *        Resource deleted. (Value: "TYPE_RESOURCE_DELETED")
 *    @arg @c kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeResourceStateChange
 *        Resource state changed. (Value: "TYPE_RESOURCE_STATE_CHANGE")
 *    @arg @c kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeRestrictionViolated
 *        Restriction check failed. (Value: "TYPE_RESTRICTION_VIOLATED")
 *    @arg @c kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeRolloutUpdate
 *        Rollout updated. (Value: "TYPE_ROLLOUT_UPDATE")
 *    @arg @c kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeUnspecified
 *        Type is unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  ReleaseReadyCondition contains information around the status of the Release.
 *  If a release is not ready, you cannot create a rollout with the release.
 */
@interface GTLRCloudDeploy_ReleaseReadyCondition : GTLRObject

/**
 *  True if the Release is in a valid state. Otherwise at least one condition in
 *  `ReleaseCondition` is in an invalid state. Iterate over those conditions and
 *  see which condition(s) has status = false to find out what is wrong with the
 *  Release.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *status;

@end


/**
 *  Payload proto for "clouddeploy.googleapis.com/release_render" Platform Log
 *  event that describes the render status change.
 */
@interface GTLRCloudDeploy_ReleaseRenderEvent : GTLRObject

/**
 *  Debug message for when a render transition occurs. Provides further details
 *  as rendering progresses through render states.
 */
@property(nonatomic, copy, nullable) NSString *message;

/** Unique identifier of the `DeliveryPipeline`. */
@property(nonatomic, copy, nullable) NSString *pipelineUid;

/**
 *  The name of the release. release_uid is not in this log message because we
 *  write some of these log messages at release creation time, before we've
 *  generated the uid.
 *
 *  Remapped to 'releaseProperty' to avoid NSObject's 'release'.
 */
@property(nonatomic, copy, nullable) NSString *releaseProperty;

/**
 *  The state of the release render.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_ReleaseRenderEvent_ReleaseRenderState_Failed All
 *        rendering operations have completed, and one or more have failed.
 *        (Value: "FAILED")
 *    @arg @c kGTLRCloudDeploy_ReleaseRenderEvent_ReleaseRenderState_InProgress
 *        Rendering has started and is not complete. (Value: "IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_ReleaseRenderEvent_ReleaseRenderState_RenderStateUnspecified
 *        The render state is unspecified. (Value: "RENDER_STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_ReleaseRenderEvent_ReleaseRenderState_Succeeded
 *        All rendering operations have completed successfully. (Value:
 *        "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *releaseRenderState;

/**
 *  Type of this notification, e.g. for a release render state change event.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_ReleaseRenderEvent_Type_TypeProcessAborted A
 *        process aborted. (Value: "TYPE_PROCESS_ABORTED")
 *    @arg @c kGTLRCloudDeploy_ReleaseRenderEvent_Type_TypePubsubNotificationFailure
 *        A Pub/Sub notification failed to be sent. (Value:
 *        "TYPE_PUBSUB_NOTIFICATION_FAILURE")
 *    @arg @c kGTLRCloudDeploy_ReleaseRenderEvent_Type_TypeRenderStatuesChange
 *        Deprecated: This field is never used. Use release_render log type
 *        instead. (Value: "TYPE_RENDER_STATUES_CHANGE")
 *    @arg @c kGTLRCloudDeploy_ReleaseRenderEvent_Type_TypeResourceDeleted
 *        Resource deleted. (Value: "TYPE_RESOURCE_DELETED")
 *    @arg @c kGTLRCloudDeploy_ReleaseRenderEvent_Type_TypeResourceStateChange
 *        Resource state changed. (Value: "TYPE_RESOURCE_STATE_CHANGE")
 *    @arg @c kGTLRCloudDeploy_ReleaseRenderEvent_Type_TypeRestrictionViolated
 *        Restriction check failed. (Value: "TYPE_RESTRICTION_VIOLATED")
 *    @arg @c kGTLRCloudDeploy_ReleaseRenderEvent_Type_TypeRolloutUpdate Rollout
 *        updated. (Value: "TYPE_ROLLOUT_UPDATE")
 *    @arg @c kGTLRCloudDeploy_ReleaseRenderEvent_Type_TypeUnspecified Type is
 *        unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  RenderMetadata includes information associated with a `Release` render.
 */
@interface GTLRCloudDeploy_RenderMetadata : GTLRObject

/** Output only. Metadata associated with rendering for Cloud Run. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CloudRunRenderMetadata *cloudRun;

/** Output only. Custom metadata provided by user-defined render operation. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CustomMetadata *custom;

@end


/**
 *  Configuration of the repair action.
 */
@interface GTLRCloudDeploy_RepairMode : GTLRObject

/** Optional. Retries a failed job. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Retry *retry;

/** Optional. Rolls back a `Rollout`. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Rollback *rollback;

@end


/**
 *  RepairPhase tracks the repair attempts that have been made for each
 *  `RepairMode` specified in the `Automation` resource.
 */
@interface GTLRCloudDeploy_RepairPhase : GTLRObject

/** Output only. Records of the retry attempts for retry repair mode. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_RetryPhase *retry;

/** Output only. Rollback attempt for rollback repair mode . */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_RollbackAttempt *rollback;

@end


/**
 *  Contains the information for an automated `repair rollout` operation.
 */
@interface GTLRCloudDeploy_RepairRolloutOperation : GTLRObject

/**
 *  Output only. The index of the current repair action in the repair sequence.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentRepairModeIndex;

/** Output only. The job ID for the Job to repair. */
@property(nonatomic, copy, nullable) NSString *jobId;

/**
 *  Output only. The phase ID of the phase that includes the job being repaired.
 */
@property(nonatomic, copy, nullable) NSString *phaseId;

/**
 *  Output only. Records of the repair attempts. Each repair phase may have
 *  multiple retry attempts or single rollback attempt.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_RepairPhase *> *repairPhases;

/**
 *  Output only. The name of the rollout that initiates the `AutomationRun`.
 */
@property(nonatomic, copy, nullable) NSString *rollout;

@end


/**
 *  The `RepairRolloutRule` automation rule will automatically repair a failed
 *  `Rollout`.
 */
@interface GTLRCloudDeploy_RepairRolloutRule : GTLRObject

/** Output only. Information around the state of the 'Automation' rule. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_AutomationRuleCondition *condition;

/**
 *  Required. ID of the rule. This id must be unique in the `Automation`
 *  resource to which this rule belongs. The format is `a-z{0,62}`.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Optional. Jobs to repair. Proceeds only after job name matched any one in
 *  the list, or for all jobs if unspecified or empty. The phase that includes
 *  the job must match the phase ID specified in `source_phase`. This value must
 *  consist of lower-case letters, numbers, and hyphens, start with a letter and
 *  end with a letter or a number, and have a max length of 63 characters. In
 *  other words, it must match the following regex:
 *  `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *jobs;

/**
 *  Required. Defines the types of automatic repair actions for failed jobs.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_RepairMode *> *repairModes;

/**
 *  Optional. Phases within which jobs are subject to automatic repair actions
 *  on failure. Proceeds only after phase name matched any one in the list, or
 *  for all phases if unspecified. This value must consist of lower-case
 *  letters, numbers, and hyphens, start with a letter and end with a letter or
 *  a number, and have a max length of 63 characters. In other words, it must
 *  match the following regex: `^[a-z]([a-z0-9-]{0,61}[a-z0-9])?$`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourcePhases;

@end


/**
 *  Retries the failed job.
 */
@interface GTLRCloudDeploy_Retry : GTLRObject

/**
 *  Required. Total number of retries. Retry is skipped if set to 0; The minimum
 *  value is 1, and the maximum value is 10.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *attempts;

/**
 *  Optional. The pattern of how wait time will be increased. Default is linear.
 *  Backoff mode will be ignored if `wait` is 0.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_Retry_BackoffMode_BackoffModeExponential
 *        Increases the wait time exponentially. (Value:
 *        "BACKOFF_MODE_EXPONENTIAL")
 *    @arg @c kGTLRCloudDeploy_Retry_BackoffMode_BackoffModeLinear Increases the
 *        wait time linearly. (Value: "BACKOFF_MODE_LINEAR")
 *    @arg @c kGTLRCloudDeploy_Retry_BackoffMode_BackoffModeUnspecified No
 *        WaitMode is specified. (Value: "BACKOFF_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *backoffMode;

/**
 *  Optional. How long to wait for the first retry. Default is 0, and the
 *  maximum value is 14d.
 */
@property(nonatomic, strong, nullable) GTLRDuration *wait;

@end


/**
 *  RetryAttempt represents an action of retrying the failed Cloud Deploy job.
 */
@interface GTLRCloudDeploy_RetryAttempt : GTLRObject

/**
 *  Output only. The index of this retry attempt.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *attempt;

/**
 *  Output only. Valid state of this retry action.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_RetryAttempt_State_RepairStateCancelled The
 *        `repair` action was cancelled. (Value: "REPAIR_STATE_CANCELLED")
 *    @arg @c kGTLRCloudDeploy_RetryAttempt_State_RepairStateFailed The `repair`
 *        action has failed. (Value: "REPAIR_STATE_FAILED")
 *    @arg @c kGTLRCloudDeploy_RetryAttempt_State_RepairStateInProgress The
 *        `repair` action is in progress. (Value: "REPAIR_STATE_IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_RetryAttempt_State_RepairStatePending The
 *        `repair` action is pending. (Value: "REPAIR_STATE_PENDING")
 *    @arg @c kGTLRCloudDeploy_RetryAttempt_State_RepairStateSkipped The
 *        `repair` action was skipped. (Value: "REPAIR_STATE_SKIPPED")
 *    @arg @c kGTLRCloudDeploy_RetryAttempt_State_RepairStateSucceeded The
 *        `repair` action has succeeded. (Value: "REPAIR_STATE_SUCCEEDED")
 *    @arg @c kGTLRCloudDeploy_RetryAttempt_State_RepairStateUnspecified The
 *        `repair` has an unspecified state. (Value: "REPAIR_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. Description of the state of the Retry. */
@property(nonatomic, copy, nullable) NSString *stateDesc;

/** Output only. How long the operation will be paused. */
@property(nonatomic, strong, nullable) GTLRDuration *wait;

@end


/**
 *  RetryJobRequest is the request object used by `RetryJob`.
 */
@interface GTLRCloudDeploy_RetryJobRequest : GTLRObject

/** Required. The job ID for the Job to retry. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** Required. The phase ID the Job to retry belongs to. */
@property(nonatomic, copy, nullable) NSString *phaseId;

@end


/**
 *  The response object from 'RetryJob'.
 */
@interface GTLRCloudDeploy_RetryJobResponse : GTLRObject
@end


/**
 *  RetryPhase contains the retry attempts and the metadata for initiating a new
 *  attempt.
 */
@interface GTLRCloudDeploy_RetryPhase : GTLRObject

/** Output only. Detail of a retry action. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_RetryAttempt *> *attempts;

/**
 *  Output only. The pattern of how the wait time of the retry attempt is
 *  calculated.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_RetryPhase_BackoffMode_BackoffModeExponential
 *        Increases the wait time exponentially. (Value:
 *        "BACKOFF_MODE_EXPONENTIAL")
 *    @arg @c kGTLRCloudDeploy_RetryPhase_BackoffMode_BackoffModeLinear
 *        Increases the wait time linearly. (Value: "BACKOFF_MODE_LINEAR")
 *    @arg @c kGTLRCloudDeploy_RetryPhase_BackoffMode_BackoffModeUnspecified No
 *        WaitMode is specified. (Value: "BACKOFF_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *backoffMode;

/** Output only. The job ID for the Job to retry. */
@property(nonatomic, copy, nullable) NSString *jobId GTLR_DEPRECATED;

/**
 *  Output only. The phase ID of the phase that includes the job being retried.
 */
@property(nonatomic, copy, nullable) NSString *phaseId GTLR_DEPRECATED;

/**
 *  Output only. The number of attempts that have been made.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalAttempts;

@end


/**
 *  Rolls back a `Rollout`.
 */
@interface GTLRCloudDeploy_Rollback : GTLRObject

/**
 *  Optional. The starting phase ID for the `Rollout`. If unspecified, the
 *  `Rollout` will start in the stable phase.
 */
@property(nonatomic, copy, nullable) NSString *destinationPhase;

@end


/**
 *  RollbackAttempt represents an action of rolling back a Cloud Deploy
 *  'Target'.
 */
@interface GTLRCloudDeploy_RollbackAttempt : GTLRObject

/** Output only. The phase to which the rollout will be rolled back to. */
@property(nonatomic, copy, nullable) NSString *destinationPhase;

/** Output only. ID of the rollback `Rollout` to create. */
@property(nonatomic, copy, nullable) NSString *rolloutId;

/**
 *  Output only. Valid state of this rollback action.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_RollbackAttempt_State_RepairStateCancelled The
 *        `repair` action was cancelled. (Value: "REPAIR_STATE_CANCELLED")
 *    @arg @c kGTLRCloudDeploy_RollbackAttempt_State_RepairStateFailed The
 *        `repair` action has failed. (Value: "REPAIR_STATE_FAILED")
 *    @arg @c kGTLRCloudDeploy_RollbackAttempt_State_RepairStateInProgress The
 *        `repair` action is in progress. (Value: "REPAIR_STATE_IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_RollbackAttempt_State_RepairStatePending The
 *        `repair` action is pending. (Value: "REPAIR_STATE_PENDING")
 *    @arg @c kGTLRCloudDeploy_RollbackAttempt_State_RepairStateSkipped The
 *        `repair` action was skipped. (Value: "REPAIR_STATE_SKIPPED")
 *    @arg @c kGTLRCloudDeploy_RollbackAttempt_State_RepairStateSucceeded The
 *        `repair` action has succeeded. (Value: "REPAIR_STATE_SUCCEEDED")
 *    @arg @c kGTLRCloudDeploy_RollbackAttempt_State_RepairStateUnspecified The
 *        `repair` has an unspecified state. (Value: "REPAIR_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. Description of the state of the Rollback. */
@property(nonatomic, copy, nullable) NSString *stateDesc;

@end


/**
 *  Configs for the Rollback rollout.
 */
@interface GTLRCloudDeploy_RollbackTargetConfig : GTLRObject

/** Optional. The rollback `Rollout` to create. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Rollout *rollout;

/**
 *  Optional. The starting phase ID for the `Rollout`. If unspecified, the
 *  `Rollout` will start in the stable phase.
 */
@property(nonatomic, copy, nullable) NSString *startingPhaseId;

@end


/**
 *  The request object for `RollbackTarget`.
 */
@interface GTLRCloudDeploy_RollbackTargetRequest : GTLRObject

/**
 *  Optional. ID of the `Release` to roll back to. If this isn't specified, the
 *  previous successful `Rollout` to the specified target will be used to
 *  determine the `Release`.
 */
@property(nonatomic, copy, nullable) NSString *releaseId;

/** Optional. Configs for the rollback `Rollout`. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_RollbackTargetConfig *rollbackConfig;

/** Required. ID of the rollback `Rollout` to create. */
@property(nonatomic, copy, nullable) NSString *rolloutId;

/**
 *  Optional. If provided, this must be the latest `Rollout` that is on the
 *  `Target`.
 */
@property(nonatomic, copy, nullable) NSString *rolloutToRollBack;

/** Required. ID of the `Target` that is being rolled back. */
@property(nonatomic, copy, nullable) NSString *targetId;

/**
 *  Optional. If set to true, the request is validated and the user is provided
 *  with a `RollbackTargetResponse`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *validateOnly;

@end


/**
 *  The response object from `RollbackTarget`.
 */
@interface GTLRCloudDeploy_RollbackTargetResponse : GTLRObject

/** The config of the rollback `Rollout` created or will be created. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_RollbackTargetConfig *rollbackConfig;

@end


/**
 *  A `Rollout` resource in the Cloud Deploy API. A `Rollout` contains
 *  information around a specific deployment to a `Target`.
 */
@interface GTLRCloudDeploy_Rollout : GTLRObject

/**
 *  User annotations. These attributes can only be set and used by the user, and
 *  not by Cloud Deploy. See https://google.aip.dev/128#annotations for more
 *  details such as format and size limitations.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Rollout_Annotations *annotations;

/**
 *  Output only. Approval state of the `Rollout`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_Rollout_ApprovalState_ApprovalStateUnspecified
 *        The `Rollout` has an unspecified approval state. (Value:
 *        "APPROVAL_STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_Rollout_ApprovalState_Approved The `Rollout` has
 *        been approved. (Value: "APPROVED")
 *    @arg @c kGTLRCloudDeploy_Rollout_ApprovalState_DoesNotNeedApproval The
 *        `Rollout` does not require approval. (Value: "DOES_NOT_NEED_APPROVAL")
 *    @arg @c kGTLRCloudDeploy_Rollout_ApprovalState_NeedsApproval The `Rollout`
 *        requires approval. (Value: "NEEDS_APPROVAL")
 *    @arg @c kGTLRCloudDeploy_Rollout_ApprovalState_Rejected The `Rollout` has
 *        been rejected. (Value: "REJECTED")
 */
@property(nonatomic, copy, nullable) NSString *approvalState;

/** Output only. Time at which the `Rollout` was approved. */
@property(nonatomic, strong, nullable) GTLRDateTime *approveTime;

/**
 *  Output only. Name of the `ControllerRollout`. Format is
 *  `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
 */
@property(nonatomic, copy, nullable) NSString *controllerRollout;

/** Output only. Time at which the `Rollout` was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Time at which the `Rollout` finished deploying. */
@property(nonatomic, strong, nullable) GTLRDateTime *deployEndTime;

/**
 *  Output only. The reason this rollout failed. This will always be unspecified
 *  while the rollout is in progress.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_Rollout_DeployFailureCause_CloudBuildRequestFailed
 *        Cloud Build failed to fulfill Cloud Deploy's request. See
 *        failure_message for additional details. (Value:
 *        "CLOUD_BUILD_REQUEST_FAILED")
 *    @arg @c kGTLRCloudDeploy_Rollout_DeployFailureCause_CloudBuildUnavailable
 *        Cloud Build is not available, either because it is not enabled or
 *        because Cloud Deploy has insufficient permissions. See [required
 *        permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
 *        (Value: "CLOUD_BUILD_UNAVAILABLE")
 *    @arg @c kGTLRCloudDeploy_Rollout_DeployFailureCause_DeadlineExceeded
 *        Deployment did not complete within the alloted time. (Value:
 *        "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRCloudDeploy_Rollout_DeployFailureCause_ExecutionFailed The
 *        deploy operation did not complete successfully; check Cloud Build
 *        logs. (Value: "EXECUTION_FAILED")
 *    @arg @c kGTLRCloudDeploy_Rollout_DeployFailureCause_FailureCauseUnspecified
 *        No reason for failure is specified. (Value:
 *        "FAILURE_CAUSE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_Rollout_DeployFailureCause_OperationFeatureNotSupported
 *        A Rollout operation had a feature configured that is not supported.
 *        (Value: "OPERATION_FEATURE_NOT_SUPPORTED")
 *    @arg @c kGTLRCloudDeploy_Rollout_DeployFailureCause_ReleaseAbandoned
 *        Release is abandoned. (Value: "RELEASE_ABANDONED")
 *    @arg @c kGTLRCloudDeploy_Rollout_DeployFailureCause_ReleaseFailed Release
 *        is in a failed state. (Value: "RELEASE_FAILED")
 *    @arg @c kGTLRCloudDeploy_Rollout_DeployFailureCause_VerificationConfigNotFound
 *        No Skaffold verify configuration was found. (Value:
 *        "VERIFICATION_CONFIG_NOT_FOUND")
 */
@property(nonatomic, copy, nullable) NSString *deployFailureCause;

/**
 *  Output only. The resource name of the Cloud Build `Build` object that is
 *  used to deploy the Rollout. Format is
 *  `projects/{project}/locations/{location}/builds/{build}`.
 */
@property(nonatomic, copy, nullable) NSString *deployingBuild;

/** Output only. Time at which the `Rollout` started deploying. */
@property(nonatomic, strong, nullable) GTLRDateTime *deployStartTime;

/**
 *  Description of the `Rollout` for user purposes. Max length is 255
 *  characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Output only. Time at which the `Rollout` was enqueued. */
@property(nonatomic, strong, nullable) GTLRDateTime *enqueueTime;

/**
 *  This checksum is computed by the server based on the value of other fields,
 *  and may be sent on update and delete requests to ensure the client has an
 *  up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. Additional information about the rollout failure, if available.
 */
@property(nonatomic, copy, nullable) NSString *failureReason;

/**
 *  Labels are attributes that can be set and used by both the user and by Cloud
 *  Deploy. Labels must meet the following constraints: * Keys and values can
 *  contain only lowercase letters, numeric characters, underscores, and dashes.
 *  * All characters must use UTF-8 encoding, and international characters are
 *  allowed. * Keys must start with a lowercase letter or international
 *  character. * Each resource is limited to a maximum of 64 labels. Both keys
 *  and values are additionally constrained to be <= 128 bytes.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Rollout_Labels *labels;

/** Output only. Metadata contains information about the rollout. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Metadata *metadata;

/**
 *  Optional. Name of the `Rollout`. Format is
 *  `projects/{project}/locations/{location}/deliveryPipelines/{deliveryPipeline}/releases/{release}/rollouts/a-z{0,62}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The phases that represent the workflows of this `Rollout`. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Phase *> *phases;

/**
 *  Output only. Name of the `Rollout` that is rolled back by this `Rollout`.
 *  Empty if this `Rollout` wasn't created as a rollback.
 */
@property(nonatomic, copy, nullable) NSString *rollbackOfRollout;

/** Output only. Names of `Rollouts` that rolled back this `Rollout`. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *rolledBackByRollouts;

/**
 *  Output only. Current state of the `Rollout`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_Rollout_State_ApprovalRejected An approver
 *        rejected the `Rollout`. (Value: "APPROVAL_REJECTED")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_Cancelled The `Rollout` has been
 *        cancelled. (Value: "CANCELLED")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_Cancelling The `Rollout` is in the
 *        process of being cancelled. (Value: "CANCELLING")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_Failed The `Rollout` has failed.
 *        (Value: "FAILED")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_Halted The `Rollout` is halted.
 *        (Value: "HALTED")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_InProgress The `Rollout` is being
 *        deployed. (Value: "IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_Pending The `Rollout` is waiting
 *        for an earlier Rollout(s) to complete on this `Target`. (Value:
 *        "PENDING")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_PendingApproval The `Rollout` needs
 *        approval. (Value: "PENDING_APPROVAL")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_PendingRelease The `Rollout` is
 *        waiting for the `Release` to be fully rendered. (Value:
 *        "PENDING_RELEASE")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_StateUnspecified The `Rollout` has
 *        an unspecified state. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_Succeeded The `Rollout` has
 *        completed successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Required. The ID of Target to which this `Rollout` is deploying. */
@property(nonatomic, copy, nullable) NSString *targetId;

/** Output only. Unique identifier of the `Rollout`. */
@property(nonatomic, copy, nullable) NSString *uid;

@end


/**
 *  User annotations. These attributes can only be set and used by the user, and
 *  not by Cloud Deploy. See https://google.aip.dev/128#annotations for more
 *  details such as format and size limitations.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Rollout_Annotations : GTLRObject
@end


/**
 *  Labels are attributes that can be set and used by both the user and by Cloud
 *  Deploy. Labels must meet the following constraints: * Keys and values can
 *  contain only lowercase letters, numeric characters, underscores, and dashes.
 *  * All characters must use UTF-8 encoding, and international characters are
 *  allowed. * Keys must start with a lowercase letter or international
 *  character. * Each resource is limited to a maximum of 64 labels. Both keys
 *  and values are additionally constrained to be <= 128 bytes.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Rollout_Labels : GTLRObject
@end


/**
 *  Payload proto for "clouddeploy.googleapis.com/rollout_notification" Platform
 *  Log event that describes the failure to send rollout status change Pub/Sub
 *  notification.
 */
@interface GTLRCloudDeploy_RolloutNotificationEvent : GTLRObject

/** Debug message for when a notification fails to send. */
@property(nonatomic, copy, nullable) NSString *message;

/** Unique identifier of the `DeliveryPipeline`. */
@property(nonatomic, copy, nullable) NSString *pipelineUid;

/**
 *  The name of the `Release`.
 *
 *  Remapped to 'releaseProperty' to avoid NSObject's 'release'.
 */
@property(nonatomic, copy, nullable) NSString *releaseProperty;

/** Unique identifier of the `Release`. */
@property(nonatomic, copy, nullable) NSString *releaseUid;

/** The name of the `Rollout`. */
@property(nonatomic, copy, nullable) NSString *rollout;

/** Unique identifier of the `Rollout`. */
@property(nonatomic, copy, nullable) NSString *rolloutUid;

/** ID of the `Target` that the rollout is deployed to. */
@property(nonatomic, copy, nullable) NSString *targetId;

/**
 *  Type of this notification, e.g. for a Pub/Sub failure.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeProcessAborted
 *        A process aborted. (Value: "TYPE_PROCESS_ABORTED")
 *    @arg @c kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypePubsubNotificationFailure
 *        A Pub/Sub notification failed to be sent. (Value:
 *        "TYPE_PUBSUB_NOTIFICATION_FAILURE")
 *    @arg @c kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeRenderStatuesChange
 *        Deprecated: This field is never used. Use release_render log type
 *        instead. (Value: "TYPE_RENDER_STATUES_CHANGE")
 *    @arg @c kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeResourceDeleted
 *        Resource deleted. (Value: "TYPE_RESOURCE_DELETED")
 *    @arg @c kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeResourceStateChange
 *        Resource state changed. (Value: "TYPE_RESOURCE_STATE_CHANGE")
 *    @arg @c kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeRestrictionViolated
 *        Restriction check failed. (Value: "TYPE_RESTRICTION_VIOLATED")
 *    @arg @c kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeRolloutUpdate
 *        Rollout updated. (Value: "TYPE_ROLLOUT_UPDATE")
 *    @arg @c kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeUnspecified
 *        Type is unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Payload proto for "clouddeploy.googleapis.com/rollout_update" Platform Log
 *  event that describes the rollout update event.
 */
@interface GTLRCloudDeploy_RolloutUpdateEvent : GTLRObject

/** Debug message for when a rollout update event occurs. */
@property(nonatomic, copy, nullable) NSString *message;

/** Unique identifier of the pipeline. */
@property(nonatomic, copy, nullable) NSString *pipelineUid;

/**
 *  The name of the `Release`.
 *
 *  Remapped to 'releaseProperty' to avoid NSObject's 'release'.
 */
@property(nonatomic, copy, nullable) NSString *releaseProperty;

/** Unique identifier of the release. */
@property(nonatomic, copy, nullable) NSString *releaseUid;

/**
 *  The name of the rollout. rollout_uid is not in this log message because we
 *  write some of these log messages at rollout creation time, before we've
 *  generated the uid.
 */
@property(nonatomic, copy, nullable) NSString *rollout;

/**
 *  The type of the rollout update.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Advanced
 *        Rollout has been advanced. (Value: "ADVANCED")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_AdvanceRequired
 *        Rollout requires advance to the next phase. (Value:
 *        "ADVANCE_REQUIRED")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_ApprovalRequired
 *        Rollout requires approval. (Value: "APPROVAL_REQUIRED")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Approved
 *        Rollout has been approved. (Value: "APPROVED")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Cancelled
 *        Rollout state updated to cancelled. (Value: "CANCELLED")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Cancelling
 *        Rollout state updated to cancelling. (Value: "CANCELLING")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Failed
 *        Rollout state updated to failed. (Value: "FAILED")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Halted
 *        Rollout state updated to halted. (Value: "HALTED")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_InProgress
 *        Rollout state updated to in progress. (Value: "IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Pending
 *        rollout state updated to pending. (Value: "PENDING")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_PendingRelease
 *        Rollout state updated to pending release. (Value: "PENDING_RELEASE")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Rejected
 *        Rollout has been rejected. (Value: "REJECTED")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_RolloutUpdateTypeUnspecified
 *        Rollout update type unspecified. (Value:
 *        "ROLLOUT_UPDATE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_RolloutUpdateType_Succeeded
 *        Rollout state updated to succeeded. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *rolloutUpdateType;

/** ID of the target. */
@property(nonatomic, copy, nullable) NSString *targetId;

/**
 *  Type of this notification, e.g. for a rollout update event.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_Type_TypeProcessAborted A
 *        process aborted. (Value: "TYPE_PROCESS_ABORTED")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_Type_TypePubsubNotificationFailure
 *        A Pub/Sub notification failed to be sent. (Value:
 *        "TYPE_PUBSUB_NOTIFICATION_FAILURE")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_Type_TypeRenderStatuesChange
 *        Deprecated: This field is never used. Use release_render log type
 *        instead. (Value: "TYPE_RENDER_STATUES_CHANGE")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_Type_TypeResourceDeleted
 *        Resource deleted. (Value: "TYPE_RESOURCE_DELETED")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_Type_TypeResourceStateChange
 *        Resource state changed. (Value: "TYPE_RESOURCE_STATE_CHANGE")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_Type_TypeRestrictionViolated
 *        Restriction check failed. (Value: "TYPE_RESTRICTION_VIOLATED")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_Type_TypeRolloutUpdate Rollout
 *        updated. (Value: "TYPE_ROLLOUT_UPDATE")
 *    @arg @c kGTLRCloudDeploy_RolloutUpdateEvent_Type_TypeUnspecified Type is
 *        unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  RuntimeConfig contains the runtime specific configurations for a deployment
 *  strategy.
 */
@interface GTLRCloudDeploy_RuntimeConfig : GTLRObject

/** Cloud Run runtime configuration. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CloudRunConfig *cloudRun;

/** Kubernetes runtime configuration. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_KubernetesConfig *kubernetes;

@end


/**
 *  SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
 */
@interface GTLRCloudDeploy_SerialPipeline : GTLRObject

/**
 *  Each stage specifies configuration for a `Target`. The ordering of this list
 *  defines the promotion flow.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Stage *> *stages;

@end


/**
 *  Information about the Kubernetes Service networking configuration.
 */
@interface GTLRCloudDeploy_ServiceNetworking : GTLRObject

/**
 *  Required. Name of the Kubernetes Deployment whose traffic is managed by the
 *  specified Service.
 */
@property(nonatomic, copy, nullable) NSString *deployment;

/**
 *  Optional. Whether to disable Pod overprovisioning. If Pod overprovisioning
 *  is disabled then Cloud Deploy will limit the number of total Pods used for
 *  the deployment strategy to the number of Pods the Deployment has on the
 *  cluster.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disablePodOverprovisioning;

/** Required. Name of the Kubernetes Service. */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRCloudDeploy_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Cloud Storage bucket containing Skaffold Config modules.
 */
@interface GTLRCloudDeploy_SkaffoldGCSSource : GTLRObject

/** Optional. Relative path from the source to the Skaffold file. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Required. Cloud Storage source paths to copy recursively. For example,
 *  providing "gs://my-bucket/dir/configs/ *" will result in Skaffold copying
 *  all files within the "dir/configs" directory in the bucket "my-bucket".
 */
@property(nonatomic, copy, nullable) NSString *source;

@end


/**
 *  Git repository containing Skaffold Config modules.
 */
@interface GTLRCloudDeploy_SkaffoldGitSource : GTLRObject

/** Optional. Relative path from the repository root to the Skaffold file. */
@property(nonatomic, copy, nullable) NSString *path;

/** Optional. Git ref the package should be cloned from. */
@property(nonatomic, copy, nullable) NSString *ref;

/** Required. Git repository the package should be cloned from. */
@property(nonatomic, copy, nullable) NSString *repo;

@end


/**
 *  Skaffold Config modules and their remote source.
 */
@interface GTLRCloudDeploy_SkaffoldModules : GTLRObject

/** Optional. The Skaffold Config modules to use from the specified source. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *configs;

/** Remote git repository containing the Skaffold Config modules. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_SkaffoldGitSource *git;

/** Cloud Storage bucket containing the Skaffold Config modules. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_SkaffoldGCSSource *googleCloudStorage;

@end


/**
 *  SkaffoldSupportedCondition contains information about when support for the
 *  release's version of Skaffold ends.
 */
@interface GTLRCloudDeploy_SkaffoldSupportedCondition : GTLRObject

/**
 *  The time at which this release's version of Skaffold will enter maintenance
 *  mode.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *maintenanceModeTime;

/**
 *  The Skaffold support state for this release's version of Skaffold.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_SkaffoldSupportedCondition_SkaffoldSupportState_SkaffoldSupportStateMaintenanceMode
 *        This Skaffold version is in maintenance mode. (Value:
 *        "SKAFFOLD_SUPPORT_STATE_MAINTENANCE_MODE")
 *    @arg @c kGTLRCloudDeploy_SkaffoldSupportedCondition_SkaffoldSupportState_SkaffoldSupportStateSupported
 *        This Skaffold version is currently supported. (Value:
 *        "SKAFFOLD_SUPPORT_STATE_SUPPORTED")
 *    @arg @c kGTLRCloudDeploy_SkaffoldSupportedCondition_SkaffoldSupportState_SkaffoldSupportStateUnspecified
 *        Default value. This value is unused. (Value:
 *        "SKAFFOLD_SUPPORT_STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_SkaffoldSupportedCondition_SkaffoldSupportState_SkaffoldSupportStateUnsupported
 *        This Skaffold version is no longer supported. (Value:
 *        "SKAFFOLD_SUPPORT_STATE_UNSUPPORTED")
 */
@property(nonatomic, copy, nullable) NSString *skaffoldSupportState;

/**
 *  True if the version of Skaffold used by this release is supported.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *status;

/**
 *  The time at which this release's version of Skaffold will no longer be
 *  supported.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *supportExpirationTime;

@end


/**
 *  Details of a supported Skaffold version.
 */
@interface GTLRCloudDeploy_SkaffoldVersion : GTLRObject

/** The time at which this version of Skaffold will enter maintenance mode. */
@property(nonatomic, strong, nullable) GTLRDateTime *maintenanceModeTime;

/** Date when this version is expected to no longer be supported. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Date *supportEndDate;

/** The time at which this version of Skaffold will no longer be supported. */
@property(nonatomic, strong, nullable) GTLRDateTime *supportExpirationTime;

/** Release version number. For example, "1.20.3". */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Stage specifies a location to which to deploy.
 */
@interface GTLRCloudDeploy_Stage : GTLRObject

/** Optional. The deploy parameters to use for the target in this stage. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_DeployParameters *> *deployParameters;

/**
 *  Skaffold profiles to use when rendering the manifest for this stage's
 *  `Target`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *profiles;

/** Optional. The strategy to use for a `Rollout` to this stage. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Strategy *strategy;

/**
 *  The target_id to which this stage points. This field refers exclusively to
 *  the last segment of a target name. For example, this field would just be
 *  `my-target` (rather than
 *  `projects/project/locations/location/targets/my-target`). The location of
 *  the `Target` is inferred to be the same as the location of the
 *  `DeliveryPipeline` that contains this `Stage`.
 */
@property(nonatomic, copy, nullable) NSString *targetId;

@end


/**
 *  Standard represents the standard deployment strategy.
 */
@interface GTLRCloudDeploy_Standard : GTLRObject

/**
 *  Optional. Configuration for the postdeploy job. If this is not configured,
 *  postdeploy job will not be present.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Postdeploy *postdeploy;

/**
 *  Optional. Configuration for the predeploy job. If this is not configured,
 *  predeploy job will not be present.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Predeploy *predeploy;

/**
 *  Whether to verify a deployment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verify;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudDeploy_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudDeploy_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudDeploy_Status_Details_Item : GTLRObject
@end


/**
 *  Strategy contains deployment strategy information.
 */
@interface GTLRCloudDeploy_Strategy : GTLRObject

/**
 *  Canary deployment strategy provides progressive percentage based deployments
 *  to a Target.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Canary *canary;

/**
 *  Standard deployment strategy executes a single deploy and allows verifying
 *  the deployment.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Standard *standard;

@end


/**
 *  A `Target` resource in the Cloud Deploy API. A `Target` defines a location
 *  to which a Skaffold configuration can be deployed.
 */
@interface GTLRCloudDeploy_Target : GTLRObject

/**
 *  Optional. User annotations. These attributes can only be set and used by the
 *  user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations
 *  for more details such as format and size limitations.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Target_Annotations *annotations;

/** Optional. Information specifying an Anthos Cluster. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_AnthosCluster *anthosCluster;

/** Output only. Time at which the `Target` was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Optional. Information specifying a Custom Target. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CustomTarget *customTarget;

/** Optional. The deploy parameters to use for this target. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Target_DeployParameters *deployParameters;

/**
 *  Optional. Description of the `Target`. Max length is 255 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. This checksum is computed by the server based on the value of
 *  other fields, and may be sent on update and delete requests to ensure the
 *  client has an up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Configurations for all execution that relates to this `Target`. Each
 *  `ExecutionEnvironmentUsage` value may only be used in a single
 *  configuration; using the same value multiple times is an error. When one or
 *  more configurations are specified, they must include the `RENDER` and
 *  `DEPLOY` `ExecutionEnvironmentUsage` values. When no configurations are
 *  specified, execution will use the default specified in `DefaultPool`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_ExecutionConfig *> *executionConfigs;

/** Optional. Information specifying a GKE Cluster. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_GkeCluster *gke;

/**
 *  Optional. Labels are attributes that can be set and used by both the user
 *  and by Cloud Deploy. Labels must meet the following constraints: * Keys and
 *  values can contain only lowercase letters, numeric characters, underscores,
 *  and dashes. * All characters must use UTF-8 encoding, and international
 *  characters are allowed. * Keys must start with a lowercase letter or
 *  international character. * Each resource is limited to a maximum of 64
 *  labels. Both keys and values are additionally constrained to be <= 128
 *  bytes.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Target_Labels *labels;

/** Optional. Information specifying a multiTarget. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_MultiTarget *multiTarget;

/**
 *  Optional. Name of the `Target`. Format is
 *  `projects/{project}/locations/{location}/targets/a-z{0,62}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Whether or not the `Target` requires approval.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requireApproval;

/** Optional. Information specifying a Cloud Run deployment target. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CloudRunLocation *run;

/** Output only. Resource id of the `Target`. */
@property(nonatomic, copy, nullable) NSString *targetId;

/** Output only. Unique identifier of the `Target`. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Most recent time at which the `Target` was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. User annotations. These attributes can only be set and used by the
 *  user, and not by Cloud Deploy. See https://google.aip.dev/128#annotations
 *  for more details such as format and size limitations.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Target_Annotations : GTLRObject
@end


/**
 *  Optional. The deploy parameters to use for this target.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Target_DeployParameters : GTLRObject
@end


/**
 *  Optional. Labels are attributes that can be set and used by both the user
 *  and by Cloud Deploy. Labels must meet the following constraints: * Keys and
 *  values can contain only lowercase letters, numeric characters, underscores,
 *  and dashes. * All characters must use UTF-8 encoding, and international
 *  characters are allowed. * Keys must start with a lowercase letter or
 *  international character. * Each resource is limited to a maximum of 64
 *  labels. Both keys and values are additionally constrained to be <= 128
 *  bytes.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Target_Labels : GTLRObject
@end


/**
 *  The artifacts produced by a target render operation.
 */
@interface GTLRCloudDeploy_TargetArtifact : GTLRObject

/**
 *  Output only. URI of a directory containing the artifacts. This contains
 *  deployment configuration used by Skaffold during a rollout, and all paths
 *  are relative to this location.
 */
@property(nonatomic, copy, nullable) NSString *artifactUri;

/** Output only. File path of the rendered manifest relative to the URI. */
@property(nonatomic, copy, nullable) NSString *manifestPath;

/**
 *  Output only. Map from the phase ID to the phase artifacts for the `Target`.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_TargetArtifact_PhaseArtifacts *phaseArtifacts;

/**
 *  Output only. File path of the resolved Skaffold configuration relative to
 *  the URI.
 */
@property(nonatomic, copy, nullable) NSString *skaffoldConfigPath;

@end


/**
 *  Output only. Map from the phase ID to the phase artifacts for the `Target`.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudDeploy_PhaseArtifact. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudDeploy_TargetArtifact_PhaseArtifacts : GTLRObject
@end


/**
 *  Contains criteria for selecting Targets.
 */
@interface GTLRCloudDeploy_TargetAttribute : GTLRObject

/**
 *  ID of the `Target`. The value of this field could be one of the following: *
 *  The last segment of a target name. It only needs the ID to determine which
 *  target is being referred to * "*", all targets in a location.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Target labels. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_TargetAttribute_Labels *labels;

@end


/**
 *  Target labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_TargetAttribute_Labels : GTLRObject
@end


/**
 *  Payload proto for "clouddeploy.googleapis.com/target_notification" Platform
 *  Log event that describes the failure to send target status change Pub/Sub
 *  notification.
 */
@interface GTLRCloudDeploy_TargetNotificationEvent : GTLRObject

/** Debug message for when a notification fails to send. */
@property(nonatomic, copy, nullable) NSString *message;

/** The name of the `Target`. */
@property(nonatomic, copy, nullable) NSString *target;

/**
 *  Type of this notification, e.g. for a Pub/Sub failure.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeProcessAborted A
 *        process aborted. (Value: "TYPE_PROCESS_ABORTED")
 *    @arg @c kGTLRCloudDeploy_TargetNotificationEvent_Type_TypePubsubNotificationFailure
 *        A Pub/Sub notification failed to be sent. (Value:
 *        "TYPE_PUBSUB_NOTIFICATION_FAILURE")
 *    @arg @c kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeRenderStatuesChange
 *        Deprecated: This field is never used. Use release_render log type
 *        instead. (Value: "TYPE_RENDER_STATUES_CHANGE")
 *    @arg @c kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeResourceDeleted
 *        Resource deleted. (Value: "TYPE_RESOURCE_DELETED")
 *    @arg @c kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeResourceStateChange
 *        Resource state changed. (Value: "TYPE_RESOURCE_STATE_CHANGE")
 *    @arg @c kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeRestrictionViolated
 *        Restriction check failed. (Value: "TYPE_RESTRICTION_VIOLATED")
 *    @arg @c kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeRolloutUpdate
 *        Rollout updated. (Value: "TYPE_ROLLOUT_UPDATE")
 *    @arg @c kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeUnspecified Type
 *        is unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Details of rendering for a single target.
 */
@interface GTLRCloudDeploy_TargetRender : GTLRObject

/**
 *  Output only. Reason this render failed. This will always be unspecified
 *  while the render in progress.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_TargetRender_FailureCause_CloudBuildRequestFailed
 *        Cloud Build failed to fulfill Cloud Deploy's request. See
 *        failure_message for additional details. (Value:
 *        "CLOUD_BUILD_REQUEST_FAILED")
 *    @arg @c kGTLRCloudDeploy_TargetRender_FailureCause_CloudBuildUnavailable
 *        Cloud Build is not available, either because it is not enabled or
 *        because Cloud Deploy has insufficient permissions. See [required
 *        permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
 *        (Value: "CLOUD_BUILD_UNAVAILABLE")
 *    @arg @c kGTLRCloudDeploy_TargetRender_FailureCause_CustomActionNotFound
 *        The render operation did not complete successfully because the custom
 *        action required for predeploy or postdeploy was not found in the
 *        Skaffold configuration. See failure_message for additional details.
 *        (Value: "CUSTOM_ACTION_NOT_FOUND")
 *    @arg @c kGTLRCloudDeploy_TargetRender_FailureCause_DeploymentStrategyNotSupported
 *        Release failed during rendering because the release configuration is
 *        not supported with the specified deployment strategy. (Value:
 *        "DEPLOYMENT_STRATEGY_NOT_SUPPORTED")
 *    @arg @c kGTLRCloudDeploy_TargetRender_FailureCause_ExecutionFailed The
 *        render operation did not complete successfully; check Cloud Build
 *        logs. (Value: "EXECUTION_FAILED")
 *    @arg @c kGTLRCloudDeploy_TargetRender_FailureCause_FailureCauseUnspecified
 *        No reason for failure is specified. (Value:
 *        "FAILURE_CAUSE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_TargetRender_FailureCause_RenderFeatureNotSupported
 *        The render operation had a feature configured that is not supported.
 *        (Value: "RENDER_FEATURE_NOT_SUPPORTED")
 *    @arg @c kGTLRCloudDeploy_TargetRender_FailureCause_VerificationConfigNotFound
 *        The render operation did not complete successfully because the
 *        verification stanza required for verify was not found on the Skaffold
 *        configuration. (Value: "VERIFICATION_CONFIG_NOT_FOUND")
 */
@property(nonatomic, copy, nullable) NSString *failureCause;

/**
 *  Output only. Additional information about the render failure, if available.
 */
@property(nonatomic, copy, nullable) NSString *failureMessage;

/** Output only. Metadata related to the `Release` render for this Target. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_RenderMetadata *metadata;

/**
 *  Output only. The resource name of the Cloud Build `Build` object that is
 *  used to render the manifest for this target. Format is
 *  `projects/{project}/locations/{location}/builds/{build}`.
 */
@property(nonatomic, copy, nullable) NSString *renderingBuild;

/**
 *  Output only. Current state of the render operation for this Target.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_TargetRender_RenderingState_Failed The render
 *        operation has failed. (Value: "FAILED")
 *    @arg @c kGTLRCloudDeploy_TargetRender_RenderingState_InProgress The render
 *        operation is in progress. (Value: "IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_TargetRender_RenderingState_Succeeded The render
 *        operation has completed successfully. (Value: "SUCCEEDED")
 *    @arg @c kGTLRCloudDeploy_TargetRender_RenderingState_TargetRenderStateUnspecified
 *        The render operation state is unspecified. (Value:
 *        "TARGET_RENDER_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *renderingState;

@end


/**
 *  `TargetsPresentCondition` contains information on any Targets referenced in
 *  the Delivery Pipeline that do not actually exist.
 */
@interface GTLRCloudDeploy_TargetsPresentCondition : GTLRObject

/**
 *  The list of Target names that do not exist. For example,
 *  `projects/{project_id}/locations/{location_name}/targets/{target_name}`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *missingTargets;

/**
 *  True if there aren't any missing Targets.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *status;

/** Last time the condition was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  TargetsTypeCondition contains information on whether the Targets defined in
 *  the Delivery Pipeline are of the same type.
 */
@interface GTLRCloudDeploy_TargetsTypeCondition : GTLRObject

/** Human readable error message. */
@property(nonatomic, copy, nullable) NSString *errorDetails;

/**
 *  True if the targets are all a comparable type. For example this is true if
 *  all targets are GKE clusters. This is false if some targets are Cloud Run
 *  targets and others are GKE clusters.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *status;

@end


/**
 *  The request object used by `TerminateJobRun`.
 */
@interface GTLRCloudDeploy_TerminateJobRunRequest : GTLRObject
@end


/**
 *  The response object from `TerminateJobRun`.
 */
@interface GTLRCloudDeploy_TerminateJobRunResponse : GTLRObject
@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRCloudDeploy_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRCloudDeploy_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  A verify Job.
 */
@interface GTLRCloudDeploy_VerifyJob : GTLRObject
@end


/**
 *  VerifyJobRun contains information specific to a verify `JobRun`.
 */
@interface GTLRCloudDeploy_VerifyJobRun : GTLRObject

/**
 *  Output only. URI of a directory containing the verify artifacts. This
 *  contains the Skaffold event log.
 */
@property(nonatomic, copy, nullable) NSString *artifactUri;

/**
 *  Output only. The resource name of the Cloud Build `Build` object that is
 *  used to verify. Format is
 *  `projects/{project}/locations/{location}/builds/{build}`.
 */
@property(nonatomic, copy, nullable) NSString *build;

/**
 *  Output only. File path of the Skaffold event log relative to the artifact
 *  URI.
 */
@property(nonatomic, copy, nullable) NSString *eventLogPath;

/**
 *  Output only. The reason the verify failed. This will always be unspecified
 *  while the verify is in progress or if it succeeded.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_VerifyJobRun_FailureCause_CloudBuildRequestFailed
 *        Cloud Build failed to fulfill Cloud Deploy's request. See
 *        failure_message for additional details. (Value:
 *        "CLOUD_BUILD_REQUEST_FAILED")
 *    @arg @c kGTLRCloudDeploy_VerifyJobRun_FailureCause_CloudBuildUnavailable
 *        Cloud Build is not available, either because it is not enabled or
 *        because Cloud Deploy has insufficient permissions. See [required
 *        permission](https://cloud.google.com/deploy/docs/cloud-deploy-service-account#required_permissions).
 *        (Value: "CLOUD_BUILD_UNAVAILABLE")
 *    @arg @c kGTLRCloudDeploy_VerifyJobRun_FailureCause_DeadlineExceeded The
 *        verify job run did not complete within the alloted time. (Value:
 *        "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRCloudDeploy_VerifyJobRun_FailureCause_ExecutionFailed The
 *        verify operation did not complete successfully; check Cloud Build
 *        logs. (Value: "EXECUTION_FAILED")
 *    @arg @c kGTLRCloudDeploy_VerifyJobRun_FailureCause_FailureCauseUnspecified
 *        No reason for failure is specified. (Value:
 *        "FAILURE_CAUSE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_VerifyJobRun_FailureCause_VerificationConfigNotFound
 *        No Skaffold verify configuration was found. (Value:
 *        "VERIFICATION_CONFIG_NOT_FOUND")
 */
@property(nonatomic, copy, nullable) NSString *failureCause;

/**
 *  Output only. Additional information about the verify failure, if available.
 */
@property(nonatomic, copy, nullable) NSString *failureMessage;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
