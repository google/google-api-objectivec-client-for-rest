// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Cloud Deploy API (clouddeploy/v1)
// Documentation:
//   https://cloud.google.com/deploy/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudDeploy_AnthosCluster;
@class GTLRCloudDeploy_AuditConfig;
@class GTLRCloudDeploy_AuditLogConfig;
@class GTLRCloudDeploy_Binding;
@class GTLRCloudDeploy_BuildArtifact;
@class GTLRCloudDeploy_CloudRunLocation;
@class GTLRCloudDeploy_CloudRunMetadata;
@class GTLRCloudDeploy_Date;
@class GTLRCloudDeploy_DefaultPool;
@class GTLRCloudDeploy_DeliveryPipeline;
@class GTLRCloudDeploy_DeliveryPipeline_Annotations;
@class GTLRCloudDeploy_DeliveryPipeline_Labels;
@class GTLRCloudDeploy_DeployJob;
@class GTLRCloudDeploy_DeployJobRun;
@class GTLRCloudDeploy_DeployJobRunMetadata;
@class GTLRCloudDeploy_DeploymentJobs;
@class GTLRCloudDeploy_ExecutionConfig;
@class GTLRCloudDeploy_Expr;
@class GTLRCloudDeploy_GkeCluster;
@class GTLRCloudDeploy_Job;
@class GTLRCloudDeploy_JobRun;
@class GTLRCloudDeploy_Location;
@class GTLRCloudDeploy_Location_Labels;
@class GTLRCloudDeploy_Location_Metadata;
@class GTLRCloudDeploy_Metadata;
@class GTLRCloudDeploy_Operation;
@class GTLRCloudDeploy_Operation_Metadata;
@class GTLRCloudDeploy_Operation_Response;
@class GTLRCloudDeploy_Phase;
@class GTLRCloudDeploy_PipelineCondition;
@class GTLRCloudDeploy_PipelineReadyCondition;
@class GTLRCloudDeploy_Policy;
@class GTLRCloudDeploy_PrivatePool;
@class GTLRCloudDeploy_Release;
@class GTLRCloudDeploy_Release_Annotations;
@class GTLRCloudDeploy_Release_Labels;
@class GTLRCloudDeploy_Release_TargetArtifacts;
@class GTLRCloudDeploy_Release_TargetRenders;
@class GTLRCloudDeploy_Rollout;
@class GTLRCloudDeploy_Rollout_Annotations;
@class GTLRCloudDeploy_Rollout_Labels;
@class GTLRCloudDeploy_SerialPipeline;
@class GTLRCloudDeploy_SkaffoldVersion;
@class GTLRCloudDeploy_Stage;
@class GTLRCloudDeploy_Standard;
@class GTLRCloudDeploy_Status;
@class GTLRCloudDeploy_Status_Details_Item;
@class GTLRCloudDeploy_Strategy;
@class GTLRCloudDeploy_Target;
@class GTLRCloudDeploy_Target_Annotations;
@class GTLRCloudDeploy_Target_Labels;
@class GTLRCloudDeploy_TargetArtifact;
@class GTLRCloudDeploy_TargetRender;
@class GTLRCloudDeploy_TargetsPresentCondition;
@class GTLRCloudDeploy_VerifyJob;
@class GTLRCloudDeploy_VerifyJobRun;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_DeliveryPipelineNotificationEvent.type

/**
 *  A Pub/Sub notification failed to be sent.
 *
 *  Value: "TYPE_PUBSUB_NOTIFICATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypePubsubNotificationFailure;
/**
 *  Deprecated: This field is never used. Use release_render log type instead.
 *
 *  Value: "TYPE_RENDER_STATUES_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeRenderStatuesChange;
/**
 *  Type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_DeployJobRun.failureCause

/**
 *  Cloud Build is not available, either because it is not enabled or because
 *  Google Cloud Deploy has insufficient permissions. See [Required
 *  permission](/deploy/docs/cloud-deploy-service-account#required_permissions).
 *
 *  Value: "CLOUD_BUILD_UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeployJobRun_FailureCause_CloudBuildUnavailable;
/**
 *  The deploy build did not complete within the alloted time.
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeployJobRun_FailureCause_DeadlineExceeded;
/**
 *  The deploy operation did not complete successfully; check Cloud Build logs.
 *
 *  Value: "EXECUTION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeployJobRun_FailureCause_ExecutionFailed;
/**
 *  No reason for failure is specified.
 *
 *  Value: "FAILURE_CAUSE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_DeployJobRun_FailureCause_FailureCauseUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_ExecutionConfig.usages

/**
 *  Use for deploying and deployment hooks.
 *
 *  Value: "DEPLOY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ExecutionConfig_Usages_Deploy;
/**
 *  Default value. This value is unused.
 *
 *  Value: "EXECUTION_ENVIRONMENT_USAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ExecutionConfig_Usages_ExecutionEnvironmentUsageUnspecified;
/**
 *  Use for rendering.
 *
 *  Value: "RENDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ExecutionConfig_Usages_Render;
/**
 *  Use for deployment verification.
 *
 *  Value: "VERIFY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ExecutionConfig_Usages_Verify;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_Job.state

/**
 *  The Job was aborted.
 *
 *  Value: "ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Job_State_Aborted;
/**
 *  The Job is disabled.
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Job_State_Disabled;
/**
 *  The Job failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Job_State_Failed;
/**
 *  The Job is in progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Job_State_InProgress;
/**
 *  The Job is waiting for an earlier Phase(s) or Job(s) to complete.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Job_State_Pending;
/**
 *  The Job has an unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Job_State_StateUnspecified;
/**
 *  The Job succeeded.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Job_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_JobRun.state

/**
 *  The `JobRun` has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRun_State_Failed;
/**
 *  The `JobRun` is in progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRun_State_InProgress;
/**
 *  The `JobRun` has an unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRun_State_StateUnspecified;
/**
 *  The `JobRun` has succeeded.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRun_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_JobRunNotificationEvent.type

/**
 *  A Pub/Sub notification failed to be sent.
 *
 *  Value: "TYPE_PUBSUB_NOTIFICATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypePubsubNotificationFailure;
/**
 *  Deprecated: This field is never used. Use release_render log type instead.
 *
 *  Value: "TYPE_RENDER_STATUES_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeRenderStatuesChange;
/**
 *  Type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_Phase.state

/**
 *  The Phase was aborted.
 *
 *  Value: "ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Phase_State_Aborted;
/**
 *  The Phase has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Phase_State_Failed;
/**
 *  The Phase is in progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Phase_State_InProgress;
/**
 *  The Phase is waiting for an earlier Phase(s) to complete.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Phase_State_Pending;
/**
 *  The Phase has an unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Phase_State_StateUnspecified;
/**
 *  The Phase has succeeded.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Phase_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_Release.renderState

/**
 *  All rendering operations have completed, and one or more have failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Release_RenderState_Failed;
/**
 *  Rendering has started and is not complete.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Release_RenderState_InProgress;
/**
 *  The render state is unspecified.
 *
 *  Value: "RENDER_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Release_RenderState_RenderStateUnspecified;
/**
 *  All rendering operations have completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Release_RenderState_Succeeded;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_ReleaseNotificationEvent.type

/**
 *  A Pub/Sub notification failed to be sent.
 *
 *  Value: "TYPE_PUBSUB_NOTIFICATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypePubsubNotificationFailure;
/**
 *  Deprecated: This field is never used. Use release_render log type instead.
 *
 *  Value: "TYPE_RENDER_STATUES_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeRenderStatuesChange;
/**
 *  Type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_Rollout.approvalState

/**
 *  The `Rollout` has an unspecified approval state.
 *
 *  Value: "APPROVAL_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_ApprovalState_ApprovalStateUnspecified;
/**
 *  The `Rollout` has been approved.
 *
 *  Value: "APPROVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_ApprovalState_Approved;
/**
 *  The `Rollout` does not require approval.
 *
 *  Value: "DOES_NOT_NEED_APPROVAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_ApprovalState_DoesNotNeedApproval;
/**
 *  The `Rollout` requires approval.
 *
 *  Value: "NEEDS_APPROVAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_ApprovalState_NeedsApproval;
/**
 *  The `Rollout` has been rejected.
 *
 *  Value: "REJECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_ApprovalState_Rejected;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_Rollout.deployFailureCause

/**
 *  Cloud Build is not available, either because it is not enabled or because
 *  Cloud Deploy has insufficient permissions. See [required
 *  permission](/deploy/docs/cloud-deploy-service-account#required_permissions).
 *
 *  Value: "CLOUD_BUILD_UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_DeployFailureCause_CloudBuildUnavailable;
/**
 *  Deployment did not complete within the alloted time.
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_DeployFailureCause_DeadlineExceeded;
/**
 *  The deploy operation did not complete successfully; check Cloud Build logs.
 *
 *  Value: "EXECUTION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_DeployFailureCause_ExecutionFailed;
/**
 *  No reason for failure is specified.
 *
 *  Value: "FAILURE_CAUSE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_DeployFailureCause_FailureCauseUnspecified;
/**
 *  Release is abandoned.
 *
 *  Value: "RELEASE_ABANDONED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_DeployFailureCause_ReleaseAbandoned;
/**
 *  Release is in a failed state.
 *
 *  Value: "RELEASE_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_DeployFailureCause_ReleaseFailed;
/**
 *  No skaffold verify configuration was found.
 *
 *  Value: "VERIFICATION_CONFIG_NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_DeployFailureCause_VerificationConfigNotFound;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_Rollout.state

/**
 *  An approver rejected the `Rollout`.
 *
 *  Value: "APPROVAL_REJECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_ApprovalRejected;
/**
 *  The `Rollout` has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_Failed;
/**
 *  The `Rollout` is being deployed.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_InProgress;
/**
 *  The `Rollout` is waiting for an earlier Rollout(s) to complete on this
 *  `Target`.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_Pending;
/**
 *  The `Rollout` needs approval.
 *
 *  Value: "PENDING_APPROVAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_PendingApproval;
/**
 *  The `Rollout` is waiting for the `Release` to be fully rendered.
 *
 *  Value: "PENDING_RELEASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_PendingRelease;
/**
 *  The `Rollout` has an unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_StateUnspecified;
/**
 *  The `Rollout` has completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_Rollout_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_RolloutNotificationEvent.type

/**
 *  A Pub/Sub notification failed to be sent.
 *
 *  Value: "TYPE_PUBSUB_NOTIFICATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypePubsubNotificationFailure;
/**
 *  Deprecated: This field is never used. Use release_render log type instead.
 *
 *  Value: "TYPE_RENDER_STATUES_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeRenderStatuesChange;
/**
 *  Type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_TargetNotificationEvent.type

/**
 *  A Pub/Sub notification failed to be sent.
 *
 *  Value: "TYPE_PUBSUB_NOTIFICATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetNotificationEvent_Type_TypePubsubNotificationFailure;
/**
 *  Deprecated: This field is never used. Use release_render log type instead.
 *
 *  Value: "TYPE_RENDER_STATUES_CHANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeRenderStatuesChange;
/**
 *  Type is unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_TargetRender.failureCause

/**
 *  Cloud Build is not available, either because it is not enabled or because
 *  Google Cloud Deploy has insufficient permissions. See [required
 *  permission](/deploy/docs/cloud-deploy-service-account#required_permissions).
 *
 *  Value: "CLOUD_BUILD_UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_FailureCause_CloudBuildUnavailable;
/**
 *  The render operation did not complete successfully; check Cloud Build logs.
 *
 *  Value: "EXECUTION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_FailureCause_ExecutionFailed;
/**
 *  No reason for failure is specified.
 *
 *  Value: "FAILURE_CAUSE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_FailureCause_FailureCauseUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_TargetRender.renderingState

/**
 *  The render operation has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_RenderingState_Failed;
/**
 *  The render operation is in progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_RenderingState_InProgress;
/**
 *  The render operation has completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_RenderingState_Succeeded;
/**
 *  The render operation state is unspecified.
 *
 *  Value: "TARGET_RENDER_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_TargetRender_RenderingState_TargetRenderStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudDeploy_VerifyJobRun.failureCause

/**
 *  Cloud Build is not available, either because it is not enabled or because
 *  Google Cloud Deploy has insufficient permissions. See [required
 *  permission](/deploy/docs/cloud-deploy-service-account#required_permissions).
 *
 *  Value: "CLOUD_BUILD_UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_VerifyJobRun_FailureCause_CloudBuildUnavailable;
/**
 *  The verify build did not complete within the alloted time.
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_VerifyJobRun_FailureCause_DeadlineExceeded;
/**
 *  The verify operation did not complete successfully; check Cloud Build logs.
 *
 *  Value: "EXECUTION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_VerifyJobRun_FailureCause_ExecutionFailed;
/**
 *  No reason for failure is specified.
 *
 *  Value: "FAILURE_CAUSE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_VerifyJobRun_FailureCause_FailureCauseUnspecified;
/**
 *  No Skaffold verify configuration was found.
 *
 *  Value: "VERIFICATION_CONFIG_NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudDeploy_VerifyJobRun_FailureCause_VerificationConfigNotFound;

/**
 *  The request object used by `AbandonRelease`.
 */
@interface GTLRCloudDeploy_AbandonReleaseRequest : GTLRObject
@end


/**
 *  The response object for `AbandonRelease`.
 */
@interface GTLRCloudDeploy_AbandonReleaseResponse : GTLRObject
@end


/**
 *  Information specifying an Anthos Cluster.
 */
@interface GTLRCloudDeploy_AnthosCluster : GTLRObject

/**
 *  Membership of the GKE Hub-registered cluster to which to apply the Skaffold
 *  configuration. Format is
 *  `projects/{project}/locations/{location}/memberships/{membership_name}`.
 */
@property(nonatomic, copy, nullable) NSString *membership;

@end


/**
 *  The request object used by `ApproveRollout`.
 */
@interface GTLRCloudDeploy_ApproveRolloutRequest : GTLRObject

/**
 *  Required. True = approve; false = reject
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *approved;

@end


/**
 *  The response object from `ApproveRollout`.
 */
@interface GTLRCloudDeploy_ApproveRolloutResponse : GTLRObject
@end


/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRCloudDeploy_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRCloudDeploy_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_AuditLogConfig_LogType_AdminRead Admin reads.
 *        Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRCloudDeploy_AuditLogConfig_LogType_DataRead Data reads.
 *        Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRCloudDeploy_AuditLogConfig_LogType_DataWrite Data writes.
 *        Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRCloudDeploy_AuditLogConfig_LogType_LogTypeUnspecified Default
 *        case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRCloudDeploy_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`:
 *  An email address (plus unique identifier) representing a user that has been
 *  recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. * `domain:{domain}`: The G Suite domain (primary) that
 *  represents all the users of that domain. For example, `google.com` or
 *  `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  Description of an a image to use during Skaffold rendering.
 */
@interface GTLRCloudDeploy_BuildArtifact : GTLRObject

/** Image name in Skaffold configuration. */
@property(nonatomic, copy, nullable) NSString *image;

/**
 *  Image tag to use. This will generally be the full path to an image, such as
 *  "gcr.io/my-project/busybox:1.2.3" or
 *  "gcr.io/my-project/busybox\@sha256:abc123".
 */
@property(nonatomic, copy, nullable) NSString *tag;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRCloudDeploy_CancelOperationRequest : GTLRObject
@end


/**
 *  Information specifying where to deploy a Cloud Run Service.
 */
@interface GTLRCloudDeploy_CloudRunLocation : GTLRObject

/**
 *  Required. The location for the Cloud Run Service. Format must be
 *  `projects/{project}/locations/{location}`.
 */
@property(nonatomic, copy, nullable) NSString *location;

@end


/**
 *  CloudRunMetadata contains information from a Cloud Run deployment.
 */
@interface GTLRCloudDeploy_CloudRunMetadata : GTLRObject

/** Output only. The Cloud Run Revision id associated with a `Rollout`. */
@property(nonatomic, copy, nullable) NSString *revision;

/**
 *  Output only. The name of the Cloud Run Service that is associated with a
 *  `Rollout`. Format is
 *  projects/{project}/locations/{location}/services/{service}.
 */
@property(nonatomic, copy, nullable) NSString *service;

/**
 *  Output only. The Cloud Run Service urls that are associated with a
 *  `Rollout`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *serviceUrls;

@end


/**
 *  Service-wide configuration.
 */
@interface GTLRCloudDeploy_Config : GTLRObject

/**
 *  Output only. Default Skaffold version that is assigned when a Release is
 *  created without specifying a Skaffold version.
 */
@property(nonatomic, copy, nullable) NSString *defaultSkaffoldVersion;

/** Name of the configuration. */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. All supported versions of Skaffold. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_SkaffoldVersion *> *supportedVersions;

@end


/**
 *  Represents a whole or partial calendar date, such as a birthday. The time of
 *  day and time zone are either specified elsewhere or are insignificant. The
 *  date is relative to the Gregorian Calendar. This can represent one of the
 *  following: * A full date, with non-zero year, month, and day values. * A
 *  month and day, with a zero year (for example, an anniversary). * A year on
 *  its own, with a zero month and a zero day. * A year and month, with a zero
 *  day (for example, a credit card expiration date). Related types: *
 *  google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
@interface GTLRCloudDeploy_Date : GTLRObject

/**
 *  Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
 *  to specify a year by itself or a year and month where the day isn't
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of a year. Must be from 1 to 12, or 0 to specify a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  Execution using the default Cloud Build pool.
 */
@interface GTLRCloudDeploy_DefaultPool : GTLRObject

/**
 *  Optional. Cloud Storage location where execution outputs should be stored.
 *  This can either be a bucket ("gs://my-bucket") or a path within a bucket
 *  ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the
 *  same region will be used.
 */
@property(nonatomic, copy, nullable) NSString *artifactStorage;

/**
 *  Optional. Google service account to use for execution. If unspecified, the
 *  project execution service account (-compute\@developer.gserviceaccount.com)
 *  will be used.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

@end


/**
 *  A `DeliveryPipeline` resource in the Google Cloud Deploy API. A
 *  `DeliveryPipeline` defines a pipeline through which a Skaffold configuration
 *  can progress.
 */
@interface GTLRCloudDeploy_DeliveryPipeline : GTLRObject

/**
 *  User annotations. These attributes can only be set and used by the user, and
 *  not by Google Cloud Deploy.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeliveryPipeline_Annotations *annotations;

/** Output only. Information around the state of the Delivery Pipeline. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_PipelineCondition *condition;

/** Output only. Time at which the pipeline was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Description of the `DeliveryPipeline`. Max length is 255 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  This checksum is computed by the server based on the value of other fields,
 *  and may be sent on update and delete requests to ensure the client has an
 *  up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Labels are attributes that can be set and used by both the user and by
 *  Google Cloud Deploy. Labels must meet the following constraints: * Keys and
 *  values can contain only lowercase letters, numeric characters, underscores,
 *  and dashes. * All characters must use UTF-8 encoding, and international
 *  characters are allowed. * Keys must start with a lowercase letter or
 *  international character. * Each resource is limited to a maximum of 64
 *  labels. Both keys and values are additionally constrained to be <= 128
 *  bytes.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeliveryPipeline_Labels *labels;

/**
 *  Optional. Name of the `DeliveryPipeline`. Format is projects/{project}/
 *  locations/{location}/deliveryPipelines/a-z{0,62}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_SerialPipeline *serialPipeline;

/**
 *  When suspended, no new releases or rollouts can be created, but in-progress
 *  ones will complete.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *suspended;

/** Output only. Unique identifier of the `DeliveryPipeline`. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Most recent time at which the pipeline was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  User annotations. These attributes can only be set and used by the user, and
 *  not by Google Cloud Deploy.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_DeliveryPipeline_Annotations : GTLRObject
@end


/**
 *  Labels are attributes that can be set and used by both the user and by
 *  Google Cloud Deploy. Labels must meet the following constraints: * Keys and
 *  values can contain only lowercase letters, numeric characters, underscores,
 *  and dashes. * All characters must use UTF-8 encoding, and international
 *  characters are allowed. * Keys must start with a lowercase letter or
 *  international character. * Each resource is limited to a maximum of 64
 *  labels. Both keys and values are additionally constrained to be <= 128
 *  bytes.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_DeliveryPipeline_Labels : GTLRObject
@end


/**
 *  Payload proto for "clouddeploy.googleapis.com/deliverypipeline_notification"
 *  Platform Log event that describes the failure to send delivery pipeline
 *  status change Pub/Sub notification.
 */
@interface GTLRCloudDeploy_DeliveryPipelineNotificationEvent : GTLRObject

/** The name of the `Delivery Pipeline`. */
@property(nonatomic, copy, nullable) NSString *deliveryPipeline;

/** Debug message for when a notification fails to send. */
@property(nonatomic, copy, nullable) NSString *message;

/**
 *  Type of this notification, e.g. for a Pub/Sub failure.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypePubsubNotificationFailure
 *        A Pub/Sub notification failed to be sent. (Value:
 *        "TYPE_PUBSUB_NOTIFICATION_FAILURE")
 *    @arg @c kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeRenderStatuesChange
 *        Deprecated: This field is never used. Use release_render log type
 *        instead. (Value: "TYPE_RENDER_STATUES_CHANGE")
 *    @arg @c kGTLRCloudDeploy_DeliveryPipelineNotificationEvent_Type_TypeUnspecified
 *        Type is unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A deploy Job.
 */
@interface GTLRCloudDeploy_DeployJob : GTLRObject
@end


/**
 *  DeployJobRun contains information specific to a deploy `JobRun`.
 */
@interface GTLRCloudDeploy_DeployJobRun : GTLRObject

/**
 *  Output only. The resource name of the Cloud Build `Build` object that is
 *  used to deploy. Format is
 *  projects/{project}/locations/{location}/builds/{build}.
 */
@property(nonatomic, copy, nullable) NSString *build;

/**
 *  Output only. The reason the deploy failed. This will always be unspecified
 *  while the deploy is in progress or if it succeeded.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_DeployJobRun_FailureCause_CloudBuildUnavailable
 *        Cloud Build is not available, either because it is not enabled or
 *        because Google Cloud Deploy has insufficient permissions. See
 *        [Required
 *        permission](/deploy/docs/cloud-deploy-service-account#required_permissions).
 *        (Value: "CLOUD_BUILD_UNAVAILABLE")
 *    @arg @c kGTLRCloudDeploy_DeployJobRun_FailureCause_DeadlineExceeded The
 *        deploy build did not complete within the alloted time. (Value:
 *        "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRCloudDeploy_DeployJobRun_FailureCause_ExecutionFailed The
 *        deploy operation did not complete successfully; check Cloud Build
 *        logs. (Value: "EXECUTION_FAILED")
 *    @arg @c kGTLRCloudDeploy_DeployJobRun_FailureCause_FailureCauseUnspecified
 *        No reason for failure is specified. (Value:
 *        "FAILURE_CAUSE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *failureCause;

/**
 *  Output only. Additional information about the deploy failure, if available.
 */
@property(nonatomic, copy, nullable) NSString *failureMessage;

/** Output only. Metadata containing information about the deploy job run. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeployJobRunMetadata *metadata;

@end


/**
 *  DeployJobRunMetadata surfaces information associated with a `DeployJobRun`
 *  to the user.
 */
@interface GTLRCloudDeploy_DeployJobRunMetadata : GTLRObject

/**
 *  Output only. The name of the Cloud Run Service that is associated with a
 *  `DeployJobRun`.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CloudRunMetadata *cloudRun;

@end


/**
 *  Deployment job composition.
 */
@interface GTLRCloudDeploy_DeploymentJobs : GTLRObject

/** Output only. The deploy Job. This is the first job run in the phase. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Job *deployJob;

/**
 *  Output only. The verify Job. Runs after a deploy if the deploy succeeds.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Job *verifyJob;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRCloudDeploy_Empty : GTLRObject
@end


/**
 *  Configuration of the environment to use when calling Skaffold.
 */
@interface GTLRCloudDeploy_ExecutionConfig : GTLRObject

/**
 *  Optional. Cloud Storage location in which to store execution outputs. This
 *  can either be a bucket ("gs://my-bucket") or a path within a bucket
 *  ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the
 *  same region will be used.
 */
@property(nonatomic, copy, nullable) NSString *artifactStorage;

/** Optional. Use default Cloud Build pool. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DefaultPool *defaultPool;

/**
 *  Optional. Execution timeout for a Cloud Build Execution. This must be
 *  between 10m and 24h in seconds format. If unspecified, a default timeout of
 *  1h is used.
 */
@property(nonatomic, strong, nullable) GTLRDuration *executionTimeout;

/** Optional. Use private Cloud Build pool. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_PrivatePool *privatePool;

/**
 *  Optional. Google service account to use for execution. If unspecified, the
 *  project execution service account (-compute\@developer.gserviceaccount.com)
 *  is used.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/** Required. Usages when this configuration should be applied. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *usages;

/**
 *  Optional. The resource name of the `WorkerPool`, with the format
 *  `projects/{project}/locations/{location}/workerPools/{worker_pool}`. If this
 *  optional field is unspecified, the default Cloud Build pool will be used.
 */
@property(nonatomic, copy, nullable) NSString *workerPool;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRCloudDeploy_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Information specifying a GKE Cluster.
 */
@interface GTLRCloudDeploy_GkeCluster : GTLRObject

/**
 *  Information specifying a GKE Cluster. Format is
 *  `projects/{project_id}/locations/{location_id}/clusters/{cluster_id}.
 */
@property(nonatomic, copy, nullable) NSString *cluster;

/**
 *  Optional. If true, `cluster` is accessed using the private IP address of the
 *  control plane endpoint. Otherwise, the default IP address of the control
 *  plane endpoint is used. The default IP address is the private IP address for
 *  clusters with private control-plane endpoints and the public IP address
 *  otherwise. Only specify this option when `cluster` is a [private GKE
 *  cluster](https://cloud.google.com/kubernetes-engine/docs/concepts/private-cluster-concept).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *internalIp;

@end


/**
 *  Job represents an operation for a `Rollout`.
 */
@interface GTLRCloudDeploy_Job : GTLRObject

/** Output only. A deploy Job. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeployJob *deployJob;

/**
 *  Output only. The ID of the Job.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Output only. The name of the `JobRun` responsible for the most recent
 *  invocation of this Job.
 */
@property(nonatomic, copy, nullable) NSString *jobRun;

/**
 *  Output only. The current state of the Job.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_Job_State_Aborted The Job was aborted. (Value:
 *        "ABORTED")
 *    @arg @c kGTLRCloudDeploy_Job_State_Disabled The Job is disabled. (Value:
 *        "DISABLED")
 *    @arg @c kGTLRCloudDeploy_Job_State_Failed The Job failed. (Value:
 *        "FAILED")
 *    @arg @c kGTLRCloudDeploy_Job_State_InProgress The Job is in progress.
 *        (Value: "IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_Job_State_Pending The Job is waiting for an
 *        earlier Phase(s) or Job(s) to complete. (Value: "PENDING")
 *    @arg @c kGTLRCloudDeploy_Job_State_StateUnspecified The Job has an
 *        unspecified state. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_Job_State_Succeeded The Job succeeded. (Value:
 *        "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. A verify Job. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_VerifyJob *verifyJob;

@end


/**
 *  A `JobRun` resource in the Google Cloud Deploy API. A `JobRun` contains
 *  information of a single `Rollout` job evaluation.
 */
@interface GTLRCloudDeploy_JobRun : GTLRObject

/** Output only. Time at which the `JobRun` was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Information specific to a deploy `JobRun`. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeployJobRun *deployJobRun;

/** Output only. Time at which the `JobRun` ended. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. This checksum is computed by the server based on the value of
 *  other fields, and may be sent on update and delete requests to ensure the
 *  client has an up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Output only. ID of the `Rollout` job this `JobRun` corresponds to. */
@property(nonatomic, copy, nullable) NSString *jobId;

/**
 *  Optional. Name of the `JobRun`. Format is
 *  projects/{project}/locations/{location}/
 *  deliveryPipelines/{deliveryPipeline}/releases/{releases}/rollouts/
 *  {rollouts}/jobRuns/{uuid}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. ID of the `Rollout` phase this `JobRun` belongs in. */
@property(nonatomic, copy, nullable) NSString *phaseId;

/** Output only. Time at which the `JobRun` was started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. The current state of the `JobRun`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_JobRun_State_Failed The `JobRun` has failed.
 *        (Value: "FAILED")
 *    @arg @c kGTLRCloudDeploy_JobRun_State_InProgress The `JobRun` is in
 *        progress. (Value: "IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_JobRun_State_StateUnspecified The `JobRun` has an
 *        unspecified state. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_JobRun_State_Succeeded The `JobRun` has
 *        succeeded. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. Unique identifier of the `JobRun`. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Information specific to a verify `JobRun`. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_VerifyJobRun *verifyJobRun;

@end


/**
 *  Payload proto for "clouddeploy.googleapis.com/jobrun_notification" Platform
 *  Log event that describes the failure to send JobRun resource update Pub/Sub
 *  notification.
 */
@interface GTLRCloudDeploy_JobRunNotificationEvent : GTLRObject

/** The name of the `JobRun`. */
@property(nonatomic, copy, nullable) NSString *jobRun;

/** Debug message for when a notification fails to send. */
@property(nonatomic, copy, nullable) NSString *message;

/** Unique identifier of the `DeliveryPipeline`. */
@property(nonatomic, copy, nullable) NSString *pipelineUid;

/** Unique identifier of the `Release`. */
@property(nonatomic, copy, nullable) NSString *releaseUid;

/** Unique identifier of the `Rollout`. */
@property(nonatomic, copy, nullable) NSString *rolloutUid;

/** ID of the `Target`. */
@property(nonatomic, copy, nullable) NSString *targetId;

/**
 *  Type of this notification, e.g. for a Pub/Sub failure.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypePubsubNotificationFailure
 *        A Pub/Sub notification failed to be sent. (Value:
 *        "TYPE_PUBSUB_NOTIFICATION_FAILURE")
 *    @arg @c kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeRenderStatuesChange
 *        Deprecated: This field is never used. Use release_render log type
 *        instead. (Value: "TYPE_RENDER_STATUES_CHANGE")
 *    @arg @c kGTLRCloudDeploy_JobRunNotificationEvent_Type_TypeUnspecified Type
 *        is unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The response object from `ListDeliveryPipelines`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "deliveryPipelines" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRCloudDeploy_ListDeliveryPipelinesResponse : GTLRCollectionObject

/**
 *  The `DeliveryPipeline` objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_DeliveryPipeline *> *deliveryPipelines;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  ListJobRunsResponse is the response object returned by `ListJobRuns`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "jobRuns" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudDeploy_ListJobRunsResponse : GTLRCollectionObject

/**
 *  The `JobRun` objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_JobRun *> *jobRuns;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudDeploy_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudDeploy_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Operation *> *operations;

@end


/**
 *  The response object from `ListReleases`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "releases" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudDeploy_ListReleasesResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The `Release` objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Release *> *releases;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  ListRolloutsResponse is the response object reutrned by `ListRollouts`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rollouts" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudDeploy_ListRolloutsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The `Rollout` objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Rollout *> *rollouts;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response object from `ListTargets`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "targets" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudDeploy_ListTargetsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The `Target` objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Target *> *targets;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRCloudDeploy_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudDeploy_Location_Metadata : GTLRObject
@end


/**
 *  Metadata includes information associated with a `Rollout`.
 */
@interface GTLRCloudDeploy_Metadata : GTLRObject

/**
 *  Output only. The name of the Cloud Run Service that is associated with a
 *  `Rollout`.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CloudRunMetadata *cloudRun;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudDeploy_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudDeploy_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudDeploy_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRCloudDeploy_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Phase represents a collection of jobs that are logically grouped together
 *  for a `Rollout`.
 */
@interface GTLRCloudDeploy_Phase : GTLRObject

/** Output only. Deployment job composition. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeploymentJobs *deploymentJobs;

/**
 *  Output only. The ID of the Phase.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Output only. Current state of the Phase.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_Phase_State_Aborted The Phase was aborted.
 *        (Value: "ABORTED")
 *    @arg @c kGTLRCloudDeploy_Phase_State_Failed The Phase has failed. (Value:
 *        "FAILED")
 *    @arg @c kGTLRCloudDeploy_Phase_State_InProgress The Phase is in progress.
 *        (Value: "IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_Phase_State_Pending The Phase is waiting for an
 *        earlier Phase(s) to complete. (Value: "PENDING")
 *    @arg @c kGTLRCloudDeploy_Phase_State_StateUnspecified The Phase has an
 *        unspecified state. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_Phase_State_Succeeded The Phase has succeeded.
 *        (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  PipelineCondition contains all conditions relevant to a Delivery Pipeline.
 */
@interface GTLRCloudDeploy_PipelineCondition : GTLRObject

/** Details around the Pipeline's overall status. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_PipelineReadyCondition *pipelineReadyCondition;

/** Detalis around targets enumerated in the pipeline. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_TargetsPresentCondition *targetsPresentCondition;

@end


/**
 *  PipelineReadyCondition contains information around the status of the
 *  Pipeline.
 */
@interface GTLRCloudDeploy_PipelineReadyCondition : GTLRObject

/**
 *  True if the Pipeline is in a valid state. Otherwise at least one condition
 *  in `PipelineCondition` is in an invalid state. Iterate over those conditions
 *  and see which condition(s) has status = false to find out what is wrong with
 *  the Pipeline.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *status;

/** Last time the condition was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRCloudDeploy_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Execution using a private Cloud Build pool.
 */
@interface GTLRCloudDeploy_PrivatePool : GTLRObject

/**
 *  Optional. Cloud Storage location where execution outputs should be stored.
 *  This can either be a bucket ("gs://my-bucket") or a path within a bucket
 *  ("gs://my-bucket/my-dir"). If unspecified, a default bucket located in the
 *  same region will be used.
 */
@property(nonatomic, copy, nullable) NSString *artifactStorage;

/**
 *  Optional. Google service account to use for execution. If unspecified, the
 *  project execution service account (-compute\@developer.gserviceaccount.com)
 *  will be used.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Required. Resource name of the Cloud Build worker pool to use. The format is
 *  `projects/{project}/locations/{location}/workerPools/{pool}`.
 */
@property(nonatomic, copy, nullable) NSString *workerPool;

@end


/**
 *  A `Release` resource in the Google Cloud Deploy API. A `Release` defines a
 *  specific Skaffold configuration instance that can be deployed.
 */
@interface GTLRCloudDeploy_Release : GTLRObject

/**
 *  Output only. Indicates whether this is an abandoned release.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *abandoned;

/**
 *  User annotations. These attributes can only be set and used by the user, and
 *  not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for
 *  more details such as format and size limitations.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Release_Annotations *annotations;

/** List of artifacts to pass through to Skaffold command. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_BuildArtifact *> *buildArtifacts;

/** Output only. Time at which the `Release` was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. Snapshot of the parent pipeline taken at release creation time.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_DeliveryPipeline *deliveryPipelineSnapshot;

/**
 *  Description of the `Release`. Max length is 255 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  This checksum is computed by the server based on the value of other fields,
 *  and may be sent on update and delete requests to ensure the client has an
 *  up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Labels are attributes that can be set and used by both the user and by
 *  Google Cloud Deploy. Labels must meet the following constraints: * Keys and
 *  values can contain only lowercase letters, numeric characters, underscores,
 *  and dashes. * All characters must use UTF-8 encoding, and international
 *  characters are allowed. * Keys must start with a lowercase letter or
 *  international character. * Each resource is limited to a maximum of 64
 *  labels. Both keys and values are additionally constrained to be <= 128
 *  bytes.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Release_Labels *labels;

/**
 *  Optional. Name of the `Release`. Format is projects/{project}/
 *  locations/{location}/deliveryPipelines/{deliveryPipeline}/
 *  releases/a-z{0,62}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. Time at which the render completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *renderEndTime;

/** Output only. Time at which the render began. */
@property(nonatomic, strong, nullable) GTLRDateTime *renderStartTime;

/**
 *  Output only. Current state of the render operation.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_Release_RenderState_Failed All rendering
 *        operations have completed, and one or more have failed. (Value:
 *        "FAILED")
 *    @arg @c kGTLRCloudDeploy_Release_RenderState_InProgress Rendering has
 *        started and is not complete. (Value: "IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_Release_RenderState_RenderStateUnspecified The
 *        render state is unspecified. (Value: "RENDER_STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_Release_RenderState_Succeeded All rendering
 *        operations have completed successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *renderState;

/** Filepath of the Skaffold config inside of the config URI. */
@property(nonatomic, copy, nullable) NSString *skaffoldConfigPath;

/** Cloud Storage URI of tar.gz archive containing Skaffold configuration. */
@property(nonatomic, copy, nullable) NSString *skaffoldConfigUri;

/**
 *  The Skaffold version to use when operating on this release, such as
 *  "1.20.0". Not all versions are valid; Google Cloud Deploy supports a
 *  specific set of versions. If unset, the most recent supported Skaffold
 *  version will be used.
 */
@property(nonatomic, copy, nullable) NSString *skaffoldVersion;

/**
 *  Output only. Map from target ID to the target artifacts created during the
 *  render operation.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Release_TargetArtifacts *targetArtifacts;

/**
 *  Output only. Map from target ID to details of the render operation for that
 *  target.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Release_TargetRenders *targetRenders;

/** Output only. Snapshot of the targets taken at release creation time. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Target *> *targetSnapshots;

/** Output only. Unique identifier of the `Release`. */
@property(nonatomic, copy, nullable) NSString *uid;

@end


/**
 *  User annotations. These attributes can only be set and used by the user, and
 *  not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for
 *  more details such as format and size limitations.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Release_Annotations : GTLRObject
@end


/**
 *  Labels are attributes that can be set and used by both the user and by
 *  Google Cloud Deploy. Labels must meet the following constraints: * Keys and
 *  values can contain only lowercase letters, numeric characters, underscores,
 *  and dashes. * All characters must use UTF-8 encoding, and international
 *  characters are allowed. * Keys must start with a lowercase letter or
 *  international character. * Each resource is limited to a maximum of 64
 *  labels. Both keys and values are additionally constrained to be <= 128
 *  bytes.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Release_Labels : GTLRObject
@end


/**
 *  Output only. Map from target ID to the target artifacts created during the
 *  render operation.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudDeploy_TargetArtifact. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudDeploy_Release_TargetArtifacts : GTLRObject
@end


/**
 *  Output only. Map from target ID to details of the render operation for that
 *  target.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudDeploy_TargetRender. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudDeploy_Release_TargetRenders : GTLRObject
@end


/**
 *  Payload proto for "clouddeploy.googleapis.com/release_notification" Platform
 *  Log event that describes the failure to send release status change Pub/Sub
 *  notification.
 */
@interface GTLRCloudDeploy_ReleaseNotificationEvent : GTLRObject

/** Debug message for when a notification fails to send. */
@property(nonatomic, copy, nullable) NSString *message;

/**
 *  The name of the `Release`.
 *
 *  Remapped to 'releaseProperty' to avoid NSObject's 'release'.
 */
@property(nonatomic, copy, nullable) NSString *releaseProperty;

/**
 *  Type of this notification, e.g. for a Pub/Sub failure.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypePubsubNotificationFailure
 *        A Pub/Sub notification failed to be sent. (Value:
 *        "TYPE_PUBSUB_NOTIFICATION_FAILURE")
 *    @arg @c kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeRenderStatuesChange
 *        Deprecated: This field is never used. Use release_render log type
 *        instead. (Value: "TYPE_RENDER_STATUES_CHANGE")
 *    @arg @c kGTLRCloudDeploy_ReleaseNotificationEvent_Type_TypeUnspecified
 *        Type is unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Payload proto for "clouddeploy.googleapis.com/release_render" Platform Log
 *  event that describes the render status change.
 */
@interface GTLRCloudDeploy_ReleaseRenderEvent : GTLRObject

/**
 *  Debug message for when a render transition occurs. Provides further details
 *  as rendering progresses through render states.
 */
@property(nonatomic, copy, nullable) NSString *message;

/**
 *  The name of the `Release`.
 *
 *  Remapped to 'releaseProperty' to avoid NSObject's 'release'.
 */
@property(nonatomic, copy, nullable) NSString *releaseProperty;

@end


/**
 *  RetryJobRequest is the request object used by `RetryJob`.
 */
@interface GTLRCloudDeploy_RetryJobRequest : GTLRObject

/** Required. The job ID for the Job to retry. */
@property(nonatomic, copy, nullable) NSString *jobId;

/** Required. The phase ID the Job to retry belongs to. */
@property(nonatomic, copy, nullable) NSString *phaseId;

@end


/**
 *  The response object from 'RetryJob'.
 */
@interface GTLRCloudDeploy_RetryJobResponse : GTLRObject
@end


/**
 *  A `Rollout` resource in the Google Cloud Deploy API. A `Rollout` contains
 *  information around a specific deployment to a `Target`.
 */
@interface GTLRCloudDeploy_Rollout : GTLRObject

/**
 *  User annotations. These attributes can only be set and used by the user, and
 *  not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for
 *  more details such as format and size limitations.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Rollout_Annotations *annotations;

/**
 *  Output only. Approval state of the `Rollout`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_Rollout_ApprovalState_ApprovalStateUnspecified
 *        The `Rollout` has an unspecified approval state. (Value:
 *        "APPROVAL_STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_Rollout_ApprovalState_Approved The `Rollout` has
 *        been approved. (Value: "APPROVED")
 *    @arg @c kGTLRCloudDeploy_Rollout_ApprovalState_DoesNotNeedApproval The
 *        `Rollout` does not require approval. (Value: "DOES_NOT_NEED_APPROVAL")
 *    @arg @c kGTLRCloudDeploy_Rollout_ApprovalState_NeedsApproval The `Rollout`
 *        requires approval. (Value: "NEEDS_APPROVAL")
 *    @arg @c kGTLRCloudDeploy_Rollout_ApprovalState_Rejected The `Rollout` has
 *        been rejected. (Value: "REJECTED")
 */
@property(nonatomic, copy, nullable) NSString *approvalState;

/** Output only. Time at which the `Rollout` was approved. */
@property(nonatomic, strong, nullable) GTLRDateTime *approveTime;

/** Output only. Time at which the `Rollout` was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Time at which the `Rollout` finished deploying. */
@property(nonatomic, strong, nullable) GTLRDateTime *deployEndTime;

/**
 *  Output only. The reason this rollout failed. This will always be unspecified
 *  while the rollout is in progress.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_Rollout_DeployFailureCause_CloudBuildUnavailable
 *        Cloud Build is not available, either because it is not enabled or
 *        because Cloud Deploy has insufficient permissions. See [required
 *        permission](/deploy/docs/cloud-deploy-service-account#required_permissions).
 *        (Value: "CLOUD_BUILD_UNAVAILABLE")
 *    @arg @c kGTLRCloudDeploy_Rollout_DeployFailureCause_DeadlineExceeded
 *        Deployment did not complete within the alloted time. (Value:
 *        "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRCloudDeploy_Rollout_DeployFailureCause_ExecutionFailed The
 *        deploy operation did not complete successfully; check Cloud Build
 *        logs. (Value: "EXECUTION_FAILED")
 *    @arg @c kGTLRCloudDeploy_Rollout_DeployFailureCause_FailureCauseUnspecified
 *        No reason for failure is specified. (Value:
 *        "FAILURE_CAUSE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_Rollout_DeployFailureCause_ReleaseAbandoned
 *        Release is abandoned. (Value: "RELEASE_ABANDONED")
 *    @arg @c kGTLRCloudDeploy_Rollout_DeployFailureCause_ReleaseFailed Release
 *        is in a failed state. (Value: "RELEASE_FAILED")
 *    @arg @c kGTLRCloudDeploy_Rollout_DeployFailureCause_VerificationConfigNotFound
 *        No skaffold verify configuration was found. (Value:
 *        "VERIFICATION_CONFIG_NOT_FOUND")
 */
@property(nonatomic, copy, nullable) NSString *deployFailureCause;

/**
 *  Output only. The resource name of the Cloud Build `Build` object that is
 *  used to deploy the Rollout. Format is
 *  `projects/{project}/locations/{location}/builds/{build}`.
 */
@property(nonatomic, copy, nullable) NSString *deployingBuild;

/** Output only. Time at which the `Rollout` started deploying. */
@property(nonatomic, strong, nullable) GTLRDateTime *deployStartTime;

/**
 *  Description of the `Rollout` for user purposes. Max length is 255
 *  characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Output only. Time at which the `Rollout` was enqueued. */
@property(nonatomic, strong, nullable) GTLRDateTime *enqueueTime;

/**
 *  This checksum is computed by the server based on the value of other fields,
 *  and may be sent on update and delete requests to ensure the client has an
 *  up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. Additional information about the rollout failure, if available.
 */
@property(nonatomic, copy, nullable) NSString *failureReason;

/**
 *  Labels are attributes that can be set and used by both the user and by
 *  Google Cloud Deploy. Labels must meet the following constraints: * Keys and
 *  values can contain only lowercase letters, numeric characters, underscores,
 *  and dashes. * All characters must use UTF-8 encoding, and international
 *  characters are allowed. * Keys must start with a lowercase letter or
 *  international character. * Each resource is limited to a maximum of 64
 *  labels. Both keys and values are additionally constrained to be <= 128
 *  bytes.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Rollout_Labels *labels;

/** Output only. Metadata contains information about the rollout. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Metadata *metadata;

/**
 *  Optional. Name of the `Rollout`. Format is projects/{project}/
 *  locations/{location}/deliveryPipelines/{deliveryPipeline}/
 *  releases/{release}/rollouts/a-z{0,62}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The phases that represent the workflows of this `Rollout`. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Phase *> *phases;

/**
 *  Output only. Current state of the `Rollout`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_Rollout_State_ApprovalRejected An approver
 *        rejected the `Rollout`. (Value: "APPROVAL_REJECTED")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_Failed The `Rollout` has failed.
 *        (Value: "FAILED")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_InProgress The `Rollout` is being
 *        deployed. (Value: "IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_Pending The `Rollout` is waiting
 *        for an earlier Rollout(s) to complete on this `Target`. (Value:
 *        "PENDING")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_PendingApproval The `Rollout` needs
 *        approval. (Value: "PENDING_APPROVAL")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_PendingRelease The `Rollout` is
 *        waiting for the `Release` to be fully rendered. (Value:
 *        "PENDING_RELEASE")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_StateUnspecified The `Rollout` has
 *        an unspecified state. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_Rollout_State_Succeeded The `Rollout` has
 *        completed successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Required. The ID of Target to which this `Rollout` is deploying. */
@property(nonatomic, copy, nullable) NSString *targetId;

/** Output only. Unique identifier of the `Rollout`. */
@property(nonatomic, copy, nullable) NSString *uid;

@end


/**
 *  User annotations. These attributes can only be set and used by the user, and
 *  not by Google Cloud Deploy. See https://google.aip.dev/128#annotations for
 *  more details such as format and size limitations.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Rollout_Annotations : GTLRObject
@end


/**
 *  Labels are attributes that can be set and used by both the user and by
 *  Google Cloud Deploy. Labels must meet the following constraints: * Keys and
 *  values can contain only lowercase letters, numeric characters, underscores,
 *  and dashes. * All characters must use UTF-8 encoding, and international
 *  characters are allowed. * Keys must start with a lowercase letter or
 *  international character. * Each resource is limited to a maximum of 64
 *  labels. Both keys and values are additionally constrained to be <= 128
 *  bytes.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Rollout_Labels : GTLRObject
@end


/**
 *  Payload proto for "clouddeploy.googleapis.com/rollout_notification" Platform
 *  Log event that describes the failure to send rollout status change Pub/Sub
 *  notification.
 */
@interface GTLRCloudDeploy_RolloutNotificationEvent : GTLRObject

/** Debug message for when a notification fails to send. */
@property(nonatomic, copy, nullable) NSString *message;

/** Unique identifier of the `DeliveryPipeline`. */
@property(nonatomic, copy, nullable) NSString *pipelineUid;

/** Unique identifier of the `Release`. */
@property(nonatomic, copy, nullable) NSString *releaseUid;

/** The name of the `Rollout`. */
@property(nonatomic, copy, nullable) NSString *rollout;

/** ID of the `Target` that the rollout is deployed to. */
@property(nonatomic, copy, nullable) NSString *targetId;

/**
 *  Type of this notification, e.g. for a Pub/Sub failure.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypePubsubNotificationFailure
 *        A Pub/Sub notification failed to be sent. (Value:
 *        "TYPE_PUBSUB_NOTIFICATION_FAILURE")
 *    @arg @c kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeRenderStatuesChange
 *        Deprecated: This field is never used. Use release_render log type
 *        instead. (Value: "TYPE_RENDER_STATUES_CHANGE")
 *    @arg @c kGTLRCloudDeploy_RolloutNotificationEvent_Type_TypeUnspecified
 *        Type is unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  SerialPipeline defines a sequential set of stages for a `DeliveryPipeline`.
 */
@interface GTLRCloudDeploy_SerialPipeline : GTLRObject

/**
 *  Each stage specifies configuration for a `Target`. The ordering of this list
 *  defines the promotion flow.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Stage *> *stages;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRCloudDeploy_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Details of a supported Skaffold version.
 */
@interface GTLRCloudDeploy_SkaffoldVersion : GTLRObject

/** Date when this version is expected to no longer be supported. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Date *supportEndDate;

/** Release version number. For example, "1.20.3". */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Stage specifies a location to which to deploy.
 */
@interface GTLRCloudDeploy_Stage : GTLRObject

/**
 *  Skaffold profiles to use when rendering the manifest for this stage's
 *  `Target`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *profiles;

/** Optional. The strategy to use for a `Rollout` to this stage. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Strategy *strategy;

/**
 *  The target_id to which this stage points. This field refers exclusively to
 *  the last segment of a target name. For example, this field would just be
 *  `my-target` (rather than
 *  `projects/project/locations/location/targets/my-target`). The location of
 *  the `Target` is inferred to be the same as the location of the
 *  `DeliveryPipeline` that contains this `Stage`.
 */
@property(nonatomic, copy, nullable) NSString *targetId;

@end


/**
 *  Standard represents the standard deployment strategy.
 */
@interface GTLRCloudDeploy_Standard : GTLRObject

/**
 *  Whether to verify a deployment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verify;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudDeploy_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudDeploy_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudDeploy_Status_Details_Item : GTLRObject
@end


/**
 *  Strategy contains deployment strategy information.
 */
@interface GTLRCloudDeploy_Strategy : GTLRObject

/**
 *  Standard deployment strategy executes a single deploy and allows verifying
 *  the deployment.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Standard *standard;

@end


/**
 *  A `Target` resource in the Google Cloud Deploy API. A `Target` defines a
 *  location to which a Skaffold configuration can be deployed.
 */
@interface GTLRCloudDeploy_Target : GTLRObject

/**
 *  Optional. User annotations. These attributes can only be set and used by the
 *  user, and not by Google Cloud Deploy. See
 *  https://google.aip.dev/128#annotations for more details such as format and
 *  size limitations.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Target_Annotations *annotations;

/** Information specifying an Anthos Cluster. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_AnthosCluster *anthosCluster;

/** Output only. Time at which the `Target` was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. Description of the `Target`. Max length is 255 characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. This checksum is computed by the server based on the value of
 *  other fields, and may be sent on update and delete requests to ensure the
 *  client has an up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Configurations for all execution that relates to this `Target`. Each
 *  `ExecutionEnvironmentUsage` value may only be used in a single
 *  configuration; using the same value multiple times is an error. When one or
 *  more configurations are specified, they must include the `RENDER` and
 *  `DEPLOY` `ExecutionEnvironmentUsage` values. When no configurations are
 *  specified, execution will use the default specified in `DefaultPool`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudDeploy_ExecutionConfig *> *executionConfigs;

/** Information specifying a GKE Cluster. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_GkeCluster *gke;

/**
 *  Optional. Labels are attributes that can be set and used by both the user
 *  and by Google Cloud Deploy. Labels must meet the following constraints: *
 *  Keys and values can contain only lowercase letters, numeric characters,
 *  underscores, and dashes. * All characters must use UTF-8 encoding, and
 *  international characters are allowed. * Keys must start with a lowercase
 *  letter or international character. * Each resource is limited to a maximum
 *  of 64 labels. Both keys and values are additionally constrained to be <= 128
 *  bytes.
 */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_Target_Labels *labels;

/**
 *  Optional. Name of the `Target`. Format is
 *  projects/{project}/locations/{location}/targets/a-z{0,62}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Whether or not the `Target` requires approval.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requireApproval;

/** Information specifying a Cloud Run deployment target. */
@property(nonatomic, strong, nullable) GTLRCloudDeploy_CloudRunLocation *run;

/** Output only. Resource id of the `Target`. */
@property(nonatomic, copy, nullable) NSString *targetId;

/** Output only. Unique identifier of the `Target`. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Most recent time at which the `Target` was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. User annotations. These attributes can only be set and used by the
 *  user, and not by Google Cloud Deploy. See
 *  https://google.aip.dev/128#annotations for more details such as format and
 *  size limitations.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Target_Annotations : GTLRObject
@end


/**
 *  Optional. Labels are attributes that can be set and used by both the user
 *  and by Google Cloud Deploy. Labels must meet the following constraints: *
 *  Keys and values can contain only lowercase letters, numeric characters,
 *  underscores, and dashes. * All characters must use UTF-8 encoding, and
 *  international characters are allowed. * Keys must start with a lowercase
 *  letter or international character. * Each resource is limited to a maximum
 *  of 64 labels. Both keys and values are additionally constrained to be <= 128
 *  bytes.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudDeploy_Target_Labels : GTLRObject
@end


/**
 *  The artifacts produced by a target render operation.
 */
@interface GTLRCloudDeploy_TargetArtifact : GTLRObject

/**
 *  Output only. URI of a directory containing the artifacts. This contains
 *  deployment configuration used by Skaffold during a rollout, and all paths
 *  are relative to this location.
 */
@property(nonatomic, copy, nullable) NSString *artifactUri;

/** Output only. File path of the rendered manifest relative to the URI. */
@property(nonatomic, copy, nullable) NSString *manifestPath;

/**
 *  Output only. File path of the resolved Skaffold configuration relative to
 *  the URI.
 */
@property(nonatomic, copy, nullable) NSString *skaffoldConfigPath;

@end


/**
 *  Payload proto for "clouddeploy.googleapis.com/target_notification" Platform
 *  Log event that describes the failure to send target status change Pub/Sub
 *  notification.
 */
@interface GTLRCloudDeploy_TargetNotificationEvent : GTLRObject

/** Debug message for when a notification fails to send. */
@property(nonatomic, copy, nullable) NSString *message;

/** The name of the `Target`. */
@property(nonatomic, copy, nullable) NSString *target;

/**
 *  Type of this notification, e.g. for a Pub/Sub failure.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_TargetNotificationEvent_Type_TypePubsubNotificationFailure
 *        A Pub/Sub notification failed to be sent. (Value:
 *        "TYPE_PUBSUB_NOTIFICATION_FAILURE")
 *    @arg @c kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeRenderStatuesChange
 *        Deprecated: This field is never used. Use release_render log type
 *        instead. (Value: "TYPE_RENDER_STATUES_CHANGE")
 *    @arg @c kGTLRCloudDeploy_TargetNotificationEvent_Type_TypeUnspecified Type
 *        is unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Details of rendering for a single target.
 */
@interface GTLRCloudDeploy_TargetRender : GTLRObject

/**
 *  Output only. Reason this render failed. This will always be unspecified
 *  while the render in progress.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_TargetRender_FailureCause_CloudBuildUnavailable
 *        Cloud Build is not available, either because it is not enabled or
 *        because Google Cloud Deploy has insufficient permissions. See
 *        [required
 *        permission](/deploy/docs/cloud-deploy-service-account#required_permissions).
 *        (Value: "CLOUD_BUILD_UNAVAILABLE")
 *    @arg @c kGTLRCloudDeploy_TargetRender_FailureCause_ExecutionFailed The
 *        render operation did not complete successfully; check Cloud Build
 *        logs. (Value: "EXECUTION_FAILED")
 *    @arg @c kGTLRCloudDeploy_TargetRender_FailureCause_FailureCauseUnspecified
 *        No reason for failure is specified. (Value:
 *        "FAILURE_CAUSE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *failureCause;

/**
 *  Output only. Additional information about the render failure, if available.
 */
@property(nonatomic, copy, nullable) NSString *failureMessage;

/**
 *  Output only. The resource name of the Cloud Build `Build` object that is
 *  used to render the manifest for this target. Format is
 *  `projects/{project}/locations/{location}/builds/{build}`.
 */
@property(nonatomic, copy, nullable) NSString *renderingBuild;

/**
 *  Output only. Current state of the render operation for this Target.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_TargetRender_RenderingState_Failed The render
 *        operation has failed. (Value: "FAILED")
 *    @arg @c kGTLRCloudDeploy_TargetRender_RenderingState_InProgress The render
 *        operation is in progress. (Value: "IN_PROGRESS")
 *    @arg @c kGTLRCloudDeploy_TargetRender_RenderingState_Succeeded The render
 *        operation has completed successfully. (Value: "SUCCEEDED")
 *    @arg @c kGTLRCloudDeploy_TargetRender_RenderingState_TargetRenderStateUnspecified
 *        The render operation state is unspecified. (Value:
 *        "TARGET_RENDER_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *renderingState;

@end


/**
 *  TargetsPresentCondition contains information on any Targets defined in the
 *  Delivery Pipeline that do not actually exist.
 */
@interface GTLRCloudDeploy_TargetsPresentCondition : GTLRObject

/**
 *  The list of Target names that are missing. For example,
 *  projects/{project_id}/locations/{location_name}/targets/{target_name}.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *missingTargets;

/**
 *  True if there aren't any missing Targets.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *status;

/** Last time the condition was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRCloudDeploy_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRCloudDeploy_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  A verify Job.
 */
@interface GTLRCloudDeploy_VerifyJob : GTLRObject
@end


/**
 *  VerifyJobRun contains information specific to a verify `JobRun`.
 */
@interface GTLRCloudDeploy_VerifyJobRun : GTLRObject

/**
 *  Output only. URI of a directory containing the verify artifacts. This
 *  contains the Skaffold event log.
 */
@property(nonatomic, copy, nullable) NSString *artifactUri;

/**
 *  Output only. The resource name of the Cloud Build `Build` object that is
 *  used to verify. Format is
 *  projects/{project}/locations/{location}/builds/{build}.
 */
@property(nonatomic, copy, nullable) NSString *build;

/**
 *  Output only. File path of the Skaffold event log relative to the artifact
 *  URI.
 */
@property(nonatomic, copy, nullable) NSString *eventLogPath;

/**
 *  Output only. The reason the verify failed. This will always be unspecified
 *  while the verify is in progress or if it succeeded.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudDeploy_VerifyJobRun_FailureCause_CloudBuildUnavailable
 *        Cloud Build is not available, either because it is not enabled or
 *        because Google Cloud Deploy has insufficient permissions. See
 *        [required
 *        permission](/deploy/docs/cloud-deploy-service-account#required_permissions).
 *        (Value: "CLOUD_BUILD_UNAVAILABLE")
 *    @arg @c kGTLRCloudDeploy_VerifyJobRun_FailureCause_DeadlineExceeded The
 *        verify build did not complete within the alloted time. (Value:
 *        "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRCloudDeploy_VerifyJobRun_FailureCause_ExecutionFailed The
 *        verify operation did not complete successfully; check Cloud Build
 *        logs. (Value: "EXECUTION_FAILED")
 *    @arg @c kGTLRCloudDeploy_VerifyJobRun_FailureCause_FailureCauseUnspecified
 *        No reason for failure is specified. (Value:
 *        "FAILURE_CAUSE_UNSPECIFIED")
 *    @arg @c kGTLRCloudDeploy_VerifyJobRun_FailureCause_VerificationConfigNotFound
 *        No Skaffold verify configuration was found. (Value:
 *        "VERIFICATION_CONFIG_NOT_FOUND")
 */
@property(nonatomic, copy, nullable) NSString *failureCause;

/**
 *  Output only. Additional information about the verify failure, if available.
 */
@property(nonatomic, copy, nullable) NSString *failureMessage;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
