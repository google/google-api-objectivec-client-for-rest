// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Data Loss Prevention (DLP) API (dlp/v2)
// Description:
//   Provides methods for detection, risk analysis, and de-identification of
//   privacy-sensitive fragments in text, images, and Google Cloud Platform
//   storage repositories.
// Documentation:
//   https://cloud.google.com/dlp/docs/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDLP_GooglePrivacyDlpV2Action;
@class GTLRDLP_GooglePrivacyDlpV2AllInfoTypes;
@class GTLRDLP_GooglePrivacyDlpV2AllText;
@class GTLRDLP_GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails;
@class GTLRDLP_GooglePrivacyDlpV2AuxiliaryTable;
@class GTLRDLP_GooglePrivacyDlpV2BigQueryField;
@class GTLRDLP_GooglePrivacyDlpV2BigQueryKey;
@class GTLRDLP_GooglePrivacyDlpV2BigQueryOptions;
@class GTLRDLP_GooglePrivacyDlpV2BigQueryTable;
@class GTLRDLP_GooglePrivacyDlpV2BoundingBox;
@class GTLRDLP_GooglePrivacyDlpV2Bucket;
@class GTLRDLP_GooglePrivacyDlpV2BucketingConfig;
@class GTLRDLP_GooglePrivacyDlpV2ByteContentItem;
@class GTLRDLP_GooglePrivacyDlpV2CategoricalStatsConfig;
@class GTLRDLP_GooglePrivacyDlpV2CategoricalStatsHistogramBucket;
@class GTLRDLP_GooglePrivacyDlpV2CategoricalStatsResult;
@class GTLRDLP_GooglePrivacyDlpV2CharacterMaskConfig;
@class GTLRDLP_GooglePrivacyDlpV2CharsToIgnore;
@class GTLRDLP_GooglePrivacyDlpV2CloudStorageFileSet;
@class GTLRDLP_GooglePrivacyDlpV2CloudStorageOptions;
@class GTLRDLP_GooglePrivacyDlpV2CloudStoragePath;
@class GTLRDLP_GooglePrivacyDlpV2CloudStorageRegexFileSet;
@class GTLRDLP_GooglePrivacyDlpV2Color;
@class GTLRDLP_GooglePrivacyDlpV2Condition;
@class GTLRDLP_GooglePrivacyDlpV2Conditions;
@class GTLRDLP_GooglePrivacyDlpV2Container;
@class GTLRDLP_GooglePrivacyDlpV2ContentItem;
@class GTLRDLP_GooglePrivacyDlpV2ContentLocation;
@class GTLRDLP_GooglePrivacyDlpV2CryptoDeterministicConfig;
@class GTLRDLP_GooglePrivacyDlpV2CryptoHashConfig;
@class GTLRDLP_GooglePrivacyDlpV2CryptoKey;
@class GTLRDLP_GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig;
@class GTLRDLP_GooglePrivacyDlpV2CustomInfoType;
@class GTLRDLP_GooglePrivacyDlpV2DataProfileAction;
@class GTLRDLP_GooglePrivacyDlpV2DataProfileConfigSnapshot;
@class GTLRDLP_GooglePrivacyDlpV2DataProfileJobConfig;
@class GTLRDLP_GooglePrivacyDlpV2DataProfileLocation;
@class GTLRDLP_GooglePrivacyDlpV2DataProfilePubSubCondition;
@class GTLRDLP_GooglePrivacyDlpV2DataRiskLevel;
@class GTLRDLP_GooglePrivacyDlpV2DatastoreKey;
@class GTLRDLP_GooglePrivacyDlpV2DatastoreOptions;
@class GTLRDLP_GooglePrivacyDlpV2DateShiftConfig;
@class GTLRDLP_GooglePrivacyDlpV2DateTime;
@class GTLRDLP_GooglePrivacyDlpV2Deidentify;
@class GTLRDLP_GooglePrivacyDlpV2DeidentifyConfig;
@class GTLRDLP_GooglePrivacyDlpV2DeidentifyTemplate;
@class GTLRDLP_GooglePrivacyDlpV2DeltaPresenceEstimationConfig;
@class GTLRDLP_GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket;
@class GTLRDLP_GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValues;
@class GTLRDLP_GooglePrivacyDlpV2DeltaPresenceEstimationResult;
@class GTLRDLP_GooglePrivacyDlpV2DetectionRule;
@class GTLRDLP_GooglePrivacyDlpV2Dictionary;
@class GTLRDLP_GooglePrivacyDlpV2DlpJob;
@class GTLRDLP_GooglePrivacyDlpV2DocumentLocation;
@class GTLRDLP_GooglePrivacyDlpV2EntityId;
@class GTLRDLP_GooglePrivacyDlpV2Error;
@class GTLRDLP_GooglePrivacyDlpV2ExcludeByHotword;
@class GTLRDLP_GooglePrivacyDlpV2ExcludeInfoTypes;
@class GTLRDLP_GooglePrivacyDlpV2ExclusionRule;
@class GTLRDLP_GooglePrivacyDlpV2Export;
@class GTLRDLP_GooglePrivacyDlpV2Expressions;
@class GTLRDLP_GooglePrivacyDlpV2FieldId;
@class GTLRDLP_GooglePrivacyDlpV2FieldTransformation;
@class GTLRDLP_GooglePrivacyDlpV2FileSet;
@class GTLRDLP_GooglePrivacyDlpV2Finding;
@class GTLRDLP_GooglePrivacyDlpV2Finding_Labels;
@class GTLRDLP_GooglePrivacyDlpV2FindingLimits;
@class GTLRDLP_GooglePrivacyDlpV2FixedSizeBucketingConfig;
@class GTLRDLP_GooglePrivacyDlpV2HotwordRule;
@class GTLRDLP_GooglePrivacyDlpV2HybridContentItem;
@class GTLRDLP_GooglePrivacyDlpV2HybridFindingDetails;
@class GTLRDLP_GooglePrivacyDlpV2HybridFindingDetails_Labels;
@class GTLRDLP_GooglePrivacyDlpV2HybridInspectStatistics;
@class GTLRDLP_GooglePrivacyDlpV2HybridOptions;
@class GTLRDLP_GooglePrivacyDlpV2HybridOptions_Labels;
@class GTLRDLP_GooglePrivacyDlpV2ImageLocation;
@class GTLRDLP_GooglePrivacyDlpV2ImageRedactionConfig;
@class GTLRDLP_GooglePrivacyDlpV2ImageTransformation;
@class GTLRDLP_GooglePrivacyDlpV2ImageTransformations;
@class GTLRDLP_GooglePrivacyDlpV2InfoType;
@class GTLRDLP_GooglePrivacyDlpV2InfoTypeCategory;
@class GTLRDLP_GooglePrivacyDlpV2InfoTypeDescription;
@class GTLRDLP_GooglePrivacyDlpV2InfoTypeLimit;
@class GTLRDLP_GooglePrivacyDlpV2InfoTypeStats;
@class GTLRDLP_GooglePrivacyDlpV2InfoTypeSummary;
@class GTLRDLP_GooglePrivacyDlpV2InfoTypeTransformation;
@class GTLRDLP_GooglePrivacyDlpV2InfoTypeTransformations;
@class GTLRDLP_GooglePrivacyDlpV2InspectConfig;
@class GTLRDLP_GooglePrivacyDlpV2InspectDataSourceDetails;
@class GTLRDLP_GooglePrivacyDlpV2InspectionRule;
@class GTLRDLP_GooglePrivacyDlpV2InspectionRuleSet;
@class GTLRDLP_GooglePrivacyDlpV2InspectJobConfig;
@class GTLRDLP_GooglePrivacyDlpV2InspectResult;
@class GTLRDLP_GooglePrivacyDlpV2InspectTemplate;
@class GTLRDLP_GooglePrivacyDlpV2JobNotificationEmails;
@class GTLRDLP_GooglePrivacyDlpV2JobTrigger;
@class GTLRDLP_GooglePrivacyDlpV2KAnonymityConfig;
@class GTLRDLP_GooglePrivacyDlpV2KAnonymityEquivalenceClass;
@class GTLRDLP_GooglePrivacyDlpV2KAnonymityHistogramBucket;
@class GTLRDLP_GooglePrivacyDlpV2KAnonymityResult;
@class GTLRDLP_GooglePrivacyDlpV2Key;
@class GTLRDLP_GooglePrivacyDlpV2KindExpression;
@class GTLRDLP_GooglePrivacyDlpV2KMapEstimationConfig;
@class GTLRDLP_GooglePrivacyDlpV2KMapEstimationHistogramBucket;
@class GTLRDLP_GooglePrivacyDlpV2KMapEstimationQuasiIdValues;
@class GTLRDLP_GooglePrivacyDlpV2KMapEstimationResult;
@class GTLRDLP_GooglePrivacyDlpV2KmsWrappedCryptoKey;
@class GTLRDLP_GooglePrivacyDlpV2LargeCustomDictionaryConfig;
@class GTLRDLP_GooglePrivacyDlpV2LargeCustomDictionaryStats;
@class GTLRDLP_GooglePrivacyDlpV2LDiversityConfig;
@class GTLRDLP_GooglePrivacyDlpV2LDiversityEquivalenceClass;
@class GTLRDLP_GooglePrivacyDlpV2LDiversityHistogramBucket;
@class GTLRDLP_GooglePrivacyDlpV2LDiversityResult;
@class GTLRDLP_GooglePrivacyDlpV2LeaveUntransformed;
@class GTLRDLP_GooglePrivacyDlpV2LikelihoodAdjustment;
@class GTLRDLP_GooglePrivacyDlpV2Location;
@class GTLRDLP_GooglePrivacyDlpV2Manual;
@class GTLRDLP_GooglePrivacyDlpV2MetadataLocation;
@class GTLRDLP_GooglePrivacyDlpV2NumericalStatsConfig;
@class GTLRDLP_GooglePrivacyDlpV2NumericalStatsResult;
@class GTLRDLP_GooglePrivacyDlpV2OtherInfoTypeSummary;
@class GTLRDLP_GooglePrivacyDlpV2OutputStorageConfig;
@class GTLRDLP_GooglePrivacyDlpV2PartitionId;
@class GTLRDLP_GooglePrivacyDlpV2PathElement;
@class GTLRDLP_GooglePrivacyDlpV2PrimitiveTransformation;
@class GTLRDLP_GooglePrivacyDlpV2PrivacyMetric;
@class GTLRDLP_GooglePrivacyDlpV2ProfileStatus;
@class GTLRDLP_GooglePrivacyDlpV2Proximity;
@class GTLRDLP_GooglePrivacyDlpV2PublishFindingsToCloudDataCatalog;
@class GTLRDLP_GooglePrivacyDlpV2PublishSummaryToCscc;
@class GTLRDLP_GooglePrivacyDlpV2PublishToPubSub;
@class GTLRDLP_GooglePrivacyDlpV2PublishToStackdriver;
@class GTLRDLP_GooglePrivacyDlpV2PubSubCondition;
@class GTLRDLP_GooglePrivacyDlpV2PubSubExpressions;
@class GTLRDLP_GooglePrivacyDlpV2PubSubNotification;
@class GTLRDLP_GooglePrivacyDlpV2QuasiId;
@class GTLRDLP_GooglePrivacyDlpV2QuasiIdentifierField;
@class GTLRDLP_GooglePrivacyDlpV2QuasiIdField;
@class GTLRDLP_GooglePrivacyDlpV2QuoteInfo;
@class GTLRDLP_GooglePrivacyDlpV2Range;
@class GTLRDLP_GooglePrivacyDlpV2RecordCondition;
@class GTLRDLP_GooglePrivacyDlpV2RecordKey;
@class GTLRDLP_GooglePrivacyDlpV2RecordLocation;
@class GTLRDLP_GooglePrivacyDlpV2RecordSuppression;
@class GTLRDLP_GooglePrivacyDlpV2RecordTransformation;
@class GTLRDLP_GooglePrivacyDlpV2RecordTransformations;
@class GTLRDLP_GooglePrivacyDlpV2RedactConfig;
@class GTLRDLP_GooglePrivacyDlpV2Regex;
@class GTLRDLP_GooglePrivacyDlpV2ReplaceDictionaryConfig;
@class GTLRDLP_GooglePrivacyDlpV2ReplaceValueConfig;
@class GTLRDLP_GooglePrivacyDlpV2ReplaceWithInfoTypeConfig;
@class GTLRDLP_GooglePrivacyDlpV2RequestedOptions;
@class GTLRDLP_GooglePrivacyDlpV2RequestedRiskAnalysisOptions;
@class GTLRDLP_GooglePrivacyDlpV2Result;
@class GTLRDLP_GooglePrivacyDlpV2RiskAnalysisJobConfig;
@class GTLRDLP_GooglePrivacyDlpV2Row;
@class GTLRDLP_GooglePrivacyDlpV2SaveFindings;
@class GTLRDLP_GooglePrivacyDlpV2Schedule;
@class GTLRDLP_GooglePrivacyDlpV2SelectedInfoTypes;
@class GTLRDLP_GooglePrivacyDlpV2SensitivityScore;
@class GTLRDLP_GooglePrivacyDlpV2StatisticalTable;
@class GTLRDLP_GooglePrivacyDlpV2StorageConfig;
@class GTLRDLP_GooglePrivacyDlpV2StorageMetadataLabel;
@class GTLRDLP_GooglePrivacyDlpV2StoredInfoType;
@class GTLRDLP_GooglePrivacyDlpV2StoredInfoTypeConfig;
@class GTLRDLP_GooglePrivacyDlpV2StoredInfoTypeStats;
@class GTLRDLP_GooglePrivacyDlpV2StoredInfoTypeVersion;
@class GTLRDLP_GooglePrivacyDlpV2StoredType;
@class GTLRDLP_GooglePrivacyDlpV2SummaryResult;
@class GTLRDLP_GooglePrivacyDlpV2SurrogateType;
@class GTLRDLP_GooglePrivacyDlpV2Table;
@class GTLRDLP_GooglePrivacyDlpV2TableDataProfile;
@class GTLRDLP_GooglePrivacyDlpV2TableDataProfile_ResourceLabels;
@class GTLRDLP_GooglePrivacyDlpV2TableLocation;
@class GTLRDLP_GooglePrivacyDlpV2TableOptions;
@class GTLRDLP_GooglePrivacyDlpV2TaggedField;
@class GTLRDLP_GooglePrivacyDlpV2ThrowError;
@class GTLRDLP_GooglePrivacyDlpV2TimePartConfig;
@class GTLRDLP_GooglePrivacyDlpV2TimespanConfig;
@class GTLRDLP_GooglePrivacyDlpV2TimeZone;
@class GTLRDLP_GooglePrivacyDlpV2TransformationConfig;
@class GTLRDLP_GooglePrivacyDlpV2TransformationDescription;
@class GTLRDLP_GooglePrivacyDlpV2TransformationDetailsStorageConfig;
@class GTLRDLP_GooglePrivacyDlpV2TransformationErrorHandling;
@class GTLRDLP_GooglePrivacyDlpV2TransformationLocation;
@class GTLRDLP_GooglePrivacyDlpV2TransformationOverview;
@class GTLRDLP_GooglePrivacyDlpV2TransformationResultStatus;
@class GTLRDLP_GooglePrivacyDlpV2TransformationSummary;
@class GTLRDLP_GooglePrivacyDlpV2TransientCryptoKey;
@class GTLRDLP_GooglePrivacyDlpV2Trigger;
@class GTLRDLP_GooglePrivacyDlpV2UnwrappedCryptoKey;
@class GTLRDLP_GooglePrivacyDlpV2Value;
@class GTLRDLP_GooglePrivacyDlpV2ValueFrequency;
@class GTLRDLP_GooglePrivacyDlpV2VersionDescription;
@class GTLRDLP_GooglePrivacyDlpV2WordList;
@class GTLRDLP_GoogleProtobufEmpty;
@class GTLRDLP_GoogleRpcStatus;
@class GTLRDLP_GoogleRpcStatus_Details_Item;
@class GTLRDLP_GoogleTypeDate;
@class GTLRDLP_GoogleTypeTimeOfDay;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2BigQueryOptions.sampleMethod

/**
 *  Randomly pick groups of rows to scan.
 *
 *  Value: "RANDOM_START"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2BigQueryOptions_SampleMethod_RandomStart;
/** Value: "SAMPLE_METHOD_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2BigQueryOptions_SampleMethod_SampleMethodUnspecified;
/**
 *  Scan groups of rows in the order BigQuery provides (default). Multiple
 *  groups of rows may be scanned in parallel, so results may not appear in the
 *  same order the rows are read.
 *
 *  Value: "TOP"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2BigQueryOptions_SampleMethod_Top;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2ByteContentItem.type

/**
 *  avro
 *
 *  Value: "AVRO"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_Avro;
/**
 *  Unused
 *
 *  Value: "BYTES_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_BytesTypeUnspecified;
/**
 *  csv
 *
 *  Value: "CSV"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_Csv;
/**
 *  xlsx, xlsm, xltx, xltm
 *
 *  Value: "EXCEL_DOCUMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_ExcelDocument;
/**
 *  Any image type.
 *
 *  Value: "IMAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_Image;
/**
 *  bmp
 *
 *  Value: "IMAGE_BMP"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_ImageBmp;
/**
 *  jpeg
 *
 *  Value: "IMAGE_JPEG"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_ImageJpeg;
/**
 *  png
 *
 *  Value: "IMAGE_PNG"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_ImagePng;
/**
 *  svg
 *
 *  Value: "IMAGE_SVG"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_ImageSvg;
/**
 *  pdf
 *
 *  Value: "PDF"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_Pdf;
/**
 *  pptx, pptm, potx, potm, pot
 *
 *  Value: "POWERPOINT_DOCUMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_PowerpointDocument;
/**
 *  plain text
 *
 *  Value: "TEXT_UTF8"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_TextUtf8;
/**
 *  tsv
 *
 *  Value: "TSV"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_Tsv;
/**
 *  docx, docm, dotx, dotm
 *
 *  Value: "WORD_DOCUMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_WordDocument;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2CharsToIgnore.commonCharactersToIgnore

/**
 *  a-z
 *
 *  Value: "ALPHA_LOWER_CASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CharsToIgnore_CommonCharactersToIgnore_AlphaLowerCase;
/**
 *  A-Z
 *
 *  Value: "ALPHA_UPPER_CASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CharsToIgnore_CommonCharactersToIgnore_AlphaUpperCase;
/**
 *  Unused.
 *
 *  Value: "COMMON_CHARS_TO_IGNORE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CharsToIgnore_CommonCharactersToIgnore_CommonCharsToIgnoreUnspecified;
/**
 *  0-9
 *
 *  Value: "NUMERIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CharsToIgnore_CommonCharactersToIgnore_Numeric;
/**
 *  US Punctuation, one of !"#$%&'()*+,-./:;<=>?\@[\\]^_`{|}~
 *
 *  Value: "PUNCTUATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CharsToIgnore_CommonCharactersToIgnore_Punctuation;
/**
 *  Whitespace character, one of [ \\t\\n\\x0B\\f\\r]
 *
 *  Value: "WHITESPACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CharsToIgnore_CommonCharactersToIgnore_Whitespace;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2CloudStorageOptions.fileTypes

/**
 *  Included file extensions: avro
 *
 *  Value: "AVRO"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_FileTypes_Avro;
/**
 *  Includes all file extensions not covered by another entry. Binary scanning
 *  attempts to convert the content of the file to utf_8 to scan the file. If
 *  you wish to avoid this fall back, specify one or more of the other
 *  FileType's in your storage scan.
 *
 *  Value: "BINARY_FILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_FileTypes_BinaryFile;
/**
 *  Included file extensions: csv
 *
 *  Value: "CSV"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_FileTypes_Csv;
/**
 *  Excel files >30 MB will be scanned as binary files. Included file
 *  extensions: xlsx, xlsm, xltx, xltm
 *
 *  Value: "EXCEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_FileTypes_Excel;
/**
 *  Includes all files.
 *
 *  Value: "FILE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_FileTypes_FileTypeUnspecified;
/**
 *  Included file extensions: bmp, gif, jpg, jpeg, jpe, png.
 *  bytes_limit_per_file has no effect on image files. Image inspection is
 *  restricted to 'global', 'us', 'asia', and 'europe'.
 *
 *  Value: "IMAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_FileTypes_Image;
/**
 *  PDF files >30 MB will be scanned as binary files. Included file extensions:
 *  pdf
 *
 *  Value: "PDF"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_FileTypes_Pdf;
/**
 *  Powerpoint files >30 MB will be scanned as binary files. Included file
 *  extensions: pptx, pptm, potx, potm, pot
 *
 *  Value: "POWERPOINT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_FileTypes_Powerpoint;
/**
 *  Included file extensions: asc,asp, aspx, brf, c, cc,cfm, cgi, cpp, csv, cxx,
 *  c++, cs, css, dart, dat, dot, eml,, epbub, ged, go, h, hh, hpp, hxx, h++,
 *  hs, html, htm, mkd, markdown, m, ml, mli, perl, pl, plist, pm, php, phtml,
 *  pht, properties, py, pyw, rb, rbw, rs, rss, rc, scala, sh, sql, swift, tex,
 *  shtml, shtm, xhtml, lhs, ics, ini, java, js, json, kix, kml, ocaml, md, txt,
 *  text, tsv, vb, vcard, vcs, wml, xcodeproj, xml, xsl, xsd, yml, yaml.
 *
 *  Value: "TEXT_FILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_FileTypes_TextFile;
/**
 *  Included file extensions: tsv
 *
 *  Value: "TSV"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_FileTypes_Tsv;
/**
 *  Word files >30 MB will be scanned as binary files. Included file extensions:
 *  docx, dotx, docm, dotm
 *
 *  Value: "WORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_FileTypes_Word;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2CloudStorageOptions.sampleMethod

/**
 *  For each file larger than bytes_limit_per_file, randomly pick the offset to
 *  start scanning. The scanned bytes are contiguous.
 *
 *  Value: "RANDOM_START"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_SampleMethod_RandomStart;
/** Value: "SAMPLE_METHOD_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_SampleMethod_SampleMethodUnspecified;
/**
 *  Scan from the top (default).
 *
 *  Value: "TOP"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_SampleMethod_Top;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2Condition.operatorProperty

/**
 *  Equal. Attempts to match even with incompatible types.
 *
 *  Value: "EQUAL_TO"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Condition_OperatorProperty_EqualTo;
/**
 *  Exists
 *
 *  Value: "EXISTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Condition_OperatorProperty_Exists;
/**
 *  Greater than.
 *
 *  Value: "GREATER_THAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Condition_OperatorProperty_GreaterThan;
/**
 *  Greater than or equals.
 *
 *  Value: "GREATER_THAN_OR_EQUALS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Condition_OperatorProperty_GreaterThanOrEquals;
/**
 *  Less than.
 *
 *  Value: "LESS_THAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Condition_OperatorProperty_LessThan;
/**
 *  Less than or equals.
 *
 *  Value: "LESS_THAN_OR_EQUALS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Condition_OperatorProperty_LessThanOrEquals;
/**
 *  Not equal to. Attempts to match even with incompatible types.
 *
 *  Value: "NOT_EQUAL_TO"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Condition_OperatorProperty_NotEqualTo;
/**
 *  Unused
 *
 *  Value: "RELATIONAL_OPERATOR_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Condition_OperatorProperty_RelationalOperatorUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig.commonAlphabet

/**
 *  `[0-9A-Za-z]` (radix of 62)
 *
 *  Value: "ALPHA_NUMERIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig_CommonAlphabet_AlphaNumeric;
/**
 *  Unused.
 *
 *  Value: "FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig_CommonAlphabet_FfxCommonNativeAlphabetUnspecified;
/**
 *  `[0-9A-F]` (radix of 16)
 *
 *  Value: "HEXADECIMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig_CommonAlphabet_Hexadecimal;
/**
 *  `[0-9]` (radix of 10)
 *
 *  Value: "NUMERIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig_CommonAlphabet_Numeric;
/**
 *  `[0-9A-Z]` (radix of 36)
 *
 *  Value: "UPPER_CASE_ALPHA_NUMERIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig_CommonAlphabet_UpperCaseAlphaNumeric;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2CustomInfoType.exclusionType

/**
 *  A finding of this custom info type will be excluded from final results, but
 *  can still affect rule execution.
 *
 *  Value: "EXCLUSION_TYPE_EXCLUDE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CustomInfoType_ExclusionType_ExclusionTypeExclude;
/**
 *  A finding of this custom info type will not be excluded from results.
 *
 *  Value: "EXCLUSION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CustomInfoType_ExclusionType_ExclusionTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2CustomInfoType.likelihood

/**
 *  Default value; same as POSSIBLE.
 *
 *  Value: "LIKELIHOOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CustomInfoType_Likelihood_LikelihoodUnspecified;
/** Value: "LIKELY" */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CustomInfoType_Likelihood_Likely;
/**
 *  Some matching elements.
 *
 *  Value: "POSSIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CustomInfoType_Likelihood_Possible;
/** Value: "UNLIKELY" */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CustomInfoType_Likelihood_Unlikely;
/**
 *  Many matching elements.
 *
 *  Value: "VERY_LIKELY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CustomInfoType_Likelihood_VeryLikely;
/**
 *  Few matching elements.
 *
 *  Value: "VERY_UNLIKELY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2CustomInfoType_Likelihood_VeryUnlikely;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2DataProfilePubSubMessage.event

/**
 *  Changed one of the following profile metrics: * Table data risk score *
 *  Table sensitivity score * Table resource visibility * Table encryption type
 *  * Table predicted infoTypes * Table other infoTypes
 *
 *  Value: "CHANGED_PROFILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DataProfilePubSubMessage_Event_ChangedProfile;
/**
 *  A user (non-internal) error occurred.
 *
 *  Value: "ERROR_CHANGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DataProfilePubSubMessage_Event_ErrorChanged;
/**
 *  Unused.
 *
 *  Value: "EVENT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DataProfilePubSubMessage_Event_EventTypeUnspecified;
/**
 *  New profile (not a re-profile).
 *
 *  Value: "NEW_PROFILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DataProfilePubSubMessage_Event_NewProfile;
/**
 *  Table data risk score or sensitivity score increased.
 *
 *  Value: "SCORE_INCREASED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DataProfilePubSubMessage_Event_ScoreIncreased;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2DataRiskLevel.score

/**
 *  High risk – SPII may be present. Access controls may include public ACLs.
 *  Exfiltration of data may lead to user data loss. Re-identification of users
 *  may be possible. Consider limiting usage and or removing SPII.
 *
 *  Value: "RISK_HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DataRiskLevel_Score_RiskHigh;
/**
 *  Low risk - Lower indication of sensitive data that appears to have
 *  additional access restrictions in place or no indication of sensitive data
 *  found.
 *
 *  Value: "RISK_LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DataRiskLevel_Score_RiskLow;
/**
 *  Medium risk - Sensitive data may be present but additional access or fine
 *  grain access restrictions appear to be present. Consider limiting access
 *  even further or transform data to mask.
 *
 *  Value: "RISK_MODERATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DataRiskLevel_Score_RiskModerate;
/**
 *  Unused.
 *
 *  Value: "RISK_SCORE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DataRiskLevel_Score_RiskScoreUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2DateTime.dayOfWeek

/**
 *  The day of the week is unspecified.
 *
 *  Value: "DAY_OF_WEEK_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DateTime_DayOfWeek_DayOfWeekUnspecified;
/**
 *  Friday
 *
 *  Value: "FRIDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DateTime_DayOfWeek_Friday;
/**
 *  Monday
 *
 *  Value: "MONDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DateTime_DayOfWeek_Monday;
/**
 *  Saturday
 *
 *  Value: "SATURDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DateTime_DayOfWeek_Saturday;
/**
 *  Sunday
 *
 *  Value: "SUNDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DateTime_DayOfWeek_Sunday;
/**
 *  Thursday
 *
 *  Value: "THURSDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DateTime_DayOfWeek_Thursday;
/**
 *  Tuesday
 *
 *  Value: "TUESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DateTime_DayOfWeek_Tuesday;
/**
 *  Wednesday
 *
 *  Value: "WEDNESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DateTime_DayOfWeek_Wednesday;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2Deidentify.fileTypesToTransform

/**
 *  Included file extensions: avro
 *
 *  Value: "AVRO"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Deidentify_FileTypesToTransform_Avro;
/**
 *  Includes all file extensions not covered by another entry. Binary scanning
 *  attempts to convert the content of the file to utf_8 to scan the file. If
 *  you wish to avoid this fall back, specify one or more of the other
 *  FileType's in your storage scan.
 *
 *  Value: "BINARY_FILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Deidentify_FileTypesToTransform_BinaryFile;
/**
 *  Included file extensions: csv
 *
 *  Value: "CSV"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Deidentify_FileTypesToTransform_Csv;
/**
 *  Excel files >30 MB will be scanned as binary files. Included file
 *  extensions: xlsx, xlsm, xltx, xltm
 *
 *  Value: "EXCEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Deidentify_FileTypesToTransform_Excel;
/**
 *  Includes all files.
 *
 *  Value: "FILE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Deidentify_FileTypesToTransform_FileTypeUnspecified;
/**
 *  Included file extensions: bmp, gif, jpg, jpeg, jpe, png.
 *  bytes_limit_per_file has no effect on image files. Image inspection is
 *  restricted to 'global', 'us', 'asia', and 'europe'.
 *
 *  Value: "IMAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Deidentify_FileTypesToTransform_Image;
/**
 *  PDF files >30 MB will be scanned as binary files. Included file extensions:
 *  pdf
 *
 *  Value: "PDF"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Deidentify_FileTypesToTransform_Pdf;
/**
 *  Powerpoint files >30 MB will be scanned as binary files. Included file
 *  extensions: pptx, pptm, potx, potm, pot
 *
 *  Value: "POWERPOINT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Deidentify_FileTypesToTransform_Powerpoint;
/**
 *  Included file extensions: asc,asp, aspx, brf, c, cc,cfm, cgi, cpp, csv, cxx,
 *  c++, cs, css, dart, dat, dot, eml,, epbub, ged, go, h, hh, hpp, hxx, h++,
 *  hs, html, htm, mkd, markdown, m, ml, mli, perl, pl, plist, pm, php, phtml,
 *  pht, properties, py, pyw, rb, rbw, rs, rss, rc, scala, sh, sql, swift, tex,
 *  shtml, shtm, xhtml, lhs, ics, ini, java, js, json, kix, kml, ocaml, md, txt,
 *  text, tsv, vb, vcard, vcs, wml, xcodeproj, xml, xsl, xsd, yml, yaml.
 *
 *  Value: "TEXT_FILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Deidentify_FileTypesToTransform_TextFile;
/**
 *  Included file extensions: tsv
 *
 *  Value: "TSV"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Deidentify_FileTypesToTransform_Tsv;
/**
 *  Word files >30 MB will be scanned as binary files. Included file extensions:
 *  docx, dotx, docm, dotm
 *
 *  Value: "WORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Deidentify_FileTypesToTransform_Word;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2DlpJob.state

/**
 *  The job is currently accepting findings via hybridInspect. A hybrid job in
 *  ACTIVE state may continue to have findings added to it through the calling
 *  of hybridInspect. After the job has finished no more calls to hybridInspect
 *  may be made. ACTIVE jobs can transition to DONE.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DlpJob_State_Active;
/**
 *  The job was canceled before it could be completed.
 *
 *  Value: "CANCELED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DlpJob_State_Canceled;
/**
 *  The job is no longer running.
 *
 *  Value: "DONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DlpJob_State_Done;
/**
 *  The job had an error and did not complete.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DlpJob_State_Failed;
/**
 *  Unused.
 *
 *  Value: "JOB_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DlpJob_State_JobStateUnspecified;
/**
 *  The job has not yet started.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DlpJob_State_Pending;
/**
 *  The job is currently running. Once a job has finished it will transition to
 *  FAILED or DONE.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DlpJob_State_Running;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2DlpJob.type

/**
 *  Defaults to INSPECT_JOB.
 *
 *  Value: "DLP_JOB_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DlpJob_Type_DlpJobTypeUnspecified;
/**
 *  The job inspected Google Cloud for sensitive data.
 *
 *  Value: "INSPECT_JOB"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DlpJob_Type_InspectJob;
/**
 *  The job executed a Risk Analysis computation.
 *
 *  Value: "RISK_ANALYSIS_JOB"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2DlpJob_Type_RiskAnalysisJob;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2ExclusionRule.matchingType

/**
 *  Full match. - Dictionary: join of Dictionary results matched complete
 *  finding quote - Regex: all regex matches fill a finding quote start to end -
 *  Exclude info type: completely inside affecting info types findings
 *
 *  Value: "MATCHING_TYPE_FULL_MATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ExclusionRule_MatchingType_MatchingTypeFullMatch;
/**
 *  Inverse match. - Dictionary: no tokens in the finding match the dictionary -
 *  Regex: finding doesn't match the regex - Exclude info type: no intersection
 *  with affecting info types findings
 *
 *  Value: "MATCHING_TYPE_INVERSE_MATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ExclusionRule_MatchingType_MatchingTypeInverseMatch;
/**
 *  Partial match. - Dictionary: at least one of the tokens in the finding
 *  matches - Regex: substring of the finding matches - Exclude info type:
 *  intersects with affecting info types findings
 *
 *  Value: "MATCHING_TYPE_PARTIAL_MATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ExclusionRule_MatchingType_MatchingTypePartialMatch;
/**
 *  Invalid.
 *
 *  Value: "MATCHING_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2ExclusionRule_MatchingType_MatchingTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2Expressions.logicalOperator

/**
 *  Conditional AND
 *
 *  Value: "AND"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Expressions_LogicalOperator_And;
/**
 *  Unused
 *
 *  Value: "LOGICAL_OPERATOR_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Expressions_LogicalOperator_LogicalOperatorUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2Finding.likelihood

/**
 *  Default value; same as POSSIBLE.
 *
 *  Value: "LIKELIHOOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Finding_Likelihood_LikelihoodUnspecified;
/** Value: "LIKELY" */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Finding_Likelihood_Likely;
/**
 *  Some matching elements.
 *
 *  Value: "POSSIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Finding_Likelihood_Possible;
/** Value: "UNLIKELY" */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Finding_Likelihood_Unlikely;
/**
 *  Many matching elements.
 *
 *  Value: "VERY_LIKELY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Finding_Likelihood_VeryLikely;
/**
 *  Few matching elements.
 *
 *  Value: "VERY_UNLIKELY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Finding_Likelihood_VeryUnlikely;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2InfoTypeCategory.industryCategory

/**
 *  The infoType is typically used in the finance industry.
 *
 *  Value: "FINANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_IndustryCategory_Finance;
/**
 *  The infoType is typically used in the health industry.
 *
 *  Value: "HEALTH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_IndustryCategory_Health;
/**
 *  Unused industry
 *
 *  Value: "INDUSTRY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_IndustryCategory_IndustryUnspecified;
/**
 *  The infoType is typically used in the telecommunications industry.
 *
 *  Value: "TELECOMMUNICATIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_IndustryCategory_Telecommunications;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2InfoTypeCategory.locationCategory

/**
 *  The infoType is typically used in Argentina.
 *
 *  Value: "ARGENTINA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Argentina;
/**
 *  The infoType is typically used in Australia.
 *
 *  Value: "AUSTRALIA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Australia;
/**
 *  The infoType is typically used in Belgium.
 *
 *  Value: "BELGIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Belgium;
/**
 *  The infoType is typically used in Brazil.
 *
 *  Value: "BRAZIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Brazil;
/**
 *  The infoType is typically used in Canada.
 *
 *  Value: "CANADA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Canada;
/**
 *  The infoType is typically used in Chile.
 *
 *  Value: "CHILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Chile;
/**
 *  The infoType is typically used in China.
 *
 *  Value: "CHINA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_China;
/**
 *  The infoType is typically used in Colombia.
 *
 *  Value: "COLOMBIA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Colombia;
/**
 *  The infoType is typically used in Denmark.
 *
 *  Value: "DENMARK"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Denmark;
/**
 *  The infoType is typically used in Finland.
 *
 *  Value: "FINLAND"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Finland;
/**
 *  The infoType is typically used in France.
 *
 *  Value: "FRANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_France;
/**
 *  The infoType is typically used in Germany.
 *
 *  Value: "GERMANY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Germany;
/**
 *  The infoType is not issued by or tied to a specific region, but is used
 *  almost everywhere.
 *
 *  Value: "GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Global;
/**
 *  The infoType is typically used in Hong Kong.
 *
 *  Value: "HONG_KONG"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_HongKong;
/**
 *  The infoType is typically used in India.
 *
 *  Value: "INDIA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_India;
/**
 *  The infoType is typically used in Indonesia.
 *
 *  Value: "INDONESIA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Indonesia;
/**
 *  The infoType is typically used in Google internally.
 *
 *  Value: "INTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Internal;
/**
 *  The infoType is typically used in Ireland.
 *
 *  Value: "IRELAND"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Ireland;
/**
 *  The infoType is typically used in Israel.
 *
 *  Value: "ISRAEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Israel;
/**
 *  The infoType is typically used in Italy.
 *
 *  Value: "ITALY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Italy;
/**
 *  The infoType is typically used in Japan.
 *
 *  Value: "JAPAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Japan;
/**
 *  The infoType is typically used in Korea.
 *
 *  Value: "KOREA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Korea;
/**
 *  Unused location
 *
 *  Value: "LOCATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_LocationUnspecified;
/**
 *  The infoType is typically used in Mexico.
 *
 *  Value: "MEXICO"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Mexico;
/**
 *  The infoType is typically used in Norway.
 *
 *  Value: "NORWAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Norway;
/**
 *  The infoType is typically used in Paraguay.
 *
 *  Value: "PARAGUAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Paraguay;
/**
 *  The infoType is typically used in Peru.
 *
 *  Value: "PERU"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Peru;
/**
 *  The infoType is typically used in Poland.
 *
 *  Value: "POLAND"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Poland;
/**
 *  The infoType is typically used in Portugal.
 *
 *  Value: "PORTUGAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Portugal;
/**
 *  The infoType is typically used in Singapore.
 *
 *  Value: "SINGAPORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Singapore;
/**
 *  The infoType is typically used in South Africa.
 *
 *  Value: "SOUTH_AFRICA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_SouthAfrica;
/**
 *  The infoType is typically used in Spain.
 *
 *  Value: "SPAIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Spain;
/**
 *  The infoType is typically used in Sweden.
 *
 *  Value: "SWEDEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Sweden;
/**
 *  The infoType is typically used in Taiwan.
 *
 *  Value: "TAIWAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Taiwan;
/**
 *  The infoType is typically used in Thailand.
 *
 *  Value: "THAILAND"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Thailand;
/**
 *  The infoType is typically used in the Netherlands.
 *
 *  Value: "THE_NETHERLANDS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_TheNetherlands;
/**
 *  The infoType is typically used in Turkey.
 *
 *  Value: "TURKEY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Turkey;
/**
 *  The infoType is typically used in the United Kingdom.
 *
 *  Value: "UNITED_KINGDOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_UnitedKingdom;
/**
 *  The infoType is typically used in the United States.
 *
 *  Value: "UNITED_STATES"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_UnitedStates;
/**
 *  The infoType is typically used in Uruguay.
 *
 *  Value: "URUGUAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Uruguay;
/**
 *  The infoType is typically used in Venezuela.
 *
 *  Value: "VENEZUELA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Venezuela;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2InfoTypeCategory.typeCategory

/**
 *  Information that is not sensitive on its own, but provides details about the
 *  circumstances surrounding an entity or an event.
 *
 *  Value: "CONTEXTUAL_INFORMATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_TypeCategory_ContextualInformation;
/**
 *  Confidential or secret information, for example, a password.
 *
 *  Value: "CREDENTIAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_TypeCategory_Credential;
/**
 *  Attributes that can partially identify someone, especially in combination
 *  with other attributes, like age, height, and gender.
 *
 *  Value: "DEMOGRAPHIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_TypeCategory_Demographic;
/**
 *  A document, for example, a resume or source code.
 *
 *  Value: "DOCUMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_TypeCategory_Document;
/**
 *  An identification document issued by a government.
 *
 *  Value: "GOVERNMENT_ID"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_TypeCategory_GovernmentId;
/**
 *  Personally identifiable information, for example, a name or phone number
 *
 *  Value: "PII"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_TypeCategory_Pii;
/**
 *  Personally identifiable information that is especially sensitive, for
 *  example, a passport number.
 *
 *  Value: "SPII"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_TypeCategory_Spii;
/**
 *  Unused type
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_TypeCategory_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2InfoTypeDescription.supportedBy

/**
 *  Unused.
 *
 *  Value: "ENUM_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeDescription_SupportedBy_EnumTypeUnspecified;
/**
 *  Supported by the inspect operations.
 *
 *  Value: "INSPECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeDescription_SupportedBy_Inspect;
/**
 *  Supported by the risk analysis operations.
 *
 *  Value: "RISK_ANALYSIS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InfoTypeDescription_SupportedBy_RiskAnalysis;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2InspectConfig.contentOptions

/**
 *  Images found in the data.
 *
 *  Value: "CONTENT_IMAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InspectConfig_ContentOptions_ContentImage;
/**
 *  Text content within the data, excluding any metadata.
 *
 *  Value: "CONTENT_TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InspectConfig_ContentOptions_ContentText;
/**
 *  Includes entire content of a file or a data stream.
 *
 *  Value: "CONTENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InspectConfig_ContentOptions_ContentUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2InspectConfig.minLikelihood

/**
 *  Default value; same as POSSIBLE.
 *
 *  Value: "LIKELIHOOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InspectConfig_MinLikelihood_LikelihoodUnspecified;
/** Value: "LIKELY" */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InspectConfig_MinLikelihood_Likely;
/**
 *  Some matching elements.
 *
 *  Value: "POSSIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InspectConfig_MinLikelihood_Possible;
/** Value: "UNLIKELY" */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InspectConfig_MinLikelihood_Unlikely;
/**
 *  Many matching elements.
 *
 *  Value: "VERY_LIKELY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InspectConfig_MinLikelihood_VeryLikely;
/**
 *  Few matching elements.
 *
 *  Value: "VERY_UNLIKELY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2InspectConfig_MinLikelihood_VeryUnlikely;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2JobTrigger.status

/**
 *  Trigger is cancelled and can not be resumed.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2JobTrigger_Status_Cancelled;
/**
 *  Trigger is healthy.
 *
 *  Value: "HEALTHY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2JobTrigger_Status_Healthy;
/**
 *  Trigger is temporarily paused.
 *
 *  Value: "PAUSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2JobTrigger_Status_Paused;
/**
 *  Unused.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2JobTrigger_Status_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2LikelihoodAdjustment.fixedLikelihood

/**
 *  Default value; same as POSSIBLE.
 *
 *  Value: "LIKELIHOOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2LikelihoodAdjustment_FixedLikelihood_LikelihoodUnspecified;
/** Value: "LIKELY" */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2LikelihoodAdjustment_FixedLikelihood_Likely;
/**
 *  Some matching elements.
 *
 *  Value: "POSSIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2LikelihoodAdjustment_FixedLikelihood_Possible;
/** Value: "UNLIKELY" */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2LikelihoodAdjustment_FixedLikelihood_Unlikely;
/**
 *  Many matching elements.
 *
 *  Value: "VERY_LIKELY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2LikelihoodAdjustment_FixedLikelihood_VeryLikely;
/**
 *  Few matching elements.
 *
 *  Value: "VERY_UNLIKELY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2LikelihoodAdjustment_FixedLikelihood_VeryUnlikely;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2MetadataLocation.type

/**
 *  Unused
 *
 *  Value: "METADATATYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2MetadataLocation_Type_MetadatatypeUnspecified;
/**
 *  General file metadata provided by Cloud Storage.
 *
 *  Value: "STORAGE_METADATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2MetadataLocation_Type_StorageMetadata;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2OutputStorageConfig.outputSchema

/**
 *  Schema containing all columns.
 *
 *  Value: "ALL_COLUMNS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2OutputStorageConfig_OutputSchema_AllColumns;
/**
 *  Basic schema including only `info_type`, `quote`, `certainty`, and
 *  `timestamp`.
 *
 *  Value: "BASIC_COLUMNS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2OutputStorageConfig_OutputSchema_BasicColumns;
/**
 *  Schema tailored to findings from scanning Google BigQuery.
 *
 *  Value: "BIG_QUERY_COLUMNS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2OutputStorageConfig_OutputSchema_BigQueryColumns;
/**
 *  Schema tailored to findings from scanning Google Datastore.
 *
 *  Value: "DATASTORE_COLUMNS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2OutputStorageConfig_OutputSchema_DatastoreColumns;
/**
 *  Schema tailored to findings from scanning Cloud Storage.
 *
 *  Value: "GCS_COLUMNS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2OutputStorageConfig_OutputSchema_GcsColumns;
/**
 *  Unused.
 *
 *  Value: "OUTPUT_SCHEMA_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2OutputStorageConfig_OutputSchema_OutputSchemaUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2PubSubCondition.minimumRiskScore

/**
 *  High risk/sensitivity detected.
 *
 *  Value: "HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubCondition_MinimumRiskScore_High;
/**
 *  Medium or high risk/sensitivity detected.
 *
 *  Value: "MEDIUM_OR_HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubCondition_MinimumRiskScore_MediumOrHigh;
/**
 *  Unused.
 *
 *  Value: "PROFILE_SCORE_BUCKET_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubCondition_MinimumRiskScore_ProfileScoreBucketUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2PubSubCondition.minimumSensitivityScore

/**
 *  High risk/sensitivity detected.
 *
 *  Value: "HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubCondition_MinimumSensitivityScore_High;
/**
 *  Medium or high risk/sensitivity detected.
 *
 *  Value: "MEDIUM_OR_HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubCondition_MinimumSensitivityScore_MediumOrHigh;
/**
 *  Unused.
 *
 *  Value: "PROFILE_SCORE_BUCKET_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubCondition_MinimumSensitivityScore_ProfileScoreBucketUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2PubSubExpressions.logicalOperator

/**
 *  Conditional AND.
 *
 *  Value: "AND"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubExpressions_LogicalOperator_And;
/**
 *  Unused.
 *
 *  Value: "LOGICAL_OPERATOR_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubExpressions_LogicalOperator_LogicalOperatorUnspecified;
/**
 *  Conditional OR.
 *
 *  Value: "OR"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubExpressions_LogicalOperator_Or;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2PubSubNotification.detailOfMessage

/**
 *  Unused.
 *
 *  Value: "DETAIL_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubNotification_DetailOfMessage_DetailLevelUnspecified;
/**
 *  The resource name of the table.
 *
 *  Value: "RESOURCE_NAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubNotification_DetailOfMessage_ResourceName;
/**
 *  The full table data profile.
 *
 *  Value: "TABLE_PROFILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubNotification_DetailOfMessage_TableProfile;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2PubSubNotification.event

/**
 *  Changed one of the following profile metrics: * Table data risk score *
 *  Table sensitivity score * Table resource visibility * Table encryption type
 *  * Table predicted infoTypes * Table other infoTypes
 *
 *  Value: "CHANGED_PROFILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubNotification_Event_ChangedProfile;
/**
 *  A user (non-internal) error occurred.
 *
 *  Value: "ERROR_CHANGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubNotification_Event_ErrorChanged;
/**
 *  Unused.
 *
 *  Value: "EVENT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubNotification_Event_EventTypeUnspecified;
/**
 *  New profile (not a re-profile).
 *
 *  Value: "NEW_PROFILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubNotification_Event_NewProfile;
/**
 *  Table data risk score or sensitivity score increased.
 *
 *  Value: "SCORE_INCREASED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2PubSubNotification_Event_ScoreIncreased;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2SensitivityScore.score

/**
 *  High risk – SPII may be present. Exfiltration of data may lead to user data
 *  loss. Re-identification of users may be possible. Consider limiting usage
 *  and or removing SPII.
 *
 *  Value: "SENSITIVITY_HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2SensitivityScore_Score_SensitivityHigh;
/**
 *  No sensitive information detected. Limited access.
 *
 *  Value: "SENSITIVITY_LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2SensitivityScore_Score_SensitivityLow;
/**
 *  Medium risk - PII, potentially sensitive data, or fields with free-text data
 *  that are at higher risk of having intermittent sensitive data. Consider
 *  limiting access.
 *
 *  Value: "SENSITIVITY_MODERATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2SensitivityScore_Score_SensitivityModerate;
/**
 *  Unused.
 *
 *  Value: "SENSITIVITY_SCORE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2SensitivityScore_Score_SensitivityScoreUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2StoredInfoTypeVersion.state

/**
 *  StoredInfoType creation failed. All relevant error messages are returned in
 *  the `StoredInfoTypeVersion` message.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2StoredInfoTypeVersion_State_Failed;
/**
 *  StoredInfoType is no longer valid because artifacts stored in
 *  user-controlled storage were modified. To fix an invalid StoredInfoType, use
 *  the `UpdateStoredInfoType` method to create a new version.
 *
 *  Value: "INVALID"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2StoredInfoTypeVersion_State_Invalid;
/**
 *  StoredInfoType version is being created.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2StoredInfoTypeVersion_State_Pending;
/**
 *  StoredInfoType version is ready for use.
 *
 *  Value: "READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2StoredInfoTypeVersion_State_Ready;
/**
 *  Unused
 *
 *  Value: "STORED_INFO_TYPE_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2StoredInfoTypeVersion_State_StoredInfoTypeStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2SummaryResult.code

/**
 *  Transformation had an error.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2SummaryResult_Code_Error;
/**
 *  Transformation completed without an error.
 *
 *  Value: "SUCCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2SummaryResult_Code_Success;
/**
 *  Unused
 *
 *  Value: "TRANSFORMATION_RESULT_CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2SummaryResult_Code_TransformationResultCodeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2TableDataProfile.encryptionStatus

/**
 *  Customer provides the key.
 *
 *  Value: "ENCRYPTION_CUSTOMER_MANAGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_EncryptionStatus_EncryptionCustomerManaged;
/**
 *  Google manages server-side encryption keys on your behalf.
 *
 *  Value: "ENCRYPTION_GOOGLE_MANAGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_EncryptionStatus_EncryptionGoogleManaged;
/**
 *  Unused.
 *
 *  Value: "ENCRYPTION_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_EncryptionStatus_EncryptionStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2TableDataProfile.resourceVisibility

/**
 *  Visible to any user.
 *
 *  Value: "RESOURCE_VISIBILITY_PUBLIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_ResourceVisibility_ResourceVisibilityPublic;
/**
 *  Visible only to specific users.
 *
 *  Value: "RESOURCE_VISIBILITY_RESTRICTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_ResourceVisibility_ResourceVisibilityRestricted;
/**
 *  Unused.
 *
 *  Value: "RESOURCE_VISIBILITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_ResourceVisibility_ResourceVisibilityUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2TableDataProfile.state

/**
 *  The profile is no longer generating. If profile_status.status.code is 0, the
 *  profile succeeded, otherwise, it failed.
 *
 *  Value: "DONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_State_Done;
/**
 *  The profile is currently running. Once a profile has finished it will
 *  transition to DONE.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_State_Running;
/**
 *  Unused.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2TimePartConfig.partToExtract

/**
 *  [1-31]
 *
 *  Value: "DAY_OF_MONTH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TimePartConfig_PartToExtract_DayOfMonth;
/**
 *  [1-7]
 *
 *  Value: "DAY_OF_WEEK"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TimePartConfig_PartToExtract_DayOfWeek;
/**
 *  [0-23]
 *
 *  Value: "HOUR_OF_DAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TimePartConfig_PartToExtract_HourOfDay;
/**
 *  [1-12]
 *
 *  Value: "MONTH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TimePartConfig_PartToExtract_Month;
/**
 *  Unused
 *
 *  Value: "TIME_PART_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TimePartConfig_PartToExtract_TimePartUnspecified;
/**
 *  [1-53]
 *
 *  Value: "WEEK_OF_YEAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TimePartConfig_PartToExtract_WeekOfYear;
/**
 *  [0-9999]
 *
 *  Value: "YEAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TimePartConfig_PartToExtract_Year;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2TransformationDescription.type

/**
 *  Bucketing
 *
 *  Value: "BUCKETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_Bucketing;
/**
 *  Character mask
 *
 *  Value: "CHARACTER_MASK"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_CharacterMask;
/**
 *  Deterministic crypto
 *
 *  Value: "CRYPTO_DETERMINISTIC_CONFIG"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_CryptoDeterministicConfig;
/**
 *  Crypto hash
 *
 *  Value: "CRYPTO_HASH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_CryptoHash;
/**
 *  FFX-FPE
 *
 *  Value: "CRYPTO_REPLACE_FFX_FPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_CryptoReplaceFfxFpe;
/**
 *  Date shift
 *
 *  Value: "DATE_SHIFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_DateShift;
/**
 *  Fixed size bucketing
 *
 *  Value: "FIXED_SIZE_BUCKETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_FixedSizeBucketing;
/**
 *  Record suppression
 *
 *  Value: "RECORD_SUPPRESSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_RecordSuppression;
/**
 *  Redact
 *
 *  Value: "REDACT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_Redact;
/**
 *  Redact image
 *
 *  Value: "REDACT_IMAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_RedactImage;
/**
 *  Replace value using a dictionary.
 *
 *  Value: "REPLACE_DICTIONARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_ReplaceDictionary;
/**
 *  Replace value
 *
 *  Value: "REPLACE_VALUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_ReplaceValue;
/**
 *  Replace with info type
 *
 *  Value: "REPLACE_WITH_INFO_TYPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_ReplaceWithInfoType;
/**
 *  Time part
 *
 *  Value: "TIME_PART"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_TimePart;
/**
 *  Unused
 *
 *  Value: "TRANSFORMATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_TransformationTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2TransformationLocation.containerType

/** Value: "TRANSFORM_BODY" */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationLocation_ContainerType_TransformBody;
/** Value: "TRANSFORM_METADATA" */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationLocation_ContainerType_TransformMetadata;
/** Value: "TRANSFORM_TABLE" */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationLocation_ContainerType_TransformTable;
/** Value: "TRANSFORM_UNKNOWN_CONTAINER" */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationLocation_ContainerType_TransformUnknownContainer;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2TransformationResultStatus.resultStatusType

/**
 *  This will be set when a BigQuery transformation was successful but could not
 *  be stored back in BigQuery because the transformed row exceeds BigQuery's
 *  max row size.
 *
 *  Value: "BIGQUERY_MAX_ROW_SIZE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationResultStatus_ResultStatusType_BigqueryMaxRowSizeExceeded;
/**
 *  This will be set when a finding could not be transformed (i.e. outside user
 *  set bucket range).
 *
 *  Value: "INVALID_TRANSFORM"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationResultStatus_ResultStatusType_InvalidTransform;
/**
 *  This will be set when there is a finding in the custom metadata of a file,
 *  but at the write time of the transformed file, this key / value pair is
 *  unretrievable.
 *
 *  Value: "METADATA_UNRETRIEVABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationResultStatus_ResultStatusType_MetadataUnretrievable;
/** Value: "STATE_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationResultStatus_ResultStatusType_StateTypeUnspecified;
/**
 *  This will be set when the transformation and storing of it is successful.
 *
 *  Value: "SUCCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2TransformationResultStatus_ResultStatusType_Success;

// ----------------------------------------------------------------------------
// GTLRDLP_GooglePrivacyDlpV2Value.dayOfWeekValue

/**
 *  The day of the week is unspecified.
 *
 *  Value: "DAY_OF_WEEK_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Value_DayOfWeekValue_DayOfWeekUnspecified;
/**
 *  Friday
 *
 *  Value: "FRIDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Value_DayOfWeekValue_Friday;
/**
 *  Monday
 *
 *  Value: "MONDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Value_DayOfWeekValue_Monday;
/**
 *  Saturday
 *
 *  Value: "SATURDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Value_DayOfWeekValue_Saturday;
/**
 *  Sunday
 *
 *  Value: "SUNDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Value_DayOfWeekValue_Sunday;
/**
 *  Thursday
 *
 *  Value: "THURSDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Value_DayOfWeekValue_Thursday;
/**
 *  Tuesday
 *
 *  Value: "TUESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Value_DayOfWeekValue_Tuesday;
/**
 *  Wednesday
 *
 *  Value: "WEDNESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDLP_GooglePrivacyDlpV2Value_DayOfWeekValue_Wednesday;

/**
 *  A task to execute on the completion of a job. See
 *  https://cloud.google.com/dlp/docs/concepts-actions to learn more.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Action : GTLRObject

/** Create a de-identified copy of the input data. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Deidentify *deidentify;

/**
 *  Sends an email when the job completes. The email goes to IAM project owners
 *  and technical [Essential
 *  Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2JobNotificationEmails *jobNotificationEmails;

/** Publish findings to Cloud Datahub. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2PublishFindingsToCloudDataCatalog *publishFindingsToCloudDataCatalog;

/** Publish summary to Cloud Security Command Center (Alpha). */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2PublishSummaryToCscc *publishSummaryToCscc;

/** Enable Stackdriver metric dlp.googleapis.com/finding_count. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2PublishToStackdriver *publishToStackdriver;

/** Publish a notification to a Pub/Sub topic. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2PublishToPubSub *pubSub;

/** Save resulting findings in a provided location. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2SaveFindings *saveFindings;

@end


/**
 *  Request message for ActivateJobTrigger.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ActivateJobTriggerRequest : GTLRObject
@end


/**
 *  Apply transformation to all findings.
 */
@interface GTLRDLP_GooglePrivacyDlpV2AllInfoTypes : GTLRObject
@end


/**
 *  Apply to all text.
 */
@interface GTLRDLP_GooglePrivacyDlpV2AllText : GTLRObject
@end


/**
 *  Result of a risk analysis operation request.
 */
@interface GTLRDLP_GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails : GTLRObject

/** Categorical stats result */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2CategoricalStatsResult *categoricalStatsResult;

/** Delta-presence result */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DeltaPresenceEstimationResult *deltaPresenceEstimationResult;

/** K-anonymity result */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2KAnonymityResult *kAnonymityResult;

/** K-map result */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2KMapEstimationResult *kMapEstimationResult;

/** L-divesity result */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2LDiversityResult *lDiversityResult;

/** Numerical stats result */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2NumericalStatsResult *numericalStatsResult;

/** The configuration used for this job. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2RequestedRiskAnalysisOptions *requestedOptions;

/** Privacy metric to compute. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2PrivacyMetric *requestedPrivacyMetric;

/** Input dataset to compute metrics over. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2BigQueryTable *requestedSourceTable;

@end


/**
 *  An auxiliary table contains statistical information on the relative
 *  frequency of different quasi-identifiers values. It has one or several
 *  quasi-identifiers columns, and one column that indicates the relative
 *  frequency of each quasi-identifier tuple. If a tuple is present in the data
 *  but not in the auxiliary table, the corresponding relative frequency is
 *  assumed to be zero (and thus, the tuple is highly reidentifiable).
 */
@interface GTLRDLP_GooglePrivacyDlpV2AuxiliaryTable : GTLRObject

/** Required. Quasi-identifier columns. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2QuasiIdField *> *quasiIds;

/**
 *  Required. The relative frequency column must contain a floating-point number
 *  between 0 and 1 (inclusive). Null values are assumed to be zero.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *relativeFrequency;

/** Required. Auxiliary table location. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2BigQueryTable *table;

@end


/**
 *  Message defining a field of a BigQuery table.
 */
@interface GTLRDLP_GooglePrivacyDlpV2BigQueryField : GTLRObject

/** Designated field in the BigQuery table. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *field;

/** Source table of the field. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2BigQueryTable *table;

@end


/**
 *  Row key for identifying a record in BigQuery table.
 */
@interface GTLRDLP_GooglePrivacyDlpV2BigQueryKey : GTLRObject

/**
 *  Row number inferred at the time the table was scanned. This value is
 *  nondeterministic, cannot be queried, and may be null for inspection jobs. To
 *  locate findings within a table, specify
 *  `inspect_job.storage_config.big_query_options.identifying_fields` in
 *  `CreateDlpJobRequest`.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowNumber;

/** Complete BigQuery table reference. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2BigQueryTable *tableReference;

@end


/**
 *  Options defining BigQuery table and row identifiers.
 */
@interface GTLRDLP_GooglePrivacyDlpV2BigQueryOptions : GTLRObject

/**
 *  References to fields excluded from scanning. This allows you to skip
 *  inspection of entire columns which you know have no findings.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2FieldId *> *excludedFields;

/**
 *  Table fields that may uniquely identify a row within the table. When
 *  `actions.saveFindings.outputConfig.table` is specified, the values of
 *  columns specified here are available in the output table under
 *  `location.content_locations.record_location.record_key.id_values`. Nested
 *  fields such as `person.birthdate.year` are allowed.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2FieldId *> *identifyingFields;

/** Limit scanning only to these fields. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2FieldId *> *includedFields;

/**
 *  Max number of rows to scan. If the table has more rows than this value, the
 *  rest of the rows are omitted. If not set, or if set to 0, all rows will be
 *  scanned. Only one of rows_limit and rows_limit_percent can be specified.
 *  Cannot be used in conjunction with TimespanConfig.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowsLimit;

/**
 *  Max percentage of rows to scan. The rest are omitted. The number of rows
 *  scanned is rounded down. Must be between 0 and 100, inclusively. Both 0 and
 *  100 means no limit. Defaults to 0. Only one of rows_limit and
 *  rows_limit_percent can be specified. Cannot be used in conjunction with
 *  TimespanConfig.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowsLimitPercent;

/**
 *  sampleMethod
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2BigQueryOptions_SampleMethod_RandomStart
 *        Randomly pick groups of rows to scan. (Value: "RANDOM_START")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2BigQueryOptions_SampleMethod_SampleMethodUnspecified
 *        Value "SAMPLE_METHOD_UNSPECIFIED"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2BigQueryOptions_SampleMethod_Top Scan
 *        groups of rows in the order BigQuery provides (default). Multiple
 *        groups of rows may be scanned in parallel, so results may not appear
 *        in the same order the rows are read. (Value: "TOP")
 */
@property(nonatomic, copy, nullable) NSString *sampleMethod;

/** Complete BigQuery table reference. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2BigQueryTable *tableReference;

@end


/**
 *  Message defining the location of a BigQuery table. A table is uniquely
 *  identified by its project_id, dataset_id, and table_name. Within a query a
 *  table is often referenced with a string in the format of: `:.` or `..`.
 */
@interface GTLRDLP_GooglePrivacyDlpV2BigQueryTable : GTLRObject

/** Dataset ID of the table. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  The Google Cloud Platform project ID of the project containing the table. If
 *  omitted, project ID is inferred from the API call.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Name of the table. */
@property(nonatomic, copy, nullable) NSString *tableId;

@end


/**
 *  Bounding box encompassing detected text within an image.
 */
@interface GTLRDLP_GooglePrivacyDlpV2BoundingBox : GTLRObject

/**
 *  Height of the bounding box in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *height;

/**
 *  Left coordinate of the bounding box. (0,0) is upper left.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *left;

/**
 *  Top coordinate of the bounding box. (0,0) is upper left.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *top;

/**
 *  Width of the bounding box in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *width;

@end


/**
 *  Bucket is represented as a range, along with replacement values.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Bucket : GTLRObject

/** Upper bound of the range, exclusive; type must match min. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Value *max;

/**
 *  Lower bound of the range, inclusive. Type should be the same as max if used.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Value *min;

/** Required. Replacement value for this bucket. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Value *replacementValue;

@end


/**
 *  Generalization function that buckets values based on ranges. The ranges and
 *  replacement values are dynamically provided by the user for custom behavior,
 *  such as 1-30 -> LOW 31-65 -> MEDIUM 66-100 -> HIGH This can be used on data
 *  of type: number, long, string, timestamp. If the bound `Value` type differs
 *  from the type of data being transformed, we will first attempt converting
 *  the type of the data to be transformed to match the type of the bound before
 *  comparing. See https://cloud.google.com/dlp/docs/concepts-bucketing to learn
 *  more.
 */
@interface GTLRDLP_GooglePrivacyDlpV2BucketingConfig : GTLRObject

/** Set of buckets. Ranges must be non-overlapping. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2Bucket *> *buckets;

@end


/**
 *  Container for bytes to inspect or redact.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ByteContentItem : GTLRObject

/**
 *  Content data to inspect or redact.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  The type of data stored in the bytes string. Default will be TEXT_UTF8.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_Avro avro (Value:
 *        "AVRO")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_BytesTypeUnspecified
 *        Unused (Value: "BYTES_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_Csv csv (Value:
 *        "CSV")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_ExcelDocument
 *        xlsx, xlsm, xltx, xltm (Value: "EXCEL_DOCUMENT")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_Image Any image
 *        type. (Value: "IMAGE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_ImageBmp bmp
 *        (Value: "IMAGE_BMP")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_ImageJpeg jpeg
 *        (Value: "IMAGE_JPEG")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_ImagePng png
 *        (Value: "IMAGE_PNG")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_ImageSvg svg
 *        (Value: "IMAGE_SVG")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_Pdf pdf (Value:
 *        "PDF")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_PowerpointDocument
 *        pptx, pptm, potx, potm, pot (Value: "POWERPOINT_DOCUMENT")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_TextUtf8 plain
 *        text (Value: "TEXT_UTF8")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_Tsv tsv (Value:
 *        "TSV")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ByteContentItem_Type_WordDocument docx,
 *        docm, dotx, dotm (Value: "WORD_DOCUMENT")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The request message for canceling a DLP job.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CancelDlpJobRequest : GTLRObject
@end


/**
 *  Compute numerical stats over an individual column, including number of
 *  distinct values and value count distribution.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CategoricalStatsConfig : GTLRObject

/**
 *  Field to compute categorical stats on. All column types are supported except
 *  for arrays and structs. However, it may be more informative to use
 *  NumericalStats when the field type is supported, depending on the data.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *field;

@end


/**
 *  Histogram of value frequencies in the column.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CategoricalStatsHistogramBucket : GTLRObject

/**
 *  Total number of values in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketSize;

/**
 *  Total number of distinct values in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketValueCount;

/**
 *  Sample of value frequencies in this bucket. The total number of values
 *  returned per bucket is capped at 20.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2ValueFrequency *> *bucketValues;

/**
 *  Lower bound on the value frequency of the values in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valueFrequencyLowerBound;

/**
 *  Upper bound on the value frequency of the values in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valueFrequencyUpperBound;

@end


/**
 *  Result of the categorical stats computation.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CategoricalStatsResult : GTLRObject

/** Histogram of value frequencies in the column. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2CategoricalStatsHistogramBucket *> *valueFrequencyHistogramBuckets;

@end


/**
 *  Partially mask a string by replacing a given number of characters with a
 *  fixed character. Masking can start from the beginning or end of the string.
 *  This can be used on data of any type (numbers, longs, and so on) and when
 *  de-identifying structured data we'll attempt to preserve the original data's
 *  type. (This allows you to take a long like 123 and modify it to a string
 *  like **3.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CharacterMaskConfig : GTLRObject

/**
 *  When masking a string, items in this list will be skipped when replacing
 *  characters. For example, if the input string is `555-555-5555` and you
 *  instruct Cloud DLP to skip `-` and mask 5 characters with `*`, Cloud DLP
 *  returns `***-**5-5555`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2CharsToIgnore *> *charactersToIgnore;

/**
 *  Character to use to mask the sensitive values—for example, `*` for an
 *  alphabetic string such as a name, or `0` for a numeric string such as ZIP
 *  code or credit card number. This string must have a length of 1. If not
 *  supplied, this value defaults to `*` for strings, and `0` for digits.
 */
@property(nonatomic, copy, nullable) NSString *maskingCharacter;

/**
 *  Number of characters to mask. If not set, all matching chars will be masked.
 *  Skipped characters do not count towards this tally. If `number_to_mask` is
 *  negative, this denotes inverse masking. Cloud DLP masks all but a number of
 *  characters. For example, suppose you have the following values: -
 *  `masking_character` is `*` - `number_to_mask` is `-4` - `reverse_order` is
 *  `false` - `CharsToIgnore` includes `-` - Input string is
 *  `1234-5678-9012-3456` The resulting de-identified string is
 *  `****-****-****-3456`. Cloud DLP masks all but the last four characters. If
 *  `reverse_order` is `true`, all but the first four characters are masked as
 *  `1234-****-****-****`.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numberToMask;

/**
 *  Mask characters in reverse order. For example, if `masking_character` is
 *  `0`, `number_to_mask` is `14`, and `reverse_order` is `false`, then the
 *  input string `1234-5678-9012-3456` is masked as `00000000000000-3456`. If
 *  `masking_character` is `*`, `number_to_mask` is `3`, and `reverse_order` is
 *  `true`, then the string `12345` is masked as `12***`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reverseOrder;

@end


/**
 *  Characters to skip when doing deidentification of a value. These will be
 *  left alone and skipped.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CharsToIgnore : GTLRObject

/** Characters to not transform when masking. */
@property(nonatomic, copy, nullable) NSString *charactersToSkip;

/**
 *  Common characters to not transform when masking. Useful to avoid removing
 *  punctuation.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CharsToIgnore_CommonCharactersToIgnore_AlphaLowerCase
 *        a-z (Value: "ALPHA_LOWER_CASE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CharsToIgnore_CommonCharactersToIgnore_AlphaUpperCase
 *        A-Z (Value: "ALPHA_UPPER_CASE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CharsToIgnore_CommonCharactersToIgnore_CommonCharsToIgnoreUnspecified
 *        Unused. (Value: "COMMON_CHARS_TO_IGNORE_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CharsToIgnore_CommonCharactersToIgnore_Numeric
 *        0-9 (Value: "NUMERIC")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CharsToIgnore_CommonCharactersToIgnore_Punctuation
 *        US Punctuation, one of !"#$%&'()*+,-./:;<=>?\@[\\]^_`{|}~ (Value:
 *        "PUNCTUATION")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CharsToIgnore_CommonCharactersToIgnore_Whitespace
 *        Whitespace character, one of [ \\t\\n\\x0B\\f\\r] (Value:
 *        "WHITESPACE")
 */
@property(nonatomic, copy, nullable) NSString *commonCharactersToIgnore;

@end


/**
 *  Message representing a set of files in Cloud Storage.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CloudStorageFileSet : GTLRObject

/**
 *  The url, in the format `gs:///`. Trailing wildcard in the path is allowed.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Options defining a file or a set of files within a Cloud Storage bucket.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CloudStorageOptions : GTLRObject

/**
 *  Max number of bytes to scan from a file. If a scanned file's size is bigger
 *  than this value then the rest of the bytes are omitted. Only one of
 *  bytes_limit_per_file and bytes_limit_per_file_percent can be specified.
 *  Cannot be set if de-identification is requested.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesLimitPerFile;

/**
 *  Max percentage of bytes to scan from a file. The rest are omitted. The
 *  number of bytes scanned is rounded down. Must be between 0 and 100,
 *  inclusively. Both 0 and 100 means no limit. Defaults to 0. Only one of
 *  bytes_limit_per_file and bytes_limit_per_file_percent can be specified.
 *  Cannot be set if de-identification is requested.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesLimitPerFilePercent;

/** The set of one or more files to scan. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FileSet *fileSet;

/**
 *  Limits the number of files to scan to this percentage of the input FileSet.
 *  Number of files scanned is rounded down. Must be between 0 and 100,
 *  inclusively. Both 0 and 100 means no limit. Defaults to 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *filesLimitPercent;

/**
 *  List of file type groups to include in the scan. If empty, all files are
 *  scanned and available data format processors are applied. In addition, the
 *  binary content of the selected files is always scanned as well. Images are
 *  scanned only as binary if the specified region does not support image
 *  inspection and no file_types were specified. Image inspection is restricted
 *  to 'global', 'us', 'asia', and 'europe'.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *fileTypes;

/**
 *  sampleMethod
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_SampleMethod_RandomStart
 *        For each file larger than bytes_limit_per_file, randomly pick the
 *        offset to start scanning. The scanned bytes are contiguous. (Value:
 *        "RANDOM_START")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_SampleMethod_SampleMethodUnspecified
 *        Value "SAMPLE_METHOD_UNSPECIFIED"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CloudStorageOptions_SampleMethod_Top
 *        Scan from the top (default). (Value: "TOP")
 */
@property(nonatomic, copy, nullable) NSString *sampleMethod;

@end


/**
 *  Message representing a single file or path in Cloud Storage.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CloudStoragePath : GTLRObject

/**
 *  A url representing a file or path (no wildcards) in Cloud Storage. Example:
 *  gs://[BUCKET_NAME]/dictionary.txt
 */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  Message representing a set of files in a Cloud Storage bucket. Regular
 *  expressions are used to allow fine-grained control over which files in the
 *  bucket to include. Included files are those that match at least one item in
 *  `include_regex` and do not match any items in `exclude_regex`. Note that a
 *  file that matches items from both lists will _not_ be included. For a match
 *  to occur, the entire file path (i.e., everything in the url after the bucket
 *  name) must match the regular expression. For example, given the input
 *  `{bucket_name: "mybucket", include_regex: ["directory1/.*"], exclude_regex:
 *  ["directory1/excluded.*"]}`: * `gs://mybucket/directory1/myfile` will be
 *  included * `gs://mybucket/directory1/directory2/myfile` will be included
 *  (`.*` matches across `/`) * `gs://mybucket/directory0/directory1/myfile`
 *  will _not_ be included (the full path doesn't match any items in
 *  `include_regex`) * `gs://mybucket/directory1/excludedfile` will _not_ be
 *  included (the path matches an item in `exclude_regex`) If `include_regex` is
 *  left empty, it will match all files by default (this is equivalent to
 *  setting `include_regex: [".*"]`). Some other common use cases: *
 *  `{bucket_name: "mybucket", exclude_regex: [".*\\.pdf"]}` will include all
 *  files in `mybucket` except for .pdf files * `{bucket_name: "mybucket",
 *  include_regex: ["directory/[^/]+"]}` will include all files directly under
 *  `gs://mybucket/directory/`, without matching across `/`
 */
@interface GTLRDLP_GooglePrivacyDlpV2CloudStorageRegexFileSet : GTLRObject

/** The name of a Cloud Storage bucket. Required. */
@property(nonatomic, copy, nullable) NSString *bucketName;

/**
 *  A list of regular expressions matching file paths to exclude. All files in
 *  the bucket that match at least one of these regular expressions will be
 *  excluded from the scan. Regular expressions use RE2
 *  [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be found
 *  under the google/re2 repository on GitHub.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *excludeRegex;

/**
 *  A list of regular expressions matching file paths to include. All files in
 *  the bucket that match at least one of these regular expressions will be
 *  included in the set of files, except for those that also match an item in
 *  `exclude_regex`. Leaving this field empty will match all files by default
 *  (this is equivalent to including `.*` in the list). Regular expressions use
 *  RE2 [syntax](https://github.com/google/re2/wiki/Syntax); a guide can be
 *  found under the google/re2 repository on GitHub.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *includeRegex;

@end


/**
 *  Represents a color in the RGB color space.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Color : GTLRObject

/**
 *  The amount of blue in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blue;

/**
 *  The amount of green in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *green;

/**
 *  The amount of red in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *red;

@end


/**
 *  The field type of `value` and `field` do not need to match to be considered
 *  equal, but not all comparisons are possible. EQUAL_TO and NOT_EQUAL_TO
 *  attempt to compare even with incompatible types, but all other comparisons
 *  are invalid with incompatible types. A `value` of type: - `string` can be
 *  compared against all other types - `boolean` can only be compared against
 *  other booleans - `integer` can be compared against doubles or a string if
 *  the string value can be parsed as an integer. - `double` can be compared
 *  against integers or a string if the string can be parsed as a double. -
 *  `Timestamp` can be compared against strings in RFC 3339 date string format.
 *  - `TimeOfDay` can be compared against timestamps and strings in the format
 *  of 'HH:mm:ss'. If we fail to compare do to type mismatch, a warning will be
 *  given and the condition will evaluate to false.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Condition : GTLRObject

/** Required. Field within the record this condition is evaluated against. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *field;

/**
 *  Required. Operator used to compare the field or infoType to the value.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Condition_OperatorProperty_EqualTo
 *        Equal. Attempts to match even with incompatible types. (Value:
 *        "EQUAL_TO")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Condition_OperatorProperty_Exists
 *        Exists (Value: "EXISTS")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Condition_OperatorProperty_GreaterThan
 *        Greater than. (Value: "GREATER_THAN")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Condition_OperatorProperty_GreaterThanOrEquals
 *        Greater than or equals. (Value: "GREATER_THAN_OR_EQUALS")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Condition_OperatorProperty_LessThan
 *        Less than. (Value: "LESS_THAN")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Condition_OperatorProperty_LessThanOrEquals
 *        Less than or equals. (Value: "LESS_THAN_OR_EQUALS")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Condition_OperatorProperty_NotEqualTo
 *        Not equal to. Attempts to match even with incompatible types. (Value:
 *        "NOT_EQUAL_TO")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Condition_OperatorProperty_RelationalOperatorUnspecified
 *        Unused (Value: "RELATIONAL_OPERATOR_UNSPECIFIED")
 *
 *  Remapped to 'operatorProperty' to avoid language reserved word 'operator'.
 */
@property(nonatomic, copy, nullable) NSString *operatorProperty;

/** Value to compare against. [Mandatory, except for `EXISTS` tests.] */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Value *value;

@end


/**
 *  A collection of conditions.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Conditions : GTLRObject

/** A collection of conditions. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2Condition *> *conditions;

@end


/**
 *  Represents a container that may contain DLP findings. Examples of a
 *  container include a file, table, or database record.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Container : GTLRObject

/**
 *  A string representation of the full container name. Examples: - BigQuery:
 *  'Project:DataSetId.TableId' - Cloud Storage:
 *  'gs://Bucket/folders/filename.txt'
 */
@property(nonatomic, copy, nullable) NSString *fullPath;

/**
 *  Project where the finding was found. Can be different from the project that
 *  owns the finding.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  The rest of the path after the root. Examples: - For BigQuery table
 *  `project_id:dataset_id.table_id`, the relative path is `table_id` - For
 *  Cloud Storage file `gs://bucket/folder/filename.txt`, the relative path is
 *  `folder/filename.txt`
 */
@property(nonatomic, copy, nullable) NSString *relativePath;

/**
 *  The root of the container. Examples: - For BigQuery table
 *  `project_id:dataset_id.table_id`, the root is `dataset_id` - For Cloud
 *  Storage file `gs://bucket/folder/filename.txt`, the root is `gs://bucket`
 */
@property(nonatomic, copy, nullable) NSString *rootPath;

/** Container type, for example BigQuery or Cloud Storage. */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Findings container modification timestamp, if applicable. For Cloud Storage,
 *  this field contains the last file modification timestamp. For a BigQuery
 *  table, this field contains the last_modified_time property. For Datastore,
 *  this field isn't populated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Findings container version, if available ("generation" for Cloud Storage).
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  GTLRDLP_GooglePrivacyDlpV2ContentItem
 */
@interface GTLRDLP_GooglePrivacyDlpV2ContentItem : GTLRObject

/** Content data to inspect or redact. Replaces `type` and `data`. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ByteContentItem *byteItem;

/**
 *  Structured content for inspection. See
 *  https://cloud.google.com/dlp/docs/inspecting-text#inspecting_a_table to
 *  learn more.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Table *table;

/** String data to inspect or redact. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Precise location of the finding within a document, record, image, or
 *  metadata container.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ContentLocation : GTLRObject

/**
 *  Name of the container where the finding is located. The top level name is
 *  the source file name or table name. Names of some common storage containers
 *  are formatted as follows: * BigQuery tables:
 *  `{project_id}:{dataset_id}.{table_id}` * Cloud Storage files:
 *  `gs://{bucket}/{path}` * Datastore namespace: {namespace} Nested names could
 *  be absent if the embedded object has no string identifier (for example, an
 *  image contained within a document).
 */
@property(nonatomic, copy, nullable) NSString *containerName;

/**
 *  Finding container modification timestamp, if applicable. For Cloud Storage,
 *  this field contains the last file modification timestamp. For a BigQuery
 *  table, this field contains the last_modified_time property. For Datastore,
 *  this field isn't populated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *containerTimestamp;

/**
 *  Finding container version, if available ("generation" for Cloud Storage).
 */
@property(nonatomic, copy, nullable) NSString *containerVersion;

/** Location data for document files. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DocumentLocation *documentLocation;

/** Location within an image's pixels. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ImageLocation *imageLocation;

/** Location within the metadata for inspected content. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2MetadataLocation *metadataLocation;

/** Location within a row or record of a database table. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2RecordLocation *recordLocation;

@end


/**
 *  Request message for CreateDeidentifyTemplate.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CreateDeidentifyTemplateRequest : GTLRObject

/** Required. The DeidentifyTemplate to create. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DeidentifyTemplate *deidentifyTemplate;

/** Deprecated. This field has no effect. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  The template id can contain uppercase and lowercase letters, numbers, and
 *  hyphens; that is, it must match the regular expression: `[a-zA-Z\\d-_]+`.
 *  The maximum length is 100 characters. Can be empty to allow the system to
 *  generate one.
 */
@property(nonatomic, copy, nullable) NSString *templateId;

@end


/**
 *  Request message for CreateDlpJobRequest. Used to initiate long running jobs
 *  such as calculating risk metrics or inspecting Google Cloud Storage.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CreateDlpJobRequest : GTLRObject

/** An inspection job scans a storage repository for InfoTypes. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InspectJobConfig *inspectJob;

/**
 *  The job id can contain uppercase and lowercase letters, numbers, and
 *  hyphens; that is, it must match the regular expression: `[a-zA-Z\\d-_]+`.
 *  The maximum length is 100 characters. Can be empty to allow the system to
 *  generate one.
 */
@property(nonatomic, copy, nullable) NSString *jobId;

/** Deprecated. This field has no effect. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  A risk analysis job calculates re-identification risk metrics for a BigQuery
 *  table.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2RiskAnalysisJobConfig *riskJob;

@end


/**
 *  Request message for CreateInspectTemplate.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CreateInspectTemplateRequest : GTLRObject

/** Required. The InspectTemplate to create. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InspectTemplate *inspectTemplate;

/** Deprecated. This field has no effect. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  The template id can contain uppercase and lowercase letters, numbers, and
 *  hyphens; that is, it must match the regular expression: `[a-zA-Z\\d-_]+`.
 *  The maximum length is 100 characters. Can be empty to allow the system to
 *  generate one.
 */
@property(nonatomic, copy, nullable) NSString *templateId;

@end


/**
 *  Request message for CreateJobTrigger.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CreateJobTriggerRequest : GTLRObject

/** Required. The JobTrigger to create. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2JobTrigger *jobTrigger;

/** Deprecated. This field has no effect. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  The trigger id can contain uppercase and lowercase letters, numbers, and
 *  hyphens; that is, it must match the regular expression: `[a-zA-Z\\d-_]+`.
 *  The maximum length is 100 characters. Can be empty to allow the system to
 *  generate one.
 */
@property(nonatomic, copy, nullable) NSString *triggerId;

@end


/**
 *  Request message for CreateStoredInfoType.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CreateStoredInfoTypeRequest : GTLRObject

/** Required. Configuration of the storedInfoType to create. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2StoredInfoTypeConfig *config;

/** Deprecated. This field has no effect. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  The storedInfoType ID can contain uppercase and lowercase letters, numbers,
 *  and hyphens; that is, it must match the regular expression:
 *  `[a-zA-Z\\d-_]+`. The maximum length is 100 characters. Can be empty to
 *  allow the system to generate one.
 */
@property(nonatomic, copy, nullable) NSString *storedInfoTypeId;

@end


/**
 *  Pseudonymization method that generates deterministic encryption for the
 *  given input. Outputs a base64 encoded representation of the encrypted
 *  output. Uses AES-SIV based on the RFC https://tools.ietf.org/html/rfc5297.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CryptoDeterministicConfig : GTLRObject

/**
 *  A context may be used for higher security and maintaining referential
 *  integrity such that the same identifier in two different contexts will be
 *  given a distinct surrogate. The context is appended to plaintext value being
 *  encrypted. On decryption the provided context is validated against the value
 *  used during encryption. If a context was provided during encryption, same
 *  context must be provided during decryption as well. If the context is not
 *  set, plaintext would be used as is for encryption. If the context is set
 *  but: 1. there is no record present when transforming a given value or 2. the
 *  field is not present when transforming a given value, plaintext would be
 *  used as is for encryption. Note that case (1) is expected when an
 *  `InfoTypeTransformation` is applied to both structured and unstructured
 *  `ContentItem`s.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *context;

/**
 *  The key used by the encryption function. For deterministic encryption using
 *  AES-SIV, the provided key is internally expanded to 64 bytes prior to use.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2CryptoKey *cryptoKey;

/**
 *  The custom info type to annotate the surrogate with. This annotation will be
 *  applied to the surrogate by prefixing it with the name of the custom info
 *  type followed by the number of characters comprising the surrogate. The
 *  following scheme defines the format: {info type name}({surrogate character
 *  count}):{surrogate} For example, if the name of custom info type is
 *  'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the full replacement value
 *  will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation identifies the
 *  surrogate when inspecting content using the custom info type 'Surrogate'.
 *  This facilitates reversal of the surrogate when it occurs in free text.
 *  Note: For record transformations where the entire cell in a table is being
 *  transformed, surrogates are not mandatory. Surrogates are used to denote the
 *  location of the token and are necessary for re-identification in free form
 *  text. In order for inspection to work properly, the name of this info type
 *  must not occur naturally anywhere in your data; otherwise, inspection may
 *  either - reverse a surrogate that does not correspond to an actual
 *  identifier - be unable to parse the surrogate and result in an error
 *  Therefore, choose your custom info type name carefully after considering
 *  what your data looks like. One way to select a name that has a high chance
 *  of yielding reliable detection is to include one or more unicode characters
 *  that are highly improbable to exist in your data. For example, assuming your
 *  data is entered from a regular ASCII keyboard, the symbol with the hex code
 *  point 29DD might be used like so: ⧝MY_TOKEN_TYPE.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InfoType *surrogateInfoType;

@end


/**
 *  Pseudonymization method that generates surrogates via cryptographic hashing.
 *  Uses SHA-256. The key size must be either 32 or 64 bytes. Outputs a base64
 *  encoded representation of the hashed output (for example,
 *  L7k0BHmF1ha5U3NfGykjro4xWi1MPVQPjhMAZbSV9mM=). Currently, only string and
 *  integer values can be hashed. See
 *  https://cloud.google.com/dlp/docs/pseudonymization to learn more.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CryptoHashConfig : GTLRObject

/** The key used by the hash function. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2CryptoKey *cryptoKey;

@end


/**
 *  This is a data encryption key (DEK) (as opposed to a key encryption key
 *  (KEK) stored by Cloud Key Management Service (Cloud KMS). When using Cloud
 *  KMS to wrap or unwrap a DEK, be sure to set an appropriate IAM policy on the
 *  KEK to ensure an attacker cannot unwrap the DEK.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CryptoKey : GTLRObject

/** Key wrapped using Cloud KMS */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2KmsWrappedCryptoKey *kmsWrapped;

/** Transient crypto key */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2TransientCryptoKey *transient;

/** Unwrapped crypto key */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2UnwrappedCryptoKey *unwrapped;

@end


/**
 *  Replaces an identifier with a surrogate using Format Preserving Encryption
 *  (FPE) with the FFX mode of operation; however when used in the
 *  `ReidentifyContent` API method, it serves the opposite function by reversing
 *  the surrogate back into the original identifier. The identifier must be
 *  encoded as ASCII. For a given crypto key and context, the same identifier
 *  will be replaced with the same surrogate. Identifiers must be at least two
 *  characters long. In the case that the identifier is the empty string, it
 *  will be skipped. See https://cloud.google.com/dlp/docs/pseudonymization to
 *  learn more. Note: We recommend using CryptoDeterministicConfig for all use
 *  cases which do not require preserving the input alphabet space and size,
 *  plus warrant referential integrity.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig : GTLRObject

/**
 *  Common alphabets.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig_CommonAlphabet_AlphaNumeric
 *        `[0-9A-Za-z]` (radix of 62) (Value: "ALPHA_NUMERIC")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig_CommonAlphabet_FfxCommonNativeAlphabetUnspecified
 *        Unused. (Value: "FFX_COMMON_NATIVE_ALPHABET_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig_CommonAlphabet_Hexadecimal
 *        `[0-9A-F]` (radix of 16) (Value: "HEXADECIMAL")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig_CommonAlphabet_Numeric
 *        `[0-9]` (radix of 10) (Value: "NUMERIC")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig_CommonAlphabet_UpperCaseAlphaNumeric
 *        `[0-9A-Z]` (radix of 36) (Value: "UPPER_CASE_ALPHA_NUMERIC")
 */
@property(nonatomic, copy, nullable) NSString *commonAlphabet;

/**
 *  The 'tweak', a context may be used for higher security since the same
 *  identifier in two different contexts won't be given the same surrogate. If
 *  the context is not set, a default tweak will be used. If the context is set
 *  but: 1. there is no record present when transforming a given value or 1. the
 *  field is not present when transforming a given value, a default tweak will
 *  be used. Note that case (1) is expected when an `InfoTypeTransformation` is
 *  applied to both structured and unstructured `ContentItem`s. Currently, the
 *  referenced field may be of value type integer or string. The tweak is
 *  constructed as a sequence of bytes in big endian byte order such that: - a
 *  64 bit integer is encoded followed by a single byte of value 1 - a string is
 *  encoded in UTF-8 format followed by a single byte of value 2
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *context;

/** Required. The key used by the encryption algorithm. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2CryptoKey *cryptoKey;

/**
 *  This is supported by mapping these to the alphanumeric characters that the
 *  FFX mode natively supports. This happens before/after encryption/decryption.
 *  Each character listed must appear only once. Number of characters must be in
 *  the range [2, 95]. This must be encoded as ASCII. The order of characters
 *  does not matter. The full list of allowed characters is:
 *  0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
 *  ~`!\@#$%^&*()_-+={[}]|\\:;"'<,>.?/
 */
@property(nonatomic, copy, nullable) NSString *customAlphabet;

/**
 *  The native way to select the alphabet. Must be in the range [2, 95].
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *radix;

/**
 *  The custom infoType to annotate the surrogate with. This annotation will be
 *  applied to the surrogate by prefixing it with the name of the custom
 *  infoType followed by the number of characters comprising the surrogate. The
 *  following scheme defines the format:
 *  info_type_name(surrogate_character_count):surrogate For example, if the name
 *  of custom infoType is 'MY_TOKEN_INFO_TYPE' and the surrogate is 'abc', the
 *  full replacement value will be: 'MY_TOKEN_INFO_TYPE(3):abc' This annotation
 *  identifies the surrogate when inspecting content using the custom infoType
 *  [`SurrogateType`](https://cloud.google.com/dlp/docs/reference/rest/v2/InspectConfig#surrogatetype).
 *  This facilitates reversal of the surrogate when it occurs in free text. In
 *  order for inspection to work properly, the name of this infoType must not
 *  occur naturally anywhere in your data; otherwise, inspection may find a
 *  surrogate that does not correspond to an actual identifier. Therefore,
 *  choose your custom infoType name carefully after considering what your data
 *  looks like. One way to select a name that has a high chance of yielding
 *  reliable detection is to include one or more unicode characters that are
 *  highly improbable to exist in your data. For example, assuming your data is
 *  entered from a regular ASCII keyboard, the symbol with the hex code point
 *  29DD might be used like so: ⧝MY_TOKEN_TYPE
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InfoType *surrogateInfoType;

@end


/**
 *  Custom information type provided by the user. Used to find domain-specific
 *  sensitive information configurable to the data in question.
 */
@interface GTLRDLP_GooglePrivacyDlpV2CustomInfoType : GTLRObject

/**
 *  Set of detection rules to apply to all findings of this CustomInfoType.
 *  Rules are applied in order that they are specified. Not supported for the
 *  `surrogate_type` CustomInfoType.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2DetectionRule *> *detectionRules;

/** A list of phrases to detect as a CustomInfoType. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Dictionary *dictionary;

/**
 *  If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to
 *  be returned. It still can be used for rules matching.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CustomInfoType_ExclusionType_ExclusionTypeExclude
 *        A finding of this custom info type will be excluded from final
 *        results, but can still affect rule execution. (Value:
 *        "EXCLUSION_TYPE_EXCLUDE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CustomInfoType_ExclusionType_ExclusionTypeUnspecified
 *        A finding of this custom info type will not be excluded from results.
 *        (Value: "EXCLUSION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *exclusionType;

/**
 *  CustomInfoType can either be a new infoType, or an extension of built-in
 *  infoType, when the name matches one of existing infoTypes and that infoType
 *  is specified in `InspectContent.info_types` field. Specifying the latter
 *  adds findings to the one detected by the system. If built-in info type is
 *  not specified in `InspectContent.info_types` list then the name is treated
 *  as a custom info type.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InfoType *infoType;

/**
 *  Likelihood to return for this CustomInfoType. This base value can be altered
 *  by a detection rule if the finding meets the criteria specified by the rule.
 *  Defaults to `VERY_LIKELY` if not specified.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CustomInfoType_Likelihood_LikelihoodUnspecified
 *        Default value; same as POSSIBLE. (Value: "LIKELIHOOD_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CustomInfoType_Likelihood_Likely Value
 *        "LIKELY"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CustomInfoType_Likelihood_Possible Some
 *        matching elements. (Value: "POSSIBLE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CustomInfoType_Likelihood_Unlikely
 *        Value "UNLIKELY"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CustomInfoType_Likelihood_VeryLikely
 *        Many matching elements. (Value: "VERY_LIKELY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2CustomInfoType_Likelihood_VeryUnlikely
 *        Few matching elements. (Value: "VERY_UNLIKELY")
 */
@property(nonatomic, copy, nullable) NSString *likelihood;

/** Regular expression based CustomInfoType. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Regex *regex;

/**
 *  Load an existing `StoredInfoType` resource for use in `InspectDataSource`.
 *  Not currently supported in `InspectContent`.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2StoredType *storedType;

/**
 *  Message for detecting output from deidentification transformations that
 *  support reversing.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2SurrogateType *surrogateType;

@end


/**
 *  A task to execute when a data profile has been generated.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DataProfileAction : GTLRObject

/** Export data profiles into a provided location. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Export *exportData;

/** Publish a message into the Pub/Sub topic. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2PubSubNotification *pubSubNotification;

@end


/**
 *  Snapshot of the configurations used to generate the profile.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DataProfileConfigSnapshot : GTLRObject

/** A copy of the configuration used to generate this profile. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DataProfileJobConfig *dataProfileJob;

/**
 *  A copy of the inspection config used to generate this profile. This is a
 *  copy of the inspect_template specified in `DataProfileJobConfig`.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InspectConfig *inspectConfig;

@end


/**
 *  Configuration for setting up a job to scan resources for profile generation.
 *  Only one data profile configuration may exist per organization, folder, or
 *  project. The generated data profiles are retained according to the [data
 *  retention policy]
 *  (https://cloud.google.com/dlp/docs/data-profiles#retention).
 */
@interface GTLRDLP_GooglePrivacyDlpV2DataProfileJobConfig : GTLRObject

/** Actions to execute at the completion of the job. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2DataProfileAction *> *dataProfileActions;

/**
 *  Detection logic for profile generation. Not all template features are used
 *  by profiles. FindingLimits, include_quote and exclude_info_types have no
 *  impact on data profiling. Multiple templates may be provided if there is
 *  data in multiple regions. At most one template must be specified per-region
 *  (including "global"). Each region is scanned using the applicable template.
 *  If no region-specific template is specified, but a "global" template is
 *  specified, it will be copied to that region and used instead. If no global
 *  or region-specific template is provided for a region with data, that
 *  region's data will not be scanned. For more information, see
 *  https://cloud.google.com/dlp/docs/data-profiles#data_residency.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *inspectTemplates;

/** The data to scan. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DataProfileLocation *location;

/**
 *  The project that will run the scan. The DLP service account that exists
 *  within this project must have access to all resources that are profiled, and
 *  the Cloud DLP API must be enabled.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  The data that will be profiled.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DataProfileLocation : GTLRObject

/**
 *  The ID of the Folder within an organization to scan.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *folderId;

/**
 *  The ID of an organization to scan.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *organizationId;

@end


/**
 *  A condition for determining whether a Pub/Sub should be triggered.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DataProfilePubSubCondition : GTLRObject

/** An expression. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2PubSubExpressions *expressions;

@end


/**
 *  Pub/Sub topic message for a DataProfileAction.PubSubNotification event. To
 *  receive a message of protocol buffer schema type, convert the message data
 *  to an object of this proto class.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DataProfilePubSubMessage : GTLRObject

/**
 *  The event that caused the Pub/Sub message to be sent.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DataProfilePubSubMessage_Event_ChangedProfile
 *        Changed one of the following profile metrics: * Table data risk score
 *        * Table sensitivity score * Table resource visibility * Table
 *        encryption type * Table predicted infoTypes * Table other infoTypes
 *        (Value: "CHANGED_PROFILE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DataProfilePubSubMessage_Event_ErrorChanged
 *        A user (non-internal) error occurred. (Value: "ERROR_CHANGED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DataProfilePubSubMessage_Event_EventTypeUnspecified
 *        Unused. (Value: "EVENT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DataProfilePubSubMessage_Event_NewProfile
 *        New profile (not a re-profile). (Value: "NEW_PROFILE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DataProfilePubSubMessage_Event_ScoreIncreased
 *        Table data risk score or sensitivity score increased. (Value:
 *        "SCORE_INCREASED")
 */
@property(nonatomic, copy, nullable) NSString *event;

/**
 *  If `DetailLevel` is `TABLE_PROFILE` this will be fully populated. Otherwise,
 *  if `DetailLevel` is `RESOURCE_NAME`, then only `name` and `full_resource`
 *  will be populated.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2TableDataProfile *profile;

@end


/**
 *  Score is a summary of all elements in the data profile. A higher number
 *  means more risk.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DataRiskLevel : GTLRObject

/**
 *  The score applied to the resource.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DataRiskLevel_Score_RiskHigh High risk
 *        – SPII may be present. Access controls may include public ACLs.
 *        Exfiltration of data may lead to user data loss. Re-identification of
 *        users may be possible. Consider limiting usage and or removing SPII.
 *        (Value: "RISK_HIGH")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DataRiskLevel_Score_RiskLow Low risk -
 *        Lower indication of sensitive data that appears to have additional
 *        access restrictions in place or no indication of sensitive data found.
 *        (Value: "RISK_LOW")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DataRiskLevel_Score_RiskModerate Medium
 *        risk - Sensitive data may be present but additional access or fine
 *        grain access restrictions appear to be present. Consider limiting
 *        access even further or transform data to mask. (Value:
 *        "RISK_MODERATE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DataRiskLevel_Score_RiskScoreUnspecified
 *        Unused. (Value: "RISK_SCORE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *score;

@end


/**
 *  Record key for a finding in Cloud Datastore.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DatastoreKey : GTLRObject

/** Datastore entity key. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Key *entityKey;

@end


/**
 *  Options defining a data set within Google Cloud Datastore.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DatastoreOptions : GTLRObject

/** The kind to process. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2KindExpression *kind;

/**
 *  A partition ID identifies a grouping of entities. The grouping is always by
 *  project and namespace, however the namespace ID may be empty.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2PartitionId *partitionId;

@end


/**
 *  Shifts dates by random number of days, with option to be consistent for the
 *  same context. See https://cloud.google.com/dlp/docs/concepts-date-shifting
 *  to learn more.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DateShiftConfig : GTLRObject

/**
 *  Points to the field that contains the context, for example, an entity id. If
 *  set, must also set cryptoKey. If set, shift will be consistent for the given
 *  context.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *context;

/**
 *  Causes the shift to be computed based on this key and the context. This
 *  results in the same shift for the same context and crypto_key. If set, must
 *  also set context. Can only be applied to table items.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2CryptoKey *cryptoKey;

/**
 *  Required. For example, -5 means shift date to at most 5 days back in the
 *  past.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lowerBoundDays;

/**
 *  Required. Range of shift in days. Actual shift will be selected at random
 *  within this range (inclusive ends). Negative means shift to earlier in time.
 *  Must not be more than 365250 days (1000 years) each direction. For example,
 *  3 means shift date to at most 3 days into the future.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *upperBoundDays;

@end


/**
 *  Message for a date time object. e.g. 2018-01-01, 5th August.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DateTime : GTLRObject

/**
 *  One or more of the following must be set. Must be a valid date or time
 *  value.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GoogleTypeDate *date;

/**
 *  Day of week
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DateTime_DayOfWeek_DayOfWeekUnspecified
 *        The day of the week is unspecified. (Value: "DAY_OF_WEEK_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DateTime_DayOfWeek_Friday Friday
 *        (Value: "FRIDAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DateTime_DayOfWeek_Monday Monday
 *        (Value: "MONDAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DateTime_DayOfWeek_Saturday Saturday
 *        (Value: "SATURDAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DateTime_DayOfWeek_Sunday Sunday
 *        (Value: "SUNDAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DateTime_DayOfWeek_Thursday Thursday
 *        (Value: "THURSDAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DateTime_DayOfWeek_Tuesday Tuesday
 *        (Value: "TUESDAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DateTime_DayOfWeek_Wednesday Wednesday
 *        (Value: "WEDNESDAY")
 */
@property(nonatomic, copy, nullable) NSString *dayOfWeek;

/** Time of day */
@property(nonatomic, strong, nullable) GTLRDLP_GoogleTypeTimeOfDay *time;

/** Time zone */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2TimeZone *timeZone;

@end


/**
 *  Create a de-identified copy of the requested table or files. A
 *  TransformationDetail will be created for each transformation. If any rows in
 *  BigQuery are skipped during de-identification (transformation errors or row
 *  size exceeds BigQuery insert API limits) they are placed in the failure
 *  output table. If the original row exceeds the BigQuery insert API limit it
 *  will be truncated when written to the failure output table. The failure
 *  output table can be set in the
 *  action.deidentify.output.big_query_output.deidentified_failure_output_table
 *  field, if no table is set, a table will be automatically created in the same
 *  project and dataset as the original table. Compatible with: Inspect
 */
@interface GTLRDLP_GooglePrivacyDlpV2Deidentify : GTLRObject

/**
 *  Required. User settable Cloud Storage bucket and folders to store
 *  de-identified files. This field must be set for cloud storage
 *  deidentification. The output Cloud Storage bucket must be different from the
 *  input bucket. De-identified files will overwrite files in the output path.
 *  Form of: gs://bucket/folder/ or gs://bucket
 */
@property(nonatomic, copy, nullable) NSString *cloudStorageOutput;

/**
 *  List of user-specified file type groups to transform. If specified, only the
 *  files with these filetypes will be transformed. If empty, all supported
 *  files will be transformed. Supported types may be automatically added over
 *  time. If a file type is set in this field that isn't supported by the
 *  Deidentify action then the job will fail and will not be successfully
 *  created/started. Currently the only filetypes supported are: IMAGES,
 *  TEXT_FILES, CSV, TSV.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *fileTypesToTransform;

/**
 *  User specified deidentify templates and configs for structured,
 *  unstructured, and image files.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2TransformationConfig *transformationConfig;

/**
 *  Config for storing transformation details. This is separate from the
 *  de-identified content, and contains metadata about the successful
 *  transformations and/or failures that occurred while de-identifying. This
 *  needs to be set in order for users to access information about the status of
 *  each transformation (see TransformationDetails message for more information
 *  about what is noted).
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2TransformationDetailsStorageConfig *transformationDetailsStorageConfig;

@end


/**
 *  The configuration that controls how the data will change.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DeidentifyConfig : GTLRObject

/** Treat the dataset as an image and redact. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ImageTransformations *imageTransformations;

/**
 *  Treat the dataset as free-form text and apply the same free text
 *  transformation everywhere.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InfoTypeTransformations *infoTypeTransformations;

/**
 *  Treat the dataset as structured. Transformations can be applied to specific
 *  locations within structured datasets, such as transforming a column within a
 *  table.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2RecordTransformations *recordTransformations;

/**
 *  Mode for handling transformation errors. If left unspecified, the default
 *  mode is `TransformationErrorHandling.ThrowError`.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2TransformationErrorHandling *transformationErrorHandling;

@end


/**
 *  Request to de-identify a ContentItem.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DeidentifyContentRequest : GTLRObject

/**
 *  Configuration for the de-identification of the content item. Items specified
 *  here will override the template referenced by the deidentify_template_name
 *  argument.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DeidentifyConfig *deidentifyConfig;

/**
 *  Template to use. Any configuration directly specified in deidentify_config
 *  will override those set in the template. Singular fields that are set in
 *  this request will replace their corresponding fields in the template.
 *  Repeated fields are appended. Singular sub-messages and groups are
 *  recursively merged.
 */
@property(nonatomic, copy, nullable) NSString *deidentifyTemplateName;

/**
 *  Configuration for the inspector. Items specified here will override the
 *  template referenced by the inspect_template_name argument.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InspectConfig *inspectConfig;

/**
 *  Template to use. Any configuration directly specified in inspect_config will
 *  override those set in the template. Singular fields that are set in this
 *  request will replace their corresponding fields in the template. Repeated
 *  fields are appended. Singular sub-messages and groups are recursively
 *  merged.
 */
@property(nonatomic, copy, nullable) NSString *inspectTemplateName;

/** The item to de-identify. Will be treated as text. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ContentItem *item;

/** Deprecated. This field has no effect. */
@property(nonatomic, copy, nullable) NSString *locationId;

@end


/**
 *  Results of de-identifying a ContentItem.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DeidentifyContentResponse : GTLRObject

/** The de-identified item. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ContentItem *item;

/** An overview of the changes that were made on the `item`. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2TransformationOverview *overview;

@end


/**
 *  DeidentifyTemplates contains instructions on how to de-identify content. See
 *  https://cloud.google.com/dlp/docs/concepts-templates to learn more.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DeidentifyTemplate : GTLRObject

/** Output only. The creation timestamp of an inspectTemplate. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The core content of the template. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DeidentifyConfig *deidentifyConfig;

/**
 *  Short description (max 256 chars).
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Display name (max 256 chars). */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. The template name. The template will have one of the following
 *  formats: `projects/PROJECT_ID/deidentifyTemplates/TEMPLATE_ID` OR
 *  `organizations/ORGANIZATION_ID/deidentifyTemplates/TEMPLATE_ID`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The last update timestamp of an inspectTemplate. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  δ-presence metric, used to estimate how likely it is for an attacker to
 *  figure out that one given individual appears in a de-identified dataset.
 *  Similarly to the k-map metric, we cannot compute δ-presence exactly without
 *  knowing the attack dataset, so we use a statistical model instead.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DeltaPresenceEstimationConfig : GTLRObject

/**
 *  Several auxiliary tables can be used in the analysis. Each custom_tag used
 *  to tag a quasi-identifiers field must appear in exactly one field of one
 *  auxiliary table.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2StatisticalTable *> *auxiliaryTables;

/**
 *  Required. Fields considered to be quasi-identifiers. No two fields can have
 *  the same tag.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2QuasiId *> *quasiIds;

/**
 *  ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no
 *  column is tagged with a region-specific InfoType (like US_ZIP_5) or a region
 *  code.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

@end


/**
 *  A DeltaPresenceEstimationHistogramBucket message with the following values:
 *  min_probability: 0.1 max_probability: 0.2 frequency: 42 means that there are
 *  42 records for which δ is in [0.1, 0.2). An important particular case is
 *  when min_probability = max_probability = 1: then, every individual who
 *  shares this quasi-identifier combination is in the dataset.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket : GTLRObject

/**
 *  Number of records within these probability bounds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketSize;

/**
 *  Total number of distinct quasi-identifier tuple values in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketValueCount;

/**
 *  Sample of quasi-identifier tuple values in this bucket. The total number of
 *  classes returned per bucket is capped at 20.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValues *> *bucketValues;

/**
 *  Always greater than or equal to min_probability.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxProbability;

/**
 *  Between 0 and 1.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minProbability;

@end


/**
 *  A tuple of values for the quasi-identifier columns.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DeltaPresenceEstimationQuasiIdValues : GTLRObject

/**
 *  The estimated probability that a given individual sharing these
 *  quasi-identifier values is in the dataset. This value, typically called δ,
 *  is the ratio between the number of records in the dataset with these
 *  quasi-identifier values, and the total number of individuals (inside *and*
 *  outside the dataset) with these quasi-identifier values. For example, if
 *  there are 15 individuals in the dataset who share the same quasi-identifier
 *  values, and an estimated 100 people in the entire population with these
 *  values, then δ is 0.15.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedProbability;

/** The quasi-identifier values. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2Value *> *quasiIdsValues;

@end


/**
 *  Result of the δ-presence computation. Note that these results are an
 *  estimation, not exact values.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DeltaPresenceEstimationResult : GTLRObject

/**
 *  The intervals [min_probability, max_probability) do not overlap. If a value
 *  doesn't correspond to any such interval, the associated frequency is zero.
 *  For example, the following records: {min_probability: 0, max_probability:
 *  0.1, frequency: 17} {min_probability: 0.2, max_probability: 0.3, frequency:
 *  42} {min_probability: 0.3, max_probability: 0.4, frequency: 99} mean that
 *  there are no record with an estimated probability in [0.1, 0.2) nor larger
 *  or equal to 0.4.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2DeltaPresenceEstimationHistogramBucket *> *deltaPresenceEstimationHistogram;

@end


/**
 *  Deprecated; use `InspectionRuleSet` instead. Rule for modifying a
 *  `CustomInfoType` to alter behavior under certain circumstances, depending on
 *  the specific details of the rule. Not supported for the `surrogate_type`
 *  custom infoType.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DetectionRule : GTLRObject

/** Hotword-based detection rule. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2HotwordRule *hotwordRule;

@end


/**
 *  Custom information type based on a dictionary of words or phrases. This can
 *  be used to match sensitive information specific to the data, such as a list
 *  of employee IDs or job titles. Dictionary words are case-insensitive and all
 *  characters other than letters and digits in the unicode [Basic Multilingual
 *  Plane](https://en.wikipedia.org/wiki/Plane_%28Unicode%29#Basic_Multilingual_Plane)
 *  will be replaced with whitespace when scanning for matches, so the
 *  dictionary phrase "Sam Johnson" will match all three phrases "sam johnson",
 *  "Sam, Johnson", and "Sam (Johnson)". Additionally, the characters
 *  surrounding any match must be of a different type than the adjacent
 *  characters within the word, so letters must be next to non-letters and
 *  digits next to non-digits. For example, the dictionary word "jen" will match
 *  the first three letters of the text "jen123" but will return no matches for
 *  "jennifer". Dictionary words containing a large number of characters that
 *  are not letters or digits may result in unexpected findings because such
 *  characters are treated as whitespace. The
 *  [limits](https://cloud.google.com/dlp/limits) page contains details about
 *  the size limits of dictionaries. For dictionaries that do not fit within
 *  these constraints, consider using `LargeCustomDictionaryConfig` in the
 *  `StoredInfoType` API.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Dictionary : GTLRObject

/**
 *  Newline-delimited file of words in Cloud Storage. Only a single file is
 *  accepted.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2CloudStoragePath *cloudStoragePath;

/** List of words or phrases to search for. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2WordList *wordList;

@end


/**
 *  Combines all of the information about a DLP job.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DlpJob : GTLRObject

/** Time when the job was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Time when the job finished. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** A stream of errors encountered running the job. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2Error *> *errors;

/** Results from inspecting a data source. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InspectDataSourceDetails *inspectDetails;

/**
 *  If created by a job trigger, the resource name of the trigger that
 *  instantiated the job.
 */
@property(nonatomic, copy, nullable) NSString *jobTriggerName;

/** The server-assigned name. */
@property(nonatomic, copy, nullable) NSString *name;

/** Results from analyzing risk of a data source. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2AnalyzeDataSourceRiskDetails *riskDetails;

/** Time when the job started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  State of a job.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DlpJob_State_Active The job is
 *        currently accepting findings via hybridInspect. A hybrid job in ACTIVE
 *        state may continue to have findings added to it through the calling of
 *        hybridInspect. After the job has finished no more calls to
 *        hybridInspect may be made. ACTIVE jobs can transition to DONE. (Value:
 *        "ACTIVE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DlpJob_State_Canceled The job was
 *        canceled before it could be completed. (Value: "CANCELED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DlpJob_State_Done The job is no longer
 *        running. (Value: "DONE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DlpJob_State_Failed The job had an
 *        error and did not complete. (Value: "FAILED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DlpJob_State_JobStateUnspecified
 *        Unused. (Value: "JOB_STATE_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DlpJob_State_Pending The job has not
 *        yet started. (Value: "PENDING")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DlpJob_State_Running The job is
 *        currently running. Once a job has finished it will transition to
 *        FAILED or DONE. (Value: "RUNNING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  The type of job.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DlpJob_Type_DlpJobTypeUnspecified
 *        Defaults to INSPECT_JOB. (Value: "DLP_JOB_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DlpJob_Type_InspectJob The job
 *        inspected Google Cloud for sensitive data. (Value: "INSPECT_JOB")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2DlpJob_Type_RiskAnalysisJob The job
 *        executed a Risk Analysis computation. (Value: "RISK_ANALYSIS_JOB")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Location of a finding within a document.
 */
@interface GTLRDLP_GooglePrivacyDlpV2DocumentLocation : GTLRObject

/**
 *  Offset of the line, from the beginning of the file, where the finding is
 *  located.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fileOffset;

@end


/**
 *  An entity in a dataset is a field or set of fields that correspond to a
 *  single person. For example, in medical records the `EntityId` might be a
 *  patient identifier, or for financial records it might be an account
 *  identifier. This message is used when generalizations or analysis must take
 *  into account that multiple rows correspond to the same entity.
 */
@interface GTLRDLP_GooglePrivacyDlpV2EntityId : GTLRObject

/** Composite key indicating which field contains the entity identifier. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *field;

@end


/**
 *  Details information about an error encountered during job execution or the
 *  results of an unsuccessful activation of the JobTrigger.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Error : GTLRObject

/** Detailed error codes and messages. */
@property(nonatomic, strong, nullable) GTLRDLP_GoogleRpcStatus *details;

/** The times the error occurred. */
@property(nonatomic, strong, nullable) NSArray<GTLRDateTime *> *timestamps;

@end


/**
 *  The rule to exclude findings based on a hotword. For record inspection of
 *  tables, column names are considered hotwords. An example of this is to
 *  exclude a finding if a BigQuery column matches a specific pattern.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ExcludeByHotword : GTLRObject

/** Regular expression pattern defining what qualifies as a hotword. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Regex *hotwordRegex;

/**
 *  Range of characters within which the entire hotword must reside. The total
 *  length of the window cannot exceed 1000 characters. The windowBefore
 *  property in proximity should be set to 1 if the hotword needs to be included
 *  in a column header.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Proximity *proximity;

@end


/**
 *  List of excluded infoTypes.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ExcludeInfoTypes : GTLRObject

/**
 *  InfoType list in ExclusionRule rule drops a finding when it overlaps or
 *  contained within with a finding of an infoType from this list. For example,
 *  for `InspectionRuleSet.info_types` containing "PHONE_NUMBER"` and
 *  `exclusion_rule` containing `exclude_info_types.info_types` with
 *  "EMAIL_ADDRESS" the phone number findings are dropped if they overlap with
 *  EMAIL_ADDRESS finding. That leads to "555-222-2222\@example.org" to generate
 *  only a single finding, namely email address.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2InfoType *> *infoTypes;

@end


/**
 *  The rule that specifies conditions when findings of infoTypes specified in
 *  `InspectionRuleSet` are removed from results.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ExclusionRule : GTLRObject

/** Dictionary which defines the rule. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Dictionary *dictionary;

/**
 *  Drop if the hotword rule is contained in the proximate context. For tabular
 *  data, the context includes the column name.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ExcludeByHotword *excludeByHotword;

/** Set of infoTypes for which findings would affect this rule. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ExcludeInfoTypes *excludeInfoTypes;

/**
 *  How the rule is applied, see MatchingType documentation for details.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ExclusionRule_MatchingType_MatchingTypeFullMatch
 *        Full match. - Dictionary: join of Dictionary results matched complete
 *        finding quote - Regex: all regex matches fill a finding quote start to
 *        end - Exclude info type: completely inside affecting info types
 *        findings (Value: "MATCHING_TYPE_FULL_MATCH")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ExclusionRule_MatchingType_MatchingTypeInverseMatch
 *        Inverse match. - Dictionary: no tokens in the finding match the
 *        dictionary - Regex: finding doesn't match the regex - Exclude info
 *        type: no intersection with affecting info types findings (Value:
 *        "MATCHING_TYPE_INVERSE_MATCH")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ExclusionRule_MatchingType_MatchingTypePartialMatch
 *        Partial match. - Dictionary: at least one of the tokens in the finding
 *        matches - Regex: substring of the finding matches - Exclude info type:
 *        intersects with affecting info types findings (Value:
 *        "MATCHING_TYPE_PARTIAL_MATCH")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2ExclusionRule_MatchingType_MatchingTypeUnspecified
 *        Invalid. (Value: "MATCHING_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *matchingType;

/** Regular expression which defines the rule. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Regex *regex;

@end


/**
 *  If set, the detailed data profiles will be persisted to the location of your
 *  choice whenever updated.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Export : GTLRObject

/**
 *  Store all table and column profiles in an existing table or a new table in
 *  an existing dataset. Each re-generation will result in a new row in
 *  BigQuery.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2BigQueryTable *profileTable;

@end


/**
 *  An expression, consisting of an operator and conditions.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Expressions : GTLRObject

/** Conditions to apply to the expression. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Conditions *conditions;

/**
 *  The operator to apply to the result of conditions. Default and currently
 *  only supported value is `AND`.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Expressions_LogicalOperator_And
 *        Conditional AND (Value: "AND")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Expressions_LogicalOperator_LogicalOperatorUnspecified
 *        Unused (Value: "LOGICAL_OPERATOR_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logicalOperator;

@end


/**
 *  General identifier of a data field in a storage service.
 */
@interface GTLRDLP_GooglePrivacyDlpV2FieldId : GTLRObject

/** Name describing the field. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  The transformation to apply to the field.
 */
@interface GTLRDLP_GooglePrivacyDlpV2FieldTransformation : GTLRObject

/**
 *  Only apply the transformation if the condition evaluates to true for the
 *  given `RecordCondition`. The conditions are allowed to reference fields that
 *  are not used in the actual transformation. Example Use Cases: - Apply a
 *  different bucket transformation to an age column if the zip code column for
 *  the same record is within a specific range. - Redact a field if the date of
 *  birth field is greater than 85.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2RecordCondition *condition;

/**
 *  Required. Input field(s) to apply the transformation to. When you have
 *  columns that reference their position within a list, omit the index from the
 *  FieldId. FieldId name matching ignores the index. For example, instead of
 *  "contact.nums[0].type", use "contact.nums.type".
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2FieldId *> *fields;

/**
 *  Treat the contents of the field as free text, and selectively transform
 *  content that matches an `InfoType`.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InfoTypeTransformations *infoTypeTransformations;

/** Apply the transformation to the entire field. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2PrimitiveTransformation *primitiveTransformation;

@end


/**
 *  Set of files to scan.
 */
@interface GTLRDLP_GooglePrivacyDlpV2FileSet : GTLRObject

/**
 *  The regex-filtered set of files to scan. Exactly one of `url` or
 *  `regex_file_set` must be set.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2CloudStorageRegexFileSet *regexFileSet;

/**
 *  The Cloud Storage url of the file(s) to scan, in the format `gs:///`.
 *  Trailing wildcard in the path is allowed. If the url ends in a trailing
 *  slash, the bucket or directory represented by the url will be scanned
 *  non-recursively (content in sub-directories will not be scanned). This means
 *  that `gs://mybucket/` is equivalent to `gs://mybucket/ *`, and
 *  `gs://mybucket/directory/` is equivalent to `gs://mybucket/directory/ *`.
 *  Exactly one of `url` or `regex_file_set` must be set.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Represents a piece of potentially sensitive content.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Finding : GTLRObject

/** Timestamp when finding was detected. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The unique finding id. */
@property(nonatomic, copy, nullable) NSString *findingId;

/**
 *  The type of content that might have been found. Provided if `excluded_types`
 *  is false.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InfoType *infoType;

/** Time the job started that produced this finding. */
@property(nonatomic, strong, nullable) GTLRDateTime *jobCreateTime;

/** The job that stored the finding. */
@property(nonatomic, copy, nullable) NSString *jobName;

/**
 *  The labels associated with this `Finding`. Label keys must be between 1 and
 *  63 characters long and must conform to the following regular expression:
 *  `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63
 *  characters long and must conform to the regular expression
 *  `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated
 *  with a given finding. Examples: * `"environment" : "production"` *
 *  `"pipeline" : "etl"`
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Finding_Labels *labels;

/**
 *  Confidence of how likely it is that the `info_type` is correct.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Finding_Likelihood_LikelihoodUnspecified
 *        Default value; same as POSSIBLE. (Value: "LIKELIHOOD_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Finding_Likelihood_Likely Value
 *        "LIKELY"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Finding_Likelihood_Possible Some
 *        matching elements. (Value: "POSSIBLE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Finding_Likelihood_Unlikely Value
 *        "UNLIKELY"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Finding_Likelihood_VeryLikely Many
 *        matching elements. (Value: "VERY_LIKELY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Finding_Likelihood_VeryUnlikely Few
 *        matching elements. (Value: "VERY_UNLIKELY")
 */
@property(nonatomic, copy, nullable) NSString *likelihood;

/** Where the content was found. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Location *location;

/**
 *  Resource name in format
 *  projects/{project}/locations/{location}/findings/{finding} Populated only
 *  when viewing persisted findings.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The content that was found. Even if the content is not textual, it may be
 *  converted to a textual representation here. Provided if `include_quote` is
 *  true and the finding is less than or equal to 4096 bytes long. If the
 *  finding exceeds 4096 bytes in length, the quote may be omitted.
 */
@property(nonatomic, copy, nullable) NSString *quote;

/**
 *  Contains data parsed from quotes. Only populated if include_quote was set to
 *  true and a supported infoType was requested. Currently supported infoTypes:
 *  DATE, DATE_OF_BIRTH and TIME.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2QuoteInfo *quoteInfo;

/** The job that stored the finding. */
@property(nonatomic, copy, nullable) NSString *resourceName;

/** Job trigger name, if applicable, for this finding. */
@property(nonatomic, copy, nullable) NSString *triggerName;

@end


/**
 *  The labels associated with this `Finding`. Label keys must be between 1 and
 *  63 characters long and must conform to the following regular expression:
 *  `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be between 0 and 63
 *  characters long and must conform to the regular expression
 *  `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated
 *  with a given finding. Examples: * `"environment" : "production"` *
 *  `"pipeline" : "etl"`
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Finding_Labels : GTLRObject
@end


/**
 *  Configuration to control the number of findings returned for inspection.
 *  This is not used for de-identification or data profiling. When redacting
 *  sensitive data from images, finding limits don't apply. They can cause
 *  unexpected or inconsistent results, where only some data is redacted. Don't
 *  include finding limits in RedactImage requests. Otherwise, Cloud DLP returns
 *  an error.
 */
@interface GTLRDLP_GooglePrivacyDlpV2FindingLimits : GTLRObject

/** Configuration of findings limit given for specified infoTypes. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2InfoTypeLimit *> *maxFindingsPerInfoType;

/**
 *  Max number of findings that will be returned for each item scanned. When set
 *  within `InspectJobConfig`, the maximum returned is 2000 regardless if this
 *  is set higher. When set within `InspectContentRequest`, this field is
 *  ignored.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxFindingsPerItem;

/**
 *  Max number of findings that will be returned per request/job. When set
 *  within `InspectContentRequest`, the maximum returned is 2000 regardless if
 *  this is set higher.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxFindingsPerRequest;

@end


/**
 *  The request message for finishing a DLP hybrid job.
 */
@interface GTLRDLP_GooglePrivacyDlpV2FinishDlpJobRequest : GTLRObject
@end


/**
 *  Buckets values based on fixed size ranges. The Bucketing transformation can
 *  provide all of this functionality, but requires more configuration. This
 *  message is provided as a convenience to the user for simple bucketing
 *  strategies. The transformed value will be a hyphenated string of
 *  {lower_bound}-{upper_bound}. For example, if lower_bound = 10 and
 *  upper_bound = 20, all values that are within this bucket will be replaced
 *  with "10-20". This can be used on data of type: double, long. If the bound
 *  Value type differs from the type of data being transformed, we will first
 *  attempt converting the type of the data to be transformed to match the type
 *  of the bound before comparing. See
 *  https://cloud.google.com/dlp/docs/concepts-bucketing to learn more.
 */
@interface GTLRDLP_GooglePrivacyDlpV2FixedSizeBucketingConfig : GTLRObject

/**
 *  Required. Size of each bucket (except for minimum and maximum buckets). So
 *  if `lower_bound` = 10, `upper_bound` = 89, and `bucket_size` = 10, then the
 *  following buckets would be used: -10, 10-20, 20-30, 30-40, 40-50, 50-60,
 *  60-70, 70-80, 80-89, 89+. Precision up to 2 decimals works.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketSize;

/**
 *  Required. Lower bound value of buckets. All values less than `lower_bound`
 *  are grouped together into a single bucket; for example if `lower_bound` =
 *  10, then all values less than 10 are replaced with the value "-10".
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Value *lowerBound;

/**
 *  Required. Upper bound value of buckets. All values greater than upper_bound
 *  are grouped together into a single bucket; for example if `upper_bound` =
 *  89, then all values greater than 89 are replaced with the value "89+".
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Value *upperBound;

@end


/**
 *  The rule that adjusts the likelihood of findings within a certain proximity
 *  of hotwords.
 */
@interface GTLRDLP_GooglePrivacyDlpV2HotwordRule : GTLRObject

/** Regular expression pattern defining what qualifies as a hotword. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Regex *hotwordRegex;

/** Likelihood adjustment to apply to all matching findings. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2LikelihoodAdjustment *likelihoodAdjustment;

/**
 *  Range of characters within which the entire hotword must reside. The total
 *  length of the window cannot exceed 1000 characters. The finding itself will
 *  be included in the window, so that hotwords can be used to match substrings
 *  of the finding itself. Suppose you want Cloud DLP to promote the likelihood
 *  of the phone number regex "\\(\\d{3}\\) \\d{3}-\\d{4}" if the area code is
 *  known to be the area code of a company's office. In this case, use the
 *  hotword regex "\\(xxx\\)", where "xxx" is the area code in question. For
 *  tabular data, if you want to modify the likelihood of an entire column of
 *  findngs, see [Hotword example: Set the match likelihood of a table column]
 *  (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Proximity *proximity;

@end


/**
 *  An individual hybrid item to inspect. Will be stored temporarily during
 *  processing.
 */
@interface GTLRDLP_GooglePrivacyDlpV2HybridContentItem : GTLRObject

/** Supplementary information that will be added to each finding. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2HybridFindingDetails *findingDetails;

/** The item to inspect. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ContentItem *item;

@end


/**
 *  Populate to associate additional data with each finding.
 */
@interface GTLRDLP_GooglePrivacyDlpV2HybridFindingDetails : GTLRObject

/** Details about the container where the content being inspected is from. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Container *containerDetails;

/**
 *  Offset in bytes of the line, from the beginning of the file, where the
 *  finding is located. Populate if the item being scanned is only part of a
 *  bigger item, such as a shard of a file and you want to track the absolute
 *  position of the finding.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fileOffset;

/**
 *  Labels to represent user provided metadata about the data being inspected.
 *  If configured by the job, some key values may be required. The labels
 *  associated with `Finding`'s produced by hybrid inspection. Label keys must
 *  be between 1 and 63 characters long and must conform to the following
 *  regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be
 *  between 0 and 63 characters long and must conform to the regular expression
 *  `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated
 *  with a given finding. Examples: * `"environment" : "production"` *
 *  `"pipeline" : "etl"`
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2HybridFindingDetails_Labels *labels;

/**
 *  Offset of the row for tables. Populate if the row(s) being scanned are part
 *  of a bigger dataset and you want to keep track of their absolute position.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowOffset;

/**
 *  If the container is a table, additional information to make findings
 *  meaningful such as the columns that are primary keys. If not known ahead of
 *  time, can also be set within each inspect hybrid call and the two will be
 *  merged. Note that identifying_fields will only be stored to BigQuery, and
 *  only if the BigQuery action has been included.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2TableOptions *tableOptions;

@end


/**
 *  Labels to represent user provided metadata about the data being inspected.
 *  If configured by the job, some key values may be required. The labels
 *  associated with `Finding`'s produced by hybrid inspection. Label keys must
 *  be between 1 and 63 characters long and must conform to the following
 *  regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be
 *  between 0 and 63 characters long and must conform to the regular expression
 *  `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated
 *  with a given finding. Examples: * `"environment" : "production"` *
 *  `"pipeline" : "etl"`
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDLP_GooglePrivacyDlpV2HybridFindingDetails_Labels : GTLRObject
@end


/**
 *  Request to search for potentially sensitive info in a custom location.
 */
@interface GTLRDLP_GooglePrivacyDlpV2HybridInspectDlpJobRequest : GTLRObject

/** The item to inspect. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2HybridContentItem *hybridItem;

@end


/**
 *  Request to search for potentially sensitive info in a custom location.
 */
@interface GTLRDLP_GooglePrivacyDlpV2HybridInspectJobTriggerRequest : GTLRObject

/** The item to inspect. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2HybridContentItem *hybridItem;

@end


/**
 *  Quota exceeded errors will be thrown once quota has been met.
 */
@interface GTLRDLP_GooglePrivacyDlpV2HybridInspectResponse : GTLRObject
@end


/**
 *  Statistics related to processing hybrid inspect requests.
 */
@interface GTLRDLP_GooglePrivacyDlpV2HybridInspectStatistics : GTLRObject

/**
 *  The number of hybrid inspection requests aborted because the job ran out of
 *  quota or was ended before they could be processed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *abortedCount;

/**
 *  The number of hybrid requests currently being processed. Only populated when
 *  called via method `getDlpJob`. A burst of traffic may cause hybrid inspect
 *  requests to be enqueued. Processing will take place as quickly as possible,
 *  but resource limitations may impact how long a request is enqueued for.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pendingCount;

/**
 *  The number of hybrid inspection requests processed within this job.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *processedCount;

@end


/**
 *  Configuration to control jobs where the content being inspected is outside
 *  of Google Cloud Platform.
 */
@interface GTLRDLP_GooglePrivacyDlpV2HybridOptions : GTLRObject

/**
 *  A short description of where the data is coming from. Will be stored once in
 *  the job. 256 max length.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  To organize findings, these labels will be added to each finding. Label keys
 *  must be between 1 and 63 characters long and must conform to the following
 *  regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be
 *  between 0 and 63 characters long and must conform to the regular expression
 *  `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated
 *  with a given finding. Examples: * `"environment" : "production"` *
 *  `"pipeline" : "etl"`
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2HybridOptions_Labels *labels;

/**
 *  These are labels that each inspection request must include within their
 *  'finding_labels' map. Request may contain others, but any missing one of
 *  these will be rejected. Label keys must be between 1 and 63 characters long
 *  and must conform to the following regular expression:
 *  `[a-z]([-a-z0-9]*[a-z0-9])?`. No more than 10 keys can be required.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requiredFindingLabelKeys;

/**
 *  If the container is a table, additional information to make findings
 *  meaningful such as the columns that are primary keys.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2TableOptions *tableOptions;

@end


/**
 *  To organize findings, these labels will be added to each finding. Label keys
 *  must be between 1 and 63 characters long and must conform to the following
 *  regular expression: `[a-z]([-a-z0-9]*[a-z0-9])?`. Label values must be
 *  between 0 and 63 characters long and must conform to the regular expression
 *  `([a-z]([-a-z0-9]*[a-z0-9])?)?`. No more than 10 labels can be associated
 *  with a given finding. Examples: * `"environment" : "production"` *
 *  `"pipeline" : "etl"`
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDLP_GooglePrivacyDlpV2HybridOptions_Labels : GTLRObject
@end


/**
 *  Location of the finding within an image.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ImageLocation : GTLRObject

/**
 *  Bounding boxes locating the pixels within the image containing the finding.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2BoundingBox *> *boundingBoxes;

@end


/**
 *  Configuration for determining how redaction of images should occur.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ImageRedactionConfig : GTLRObject

/**
 *  Only one per info_type should be provided per request. If not specified, and
 *  redact_all_text is false, the DLP API will redact all text that it matches
 *  against all info_types that are found, but not specified in another
 *  ImageRedactionConfig.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InfoType *infoType;

/**
 *  If true, all text found in the image, regardless whether it matches an
 *  info_type, is redacted. Only one should be provided.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *redactAllText;

/**
 *  The color to use when redacting content from an image. If not specified, the
 *  default is black.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Color *redactionColor;

@end


/**
 *  Configuration for determining how redaction of images should occur.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ImageTransformation : GTLRObject

/**
 *  Apply transformation to all findings not specified in other
 *  ImageTransformation's selected_info_types. Only one instance is allowed
 *  within the ImageTransformations message.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2AllInfoTypes *allInfoTypes;

/**
 *  Apply transformation to all text that doesn't match an infoType. Only one
 *  instance is allowed within the ImageTransformations message.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2AllText *allText;

/**
 *  The color to use when redacting content from an image. If not specified, the
 *  default is black.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Color *redactionColor;

/** Apply transformation to the selected info_types. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2SelectedInfoTypes *selectedInfoTypes;

@end


/**
 *  A type of transformation that is applied over images.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ImageTransformations : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2ImageTransformation *> *transforms;

@end


/**
 *  Type of information detected by the API.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InfoType : GTLRObject

/**
 *  Name of the information type. Either a name of your choosing when creating a
 *  CustomInfoType, or one of the names listed at
 *  https://cloud.google.com/dlp/docs/infotypes-reference when specifying a
 *  built-in type. When sending Cloud DLP results to Data Catalog, infoType
 *  names should conform to the pattern `[A-Za-z0-9$_-]{1,64}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Optional version name for this InfoType. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Classification of infoTypes to organize them according to geographic
 *  location, industry, and data type.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InfoTypeCategory : GTLRObject

/**
 *  The group of relevant businesses where this infoType is commonly used
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_IndustryCategory_Finance
 *        The infoType is typically used in the finance industry. (Value:
 *        "FINANCE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_IndustryCategory_Health
 *        The infoType is typically used in the health industry. (Value:
 *        "HEALTH")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_IndustryCategory_IndustryUnspecified
 *        Unused industry (Value: "INDUSTRY_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_IndustryCategory_Telecommunications
 *        The infoType is typically used in the telecommunications industry.
 *        (Value: "TELECOMMUNICATIONS")
 */
@property(nonatomic, copy, nullable) NSString *industryCategory;

/**
 *  The region or country that issued the ID or document represented by the
 *  infoType.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Argentina
 *        The infoType is typically used in Argentina. (Value: "ARGENTINA")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Australia
 *        The infoType is typically used in Australia. (Value: "AUSTRALIA")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Belgium
 *        The infoType is typically used in Belgium. (Value: "BELGIUM")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Brazil
 *        The infoType is typically used in Brazil. (Value: "BRAZIL")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Canada
 *        The infoType is typically used in Canada. (Value: "CANADA")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Chile
 *        The infoType is typically used in Chile. (Value: "CHILE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_China
 *        The infoType is typically used in China. (Value: "CHINA")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Colombia
 *        The infoType is typically used in Colombia. (Value: "COLOMBIA")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Denmark
 *        The infoType is typically used in Denmark. (Value: "DENMARK")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Finland
 *        The infoType is typically used in Finland. (Value: "FINLAND")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_France
 *        The infoType is typically used in France. (Value: "FRANCE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Germany
 *        The infoType is typically used in Germany. (Value: "GERMANY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Global
 *        The infoType is not issued by or tied to a specific region, but is
 *        used almost everywhere. (Value: "GLOBAL")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_HongKong
 *        The infoType is typically used in Hong Kong. (Value: "HONG_KONG")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_India
 *        The infoType is typically used in India. (Value: "INDIA")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Indonesia
 *        The infoType is typically used in Indonesia. (Value: "INDONESIA")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Internal
 *        The infoType is typically used in Google internally. (Value:
 *        "INTERNAL")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Ireland
 *        The infoType is typically used in Ireland. (Value: "IRELAND")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Israel
 *        The infoType is typically used in Israel. (Value: "ISRAEL")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Italy
 *        The infoType is typically used in Italy. (Value: "ITALY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Japan
 *        The infoType is typically used in Japan. (Value: "JAPAN")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Korea
 *        The infoType is typically used in Korea. (Value: "KOREA")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_LocationUnspecified
 *        Unused location (Value: "LOCATION_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Mexico
 *        The infoType is typically used in Mexico. (Value: "MEXICO")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Norway
 *        The infoType is typically used in Norway. (Value: "NORWAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Paraguay
 *        The infoType is typically used in Paraguay. (Value: "PARAGUAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Peru
 *        The infoType is typically used in Peru. (Value: "PERU")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Poland
 *        The infoType is typically used in Poland. (Value: "POLAND")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Portugal
 *        The infoType is typically used in Portugal. (Value: "PORTUGAL")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Singapore
 *        The infoType is typically used in Singapore. (Value: "SINGAPORE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_SouthAfrica
 *        The infoType is typically used in South Africa. (Value:
 *        "SOUTH_AFRICA")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Spain
 *        The infoType is typically used in Spain. (Value: "SPAIN")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Sweden
 *        The infoType is typically used in Sweden. (Value: "SWEDEN")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Taiwan
 *        The infoType is typically used in Taiwan. (Value: "TAIWAN")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Thailand
 *        The infoType is typically used in Thailand. (Value: "THAILAND")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_TheNetherlands
 *        The infoType is typically used in the Netherlands. (Value:
 *        "THE_NETHERLANDS")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Turkey
 *        The infoType is typically used in Turkey. (Value: "TURKEY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_UnitedKingdom
 *        The infoType is typically used in the United Kingdom. (Value:
 *        "UNITED_KINGDOM")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_UnitedStates
 *        The infoType is typically used in the United States. (Value:
 *        "UNITED_STATES")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Uruguay
 *        The infoType is typically used in Uruguay. (Value: "URUGUAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_LocationCategory_Venezuela
 *        The infoType is typically used in Venezuela. (Value: "VENEZUELA")
 */
@property(nonatomic, copy, nullable) NSString *locationCategory;

/**
 *  The class of identifiers where this infoType belongs
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_TypeCategory_ContextualInformation
 *        Information that is not sensitive on its own, but provides details
 *        about the circumstances surrounding an entity or an event. (Value:
 *        "CONTEXTUAL_INFORMATION")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_TypeCategory_Credential
 *        Confidential or secret information, for example, a password. (Value:
 *        "CREDENTIAL")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_TypeCategory_Demographic
 *        Attributes that can partially identify someone, especially in
 *        combination with other attributes, like age, height, and gender.
 *        (Value: "DEMOGRAPHIC")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_TypeCategory_Document
 *        A document, for example, a resume or source code. (Value: "DOCUMENT")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_TypeCategory_GovernmentId
 *        An identification document issued by a government. (Value:
 *        "GOVERNMENT_ID")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_TypeCategory_Pii
 *        Personally identifiable information, for example, a name or phone
 *        number (Value: "PII")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_TypeCategory_Spii
 *        Personally identifiable information that is especially sensitive, for
 *        example, a passport number. (Value: "SPII")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InfoTypeCategory_TypeCategory_TypeUnspecified
 *        Unused type (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *typeCategory;

@end


/**
 *  InfoType description.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InfoTypeDescription : GTLRObject

/** The category of the infoType. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2InfoTypeCategory *> *categories;

/**
 *  Description of the infotype. Translated when language is provided in the
 *  request.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Human readable form of the infoType name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Internal name of the infoType. */
@property(nonatomic, copy, nullable) NSString *name;

/** The default sensitivity of the infoType. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2SensitivityScore *sensitivityScore;

/** Which parts of the API supports this InfoType. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedBy;

/** A list of available versions for the infotype. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2VersionDescription *> *versions;

@end


/**
 *  Max findings configuration per infoType, per content item or long running
 *  DlpJob.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InfoTypeLimit : GTLRObject

/**
 *  Type of information the findings limit applies to. Only one limit per
 *  info_type should be provided. If InfoTypeLimit does not have an info_type,
 *  the DLP API applies the limit against all info_types that are found but not
 *  specified in another InfoTypeLimit.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InfoType *infoType;

/**
 *  Max findings limit for the given infoType.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxFindings;

@end


/**
 *  Statistics regarding a specific InfoType.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InfoTypeStats : GTLRObject

/**
 *  Number of findings for this infoType.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/** The type of finding this stat is for. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InfoType *infoType;

@end


/**
 *  The infoType details for this column.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InfoTypeSummary : GTLRObject

/**
 *  Not populated for predicted infotypes.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedPrevalence;

/** The infoType. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InfoType *infoType;

@end


/**
 *  A transformation to apply to text that is identified as a specific
 *  info_type.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InfoTypeTransformation : GTLRObject

/**
 *  InfoTypes to apply the transformation to. An empty list will cause this
 *  transformation to apply to all findings that correspond to infoTypes that
 *  were requested in `InspectConfig`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2InfoType *> *infoTypes;

/** Required. Primitive transformation to apply to the infoType. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2PrimitiveTransformation *primitiveTransformation;

@end


/**
 *  A type of transformation that will scan unstructured text and apply various
 *  `PrimitiveTransformation`s to each finding, where the transformation is
 *  applied to only values that were identified as a specific info_type.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InfoTypeTransformations : GTLRObject

/**
 *  Required. Transformation for each infoType. Cannot specify more than one for
 *  a given infoType.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2InfoTypeTransformation *> *transformations;

@end


/**
 *  Configuration description of the scanning process. When used with
 *  redactContent only info_types and min_likelihood are currently used.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InspectConfig : GTLRObject

/** Deprecated and unused. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *contentOptions;

/**
 *  CustomInfoTypes provided by the user. See
 *  https://cloud.google.com/dlp/docs/creating-custom-infotypes to learn more.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2CustomInfoType *> *customInfoTypes;

/**
 *  When true, excludes type information of the findings. This is not used for
 *  data profiling.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *excludeInfoTypes;

/**
 *  When true, a contextual quote from the data that triggered a finding is
 *  included in the response; see Finding.quote. This is not used for data
 *  profiling.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeQuote;

/**
 *  Restricts what info_types to look for. The values must correspond to
 *  InfoType values returned by ListInfoTypes or listed at
 *  https://cloud.google.com/dlp/docs/infotypes-reference. When no InfoTypes or
 *  CustomInfoTypes are specified in a request, the system may automatically
 *  choose what detectors to run. By default this may be all types, but may
 *  change over time as detectors are updated. If you need precise control and
 *  predictability as to what detectors are run you should specify specific
 *  InfoTypes listed in the reference, otherwise a default list will be used,
 *  which may change over time.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2InfoType *> *infoTypes;

/**
 *  Configuration to control the number of findings returned. This is not used
 *  for data profiling. When redacting sensitive data from images, finding
 *  limits don't apply. They can cause unexpected or inconsistent results, where
 *  only some data is redacted. Don't include finding limits in RedactImage
 *  requests. Otherwise, Cloud DLP returns an error.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FindingLimits *limits;

/**
 *  Only returns findings equal or above this threshold. The default is
 *  POSSIBLE. See https://cloud.google.com/dlp/docs/likelihood to learn more.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InspectConfig_MinLikelihood_LikelihoodUnspecified
 *        Default value; same as POSSIBLE. (Value: "LIKELIHOOD_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InspectConfig_MinLikelihood_Likely
 *        Value "LIKELY"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InspectConfig_MinLikelihood_Possible
 *        Some matching elements. (Value: "POSSIBLE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InspectConfig_MinLikelihood_Unlikely
 *        Value "UNLIKELY"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InspectConfig_MinLikelihood_VeryLikely
 *        Many matching elements. (Value: "VERY_LIKELY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2InspectConfig_MinLikelihood_VeryUnlikely
 *        Few matching elements. (Value: "VERY_UNLIKELY")
 */
@property(nonatomic, copy, nullable) NSString *minLikelihood;

/**
 *  Set of rules to apply to the findings for this InspectConfig. Exclusion
 *  rules, contained in the set are executed in the end, other rules are
 *  executed in the order they are specified for each info type.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2InspectionRuleSet *> *ruleSet;

@end


/**
 *  Request to search for potentially sensitive info in a ContentItem.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InspectContentRequest : GTLRObject

/**
 *  Configuration for the inspector. What specified here will override the
 *  template referenced by the inspect_template_name argument.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InspectConfig *inspectConfig;

/**
 *  Template to use. Any configuration directly specified in inspect_config will
 *  override those set in the template. Singular fields that are set in this
 *  request will replace their corresponding fields in the template. Repeated
 *  fields are appended. Singular sub-messages and groups are recursively
 *  merged.
 */
@property(nonatomic, copy, nullable) NSString *inspectTemplateName;

/** The item to inspect. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ContentItem *item;

/** Deprecated. This field has no effect. */
@property(nonatomic, copy, nullable) NSString *locationId;

@end


/**
 *  Results of inspecting an item.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InspectContentResponse : GTLRObject

/** The findings. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InspectResult *result;

@end


/**
 *  The results of an inspect DataSource job.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InspectDataSourceDetails : GTLRObject

/** The configuration used for this job. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2RequestedOptions *requestedOptions;

/** A summary of the outcome of this inspection job. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Result *result;

@end


/**
 *  A single inspection rule to be applied to infoTypes, specified in
 *  `InspectionRuleSet`.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InspectionRule : GTLRObject

/** Exclusion rule. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ExclusionRule *exclusionRule;

/** Hotword-based detection rule. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2HotwordRule *hotwordRule;

@end


/**
 *  Rule set for modifying a set of infoTypes to alter behavior under certain
 *  circumstances, depending on the specific details of the rules within the
 *  set.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InspectionRuleSet : GTLRObject

/** List of infoTypes this rule set is applied to. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2InfoType *> *infoTypes;

/**
 *  Set of rules to be applied to infoTypes. The rules are applied in order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2InspectionRule *> *rules;

@end


/**
 *  Controls what and how to inspect for findings.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InspectJobConfig : GTLRObject

/** Actions to execute at the completion of the job. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2Action *> *actions;

/** How and what to scan for. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InspectConfig *inspectConfig;

/**
 *  If provided, will be used as the default for all values in InspectConfig.
 *  `inspect_config` will be merged into the values persisted as part of the
 *  template.
 */
@property(nonatomic, copy, nullable) NSString *inspectTemplateName;

/** The data to scan. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2StorageConfig *storageConfig;

@end


/**
 *  All the findings for a single scanned item.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InspectResult : GTLRObject

/** List of findings for an item. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2Finding *> *findings;

/**
 *  If true, then this item might have more findings than were returned, and the
 *  findings returned are an arbitrary subset of all findings. The findings list
 *  might be truncated because the input items were too large, or because the
 *  server reached the maximum amount of resources allowed for a single API
 *  call. For best results, divide the input into smaller batches.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *findingsTruncated;

@end


/**
 *  The inspectTemplate contains a configuration (set of types of sensitive data
 *  to be detected) to be used anywhere you otherwise would normally specify
 *  InspectConfig. See https://cloud.google.com/dlp/docs/concepts-templates to
 *  learn more.
 */
@interface GTLRDLP_GooglePrivacyDlpV2InspectTemplate : GTLRObject

/** Output only. The creation timestamp of an inspectTemplate. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Short description (max 256 chars).
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Display name (max 256 chars). */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The core content of the template. Configuration of the scanning process.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InspectConfig *inspectConfig;

/**
 *  Output only. The template name. The template will have one of the following
 *  formats: `projects/PROJECT_ID/inspectTemplates/TEMPLATE_ID` OR
 *  `organizations/ORGANIZATION_ID/inspectTemplates/TEMPLATE_ID`;
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The last update timestamp of an inspectTemplate. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Sends an email when the job completes. The email goes to IAM project owners
 *  and technical [Essential
 *  Contacts](https://cloud.google.com/resource-manager/docs/managing-notification-contacts).
 */
@interface GTLRDLP_GooglePrivacyDlpV2JobNotificationEmails : GTLRObject
@end


/**
 *  Contains a configuration to make dlp api calls on a repeating basis. See
 *  https://cloud.google.com/dlp/docs/concepts-job-triggers to learn more.
 */
@interface GTLRDLP_GooglePrivacyDlpV2JobTrigger : GTLRObject

/** Output only. The creation timestamp of a triggeredJob. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  User provided description (max 256 chars)
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Display name (max 100 chars) */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. A stream of errors encountered when the trigger was activated.
 *  Repeated errors may result in the JobTrigger automatically being paused.
 *  Will return the last 100 errors. Whenever the JobTrigger is modified this
 *  list will be cleared.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2Error *> *errors;

/** For inspect jobs, a snapshot of the configuration. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InspectJobConfig *inspectJob;

/** Output only. The timestamp of the last time this trigger executed. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastRunTime;

/**
 *  Unique resource name for the triggeredJob, assigned by the service when the
 *  triggeredJob is created, for example
 *  `projects/dlp-test-project/jobTriggers/53234423`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A status for this trigger.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2JobTrigger_Status_Cancelled Trigger is
 *        cancelled and can not be resumed. (Value: "CANCELLED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2JobTrigger_Status_Healthy Trigger is
 *        healthy. (Value: "HEALTHY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2JobTrigger_Status_Paused Trigger is
 *        temporarily paused. (Value: "PAUSED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2JobTrigger_Status_StatusUnspecified
 *        Unused. (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  A list of triggers which will be OR'ed together. Only one in the list needs
 *  to trigger for a job to be started. The list may contain only a single
 *  Schedule trigger and must have at least one object.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2Trigger *> *triggers;

/** Output only. The last update timestamp of a triggeredJob. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  k-anonymity metric, used for analysis of reidentification risk.
 */
@interface GTLRDLP_GooglePrivacyDlpV2KAnonymityConfig : GTLRObject

/**
 *  Message indicating that multiple rows might be associated to a single
 *  individual. If the same entity_id is associated to multiple quasi-identifier
 *  tuples over distinct rows, we consider the entire collection of tuples as
 *  the composite quasi-identifier. This collection is a multiset: the order in
 *  which the different tuples appear in the dataset is ignored, but their
 *  frequency is taken into account. Important note: a maximum of 1000 rows can
 *  be associated to a single entity ID. If more rows are associated with the
 *  same entity ID, some might be ignored.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2EntityId *entityId;

/**
 *  Set of fields to compute k-anonymity over. When multiple fields are
 *  specified, they are considered a single composite key. Structs and repeated
 *  data types are not supported; however, nested fields are supported so long
 *  as they are not structs themselves or nested within a repeated field.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2FieldId *> *quasiIds;

@end


/**
 *  The set of columns' values that share the same ldiversity value
 */
@interface GTLRDLP_GooglePrivacyDlpV2KAnonymityEquivalenceClass : GTLRObject

/**
 *  Size of the equivalence class, for example number of rows with the above set
 *  of values.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *equivalenceClassSize;

/**
 *  Set of values defining the equivalence class. One value per quasi-identifier
 *  column in the original KAnonymity metric message. The order is always the
 *  same as the original request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2Value *> *quasiIdsValues;

@end


/**
 *  Histogram of k-anonymity equivalence classes.
 */
@interface GTLRDLP_GooglePrivacyDlpV2KAnonymityHistogramBucket : GTLRObject

/**
 *  Total number of equivalence classes in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketSize;

/**
 *  Total number of distinct equivalence classes in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketValueCount;

/**
 *  Sample of equivalence classes in this bucket. The total number of classes
 *  returned per bucket is capped at 20.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2KAnonymityEquivalenceClass *> *bucketValues;

/**
 *  Lower bound on the size of the equivalence classes in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *equivalenceClassSizeLowerBound;

/**
 *  Upper bound on the size of the equivalence classes in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *equivalenceClassSizeUpperBound;

@end


/**
 *  Result of the k-anonymity computation.
 */
@interface GTLRDLP_GooglePrivacyDlpV2KAnonymityResult : GTLRObject

/** Histogram of k-anonymity equivalence classes. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2KAnonymityHistogramBucket *> *equivalenceClassHistogramBuckets;

@end


/**
 *  A unique identifier for a Datastore entity. If a key's partition ID or any
 *  of its path kinds or names are reserved/read-only, the key is
 *  reserved/read-only. A reserved/read-only key is forbidden in certain
 *  documented contexts.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Key : GTLRObject

/**
 *  Entities are partitioned into subsets, currently identified by a project ID
 *  and namespace ID. Queries are scoped to a single partition.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2PartitionId *partitionId;

/**
 *  The entity path. An entity path consists of one or more elements composed of
 *  a kind and a string or numerical identifier, which identify entities. The
 *  first element identifies a _root entity_, the second element identifies a
 *  _child_ of the root entity, the third element identifies a child of the
 *  second entity, and so forth. The entities identified by all prefixes of the
 *  path are called the element's _ancestors_. A path can never be empty, and a
 *  path can have at most 100 elements.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2PathElement *> *path;

@end


/**
 *  A representation of a Datastore kind.
 */
@interface GTLRDLP_GooglePrivacyDlpV2KindExpression : GTLRObject

/** The name of the kind. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Reidentifiability metric. This corresponds to a risk model similar to what
 *  is called "journalist risk" in the literature, except the attack dataset is
 *  statistically modeled instead of being perfectly known. This can be done
 *  using publicly available data (like the US Census), or using a custom
 *  statistical model (indicated as one or several BigQuery tables), or by
 *  extrapolating from the distribution of values in the input dataset.
 */
@interface GTLRDLP_GooglePrivacyDlpV2KMapEstimationConfig : GTLRObject

/**
 *  Several auxiliary tables can be used in the analysis. Each custom_tag used
 *  to tag a quasi-identifiers column must appear in exactly one column of one
 *  auxiliary table.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2AuxiliaryTable *> *auxiliaryTables;

/**
 *  Required. Fields considered to be quasi-identifiers. No two columns can have
 *  the same tag.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2TaggedField *> *quasiIds;

/**
 *  ISO 3166-1 alpha-2 region code to use in the statistical modeling. Set if no
 *  column is tagged with a region-specific InfoType (like US_ZIP_5) or a region
 *  code.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

@end


/**
 *  A KMapEstimationHistogramBucket message with the following values:
 *  min_anonymity: 3 max_anonymity: 5 frequency: 42 means that there are 42
 *  records whose quasi-identifier values correspond to 3, 4 or 5 people in the
 *  overlying population. An important particular case is when min_anonymity =
 *  max_anonymity = 1: the frequency field then corresponds to the number of
 *  uniquely identifiable records.
 */
@interface GTLRDLP_GooglePrivacyDlpV2KMapEstimationHistogramBucket : GTLRObject

/**
 *  Number of records within these anonymity bounds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketSize;

/**
 *  Total number of distinct quasi-identifier tuple values in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketValueCount;

/**
 *  Sample of quasi-identifier tuple values in this bucket. The total number of
 *  classes returned per bucket is capped at 20.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2KMapEstimationQuasiIdValues *> *bucketValues;

/**
 *  Always greater than or equal to min_anonymity.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxAnonymity;

/**
 *  Always positive.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minAnonymity;

@end


/**
 *  A tuple of values for the quasi-identifier columns.
 */
@interface GTLRDLP_GooglePrivacyDlpV2KMapEstimationQuasiIdValues : GTLRObject

/**
 *  The estimated anonymity for these quasi-identifier values.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedAnonymity;

/** The quasi-identifier values. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2Value *> *quasiIdsValues;

@end


/**
 *  Result of the reidentifiability analysis. Note that these results are an
 *  estimation, not exact values.
 */
@interface GTLRDLP_GooglePrivacyDlpV2KMapEstimationResult : GTLRObject

/**
 *  The intervals [min_anonymity, max_anonymity] do not overlap. If a value
 *  doesn't correspond to any such interval, the associated frequency is zero.
 *  For example, the following records: {min_anonymity: 1, max_anonymity: 1,
 *  frequency: 17} {min_anonymity: 2, max_anonymity: 3, frequency: 42}
 *  {min_anonymity: 5, max_anonymity: 10, frequency: 99} mean that there are no
 *  record with an estimated anonymity of 4, 5, or larger than 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2KMapEstimationHistogramBucket *> *kMapEstimationHistogram;

@end


/**
 *  Include to use an existing data crypto key wrapped by KMS. The wrapped key
 *  must be a 128-, 192-, or 256-bit key. Authorization requires the following
 *  IAM permissions when sending a request to perform a crypto transformation
 *  using a KMS-wrapped crypto key: dlp.kms.encrypt For more information, see
 *  [Creating a wrapped key]
 *  (https://cloud.google.com/dlp/docs/create-wrapped-key). Note: When you use
 *  Cloud KMS for cryptographic operations, [charges
 *  apply](https://cloud.google.com/kms/pricing).
 */
@interface GTLRDLP_GooglePrivacyDlpV2KmsWrappedCryptoKey : GTLRObject

/** Required. The resource name of the KMS CryptoKey to use for unwrapping. */
@property(nonatomic, copy, nullable) NSString *cryptoKeyName;

/**
 *  Required. The wrapped data crypto key.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *wrappedKey;

@end


/**
 *  Configuration for a custom dictionary created from a data source of any size
 *  up to the maximum size defined in the
 *  [limits](https://cloud.google.com/dlp/limits) page. The artifacts of
 *  dictionary creation are stored in the specified Cloud Storage location.
 *  Consider using `CustomInfoType.Dictionary` for smaller dictionaries that
 *  satisfy the size requirements.
 */
@interface GTLRDLP_GooglePrivacyDlpV2LargeCustomDictionaryConfig : GTLRObject

/**
 *  Field in a BigQuery table where each cell represents a dictionary phrase.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2BigQueryField *bigQueryField;

/** Set of files containing newline-delimited lists of dictionary phrases. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2CloudStorageFileSet *cloudStorageFileSet;

/**
 *  Location to store dictionary artifacts in Cloud Storage. These files will
 *  only be accessible by project owners and the DLP API. If any of these
 *  artifacts are modified, the dictionary is considered invalid and can no
 *  longer be used.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2CloudStoragePath *outputPath;

@end


/**
 *  Summary statistics of a custom dictionary.
 */
@interface GTLRDLP_GooglePrivacyDlpV2LargeCustomDictionaryStats : GTLRObject

/**
 *  Approximate number of distinct phrases in the dictionary.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *approxNumPhrases;

@end


/**
 *  l-diversity metric, used for analysis of reidentification risk.
 */
@interface GTLRDLP_GooglePrivacyDlpV2LDiversityConfig : GTLRObject

/**
 *  Set of quasi-identifiers indicating how equivalence classes are defined for
 *  the l-diversity computation. When multiple fields are specified, they are
 *  considered a single composite key.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2FieldId *> *quasiIds;

/** Sensitive field for computing the l-value. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *sensitiveAttribute;

@end


/**
 *  The set of columns' values that share the same ldiversity value.
 */
@interface GTLRDLP_GooglePrivacyDlpV2LDiversityEquivalenceClass : GTLRObject

/**
 *  Size of the k-anonymity equivalence class.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *equivalenceClassSize;

/**
 *  Number of distinct sensitive values in this equivalence class.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numDistinctSensitiveValues;

/**
 *  Quasi-identifier values defining the k-anonymity equivalence class. The
 *  order is always the same as the original request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2Value *> *quasiIdsValues;

/** Estimated frequencies of top sensitive values. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2ValueFrequency *> *topSensitiveValues;

@end


/**
 *  Histogram of l-diversity equivalence class sensitive value frequencies.
 */
@interface GTLRDLP_GooglePrivacyDlpV2LDiversityHistogramBucket : GTLRObject

/**
 *  Total number of equivalence classes in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketSize;

/**
 *  Total number of distinct equivalence classes in this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bucketValueCount;

/**
 *  Sample of equivalence classes in this bucket. The total number of classes
 *  returned per bucket is capped at 20.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2LDiversityEquivalenceClass *> *bucketValues;

/**
 *  Lower bound on the sensitive value frequencies of the equivalence classes in
 *  this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sensitiveValueFrequencyLowerBound;

/**
 *  Upper bound on the sensitive value frequencies of the equivalence classes in
 *  this bucket.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sensitiveValueFrequencyUpperBound;

@end


/**
 *  Result of the l-diversity computation.
 */
@interface GTLRDLP_GooglePrivacyDlpV2LDiversityResult : GTLRObject

/** Histogram of l-diversity equivalence class sensitive value frequencies. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2LDiversityHistogramBucket *> *sensitiveValueFrequencyHistogramBuckets;

@end


/**
 *  Skips the data without modifying it if the requested transformation would
 *  cause an error. For example, if a `DateShift` transformation were applied an
 *  an IP address, this mode would leave the IP address unchanged in the
 *  response.
 */
@interface GTLRDLP_GooglePrivacyDlpV2LeaveUntransformed : GTLRObject
@end


/**
 *  Message for specifying an adjustment to the likelihood of a finding as part
 *  of a detection rule.
 */
@interface GTLRDLP_GooglePrivacyDlpV2LikelihoodAdjustment : GTLRObject

/**
 *  Set the likelihood of a finding to a fixed value.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2LikelihoodAdjustment_FixedLikelihood_LikelihoodUnspecified
 *        Default value; same as POSSIBLE. (Value: "LIKELIHOOD_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2LikelihoodAdjustment_FixedLikelihood_Likely
 *        Value "LIKELY"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2LikelihoodAdjustment_FixedLikelihood_Possible
 *        Some matching elements. (Value: "POSSIBLE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2LikelihoodAdjustment_FixedLikelihood_Unlikely
 *        Value "UNLIKELY"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2LikelihoodAdjustment_FixedLikelihood_VeryLikely
 *        Many matching elements. (Value: "VERY_LIKELY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2LikelihoodAdjustment_FixedLikelihood_VeryUnlikely
 *        Few matching elements. (Value: "VERY_UNLIKELY")
 */
@property(nonatomic, copy, nullable) NSString *fixedLikelihood;

/**
 *  Increase or decrease the likelihood by the specified number of levels. For
 *  example, if a finding would be `POSSIBLE` without the detection rule and
 *  `relative_likelihood` is 1, then it is upgraded to `LIKELY`, while a value
 *  of -1 would downgrade it to `UNLIKELY`. Likelihood may never drop below
 *  `VERY_UNLIKELY` or exceed `VERY_LIKELY`, so applying an adjustment of 1
 *  followed by an adjustment of -1 when base likelihood is `VERY_LIKELY` will
 *  result in a final likelihood of `LIKELY`.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *relativeLikelihood;

@end


/**
 *  Response message for ListDeidentifyTemplates.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "deidentifyTemplates" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRDLP_GooglePrivacyDlpV2ListDeidentifyTemplatesResponse : GTLRCollectionObject

/**
 *  List of deidentify templates, up to page_size in
 *  ListDeidentifyTemplatesRequest.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2DeidentifyTemplate *> *deidentifyTemplates;

/**
 *  If the next page is available then the next page token to be used in
 *  following ListDeidentifyTemplates request.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for listing DLP jobs.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "jobs" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDLP_GooglePrivacyDlpV2ListDlpJobsResponse : GTLRCollectionObject

/**
 *  A list of DlpJobs that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2DlpJob *> *jobs;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response to the ListInfoTypes request.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ListInfoTypesResponse : GTLRObject

/** Set of sensitive infoTypes. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2InfoTypeDescription *> *infoTypes;

@end


/**
 *  Response message for ListInspectTemplates.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "inspectTemplates" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRDLP_GooglePrivacyDlpV2ListInspectTemplatesResponse : GTLRCollectionObject

/**
 *  List of inspectTemplates, up to page_size in ListInspectTemplatesRequest.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2InspectTemplate *> *inspectTemplates;

/**
 *  If the next page is available then the next page token to be used in
 *  following ListInspectTemplates request.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for ListJobTriggers.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "jobTriggers" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDLP_GooglePrivacyDlpV2ListJobTriggersResponse : GTLRCollectionObject

/**
 *  List of triggeredJobs, up to page_size in ListJobTriggersRequest.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2JobTrigger *> *jobTriggers;

/**
 *  If the next page is available then the next page token to be used in
 *  following ListJobTriggers request.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for ListStoredInfoTypes.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "storedInfoTypes" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRDLP_GooglePrivacyDlpV2ListStoredInfoTypesResponse : GTLRCollectionObject

/**
 *  If the next page is available then the next page token to be used in
 *  following ListStoredInfoTypes request.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of storedInfoTypes, up to page_size in ListStoredInfoTypesRequest.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2StoredInfoType *> *storedInfoTypes;

@end


/**
 *  Specifies the location of the finding.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Location : GTLRObject

/**
 *  Zero-based byte offsets delimiting the finding. These are relative to the
 *  finding's containing element. Note that when the content is not textual,
 *  this references the UTF-8 encoded textual representation of the content.
 *  Omitted if content is an image.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Range *byteRange;

/**
 *  Unicode character offsets delimiting the finding. These are relative to the
 *  finding's containing element. Provided when the content is text.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Range *codepointRange;

/**
 *  Information about the container where this finding occurred, if available.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Container *container;

/**
 *  List of nested objects pointing to the precise location of the finding
 *  within the file or record.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2ContentLocation *> *contentLocations;

@end


/**
 *  Job trigger option for hybrid jobs. Jobs must be manually created and
 *  finished.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Manual : GTLRObject
@end


/**
 *  Metadata Location
 */
@interface GTLRDLP_GooglePrivacyDlpV2MetadataLocation : GTLRObject

/** Storage metadata. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2StorageMetadataLabel *storageLabel;

/**
 *  Type of metadata containing the finding.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2MetadataLocation_Type_MetadatatypeUnspecified
 *        Unused (Value: "METADATATYPE_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2MetadataLocation_Type_StorageMetadata
 *        General file metadata provided by Cloud Storage. (Value:
 *        "STORAGE_METADATA")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Compute numerical stats over an individual column, including min, max, and
 *  quantiles.
 */
@interface GTLRDLP_GooglePrivacyDlpV2NumericalStatsConfig : GTLRObject

/**
 *  Field to compute numerical stats on. Supported types are integer, float,
 *  date, datetime, timestamp, time.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *field;

@end


/**
 *  Result of the numerical stats computation.
 */
@interface GTLRDLP_GooglePrivacyDlpV2NumericalStatsResult : GTLRObject

/** Maximum value appearing in the column. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Value *maxValue;

/** Minimum value appearing in the column. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Value *minValue;

/**
 *  List of 99 values that partition the set of field values into 100 equal
 *  sized buckets.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2Value *> *quantileValues;

@end


/**
 *  Infotype details for other infoTypes found within a column.
 */
@interface GTLRDLP_GooglePrivacyDlpV2OtherInfoTypeSummary : GTLRObject

/**
 *  Approximate percentage of non-null rows that contained data detected by this
 *  infotype.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedPrevalence;

/** The other infoType. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InfoType *infoType;

@end


/**
 *  Cloud repository for storing output.
 */
@interface GTLRDLP_GooglePrivacyDlpV2OutputStorageConfig : GTLRObject

/**
 *  Schema used for writing the findings for Inspect jobs. This field is only
 *  used for Inspect and must be unspecified for Risk jobs. Columns are derived
 *  from the `Finding` object. If appending to an existing table, any columns
 *  from the predefined schema that are missing will be added. No columns in the
 *  existing table will be deleted. If unspecified, then all available columns
 *  will be used for a new table or an (existing) table with no schema, and no
 *  changes will be made to an existing table that has a schema. Only for use
 *  with external storage.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2OutputStorageConfig_OutputSchema_AllColumns
 *        Schema containing all columns. (Value: "ALL_COLUMNS")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2OutputStorageConfig_OutputSchema_BasicColumns
 *        Basic schema including only `info_type`, `quote`, `certainty`, and
 *        `timestamp`. (Value: "BASIC_COLUMNS")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2OutputStorageConfig_OutputSchema_BigQueryColumns
 *        Schema tailored to findings from scanning Google BigQuery. (Value:
 *        "BIG_QUERY_COLUMNS")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2OutputStorageConfig_OutputSchema_DatastoreColumns
 *        Schema tailored to findings from scanning Google Datastore. (Value:
 *        "DATASTORE_COLUMNS")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2OutputStorageConfig_OutputSchema_GcsColumns
 *        Schema tailored to findings from scanning Cloud Storage. (Value:
 *        "GCS_COLUMNS")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2OutputStorageConfig_OutputSchema_OutputSchemaUnspecified
 *        Unused. (Value: "OUTPUT_SCHEMA_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *outputSchema;

/**
 *  Store findings in an existing table or a new table in an existing dataset.
 *  If table_id is not set a new one will be generated for you with the
 *  following format: dlp_googleapis_yyyy_mm_dd_[dlp_job_id]. Pacific time zone
 *  will be used for generating the date details. For Inspect, each column in an
 *  existing output table must have the same name, type, and mode of a field in
 *  the `Finding` object. For Risk, an existing output table should be the
 *  output of a previous Risk analysis job run on the same source table, with
 *  the same privacy metric and quasi-identifiers. Risk jobs that analyze the
 *  same table but compute a different privacy metric, or use different sets of
 *  quasi-identifiers, cannot store their results in the same table.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2BigQueryTable *table;

@end


/**
 *  Datastore partition ID. A partition ID identifies a grouping of entities.
 *  The grouping is always by project and namespace, however the namespace ID
 *  may be empty. A partition ID contains several dimensions: project ID and
 *  namespace ID.
 */
@interface GTLRDLP_GooglePrivacyDlpV2PartitionId : GTLRObject

/** If not empty, the ID of the namespace to which the entities belong. */
@property(nonatomic, copy, nullable) NSString *namespaceId;

/** The ID of the project to which the entities belong. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  A (kind, ID/name) pair used to construct a key path. If either name or ID is
 *  set, the element is complete. If neither is set, the element is incomplete.
 */
@interface GTLRDLP_GooglePrivacyDlpV2PathElement : GTLRObject

/**
 *  The auto-allocated ID of the entity. Never equal to zero. Values less than
 *  zero are discouraged and may not be supported in the future.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

/**
 *  The kind of the entity. A kind matching regex `__.*__` is
 *  reserved/read-only. A kind must not contain more than 1500 bytes when UTF-8
 *  encoded. Cannot be `""`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the entity. A name matching regex `__.*__` is
 *  reserved/read-only. A name must not be more than 1500 bytes when UTF-8
 *  encoded. Cannot be `""`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A rule for transforming a value.
 */
@interface GTLRDLP_GooglePrivacyDlpV2PrimitiveTransformation : GTLRObject

/** Bucketing */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2BucketingConfig *bucketingConfig;

/** Mask */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2CharacterMaskConfig *characterMaskConfig;

/** Deterministic Crypto */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2CryptoDeterministicConfig *cryptoDeterministicConfig;

/** Crypto */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2CryptoHashConfig *cryptoHashConfig;

/** Ffx-Fpe */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2CryptoReplaceFfxFpeConfig *cryptoReplaceFfxFpeConfig;

/** Date Shift */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DateShiftConfig *dateShiftConfig;

/** Fixed size bucketing */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FixedSizeBucketingConfig *fixedSizeBucketingConfig;

/** Redact */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2RedactConfig *redactConfig;

/** Replace with a specified value. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ReplaceValueConfig *replaceConfig;

/**
 *  Replace with a value randomly drawn (with replacement) from a dictionary.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ReplaceDictionaryConfig *replaceDictionaryConfig;

/** Replace with infotype */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ReplaceWithInfoTypeConfig *replaceWithInfoTypeConfig;

/** Time extraction */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2TimePartConfig *timePartConfig;

@end


/**
 *  Privacy metric to compute for reidentification risk analysis.
 */
@interface GTLRDLP_GooglePrivacyDlpV2PrivacyMetric : GTLRObject

/** Categorical stats */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2CategoricalStatsConfig *categoricalStatsConfig;

/** delta-presence */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DeltaPresenceEstimationConfig *deltaPresenceEstimationConfig;

/** K-anonymity */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2KAnonymityConfig *kAnonymityConfig;

/** k-map */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2KMapEstimationConfig *kMapEstimationConfig;

/** l-diversity */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2LDiversityConfig *lDiversityConfig;

/** Numerical stats */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2NumericalStatsConfig *numericalStatsConfig;

@end


/**
 *  GTLRDLP_GooglePrivacyDlpV2ProfileStatus
 */
@interface GTLRDLP_GooglePrivacyDlpV2ProfileStatus : GTLRObject

/** Profiling status code and optional message */
@property(nonatomic, strong, nullable) GTLRDLP_GoogleRpcStatus *status;

/** Time when the profile generation status was updated */
@property(nonatomic, strong, nullable) GTLRDateTime *timestamp;

@end


/**
 *  Message for specifying a window around a finding to apply a detection rule.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Proximity : GTLRObject

/**
 *  Number of characters after the finding to consider.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *windowAfter;

/**
 *  Number of characters before the finding to consider. For tabular data, if
 *  you want to modify the likelihood of an entire column of findngs, set this
 *  to 1. For more information, see [Hotword example: Set the match likelihood
 *  of a table column]
 *  (https://cloud.google.com/dlp/docs/creating-custom-infotypes-likelihood#match-column-values).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *windowBefore;

@end


/**
 *  Publish findings of a DlpJob to Data Catalog. In Data Catalog, tag templates
 *  are applied to the resource that Cloud DLP scanned. Data Catalog tag
 *  templates are stored in the same project and region where the BigQuery table
 *  exists. For Cloud DLP to create and apply the tag template, the Cloud DLP
 *  service agent must have the `roles/datacatalog.tagTemplateOwner` permission
 *  on the project. The tag template contains fields summarizing the results of
 *  the DlpJob. Any field values previously written by another DlpJob are
 *  deleted. InfoType naming patterns are strictly enforced when using this
 *  feature. Findings are persisted in Data Catalog storage and are governed by
 *  service-specific policies for Data Catalog. For more information, see
 *  [Service Specific Terms](https://cloud.google.com/terms/service-terms). Only
 *  a single instance of this action can be specified. This action is allowed
 *  only if all resources being scanned are BigQuery tables. Compatible with:
 *  Inspect
 */
@interface GTLRDLP_GooglePrivacyDlpV2PublishFindingsToCloudDataCatalog : GTLRObject
@end


/**
 *  Publish the result summary of a DlpJob to the Cloud Security Command Center
 *  (CSCC Alpha). This action is only available for projects which are parts of
 *  an organization and whitelisted for the alpha Cloud Security Command Center.
 *  The action will publish the count of finding instances and their info types.
 *  The summary of findings will be persisted in CSCC and are governed by CSCC
 *  service-specific policy, see https://cloud.google.com/terms/service-terms
 *  Only a single instance of this action can be specified. Compatible with:
 *  Inspect
 */
@interface GTLRDLP_GooglePrivacyDlpV2PublishSummaryToCscc : GTLRObject
@end


/**
 *  Publish a message into a given Pub/Sub topic when DlpJob has completed. The
 *  message contains a single field, `DlpJobName`, which is equal to the
 *  finished job's
 *  [`DlpJob.name`](https://cloud.google.com/dlp/docs/reference/rest/v2/projects.dlpJobs#DlpJob).
 *  Compatible with: Inspect, Risk
 */
@interface GTLRDLP_GooglePrivacyDlpV2PublishToPubSub : GTLRObject

/**
 *  Cloud Pub/Sub topic to send notifications to. The topic must have given
 *  publishing access rights to the DLP API service account executing the long
 *  running DlpJob sending the notifications. Format is
 *  projects/{project}/topics/{topic}.
 */
@property(nonatomic, copy, nullable) NSString *topic;

@end


/**
 *  Enable Stackdriver metric dlp.googleapis.com/finding_count. This will
 *  publish a metric to stack driver on each infotype requested and how many
 *  findings were found for it. CustomDetectors will be bucketed as 'Custom'
 *  under the Stackdriver label 'info_type'.
 */
@interface GTLRDLP_GooglePrivacyDlpV2PublishToStackdriver : GTLRObject
@end


/**
 *  A condition consisting of a value.
 */
@interface GTLRDLP_GooglePrivacyDlpV2PubSubCondition : GTLRObject

/**
 *  The minimum data risk score that triggers the condition.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubCondition_MinimumRiskScore_High
 *        High risk/sensitivity detected. (Value: "HIGH")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubCondition_MinimumRiskScore_MediumOrHigh
 *        Medium or high risk/sensitivity detected. (Value: "MEDIUM_OR_HIGH")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubCondition_MinimumRiskScore_ProfileScoreBucketUnspecified
 *        Unused. (Value: "PROFILE_SCORE_BUCKET_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *minimumRiskScore;

/**
 *  The minimum sensitivity level that triggers the condition.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubCondition_MinimumSensitivityScore_High
 *        High risk/sensitivity detected. (Value: "HIGH")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubCondition_MinimumSensitivityScore_MediumOrHigh
 *        Medium or high risk/sensitivity detected. (Value: "MEDIUM_OR_HIGH")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubCondition_MinimumSensitivityScore_ProfileScoreBucketUnspecified
 *        Unused. (Value: "PROFILE_SCORE_BUCKET_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *minimumSensitivityScore;

@end


/**
 *  An expression, consisting of an operator and conditions.
 */
@interface GTLRDLP_GooglePrivacyDlpV2PubSubExpressions : GTLRObject

/** Conditions to apply to the expression. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2PubSubCondition *> *conditions;

/**
 *  The operator to apply to the collection of conditions.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubExpressions_LogicalOperator_And
 *        Conditional AND. (Value: "AND")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubExpressions_LogicalOperator_LogicalOperatorUnspecified
 *        Unused. (Value: "LOGICAL_OPERATOR_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubExpressions_LogicalOperator_Or
 *        Conditional OR. (Value: "OR")
 */
@property(nonatomic, copy, nullable) NSString *logicalOperator;

@end


/**
 *  Send a Pub/Sub message into the given Pub/Sub topic to connect other systems
 *  to data profile generation. The message payload data will be the byte
 *  serialization of `DataProfilePubSubMessage`.
 */
@interface GTLRDLP_GooglePrivacyDlpV2PubSubNotification : GTLRObject

/**
 *  How much data to include in the Pub/Sub message. If the user wishes to limit
 *  the size of the message, they can use resource_name and fetch the profile
 *  fields they wish to. Per table profile (not per column).
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubNotification_DetailOfMessage_DetailLevelUnspecified
 *        Unused. (Value: "DETAIL_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubNotification_DetailOfMessage_ResourceName
 *        The resource name of the table. (Value: "RESOURCE_NAME")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubNotification_DetailOfMessage_TableProfile
 *        The full table data profile. (Value: "TABLE_PROFILE")
 */
@property(nonatomic, copy, nullable) NSString *detailOfMessage;

/**
 *  The type of event that triggers a Pub/Sub. At most one `PubSubNotification`
 *  per EventType is permitted.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubNotification_Event_ChangedProfile
 *        Changed one of the following profile metrics: * Table data risk score
 *        * Table sensitivity score * Table resource visibility * Table
 *        encryption type * Table predicted infoTypes * Table other infoTypes
 *        (Value: "CHANGED_PROFILE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubNotification_Event_ErrorChanged A
 *        user (non-internal) error occurred. (Value: "ERROR_CHANGED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubNotification_Event_EventTypeUnspecified
 *        Unused. (Value: "EVENT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubNotification_Event_NewProfile New
 *        profile (not a re-profile). (Value: "NEW_PROFILE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2PubSubNotification_Event_ScoreIncreased
 *        Table data risk score or sensitivity score increased. (Value:
 *        "SCORE_INCREASED")
 */
@property(nonatomic, copy, nullable) NSString *event;

/**
 *  Conditions (e.g., data risk or sensitivity level) for triggering a Pub/Sub.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DataProfilePubSubCondition *pubsubCondition;

/**
 *  Cloud Pub/Sub topic to send notifications to. Format is
 *  projects/{project}/topics/{topic}.
 */
@property(nonatomic, copy, nullable) NSString *topic;

@end


/**
 *  A column with a semantic tag attached.
 */
@interface GTLRDLP_GooglePrivacyDlpV2QuasiId : GTLRObject

/**
 *  A column can be tagged with a custom tag. In this case, the user must
 *  indicate an auxiliary table that contains statistical information on the
 *  possible values of this column (below).
 */
@property(nonatomic, copy, nullable) NSString *customTag;

/** Required. Identifies the column. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *field;

/**
 *  If no semantic tag is indicated, we infer the statistical model from the
 *  distribution of values in the input data
 */
@property(nonatomic, strong, nullable) GTLRDLP_GoogleProtobufEmpty *inferred;

/**
 *  A column can be tagged with a InfoType to use the relevant public dataset as
 *  a statistical model of population, if available. We currently support US ZIP
 *  codes, region codes, ages and genders. To programmatically obtain the list
 *  of supported InfoTypes, use ListInfoTypes with the
 *  supported_by=RISK_ANALYSIS filter.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InfoType *infoType;

@end


/**
 *  A quasi-identifier column has a custom_tag, used to know which column in the
 *  data corresponds to which column in the statistical model.
 */
@interface GTLRDLP_GooglePrivacyDlpV2QuasiIdentifierField : GTLRObject

/**
 *  A column can be tagged with a custom tag. In this case, the user must
 *  indicate an auxiliary table that contains statistical information on the
 *  possible values of this column (below).
 */
@property(nonatomic, copy, nullable) NSString *customTag;

/** Identifies the column. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *field;

@end


/**
 *  A quasi-identifier column has a custom_tag, used to know which column in the
 *  data corresponds to which column in the statistical model.
 */
@interface GTLRDLP_GooglePrivacyDlpV2QuasiIdField : GTLRObject

/** A auxiliary field. */
@property(nonatomic, copy, nullable) NSString *customTag;

/** Identifies the column. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *field;

@end


/**
 *  Message for infoType-dependent details parsed from quote.
 */
@interface GTLRDLP_GooglePrivacyDlpV2QuoteInfo : GTLRObject

/** The date time indicated by the quote. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DateTime *dateTime;

@end


/**
 *  Generic half-open interval [start, end)
 */
@interface GTLRDLP_GooglePrivacyDlpV2Range : GTLRObject

/**
 *  Index of the last character of the range (exclusive).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  Index of the first character of the range (inclusive).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  A condition for determining whether a transformation should be applied to a
 *  field.
 */
@interface GTLRDLP_GooglePrivacyDlpV2RecordCondition : GTLRObject

/** An expression. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Expressions *expressions;

@end


/**
 *  Message for a unique key indicating a record that contains a finding.
 */
@interface GTLRDLP_GooglePrivacyDlpV2RecordKey : GTLRObject

@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2BigQueryKey *bigQueryKey;
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DatastoreKey *datastoreKey;

/**
 *  Values of identifying columns in the given row. Order of values matches the
 *  order of `identifying_fields` specified in the scanning request.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *idValues;

@end


/**
 *  Location of a finding within a row or record.
 */
@interface GTLRDLP_GooglePrivacyDlpV2RecordLocation : GTLRObject

/** Field id of the field containing the finding. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *fieldId;

/** Key of the finding. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2RecordKey *recordKey;

/** Location within a `ContentItem.Table`. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2TableLocation *tableLocation;

@end


/**
 *  Configuration to suppress records whose suppression conditions evaluate to
 *  true.
 */
@interface GTLRDLP_GooglePrivacyDlpV2RecordSuppression : GTLRObject

/**
 *  A condition that when it evaluates to true will result in the record being
 *  evaluated to be suppressed from the transformed content.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2RecordCondition *condition;

@end


/**
 *  GTLRDLP_GooglePrivacyDlpV2RecordTransformation
 */
@interface GTLRDLP_GooglePrivacyDlpV2RecordTransformation : GTLRObject

/** Findings container modification timestamp, if applicable. */
@property(nonatomic, strong, nullable) GTLRDateTime *containerTimestamp;

/** Container version, if available ("generation" for Cloud Storage). */
@property(nonatomic, copy, nullable) NSString *containerVersion;

/** For record transformations, provide a field. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *fieldId;

@end


/**
 *  A type of transformation that is applied over structured data such as a
 *  table.
 */
@interface GTLRDLP_GooglePrivacyDlpV2RecordTransformations : GTLRObject

/** Transform the record by applying various field transformations. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2FieldTransformation *> *fieldTransformations;

/**
 *  Configuration defining which records get suppressed entirely. Records that
 *  match any suppression rule are omitted from the output.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2RecordSuppression *> *recordSuppressions;

@end


/**
 *  Redact a given value. For example, if used with an `InfoTypeTransformation`
 *  transforming PHONE_NUMBER, and input 'My phone number is 206-555-0123', the
 *  output would be 'My phone number is '.
 */
@interface GTLRDLP_GooglePrivacyDlpV2RedactConfig : GTLRObject
@end


/**
 *  Request to search for potentially sensitive info in an image and redact it
 *  by covering it with a colored rectangle.
 */
@interface GTLRDLP_GooglePrivacyDlpV2RedactImageRequest : GTLRObject

/** The content must be PNG, JPEG, SVG or BMP. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ByteContentItem *byteItem;

/** The configuration for specifying what content to redact from images. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2ImageRedactionConfig *> *imageRedactionConfigs;

/**
 *  Whether the response should include findings along with the redacted image.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeFindings;

/** Configuration for the inspector. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InspectConfig *inspectConfig;

/** Deprecated. This field has no effect. */
@property(nonatomic, copy, nullable) NSString *locationId;

@end


/**
 *  Results of redacting an image.
 */
@interface GTLRDLP_GooglePrivacyDlpV2RedactImageResponse : GTLRObject

/**
 *  If an image was being inspected and the InspectConfig's include_quote was
 *  set to true, then this field will include all text, if any, that was found
 *  in the image.
 */
@property(nonatomic, copy, nullable) NSString *extractedText;

/** The findings. Populated when include_findings in the request is true. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InspectResult *inspectResult;

/**
 *  The redacted image. The type will be the same as the original image.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *redactedImage;

@end


/**
 *  Message defining a custom regular expression.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Regex : GTLRObject

/**
 *  The index of the submatch to extract as findings. When not specified, the
 *  entire match is returned. No more than 3 may be included.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *groupIndexes;

/**
 *  Pattern defining the regular expression. Its syntax
 *  (https://github.com/google/re2/wiki/Syntax) can be found under the
 *  google/re2 repository on GitHub.
 */
@property(nonatomic, copy, nullable) NSString *pattern;

@end


/**
 *  Request to re-identify an item.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ReidentifyContentRequest : GTLRObject

/** Configuration for the inspector. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InspectConfig *inspectConfig;

/**
 *  Template to use. Any configuration directly specified in `inspect_config`
 *  will override those set in the template. Singular fields that are set in
 *  this request will replace their corresponding fields in the template.
 *  Repeated fields are appended. Singular sub-messages and groups are
 *  recursively merged.
 */
@property(nonatomic, copy, nullable) NSString *inspectTemplateName;

/** The item to re-identify. Will be treated as text. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ContentItem *item;

/** Deprecated. This field has no effect. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Configuration for the re-identification of the content item. This field
 *  shares the same proto message type that is used for de-identification,
 *  however its usage here is for the reversal of the previous
 *  de-identification. Re-identification is performed by examining the
 *  transformations used to de-identify the items and executing the reverse.
 *  This requires that only reversible transformations be provided here. The
 *  reversible transformations are: - `CryptoDeterministicConfig` -
 *  `CryptoReplaceFfxFpeConfig`
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DeidentifyConfig *reidentifyConfig;

/**
 *  Template to use. References an instance of `DeidentifyTemplate`. Any
 *  configuration directly specified in `reidentify_config` or `inspect_config`
 *  will override those set in the template. The `DeidentifyTemplate` used must
 *  include only reversible transformations. Singular fields that are set in
 *  this request will replace their corresponding fields in the template.
 *  Repeated fields are appended. Singular sub-messages and groups are
 *  recursively merged.
 */
@property(nonatomic, copy, nullable) NSString *reidentifyTemplateName;

@end


/**
 *  Results of re-identifying an item.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ReidentifyContentResponse : GTLRObject

/** The re-identified item. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ContentItem *item;

/** An overview of the changes that were made to the `item`. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2TransformationOverview *overview;

@end


/**
 *  Replace each input value with a value randomly selected from the dictionary.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ReplaceDictionaryConfig : GTLRObject

/**
 *  A list of words to select from for random replacement. The
 *  [limits](https://cloud.google.com/dlp/limits) page contains details about
 *  the size limits of dictionaries.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2WordList *wordList;

@end


/**
 *  Replace each input value with a given `Value`.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ReplaceValueConfig : GTLRObject

/** Value to replace it with. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Value *newValue NS_RETURNS_NOT_RETAINED;

@end


/**
 *  Replace each matching finding with the name of the info_type.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ReplaceWithInfoTypeConfig : GTLRObject
@end


/**
 *  Snapshot of the inspection configuration.
 */
@interface GTLRDLP_GooglePrivacyDlpV2RequestedOptions : GTLRObject

/** Inspect config. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InspectJobConfig *jobConfig;

/**
 *  If run with an InspectTemplate, a snapshot of its state at the time of this
 *  run.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InspectTemplate *snapshotInspectTemplate;

@end


/**
 *  Risk analysis options.
 */
@interface GTLRDLP_GooglePrivacyDlpV2RequestedRiskAnalysisOptions : GTLRObject

/** The job config for the risk job. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2RiskAnalysisJobConfig *jobConfig;

@end


/**
 *  All result fields mentioned below are updated while the job is processing.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Result : GTLRObject

/** Statistics related to the processing of hybrid inspect. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2HybridInspectStatistics *hybridStats;

/**
 *  Statistics of how many instances of each info type were found during inspect
 *  job.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2InfoTypeStats *> *infoTypeStats;

/**
 *  Total size in bytes that were processed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *processedBytes;

/**
 *  Estimate of the number of bytes to process.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalEstimatedBytes;

@end


/**
 *  Configuration for a risk analysis job. See
 *  https://cloud.google.com/dlp/docs/concepts-risk-analysis to learn more.
 */
@interface GTLRDLP_GooglePrivacyDlpV2RiskAnalysisJobConfig : GTLRObject

/**
 *  Actions to execute at the completion of the job. Are executed in the order
 *  provided.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2Action *> *actions;

/** Privacy metric to compute. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2PrivacyMetric *privacyMetric;

/** Input dataset to compute metrics over. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2BigQueryTable *sourceTable;

@end


/**
 *  Values of the row.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Row : GTLRObject

/** Individual cells. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2Value *> *values;

@end


/**
 *  If set, the detailed findings will be persisted to the specified
 *  OutputStorageConfig. Only a single instance of this action can be specified.
 *  Compatible with: Inspect, Risk
 */
@interface GTLRDLP_GooglePrivacyDlpV2SaveFindings : GTLRObject

/** Location to store findings outside of DLP. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2OutputStorageConfig *outputConfig;

@end


/**
 *  Schedule for inspect job triggers.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Schedule : GTLRObject

/**
 *  With this option a job is started on a regular periodic basis. For example:
 *  every day (86400 seconds). A scheduled start time will be skipped if the
 *  previous execution has not ended when its scheduled time occurs. This value
 *  must be set to a time duration greater than or equal to 1 day and can be no
 *  longer than 60 days.
 */
@property(nonatomic, strong, nullable) GTLRDuration *recurrencePeriodDuration;

@end


/**
 *  Apply transformation to the selected info_types.
 */
@interface GTLRDLP_GooglePrivacyDlpV2SelectedInfoTypes : GTLRObject

/**
 *  Required. InfoTypes to apply the transformation to. Required. Provided
 *  InfoType must be unique within the ImageTransformations message.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2InfoType *> *infoTypes;

@end


/**
 *  Score is a summary of all elements in the data profile. A higher number
 *  means more sensitive.
 */
@interface GTLRDLP_GooglePrivacyDlpV2SensitivityScore : GTLRObject

/**
 *  The score applied to the resource.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2SensitivityScore_Score_SensitivityHigh
 *        High risk – SPII may be present. Exfiltration of data may lead to user
 *        data loss. Re-identification of users may be possible. Consider
 *        limiting usage and or removing SPII. (Value: "SENSITIVITY_HIGH")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2SensitivityScore_Score_SensitivityLow
 *        No sensitive information detected. Limited access. (Value:
 *        "SENSITIVITY_LOW")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2SensitivityScore_Score_SensitivityModerate
 *        Medium risk - PII, potentially sensitive data, or fields with
 *        free-text data that are at higher risk of having intermittent
 *        sensitive data. Consider limiting access. (Value:
 *        "SENSITIVITY_MODERATE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2SensitivityScore_Score_SensitivityScoreUnspecified
 *        Unused. (Value: "SENSITIVITY_SCORE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *score;

@end


/**
 *  An auxiliary table containing statistical information on the relative
 *  frequency of different quasi-identifiers values. It has one or several
 *  quasi-identifiers columns, and one column that indicates the relative
 *  frequency of each quasi-identifier tuple. If a tuple is present in the data
 *  but not in the auxiliary table, the corresponding relative frequency is
 *  assumed to be zero (and thus, the tuple is highly reidentifiable).
 */
@interface GTLRDLP_GooglePrivacyDlpV2StatisticalTable : GTLRObject

/** Required. Quasi-identifier columns. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2QuasiIdentifierField *> *quasiIds;

/**
 *  Required. The relative frequency column must contain a floating-point number
 *  between 0 and 1 (inclusive). Null values are assumed to be zero.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *relativeFrequency;

/** Required. Auxiliary table location. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2BigQueryTable *table;

@end


/**
 *  Shared message indicating Cloud storage type.
 */
@interface GTLRDLP_GooglePrivacyDlpV2StorageConfig : GTLRObject

/** BigQuery options. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2BigQueryOptions *bigQueryOptions;

/** Cloud Storage options. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2CloudStorageOptions *cloudStorageOptions;

/** Google Cloud Datastore options. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DatastoreOptions *datastoreOptions;

/** Hybrid inspection options. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2HybridOptions *hybridOptions;

@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2TimespanConfig *timespanConfig;

@end


/**
 *  Storage metadata label to indicate which metadata entry contains findings.
 */
@interface GTLRDLP_GooglePrivacyDlpV2StorageMetadataLabel : GTLRObject

@property(nonatomic, copy, nullable) NSString *key;

@end


/**
 *  StoredInfoType resource message that contains information about the current
 *  version and any pending updates.
 */
@interface GTLRDLP_GooglePrivacyDlpV2StoredInfoType : GTLRObject

/** Current version of the stored info type. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2StoredInfoTypeVersion *currentVersion;

/** Resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Pending versions of the stored info type. Empty if no versions are pending.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2StoredInfoTypeVersion *> *pendingVersions;

@end


/**
 *  Configuration for stored infoTypes. All fields and subfield are provided by
 *  the user. For more information, see
 *  https://cloud.google.com/dlp/docs/creating-custom-infotypes.
 */
@interface GTLRDLP_GooglePrivacyDlpV2StoredInfoTypeConfig : GTLRObject

/**
 *  Description of the StoredInfoType (max 256 characters).
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Store dictionary-based CustomInfoType. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Dictionary *dictionary;

/** Display name of the StoredInfoType (max 256 characters). */
@property(nonatomic, copy, nullable) NSString *displayName;

/** StoredInfoType where findings are defined by a dictionary of phrases. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2LargeCustomDictionaryConfig *largeCustomDictionary;

/** Store regular expression-based StoredInfoType. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Regex *regex;

@end


/**
 *  Statistics for a StoredInfoType.
 */
@interface GTLRDLP_GooglePrivacyDlpV2StoredInfoTypeStats : GTLRObject

/** StoredInfoType where findings are defined by a dictionary of phrases. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2LargeCustomDictionaryStats *largeCustomDictionary;

@end


/**
 *  Version of a StoredInfoType, including the configuration used to build it,
 *  create timestamp, and current state.
 */
@interface GTLRDLP_GooglePrivacyDlpV2StoredInfoTypeVersion : GTLRObject

/** StoredInfoType configuration. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2StoredInfoTypeConfig *config;

/**
 *  Create timestamp of the version. Read-only, determined by the system when
 *  the version is created.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Errors that occurred when creating this storedInfoType version, or anomalies
 *  detected in the storedInfoType data that render it unusable. Only the five
 *  most recent errors will be displayed, with the most recent error appearing
 *  first. For example, some of the data for stored custom dictionaries is put
 *  in the user's Cloud Storage bucket, and if this data is modified or deleted
 *  by the user or another system, the dictionary becomes invalid. If any errors
 *  occur, fix the problem indicated by the error message and use the
 *  UpdateStoredInfoType API method to create another version of the
 *  storedInfoType to continue using it, reusing the same `config` if it was not
 *  the source of the error.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2Error *> *errors;

/**
 *  Stored info type version state. Read-only, updated by the system during
 *  dictionary creation.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2StoredInfoTypeVersion_State_Failed
 *        StoredInfoType creation failed. All relevant error messages are
 *        returned in the `StoredInfoTypeVersion` message. (Value: "FAILED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2StoredInfoTypeVersion_State_Invalid
 *        StoredInfoType is no longer valid because artifacts stored in
 *        user-controlled storage were modified. To fix an invalid
 *        StoredInfoType, use the `UpdateStoredInfoType` method to create a new
 *        version. (Value: "INVALID")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2StoredInfoTypeVersion_State_Pending
 *        StoredInfoType version is being created. (Value: "PENDING")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2StoredInfoTypeVersion_State_Ready
 *        StoredInfoType version is ready for use. (Value: "READY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2StoredInfoTypeVersion_State_StoredInfoTypeStateUnspecified
 *        Unused (Value: "STORED_INFO_TYPE_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Statistics about this storedInfoType version. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2StoredInfoTypeStats *stats;

@end


/**
 *  A reference to a StoredInfoType to use with scanning.
 */
@interface GTLRDLP_GooglePrivacyDlpV2StoredType : GTLRObject

/**
 *  Timestamp indicating when the version of the `StoredInfoType` used for
 *  inspection was created. Output-only field, populated by the system.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Resource name of the requested `StoredInfoType`, for example
 *  `organizations/433245324/storedInfoTypes/432452342` or
 *  `projects/project-id/storedInfoTypes/432452342`.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A collection that informs the user the number of times a particular
 *  `TransformationResultCode` and error details occurred.
 */
@interface GTLRDLP_GooglePrivacyDlpV2SummaryResult : GTLRObject

/**
 *  Outcome of the transformation.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2SummaryResult_Code_Error Transformation
 *        had an error. (Value: "ERROR")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2SummaryResult_Code_Success
 *        Transformation completed without an error. (Value: "SUCCESS")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2SummaryResult_Code_TransformationResultCodeUnspecified
 *        Unused (Value: "TRANSFORMATION_RESULT_CODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *code;

/**
 *  Number of transformations counted by this result.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  A place for warnings or errors to show up if a transformation didn't work as
 *  expected.
 */
@property(nonatomic, copy, nullable) NSString *details;

@end


/**
 *  Message for detecting output from deidentification transformations such as
 *  [`CryptoReplaceFfxFpeConfig`](https://cloud.google.com/dlp/docs/reference/rest/v2/organizations.deidentifyTemplates#cryptoreplaceffxfpeconfig).
 *  These types of transformations are those that perform pseudonymization,
 *  thereby producing a "surrogate" as output. This should be used in
 *  conjunction with a field on the transformation such as
 *  `surrogate_info_type`. This CustomInfoType does not support the use of
 *  `detection_rules`.
 */
@interface GTLRDLP_GooglePrivacyDlpV2SurrogateType : GTLRObject
@end


/**
 *  Structured content to inspect. Up to 50,000 `Value`s per request allowed.
 *  See
 *  https://cloud.google.com/dlp/docs/inspecting-structured-text#inspecting_a_table
 *  to learn more.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Table : GTLRObject

/** Headers of the table. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2FieldId *> *headers;

/** Rows of the table. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2Row *> *rows;

@end


/**
 *  The profile for a scanned table.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TableDataProfile : GTLRObject

/** The snapshot of the configurations used to generate the profile. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DataProfileConfigSnapshot *configSnapshot;

/** The time at which the table was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The data risk level of this table. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DataRiskLevel *dataRiskLevel;

/** The BigQuery dataset ID. */
@property(nonatomic, copy, nullable) NSString *datasetId;

/**
 *  The BigQuery location where the dataset's data is stored. See
 *  https://cloud.google.com/bigquery/docs/locations for supported locations.
 */
@property(nonatomic, copy, nullable) NSString *datasetLocation;

/** The GCP project ID that owns the BigQuery dataset. */
@property(nonatomic, copy, nullable) NSString *datasetProjectId;

/**
 *  How the table is encrypted.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_EncryptionStatus_EncryptionCustomerManaged
 *        Customer provides the key. (Value: "ENCRYPTION_CUSTOMER_MANAGED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_EncryptionStatus_EncryptionGoogleManaged
 *        Google manages server-side encryption keys on your behalf. (Value:
 *        "ENCRYPTION_GOOGLE_MANAGED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_EncryptionStatus_EncryptionStatusUnspecified
 *        Unused. (Value: "ENCRYPTION_STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *encryptionStatus;

/** Optional. The time when this table expires. */
@property(nonatomic, strong, nullable) GTLRDateTime *expirationTime;

/**
 *  The number of columns skipped in the table because of an error.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failedColumnCount;

/**
 *  The resource name of the table.
 *  https://cloud.google.com/apis/design/resource_names#full_resource_name
 */
@property(nonatomic, copy, nullable) NSString *fullResource;

/** The time when this table was last modified */
@property(nonatomic, strong, nullable) GTLRDateTime *lastModifiedTime;

/** The name of the profile. */
@property(nonatomic, copy, nullable) NSString *name;

/** Other infoTypes found in this table's data. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2OtherInfoTypeSummary *> *otherInfoTypes;

/** The infoTypes predicted from this table's data. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2InfoTypeSummary *> *predictedInfoTypes;

/** The last time the profile was generated. */
@property(nonatomic, strong, nullable) GTLRDateTime *profileLastGenerated;

/**
 *  Success or error status from the most recent profile generation attempt. May
 *  be empty if the profile is still being generated.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ProfileStatus *profileStatus;

/** The resource name to the project data profile for this table. */
@property(nonatomic, copy, nullable) NSString *projectDataProfile;

/**
 *  The labels applied to the resource at the time the profile was generated.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2TableDataProfile_ResourceLabels *resourceLabels;

/**
 *  How broadly a resource has been shared.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_ResourceVisibility_ResourceVisibilityPublic
 *        Visible to any user. (Value: "RESOURCE_VISIBILITY_PUBLIC")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_ResourceVisibility_ResourceVisibilityRestricted
 *        Visible only to specific users. (Value:
 *        "RESOURCE_VISIBILITY_RESTRICTED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_ResourceVisibility_ResourceVisibilityUnspecified
 *        Unused. (Value: "RESOURCE_VISIBILITY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *resourceVisibility;

/**
 *  Number of rows in the table when the profile was generated. This will not be
 *  populated for BigLake tables.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowCount;

/**
 *  The number of columns profiled in the table.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scannedColumnCount;

/** The sensitivity score of this table. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2SensitivityScore *sensitivityScore;

/**
 *  State of a profile.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_State_Done The profile
 *        is no longer generating. If profile_status.status.code is 0, the
 *        profile succeeded, otherwise, it failed. (Value: "DONE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_State_Running The
 *        profile is currently running. Once a profile has finished it will
 *        transition to DONE. (Value: "RUNNING")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TableDataProfile_State_StateUnspecified
 *        Unused. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** The BigQuery table ID. */
@property(nonatomic, copy, nullable) NSString *tableId;

/**
 *  The size of the table when the profile was generated.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *tableSizeBytes;

@end


/**
 *  The labels applied to the resource at the time the profile was generated.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TableDataProfile_ResourceLabels : GTLRObject
@end


/**
 *  Location of a finding within a table.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TableLocation : GTLRObject

/**
 *  The zero-based index of the row where the finding is located. Only populated
 *  for resources that have a natural ordering, not BigQuery. In BigQuery, to
 *  identify the row a finding came from, populate
 *  BigQueryOptions.identifying_fields with your primary key column names and
 *  when you store the findings the value of those columns will be stored inside
 *  of Finding.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowIndex;

@end


/**
 *  Instructions regarding the table content being inspected.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TableOptions : GTLRObject

/**
 *  The columns that are the primary keys for table objects included in
 *  ContentItem. A copy of this cell's value will stored alongside alongside
 *  each finding so that the finding can be traced to the specific row it came
 *  from. No more than 3 may be provided.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2FieldId *> *identifyingFields;

@end


/**
 *  A column with a semantic tag attached.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TaggedField : GTLRObject

/**
 *  A column can be tagged with a custom tag. In this case, the user must
 *  indicate an auxiliary table that contains statistical information on the
 *  possible values of this column (below).
 */
@property(nonatomic, copy, nullable) NSString *customTag;

/** Required. Identifies the column. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *field;

/**
 *  If no semantic tag is indicated, we infer the statistical model from the
 *  distribution of values in the input data
 */
@property(nonatomic, strong, nullable) GTLRDLP_GoogleProtobufEmpty *inferred;

/**
 *  A column can be tagged with a InfoType to use the relevant public dataset as
 *  a statistical model of population, if available. We currently support US ZIP
 *  codes, region codes, ages and genders. To programmatically obtain the list
 *  of supported InfoTypes, use ListInfoTypes with the
 *  supported_by=RISK_ANALYSIS filter.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InfoType *infoType;

@end


/**
 *  Throw an error and fail the request when a transformation error occurs.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ThrowError : GTLRObject
@end


/**
 *  For use with `Date`, `Timestamp`, and `TimeOfDay`, extract or preserve a
 *  portion of the value.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TimePartConfig : GTLRObject

/**
 *  The part of the time to keep.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TimePartConfig_PartToExtract_DayOfMonth
 *        [1-31] (Value: "DAY_OF_MONTH")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TimePartConfig_PartToExtract_DayOfWeek
 *        [1-7] (Value: "DAY_OF_WEEK")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TimePartConfig_PartToExtract_HourOfDay
 *        [0-23] (Value: "HOUR_OF_DAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TimePartConfig_PartToExtract_Month
 *        [1-12] (Value: "MONTH")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TimePartConfig_PartToExtract_TimePartUnspecified
 *        Unused (Value: "TIME_PART_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TimePartConfig_PartToExtract_WeekOfYear
 *        [1-53] (Value: "WEEK_OF_YEAR")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TimePartConfig_PartToExtract_Year
 *        [0-9999] (Value: "YEAR")
 */
@property(nonatomic, copy, nullable) NSString *partToExtract;

@end


/**
 *  Configuration of the timespan of the items to include in scanning. Currently
 *  only supported when inspecting Cloud Storage and BigQuery.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TimespanConfig : GTLRObject

/**
 *  When the job is started by a JobTrigger we will automatically figure out a
 *  valid start_time to avoid scanning files that have not been modified since
 *  the last time the JobTrigger executed. This will be based on the time of the
 *  execution of the last run of the JobTrigger or the timespan end_time used in
 *  the last run of the JobTrigger.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableAutoPopulationOfTimespanConfig;

/**
 *  Exclude files, tables, or rows newer than this value. If not set, no upper
 *  time limit is applied.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Exclude files, tables, or rows older than this value. If not set, no lower
 *  time limit is applied.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Specification of the field containing the timestamp of scanned items. Used
 *  for data sources like Datastore and BigQuery. *For BigQuery* If this value
 *  is not specified and the table was modified between the given start and end
 *  times, the entire table will be scanned. If this value is specified, then
 *  rows are filtered based on the given start and end times. Rows with a `NULL`
 *  value in the provided BigQuery column are skipped. Valid data types of the
 *  provided BigQuery column are: `INTEGER`, `DATE`, `TIMESTAMP`, and
 *  `DATETIME`. If your BigQuery table is [partitioned at ingestion
 *  time](https://cloud.google.com/bigquery/docs/partitioned-tables#ingestion_time),
 *  you can use any of the following pseudo-columns as your timestamp field.
 *  When used with Cloud DLP, these pseudo-column names are case sensitive. -
 *  _PARTITIONTIME - _PARTITIONDATE - _PARTITION_LOAD_TIME *For Datastore* If
 *  this value is specified, then entities are filtered based on the given start
 *  and end times. If an entity does not contain the provided timestamp property
 *  or contains empty or invalid values, then it is included. Valid data types
 *  of the provided timestamp property are: `TIMESTAMP`. See the [known
 *  issue](https://cloud.google.com/dlp/docs/known-issues#bq-timespan) related
 *  to this operation.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *timestampField;

@end


/**
 *  Time zone of the date time object.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TimeZone : GTLRObject

/**
 *  Set only if the offset can be determined. Positive for time ahead of UTC.
 *  E.g. For "UTC-9", this value is -540.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offsetMinutes;

@end


/**
 *  User specified templates and configs for how to deidentify structured,
 *  unstructures, and image files. User must provide either a unstructured
 *  deidentify template or at least one redact image config.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TransformationConfig : GTLRObject

/**
 *  De-identify template. If this template is specified, it will serve as the
 *  default de-identify template. This template cannot contain
 *  `record_transformations` since it can be used for unstructured content such
 *  as free-form text files. If this template is not set, a default
 *  `ReplaceWithInfoTypeConfig` will be used to de-identify unstructured
 *  content.
 */
@property(nonatomic, copy, nullable) NSString *deidentifyTemplate;

/**
 *  Image redact template. If this template is specified, it will serve as the
 *  de-identify template for images. If this template is not set, all findings
 *  in the image will be redacted with a black box.
 */
@property(nonatomic, copy, nullable) NSString *imageRedactTemplate;

/**
 *  Structured de-identify template. If this template is specified, it will
 *  serve as the de-identify template for structured content such as delimited
 *  files and tables. If this template is not set but the `deidentify_template`
 *  is set, then `deidentify_template` will also apply to the structured
 *  content. If neither template is set, a default `ReplaceWithInfoTypeConfig`
 *  will be used to de-identify structured content.
 */
@property(nonatomic, copy, nullable) NSString *structuredDeidentifyTemplate;

@end


/**
 *  A flattened description of a `PrimitiveTransformation` or
 *  `RecordSuppression`.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TransformationDescription : GTLRObject

/**
 *  A human-readable string representation of the `RecordCondition`
 *  corresponding to this transformation. Set if a `RecordCondition` was used to
 *  determine whether or not to apply this transformation. Examples: *
 *  (age_field > 85) * (age_field <= 18) * (zip_field exists) * (zip_field ==
 *  01234) && (city_field != "Springville") * (zip_field == 01234) && (age_field
 *  <= 18) && (city_field exists)
 */
@property(nonatomic, copy, nullable) NSString *condition;

/**
 *  A description of the transformation. This is empty for a RECORD_SUPPRESSION,
 *  or is the output of calling toString() on the `PrimitiveTransformation`
 *  protocol buffer message for any other type of transformation.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Set if the transformation was limited to a specific `InfoType`. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InfoType *infoType;

/**
 *  The transformation type.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_Bucketing
 *        Bucketing (Value: "BUCKETING")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_CharacterMask
 *        Character mask (Value: "CHARACTER_MASK")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_CryptoDeterministicConfig
 *        Deterministic crypto (Value: "CRYPTO_DETERMINISTIC_CONFIG")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_CryptoHash
 *        Crypto hash (Value: "CRYPTO_HASH")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_CryptoReplaceFfxFpe
 *        FFX-FPE (Value: "CRYPTO_REPLACE_FFX_FPE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_DateShift
 *        Date shift (Value: "DATE_SHIFT")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_FixedSizeBucketing
 *        Fixed size bucketing (Value: "FIXED_SIZE_BUCKETING")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_RecordSuppression
 *        Record suppression (Value: "RECORD_SUPPRESSION")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_Redact
 *        Redact (Value: "REDACT")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_RedactImage
 *        Redact image (Value: "REDACT_IMAGE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_ReplaceDictionary
 *        Replace value using a dictionary. (Value: "REPLACE_DICTIONARY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_ReplaceValue
 *        Replace value (Value: "REPLACE_VALUE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_ReplaceWithInfoType
 *        Replace with info type (Value: "REPLACE_WITH_INFO_TYPE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_TimePart
 *        Time part (Value: "TIME_PART")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationDescription_Type_TransformationTypeUnspecified
 *        Unused (Value: "TRANSFORMATION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Details about a single transformation. This object contains a description of
 *  the transformation, information about whether the transformation was
 *  successfully applied, and the precise location where the transformation
 *  occurred. These details are stored in a user-specified BigQuery table.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TransformationDetails : GTLRObject

/**
 *  The top level name of the container where the transformation is located
 *  (this will be the source file name or table name).
 */
@property(nonatomic, copy, nullable) NSString *containerName;

/** The name of the job that completed the transformation. */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Status of the transformation, if transformation was not successful, this
 *  will specify what caused it to fail, otherwise it will show that the
 *  transformation was successful.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2TransformationResultStatus *statusDetails;

/**
 *  Description of transformation. This would only contain more than one element
 *  if there were multiple matching transformations and which one to apply was
 *  ambiguous. Not set for states that contain no transformation, currently only
 *  state that contains no transformation is
 *  TransformationResultStateType.METADATA_UNRETRIEVABLE.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2TransformationDescription *> *transformation;

/**
 *  The precise location of the transformed content in the original container.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2TransformationLocation *transformationLocation;

/**
 *  The number of bytes that were transformed. If transformation was
 *  unsuccessful or did not take place because there was no content to
 *  transform, this will be zero.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *transformedBytes;

@end


/**
 *  Config for storing transformation details.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TransformationDetailsStorageConfig : GTLRObject

/**
 *  The BigQuery table in which to store the output. This may be an existing
 *  table or in a new table in an existing dataset. If table_id is not set a new
 *  one will be generated for you with the following format:
 *  dlp_googleapis_transformation_details_yyyy_mm_dd_[dlp_job_id]. Pacific time
 *  zone will be used for generating the date details.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2BigQueryTable *table;

@end


/**
 *  How to handle transformation errors during de-identification. A
 *  transformation error occurs when the requested transformation is
 *  incompatible with the data. For example, trying to de-identify an IP address
 *  using a `DateShift` transformation would result in a transformation error,
 *  since date info cannot be extracted from an IP address. Information about
 *  any incompatible transformations, and how they were handled, is returned in
 *  the response as part of the `TransformationOverviews`.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TransformationErrorHandling : GTLRObject

/** Ignore errors */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2LeaveUntransformed *leaveUntransformed;

/** Throw an error */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2ThrowError *throwError;

@end


/**
 *  Specifies the location of a transformation.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TransformationLocation : GTLRObject

/**
 *  Information about the functionality of the container where this finding
 *  occurred, if available.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationLocation_ContainerType_TransformBody
 *        Value "TRANSFORM_BODY"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationLocation_ContainerType_TransformMetadata
 *        Value "TRANSFORM_METADATA"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationLocation_ContainerType_TransformTable
 *        Value "TRANSFORM_TABLE"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationLocation_ContainerType_TransformUnknownContainer
 *        Value "TRANSFORM_UNKNOWN_CONTAINER"
 */
@property(nonatomic, copy, nullable) NSString *containerType;

/**
 *  For infotype transformations, link to the corresponding findings ID so that
 *  location information does not need to be duplicated. Each findings ID
 *  correlates to an entry in the findings output table, this table only gets
 *  created when users specify to save findings (add the save findings action to
 *  the request).
 */
@property(nonatomic, copy, nullable) NSString *findingId;

/** For record transformations, provide a field and container information. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2RecordTransformation *recordTransformation;

@end


/**
 *  Overview of the modifications that occurred.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TransformationOverview : GTLRObject

/** Transformations applied to the dataset. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2TransformationSummary *> *transformationSummaries;

/**
 *  Total size in bytes that were transformed in some way.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *transformedBytes;

@end


/**
 *  GTLRDLP_GooglePrivacyDlpV2TransformationResultStatus
 */
@interface GTLRDLP_GooglePrivacyDlpV2TransformationResultStatus : GTLRObject

/** Detailed error codes and messages */
@property(nonatomic, strong, nullable) GTLRDLP_GoogleRpcStatus *details;

/**
 *  Transformation result status type, this will be either SUCCESS, or it will
 *  be the reason for why the transformation was not completely successful.
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationResultStatus_ResultStatusType_BigqueryMaxRowSizeExceeded
 *        This will be set when a BigQuery transformation was successful but
 *        could not be stored back in BigQuery because the transformed row
 *        exceeds BigQuery's max row size. (Value:
 *        "BIGQUERY_MAX_ROW_SIZE_EXCEEDED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationResultStatus_ResultStatusType_InvalidTransform
 *        This will be set when a finding could not be transformed (i.e. outside
 *        user set bucket range). (Value: "INVALID_TRANSFORM")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationResultStatus_ResultStatusType_MetadataUnretrievable
 *        This will be set when there is a finding in the custom metadata of a
 *        file, but at the write time of the transformed file, this key / value
 *        pair is unretrievable. (Value: "METADATA_UNRETRIEVABLE")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationResultStatus_ResultStatusType_StateTypeUnspecified
 *        Value "STATE_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2TransformationResultStatus_ResultStatusType_Success
 *        This will be set when the transformation and storing of it is
 *        successful. (Value: "SUCCESS")
 */
@property(nonatomic, copy, nullable) NSString *resultStatusType;

@end


/**
 *  Summary of a single transformation. Only one of 'transformation',
 *  'field_transformation', or 'record_suppress' will be set.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TransformationSummary : GTLRObject

/** Set if the transformation was limited to a specific FieldId. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2FieldId *field;

/**
 *  The field transformation that was applied. If multiple field transformations
 *  are requested for a single field, this list will contain all of them;
 *  otherwise, only one is supplied.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2FieldTransformation *> *fieldTransformations;

/** Set if the transformation was limited to a specific InfoType. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InfoType *infoType;

/** The specific suppression option these stats apply to. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2RecordSuppression *recordSuppress;

/** Collection of all transformations that took place or had an error. */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GooglePrivacyDlpV2SummaryResult *> *results;

/** The specific transformation these stats apply to. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2PrimitiveTransformation *transformation;

/**
 *  Total size in bytes that were transformed in some way.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *transformedBytes;

@end


/**
 *  Use this to have a random data crypto key generated. It will be discarded
 *  after the request finishes.
 */
@interface GTLRDLP_GooglePrivacyDlpV2TransientCryptoKey : GTLRObject

/**
 *  Required. Name of the key. This is an arbitrary string used to differentiate
 *  different keys. A unique key is generated per name: two separate
 *  `TransientCryptoKey` protos share the same generated key if their names are
 *  the same. When the data crypto key is generated, this name is not used in
 *  any way (repeating the api call will result in a different key being
 *  generated).
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  What event needs to occur for a new job to be started.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Trigger : GTLRObject

/** For use with hybrid jobs. Jobs must be manually created and finished. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Manual *manual;

/** Create a job on a repeating basis based on the elapse of time. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Schedule *schedule;

@end


/**
 *  Using raw keys is prone to security risks due to accidentally leaking the
 *  key. Choose another type of key if possible.
 */
@interface GTLRDLP_GooglePrivacyDlpV2UnwrappedCryptoKey : GTLRObject

/**
 *  Required. A 128/192/256 bit key.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *key;

@end


/**
 *  Request message for UpdateDeidentifyTemplate.
 */
@interface GTLRDLP_GooglePrivacyDlpV2UpdateDeidentifyTemplateRequest : GTLRObject

/** New DeidentifyTemplate value. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2DeidentifyTemplate *deidentifyTemplate;

/**
 *  Mask to control which fields get updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Request message for UpdateInspectTemplate.
 */
@interface GTLRDLP_GooglePrivacyDlpV2UpdateInspectTemplateRequest : GTLRObject

/** New InspectTemplate value. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2InspectTemplate *inspectTemplate;

/**
 *  Mask to control which fields get updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Request message for UpdateJobTrigger.
 */
@interface GTLRDLP_GooglePrivacyDlpV2UpdateJobTriggerRequest : GTLRObject

/** New JobTrigger value. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2JobTrigger *jobTrigger;

/**
 *  Mask to control which fields get updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Request message for UpdateStoredInfoType.
 */
@interface GTLRDLP_GooglePrivacyDlpV2UpdateStoredInfoTypeRequest : GTLRObject

/**
 *  Updated configuration for the storedInfoType. If not provided, a new version
 *  of the storedInfoType will be created with the existing configuration.
 */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2StoredInfoTypeConfig *config;

/**
 *  Mask to control which fields get updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Set of primitive values supported by the system. Note that for the purposes
 *  of inspection or transformation, the number of bytes considered to comprise
 *  a 'Value' is based on its representation as a UTF-8 encoded string. For
 *  example, if 'integer_value' is set to 123456789, the number of bytes would
 *  be counted as 9, even though an int64 only holds up to 8 bytes of data.
 */
@interface GTLRDLP_GooglePrivacyDlpV2Value : GTLRObject

/**
 *  boolean
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *booleanValue;

/** date */
@property(nonatomic, strong, nullable) GTLRDLP_GoogleTypeDate *dateValue;

/**
 *  day of week
 *
 *  Likely values:
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Value_DayOfWeekValue_DayOfWeekUnspecified
 *        The day of the week is unspecified. (Value: "DAY_OF_WEEK_UNSPECIFIED")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Value_DayOfWeekValue_Friday Friday
 *        (Value: "FRIDAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Value_DayOfWeekValue_Monday Monday
 *        (Value: "MONDAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Value_DayOfWeekValue_Saturday Saturday
 *        (Value: "SATURDAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Value_DayOfWeekValue_Sunday Sunday
 *        (Value: "SUNDAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Value_DayOfWeekValue_Thursday Thursday
 *        (Value: "THURSDAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Value_DayOfWeekValue_Tuesday Tuesday
 *        (Value: "TUESDAY")
 *    @arg @c kGTLRDLP_GooglePrivacyDlpV2Value_DayOfWeekValue_Wednesday
 *        Wednesday (Value: "WEDNESDAY")
 */
@property(nonatomic, copy, nullable) NSString *dayOfWeekValue;

/**
 *  float
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *floatValue;

/**
 *  integer
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *integerValue;

/** string */
@property(nonatomic, copy, nullable) NSString *stringValue;

/** timestamp */
@property(nonatomic, strong, nullable) GTLRDateTime *timestampValue;

/** time of day */
@property(nonatomic, strong, nullable) GTLRDLP_GoogleTypeTimeOfDay *timeValue;

@end


/**
 *  A value of a field, including its frequency.
 */
@interface GTLRDLP_GooglePrivacyDlpV2ValueFrequency : GTLRObject

/**
 *  How many times the value is contained in the field.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/** A value contained in the field in question. */
@property(nonatomic, strong, nullable) GTLRDLP_GooglePrivacyDlpV2Value *value;

@end


/**
 *  Details about each available version for an infotype.
 */
@interface GTLRDLP_GooglePrivacyDlpV2VersionDescription : GTLRObject

/**
 *  Description of the version.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Name of the version */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Message defining a list of words or phrases to search for in the data.
 */
@interface GTLRDLP_GooglePrivacyDlpV2WordList : GTLRObject

/**
 *  Words or phrases defining the dictionary. The dictionary must contain at
 *  least one phrase and every phrase must contain at least 2 characters that
 *  are letters or digits. [required]
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *words;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRDLP_GoogleProtobufEmpty : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRDLP_GoogleRpcStatus : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDLP_GoogleRpcStatus_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRDLP_GoogleRpcStatus_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDLP_GoogleRpcStatus_Details_Item : GTLRObject
@end


/**
 *  Represents a whole or partial calendar date, such as a birthday. The time of
 *  day and time zone are either specified elsewhere or are insignificant. The
 *  date is relative to the Gregorian Calendar. This can represent one of the
 *  following: * A full date, with non-zero year, month, and day values. * A
 *  month and day, with a zero year (for example, an anniversary). * A year on
 *  its own, with a zero month and a zero day. * A year and month, with a zero
 *  day (for example, a credit card expiration date). Related types: *
 *  google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
@interface GTLRDLP_GoogleTypeDate : GTLRObject

/**
 *  Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
 *  to specify a year by itself or a year and month where the day isn't
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of a year. Must be from 1 to 12, or 0 to specify a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  Represents a time of day. The date and time zone are either not significant
 *  or are specified elsewhere. An API may choose to allow leap seconds. Related
 *  types are google.type.Date and `google.protobuf.Timestamp`.
 */
@interface GTLRDLP_GoogleTypeTimeOfDay : GTLRObject

/**
 *  Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to
 *  allow the value "24:00:00" for scenarios like business closing time.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hours;

/**
 *  Minutes of hour of day. Must be from 0 to 59.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minutes;

/**
 *  Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Seconds of minutes of the time. Must normally be from 0 to 59. An API may
 *  allow the value 60 if it allows leap-seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
