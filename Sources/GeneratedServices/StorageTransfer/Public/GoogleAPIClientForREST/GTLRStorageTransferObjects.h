// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Storage Transfer API (storagetransfer/v1)
// Description:
//   Transfers data from external data sources to a Google Cloud Storage bucket
//   or between Google Cloud Storage buckets.
// Documentation:
//   https://cloud.google.com/storage-transfer/docs

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRStorageTransfer_AgentPool;
@class GTLRStorageTransfer_AwsAccessKey;
@class GTLRStorageTransfer_AwsS3CompatibleData;
@class GTLRStorageTransfer_AwsS3Data;
@class GTLRStorageTransfer_AzureBlobStorageData;
@class GTLRStorageTransfer_AzureCredentials;
@class GTLRStorageTransfer_BandwidthLimit;
@class GTLRStorageTransfer_Date;
@class GTLRStorageTransfer_ErrorLogEntry;
@class GTLRStorageTransfer_ErrorSummary;
@class GTLRStorageTransfer_GcsData;
@class GTLRStorageTransfer_HttpData;
@class GTLRStorageTransfer_LoggingConfig;
@class GTLRStorageTransfer_MetadataOptions;
@class GTLRStorageTransfer_NotificationConfig;
@class GTLRStorageTransfer_ObjectConditions;
@class GTLRStorageTransfer_Operation;
@class GTLRStorageTransfer_Operation_Metadata;
@class GTLRStorageTransfer_Operation_Response;
@class GTLRStorageTransfer_PosixFilesystem;
@class GTLRStorageTransfer_S3CompatibleMetadata;
@class GTLRStorageTransfer_Schedule;
@class GTLRStorageTransfer_Status;
@class GTLRStorageTransfer_Status_Details_Item;
@class GTLRStorageTransfer_TimeOfDay;
@class GTLRStorageTransfer_TransferCounters;
@class GTLRStorageTransfer_TransferJob;
@class GTLRStorageTransfer_TransferManifest;
@class GTLRStorageTransfer_TransferOptions;
@class GTLRStorageTransfer_TransferSpec;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_AgentPool.state

/**
 *  Determines that the AgentPool is created for use. At this state, Agents can
 *  join the AgentPool and participate in the transfer jobs in that pool.
 *
 *  Value: "CREATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_AgentPool_State_Created;
/**
 *  This is an initialization state. During this stage, the resources such as
 *  Pub/Sub topics are allocated for the AgentPool.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_AgentPool_State_Creating;
/**
 *  Determines that the AgentPool deletion has been initiated, and all the
 *  resources are scheduled to be cleaned up and freed.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_AgentPool_State_Deleting;
/**
 *  Default value. This value is unused.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_AgentPool_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_ErrorSummary.errorCode

/**
 *  The operation was aborted, typically due to a concurrency issue such as a
 *  sequencer check failure or transaction abort. See the guidelines above for
 *  deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP
 *  Mapping: 409 Conflict
 *
 *  Value: "ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_Aborted;
/**
 *  The entity that a client attempted to create (e.g., file or directory)
 *  already exists. HTTP Mapping: 409 Conflict
 *
 *  Value: "ALREADY_EXISTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_AlreadyExists;
/**
 *  The operation was cancelled, typically by the caller. HTTP Mapping: 499
 *  Client Closed Request
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_Cancelled;
/**
 *  Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server
 *  Error
 *
 *  Value: "DATA_LOSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_DataLoss;
/**
 *  The deadline expired before the operation could complete. For operations
 *  that change the state of the system, this error may be returned even if the
 *  operation has completed successfully. For example, a successful response
 *  from a server could have been delayed long enough for the deadline to
 *  expire. HTTP Mapping: 504 Gateway Timeout
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_DeadlineExceeded;
/**
 *  The operation was rejected because the system is not in a state required for
 *  the operation's execution. For example, the directory to be deleted is
 *  non-empty, an rmdir operation is applied to a non-directory, etc. Service
 *  implementors can use the following guidelines to decide between
 *  `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE`
 *  if the client can retry just the failing call. (b) Use `ABORTED` if the
 *  client should retry at a higher level. For example, when a client-specified
 *  test-and-set fails, indicating the client should restart a read-modify-write
 *  sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until
 *  the system state has been explicitly fixed. For example, if an "rmdir" fails
 *  because the directory is non-empty, `FAILED_PRECONDITION` should be returned
 *  since the client should not retry unless the files are deleted from the
 *  directory. HTTP Mapping: 400 Bad Request
 *
 *  Value: "FAILED_PRECONDITION"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_FailedPrecondition;
/**
 *  Internal errors. This means that some invariants expected by the underlying
 *  system have been broken. This error code is reserved for serious errors.
 *  HTTP Mapping: 500 Internal Server Error
 *
 *  Value: "INTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_Internal;
/**
 *  The client specified an invalid argument. Note that this differs from
 *  `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are
 *  problematic regardless of the state of the system (e.g., a malformed file
 *  name). HTTP Mapping: 400 Bad Request
 *
 *  Value: "INVALID_ARGUMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_InvalidArgument;
/**
 *  Some requested entity (e.g., file or directory) was not found. Note to
 *  server developers: if a request is denied for an entire class of users, such
 *  as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be
 *  used. If a request is denied for some users within a class of users, such as
 *  user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping:
 *  404 Not Found
 *
 *  Value: "NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_NotFound;
/**
 *  Not an error; returned on success. HTTP Mapping: 200 OK
 *
 *  Value: "OK"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_Ok;
/**
 *  The operation was attempted past the valid range. E.g., seeking or reading
 *  past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem
 *  that may be fixed if the system state changes. For example, a 32-bit file
 *  system will generate `INVALID_ARGUMENT` if asked to read at an offset that
 *  is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked
 *  to read from an offset past the current file size. There is a fair bit of
 *  overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using
 *  `OUT_OF_RANGE` (the more specific error) when it applies so that callers who
 *  are iterating through a space can easily look for an `OUT_OF_RANGE` error to
 *  detect when they are done. HTTP Mapping: 400 Bad Request
 *
 *  Value: "OUT_OF_RANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_OutOfRange;
/**
 *  The caller does not have permission to execute the specified operation.
 *  `PERMISSION_DENIED` must not be used for rejections caused by exhausting
 *  some resource (use `RESOURCE_EXHAUSTED` instead for those errors).
 *  `PERMISSION_DENIED` must not be used if the caller can not be identified
 *  (use `UNAUTHENTICATED` instead for those errors). This error code does not
 *  imply the request is valid or the requested entity exists or satisfies other
 *  pre-conditions. HTTP Mapping: 403 Forbidden
 *
 *  Value: "PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_PermissionDenied;
/**
 *  Some resource has been exhausted, perhaps a per-user quota, or perhaps the
 *  entire file system is out of space. HTTP Mapping: 429 Too Many Requests
 *
 *  Value: "RESOURCE_EXHAUSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_ResourceExhausted;
/**
 *  The request does not have valid authentication credentials for the
 *  operation. HTTP Mapping: 401 Unauthorized
 *
 *  Value: "UNAUTHENTICATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_Unauthenticated;
/**
 *  The service is currently unavailable. This is most likely a transient
 *  condition, which can be corrected by retrying with a backoff. Note that it
 *  is not always safe to retry non-idempotent operations. See the guidelines
 *  above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and
 *  `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable
 *
 *  Value: "UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_Unavailable;
/**
 *  The operation is not implemented or is not supported/enabled in this
 *  service. HTTP Mapping: 501 Not Implemented
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_Unimplemented;
/**
 *  Unknown error. For example, this error may be returned when a `Status` value
 *  received from another address space belongs to an error space that is not
 *  known in this address space. Also errors raised by APIs that do not return
 *  enough error information may be converted to this error. HTTP Mapping: 500
 *  Internal Server Error
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_ErrorSummary_ErrorCode_Unknown;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_LoggingConfig.logActions

/**
 *  Copying objects to Google Cloud Storage.
 *
 *  Value: "COPY"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_LoggingConfig_LogActions_Copy;
/**
 *  Deleting objects at the source or the destination.
 *
 *  Value: "DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_LoggingConfig_LogActions_Delete;
/**
 *  Listing objects in a bucket.
 *
 *  Value: "FIND"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_LoggingConfig_LogActions_Find;
/**
 *  Default value. This value is unused.
 *
 *  Value: "LOGGABLE_ACTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_LoggingConfig_LogActions_LoggableActionUnspecified;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_LoggingConfig.logActionStates

/**
 *  `LoggableAction` terminated in an error state. `FAILED` actions are logged
 *  as ERROR.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_LoggingConfig_LogActionStates_Failed;
/**
 *  Default value. This value is unused.
 *
 *  Value: "LOGGABLE_ACTION_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_LoggingConfig_LogActionStates_LoggableActionStateUnspecified;
/**
 *  `LoggableAction` completed successfully. `SUCCEEDED` actions are logged as
 *  INFO.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_LoggingConfig_LogActionStates_Succeeded;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_MetadataOptions.acl

/**
 *  Use the destination bucket's default object ACLS, if applicable.
 *
 *  Value: "ACL_DESTINATION_BUCKET_DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_Acl_AclDestinationBucketDefault;
/**
 *  Preserve the object's original ACLs. This requires the service account to
 *  have `storage.objects.getIamPolicy` permission for the source object.
 *  [Uniform bucket-level
 *  access](https://cloud.google.com/storage/docs/uniform-bucket-level-access)
 *  must not be enabled on either the source or destination buckets.
 *
 *  Value: "ACL_PRESERVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_Acl_AclPreserve;
/**
 *  ACL behavior is unspecified.
 *
 *  Value: "ACL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_Acl_AclUnspecified;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_MetadataOptions.gid

/**
 *  Preserve GID during a transfer job.
 *
 *  Value: "GID_NUMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_Gid_GidNumber;
/**
 *  Do not preserve GID during a transfer job.
 *
 *  Value: "GID_SKIP"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_Gid_GidSkip;
/**
 *  GID behavior is unspecified.
 *
 *  Value: "GID_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_Gid_GidUnspecified;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_MetadataOptions.kmsKey

/**
 *  Use the destination bucket's default encryption settings.
 *
 *  Value: "KMS_KEY_DESTINATION_BUCKET_DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_KmsKey_KmsKeyDestinationBucketDefault;
/**
 *  Preserve the object's original Cloud KMS customer-managed encryption key
 *  (CMEK) if present. Objects that do not use a Cloud KMS encryption key will
 *  be encrypted using the destination bucket's encryption settings.
 *
 *  Value: "KMS_KEY_PRESERVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_KmsKey_KmsKeyPreserve;
/**
 *  KmsKey behavior is unspecified.
 *
 *  Value: "KMS_KEY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_KmsKey_KmsKeyUnspecified;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_MetadataOptions.mode

/**
 *  Preserve mode during a transfer job.
 *
 *  Value: "MODE_PRESERVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_Mode_ModePreserve;
/**
 *  Do not preserve mode during a transfer job.
 *
 *  Value: "MODE_SKIP"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_Mode_ModeSkip;
/**
 *  Mode behavior is unspecified.
 *
 *  Value: "MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_Mode_ModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_MetadataOptions.storageClass

/**
 *  Set the storage class to ARCHIVE.
 *
 *  Value: "STORAGE_CLASS_ARCHIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_StorageClass_StorageClassArchive;
/**
 *  Set the storage class to COLDLINE.
 *
 *  Value: "STORAGE_CLASS_COLDLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_StorageClass_StorageClassColdline;
/**
 *  Use the destination bucket's default storage class.
 *
 *  Value: "STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_StorageClass_StorageClassDestinationBucketDefault;
/**
 *  Set the storage class to NEARLINE.
 *
 *  Value: "STORAGE_CLASS_NEARLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_StorageClass_StorageClassNearline;
/**
 *  Preserve the object's original storage class. This is only supported for
 *  transfers from Google Cloud Storage buckets.
 *
 *  Value: "STORAGE_CLASS_PRESERVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_StorageClass_StorageClassPreserve;
/**
 *  Set the storage class to STANDARD.
 *
 *  Value: "STORAGE_CLASS_STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_StorageClass_StorageClassStandard;
/**
 *  Storage class behavior is unspecified.
 *
 *  Value: "STORAGE_CLASS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_StorageClass_StorageClassUnspecified;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_MetadataOptions.symlink

/**
 *  Preserve symlinks during a transfer job.
 *
 *  Value: "SYMLINK_PRESERVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_Symlink_SymlinkPreserve;
/**
 *  Do not preserve symlinks during a transfer job.
 *
 *  Value: "SYMLINK_SKIP"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_Symlink_SymlinkSkip;
/**
 *  Symlink behavior is unspecified.
 *
 *  Value: "SYMLINK_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_Symlink_SymlinkUnspecified;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_MetadataOptions.temporaryHold

/**
 *  Preserve the object's original temporary hold status.
 *
 *  Value: "TEMPORARY_HOLD_PRESERVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_TemporaryHold_TemporaryHoldPreserve;
/**
 *  Do not set a temporary hold on the destination object.
 *
 *  Value: "TEMPORARY_HOLD_SKIP"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_TemporaryHold_TemporaryHoldSkip;
/**
 *  Temporary hold behavior is unspecified.
 *
 *  Value: "TEMPORARY_HOLD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_TemporaryHold_TemporaryHoldUnspecified;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_MetadataOptions.timeCreated

/**
 *  Preserves the source object's `timeCreated` metadata in the `customTime`
 *  field in the destination object. Note that any value stored in the source
 *  object's `customTime` field will not be propagated to the destination
 *  object.
 *
 *  Value: "TIME_CREATED_PRESERVE_AS_CUSTOM_TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_TimeCreated_TimeCreatedPreserveAsCustomTime;
/**
 *  Do not preserve the `timeCreated` metadata from the source object.
 *
 *  Value: "TIME_CREATED_SKIP"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_TimeCreated_TimeCreatedSkip;
/**
 *  TimeCreated behavior is unspecified.
 *
 *  Value: "TIME_CREATED_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_TimeCreated_TimeCreatedUnspecified;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_MetadataOptions.uid

/**
 *  Preserve UID during a transfer job.
 *
 *  Value: "UID_NUMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_Uid_UidNumber;
/**
 *  Do not preserve UID during a transfer job.
 *
 *  Value: "UID_SKIP"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_Uid_UidSkip;
/**
 *  UID behavior is unspecified.
 *
 *  Value: "UID_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_MetadataOptions_Uid_UidUnspecified;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_NotificationConfig.eventTypes

/**
 *  Illegal value, to avoid allowing a default.
 *
 *  Value: "EVENT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_NotificationConfig_EventTypes_EventTypeUnspecified;
/**
 *  `TransferOperation` completed with status ABORTED.
 *
 *  Value: "TRANSFER_OPERATION_ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_NotificationConfig_EventTypes_TransferOperationAborted;
/**
 *  `TransferOperation` completed with status FAILED.
 *
 *  Value: "TRANSFER_OPERATION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_NotificationConfig_EventTypes_TransferOperationFailed;
/**
 *  `TransferOperation` completed with status SUCCESS.
 *
 *  Value: "TRANSFER_OPERATION_SUCCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_NotificationConfig_EventTypes_TransferOperationSuccess;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_NotificationConfig.payloadFormat

/**
 *  `TransferOperation` is [formatted as a JSON
 *  response](https://developers.google.com/protocol-buffers/docs/proto3#json),
 *  in application/json.
 *
 *  Value: "JSON"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_NotificationConfig_PayloadFormat_Json;
/**
 *  No payload is included with the notification.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_NotificationConfig_PayloadFormat_None;
/**
 *  Illegal value, to avoid allowing a default.
 *
 *  Value: "PAYLOAD_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_NotificationConfig_PayloadFormat_PayloadFormatUnspecified;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_S3CompatibleMetadata.authMethod

/**
 *  Auth requests with AWS SigV2.
 *
 *  Value: "AUTH_METHOD_AWS_SIGNATURE_V2"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_S3CompatibleMetadata_AuthMethod_AuthMethodAwsSignatureV2;
/**
 *  Auth requests with AWS SigV4.
 *
 *  Value: "AUTH_METHOD_AWS_SIGNATURE_V4"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_S3CompatibleMetadata_AuthMethod_AuthMethodAwsSignatureV4;
/**
 *  AuthMethod is not specified.
 *
 *  Value: "AUTH_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_S3CompatibleMetadata_AuthMethod_AuthMethodUnspecified;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_S3CompatibleMetadata.listApi

/**
 *  ListApi is not specified.
 *
 *  Value: "LIST_API_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_S3CompatibleMetadata_ListApi_ListApiUnspecified;
/**
 *  Legacy ListObjects API.
 *
 *  Value: "LIST_OBJECTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_S3CompatibleMetadata_ListApi_ListObjects;
/**
 *  Perform listing using ListObjectsV2 API.
 *
 *  Value: "LIST_OBJECTS_V2"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_S3CompatibleMetadata_ListApi_ListObjectsV2;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_S3CompatibleMetadata.protocol

/**
 *  Not recommended: This sends data in clear-text. This is only appropriate
 *  within a closed network or for publicly available data. Perform requests
 *  using HTTP.
 *
 *  Value: "NETWORK_PROTOCOL_HTTP"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_S3CompatibleMetadata_Protocol_NetworkProtocolHttp;
/**
 *  Perform requests using HTTPS.
 *
 *  Value: "NETWORK_PROTOCOL_HTTPS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_S3CompatibleMetadata_Protocol_NetworkProtocolHttps;
/**
 *  NetworkProtocol is not specified.
 *
 *  Value: "NETWORK_PROTOCOL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_S3CompatibleMetadata_Protocol_NetworkProtocolUnspecified;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_S3CompatibleMetadata.requestModel

/**
 *  Perform requests using Path Style. Example:
 *  https://s3.region.amazonaws.com/bucket-name/key-name
 *
 *  Value: "REQUEST_MODEL_PATH_STYLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_S3CompatibleMetadata_RequestModel_RequestModelPathStyle;
/**
 *  RequestModel is not specified.
 *
 *  Value: "REQUEST_MODEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_S3CompatibleMetadata_RequestModel_RequestModelUnspecified;
/**
 *  Perform requests using Virtual Hosted Style. Example:
 *  https://bucket-name.s3.region.amazonaws.com/key-name
 *
 *  Value: "REQUEST_MODEL_VIRTUAL_HOSTED_STYLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_S3CompatibleMetadata_RequestModel_RequestModelVirtualHostedStyle;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_TransferJob.status

/**
 *  This is a soft delete state. After a transfer job is set to this state, the
 *  job and all the transfer executions are subject to garbage collection.
 *  Transfer jobs become eligible for garbage collection 30 days after their
 *  status is set to `DELETED`.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_TransferJob_Status_Deleted;
/**
 *  New transfers are not scheduled.
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_TransferJob_Status_Disabled;
/**
 *  New transfers are performed based on the schedule.
 *
 *  Value: "ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_TransferJob_Status_Enabled;
/**
 *  Zero is an illegal value.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_TransferJob_Status_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_TransferOperation.status

/**
 *  Aborted by the user.
 *
 *  Value: "ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_TransferOperation_Status_Aborted;
/**
 *  Terminated due to an unrecoverable failure.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_TransferOperation_Status_Failed;
/**
 *  In progress.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_TransferOperation_Status_InProgress;
/**
 *  Paused.
 *
 *  Value: "PAUSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_TransferOperation_Status_Paused;
/**
 *  Temporarily delayed by the system. No user action is required.
 *
 *  Value: "QUEUED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_TransferOperation_Status_Queued;
/**
 *  Zero is an illegal value.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_TransferOperation_Status_StatusUnspecified;
/**
 *  Completed successfully.
 *
 *  Value: "SUCCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_TransferOperation_Status_Success;

// ----------------------------------------------------------------------------
// GTLRStorageTransfer_TransferOptions.overwriteWhen

/**
 *  Always overwrite the destination object with the source object, even if the
 *  HTTP Etags or checksum values are the same.
 *
 *  Value: "ALWAYS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_TransferOptions_OverwriteWhen_Always;
/**
 *  Overwrites destination objects with the source objects, only if the objects
 *  have the same name but different HTTP ETags or checksum values.
 *
 *  Value: "DIFFERENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_TransferOptions_OverwriteWhen_Different;
/**
 *  Never overwrites a destination object if a source object has the same name.
 *  In this case, the source object is not transferred.
 *
 *  Value: "NEVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_TransferOptions_OverwriteWhen_Never;
/**
 *  Overwrite behavior is unspecified.
 *
 *  Value: "OVERWRITE_WHEN_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageTransfer_TransferOptions_OverwriteWhen_OverwriteWhenUnspecified;

/**
 *  Represents an On-Premises Agent pool.
 */
@interface GTLRStorageTransfer_AgentPool : GTLRObject

/**
 *  Specifies the bandwidth limit details. If this field is unspecified, the
 *  default value is set as 'No Limit'.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_BandwidthLimit *bandwidthLimit;

/** Specifies the client-specified AgentPool description. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Required. Specifies a unique string that identifies the agent pool. Format:
 *  `projects/{project_id}/agentPools/{agent_pool_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Specifies the state of the AgentPool.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_AgentPool_State_Created Determines that the
 *        AgentPool is created for use. At this state, Agents can join the
 *        AgentPool and participate in the transfer jobs in that pool. (Value:
 *        "CREATED")
 *    @arg @c kGTLRStorageTransfer_AgentPool_State_Creating This is an
 *        initialization state. During this stage, the resources such as Pub/Sub
 *        topics are allocated for the AgentPool. (Value: "CREATING")
 *    @arg @c kGTLRStorageTransfer_AgentPool_State_Deleting Determines that the
 *        AgentPool deletion has been initiated, and all the resources are
 *        scheduled to be cleaned up and freed. (Value: "DELETING")
 *    @arg @c kGTLRStorageTransfer_AgentPool_State_StateUnspecified Default
 *        value. This value is unused. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  AWS access key (see [AWS Security
 *  Credentials](https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html)).
 *  For information on our data retention policy for user credentials, see [User
 *  credentials](/storage-transfer/docs/data-retention#user-credentials).
 */
@interface GTLRStorageTransfer_AwsAccessKey : GTLRObject

/** Required. AWS access key ID. */
@property(nonatomic, copy, nullable) NSString *accessKeyId;

/**
 *  Required. AWS secret access key. This field is not returned in RPC
 *  responses.
 */
@property(nonatomic, copy, nullable) NSString *secretAccessKey;

@end


/**
 *  An AwsS3CompatibleData resource.
 */
@interface GTLRStorageTransfer_AwsS3CompatibleData : GTLRObject

/** Required. Specifies the name of the bucket. */
@property(nonatomic, copy, nullable) NSString *bucketName;

/** Required. Specifies the endpoint of the storage service. */
@property(nonatomic, copy, nullable) NSString *endpoint;

/**
 *  Specifies the root path to transfer objects. Must be an empty string or full
 *  path name that ends with a '/'. This field is treated as an object prefix.
 *  As such, it should generally not begin with a '/'.
 */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Specifies the region to sign requests with. This can be left blank if
 *  requests should be signed with an empty region.
 */
@property(nonatomic, copy, nullable) NSString *region;

/** A S3 compatible metadata. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_S3CompatibleMetadata *s3Metadata;

@end


/**
 *  An AwsS3Data resource can be a data source, but not a data sink. In an
 *  AwsS3Data resource, an object's name is the S3 object's key name.
 */
@interface GTLRStorageTransfer_AwsS3Data : GTLRObject

/**
 *  Input only. AWS access key used to sign the API requests to the AWS S3
 *  bucket. Permissions on the bucket must be granted to the access ID of the
 *  AWS access key. For information on our data retention policy for user
 *  credentials, see [User
 *  credentials](/storage-transfer/docs/data-retention#user-credentials).
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_AwsAccessKey *awsAccessKey;

/**
 *  Required. S3 Bucket name (see [Creating a
 *  bucket](https://docs.aws.amazon.com/AmazonS3/latest/dev/create-bucket-get-location-example.html)).
 */
@property(nonatomic, copy, nullable) NSString *bucketName;

/**
 *  Root path to transfer objects. Must be an empty string or full path name
 *  that ends with a '/'. This field is treated as an object prefix. As such, it
 *  should generally not begin with a '/'.
 */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  The Amazon Resource Name (ARN) of the role to support temporary credentials
 *  via `AssumeRoleWithWebIdentity`. For more information about ARNs, see [IAM
 *  ARNs](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-arns).
 *  When a role ARN is provided, Transfer Service fetches temporary credentials
 *  for the session using a `AssumeRoleWithWebIdentity` call for the provided
 *  role using the GoogleServiceAccount for this project.
 */
@property(nonatomic, copy, nullable) NSString *roleArn;

@end


/**
 *  An AzureBlobStorageData resource can be a data source, but not a data sink.
 *  An AzureBlobStorageData resource represents one Azure container. The storage
 *  account determines the [Azure
 *  endpoint](https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account#storage-account-endpoints).
 *  In an AzureBlobStorageData resource, a blobs's name is the [Azure Blob
 *  Storage blob's key
 *  name](https://docs.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata#blob-names).
 */
@interface GTLRStorageTransfer_AzureBlobStorageData : GTLRObject

/**
 *  Required. Input only. Credentials used to authenticate API requests to
 *  Azure. For information on our data retention policy for user credentials,
 *  see [User
 *  credentials](/storage-transfer/docs/data-retention#user-credentials).
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_AzureCredentials *azureCredentials;

/** Required. The container to transfer from the Azure Storage account. */
@property(nonatomic, copy, nullable) NSString *container;

/**
 *  Root path to transfer objects. Must be an empty string or full path name
 *  that ends with a '/'. This field is treated as an object prefix. As such, it
 *  should generally not begin with a '/'.
 */
@property(nonatomic, copy, nullable) NSString *path;

/** Required. The name of the Azure Storage account. */
@property(nonatomic, copy, nullable) NSString *storageAccount;

@end


/**
 *  Azure credentials For information on our data retention policy for user
 *  credentials, see [User
 *  credentials](/storage-transfer/docs/data-retention#user-credentials).
 */
@interface GTLRStorageTransfer_AzureCredentials : GTLRObject

/**
 *  Required. Azure shared access signature (SAS). For more information about
 *  SAS, see [Grant limited access to Azure Storage resources using shared
 *  access signatures
 *  (SAS)](https://docs.microsoft.com/en-us/azure/storage/common/storage-sas-overview).
 */
@property(nonatomic, copy, nullable) NSString *sasToken;

@end


/**
 *  Specifies a bandwidth limit for an agent pool.
 */
@interface GTLRStorageTransfer_BandwidthLimit : GTLRObject

/**
 *  Bandwidth rate in megabytes per second, distributed across all the agents in
 *  the pool.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *limitMbps;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRStorageTransfer_CancelOperationRequest : GTLRObject
@end


/**
 *  Represents a whole or partial calendar date, such as a birthday. The time of
 *  day and time zone are either specified elsewhere or are insignificant. The
 *  date is relative to the Gregorian Calendar. This can represent one of the
 *  following: * A full date, with non-zero year, month, and day values. * A
 *  month and day, with a zero year (for example, an anniversary). * A year on
 *  its own, with a zero month and a zero day. * A year and month, with a zero
 *  day (for example, a credit card expiration date). Related types: *
 *  google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
@interface GTLRStorageTransfer_Date : GTLRObject

/**
 *  Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
 *  to specify a year by itself or a year and month where the day isn't
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of a year. Must be from 1 to 12, or 0 to specify a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRStorageTransfer_Empty : GTLRObject
@end


/**
 *  An entry describing an error that has occurred.
 */
@interface GTLRStorageTransfer_ErrorLogEntry : GTLRObject

/** A list of messages that carry the error details. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *errorDetails;

/**
 *  Required. A URL that refers to the target (a data source, a data sink, or an
 *  object) with which the error is associated.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  A summary of errors by error code, plus a count and sample error log
 *  entries.
 */
@interface GTLRStorageTransfer_ErrorSummary : GTLRObject

/**
 *  Required.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_Aborted The operation
 *        was aborted, typically due to a concurrency issue such as a sequencer
 *        check failure or transaction abort. See the guidelines above for
 *        deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`.
 *        HTTP Mapping: 409 Conflict (Value: "ABORTED")
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_AlreadyExists The
 *        entity that a client attempted to create (e.g., file or directory)
 *        already exists. HTTP Mapping: 409 Conflict (Value: "ALREADY_EXISTS")
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_Cancelled The
 *        operation was cancelled, typically by the caller. HTTP Mapping: 499
 *        Client Closed Request (Value: "CANCELLED")
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_DataLoss Unrecoverable
 *        data loss or corruption. HTTP Mapping: 500 Internal Server Error
 *        (Value: "DATA_LOSS")
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_DeadlineExceeded The
 *        deadline expired before the operation could complete. For operations
 *        that change the state of the system, this error may be returned even
 *        if the operation has completed successfully. For example, a successful
 *        response from a server could have been delayed long enough for the
 *        deadline to expire. HTTP Mapping: 504 Gateway Timeout (Value:
 *        "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_FailedPrecondition The
 *        operation was rejected because the system is not in a state required
 *        for the operation's execution. For example, the directory to be
 *        deleted is non-empty, an rmdir operation is applied to a
 *        non-directory, etc. Service implementors can use the following
 *        guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and
 *        `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the
 *        failing call. (b) Use `ABORTED` if the client should retry at a higher
 *        level. For example, when a client-specified test-and-set fails,
 *        indicating the client should restart a read-modify-write sequence. (c)
 *        Use `FAILED_PRECONDITION` if the client should not retry until the
 *        system state has been explicitly fixed. For example, if an "rmdir"
 *        fails because the directory is non-empty, `FAILED_PRECONDITION` should
 *        be returned since the client should not retry unless the files are
 *        deleted from the directory. HTTP Mapping: 400 Bad Request (Value:
 *        "FAILED_PRECONDITION")
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_Internal Internal
 *        errors. This means that some invariants expected by the underlying
 *        system have been broken. This error code is reserved for serious
 *        errors. HTTP Mapping: 500 Internal Server Error (Value: "INTERNAL")
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_InvalidArgument The
 *        client specified an invalid argument. Note that this differs from
 *        `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are
 *        problematic regardless of the state of the system (e.g., a malformed
 *        file name). HTTP Mapping: 400 Bad Request (Value: "INVALID_ARGUMENT")
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_NotFound Some
 *        requested entity (e.g., file or directory) was not found. Note to
 *        server developers: if a request is denied for an entire class of
 *        users, such as gradual feature rollout or undocumented allowlist,
 *        `NOT_FOUND` may be used. If a request is denied for some users within
 *        a class of users, such as user-based access control,
 *        `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found (Value:
 *        "NOT_FOUND")
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_Ok Not an error;
 *        returned on success. HTTP Mapping: 200 OK (Value: "OK")
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_OutOfRange The
 *        operation was attempted past the valid range. E.g., seeking or reading
 *        past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a
 *        problem that may be fixed if the system state changes. For example, a
 *        32-bit file system will generate `INVALID_ARGUMENT` if asked to read
 *        at an offset that is not in the range [0,2^32-1], but it will generate
 *        `OUT_OF_RANGE` if asked to read from an offset past the current file
 *        size. There is a fair bit of overlap between `FAILED_PRECONDITION` and
 *        `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific
 *        error) when it applies so that callers who are iterating through a
 *        space can easily look for an `OUT_OF_RANGE` error to detect when they
 *        are done. HTTP Mapping: 400 Bad Request (Value: "OUT_OF_RANGE")
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_PermissionDenied The
 *        caller does not have permission to execute the specified operation.
 *        `PERMISSION_DENIED` must not be used for rejections caused by
 *        exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those
 *        errors). `PERMISSION_DENIED` must not be used if the caller can not be
 *        identified (use `UNAUTHENTICATED` instead for those errors). This
 *        error code does not imply the request is valid or the requested entity
 *        exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden
 *        (Value: "PERMISSION_DENIED")
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_ResourceExhausted Some
 *        resource has been exhausted, perhaps a per-user quota, or perhaps the
 *        entire file system is out of space. HTTP Mapping: 429 Too Many
 *        Requests (Value: "RESOURCE_EXHAUSTED")
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_Unauthenticated The
 *        request does not have valid authentication credentials for the
 *        operation. HTTP Mapping: 401 Unauthorized (Value: "UNAUTHENTICATED")
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_Unavailable The
 *        service is currently unavailable. This is most likely a transient
 *        condition, which can be corrected by retrying with a backoff. Note
 *        that it is not always safe to retry non-idempotent operations. See the
 *        guidelines above for deciding between `FAILED_PRECONDITION`,
 *        `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable
 *        (Value: "UNAVAILABLE")
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_Unimplemented The
 *        operation is not implemented or is not supported/enabled in this
 *        service. HTTP Mapping: 501 Not Implemented (Value: "UNIMPLEMENTED")
 *    @arg @c kGTLRStorageTransfer_ErrorSummary_ErrorCode_Unknown Unknown error.
 *        For example, this error may be returned when a `Status` value received
 *        from another address space belongs to an error space that is not known
 *        in this address space. Also errors raised by APIs that do not return
 *        enough error information may be converted to this error. HTTP Mapping:
 *        500 Internal Server Error (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *errorCode;

/**
 *  Required. Count of this type of error.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *errorCount;

/**
 *  Error samples. At most 5 error log entries are recorded for a given error
 *  code for a single transfer operation.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageTransfer_ErrorLogEntry *> *errorLogEntries;

@end


/**
 *  In a GcsData resource, an object's name is the Cloud Storage object's name
 *  and its "last modification time" refers to the object's `updated` property
 *  of Cloud Storage objects, which changes when the content or the metadata of
 *  the object is updated.
 */
@interface GTLRStorageTransfer_GcsData : GTLRObject

/**
 *  Required. Cloud Storage bucket name. Must meet [Bucket Name
 *  Requirements](/storage/docs/naming#requirements).
 */
@property(nonatomic, copy, nullable) NSString *bucketName;

/**
 *  Root path to transfer objects. Must be an empty string or full path name
 *  that ends with a '/'. This field is treated as an object prefix. As such, it
 *  should generally not begin with a '/'. The root path value must meet [Object
 *  Name Requirements](/storage/docs/naming#objectnames).
 */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  Google service account
 */
@interface GTLRStorageTransfer_GoogleServiceAccount : GTLRObject

/** Email address of the service account. */
@property(nonatomic, copy, nullable) NSString *accountEmail;

/** Unique identifier for the service account. */
@property(nonatomic, copy, nullable) NSString *subjectId;

@end


/**
 *  An HttpData resource specifies a list of objects on the web to be
 *  transferred over HTTP. The information of the objects to be transferred is
 *  contained in a file referenced by a URL. The first line in the file must be
 *  `"TsvHttpData-1.0"`, which specifies the format of the file. Subsequent
 *  lines specify the information of the list of objects, one object per list
 *  entry. Each entry has the following tab-delimited fields: * **HTTP URL** —
 *  The location of the object. * **Length** — The size of the object in bytes.
 *  * **MD5** — The base64-encoded MD5 hash of the object. For an example of a
 *  valid TSV file, see [Transferring data from
 *  URLs](https://cloud.google.com/storage-transfer/docs/create-url-list). When
 *  transferring data based on a URL list, keep the following in mind: * When an
 *  object located at `http(s)://hostname:port/` is transferred to a data sink,
 *  the name of the object at the data sink is `/`. * If the specified size of
 *  an object does not match the actual size of the object fetched, the object
 *  is not transferred. * If the specified MD5 does not match the MD5 computed
 *  from the transferred bytes, the object transfer fails. * Ensure that each
 *  URL you specify is publicly accessible. For example, in Cloud Storage you
 *  can [share an object publicly] (/storage/docs/cloud-console#_sharingdata)
 *  and get a link to it. * Storage Transfer Service obeys `robots.txt` rules
 *  and requires the source HTTP server to support `Range` requests and to
 *  return a `Content-Length` header in each response. * ObjectConditions have
 *  no effect when filtering objects to transfer.
 */
@interface GTLRStorageTransfer_HttpData : GTLRObject

/**
 *  Required. The URL that points to the file that stores the object list
 *  entries. This file must allow public access. Currently, only URLs with HTTP
 *  and HTTPS schemes are supported.
 */
@property(nonatomic, copy, nullable) NSString *listUrl;

@end


/**
 *  Response from ListAgentPools.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "agentPools" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRStorageTransfer_ListAgentPoolsResponse : GTLRCollectionObject

/**
 *  A list of agent pools.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageTransfer_AgentPool *> *agentPools;

/** The list next page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRStorageTransfer_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageTransfer_Operation *> *operations;

@end


/**
 *  Response from ListTransferJobs.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "transferJobs" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRStorageTransfer_ListTransferJobsResponse : GTLRCollectionObject

/** The list next page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of transfer jobs.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageTransfer_TransferJob *> *transferJobs;

@end


/**
 *  Specifies the logging behavior for transfer operations. For cloud-to-cloud
 *  transfers, logs are sent to Cloud Logging. See [Read transfer
 *  logs](https://cloud.google.com/storage-transfer/docs/read-transfer-logs) for
 *  details. For transfers to or from a POSIX file system, logs are stored in
 *  the Cloud Storage bucket that is the source or sink of the transfer. See
 *  [Managing Transfer for on-premises jobs]
 *  (https://cloud.google.com/storage-transfer/docs/managing-on-prem-jobs#viewing-logs)
 *  for details.
 */
@interface GTLRStorageTransfer_LoggingConfig : GTLRObject

/**
 *  For transfers with a PosixFilesystem source, this option enables the Cloud
 *  Storage transfer logs for this transfer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableOnpremGcsTransferLogs;

/**
 *  Specifies the actions to be logged. If empty, no logs are generated. Not
 *  supported for transfers with PosixFilesystem data sources; use
 *  enable_onprem_gcs_transfer_logs instead.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *logActions;

/**
 *  States in which `log_actions` are logged. If empty, no logs are generated.
 *  Not supported for transfers with PosixFilesystem data sources; use
 *  enable_onprem_gcs_transfer_logs instead.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *logActionStates;

@end


/**
 *  Specifies the metadata options for running a transfer.
 */
@interface GTLRStorageTransfer_MetadataOptions : GTLRObject

/**
 *  Specifies how each object's ACLs should be preserved for transfers between
 *  Google Cloud Storage buckets. If unspecified, the default behavior is the
 *  same as ACL_DESTINATION_BUCKET_DEFAULT.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_Acl_AclDestinationBucketDefault
 *        Use the destination bucket's default object ACLS, if applicable.
 *        (Value: "ACL_DESTINATION_BUCKET_DEFAULT")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_Acl_AclPreserve Preserve the
 *        object's original ACLs. This requires the service account to have
 *        `storage.objects.getIamPolicy` permission for the source object.
 *        [Uniform bucket-level
 *        access](https://cloud.google.com/storage/docs/uniform-bucket-level-access)
 *        must not be enabled on either the source or destination buckets.
 *        (Value: "ACL_PRESERVE")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_Acl_AclUnspecified ACL
 *        behavior is unspecified. (Value: "ACL_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *acl;

/**
 *  Specifies how each file's POSIX group ID (GID) attribute should be handled
 *  by the transfer. By default, GID is not preserved. Only applicable to
 *  transfers involving POSIX file systems, and ignored for other transfers.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_Gid_GidNumber Preserve GID
 *        during a transfer job. (Value: "GID_NUMBER")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_Gid_GidSkip Do not preserve
 *        GID during a transfer job. (Value: "GID_SKIP")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_Gid_GidUnspecified GID
 *        behavior is unspecified. (Value: "GID_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *gid;

/**
 *  Specifies how each object's Cloud KMS customer-managed encryption key (CMEK)
 *  is preserved for transfers between Google Cloud Storage buckets. If
 *  unspecified, the default behavior is the same as
 *  KMS_KEY_DESTINATION_BUCKET_DEFAULT.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_KmsKey_KmsKeyDestinationBucketDefault
 *        Use the destination bucket's default encryption settings. (Value:
 *        "KMS_KEY_DESTINATION_BUCKET_DEFAULT")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_KmsKey_KmsKeyPreserve
 *        Preserve the object's original Cloud KMS customer-managed encryption
 *        key (CMEK) if present. Objects that do not use a Cloud KMS encryption
 *        key will be encrypted using the destination bucket's encryption
 *        settings. (Value: "KMS_KEY_PRESERVE")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_KmsKey_KmsKeyUnspecified
 *        KmsKey behavior is unspecified. (Value: "KMS_KEY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *kmsKey;

/**
 *  Specifies how each file's mode attribute should be handled by the transfer.
 *  By default, mode is not preserved. Only applicable to transfers involving
 *  POSIX file systems, and ignored for other transfers.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_Mode_ModePreserve Preserve
 *        mode during a transfer job. (Value: "MODE_PRESERVE")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_Mode_ModeSkip Do not preserve
 *        mode during a transfer job. (Value: "MODE_SKIP")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_Mode_ModeUnspecified Mode
 *        behavior is unspecified. (Value: "MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  Specifies the storage class to set on objects being transferred to Google
 *  Cloud Storage buckets. If unspecified, the default behavior is the same as
 *  STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_StorageClass_StorageClassArchive
 *        Set the storage class to ARCHIVE. (Value: "STORAGE_CLASS_ARCHIVE")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_StorageClass_StorageClassColdline
 *        Set the storage class to COLDLINE. (Value: "STORAGE_CLASS_COLDLINE")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_StorageClass_StorageClassDestinationBucketDefault
 *        Use the destination bucket's default storage class. (Value:
 *        "STORAGE_CLASS_DESTINATION_BUCKET_DEFAULT")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_StorageClass_StorageClassNearline
 *        Set the storage class to NEARLINE. (Value: "STORAGE_CLASS_NEARLINE")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_StorageClass_StorageClassPreserve
 *        Preserve the object's original storage class. This is only supported
 *        for transfers from Google Cloud Storage buckets. (Value:
 *        "STORAGE_CLASS_PRESERVE")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_StorageClass_StorageClassStandard
 *        Set the storage class to STANDARD. (Value: "STORAGE_CLASS_STANDARD")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_StorageClass_StorageClassUnspecified
 *        Storage class behavior is unspecified. (Value:
 *        "STORAGE_CLASS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *storageClass;

/**
 *  Specifies how symlinks should be handled by the transfer. By default,
 *  symlinks are not preserved. Only applicable to transfers involving POSIX
 *  file systems, and ignored for other transfers.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_Symlink_SymlinkPreserve
 *        Preserve symlinks during a transfer job. (Value: "SYMLINK_PRESERVE")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_Symlink_SymlinkSkip Do not
 *        preserve symlinks during a transfer job. (Value: "SYMLINK_SKIP")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_Symlink_SymlinkUnspecified
 *        Symlink behavior is unspecified. (Value: "SYMLINK_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *symlink;

/**
 *  Specifies how each object's temporary hold status should be preserved for
 *  transfers between Google Cloud Storage buckets. If unspecified, the default
 *  behavior is the same as TEMPORARY_HOLD_PRESERVE.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_TemporaryHold_TemporaryHoldPreserve
 *        Preserve the object's original temporary hold status. (Value:
 *        "TEMPORARY_HOLD_PRESERVE")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_TemporaryHold_TemporaryHoldSkip
 *        Do not set a temporary hold on the destination object. (Value:
 *        "TEMPORARY_HOLD_SKIP")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_TemporaryHold_TemporaryHoldUnspecified
 *        Temporary hold behavior is unspecified. (Value:
 *        "TEMPORARY_HOLD_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *temporaryHold;

/**
 *  Specifies how each object's `timeCreated` metadata is preserved for
 *  transfers between Google Cloud Storage buckets. If unspecified, the default
 *  behavior is the same as TIME_CREATED_SKIP.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_TimeCreated_TimeCreatedPreserveAsCustomTime
 *        Preserves the source object's `timeCreated` metadata in the
 *        `customTime` field in the destination object. Note that any value
 *        stored in the source object's `customTime` field will not be
 *        propagated to the destination object. (Value:
 *        "TIME_CREATED_PRESERVE_AS_CUSTOM_TIME")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_TimeCreated_TimeCreatedSkip
 *        Do not preserve the `timeCreated` metadata from the source object.
 *        (Value: "TIME_CREATED_SKIP")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_TimeCreated_TimeCreatedUnspecified
 *        TimeCreated behavior is unspecified. (Value:
 *        "TIME_CREATED_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *timeCreated;

/**
 *  Specifies how each file's POSIX user ID (UID) attribute should be handled by
 *  the transfer. By default, UID is not preserved. Only applicable to transfers
 *  involving POSIX file systems, and ignored for other transfers.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_Uid_UidNumber Preserve UID
 *        during a transfer job. (Value: "UID_NUMBER")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_Uid_UidSkip Do not preserve
 *        UID during a transfer job. (Value: "UID_SKIP")
 *    @arg @c kGTLRStorageTransfer_MetadataOptions_Uid_UidUnspecified UID
 *        behavior is unspecified. (Value: "UID_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *uid;

@end


/**
 *  Specification to configure notifications published to Pub/Sub. Notifications
 *  are published to the customer-provided topic using the following
 *  `PubsubMessage.attributes`: * `"eventType"`: one of the EventType values *
 *  `"payloadFormat"`: one of the PayloadFormat values * `"projectId"`: the
 *  project_id of the `TransferOperation` * `"transferJobName"`: the
 *  transfer_job_name of the `TransferOperation` * `"transferOperationName"`:
 *  the name of the `TransferOperation` The `PubsubMessage.data` contains a
 *  TransferOperation resource formatted according to the specified
 *  `PayloadFormat`.
 */
@interface GTLRStorageTransfer_NotificationConfig : GTLRObject

/**
 *  Event types for which a notification is desired. If empty, send
 *  notifications for all event types.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *eventTypes;

/**
 *  Required. The desired format of the notification message payloads.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_NotificationConfig_PayloadFormat_Json
 *        `TransferOperation` is [formatted as a JSON
 *        response](https://developers.google.com/protocol-buffers/docs/proto3#json),
 *        in application/json. (Value: "JSON")
 *    @arg @c kGTLRStorageTransfer_NotificationConfig_PayloadFormat_None No
 *        payload is included with the notification. (Value: "NONE")
 *    @arg @c kGTLRStorageTransfer_NotificationConfig_PayloadFormat_PayloadFormatUnspecified
 *        Illegal value, to avoid allowing a default. (Value:
 *        "PAYLOAD_FORMAT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *payloadFormat;

/**
 *  Required. The `Topic.name` of the Pub/Sub topic to which to publish
 *  notifications. Must be of the format: `projects/{project}/topics/{topic}`.
 *  Not matching this format results in an INVALID_ARGUMENT error.
 */
@property(nonatomic, copy, nullable) NSString *pubsubTopic;

@end


/**
 *  Conditions that determine which objects are transferred. Applies only to
 *  Cloud Data Sources such as S3, Azure, and Cloud Storage. The "last
 *  modification time" refers to the time of the last change to the object's
 *  content or metadata — specifically, this is the `updated` property of Cloud
 *  Storage objects, the `LastModified` field of S3 objects, and the
 *  `Last-Modified` header of Azure blobs. Transfers with a PosixFilesystem
 *  source or destination don't support `ObjectConditions`.
 */
@interface GTLRStorageTransfer_ObjectConditions : GTLRObject

/**
 *  If you specify `exclude_prefixes`, Storage Transfer Service uses the items
 *  in the `exclude_prefixes` array to determine which objects to exclude from a
 *  transfer. Objects must not start with one of the matching `exclude_prefixes`
 *  for inclusion in a transfer. The following are requirements of
 *  `exclude_prefixes`: * Each exclude-prefix can contain any sequence of
 *  Unicode characters, to a max length of 1024 bytes when UTF8-encoded, and
 *  must not contain Carriage Return or Line Feed characters. Wildcard matching
 *  and regular expression matching are not supported. * Each exclude-prefix
 *  must omit the leading slash. For example, to exclude the object
 *  `s3://my-aws-bucket/logs/y=2015/requests.gz`, specify the exclude-prefix as
 *  `logs/y=2015/requests.gz`. * None of the exclude-prefix values can be empty,
 *  if specified. * Each exclude-prefix must exclude a distinct portion of the
 *  object namespace. No exclude-prefix may be a prefix of another
 *  exclude-prefix. * If include_prefixes is specified, then each exclude-prefix
 *  must start with the value of a path explicitly included by
 *  `include_prefixes`. The max size of `exclude_prefixes` is 1000. For more
 *  information, see [Filtering objects from
 *  transfers](/storage-transfer/docs/filtering-objects-from-transfers).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *excludePrefixes;

/**
 *  If you specify `include_prefixes`, Storage Transfer Service uses the items
 *  in the `include_prefixes` array to determine which objects to include in a
 *  transfer. Objects must start with one of the matching `include_prefixes` for
 *  inclusion in the transfer. If exclude_prefixes is specified, objects must
 *  not start with any of the `exclude_prefixes` specified for inclusion in the
 *  transfer. The following are requirements of `include_prefixes`: * Each
 *  include-prefix can contain any sequence of Unicode characters, to a max
 *  length of 1024 bytes when UTF8-encoded, and must not contain Carriage Return
 *  or Line Feed characters. Wildcard matching and regular expression matching
 *  are not supported. * Each include-prefix must omit the leading slash. For
 *  example, to include the object `s3://my-aws-bucket/logs/y=2015/requests.gz`,
 *  specify the include-prefix as `logs/y=2015/requests.gz`. * None of the
 *  include-prefix values can be empty, if specified. * Each include-prefix must
 *  include a distinct portion of the object namespace. No include-prefix may be
 *  a prefix of another include-prefix. The max size of `include_prefixes` is
 *  1000. For more information, see [Filtering objects from
 *  transfers](/storage-transfer/docs/filtering-objects-from-transfers).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *includePrefixes;

/**
 *  If specified, only objects with a "last modification time" before this
 *  timestamp and objects that don't have a "last modification time" are
 *  transferred.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastModifiedBefore;

/**
 *  If specified, only objects with a "last modification time" on or after this
 *  timestamp and objects that don't have a "last modification time" are
 *  transferred. The `last_modified_since` and `last_modified_before` fields can
 *  be used together for chunked data processing. For example, consider a script
 *  that processes each day's worth of data at a time. For that you'd set each
 *  of the fields as follows: * `last_modified_since` to the start of the day *
 *  `last_modified_before` to the end of the day
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastModifiedSince;

/**
 *  Ensures that objects are not transferred if a specific maximum time has
 *  elapsed since the "last modification time". When a TransferOperation begins,
 *  objects with a "last modification time" are transferred only if the elapsed
 *  time between the start_time of the `TransferOperation`and the "last
 *  modification time" of the object is less than the value of
 *  max_time_elapsed_since_last_modification`. Objects that do not have a "last
 *  modification time" are also transferred.
 */
@property(nonatomic, strong, nullable) GTLRDuration *maxTimeElapsedSinceLastModification;

/**
 *  Ensures that objects are not transferred until a specific minimum time has
 *  elapsed after the "last modification time". When a TransferOperation begins,
 *  objects with a "last modification time" are transferred only if the elapsed
 *  time between the start_time of the `TransferOperation` and the "last
 *  modification time" of the object is equal to or greater than the value of
 *  min_time_elapsed_since_last_modification`. Objects that do not have a "last
 *  modification time" are also transferred.
 */
@property(nonatomic, strong, nullable) GTLRDuration *minTimeElapsedSinceLastModification;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRStorageTransfer_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_Status *error;

/**
 *  Represents the transfer operation object. To request a TransferOperation
 *  object, use transferOperations.get.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_Operation_Metadata *metadata;

/**
 *  The server-assigned unique name. The format of `name` is
 *  `transferOperations/some/unique/name`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_Operation_Response *response;

@end


/**
 *  Represents the transfer operation object. To request a TransferOperation
 *  object, use transferOperations.get.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRStorageTransfer_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRStorageTransfer_Operation_Response : GTLRObject
@end


/**
 *  Request passed to PauseTransferOperation.
 */
@interface GTLRStorageTransfer_PauseTransferOperationRequest : GTLRObject
@end


/**
 *  A POSIX filesystem resource.
 */
@interface GTLRStorageTransfer_PosixFilesystem : GTLRObject

/** Root directory path to the filesystem. */
@property(nonatomic, copy, nullable) NSString *rootDirectory;

@end


/**
 *  Request passed to ResumeTransferOperation.
 */
@interface GTLRStorageTransfer_ResumeTransferOperationRequest : GTLRObject
@end


/**
 *  Request passed to RunTransferJob.
 */
@interface GTLRStorageTransfer_RunTransferJobRequest : GTLRObject

/**
 *  Required. The ID of the Google Cloud project that owns the transfer job.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  S3CompatibleMetadata contains the metadata fields that apply to the basic
 *  types of S3-compatible data providers.
 */
@interface GTLRStorageTransfer_S3CompatibleMetadata : GTLRObject

/**
 *  Specifies the authentication and authorization method used by the storage
 *  service. When not specified, Transfer Service will attempt to determine
 *  right auth method to use.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_S3CompatibleMetadata_AuthMethod_AuthMethodAwsSignatureV2
 *        Auth requests with AWS SigV2. (Value: "AUTH_METHOD_AWS_SIGNATURE_V2")
 *    @arg @c kGTLRStorageTransfer_S3CompatibleMetadata_AuthMethod_AuthMethodAwsSignatureV4
 *        Auth requests with AWS SigV4. (Value: "AUTH_METHOD_AWS_SIGNATURE_V4")
 *    @arg @c kGTLRStorageTransfer_S3CompatibleMetadata_AuthMethod_AuthMethodUnspecified
 *        AuthMethod is not specified. (Value: "AUTH_METHOD_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *authMethod;

/**
 *  The Listing API to use for discovering objects. When not specified, Transfer
 *  Service will attempt to determine the right API to use.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_S3CompatibleMetadata_ListApi_ListApiUnspecified
 *        ListApi is not specified. (Value: "LIST_API_UNSPECIFIED")
 *    @arg @c kGTLRStorageTransfer_S3CompatibleMetadata_ListApi_ListObjects
 *        Legacy ListObjects API. (Value: "LIST_OBJECTS")
 *    @arg @c kGTLRStorageTransfer_S3CompatibleMetadata_ListApi_ListObjectsV2
 *        Perform listing using ListObjectsV2 API. (Value: "LIST_OBJECTS_V2")
 */
@property(nonatomic, copy, nullable) NSString *listApi;

/**
 *  Specifies the network protocol of the agent. When not specified, the default
 *  value of NetworkProtocol NETWORK_PROTOCOL_HTTPS is used.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_S3CompatibleMetadata_Protocol_NetworkProtocolHttp
 *        Not recommended: This sends data in clear-text. This is only
 *        appropriate within a closed network or for publicly available data.
 *        Perform requests using HTTP. (Value: "NETWORK_PROTOCOL_HTTP")
 *    @arg @c kGTLRStorageTransfer_S3CompatibleMetadata_Protocol_NetworkProtocolHttps
 *        Perform requests using HTTPS. (Value: "NETWORK_PROTOCOL_HTTPS")
 *    @arg @c kGTLRStorageTransfer_S3CompatibleMetadata_Protocol_NetworkProtocolUnspecified
 *        NetworkProtocol is not specified. (Value:
 *        "NETWORK_PROTOCOL_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *protocol;

/**
 *  Specifies the API request model used to call the storage service. When not
 *  specified, the default value of RequestModel
 *  REQUEST_MODEL_VIRTUAL_HOSTED_STYLE is used.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_S3CompatibleMetadata_RequestModel_RequestModelPathStyle
 *        Perform requests using Path Style. Example:
 *        https://s3.region.amazonaws.com/bucket-name/key-name (Value:
 *        "REQUEST_MODEL_PATH_STYLE")
 *    @arg @c kGTLRStorageTransfer_S3CompatibleMetadata_RequestModel_RequestModelUnspecified
 *        RequestModel is not specified. (Value: "REQUEST_MODEL_UNSPECIFIED")
 *    @arg @c kGTLRStorageTransfer_S3CompatibleMetadata_RequestModel_RequestModelVirtualHostedStyle
 *        Perform requests using Virtual Hosted Style. Example:
 *        https://bucket-name.s3.region.amazonaws.com/key-name (Value:
 *        "REQUEST_MODEL_VIRTUAL_HOSTED_STYLE")
 */
@property(nonatomic, copy, nullable) NSString *requestModel;

@end


/**
 *  Transfers can be scheduled to recur or to run just once.
 */
@interface GTLRStorageTransfer_Schedule : GTLRObject

/**
 *  The time in UTC that no further transfer operations are scheduled. Combined
 *  with schedule_end_date, `end_time_of_day` specifies the end date and time
 *  for starting new transfer operations. This field must be greater than or
 *  equal to the timestamp corresponding to the combintation of
 *  schedule_start_date and start_time_of_day, and is subject to the following:
 *  * If `end_time_of_day` is not set and `schedule_end_date` is set, then a
 *  default value of `23:59:59` is used for `end_time_of_day`. * If
 *  `end_time_of_day` is set and `schedule_end_date` is not set, then
 *  INVALID_ARGUMENT is returned.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_TimeOfDay *endTimeOfDay;

/**
 *  Interval between the start of each scheduled TransferOperation. If
 *  unspecified, the default value is 24 hours. This value may not be less than
 *  1 hour.
 */
@property(nonatomic, strong, nullable) GTLRDuration *repeatInterval;

/**
 *  The last day a transfer runs. Date boundaries are determined relative to UTC
 *  time. A job runs once per 24 hours within the following guidelines: * If
 *  `schedule_end_date` and schedule_start_date are the same and in the future
 *  relative to UTC, the transfer is executed only one time. * If
 *  `schedule_end_date` is later than `schedule_start_date` and
 *  `schedule_end_date` is in the future relative to UTC, the job runs each day
 *  at start_time_of_day through `schedule_end_date`.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_Date *scheduleEndDate;

/**
 *  Required. The start date of a transfer. Date boundaries are determined
 *  relative to UTC time. If `schedule_start_date` and start_time_of_day are in
 *  the past relative to the job's creation time, the transfer starts the day
 *  after you schedule the transfer request. **Note:** When starting jobs at or
 *  near midnight UTC it is possible that a job starts later than expected. For
 *  example, if you send an outbound request on June 1 one millisecond prior to
 *  midnight UTC and the Storage Transfer Service server receives the request on
 *  June 2, then it creates a TransferJob with `schedule_start_date` set to June
 *  2 and a `start_time_of_day` set to midnight UTC. The first scheduled
 *  TransferOperation takes place on June 3 at midnight UTC.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_Date *scheduleStartDate;

/**
 *  The time in UTC that a transfer job is scheduled to run. Transfers may start
 *  later than this time. If `start_time_of_day` is not specified: * One-time
 *  transfers run immediately. * Recurring transfers run immediately, and each
 *  day at midnight UTC, through schedule_end_date. If `start_time_of_day` is
 *  specified: * One-time transfers run at the specified time. * Recurring
 *  transfers run at the specified time each day, through `schedule_end_date`.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_TimeOfDay *startTimeOfDay;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRStorageTransfer_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageTransfer_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRStorageTransfer_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRStorageTransfer_Status_Details_Item : GTLRObject
@end


/**
 *  Represents a time of day. The date and time zone are either not significant
 *  or are specified elsewhere. An API may choose to allow leap seconds. Related
 *  types are google.type.Date and `google.protobuf.Timestamp`.
 */
@interface GTLRStorageTransfer_TimeOfDay : GTLRObject

/**
 *  Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to
 *  allow the value "24:00:00" for scenarios like business closing time.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hours;

/**
 *  Minutes of hour of day. Must be from 0 to 59.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minutes;

/**
 *  Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Seconds of minutes of the time. Must normally be from 0 to 59. An API may
 *  allow the value 60 if it allows leap-seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

@end


/**
 *  A collection of counters that report the progress of a transfer operation.
 */
@interface GTLRStorageTransfer_TransferCounters : GTLRObject

/**
 *  Bytes that are copied to the data sink.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesCopiedToSink;

/**
 *  Bytes that are deleted from the data sink.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesDeletedFromSink;

/**
 *  Bytes that are deleted from the data source.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesDeletedFromSource;

/**
 *  Bytes that failed to be deleted from the data sink.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesFailedToDeleteFromSink;

/**
 *  Bytes found in the data source that are scheduled to be transferred,
 *  excluding any that are filtered based on object conditions or skipped due to
 *  sync.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesFoundFromSource;

/**
 *  Bytes found only in the data sink that are scheduled to be deleted.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesFoundOnlyFromSink;

/**
 *  Bytes in the data source that failed to be transferred or that failed to be
 *  deleted after being transferred.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesFromSourceFailed;

/**
 *  Bytes in the data source that are not transferred because they already exist
 *  in the data sink.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bytesFromSourceSkippedBySync;

/**
 *  For transfers involving PosixFilesystem only. Number of listing failures for
 *  each directory found at the source. Potential failures when listing a
 *  directory include permission failure or block failure. If listing a
 *  directory fails, no files in the directory are transferred.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *directoriesFailedToListFromSource;

/**
 *  For transfers involving PosixFilesystem only. Number of directories found
 *  while listing. For example, if the root directory of the transfer is `base/`
 *  and there are two other directories, `a/` and `b/` under this directory, the
 *  count after listing `base/`, `base/a/` and `base/b/` is 3.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *directoriesFoundFromSource;

/**
 *  For transfers involving PosixFilesystem only. Number of successful listings
 *  for each directory found at the source.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *directoriesSuccessfullyListedFromSource;

/**
 *  Number of successfully cleaned up intermediate objects.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *intermediateObjectsCleanedUp;

/**
 *  Number of intermediate objects failed cleaned up.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *intermediateObjectsFailedCleanedUp;

/**
 *  Objects that are copied to the data sink.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectsCopiedToSink;

/**
 *  Objects that are deleted from the data sink.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectsDeletedFromSink;

/**
 *  Objects that are deleted from the data source.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectsDeletedFromSource;

/**
 *  Objects that failed to be deleted from the data sink.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectsFailedToDeleteFromSink;

/**
 *  Objects found in the data source that are scheduled to be transferred,
 *  excluding any that are filtered based on object conditions or skipped due to
 *  sync.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectsFoundFromSource;

/**
 *  Objects found only in the data sink that are scheduled to be deleted.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectsFoundOnlyFromSink;

/**
 *  Objects in the data source that failed to be transferred or that failed to
 *  be deleted after being transferred.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectsFromSourceFailed;

/**
 *  Objects in the data source that are not transferred because they already
 *  exist in the data sink.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectsFromSourceSkippedBySync;

@end


/**
 *  This resource represents the configuration of a transfer job that runs
 *  periodically.
 */
@interface GTLRStorageTransfer_TransferJob : GTLRObject

/** Output only. The time that the transfer job was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *creationTime;

/** Output only. The time that the transfer job was deleted. */
@property(nonatomic, strong, nullable) GTLRDateTime *deletionTime;

/**
 *  A description provided by the user for the job. Its max length is 1024 bytes
 *  when Unicode-encoded.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Output only. The time that the transfer job was last modified. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastModificationTime;

/**
 *  The name of the most recently started TransferOperation of this JobConfig.
 *  Present if a TransferOperation has been created for this JobConfig.
 */
@property(nonatomic, copy, nullable) NSString *latestOperationName;

/** Logging configuration. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_LoggingConfig *loggingConfig;

/**
 *  A unique name (within the transfer project) assigned when the job is
 *  created. If this field is empty in a CreateTransferJobRequest, Storage
 *  Transfer Service assigns a unique name. Otherwise, the specified name is
 *  used as the unique name for this job. If the specified name is in use by a
 *  job, the creation request fails with an ALREADY_EXISTS error. This name must
 *  start with `"transferJobs/"` prefix and end with a letter or a number, and
 *  should be no more than 128 characters. For transfers involving
 *  PosixFilesystem, this name must start with `transferJobs/OPI` specifically.
 *  For all other transfer types, this name must not start with
 *  `transferJobs/OPI`. Non-PosixFilesystem example:
 *  `"transferJobs/^(?!OPI)[A-Za-z0-9-._~]*[A-Za-z0-9]$"` PosixFilesystem
 *  example: `"transferJobs/OPI^[A-Za-z0-9-._~]*[A-Za-z0-9]$"` Applications must
 *  not rely on the enforcement of naming requirements involving OPI. Invalid
 *  job names fail with an INVALID_ARGUMENT error.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Notification configuration. This is not supported for transfers involving
 *  PosixFilesystem.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_NotificationConfig *notificationConfig;

/** The ID of the Google Cloud project that owns the job. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Specifies schedule for the transfer job. This is an optional field. When the
 *  field is not set, the job never executes a transfer, unless you invoke
 *  RunTransferJob or update the job to have a non-empty schedule.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_Schedule *schedule;

/**
 *  Status of the job. This value MUST be specified for
 *  `CreateTransferJobRequests`. **Note:** The effect of the new job status
 *  takes place during a subsequent job run. For example, if you change the job
 *  status from ENABLED to DISABLED, and an operation spawned by the transfer is
 *  running, the status change would not affect the current operation.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_TransferJob_Status_Deleted This is a soft
 *        delete state. After a transfer job is set to this state, the job and
 *        all the transfer executions are subject to garbage collection.
 *        Transfer jobs become eligible for garbage collection 30 days after
 *        their status is set to `DELETED`. (Value: "DELETED")
 *    @arg @c kGTLRStorageTransfer_TransferJob_Status_Disabled New transfers are
 *        not scheduled. (Value: "DISABLED")
 *    @arg @c kGTLRStorageTransfer_TransferJob_Status_Enabled New transfers are
 *        performed based on the schedule. (Value: "ENABLED")
 *    @arg @c kGTLRStorageTransfer_TransferJob_Status_StatusUnspecified Zero is
 *        an illegal value. (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

/** Transfer specification. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_TransferSpec *transferSpec;

@end


/**
 *  Specifies where the manifest is located.
 */
@interface GTLRStorageTransfer_TransferManifest : GTLRObject

/**
 *  Specifies the path to the manifest in Cloud Storage. The Google-managed
 *  service account for the transfer must have `storage.objects.get` permission
 *  for this object. An example path is `gs://bucket_name/path/manifest.csv`.
 */
@property(nonatomic, copy, nullable) NSString *location;

@end


/**
 *  A description of the execution of a transfer.
 */
@interface GTLRStorageTransfer_TransferOperation : GTLRObject

/** Information about the progress of the transfer operation. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_TransferCounters *counters;

/** End time of this transfer execution. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Summarizes errors encountered with sample error log entries. */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageTransfer_ErrorSummary *> *errorBreakdowns;

/** A globally unique ID assigned by the system. */
@property(nonatomic, copy, nullable) NSString *name;

/** Notification configuration. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_NotificationConfig *notificationConfig;

/** The ID of the Google Cloud project that owns the operation. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Start time of this transfer execution. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Status of the transfer operation.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_TransferOperation_Status_Aborted Aborted by
 *        the user. (Value: "ABORTED")
 *    @arg @c kGTLRStorageTransfer_TransferOperation_Status_Failed Terminated
 *        due to an unrecoverable failure. (Value: "FAILED")
 *    @arg @c kGTLRStorageTransfer_TransferOperation_Status_InProgress In
 *        progress. (Value: "IN_PROGRESS")
 *    @arg @c kGTLRStorageTransfer_TransferOperation_Status_Paused Paused.
 *        (Value: "PAUSED")
 *    @arg @c kGTLRStorageTransfer_TransferOperation_Status_Queued Temporarily
 *        delayed by the system. No user action is required. (Value: "QUEUED")
 *    @arg @c kGTLRStorageTransfer_TransferOperation_Status_StatusUnspecified
 *        Zero is an illegal value. (Value: "STATUS_UNSPECIFIED")
 *    @arg @c kGTLRStorageTransfer_TransferOperation_Status_Success Completed
 *        successfully. (Value: "SUCCESS")
 */
@property(nonatomic, copy, nullable) NSString *status;

/** The name of the transfer job that triggers this transfer operation. */
@property(nonatomic, copy, nullable) NSString *transferJobName;

/** Transfer specification. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_TransferSpec *transferSpec;

@end


/**
 *  TransferOptions define the actions to be performed on objects in a transfer.
 */
@interface GTLRStorageTransfer_TransferOptions : GTLRObject

/**
 *  Whether objects should be deleted from the source after they are transferred
 *  to the sink. **Note:** This option and delete_objects_unique_in_sink are
 *  mutually exclusive.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleteObjectsFromSourceAfterTransfer;

/**
 *  Whether objects that exist only in the sink should be deleted. **Note:**
 *  This option and delete_objects_from_source_after_transfer are mutually
 *  exclusive.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleteObjectsUniqueInSink;

/** Represents the selected metadata options for a transfer job. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_MetadataOptions *metadataOptions;

/**
 *  When to overwrite objects that already exist in the sink. The default is
 *  that only objects that are different from the source are ovewritten. If
 *  true, all objects in the sink whose name matches an object in the source are
 *  overwritten with the source object.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *overwriteObjectsAlreadyExistingInSink;

/**
 *  When to overwrite objects that already exist in the sink. If not set,
 *  overwrite behavior is determined by
 *  overwrite_objects_already_existing_in_sink.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageTransfer_TransferOptions_OverwriteWhen_Always Always
 *        overwrite the destination object with the source object, even if the
 *        HTTP Etags or checksum values are the same. (Value: "ALWAYS")
 *    @arg @c kGTLRStorageTransfer_TransferOptions_OverwriteWhen_Different
 *        Overwrites destination objects with the source objects, only if the
 *        objects have the same name but different HTTP ETags or checksum
 *        values. (Value: "DIFFERENT")
 *    @arg @c kGTLRStorageTransfer_TransferOptions_OverwriteWhen_Never Never
 *        overwrites a destination object if a source object has the same name.
 *        In this case, the source object is not transferred. (Value: "NEVER")
 *    @arg @c kGTLRStorageTransfer_TransferOptions_OverwriteWhen_OverwriteWhenUnspecified
 *        Overwrite behavior is unspecified. (Value:
 *        "OVERWRITE_WHEN_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *overwriteWhen;

@end


/**
 *  Configuration for running a transfer.
 */
@interface GTLRStorageTransfer_TransferSpec : GTLRObject

/** An AWS S3 compatible data source. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_AwsS3CompatibleData *awsS3CompatibleDataSource;

/** An AWS S3 data source. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_AwsS3Data *awsS3DataSource;

/** An Azure Blob Storage data source. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_AzureBlobStorageData *azureBlobStorageDataSource;

/** A Cloud Storage data sink. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_GcsData *gcsDataSink;

/** A Cloud Storage data source. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_GcsData *gcsDataSource;

/** Cloud Storage intermediate data location. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_GcsData *gcsIntermediateDataLocation;

/** An HTTP URL data source. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_HttpData *httpDataSource;

/**
 *  Only objects that satisfy these object conditions are included in the set of
 *  data source and data sink objects. Object conditions based on objects' "last
 *  modification time" do not exclude objects in a data sink.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_ObjectConditions *objectConditions;

/** A POSIX Filesystem data sink. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_PosixFilesystem *posixDataSink;

/** A POSIX Filesystem data source. */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_PosixFilesystem *posixDataSource;

/**
 *  Specifies the agent pool name associated with the posix data sink. When
 *  unspecified, the default name is used.
 */
@property(nonatomic, copy, nullable) NSString *sinkAgentPoolName;

/**
 *  Specifies the agent pool name associated with the posix data source. When
 *  unspecified, the default name is used.
 */
@property(nonatomic, copy, nullable) NSString *sourceAgentPoolName;

/**
 *  A manifest file provides a list of objects to be transferred from the data
 *  source. This field points to the location of the manifest file. Otherwise,
 *  the entire source bucket is used. ObjectConditions still apply.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_TransferManifest *transferManifest;

/**
 *  If the option delete_objects_unique_in_sink is `true` and time-based object
 *  conditions such as 'last modification time' are specified, the request fails
 *  with an INVALID_ARGUMENT error.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_TransferOptions *transferOptions;

@end


/**
 *  Request passed to UpdateTransferJob.
 */
@interface GTLRStorageTransfer_UpdateTransferJobRequest : GTLRObject

/** Required. The ID of the Google Cloud project that owns the job. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Required. The job to update. `transferJob` is expected to specify one or
 *  more of five fields: description, transfer_spec, notification_config,
 *  logging_config, and status. An `UpdateTransferJobRequest` that specifies
 *  other fields are rejected with the error INVALID_ARGUMENT. Updating a job
 *  status to DELETED requires `storagetransfer.jobs.delete` permission.
 */
@property(nonatomic, strong, nullable) GTLRStorageTransfer_TransferJob *transferJob;

/**
 *  The field mask of the fields in `transferJob` that are to be updated in this
 *  request. Fields in `transferJob` that can be updated are: description,
 *  transfer_spec, notification_config, logging_config, and status. To update
 *  the `transfer_spec` of the job, a complete transfer specification must be
 *  provided. An incomplete specification missing any required fields is
 *  rejected with the error INVALID_ARGUMENT.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateTransferJobFieldMask;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
