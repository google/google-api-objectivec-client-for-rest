// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Oracle Database@Google Cloud API (oracledatabase/v1)
// Description:
//   The Oracle Database@Google Cloud API provides a set of APIs to manage
//   Oracle database services, such as Exadata and Autonomous Databases.
// Documentation:
//   https://cloud.google.com/oracle/database/docs

#import <GoogleAPIClientForREST/GTLROracleDatabaseQuery.h>

@implementation GTLROracleDatabaseQuery

@dynamic fields;

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabaseBackupsList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/autonomousDatabaseBackups";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabaseBackupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListAutonomousDatabaseBackupsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabaseBackups.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabaseCharacterSetsList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/autonomousDatabaseCharacterSets";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabaseCharacterSetsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListAutonomousDatabaseCharacterSetsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabaseCharacterSets.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesCreate

@dynamic autonomousDatabaseId, parent, requestId;

+ (instancetype)queryWithObject:(GTLROracleDatabase_AutonomousDatabase *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/autonomousDatabases";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.create";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.delete";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesGenerateWallet

@dynamic name;

+ (instancetype)queryWithObject:(GTLROracleDatabase_GenerateAutonomousDatabaseWalletRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:generateWallet";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesGenerateWallet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_GenerateAutonomousDatabaseWalletResponse class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.generateWallet";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_AutonomousDatabase class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/autonomousDatabases";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListAutonomousDatabasesResponse class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesRestore

@dynamic name;

+ (instancetype)queryWithObject:(GTLROracleDatabase_RestoreAutonomousDatabaseRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:restore";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesRestore *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.restore";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDbVersionsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/autonomousDbVersions";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDbVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListAutonomousDbVersionsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDbVersions.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresCreate

@dynamic cloudExadataInfrastructureId, parent, requestId;

+ (instancetype)queryWithObject:(GTLROracleDatabase_CloudExadataInfrastructure *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/cloudExadataInfrastructures";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.cloudExadataInfrastructures.create";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresDbServersList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/dbServers";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresDbServersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListDbServersResponse class];
  query.loggingName = @"oracledatabase.projects.locations.cloudExadataInfrastructures.dbServers.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresDelete

@dynamic force, name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.cloudExadataInfrastructures.delete";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_CloudExadataInfrastructure class];
  query.loggingName = @"oracledatabase.projects.locations.cloudExadataInfrastructures.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/cloudExadataInfrastructures";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListCloudExadataInfrastructuresResponse class];
  query.loggingName = @"oracledatabase.projects.locations.cloudExadataInfrastructures.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersCreate

@dynamic cloudVmClusterId, parent, requestId;

+ (instancetype)queryWithObject:(GTLROracleDatabase_CloudVmCluster *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/cloudVmClusters";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.cloudVmClusters.create";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersDbNodesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/dbNodes";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersDbNodesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListDbNodesResponse class];
  query.loggingName = @"oracledatabase.projects.locations.cloudVmClusters.dbNodes.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersDelete

@dynamic force, name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.cloudVmClusters.delete";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_CloudVmCluster class];
  query.loggingName = @"oracledatabase.projects.locations.cloudVmClusters.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/cloudVmClusters";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListCloudVmClustersResponse class];
  query.loggingName = @"oracledatabase.projects.locations.cloudVmClusters.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsDbSystemShapesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/dbSystemShapes";
  GTLROracleDatabaseQuery_ProjectsLocationsDbSystemShapesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListDbSystemShapesResponse class];
  query.loggingName = @"oracledatabase.projects.locations.dbSystemShapes.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsEntitlementsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/entitlements";
  GTLROracleDatabaseQuery_ProjectsLocationsEntitlementsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListEntitlementsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.entitlements.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Location class];
  query.loggingName = @"oracledatabase.projects.locations.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsGiVersionsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/giVersions";
  GTLROracleDatabaseQuery_ProjectsLocationsGiVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListGiVersionsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.giVersions.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLROracleDatabaseQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_ListLocationsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLROracleDatabase_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLROracleDatabaseQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Empty class];
  query.loggingName = @"oracledatabase.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Empty class];
  query.loggingName = @"oracledatabase.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLROracleDatabaseQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_ListOperationsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.operations.list";
  return query;
}

@end
