// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Testing API (testing/v1)
// Description:
//   Allows developers to run automated tests for their mobile applications on
//   Google infrastructure.
// Documentation:
//   https://firebase.google.com/docs/test-lab/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRTesting_Account;
@class GTLRTesting_AndroidDevice;
@class GTLRTesting_AndroidDeviceCatalog;
@class GTLRTesting_AndroidDeviceList;
@class GTLRTesting_AndroidInstrumentationTest;
@class GTLRTesting_AndroidMatrix;
@class GTLRTesting_AndroidModel;
@class GTLRTesting_AndroidRoboTest;
@class GTLRTesting_AndroidRuntimeConfiguration;
@class GTLRTesting_AndroidTestLoop;
@class GTLRTesting_AndroidVersion;
@class GTLRTesting_Apk;
@class GTLRTesting_ApkDetail;
@class GTLRTesting_ApkManifest;
@class GTLRTesting_AppBundle;
@class GTLRTesting_ClientInfo;
@class GTLRTesting_ClientInfoDetail;
@class GTLRTesting_Date;
@class GTLRTesting_DeviceFile;
@class GTLRTesting_DeviceIpBlock;
@class GTLRTesting_DeviceIpBlockCatalog;
@class GTLRTesting_DeviceSession;
@class GTLRTesting_DirectAccessVersionInfo;
@class GTLRTesting_Distribution;
@class GTLRTesting_Environment;
@class GTLRTesting_EnvironmentMatrix;
@class GTLRTesting_EnvironmentVariable;
@class GTLRTesting_FileReference;
@class GTLRTesting_GoogleAuto;
@class GTLRTesting_GoogleCloudStorage;
@class GTLRTesting_IntentFilter;
@class GTLRTesting_IosDevice;
@class GTLRTesting_IosDeviceCatalog;
@class GTLRTesting_IosDeviceFile;
@class GTLRTesting_IosDeviceList;
@class GTLRTesting_IosModel;
@class GTLRTesting_IosRoboTest;
@class GTLRTesting_IosRuntimeConfiguration;
@class GTLRTesting_IosTestLoop;
@class GTLRTesting_IosTestSetup;
@class GTLRTesting_IosVersion;
@class GTLRTesting_IosXcTest;
@class GTLRTesting_LabInfo;
@class GTLRTesting_LauncherActivityIntent;
@class GTLRTesting_Locale;
@class GTLRTesting_ManualSharding;
@class GTLRTesting_MatrixErrorDetail;
@class GTLRTesting_Metadata;
@class GTLRTesting_NetworkConfiguration;
@class GTLRTesting_NetworkConfigurationCatalog;
@class GTLRTesting_NoActivityIntent;
@class GTLRTesting_ObbFile;
@class GTLRTesting_Orientation;
@class GTLRTesting_PerAndroidVersionInfo;
@class GTLRTesting_PerIosVersionInfo;
@class GTLRTesting_ProvidedSoftwareCatalog;
@class GTLRTesting_RegularFile;
@class GTLRTesting_ResultStorage;
@class GTLRTesting_RoboDirective;
@class GTLRTesting_RoboStartingIntent;
@class GTLRTesting_Service;
@class GTLRTesting_SessionStateEvent;
@class GTLRTesting_Shard;
@class GTLRTesting_ShardingOption;
@class GTLRTesting_SmartSharding;
@class GTLRTesting_StartActivityIntent;
@class GTLRTesting_SystraceSetup;
@class GTLRTesting_TestDetails;
@class GTLRTesting_TestExecution;
@class GTLRTesting_TestSetup;
@class GTLRTesting_TestSpecification;
@class GTLRTesting_TestTargetsForShard;
@class GTLRTesting_ToolResultsExecution;
@class GTLRTesting_ToolResultsHistory;
@class GTLRTesting_ToolResultsStep;
@class GTLRTesting_TrafficRule;
@class GTLRTesting_UniformSharding;
@class GTLRTesting_UsesFeature;
@class GTLRTesting_XcodeVersion;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRTesting_AndroidInstrumentationTest.orchestratorOption

/**
 *  Run test without using orchestrator.
 *
 *  Value: "DO_NOT_USE_ORCHESTRATOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_AndroidInstrumentationTest_OrchestratorOption_DoNotUseOrchestrator;
/**
 *  Default value: the server will choose the mode. Currently implies that the
 *  test will run without the orchestrator. In the future, all instrumentation
 *  tests will be run with the orchestrator. Using the orchestrator is highly
 *  encouraged because of all the benefits it offers.
 *
 *  Value: "ORCHESTRATOR_OPTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_AndroidInstrumentationTest_OrchestratorOption_OrchestratorOptionUnspecified;
/**
 *  Run test using orchestrator. ** Only compatible with AndroidJUnitRunner
 *  version 1.1 or higher! ** Recommended.
 *
 *  Value: "USE_ORCHESTRATOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_AndroidInstrumentationTest_OrchestratorOption_UseOrchestrator;

// ----------------------------------------------------------------------------
// GTLRTesting_AndroidModel.form

/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "DEVICE_FORM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_AndroidModel_Form_DeviceFormUnspecified;
/**
 *  Android virtual device using emulator in nested virtualization. Equivalent
 *  to Android Studio.
 *
 *  Value: "EMULATOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_AndroidModel_Form_Emulator;
/**
 *  Actual hardware.
 *
 *  Value: "PHYSICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_AndroidModel_Form_Physical;
/**
 *  Android virtual device using Compute Engine native virtualization. Firebase
 *  Test Lab only.
 *
 *  Value: "VIRTUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_AndroidModel_Form_Virtual;

// ----------------------------------------------------------------------------
// GTLRTesting_AndroidModel.formFactor

/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "DEVICE_FORM_FACTOR_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_AndroidModel_FormFactor_DeviceFormFactorUnspecified;
/**
 *  This device has the shape of a phone.
 *
 *  Value: "PHONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_AndroidModel_FormFactor_Phone;
/**
 *  This device has the shape of a tablet.
 *
 *  Value: "TABLET"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_AndroidModel_FormFactor_Tablet;
/**
 *  This device has the shape of a watch or other wearable.
 *
 *  Value: "WEARABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_AndroidModel_FormFactor_Wearable;

// ----------------------------------------------------------------------------
// GTLRTesting_AndroidRoboTest.roboMode

/**
 *  This means that the server should choose the mode. Recommended.
 *
 *  Value: "ROBO_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_AndroidRoboTest_RoboMode_RoboModeUnspecified;
/**
 *  Runs Robo in UIAutomator-only mode without app resigning
 *
 *  Value: "ROBO_VERSION_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_AndroidRoboTest_RoboMode_RoboVersion1;
/**
 *  Runs Robo in standard Espresso with UIAutomator fallback
 *
 *  Value: "ROBO_VERSION_2"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_AndroidRoboTest_RoboMode_RoboVersion2;

// ----------------------------------------------------------------------------
// GTLRTesting_CancelTestMatrixResponse.testState

/**
 *  The user cancelled the execution. Can only be set on an execution.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_Cancelled;
/**
 *  The execution or matrix has stopped because it encountered an infrastructure
 *  failure.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_Error;
/**
 *  The execution or matrix has terminated normally. On a matrix this means that
 *  the matrix level processing completed normally, but individual executions
 *  may be in an ERROR state.
 *
 *  Value: "FINISHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_Finished;
/**
 *  The execution was not run because the provided inputs are incompatible with
 *  the requested architecture. Example: requested device does not support
 *  running the native code in the supplied APK Can only be set on an execution.
 *
 *  Value: "INCOMPATIBLE_ARCHITECTURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_IncompatibleArchitecture;
/**
 *  The execution was not run because the provided inputs are incompatible with
 *  the requested environment. Example: requested AndroidVersion is lower than
 *  APK's minSdkVersion Can only be set on an execution.
 *
 *  Value: "INCOMPATIBLE_ENVIRONMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_IncompatibleEnvironment;
/**
 *  The execution or matrix was not run because the provided inputs are not
 *  valid. Examples: input file is not of the expected type, is
 *  malformed/corrupt, or was flagged as malware
 *
 *  Value: "INVALID"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_Invalid;
/**
 *  The execution or matrix is waiting for resources to become available.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_Pending;
/**
 *  The execution is currently being processed. Can only be set on an execution.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_Running;
/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "TEST_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_TestStateUnspecified;
/**
 *  The execution was not run because it corresponds to a unsupported
 *  environment. Can only be set on an execution.
 *
 *  Value: "UNSUPPORTED_ENVIRONMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_UnsupportedEnvironment;
/**
 *  The execution or matrix is being validated.
 *
 *  Value: "VALIDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_CancelTestMatrixResponse_TestState_Validating;

// ----------------------------------------------------------------------------
// GTLRTesting_DeviceIpBlock.form

/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "DEVICE_FORM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_DeviceIpBlock_Form_DeviceFormUnspecified;
/**
 *  Android virtual device using emulator in nested virtualization. Equivalent
 *  to Android Studio.
 *
 *  Value: "EMULATOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_DeviceIpBlock_Form_Emulator;
/**
 *  Actual hardware.
 *
 *  Value: "PHYSICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_DeviceIpBlock_Form_Physical;
/**
 *  Android virtual device using Compute Engine native virtualization. Firebase
 *  Test Lab only.
 *
 *  Value: "VIRTUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_DeviceIpBlock_Form_Virtual;

// ----------------------------------------------------------------------------
// GTLRTesting_DeviceSession.state

/**
 *  The session has been granted and the device is accepting connections.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_DeviceSession_State_Active;
/**
 *  Unable to complete the session for an internal reason, such as an
 *  infrastructure failure.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_DeviceSession_State_Error;
/**
 *  The session duration exceeded the device’s reservation time period and timed
 *  out automatically.
 *
 *  Value: "EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_DeviceSession_State_Expired;
/**
 *  The user is finished with the session and it was canceled by the user while
 *  the request was still getting allocated or after allocation and during
 *  device usage period.
 *
 *  Value: "FINISHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_DeviceSession_State_Finished;
/**
 *  The session has been validated and is in the queue for a device.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_DeviceSession_State_Pending;
/**
 *  Initial state of a session request. The session is being validated for
 *  correctness and a device is not yet requested.
 *
 *  Value: "REQUESTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_DeviceSession_State_Requested;
/**
 *  Default value. This value is unused.
 *
 *  Value: "SESSION_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_DeviceSession_State_SessionStateUnspecified;
/**
 *  Unable to complete the session because the device was unavailable and it
 *  failed to allocate through the scheduler. For example, a device not in the
 *  catalog was requested or the request expired in the allocation queue.
 *
 *  Value: "UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_DeviceSession_State_Unavailable;

// ----------------------------------------------------------------------------
// GTLRTesting_IosModel.formFactor

/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "DEVICE_FORM_FACTOR_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_IosModel_FormFactor_DeviceFormFactorUnspecified;
/**
 *  This device has the shape of a phone.
 *
 *  Value: "PHONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_IosModel_FormFactor_Phone;
/**
 *  This device has the shape of a tablet.
 *
 *  Value: "TABLET"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_IosModel_FormFactor_Tablet;
/**
 *  This device has the shape of a watch or other wearable.
 *
 *  Value: "WEARABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_IosModel_FormFactor_Wearable;

// ----------------------------------------------------------------------------
// GTLRTesting_PerAndroidVersionInfo.deviceCapacity

/**
 *  Devices that are high in capacity (The lab has a large number of these
 *  devices). These devices are generally suggested for running a large number
 *  of simultaneous tests (e.g. more than 100 tests). Please note that high
 *  capacity devices do not guarantee short wait times due to several factors:
 *  1. Traffic (how heavily they are used at any given moment) 2. High capacity
 *  devices are prioritized for certain usages, which may cause user tests to be
 *  slower than selecting other similar device types.
 *
 *  Value: "DEVICE_CAPACITY_HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_PerAndroidVersionInfo_DeviceCapacity_DeviceCapacityHigh;
/**
 *  Devices that are low in capacity (The lab has a small number of these
 *  devices). These devices may be used if users need to test on this specific
 *  device model and version. Please note that due to low capacity, the tests
 *  may take much longer to finish, especially if a large number of tests are
 *  invoked at once. These devices are not suitable for test sharding.
 *
 *  Value: "DEVICE_CAPACITY_LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_PerAndroidVersionInfo_DeviceCapacity_DeviceCapacityLow;
/**
 *  Devices that are medium in capacity (The lab has a decent number of these
 *  devices, though not as many as high capacity devices). These devices are
 *  suitable for fewer test runs (e.g. fewer than 100 tests) and only for low
 *  shard counts (e.g. less than 10 shards).
 *
 *  Value: "DEVICE_CAPACITY_MEDIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_PerAndroidVersionInfo_DeviceCapacity_DeviceCapacityMedium;
/**
 *  Devices that are completely missing from the lab. These devices are
 *  unavailable either temporarily or permanently and should not be requested.
 *  If the device is also marked as deprecated, this state is very likely
 *  permanent.
 *
 *  Value: "DEVICE_CAPACITY_NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_PerAndroidVersionInfo_DeviceCapacity_DeviceCapacityNone;
/**
 *  The value of device capacity is unknown or unset.
 *
 *  Value: "DEVICE_CAPACITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_PerAndroidVersionInfo_DeviceCapacity_DeviceCapacityUnspecified;

// ----------------------------------------------------------------------------
// GTLRTesting_PerIosVersionInfo.deviceCapacity

/**
 *  Devices that are high in capacity (The lab has a large number of these
 *  devices). These devices are generally suggested for running a large number
 *  of simultaneous tests (e.g. more than 100 tests). Please note that high
 *  capacity devices do not guarantee short wait times due to several factors:
 *  1. Traffic (how heavily they are used at any given moment) 2. High capacity
 *  devices are prioritized for certain usages, which may cause user tests to be
 *  slower than selecting other similar device types.
 *
 *  Value: "DEVICE_CAPACITY_HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_PerIosVersionInfo_DeviceCapacity_DeviceCapacityHigh;
/**
 *  Devices that are low in capacity (The lab has a small number of these
 *  devices). These devices may be used if users need to test on this specific
 *  device model and version. Please note that due to low capacity, the tests
 *  may take much longer to finish, especially if a large number of tests are
 *  invoked at once. These devices are not suitable for test sharding.
 *
 *  Value: "DEVICE_CAPACITY_LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_PerIosVersionInfo_DeviceCapacity_DeviceCapacityLow;
/**
 *  Devices that are medium in capacity (The lab has a decent number of these
 *  devices, though not as many as high capacity devices). These devices are
 *  suitable for fewer test runs (e.g. fewer than 100 tests) and only for low
 *  shard counts (e.g. less than 10 shards).
 *
 *  Value: "DEVICE_CAPACITY_MEDIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_PerIosVersionInfo_DeviceCapacity_DeviceCapacityMedium;
/**
 *  Devices that are completely missing from the lab. These devices are
 *  unavailable either temporarily or permanently and should not be requested.
 *  If the device is also marked as deprecated, this state is very likely
 *  permanent.
 *
 *  Value: "DEVICE_CAPACITY_NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_PerIosVersionInfo_DeviceCapacity_DeviceCapacityNone;
/**
 *  The value of device capacity is unknown or unset.
 *
 *  Value: "DEVICE_CAPACITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_PerIosVersionInfo_DeviceCapacity_DeviceCapacityUnspecified;

// ----------------------------------------------------------------------------
// GTLRTesting_RoboDirective.actionType

/**
 *  DO NOT USE. For proto versioning only.
 *
 *  Value: "ACTION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_RoboDirective_ActionType_ActionTypeUnspecified;
/**
 *  Direct Robo to enter text on the specified element. No-op if specified
 *  element is not enabled or does not allow text entry.
 *
 *  Value: "ENTER_TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_RoboDirective_ActionType_EnterText;
/**
 *  Direct Robo to ignore interactions with a specific element.
 *
 *  Value: "IGNORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_RoboDirective_ActionType_Ignore;
/**
 *  Direct Robo to click on the specified element. No-op if specified element is
 *  not clickable.
 *
 *  Value: "SINGLE_CLICK"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_RoboDirective_ActionType_SingleClick;

// ----------------------------------------------------------------------------
// GTLRTesting_SessionStateEvent.sessionState

/**
 *  The session has been granted and the device is accepting connections.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_SessionStateEvent_SessionState_Active;
/**
 *  Unable to complete the session for an internal reason, such as an
 *  infrastructure failure.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_SessionStateEvent_SessionState_Error;
/**
 *  The session duration exceeded the device’s reservation time period and timed
 *  out automatically.
 *
 *  Value: "EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_SessionStateEvent_SessionState_Expired;
/**
 *  The user is finished with the session and it was canceled by the user while
 *  the request was still getting allocated or after allocation and during
 *  device usage period.
 *
 *  Value: "FINISHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_SessionStateEvent_SessionState_Finished;
/**
 *  The session has been validated and is in the queue for a device.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_SessionStateEvent_SessionState_Pending;
/**
 *  Initial state of a session request. The session is being validated for
 *  correctness and a device is not yet requested.
 *
 *  Value: "REQUESTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_SessionStateEvent_SessionState_Requested;
/**
 *  Default value. This value is unused.
 *
 *  Value: "SESSION_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_SessionStateEvent_SessionState_SessionStateUnspecified;
/**
 *  Unable to complete the session because the device was unavailable and it
 *  failed to allocate through the scheduler. For example, a device not in the
 *  catalog was requested or the request expired in the allocation queue.
 *
 *  Value: "UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_SessionStateEvent_SessionState_Unavailable;

// ----------------------------------------------------------------------------
// GTLRTesting_TestExecution.state

/**
 *  The user cancelled the execution. Can only be set on an execution.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestExecution_State_Cancelled;
/**
 *  The execution or matrix has stopped because it encountered an infrastructure
 *  failure.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestExecution_State_Error;
/**
 *  The execution or matrix has terminated normally. On a matrix this means that
 *  the matrix level processing completed normally, but individual executions
 *  may be in an ERROR state.
 *
 *  Value: "FINISHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestExecution_State_Finished;
/**
 *  The execution was not run because the provided inputs are incompatible with
 *  the requested architecture. Example: requested device does not support
 *  running the native code in the supplied APK Can only be set on an execution.
 *
 *  Value: "INCOMPATIBLE_ARCHITECTURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestExecution_State_IncompatibleArchitecture;
/**
 *  The execution was not run because the provided inputs are incompatible with
 *  the requested environment. Example: requested AndroidVersion is lower than
 *  APK's minSdkVersion Can only be set on an execution.
 *
 *  Value: "INCOMPATIBLE_ENVIRONMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestExecution_State_IncompatibleEnvironment;
/**
 *  The execution or matrix was not run because the provided inputs are not
 *  valid. Examples: input file is not of the expected type, is
 *  malformed/corrupt, or was flagged as malware
 *
 *  Value: "INVALID"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestExecution_State_Invalid;
/**
 *  The execution or matrix is waiting for resources to become available.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestExecution_State_Pending;
/**
 *  The execution is currently being processed. Can only be set on an execution.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestExecution_State_Running;
/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "TEST_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestExecution_State_TestStateUnspecified;
/**
 *  The execution was not run because it corresponds to a unsupported
 *  environment. Can only be set on an execution.
 *
 *  Value: "UNSUPPORTED_ENVIRONMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestExecution_State_UnsupportedEnvironment;
/**
 *  The execution or matrix is being validated.
 *
 *  Value: "VALIDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestExecution_State_Validating;

// ----------------------------------------------------------------------------
// GTLRTesting_TestMatrix.invalidMatrixDetails

/**
 *  The zipped XCTest was built for the iOS simulator rather than for a physical
 *  device.
 *
 *  Value: "BUILT_FOR_IOS_SIMULATOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_BuiltForIosSimulator;
/**
 *  The matrix is INVALID, but there are no further details available.
 *
 *  Value: "DETAILS_UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_DetailsUnavailable;
/**
 *  Device administrator applications are not allowed.
 *
 *  Value: "DEVICE_ADMIN_RECEIVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_DeviceAdminReceiver;
/**
 *  The app declares one or more permissions that are not allowed.
 *
 *  Value: "FORBIDDEN_PERMISSIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_ForbiddenPermissions;
/**
 *  The test runner class specified by user or in the test APK's manifest file
 *  is not compatible with Android Test Orchestrator. Orchestrator is only
 *  compatible with AndroidJUnitRunner version 1.1 or higher. Orchestrator can
 *  be disabled by using DO_NOT_USE_ORCHESTRATOR OrchestratorOption.
 *
 *  Value: "INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_InstrumentationOrchestratorIncompatible;
/**
 *  APK is built for a preview SDK which is unsupported
 *
 *  Value: "INVALID_APK_PREVIEW_SDK"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidApkPreviewSdk;
/**
 *  Invalid definition of action in the robo directives (e.g. a click or ignore
 *  action includes an input text field)
 *
 *  Value: "INVALID_DIRECTIVE_ACTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidDirectiveAction;
/**
 *  Either the provided input APK path was malformed, the APK file does not
 *  exist, or the user does not have permission to access the APK file.
 *
 *  Value: "INVALID_INPUT_APK"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidInputApk;
/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "INVALID_MATRIX_DETAILS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidMatrixDetailsUnspecified;
/**
 *  The APK application ID (aka package name) is invalid. See also
 *  https://developer.android.com/studio/build/application-id
 *
 *  Value: "INVALID_PACKAGE_NAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidPackageName;
/**
 *  There is at least one invalid resource name in the provided robo directives
 *
 *  Value: "INVALID_RESOURCE_NAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidResourceName;
/**
 *  There is a conflict in the provided robo_directives.
 *
 *  Value: "INVALID_ROBO_DIRECTIVES"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidRoboDirectives;
/**
 *  The input app APK could not be parsed.
 *
 *  Value: "MALFORMED_APK"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedApk;
/**
 *  The iOS application bundle (.app) couldn't be processed.
 *
 *  Value: "MALFORMED_APP_BUNDLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedAppBundle;
/**
 *  The input IPA could not be parsed.
 *
 *  Value: "MALFORMED_IPA"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedIpa;
/**
 *  The input test APK could not be parsed.
 *
 *  Value: "MALFORMED_TEST_APK"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedTestApk;
/**
 *  The zipped XCTest was malformed. The zip did not contain a single .xctestrun
 *  file and the contents of the DerivedData/Build/Products directory.
 *
 *  Value: "MALFORMED_XC_TEST_ZIP"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedXcTestZip;
/**
 *  The matrix expanded to contain too many executions.
 *
 *  Value: "MATRIX_TOO_LARGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_MatrixTooLarge;
/**
 *  The application doesn't register the game loop URL scheme.
 *
 *  Value: "MISSING_URL_SCHEME"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_MissingUrlScheme;
/**
 *  APK contains no code. See also
 *  https://developer.android.com/guide/topics/manifest/application-element.html#code
 *
 *  Value: "NO_CODE_APK"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoCodeApk;
/**
 *  The test apk does not declare an instrumentation.
 *
 *  Value: "NO_INSTRUMENTATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoInstrumentation;
/**
 *  A main launcher activity could not be found.
 *
 *  Value: "NO_LAUNCHER_ACTIVITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoLauncherActivity;
/**
 *  The AndroidManifest.xml could not be found.
 *
 *  Value: "NO_MANIFEST"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoManifest;
/**
 *  The APK manifest does not declare a package name.
 *
 *  Value: "NO_PACKAGE_NAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoPackageName;
/**
 *  The input app apk does not have a signature.
 *
 *  Value: "NO_SIGNATURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoSignature;
/**
 *  The test APK does not contain the test runner class specified by the user or
 *  in the manifest file. This can be caused by one of the following reasons: -
 *  the user provided a runner class name that's incorrect, or - the test runner
 *  isn't built into the test APK (might be in the app APK instead).
 *
 *  Value: "NO_TEST_RUNNER_CLASS"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoTestRunnerClass;
/**
 *  The .xctestrun file did not specify any test targets.
 *
 *  Value: "NO_TESTS_IN_XC_TEST_ZIP"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoTestsInXcTestZip;
/**
 *  An Info.plist file in the XCTest zip could not be parsed.
 *
 *  Value: "PLIST_CANNOT_BE_PARSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_PlistCannotBeParsed;
/**
 *  There was an error when parsing a label's value.
 *
 *  Value: "SCENARIO_LABEL_MALFORMED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_ScenarioLabelMalformed;
/**
 *  The request contains a scenario label that was not declared in the manifest.
 *
 *  Value: "SCENARIO_LABEL_NOT_DECLARED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_ScenarioLabelNotDeclared;
/**
 *  The request contains a scenario number that was not declared in the
 *  manifest.
 *
 *  Value: "SCENARIO_NOT_DECLARED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_ScenarioNotDeclared;
/**
 *  A required cloud service api is not activated. See:
 *  https://firebase.google.com/docs/test-lab/android/continuous#requirements
 *
 *  Value: "SERVICE_NOT_ACTIVATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_ServiceNotActivated;
/**
 *  There is no test loop intent filter, or the one that is given is not
 *  formatted correctly.
 *
 *  Value: "TEST_LOOP_INTENT_FILTER_NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestLoopIntentFilterNotFound;
/**
 *  XC tests which run on physical devices must have "IsAppHostedTestBundle" ==
 *  "true" in the xctestrun file.
 *
 *  Value: "TEST_NOT_APP_HOSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestNotAppHosted;
/**
 *  The APK is marked as "testOnly". Deprecated and not currently used.
 *
 *  Value: "TEST_ONLY_APK"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestOnlyApk GTLR_DEPRECATED;
/**
 *  Not enough test quota to run the executions in this matrix.
 *
 *  Value: "TEST_QUOTA_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestQuotaExceeded;
/**
 *  The test package and app package are the same.
 *
 *  Value: "TEST_SAME_AS_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestSameAsApp;
/**
 *  There was an unknown permission issue running this test.
 *
 *  Value: "UNKNOWN_PERMISSION_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_UnknownPermissionError;
/**
 *  One or more of the test targets defined in the .xctestrun file specifies
 *  "UseDestinationArtifacts", which is disallowed.
 *
 *  Value: "USE_DESTINATION_ARTIFACTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_InvalidMatrixDetails_UseDestinationArtifacts;

// ----------------------------------------------------------------------------
// GTLRTesting_TestMatrix.outcomeSummary

/**
 *  A run failed, for instance: - One or more test cases failed. - A test timed
 *  out. - The application under test crashed.
 *
 *  Value: "FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_OutcomeSummary_Failure;
/**
 *  Something unexpected happened. The run should still be considered
 *  unsuccessful but this is likely a transient problem and re-running the test
 *  might be successful.
 *
 *  Value: "INCONCLUSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_OutcomeSummary_Inconclusive;
/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "OUTCOME_SUMMARY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_OutcomeSummary_OutcomeSummaryUnspecified;
/**
 *  All tests were skipped, for instance: - All device configurations were
 *  incompatible.
 *
 *  Value: "SKIPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_OutcomeSummary_Skipped;
/**
 *  The test matrix run was successful, for instance: - All the test cases
 *  passed. - Robo did not detect a crash of the application under test.
 *
 *  Value: "SUCCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_OutcomeSummary_Success;

// ----------------------------------------------------------------------------
// GTLRTesting_TestMatrix.state

/**
 *  The user cancelled the execution. Can only be set on an execution.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_State_Cancelled;
/**
 *  The execution or matrix has stopped because it encountered an infrastructure
 *  failure.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_State_Error;
/**
 *  The execution or matrix has terminated normally. On a matrix this means that
 *  the matrix level processing completed normally, but individual executions
 *  may be in an ERROR state.
 *
 *  Value: "FINISHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_State_Finished;
/**
 *  The execution was not run because the provided inputs are incompatible with
 *  the requested architecture. Example: requested device does not support
 *  running the native code in the supplied APK Can only be set on an execution.
 *
 *  Value: "INCOMPATIBLE_ARCHITECTURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_State_IncompatibleArchitecture;
/**
 *  The execution was not run because the provided inputs are incompatible with
 *  the requested environment. Example: requested AndroidVersion is lower than
 *  APK's minSdkVersion Can only be set on an execution.
 *
 *  Value: "INCOMPATIBLE_ENVIRONMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_State_IncompatibleEnvironment;
/**
 *  The execution or matrix was not run because the provided inputs are not
 *  valid. Examples: input file is not of the expected type, is
 *  malformed/corrupt, or was flagged as malware
 *
 *  Value: "INVALID"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_State_Invalid;
/**
 *  The execution or matrix is waiting for resources to become available.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_State_Pending;
/**
 *  The execution is currently being processed. Can only be set on an execution.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_State_Running;
/**
 *  Do not use. For proto versioning only.
 *
 *  Value: "TEST_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_State_TestStateUnspecified;
/**
 *  The execution was not run because it corresponds to a unsupported
 *  environment. Can only be set on an execution.
 *
 *  Value: "UNSUPPORTED_ENVIRONMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_State_UnsupportedEnvironment;
/**
 *  The execution or matrix is being validated.
 *
 *  Value: "VALIDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRTesting_TestMatrix_State_Validating;

/**
 *  Identifies an account and how to log into it.
 */
@interface GTLRTesting_Account : GTLRObject

/** An automatic google login account. */
@property(nonatomic, strong, nullable) GTLRTesting_GoogleAuto *googleAuto;

@end


/**
 *  A single Android device.
 */
@interface GTLRTesting_AndroidDevice : GTLRObject

/**
 *  Required. The id of the Android device to be used. Use the
 *  TestEnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, copy, nullable) NSString *androidModelId;

/**
 *  Required. The id of the Android OS version to be used. Use the
 *  TestEnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, copy, nullable) NSString *androidVersionId;

/**
 *  Required. The locale the test device used for testing. Use the
 *  TestEnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, copy, nullable) NSString *locale;

/**
 *  Required. How the device is oriented during the test. Use the
 *  TestEnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, copy, nullable) NSString *orientation;

@end


/**
 *  The currently supported Android devices.
 */
@interface GTLRTesting_AndroidDeviceCatalog : GTLRObject

/** The set of supported Android device models. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_AndroidModel *> *models;

/** The set of supported runtime configurations. */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidRuntimeConfiguration *runtimeConfiguration;

/** The set of supported Android OS versions. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_AndroidVersion *> *versions;

@end


/**
 *  A list of Android device configurations in which the test is to be executed.
 */
@interface GTLRTesting_AndroidDeviceList : GTLRObject

/** Required. A list of Android devices. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_AndroidDevice *> *androidDevices;

@end


/**
 *  A test of an Android application that can control an Android component
 *  independently of its normal lifecycle. Android instrumentation tests run an
 *  application APK and test APK inside the same process on a virtual or
 *  physical AndroidDevice. They also specify a test runner class, such as
 *  com.google.GoogleTestRunner, which can vary on the specific instrumentation
 *  framework chosen. See for more information on types of Android tests.
 */
@interface GTLRTesting_AndroidInstrumentationTest : GTLRObject

/** The APK for the application under test. */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *appApk;

/** A multi-apk app bundle for the application under test. */
@property(nonatomic, strong, nullable) GTLRTesting_AppBundle *appBundle;

/**
 *  The java package for the application under test. The default value is
 *  determined by examining the application's manifest.
 */
@property(nonatomic, copy, nullable) NSString *appPackageId;

/**
 *  The option of whether running each test within its own invocation of
 *  instrumentation with Android Test Orchestrator or not. ** Orchestrator is
 *  only compatible with AndroidJUnitRunner version 1.1 or higher! **
 *  Orchestrator offers the following benefits: - No shared state - Crashes are
 *  isolated - Logs are scoped per test See for more information about Android
 *  Test Orchestrator. If not set, the test will be run without the
 *  orchestrator.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_AndroidInstrumentationTest_OrchestratorOption_DoNotUseOrchestrator
 *        Run test without using orchestrator. (Value:
 *        "DO_NOT_USE_ORCHESTRATOR")
 *    @arg @c kGTLRTesting_AndroidInstrumentationTest_OrchestratorOption_OrchestratorOptionUnspecified
 *        Default value: the server will choose the mode. Currently implies that
 *        the test will run without the orchestrator. In the future, all
 *        instrumentation tests will be run with the orchestrator. Using the
 *        orchestrator is highly encouraged because of all the benefits it
 *        offers. (Value: "ORCHESTRATOR_OPTION_UNSPECIFIED")
 *    @arg @c kGTLRTesting_AndroidInstrumentationTest_OrchestratorOption_UseOrchestrator
 *        Run test using orchestrator. ** Only compatible with
 *        AndroidJUnitRunner version 1.1 or higher! ** Recommended. (Value:
 *        "USE_ORCHESTRATOR")
 */
@property(nonatomic, copy, nullable) NSString *orchestratorOption;

/** The option to run tests in multiple shards in parallel. */
@property(nonatomic, strong, nullable) GTLRTesting_ShardingOption *shardingOption;

/** Required. The APK containing the test code to be executed. */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *testApk;

/**
 *  The java package for the test to be executed. The default value is
 *  determined by examining the application's manifest.
 */
@property(nonatomic, copy, nullable) NSString *testPackageId;

/**
 *  The InstrumentationTestRunner class. The default value is determined by
 *  examining the application's manifest.
 */
@property(nonatomic, copy, nullable) NSString *testRunnerClass;

/**
 *  Each target must be fully qualified with the package name or class name, in
 *  one of these formats: - "package package_name" - "class
 *  package_name.class_name" - "class package_name.class_name#method_name" If
 *  empty, all targets in the module will be run.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *testTargets;

@end


/**
 *  A set of Android device configuration permutations is defined by the the
 *  cross-product of the given axes. Internally, the given AndroidMatrix will be
 *  expanded into a set of AndroidDevices. Only supported permutations will be
 *  instantiated. Invalid permutations (e.g., incompatible models/versions) are
 *  ignored.
 */
@interface GTLRTesting_AndroidMatrix : GTLRObject

/**
 *  Required. The ids of the set of Android device to be used. Use the
 *  TestEnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *androidModelIds;

/**
 *  Required. The ids of the set of Android OS version to be used. Use the
 *  TestEnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *androidVersionIds;

/**
 *  Required. The set of locales the test device will enable for testing. Use
 *  the TestEnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *locales;

/**
 *  Required. The set of orientations to test with. Use the
 *  TestEnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *orientations;

@end


/**
 *  A description of an Android device tests may be run on.
 */
@interface GTLRTesting_AndroidModel : GTLRObject

/**
 *  The company that this device is branded with. Example: "Google", "Samsung".
 */
@property(nonatomic, copy, nullable) NSString *brand;

/**
 *  The name of the industrial design. This corresponds to
 *  android.os.Build.DEVICE.
 */
@property(nonatomic, copy, nullable) NSString *codename;

/**
 *  Whether this device is virtual or physical.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_AndroidModel_Form_DeviceFormUnspecified Do not use.
 *        For proto versioning only. (Value: "DEVICE_FORM_UNSPECIFIED")
 *    @arg @c kGTLRTesting_AndroidModel_Form_Emulator Android virtual device
 *        using emulator in nested virtualization. Equivalent to Android Studio.
 *        (Value: "EMULATOR")
 *    @arg @c kGTLRTesting_AndroidModel_Form_Physical Actual hardware. (Value:
 *        "PHYSICAL")
 *    @arg @c kGTLRTesting_AndroidModel_Form_Virtual Android virtual device
 *        using Compute Engine native virtualization. Firebase Test Lab only.
 *        (Value: "VIRTUAL")
 */
@property(nonatomic, copy, nullable) NSString *form;

/**
 *  Whether this device is a phone, tablet, wearable, etc.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_AndroidModel_FormFactor_DeviceFormFactorUnspecified
 *        Do not use. For proto versioning only. (Value:
 *        "DEVICE_FORM_FACTOR_UNSPECIFIED")
 *    @arg @c kGTLRTesting_AndroidModel_FormFactor_Phone This device has the
 *        shape of a phone. (Value: "PHONE")
 *    @arg @c kGTLRTesting_AndroidModel_FormFactor_Tablet This device has the
 *        shape of a tablet. (Value: "TABLET")
 *    @arg @c kGTLRTesting_AndroidModel_FormFactor_Wearable This device has the
 *        shape of a watch or other wearable. (Value: "WEARABLE")
 */
@property(nonatomic, copy, nullable) NSString *formFactor;

/**
 *  The unique opaque id for this model. Use this for invoking the
 *  TestExecutionService.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Output only. Lab info of this device. */
@property(nonatomic, strong, nullable) GTLRTesting_LabInfo *labInfo;

/**
 *  True if and only if tests with this model are recorded by stitching together
 *  screenshots. See use_low_spec_video_recording in device config.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lowFpsVideoRecording;

/** The manufacturer of this device. */
@property(nonatomic, copy, nullable) NSString *manufacturer;

/**
 *  The human-readable marketing name for this device model. Examples: "Nexus
 *  5", "Galaxy S5".
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Version-specific information of an Android model. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_PerAndroidVersionInfo *> *perVersionInfo;

/**
 *  Screen density in DPI. This corresponds to ro.sf.lcd_density
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenDensity;

/**
 *  Screen size in the horizontal (X) dimension measured in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenX;

/**
 *  Screen size in the vertical (Y) dimension measured in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenY;

/**
 *  The list of supported ABIs for this device. This corresponds to either
 *  android.os.Build.SUPPORTED_ABIS (for API level 21 and above) or
 *  android.os.Build.CPU_ABI/CPU_ABI2. The most preferred ABI is the first
 *  element in the list. Elements are optionally prefixed by "version_id:"
 *  (where version_id is the id of an AndroidVersion), denoting an ABI that is
 *  supported only on a particular version.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedAbis;

/** The set of Android versions this device supports. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedVersionIds;

/** Tags for this dimension. Examples: "default", "preview", "deprecated". */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

/** URL of a thumbnail image (photo) of the device. */
@property(nonatomic, copy, nullable) NSString *thumbnailUrl;

@end


/**
 *  A test of an android application that explores the application on a virtual
 *  or physical Android Device, finding culprits and crashes as it goes.
 */
@interface GTLRTesting_AndroidRoboTest : GTLRObject

/** The APK for the application under test. */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *appApk;

/** A multi-apk app bundle for the application under test. */
@property(nonatomic, strong, nullable) GTLRTesting_AppBundle *appBundle;

/** The initial activity that should be used to start the app. */
@property(nonatomic, copy, nullable) NSString *appInitialActivity;

/**
 *  The java package for the application under test. The default value is
 *  determined by examining the application's manifest.
 */
@property(nonatomic, copy, nullable) NSString *appPackageId;

/**
 *  The max depth of the traversal stack Robo can explore. Needs to be at least
 *  2 to make Robo explore the app beyond the first activity. Default is 50.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxDepth GTLR_DEPRECATED;

/**
 *  The max number of steps Robo can execute. Default is no limit.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxSteps GTLR_DEPRECATED;

/**
 *  A set of directives Robo should apply during the crawl. This allows users to
 *  customize the crawl. For example, the username and password for a test
 *  account can be provided.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_RoboDirective *> *roboDirectives;

/**
 *  The mode in which Robo should run. Most clients should allow the server to
 *  populate this field automatically.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_AndroidRoboTest_RoboMode_RoboModeUnspecified This
 *        means that the server should choose the mode. Recommended. (Value:
 *        "ROBO_MODE_UNSPECIFIED")
 *    @arg @c kGTLRTesting_AndroidRoboTest_RoboMode_RoboVersion1 Runs Robo in
 *        UIAutomator-only mode without app resigning (Value: "ROBO_VERSION_1")
 *    @arg @c kGTLRTesting_AndroidRoboTest_RoboMode_RoboVersion2 Runs Robo in
 *        standard Espresso with UIAutomator fallback (Value: "ROBO_VERSION_2")
 */
@property(nonatomic, copy, nullable) NSString *roboMode;

/**
 *  A JSON file with a sequence of actions Robo should perform as a prologue for
 *  the crawl.
 */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *roboScript;

/**
 *  The intents used to launch the app for the crawl. If none are provided, then
 *  the main launcher activity is launched. If some are provided, then only
 *  those provided are launched (the main launcher activity must be provided
 *  explicitly).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_RoboStartingIntent *> *startingIntents;

@end


/**
 *  Android configuration that can be selected at the time a test is run.
 */
@interface GTLRTesting_AndroidRuntimeConfiguration : GTLRObject

/** The set of available locales. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_Locale *> *locales;

/** The set of available orientations. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_Orientation *> *orientations;

@end


/**
 *  A test of an Android Application with a Test Loop. The intent \\ will be
 *  implicitly added, since Games is the only user of this api, for the time
 *  being.
 */
@interface GTLRTesting_AndroidTestLoop : GTLRObject

/** The APK for the application under test. */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *appApk;

/** A multi-apk app bundle for the application under test. */
@property(nonatomic, strong, nullable) GTLRTesting_AppBundle *appBundle;

/**
 *  The java package for the application under test. The default is determined
 *  by examining the application's manifest.
 */
@property(nonatomic, copy, nullable) NSString *appPackageId;

/**
 *  The list of scenario labels that should be run during the test. The scenario
 *  labels should map to labels defined in the application's manifest. For
 *  example, player_experience and com.google.test.loops.player_experience add
 *  all of the loops labeled in the manifest with the
 *  com.google.test.loops.player_experience name to the execution. Scenarios can
 *  also be specified in the scenarios field.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *scenarioLabels;

/**
 *  The list of scenarios that should be run during the test. The default is all
 *  test loops, derived from the application's manifest.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *scenarios;

@end


/**
 *  A version of the Android OS.
 */
@interface GTLRTesting_AndroidVersion : GTLRObject

/**
 *  The API level for this Android version. Examples: 18, 19.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *apiLevel;

/**
 *  The code name for this Android version. Examples: "JellyBean", "KitKat".
 */
@property(nonatomic, copy, nullable) NSString *codeName;

/** Market share for this version. */
@property(nonatomic, strong, nullable) GTLRTesting_Distribution *distribution;

/**
 *  An opaque id for this Android version. Use this id to invoke the
 *  TestExecutionService.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The date this Android version became available in the market. */
@property(nonatomic, strong, nullable) GTLRTesting_Date *releaseDate;

/** Tags for this dimension. Examples: "default", "preview", "deprecated". */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

/**
 *  A string representing this version of the Android OS. Examples: "4.3",
 *  "4.4".
 */
@property(nonatomic, copy, nullable) NSString *versionString;

@end


/**
 *  An Android package file to install.
 */
@interface GTLRTesting_Apk : GTLRObject

/**
 *  The path to an APK to be installed on the device before the test begins.
 */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *location;

/**
 *  The java package for the APK to be installed. Value is determined by
 *  examining the application's manifest.
 */
@property(nonatomic, copy, nullable) NSString *packageName;

@end


/**
 *  Android application details based on application manifest and archive
 *  contents.
 */
@interface GTLRTesting_ApkDetail : GTLRObject

@property(nonatomic, strong, nullable) GTLRTesting_ApkManifest *apkManifest;

@end


/**
 *  An Android app manifest. See
 *  http://developer.android.com/guide/topics/manifest/manifest-intro.html
 */
@interface GTLRTesting_ApkManifest : GTLRObject

/** User-readable name for the application. */
@property(nonatomic, copy, nullable) NSString *applicationLabel;

@property(nonatomic, strong, nullable) NSArray<GTLRTesting_IntentFilter *> *intentFilters;

/**
 *  Maximum API level on which the application is designed to run.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxSdkVersion;

/** Meta-data tags defined in the manifest. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_Metadata *> *metadata;

/**
 *  Minimum API level required for the application to run.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minSdkVersion;

/**
 *  Full Java-style package name for this application, e.g. "com.example.foo".
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Services contained in the tag. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_Service *> *services;

/**
 *  Specifies the API Level on which the application is designed to run.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetSdkVersion;

/** Feature usage tags defined in the manifest. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_UsesFeature *> *usesFeature;

/** Permissions declared to be used by the application */
@property(nonatomic, strong, nullable) NSArray<NSString *> *usesPermission;

/**
 *  Version number used internally by the app.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionCode;

/** Version number shown to users. */
@property(nonatomic, copy, nullable) NSString *versionName;

@end


/**
 *  An Android App Bundle file format, containing a BundleConfig.pb file, a base
 *  module directory, zero or more dynamic feature module directories. See
 *  https://developer.android.com/guide/app-bundle/build for guidance on
 *  building App Bundles.
 */
@interface GTLRTesting_AppBundle : GTLRObject

/** .aab file representing the app bundle under test. */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *bundleLocation;

@end


/**
 *  The request object for cancelling a Device Session.
 */
@interface GTLRTesting_CancelDeviceSessionRequest : GTLRObject
@end


/**
 *  Response containing the current state of the specified test matrix.
 */
@interface GTLRTesting_CancelTestMatrixResponse : GTLRObject

/**
 *  The current rolled-up state of the test matrix. If this state is already
 *  final, then the cancelation request will have no effect.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_Cancelled The user
 *        cancelled the execution. Can only be set on an execution. (Value:
 *        "CANCELLED")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_Error The
 *        execution or matrix has stopped because it encountered an
 *        infrastructure failure. (Value: "ERROR")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_Finished The
 *        execution or matrix has terminated normally. On a matrix this means
 *        that the matrix level processing completed normally, but individual
 *        executions may be in an ERROR state. (Value: "FINISHED")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_IncompatibleArchitecture
 *        The execution was not run because the provided inputs are incompatible
 *        with the requested architecture. Example: requested device does not
 *        support running the native code in the supplied APK Can only be set on
 *        an execution. (Value: "INCOMPATIBLE_ARCHITECTURE")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_IncompatibleEnvironment
 *        The execution was not run because the provided inputs are incompatible
 *        with the requested environment. Example: requested AndroidVersion is
 *        lower than APK's minSdkVersion Can only be set on an execution.
 *        (Value: "INCOMPATIBLE_ENVIRONMENT")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_Invalid The
 *        execution or matrix was not run because the provided inputs are not
 *        valid. Examples: input file is not of the expected type, is
 *        malformed/corrupt, or was flagged as malware (Value: "INVALID")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_Pending The
 *        execution or matrix is waiting for resources to become available.
 *        (Value: "PENDING")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_Running The
 *        execution is currently being processed. Can only be set on an
 *        execution. (Value: "RUNNING")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_TestStateUnspecified
 *        Do not use. For proto versioning only. (Value:
 *        "TEST_STATE_UNSPECIFIED")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_UnsupportedEnvironment
 *        The execution was not run because it corresponds to a unsupported
 *        environment. Can only be set on an execution. (Value:
 *        "UNSUPPORTED_ENVIRONMENT")
 *    @arg @c kGTLRTesting_CancelTestMatrixResponse_TestState_Validating The
 *        execution or matrix is being validated. (Value: "VALIDATING")
 */
@property(nonatomic, copy, nullable) NSString *testState;

@end


/**
 *  Information about the client which invoked the test.
 */
@interface GTLRTesting_ClientInfo : GTLRObject

/** The list of detailed information about client. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_ClientInfoDetail *> *clientInfoDetails;

/** Required. Client name, such as gcloud. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Key-value pair of detailed information about the client which invoked the
 *  test. Examples: {'Version', '1.0'}, {'Release Track', 'BETA'}.
 */
@interface GTLRTesting_ClientInfoDetail : GTLRObject

/** Required. The key of detailed client information. */
@property(nonatomic, copy, nullable) NSString *key;

/** Required. The value of detailed client information. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Represents a whole or partial calendar date, such as a birthday. The time of
 *  day and time zone are either specified elsewhere or are insignificant. The
 *  date is relative to the Gregorian Calendar. This can represent one of the
 *  following: * A full date, with non-zero year, month, and day values. * A
 *  month and day, with a zero year (for example, an anniversary). * A year on
 *  its own, with a zero month and a zero day. * A year and month, with a zero
 *  day (for example, a credit card expiration date). Related types: *
 *  google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
@interface GTLRTesting_Date : GTLRObject

/**
 *  Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
 *  to specify a year by itself or a year and month where the day isn't
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of a year. Must be from 1 to 12, or 0 to specify a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  A single device file description.
 */
@interface GTLRTesting_DeviceFile : GTLRObject

/** A reference to an opaque binary blob file. */
@property(nonatomic, strong, nullable) GTLRTesting_ObbFile *obbFile;

/** A reference to a regular file. */
@property(nonatomic, strong, nullable) GTLRTesting_RegularFile *regularFile;

@end


/**
 *  A single device IP block
 */
@interface GTLRTesting_DeviceIpBlock : GTLRObject

/** The date this block was added to Firebase Test Lab */
@property(nonatomic, strong, nullable) GTLRTesting_Date *addedDate;

/** An IP address block in CIDR notation eg: 34.68.194.64/29 */
@property(nonatomic, copy, nullable) NSString *block;

/**
 *  Whether this block is used by physical or virtual devices
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_DeviceIpBlock_Form_DeviceFormUnspecified Do not use.
 *        For proto versioning only. (Value: "DEVICE_FORM_UNSPECIFIED")
 *    @arg @c kGTLRTesting_DeviceIpBlock_Form_Emulator Android virtual device
 *        using emulator in nested virtualization. Equivalent to Android Studio.
 *        (Value: "EMULATOR")
 *    @arg @c kGTLRTesting_DeviceIpBlock_Form_Physical Actual hardware. (Value:
 *        "PHYSICAL")
 *    @arg @c kGTLRTesting_DeviceIpBlock_Form_Virtual Android virtual device
 *        using Compute Engine native virtualization. Firebase Test Lab only.
 *        (Value: "VIRTUAL")
 */
@property(nonatomic, copy, nullable) NSString *form;

@end


/**
 *  List of IP blocks used by the Firebase Test Lab
 */
@interface GTLRTesting_DeviceIpBlockCatalog : GTLRObject

/** The device IP blocks used by Firebase Test Lab */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_DeviceIpBlock *> *ipBlocks;

@end


/**
 *  Protobuf message describing the device message, used from several RPCs.
 */
@interface GTLRTesting_DeviceSession : GTLRObject

/** Output only. The timestamp that the session first became ACTIVE. */
@property(nonatomic, strong, nullable) GTLRDateTime *activeStartTime;

/** Required. The requested device */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidDevice *androidDevice;

/** Output only. The time that the Session was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The title of the DeviceSession to be presented in the UI. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Optional. If the device is still in use at this time, any connections will
 *  be ended and the SessionState will transition from ACTIVE to FINISHED.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/**
 *  Output only. The interval of time that this device must be interacted with
 *  before it transitions from ACTIVE to TIMEOUT_INACTIVITY.
 */
@property(nonatomic, strong, nullable) GTLRDuration *inactivityTimeout;

/**
 *  Optional. Name of the DeviceSession, e.g.
 *  "projects/{project_id}/deviceSessions/{session_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Current state of the DeviceSession.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_DeviceSession_State_Active The session has been
 *        granted and the device is accepting connections. (Value: "ACTIVE")
 *    @arg @c kGTLRTesting_DeviceSession_State_Error Unable to complete the
 *        session for an internal reason, such as an infrastructure failure.
 *        (Value: "ERROR")
 *    @arg @c kGTLRTesting_DeviceSession_State_Expired The session duration
 *        exceeded the device’s reservation time period and timed out
 *        automatically. (Value: "EXPIRED")
 *    @arg @c kGTLRTesting_DeviceSession_State_Finished The user is finished
 *        with the session and it was canceled by the user while the request was
 *        still getting allocated or after allocation and during device usage
 *        period. (Value: "FINISHED")
 *    @arg @c kGTLRTesting_DeviceSession_State_Pending The session has been
 *        validated and is in the queue for a device. (Value: "PENDING")
 *    @arg @c kGTLRTesting_DeviceSession_State_Requested Initial state of a
 *        session request. The session is being validated for correctness and a
 *        device is not yet requested. (Value: "REQUESTED")
 *    @arg @c kGTLRTesting_DeviceSession_State_SessionStateUnspecified Default
 *        value. This value is unused. (Value: "SESSION_STATE_UNSPECIFIED")
 *    @arg @c kGTLRTesting_DeviceSession_State_Unavailable Unable to complete
 *        the session because the device was unavailable and it failed to
 *        allocate through the scheduler. For example, a device not in the
 *        catalog was requested or the request expired in the allocation queue.
 *        (Value: "UNAVAILABLE")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. The historical state transitions of the session_state message
 *  including the current session state.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_SessionStateEvent *> *stateHistories;

/**
 *  Optional. The amount of time that a device will be initially allocated for.
 *  This can eventually be extended with the UpdateDeviceSession RPC. Default:
 *  15 minutes.
 */
@property(nonatomic, strong, nullable) GTLRDuration *ttl;

@end


/**
 *  Denotes whether Direct Access is supported, and by which client versions.
 *  DirectAccessService is currently available as a preview to select
 *  developers. You can register today on behalf of you and your team at
 *  https://developer.android.com/studio/preview/android-device-streaming
 */
@interface GTLRTesting_DirectAccessVersionInfo : GTLRObject

/**
 *  Whether direct access is supported at all. Clients are expected to filter
 *  down the device list to only android models and versions which support
 *  Direct Access when that is the user intent.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *directAccessSupported;

/**
 *  Output only. Indicates client-device compatibility, where a device is known
 *  to work only with certain workarounds implemented in the Android Studio
 *  client. Expected format "major.minor.micro.patch", e.g.
 *  "5921.22.2211.8881706".
 */
@property(nonatomic, copy, nullable) NSString *minimumAndroidStudioVersion;

@end


/**
 *  Data about the relative number of devices running a given configuration of
 *  the Android platform.
 */
@interface GTLRTesting_Distribution : GTLRObject

/**
 *  Output only. The estimated fraction (0-1) of the total market with this
 *  configuration.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *marketShare;

/** Output only. The time this distribution was measured. */
@property(nonatomic, strong, nullable) GTLRDateTime *measurementTime;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRTesting_Empty : GTLRObject
@end


/**
 *  The environment in which the test is run.
 */
@interface GTLRTesting_Environment : GTLRObject

/** An Android device which must be used with an Android test. */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidDevice *androidDevice;

/** An iOS device which must be used with an iOS test. */
@property(nonatomic, strong, nullable) GTLRTesting_IosDevice *iosDevice;

@end


/**
 *  The matrix of environments in which the test is to be executed.
 */
@interface GTLRTesting_EnvironmentMatrix : GTLRObject

/**
 *  A list of Android devices; the test will be run only on the specified
 *  devices.
 */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidDeviceList *androidDeviceList;

/** A matrix of Android devices. */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidMatrix *androidMatrix;

/** A list of iOS devices. */
@property(nonatomic, strong, nullable) GTLRTesting_IosDeviceList *iosDeviceList;

@end


/**
 *  A key-value pair passed as an environment variable to the test.
 */
@interface GTLRTesting_EnvironmentVariable : GTLRObject

/** Key for the environment variable. */
@property(nonatomic, copy, nullable) NSString *key;

/** Value for the environment variable. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A reference to a file, used for user inputs.
 */
@interface GTLRTesting_FileReference : GTLRObject

/**
 *  A path to a file in Google Cloud Storage. Example:
 *  gs://build-app-1414623860166/app%40debug-unaligned.apk These paths are
 *  expected to be url encoded (percent encoding)
 */
@property(nonatomic, copy, nullable) NSString *gcsPath;

@end


/**
 *  Response containing the details of the specified Android application.
 */
@interface GTLRTesting_GetApkDetailsResponse : GTLRObject

/** Details of the Android App. */
@property(nonatomic, strong, nullable) GTLRTesting_ApkDetail *apkDetail;

@end


/**
 *  Enables automatic Google account login. If set, the service automatically
 *  generates a Google test account and adds it to the device, before executing
 *  the test. Note that test accounts might be reused. Many applications show
 *  their full set of functionalities when an account is present on the device.
 *  Logging into the device with these generated accounts allows testing more
 *  functionalities.
 */
@interface GTLRTesting_GoogleAuto : GTLRObject
@end


/**
 *  A storage location within Google cloud storage (GCS).
 */
@interface GTLRTesting_GoogleCloudStorage : GTLRObject

/**
 *  Required. The path to a directory in GCS that will eventually contain the
 *  results for this test. The requesting user must have write access on the
 *  bucket in the supplied path.
 */
@property(nonatomic, copy, nullable) NSString *gcsPath;

@end


/**
 *  The section of an tag.
 *  https://developer.android.com/guide/topics/manifest/intent-filter-element.html
 */
@interface GTLRTesting_IntentFilter : GTLRObject

/** The android:name value of the tag. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *actionNames;

/** The android:name value of the tag. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *categoryNames;

/** The android:mimeType value of the tag. */
@property(nonatomic, copy, nullable) NSString *mimeType;

@end


/**
 *  A single iOS device.
 */
@interface GTLRTesting_IosDevice : GTLRObject

/**
 *  Required. The id of the iOS device to be used. Use the
 *  TestEnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, copy, nullable) NSString *iosModelId;

/**
 *  Required. The id of the iOS major software version to be used. Use the
 *  TestEnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, copy, nullable) NSString *iosVersionId;

/**
 *  Required. The locale the test device used for testing. Use the
 *  TestEnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, copy, nullable) NSString *locale;

/**
 *  Required. How the device is oriented during the test. Use the
 *  TestEnvironmentDiscoveryService to get supported options.
 */
@property(nonatomic, copy, nullable) NSString *orientation;

@end


/**
 *  The currently supported iOS devices.
 */
@interface GTLRTesting_IosDeviceCatalog : GTLRObject

/** The set of supported iOS device models. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_IosModel *> *models;

/** The set of supported runtime configurations. */
@property(nonatomic, strong, nullable) GTLRTesting_IosRuntimeConfiguration *runtimeConfiguration;

/** The set of supported iOS software versions. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_IosVersion *> *versions;

/** The set of supported Xcode versions. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_XcodeVersion *> *xcodeVersions;

@end


/**
 *  A file or directory to install on the device before the test starts.
 */
@interface GTLRTesting_IosDeviceFile : GTLRObject

/**
 *  The bundle id of the app where this file lives. iOS apps sandbox their own
 *  filesystem, so app files must specify which app installed on the device.
 */
@property(nonatomic, copy, nullable) NSString *bundleId;

/** The source file */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *content;

/**
 *  Location of the file on the device, inside the app's sandboxed filesystem
 */
@property(nonatomic, copy, nullable) NSString *devicePath;

@end


/**
 *  A list of iOS device configurations in which the test is to be executed.
 */
@interface GTLRTesting_IosDeviceList : GTLRObject

/** Required. A list of iOS devices. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_IosDevice *> *iosDevices;

@end


/**
 *  A description of an iOS device tests may be run on.
 */
@interface GTLRTesting_IosModel : GTLRObject

/**
 *  Device capabilities. Copied from
 *  https://developer.apple.com/library/archive/documentation/DeviceInformation/Reference/iOSDeviceCompatibility/DeviceCompatibilityMatrix/DeviceCompatibilityMatrix.html
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *deviceCapabilities;

/**
 *  Whether this device is a phone, tablet, wearable, etc.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_IosModel_FormFactor_DeviceFormFactorUnspecified Do
 *        not use. For proto versioning only. (Value:
 *        "DEVICE_FORM_FACTOR_UNSPECIFIED")
 *    @arg @c kGTLRTesting_IosModel_FormFactor_Phone This device has the shape
 *        of a phone. (Value: "PHONE")
 *    @arg @c kGTLRTesting_IosModel_FormFactor_Tablet This device has the shape
 *        of a tablet. (Value: "TABLET")
 *    @arg @c kGTLRTesting_IosModel_FormFactor_Wearable This device has the
 *        shape of a watch or other wearable. (Value: "WEARABLE")
 */
@property(nonatomic, copy, nullable) NSString *formFactor;

/**
 *  The unique opaque id for this model. Use this for invoking the
 *  TestExecutionService.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The human-readable name for this device model. Examples: "iPhone 4s", "iPad
 *  Mini 2".
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Version-specific information of an iOS model. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_PerIosVersionInfo *> *perVersionInfo;

/**
 *  Screen density in DPI.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenDensity;

/**
 *  Screen size in the horizontal (X) dimension measured in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenX;

/**
 *  Screen size in the vertical (Y) dimension measured in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenY;

/** The set of iOS major software versions this device supports. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedVersionIds;

/** Tags for this dimension. Examples: "default", "preview", "deprecated". */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

@end


/**
 *  A test that explores an iOS application on an iOS device.
 */
@interface GTLRTesting_IosRoboTest : GTLRObject

/**
 *  The bundle ID for the app-under-test. This is determined by examining the
 *  application's "Info.plist" file.
 */
@property(nonatomic, copy, nullable) NSString *appBundleId;

/** Required. The ipa stored at this file should be used to run the test. */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *appIpa;

/**
 *  An optional Roboscript to customize the crawl. See
 *  https://firebase.google.com/docs/test-lab/android/robo-scripts-reference for
 *  more information about Roboscripts.
 */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *roboScript;

@end


/**
 *  iOS configuration that can be selected at the time a test is run.
 */
@interface GTLRTesting_IosRuntimeConfiguration : GTLRObject

/** The set of available locales. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_Locale *> *locales;

/** The set of available orientations. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_Orientation *> *orientations;

@end


/**
 *  A test of an iOS application that implements one or more game loop
 *  scenarios. This test type accepts an archived application (.ipa file) and a
 *  list of integer scenarios that will be executed on the app sequentially.
 */
@interface GTLRTesting_IosTestLoop : GTLRObject

/** Output only. The bundle id for the application under test. */
@property(nonatomic, copy, nullable) NSString *appBundleId;

/** Required. The .ipa of the application to test. */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *appIpa;

/**
 *  The list of scenarios that should be run during the test. Defaults to the
 *  single scenario 0 if unspecified.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *scenarios;

@end


/**
 *  A description of how to set up an iOS device prior to running the test.
 */
@interface GTLRTesting_IosTestSetup : GTLRObject

/** iOS apps to install in addition to those being directly tested. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_FileReference *> *additionalIpas;

/**
 *  The network traffic profile used for running the test. Available network
 *  profiles can be queried by using the NETWORK_CONFIGURATION environment type
 *  when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
 */
@property(nonatomic, copy, nullable) NSString *networkProfile;

/**
 *  List of directories on the device to upload to Cloud Storage at the end of
 *  the test. Directories should either be in a shared directory (such as
 *  /private/var/mobile/Media) or within an accessible directory inside the
 *  app's filesystem (such as /Documents) by specifying the bundle ID.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_IosDeviceFile *> *pullDirectories;

/** List of files to push to the device before starting the test. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_IosDeviceFile *> *pushFiles;

@end


/**
 *  An iOS version.
 */
@interface GTLRTesting_IosVersion : GTLRObject

/**
 *  An opaque id for this iOS version. Use this id to invoke the
 *  TestExecutionService.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  An integer representing the major iOS version. Examples: "8", "9".
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *majorVersion;

/**
 *  An integer representing the minor iOS version. Examples: "1", "2".
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minorVersion;

/** The available Xcode versions for this version. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedXcodeVersionIds;

/** Tags for this dimension. Examples: "default", "preview", "deprecated". */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

@end


/**
 *  A test of an iOS application that uses the XCTest framework. Xcode supports
 *  the option to "build for testing", which generates an .xctestrun file that
 *  contains a test specification (arguments, test methods, etc). This test type
 *  accepts a zip file containing the .xctestrun file and the corresponding
 *  contents of the Build/Products directory that contains all the binaries
 *  needed to run the tests.
 */
@interface GTLRTesting_IosXcTest : GTLRObject

/** Output only. The bundle id for the application under test. */
@property(nonatomic, copy, nullable) NSString *appBundleId;

/**
 *  The option to test special app entitlements. Setting this would re-sign the
 *  app having special entitlements with an explicit application-identifier.
 *  Currently supports testing aps-environment entitlement.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *testSpecialEntitlements;

/**
 *  Required. The .zip containing the .xctestrun file and the contents of the
 *  DerivedData/Build/Products directory. The .xctestrun file in this zip is
 *  ignored if the xctestrun field is specified.
 */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *testsZip;

/**
 *  The Xcode version that should be used for the test. Use the
 *  TestEnvironmentDiscoveryService to get supported options. Defaults to the
 *  latest Xcode version Firebase Test Lab supports.
 */
@property(nonatomic, copy, nullable) NSString *xcodeVersion;

/**
 *  An .xctestrun file that will override the .xctestrun file in the tests zip.
 *  Because the .xctestrun file contains environment variables along with test
 *  methods to run and/or ignore, this can be useful for sharding tests. Default
 *  is taken from the tests zip.
 */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *xctestrun;

@end


/**
 *  Lab specific information for a device.
 */
@interface GTLRTesting_LabInfo : GTLRObject

/**
 *  Lab name where the device is hosted. If empty, the device is hosted in a
 *  Google owned lab.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Specifies an intent that starts the main launcher activity.
 */
@interface GTLRTesting_LauncherActivityIntent : GTLRObject
@end


/**
 *  A list of device sessions.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "deviceSessions" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRTesting_ListDeviceSessionsResponse : GTLRCollectionObject

/**
 *  The sessions matching the specified filter in the given cloud project.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_DeviceSession *> *deviceSessions;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  A location/region designation for language.
 */
@interface GTLRTesting_Locale : GTLRObject

/**
 *  The id for this locale. Example: "en_US".
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** A human-friendly name for this language/locale. Example: "English". */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A human-friendly string representing the region for this locale. Example:
 *  "United States". Not present for every locale.
 */
@property(nonatomic, copy, nullable) NSString *region;

/** Tags for this dimension. Example: "default". */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

@end


/**
 *  Shards test cases into the specified groups of packages, classes, and/or
 *  methods. With manual sharding enabled, specifying test targets via
 *  environment_variables or in InstrumentationTest is invalid.
 */
@interface GTLRTesting_ManualSharding : GTLRObject

/**
 *  Required. Group of packages, classes, and/or test methods to be run for each
 *  manually-created shard. You must specify at least one shard if this field is
 *  present. When you select one or more physical devices, the number of
 *  repeated test_targets_for_shard must be <= 50. When you select one or more
 *  ARM virtual devices, it must be <= 200. When you select only x86 virtual
 *  devices, it must be <= 500.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_TestTargetsForShard *> *testTargetsForShard;

@end


/**
 *  Describes a single error or issue with a matrix.
 */
@interface GTLRTesting_MatrixErrorDetail : GTLRObject

/**
 *  Output only. A human-readable message about how the error in the TestMatrix.
 *  Expands on the `reason` field with additional details and possible options
 *  to fix the issue.
 */
@property(nonatomic, copy, nullable) NSString *message;

/**
 *  Output only. The reason for the error. This is a constant value in
 *  UPPER_SNAKE_CASE that identifies the cause of the error.
 */
@property(nonatomic, copy, nullable) NSString *reason;

@end


/**
 *  A tag within a manifest.
 *  https://developer.android.com/guide/topics/manifest/meta-data-element.html
 */
@interface GTLRTesting_Metadata : GTLRObject

/** The android:name value */
@property(nonatomic, copy, nullable) NSString *name;

/** The android:value value */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRTesting_NetworkConfiguration
 */
@interface GTLRTesting_NetworkConfiguration : GTLRObject

/** The emulation rule applying to the download traffic. */
@property(nonatomic, strong, nullable) GTLRTesting_TrafficRule *downRule;

/**
 *  The unique opaque id for this network traffic configuration.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The emulation rule applying to the upload traffic. */
@property(nonatomic, strong, nullable) GTLRTesting_TrafficRule *upRule;

@end


/**
 *  GTLRTesting_NetworkConfigurationCatalog
 */
@interface GTLRTesting_NetworkConfigurationCatalog : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRTesting_NetworkConfiguration *> *configurations;

@end


/**
 *  Skips the starting activity
 */
@interface GTLRTesting_NoActivityIntent : GTLRObject
@end


/**
 *  An opaque binary blob file to install on the device before the test starts.
 */
@interface GTLRTesting_ObbFile : GTLRObject

/** Required. Opaque Binary Blob (OBB) file(s) to install on the device. */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *obb;

/**
 *  Required. OBB file name which must conform to the format as specified by
 *  Android e.g. [main|patch].0300110.com.example.android.obb which will be
 *  installed into \\/Android/obb/\\/ on the device.
 */
@property(nonatomic, copy, nullable) NSString *obbFileName;

@end


/**
 *  Screen orientation of the device.
 */
@interface GTLRTesting_Orientation : GTLRObject

/**
 *  The id for this orientation. Example: "portrait".
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** A human-friendly name for this orientation. Example: "portrait". */
@property(nonatomic, copy, nullable) NSString *name;

/** Tags for this dimension. Example: "default". */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

@end


/**
 *  A version-specific information of an Android model.
 */
@interface GTLRTesting_PerAndroidVersionInfo : GTLRObject

/**
 *  The number of online devices for an Android version.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_PerAndroidVersionInfo_DeviceCapacity_DeviceCapacityHigh
 *        Devices that are high in capacity (The lab has a large number of these
 *        devices). These devices are generally suggested for running a large
 *        number of simultaneous tests (e.g. more than 100 tests). Please note
 *        that high capacity devices do not guarantee short wait times due to
 *        several factors: 1. Traffic (how heavily they are used at any given
 *        moment) 2. High capacity devices are prioritized for certain usages,
 *        which may cause user tests to be slower than selecting other similar
 *        device types. (Value: "DEVICE_CAPACITY_HIGH")
 *    @arg @c kGTLRTesting_PerAndroidVersionInfo_DeviceCapacity_DeviceCapacityLow
 *        Devices that are low in capacity (The lab has a small number of these
 *        devices). These devices may be used if users need to test on this
 *        specific device model and version. Please note that due to low
 *        capacity, the tests may take much longer to finish, especially if a
 *        large number of tests are invoked at once. These devices are not
 *        suitable for test sharding. (Value: "DEVICE_CAPACITY_LOW")
 *    @arg @c kGTLRTesting_PerAndroidVersionInfo_DeviceCapacity_DeviceCapacityMedium
 *        Devices that are medium in capacity (The lab has a decent number of
 *        these devices, though not as many as high capacity devices). These
 *        devices are suitable for fewer test runs (e.g. fewer than 100 tests)
 *        and only for low shard counts (e.g. less than 10 shards). (Value:
 *        "DEVICE_CAPACITY_MEDIUM")
 *    @arg @c kGTLRTesting_PerAndroidVersionInfo_DeviceCapacity_DeviceCapacityNone
 *        Devices that are completely missing from the lab. These devices are
 *        unavailable either temporarily or permanently and should not be
 *        requested. If the device is also marked as deprecated, this state is
 *        very likely permanent. (Value: "DEVICE_CAPACITY_NONE")
 *    @arg @c kGTLRTesting_PerAndroidVersionInfo_DeviceCapacity_DeviceCapacityUnspecified
 *        The value of device capacity is unknown or unset. (Value:
 *        "DEVICE_CAPACITY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *deviceCapacity;

/**
 *  Output only. Identifies supported clients for DirectAccess for this Android
 *  version.
 */
@property(nonatomic, strong, nullable) GTLRTesting_DirectAccessVersionInfo *directAccessVersionInfo;

/**
 *  Output only. The estimated wait time for a single interactive device session
 *  using Direct Access.
 */
@property(nonatomic, strong, nullable) GTLRDuration *interactiveDeviceAvailabilityEstimate;

/** An Android version. */
@property(nonatomic, copy, nullable) NSString *versionId;

@end


/**
 *  A version-specific information of an iOS model.
 */
@interface GTLRTesting_PerIosVersionInfo : GTLRObject

/**
 *  The number of online devices for an iOS version.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_PerIosVersionInfo_DeviceCapacity_DeviceCapacityHigh
 *        Devices that are high in capacity (The lab has a large number of these
 *        devices). These devices are generally suggested for running a large
 *        number of simultaneous tests (e.g. more than 100 tests). Please note
 *        that high capacity devices do not guarantee short wait times due to
 *        several factors: 1. Traffic (how heavily they are used at any given
 *        moment) 2. High capacity devices are prioritized for certain usages,
 *        which may cause user tests to be slower than selecting other similar
 *        device types. (Value: "DEVICE_CAPACITY_HIGH")
 *    @arg @c kGTLRTesting_PerIosVersionInfo_DeviceCapacity_DeviceCapacityLow
 *        Devices that are low in capacity (The lab has a small number of these
 *        devices). These devices may be used if users need to test on this
 *        specific device model and version. Please note that due to low
 *        capacity, the tests may take much longer to finish, especially if a
 *        large number of tests are invoked at once. These devices are not
 *        suitable for test sharding. (Value: "DEVICE_CAPACITY_LOW")
 *    @arg @c kGTLRTesting_PerIosVersionInfo_DeviceCapacity_DeviceCapacityMedium
 *        Devices that are medium in capacity (The lab has a decent number of
 *        these devices, though not as many as high capacity devices). These
 *        devices are suitable for fewer test runs (e.g. fewer than 100 tests)
 *        and only for low shard counts (e.g. less than 10 shards). (Value:
 *        "DEVICE_CAPACITY_MEDIUM")
 *    @arg @c kGTLRTesting_PerIosVersionInfo_DeviceCapacity_DeviceCapacityNone
 *        Devices that are completely missing from the lab. These devices are
 *        unavailable either temporarily or permanently and should not be
 *        requested. If the device is also marked as deprecated, this state is
 *        very likely permanent. (Value: "DEVICE_CAPACITY_NONE")
 *    @arg @c kGTLRTesting_PerIosVersionInfo_DeviceCapacity_DeviceCapacityUnspecified
 *        The value of device capacity is unknown or unset. (Value:
 *        "DEVICE_CAPACITY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *deviceCapacity;

/** An iOS version. */
@property(nonatomic, copy, nullable) NSString *versionId;

@end


/**
 *  The currently provided software environment on the devices under test.
 */
@interface GTLRTesting_ProvidedSoftwareCatalog : GTLRObject

/**
 *  A string representing the current version of AndroidX Test Orchestrator that
 *  is used in the environment. The package is available at
 *  https://maven.google.com/web/index.html#androidx.test:orchestrator.
 */
@property(nonatomic, copy, nullable) NSString *androidxOrchestratorVersion;

/**
 *  Deprecated: Use AndroidX Test Orchestrator going forward. A string
 *  representing the current version of Android Test Orchestrator that is used
 *  in the environment. The package is available at
 *  https://maven.google.com/web/index.html#com.android.support.test:orchestrator.
 */
@property(nonatomic, copy, nullable) NSString *orchestratorVersion GTLR_DEPRECATED;

@end


/**
 *  A file or directory to install on the device before the test starts.
 */
@interface GTLRTesting_RegularFile : GTLRObject

/** Required. The source file. */
@property(nonatomic, strong, nullable) GTLRTesting_FileReference *content;

/**
 *  Required. Where to put the content on the device. Must be an absolute,
 *  allowlisted path. If the file exists, it will be replaced. The following
 *  device-side directories and any of their subdirectories are allowlisted:
 *  ${EXTERNAL_STORAGE}, /sdcard, or /storage ${ANDROID_DATA}/local/tmp, or
 *  /data/local/tmp Specifying a path outside of these directory trees is
 *  invalid. The paths /sdcard and /data will be made available and treated as
 *  implicit path substitutions. E.g. if /sdcard on a particular device does not
 *  map to external storage, the system will replace it with the external
 *  storage path prefix for that device and copy the file there. It is strongly
 *  advised to use the Environment API in app and test code to access files on
 *  the device in a portable way.
 */
@property(nonatomic, copy, nullable) NSString *devicePath;

@end


/**
 *  Locations where the results of running the test are stored.
 */
@interface GTLRTesting_ResultStorage : GTLRObject

/** Required. */
@property(nonatomic, strong, nullable) GTLRTesting_GoogleCloudStorage *googleCloudStorage;

/** Output only. URL to the results in the Firebase Web Console. */
@property(nonatomic, copy, nullable) NSString *resultsUrl;

/** Output only. The tool results execution that results are written to. */
@property(nonatomic, strong, nullable) GTLRTesting_ToolResultsExecution *toolResultsExecution;

/**
 *  The tool results history that contains the tool results execution that
 *  results are written to. If not provided, the service will choose an
 *  appropriate value.
 */
@property(nonatomic, strong, nullable) GTLRTesting_ToolResultsHistory *toolResultsHistory;

@end


/**
 *  Directs Robo to interact with a specific UI element if it is encountered
 *  during the crawl. Currently, Robo can perform text entry or element click.
 */
@interface GTLRTesting_RoboDirective : GTLRObject

/**
 *  Required. The type of action that Robo should perform on the specified
 *  element.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_RoboDirective_ActionType_ActionTypeUnspecified DO NOT
 *        USE. For proto versioning only. (Value: "ACTION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRTesting_RoboDirective_ActionType_EnterText Direct Robo to
 *        enter text on the specified element. No-op if specified element is not
 *        enabled or does not allow text entry. (Value: "ENTER_TEXT")
 *    @arg @c kGTLRTesting_RoboDirective_ActionType_Ignore Direct Robo to ignore
 *        interactions with a specific element. (Value: "IGNORE")
 *    @arg @c kGTLRTesting_RoboDirective_ActionType_SingleClick Direct Robo to
 *        click on the specified element. No-op if specified element is not
 *        clickable. (Value: "SINGLE_CLICK")
 */
@property(nonatomic, copy, nullable) NSString *actionType;

/**
 *  The text that Robo is directed to set. If left empty, the directive will be
 *  treated as a CLICK on the element matching the resource_name.
 */
@property(nonatomic, copy, nullable) NSString *inputText;

/**
 *  Required. The android resource name of the target UI element. For example,
 *  in Java: R.string.foo in xml: \@string/foo Only the "foo" part is needed.
 *  Reference doc:
 *  https://developer.android.com/guide/topics/resources/accessing-resources.html
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end


/**
 *  Message for specifying the start activities to crawl.
 */
@interface GTLRTesting_RoboStartingIntent : GTLRObject

/** An intent that starts the main launcher activity. */
@property(nonatomic, strong, nullable) GTLRTesting_LauncherActivityIntent *launcherActivity;

/** Skips the starting activity */
@property(nonatomic, strong, nullable) GTLRTesting_NoActivityIntent *noActivity;

/** An intent that starts an activity with specific details. */
@property(nonatomic, strong, nullable) GTLRTesting_StartActivityIntent *startActivity;

/** Timeout in seconds for each intent. */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

@end


/**
 *  The section of an tag.
 *  https://developer.android.com/guide/topics/manifest/service-element
 */
@interface GTLRTesting_Service : GTLRObject

/** Intent filters in the service */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_IntentFilter *> *intentFilter;

/** The android:name value */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A message encapsulating a series of Session states and the time that the
 *  DeviceSession first entered those states.
 */
@interface GTLRTesting_SessionStateEvent : GTLRObject

/**
 *  Output only. The time that the session_state first encountered that state.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *eventTime;

/**
 *  Output only. The session_state tracked by this event
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_SessionStateEvent_SessionState_Active The session has
 *        been granted and the device is accepting connections. (Value:
 *        "ACTIVE")
 *    @arg @c kGTLRTesting_SessionStateEvent_SessionState_Error Unable to
 *        complete the session for an internal reason, such as an infrastructure
 *        failure. (Value: "ERROR")
 *    @arg @c kGTLRTesting_SessionStateEvent_SessionState_Expired The session
 *        duration exceeded the device’s reservation time period and timed out
 *        automatically. (Value: "EXPIRED")
 *    @arg @c kGTLRTesting_SessionStateEvent_SessionState_Finished The user is
 *        finished with the session and it was canceled by the user while the
 *        request was still getting allocated or after allocation and during
 *        device usage period. (Value: "FINISHED")
 *    @arg @c kGTLRTesting_SessionStateEvent_SessionState_Pending The session
 *        has been validated and is in the queue for a device. (Value:
 *        "PENDING")
 *    @arg @c kGTLRTesting_SessionStateEvent_SessionState_Requested Initial
 *        state of a session request. The session is being validated for
 *        correctness and a device is not yet requested. (Value: "REQUESTED")
 *    @arg @c kGTLRTesting_SessionStateEvent_SessionState_SessionStateUnspecified
 *        Default value. This value is unused. (Value:
 *        "SESSION_STATE_UNSPECIFIED")
 *    @arg @c kGTLRTesting_SessionStateEvent_SessionState_Unavailable Unable to
 *        complete the session because the device was unavailable and it failed
 *        to allocate through the scheduler. For example, a device not in the
 *        catalog was requested or the request expired in the allocation queue.
 *        (Value: "UNAVAILABLE")
 */
@property(nonatomic, copy, nullable) NSString *sessionState;

/** Output only. A human-readable message to explain the state. */
@property(nonatomic, copy, nullable) NSString *stateMessage;

@end


/**
 *  Output only. Details about the shard.
 */
@interface GTLRTesting_Shard : GTLRObject

/**
 *  Output only. The estimated shard duration based on previous test case timing
 *  records, if available.
 */
@property(nonatomic, strong, nullable) GTLRDuration *estimatedShardDuration;

/**
 *  Output only. The total number of shards.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numShards;

/**
 *  Output only. The index of the shard among all the shards.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shardIndex;

/** Output only. Test targets for each shard. Only set for manual sharding. */
@property(nonatomic, strong, nullable) GTLRTesting_TestTargetsForShard *testTargetsForShard;

@end


/**
 *  Options for enabling sharding.
 */
@interface GTLRTesting_ShardingOption : GTLRObject

/**
 *  Shards test cases into the specified groups of packages, classes, and/or
 *  methods.
 */
@property(nonatomic, strong, nullable) GTLRTesting_ManualSharding *manualSharding;

/** Shards test based on previous test case timing records. */
@property(nonatomic, strong, nullable) GTLRTesting_SmartSharding *smartSharding;

/** Uniformly shards test cases given a total number of shards. */
@property(nonatomic, strong, nullable) GTLRTesting_UniformSharding *uniformSharding;

@end


/**
 *  Shards test based on previous test case timing records.
 */
@interface GTLRTesting_SmartSharding : GTLRObject

/**
 *  The amount of time tests within a shard should take. Default: 300 seconds (5
 *  minutes). The minimum allowed: 120 seconds (2 minutes). The shard count is
 *  dynamically set based on time, up to the maximum shard limit (described
 *  below). To guarantee at least one test case for each shard, the number of
 *  shards will not exceed the number of test cases. Shard duration will be
 *  exceeded if: - The maximum shard limit is reached and there is more
 *  calculated test time remaining to allocate into shards. - Any individual
 *  test is estimated to be longer than the targeted shard duration. Shard
 *  duration is not guaranteed because smart sharding uses test case history and
 *  default durations which may not be accurate. The rules for finding the test
 *  case timing records are: - If the service has processed a test case in the
 *  last 30 days, the record of the latest successful test case will be used. -
 *  For new test cases, the average duration of other known test cases will be
 *  used. - If there are no previous test case timing records available, the
 *  default test case duration is 15 seconds. Because the actual shard duration
 *  can exceed the targeted shard duration, we recommend that you set the
 *  targeted value at least 5 minutes less than the maximum allowed test timeout
 *  (45 minutes for physical devices and 60 minutes for virtual), or that you
 *  use the custom test timeout value that you set. This approach avoids
 *  cancelling the shard before all tests can finish. Note that there is a limit
 *  for maximum number of shards. When you select one or more physical devices,
 *  the number of shards must be <= 50. When you select one or more ARM virtual
 *  devices, it must be <= 200. When you select only x86 virtual devices, it
 *  must be <= 500. To guarantee at least one test case for per shard, the
 *  number of shards will not exceed the number of test cases. Each shard
 *  created counts toward daily test quota.
 */
@property(nonatomic, strong, nullable) GTLRDuration *targetedShardDuration;

@end


/**
 *  A starting intent specified by an action, uri, and categories.
 */
@interface GTLRTesting_StartActivityIntent : GTLRObject

/** Action name. Required for START_ACTIVITY. */
@property(nonatomic, copy, nullable) NSString *action;

/** Intent categories to set on the intent. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *categories;

/** URI for the action. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  GTLRTesting_SystraceSetup
 */
@interface GTLRTesting_SystraceSetup : GTLRObject

/**
 *  Systrace duration in seconds. Should be between 1 and 30 seconds. 0 disables
 *  systrace.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *durationSeconds GTLR_DEPRECATED;

@end


/**
 *  Additional details about the progress of the running test.
 */
@interface GTLRTesting_TestDetails : GTLRObject

/**
 *  Output only. If the TestState is ERROR, then this string will contain
 *  human-readable details about the error.
 */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/**
 *  Output only. Human-readable, detailed descriptions of the test's progress.
 *  For example: "Provisioning a device", "Starting Test". During the course of
 *  execution new data may be appended to the end of progress_messages.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *progressMessages;

@end


/**
 *  A description of a test environment.
 */
@interface GTLRTesting_TestEnvironmentCatalog : GTLRObject

/** Supported Android devices. */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidDeviceCatalog *androidDeviceCatalog;

/** The IP blocks used by devices in the test environment. */
@property(nonatomic, strong, nullable) GTLRTesting_DeviceIpBlockCatalog *deviceIpBlockCatalog;

/** Supported iOS devices. */
@property(nonatomic, strong, nullable) GTLRTesting_IosDeviceCatalog *iosDeviceCatalog;

/** Supported network configurations. */
@property(nonatomic, strong, nullable) GTLRTesting_NetworkConfigurationCatalog *networkConfigurationCatalog;

/** The software test environment provided by TestExecutionService. */
@property(nonatomic, strong, nullable) GTLRTesting_ProvidedSoftwareCatalog *softwareCatalog;

@end


/**
 *  A single test executed in a single environment.
 */
@interface GTLRTesting_TestExecution : GTLRObject

/** Output only. How the host machine(s) are configured. */
@property(nonatomic, strong, nullable) GTLRTesting_Environment *environment;

/**
 *  Output only. Unique id set by the service.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Output only. Id of the containing TestMatrix. */
@property(nonatomic, copy, nullable) NSString *matrixId;

/** Output only. The cloud project that owns the test execution. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Output only. Details about the shard. */
@property(nonatomic, strong, nullable) GTLRTesting_Shard *shard;

/**
 *  Output only. Indicates the current progress of the test execution (e.g.,
 *  FINISHED).
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_TestExecution_State_Cancelled The user cancelled the
 *        execution. Can only be set on an execution. (Value: "CANCELLED")
 *    @arg @c kGTLRTesting_TestExecution_State_Error The execution or matrix has
 *        stopped because it encountered an infrastructure failure. (Value:
 *        "ERROR")
 *    @arg @c kGTLRTesting_TestExecution_State_Finished The execution or matrix
 *        has terminated normally. On a matrix this means that the matrix level
 *        processing completed normally, but individual executions may be in an
 *        ERROR state. (Value: "FINISHED")
 *    @arg @c kGTLRTesting_TestExecution_State_IncompatibleArchitecture The
 *        execution was not run because the provided inputs are incompatible
 *        with the requested architecture. Example: requested device does not
 *        support running the native code in the supplied APK Can only be set on
 *        an execution. (Value: "INCOMPATIBLE_ARCHITECTURE")
 *    @arg @c kGTLRTesting_TestExecution_State_IncompatibleEnvironment The
 *        execution was not run because the provided inputs are incompatible
 *        with the requested environment. Example: requested AndroidVersion is
 *        lower than APK's minSdkVersion Can only be set on an execution.
 *        (Value: "INCOMPATIBLE_ENVIRONMENT")
 *    @arg @c kGTLRTesting_TestExecution_State_Invalid The execution or matrix
 *        was not run because the provided inputs are not valid. Examples: input
 *        file is not of the expected type, is malformed/corrupt, or was flagged
 *        as malware (Value: "INVALID")
 *    @arg @c kGTLRTesting_TestExecution_State_Pending The execution or matrix
 *        is waiting for resources to become available. (Value: "PENDING")
 *    @arg @c kGTLRTesting_TestExecution_State_Running The execution is
 *        currently being processed. Can only be set on an execution. (Value:
 *        "RUNNING")
 *    @arg @c kGTLRTesting_TestExecution_State_TestStateUnspecified Do not use.
 *        For proto versioning only. (Value: "TEST_STATE_UNSPECIFIED")
 *    @arg @c kGTLRTesting_TestExecution_State_UnsupportedEnvironment The
 *        execution was not run because it corresponds to a unsupported
 *        environment. Can only be set on an execution. (Value:
 *        "UNSUPPORTED_ENVIRONMENT")
 *    @arg @c kGTLRTesting_TestExecution_State_Validating The execution or
 *        matrix is being validated. (Value: "VALIDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. Additional details about the running test. */
@property(nonatomic, strong, nullable) GTLRTesting_TestDetails *testDetails;

/** Output only. How to run the test. */
@property(nonatomic, strong, nullable) GTLRTesting_TestSpecification *testSpecification;

/** Output only. The time this test execution was initially created. */
@property(nonatomic, strong, nullable) GTLRDateTime *timestamp;

/** Output only. Where the results for this execution are written. */
@property(nonatomic, strong, nullable) GTLRTesting_ToolResultsStep *toolResultsStep;

@end


/**
 *  TestMatrix captures all details about a test. It contains the environment
 *  configuration, test specification, test executions and overall state and
 *  outcome.
 */
@interface GTLRTesting_TestMatrix : GTLRObject

/** Information about the client which invoked the test. */
@property(nonatomic, strong, nullable) GTLRTesting_ClientInfo *clientInfo;

/** Required. The devices the tests are being executed on. */
@property(nonatomic, strong, nullable) GTLRTesting_EnvironmentMatrix *environmentMatrix;

/**
 *  Output only. Details about why a matrix was deemed invalid. If multiple
 *  checks can be safely performed, they will be reported but no assumptions
 *  should be made about the length of this list.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_MatrixErrorDetail *> *extendedInvalidMatrixDetails;

/**
 *  If true, only a single attempt at most will be made to run each
 *  execution/shard in the matrix. Flaky test attempts are not affected.
 *  Normally, 2 or more attempts are made if a potential infrastructure issue is
 *  detected. This feature is for latency sensitive workloads. The incidence of
 *  execution failures may be significantly greater for fail-fast matrices and
 *  support is more limited because of that expectation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failFast;

/**
 *  The number of times a TestExecution should be re-attempted if one or more of
 *  its test cases fail for any reason. The maximum number of reruns allowed is
 *  10. Default is 0, which implies no reruns.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *flakyTestAttempts;

/**
 *  Output only. Describes why the matrix is considered invalid. Only useful for
 *  matrices in the INVALID state.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_BuiltForIosSimulator
 *        The zipped XCTest was built for the iOS simulator rather than for a
 *        physical device. (Value: "BUILT_FOR_IOS_SIMULATOR")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_DetailsUnavailable
 *        The matrix is INVALID, but there are no further details available.
 *        (Value: "DETAILS_UNAVAILABLE")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_DeviceAdminReceiver
 *        Device administrator applications are not allowed. (Value:
 *        "DEVICE_ADMIN_RECEIVER")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_ForbiddenPermissions
 *        The app declares one or more permissions that are not allowed. (Value:
 *        "FORBIDDEN_PERMISSIONS")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_InstrumentationOrchestratorIncompatible
 *        The test runner class specified by user or in the test APK's manifest
 *        file is not compatible with Android Test Orchestrator. Orchestrator is
 *        only compatible with AndroidJUnitRunner version 1.1 or higher.
 *        Orchestrator can be disabled by using DO_NOT_USE_ORCHESTRATOR
 *        OrchestratorOption. (Value:
 *        "INSTRUMENTATION_ORCHESTRATOR_INCOMPATIBLE")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidApkPreviewSdk
 *        APK is built for a preview SDK which is unsupported (Value:
 *        "INVALID_APK_PREVIEW_SDK")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidDirectiveAction
 *        Invalid definition of action in the robo directives (e.g. a click or
 *        ignore action includes an input text field) (Value:
 *        "INVALID_DIRECTIVE_ACTION")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidInputApk
 *        Either the provided input APK path was malformed, the APK file does
 *        not exist, or the user does not have permission to access the APK
 *        file. (Value: "INVALID_INPUT_APK")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidMatrixDetailsUnspecified
 *        Do not use. For proto versioning only. (Value:
 *        "INVALID_MATRIX_DETAILS_UNSPECIFIED")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidPackageName
 *        The APK application ID (aka package name) is invalid. See also
 *        https://developer.android.com/studio/build/application-id (Value:
 *        "INVALID_PACKAGE_NAME")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidResourceName
 *        There is at least one invalid resource name in the provided robo
 *        directives (Value: "INVALID_RESOURCE_NAME")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_InvalidRoboDirectives
 *        There is a conflict in the provided robo_directives. (Value:
 *        "INVALID_ROBO_DIRECTIVES")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedApk The
 *        input app APK could not be parsed. (Value: "MALFORMED_APK")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedAppBundle
 *        The iOS application bundle (.app) couldn't be processed. (Value:
 *        "MALFORMED_APP_BUNDLE")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedIpa The
 *        input IPA could not be parsed. (Value: "MALFORMED_IPA")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedTestApk The
 *        input test APK could not be parsed. (Value: "MALFORMED_TEST_APK")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_MalformedXcTestZip
 *        The zipped XCTest was malformed. The zip did not contain a single
 *        .xctestrun file and the contents of the DerivedData/Build/Products
 *        directory. (Value: "MALFORMED_XC_TEST_ZIP")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_MatrixTooLarge The
 *        matrix expanded to contain too many executions. (Value:
 *        "MATRIX_TOO_LARGE")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_MissingUrlScheme The
 *        application doesn't register the game loop URL scheme. (Value:
 *        "MISSING_URL_SCHEME")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoCodeApk APK
 *        contains no code. See also
 *        https://developer.android.com/guide/topics/manifest/application-element.html#code
 *        (Value: "NO_CODE_APK")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoInstrumentation The
 *        test apk does not declare an instrumentation. (Value:
 *        "NO_INSTRUMENTATION")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoLauncherActivity A
 *        main launcher activity could not be found. (Value:
 *        "NO_LAUNCHER_ACTIVITY")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoManifest The
 *        AndroidManifest.xml could not be found. (Value: "NO_MANIFEST")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoPackageName The APK
 *        manifest does not declare a package name. (Value: "NO_PACKAGE_NAME")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoSignature The input
 *        app apk does not have a signature. (Value: "NO_SIGNATURE")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoTestRunnerClass The
 *        test APK does not contain the test runner class specified by the user
 *        or in the manifest file. This can be caused by one of the following
 *        reasons: - the user provided a runner class name that's incorrect, or
 *        - the test runner isn't built into the test APK (might be in the app
 *        APK instead). (Value: "NO_TEST_RUNNER_CLASS")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_NoTestsInXcTestZip
 *        The .xctestrun file did not specify any test targets. (Value:
 *        "NO_TESTS_IN_XC_TEST_ZIP")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_PlistCannotBeParsed
 *        An Info.plist file in the XCTest zip could not be parsed. (Value:
 *        "PLIST_CANNOT_BE_PARSED")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_ScenarioLabelMalformed
 *        There was an error when parsing a label's value. (Value:
 *        "SCENARIO_LABEL_MALFORMED")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_ScenarioLabelNotDeclared
 *        The request contains a scenario label that was not declared in the
 *        manifest. (Value: "SCENARIO_LABEL_NOT_DECLARED")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_ScenarioNotDeclared
 *        The request contains a scenario number that was not declared in the
 *        manifest. (Value: "SCENARIO_NOT_DECLARED")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_ServiceNotActivated A
 *        required cloud service api is not activated. See:
 *        https://firebase.google.com/docs/test-lab/android/continuous#requirements
 *        (Value: "SERVICE_NOT_ACTIVATED")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestLoopIntentFilterNotFound
 *        There is no test loop intent filter, or the one that is given is not
 *        formatted correctly. (Value: "TEST_LOOP_INTENT_FILTER_NOT_FOUND")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestNotAppHosted XC
 *        tests which run on physical devices must have "IsAppHostedTestBundle"
 *        == "true" in the xctestrun file. (Value: "TEST_NOT_APP_HOSTED")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestOnlyApk The APK
 *        is marked as "testOnly". Deprecated and not currently used. (Value:
 *        "TEST_ONLY_APK")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestQuotaExceeded Not
 *        enough test quota to run the executions in this matrix. (Value:
 *        "TEST_QUOTA_EXCEEDED")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_TestSameAsApp The
 *        test package and app package are the same. (Value: "TEST_SAME_AS_APP")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_UnknownPermissionError
 *        There was an unknown permission issue running this test. (Value:
 *        "UNKNOWN_PERMISSION_ERROR")
 *    @arg @c kGTLRTesting_TestMatrix_InvalidMatrixDetails_UseDestinationArtifacts
 *        One or more of the test targets defined in the .xctestrun file
 *        specifies "UseDestinationArtifacts", which is disallowed. (Value:
 *        "USE_DESTINATION_ARTIFACTS")
 */
@property(nonatomic, copy, nullable) NSString *invalidMatrixDetails;

/**
 *  Output Only. The overall outcome of the test. Only set when the test matrix
 *  state is FINISHED.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_TestMatrix_OutcomeSummary_Failure A run failed, for
 *        instance: - One or more test cases failed. - A test timed out. - The
 *        application under test crashed. (Value: "FAILURE")
 *    @arg @c kGTLRTesting_TestMatrix_OutcomeSummary_Inconclusive Something
 *        unexpected happened. The run should still be considered unsuccessful
 *        but this is likely a transient problem and re-running the test might
 *        be successful. (Value: "INCONCLUSIVE")
 *    @arg @c kGTLRTesting_TestMatrix_OutcomeSummary_OutcomeSummaryUnspecified
 *        Do not use. For proto versioning only. (Value:
 *        "OUTCOME_SUMMARY_UNSPECIFIED")
 *    @arg @c kGTLRTesting_TestMatrix_OutcomeSummary_Skipped All tests were
 *        skipped, for instance: - All device configurations were incompatible.
 *        (Value: "SKIPPED")
 *    @arg @c kGTLRTesting_TestMatrix_OutcomeSummary_Success The test matrix run
 *        was successful, for instance: - All the test cases passed. - Robo did
 *        not detect a crash of the application under test. (Value: "SUCCESS")
 */
@property(nonatomic, copy, nullable) NSString *outcomeSummary;

/** The cloud project that owns the test matrix. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Required. Where the results for the matrix are written. */
@property(nonatomic, strong, nullable) GTLRTesting_ResultStorage *resultStorage;

/**
 *  Output only. Indicates the current progress of the test matrix.
 *
 *  Likely values:
 *    @arg @c kGTLRTesting_TestMatrix_State_Cancelled The user cancelled the
 *        execution. Can only be set on an execution. (Value: "CANCELLED")
 *    @arg @c kGTLRTesting_TestMatrix_State_Error The execution or matrix has
 *        stopped because it encountered an infrastructure failure. (Value:
 *        "ERROR")
 *    @arg @c kGTLRTesting_TestMatrix_State_Finished The execution or matrix has
 *        terminated normally. On a matrix this means that the matrix level
 *        processing completed normally, but individual executions may be in an
 *        ERROR state. (Value: "FINISHED")
 *    @arg @c kGTLRTesting_TestMatrix_State_IncompatibleArchitecture The
 *        execution was not run because the provided inputs are incompatible
 *        with the requested architecture. Example: requested device does not
 *        support running the native code in the supplied APK Can only be set on
 *        an execution. (Value: "INCOMPATIBLE_ARCHITECTURE")
 *    @arg @c kGTLRTesting_TestMatrix_State_IncompatibleEnvironment The
 *        execution was not run because the provided inputs are incompatible
 *        with the requested environment. Example: requested AndroidVersion is
 *        lower than APK's minSdkVersion Can only be set on an execution.
 *        (Value: "INCOMPATIBLE_ENVIRONMENT")
 *    @arg @c kGTLRTesting_TestMatrix_State_Invalid The execution or matrix was
 *        not run because the provided inputs are not valid. Examples: input
 *        file is not of the expected type, is malformed/corrupt, or was flagged
 *        as malware (Value: "INVALID")
 *    @arg @c kGTLRTesting_TestMatrix_State_Pending The execution or matrix is
 *        waiting for resources to become available. (Value: "PENDING")
 *    @arg @c kGTLRTesting_TestMatrix_State_Running The execution is currently
 *        being processed. Can only be set on an execution. (Value: "RUNNING")
 *    @arg @c kGTLRTesting_TestMatrix_State_TestStateUnspecified Do not use. For
 *        proto versioning only. (Value: "TEST_STATE_UNSPECIFIED")
 *    @arg @c kGTLRTesting_TestMatrix_State_UnsupportedEnvironment The execution
 *        was not run because it corresponds to a unsupported environment. Can
 *        only be set on an execution. (Value: "UNSUPPORTED_ENVIRONMENT")
 *    @arg @c kGTLRTesting_TestMatrix_State_Validating The execution or matrix
 *        is being validated. (Value: "VALIDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. The list of test executions that the service creates for this
 *  matrix.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_TestExecution *> *testExecutions;

/** Output only. Unique id set by the service. */
@property(nonatomic, copy, nullable) NSString *testMatrixId;

/** Required. How to run the test. */
@property(nonatomic, strong, nullable) GTLRTesting_TestSpecification *testSpecification;

/** Output only. The time this test matrix was initially created. */
@property(nonatomic, strong, nullable) GTLRDateTime *timestamp;

@end


/**
 *  A description of how to set up the Android device prior to running the test.
 */
@interface GTLRTesting_TestSetup : GTLRObject

/**
 *  The device will be logged in on this account for the duration of the test.
 */
@property(nonatomic, strong, nullable) GTLRTesting_Account *account;

/**
 *  APKs to install in addition to those being directly tested. These will be
 *  installed after the app under test. Currently capped at 100.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_Apk *> *additionalApks;

/**
 *  List of directories on the device to upload to GCS at the end of the test;
 *  they must be absolute paths under /sdcard, /storage or /data/local/tmp. Path
 *  names are restricted to characters a-z A-Z 0-9 _ - . + and / Note: The paths
 *  /sdcard and /data will be made available and treated as implicit path
 *  substitutions. E.g. if /sdcard on a particular device does not map to
 *  external storage, the system will replace it with the external storage path
 *  prefix for that device.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *directoriesToPull;

/**
 *  Whether to prevent all runtime permissions to be granted at app install
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dontAutograntPermissions;

/**
 *  Environment variables to set for the test (only applicable for
 *  instrumentation tests).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_EnvironmentVariable *> *environmentVariables;

/** List of files to push to the device before starting the test. */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_DeviceFile *> *filesToPush;

/**
 *  Optional. Initial setup APKs to install before the app under test is
 *  installed. Currently capped at 100.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTesting_Apk *> *initialSetupApks;

/**
 *  The network traffic profile used for running the test. Available network
 *  profiles can be queried by using the NETWORK_CONFIGURATION environment type
 *  when calling TestEnvironmentDiscoveryService.GetTestEnvironmentCatalog.
 */
@property(nonatomic, copy, nullable) NSString *networkProfile;

/**
 *  Systrace configuration for the run. Deprecated: Systrace used Python 2 which
 *  was sunsetted on 2020-01-01. Systrace is no longer supported in the Cloud
 *  Testing API, and no Systrace file will be provided in the results.
 */
@property(nonatomic, strong, nullable) GTLRTesting_SystraceSetup *systrace GTLR_DEPRECATED;

@end


/**
 *  A description of how to run the test.
 */
@interface GTLRTesting_TestSpecification : GTLRObject

/** An Android instrumentation test. */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidInstrumentationTest *androidInstrumentationTest;

/** An Android robo test. */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidRoboTest *androidRoboTest;

/** An Android Application with a Test Loop. */
@property(nonatomic, strong, nullable) GTLRTesting_AndroidTestLoop *androidTestLoop;

/**
 *  Disables performance metrics recording. May reduce test latency.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disablePerformanceMetrics;

/**
 *  Disables video recording. May reduce test latency.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableVideoRecording;

/** An iOS Robo test. */
@property(nonatomic, strong, nullable) GTLRTesting_IosRoboTest *iosRoboTest;

/** An iOS application with a test loop. */
@property(nonatomic, strong, nullable) GTLRTesting_IosTestLoop *iosTestLoop;

/** Test setup requirements for iOS. */
@property(nonatomic, strong, nullable) GTLRTesting_IosTestSetup *iosTestSetup;

/** An iOS XCTest, via an .xctestrun file. */
@property(nonatomic, strong, nullable) GTLRTesting_IosXcTest *iosXcTest;

/**
 *  Test setup requirements for Android e.g. files to install, bootstrap
 *  scripts.
 */
@property(nonatomic, strong, nullable) GTLRTesting_TestSetup *testSetup;

/**
 *  Max time a test execution is allowed to run before it is automatically
 *  cancelled. The default value is 5 min.
 */
@property(nonatomic, strong, nullable) GTLRDuration *testTimeout;

@end


/**
 *  Test targets for a shard.
 */
@interface GTLRTesting_TestTargetsForShard : GTLRObject

/**
 *  Group of packages, classes, and/or test methods to be run for each shard.
 *  The targets need to be specified in AndroidJUnitRunner argument format. For
 *  example, "package com.my.packages" "class com.my.package.MyClass". The
 *  number of test_targets must be greater than 0.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *testTargets;

@end


/**
 *  Represents a tool results execution resource. This has the results of a
 *  TestMatrix.
 */
@interface GTLRTesting_ToolResultsExecution : GTLRObject

/** Output only. A tool results execution ID. */
@property(nonatomic, copy, nullable) NSString *executionId;

/** Output only. A tool results history ID. */
@property(nonatomic, copy, nullable) NSString *historyId;

/** Output only. The cloud project that owns the tool results execution. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  Represents a tool results history resource.
 */
@interface GTLRTesting_ToolResultsHistory : GTLRObject

/** Required. A tool results history ID. */
@property(nonatomic, copy, nullable) NSString *historyId;

/** Required. The cloud project that owns the tool results history. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  Represents a tool results step resource. This has the results of a
 *  TestExecution.
 */
@interface GTLRTesting_ToolResultsStep : GTLRObject

/** Output only. A tool results execution ID. */
@property(nonatomic, copy, nullable) NSString *executionId;

/** Output only. A tool results history ID. */
@property(nonatomic, copy, nullable) NSString *historyId;

/** Output only. The cloud project that owns the tool results step. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Output only. A tool results step ID. */
@property(nonatomic, copy, nullable) NSString *stepId;

@end


/**
 *  Network emulation parameters.
 */
@interface GTLRTesting_TrafficRule : GTLRObject

/**
 *  Bandwidth in kbits/second.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bandwidth;

/**
 *  Burst size in kbits.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *burst;

/** Packet delay, must be >= 0. */
@property(nonatomic, strong, nullable) GTLRDuration *delay;

/**
 *  Packet duplication ratio (0.0 - 1.0).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *packetDuplicationRatio;

/**
 *  Packet loss ratio (0.0 - 1.0).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *packetLossRatio;

@end


/**
 *  Uniformly shards test cases given a total number of shards. For
 *  instrumentation tests, it will be translated to "-e numShard" and "-e
 *  shardIndex" AndroidJUnitRunner arguments. With uniform sharding enabled,
 *  specifying either of these sharding arguments via `environment_variables` is
 *  invalid. Based on the sharding mechanism AndroidJUnitRunner uses, there is
 *  no guarantee that test cases will be distributed uniformly across all
 *  shards.
 */
@interface GTLRTesting_UniformSharding : GTLRObject

/**
 *  Required. The total number of shards to create. This must always be a
 *  positive number that is no greater than the total number of test cases. When
 *  you select one or more physical devices, the number of shards must be <= 50.
 *  When you select one or more ARM virtual devices, it must be <= 200. When you
 *  select only x86 virtual devices, it must be <= 500.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numShards;

@end


/**
 *  A tag within a manifest.
 *  https://developer.android.com/guide/topics/manifest/uses-feature-element.html
 */
@interface GTLRTesting_UsesFeature : GTLRObject

/**
 *  The android:required value
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isRequired;

/** The android:name value */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  An Xcode version that an iOS version is compatible with.
 */
@interface GTLRTesting_XcodeVersion : GTLRObject

/** Tags for this Xcode version. Example: "default". */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

/** The id for this version. Example: "9.2". */
@property(nonatomic, copy, nullable) NSString *version;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
