// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Testing API (testing/v1)
// Description:
//   Allows developers to run automated tests for their mobile applications on
//   Google infrastructure.
// Documentation:
//   https://developers.google.com/cloud-test-lab/

#import <GoogleAPIClientForREST/GTLRTestingQuery.h>

// ----------------------------------------------------------------------------
// Constants

// environmentType
NSString * const kGTLRTestingEnvironmentTypeAndroid            = @"ANDROID";
NSString * const kGTLRTestingEnvironmentTypeDeviceIpBlocks     = @"DEVICE_IP_BLOCKS";
NSString * const kGTLRTestingEnvironmentTypeEnvironmentTypeUnspecified = @"ENVIRONMENT_TYPE_UNSPECIFIED";
NSString * const kGTLRTestingEnvironmentTypeIos                = @"IOS";
NSString * const kGTLRTestingEnvironmentTypeNetworkConfiguration = @"NETWORK_CONFIGURATION";
NSString * const kGTLRTestingEnvironmentTypeProvidedSoftware   = @"PROVIDED_SOFTWARE";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRTestingQuery

@dynamic fields;

@end

@implementation GTLRTestingQuery_ApplicationDetailServiceGetApkDetails

+ (instancetype)queryWithObject:(GTLRTesting_FileReference *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v1/applicationDetailService/getApkDetails";
  GTLRTestingQuery_ApplicationDetailServiceGetApkDetails *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRTesting_GetApkDetailsResponse class];
  query.loggingName = @"testing.applicationDetailService.getApkDetails";
  return query;
}

@end

@implementation GTLRTestingQuery_ProjectsDeviceSessionsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRTesting_CancelDeviceSessionRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRTestingQuery_ProjectsDeviceSessionsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRTesting_Empty class];
  query.loggingName = @"testing.projects.deviceSessions.cancel";
  return query;
}

@end

@implementation GTLRTestingQuery_ProjectsDeviceSessionsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRTesting_DeviceSession *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/deviceSessions";
  GTLRTestingQuery_ProjectsDeviceSessionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRTesting_DeviceSession class];
  query.loggingName = @"testing.projects.deviceSessions.create";
  return query;
}

@end

@implementation GTLRTestingQuery_ProjectsDeviceSessionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRTestingQuery_ProjectsDeviceSessionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRTesting_DeviceSession class];
  query.loggingName = @"testing.projects.deviceSessions.get";
  return query;
}

@end

@implementation GTLRTestingQuery_ProjectsDeviceSessionsList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/deviceSessions";
  GTLRTestingQuery_ProjectsDeviceSessionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTesting_ListDeviceSessionsResponse class];
  query.loggingName = @"testing.projects.deviceSessions.list";
  return query;
}

@end

@implementation GTLRTestingQuery_ProjectsDeviceSessionsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRTesting_DeviceSession *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRTestingQuery_ProjectsDeviceSessionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRTesting_DeviceSession class];
  query.loggingName = @"testing.projects.deviceSessions.patch";
  return query;
}

@end

@implementation GTLRTestingQuery_ProjectsTestMatricesCancel

@dynamic projectId, testMatrixId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                      testMatrixId:(NSString *)testMatrixId {
  NSArray *pathParams = @[
    @"projectId", @"testMatrixId"
  ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/testMatrices/{testMatrixId}:cancel";
  GTLRTestingQuery_ProjectsTestMatricesCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.testMatrixId = testMatrixId;
  query.expectedObjectClass = [GTLRTesting_CancelTestMatrixResponse class];
  query.loggingName = @"testing.projects.testMatrices.cancel";
  return query;
}

@end

@implementation GTLRTestingQuery_ProjectsTestMatricesCreate

@dynamic projectId, requestId;

+ (instancetype)queryWithObject:(GTLRTesting_TestMatrix *)object
                      projectId:(NSString *)projectId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/testMatrices";
  GTLRTestingQuery_ProjectsTestMatricesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRTesting_TestMatrix class];
  query.loggingName = @"testing.projects.testMatrices.create";
  return query;
}

@end

@implementation GTLRTestingQuery_ProjectsTestMatricesGet

@dynamic projectId, testMatrixId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                      testMatrixId:(NSString *)testMatrixId {
  NSArray *pathParams = @[
    @"projectId", @"testMatrixId"
  ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/testMatrices/{testMatrixId}";
  GTLRTestingQuery_ProjectsTestMatricesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.testMatrixId = testMatrixId;
  query.expectedObjectClass = [GTLRTesting_TestMatrix class];
  query.loggingName = @"testing.projects.testMatrices.get";
  return query;
}

@end

@implementation GTLRTestingQuery_TestEnvironmentCatalogGet

@dynamic environmentType, projectId;

+ (instancetype)queryWithEnvironmentType:(NSString *)environmentType {
  NSArray *pathParams = @[ @"environmentType" ];
  NSString *pathURITemplate = @"v1/testEnvironmentCatalog/{environmentType}";
  GTLRTestingQuery_TestEnvironmentCatalogGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.environmentType = environmentType;
  query.expectedObjectClass = [GTLRTesting_TestEnvironmentCatalog class];
  query.loggingName = @"testing.testEnvironmentCatalog.get";
  return query;
}

@end
