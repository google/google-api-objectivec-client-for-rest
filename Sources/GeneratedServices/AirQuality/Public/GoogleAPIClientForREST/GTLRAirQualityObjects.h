// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Air Quality API (airquality/v1)
// Description:
//   The Air Quality API.
// Documentation:
//   https://developers.google.com/maps/documentation/air-quality

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAirQuality_AdditionalInfo;
@class GTLRAirQuality_Color;
@class GTLRAirQuality_Concentration;
@class GTLRAirQuality_CustomLocalAqi;
@class GTLRAirQuality_HealthRecommendations;
@class GTLRAirQuality_HourInfo;
@class GTLRAirQuality_HourlyForecast;
@class GTLRAirQuality_HttpBody_Extensions_Item;
@class GTLRAirQuality_Index;
@class GTLRAirQuality_Interval;
@class GTLRAirQuality_LatLng;
@class GTLRAirQuality_Pollutant;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRAirQuality_Concentration.units

/**
 *  The "Âµg/m^3" (micrograms per cubic meter) concentration unit.
 *
 *  Value: "MICROGRAMS_PER_CUBIC_METER"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_Concentration_Units_MicrogramsPerCubicMeter;
/**
 *  The ppb (parts per billion) concentration unit.
 *
 *  Value: "PARTS_PER_BILLION"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_Concentration_Units_PartsPerBillion;
/**
 *  Unspecified concentration unit.
 *
 *  Value: "UNIT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_Concentration_Units_UnitUnspecified;

// ----------------------------------------------------------------------------
// GTLRAirQuality_LookupCurrentConditionsRequest.extraComputations

/**
 *  Determines whether the response would include the concentrations of the
 *  dominant pollutants measured according to global and/or local indexes. If
 *  the request specified both the global AQI and the local AQI, there may be up
 *  to two pollutant codes returned. If specified, the dominant pollutant object
 *  contained in the 'pollutants' list will include a `concentration` field when
 *  the data is available.
 *
 *  Value: "DOMINANT_POLLUTANT_CONCENTRATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupCurrentConditionsRequest_ExtraComputations_DominantPollutantConcentration;
/**
 *  The default value. The server ignores it if it is passed as a parameter.
 *
 *  Value: "EXTRA_COMPUTATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupCurrentConditionsRequest_ExtraComputations_ExtraComputationUnspecified;
/**
 *  Determines whether the response will include the health advice and
 *  recommended actions for the current AQI conditions. The recommendations are
 *  tailored for the general population and six populations at risk groups with
 *  greater sensitivities to pollutants than the general population. If
 *  specified, the `health_recommendations` field will be populated in the
 *  response when the relevant data is available.
 *
 *  Value: "HEALTH_RECOMMENDATIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupCurrentConditionsRequest_ExtraComputations_HealthRecommendations;
/**
 *  Determines whether to include the local (national) AQI of the requested
 *  location (country) in the response. If specified, the response will contain
 *  an 'air_quality_index' data structure with all the relevant data on the
 *  location's local AQI.
 *
 *  Value: "LOCAL_AQI"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupCurrentConditionsRequest_ExtraComputations_LocalAqi;
/**
 *  Determines whether to include in the response the additional information of
 *  each pollutant. If specified, each air quality index object contained in the
 *  'indexes' field response will include an `additional_info` field when the
 *  data is available.
 *
 *  Value: "POLLUTANT_ADDITIONAL_INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupCurrentConditionsRequest_ExtraComputations_PollutantAdditionalInfo;
/**
 *  Determines whether the response would include the concentrations of all
 *  pollutants with available measurements according to global and/or local
 *  indexes. If specified, each pollutant object contained in the 'pollutants'
 *  field in the response will include a `concentration` field when the data is
 *  available.
 *
 *  Value: "POLLUTANT_CONCENTRATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupCurrentConditionsRequest_ExtraComputations_PollutantConcentration;

// ----------------------------------------------------------------------------
// GTLRAirQuality_LookupCurrentConditionsRequest.uaqiColorPalette

/**
 *  The default value. Ignored if passed as a parameter.
 *
 *  Value: "COLOR_PALETTE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupCurrentConditionsRequest_UaqiColorPalette_ColorPaletteUnspecified;
/**
 *  Determines whether to use a indigo/persian palette (dark theme).
 *
 *  Value: "INDIGO_PERSIAN_DARK"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupCurrentConditionsRequest_UaqiColorPalette_IndigoPersianDark;
/**
 *  Determines whether to use a indigo/persian palette (light theme).
 *
 *  Value: "INDIGO_PERSIAN_LIGHT"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupCurrentConditionsRequest_UaqiColorPalette_IndigoPersianLight;
/**
 *  Determines whether to use a red/green palette.
 *
 *  Value: "RED_GREEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupCurrentConditionsRequest_UaqiColorPalette_RedGreen;

// ----------------------------------------------------------------------------
// GTLRAirQuality_LookupForecastRequest.extraComputations

/**
 *  Determines whether the response would include the concentrations of the
 *  dominant pollutants measured according to global and/or local indexes. If
 *  the request specified both the global AQI and the local AQI, there may be up
 *  to two pollutant codes returned. If specified, the dominant pollutant object
 *  contained in the 'pollutants' list will include a `concentration` field when
 *  the data is available.
 *
 *  Value: "DOMINANT_POLLUTANT_CONCENTRATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupForecastRequest_ExtraComputations_DominantPollutantConcentration;
/**
 *  The default value. The server ignores it if it is passed as a parameter.
 *
 *  Value: "EXTRA_COMPUTATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupForecastRequest_ExtraComputations_ExtraComputationUnspecified;
/**
 *  Determines whether the response will include the health advice and
 *  recommended actions for the current AQI conditions. The recommendations are
 *  tailored for the general population and six populations at risk groups with
 *  greater sensitivities to pollutants than the general population. If
 *  specified, the `health_recommendations` field will be populated in the
 *  response when the relevant data is available.
 *
 *  Value: "HEALTH_RECOMMENDATIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupForecastRequest_ExtraComputations_HealthRecommendations;
/**
 *  Determines whether to include the local (national) AQI of the requested
 *  location (country) in the response. If specified, the response will contain
 *  an 'air_quality_index' data structure with all the relevant data on the
 *  location's local AQI.
 *
 *  Value: "LOCAL_AQI"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupForecastRequest_ExtraComputations_LocalAqi;
/**
 *  Determines whether to include in the response the additional information of
 *  each pollutant. If specified, each air quality index object contained in the
 *  'indexes' field response will include an `additional_info` field when the
 *  data is available.
 *
 *  Value: "POLLUTANT_ADDITIONAL_INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupForecastRequest_ExtraComputations_PollutantAdditionalInfo;
/**
 *  Determines whether the response would include the concentrations of all
 *  pollutants with available measurements according to global and/or local
 *  indexes. If specified, each pollutant object contained in the 'pollutants'
 *  field in the response will include a `concentration` field when the data is
 *  available.
 *
 *  Value: "POLLUTANT_CONCENTRATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupForecastRequest_ExtraComputations_PollutantConcentration;

// ----------------------------------------------------------------------------
// GTLRAirQuality_LookupForecastRequest.uaqiColorPalette

/**
 *  The default value. Ignored if passed as a parameter.
 *
 *  Value: "COLOR_PALETTE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupForecastRequest_UaqiColorPalette_ColorPaletteUnspecified;
/**
 *  Determines whether to use a indigo/persian palette (dark theme).
 *
 *  Value: "INDIGO_PERSIAN_DARK"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupForecastRequest_UaqiColorPalette_IndigoPersianDark;
/**
 *  Determines whether to use a indigo/persian palette (light theme).
 *
 *  Value: "INDIGO_PERSIAN_LIGHT"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupForecastRequest_UaqiColorPalette_IndigoPersianLight;
/**
 *  Determines whether to use a red/green palette.
 *
 *  Value: "RED_GREEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupForecastRequest_UaqiColorPalette_RedGreen;

// ----------------------------------------------------------------------------
// GTLRAirQuality_LookupHistoryRequest.extraComputations

/**
 *  Determines whether the response would include the concentrations of the
 *  dominant pollutants measured according to global and/or local indexes. If
 *  the request specified both the global AQI and the local AQI, there may be up
 *  to two pollutant codes returned. If specified, the dominant pollutant object
 *  contained in the 'pollutants' list will include a `concentration` field when
 *  the data is available.
 *
 *  Value: "DOMINANT_POLLUTANT_CONCENTRATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupHistoryRequest_ExtraComputations_DominantPollutantConcentration;
/**
 *  The default value. The server ignores it if it is passed as a parameter.
 *
 *  Value: "EXTRA_COMPUTATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupHistoryRequest_ExtraComputations_ExtraComputationUnspecified;
/**
 *  Determines whether the response will include the health advice and
 *  recommended actions for the current AQI conditions. The recommendations are
 *  tailored for the general population and six populations at risk groups with
 *  greater sensitivities to pollutants than the general population. If
 *  specified, the `health_recommendations` field will be populated in the
 *  response when the relevant data is available.
 *
 *  Value: "HEALTH_RECOMMENDATIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupHistoryRequest_ExtraComputations_HealthRecommendations;
/**
 *  Determines whether to include the local (national) AQI of the requested
 *  location (country) in the response. If specified, the response will contain
 *  an 'air_quality_index' data structure with all the relevant data on the
 *  location's local AQI.
 *
 *  Value: "LOCAL_AQI"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupHistoryRequest_ExtraComputations_LocalAqi;
/**
 *  Determines whether to include in the response the additional information of
 *  each pollutant. If specified, each air quality index object contained in the
 *  'indexes' field response will include an `additional_info` field when the
 *  data is available.
 *
 *  Value: "POLLUTANT_ADDITIONAL_INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupHistoryRequest_ExtraComputations_PollutantAdditionalInfo;
/**
 *  Determines whether the response would include the concentrations of all
 *  pollutants with available measurements according to global and/or local
 *  indexes. If specified, each pollutant object contained in the 'pollutants'
 *  field in the response will include a `concentration` field when the data is
 *  available.
 *
 *  Value: "POLLUTANT_CONCENTRATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupHistoryRequest_ExtraComputations_PollutantConcentration;

// ----------------------------------------------------------------------------
// GTLRAirQuality_LookupHistoryRequest.uaqiColorPalette

/**
 *  The default value. Ignored if passed as a parameter.
 *
 *  Value: "COLOR_PALETTE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupHistoryRequest_UaqiColorPalette_ColorPaletteUnspecified;
/**
 *  Determines whether to use a indigo/persian palette (dark theme).
 *
 *  Value: "INDIGO_PERSIAN_DARK"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupHistoryRequest_UaqiColorPalette_IndigoPersianDark;
/**
 *  Determines whether to use a indigo/persian palette (light theme).
 *
 *  Value: "INDIGO_PERSIAN_LIGHT"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupHistoryRequest_UaqiColorPalette_IndigoPersianLight;
/**
 *  Determines whether to use a red/green palette.
 *
 *  Value: "RED_GREEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRAirQuality_LookupHistoryRequest_UaqiColorPalette_RedGreen;

/**
 *  The emission sources and health effects of a given pollutant.
 */
@interface GTLRAirQuality_AdditionalInfo : GTLRObject

/** Text representing the pollutant's main health effects. */
@property(nonatomic, copy, nullable) NSString *effects;

/** Text representing the pollutant's main emission sources. */
@property(nonatomic, copy, nullable) NSString *sources;

@end


/**
 *  Represents a color in the RGBA color space. This representation is designed
 *  for simplicity of conversion to and from color representations in various
 *  languages over compactness. For example, the fields of this representation
 *  can be trivially provided to the constructor of `java.awt.Color` in Java; it
 *  can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha`
 *  method in iOS; and, with just a little work, it can be easily formatted into
 *  a CSS `rgba()` string in JavaScript. This reference page doesn't have
 *  information about the absolute color space that should be used to interpret
 *  the RGB valueâfor example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default,
 *  applications should assume the sRGB color space. When color equality needs
 *  to be decided, implementations, unless documented otherwise, treat two
 *  colors as equal if all their red, green, blue, and alpha values each differ
 *  by at most `1e-5`. Example (Java): import com.google.type.Color; // ...
 *  public static java.awt.Color fromProto(Color protocolor) { float alpha =
 *  protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new
 *  java.awt.Color( protocolor.getRed(), protocolor.getGreen(),
 *  protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color
 *  color) { float red = (float) color.getRed(); float green = (float)
 *  color.getGreen(); float blue = (float) color.getBlue(); float denominator =
 *  255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red /
 *  denominator) .setGreen(green / denominator) .setBlue(blue / denominator);
 *  int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha(
 *  FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build());
 *  } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ...
 *  static UIColor* fromProto(Color* protocolor) { float red = [protocolor red];
 *  float green = [protocolor green]; float blue = [protocolor blue];
 *  FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if
 *  (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor
 *  colorWithRed:red green:green blue:blue alpha:alpha]; } static Color*
 *  toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color
 *  getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color*
 *  result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green];
 *  [result setBlue:blue]; if (alpha <= 0.9999) { [result
 *  setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return
 *  result; } // ... Example (JavaScript): // ... var protoToCssColor =
 *  function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac =
 *  rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red =
 *  Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue
 *  = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return
 *  rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value ||
 *  0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(',
 *  rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor =
 *  function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green
 *  << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6
 *  - hexString.length; var resultBuilder = ['#']; for (var i = 0; i <
 *  missingZeros; i++) { resultBuilder.push('0'); }
 *  resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
 */
@interface GTLRAirQuality_Color : GTLRObject

/**
 *  The fraction of this color that should be applied to the pixel. That is, the
 *  final pixel color is defined by the equation: `pixel color = alpha * (this
 *  color) + (1.0 - alpha) * (background color)` This means that a value of 1.0
 *  corresponds to a solid color, whereas a value of 0.0 corresponds to a
 *  completely transparent color. This uses a wrapper message rather than a
 *  simple float scalar so that it is possible to distinguish between a default
 *  value and the value being unset. If omitted, this color object is rendered
 *  as a solid color (as if the alpha value had been explicitly given a value of
 *  1.0).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *alpha;

/**
 *  The amount of blue in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blue;

/**
 *  The amount of green in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *green;

/**
 *  The amount of red in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *red;

@end


/**
 *  The concentration of a given pollutant in the air.
 */
@interface GTLRAirQuality_Concentration : GTLRObject

/**
 *  Units for measuring this pollutant concentration.
 *
 *  Likely values:
 *    @arg @c kGTLRAirQuality_Concentration_Units_MicrogramsPerCubicMeter The
 *        "Âµg/m^3" (micrograms per cubic meter) concentration unit. (Value:
 *        "MICROGRAMS_PER_CUBIC_METER")
 *    @arg @c kGTLRAirQuality_Concentration_Units_PartsPerBillion The ppb (parts
 *        per billion) concentration unit. (Value: "PARTS_PER_BILLION")
 *    @arg @c kGTLRAirQuality_Concentration_Units_UnitUnspecified Unspecified
 *        concentration unit. (Value: "UNIT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *units;

/**
 *  Value of pollutant concentration.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *value;

@end


/**
 *  Expresses a 'country/region to AQI' relationship. Pairs a country/region
 *  with a desired AQI so that air quality data that is required for that
 *  country/region will be displayed according to the chosen AQI.
 */
@interface GTLRAirQuality_CustomLocalAqi : GTLRObject

/**
 *  The AQI to associate the country/region with. Value should be a [valid
 *  index](/maps/documentation/air-quality/laqis) code.
 */
@property(nonatomic, copy, nullable) NSString *aqi;

/**
 *  The country/region requiring the custom AQI. Value should be provided using
 *  [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) code.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

@end


/**
 *  Health recommendations for different population groups in a free text
 *  format. The recommendations are derived from their associated air quality
 *  conditions.
 */
@interface GTLRAirQuality_HealthRecommendations : GTLRObject

/** Sports and other strenuous outdoor activities. */
@property(nonatomic, copy, nullable) NSString *athletes;

/** Younger populations including children, toddlers, and babies. */
@property(nonatomic, copy, nullable) NSString *children;

/** Retirees and people older than the general population. */
@property(nonatomic, copy, nullable) NSString *elderly;

/** No specific sensitivities. */
@property(nonatomic, copy, nullable) NSString *generalPopulation;

/** Heart and circulatory system diseases. */
@property(nonatomic, copy, nullable) NSString *heartDiseasePopulation;

/** Respiratory related problems and asthma suffers. */
@property(nonatomic, copy, nullable) NSString *lungDiseasePopulation;

/** Women at all stages of pregnancy. */
@property(nonatomic, copy, nullable) NSString *pregnantWomen;

@end


/**
 *  Contains the air quality information for each hour in the requested range.
 *  For example, if the request is for 48 hours of history there will be 48
 *  elements of hourly info.
 */
@interface GTLRAirQuality_HourInfo : GTLRObject

/**
 *  A rounded down timestamp indicating the time the data refers to in RFC3339
 *  UTC "Zulu" format, with nanosecond resolution and up to nine fractional
 *  digits. For example: "2014-10-02T15:00:00Z".
 */
@property(nonatomic, strong, nullable) GTLRDateTime *dateTime;

/**
 *  Health advice and recommended actions related to the reported air quality
 *  conditions. Recommendations are tailored differently for populations at
 *  risk, groups with greater sensitivities to pollutants, and the general
 *  population.
 */
@property(nonatomic, strong, nullable) GTLRAirQuality_HealthRecommendations *healthRecommendations;

/**
 *  Based on the request parameters, this list will include (up to) two air
 *  quality indexes: - Universal AQI. Will be returned if the universalAqi
 *  boolean is set to true. - Local AQI. Will be returned if the LOCAL_AQI extra
 *  computation is specified.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAirQuality_Index *> *indexes;

/**
 *  A list of pollutants affecting the location specified in the request. Note:
 *  This field will be returned only for requests that specified one or more of
 *  the following extra computations: POLLUTANT_ADDITIONAL_INFO,
 *  DOMINANT_POLLUTANT_CONCENTRATION, POLLUTANT_CONCENTRATION.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAirQuality_Pollutant *> *pollutants;

@end


/**
 *  Contains the air quality information for each hour in the requested range.
 *  For example, if the request is for 48 hours of forecast there will be 48
 *  elements of hourly forecasts.
 */
@interface GTLRAirQuality_HourlyForecast : GTLRObject

/**
 *  A rounded down timestamp indicating the time (hour) the data refers to in
 *  RFC3339 UTC "Zulu" format. For example: "2014-10-02T15:00:00Z".
 */
@property(nonatomic, strong, nullable) GTLRDateTime *dateTime;

/**
 *  Health advice and recommended actions related to the reported air quality
 *  conditions. Recommendations are tailored differently for populations at
 *  risk, groups with greater sensitivities to pollutants, and the general
 *  population.
 */
@property(nonatomic, strong, nullable) GTLRAirQuality_HealthRecommendations *healthRecommendations;

/**
 *  Based on the request parameters, this list will include (up to) two air
 *  quality indexes: - Universal AQI. Will be returned if the `universal_aqi`
 *  boolean is set to true. - Local AQI. Will be returned if the LOCAL_AQI extra
 *  computation is specified.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAirQuality_Index *> *indexes;

/**
 *  A list of pollutants affecting the location specified in the request. Note:
 *  This field will be returned only for requests that specified one or more of
 *  the following extra computations: POLLUTANT_ADDITIONAL_INFO,
 *  DOMINANT_POLLUTANT_CONCENTRATION, POLLUTANT_CONCENTRATION.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAirQuality_Pollutant *> *pollutants;

@end


/**
 *  Message that represents an arbitrary HTTP body. It should only be used for
 *  payload formats that can't be represented as JSON, such as raw binary or an
 *  HTML page. This message can be used both in streaming and non-streaming API
 *  methods in the request as well as the response. It can be used as a
 *  top-level request field, which is convenient if one wants to extract
 *  parameters from either the URL or HTTP template into the request fields and
 *  also want access to the raw HTTP body. Example: message GetResourceRequest {
 *  // A unique request id. string request_id = 1; // The raw HTTP body is bound
 *  to this field. google.api.HttpBody http_body = 2; } service ResourceService
 *  { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc
 *  UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); }
 *  Example with streaming methods: service CaldavService { rpc
 *  GetCalendar(stream google.api.HttpBody) returns (stream
 *  google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns
 *  (stream google.api.HttpBody); } Use of this type only changes how the
 *  request and response bodies are handled, all other features will continue to
 *  work unchanged.
 */
@interface GTLRAirQuality_HttpBody : GTLRObject

/**
 *  The HTTP Content-Type header value specifying the content type of the body.
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  The HTTP request/response body as raw binary.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  Application specific response metadata. Must be set in the first response
 *  for streaming APIs.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAirQuality_HttpBody_Extensions_Item *> *extensions;

@end


/**
 *  GTLRAirQuality_HttpBody_Extensions_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRAirQuality_HttpBody_Extensions_Item : GTLRObject
@end


/**
 *  The basic object for representing different air quality metrics. When
 *  brought together, these metrics provide a snapshot about the current air
 *  quality conditions. There are multiple indexes in the world serving
 *  different purposes and groups interested in measuring different aspects of
 *  air quality.
 */
@interface GTLRAirQuality_Index : GTLRObject

/**
 *  The index's numeric score. Examples: 10, 100. The value is not normalized
 *  and should only be interpreted in the context of its related air-quality
 *  index. For non-numeric indexes, this field will not be returned. Note: This
 *  field should be used for calculations, graph display, etc. For displaying
 *  the index score, you should use the AQI display field.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aqi;

/**
 *  Textual representation of the index numeric score, that may include prefix
 *  or suffix symbols, which usually represents the worst index score. Example:
 *  >100 or 10+. Note: This field should be used when you want to display the
 *  index score. For non-numeric indexes, this field is empty.
 */
@property(nonatomic, copy, nullable) NSString *aqiDisplay;

/**
 *  Textual classification of the index numeric score interpretation. For
 *  example: "Excellent air quality".
 */
@property(nonatomic, copy, nullable) NSString *category;

/**
 *  The index's code. This field represents the index for programming purposes
 *  by using snake case instead of spaces. Examples: "uaqi", "fra_atmo".
 */
@property(nonatomic, copy, nullable) NSString *code;

/** The color used to represent the AQI numeric score. */
@property(nonatomic, strong, nullable) GTLRAirQuality_Color *color;

/** A human readable representation of the index name. Example: "AQI (US)" */
@property(nonatomic, copy, nullable) NSString *displayName;

/** The chemical symbol of the dominant pollutant. For example: "CO". */
@property(nonatomic, copy, nullable) NSString *dominantPollutant;

@end


/**
 *  Represents a time interval, encoded as a Timestamp start (inclusive) and a
 *  Timestamp end (exclusive). The start must be less than or equal to the end.
 *  When the start equals the end, the interval is empty (matches no time). When
 *  both start and end are unspecified, the interval matches any time.
 */
@interface GTLRAirQuality_Interval : GTLRObject

/**
 *  Optional. Exclusive end of the interval. If specified, a Timestamp matching
 *  this interval will have to be before the end.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Optional. Inclusive start of the interval. If specified, a Timestamp
 *  matching this interval will have to be the same or after the start.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  An object that represents a latitude/longitude pair. This is expressed as a
 *  pair of doubles to represent degrees latitude and degrees longitude. Unless
 *  specified otherwise, this object must conform to the WGS84 standard. Values
 *  must be within normalized ranges.
 */
@interface GTLRAirQuality_LatLng : GTLRObject

/**
 *  The latitude in degrees. It must be in the range [-90.0, +90.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latitude;

/**
 *  The longitude in degrees. It must be in the range [-180.0, +180.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longitude;

@end


/**
 *  The request definition of the air quality current conditions.
 */
@interface GTLRAirQuality_LookupCurrentConditionsRequest : GTLRObject

/**
 *  Optional. Expresses a 'country/region to AQI' relationship. Pairs a
 *  country/region with a desired AQI so that air quality data that is required
 *  for that country/region will be displayed according to the chosen AQI. This
 *  parameter can be used to specify a non-default AQI for a given country, for
 *  example, to get the US EPA index for Canada rather than the default index
 *  for Canada.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAirQuality_CustomLocalAqi *> *customLocalAqis;

/**
 *  Optional. Additional features that can be optionally enabled. Specifying
 *  extra computations will result in the relevant elements and fields to be
 *  returned in the response.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *extraComputations;

/**
 *  Optional. Allows the client to choose the language for the response. If data
 *  cannot be provided for that language the API uses the closest match. Allowed
 *  values rely on the IETF standard. Default value is en.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Required. The longitude and latitude from which the API looks for air
 *  quality current conditions data.
 */
@property(nonatomic, strong, nullable) GTLRAirQuality_LatLng *location;

/**
 *  Optional. Determines the color palette used for data provided by the
 *  'Universal Air Quality Index' (UAQI). This color palette is relevant just
 *  for UAQI, other AQIs have a predetermined color palette that can't be
 *  controlled.
 *
 *  Likely values:
 *    @arg @c kGTLRAirQuality_LookupCurrentConditionsRequest_UaqiColorPalette_ColorPaletteUnspecified
 *        The default value. Ignored if passed as a parameter. (Value:
 *        "COLOR_PALETTE_UNSPECIFIED")
 *    @arg @c kGTLRAirQuality_LookupCurrentConditionsRequest_UaqiColorPalette_IndigoPersianDark
 *        Determines whether to use a indigo/persian palette (dark theme).
 *        (Value: "INDIGO_PERSIAN_DARK")
 *    @arg @c kGTLRAirQuality_LookupCurrentConditionsRequest_UaqiColorPalette_IndigoPersianLight
 *        Determines whether to use a indigo/persian palette (light theme).
 *        (Value: "INDIGO_PERSIAN_LIGHT")
 *    @arg @c kGTLRAirQuality_LookupCurrentConditionsRequest_UaqiColorPalette_RedGreen
 *        Determines whether to use a red/green palette. (Value: "RED_GREEN")
 */
@property(nonatomic, copy, nullable) NSString *uaqiColorPalette;

/**
 *  Optional. If set to true, the Universal AQI will be included in the
 *  'indexes' field of the response. Default value is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *universalAqi;

@end


/**
 *  GTLRAirQuality_LookupCurrentConditionsResponse
 */
@interface GTLRAirQuality_LookupCurrentConditionsResponse : GTLRObject

/**
 *  A rounded down timestamp in RFC3339 UTC "Zulu" format, with nanosecond
 *  resolution and up to nine fractional digits. For example:
 *  "2014-10-02T15:00:00Z".
 */
@property(nonatomic, strong, nullable) GTLRDateTime *dateTime;

/**
 *  Health advice and recommended actions related to the reported air quality
 *  conditions. Recommendations are tailored differently for populations at
 *  risk, groups with greater sensitivities to pollutants, and the general
 *  population.
 */
@property(nonatomic, strong, nullable) GTLRAirQuality_HealthRecommendations *healthRecommendations;

/**
 *  Based on the request parameters, this list will include (up to) two air
 *  quality indexes: - Universal AQI. Will be returned if the universalAqi
 *  boolean is set to true. - Local AQI. Will be returned if the LOCAL_AQI extra
 *  computation is specified.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAirQuality_Index *> *indexes;

/**
 *  A list of pollutants affecting the location specified in the request. Note:
 *  This field will be returned only for requests that specified one or more of
 *  the following extra computations: POLLUTANT_ADDITIONAL_INFO,
 *  DOMINANT_POLLUTANT_CONCENTRATION, POLLUTANT_CONCENTRATION.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAirQuality_Pollutant *> *pollutants;

/**
 *  The ISO_3166-1 alpha-2 code of the country/region corresponding to the
 *  location provided in the request. This field might be omitted from the
 *  response if the location provided in the request resides in a disputed
 *  territory.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

@end


/**
 *  The request object of the air quality forecast API.
 */
@interface GTLRAirQuality_LookupForecastRequest : GTLRObject

/**
 *  Optional. Expresses a 'country/region to AQI' relationship. Pairs a
 *  country/region with a desired AQI so that air quality data that is required
 *  for that country/region will be displayed according to the chosen AQI. This
 *  parameter can be used to specify a non-default AQI for a given country, for
 *  example, to get the US EPA index for Canada rather than the default index
 *  for Canada.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAirQuality_CustomLocalAqi *> *customLocalAqis;

/**
 *  A timestamp for which to return the data for a specific point in time. The
 *  timestamp is rounded to the previous exact hour. Note: this will return
 *  hourly data for the requested timestamp only (i.e. a single hourly info
 *  element). For example, a request sent where the date_time parameter is set
 *  to 2023-01-03T11:05:49Z will be rounded down to 2023-01-03T11:00:00Z.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *dateTime;

/**
 *  Optional. Additional features that can be optionally enabled. Specifying
 *  extra computations will result in the relevant elements and fields to be
 *  returned in the response.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *extraComputations;

/**
 *  Optional. Allows the client to choose the language for the response. If data
 *  cannot be provided for that language the API uses the closest match. Allowed
 *  values rely on the IETF standard (default = 'en').
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Required. The latitude and longitude for which the API looks for air quality
 *  data.
 */
@property(nonatomic, strong, nullable) GTLRAirQuality_LatLng *location;

/**
 *  Optional. The maximum number of hourly info records to return per page
 *  (default = 24).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  Optional. A page token received from a previous forecast call. It is used to
 *  retrieve the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Indicates the start and end period for which to get the forecast data. The
 *  timestamp is rounded to the previous exact hour.
 */
@property(nonatomic, strong, nullable) GTLRAirQuality_Interval *period;

/**
 *  Optional. Determines the color palette used for data provided by the
 *  'Universal Air Quality Index' (UAQI). This color palette is relevant just
 *  for UAQI, other AQIs have a predetermined color palette that can't be
 *  controlled.
 *
 *  Likely values:
 *    @arg @c kGTLRAirQuality_LookupForecastRequest_UaqiColorPalette_ColorPaletteUnspecified
 *        The default value. Ignored if passed as a parameter. (Value:
 *        "COLOR_PALETTE_UNSPECIFIED")
 *    @arg @c kGTLRAirQuality_LookupForecastRequest_UaqiColorPalette_IndigoPersianDark
 *        Determines whether to use a indigo/persian palette (dark theme).
 *        (Value: "INDIGO_PERSIAN_DARK")
 *    @arg @c kGTLRAirQuality_LookupForecastRequest_UaqiColorPalette_IndigoPersianLight
 *        Determines whether to use a indigo/persian palette (light theme).
 *        (Value: "INDIGO_PERSIAN_LIGHT")
 *    @arg @c kGTLRAirQuality_LookupForecastRequest_UaqiColorPalette_RedGreen
 *        Determines whether to use a red/green palette. (Value: "RED_GREEN")
 */
@property(nonatomic, copy, nullable) NSString *uaqiColorPalette;

/**
 *  Optional. If set to true, the Universal AQI will be included in the
 *  'indexes' field of the response (default = true).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *universalAqi;

@end


/**
 *  The response object of the air quality forecast API.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "hourlyForecasts" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRAirQuality_LookupForecastResponse : GTLRCollectionObject

/**
 *  Optional. Contains the air quality information for each hour in the
 *  requested range. For example, if the request is for 48 hours of forecast
 *  there will be 48 elements of hourly forecasts.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAirQuality_HourlyForecast *> *hourlyForecasts;

/** Optional. The token to retrieve the next page. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Optional. The ISO_3166-1 alpha-2 code of the country/region corresponding to
 *  the location provided in the request. This field might be omitted from the
 *  response if the location provided in the request resides in a disputed
 *  territory.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

@end


/**
 *  The request object of the air quality history API.
 */
@interface GTLRAirQuality_LookupHistoryRequest : GTLRObject

/**
 *  Optional. Expresses a 'country/region to AQI' relationship. Pairs a
 *  country/region with a desired AQI so that air quality data that is required
 *  for that country/region will be displayed according to the chosen AQI. This
 *  parameter can be used to specify a non-default AQI for a given country, for
 *  example, to get the US EPA index for Canada rather than the default index
 *  for Canada.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAirQuality_CustomLocalAqi *> *customLocalAqis;

/**
 *  A timestamp for which to return historical data. The timestamp is rounded to
 *  the previous exact hour. Note: this will return hourly data for the
 *  requested timestamp only (i.e. a single hourly info element). For example, a
 *  request sent where the dateTime parameter is set to 2023-01-03T11:05:49Z
 *  will be rounded down to 2023-01-03T11:00:00Z. A timestamp in RFC3339 UTC
 *  "Zulu" format, with nanosecond resolution and up to nine fractional digits.
 *  Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
 */
@property(nonatomic, strong, nullable) GTLRDateTime *dateTime;

/**
 *  Optional. Additional features that can be optionally enabled. Specifying
 *  extra computations will result in the relevant elements and fields to be
 *  returned in the response.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *extraComputations;

/**
 *  Number from 1 to 720 that indicates the hours range for the request. For
 *  example: A value of 48 will yield data from the last 48 hours.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hours;

/**
 *  Optional. Allows the client to choose the language for the response. If data
 *  cannot be provided for that language the API uses the closest match. Allowed
 *  values rely on the IETF standard. Default value is en.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Required. The latitude and longitude for which the API looks for air quality
 *  history data.
 */
@property(nonatomic, strong, nullable) GTLRAirQuality_LatLng *location;

/**
 *  Optional. The maximum number of hourly info records to return per page. The
 *  default is 72 and the max value is 168 (7 days of data).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  Optional. A page token received from a previous history call. It is used to
 *  retrieve the subsequent page. Note that when providing a value for this
 *  parameter all other parameters provided must match the call that provided
 *  the page token (the previous call).
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Indicates the start and end period for which to get the historical data. The
 *  timestamp is rounded to the previous exact hour.
 */
@property(nonatomic, strong, nullable) GTLRAirQuality_Interval *period;

/**
 *  Optional. Determines the color palette used for data provided by the
 *  'Universal Air Quality Index' (UAQI). This color palette is relevant just
 *  for UAQI, other AQIs have a predetermined color palette that can't be
 *  controlled.
 *
 *  Likely values:
 *    @arg @c kGTLRAirQuality_LookupHistoryRequest_UaqiColorPalette_ColorPaletteUnspecified
 *        The default value. Ignored if passed as a parameter. (Value:
 *        "COLOR_PALETTE_UNSPECIFIED")
 *    @arg @c kGTLRAirQuality_LookupHistoryRequest_UaqiColorPalette_IndigoPersianDark
 *        Determines whether to use a indigo/persian palette (dark theme).
 *        (Value: "INDIGO_PERSIAN_DARK")
 *    @arg @c kGTLRAirQuality_LookupHistoryRequest_UaqiColorPalette_IndigoPersianLight
 *        Determines whether to use a indigo/persian palette (light theme).
 *        (Value: "INDIGO_PERSIAN_LIGHT")
 *    @arg @c kGTLRAirQuality_LookupHistoryRequest_UaqiColorPalette_RedGreen
 *        Determines whether to use a red/green palette. (Value: "RED_GREEN")
 */
@property(nonatomic, copy, nullable) NSString *uaqiColorPalette;

/**
 *  Optional. If set to true, the Universal AQI will be included in the
 *  'indexes' field of the response. Default value is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *universalAqi;

@end


/**
 *  GTLRAirQuality_LookupHistoryResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "hoursInfo" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAirQuality_LookupHistoryResponse : GTLRCollectionObject

/**
 *  Optional. Contains the air quality information for each hour in the
 *  requested range. For example, if the request is for 48 hours of history
 *  there will be 48 elements of hourly info.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAirQuality_HourInfo *> *hoursInfo;

/** Optional. The token to retrieve the next page. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Optional. The ISO_3166-1 alpha-2 code of the country/region corresponding to
 *  the location provided in the request. This field might be omitted from the
 *  response if the location provided in the request resides in a disputed
 *  territory.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

@end


/**
 *  Data regarding an air quality pollutant.
 */
@interface GTLRAirQuality_Pollutant : GTLRObject

/** Additional information about the pollutant. */
@property(nonatomic, strong, nullable) GTLRAirQuality_AdditionalInfo *additionalInfo;

/**
 *  The pollutant's code name. For example: "so2". A list of all available codes
 *  could be found
 *  [here](/maps/documentation/air-quality/pollutants#reported_pollutants).
 */
@property(nonatomic, copy, nullable) NSString *code;

/**
 *  The pollutant's concentration level measured by one of the standard air
 *  pollutation measure units.
 */
@property(nonatomic, strong, nullable) GTLRAirQuality_Concentration *concentration;

/** The pollutant's display name. For example: "NOx". */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The pollutant's full name. For chemical compounds, this is the IUPAC name.
 *  Example: "Sulfur Dioxide". For more information about the IUPAC names table,
 *  see https://iupac.org/what-we-do/periodic-table-of-elements/
 */
@property(nonatomic, copy, nullable) NSString *fullName;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
