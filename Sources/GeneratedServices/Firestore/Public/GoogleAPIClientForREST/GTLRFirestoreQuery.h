// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Firestore API (firestore/v1)
// Description:
//   Accesses the NoSQL document database built for automatic scaling, high
//   performance, and ease of application development.
// Documentation:
//   https://cloud.google.com/firestore

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRFirestoreObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Firestore query classes.
 */
@interface GTLRFirestoreQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets the metadata and configuration for a Field.
 *
 *  Method: firestore.projects.databases.collectionGroups.fields.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesCollectionGroupsFieldsGet : GTLRFirestoreQuery

/**
 *  Required. A name of the form
 *  `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirestore_GoogleFirestoreAdminV1Field.
 *
 *  Gets the metadata and configuration for a Field.
 *
 *  @param name Required. A name of the form
 *    `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesCollectionGroupsFieldsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the field configuration and metadata for this database. Currently,
 *  FirestoreAdmin.ListFields only supports listing fields that have been
 *  explicitly overridden. To issue this query, call FirestoreAdmin.ListFields
 *  with the filter set to `indexConfig.usesAncestorConfig:false` .
 *
 *  Method: firestore.projects.databases.collectionGroups.fields.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesCollectionGroupsFieldsList : GTLRFirestoreQuery

/**
 *  The filter to apply to list results. Currently, FirestoreAdmin.ListFields
 *  only supports listing fields that have been explicitly overridden. To issue
 *  this query, call FirestoreAdmin.ListFields with a filter that includes
 *  `indexConfig.usesAncestorConfig:false` .
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The number of results to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, returned from a previous call to FirestoreAdmin.ListFields,
 *  that may be used to get the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. A parent name of the form
 *  `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirestore_GoogleFirestoreAdminV1ListFieldsResponse.
 *
 *  Lists the field configuration and metadata for this database. Currently,
 *  FirestoreAdmin.ListFields only supports listing fields that have been
 *  explicitly overridden. To issue this query, call FirestoreAdmin.ListFields
 *  with the filter set to `indexConfig.usesAncestorConfig:false` .
 *
 *  @param parent Required. A parent name of the form
 *    `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesCollectionGroupsFieldsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a field configuration. Currently, field updates apply only to single
 *  field index configuration. However, calls to FirestoreAdmin.UpdateField
 *  should provide a field mask to avoid changing any configuration that the
 *  caller isn't aware of. The field mask should be specified as: `{ paths:
 *  "index_config" }`. This call returns a google.longrunning.Operation which
 *  may be used to track the status of the field update. The metadata for the
 *  operation will be the type FieldOperationMetadata. To configure the default
 *  field settings for the database, use the special `Field` with resource name:
 *  `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/
 *  *`.
 *
 *  Method: firestore.projects.databases.collectionGroups.fields.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesCollectionGroupsFieldsPatch : GTLRFirestoreQuery

/**
 *  Required. A field name of the form
 *  `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`
 *  A field path may be a simple field name, e.g. `address` or a path to fields
 *  within map_value , e.g. `address.city`, or a special field path. The only
 *  valid special field is `*`, which represents any field. Field paths may be
 *  quoted using ` (backtick). The only character that needs to be escaped
 *  within a quoted field path is the backtick character itself, escaped using a
 *  backslash. Special characters in field paths that must be quoted include:
 *  `*`, `.`, ``` (backtick), `[`, `]`, as well as any ascii symbolic
 *  characters. Examples: (Note: Comments here are written in markdown syntax,
 *  so there is an additional layer of backticks to represent a code block)
 *  `\\`address.city\\`` represents a field named `address.city`, not the map
 *  key `city` in the field `address`. `\\`*\\`` represents a field named `*`,
 *  not any field. A special `Field` contains the default indexing settings for
 *  all fields. This field's resource name is:
 *  `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/
 *  *` Indexes defined on this `Field` will be applied to all fields which do
 *  not have their own `Field` index configuration.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A mask, relative to the field. If specified, only configuration specified by
 *  this field_mask will be updated in the field.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirestore_GoogleLongrunningOperation.
 *
 *  Updates a field configuration. Currently, field updates apply only to single
 *  field index configuration. However, calls to FirestoreAdmin.UpdateField
 *  should provide a field mask to avoid changing any configuration that the
 *  caller isn't aware of. The field mask should be specified as: `{ paths:
 *  "index_config" }`. This call returns a google.longrunning.Operation which
 *  may be used to track the status of the field update. The metadata for the
 *  operation will be the type FieldOperationMetadata. To configure the default
 *  field settings for the database, use the special `Field` with resource name:
 *  `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/
 *  *`.
 *
 *  @param object The @c GTLRFirestore_GoogleFirestoreAdminV1Field to include in
 *    the query.
 *  @param name Required. A field name of the form
 *    `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_path}`
 *    A field path may be a simple field name, e.g. `address` or a path to
 *    fields within map_value , e.g. `address.city`, or a special field path.
 *    The only valid special field is `*`, which represents any field. Field
 *    paths may be quoted using ` (backtick). The only character that needs to
 *    be escaped within a quoted field path is the backtick character itself,
 *    escaped using a backslash. Special characters in field paths that must be
 *    quoted include: `*`, `.`, ``` (backtick), `[`, `]`, as well as any ascii
 *    symbolic characters. Examples: (Note: Comments here are written in
 *    markdown syntax, so there is an additional layer of backticks to represent
 *    a code block) `\\`address.city\\`` represents a field named
 *    `address.city`, not the map key `city` in the field `address`. `\\`*\\``
 *    represents a field named `*`, not any field. A special `Field` contains
 *    the default indexing settings for all fields. This field's resource name
 *    is:
 *    `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/
 *    *` Indexes defined on this `Field` will be applied to all fields which do
 *    not have their own `Field` index configuration.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesCollectionGroupsFieldsPatch
 */
+ (instancetype)queryWithObject:(GTLRFirestore_GoogleFirestoreAdminV1Field *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a composite index. This returns a google.longrunning.Operation which
 *  may be used to track the status of the creation. The metadata for the
 *  operation will be the type IndexOperationMetadata.
 *
 *  Method: firestore.projects.databases.collectionGroups.indexes.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesCollectionGroupsIndexesCreate : GTLRFirestoreQuery

/**
 *  Required. A parent name of the form
 *  `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirestore_GoogleLongrunningOperation.
 *
 *  Creates a composite index. This returns a google.longrunning.Operation which
 *  may be used to track the status of the creation. The metadata for the
 *  operation will be the type IndexOperationMetadata.
 *
 *  @param object The @c GTLRFirestore_GoogleFirestoreAdminV1Index to include in
 *    the query.
 *  @param parent Required. A parent name of the form
 *    `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesCollectionGroupsIndexesCreate
 */
+ (instancetype)queryWithObject:(GTLRFirestore_GoogleFirestoreAdminV1Index *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a composite index.
 *
 *  Method: firestore.projects.databases.collectionGroups.indexes.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesCollectionGroupsIndexesDelete : GTLRFirestoreQuery

/**
 *  Required. A name of the form
 *  `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirestore_Empty.
 *
 *  Deletes a composite index.
 *
 *  @param name Required. A name of the form
 *    `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesCollectionGroupsIndexesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a composite index.
 *
 *  Method: firestore.projects.databases.collectionGroups.indexes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesCollectionGroupsIndexesGet : GTLRFirestoreQuery

/**
 *  Required. A name of the form
 *  `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirestore_GoogleFirestoreAdminV1Index.
 *
 *  Gets a composite index.
 *
 *  @param name Required. A name of the form
 *    `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesCollectionGroupsIndexesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists composite indexes.
 *
 *  Method: firestore.projects.databases.collectionGroups.indexes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesCollectionGroupsIndexesList : GTLRFirestoreQuery

/** The filter to apply to list results. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The number of results to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, returned from a previous call to FirestoreAdmin.ListIndexes,
 *  that may be used to get the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. A parent name of the form
 *  `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirestore_GoogleFirestoreAdminV1ListIndexesResponse.
 *
 *  Lists composite indexes.
 *
 *  @param parent Required. A parent name of the form
 *    `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesCollectionGroupsIndexesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Create a database.
 *
 *  Method: firestore.projects.databases.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesCreate : GTLRFirestoreQuery

/**
 *  Required. The ID to use for the database, which will become the final
 *  component of the database's resource name. This value should be 4-63
 *  characters. Valid characters are /a-z-/ with first character a letter and
 *  the last a letter or a number. Must not be UUID-like
 *  /[0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}/. "(default)" database id is also
 *  valid.
 */
@property(nonatomic, copy, nullable) NSString *databaseId;

/** Required. A parent name of the form `projects/{project_id}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirestore_GoogleLongrunningOperation.
 *
 *  Create a database.
 *
 *  @param object The @c GTLRFirestore_GoogleFirestoreAdminV1Database to include
 *    in the query.
 *  @param parent Required. A parent name of the form `projects/{project_id}`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesCreate
 */
+ (instancetype)queryWithObject:(GTLRFirestore_GoogleFirestoreAdminV1Database *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets multiple documents. Documents returned by this method are not
 *  guaranteed to be returned in the same order that they were requested.
 *
 *  Method: firestore.projects.databases.documents.batchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsBatchGet : GTLRFirestoreQuery

/**
 *  Required. The database name. In the format:
 *  `projects/{project_id}/databases/{database_id}`.
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRFirestore_BatchGetDocumentsResponse.
 *
 *  Gets multiple documents. Documents returned by this method are not
 *  guaranteed to be returned in the same order that they were requested.
 *
 *  @param object The @c GTLRFirestore_BatchGetDocumentsRequest to include in
 *    the query.
 *  @param database Required. The database name. In the format:
 *    `projects/{project_id}/databases/{database_id}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsBatchGet
 */
+ (instancetype)queryWithObject:(GTLRFirestore_BatchGetDocumentsRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Applies a batch of write operations. The BatchWrite method does not apply
 *  the write operations atomically and can apply them out of order. Method does
 *  not allow more than one write per document. Each write succeeds or fails
 *  independently. See the BatchWriteResponse for the success status of each
 *  write. If you require an atomically applied set of writes, use Commit
 *  instead.
 *
 *  Method: firestore.projects.databases.documents.batchWrite
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsBatchWrite : GTLRFirestoreQuery

/**
 *  Required. The database name. In the format:
 *  `projects/{project_id}/databases/{database_id}`.
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRFirestore_BatchWriteResponse.
 *
 *  Applies a batch of write operations. The BatchWrite method does not apply
 *  the write operations atomically and can apply them out of order. Method does
 *  not allow more than one write per document. Each write succeeds or fails
 *  independently. See the BatchWriteResponse for the success status of each
 *  write. If you require an atomically applied set of writes, use Commit
 *  instead.
 *
 *  @param object The @c GTLRFirestore_BatchWriteRequest to include in the
 *    query.
 *  @param database Required. The database name. In the format:
 *    `projects/{project_id}/databases/{database_id}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsBatchWrite
 */
+ (instancetype)queryWithObject:(GTLRFirestore_BatchWriteRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Starts a new transaction.
 *
 *  Method: firestore.projects.databases.documents.beginTransaction
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsBeginTransaction : GTLRFirestoreQuery

/**
 *  Required. The database name. In the format:
 *  `projects/{project_id}/databases/{database_id}`.
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRFirestore_BeginTransactionResponse.
 *
 *  Starts a new transaction.
 *
 *  @param object The @c GTLRFirestore_BeginTransactionRequest to include in the
 *    query.
 *  @param database Required. The database name. In the format:
 *    `projects/{project_id}/databases/{database_id}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsBeginTransaction
 */
+ (instancetype)queryWithObject:(GTLRFirestore_BeginTransactionRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Commits a transaction, while optionally updating documents.
 *
 *  Method: firestore.projects.databases.documents.commit
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsCommit : GTLRFirestoreQuery

/**
 *  Required. The database name. In the format:
 *  `projects/{project_id}/databases/{database_id}`.
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRFirestore_CommitResponse.
 *
 *  Commits a transaction, while optionally updating documents.
 *
 *  @param object The @c GTLRFirestore_CommitRequest to include in the query.
 *  @param database Required. The database name. In the format:
 *    `projects/{project_id}/databases/{database_id}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsCommit
 */
+ (instancetype)queryWithObject:(GTLRFirestore_CommitRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Creates a new document.
 *
 *  Method: firestore.projects.databases.documents.createDocument
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsCreateDocument : GTLRFirestoreQuery

/**
 *  Required. The collection ID, relative to `parent`, to list. For example:
 *  `chatrooms`.
 */
@property(nonatomic, copy, nullable) NSString *collectionId;

/**
 *  The client-assigned document ID to use for this document. Optional. If not
 *  specified, an ID will be assigned by the service.
 */
@property(nonatomic, copy, nullable) NSString *documentId;

/**
 *  The list of field paths in the mask. See Document.fields for a field path
 *  syntax reference.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *maskFieldPaths;

/**
 *  Required. The parent resource. For example:
 *  `projects/{project_id}/databases/{database_id}/documents` or
 *  `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirestore_Document.
 *
 *  Creates a new document.
 *
 *  @param object The @c GTLRFirestore_Document to include in the query.
 *  @param parent Required. The parent resource. For example:
 *    `projects/{project_id}/databases/{database_id}/documents` or
 *    `projects/{project_id}/databases/{database_id}/documents/chatrooms/{chatroom_id}`
 *  @param collectionId Required. The collection ID, relative to `parent`, to
 *    list. For example: `chatrooms`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsCreateDocument
 */
+ (instancetype)queryWithObject:(GTLRFirestore_Document *)object
                         parent:(NSString *)parent
                   collectionId:(NSString *)collectionId;

@end

/**
 *  Deletes a document.
 *
 *  Method: firestore.projects.databases.documents.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsDelete : GTLRFirestoreQuery

/**
 *  When set to `true`, the target document must exist. When set to `false`, the
 *  target document must not exist.
 */
@property(nonatomic, assign) BOOL currentDocumentExists;

/**
 *  When set, the target document must exist and have been last updated at that
 *  time. Timestamp must be microsecond aligned.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *currentDocumentUpdateTime;

/**
 *  Required. The resource name of the Document to delete. In the format:
 *  `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirestore_Empty.
 *
 *  Deletes a document.
 *
 *  @param name Required. The resource name of the Document to delete. In the
 *    format:
 *    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a single document.
 *
 *  Method: firestore.projects.databases.documents.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsGet : GTLRFirestoreQuery

/**
 *  The list of field paths in the mask. See Document.fields for a field path
 *  syntax reference.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *maskFieldPaths;

/**
 *  Required. The resource name of the Document to get. In the format:
 *  `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Reads the version of the document at the given time. This may not be older
 *  than 270 seconds.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  Reads the document in a transaction.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *transaction;

/**
 *  Fetches a @c GTLRFirestore_Document.
 *
 *  Gets a single document.
 *
 *  @param name Required. The resource name of the Document to get. In the
 *    format:
 *    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists documents.
 *
 *  Method: firestore.projects.databases.documents.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsList : GTLRFirestoreQuery

/**
 *  Required. The collection ID, relative to `parent`, to list. For example:
 *  `chatrooms` or `messages`.
 */
@property(nonatomic, copy, nullable) NSString *collectionId;

/**
 *  The list of field paths in the mask. See Document.fields for a field path
 *  syntax reference.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *maskFieldPaths;

/** The order to sort results by. For example: `priority desc, name`. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** The maximum number of documents to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The `next_page_token` value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource name. In the format:
 *  `projects/{project_id}/databases/{database_id}/documents` or
 *  `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *  For example: `projects/my-project/databases/my-database/documents` or
 *  `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Reads documents as they were at the given time. This may not be older than
 *  270 seconds.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  If the list should show missing documents. A missing document is a document
 *  that does not exist but has sub-documents. These documents will be returned
 *  with a key but will not have fields, Document.create_time, or
 *  Document.update_time set. Requests with `show_missing` may not specify
 *  `where` or `order_by`.
 */
@property(nonatomic, assign) BOOL showMissing;

/**
 *  Reads documents in a transaction.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *transaction;

/**
 *  Fetches a @c GTLRFirestore_ListDocumentsResponse.
 *
 *  Lists documents.
 *
 *  @param parent Required. The parent resource name. In the format:
 *    `projects/{project_id}/databases/{database_id}/documents` or
 *    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *    For example: `projects/my-project/databases/my-database/documents` or
 *    `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 *  @param collectionId Required. The collection ID, relative to `parent`, to
 *    list. For example: `chatrooms` or `messages`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   collectionId:(NSString *)collectionId;

@end

/**
 *  Lists all the collection IDs underneath a document.
 *
 *  Method: firestore.projects.databases.documents.listCollectionIds
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsListCollectionIds : GTLRFirestoreQuery

/**
 *  Required. The parent document. In the format:
 *  `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *  For example:
 *  `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirestore_ListCollectionIdsResponse.
 *
 *  Lists all the collection IDs underneath a document.
 *
 *  @param object The @c GTLRFirestore_ListCollectionIdsRequest to include in
 *    the query.
 *  @param parent Required. The parent document. In the format:
 *    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *    For example:
 *    `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsListCollectionIds
 */
+ (instancetype)queryWithObject:(GTLRFirestore_ListCollectionIdsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists documents.
 *
 *  Method: firestore.projects.databases.documents.listDocuments
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsListDocuments : GTLRFirestoreQuery

/**
 *  Required. The collection ID, relative to `parent`, to list. For example:
 *  `chatrooms` or `messages`.
 */
@property(nonatomic, copy, nullable) NSString *collectionId;

/**
 *  The list of field paths in the mask. See Document.fields for a field path
 *  syntax reference.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *maskFieldPaths;

/** The order to sort results by. For example: `priority desc, name`. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** The maximum number of documents to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The `next_page_token` value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource name. In the format:
 *  `projects/{project_id}/databases/{database_id}/documents` or
 *  `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *  For example: `projects/my-project/databases/my-database/documents` or
 *  `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Reads documents as they were at the given time. This may not be older than
 *  270 seconds.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/**
 *  If the list should show missing documents. A missing document is a document
 *  that does not exist but has sub-documents. These documents will be returned
 *  with a key but will not have fields, Document.create_time, or
 *  Document.update_time set. Requests with `show_missing` may not specify
 *  `where` or `order_by`.
 */
@property(nonatomic, assign) BOOL showMissing;

/**
 *  Reads documents in a transaction.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *transaction;

/**
 *  Fetches a @c GTLRFirestore_ListDocumentsResponse.
 *
 *  Lists documents.
 *
 *  @param parent Required. The parent resource name. In the format:
 *    `projects/{project_id}/databases/{database_id}/documents` or
 *    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *    For example: `projects/my-project/databases/my-database/documents` or
 *    `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 *  @param collectionId Required. The collection ID, relative to `parent`, to
 *    list. For example: `chatrooms` or `messages`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsListDocuments
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent
                   collectionId:(NSString *)collectionId;

@end

/**
 *  Listens to changes.
 *
 *  Method: firestore.projects.databases.documents.listen
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsListen : GTLRFirestoreQuery

/**
 *  Required. The database name. In the format:
 *  `projects/{project_id}/databases/{database_id}`.
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRFirestore_ListenResponse.
 *
 *  Listens to changes.
 *
 *  @param object The @c GTLRFirestore_ListenRequest to include in the query.
 *  @param database Required. The database name. In the format:
 *    `projects/{project_id}/databases/{database_id}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsListen
 */
+ (instancetype)queryWithObject:(GTLRFirestore_ListenRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Partitions a query by returning partition cursors that can be used to run
 *  the query in parallel. The returned partition cursors are split points that
 *  can be used by RunQuery as starting/end points for the query results.
 *
 *  Method: firestore.projects.databases.documents.partitionQuery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsPartitionQuery : GTLRFirestoreQuery

/**
 *  Required. The parent resource name. In the format:
 *  `projects/{project_id}/databases/{database_id}/documents`. Document resource
 *  names are not supported; only database resource names can be specified.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirestore_PartitionQueryResponse.
 *
 *  Partitions a query by returning partition cursors that can be used to run
 *  the query in parallel. The returned partition cursors are split points that
 *  can be used by RunQuery as starting/end points for the query results.
 *
 *  @param object The @c GTLRFirestore_PartitionQueryRequest to include in the
 *    query.
 *  @param parent Required. The parent resource name. In the format:
 *    `projects/{project_id}/databases/{database_id}/documents`. Document
 *    resource names are not supported; only database resource names can be
 *    specified.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsPartitionQuery
 */
+ (instancetype)queryWithObject:(GTLRFirestore_PartitionQueryRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Updates or inserts a document.
 *
 *  Method: firestore.projects.databases.documents.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsPatch : GTLRFirestoreQuery

/**
 *  When set to `true`, the target document must exist. When set to `false`, the
 *  target document must not exist.
 */
@property(nonatomic, assign) BOOL currentDocumentExists;

/**
 *  When set, the target document must exist and have been last updated at that
 *  time. Timestamp must be microsecond aligned.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *currentDocumentUpdateTime;

/**
 *  The list of field paths in the mask. See Document.fields for a field path
 *  syntax reference.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *maskFieldPaths;

/**
 *  The resource name of the document, for example
 *  `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of field paths in the mask. See Document.fields for a field path
 *  syntax reference.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *updateMaskFieldPaths;

/**
 *  Fetches a @c GTLRFirestore_Document.
 *
 *  Updates or inserts a document.
 *
 *  @param object The @c GTLRFirestore_Document to include in the query.
 *  @param name The resource name of the document, for example
 *    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsPatch
 */
+ (instancetype)queryWithObject:(GTLRFirestore_Document *)object
                           name:(NSString *)name;

@end

/**
 *  Rolls back a transaction.
 *
 *  Method: firestore.projects.databases.documents.rollback
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsRollback : GTLRFirestoreQuery

/**
 *  Required. The database name. In the format:
 *  `projects/{project_id}/databases/{database_id}`.
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRFirestore_Empty.
 *
 *  Rolls back a transaction.
 *
 *  @param object The @c GTLRFirestore_RollbackRequest to include in the query.
 *  @param database Required. The database name. In the format:
 *    `projects/{project_id}/databases/{database_id}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsRollback
 */
+ (instancetype)queryWithObject:(GTLRFirestore_RollbackRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Runs an aggregation query. Rather than producing Document results like
 *  Firestore.RunQuery, this API allows running an aggregation to produce a
 *  series of AggregationResult server-side. High-Level Example: ``` -- Return
 *  the number of documents in table given a filter. SELECT COUNT(*) FROM (
 *  SELECT * FROM k where a = true ); ```
 *
 *  Method: firestore.projects.databases.documents.runAggregationQuery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsRunAggregationQuery : GTLRFirestoreQuery

/**
 *  Required. The parent resource name. In the format:
 *  `projects/{project_id}/databases/{database_id}/documents` or
 *  `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *  For example: `projects/my-project/databases/my-database/documents` or
 *  `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirestore_RunAggregationQueryResponse.
 *
 *  Runs an aggregation query. Rather than producing Document results like
 *  Firestore.RunQuery, this API allows running an aggregation to produce a
 *  series of AggregationResult server-side. High-Level Example: ``` -- Return
 *  the number of documents in table given a filter. SELECT COUNT(*) FROM (
 *  SELECT * FROM k where a = true ); ```
 *
 *  @param object The @c GTLRFirestore_RunAggregationQueryRequest to include in
 *    the query.
 *  @param parent Required. The parent resource name. In the format:
 *    `projects/{project_id}/databases/{database_id}/documents` or
 *    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *    For example: `projects/my-project/databases/my-database/documents` or
 *    `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsRunAggregationQuery
 */
+ (instancetype)queryWithObject:(GTLRFirestore_RunAggregationQueryRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Runs a query.
 *
 *  Method: firestore.projects.databases.documents.runQuery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsRunQuery : GTLRFirestoreQuery

/**
 *  Required. The parent resource name. In the format:
 *  `projects/{project_id}/databases/{database_id}/documents` or
 *  `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *  For example: `projects/my-project/databases/my-database/documents` or
 *  `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirestore_RunQueryResponse.
 *
 *  Runs a query.
 *
 *  @param object The @c GTLRFirestore_RunQueryRequest to include in the query.
 *  @param parent Required. The parent resource name. In the format:
 *    `projects/{project_id}/databases/{database_id}/documents` or
 *    `projects/{project_id}/databases/{database_id}/documents/{document_path}`.
 *    For example: `projects/my-project/databases/my-database/documents` or
 *    `projects/my-project/databases/my-database/documents/chatrooms/my-chatroom`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsRunQuery
 */
+ (instancetype)queryWithObject:(GTLRFirestore_RunQueryRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Streams batches of document updates and deletes, in order.
 *
 *  Method: firestore.projects.databases.documents.write
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesDocumentsWrite : GTLRFirestoreQuery

/**
 *  Required. The database name. In the format:
 *  `projects/{project_id}/databases/{database_id}`. This is only required in
 *  the first message.
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Fetches a @c GTLRFirestore_WriteResponse.
 *
 *  Streams batches of document updates and deletes, in order.
 *
 *  @param object The @c GTLRFirestore_WriteRequest to include in the query.
 *  @param database Required. The database name. In the format:
 *    `projects/{project_id}/databases/{database_id}`. This is only required in
 *    the first message.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesDocumentsWrite
 */
+ (instancetype)queryWithObject:(GTLRFirestore_WriteRequest *)object
                       database:(NSString *)database;

@end

/**
 *  Exports a copy of all or a subset of documents from Google Cloud Firestore
 *  to another storage system, such as Google Cloud Storage. Recent updates to
 *  documents may not be reflected in the export. The export occurs in the
 *  background and its progress can be monitored and managed via the Operation
 *  resource that is created. The output of an export may only be used once the
 *  associated operation is done. If an export operation is cancelled before
 *  completion it may leave partial data behind in Google Cloud Storage. For
 *  more details on export behavior and output format, refer to:
 *  https://cloud.google.com/firestore/docs/manage-data/export-import
 *
 *  Method: firestore.projects.databases.exportDocuments
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesExportDocuments : GTLRFirestoreQuery

/**
 *  Required. Database to export. Should be of the form:
 *  `projects/{project_id}/databases/{database_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirestore_GoogleLongrunningOperation.
 *
 *  Exports a copy of all or a subset of documents from Google Cloud Firestore
 *  to another storage system, such as Google Cloud Storage. Recent updates to
 *  documents may not be reflected in the export. The export occurs in the
 *  background and its progress can be monitored and managed via the Operation
 *  resource that is created. The output of an export may only be used once the
 *  associated operation is done. If an export operation is cancelled before
 *  completion it may leave partial data behind in Google Cloud Storage. For
 *  more details on export behavior and output format, refer to:
 *  https://cloud.google.com/firestore/docs/manage-data/export-import
 *
 *  @param object The @c
 *    GTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsRequest to include in
 *    the query.
 *  @param name Required. Database to export. Should be of the form:
 *    `projects/{project_id}/databases/{database_id}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesExportDocuments
 */
+ (instancetype)queryWithObject:(GTLRFirestore_GoogleFirestoreAdminV1ExportDocumentsRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a database.
 *
 *  Method: firestore.projects.databases.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesGet : GTLRFirestoreQuery

/**
 *  Required. A name of the form `projects/{project_id}/databases/{database_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirestore_GoogleFirestoreAdminV1Database.
 *
 *  Gets information about a database.
 *
 *  @param name Required. A name of the form
 *    `projects/{project_id}/databases/{database_id}`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Imports documents into Google Cloud Firestore. Existing documents with the
 *  same name are overwritten. The import occurs in the background and its
 *  progress can be monitored and managed via the Operation resource that is
 *  created. If an ImportDocuments operation is cancelled, it is possible that a
 *  subset of the data has already been imported to Cloud Firestore.
 *
 *  Method: firestore.projects.databases.importDocuments
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesImportDocuments : GTLRFirestoreQuery

/**
 *  Required. Database to import into. Should be of the form:
 *  `projects/{project_id}/databases/{database_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirestore_GoogleLongrunningOperation.
 *
 *  Imports documents into Google Cloud Firestore. Existing documents with the
 *  same name are overwritten. The import occurs in the background and its
 *  progress can be monitored and managed via the Operation resource that is
 *  created. If an ImportDocuments operation is cancelled, it is possible that a
 *  subset of the data has already been imported to Cloud Firestore.
 *
 *  @param object The @c
 *    GTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsRequest to include in
 *    the query.
 *  @param name Required. Database to import into. Should be of the form:
 *    `projects/{project_id}/databases/{database_id}`.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesImportDocuments
 */
+ (instancetype)queryWithObject:(GTLRFirestore_GoogleFirestoreAdminV1ImportDocumentsRequest *)object
                           name:(NSString *)name;

@end

/**
 *  List all the databases in the project.
 *
 *  Method: firestore.projects.databases.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesList : GTLRFirestoreQuery

/** Required. A parent name of the form `projects/{project_id}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirestore_GoogleFirestoreAdminV1ListDatabasesResponse.
 *
 *  List all the databases in the project.
 *
 *  @param parent Required. A parent name of the form `projects/{project_id}`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: firestore.projects.databases.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesOperationsCancel : GTLRFirestoreQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirestore_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRFirestore_GoogleLongrunningCancelOperationRequest
 *    to include in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRFirestore_GoogleLongrunningCancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: firestore.projects.databases.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesOperationsDelete : GTLRFirestoreQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirestore_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: firestore.projects.databases.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesOperationsGet : GTLRFirestoreQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirestore_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: firestore.projects.databases.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesOperationsList : GTLRFirestoreQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRFirestore_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates a database.
 *
 *  Method: firestore.projects.databases.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsDatabasesPatch : GTLRFirestoreQuery

/**
 *  The resource name of the Database. Format:
 *  `projects/{project}/databases/{database}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirestore_GoogleLongrunningOperation.
 *
 *  Updates a database.
 *
 *  @param object The @c GTLRFirestore_GoogleFirestoreAdminV1Database to include
 *    in the query.
 *  @param name The resource name of the Database. Format:
 *    `projects/{project}/databases/{database}`
 *
 *  @return GTLRFirestoreQuery_ProjectsDatabasesPatch
 */
+ (instancetype)queryWithObject:(GTLRFirestore_GoogleFirestoreAdminV1Database *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a location.
 *
 *  Method: firestore.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsLocationsGet : GTLRFirestoreQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirestore_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRFirestoreQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: firestore.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirestoreCloudPlatform
 *    @c kGTLRAuthScopeFirestoreDatastore
 */
@interface GTLRFirestoreQuery_ProjectsLocationsList : GTLRFirestoreQuery

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRFirestore_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRFirestoreQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
