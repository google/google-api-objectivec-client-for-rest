// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Eventarc API (eventarc/v1)
// Description:
//   Build event-driven applications on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/eventarc

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLREventarc_AuditConfig;
@class GTLREventarc_AuditLogConfig;
@class GTLREventarc_Binding;
@class GTLREventarc_Channel;
@class GTLREventarc_Channel_Labels;
@class GTLREventarc_ChannelConnection;
@class GTLREventarc_ChannelConnection_Labels;
@class GTLREventarc_CloudRun;
@class GTLREventarc_Destination;
@class GTLREventarc_Enrollment;
@class GTLREventarc_Enrollment_Annotations;
@class GTLREventarc_Enrollment_Labels;
@class GTLREventarc_EventFilter;
@class GTLREventarc_EventType;
@class GTLREventarc_Expr;
@class GTLREventarc_FilteringAttribute;
@class GTLREventarc_GKE;
@class GTLREventarc_GoogleApiSource;
@class GTLREventarc_GoogleApiSource_Annotations;
@class GTLREventarc_GoogleApiSource_Labels;
@class GTLREventarc_GoogleCloudEventarcV1PipelineDestination;
@class GTLREventarc_GoogleCloudEventarcV1PipelineDestinationAuthenticationConfig;
@class GTLREventarc_GoogleCloudEventarcV1PipelineDestinationAuthenticationConfigOAuthToken;
@class GTLREventarc_GoogleCloudEventarcV1PipelineDestinationAuthenticationConfigOidcToken;
@class GTLREventarc_GoogleCloudEventarcV1PipelineDestinationHttpEndpoint;
@class GTLREventarc_GoogleCloudEventarcV1PipelineDestinationNetworkConfig;
@class GTLREventarc_GoogleCloudEventarcV1PipelineMediation;
@class GTLREventarc_GoogleCloudEventarcV1PipelineMediationTransformation;
@class GTLREventarc_GoogleCloudEventarcV1PipelineMessagePayloadFormat;
@class GTLREventarc_GoogleCloudEventarcV1PipelineMessagePayloadFormatAvroFormat;
@class GTLREventarc_GoogleCloudEventarcV1PipelineMessagePayloadFormatJsonFormat;
@class GTLREventarc_GoogleCloudEventarcV1PipelineMessagePayloadFormatProtobufFormat;
@class GTLREventarc_GoogleCloudEventarcV1PipelineRetryPolicy;
@class GTLREventarc_GoogleLongrunningOperation;
@class GTLREventarc_GoogleLongrunningOperation_Metadata;
@class GTLREventarc_GoogleLongrunningOperation_Response;
@class GTLREventarc_GoogleRpcStatus;
@class GTLREventarc_GoogleRpcStatus_Details_Item;
@class GTLREventarc_HttpEndpoint;
@class GTLREventarc_Location;
@class GTLREventarc_Location_Labels;
@class GTLREventarc_Location_Metadata;
@class GTLREventarc_LoggingConfig;
@class GTLREventarc_MessageBus;
@class GTLREventarc_MessageBus_Annotations;
@class GTLREventarc_MessageBus_Labels;
@class GTLREventarc_NetworkConfig;
@class GTLREventarc_Pipeline;
@class GTLREventarc_Pipeline_Annotations;
@class GTLREventarc_Pipeline_Labels;
@class GTLREventarc_Policy;
@class GTLREventarc_Provider;
@class GTLREventarc_Pubsub;
@class GTLREventarc_StateCondition;
@class GTLREventarc_Transport;
@class GTLREventarc_Trigger;
@class GTLREventarc_Trigger_Conditions;
@class GTLREventarc_Trigger_Labels;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLREventarc_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLREventarc_Channel.state

/**
 *  The ACTIVE state indicates that a Channel has been successfully connected
 *  with the event provider. An ACTIVE Channel is ready to receive and route
 *  events from the event provider.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_Channel_State_Active;
/**
 *  The INACTIVE state indicates that the Channel cannot receive events
 *  permanently. There are two possible cases this state can happen: 1. The SaaS
 *  provider disconnected from this Channel. 2. The Channel activation token has
 *  expired but the SaaS provider wasn't connected. To re-establish a Connection
 *  with a provider, the subscriber should create a new Channel and give it to
 *  the provider.
 *
 *  Value: "INACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_Channel_State_Inactive;
/**
 *  The PENDING state indicates that a Channel has been created successfully and
 *  there is a new activation token available for the subscriber to use to
 *  convey the Channel to the provider in order to create a Connection.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_Channel_State_Pending;
/**
 *  Default value. This value is unused.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_Channel_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLREventarc_LoggingConfig.logSeverity

/**
 *  A person must take action immediately.
 *
 *  Value: "ALERT"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_LoggingConfig_LogSeverity_Alert;
/**
 *  Critical events cause more severe problems or outages.
 *
 *  Value: "CRITICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_LoggingConfig_LogSeverity_Critical;
/**
 *  Debug or trace level logging.
 *
 *  Value: "DEBUG"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_LoggingConfig_LogSeverity_Debug;
/**
 *  One or more systems are unusable.
 *
 *  Value: "EMERGENCY"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_LoggingConfig_LogSeverity_Emergency;
/**
 *  Error events are likely to cause problems.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_LoggingConfig_LogSeverity_Error;
/**
 *  Routine information, such as ongoing status or performance.
 *
 *  Value: "INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_LoggingConfig_LogSeverity_Info;
/**
 *  Log severity is not specified. This value is treated the same as NONE, but
 *  is used to distinguish between no update and update to NONE in update_masks.
 *
 *  Value: "LOG_SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_LoggingConfig_LogSeverity_LogSeverityUnspecified;
/**
 *  Default value at resource creation, presence of this value must be treated
 *  as no logging/disable logging.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_LoggingConfig_LogSeverity_None;
/**
 *  Normal but significant events, such as start up, shut down, or a
 *  configuration change.
 *
 *  Value: "NOTICE"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_LoggingConfig_LogSeverity_Notice;
/**
 *  Warning events might cause problems.
 *
 *  Value: "WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_LoggingConfig_LogSeverity_Warning;

// ----------------------------------------------------------------------------
// GTLREventarc_StateCondition.code

/**
 *  The operation was aborted, typically due to a concurrency issue such as a
 *  sequencer check failure or transaction abort. See the guidelines above for
 *  deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP
 *  Mapping: 409 Conflict
 *
 *  Value: "ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_Aborted;
/**
 *  The entity that a client attempted to create (e.g., file or directory)
 *  already exists. HTTP Mapping: 409 Conflict
 *
 *  Value: "ALREADY_EXISTS"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_AlreadyExists;
/**
 *  The operation was cancelled, typically by the caller. HTTP Mapping: 499
 *  Client Closed Request
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_Cancelled;
/**
 *  Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server
 *  Error
 *
 *  Value: "DATA_LOSS"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_DataLoss;
/**
 *  The deadline expired before the operation could complete. For operations
 *  that change the state of the system, this error may be returned even if the
 *  operation has completed successfully. For example, a successful response
 *  from a server could have been delayed long enough for the deadline to
 *  expire. HTTP Mapping: 504 Gateway Timeout
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_DeadlineExceeded;
/**
 *  The operation was rejected because the system is not in a state required for
 *  the operation's execution. For example, the directory to be deleted is
 *  non-empty, an rmdir operation is applied to a non-directory, etc. Service
 *  implementors can use the following guidelines to decide between
 *  `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE`
 *  if the client can retry just the failing call. (b) Use `ABORTED` if the
 *  client should retry at a higher level. For example, when a client-specified
 *  test-and-set fails, indicating the client should restart a read-modify-write
 *  sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until
 *  the system state has been explicitly fixed. For example, if an "rmdir" fails
 *  because the directory is non-empty, `FAILED_PRECONDITION` should be returned
 *  since the client should not retry unless the files are deleted from the
 *  directory. HTTP Mapping: 400 Bad Request
 *
 *  Value: "FAILED_PRECONDITION"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_FailedPrecondition;
/**
 *  Internal errors. This means that some invariants expected by the underlying
 *  system have been broken. This error code is reserved for serious errors.
 *  HTTP Mapping: 500 Internal Server Error
 *
 *  Value: "INTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_Internal;
/**
 *  The client specified an invalid argument. Note that this differs from
 *  `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are
 *  problematic regardless of the state of the system (e.g., a malformed file
 *  name). HTTP Mapping: 400 Bad Request
 *
 *  Value: "INVALID_ARGUMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_InvalidArgument;
/**
 *  Some requested entity (e.g., file or directory) was not found. Note to
 *  server developers: if a request is denied for an entire class of users, such
 *  as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be
 *  used. If a request is denied for some users within a class of users, such as
 *  user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping:
 *  404 Not Found
 *
 *  Value: "NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_NotFound;
/**
 *  Not an error; returned on success. HTTP Mapping: 200 OK
 *
 *  Value: "OK"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_Ok;
/**
 *  The operation was attempted past the valid range. E.g., seeking or reading
 *  past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem
 *  that may be fixed if the system state changes. For example, a 32-bit file
 *  system will generate `INVALID_ARGUMENT` if asked to read at an offset that
 *  is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked
 *  to read from an offset past the current file size. There is a fair bit of
 *  overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using
 *  `OUT_OF_RANGE` (the more specific error) when it applies so that callers who
 *  are iterating through a space can easily look for an `OUT_OF_RANGE` error to
 *  detect when they are done. HTTP Mapping: 400 Bad Request
 *
 *  Value: "OUT_OF_RANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_OutOfRange;
/**
 *  The caller does not have permission to execute the specified operation.
 *  `PERMISSION_DENIED` must not be used for rejections caused by exhausting
 *  some resource (use `RESOURCE_EXHAUSTED` instead for those errors).
 *  `PERMISSION_DENIED` must not be used if the caller can not be identified
 *  (use `UNAUTHENTICATED` instead for those errors). This error code does not
 *  imply the request is valid or the requested entity exists or satisfies other
 *  pre-conditions. HTTP Mapping: 403 Forbidden
 *
 *  Value: "PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_PermissionDenied;
/**
 *  Some resource has been exhausted, perhaps a per-user quota, or perhaps the
 *  entire file system is out of space. HTTP Mapping: 429 Too Many Requests
 *
 *  Value: "RESOURCE_EXHAUSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_ResourceExhausted;
/**
 *  The request does not have valid authentication credentials for the
 *  operation. HTTP Mapping: 401 Unauthorized
 *
 *  Value: "UNAUTHENTICATED"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_Unauthenticated;
/**
 *  The service is currently unavailable. This is most likely a transient
 *  condition, which can be corrected by retrying with a backoff. Note that it
 *  is not always safe to retry non-idempotent operations. See the guidelines
 *  above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and
 *  `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable
 *
 *  Value: "UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_Unavailable;
/**
 *  The operation is not implemented or is not supported/enabled in this
 *  service. HTTP Mapping: 501 Not Implemented
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_Unimplemented;
/**
 *  Unknown error. For example, this error may be returned when a `Status` value
 *  received from another address space belongs to an error space that is not
 *  known in this address space. Also errors raised by APIs that do not return
 *  enough error information may be converted to this error. HTTP Mapping: 500
 *  Internal Server Error
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLREventarc_StateCondition_Code_Unknown;

/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLREventarc_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLREventarc_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLREventarc_AuditLogConfig_LogType_AdminRead Admin reads.
 *        Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLREventarc_AuditLogConfig_LogType_DataRead Data reads. Example:
 *        CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLREventarc_AuditLogConfig_LogType_DataWrite Data writes.
 *        Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLREventarc_AuditLogConfig_LogType_LogTypeUnspecified Default
 *        case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLREventarc_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLREventarc_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `domain:{domain}`: The G Suite domain
 *  (primary) that represents all the users of that domain. For example,
 *  `google.com` or `example.com`. *
 *  `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workforce identity pool. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
 *  All workforce identities in a group. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All workforce identities with a specific attribute value. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/
 *  *`: All identities in a workforce identity pool. *
 *  `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workload identity pool. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
 *  A workload identity pool group. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All identities in a workload identity pool with a certain attribute. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/
 *  *`: All identities in a workload identity pool. *
 *  `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. *
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  Deleted single identity in a workforce identity pool. For example,
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM
 *  roles and permissions, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/roles-overview). For a list
 *  of the available pre-defined roles, see
 *  [here](https://cloud.google.com/iam/docs/understanding-roles).
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  A representation of the Channel resource. A Channel is a resource on which
 *  event providers publish their events. The published events are delivered
 *  through the transport associated with the channel. Note that a channel is
 *  associated with exactly one event provider.
 */
@interface GTLREventarc_Channel : GTLRObject

/**
 *  Output only. The activation token for the channel. The token must be used by
 *  the provider to register the channel for publishing.
 */
@property(nonatomic, copy, nullable) NSString *activationToken;

/** Output only. The creation time. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Resource name of a KMS crypto key (managed by the user) used to
 *  encrypt/decrypt their event data. It must match the pattern `projects/ *
 *  /locations/ * /keyRings/ * /cryptoKeys/ *`.
 */
@property(nonatomic, copy, nullable) NSString *cryptoKeyName;

/** Optional. Resource labels. */
@property(nonatomic, strong, nullable) GTLREventarc_Channel_Labels *labels;

/**
 *  Required. The resource name of the channel. Must be unique within the
 *  location on the project and must be in
 *  `projects/{project}/locations/{location}/channels/{channel_id}` format.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The name of the event provider (e.g. Eventarc SaaS partner) associated with
 *  the channel. This provider will be granted permissions to publish events to
 *  the channel. Format:
 *  `projects/{project}/locations/{location}/providers/{provider_id}`.
 */
@property(nonatomic, copy, nullable) NSString *provider;

/**
 *  Output only. The name of the Pub/Sub topic created and managed by Eventarc
 *  system as a transport for the event delivery. Format:
 *  `projects/{project}/topics/{topic_id}`.
 */
@property(nonatomic, copy, nullable) NSString *pubsubTopic;

/**
 *  Output only. Whether or not this Channel satisfies the requirements of
 *  physical zone separation
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzs;

/**
 *  Output only. The state of a Channel.
 *
 *  Likely values:
 *    @arg @c kGTLREventarc_Channel_State_Active The ACTIVE state indicates that
 *        a Channel has been successfully connected with the event provider. An
 *        ACTIVE Channel is ready to receive and route events from the event
 *        provider. (Value: "ACTIVE")
 *    @arg @c kGTLREventarc_Channel_State_Inactive The INACTIVE state indicates
 *        that the Channel cannot receive events permanently. There are two
 *        possible cases this state can happen: 1. The SaaS provider
 *        disconnected from this Channel. 2. The Channel activation token has
 *        expired but the SaaS provider wasn't connected. To re-establish a
 *        Connection with a provider, the subscriber should create a new Channel
 *        and give it to the provider. (Value: "INACTIVE")
 *    @arg @c kGTLREventarc_Channel_State_Pending The PENDING state indicates
 *        that a Channel has been created successfully and there is a new
 *        activation token available for the subscriber to use to convey the
 *        Channel to the provider in order to create a Connection. (Value:
 *        "PENDING")
 *    @arg @c kGTLREventarc_Channel_State_StateUnspecified Default value. This
 *        value is unused. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Server assigned unique identifier for the channel. The value is
 *  a UUID4 string and guaranteed to remain unchanged until the resource is
 *  deleted.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The last-modified time. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Resource labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLREventarc_Channel_Labels : GTLRObject
@end


/**
 *  A representation of the ChannelConnection resource. A ChannelConnection is a
 *  resource which event providers create during the activation process to
 *  establish a connection between the provider and the subscriber channel.
 */
@interface GTLREventarc_ChannelConnection : GTLRObject

/**
 *  Input only. Activation token for the channel. The token will be used during
 *  the creation of ChannelConnection to bind the channel with the provider
 *  project. This field will not be stored in the provider resource.
 */
@property(nonatomic, copy, nullable) NSString *activationToken;

/**
 *  Required. The name of the connected subscriber Channel. This is a weak
 *  reference to avoid cross project and cross accounts references. This must be
 *  in `projects/{project}/location/{location}/channels/{channel_id}` format.
 */
@property(nonatomic, copy, nullable) NSString *channel;

/** Output only. The creation time. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Optional. Resource labels. */
@property(nonatomic, strong, nullable) GTLREventarc_ChannelConnection_Labels *labels;

/** Required. The name of the connection. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Server assigned ID of the resource. The server guarantees
 *  uniqueness and immutability until deleted.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The last-modified time. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Resource labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLREventarc_ChannelConnection_Labels : GTLRObject
@end


/**
 *  Represents a Cloud Run destination.
 */
@interface GTLREventarc_CloudRun : GTLRObject

/**
 *  Optional. The relative path on the Cloud Run service the events should be
 *  sent to. The value must conform to the definition of a URI path segment
 *  (section 3.3 of RFC2396). Examples: "/route", "route", "route/subroute".
 */
@property(nonatomic, copy, nullable) NSString *path;

/** Required. The region the Cloud Run service is deployed in. */
@property(nonatomic, copy, nullable) NSString *region;

/**
 *  Required. The name of the Cloud Run service being addressed. See
 *  https://cloud.google.com/run/docs/reference/rest/v1/namespaces.services.
 *  Only services located in the same project as the trigger object can be
 *  addressed.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Represents a target of an invocation over HTTP.
 */
@interface GTLREventarc_Destination : GTLRObject

/**
 *  The Cloud Function resource name. Cloud Functions V1 and V2 are supported.
 *  Format: `projects/{project}/locations/{location}/functions/{function}` This
 *  is a read-only field. Creating Cloud Functions V1/V2 triggers is only
 *  supported via the Cloud Functions product. An error will be returned if the
 *  user sets this value.
 */
@property(nonatomic, copy, nullable) NSString *cloudFunction;

/**
 *  Cloud Run fully-managed resource that receives the events. The resource
 *  should be in the same project as the trigger.
 */
@property(nonatomic, strong, nullable) GTLREventarc_CloudRun *cloudRun;

/**
 *  A GKE service capable of receiving events. The service should be running in
 *  the same project as the trigger.
 */
@property(nonatomic, strong, nullable) GTLREventarc_GKE *gke;

/** An HTTP endpoint destination described by an URI. */
@property(nonatomic, strong, nullable) GTLREventarc_HttpEndpoint *httpEndpoint;

/**
 *  Optional. Network config is used to configure how Eventarc resolves and
 *  connect to a destination. This should only be used with HttpEndpoint
 *  destination type.
 */
@property(nonatomic, strong, nullable) GTLREventarc_NetworkConfig *networkConfig;

/**
 *  The resource name of the Workflow whose Executions are triggered by the
 *  events. The Workflow resource should be deployed in the same project as the
 *  trigger. Format:
 *  `projects/{project}/locations/{location}/workflows/{workflow}`
 */
@property(nonatomic, copy, nullable) NSString *workflow;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLREventarc_Empty : GTLRObject
@end


/**
 *  An enrollment represents a subscription for messages on a particular message
 *  bus. It defines a matching criteria for messages on the bus and the
 *  subscriber endpoint where matched messages should be delivered.
 */
@interface GTLREventarc_Enrollment : GTLRObject

/** Optional. Resource annotations. */
@property(nonatomic, strong, nullable) GTLREventarc_Enrollment_Annotations *annotations;

/**
 *  Required. A CEL expression identifying which messages this enrollment
 *  applies to.
 */
@property(nonatomic, copy, nullable) NSString *celMatch;

/** Output only. The creation time. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Required. Destination is the Pipeline that the Enrollment is delivering to.
 *  It must point to the full resource name of a Pipeline. Format:
 *  "projects/{PROJECT_ID}/locations/{region}/pipelines/{PIPELINE_ID)"
 */
@property(nonatomic, copy, nullable) NSString *destination;

/** Optional. Resource display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. This checksum is computed by the server based on the value of
 *  other fields, and might be sent only on update and delete requests to ensure
 *  that the client has an up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Optional. Resource labels. */
@property(nonatomic, strong, nullable) GTLREventarc_Enrollment_Labels *labels;

/**
 *  Required. Resource name of the message bus identifying the source of the
 *  messages. It matches the form
 *  projects/{project}/locations/{location}/messageBuses/{messageBus}.
 */
@property(nonatomic, copy, nullable) NSString *messageBus;

/**
 *  Identifier. Resource name of the form
 *  projects/{project}/locations/{location}/enrollments/{enrollment}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Server assigned unique identifier for the channel. The value is
 *  a UUID4 string and guaranteed to remain unchanged until the resource is
 *  deleted.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The last-modified time. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Resource annotations.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLREventarc_Enrollment_Annotations : GTLRObject
@end


/**
 *  Optional. Resource labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLREventarc_Enrollment_Labels : GTLRObject
@end


/**
 *  Filters events based on exact matches on the CloudEvents attributes.
 */
@interface GTLREventarc_EventFilter : GTLRObject

/**
 *  Required. The name of a CloudEvents attribute. Currently, only a subset of
 *  attributes are supported for filtering. You can [retrieve a specific
 *  provider's supported event
 *  types](/eventarc/docs/list-providers#describe-provider). All triggers MUST
 *  provide a filter for the 'type' attribute.
 */
@property(nonatomic, copy, nullable) NSString *attribute;

/**
 *  Optional. The operator used for matching the events with the value of the
 *  filter. If not specified, only events that have an exact key-value pair
 *  specified in the filter are matched. The allowed values are `path_pattern`
 *  and `match-path-pattern`. `path_pattern` is only allowed for GCFv1 triggers.
 *
 *  Remapped to 'operatorProperty' to avoid language reserved word 'operator'.
 */
@property(nonatomic, copy, nullable) NSString *operatorProperty;

/** Required. The value for the attribute. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A representation of the event type resource.
 */
@interface GTLREventarc_EventType : GTLRObject

/**
 *  Output only. Human friendly description of what the event type is about. For
 *  example "Bucket created in Cloud Storage".
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. URI for the event schema. For example
 *  "https://github.com/googleapis/google-cloudevents/blob/master/proto/google/events/cloud/storage/v1/events.proto"
 */
@property(nonatomic, copy, nullable) NSString *eventSchemaUri;

/** Output only. Filtering attributes for the event type. */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_FilteringAttribute *> *filteringAttributes;

/**
 *  Output only. The full name of the event type (for example,
 *  "google.cloud.storage.object.v1.finalized"). In the form of
 *  {provider-specific-prefix}.{resource}.{version}.{verb}. Types MUST be
 *  versioned and event schemas are guaranteed to remain backward compatible
 *  within one version. Note that event type versions and API versions do not
 *  need to match.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLREventarc_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  A representation of the FilteringAttribute resource. Filtering attributes
 *  are per event type.
 */
@interface GTLREventarc_FilteringAttribute : GTLRObject

/** Output only. Attribute used for filtering the event type. */
@property(nonatomic, copy, nullable) NSString *attribute;

/**
 *  Output only. Description of the purpose of the attribute.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. If true, the attribute accepts matching expressions in the
 *  Eventarc PathPattern format.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pathPatternSupported;

/**
 *  Output only. If true, the triggers for this provider should always specify a
 *  filter on these attributes. Trigger creation will fail otherwise.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *required;

@end


/**
 *  Represents a GKE destination.
 */
@interface GTLREventarc_GKE : GTLRObject

/**
 *  Required. The name of the cluster the GKE service is running in. The cluster
 *  must be running in the same project as the trigger being created.
 */
@property(nonatomic, copy, nullable) NSString *cluster;

/**
 *  Required. The name of the Google Compute Engine in which the cluster
 *  resides, which can either be compute zone (for example, us-central1-a) for
 *  the zonal clusters or region (for example, us-central1) for regional
 *  clusters.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Required. The namespace the GKE service is running in.
 *
 *  Remapped to 'namespaceProperty' to avoid language reserved word 'namespace'.
 */
@property(nonatomic, copy, nullable) NSString *namespaceProperty;

/**
 *  Optional. The relative path on the GKE service the events should be sent to.
 *  The value must conform to the definition of a URI path segment (section 3.3
 *  of RFC2396). Examples: "/route", "route", "route/subroute".
 */
@property(nonatomic, copy, nullable) NSString *path;

/** Required. Name of the GKE service. */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  A GoogleApiSource represents a subscription of 1P events from a MessageBus.
 */
@interface GTLREventarc_GoogleApiSource : GTLRObject

/** Optional. Resource annotations. */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleApiSource_Annotations *annotations;

/** Output only. The creation time. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. Resource name of a KMS crypto key (managed by the user) used to
 *  encrypt/decrypt their event data. It must match the pattern `projects/ *
 *  /locations/ * /keyRings/ * /cryptoKeys/ *`.
 */
@property(nonatomic, copy, nullable) NSString *cryptoKeyName;

/**
 *  Required. Destination is the message bus that the GoogleApiSource is
 *  delivering to. It must be point to the full resource name of a MessageBus.
 *  Format:
 *  "projects/{PROJECT_ID}/locations/{region}/messagesBuses/{MESSAGE_BUS_ID)
 */
@property(nonatomic, copy, nullable) NSString *destination;

/** Optional. Resource display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. This checksum is computed by the server based on the value of
 *  other fields, and might be sent only on update and delete requests to ensure
 *  that the client has an up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Optional. Resource labels. */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleApiSource_Labels *labels;

/** Optional. Config to control Platform logging for the GoogleApiSource. */
@property(nonatomic, strong, nullable) GTLREventarc_LoggingConfig *loggingConfig;

/**
 *  Identifier. Resource name of the form
 *  projects/{project}/locations/{location}/googleApiSources/{google_api_source}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Server assigned unique identifier for the channel. The value is
 *  a UUID4 string and guaranteed to remain unchanged until the resource is
 *  deleted.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The last-modified time. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Resource annotations.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLREventarc_GoogleApiSource_Annotations : GTLRObject
@end


/**
 *  Optional. Resource labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLREventarc_GoogleApiSource_Labels : GTLRObject
@end


/**
 *  A GoogleChannelConfig is a resource that stores the custom settings
 *  respected by Eventarc first-party triggers in the matching region. Once
 *  configured, first-party event data will be protected using the specified
 *  custom managed encryption key instead of Google-managed encryption keys.
 */
@interface GTLREventarc_GoogleChannelConfig : GTLRObject

/**
 *  Optional. Resource name of a KMS crypto key (managed by the user) used to
 *  encrypt/decrypt their event data. It must match the pattern `projects/ *
 *  /locations/ * /keyRings/ * /cryptoKeys/ *`.
 */
@property(nonatomic, copy, nullable) NSString *cryptoKeyName;

/**
 *  Required. The resource name of the config. Must be in the format of,
 *  `projects/{project}/locations/{location}/googleChannelConfig`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The last-modified time. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Represents a target of an invocation over HTTP.
 */
@interface GTLREventarc_GoogleCloudEventarcV1PipelineDestination : GTLRObject

/**
 *  Optional. An authentication config used to authenticate message requests,
 *  such that destinations can verify the source. For example, this can be used
 *  with private GCP destinations that require GCP credentials to access like
 *  Cloud Run. This field is optional and should be set only by users interested
 *  in authenticated push
 */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleCloudEventarcV1PipelineDestinationAuthenticationConfig *authenticationConfig;

/**
 *  Optional. An HTTP endpoint destination described by an URI. If a DNS FQDN is
 *  provided as the endpoint, Pipeline will create a peering zone to the
 *  consumer VPC and forward DNS requests to the VPC specified by network config
 *  to resolve the service endpoint. See:
 *  https://cloud.google.com/dns/docs/zones/zones-overview#peering_zones
 */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleCloudEventarcV1PipelineDestinationHttpEndpoint *httpEndpoint;

/**
 *  Optional. The resource name of the Message Bus to which events should be
 *  published. The Message Bus resource should exist in the same project as the
 *  Pipeline. Format:
 *  `projects/{project}/locations/{location}/messageBuses/{message_bus}`
 */
@property(nonatomic, copy, nullable) NSString *messageBus;

/**
 *  Optional. Network config is used to configure how Pipeline resolves and
 *  connects to a destination.
 */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleCloudEventarcV1PipelineDestinationNetworkConfig *networkConfig;

/**
 *  Optional. The message format before it is delivered to the destination. If
 *  not set, the message will be delivered in the format it was originally
 *  delivered to the Pipeline. This field can only be set if
 *  Pipeline.input_payload_format is also set.
 */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleCloudEventarcV1PipelineMessagePayloadFormat *outputPayloadFormat;

/**
 *  Optional. The resource name of the Pub/Sub topic to which events should be
 *  published. Format: `projects/{project}/locations/{location}/topics/{topic}`
 */
@property(nonatomic, copy, nullable) NSString *topic;

/**
 *  Optional. The resource name of the Workflow whose Executions are triggered
 *  by the events. The Workflow resource should be deployed in the same project
 *  as the Pipeline. Format:
 *  `projects/{project}/locations/{location}/workflows/{workflow}`
 */
@property(nonatomic, copy, nullable) NSString *workflow;

@end


/**
 *  Represents a config used to authenticate message requests.
 */
@interface GTLREventarc_GoogleCloudEventarcV1PipelineDestinationAuthenticationConfig : GTLRObject

/**
 *  Optional. This authenticate method will apply Google OIDC tokens signed by a
 *  GCP service account to the requests.
 */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleCloudEventarcV1PipelineDestinationAuthenticationConfigOidcToken *googleOidc;

/**
 *  Optional. If specified, an [OAuth
 *  token](https://developers.google.com/identity/protocols/OAuth2) will be
 *  generated and attached as an `Authorization` header in the HTTP request.
 *  This type of authorization should generally only be used when calling Google
 *  APIs hosted on *.googleapis.com.
 */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleCloudEventarcV1PipelineDestinationAuthenticationConfigOAuthToken *oauthToken;

@end


/**
 *  Contains information needed for generating an [OAuth
 *  token](https://developers.google.com/identity/protocols/OAuth2). This type
 *  of authorization should generally only be used when calling Google APIs
 *  hosted on *.googleapis.com.
 */
@interface GTLREventarc_GoogleCloudEventarcV1PipelineDestinationAuthenticationConfigOAuthToken : GTLRObject

/**
 *  Optional. OAuth scope to be used for generating OAuth access token. If not
 *  specified, "https://www.googleapis.com/auth/cloud-platform" will be used.
 */
@property(nonatomic, copy, nullable) NSString *scope;

/**
 *  Required. Service account email used to generate the [OAuth
 *  token](https://developers.google.com/identity/protocols/OAuth2). The
 *  principal who calls this API must have iam.serviceAccounts.actAs permission
 *  in the service account. See
 *  https://cloud.google.com/iam/docs/understanding-service-accounts for more
 *  information. Eventarc service agents must have
 *  roles/roles/iam.serviceAccountTokenCreator role to allow Pipeline to create
 *  OAuth2 tokens for authenticated requests.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

@end


/**
 *  Represents a config used to authenticate with a Google OIDC token using a
 *  GCP service account. Use this authentication method to invoke your Cloud Run
 *  and Cloud Functions destinations or HTTP endpoints that support Google OIDC.
 */
@interface GTLREventarc_GoogleCloudEventarcV1PipelineDestinationAuthenticationConfigOidcToken : GTLRObject

/**
 *  Optional. Audience to be used to generate the OIDC Token. The audience claim
 *  identifies the recipient that the JWT is intended for. If unspecified, the
 *  destination URI will be used.
 */
@property(nonatomic, copy, nullable) NSString *audience;

/**
 *  Required. Service account email used to generate the OIDC Token. The
 *  principal who calls this API must have iam.serviceAccounts.actAs permission
 *  in the service account. See
 *  https://cloud.google.com/iam/docs/understanding-service-accounts for more
 *  information. Eventarc service agents must have
 *  roles/roles/iam.serviceAccountTokenCreator role to allow the Pipeline to
 *  create OpenID tokens for authenticated requests.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

@end


/**
 *  Represents a HTTP endpoint destination.
 */
@interface GTLREventarc_GoogleCloudEventarcV1PipelineDestinationHttpEndpoint : GTLRObject

/**
 *  Optional. The CEL expression used to modify how the destination-bound HTTP
 *  request is constructed. If a binding expression is not specified here, the
 *  message is treated as a CloudEvent and is mapped to the HTTP request
 *  according to the CloudEvent HTTP Protocol Binding Binary Content Mode
 *  (https://github.com/cloudevents/spec/blob/main/cloudevents/bindings/http-protocol-binding.md#31-binary-content-mode).
 *  In this representation, all fields except the `data` and `datacontenttype`
 *  field on the message are mapped to HTTP request headers with a prefix of
 *  `ce-`. To construct the HTTP request payload and the value of the
 *  content-type HTTP header, the payload format is defined as follows: 1) Use
 *  the output_payload_format_type on the Pipeline.Destination if it is set,
 *  else: 2) Use the input_payload_format_type on the Pipeline if it is set,
 *  else: 3) Treat the payload as opaque binary data. The `data` field of the
 *  message is converted to the payload format or left as-is for case 3) and
 *  then attached as the payload of the HTTP request. The `content-type` header
 *  on the HTTP request is set to the payload format type or left empty for case
 *  3). However, if a mediation has updated the `datacontenttype` field on the
 *  message so that it is not the same as the payload format type but it is
 *  still a prefix of the payload format type, then the `content-type` header on
 *  the HTTP request is set to this `datacontenttype` value. For example, if the
 *  `datacontenttype` is "application/json" and the payload format type is
 *  "application/json; charset=utf-8", then the `content-type` header on the
 *  HTTP request is set to "application/json; charset=utf-8". If a non-empty
 *  binding expression is specified then this expression is used to modify the
 *  default CloudEvent HTTP Protocol Binding Binary Content representation. The
 *  result of the CEL expression must be a map of key/value pairs which is used
 *  as follows: - If a map named `headers` exists on the result of the
 *  expression, then its key/value pairs are directly mapped to the HTTP request
 *  headers. The headers values are constructed from the corresponding value
 *  type's canonical representation. If the `headers` field doesn't exist then
 *  the resulting HTTP request will be the headers of the CloudEvent HTTP
 *  Binding Binary Content Mode representation of the final message. Note: If
 *  the specified binding expression, has updated the `datacontenttype` field on
 *  the message so that it is not the same as the payload format type but it is
 *  still a prefix of the payload format type, then the `content-type` header in
 *  the `headers` map is set to this `datacontenttype` value. - If a field named
 *  `body` exists on the result of the expression then its value is directly
 *  mapped to the body of the request. If the value of the `body` field is of
 *  type bytes or string then it is used for the HTTP request body as-is, with
 *  no conversion. If the body field is of any other type then it is converted
 *  to a JSON string. If the body field does not exist then the resulting
 *  payload of the HTTP request will be data value of the CloudEvent HTTP
 *  Binding Binary Content Mode representation of the final message as described
 *  earlier. - Any other fields in the resulting expression will be ignored. The
 *  CEL expression may access the incoming CloudEvent message in its definition,
 *  as follows: - The `data` field of the incoming CloudEvent message can be
 *  accessed using the `message.data` value. Subfields of `message.data` may
 *  also be accessed if an input_payload_format has been specified on the
 *  Pipeline. - Each attribute of the incoming CloudEvent message can be
 *  accessed using the `message.` value, where is replaced with the name of the
 *  attribute. - Existing headers can be accessed in the CEL expression using
 *  the `headers` variable. The `headers` variable defines a map of key/value
 *  pairs corresponding to the HTTP headers of the CloudEvent HTTP Binding
 *  Binary Content Mode representation of the final message as described
 *  earlier. For example, the following CEL expression can be used to construct
 *  an HTTP request by adding an additional header to the HTTP headers of the
 *  CloudEvent HTTP Binding Binary Content Mode representation of the final
 *  message and by overwriting the body of the request: ``` { "headers":
 *  headers.merge({"new-header-key": "new-header-value"}), "body": "new-body" }
 *  ``` - The default binding for the message payload can be accessed using the
 *  `body` variable. It conatins a string representation of the message payload
 *  in the format specified by the `output_payload_format` field. If the
 *  `input_payload_format` field is not set, the `body` variable contains the
 *  same message payload bytes that were published. Additionally, the following
 *  CEL extension functions are provided for use in this CEL expression: -
 *  toBase64Url: map.toBase64Url() -> string - Converts a CelValue to a
 *  base64url encoded string - toJsonString: map.toJsonString() -> string -
 *  Converts a CelValue to a JSON string - merge: map1.merge(map2) -> map3 -
 *  Merges the passed CEL map with the existing CEL map the function is applied
 *  to. - If the same key exists in both maps, if the key's value is type map
 *  both maps are merged else the value from the passed map is used. -
 *  denormalize: map.denormalize() -> map - Denormalizes a CEL map such that
 *  every value of type map or key in the map is expanded to return a single
 *  level map. - The resulting keys are "." separated indices of the map keys. -
 *  For example: { "a": 1, "b": { "c": 2, "d": 3 } "e": [4, 5] } .denormalize()
 *  -> { "a": 1, "b.c": 2, "b.d": 3, "e.0": 4, "e.1": 5 } - setField:
 *  map.setField(key, value) -> message - Sets the field of the message with the
 *  given key to the given value. - If the field is not present it will be
 *  added. - If the field is present it will be overwritten. - The key can be a
 *  dot separated path to set a field in a nested message. - Key must be of type
 *  string. - Value may be any valid type. - removeFields:
 *  map.removeFields([key1, key2, ...]) -> message - Removes the fields of the
 *  map with the given keys. - The keys can be a dot separated path to remove a
 *  field in a nested message. - If a key is not found it will be ignored. -
 *  Keys must be of type string. - toMap: [map1, map2, ...].toMap() -> map -
 *  Converts a CEL list of CEL maps to a single CEL map -
 *  toCloudEventJsonWithPayloadFormat:
 *  message.toCloudEventJsonWithPayloadFormat() -> map - Converts a message to
 *  the corresponding structure of JSON format for CloudEvents. - It converts
 *  `data` to destination payload format specified in `output_payload_format`.
 *  If `output_payload_format` is not set, the data will remain unchanged. - It
 *  also sets the corresponding datacontenttype of the CloudEvent, as indicated
 *  by `output_payload_format`. If no `output_payload_format` is set it will use
 *  the value of the "datacontenttype" attribute on the CloudEvent if present,
 *  else remove "datacontenttype" attribute. - This function expects that the
 *  content of the message will adhere to the standard CloudEvent format. If it
 *  doesn't then this function will fail. - The result is a CEL map that
 *  corresponds to the JSON representation of the CloudEvent. To convert that
 *  data to a JSON string it can be chained with the toJsonString function. The
 *  Pipeline expects that the message it receives adheres to the standard
 *  CloudEvent format. If it doesn't then the outgoing message request may fail
 *  with a persistent error.
 */
@property(nonatomic, copy, nullable) NSString *messageBindingTemplate;

/**
 *  Required. The URI of the HTTP enpdoint. The value must be a RFC2396 URI
 *  string. Examples: `https://svc.us-central1.p.local:8080/route`. Only the
 *  HTTPS protocol is supported.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Represents a network config to be used for destination resolution and
 *  connectivity.
 */
@interface GTLREventarc_GoogleCloudEventarcV1PipelineDestinationNetworkConfig : GTLRObject

/**
 *  Required. Name of the NetworkAttachment that allows access to the consumer
 *  VPC. Format:
 *  `projects/{PROJECT_ID}/regions/{REGION}/networkAttachments/{NETWORK_ATTACHMENT_NAME}`
 */
@property(nonatomic, copy, nullable) NSString *networkAttachment;

@end


/**
 *  Mediation defines different ways to modify the Pipeline.
 */
@interface GTLREventarc_GoogleCloudEventarcV1PipelineMediation : GTLRObject

/** Optional. How the Pipeline is to transform messages */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleCloudEventarcV1PipelineMediationTransformation *transformation;

@end


/**
 *  Transformation defines the way to transform an incoming message.
 */
@interface GTLREventarc_GoogleCloudEventarcV1PipelineMediationTransformation : GTLRObject

/**
 *  Optional. The CEL expression template to apply to transform messages. The
 *  following CEL extension functions are provided for use in this CEL
 *  expression: - merge: map1.merge(map2) -> map3 - Merges the passed CEL map
 *  with the existing CEL map the function is applied to. - If the same key
 *  exists in both maps, if the key's value is type map both maps are merged
 *  else the value from the passed map is used. - denormalize: map.denormalize()
 *  -> map - Denormalizes a CEL map such that every value of type map or key in
 *  the map is expanded to return a single level map. - The resulting keys are
 *  "." separated indices of the map keys. - For example: { "a": 1, "b": { "c":
 *  2, "d": 3 } "e": [4, 5] } .denormalize() -> { "a": 1, "b.c": 2, "b.d": 3,
 *  "e.0": 4, "e.1": 5 } - setField: map.setField(key, value) -> message - Sets
 *  the field of the message with the given key to the given value. - If the
 *  field is not present it will be added. - If the field is present it will be
 *  overwritten. - The key can be a dot separated path to set a field in a
 *  nested message. - Key must be of type string. - Value may be any valid type.
 *  - removeFields: map.removeFields([key1, key2, ...]) -> message - Removes the
 *  fields of the map with the given keys. - The keys can be a dot separated
 *  path to remove a field in a nested message. - If a key is not found it will
 *  be ignored. - Keys must be of type string. - toMap: [map1, map2,
 *  ...].toMap() -> map - Converts a CEL list of CEL maps to a single CEL map -
 *  toDestinationPayloadFormat(): message.data.toDestinationPayloadFormat() ->
 *  string or bytes - Converts the message data to the destination payload
 *  format specified in Pipeline.Destination.output_payload_format - This
 *  function is meant to be applied to the message.data field. - If the
 *  destination payload format is not set, the function will return the message
 *  data unchanged. - toCloudEventJsonWithPayloadFormat:
 *  message.toCloudEventJsonWithPayloadFormat() -> map - Converts a message to
 *  the corresponding structure of JSON format for CloudEvents - This function
 *  applies toDestinationPayloadFormat() to the message data. It also sets the
 *  corresponding datacontenttype of the CloudEvent, as indicated by
 *  Pipeline.Destination.output_payload_format. If no output_payload_format is
 *  set it will use the existing datacontenttype on the CloudEvent if present,
 *  else leave datacontenttype absent. - This function expects that the content
 *  of the message will adhere to the standard CloudEvent format. If it doesn't
 *  then this function will fail. - The result is a CEL map that corresponds to
 *  the JSON representation of the CloudEvent. To convert that data to a JSON
 *  string it can be chained with the toJsonString function.
 */
@property(nonatomic, copy, nullable) NSString *transformationTemplate;

@end


/**
 *  Represents the format of message data.
 */
@interface GTLREventarc_GoogleCloudEventarcV1PipelineMessagePayloadFormat : GTLRObject

/** Optional. Avro format. */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleCloudEventarcV1PipelineMessagePayloadFormatAvroFormat *avro;

/** Optional. JSON format. */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleCloudEventarcV1PipelineMessagePayloadFormatJsonFormat *json;

/** Optional. Protobuf format. */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleCloudEventarcV1PipelineMessagePayloadFormatProtobufFormat *protobuf;

@end


/**
 *  The format of an AVRO message payload.
 */
@interface GTLREventarc_GoogleCloudEventarcV1PipelineMessagePayloadFormatAvroFormat : GTLRObject

/** Optional. The entire schema definition is stored in this field. */
@property(nonatomic, copy, nullable) NSString *schemaDefinition;

@end


/**
 *  The format of a JSON message payload.
 */
@interface GTLREventarc_GoogleCloudEventarcV1PipelineMessagePayloadFormatJsonFormat : GTLRObject
@end


/**
 *  The format of a Protobuf message payload.
 */
@interface GTLREventarc_GoogleCloudEventarcV1PipelineMessagePayloadFormatProtobufFormat : GTLRObject

/** Optional. The entire schema definition is stored in this field. */
@property(nonatomic, copy, nullable) NSString *schemaDefinition;

@end


/**
 *  The retry policy configuration for the Pipeline. The pipeline exponentially
 *  backs off in case the destination is non responsive or returns a retryable
 *  error code. The default semantics are as follows: The backoff starts with a
 *  5 second delay and doubles the delay after each failed attempt (10 seconds,
 *  20 seconds, 40 seconds, etc.). The delay is capped at 60 seconds by default.
 *  Please note that if you set the min_retry_delay and max_retry_delay fields
 *  to the same value this will make the duration between retries constant.
 */
@interface GTLREventarc_GoogleCloudEventarcV1PipelineRetryPolicy : GTLRObject

/**
 *  Optional. The maximum number of delivery attempts for any message. The value
 *  must be between 1 and 100. The default value for this field is 5.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxAttempts;

/**
 *  Optional. The maximum amount of seconds to wait between retry attempts. The
 *  value must be between 1 and 600. The default value for this field is 60.
 */
@property(nonatomic, strong, nullable) GTLRDuration *maxRetryDelay;

/**
 *  Optional. The minimum amount of seconds to wait between retry attempts. The
 *  value must be between 1 and 600. The default value for this field is 5.
 */
@property(nonatomic, strong, nullable) GTLRDuration *minRetryDelay;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLREventarc_GoogleLongrunningCancelOperationRequest : GTLRObject
@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLREventarc_GoogleLongrunningListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_GoogleLongrunningOperation *> *operations;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLREventarc_GoogleLongrunningOperation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleRpcStatus *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleLongrunningOperation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleLongrunningOperation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLREventarc_GoogleLongrunningOperation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLREventarc_GoogleLongrunningOperation_Response : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLREventarc_GoogleRpcStatus : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_GoogleRpcStatus_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLREventarc_GoogleRpcStatus_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLREventarc_GoogleRpcStatus_Details_Item : GTLRObject
@end


/**
 *  Represents a HTTP endpoint destination.
 */
@interface GTLREventarc_HttpEndpoint : GTLRObject

/**
 *  Required. The URI of the HTTP enpdoint. The value must be a RFC2396 URI
 *  string. Examples: `http://10.10.10.8:80/route`,
 *  `http://svc.us-central1.p.local:8080/`. Only HTTP and HTTPS protocols are
 *  supported. The host can be either a static IP addressable from the VPC
 *  specified by the network config, or an internal DNS hostname of the service
 *  resolvable via Cloud DNS.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  The response message for the `ListChannelConnections` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "channelConnections" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLREventarc_ListChannelConnectionsResponse : GTLRCollectionObject

/**
 *  The requested channel connections, up to the number specified in
 *  `page_size`.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_ChannelConnection *> *channelConnections;

/**
 *  A page token that can be sent to `ListChannelConnections` to request the
 *  next page. If this is empty, then there are no more pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Unreachable resources, if any. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for the `ListChannels` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "channels" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLREventarc_ListChannelsResponse : GTLRCollectionObject

/**
 *  The requested channels, up to the number specified in `page_size`.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_Channel *> *channels;

/**
 *  A page token that can be sent to `ListChannels` to request the next page. If
 *  this is empty, then there are no more pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Unreachable resources, if any. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for the `ListEnrollments` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "enrollments" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLREventarc_ListEnrollmentsResponse : GTLRCollectionObject

/**
 *  The requested Enrollments, up to the number specified in `page_size`.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_Enrollment *> *enrollments;

/**
 *  A page token that can be sent to `ListEnrollments` to request the next page.
 *  If this is empty, then there are no more pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Unreachable resources, if any. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for the `ListGoogleApiSources` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "googleApiSources" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLREventarc_ListGoogleApiSourcesResponse : GTLRCollectionObject

/**
 *  The requested GoogleApiSources, up to the number specified in `page_size`.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_GoogleApiSource *> *googleApiSources;

/**
 *  A page token that can be sent to `ListMessageBusEnrollments` to request the
 *  next page. If this is empty, then there are no more pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Unreachable resources, if any. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLREventarc_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for the `ListMessageBusEnrollments` method.`
 */
@interface GTLREventarc_ListMessageBusEnrollmentsResponse : GTLRObject

/** The requested enrollments, up to the number specified in `page_size`. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *enrollments;

/**
 *  A page token that can be sent to `ListMessageBusEnrollments` to request the
 *  next page. If this is empty, then there are no more pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Unreachable resources, if any. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for the `ListMessageBuses` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "messageBuses" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLREventarc_ListMessageBusesResponse : GTLRCollectionObject

/**
 *  The requested message buses, up to the number specified in `page_size`.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_MessageBus *> *messageBuses;

/**
 *  A page token that can be sent to `ListMessageBuses` to request the next
 *  page. If this is empty, then there are no more pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Unreachable resources, if any. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for the ListPipelines method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "pipelines" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLREventarc_ListPipelinesResponse : GTLRCollectionObject

/**
 *  A page token that can be sent to `ListPipelines` to request the next page.
 *  If this is empty, then there are no more pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The requested pipelines, up to the number specified in `page_size`.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_Pipeline *> *pipelines;

/** Unreachable resources, if any. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for the `ListProviders` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "providers" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLREventarc_ListProvidersResponse : GTLRCollectionObject

/**
 *  A page token that can be sent to `ListProviders` to request the next page.
 *  If this is empty, then there are no more pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The requested providers, up to the number specified in `page_size`.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_Provider *> *providers;

/** Unreachable resources, if any. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for the `ListTriggers` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "triggers" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLREventarc_ListTriggersResponse : GTLRCollectionObject

/**
 *  A page token that can be sent to `ListTriggers` to request the next page. If
 *  this is empty, then there are no more pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The requested triggers, up to the number specified in `page_size`.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_Trigger *> *triggers;

/** Unreachable resources, if any. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  A resource that represents a Google Cloud location.
 */
@interface GTLREventarc_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLREventarc_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLREventarc_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLREventarc_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLREventarc_Location_Metadata : GTLRObject
@end


/**
 *  The configuration for Platform Telemetry logging for Eventarc Advanced
 *  resources.
 */
@interface GTLREventarc_LoggingConfig : GTLRObject

/**
 *  Optional. The minimum severity of logs that will be sent to
 *  Stackdriver/Platform Telemetry. Logs at severitiy ≥ this value will be sent,
 *  unless it is NONE.
 *
 *  Likely values:
 *    @arg @c kGTLREventarc_LoggingConfig_LogSeverity_Alert A person must take
 *        action immediately. (Value: "ALERT")
 *    @arg @c kGTLREventarc_LoggingConfig_LogSeverity_Critical Critical events
 *        cause more severe problems or outages. (Value: "CRITICAL")
 *    @arg @c kGTLREventarc_LoggingConfig_LogSeverity_Debug Debug or trace level
 *        logging. (Value: "DEBUG")
 *    @arg @c kGTLREventarc_LoggingConfig_LogSeverity_Emergency One or more
 *        systems are unusable. (Value: "EMERGENCY")
 *    @arg @c kGTLREventarc_LoggingConfig_LogSeverity_Error Error events are
 *        likely to cause problems. (Value: "ERROR")
 *    @arg @c kGTLREventarc_LoggingConfig_LogSeverity_Info Routine information,
 *        such as ongoing status or performance. (Value: "INFO")
 *    @arg @c kGTLREventarc_LoggingConfig_LogSeverity_LogSeverityUnspecified Log
 *        severity is not specified. This value is treated the same as NONE, but
 *        is used to distinguish between no update and update to NONE in
 *        update_masks. (Value: "LOG_SEVERITY_UNSPECIFIED")
 *    @arg @c kGTLREventarc_LoggingConfig_LogSeverity_None Default value at
 *        resource creation, presence of this value must be treated as no
 *        logging/disable logging. (Value: "NONE")
 *    @arg @c kGTLREventarc_LoggingConfig_LogSeverity_Notice Normal but
 *        significant events, such as start up, shut down, or a configuration
 *        change. (Value: "NOTICE")
 *    @arg @c kGTLREventarc_LoggingConfig_LogSeverity_Warning Warning events
 *        might cause problems. (Value: "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *logSeverity;

@end


/**
 *  MessageBus for the messages flowing through the system. The admin has
 *  visibility and control over the messages being published and consumed and
 *  can restrict publishers and subscribers to only a subset of data available
 *  in the system by defining authorization policies.
 */
@interface GTLREventarc_MessageBus : GTLRObject

/** Optional. Resource annotations. */
@property(nonatomic, strong, nullable) GTLREventarc_MessageBus_Annotations *annotations;

/** Output only. The creation time. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. Resource name of a KMS crypto key (managed by the user) used to
 *  encrypt/decrypt their event data. It must match the pattern `projects/ *
 *  /locations/ * /keyRings/ * /cryptoKeys/ *`.
 */
@property(nonatomic, copy, nullable) NSString *cryptoKeyName;

/** Optional. Resource display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. This checksum is computed by the server based on the value of
 *  other fields, and might be sent only on update and delete requests to ensure
 *  that the client has an up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Optional. Resource labels. */
@property(nonatomic, strong, nullable) GTLREventarc_MessageBus_Labels *labels;

/**
 *  Optional. Config to control Platform logging for the Message Bus. This log
 *  configuration is applied to the Message Bus itself, and all the Enrollments
 *  attached to it.
 */
@property(nonatomic, strong, nullable) GTLREventarc_LoggingConfig *loggingConfig;

/**
 *  Identifier. Resource name of the form
 *  projects/{project}/locations/{location}/messageBuses/{message_bus}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Server assigned unique identifier for the channel. The value is
 *  a UUID4 string and guaranteed to remain unchanged until the resource is
 *  deleted.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The last-modified time. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Resource annotations.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLREventarc_MessageBus_Annotations : GTLRObject
@end


/**
 *  Optional. Resource labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLREventarc_MessageBus_Labels : GTLRObject
@end


/**
 *  Network Configuration that can be inherited by other protos.
 */
@interface GTLREventarc_NetworkConfig : GTLRObject

/**
 *  Required. Name of the NetworkAttachment that allows access to the customer's
 *  VPC. Format:
 *  `projects/{PROJECT_ID}/regions/{REGION}/networkAttachments/{NETWORK_ATTACHMENT_NAME}`
 */
@property(nonatomic, copy, nullable) NSString *networkAttachment;

@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLREventarc_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  A representation of the Pipeline resource.
 */
@interface GTLREventarc_Pipeline : GTLRObject

/**
 *  Optional. User-defined annotations. See
 *  https://google.aip.dev/128#annotations.
 */
@property(nonatomic, strong, nullable) GTLREventarc_Pipeline_Annotations *annotations;

/**
 *  Output only. The creation time. A timestamp in RFC3339 UTC "Zulu" format,
 *  with nanosecond resolution and up to nine fractional digits. Examples:
 *  "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. Resource name of a KMS crypto key (managed by the user) used to
 *  encrypt/decrypt the event data. If not set, an internal Google-owned key
 *  will be used to encrypt messages. It must match the pattern
 *  "projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}".
 */
@property(nonatomic, copy, nullable) NSString *cryptoKeyName;

/**
 *  Required. List of destinations to which messages will be forwarded.
 *  Currently, exactly one destination is supported per Pipeline.
 */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_GoogleCloudEventarcV1PipelineDestination *> *destinations;

/** Optional. Display name of resource. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. This checksum is computed by the server based on the value of
 *  other fields, and might be sent only on create requests to ensure that the
 *  client has an up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. The payload format expected for the messages received by the
 *  Pipeline. If input_payload_format is set then any messages not matching this
 *  format will be treated as persistent errors. If input_payload_format is not
 *  set, then the message data will be treated as an opaque binary and no output
 *  format can be set on the Pipeline through the
 *  Pipeline.Destination.output_payload_format field. Any Mediations on the
 *  Pipeline that involve access to the data field will fail as persistent
 *  errors.
 */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleCloudEventarcV1PipelineMessagePayloadFormat *inputPayloadFormat;

/**
 *  Optional. User labels attached to the Pipeline that can be used to group
 *  resources. An object containing a list of "key": value pairs. Example: {
 *  "name": "wrench", "mass": "1.3kg", "count": "3" }.
 */
@property(nonatomic, strong, nullable) GTLREventarc_Pipeline_Labels *labels;

/** Optional. Config to control Platform Logging for Pipelines. */
@property(nonatomic, strong, nullable) GTLREventarc_LoggingConfig *loggingConfig;

/**
 *  Optional. List of mediation operations to be performed on the message.
 *  Currently, only one Transformation operation is allowed in each Pipeline.
 */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_GoogleCloudEventarcV1PipelineMediation *> *mediations;

/**
 *  Identifier. The resource name of the Pipeline. Must be unique within the
 *  location of the project and must be in
 *  `projects/{project}/locations/{location}/pipelines/{pipeline}` format.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Optional. The retry policy to use in the pipeline. */
@property(nonatomic, strong, nullable) GTLREventarc_GoogleCloudEventarcV1PipelineRetryPolicy *retryPolicy;

/**
 *  Output only. Server-assigned unique identifier for the Pipeline. The value
 *  is a UUID4 string and guaranteed to remain unchanged until the resource is
 *  deleted.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/**
 *  Output only. The last-modified time. A timestamp in RFC3339 UTC "Zulu"
 *  format, with nanosecond resolution and up to nine fractional digits.
 *  Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. User-defined annotations. See
 *  https://google.aip.dev/128#annotations.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLREventarc_Pipeline_Annotations : GTLRObject
@end


/**
 *  Optional. User labels attached to the Pipeline that can be used to group
 *  resources. An object containing a list of "key": value pairs. Example: {
 *  "name": "wrench", "mass": "1.3kg", "count": "3" }.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLREventarc_Pipeline_Labels : GTLRObject
@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** ``` { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
 *  members: - user:mike\@example.com - group:admins\@example.com -
 *  domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 ``` For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLREventarc_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  A representation of the Provider resource.
 */
@interface GTLREventarc_Provider : GTLRObject

/**
 *  Output only. Human friendly name for the Provider. For example "Cloud
 *  Storage".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Output only. Event types for this provider. */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_EventType *> *eventTypes;

/**
 *  Output only. In
 *  `projects/{project}/locations/{location}/providers/{provider_id}` format.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Represents a Pub/Sub transport.
 */
@interface GTLREventarc_Pubsub : GTLRObject

/**
 *  Output only. The name of the Pub/Sub subscription created and managed by
 *  Eventarc as a transport for the event delivery. Format:
 *  `projects/{PROJECT_ID}/subscriptions/{SUBSCRIPTION_NAME}`.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  Optional. The name of the Pub/Sub topic created and managed by Eventarc as a
 *  transport for the event delivery. Format:
 *  `projects/{PROJECT_ID}/topics/{TOPIC_NAME}`. You can set an existing topic
 *  for triggers of the type `google.cloud.pubsub.topic.v1.messagePublished`.
 *  The topic you provide here is not deleted by Eventarc at trigger deletion.
 */
@property(nonatomic, copy, nullable) NSString *topic;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLREventarc_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLREventarc_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  A condition that is part of the trigger state computation.
 */
@interface GTLREventarc_StateCondition : GTLRObject

/**
 *  The canonical code of the condition.
 *
 *  Likely values:
 *    @arg @c kGTLREventarc_StateCondition_Code_Aborted The operation was
 *        aborted, typically due to a concurrency issue such as a sequencer
 *        check failure or transaction abort. See the guidelines above for
 *        deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`.
 *        HTTP Mapping: 409 Conflict (Value: "ABORTED")
 *    @arg @c kGTLREventarc_StateCondition_Code_AlreadyExists The entity that a
 *        client attempted to create (e.g., file or directory) already exists.
 *        HTTP Mapping: 409 Conflict (Value: "ALREADY_EXISTS")
 *    @arg @c kGTLREventarc_StateCondition_Code_Cancelled The operation was
 *        cancelled, typically by the caller. HTTP Mapping: 499 Client Closed
 *        Request (Value: "CANCELLED")
 *    @arg @c kGTLREventarc_StateCondition_Code_DataLoss Unrecoverable data loss
 *        or corruption. HTTP Mapping: 500 Internal Server Error (Value:
 *        "DATA_LOSS")
 *    @arg @c kGTLREventarc_StateCondition_Code_DeadlineExceeded The deadline
 *        expired before the operation could complete. For operations that
 *        change the state of the system, this error may be returned even if the
 *        operation has completed successfully. For example, a successful
 *        response from a server could have been delayed long enough for the
 *        deadline to expire. HTTP Mapping: 504 Gateway Timeout (Value:
 *        "DEADLINE_EXCEEDED")
 *    @arg @c kGTLREventarc_StateCondition_Code_FailedPrecondition The operation
 *        was rejected because the system is not in a state required for the
 *        operation's execution. For example, the directory to be deleted is
 *        non-empty, an rmdir operation is applied to a non-directory, etc.
 *        Service implementors can use the following guidelines to decide
 *        between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use
 *        `UNAVAILABLE` if the client can retry just the failing call. (b) Use
 *        `ABORTED` if the client should retry at a higher level. For example,
 *        when a client-specified test-and-set fails, indicating the client
 *        should restart a read-modify-write sequence. (c) Use
 *        `FAILED_PRECONDITION` if the client should not retry until the system
 *        state has been explicitly fixed. For example, if an "rmdir" fails
 *        because the directory is non-empty, `FAILED_PRECONDITION` should be
 *        returned since the client should not retry unless the files are
 *        deleted from the directory. HTTP Mapping: 400 Bad Request (Value:
 *        "FAILED_PRECONDITION")
 *    @arg @c kGTLREventarc_StateCondition_Code_Internal Internal errors. This
 *        means that some invariants expected by the underlying system have been
 *        broken. This error code is reserved for serious errors. HTTP Mapping:
 *        500 Internal Server Error (Value: "INTERNAL")
 *    @arg @c kGTLREventarc_StateCondition_Code_InvalidArgument The client
 *        specified an invalid argument. Note that this differs from
 *        `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are
 *        problematic regardless of the state of the system (e.g., a malformed
 *        file name). HTTP Mapping: 400 Bad Request (Value: "INVALID_ARGUMENT")
 *    @arg @c kGTLREventarc_StateCondition_Code_NotFound Some requested entity
 *        (e.g., file or directory) was not found. Note to server developers: if
 *        a request is denied for an entire class of users, such as gradual
 *        feature rollout or undocumented allowlist, `NOT_FOUND` may be used. If
 *        a request is denied for some users within a class of users, such as
 *        user-based access control, `PERMISSION_DENIED` must be used. HTTP
 *        Mapping: 404 Not Found (Value: "NOT_FOUND")
 *    @arg @c kGTLREventarc_StateCondition_Code_Ok Not an error; returned on
 *        success. HTTP Mapping: 200 OK (Value: "OK")
 *    @arg @c kGTLREventarc_StateCondition_Code_OutOfRange The operation was
 *        attempted past the valid range. E.g., seeking or reading past
 *        end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem
 *        that may be fixed if the system state changes. For example, a 32-bit
 *        file system will generate `INVALID_ARGUMENT` if asked to read at an
 *        offset that is not in the range [0,2^32-1], but it will generate
 *        `OUT_OF_RANGE` if asked to read from an offset past the current file
 *        size. There is a fair bit of overlap between `FAILED_PRECONDITION` and
 *        `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific
 *        error) when it applies so that callers who are iterating through a
 *        space can easily look for an `OUT_OF_RANGE` error to detect when they
 *        are done. HTTP Mapping: 400 Bad Request (Value: "OUT_OF_RANGE")
 *    @arg @c kGTLREventarc_StateCondition_Code_PermissionDenied The caller does
 *        not have permission to execute the specified operation.
 *        `PERMISSION_DENIED` must not be used for rejections caused by
 *        exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those
 *        errors). `PERMISSION_DENIED` must not be used if the caller can not be
 *        identified (use `UNAUTHENTICATED` instead for those errors). This
 *        error code does not imply the request is valid or the requested entity
 *        exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden
 *        (Value: "PERMISSION_DENIED")
 *    @arg @c kGTLREventarc_StateCondition_Code_ResourceExhausted Some resource
 *        has been exhausted, perhaps a per-user quota, or perhaps the entire
 *        file system is out of space. HTTP Mapping: 429 Too Many Requests
 *        (Value: "RESOURCE_EXHAUSTED")
 *    @arg @c kGTLREventarc_StateCondition_Code_Unauthenticated The request does
 *        not have valid authentication credentials for the operation. HTTP
 *        Mapping: 401 Unauthorized (Value: "UNAUTHENTICATED")
 *    @arg @c kGTLREventarc_StateCondition_Code_Unavailable The service is
 *        currently unavailable. This is most likely a transient condition,
 *        which can be corrected by retrying with a backoff. Note that it is not
 *        always safe to retry non-idempotent operations. See the guidelines
 *        above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and
 *        `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable (Value:
 *        "UNAVAILABLE")
 *    @arg @c kGTLREventarc_StateCondition_Code_Unimplemented The operation is
 *        not implemented or is not supported/enabled in this service. HTTP
 *        Mapping: 501 Not Implemented (Value: "UNIMPLEMENTED")
 *    @arg @c kGTLREventarc_StateCondition_Code_Unknown Unknown error. For
 *        example, this error may be returned when a `Status` value received
 *        from another address space belongs to an error space that is not known
 *        in this address space. Also errors raised by APIs that do not return
 *        enough error information may be converted to this error. HTTP Mapping:
 *        500 Internal Server Error (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *code;

/** Human-readable message. */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLREventarc_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLREventarc_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Represents the transport intermediaries created for the trigger to deliver
 *  events.
 */
@interface GTLREventarc_Transport : GTLRObject

/**
 *  The Pub/Sub topic and subscription used by Eventarc as a transport
 *  intermediary.
 */
@property(nonatomic, strong, nullable) GTLREventarc_Pubsub *pubsub;

@end


/**
 *  A representation of the trigger resource.
 */
@interface GTLREventarc_Trigger : GTLRObject

/**
 *  Optional. The name of the channel associated with the trigger in
 *  `projects/{project}/locations/{location}/channels/{channel}` format. You
 *  must provide a channel to receive events from Eventarc SaaS partners.
 */
@property(nonatomic, copy, nullable) NSString *channel;

/** Output only. The reason(s) why a trigger is in FAILED state. */
@property(nonatomic, strong, nullable) GTLREventarc_Trigger_Conditions *conditions;

/** Output only. The creation time. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Required. Destination specifies where the events should be sent to. */
@property(nonatomic, strong, nullable) GTLREventarc_Destination *destination;

/**
 *  Output only. This checksum is computed by the server based on the value of
 *  other fields, and might be sent only on create requests to ensure that the
 *  client has an up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. EventDataContentType specifies the type of payload in MIME format
 *  that is expected from the CloudEvent data field. This is set to
 *  `application/json` if the value is not defined.
 */
@property(nonatomic, copy, nullable) NSString *eventDataContentType;

/**
 *  Required. Unordered list. The list of filters that applies to event
 *  attributes. Only events that match all the provided filters are sent to the
 *  destination.
 */
@property(nonatomic, strong, nullable) NSArray<GTLREventarc_EventFilter *> *eventFilters;

/**
 *  Optional. User labels attached to the triggers that can be used to group
 *  resources.
 */
@property(nonatomic, strong, nullable) GTLREventarc_Trigger_Labels *labels;

/**
 *  Required. The resource name of the trigger. Must be unique within the
 *  location of the project and must be in
 *  `projects/{project}/locations/{location}/triggers/{trigger}` format.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Whether or not this Trigger satisfies the requirements of
 *  physical zone separation
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzs;

/**
 *  Optional. The IAM service account email associated with the trigger. The
 *  service account represents the identity of the trigger. The
 *  `iam.serviceAccounts.actAs` permission must be granted on the service
 *  account to allow a principal to impersonate the service account. For more
 *  information, see the [Roles and
 *  permissions](/eventarc/docs/all-roles-permissions) page specific to the
 *  trigger destination.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Optional. To deliver messages, Eventarc might use other Google Cloud
 *  products as a transport intermediary. This field contains a reference to
 *  that transport intermediary. This information can be used for debugging
 *  purposes.
 */
@property(nonatomic, strong, nullable) GTLREventarc_Transport *transport;

/**
 *  Output only. Server-assigned unique identifier for the trigger. The value is
 *  a UUID4 string and guaranteed to remain unchanged until the resource is
 *  deleted.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The last-modified time. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Output only. The reason(s) why a trigger is in FAILED state.
 *
 *  @note This class is documented as having more properties of
 *        GTLREventarc_StateCondition. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLREventarc_Trigger_Conditions : GTLRObject
@end


/**
 *  Optional. User labels attached to the triggers that can be used to group
 *  resources.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLREventarc_Trigger_Labels : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
