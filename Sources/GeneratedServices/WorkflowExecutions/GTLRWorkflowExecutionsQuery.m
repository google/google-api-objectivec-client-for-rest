// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Workflow Executions API (workflowexecutions/v1)
// Description:
//   Execute workflows created with Workflows API.
// Documentation:
//   https://cloud.google.com/workflows

#import <GoogleAPIClientForREST/GTLRWorkflowExecutionsQuery.h>

// ----------------------------------------------------------------------------
// Constants

// view
NSString * const kGTLRWorkflowExecutionsViewBasic              = @"BASIC";
NSString * const kGTLRWorkflowExecutionsViewExecutionEntryViewBasic = @"EXECUTION_ENTRY_VIEW_BASIC";
NSString * const kGTLRWorkflowExecutionsViewExecutionEntryViewDetailed = @"EXECUTION_ENTRY_VIEW_DETAILED";
NSString * const kGTLRWorkflowExecutionsViewExecutionEntryViewUnspecified = @"EXECUTION_ENTRY_VIEW_UNSPECIFIED";
NSString * const kGTLRWorkflowExecutionsViewExecutionViewUnspecified = @"EXECUTION_VIEW_UNSPECIFIED";
NSString * const kGTLRWorkflowExecutionsViewFull               = @"FULL";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRWorkflowExecutionsQuery

@dynamic fields;

@end

@implementation GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsCallbacksList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/callbacks";
  GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsCallbacksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRWorkflowExecutions_ListCallbacksResponse class];
  query.loggingName = @"workflowexecutions.projects.locations.workflows.executions.callbacks.list";
  return query;
}

@end

@implementation GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRWorkflowExecutions_CancelExecutionRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRWorkflowExecutions_Execution class];
  query.loggingName = @"workflowexecutions.projects.locations.workflows.executions.cancel";
  return query;
}

@end

@implementation GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRWorkflowExecutions_Execution *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/executions";
  GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRWorkflowExecutions_Execution class];
  query.loggingName = @"workflowexecutions.projects.locations.workflows.executions.create";
  return query;
}

@end

@implementation GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsDeleteExecutionHistory

@dynamic name;

+ (instancetype)queryWithObject:(GTLRWorkflowExecutions_DeleteExecutionHistoryRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:deleteExecutionHistory";
  GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsDeleteExecutionHistory *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRWorkflowExecutions_Empty class];
  query.loggingName = @"workflowexecutions.projects.locations.workflows.executions.deleteExecutionHistory";
  return query;
}

@end

@implementation GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsExportData

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:exportData";
  GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsExportData *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRWorkflowExecutions_ExportDataResponse class];
  query.loggingName = @"workflowexecutions.projects.locations.workflows.executions.exportData";
  return query;
}

@end

@implementation GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsGet

@dynamic name, view;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRWorkflowExecutions_Execution class];
  query.loggingName = @"workflowexecutions.projects.locations.workflows.executions.get";
  return query;
}

@end

@implementation GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsList

@dynamic filter, orderBy, pageSize, pageToken, parent, view;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/executions";
  GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRWorkflowExecutions_ListExecutionsResponse class];
  query.loggingName = @"workflowexecutions.projects.locations.workflows.executions.list";
  return query;
}

@end

@implementation GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsStepEntriesGet

@dynamic name, view;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsStepEntriesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRWorkflowExecutions_StepEntry class];
  query.loggingName = @"workflowexecutions.projects.locations.workflows.executions.stepEntries.get";
  return query;
}

@end

@implementation GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsStepEntriesList

@dynamic filter, orderBy, pageSize, pageToken, parent, skip, view;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/stepEntries";
  GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsExecutionsStepEntriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRWorkflowExecutions_ListStepEntriesResponse class];
  query.loggingName = @"workflowexecutions.projects.locations.workflows.executions.stepEntries.list";
  return query;
}

@end

@implementation GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsTriggerPubsubExecution

@dynamic workflow;

+ (instancetype)queryWithObject:(GTLRWorkflowExecutions_TriggerPubsubExecutionRequest *)object
                       workflow:(NSString *)workflow {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"workflow" ];
  NSString *pathURITemplate = @"v1/{+workflow}:triggerPubsubExecution";
  GTLRWorkflowExecutionsQuery_ProjectsLocationsWorkflowsTriggerPubsubExecution *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.workflow = workflow;
  query.expectedObjectClass = [GTLRWorkflowExecutions_Execution class];
  query.loggingName = @"workflowexecutions.projects.locations.workflows.triggerPubsubExecution";
  return query;
}

@end
