// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Workflow Executions API (workflowexecutions/v1)
// Description:
//   Execute workflows created with Workflows API.
// Documentation:
//   https://cloud.google.com/workflows

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRWorkflowExecutions_Callback;
@class GTLRWorkflowExecutions_Error;
@class GTLRWorkflowExecutions_Exception;
@class GTLRWorkflowExecutions_Execution;
@class GTLRWorkflowExecutions_Execution_Labels;
@class GTLRWorkflowExecutions_NavigationInfo;
@class GTLRWorkflowExecutions_Position;
@class GTLRWorkflowExecutions_PubsubMessage;
@class GTLRWorkflowExecutions_PubsubMessage_Attributes;
@class GTLRWorkflowExecutions_StackTrace;
@class GTLRWorkflowExecutions_StackTraceElement;
@class GTLRWorkflowExecutions_StateError;
@class GTLRWorkflowExecutions_Status;
@class GTLRWorkflowExecutions_Step;
@class GTLRWorkflowExecutions_StepEntry;
@class GTLRWorkflowExecutions_StepEntryMetadata;
@class GTLRWorkflowExecutions_VariableData;
@class GTLRWorkflowExecutions_VariableData_Variables;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRWorkflowExecutions_Execution.callLogLevel

/**
 *  No call logging level specified.
 *
 *  Value: "CALL_LOG_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_CallLogLevel_CallLogLevelUnspecified;
/**
 *  Log all call steps within workflows, all call returns, and all exceptions
 *  raised.
 *
 *  Value: "LOG_ALL_CALLS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_CallLogLevel_LogAllCalls;
/**
 *  Log only exceptions that are raised from call steps within workflows.
 *
 *  Value: "LOG_ERRORS_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_CallLogLevel_LogErrorsOnly;
/**
 *  Explicitly log nothing.
 *
 *  Value: "LOG_NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_CallLogLevel_LogNone;

// ----------------------------------------------------------------------------
// GTLRWorkflowExecutions_Execution.executionHistoryLevel

/**
 *  Enable execution history basic feature for this execution.
 *
 *  Value: "EXECUTION_HISTORY_BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_ExecutionHistoryLevel_ExecutionHistoryBasic;
/**
 *  Enable execution history detailed feature for this execution.
 *
 *  Value: "EXECUTION_HISTORY_DETAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_ExecutionHistoryLevel_ExecutionHistoryDetailed;
/**
 *  The default/unset value.
 *
 *  Value: "EXECUTION_HISTORY_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_ExecutionHistoryLevel_ExecutionHistoryLevelUnspecified;

// ----------------------------------------------------------------------------
// GTLRWorkflowExecutions_Execution.state

/**
 *  The execution is in progress.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_State_Active;
/**
 *  The execution was stopped intentionally.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_State_Cancelled;
/**
 *  The execution failed with an error.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_State_Failed;
/**
 *  Request has been placed in the backlog for processing at a later time.
 *
 *  Value: "QUEUED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_State_Queued;
/**
 *  Invalid state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_State_StateUnspecified;
/**
 *  The execution finished successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_State_Succeeded;
/**
 *  Execution data is unavailable. See the `state_error` field.
 *
 *  Value: "UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_Execution_State_Unavailable;

// ----------------------------------------------------------------------------
// GTLRWorkflowExecutions_StateError.type

/**
 *  Caused by an issue with KMS.
 *
 *  Value: "KMS_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StateError_Type_KmsError;
/**
 *  No type specified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StateError_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRWorkflowExecutions_StepEntry.state

/**
 *  The step entry is cancelled.
 *
 *  Value: "STATE_CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_State_StateCancelled;
/**
 *  The step entry failed with an error.
 *
 *  Value: "STATE_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_State_StateFailed;
/**
 *  The step entry is in progress.
 *
 *  Value: "STATE_IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_State_StateInProgress;
/**
 *  The step entry finished successfully.
 *
 *  Value: "STATE_SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_State_StateSucceeded;
/**
 *  Invalid state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRWorkflowExecutions_StepEntry.stepType

/**
 *  The step entry assigns new variable(s).
 *
 *  Value: "STEP_ASSIGN"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepAssign;
/**
 *  The step entry calls a subworkflow/stdlib.
 *
 *  Value: "STEP_CALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepCall;
/**
 *  The step entry executes a condition inside a switch.
 *
 *  Value: "STEP_CONDITION"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepCondition;
/**
 *  The step entry calls a connector.
 *
 *  Value: "STEP_CONNECTOR_CALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepConnectorCall;
/**
 *  The step entry executes the except part of a try/retry/except block.
 *
 *  Value: "STEP_EXCEPT"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepExcept;
/**
 *  The step entry executes a for loop.
 *
 *  Value: "STEP_FOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepFor;
/**
 *  The step entry executes a iteration of a for loop.
 *
 *  Value: "STEP_FOR_ITERATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepForIteration;
/**
 *  The step entry jumps to another step.
 *
 *  Value: "STEP_GOTO"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepGoto;
/**
 *  The step entry executes a series of parallel branch(es).
 *
 *  Value: "STEP_PARALLEL_BRANCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepParallelBranch;
/**
 *  The step entry executes a branch of a parallel branch.
 *
 *  Value: "STEP_PARALLEL_BRANCH_ENTRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepParallelBranchEntry;
/**
 *  The step entry executes a parallel for loop.
 *
 *  Value: "STEP_PARALLEL_FOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepParallelFor;
/**
 *  The step entry raises an error.
 *
 *  Value: "STEP_RAISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepRaise;
/**
 *  The step entry executes the retry part of a try/retry/except block.
 *
 *  Value: "STEP_RETRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepRetry;
/**
 *  The step entry returns.
 *
 *  Value: "STEP_RETURN"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepReturn;
/**
 *  The step entry calls a standard library routine.
 *
 *  Value: "STEP_STD_LIB_CALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepStdLibCall;
/**
 *  The step entry calls a subworklfow.
 *
 *  Value: "STEP_SUBWORKFLOW_CALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepSubworkflowCall;
/**
 *  The step entry executes a switch-case block.
 *
 *  Value: "STEP_SWITCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepSwitch;
/**
 *  The step entry executes the try part of a try/retry/except block.
 *
 *  Value: "STEP_TRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepTry;
/**
 *  The step entry executes a try/retry/except block.
 *
 *  Value: "STEP_TRY_RETRY_EXCEPT"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepTryRetryExcept;
/**
 *  Invalid step type.
 *
 *  Value: "STEP_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntry_StepType_StepTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRWorkflowExecutions_StepEntryMetadata.progressType

/**
 *  Current step entry is in progress of a FOR step.
 *
 *  Value: "PROGRESS_TYPE_FOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntryMetadata_ProgressType_ProgressTypeFor;
/**
 *  Current step entry is in progress of a PARALLEL BRANCH step.
 *
 *  Value: "PROGRESS_TYPE_PARALLEL_BRANCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntryMetadata_ProgressType_ProgressTypeParallelBranch;
/**
 *  Current step entry is in progress of a PARALLEL FOR step.
 *
 *  Value: "PROGRESS_TYPE_PARALLEL_FOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntryMetadata_ProgressType_ProgressTypeParallelFor;
/**
 *  Current step entry is in progress of a RETRY step.
 *
 *  Value: "PROGRESS_TYPE_RETRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntryMetadata_ProgressType_ProgressTypeRetry;
/**
 *  Current step entry is in progress of a SWITCH step.
 *
 *  Value: "PROGRESS_TYPE_SWITCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntryMetadata_ProgressType_ProgressTypeSwitch;
/**
 *  Current step entry does not have any progress data.
 *
 *  Value: "PROGRESS_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWorkflowExecutions_StepEntryMetadata_ProgressType_ProgressTypeUnspecified;

/**
 *  An instance of a Callback created by an execution.
 */
@interface GTLRWorkflowExecutions_Callback : GTLRObject

/**
 *  Output only. The payloads received by the callback that have not been
 *  processed by a waiting execution step.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *availablePayloads;

/**
 *  Output only. The method accepted by the callback. For example: GET, POST,
 *  PUT.
 */
@property(nonatomic, copy, nullable) NSString *method;

/**
 *  Output only. The resource name of the callback. Format:
 *  projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}/callback/{callback}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Number of execution steps waiting on this callback.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *waiters;

@end


/**
 *  Request for the CancelExecution method.
 */
@interface GTLRWorkflowExecutions_CancelExecutionRequest : GTLRObject
@end


/**
 *  Request for the DeleteExecutionHistory method.
 */
@interface GTLRWorkflowExecutions_DeleteExecutionHistoryRequest : GTLRObject
@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRWorkflowExecutions_Empty : GTLRObject
@end


/**
 *  Error describes why the execution was abnormally terminated.
 */
@interface GTLRWorkflowExecutions_Error : GTLRObject

/** Human-readable stack trace string. */
@property(nonatomic, copy, nullable) NSString *context;

/** Error message and data returned represented as a JSON string. */
@property(nonatomic, copy, nullable) NSString *payload;

/** Stack trace with detailed information of where error was generated. */
@property(nonatomic, strong, nullable) GTLRWorkflowExecutions_StackTrace *stackTrace;

@end


/**
 *  Exception describes why the step entry failed.
 */
@interface GTLRWorkflowExecutions_Exception : GTLRObject

/** Error message represented as a JSON string. */
@property(nonatomic, copy, nullable) NSString *payload;

@end


/**
 *  A running instance of a
 *  [Workflow](/workflows/docs/reference/rest/v1/projects.locations.workflows).
 */
@interface GTLRWorkflowExecutions_Execution : GTLRObject

/**
 *  Input parameters of the execution represented as a JSON string. The size
 *  limit is 32KB. *Note*: If you are using the REST API directly to run your
 *  workflow, you must escape any JSON string value of `argument`. Example:
 *  `'{"argument":"{\\"firstName\\":\\"FIRST\\",\\"lastName\\":\\"LAST\\"}"}'`
 */
@property(nonatomic, copy, nullable) NSString *argument;

/**
 *  The call logging level associated to this execution.
 *
 *  Likely values:
 *    @arg @c kGTLRWorkflowExecutions_Execution_CallLogLevel_CallLogLevelUnspecified
 *        No call logging level specified. (Value: "CALL_LOG_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRWorkflowExecutions_Execution_CallLogLevel_LogAllCalls Log all
 *        call steps within workflows, all call returns, and all exceptions
 *        raised. (Value: "LOG_ALL_CALLS")
 *    @arg @c kGTLRWorkflowExecutions_Execution_CallLogLevel_LogErrorsOnly Log
 *        only exceptions that are raised from call steps within workflows.
 *        (Value: "LOG_ERRORS_ONLY")
 *    @arg @c kGTLRWorkflowExecutions_Execution_CallLogLevel_LogNone Explicitly
 *        log nothing. (Value: "LOG_NONE")
 */
@property(nonatomic, copy, nullable) NSString *callLogLevel;

/** Output only. Marks the creation of the execution. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. If set to true, the execution will not be backlogged when the
 *  concurrency quota is exhausted. The backlog execution starts when the
 *  concurrency quota becomes available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableConcurrencyQuotaOverflowBuffering;

/** Output only. Measures the duration of the execution. */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/** Output only. Marks the end of execution, successful or not. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. The error which caused the execution to finish prematurely. The
 *  value is only present if the execution's state is `FAILED` or `CANCELLED`.
 */
@property(nonatomic, strong, nullable) GTLRWorkflowExecutions_Error *error;

/**
 *  Optional. Describes the level of the execution history feature to apply to
 *  this execution. If not specified, the level of the execution history feature
 *  will be determined by its workflow's execution history level. If the value
 *  is different from its workflow's value, it will override the workflow's
 *  execution history level for this exeuction.
 *
 *  Likely values:
 *    @arg @c kGTLRWorkflowExecutions_Execution_ExecutionHistoryLevel_ExecutionHistoryBasic
 *        Enable execution history basic feature for this execution. (Value:
 *        "EXECUTION_HISTORY_BASIC")
 *    @arg @c kGTLRWorkflowExecutions_Execution_ExecutionHistoryLevel_ExecutionHistoryDetailed
 *        Enable execution history detailed feature for this execution. (Value:
 *        "EXECUTION_HISTORY_DETAILED")
 *    @arg @c kGTLRWorkflowExecutions_Execution_ExecutionHistoryLevel_ExecutionHistoryLevelUnspecified
 *        The default/unset value. (Value:
 *        "EXECUTION_HISTORY_LEVEL_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *executionHistoryLevel;

/**
 *  Labels associated with this execution. Labels can contain at most 64
 *  entries. Keys and values can be no longer than 63 characters and can only
 *  contain lowercase letters, numeric characters, underscores, and dashes.
 *  Label keys must start with a letter. International characters are allowed.
 *  By default, labels are inherited from the workflow but are overridden by any
 *  labels associated with the execution.
 */
@property(nonatomic, strong, nullable) GTLRWorkflowExecutions_Execution_Labels *labels;

/**
 *  Output only. The resource name of the execution. Format:
 *  projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Output of the execution represented as a JSON string. The value
 *  can only be present if the execution's state is `SUCCEEDED`.
 */
@property(nonatomic, copy, nullable) NSString *result;

/**
 *  Output only. Marks the beginning of execution. Note that this will be the
 *  same as `createTime` for executions that start immediately.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. Current state of the execution.
 *
 *  Likely values:
 *    @arg @c kGTLRWorkflowExecutions_Execution_State_Active The execution is in
 *        progress. (Value: "ACTIVE")
 *    @arg @c kGTLRWorkflowExecutions_Execution_State_Cancelled The execution
 *        was stopped intentionally. (Value: "CANCELLED")
 *    @arg @c kGTLRWorkflowExecutions_Execution_State_Failed The execution
 *        failed with an error. (Value: "FAILED")
 *    @arg @c kGTLRWorkflowExecutions_Execution_State_Queued Request has been
 *        placed in the backlog for processing at a later time. (Value:
 *        "QUEUED")
 *    @arg @c kGTLRWorkflowExecutions_Execution_State_StateUnspecified Invalid
 *        state. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRWorkflowExecutions_Execution_State_Succeeded The execution
 *        finished successfully. (Value: "SUCCEEDED")
 *    @arg @c kGTLRWorkflowExecutions_Execution_State_Unavailable Execution data
 *        is unavailable. See the `state_error` field. (Value: "UNAVAILABLE")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Error regarding the state of the Execution resource. For
 *  example, this field will have error details if the execution data is
 *  unavailable due to revoked KMS key permissions.
 */
@property(nonatomic, strong, nullable) GTLRWorkflowExecutions_StateError *stateError;

/**
 *  Output only. Status tracks the current steps and progress data of this
 *  execution.
 */
@property(nonatomic, strong, nullable) GTLRWorkflowExecutions_Status *status;

/** Output only. Revision of the workflow this execution is using. */
@property(nonatomic, copy, nullable) NSString *workflowRevisionId;

@end


/**
 *  Labels associated with this execution. Labels can contain at most 64
 *  entries. Keys and values can be no longer than 63 characters and can only
 *  contain lowercase letters, numeric characters, underscores, and dashes.
 *  Label keys must start with a letter. International characters are allowed.
 *  By default, labels are inherited from the workflow but are overridden by any
 *  labels associated with the execution.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRWorkflowExecutions_Execution_Labels : GTLRObject
@end


/**
 *  Response for the ExportData method.
 */
@interface GTLRWorkflowExecutions_ExportDataResponse : GTLRObject

/**
 *  The JSON string with customer data and metadata for an execution with the
 *  given name
 */
@property(nonatomic, copy, nullable) NSString *data;

@end


/**
 *  RPC response object for the ListCallbacks method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "callbacks" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRWorkflowExecutions_ListCallbacksResponse : GTLRCollectionObject

/**
 *  The callbacks which match the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWorkflowExecutions_Callback *> *callbacks;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response for the ListExecutions method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "executions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRWorkflowExecutions_ListExecutionsResponse : GTLRCollectionObject

/**
 *  The executions which match the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWorkflowExecutions_Execution *> *executions;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for ExecutionHistory.ListStepEntries.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "stepEntries" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRWorkflowExecutions_ListStepEntriesResponse : GTLRCollectionObject

/**
 *  A token to retrieve next page of results. Pass this value in the
 *  ListStepEntriesRequest.page_token field in the subsequent call to
 *  `ListStepEntries` method to retrieve the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of entries.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWorkflowExecutions_StepEntry *> *stepEntries;

/**
 *  Indicates the total number of StepEntries that matched the request filter.
 *  For running executions, this number shows the number of StepEntries that are
 *  executed thus far.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  NavigationInfo describes what steps if any come before or after this step,
 *  or what steps are parents or children of this step.
 */
@interface GTLRWorkflowExecutions_NavigationInfo : GTLRObject

/**
 *  Step entries that can be reached by "stepping into" e.g. a subworkflow call.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *children;

/**
 *  The index of the next step in the current workflow, if any.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *next;

/**
 *  The step entry, if any, that can be reached by "stepping out" of the current
 *  workflow being executed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *parent;

/**
 *  The index of the previous step in the current workflow, if any.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *previous;

@end


/**
 *  Position contains source position information about the stack trace element
 *  such as line number, column number and length of the code block in bytes.
 */
@interface GTLRWorkflowExecutions_Position : GTLRObject

/**
 *  The source code column position (of the line) the current instruction was
 *  generated from.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *column;

/**
 *  The number of bytes of source code making up this stack trace element.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/**
 *  The source code line number the current instruction was generated from.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *line;

@end


/**
 *  A message that is published by publishers and consumed by subscribers. The
 *  message must contain either a non-empty data field or at least one
 *  attribute. Note that client libraries represent this object differently
 *  depending on the language. See the corresponding [client library
 *  documentation](https://cloud.google.com/pubsub/docs/reference/libraries) for
 *  more information. See [quotas and limits]
 *  (https://cloud.google.com/pubsub/quotas) for more information about message
 *  limits.
 */
@interface GTLRWorkflowExecutions_PubsubMessage : GTLRObject

/**
 *  Optional. Attributes for this message. If this field is empty, the message
 *  must contain non-empty data. This can be used to filter messages on the
 *  subscription.
 */
@property(nonatomic, strong, nullable) GTLRWorkflowExecutions_PubsubMessage_Attributes *attributes;

/**
 *  Optional. The message data field. If this field is empty, the message must
 *  contain at least one attribute.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  ID of this message, assigned by the server when the message is published.
 *  Guaranteed to be unique within the topic. This value may be read by a
 *  subscriber that receives a `PubsubMessage` via a `Pull` call or a push
 *  delivery. It must not be populated by the publisher in a `Publish` call.
 */
@property(nonatomic, copy, nullable) NSString *messageId;

/**
 *  Optional. If non-empty, identifies related messages for which publish order
 *  should be respected. If a `Subscription` has `enable_message_ordering` set
 *  to `true`, messages published with the same non-empty `ordering_key` value
 *  will be delivered to subscribers in the order in which they are received by
 *  the Pub/Sub system. All `PubsubMessage`s published in a given
 *  `PublishRequest` must specify the same `ordering_key` value. For more
 *  information, see [ordering
 *  messages](https://cloud.google.com/pubsub/docs/ordering).
 */
@property(nonatomic, copy, nullable) NSString *orderingKey;

/**
 *  The time at which the message was published, populated by the server when it
 *  receives the `Publish` call. It must not be populated by the publisher in a
 *  `Publish` call.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishTime;

@end


/**
 *  Optional. Attributes for this message. If this field is empty, the message
 *  must contain non-empty data. This can be used to filter messages on the
 *  subscription.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRWorkflowExecutions_PubsubMessage_Attributes : GTLRObject
@end


/**
 *  A collection of stack elements (frames) where an error occurred.
 */
@interface GTLRWorkflowExecutions_StackTrace : GTLRObject

/** An array of stack elements. */
@property(nonatomic, strong, nullable) NSArray<GTLRWorkflowExecutions_StackTraceElement *> *elements;

@end


/**
 *  A single stack element (frame) where an error occurred.
 */
@interface GTLRWorkflowExecutions_StackTraceElement : GTLRObject

/** The source position information of the stack trace element. */
@property(nonatomic, strong, nullable) GTLRWorkflowExecutions_Position *position;

/** The routine where the error occurred. */
@property(nonatomic, copy, nullable) NSString *routine;

/** The step the error occurred at. */
@property(nonatomic, copy, nullable) NSString *step;

@end


/**
 *  Describes an error related to the current state of the Execution resource.
 */
@interface GTLRWorkflowExecutions_StateError : GTLRObject

/** Provides specifics about the error. */
@property(nonatomic, copy, nullable) NSString *details;

/**
 *  The type of this state error.
 *
 *  Likely values:
 *    @arg @c kGTLRWorkflowExecutions_StateError_Type_KmsError Caused by an
 *        issue with KMS. (Value: "KMS_ERROR")
 *    @arg @c kGTLRWorkflowExecutions_StateError_Type_TypeUnspecified No type
 *        specified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents the current status of this execution.
 */
@interface GTLRWorkflowExecutions_Status : GTLRObject

/**
 *  A list of currently executing or last executed step names for the workflow
 *  execution currently running. If the workflow has succeeded or failed, this
 *  is the last attempted or executed step. Presently, if the current step is
 *  inside a subworkflow, the list only includes that step. In the future, the
 *  list will contain items for each step in the call stack, starting with the
 *  outermost step in the `main` subworkflow, and ending with the most deeply
 *  nested step.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWorkflowExecutions_Step *> *currentSteps;

@end


/**
 *  Represents a step of the workflow this execution is running.
 */
@interface GTLRWorkflowExecutions_Step : GTLRObject

/** Name of a routine within the workflow. */
@property(nonatomic, copy, nullable) NSString *routine;

/** Name of a step within the routine. */
@property(nonatomic, copy, nullable) NSString *step;

@end


/**
 *  An StepEntry contains debugging information for a step transition in a
 *  workflow execution.
 */
@interface GTLRWorkflowExecutions_StepEntry : GTLRObject

/** Output only. The creation time of the step entry. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The numeric ID of this step entry, used for navigation.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *entryId;

/** Output only. The exception thrown by the step entry. */
@property(nonatomic, strong, nullable) GTLRWorkflowExecutions_Exception *exception;

/**
 *  Output only. The full resource name of the step entry. Each step entry has a
 *  unique entry ID, which is a monotonically increasing counter. Step entry
 *  names have the format:
 *  `projects/{project}/locations/{location}/workflows/{workflow}/executions/{execution}/stepEntries/{step_entry}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The NavigationInfo associated to this step. */
@property(nonatomic, strong, nullable) GTLRWorkflowExecutions_NavigationInfo *navigationInfo;

/**
 *  Output only. The name of the routine this step entry belongs to. A routine
 *  name is the subworkflow name defined in the YAML source code. The top level
 *  routine name is `main`.
 */
@property(nonatomic, copy, nullable) NSString *routine;

/**
 *  Output only. The state of the step entry.
 *
 *  Likely values:
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_State_StateCancelled The step
 *        entry is cancelled. (Value: "STATE_CANCELLED")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_State_StateFailed The step entry
 *        failed with an error. (Value: "STATE_FAILED")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_State_StateInProgress The step
 *        entry is in progress. (Value: "STATE_IN_PROGRESS")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_State_StateSucceeded The step
 *        entry finished successfully. (Value: "STATE_SUCCEEDED")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_State_StateUnspecified Invalid
 *        state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The name of the step this step entry belongs to. */
@property(nonatomic, copy, nullable) NSString *step;

/** Output only. The StepEntryMetadata associated to this step. */
@property(nonatomic, strong, nullable) GTLRWorkflowExecutions_StepEntryMetadata *stepEntryMetadata;

/**
 *  Output only. The type of the step this step entry belongs to.
 *
 *  Likely values:
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepAssign The step
 *        entry assigns new variable(s). (Value: "STEP_ASSIGN")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepCall The step entry
 *        calls a subworkflow/stdlib. (Value: "STEP_CALL")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepCondition The step
 *        entry executes a condition inside a switch. (Value: "STEP_CONDITION")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepConnectorCall The
 *        step entry calls a connector. (Value: "STEP_CONNECTOR_CALL")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepExcept The step
 *        entry executes the except part of a try/retry/except block. (Value:
 *        "STEP_EXCEPT")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepFor The step entry
 *        executes a for loop. (Value: "STEP_FOR")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepForIteration The
 *        step entry executes a iteration of a for loop. (Value:
 *        "STEP_FOR_ITERATION")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepGoto The step entry
 *        jumps to another step. (Value: "STEP_GOTO")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepParallelBranch The
 *        step entry executes a series of parallel branch(es). (Value:
 *        "STEP_PARALLEL_BRANCH")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepParallelBranchEntry
 *        The step entry executes a branch of a parallel branch. (Value:
 *        "STEP_PARALLEL_BRANCH_ENTRY")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepParallelFor The
 *        step entry executes a parallel for loop. (Value: "STEP_PARALLEL_FOR")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepRaise The step
 *        entry raises an error. (Value: "STEP_RAISE")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepRetry The step
 *        entry executes the retry part of a try/retry/except block. (Value:
 *        "STEP_RETRY")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepReturn The step
 *        entry returns. (Value: "STEP_RETURN")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepStdLibCall The step
 *        entry calls a standard library routine. (Value: "STEP_STD_LIB_CALL")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepSubworkflowCall The
 *        step entry calls a subworklfow. (Value: "STEP_SUBWORKFLOW_CALL")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepSwitch The step
 *        entry executes a switch-case block. (Value: "STEP_SWITCH")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepTry The step entry
 *        executes the try part of a try/retry/except block. (Value: "STEP_TRY")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepTryRetryExcept The
 *        step entry executes a try/retry/except block. (Value:
 *        "STEP_TRY_RETRY_EXCEPT")
 *    @arg @c kGTLRWorkflowExecutions_StepEntry_StepType_StepTypeUnspecified
 *        Invalid step type. (Value: "STEP_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *stepType;

/** Output only. The most recently updated time of the step entry. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** Output only. The VariableData associated to this step. */
@property(nonatomic, strong, nullable) GTLRWorkflowExecutions_VariableData *variableData;

@end


/**
 *  StepEntryMetadata contains metadata information about this step.
 */
@interface GTLRWorkflowExecutions_StepEntryMetadata : GTLRObject

/**
 *  Expected iteration represents the expected number of iterations in the
 *  step's progress.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expectedIteration;

/**
 *  Progress number represents the current state of the current progress. eg: A
 *  step entry represents the 4th iteration in a progress of PROGRESS_TYPE_FOR.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *progressNumber;

/**
 *  Progress type of this step entry.
 *
 *  Likely values:
 *    @arg @c kGTLRWorkflowExecutions_StepEntryMetadata_ProgressType_ProgressTypeFor
 *        Current step entry is in progress of a FOR step. (Value:
 *        "PROGRESS_TYPE_FOR")
 *    @arg @c kGTLRWorkflowExecutions_StepEntryMetadata_ProgressType_ProgressTypeParallelBranch
 *        Current step entry is in progress of a PARALLEL BRANCH step. (Value:
 *        "PROGRESS_TYPE_PARALLEL_BRANCH")
 *    @arg @c kGTLRWorkflowExecutions_StepEntryMetadata_ProgressType_ProgressTypeParallelFor
 *        Current step entry is in progress of a PARALLEL FOR step. (Value:
 *        "PROGRESS_TYPE_PARALLEL_FOR")
 *    @arg @c kGTLRWorkflowExecutions_StepEntryMetadata_ProgressType_ProgressTypeRetry
 *        Current step entry is in progress of a RETRY step. (Value:
 *        "PROGRESS_TYPE_RETRY")
 *    @arg @c kGTLRWorkflowExecutions_StepEntryMetadata_ProgressType_ProgressTypeSwitch
 *        Current step entry is in progress of a SWITCH step. (Value:
 *        "PROGRESS_TYPE_SWITCH")
 *    @arg @c kGTLRWorkflowExecutions_StepEntryMetadata_ProgressType_ProgressTypeUnspecified
 *        Current step entry does not have any progress data. (Value:
 *        "PROGRESS_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *progressType;

/** Child thread id that this step entry belongs to. */
@property(nonatomic, copy, nullable) NSString *threadId;

@end


/**
 *  Request for the TriggerPubsubExecution method.
 */
@interface GTLRWorkflowExecutions_TriggerPubsubExecutionRequest : GTLRObject

/**
 *  The number of attempts that have been made to deliver this message. This is
 *  set by Pub/Sub for subscriptions that have the "dead letter" feature
 *  enabled, and hence provided here for compatibility, but is ignored by
 *  Workflows.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deliveryAttempt;

/**
 *  Required. LINT: LEGACY_NAMES The query parameter value for
 *  __GCP_CloudEventsMode, set by the Eventarc service when configuring
 *  triggers.
 */
@property(nonatomic, copy, nullable) NSString *GCPCloudEventsMode;

/** Required. The message of the Pub/Sub push notification. */
@property(nonatomic, strong, nullable) GTLRWorkflowExecutions_PubsubMessage *message;

/**
 *  Required. The subscription of the Pub/Sub push notification. Format:
 *  projects/{project}/subscriptions/{sub}
 */
@property(nonatomic, copy, nullable) NSString *subscription;

@end


/**
 *  VariableData contains the variable data for this step.
 */
@interface GTLRWorkflowExecutions_VariableData : GTLRObject

/** Variables that are associated with this step. */
@property(nonatomic, strong, nullable) GTLRWorkflowExecutions_VariableData_Variables *variables;

@end


/**
 *  Variables that are associated with this step.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRWorkflowExecutions_VariableData_Variables : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
