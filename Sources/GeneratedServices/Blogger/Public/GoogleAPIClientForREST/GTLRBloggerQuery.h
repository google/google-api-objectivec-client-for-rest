// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Blogger API (blogger/v3)
// Description:
//   The Blogger API provides access to posts, comments and pages of a Blogger
//   blog.
// Documentation:
//   https://developers.google.com/blogger/docs/3.0/getting_started

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRBloggerObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// orderBy

/** Value: "ORDER_BY_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerOrderByOrderByUnspecified;
/** Value: "PUBLISHED" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerOrderByPublished;
/** Value: "UPDATED" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerOrderByUpdated;

// ----------------------------------------------------------------------------
// range

/** Value: "all" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerRangeAll;
/** Value: "30DAYS" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerRangeX30days;
/** Value: "7DAYS" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerRangeX7days;

// ----------------------------------------------------------------------------
// role

/** Value: "ADMIN" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerRoleAdmin;
/** Value: "AUTHOR" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerRoleAuthor;
/** Value: "READER" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerRoleReader;
/** Value: "VIEW_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerRoleViewTypeUnspecified;

// ----------------------------------------------------------------------------
// status

/** Value: "DELETED" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerStatusDeleted;
/** Value: "DRAFT" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerStatusDraft;
/** Value: "EMPTIED" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerStatusEmptied;
/** Value: "LIVE" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerStatusLive;
/** Value: "PENDING" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerStatusPending;
/** Value: "SCHEDULED" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerStatusScheduled;
/** Value: "SOFT_TRASHED" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerStatusSoftTrashed;
/** Value: "SPAM" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerStatusSpam;

// ----------------------------------------------------------------------------
// view

/** Value: "ADMIN" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerViewAdmin;
/** Value: "AUTHOR" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerViewAuthor;
/** Value: "READER" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerViewReader;
/** Value: "VIEW_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRBloggerViewViewTypeUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Blogger query classes.
 */
@interface GTLRBloggerQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets a blog by id.
 *
 *  Method: blogger.blogs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_BlogsGet : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, assign) NSUInteger maxPosts;

/**
 *  view
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewViewTypeUnspecified Value "VIEW_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBloggerViewReader Value "READER"
 *    @arg @c kGTLRBloggerViewAuthor Value "AUTHOR"
 *    @arg @c kGTLRBloggerViewAdmin Value "ADMIN"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_Blog.
 *
 *  Gets a blog by id.
 *
 *  @param blogId NSString
 *
 *  @return GTLRBloggerQuery_BlogsGet
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId;

@end

/**
 *  Gets a blog by url.
 *
 *  Method: blogger.blogs.getByUrl
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_BlogsGetByUrl : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *url;

/**
 *  view
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewViewTypeUnspecified Value "VIEW_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBloggerViewReader Value "READER"
 *    @arg @c kGTLRBloggerViewAuthor Value "AUTHOR"
 *    @arg @c kGTLRBloggerViewAdmin Value "ADMIN"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_Blog.
 *
 *  Gets a blog by url.
 *
 *  @param url NSString
 *
 *  @return GTLRBloggerQuery_BlogsGetByUrl
 */
+ (instancetype)queryWithUrl:(NSString *)url;

@end

/**
 *  Lists blogs by user.
 *
 *  Method: blogger.blogs.listByUser
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_BlogsListByUser : GTLRBloggerQuery

@property(nonatomic, assign) BOOL fetchUserInfo;

/**
 *  role
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerRoleViewTypeUnspecified Value "VIEW_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBloggerRoleReader Value "READER"
 *    @arg @c kGTLRBloggerRoleAuthor Value "AUTHOR"
 *    @arg @c kGTLRBloggerRoleAdmin Value "ADMIN"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *role;

/**
 *  Default value of status is LIVE.
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerStatusLive Value "LIVE"
 *    @arg @c kGTLRBloggerStatusDeleted Value "DELETED"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRBloggerStatusLive.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *status;

@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  view
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewViewTypeUnspecified Value "VIEW_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBloggerViewReader Value "READER"
 *    @arg @c kGTLRBloggerViewAuthor Value "AUTHOR"
 *    @arg @c kGTLRBloggerViewAdmin Value "ADMIN"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_BlogList.
 *
 *  Lists blogs by user.
 *
 *  @param userId NSString
 *
 *  @return GTLRBloggerQuery_BlogsListByUser
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

/**
 *  Gets one blog and user info pair by blog id and user id.
 *
 *  Method: blogger.blogUserInfos.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_BlogUserInfosGet : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, assign) NSUInteger maxPosts;

@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRBlogger_BlogUserInfo.
 *
 *  Gets one blog and user info pair by blog id and user id.
 *
 *  @param userId NSString
 *  @param blogId NSString
 *
 *  @return GTLRBloggerQuery_BlogUserInfosGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                         blogId:(NSString *)blogId;

@end

/**
 *  Marks a comment as not spam by blog id, post id and comment id.
 *
 *  Method: blogger.comments.approve
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_CommentsApprove : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *commentId;

@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Fetches a @c GTLRBlogger_Comment.
 *
 *  Marks a comment as not spam by blog id, post id and comment id.
 *
 *  @param blogId NSString
 *  @param postId NSString
 *  @param commentId NSString
 *
 *  @return GTLRBloggerQuery_CommentsApprove
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId
                      commentId:(NSString *)commentId;

@end

/**
 *  Deletes a comment by blog id, post id and comment id.
 *
 *  Method: blogger.comments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_CommentsDelete : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *commentId;

@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a comment by blog id, post id and comment id.
 *
 *  @param blogId NSString
 *  @param postId NSString
 *  @param commentId NSString
 *
 *  @return GTLRBloggerQuery_CommentsDelete
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId
                      commentId:(NSString *)commentId;

@end

/**
 *  Gets a comment by id.
 *
 *  Method: blogger.comments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_CommentsGet : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *commentId;

@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  view
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewViewTypeUnspecified Value "VIEW_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBloggerViewReader Value "READER"
 *    @arg @c kGTLRBloggerViewAuthor Value "AUTHOR"
 *    @arg @c kGTLRBloggerViewAdmin Value "ADMIN"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_Comment.
 *
 *  Gets a comment by id.
 *
 *  @param blogId NSString
 *  @param postId NSString
 *  @param commentId NSString
 *
 *  @return GTLRBloggerQuery_CommentsGet
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId
                      commentId:(NSString *)commentId;

@end

/**
 *  Lists comments.
 *
 *  Method: blogger.comments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_CommentsList : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *endDate;

@property(nonatomic, assign) BOOL fetchBodies;

@property(nonatomic, assign) NSUInteger maxResults;

@property(nonatomic, copy, nullable) NSString *pageToken;

@property(nonatomic, copy, nullable) NSString *postId;

@property(nonatomic, copy, nullable) NSString *startDate;

/**
 *  status
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerStatusLive Value "LIVE"
 *    @arg @c kGTLRBloggerStatusEmptied Value "EMPTIED"
 *    @arg @c kGTLRBloggerStatusPending Value "PENDING"
 *    @arg @c kGTLRBloggerStatusSpam Value "SPAM"
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  view
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewViewTypeUnspecified Value "VIEW_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBloggerViewReader Value "READER"
 *    @arg @c kGTLRBloggerViewAuthor Value "AUTHOR"
 *    @arg @c kGTLRBloggerViewAdmin Value "ADMIN"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_CommentList.
 *
 *  Lists comments.
 *
 *  @param blogId NSString
 *  @param postId NSString
 *
 *  @return GTLRBloggerQuery_CommentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId;

@end

/**
 *  Lists comments by blog.
 *
 *  Method: blogger.comments.listByBlog
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_CommentsListByBlog : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *endDate;

@property(nonatomic, assign) BOOL fetchBodies;

@property(nonatomic, assign) NSUInteger maxResults;

@property(nonatomic, copy, nullable) NSString *pageToken;

@property(nonatomic, copy, nullable) NSString *startDate;

/**
 *  status
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerStatusLive Value "LIVE"
 *    @arg @c kGTLRBloggerStatusEmptied Value "EMPTIED"
 *    @arg @c kGTLRBloggerStatusPending Value "PENDING"
 *    @arg @c kGTLRBloggerStatusSpam Value "SPAM"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *status;

/**
 *  Fetches a @c GTLRBlogger_CommentList.
 *
 *  Lists comments by blog.
 *
 *  @param blogId NSString
 *
 *  @return GTLRBloggerQuery_CommentsListByBlog
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId;

@end

/**
 *  Marks a comment as spam by blog id, post id and comment id.
 *
 *  Method: blogger.comments.markAsSpam
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_CommentsMarkAsSpam : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *commentId;

@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Fetches a @c GTLRBlogger_Comment.
 *
 *  Marks a comment as spam by blog id, post id and comment id.
 *
 *  @param blogId NSString
 *  @param postId NSString
 *  @param commentId NSString
 *
 *  @return GTLRBloggerQuery_CommentsMarkAsSpam
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId
                      commentId:(NSString *)commentId;

@end

/**
 *  Removes the content of a comment by blog id, post id and comment id.
 *
 *  Method: blogger.comments.removeContent
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_CommentsRemoveContent : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *commentId;

@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Fetches a @c GTLRBlogger_Comment.
 *
 *  Removes the content of a comment by blog id, post id and comment id.
 *
 *  @param blogId NSString
 *  @param postId NSString
 *  @param commentId NSString
 *
 *  @return GTLRBloggerQuery_CommentsRemoveContent
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId
                      commentId:(NSString *)commentId;

@end

/**
 *  Deletes a page by blog id and page id.
 *
 *  Method: blogger.pages.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PagesDelete : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a page by blog id and page id.
 *
 *  @param blogId NSString
 *  @param pageId NSString
 *
 *  @return GTLRBloggerQuery_PagesDelete
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         pageId:(NSString *)pageId;

@end

/**
 *  Gets a page by blog id and page id.
 *
 *  Method: blogger.pages.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_PagesGet : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  view
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewViewTypeUnspecified Value "VIEW_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBloggerViewReader Value "READER"
 *    @arg @c kGTLRBloggerViewAuthor Value "AUTHOR"
 *    @arg @c kGTLRBloggerViewAdmin Value "ADMIN"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_Page.
 *
 *  Gets a page by blog id and page id.
 *
 *  @param blogId NSString
 *  @param pageId NSString
 *
 *  @return GTLRBloggerQuery_PagesGet
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         pageId:(NSString *)pageId;

@end

/**
 *  Inserts a page.
 *
 *  Method: blogger.pages.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PagesInsert : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, assign) BOOL isDraft;

/**
 *  Fetches a @c GTLRBlogger_Page.
 *
 *  Inserts a page.
 *
 *  @param object The @c GTLRBlogger_Page to include in the query.
 *  @param blogId NSString
 *
 *  @return GTLRBloggerQuery_PagesInsert
 */
+ (instancetype)queryWithObject:(GTLRBlogger_Page *)object
                         blogId:(NSString *)blogId;

@end

/**
 *  Lists pages.
 *
 *  Method: blogger.pages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_PagesList : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, assign) BOOL fetchBodies;

@property(nonatomic, assign) NSUInteger maxResults;

@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  status
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerStatusLive Value "LIVE"
 *    @arg @c kGTLRBloggerStatusDraft Value "DRAFT"
 *    @arg @c kGTLRBloggerStatusSoftTrashed Value "SOFT_TRASHED"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *status;

/**
 *  view
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewViewTypeUnspecified Value "VIEW_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBloggerViewReader Value "READER"
 *    @arg @c kGTLRBloggerViewAuthor Value "AUTHOR"
 *    @arg @c kGTLRBloggerViewAdmin Value "ADMIN"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_PageList.
 *
 *  Lists pages.
 *
 *  @param blogId NSString
 *
 *  @return GTLRBloggerQuery_PagesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId;

@end

/**
 *  Patches a page.
 *
 *  Method: blogger.pages.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PagesPatch : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *pageId;

@property(nonatomic, assign) BOOL publish;

@property(nonatomic, assign) BOOL revert;

/**
 *  Fetches a @c GTLRBlogger_Page.
 *
 *  Patches a page.
 *
 *  @param object The @c GTLRBlogger_Page to include in the query.
 *  @param blogId NSString
 *  @param pageId NSString
 *
 *  @return GTLRBloggerQuery_PagesPatch
 */
+ (instancetype)queryWithObject:(GTLRBlogger_Page *)object
                         blogId:(NSString *)blogId
                         pageId:(NSString *)pageId;

@end

/**
 *  Publishes a page.
 *
 *  Method: blogger.pages.publish
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PagesPublish : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRBlogger_Page.
 *
 *  Publishes a page.
 *
 *  @param blogId NSString
 *  @param pageId NSString
 *
 *  @return GTLRBloggerQuery_PagesPublish
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         pageId:(NSString *)pageId;

@end

/**
 *  Reverts a published or scheduled page to draft state.
 *
 *  Method: blogger.pages.revert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PagesRevert : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *pageId;

/**
 *  Fetches a @c GTLRBlogger_Page.
 *
 *  Reverts a published or scheduled page to draft state.
 *
 *  @param blogId NSString
 *  @param pageId NSString
 *
 *  @return GTLRBloggerQuery_PagesRevert
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         pageId:(NSString *)pageId;

@end

/**
 *  Updates a page by blog id and page id.
 *
 *  Method: blogger.pages.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PagesUpdate : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *pageId;

@property(nonatomic, assign) BOOL publish;

@property(nonatomic, assign) BOOL revert;

/**
 *  Fetches a @c GTLRBlogger_Page.
 *
 *  Updates a page by blog id and page id.
 *
 *  @param object The @c GTLRBlogger_Page to include in the query.
 *  @param blogId NSString
 *  @param pageId NSString
 *
 *  @return GTLRBloggerQuery_PagesUpdate
 */
+ (instancetype)queryWithObject:(GTLRBlogger_Page *)object
                         blogId:(NSString *)blogId
                         pageId:(NSString *)pageId;

@end

/**
 *  Gets page views by blog id.
 *
 *  Method: blogger.pageViews.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PageViewsGet : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

/**
 *  range
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerRangeAll Value "all"
 *    @arg @c kGTLRBloggerRangeX30days Value "30DAYS"
 *    @arg @c kGTLRBloggerRangeX7days Value "7DAYS"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *range;

/**
 *  Fetches a @c GTLRBlogger_Pageviews.
 *
 *  Gets page views by blog id.
 *
 *  @param blogId NSString
 *
 *  @return GTLRBloggerQuery_PageViewsGet
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId;

@end

/**
 *  Deletes a post by blog id and post id.
 *
 *  Method: blogger.posts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PostsDelete : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a post by blog id and post id.
 *
 *  @param blogId NSString
 *  @param postId NSString
 *
 *  @return GTLRBloggerQuery_PostsDelete
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId;

@end

/**
 *  Gets a post by blog id and post id
 *
 *  Method: blogger.posts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_PostsGet : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

/**
 *  fetchBody
 *
 *  @note If not set, the documented server-side default will be true.
 */
@property(nonatomic, assign) BOOL fetchBody;

@property(nonatomic, assign) BOOL fetchImages;

@property(nonatomic, assign) NSUInteger maxComments;

@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  view
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewViewTypeUnspecified Value "VIEW_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBloggerViewReader Value "READER"
 *    @arg @c kGTLRBloggerViewAuthor Value "AUTHOR"
 *    @arg @c kGTLRBloggerViewAdmin Value "ADMIN"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_Post.
 *
 *  Gets a post by blog id and post id
 *
 *  @param blogId NSString
 *  @param postId NSString
 *
 *  @return GTLRBloggerQuery_PostsGet
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId;

@end

/**
 *  Gets a post by path.
 *
 *  Method: blogger.posts.getByPath
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_PostsGetByPath : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, assign) NSUInteger maxComments;

@property(nonatomic, copy, nullable) NSString *path;

/**
 *  view
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewViewTypeUnspecified Value "VIEW_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBloggerViewReader Value "READER"
 *    @arg @c kGTLRBloggerViewAuthor Value "AUTHOR"
 *    @arg @c kGTLRBloggerViewAdmin Value "ADMIN"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_Post.
 *
 *  Gets a post by path.
 *
 *  @param blogId NSString
 *  @param path NSString
 *
 *  @return GTLRBloggerQuery_PostsGetByPath
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                           path:(NSString *)path;

@end

/**
 *  Inserts a post.
 *
 *  Method: blogger.posts.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PostsInsert : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

/**
 *  fetchBody
 *
 *  @note If not set, the documented server-side default will be true.
 */
@property(nonatomic, assign) BOOL fetchBody;

@property(nonatomic, assign) BOOL fetchImages;

@property(nonatomic, assign) BOOL isDraft;

/**
 *  Fetches a @c GTLRBlogger_Post.
 *
 *  Inserts a post.
 *
 *  @param object The @c GTLRBlogger_Post to include in the query.
 *  @param blogId NSString
 *
 *  @return GTLRBloggerQuery_PostsInsert
 */
+ (instancetype)queryWithObject:(GTLRBlogger_Post *)object
                         blogId:(NSString *)blogId;

@end

/**
 *  Lists posts.
 *
 *  Method: blogger.posts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_PostsList : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *endDate;

/**
 *  fetchBodies
 *
 *  @note If not set, the documented server-side default will be true.
 */
@property(nonatomic, assign) BOOL fetchBodies;

@property(nonatomic, assign) BOOL fetchImages;

@property(nonatomic, copy, nullable) NSString *labels;

@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  orderBy
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerOrderByOrderByUnspecified Value "ORDER_BY_UNSPECIFIED"
 *    @arg @c kGTLRBloggerOrderByPublished Value "PUBLISHED"
 *    @arg @c kGTLRBloggerOrderByUpdated Value "UPDATED"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRBloggerOrderByPublished.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

@property(nonatomic, copy, nullable) NSString *pageToken;

@property(nonatomic, copy, nullable) NSString *startDate;

/**
 *  status
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerStatusLive Value "LIVE"
 *    @arg @c kGTLRBloggerStatusDraft Value "DRAFT"
 *    @arg @c kGTLRBloggerStatusScheduled Value "SCHEDULED"
 *    @arg @c kGTLRBloggerStatusSoftTrashed Value "SOFT_TRASHED"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *status;

/**
 *  view
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewViewTypeUnspecified Value "VIEW_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBloggerViewReader Value "READER"
 *    @arg @c kGTLRBloggerViewAuthor Value "AUTHOR"
 *    @arg @c kGTLRBloggerViewAdmin Value "ADMIN"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_PostList.
 *
 *  Lists posts.
 *
 *  @param blogId NSString
 *
 *  @return GTLRBloggerQuery_PostsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId;

@end

/**
 *  Patches a post.
 *
 *  Method: blogger.posts.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PostsPatch : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

/**
 *  fetchBody
 *
 *  @note If not set, the documented server-side default will be true.
 */
@property(nonatomic, assign) BOOL fetchBody;

@property(nonatomic, assign) BOOL fetchImages;

@property(nonatomic, assign) NSUInteger maxComments;

@property(nonatomic, copy, nullable) NSString *postId;

@property(nonatomic, assign) BOOL publish;

@property(nonatomic, assign) BOOL revert;

/**
 *  Fetches a @c GTLRBlogger_Post.
 *
 *  Patches a post.
 *
 *  @param object The @c GTLRBlogger_Post to include in the query.
 *  @param blogId NSString
 *  @param postId NSString
 *
 *  @return GTLRBloggerQuery_PostsPatch
 */
+ (instancetype)queryWithObject:(GTLRBlogger_Post *)object
                         blogId:(NSString *)blogId
                         postId:(NSString *)postId;

@end

/**
 *  Publishes a post.
 *
 *  Method: blogger.posts.publish
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PostsPublish : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *postId;

@property(nonatomic, copy, nullable) NSString *publishDate;

/**
 *  Fetches a @c GTLRBlogger_Post.
 *
 *  Publishes a post.
 *
 *  @param blogId NSString
 *  @param postId NSString
 *
 *  @return GTLRBloggerQuery_PostsPublish
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId;

@end

/**
 *  Reverts a published or scheduled post to draft state.
 *
 *  Method: blogger.posts.revert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PostsRevert : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *postId;

/**
 *  Fetches a @c GTLRBlogger_Post.
 *
 *  Reverts a published or scheduled post to draft state.
 *
 *  @param blogId NSString
 *  @param postId NSString
 *
 *  @return GTLRBloggerQuery_PostsRevert
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                         postId:(NSString *)postId;

@end

/**
 *  Searches for posts matching given query terms in the specified blog.
 *
 *  Method: blogger.posts.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_PostsSearch : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

/**
 *  fetchBodies
 *
 *  @note If not set, the documented server-side default will be true.
 */
@property(nonatomic, assign) BOOL fetchBodies;

/**
 *  orderBy
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerOrderByOrderByUnspecified Value "ORDER_BY_UNSPECIFIED"
 *    @arg @c kGTLRBloggerOrderByPublished Value "PUBLISHED"
 *    @arg @c kGTLRBloggerOrderByUpdated Value "UPDATED"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRBloggerOrderByPublished.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

@property(nonatomic, copy, nullable) NSString *q;

/**
 *  Fetches a @c GTLRBlogger_PostList.
 *
 *  Searches for posts matching given query terms in the specified blog.
 *
 *  @param blogId NSString
 *  @param q NSString
 *
 *  @return GTLRBloggerQuery_PostsSearch
 */
+ (instancetype)queryWithBlogId:(NSString *)blogId
                              q:(NSString *)q;

@end

/**
 *  Updates a post by blog id and post id.
 *
 *  Method: blogger.posts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 */
@interface GTLRBloggerQuery_PostsUpdate : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

/**
 *  fetchBody
 *
 *  @note If not set, the documented server-side default will be true.
 */
@property(nonatomic, assign) BOOL fetchBody;

@property(nonatomic, assign) BOOL fetchImages;

@property(nonatomic, assign) NSUInteger maxComments;

@property(nonatomic, copy, nullable) NSString *postId;

@property(nonatomic, assign) BOOL publish;

@property(nonatomic, assign) BOOL revert;

/**
 *  Fetches a @c GTLRBlogger_Post.
 *
 *  Updates a post by blog id and post id.
 *
 *  @param object The @c GTLRBlogger_Post to include in the query.
 *  @param blogId NSString
 *  @param postId NSString
 *
 *  @return GTLRBloggerQuery_PostsUpdate
 */
+ (instancetype)queryWithObject:(GTLRBlogger_Post *)object
                         blogId:(NSString *)blogId
                         postId:(NSString *)postId;

@end

/**
 *  Gets one post and user info pair, by post_id and user_id.
 *
 *  Method: blogger.postUserInfos.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_PostUserInfosGet : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, assign) NSUInteger maxComments;

@property(nonatomic, copy, nullable) NSString *postId;

@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRBlogger_PostUserInfo.
 *
 *  Gets one post and user info pair, by post_id and user_id.
 *
 *  @param userId NSString
 *  @param blogId NSString
 *  @param postId NSString
 *
 *  @return GTLRBloggerQuery_PostUserInfosGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                         blogId:(NSString *)blogId
                         postId:(NSString *)postId;

@end

/**
 *  Lists post and user info pairs.
 *
 *  Method: blogger.postUserInfos.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_PostUserInfosList : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *blogId;

@property(nonatomic, copy, nullable) NSString *endDate;

/**
 *  fetchBodies
 *
 *  @note If not set, the documented server-side default will be false.
 */
@property(nonatomic, assign) BOOL fetchBodies;

@property(nonatomic, copy, nullable) NSString *labels;

@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  orderBy
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerOrderByOrderByUnspecified Value "ORDER_BY_UNSPECIFIED"
 *    @arg @c kGTLRBloggerOrderByPublished Value "PUBLISHED"
 *    @arg @c kGTLRBloggerOrderByUpdated Value "UPDATED"
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRBloggerOrderByPublished.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

@property(nonatomic, copy, nullable) NSString *pageToken;

@property(nonatomic, copy, nullable) NSString *startDate;

/**
 *  status
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerStatusLive Value "LIVE"
 *    @arg @c kGTLRBloggerStatusDraft Value "DRAFT"
 *    @arg @c kGTLRBloggerStatusScheduled Value "SCHEDULED"
 *    @arg @c kGTLRBloggerStatusSoftTrashed Value "SOFT_TRASHED"
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *status;

@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  view
 *
 *  Likely values:
 *    @arg @c kGTLRBloggerViewViewTypeUnspecified Value "VIEW_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRBloggerViewReader Value "READER"
 *    @arg @c kGTLRBloggerViewAuthor Value "AUTHOR"
 *    @arg @c kGTLRBloggerViewAdmin Value "ADMIN"
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBlogger_PostUserInfosList.
 *
 *  Lists post and user info pairs.
 *
 *  @param userId NSString
 *  @param blogId NSString
 *
 *  @return GTLRBloggerQuery_PostUserInfosList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserId:(NSString *)userId
                         blogId:(NSString *)blogId;

@end

/**
 *  Gets one user by user_id.
 *
 *  Method: blogger.users.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBlogger
 *    @c kGTLRAuthScopeBloggerReadonly
 */
@interface GTLRBloggerQuery_UsersGet : GTLRBloggerQuery

@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  Fetches a @c GTLRBlogger_User.
 *
 *  Gets one user by user_id.
 *
 *  @param userId NSString
 *
 *  @return GTLRBloggerQuery_UsersGet
 */
+ (instancetype)queryWithUserId:(NSString *)userId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
