// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Storage for Firebase API (firebasestorage/v1beta)
// Description:
//   The Cloud Storage for Firebase API enables programmatic management of Cloud
//   Storage buckets for use in Firebase projects
// Documentation:
//   https://firebase.google.com/docs/storage

#import <GoogleAPIClientForREST/GTLRFirebasestorageQuery.h>

@implementation GTLRFirebasestorageQuery

@dynamic fields;

@end

@implementation GTLRFirebasestorageQuery_ProjectsBucketsAddFirebase

@dynamic bucket;

+ (instancetype)queryWithObject:(GTLRFirebasestorage_AddFirebaseRequest *)object
                         bucket:(NSString *)bucket {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"v1beta/{+bucket}:addFirebase";
  GTLRFirebasestorageQuery_ProjectsBucketsAddFirebase *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.expectedObjectClass = [GTLRFirebasestorage_Bucket class];
  query.loggingName = @"firebasestorage.projects.buckets.addFirebase";
  return query;
}

@end

@implementation GTLRFirebasestorageQuery_ProjectsBucketsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRFirebasestorageQuery_ProjectsBucketsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRFirebasestorage_Bucket class];
  query.loggingName = @"firebasestorage.projects.buckets.get";
  return query;
}

@end

@implementation GTLRFirebasestorageQuery_ProjectsBucketsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1beta/{+parent}/buckets";
  GTLRFirebasestorageQuery_ProjectsBucketsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRFirebasestorage_ListBucketsResponse class];
  query.loggingName = @"firebasestorage.projects.buckets.list";
  return query;
}

@end

@implementation GTLRFirebasestorageQuery_ProjectsBucketsRemoveFirebase

@dynamic bucket;

+ (instancetype)queryWithObject:(GTLRFirebasestorage_RemoveFirebaseRequest *)object
                         bucket:(NSString *)bucket {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"bucket" ];
  NSString *pathURITemplate = @"v1beta/{+bucket}:removeFirebase";
  GTLRFirebasestorageQuery_ProjectsBucketsRemoveFirebase *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.bucket = bucket;
  query.expectedObjectClass = [GTLRFirebasestorage_Empty class];
  query.loggingName = @"firebasestorage.projects.buckets.removeFirebase";
  return query;
}

@end
