// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Storage for Firebase API (firebasestorage/v1beta)
// Description:
//   The Cloud Storage for Firebase API enables programmatic management of Cloud
//   Storage buckets for use in Firebase projects
// Documentation:
//   https://firebase.google.com/docs/storage

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRFirebasestorageObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Firebasestorage query classes.
 */
@interface GTLRFirebasestorageQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Links a Google Cloud Storage bucket to a Firebase project.
 *
 *  Method: firebasestorage.projects.buckets.addFirebase
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebasestorageCloudPlatform
 *    @c kGTLRAuthScopeFirebasestorageFirebase
 */
@interface GTLRFirebasestorageQuery_ProjectsBucketsAddFirebase : GTLRFirebasestorageQuery

/**
 *  Required. Resource name of the bucket, mirrors the ID of the underlying
 *  Google Cloud Storage bucket,
 *  `projects/{project_id_or_number}/buckets/{bucket_id}`.
 */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Fetches a @c GTLRFirebasestorage_Bucket.
 *
 *  Links a Google Cloud Storage bucket to a Firebase project.
 *
 *  @param object The @c GTLRFirebasestorage_AddFirebaseRequest to include in
 *    the query.
 *  @param bucket Required. Resource name of the bucket, mirrors the ID of the
 *    underlying Google Cloud Storage bucket,
 *    `projects/{project_id_or_number}/buckets/{bucket_id}`.
 *
 *  @return GTLRFirebasestorageQuery_ProjectsBucketsAddFirebase
 */
+ (instancetype)queryWithObject:(GTLRFirebasestorage_AddFirebaseRequest *)object
                         bucket:(NSString *)bucket;

@end

/**
 *  Gets a single linked storage bucket.
 *
 *  Method: firebasestorage.projects.buckets.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebasestorageCloudPlatform
 *    @c kGTLRAuthScopeFirebasestorageFirebase
 */
@interface GTLRFirebasestorageQuery_ProjectsBucketsGet : GTLRFirebasestorageQuery

/**
 *  Required. Resource name of the bucket, mirrors the ID of the underlying
 *  Google Cloud Storage bucket,
 *  `projects/{project_id_or_number}/buckets/{bucket_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebasestorage_Bucket.
 *
 *  Gets a single linked storage bucket.
 *
 *  @param name Required. Resource name of the bucket, mirrors the ID of the
 *    underlying Google Cloud Storage bucket,
 *    `projects/{project_id_or_number}/buckets/{bucket_id}`.
 *
 *  @return GTLRFirebasestorageQuery_ProjectsBucketsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists the linked storage buckets for a project.
 *
 *  Method: firebasestorage.projects.buckets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebasestorageCloudPlatform
 *    @c kGTLRAuthScopeFirebasestorageFirebase
 */
@interface GTLRFirebasestorageQuery_ProjectsBucketsList : GTLRFirebasestorageQuery

/**
 *  The maximum number of buckets to return. If not set, the server will use a
 *  reasonable default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListBuckets` call. Provide this to
 *  retrieve the subsequent page. When paginating, all other parameters provided
 *  to `ListBuckets` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Resource name of the parent Firebase project,
 *  `projects/{project_id_or_number}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebasestorage_ListBucketsResponse.
 *
 *  Lists the linked storage buckets for a project.
 *
 *  @param parent Required. Resource name of the parent Firebase project,
 *    `projects/{project_id_or_number}`.
 *
 *  @return GTLRFirebasestorageQuery_ProjectsBucketsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Unlinks a linked Google Cloud Storage bucket from a Firebase project.
 *
 *  Method: firebasestorage.projects.buckets.removeFirebase
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebasestorageCloudPlatform
 *    @c kGTLRAuthScopeFirebasestorageFirebase
 */
@interface GTLRFirebasestorageQuery_ProjectsBucketsRemoveFirebase : GTLRFirebasestorageQuery

/**
 *  Required. Resource name of the bucket, mirrors the ID of the underlying
 *  Google Cloud Storage bucket,
 *  `projects/{project_id_or_number}/buckets/{bucket_id}`.
 */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Fetches a @c GTLRFirebasestorage_Empty.
 *
 *  Unlinks a linked Google Cloud Storage bucket from a Firebase project.
 *
 *  @param object The @c GTLRFirebasestorage_RemoveFirebaseRequest to include in
 *    the query.
 *  @param bucket Required. Resource name of the bucket, mirrors the ID of the
 *    underlying Google Cloud Storage bucket,
 *    `projects/{project_id_or_number}/buckets/{bucket_id}`.
 *
 *  @return GTLRFirebasestorageQuery_ProjectsBucketsRemoveFirebase
 */
+ (instancetype)queryWithObject:(GTLRFirebasestorage_RemoveFirebaseRequest *)object
                         bucket:(NSString *)bucket;

@end

/**
 *  Creates a Spark tier-eligible Cloud Storage bucket and links it to your
 *  Firebase project. If the default bucket already exists, this method will
 *  re-link it to your Firebase project. See https://firebase.google.com/pricing
 *  for pricing details.
 *
 *  Method: firebasestorage.projects.defaultBucket.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebasestorageCloudPlatform
 *    @c kGTLRAuthScopeFirebasestorageFirebase
 */
@interface GTLRFirebasestorageQuery_ProjectsDefaultBucketCreate : GTLRFirebasestorageQuery

/**
 *  Required. The parent resource where the default bucket will be created,
 *  `projects/{project_id_or_number}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebasestorage_DefaultBucket.
 *
 *  Creates a Spark tier-eligible Cloud Storage bucket and links it to your
 *  Firebase project. If the default bucket already exists, this method will
 *  re-link it to your Firebase project. See https://firebase.google.com/pricing
 *  for pricing details.
 *
 *  @param object The @c GTLRFirebasestorage_DefaultBucket to include in the
 *    query.
 *  @param parent Required. The parent resource where the default bucket will be
 *    created, `projects/{project_id_or_number}`.
 *
 *  @return GTLRFirebasestorageQuery_ProjectsDefaultBucketCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebasestorage_DefaultBucket *)object
                         parent:(NSString *)parent;

@end

/**
 *  Unlinks and deletes the default bucket.
 *
 *  Method: firebasestorage.projects.deleteDefaultBucket
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebasestorageCloudPlatform
 *    @c kGTLRAuthScopeFirebasestorageFirebase
 */
@interface GTLRFirebasestorageQuery_ProjectsDeleteDefaultBucket : GTLRFirebasestorageQuery

/**
 *  Required. The name of the default bucket to delete,
 *  `projects/{project_id_or_number}/defaultBucket`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebasestorage_Empty.
 *
 *  Unlinks and deletes the default bucket.
 *
 *  @param name Required. The name of the default bucket to delete,
 *    `projects/{project_id_or_number}/defaultBucket`.
 *
 *  @return GTLRFirebasestorageQuery_ProjectsDeleteDefaultBucket
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the default bucket.
 *
 *  Method: firebasestorage.projects.getDefaultBucket
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebasestorageCloudPlatform
 *    @c kGTLRAuthScopeFirebasestorageFirebase
 */
@interface GTLRFirebasestorageQuery_ProjectsGetDefaultBucket : GTLRFirebasestorageQuery

/**
 *  Required. The name of the default bucket to retrieve,
 *  `projects/{project_id_or_number}/defaultBucket`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebasestorage_DefaultBucket.
 *
 *  Gets the default bucket.
 *
 *  @param name Required. The name of the default bucket to retrieve,
 *    `projects/{project_id_or_number}/defaultBucket`.
 *
 *  @return GTLRFirebasestorageQuery_ProjectsGetDefaultBucket
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
