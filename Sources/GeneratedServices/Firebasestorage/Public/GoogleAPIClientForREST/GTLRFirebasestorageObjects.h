// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Storage for Firebase API (firebasestorage/v1beta)
// Description:
//   The Cloud Storage for Firebase API enables programmatic management of Cloud
//   Storage buckets for use in Firebase projects
// Documentation:
//   https://firebase.google.com/docs/storage

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRFirebasestorage_Bucket;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata.state

/**
 *  The source bucket is being recreated in the new location.
 *
 *  Value: "CREATING_DESTINATION_BUCKET"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_CreatingDestinationBucket;
/**
 *  Generating a unique bucket name, storing the source -> temp mapping in
 *  Spanner, and actually creating the temporary bucket via Bigstore.
 *
 *  Value: "CREATING_TEMP_BUCKET"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_CreatingTempBucket;
/**
 *  The source bucket is being emptied and deleted.
 *
 *  Value: "DELETING_SOURCE_BUCKET"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_DeletingSourceBucket;
/**
 *  The temp bucket is being emptied and deleted.
 *
 *  Value: "DELETING_TEMP_BUCKET"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_DeletingTempBucket;
/**
 *  The migration failed at some stage and it is not possible to continue
 *  retrying that stage. Manual recovery may be needed. Rollback is either
 *  impossible at this stage, or has been attempted and failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_Failed;
/**
 *  The MigrateLocationDestructively request has passed precondition checks and
 *  the bucket migration will begin soon.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_Pending;
/**
 *  The migration has been successfully rolled back.
 *
 *  Value: "ROLLED_BACK"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_RolledBack;
/**
 *  The migration has encountered a permanent failure and is now being rolled
 *  back so that the source bucket is restored to its original state.
 *
 *  Value: "ROLLING_BACK"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_RollingBack;
/**
 *  Unspecified state. Should not be used.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_StateUnspecified;
/**
 *  All stages of the migration have completed and the operation has been marked
 *  done and updated with a response.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_Succeeded;
/**
 *  The second STS transfer to move all objects from the temp bucket to the
 *  final bucket is underway.
 *
 *  Value: "TRANSFERRING_TO_DESTINATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_TransferringToDestination;
/**
 *  The first STS transfer to move all objects from the source bucket to the
 *  temp bucket is underway.
 *
 *  Value: "TRANSFERRING_TO_TEMP"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_TransferringToTemp;

// ----------------------------------------------------------------------------
// GTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata.state

/**
 *  The source bucket is being recreated in the new location.
 *
 *  Value: "CREATING_DESTINATION_BUCKET"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_CreatingDestinationBucket;
/**
 *  Generating a unique bucket name, storing the source -> temp mapping in
 *  Spanner, and actually creating the temporary bucket via Bigstore.
 *
 *  Value: "CREATING_TEMP_BUCKET"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_CreatingTempBucket;
/**
 *  The source bucket is being emptied and deleted.
 *
 *  Value: "DELETING_SOURCE_BUCKET"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_DeletingSourceBucket;
/**
 *  The temp bucket is being emptied and deleted.
 *
 *  Value: "DELETING_TEMP_BUCKET"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_DeletingTempBucket;
/**
 *  The migration failed at some stage and it is not possible to continue
 *  retrying that stage. Manual recovery may be needed. Rollback is either
 *  impossible at this stage, or has been attempted and failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_Failed;
/**
 *  The MigrateLocationDestructively request has passed precondition checks and
 *  the bucket migration will begin soon.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_Pending;
/**
 *  The migration has been successfully rolled back.
 *
 *  Value: "ROLLED_BACK"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_RolledBack;
/**
 *  The migration has encountered a permanent failure and is now being rolled
 *  back so that the source bucket is restored to its original state.
 *
 *  Value: "ROLLING_BACK"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_RollingBack;
/**
 *  Unspecified state. Should not be used.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_StateUnspecified;
/**
 *  All stages of the migration have completed and the operation has been marked
 *  done and updated with a response.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_Succeeded;
/**
 *  The second STS transfer to move all objects from the temp bucket to the
 *  final bucket is underway.
 *
 *  Value: "TRANSFERRING_TO_DESTINATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_TransferringToDestination;
/**
 *  The first STS transfer to move all objects from the source bucket to the
 *  temp bucket is underway.
 *
 *  Value: "TRANSFERRING_TO_TEMP"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_TransferringToTemp;

/**
 *  The request used to link a Google Cloud Storage bucket to a Firebase
 *  project.
 */
@interface GTLRFirebasestorage_AddFirebaseRequest : GTLRObject
@end


/**
 *  A storage bucket and its relation to a parent Firebase project.
 */
@interface GTLRFirebasestorage_Bucket : GTLRObject

/** Resource name of the bucket. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRFirebasestorage_Empty : GTLRObject
@end


/**
 *  Metadata for MigrateLocationDestructively LRO.
 */
@interface GTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata : GTLRObject

/** The time the LRO was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The time the LRO was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastUpdateTime;

/**
 *  The current state of the migration.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_CreatingDestinationBucket
 *        The source bucket is being recreated in the new location. (Value:
 *        "CREATING_DESTINATION_BUCKET")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_CreatingTempBucket
 *        Generating a unique bucket name, storing the source -> temp mapping in
 *        Spanner, and actually creating the temporary bucket via Bigstore.
 *        (Value: "CREATING_TEMP_BUCKET")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_DeletingSourceBucket
 *        The source bucket is being emptied and deleted. (Value:
 *        "DELETING_SOURCE_BUCKET")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_DeletingTempBucket
 *        The temp bucket is being emptied and deleted. (Value:
 *        "DELETING_TEMP_BUCKET")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_Failed
 *        The migration failed at some stage and it is not possible to continue
 *        retrying that stage. Manual recovery may be needed. Rollback is either
 *        impossible at this stage, or has been attempted and failed. (Value:
 *        "FAILED")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_Pending
 *        The MigrateLocationDestructively request has passed precondition
 *        checks and the bucket migration will begin soon. (Value: "PENDING")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_RolledBack
 *        The migration has been successfully rolled back. (Value:
 *        "ROLLED_BACK")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_RollingBack
 *        The migration has encountered a permanent failure and is now being
 *        rolled back so that the source bucket is restored to its original
 *        state. (Value: "ROLLING_BACK")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_StateUnspecified
 *        Unspecified state. Should not be used. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_Succeeded
 *        All stages of the migration have completed and the operation has been
 *        marked done and updated with a response. (Value: "SUCCEEDED")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_TransferringToDestination
 *        The second STS transfer to move all objects from the temp bucket to
 *        the final bucket is underway. (Value: "TRANSFERRING_TO_DESTINATION")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1alphaMigrateLocationDestructivelyMetadata_State_TransferringToTemp
 *        The first STS transfer to move all objects from the source bucket to
 *        the temp bucket is underway. (Value: "TRANSFERRING_TO_TEMP")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Metadata for MigrateLocationDestructively LRO.
 */
@interface GTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata : GTLRObject

/** The time the LRO was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The time the LRO was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastUpdateTime;

/**
 *  The current state of the migration.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_CreatingDestinationBucket
 *        The source bucket is being recreated in the new location. (Value:
 *        "CREATING_DESTINATION_BUCKET")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_CreatingTempBucket
 *        Generating a unique bucket name, storing the source -> temp mapping in
 *        Spanner, and actually creating the temporary bucket via Bigstore.
 *        (Value: "CREATING_TEMP_BUCKET")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_DeletingSourceBucket
 *        The source bucket is being emptied and deleted. (Value:
 *        "DELETING_SOURCE_BUCKET")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_DeletingTempBucket
 *        The temp bucket is being emptied and deleted. (Value:
 *        "DELETING_TEMP_BUCKET")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_Failed
 *        The migration failed at some stage and it is not possible to continue
 *        retrying that stage. Manual recovery may be needed. Rollback is either
 *        impossible at this stage, or has been attempted and failed. (Value:
 *        "FAILED")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_Pending
 *        The MigrateLocationDestructively request has passed precondition
 *        checks and the bucket migration will begin soon. (Value: "PENDING")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_RolledBack
 *        The migration has been successfully rolled back. (Value:
 *        "ROLLED_BACK")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_RollingBack
 *        The migration has encountered a permanent failure and is now being
 *        rolled back so that the source bucket is restored to its original
 *        state. (Value: "ROLLING_BACK")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_StateUnspecified
 *        Unspecified state. Should not be used. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_Succeeded
 *        All stages of the migration have completed and the operation has been
 *        marked done and updated with a response. (Value: "SUCCEEDED")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_TransferringToDestination
 *        The second STS transfer to move all objects from the temp bucket to
 *        the final bucket is underway. (Value: "TRANSFERRING_TO_DESTINATION")
 *    @arg @c kGTLRFirebasestorage_GoogleFirebaseStorageControlplaneV1betaMigrateLocationDestructivelyMetadata_State_TransferringToTemp
 *        The first STS transfer to move all objects from the source bucket to
 *        the temp bucket is underway. (Value: "TRANSFERRING_TO_TEMP")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  The response returned by `ListBuckets`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "buckets" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebasestorage_ListBucketsResponse : GTLRCollectionObject

/**
 *  The list of linked buckets.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebasestorage_Bucket *> *buckets;

/**
 *  A token that can be sent as `page_token` to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The request used to unlink a Google Cloud Storage bucket from a Firebase
 *  project.
 */
@interface GTLRFirebasestorage_RemoveFirebaseRequest : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
