// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Monitoring API (monitoring/v3)
// Description:
//   Manages your Cloud Monitoring data and configurations.
// Documentation:
//   https://cloud.google.com/monitoring/api/

#import <GoogleAPIClientForREST/GTLRMonitoringObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRMonitoring_Aggregation.crossSeriesReducer
NSString * const kGTLRMonitoring_Aggregation_CrossSeriesReducer_ReduceCount = @"REDUCE_COUNT";
NSString * const kGTLRMonitoring_Aggregation_CrossSeriesReducer_ReduceCountFalse = @"REDUCE_COUNT_FALSE";
NSString * const kGTLRMonitoring_Aggregation_CrossSeriesReducer_ReduceCountTrue = @"REDUCE_COUNT_TRUE";
NSString * const kGTLRMonitoring_Aggregation_CrossSeriesReducer_ReduceFractionTrue = @"REDUCE_FRACTION_TRUE";
NSString * const kGTLRMonitoring_Aggregation_CrossSeriesReducer_ReduceMax = @"REDUCE_MAX";
NSString * const kGTLRMonitoring_Aggregation_CrossSeriesReducer_ReduceMean = @"REDUCE_MEAN";
NSString * const kGTLRMonitoring_Aggregation_CrossSeriesReducer_ReduceMin = @"REDUCE_MIN";
NSString * const kGTLRMonitoring_Aggregation_CrossSeriesReducer_ReduceNone = @"REDUCE_NONE";
NSString * const kGTLRMonitoring_Aggregation_CrossSeriesReducer_ReducePercentile05 = @"REDUCE_PERCENTILE_05";
NSString * const kGTLRMonitoring_Aggregation_CrossSeriesReducer_ReducePercentile50 = @"REDUCE_PERCENTILE_50";
NSString * const kGTLRMonitoring_Aggregation_CrossSeriesReducer_ReducePercentile95 = @"REDUCE_PERCENTILE_95";
NSString * const kGTLRMonitoring_Aggregation_CrossSeriesReducer_ReducePercentile99 = @"REDUCE_PERCENTILE_99";
NSString * const kGTLRMonitoring_Aggregation_CrossSeriesReducer_ReduceStddev = @"REDUCE_STDDEV";
NSString * const kGTLRMonitoring_Aggregation_CrossSeriesReducer_ReduceSum = @"REDUCE_SUM";

// GTLRMonitoring_Aggregation.perSeriesAligner
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignCount = @"ALIGN_COUNT";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignCountFalse = @"ALIGN_COUNT_FALSE";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignCountTrue = @"ALIGN_COUNT_TRUE";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignDelta = @"ALIGN_DELTA";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignFractionTrue = @"ALIGN_FRACTION_TRUE";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignInterpolate = @"ALIGN_INTERPOLATE";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignMax = @"ALIGN_MAX";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignMean = @"ALIGN_MEAN";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignMin = @"ALIGN_MIN";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignNextOlder = @"ALIGN_NEXT_OLDER";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignNone = @"ALIGN_NONE";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignPercentChange = @"ALIGN_PERCENT_CHANGE";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignPercentile05 = @"ALIGN_PERCENTILE_05";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignPercentile50 = @"ALIGN_PERCENTILE_50";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignPercentile95 = @"ALIGN_PERCENTILE_95";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignPercentile99 = @"ALIGN_PERCENTILE_99";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignRate = @"ALIGN_RATE";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignStddev = @"ALIGN_STDDEV";
NSString * const kGTLRMonitoring_Aggregation_PerSeriesAligner_AlignSum = @"ALIGN_SUM";

// GTLRMonitoring_AlertPolicy.combiner
NSString * const kGTLRMonitoring_AlertPolicy_Combiner_And      = @"AND";
NSString * const kGTLRMonitoring_AlertPolicy_Combiner_AndWithMatchingResource = @"AND_WITH_MATCHING_RESOURCE";
NSString * const kGTLRMonitoring_AlertPolicy_Combiner_CombineUnspecified = @"COMBINE_UNSPECIFIED";
NSString * const kGTLRMonitoring_AlertPolicy_Combiner_Or       = @"OR";

// GTLRMonitoring_CollectdValue.dataSourceType
NSString * const kGTLRMonitoring_CollectdValue_DataSourceType_Absolute = @"ABSOLUTE";
NSString * const kGTLRMonitoring_CollectdValue_DataSourceType_Counter = @"COUNTER";
NSString * const kGTLRMonitoring_CollectdValue_DataSourceType_Derive = @"DERIVE";
NSString * const kGTLRMonitoring_CollectdValue_DataSourceType_Gauge = @"GAUGE";
NSString * const kGTLRMonitoring_CollectdValue_DataSourceType_UnspecifiedDataSourceType = @"UNSPECIFIED_DATA_SOURCE_TYPE";

// GTLRMonitoring_ContentMatcher.matcher
NSString * const kGTLRMonitoring_ContentMatcher_Matcher_ContainsString = @"CONTAINS_STRING";
NSString * const kGTLRMonitoring_ContentMatcher_Matcher_ContentMatcherOptionUnspecified = @"CONTENT_MATCHER_OPTION_UNSPECIFIED";
NSString * const kGTLRMonitoring_ContentMatcher_Matcher_MatchesJsonPath = @"MATCHES_JSON_PATH";
NSString * const kGTLRMonitoring_ContentMatcher_Matcher_MatchesRegex = @"MATCHES_REGEX";
NSString * const kGTLRMonitoring_ContentMatcher_Matcher_NotContainsString = @"NOT_CONTAINS_STRING";
NSString * const kGTLRMonitoring_ContentMatcher_Matcher_NotMatchesJsonPath = @"NOT_MATCHES_JSON_PATH";
NSString * const kGTLRMonitoring_ContentMatcher_Matcher_NotMatchesRegex = @"NOT_MATCHES_REGEX";

// GTLRMonitoring_Field.cardinality
NSString * const kGTLRMonitoring_Field_Cardinality_CardinalityOptional = @"CARDINALITY_OPTIONAL";
NSString * const kGTLRMonitoring_Field_Cardinality_CardinalityRepeated = @"CARDINALITY_REPEATED";
NSString * const kGTLRMonitoring_Field_Cardinality_CardinalityRequired = @"CARDINALITY_REQUIRED";
NSString * const kGTLRMonitoring_Field_Cardinality_CardinalityUnknown = @"CARDINALITY_UNKNOWN";

// GTLRMonitoring_Field.kind
NSString * const kGTLRMonitoring_Field_Kind_TypeBool     = @"TYPE_BOOL";
NSString * const kGTLRMonitoring_Field_Kind_TypeBytes    = @"TYPE_BYTES";
NSString * const kGTLRMonitoring_Field_Kind_TypeDouble   = @"TYPE_DOUBLE";
NSString * const kGTLRMonitoring_Field_Kind_TypeEnum     = @"TYPE_ENUM";
NSString * const kGTLRMonitoring_Field_Kind_TypeFixed32  = @"TYPE_FIXED32";
NSString * const kGTLRMonitoring_Field_Kind_TypeFixed64  = @"TYPE_FIXED64";
NSString * const kGTLRMonitoring_Field_Kind_TypeFloat    = @"TYPE_FLOAT";
NSString * const kGTLRMonitoring_Field_Kind_TypeGroup    = @"TYPE_GROUP";
NSString * const kGTLRMonitoring_Field_Kind_TypeInt32    = @"TYPE_INT32";
NSString * const kGTLRMonitoring_Field_Kind_TypeInt64    = @"TYPE_INT64";
NSString * const kGTLRMonitoring_Field_Kind_TypeMessage  = @"TYPE_MESSAGE";
NSString * const kGTLRMonitoring_Field_Kind_TypeSfixed32 = @"TYPE_SFIXED32";
NSString * const kGTLRMonitoring_Field_Kind_TypeSfixed64 = @"TYPE_SFIXED64";
NSString * const kGTLRMonitoring_Field_Kind_TypeSint32   = @"TYPE_SINT32";
NSString * const kGTLRMonitoring_Field_Kind_TypeSint64   = @"TYPE_SINT64";
NSString * const kGTLRMonitoring_Field_Kind_TypeString   = @"TYPE_STRING";
NSString * const kGTLRMonitoring_Field_Kind_TypeUint32   = @"TYPE_UINT32";
NSString * const kGTLRMonitoring_Field_Kind_TypeUint64   = @"TYPE_UINT64";
NSString * const kGTLRMonitoring_Field_Kind_TypeUnknown  = @"TYPE_UNKNOWN";

// GTLRMonitoring_HttpCheck.contentType
NSString * const kGTLRMonitoring_HttpCheck_ContentType_TypeUnspecified = @"TYPE_UNSPECIFIED";
NSString * const kGTLRMonitoring_HttpCheck_ContentType_UrlEncoded = @"URL_ENCODED";

// GTLRMonitoring_HttpCheck.requestMethod
NSString * const kGTLRMonitoring_HttpCheck_RequestMethod_Get   = @"GET";
NSString * const kGTLRMonitoring_HttpCheck_RequestMethod_MethodUnspecified = @"METHOD_UNSPECIFIED";
NSString * const kGTLRMonitoring_HttpCheck_RequestMethod_Post  = @"POST";

// GTLRMonitoring_InternalChecker.state
NSString * const kGTLRMonitoring_InternalChecker_State_Creating = @"CREATING";
NSString * const kGTLRMonitoring_InternalChecker_State_Running = @"RUNNING";
NSString * const kGTLRMonitoring_InternalChecker_State_Unspecified = @"UNSPECIFIED";

// GTLRMonitoring_JsonPathMatcher.jsonMatcher
NSString * const kGTLRMonitoring_JsonPathMatcher_JsonMatcher_ExactMatch = @"EXACT_MATCH";
NSString * const kGTLRMonitoring_JsonPathMatcher_JsonMatcher_JsonPathMatcherOptionUnspecified = @"JSON_PATH_MATCHER_OPTION_UNSPECIFIED";
NSString * const kGTLRMonitoring_JsonPathMatcher_JsonMatcher_RegexMatch = @"REGEX_MATCH";

// GTLRMonitoring_LabelDescriptor.valueType
NSString * const kGTLRMonitoring_LabelDescriptor_ValueType_Bool = @"BOOL";
NSString * const kGTLRMonitoring_LabelDescriptor_ValueType_Int64 = @"INT64";
NSString * const kGTLRMonitoring_LabelDescriptor_ValueType_String = @"STRING";

// GTLRMonitoring_MetricDescriptor.launchStage
NSString * const kGTLRMonitoring_MetricDescriptor_LaunchStage_Alpha = @"ALPHA";
NSString * const kGTLRMonitoring_MetricDescriptor_LaunchStage_Beta = @"BETA";
NSString * const kGTLRMonitoring_MetricDescriptor_LaunchStage_Deprecated = @"DEPRECATED";
NSString * const kGTLRMonitoring_MetricDescriptor_LaunchStage_EarlyAccess = @"EARLY_ACCESS";
NSString * const kGTLRMonitoring_MetricDescriptor_LaunchStage_Ga = @"GA";
NSString * const kGTLRMonitoring_MetricDescriptor_LaunchStage_LaunchStageUnspecified = @"LAUNCH_STAGE_UNSPECIFIED";
NSString * const kGTLRMonitoring_MetricDescriptor_LaunchStage_Prelaunch = @"PRELAUNCH";
NSString * const kGTLRMonitoring_MetricDescriptor_LaunchStage_Unimplemented = @"UNIMPLEMENTED";

// GTLRMonitoring_MetricDescriptor.metricKind
NSString * const kGTLRMonitoring_MetricDescriptor_MetricKind_Cumulative = @"CUMULATIVE";
NSString * const kGTLRMonitoring_MetricDescriptor_MetricKind_Delta = @"DELTA";
NSString * const kGTLRMonitoring_MetricDescriptor_MetricKind_Gauge = @"GAUGE";
NSString * const kGTLRMonitoring_MetricDescriptor_MetricKind_MetricKindUnspecified = @"METRIC_KIND_UNSPECIFIED";

// GTLRMonitoring_MetricDescriptor.valueType
NSString * const kGTLRMonitoring_MetricDescriptor_ValueType_Bool = @"BOOL";
NSString * const kGTLRMonitoring_MetricDescriptor_ValueType_Distribution = @"DISTRIBUTION";
NSString * const kGTLRMonitoring_MetricDescriptor_ValueType_Double = @"DOUBLE";
NSString * const kGTLRMonitoring_MetricDescriptor_ValueType_Int64 = @"INT64";
NSString * const kGTLRMonitoring_MetricDescriptor_ValueType_Money = @"MONEY";
NSString * const kGTLRMonitoring_MetricDescriptor_ValueType_String = @"STRING";
NSString * const kGTLRMonitoring_MetricDescriptor_ValueType_ValueTypeUnspecified = @"VALUE_TYPE_UNSPECIFIED";

// GTLRMonitoring_MetricDescriptorMetadata.launchStage
NSString * const kGTLRMonitoring_MetricDescriptorMetadata_LaunchStage_Alpha = @"ALPHA";
NSString * const kGTLRMonitoring_MetricDescriptorMetadata_LaunchStage_Beta = @"BETA";
NSString * const kGTLRMonitoring_MetricDescriptorMetadata_LaunchStage_Deprecated = @"DEPRECATED";
NSString * const kGTLRMonitoring_MetricDescriptorMetadata_LaunchStage_EarlyAccess = @"EARLY_ACCESS";
NSString * const kGTLRMonitoring_MetricDescriptorMetadata_LaunchStage_Ga = @"GA";
NSString * const kGTLRMonitoring_MetricDescriptorMetadata_LaunchStage_LaunchStageUnspecified = @"LAUNCH_STAGE_UNSPECIFIED";
NSString * const kGTLRMonitoring_MetricDescriptorMetadata_LaunchStage_Prelaunch = @"PRELAUNCH";
NSString * const kGTLRMonitoring_MetricDescriptorMetadata_LaunchStage_Unimplemented = @"UNIMPLEMENTED";

// GTLRMonitoring_MetricThreshold.comparison
NSString * const kGTLRMonitoring_MetricThreshold_Comparison_ComparisonEq = @"COMPARISON_EQ";
NSString * const kGTLRMonitoring_MetricThreshold_Comparison_ComparisonGe = @"COMPARISON_GE";
NSString * const kGTLRMonitoring_MetricThreshold_Comparison_ComparisonGt = @"COMPARISON_GT";
NSString * const kGTLRMonitoring_MetricThreshold_Comparison_ComparisonLe = @"COMPARISON_LE";
NSString * const kGTLRMonitoring_MetricThreshold_Comparison_ComparisonLt = @"COMPARISON_LT";
NSString * const kGTLRMonitoring_MetricThreshold_Comparison_ComparisonNe = @"COMPARISON_NE";
NSString * const kGTLRMonitoring_MetricThreshold_Comparison_ComparisonUnspecified = @"COMPARISON_UNSPECIFIED";

// GTLRMonitoring_MetricThreshold.evaluationMissingData
NSString * const kGTLRMonitoring_MetricThreshold_EvaluationMissingData_EvaluationMissingDataActive = @"EVALUATION_MISSING_DATA_ACTIVE";
NSString * const kGTLRMonitoring_MetricThreshold_EvaluationMissingData_EvaluationMissingDataInactive = @"EVALUATION_MISSING_DATA_INACTIVE";
NSString * const kGTLRMonitoring_MetricThreshold_EvaluationMissingData_EvaluationMissingDataNoOp = @"EVALUATION_MISSING_DATA_NO_OP";
NSString * const kGTLRMonitoring_MetricThreshold_EvaluationMissingData_EvaluationMissingDataUnspecified = @"EVALUATION_MISSING_DATA_UNSPECIFIED";

// GTLRMonitoring_MonitoredResourceDescriptor.launchStage
NSString * const kGTLRMonitoring_MonitoredResourceDescriptor_LaunchStage_Alpha = @"ALPHA";
NSString * const kGTLRMonitoring_MonitoredResourceDescriptor_LaunchStage_Beta = @"BETA";
NSString * const kGTLRMonitoring_MonitoredResourceDescriptor_LaunchStage_Deprecated = @"DEPRECATED";
NSString * const kGTLRMonitoring_MonitoredResourceDescriptor_LaunchStage_EarlyAccess = @"EARLY_ACCESS";
NSString * const kGTLRMonitoring_MonitoredResourceDescriptor_LaunchStage_Ga = @"GA";
NSString * const kGTLRMonitoring_MonitoredResourceDescriptor_LaunchStage_LaunchStageUnspecified = @"LAUNCH_STAGE_UNSPECIFIED";
NSString * const kGTLRMonitoring_MonitoredResourceDescriptor_LaunchStage_Prelaunch = @"PRELAUNCH";
NSString * const kGTLRMonitoring_MonitoredResourceDescriptor_LaunchStage_Unimplemented = @"UNIMPLEMENTED";

// GTLRMonitoring_NotificationChannel.verificationStatus
NSString * const kGTLRMonitoring_NotificationChannel_VerificationStatus_Unverified = @"UNVERIFIED";
NSString * const kGTLRMonitoring_NotificationChannel_VerificationStatus_VerificationStatusUnspecified = @"VERIFICATION_STATUS_UNSPECIFIED";
NSString * const kGTLRMonitoring_NotificationChannel_VerificationStatus_Verified = @"VERIFIED";

// GTLRMonitoring_NotificationChannelDescriptor.launchStage
NSString * const kGTLRMonitoring_NotificationChannelDescriptor_LaunchStage_Alpha = @"ALPHA";
NSString * const kGTLRMonitoring_NotificationChannelDescriptor_LaunchStage_Beta = @"BETA";
NSString * const kGTLRMonitoring_NotificationChannelDescriptor_LaunchStage_Deprecated = @"DEPRECATED";
NSString * const kGTLRMonitoring_NotificationChannelDescriptor_LaunchStage_EarlyAccess = @"EARLY_ACCESS";
NSString * const kGTLRMonitoring_NotificationChannelDescriptor_LaunchStage_Ga = @"GA";
NSString * const kGTLRMonitoring_NotificationChannelDescriptor_LaunchStage_LaunchStageUnspecified = @"LAUNCH_STAGE_UNSPECIFIED";
NSString * const kGTLRMonitoring_NotificationChannelDescriptor_LaunchStage_Prelaunch = @"PRELAUNCH";
NSString * const kGTLRMonitoring_NotificationChannelDescriptor_LaunchStage_Unimplemented = @"UNIMPLEMENTED";

// GTLRMonitoring_NotificationChannelDescriptor.supportedTiers
NSString * const kGTLRMonitoring_NotificationChannelDescriptor_SupportedTiers_ServiceTierBasic = @"SERVICE_TIER_BASIC";
NSString * const kGTLRMonitoring_NotificationChannelDescriptor_SupportedTiers_ServiceTierPremium = @"SERVICE_TIER_PREMIUM";
NSString * const kGTLRMonitoring_NotificationChannelDescriptor_SupportedTiers_ServiceTierUnspecified = @"SERVICE_TIER_UNSPECIFIED";

// GTLRMonitoring_OperationMetadata.state
NSString * const kGTLRMonitoring_OperationMetadata_State_Cancelled = @"CANCELLED";
NSString * const kGTLRMonitoring_OperationMetadata_State_Created = @"CREATED";
NSString * const kGTLRMonitoring_OperationMetadata_State_Done  = @"DONE";
NSString * const kGTLRMonitoring_OperationMetadata_State_Running = @"RUNNING";
NSString * const kGTLRMonitoring_OperationMetadata_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRMonitoring_QueryLanguageCondition.evaluationMissingData
NSString * const kGTLRMonitoring_QueryLanguageCondition_EvaluationMissingData_EvaluationMissingDataActive = @"EVALUATION_MISSING_DATA_ACTIVE";
NSString * const kGTLRMonitoring_QueryLanguageCondition_EvaluationMissingData_EvaluationMissingDataInactive = @"EVALUATION_MISSING_DATA_INACTIVE";
NSString * const kGTLRMonitoring_QueryLanguageCondition_EvaluationMissingData_EvaluationMissingDataNoOp = @"EVALUATION_MISSING_DATA_NO_OP";
NSString * const kGTLRMonitoring_QueryLanguageCondition_EvaluationMissingData_EvaluationMissingDataUnspecified = @"EVALUATION_MISSING_DATA_UNSPECIFIED";

// GTLRMonitoring_ResourceGroup.resourceType
NSString * const kGTLRMonitoring_ResourceGroup_ResourceType_AwsElbLoadBalancer = @"AWS_ELB_LOAD_BALANCER";
NSString * const kGTLRMonitoring_ResourceGroup_ResourceType_Instance = @"INSTANCE";
NSString * const kGTLRMonitoring_ResourceGroup_ResourceType_ResourceTypeUnspecified = @"RESOURCE_TYPE_UNSPECIFIED";

// GTLRMonitoring_ResponseStatusCode.statusClass
NSString * const kGTLRMonitoring_ResponseStatusCode_StatusClass_StatusClass1xx = @"STATUS_CLASS_1XX";
NSString * const kGTLRMonitoring_ResponseStatusCode_StatusClass_StatusClass2xx = @"STATUS_CLASS_2XX";
NSString * const kGTLRMonitoring_ResponseStatusCode_StatusClass_StatusClass3xx = @"STATUS_CLASS_3XX";
NSString * const kGTLRMonitoring_ResponseStatusCode_StatusClass_StatusClass4xx = @"STATUS_CLASS_4XX";
NSString * const kGTLRMonitoring_ResponseStatusCode_StatusClass_StatusClass5xx = @"STATUS_CLASS_5XX";
NSString * const kGTLRMonitoring_ResponseStatusCode_StatusClass_StatusClassAny = @"STATUS_CLASS_ANY";
NSString * const kGTLRMonitoring_ResponseStatusCode_StatusClass_StatusClassUnspecified = @"STATUS_CLASS_UNSPECIFIED";

// GTLRMonitoring_ServiceLevelObjective.calendarPeriod
NSString * const kGTLRMonitoring_ServiceLevelObjective_CalendarPeriod_CalendarPeriodUnspecified = @"CALENDAR_PERIOD_UNSPECIFIED";
NSString * const kGTLRMonitoring_ServiceLevelObjective_CalendarPeriod_Day = @"DAY";
NSString * const kGTLRMonitoring_ServiceLevelObjective_CalendarPeriod_Fortnight = @"FORTNIGHT";
NSString * const kGTLRMonitoring_ServiceLevelObjective_CalendarPeriod_Half = @"HALF";
NSString * const kGTLRMonitoring_ServiceLevelObjective_CalendarPeriod_Month = @"MONTH";
NSString * const kGTLRMonitoring_ServiceLevelObjective_CalendarPeriod_Quarter = @"QUARTER";
NSString * const kGTLRMonitoring_ServiceLevelObjective_CalendarPeriod_Week = @"WEEK";
NSString * const kGTLRMonitoring_ServiceLevelObjective_CalendarPeriod_Year = @"YEAR";

// GTLRMonitoring_TimeSeries.metricKind
NSString * const kGTLRMonitoring_TimeSeries_MetricKind_Cumulative = @"CUMULATIVE";
NSString * const kGTLRMonitoring_TimeSeries_MetricKind_Delta   = @"DELTA";
NSString * const kGTLRMonitoring_TimeSeries_MetricKind_Gauge   = @"GAUGE";
NSString * const kGTLRMonitoring_TimeSeries_MetricKind_MetricKindUnspecified = @"METRIC_KIND_UNSPECIFIED";

// GTLRMonitoring_TimeSeries.valueType
NSString * const kGTLRMonitoring_TimeSeries_ValueType_Bool     = @"BOOL";
NSString * const kGTLRMonitoring_TimeSeries_ValueType_Distribution = @"DISTRIBUTION";
NSString * const kGTLRMonitoring_TimeSeries_ValueType_Double   = @"DOUBLE";
NSString * const kGTLRMonitoring_TimeSeries_ValueType_Int64    = @"INT64";
NSString * const kGTLRMonitoring_TimeSeries_ValueType_Money    = @"MONEY";
NSString * const kGTLRMonitoring_TimeSeries_ValueType_String   = @"STRING";
NSString * const kGTLRMonitoring_TimeSeries_ValueType_ValueTypeUnspecified = @"VALUE_TYPE_UNSPECIFIED";

// GTLRMonitoring_Type.syntax
NSString * const kGTLRMonitoring_Type_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRMonitoring_Type_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// GTLRMonitoring_UptimeCheckConfig.checkerType
NSString * const kGTLRMonitoring_UptimeCheckConfig_CheckerType_CheckerTypeUnspecified = @"CHECKER_TYPE_UNSPECIFIED";
NSString * const kGTLRMonitoring_UptimeCheckConfig_CheckerType_StaticIpCheckers = @"STATIC_IP_CHECKERS";
NSString * const kGTLRMonitoring_UptimeCheckConfig_CheckerType_VpcCheckers = @"VPC_CHECKERS";

// GTLRMonitoring_UptimeCheckConfig.selectedRegions
NSString * const kGTLRMonitoring_UptimeCheckConfig_SelectedRegions_AsiaPacific = @"ASIA_PACIFIC";
NSString * const kGTLRMonitoring_UptimeCheckConfig_SelectedRegions_Europe = @"EUROPE";
NSString * const kGTLRMonitoring_UptimeCheckConfig_SelectedRegions_RegionUnspecified = @"REGION_UNSPECIFIED";
NSString * const kGTLRMonitoring_UptimeCheckConfig_SelectedRegions_SouthAmerica = @"SOUTH_AMERICA";
NSString * const kGTLRMonitoring_UptimeCheckConfig_SelectedRegions_Usa = @"USA";

// GTLRMonitoring_UptimeCheckIp.region
NSString * const kGTLRMonitoring_UptimeCheckIp_Region_AsiaPacific = @"ASIA_PACIFIC";
NSString * const kGTLRMonitoring_UptimeCheckIp_Region_Europe   = @"EUROPE";
NSString * const kGTLRMonitoring_UptimeCheckIp_Region_RegionUnspecified = @"REGION_UNSPECIFIED";
NSString * const kGTLRMonitoring_UptimeCheckIp_Region_SouthAmerica = @"SOUTH_AMERICA";
NSString * const kGTLRMonitoring_UptimeCheckIp_Region_Usa      = @"USA";

// GTLRMonitoring_ValueDescriptor.metricKind
NSString * const kGTLRMonitoring_ValueDescriptor_MetricKind_Cumulative = @"CUMULATIVE";
NSString * const kGTLRMonitoring_ValueDescriptor_MetricKind_Delta = @"DELTA";
NSString * const kGTLRMonitoring_ValueDescriptor_MetricKind_Gauge = @"GAUGE";
NSString * const kGTLRMonitoring_ValueDescriptor_MetricKind_MetricKindUnspecified = @"METRIC_KIND_UNSPECIFIED";

// GTLRMonitoring_ValueDescriptor.valueType
NSString * const kGTLRMonitoring_ValueDescriptor_ValueType_Bool = @"BOOL";
NSString * const kGTLRMonitoring_ValueDescriptor_ValueType_Distribution = @"DISTRIBUTION";
NSString * const kGTLRMonitoring_ValueDescriptor_ValueType_Double = @"DOUBLE";
NSString * const kGTLRMonitoring_ValueDescriptor_ValueType_Int64 = @"INT64";
NSString * const kGTLRMonitoring_ValueDescriptor_ValueType_Money = @"MONEY";
NSString * const kGTLRMonitoring_ValueDescriptor_ValueType_String = @"STRING";
NSString * const kGTLRMonitoring_ValueDescriptor_ValueType_ValueTypeUnspecified = @"VALUE_TYPE_UNSPECIFIED";

// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Aggregation
//

@implementation GTLRMonitoring_Aggregation
@dynamic alignmentPeriod, crossSeriesReducer, groupByFields, perSeriesAligner;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"groupByFields" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_AlertPolicy
//

@implementation GTLRMonitoring_AlertPolicy
@dynamic alertStrategy, combiner, conditions, creationRecord, displayName,
         documentation, enabled, mutationRecord, name, notificationChannels,
         userLabels, validity;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"conditions" : [GTLRMonitoring_Condition class],
    @"notificationChannels" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_AlertPolicy_UserLabels
//

@implementation GTLRMonitoring_AlertPolicy_UserLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_AlertStrategy
//

@implementation GTLRMonitoring_AlertStrategy
@dynamic autoClose, notificationRateLimit;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_AppEngine
//

@implementation GTLRMonitoring_AppEngine
@dynamic moduleId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_AvailabilityCriteria
//

@implementation GTLRMonitoring_AvailabilityCriteria
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_BasicAuthentication
//

@implementation GTLRMonitoring_BasicAuthentication
@dynamic password, username;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_BasicService
//

@implementation GTLRMonitoring_BasicService
@dynamic serviceLabels, serviceType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_BasicService_ServiceLabels
//

@implementation GTLRMonitoring_BasicService_ServiceLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_BasicSli
//

@implementation GTLRMonitoring_BasicSli
@dynamic availability, latency, location, method, version;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"location" : [NSString class],
    @"method" : [NSString class],
    @"version" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_BucketOptions
//

@implementation GTLRMonitoring_BucketOptions
@dynamic explicitBuckets, exponentialBuckets, linearBuckets;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_CloudEndpoints
//

@implementation GTLRMonitoring_CloudEndpoints
@dynamic service;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_CloudRun
//

@implementation GTLRMonitoring_CloudRun
@dynamic location, serviceName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ClusterIstio
//

@implementation GTLRMonitoring_ClusterIstio
@dynamic clusterName, location, serviceName, serviceNamespace;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_CollectdPayload
//

@implementation GTLRMonitoring_CollectdPayload
@dynamic endTime, metadata, plugin, pluginInstance, startTime, type,
         typeInstance, values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"values" : [GTLRMonitoring_CollectdValue class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_CollectdPayload_Metadata
//

@implementation GTLRMonitoring_CollectdPayload_Metadata

+ (Class)classForAdditionalProperties {
  return [GTLRMonitoring_TypedValue class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_CollectdPayloadError
//

@implementation GTLRMonitoring_CollectdPayloadError
@dynamic error, index, valueErrors;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"valueErrors" : [GTLRMonitoring_CollectdValueError class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_CollectdValue
//

@implementation GTLRMonitoring_CollectdValue
@dynamic dataSourceName, dataSourceType, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_CollectdValueError
//

@implementation GTLRMonitoring_CollectdValueError
@dynamic error, index;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Condition
//

@implementation GTLRMonitoring_Condition
@dynamic conditionAbsent, conditionMatchedLog, conditionMonitoringQueryLanguage,
         conditionThreshold, displayName, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ContentMatcher
//

@implementation GTLRMonitoring_ContentMatcher
@dynamic content, jsonPathMatcher, matcher;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_CreateCollectdTimeSeriesRequest
//

@implementation GTLRMonitoring_CreateCollectdTimeSeriesRequest
@dynamic collectdPayloads, collectdVersion, resource;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"collectdPayloads" : [GTLRMonitoring_CollectdPayload class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_CreateCollectdTimeSeriesResponse
//

@implementation GTLRMonitoring_CreateCollectdTimeSeriesResponse
@dynamic payloadErrors, summary;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"payloadErrors" : [GTLRMonitoring_CollectdPayloadError class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_CreateTimeSeriesRequest
//

@implementation GTLRMonitoring_CreateTimeSeriesRequest
@dynamic timeSeries;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"timeSeries" : [GTLRMonitoring_TimeSeries class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_CreateTimeSeriesSummary
//

@implementation GTLRMonitoring_CreateTimeSeriesSummary
@dynamic errors, successPointCount, totalPointCount;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"errors" : [GTLRMonitoring_Error class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Custom
//

@implementation GTLRMonitoring_Custom
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Distribution
//

@implementation GTLRMonitoring_Distribution
@dynamic bucketCounts, bucketOptions, count, exemplars, mean, range,
         sumOfSquaredDeviation;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bucketCounts" : [NSNumber class],
    @"exemplars" : [GTLRMonitoring_Exemplar class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_DistributionCut
//

@implementation GTLRMonitoring_DistributionCut
@dynamic distributionFilter, range;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Documentation
//

@implementation GTLRMonitoring_Documentation
@dynamic content, mimeType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_DroppedLabels
//

@implementation GTLRMonitoring_DroppedLabels
@dynamic label;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_DroppedLabels_Label
//

@implementation GTLRMonitoring_DroppedLabels_Label

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Empty
//

@implementation GTLRMonitoring_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Error
//

@implementation GTLRMonitoring_Error
@dynamic pointCount, status;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Exemplar
//

@implementation GTLRMonitoring_Exemplar
@dynamic attachments, timestamp, value;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"attachments" : [GTLRMonitoring_Exemplar_Attachments_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Exemplar_Attachments_Item
//

@implementation GTLRMonitoring_Exemplar_Attachments_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Explicit
//

@implementation GTLRMonitoring_Explicit
@dynamic bounds;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bounds" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Exponential
//

@implementation GTLRMonitoring_Exponential
@dynamic growthFactor, numFiniteBuckets, scale;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Field
//

@implementation GTLRMonitoring_Field
@dynamic cardinality, defaultValue, jsonName, kind, name, number, oneofIndex,
         options, packed, typeUrl;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"options" : [GTLRMonitoring_Option class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_GetNotificationChannelVerificationCodeRequest
//

@implementation GTLRMonitoring_GetNotificationChannelVerificationCodeRequest
@dynamic expireTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_GetNotificationChannelVerificationCodeResponse
//

@implementation GTLRMonitoring_GetNotificationChannelVerificationCodeResponse
@dynamic code, expireTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_GkeNamespace
//

@implementation GTLRMonitoring_GkeNamespace
@dynamic clusterName, location, namespaceName, projectId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_GkeService
//

@implementation GTLRMonitoring_GkeService
@dynamic clusterName, location, namespaceName, projectId, serviceName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_GkeWorkload
//

@implementation GTLRMonitoring_GkeWorkload
@dynamic clusterName, location, namespaceName, projectId,
         topLevelControllerName, topLevelControllerType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_GoogleMonitoringV3Range
//

@implementation GTLRMonitoring_GoogleMonitoringV3Range
@dynamic max, min;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Group
//

@implementation GTLRMonitoring_Group
@dynamic displayName, filter, isCluster, name, parentName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_HttpCheck
//

@implementation GTLRMonitoring_HttpCheck
@dynamic acceptedResponseStatusCodes, authInfo, body, contentType, headers,
         maskHeaders, path, pingConfig, port, requestMethod, useSsl,
         validateSsl;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"acceptedResponseStatusCodes" : [GTLRMonitoring_ResponseStatusCode class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_HttpCheck_Headers
//

@implementation GTLRMonitoring_HttpCheck_Headers

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_InternalChecker
//

@implementation GTLRMonitoring_InternalChecker
@dynamic displayName, gcpZone, name, network, peerProjectId, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_IstioCanonicalService
//

@implementation GTLRMonitoring_IstioCanonicalService
@dynamic canonicalService, canonicalServiceNamespace, meshUid;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_JsonPathMatcher
//

@implementation GTLRMonitoring_JsonPathMatcher
@dynamic jsonMatcher, jsonPath;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_LabelDescriptor
//

@implementation GTLRMonitoring_LabelDescriptor
@dynamic descriptionProperty, key, valueType;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_LabelValue
//

@implementation GTLRMonitoring_LabelValue
@dynamic boolValue, int64Value, stringValue;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_LatencyCriteria
//

@implementation GTLRMonitoring_LatencyCriteria
@dynamic threshold;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Linear
//

@implementation GTLRMonitoring_Linear
@dynamic numFiniteBuckets, offset, width;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ListAlertPoliciesResponse
//

@implementation GTLRMonitoring_ListAlertPoliciesResponse
@dynamic alertPolicies, nextPageToken, totalSize;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"alertPolicies" : [GTLRMonitoring_AlertPolicy class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"alertPolicies";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ListGroupMembersResponse
//

@implementation GTLRMonitoring_ListGroupMembersResponse
@dynamic members, nextPageToken, totalSize;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"members" : [GTLRMonitoring_MonitoredResource class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"members";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ListGroupsResponse
//

@implementation GTLRMonitoring_ListGroupsResponse
@dynamic group, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"group" : [GTLRMonitoring_Group class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"group";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ListMetricDescriptorsResponse
//

@implementation GTLRMonitoring_ListMetricDescriptorsResponse
@dynamic metricDescriptors, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metricDescriptors" : [GTLRMonitoring_MetricDescriptor class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"metricDescriptors";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ListMonitoredResourceDescriptorsResponse
//

@implementation GTLRMonitoring_ListMonitoredResourceDescriptorsResponse
@dynamic nextPageToken, resourceDescriptors;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resourceDescriptors" : [GTLRMonitoring_MonitoredResourceDescriptor class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"resourceDescriptors";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ListNotificationChannelDescriptorsResponse
//

@implementation GTLRMonitoring_ListNotificationChannelDescriptorsResponse
@dynamic channelDescriptors, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"channelDescriptors" : [GTLRMonitoring_NotificationChannelDescriptor class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"channelDescriptors";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ListNotificationChannelsResponse
//

@implementation GTLRMonitoring_ListNotificationChannelsResponse
@dynamic nextPageToken, notificationChannels, totalSize;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"notificationChannels" : [GTLRMonitoring_NotificationChannel class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"notificationChannels";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ListServiceLevelObjectivesResponse
//

@implementation GTLRMonitoring_ListServiceLevelObjectivesResponse
@dynamic nextPageToken, serviceLevelObjectives;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"serviceLevelObjectives" : [GTLRMonitoring_ServiceLevelObjective class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"serviceLevelObjectives";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ListServicesResponse
//

@implementation GTLRMonitoring_ListServicesResponse
@dynamic nextPageToken, services;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"services" : [GTLRMonitoring_Service class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"services";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ListTimeSeriesResponse
//

@implementation GTLRMonitoring_ListTimeSeriesResponse
@dynamic executionErrors, nextPageToken, timeSeries, unit;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"executionErrors" : [GTLRMonitoring_Status class],
    @"timeSeries" : [GTLRMonitoring_TimeSeries class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ListUptimeCheckConfigsResponse
//

@implementation GTLRMonitoring_ListUptimeCheckConfigsResponse
@dynamic nextPageToken, totalSize, uptimeCheckConfigs;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"uptimeCheckConfigs" : [GTLRMonitoring_UptimeCheckConfig class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"uptimeCheckConfigs";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ListUptimeCheckIpsResponse
//

@implementation GTLRMonitoring_ListUptimeCheckIpsResponse
@dynamic nextPageToken, uptimeCheckIps;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"uptimeCheckIps" : [GTLRMonitoring_UptimeCheckIp class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"uptimeCheckIps";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_LogMatch
//

@implementation GTLRMonitoring_LogMatch
@dynamic filter, labelExtractors;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_LogMatch_LabelExtractors
//

@implementation GTLRMonitoring_LogMatch_LabelExtractors

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_MeshIstio
//

@implementation GTLRMonitoring_MeshIstio
@dynamic meshUid, serviceName, serviceNamespace;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Metric
//

@implementation GTLRMonitoring_Metric
@dynamic labels, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Metric_Labels
//

@implementation GTLRMonitoring_Metric_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_MetricAbsence
//

@implementation GTLRMonitoring_MetricAbsence
@dynamic aggregations, duration, filter, trigger;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"aggregations" : [GTLRMonitoring_Aggregation class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_MetricDescriptor
//

@implementation GTLRMonitoring_MetricDescriptor
@dynamic descriptionProperty, displayName, labels, launchStage, metadata,
         metricKind, monitoredResourceTypes, name, type, unit, valueType;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labels" : [GTLRMonitoring_LabelDescriptor class],
    @"monitoredResourceTypes" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_MetricDescriptorMetadata
//

@implementation GTLRMonitoring_MetricDescriptorMetadata
@dynamic ingestDelay, launchStage, samplePeriod;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_MetricRange
//

@implementation GTLRMonitoring_MetricRange
@dynamic range, timeSeries;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_MetricThreshold
//

@implementation GTLRMonitoring_MetricThreshold
@dynamic aggregations, comparison, denominatorAggregations, denominatorFilter,
         duration, evaluationMissingData, filter, thresholdValue, trigger;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"aggregations" : [GTLRMonitoring_Aggregation class],
    @"denominatorAggregations" : [GTLRMonitoring_Aggregation class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_MonitoredResource
//

@implementation GTLRMonitoring_MonitoredResource
@dynamic labels, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_MonitoredResource_Labels
//

@implementation GTLRMonitoring_MonitoredResource_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_MonitoredResourceDescriptor
//

@implementation GTLRMonitoring_MonitoredResourceDescriptor
@dynamic descriptionProperty, displayName, labels, launchStage, name, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labels" : [GTLRMonitoring_LabelDescriptor class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_MonitoredResourceMetadata
//

@implementation GTLRMonitoring_MonitoredResourceMetadata
@dynamic systemLabels, userLabels;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_MonitoredResourceMetadata_SystemLabels
//

@implementation GTLRMonitoring_MonitoredResourceMetadata_SystemLabels

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_MonitoredResourceMetadata_UserLabels
//

@implementation GTLRMonitoring_MonitoredResourceMetadata_UserLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_MutationRecord
//

@implementation GTLRMonitoring_MutationRecord
@dynamic mutatedBy, mutateTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_NotificationChannel
//

@implementation GTLRMonitoring_NotificationChannel
@dynamic creationRecord, descriptionProperty, displayName, enabled, labels,
         mutationRecords, name, type, userLabels, verificationStatus;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"mutationRecords" : [GTLRMonitoring_MutationRecord class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_NotificationChannel_Labels
//

@implementation GTLRMonitoring_NotificationChannel_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_NotificationChannel_UserLabels
//

@implementation GTLRMonitoring_NotificationChannel_UserLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_NotificationChannelDescriptor
//

@implementation GTLRMonitoring_NotificationChannelDescriptor
@dynamic descriptionProperty, displayName, labels, launchStage, name,
         supportedTiers, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labels" : [GTLRMonitoring_LabelDescriptor class],
    @"supportedTiers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_NotificationRateLimit
//

@implementation GTLRMonitoring_NotificationRateLimit
@dynamic period;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_OperationMetadata
//

@implementation GTLRMonitoring_OperationMetadata
@dynamic createTime, state, updateTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Option
//

@implementation GTLRMonitoring_Option
@dynamic name, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Option_Value
//

@implementation GTLRMonitoring_Option_Value

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_PerformanceThreshold
//

@implementation GTLRMonitoring_PerformanceThreshold
@dynamic basicSliPerformance, performance, threshold;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_PingConfig
//

@implementation GTLRMonitoring_PingConfig
@dynamic pingsCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Point
//

@implementation GTLRMonitoring_Point
@dynamic interval, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_PointData
//

@implementation GTLRMonitoring_PointData
@dynamic timeInterval, values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"values" : [GTLRMonitoring_TypedValue class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_QueryLanguageCondition
//

@implementation GTLRMonitoring_QueryLanguageCondition
@dynamic duration, evaluationMissingData, query, trigger;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_QueryTimeSeriesRequest
//

@implementation GTLRMonitoring_QueryTimeSeriesRequest
@dynamic pageSize, pageToken, query;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_QueryTimeSeriesResponse
//

@implementation GTLRMonitoring_QueryTimeSeriesResponse
@dynamic nextPageToken, partialErrors, timeSeriesData, timeSeriesDescriptor;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"partialErrors" : [GTLRMonitoring_Status class],
    @"timeSeriesData" : [GTLRMonitoring_TimeSeriesData class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Range
//

@implementation GTLRMonitoring_Range
@dynamic max, min;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_RequestBasedSli
//

@implementation GTLRMonitoring_RequestBasedSli
@dynamic distributionCut, goodTotalRatio;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ResourceGroup
//

@implementation GTLRMonitoring_ResourceGroup
@dynamic groupId, resourceType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ResponseStatusCode
//

@implementation GTLRMonitoring_ResponseStatusCode
@dynamic statusClass, statusValue;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_SendNotificationChannelVerificationCodeRequest
//

@implementation GTLRMonitoring_SendNotificationChannelVerificationCodeRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Service
//

@implementation GTLRMonitoring_Service
@dynamic appEngine, basicService, cloudEndpoints, cloudRun, clusterIstio,
         custom, displayName, gkeNamespace, gkeService, gkeWorkload,
         istioCanonicalService, meshIstio, name, telemetry, userLabels;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Service_UserLabels
//

@implementation GTLRMonitoring_Service_UserLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ServiceLevelIndicator
//

@implementation GTLRMonitoring_ServiceLevelIndicator
@dynamic basicSli, requestBased, windowsBased;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ServiceLevelObjective
//

@implementation GTLRMonitoring_ServiceLevelObjective
@dynamic calendarPeriod, displayName, goal, name, rollingPeriod,
         serviceLevelIndicator, userLabels;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ServiceLevelObjective_UserLabels
//

@implementation GTLRMonitoring_ServiceLevelObjective_UserLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_SourceContext
//

@implementation GTLRMonitoring_SourceContext
@dynamic fileName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_SpanContext
//

@implementation GTLRMonitoring_SpanContext
@dynamic spanName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Status
//

@implementation GTLRMonitoring_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRMonitoring_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Status_Details_Item
//

@implementation GTLRMonitoring_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_TcpCheck
//

@implementation GTLRMonitoring_TcpCheck
@dynamic pingConfig, port;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Telemetry
//

@implementation GTLRMonitoring_Telemetry
@dynamic resourceName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_TimeInterval
//

@implementation GTLRMonitoring_TimeInterval
@dynamic endTime, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_TimeSeries
//

@implementation GTLRMonitoring_TimeSeries
@dynamic metadata, metric, metricKind, points, resource, unit, valueType;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"points" : [GTLRMonitoring_Point class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_TimeSeriesData
//

@implementation GTLRMonitoring_TimeSeriesData
@dynamic labelValues, pointData;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labelValues" : [GTLRMonitoring_LabelValue class],
    @"pointData" : [GTLRMonitoring_PointData class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_TimeSeriesDescriptor
//

@implementation GTLRMonitoring_TimeSeriesDescriptor
@dynamic labelDescriptors, pointDescriptors;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labelDescriptors" : [GTLRMonitoring_LabelDescriptor class],
    @"pointDescriptors" : [GTLRMonitoring_ValueDescriptor class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_TimeSeriesRatio
//

@implementation GTLRMonitoring_TimeSeriesRatio
@dynamic badServiceFilter, goodServiceFilter, totalServiceFilter;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Trigger
//

@implementation GTLRMonitoring_Trigger
@dynamic count, percent;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_Type
//

@implementation GTLRMonitoring_Type
@dynamic fields, name, oneofs, options, sourceContext, syntax;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fields" : [GTLRMonitoring_Field class],
    @"oneofs" : [NSString class],
    @"options" : [GTLRMonitoring_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_TypedValue
//

@implementation GTLRMonitoring_TypedValue
@dynamic boolValue, distributionValue, doubleValue, int64Value, stringValue;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_UptimeCheckConfig
//

@implementation GTLRMonitoring_UptimeCheckConfig
@dynamic checkerType, contentMatchers, displayName, httpCheck, internalCheckers,
         isInternal, monitoredResource, name, period, resourceGroup,
         selectedRegions, tcpCheck, timeout, userLabels;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"contentMatchers" : [GTLRMonitoring_ContentMatcher class],
    @"internalCheckers" : [GTLRMonitoring_InternalChecker class],
    @"selectedRegions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_UptimeCheckConfig_UserLabels
//

@implementation GTLRMonitoring_UptimeCheckConfig_UserLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_UptimeCheckIp
//

@implementation GTLRMonitoring_UptimeCheckIp
@dynamic ipAddress, location, region;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_ValueDescriptor
//

@implementation GTLRMonitoring_ValueDescriptor
@dynamic key, metricKind, unit, valueType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_VerifyNotificationChannelRequest
//

@implementation GTLRMonitoring_VerifyNotificationChannelRequest
@dynamic code;
@end


// ----------------------------------------------------------------------------
//
//   GTLRMonitoring_WindowsBasedSli
//

@implementation GTLRMonitoring_WindowsBasedSli
@dynamic goodBadMetricFilter, goodTotalRatioThreshold, metricMeanInRange,
         metricSumInRange, windowPeriod;
@end
