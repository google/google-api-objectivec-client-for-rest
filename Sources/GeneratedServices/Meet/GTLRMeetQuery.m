// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Meet API (meet/v2)
// Description:
//   Create and manage meetings in Google Meet.
// Documentation:
//   https://developers.google.com/meet/api

#import <GoogleAPIClientForREST/GTLRMeetQuery.h>

@implementation GTLRMeetQuery

@dynamic fields;

@end

@implementation GTLRMeetQuery_ConferenceRecordsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRMeetQuery_ConferenceRecordsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRMeet_ConferenceRecord class];
  query.loggingName = @"meet.conferenceRecords.get";
  return query;
}

@end

@implementation GTLRMeetQuery_ConferenceRecordsList

@dynamic filter, pageSize, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"v2/conferenceRecords";
  GTLRMeetQuery_ConferenceRecordsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRMeet_ListConferenceRecordsResponse class];
  query.loggingName = @"meet.conferenceRecords.list";
  return query;
}

@end

@implementation GTLRMeetQuery_ConferenceRecordsParticipantsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRMeetQuery_ConferenceRecordsParticipantsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRMeet_Participant class];
  query.loggingName = @"meet.conferenceRecords.participants.get";
  return query;
}

@end

@implementation GTLRMeetQuery_ConferenceRecordsParticipantsList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/participants";
  GTLRMeetQuery_ConferenceRecordsParticipantsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRMeet_ListParticipantsResponse class];
  query.loggingName = @"meet.conferenceRecords.participants.list";
  return query;
}

@end

@implementation GTLRMeetQuery_ConferenceRecordsParticipantsParticipantSessionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRMeetQuery_ConferenceRecordsParticipantsParticipantSessionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRMeet_ParticipantSession class];
  query.loggingName = @"meet.conferenceRecords.participants.participantSessions.get";
  return query;
}

@end

@implementation GTLRMeetQuery_ConferenceRecordsParticipantsParticipantSessionsList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/participantSessions";
  GTLRMeetQuery_ConferenceRecordsParticipantsParticipantSessionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRMeet_ListParticipantSessionsResponse class];
  query.loggingName = @"meet.conferenceRecords.participants.participantSessions.list";
  return query;
}

@end

@implementation GTLRMeetQuery_ConferenceRecordsRecordingsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRMeetQuery_ConferenceRecordsRecordingsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRMeet_Recording class];
  query.loggingName = @"meet.conferenceRecords.recordings.get";
  return query;
}

@end

@implementation GTLRMeetQuery_ConferenceRecordsRecordingsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/recordings";
  GTLRMeetQuery_ConferenceRecordsRecordingsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRMeet_ListRecordingsResponse class];
  query.loggingName = @"meet.conferenceRecords.recordings.list";
  return query;
}

@end

@implementation GTLRMeetQuery_ConferenceRecordsTranscriptsEntriesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRMeetQuery_ConferenceRecordsTranscriptsEntriesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRMeet_TranscriptEntry class];
  query.loggingName = @"meet.conferenceRecords.transcripts.entries.get";
  return query;
}

@end

@implementation GTLRMeetQuery_ConferenceRecordsTranscriptsEntriesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/entries";
  GTLRMeetQuery_ConferenceRecordsTranscriptsEntriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRMeet_ListTranscriptEntriesResponse class];
  query.loggingName = @"meet.conferenceRecords.transcripts.entries.list";
  return query;
}

@end

@implementation GTLRMeetQuery_ConferenceRecordsTranscriptsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRMeetQuery_ConferenceRecordsTranscriptsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRMeet_Transcript class];
  query.loggingName = @"meet.conferenceRecords.transcripts.get";
  return query;
}

@end

@implementation GTLRMeetQuery_ConferenceRecordsTranscriptsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/transcripts";
  GTLRMeetQuery_ConferenceRecordsTranscriptsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRMeet_ListTranscriptsResponse class];
  query.loggingName = @"meet.conferenceRecords.transcripts.list";
  return query;
}

@end

@implementation GTLRMeetQuery_SpacesCreate

+ (instancetype)queryWithObject:(GTLRMeet_Space *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v2/spaces";
  GTLRMeetQuery_SpacesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRMeet_Space class];
  query.loggingName = @"meet.spaces.create";
  return query;
}

@end

@implementation GTLRMeetQuery_SpacesEndActiveConference

@dynamic name;

+ (instancetype)queryWithObject:(GTLRMeet_EndActiveConferenceRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:endActiveConference";
  GTLRMeetQuery_SpacesEndActiveConference *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRMeet_Empty class];
  query.loggingName = @"meet.spaces.endActiveConference";
  return query;
}

@end

@implementation GTLRMeetQuery_SpacesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRMeetQuery_SpacesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRMeet_Space class];
  query.loggingName = @"meet.spaces.get";
  return query;
}

@end

@implementation GTLRMeetQuery_SpacesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRMeet_Space *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRMeetQuery_SpacesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRMeet_Space class];
  query.loggingName = @"meet.spaces.patch";
  return query;
}

@end
