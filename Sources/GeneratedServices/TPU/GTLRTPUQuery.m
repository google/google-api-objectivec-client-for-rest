// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud TPU API (tpu/v2)
// Description:
//   TPU API provides customers with access to Google TPU technology.
// Documentation:
//   https://cloud.google.com/tpu/

#import <GoogleAPIClientForREST/GTLRTPUQuery.h>

@implementation GTLRTPUQuery

@dynamic fields;

@end

@implementation GTLRTPUQuery_ProjectsLocationsAcceleratorTypesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRTPUQuery_ProjectsLocationsAcceleratorTypesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRTPU_AcceleratorType class];
  query.loggingName = @"tpu.projects.locations.acceleratorTypes.get";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsAcceleratorTypesList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/acceleratorTypes";
  GTLRTPUQuery_ProjectsLocationsAcceleratorTypesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTPU_ListAcceleratorTypesResponse class];
  query.loggingName = @"tpu.projects.locations.acceleratorTypes.list";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsGenerateServiceIdentity

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRTPU_GenerateServiceIdentityRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}:generateServiceIdentity";
  GTLRTPUQuery_ProjectsLocationsGenerateServiceIdentity *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRTPU_GenerateServiceIdentityResponse class];
  query.loggingName = @"tpu.projects.locations.generateServiceIdentity";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRTPUQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRTPU_Location class];
  query.loggingName = @"tpu.projects.locations.get";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/locations";
  GTLRTPUQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRTPU_ListLocationsResponse class];
  query.loggingName = @"tpu.projects.locations.list";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsNodesCreate

@dynamic nodeId, parent;

+ (instancetype)queryWithObject:(GTLRTPU_Node *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/nodes";
  GTLRTPUQuery_ProjectsLocationsNodesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRTPU_Operation class];
  query.loggingName = @"tpu.projects.locations.nodes.create";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsNodesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRTPUQuery_ProjectsLocationsNodesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRTPU_Operation class];
  query.loggingName = @"tpu.projects.locations.nodes.delete";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsNodesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRTPUQuery_ProjectsLocationsNodesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRTPU_Node class];
  query.loggingName = @"tpu.projects.locations.nodes.get";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsNodesGetGuestAttributes

@dynamic name;

+ (instancetype)queryWithObject:(GTLRTPU_GetGuestAttributesRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:getGuestAttributes";
  GTLRTPUQuery_ProjectsLocationsNodesGetGuestAttributes *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRTPU_GetGuestAttributesResponse class];
  query.loggingName = @"tpu.projects.locations.nodes.getGuestAttributes";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsNodesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/nodes";
  GTLRTPUQuery_ProjectsLocationsNodesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTPU_ListNodesResponse class];
  query.loggingName = @"tpu.projects.locations.nodes.list";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsNodesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRTPU_Node *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRTPUQuery_ProjectsLocationsNodesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRTPU_Operation class];
  query.loggingName = @"tpu.projects.locations.nodes.patch";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsNodesStart

@dynamic name;

+ (instancetype)queryWithObject:(GTLRTPU_StartNodeRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:start";
  GTLRTPUQuery_ProjectsLocationsNodesStart *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRTPU_Operation class];
  query.loggingName = @"tpu.projects.locations.nodes.start";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsNodesStop

@dynamic name;

+ (instancetype)queryWithObject:(GTLRTPU_StopNodeRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:stop";
  GTLRTPUQuery_ProjectsLocationsNodesStop *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRTPU_Operation class];
  query.loggingName = @"tpu.projects.locations.nodes.stop";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:cancel";
  GTLRTPUQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRTPU_Empty class];
  query.loggingName = @"tpu.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRTPUQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRTPU_Empty class];
  query.loggingName = @"tpu.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRTPUQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRTPU_Operation class];
  query.loggingName = @"tpu.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/operations";
  GTLRTPUQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRTPU_ListOperationsResponse class];
  query.loggingName = @"tpu.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsRuntimeVersionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRTPUQuery_ProjectsLocationsRuntimeVersionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRTPU_RuntimeVersion class];
  query.loggingName = @"tpu.projects.locations.runtimeVersions.get";
  return query;
}

@end

@implementation GTLRTPUQuery_ProjectsLocationsRuntimeVersionsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/runtimeVersions";
  GTLRTPUQuery_ProjectsLocationsRuntimeVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTPU_ListRuntimeVersionsResponse class];
  query.loggingName = @"tpu.projects.locations.runtimeVersions.list";
  return query;
}

@end
