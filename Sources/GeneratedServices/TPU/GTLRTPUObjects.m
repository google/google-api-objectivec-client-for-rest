// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud TPU API (tpu/v2)
// Description:
//   TPU API provides customers with access to Google TPU technology.
// Documentation:
//   https://cloud.google.com/tpu/

#import <GoogleAPIClientForREST/GTLRTPUObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRTPU_AttachedDisk.mode
NSString * const kGTLRTPU_AttachedDisk_Mode_DiskModeUnspecified = @"DISK_MODE_UNSPECIFIED";
NSString * const kGTLRTPU_AttachedDisk_Mode_ReadOnly           = @"READ_ONLY";
NSString * const kGTLRTPU_AttachedDisk_Mode_ReadWrite          = @"READ_WRITE";

// GTLRTPU_Node.apiVersion
NSString * const kGTLRTPU_Node_ApiVersion_ApiVersionUnspecified = @"API_VERSION_UNSPECIFIED";
NSString * const kGTLRTPU_Node_ApiVersion_V1                   = @"V1";
NSString * const kGTLRTPU_Node_ApiVersion_V1Alpha1             = @"V1_ALPHA1";
NSString * const kGTLRTPU_Node_ApiVersion_V2                   = @"V2";
NSString * const kGTLRTPU_Node_ApiVersion_V2Alpha1             = @"V2_ALPHA1";

// GTLRTPU_Node.health
NSString * const kGTLRTPU_Node_Health_HealthUnspecified    = @"HEALTH_UNSPECIFIED";
NSString * const kGTLRTPU_Node_Health_Healthy              = @"HEALTHY";
NSString * const kGTLRTPU_Node_Health_Timeout              = @"TIMEOUT";
NSString * const kGTLRTPU_Node_Health_UnhealthyMaintenance = @"UNHEALTHY_MAINTENANCE";
NSString * const kGTLRTPU_Node_Health_UnhealthyTensorflow  = @"UNHEALTHY_TENSORFLOW";

// GTLRTPU_Node.state
NSString * const kGTLRTPU_Node_State_Creating         = @"CREATING";
NSString * const kGTLRTPU_Node_State_Deleting         = @"DELETING";
NSString * const kGTLRTPU_Node_State_Hidden           = @"HIDDEN";
NSString * const kGTLRTPU_Node_State_Hiding           = @"HIDING";
NSString * const kGTLRTPU_Node_State_Preempted        = @"PREEMPTED";
NSString * const kGTLRTPU_Node_State_Ready            = @"READY";
NSString * const kGTLRTPU_Node_State_Reimaging        = @"REIMAGING";
NSString * const kGTLRTPU_Node_State_Repairing        = @"REPAIRING";
NSString * const kGTLRTPU_Node_State_Restarting       = @"RESTARTING";
NSString * const kGTLRTPU_Node_State_Starting         = @"STARTING";
NSString * const kGTLRTPU_Node_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRTPU_Node_State_Stopped          = @"STOPPED";
NSString * const kGTLRTPU_Node_State_Stopping         = @"STOPPING";
NSString * const kGTLRTPU_Node_State_Terminated       = @"TERMINATED";
NSString * const kGTLRTPU_Node_State_Unhiding         = @"UNHIDING";

// GTLRTPU_Symptom.symptomType
NSString * const kGTLRTPU_Symptom_SymptomType_ExecuteTimedOut  = @"EXECUTE_TIMED_OUT";
NSString * const kGTLRTPU_Symptom_SymptomType_HbmOutOfMemory   = @"HBM_OUT_OF_MEMORY";
NSString * const kGTLRTPU_Symptom_SymptomType_LowMemory        = @"LOW_MEMORY";
NSString * const kGTLRTPU_Symptom_SymptomType_MeshBuildFail    = @"MESH_BUILD_FAIL";
NSString * const kGTLRTPU_Symptom_SymptomType_OutOfMemory      = @"OUT_OF_MEMORY";
NSString * const kGTLRTPU_Symptom_SymptomType_ProjectAbuse     = @"PROJECT_ABUSE";
NSString * const kGTLRTPU_Symptom_SymptomType_SymptomTypeUnspecified = @"SYMPTOM_TYPE_UNSPECIFIED";

// ----------------------------------------------------------------------------
//
//   GTLRTPU_AcceleratorType
//

@implementation GTLRTPU_AcceleratorType
@dynamic name, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_AccessConfig
//

@implementation GTLRTPU_AccessConfig
@dynamic externalIp;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_AttachedDisk
//

@implementation GTLRTPU_AttachedDisk
@dynamic mode, sourceDisk;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_Empty
//

@implementation GTLRTPU_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_GenerateServiceIdentityRequest
//

@implementation GTLRTPU_GenerateServiceIdentityRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_GenerateServiceIdentityResponse
//

@implementation GTLRTPU_GenerateServiceIdentityResponse
@dynamic identity;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_GetGuestAttributesRequest
//

@implementation GTLRTPU_GetGuestAttributesRequest
@dynamic queryPath, workerIds;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"workerIds" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_GetGuestAttributesResponse
//

@implementation GTLRTPU_GetGuestAttributesResponse
@dynamic guestAttributes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"guestAttributes" : [GTLRTPU_GuestAttributes class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_GuestAttributes
//

@implementation GTLRTPU_GuestAttributes
@dynamic queryPath, queryValue;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_GuestAttributesEntry
//

@implementation GTLRTPU_GuestAttributesEntry
@dynamic key, namespaceProperty, value;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"namespaceProperty" : @"namespace" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_GuestAttributesValue
//

@implementation GTLRTPU_GuestAttributesValue
@dynamic items;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRTPU_GuestAttributesEntry class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_ListAcceleratorTypesResponse
//

@implementation GTLRTPU_ListAcceleratorTypesResponse
@dynamic acceleratorTypes, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"acceleratorTypes" : [GTLRTPU_AcceleratorType class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"acceleratorTypes";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_ListLocationsResponse
//

@implementation GTLRTPU_ListLocationsResponse
@dynamic locations, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"locations" : [GTLRTPU_Location class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"locations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_ListNodesResponse
//

@implementation GTLRTPU_ListNodesResponse
@dynamic nextPageToken, nodes, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"nodes" : [GTLRTPU_Node class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"nodes";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_ListOperationsResponse
//

@implementation GTLRTPU_ListOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRTPU_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_ListRuntimeVersionsResponse
//

@implementation GTLRTPU_ListRuntimeVersionsResponse
@dynamic nextPageToken, runtimeVersions, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"runtimeVersions" : [GTLRTPU_RuntimeVersion class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"runtimeVersions";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_Location
//

@implementation GTLRTPU_Location
@dynamic displayName, labels, locationId, metadata, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_Location_Labels
//

@implementation GTLRTPU_Location_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_Location_Metadata
//

@implementation GTLRTPU_Location_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_NetworkConfig
//

@implementation GTLRTPU_NetworkConfig
@dynamic canIpForward, enableExternalIps, network, subnetwork;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_NetworkEndpoint
//

@implementation GTLRTPU_NetworkEndpoint
@dynamic accessConfig, ipAddress, port;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_Node
//

@implementation GTLRTPU_Node
@dynamic acceleratorType, apiVersion, cidrBlock, createTime, dataDisks,
         descriptionProperty, health, healthDescription, identifier, labels,
         metadata, name, networkConfig, networkEndpoints, runtimeVersion,
         schedulingConfig, serviceAccount, shieldedInstanceConfig, state,
         symptoms, tags;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"identifier" : @"id"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dataDisks" : [GTLRTPU_AttachedDisk class],
    @"networkEndpoints" : [GTLRTPU_NetworkEndpoint class],
    @"symptoms" : [GTLRTPU_Symptom class],
    @"tags" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_Node_Labels
//

@implementation GTLRTPU_Node_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_Node_Metadata
//

@implementation GTLRTPU_Node_Metadata

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_Operation
//

@implementation GTLRTPU_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_Operation_Metadata
//

@implementation GTLRTPU_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_Operation_Response
//

@implementation GTLRTPU_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_OperationMetadata
//

@implementation GTLRTPU_OperationMetadata
@dynamic apiVersion, cancelRequested, createTime, endTime, statusDetail, target,
         verb;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_RuntimeVersion
//

@implementation GTLRTPU_RuntimeVersion
@dynamic name, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_SchedulingConfig
//

@implementation GTLRTPU_SchedulingConfig
@dynamic preemptible, reserved;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_ServiceAccount
//

@implementation GTLRTPU_ServiceAccount
@dynamic email, scope;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"scope" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_ServiceIdentity
//

@implementation GTLRTPU_ServiceIdentity
@dynamic email;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_ShieldedInstanceConfig
//

@implementation GTLRTPU_ShieldedInstanceConfig
@dynamic enableSecureBoot;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_StartNodeRequest
//

@implementation GTLRTPU_StartNodeRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_Status
//

@implementation GTLRTPU_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRTPU_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_Status_Details_Item
//

@implementation GTLRTPU_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_StopNodeRequest
//

@implementation GTLRTPU_StopNodeRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRTPU_Symptom
//

@implementation GTLRTPU_Symptom
@dynamic createTime, details, symptomType, workerId;
@end
