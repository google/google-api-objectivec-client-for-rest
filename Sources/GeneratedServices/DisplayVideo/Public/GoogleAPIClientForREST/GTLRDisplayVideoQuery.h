// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Display & Video 360 API (displayvideo/v4)
// Description:
//   Display & Video 360 API allows users to automate complex Display & Video
//   360 workflows, such as creating insertion orders and setting targeting
//   options for individual line items.
// Documentation:
//   https://developers.google.com/display-video/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRDisplayVideoObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Display Video query classes.
 */
@interface GTLRDisplayVideoQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Downloads media. Download is supported on the URI
 *  `/download/{resource_name=**}?alt=media.` **Note**: Download requests will
 *  not be successful without including `alt=media` query string.
 *
 *  Method: displayvideo.media.download
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDisplayVideoDisplayVideo
 *    @c kGTLRAuthScopeDisplayVideoDoubleclickbidmanager
 */
@interface GTLRDisplayVideoQuery_MediaDownload : GTLRDisplayVideoQuery

/**
 *  Name of the media that is being downloaded. See ReadRequest.resource_name.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Fetches a @c GTLRDisplayVideo_GoogleBytestreamMedia.
 *
 *  Downloads media. Download is supported on the URI
 *  `/download/{resource_name=**}?alt=media.` **Note**: Download requests will
 *  not be successful without including `alt=media` query string.
 *
 *  @param resourceName Name of the media that is being downloaded. See
 *    ReadRequest.resource_name.
 *
 *  @return GTLRDisplayVideoQuery_MediaDownload
 */
+ (instancetype)queryWithResourceName:(NSString *)resourceName;

/**
 *  Fetches the requested resource data as a @c GTLRDataObject.
 *
 *  Downloads media. Download is supported on the URI
 *  `/download/{resource_name=**}?alt=media.` **Note**: Download requests will
 *  not be successful without including `alt=media` query string.
 *
 *  @param resourceName Name of the media that is being downloaded. See
 *    ReadRequest.resource_name.
 *
 *  @return GTLRDisplayVideoQuery_MediaDownload
 */
+ (instancetype)queryForMediaWithResourceName:(NSString *)resourceName;

@end

/**
 *  Uploads media. Upload is supported on the URI
 *  `/upload/media/{resource_name=**}?upload_type=media.` **Note**: Upload
 *  requests will not be successful without including `upload_type=media` query
 *  string.
 *
 *  Method: displayvideo.media.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDisplayVideoDisplayVideo
 *    @c kGTLRAuthScopeDisplayVideoDoubleclickbidmanager
 */
@interface GTLRDisplayVideoQuery_MediaUpload : GTLRDisplayVideoQuery

/**
 *  Name of the media that is being downloaded. See ReadRequest.resource_name.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Fetches a @c GTLRDisplayVideo_GoogleBytestreamMedia.
 *
 *  Uploads media. Upload is supported on the URI
 *  `/upload/media/{resource_name=**}?upload_type=media.` **Note**: Upload
 *  requests will not be successful without including `upload_type=media` query
 *  string.
 *
 *  @param object The @c GTLRDisplayVideo_GoogleBytestreamMedia to include in
 *    the query.
 *  @param resourceName Name of the media that is being downloaded. See
 *    ReadRequest.resource_name.
 *  @param uploadParameters The media to include in this query. Accepted MIME
 *    type: * / *
 *
 *  @return GTLRDisplayVideoQuery_MediaUpload
 */
+ (instancetype)queryWithObject:(GTLRDisplayVideo_GoogleBytestreamMedia *)object
                   resourceName:(NSString *)resourceName
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Gets the latest state of an asynchronous SDF download task operation.
 *  Clients should poll this method at intervals of 30 seconds.
 *
 *  Method: displayvideo.sdfdownloadtasks.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDisplayVideoDisplayVideo
 *    @c kGTLRAuthScopeDisplayVideoDoubleclickbidmanager
 */
@interface GTLRDisplayVideoQuery_SdfdownloadtasksOperationsGet : GTLRDisplayVideoQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDisplayVideo_Operation.
 *
 *  Gets the latest state of an asynchronous SDF download task operation.
 *  Clients should poll this method at intervals of 30 seconds.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDisplayVideoQuery_SdfdownloadtasksOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
