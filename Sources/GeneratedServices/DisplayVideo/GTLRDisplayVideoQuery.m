// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Display & Video 360 API (displayvideo/v4)
// Description:
//   Display & Video 360 API allows users to automate complex Display & Video
//   360 workflows, such as creating insertion orders and setting targeting
//   options for individual line items.
// Documentation:
//   https://developers.google.com/display-video/

#import <GoogleAPIClientForREST/GTLRDisplayVideoQuery.h>

@implementation GTLRDisplayVideoQuery

@dynamic fields;

@end

@implementation GTLRDisplayVideoQuery_MediaDownload

@dynamic resourceName;

+ (instancetype)queryWithResourceName:(NSString *)resourceName {
  NSArray *pathParams = @[ @"resourceName" ];
  NSString *pathURITemplate = @"download/{+resourceName}";
  GTLRDisplayVideoQuery_MediaDownload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceName = resourceName;
  query.expectedObjectClass = [GTLRDisplayVideo_GoogleBytestreamMedia class];
  query.loggingName = @"displayvideo.media.download";
  return query;
}

+ (instancetype)queryForMediaWithResourceName:(NSString *)resourceName {
  GTLRDisplayVideoQuery_MediaDownload *query =
    [self queryWithResourceName:resourceName];
  query.downloadAsDataObjectType = @"media";
  query.loggingName = @"Download displayvideo.media.download";
  return query;
}

@end

@implementation GTLRDisplayVideoQuery_MediaUpload

@dynamic resourceName;

+ (instancetype)queryWithObject:(GTLRDisplayVideo_GoogleBytestreamMedia *)object
                   resourceName:(NSString *)resourceName
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceName" ];
  NSString *pathURITemplate = @"media/{+resourceName}";
  GTLRDisplayVideoQuery_MediaUpload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceName = resourceName;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRDisplayVideo_GoogleBytestreamMedia class];
  query.loggingName = @"displayvideo.media.upload";
  return query;
}

@end

@implementation GTLRDisplayVideoQuery_SdfdownloadtasksOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v4/{+name}";
  GTLRDisplayVideoQuery_SdfdownloadtasksOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDisplayVideo_Operation class];
  query.loggingName = @"displayvideo.sdfdownloadtasks.operations.get";
  return query;
}

@end
