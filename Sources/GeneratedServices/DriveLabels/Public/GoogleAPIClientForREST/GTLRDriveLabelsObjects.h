// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Drive Labels API (drivelabels/v2)
// Description:
//   An API for managing Drive Labels
// Documentation:
//   https://developers.google.com/drive/labels

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDriveLabels_GoogleAppsDriveLabelsV2BadgeColors;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2BadgeConfig;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2Field;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldAppliedCapabilities;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldDateOptions;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldDisplayHints;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldIntegerOptions;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldListOptions;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldProperties;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSchemaCapabilities;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptions;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptionsChoice;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptionsChoiceAppliedCapabilities;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptionsChoiceDisplayHints;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptionsChoiceProperties;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptionsChoiceSchemaCapabilities;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldTextOptions;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldUserOptions;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2Label;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelAppliedCapabilities;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelDisplayHints;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelProperties;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelSchemaCapabilities;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2Lifecycle;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2LifecycleDisabledPolicy;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2LockStatus;
@class GTLRDriveLabels_GoogleAppsDriveLabelsV2UserInfo;
@class GTLRDriveLabels_GoogleTypeColor;
@class GTLRDriveLabels_GoogleTypeDate;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldDateOptions.dateFormatType

/**
 *  Date format unspecified.
 *
 *  Value: "DATE_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabels_GoogleAppsDriveLabelsV2FieldDateOptions_DateFormatType_DateFormatUnspecified;
/**
 *  Includes full month name. For example, January 12, 1999 (MMMM d, y)
 *
 *  Value: "LONG_DATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabels_GoogleAppsDriveLabelsV2FieldDateOptions_DateFormatType_LongDate;
/**
 *  Short, numeric, representation. For example, 12/13/99 (M/d/yy)
 *
 *  Value: "SHORT_DATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabels_GoogleAppsDriveLabelsV2FieldDateOptions_DateFormatType_ShortDate;

// ----------------------------------------------------------------------------
// GTLRDriveLabels_GoogleAppsDriveLabelsV2Label.labelType

/**
 *  Admin-owned label. Only creatable and editable by admins. Supports some
 *  additional admin-only features.
 *
 *  Value: "ADMIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabels_GoogleAppsDriveLabelsV2Label_LabelType_Admin;
/**
 *  Unknown label type.
 *
 *  Value: "LABEL_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabels_GoogleAppsDriveLabelsV2Label_LabelType_LabelTypeUnspecified;
/**
 *  Shared labels may be shared with users to apply to Drive items.
 *
 *  Value: "SHARED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabels_GoogleAppsDriveLabelsV2Label_LabelType_Shared;

// ----------------------------------------------------------------------------
// GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy.copyMode

/**
 *  The applied label and field values are always copied when the Drive item
 *  it's applied to is copied. Only admins can use this mode.
 *
 *  Value: "ALWAYS_COPY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabels_GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy_CopyMode_AlwaysCopy;
/**
 *  The applied label and field values are copied if the label is appliable by
 *  the user making the copy.
 *
 *  Value: "COPY_APPLIABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabels_GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy_CopyMode_CopyAppliable;
/**
 *  Copy mode unspecified.
 *
 *  Value: "COPY_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabels_GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy_CopyMode_CopyModeUnspecified;
/**
 *  The applied label and field values are not copied by default when the Drive
 *  item it's applied to is copied.
 *
 *  Value: "DO_NOT_COPY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabels_GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy_CopyMode_DoNotCopy;

// ----------------------------------------------------------------------------
// GTLRDriveLabels_GoogleAppsDriveLabelsV2Lifecycle.state

/**
 *  The object has been deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabels_GoogleAppsDriveLabelsV2Lifecycle_State_Deleted;
/**
 *  The object has been published and has since been disabled. The object might
 *  have unpublished draft changes as indicated by `has_unpublished_changes`.
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabels_GoogleAppsDriveLabelsV2Lifecycle_State_Disabled;
/**
 *  The object has been published. The object might have unpublished draft
 *  changes as indicated by `has_unpublished_changes`.
 *
 *  Value: "PUBLISHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabels_GoogleAppsDriveLabelsV2Lifecycle_State_Published;
/**
 *  Unknown State.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabels_GoogleAppsDriveLabelsV2Lifecycle_State_StateUnspecified;
/**
 *  The initial state of an object. Once published, the object can never return
 *  to this state. Once an object is published, certain kinds of changes are no
 *  longer permitted.
 *
 *  Value: "UNPUBLISHED_DRAFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabels_GoogleAppsDriveLabelsV2Lifecycle_State_UnpublishedDraft;

/**
 *  The color derived from BadgeConfig and changed to the closest recommended
 *  supported color.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2BadgeColors : GTLRObject

/** Output only. Badge background that pairs with the foreground. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleTypeColor *backgroundColor;

/** Output only. Badge foreground that pairs with the background. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleTypeColor *foregroundColor;

/** Output only. Color that can be used for text without a background. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleTypeColor *soloColor;

@end


/**
 *  Badge status of the label.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2BadgeConfig : GTLRObject

/**
 *  The color of the badge. When not specified, no badge is rendered. The
 *  background, foreground, and solo (light and dark mode) colors set here are
 *  changed in the Drive UI into the closest recommended supported color.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleTypeColor *color;

/**
 *  Override the default global priority of this badge. When set to 0, the
 *  default priority heuristic is used.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *priorityOverride;

@end


/**
 *  Defines a field that has a display name, data type, and other configuration
 *  options. This field defines the kind of metadata that may be set on a Drive
 *  item.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2Field : GTLRObject

/**
 *  Output only. The capabilities this user has on this field and its value when
 *  the label is applied on Drive items.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldAppliedCapabilities *appliedCapabilities;

/** Output only. The time this field was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The user who created this field. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2UserInfo *creator;

/** Date field options. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldDateOptions *dateOptions;

/**
 *  Output only. The user who disabled this field. This value has no meaning
 *  when the field is not disabled.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2UserInfo *disabler;

/**
 *  Output only. The time this field was disabled. This value has no meaning
 *  when the field is not disabled.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *disableTime;

/** Output only. UI display hints for rendering a field. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldDisplayHints *displayHints;

/**
 *  Output only. The key of a field, unique within a label or library. This
 *  value is autogenerated. Matches the regex: `([a-zA-Z0-9])+`
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Integer field options. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldIntegerOptions *integerOptions;

/** Output only. The lifecycle of this field. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2Lifecycle *lifecycle;

/** Output only. The LockStatus of this field. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2LockStatus *lockStatus;

/** The basic properties of the field. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldProperties *properties;

/**
 *  Output only. The user who published this field. This value has no meaning
 *  when the field is not published.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2UserInfo *publisher;

/**
 *  Output only. The key to use when constructing Drive search queries to find
 *  files based on values defined for this field on files. For example,
 *  "`{query_key}` > 2001-01-01".
 */
@property(nonatomic, copy, nullable) NSString *queryKey;

/** Output only. The capabilities this user has when editing this field. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSchemaCapabilities *schemaCapabilities;

/** Selection field options. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptions *selectionOptions;

/** Text field options. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldTextOptions *textOptions;

/** Output only. The user who modified this field. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2UserInfo *updater;

/** Output only. The time this field was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** User field options. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldUserOptions *userOptions;

@end


/**
 *  The capabilities related to this field on applied metadata.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldAppliedCapabilities : GTLRObject

/**
 *  Whether the user can read related applied metadata on items.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canRead;

/**
 *  Whether the user can search for Drive items referencing this field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canSearch;

/**
 *  Whether the user can set this field on Drive items.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canWrite;

@end


/**
 *  Options for the date field type.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldDateOptions : GTLRObject

/** Output only. ICU date format. */
@property(nonatomic, copy, nullable) NSString *dateFormat;

/**
 *  Localized date formatting option. Field values are rendered in this format
 *  according to their locale.
 *
 *  Likely values:
 *    @arg @c kGTLRDriveLabels_GoogleAppsDriveLabelsV2FieldDateOptions_DateFormatType_DateFormatUnspecified
 *        Date format unspecified. (Value: "DATE_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRDriveLabels_GoogleAppsDriveLabelsV2FieldDateOptions_DateFormatType_LongDate
 *        Includes full month name. For example, January 12, 1999 (MMMM d, y)
 *        (Value: "LONG_DATE")
 *    @arg @c kGTLRDriveLabels_GoogleAppsDriveLabelsV2FieldDateOptions_DateFormatType_ShortDate
 *        Short, numeric, representation. For example, 12/13/99 (M/d/yy) (Value:
 *        "SHORT_DATE")
 */
@property(nonatomic, copy, nullable) NSString *dateFormatType;

/** Output only. Maximum valid value (year, month, day). */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleTypeDate *maxValue;

/** Output only. Minimum valid value (year, month, day). */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleTypeDate *minValue;

@end


/**
 *  UI display hints for rendering a field.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldDisplayHints : GTLRObject

/**
 *  Whether the field should be shown in the UI as disabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

/**
 *  This field should be hidden in the search menu when searching for Drive
 *  items.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hiddenInSearch;

/**
 *  Whether the field should be shown as required in the UI.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *required;

/**
 *  This field should be shown in the apply menu when applying values to a Drive
 *  item.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shownInApply;

@end


/**
 *  Options for the Integer field type.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldIntegerOptions : GTLRObject

/**
 *  Output only. The maximum valid value for the integer field.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxValue;

/**
 *  Output only. The minimum valid value for the integer field.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minValue;

@end


/**
 *  Options for a multi-valued variant of an associated field type.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldListOptions : GTLRObject

/**
 *  Maximum number of entries permitted.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxEntries;

@end


/**
 *  The basic properties of the field.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldProperties : GTLRObject

/** Required. The display text to show in the UI identifying this field. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Input only. Insert or move this field before the indicated field. If empty,
 *  the field is placed at the end of the list.
 */
@property(nonatomic, copy, nullable) NSString *insertBeforeField;

/**
 *  Whether the field should be marked as required.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *required;

@end


/**
 *  The capabilities related to this field when editing the field.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSchemaCapabilities : GTLRObject

/**
 *  Whether the user can delete this field. The user must have permission and
 *  the field must be deprecated.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canDelete;

/**
 *  Whether the user can disable this field. The user must have permission and
 *  this field must not already be disabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canDisable;

/**
 *  Whether the user can enable this field. The user must have permission and
 *  this field must be disabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canEnable;

/**
 *  Whether the user can change this field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canUpdate;

@end


/**
 *  Options for the selection field type.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptions : GTLRObject

/**
 *  The options available for this selection field. The list order is
 *  consistent, and modified with `insert_before_choice`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptionsChoice *> *choices;

/**
 *  When specified, indicates this field supports a list of values. Once the
 *  field is published, this cannot be changed.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldListOptions *listOptions;

@end


/**
 *  Selection field choice.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptionsChoice : GTLRObject

/**
 *  Output only. The capabilities related to this choice on applied metadata.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptionsChoiceAppliedCapabilities *appliedCapabilities;

/** Output only. The time this choice was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The user who created this choice. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2UserInfo *creator;

/**
 *  Output only. The user who disabled this choice. This value has no meaning
 *  when the option is not disabled.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2UserInfo *disabler;

/**
 *  Output only. The time this choice was disabled. This value has no meaning
 *  when the choice is not disabled.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *disableTime;

/** Output only. UI display hints for rendering a choice. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptionsChoiceDisplayHints *displayHints;

/**
 *  The unique value of the choice. This ID is autogenerated. Matches the regex:
 *  `([a-zA-Z0-9_])+`.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Output only. Lifecycle of the choice. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2Lifecycle *lifecycle;

/** Output only. The LockStatus of this choice. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2LockStatus *lockStatus;

/** Basic properties of the choice. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptionsChoiceProperties *properties;

/**
 *  Output only. The user who published this choice. This value has no meaning
 *  when the choice is not published.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2UserInfo *publisher;

/**
 *  Output only. The time this choice was published. This value has no meaning
 *  when the choice is not published.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishTime;

/**
 *  Output only. The capabilities related to this option when editing the
 *  option.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptionsChoiceSchemaCapabilities *schemaCapabilities;

/** Output only. The user who updated this choice last. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2UserInfo *updater;

/** Output only. The time this choice was updated last. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  The capabilities related to this choice on applied metadata.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptionsChoiceAppliedCapabilities : GTLRObject

/**
 *  Whether the user can read related applied metadata on items.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canRead;

/**
 *  Whether the user can use this choice in search queries.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canSearch;

/**
 *  Whether the user can select this choice on an item.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canSelect;

@end


/**
 *  UI display hints for rendering an option.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptionsChoiceDisplayHints : GTLRObject

/**
 *  The colors to use for the badge. Changed to Google Material colors based on
 *  the chosen `properties.badge_config.color`.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2BadgeColors *badgeColors;

/**
 *  The priority of this badge. Used to compare and sort between multiple
 *  badges. A lower number means the badge should be shown first. When a badging
 *  configuration is not present, this will be 0. Otherwise, this will be set to
 *  `BadgeConfig.priority_override` or the default heuristic which prefers
 *  creation date of the label, and field and option priority.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *badgePriority;

/**
 *  The dark-mode color to use for the badge. Changed to Google Material colors
 *  based on the chosen `properties.badge_config.color`.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2BadgeColors *darkBadgeColors;

/**
 *  Whether the option should be shown in the UI as disabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

/**
 *  This option should be hidden in the search menu when searching for Drive
 *  items.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hiddenInSearch;

/**
 *  This option should be shown in the apply menu when applying values to a
 *  Drive item.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shownInApply;

@end


/**
 *  Basic properties of the choice.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptionsChoiceProperties : GTLRObject

/**
 *  The badge configuration for this choice. When set, the label that owns this
 *  choice is considered a "badged label".
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2BadgeConfig *badgeConfig;

/**
 *  The description of this label.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Required. The display text to show in the UI identifying this field. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Input only. Insert or move this choice before the indicated choice. If
 *  empty, the choice is placed at the end of the list.
 */
@property(nonatomic, copy, nullable) NSString *insertBeforeChoice;

@end


/**
 *  The capabilities related to this choice when editing the choice.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldSelectionOptionsChoiceSchemaCapabilities : GTLRObject

/**
 *  Whether the user can delete this choice.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canDelete;

/**
 *  Whether the user can disable this choice.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canDisable;

/**
 *  Whether the user can enable this choice.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canEnable;

/**
 *  Whether the user can update this choice.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canUpdate;

@end


/**
 *  Options for the Text field type.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldTextOptions : GTLRObject

/**
 *  Output only. The maximum valid length of values for the text field.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxLength;

/**
 *  Output only. The minimum valid length of values for the text field.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minLength;

@end


/**
 *  Options for the user field type.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldUserOptions : GTLRObject

/**
 *  When specified, indicates that this field supports a list of values. Once
 *  the field is published, this cannot be changed.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2FieldListOptions *listOptions;

@end


/**
 *  A label defines a taxonomy that can be applied to Drive items in order to
 *  organize and search across items. Labels can be simple strings, or can
 *  contain fields that describe additional metadata that can be further used to
 *  organize and search Drive items.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2Label : GTLRObject

/**
 *  Output only. The capabilities related to this label on applied metadata.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelAppliedCapabilities *appliedCapabilities;

/** Output only. Behavior of this label when it's applied to Drive items. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy *appliedLabelPolicy;

/** Output only. The time this label was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The user who created this label. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2UserInfo *creator;

/**
 *  Output only. The user who disabled this label. This value has no meaning
 *  when the label is not disabled.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2UserInfo *disabler;

/**
 *  Output only. The time this label was disabled. This value has no meaning
 *  when the label is not disabled.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *disableTime;

/** Output only. UI display hints for rendering the label. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelDisplayHints *displayHints;

/** List of fields in descending priority order. */
@property(nonatomic, strong, nullable) NSArray<GTLRDriveLabels_GoogleAppsDriveLabelsV2Field *> *fields;

/**
 *  Output only. Globally unique identifier of this label. ID makes up part of
 *  the label `name`, but unlike `name`, ID is consistent between revisions.
 *  Matches the regex: `([a-zA-Z0-9])+`
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Required. The type of label.
 *
 *  Likely values:
 *    @arg @c kGTLRDriveLabels_GoogleAppsDriveLabelsV2Label_LabelType_Admin
 *        Admin-owned label. Only creatable and editable by admins. Supports
 *        some additional admin-only features. (Value: "ADMIN")
 *    @arg @c kGTLRDriveLabels_GoogleAppsDriveLabelsV2Label_LabelType_LabelTypeUnspecified
 *        Unknown label type. (Value: "LABEL_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDriveLabels_GoogleAppsDriveLabelsV2Label_LabelType_Shared
 *        Shared labels may be shared with users to apply to Drive items.
 *        (Value: "SHARED")
 */
@property(nonatomic, copy, nullable) NSString *labelType;

/**
 *  Custom URL to present to users to allow them to learn more about this label
 *  and how it should be used.
 */
@property(nonatomic, copy, nullable) NSString *learnMoreUri;

/**
 *  Output only. The lifecycle state of the label including whether it's
 *  published, deprecated, and has draft changes.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2Lifecycle *lifecycle;

/** Output only. The LockStatus of this label. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2LockStatus *lockStatus;

/**
 *  Output only. Resource name of the label. Will be in the form of either:
 *  `labels/{id}` or `labels/{id}\@{revision_id}` depending on the request. See
 *  `id` and `revision_id` below.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. The basic properties of the label. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelProperties *properties;

/**
 *  Output only. The user who published this label. This value has no meaning
 *  when the label is not published.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2UserInfo *publisher;

/**
 *  Output only. The time this label was published. This value has no meaning
 *  when the label is not published.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *publishTime;

/** Output only. The time this label revision was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *revisionCreateTime;

/** Output only. The user who created this label revision. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2UserInfo *revisionCreator;

/**
 *  Output only. Revision ID of the label. Revision ID might be part of the
 *  label `name` depending on the request issued. A new revision is created
 *  whenever revisioned properties of a label are changed. Matches the regex:
 *  `([a-zA-Z0-9])+`
 */
@property(nonatomic, copy, nullable) NSString *revisionId;

/** Output only. The capabilities the user has on this label. */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelSchemaCapabilities *schemaCapabilities;

@end


/**
 *  The capabilities a user has on this label's applied metadata.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelAppliedCapabilities : GTLRObject

/**
 *  Whether the user can apply this label to items.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canApply;

/**
 *  Whether the user can read applied metadata related to this label.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canRead;

/**
 *  Whether the user can remove this label from items.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canRemove;

@end


/**
 *  Behavior of this label when it's applied to Drive items.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy : GTLRObject

/**
 *  Indicates how the applied label and field values should be copied when a
 *  Drive item is copied.
 *
 *  Likely values:
 *    @arg @c kGTLRDriveLabels_GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy_CopyMode_AlwaysCopy
 *        The applied label and field values are always copied when the Drive
 *        item it's applied to is copied. Only admins can use this mode. (Value:
 *        "ALWAYS_COPY")
 *    @arg @c kGTLRDriveLabels_GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy_CopyMode_CopyAppliable
 *        The applied label and field values are copied if the label is
 *        appliable by the user making the copy. (Value: "COPY_APPLIABLE")
 *    @arg @c kGTLRDriveLabels_GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy_CopyMode_CopyModeUnspecified
 *        Copy mode unspecified. (Value: "COPY_MODE_UNSPECIFIED")
 *    @arg @c kGTLRDriveLabels_GoogleAppsDriveLabelsV2LabelAppliedLabelPolicy_CopyMode_DoNotCopy
 *        The applied label and field values are not copied by default when the
 *        Drive item it's applied to is copied. (Value: "DO_NOT_COPY")
 */
@property(nonatomic, copy, nullable) NSString *copyMode NS_RETURNS_NOT_RETAINED;

@end


/**
 *  UI display hints for rendering the label.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelDisplayHints : GTLRObject

/**
 *  Whether the label should be shown in the UI as disabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

/**
 *  This label should be hidden in the search menu when searching for Drive
 *  items.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hiddenInSearch;

/**
 *  Order to display label in a list.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *priority;

/**
 *  This label should be shown in the apply menu when applying values to a Drive
 *  item.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shownInApply;

@end


/**
 *  Basic properties of the label.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelProperties : GTLRObject

/**
 *  The description of the label.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Required. Title of the label. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  The capabilities related to this label when editing the label.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelSchemaCapabilities : GTLRObject

/**
 *  Whether the user can delete this label. The user must have permission and
 *  the label must be disabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canDelete;

/**
 *  Whether the user can disable this label. The user must have permission and
 *  this label must not already be disabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canDisable;

/**
 *  Whether the user can enable this label. The user must have permission and
 *  this label must be disabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canEnable;

/**
 *  Whether the user can change this label.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canUpdate;

@end


/**
 *  The lifecycle state of an object, such as label, field, or choice. The
 *  lifecycle enforces the following transitions: * `UNPUBLISHED_DRAFT`
 *  (starting state) * `UNPUBLISHED_DRAFT` -> `PUBLISHED` * `UNPUBLISHED_DRAFT`
 *  -> (Deleted) * `PUBLISHED` -> `DISABLED` * `DISABLED` -> `PUBLISHED` *
 *  `DISABLED` -> (Deleted) The published and disabled states have some distinct
 *  characteristics: * Published—Some kinds of changes might be made to an
 *  object in this state, in which case `has_unpublished_changes` will be true.
 *  Also, some kinds of changes are not permitted. Generally, any change that
 *  would invalidate or cause new restrictions on existing metadata related to
 *  the label are rejected. * Disabled—When disabled, the configured
 *  `DisabledPolicy` takes effect.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2Lifecycle : GTLRObject

/**
 *  The policy that governs how to show a disabled label, field, or selection
 *  choice.
 */
@property(nonatomic, strong, nullable) GTLRDriveLabels_GoogleAppsDriveLabelsV2LifecycleDisabledPolicy *disabledPolicy;

/**
 *  Output only. Whether the object associated with this lifecycle has
 *  unpublished changes.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasUnpublishedChanges;

/**
 *  Output only. The state of the object associated with this lifecycle.
 *
 *  Likely values:
 *    @arg @c kGTLRDriveLabels_GoogleAppsDriveLabelsV2Lifecycle_State_Deleted
 *        The object has been deleted. (Value: "DELETED")
 *    @arg @c kGTLRDriveLabels_GoogleAppsDriveLabelsV2Lifecycle_State_Disabled
 *        The object has been published and has since been disabled. The object
 *        might have unpublished draft changes as indicated by
 *        `has_unpublished_changes`. (Value: "DISABLED")
 *    @arg @c kGTLRDriveLabels_GoogleAppsDriveLabelsV2Lifecycle_State_Published
 *        The object has been published. The object might have unpublished draft
 *        changes as indicated by `has_unpublished_changes`. (Value:
 *        "PUBLISHED")
 *    @arg @c kGTLRDriveLabels_GoogleAppsDriveLabelsV2Lifecycle_State_StateUnspecified
 *        Unknown State. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRDriveLabels_GoogleAppsDriveLabelsV2Lifecycle_State_UnpublishedDraft
 *        The initial state of an object. Once published, the object can never
 *        return to this state. Once an object is published, certain kinds of
 *        changes are no longer permitted. (Value: "UNPUBLISHED_DRAFT")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  The policy that governs how to treat a disabled label, field, or selection
 *  choice in different contexts.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2LifecycleDisabledPolicy : GTLRObject

/**
 *  Whether to hide this disabled object in the search menu for Drive items. *
 *  When `false`, the object is generally shown in the UI as disabled but it
 *  appears in the search results when searching for Drive items. * When `true`,
 *  the object is generally hidden in the UI when searching for Drive items.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hideInSearch;

/**
 *  Whether to show this disabled object in the apply menu on Drive items. *
 *  When `true`, the object is generally shown in the UI as disabled and is
 *  unselectable. * When `false`, the object is generally hidden in the UI.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *showInApply;

@end


/**
 *  Response for listing Labels.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "labels" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2ListLabelsResponse : GTLRCollectionObject

/**
 *  Labels.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDriveLabels_GoogleAppsDriveLabelsV2Label *> *labels;

/** The token of the next page in the response. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Contains information about whether a label component should be considered
 *  locked.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2LockStatus : GTLRObject

/**
 *  Output only. Indicates whether this label component is the (direct) target
 *  of a LabelLock. A label component can be implicitly locked even if it's not
 *  the direct target of a LabelLock, in which case this field is set to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *locked;

@end


/**
 *  Information about a user.
 */
@interface GTLRDriveLabels_GoogleAppsDriveLabelsV2UserInfo : GTLRObject

/**
 *  The identifier for this user that can be used with the People API to get
 *  more information. For example, people/12345678.
 */
@property(nonatomic, copy, nullable) NSString *person;

@end


/**
 *  Represents a color in the RGBA color space. This representation is designed
 *  for simplicity of conversion to/from color representations in various
 *  languages over compactness. For example, the fields of this representation
 *  can be trivially provided to the constructor of `java.awt.Color` in Java; it
 *  can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha`
 *  method in iOS; and, with just a little work, it can be easily formatted into
 *  a CSS `rgba()` string in JavaScript. This reference page doesn't carry
 *  information about the absolute color space that should be used to interpret
 *  the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default,
 *  applications should assume the sRGB color space. When color equality needs
 *  to be decided, implementations, unless documented otherwise, treat two
 *  colors as equal if all their red, green, blue, and alpha values each differ
 *  by at most 1e-5. Example (Java): import com.google.type.Color; // ... public
 *  static java.awt.Color fromProto(Color protocolor) { float alpha =
 *  protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new
 *  java.awt.Color( protocolor.getRed(), protocolor.getGreen(),
 *  protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color
 *  color) { float red = (float) color.getRed(); float green = (float)
 *  color.getGreen(); float blue = (float) color.getBlue(); float denominator =
 *  255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red /
 *  denominator) .setGreen(green / denominator) .setBlue(blue / denominator);
 *  int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha(
 *  FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build());
 *  } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ...
 *  static UIColor* fromProto(Color* protocolor) { float red = [protocolor red];
 *  float green = [protocolor green]; float blue = [protocolor blue];
 *  FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if
 *  (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor
 *  colorWithRed:red green:green blue:blue alpha:alpha]; } static Color*
 *  toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color
 *  getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color*
 *  result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green];
 *  [result setBlue:blue]; if (alpha <= 0.9999) { [result
 *  setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return
 *  result; } // ... Example (JavaScript): // ... var protoToCssColor =
 *  function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac =
 *  rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red =
 *  Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue
 *  = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return
 *  rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value ||
 *  0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(',
 *  rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor =
 *  function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green
 *  << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6
 *  - hexString.length; var resultBuilder = ['#']; for (var i = 0; i <
 *  missingZeros; i++) { resultBuilder.push('0'); }
 *  resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
 */
@interface GTLRDriveLabels_GoogleTypeColor : GTLRObject

/**
 *  The fraction of this color that should be applied to the pixel. That is, the
 *  final pixel color is defined by the equation: `pixel color = alpha * (this
 *  color) + (1.0 - alpha) * (background color)` This means that a value of 1.0
 *  corresponds to a solid color, whereas a value of 0.0 corresponds to a
 *  completely transparent color. This uses a wrapper message rather than a
 *  simple float scalar so that it is possible to distinguish between a default
 *  value and the value being unset. If omitted, this color object is rendered
 *  as a solid color (as if the alpha value had been explicitly given a value of
 *  1.0).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *alpha;

/**
 *  The amount of blue in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blue;

/**
 *  The amount of green in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *green;

/**
 *  The amount of red in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *red;

@end


/**
 *  Represents a whole or partial calendar date, such as a birthday. The time of
 *  day and time zone are either specified elsewhere or are insignificant. The
 *  date is relative to the Gregorian Calendar. This can represent one of the
 *  following: * A full date, with non-zero year, month, and day values. * A
 *  month and day, with a zero year (for example, an anniversary). * A year on
 *  its own, with a zero month and a zero day. * A year and month, with a zero
 *  day (for example, a credit card expiration date). Related types: *
 *  google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
@interface GTLRDriveLabels_GoogleTypeDate : GTLRObject

/**
 *  Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
 *  to specify a year by itself or a year and month where the day isn't
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of a year. Must be from 1 to 12, or 0 to specify a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
