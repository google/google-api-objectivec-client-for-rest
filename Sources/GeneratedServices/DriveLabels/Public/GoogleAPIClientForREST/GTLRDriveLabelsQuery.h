// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Drive Labels API (drivelabels/v2)
// Description:
//   An API for managing Drive Labels
// Documentation:
//   https://developers.google.com/workspace/drive/labels

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRDriveLabelsObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// minimumRole

/**
 *  An applier can write associated metadata on Drive items in which they also
 *  have write access to. Implies `READER`.
 *
 *  Value: "APPLIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabelsMinimumRoleApplier;
/**
 *  Editors can make any update including deleting the label which also deletes
 *  the associated Drive item metadata. Implies `APPLIER`.
 *
 *  Value: "EDITOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabelsMinimumRoleEditor;
/**
 *  Unknown role.
 *
 *  Value: "LABEL_ROLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabelsMinimumRoleLabelRoleUnspecified;
/**
 *  An organizer can pin this label in shared drives they manage and add new
 *  appliers to the label.
 *
 *  Value: "ORGANIZER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabelsMinimumRoleOrganizer;
/**
 *  A reader can read the label and associated metadata applied to Drive items.
 *
 *  Value: "READER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabelsMinimumRoleReader;

// ----------------------------------------------------------------------------
// view

/**
 *  Implies the field mask: `name,id,revision_id,label_type,properties.*`
 *
 *  Value: "LABEL_VIEW_BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabelsViewLabelViewBasic;
/**
 *  All possible fields.
 *
 *  Value: "LABEL_VIEW_FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDriveLabelsViewLabelViewFull;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Drive Labels query classes.
 */
@interface GTLRDriveLabelsQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a label. For more information, see [Create and publish a
 *  label](https://developers.google.com/workspace/drive/labels/guides/create-label).
 *
 *  Method: drivelabels.labels.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsCreate : GTLRDriveLabelsQuery

/**
 *  The BCP-47 language code to use for evaluating localized field labels in
 *  response. When not specified, values in the default configured language will
 *  be used.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Set to `true` in order to use the user's admin privileges. The server will
 *  verify the user is an admin before allowing access.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleAppsDriveLabelsV2Label.
 *
 *  Creates a label. For more information, see [Create and publish a
 *  label](https://developers.google.com/workspace/drive/labels/guides/create-label).
 *
 *  @param object The @c GTLRDriveLabels_GoogleAppsDriveLabelsV2Label to include
 *    in the query.
 *
 *  @return GTLRDriveLabelsQuery_LabelsCreate
 */
+ (instancetype)queryWithObject:(GTLRDriveLabels_GoogleAppsDriveLabelsV2Label *)object;

@end

/**
 *  Permanently deletes a label and related metadata on Drive items. For more
 *  information, see [Disable, enable, and delete a
 *  label](https://developers.google.com/workspace/drive/labels/guides/disable-delete-label).
 *  Once deleted, the label and related Drive item metadata will be deleted.
 *  Only draft labels and disabled labels may be deleted.
 *
 *  Method: drivelabels.labels.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsDelete : GTLRDriveLabelsQuery

/** Required. Label resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Set to `true` in order to use the user's admin credentials. The server will
 *  verify the user is an admin for the label before allowing access.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  The revision ID of the label that the write request will be applied to. If
 *  this isn't the latest revision of the label, the request will not be
 *  processed and will return a 400 Bad Request error.
 */
@property(nonatomic, copy, nullable) NSString *writeControlRequiredRevisionId;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleProtobufEmpty.
 *
 *  Permanently deletes a label and related metadata on Drive items. For more
 *  information, see [Disable, enable, and delete a
 *  label](https://developers.google.com/workspace/drive/labels/guides/disable-delete-label).
 *  Once deleted, the label and related Drive item metadata will be deleted.
 *  Only draft labels and disabled labels may be deleted.
 *
 *  @param name Required. Label resource name.
 *
 *  @return GTLRDriveLabelsQuery_LabelsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates a single label by applying a set of update requests resulting in a
 *  new draft revision. For more information, see [Update a
 *  label](https://developers.google.com/workspace/drive/labels/guides/update-label).
 *  The batch update is all-or-nothing: If any of the update requests are
 *  invalid, no changes are applied. The resulting draft revision must be
 *  published before the changes may be used with Drive items.
 *
 *  Method: drivelabels.labels.delta
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsDelta : GTLRDriveLabelsQuery

/** Required. The resource name of the label to update. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRDriveLabels_GoogleAppsDriveLabelsV2DeltaUpdateLabelResponse.
 *
 *  Updates a single label by applying a set of update requests resulting in a
 *  new draft revision. For more information, see [Update a
 *  label](https://developers.google.com/workspace/drive/labels/guides/update-label).
 *  The batch update is all-or-nothing: If any of the update requests are
 *  invalid, no changes are applied. The resulting draft revision must be
 *  published before the changes may be used with Drive items.
 *
 *  @param object The @c
 *    GTLRDriveLabels_GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest to include
 *    in the query.
 *  @param name Required. The resource name of the label to update.
 *
 *  @return GTLRDriveLabelsQuery_LabelsDelta
 */
+ (instancetype)queryWithObject:(GTLRDriveLabels_GoogleAppsDriveLabelsV2DeltaUpdateLabelRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Disable a published label. For more information, see [Disable, enable, and
 *  delete a
 *  label](https://developers.google.com/workspace/drive/labels/guides/disable-delete-label).
 *  Disabling a label will result in a new disabled published revision based on
 *  the current published revision. If there's a draft revision, a new disabled
 *  draft revision will be created based on the latest draft revision. Older
 *  draft revisions will be deleted. Once disabled, a label may be deleted with
 *  `DeleteLabel`.
 *
 *  Method: drivelabels.labels.disable
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsDisable : GTLRDriveLabelsQuery

/** Required. Label resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleAppsDriveLabelsV2Label.
 *
 *  Disable a published label. For more information, see [Disable, enable, and
 *  delete a
 *  label](https://developers.google.com/workspace/drive/labels/guides/disable-delete-label).
 *  Disabling a label will result in a new disabled published revision based on
 *  the current published revision. If there's a draft revision, a new disabled
 *  draft revision will be created based on the latest draft revision. Older
 *  draft revisions will be deleted. Once disabled, a label may be deleted with
 *  `DeleteLabel`.
 *
 *  @param object The @c
 *    GTLRDriveLabels_GoogleAppsDriveLabelsV2DisableLabelRequest to include in
 *    the query.
 *  @param name Required. Label resource name.
 *
 *  @return GTLRDriveLabelsQuery_LabelsDisable
 */
+ (instancetype)queryWithObject:(GTLRDriveLabels_GoogleAppsDriveLabelsV2DisableLabelRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Enable a disabled label and restore it to its published state. For more
 *  information, see [Disable, enable, and delete a
 *  label](https://developers.google.com/workspace/drive/labels/guides/disable-delete-label).
 *  This will result in a new published revision based on the current disabled
 *  published revision. If there's an existing disabled draft revision, a new
 *  revision will be created based on that draft and will be enabled.
 *
 *  Method: drivelabels.labels.enable
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsEnable : GTLRDriveLabelsQuery

/** Required. Label resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleAppsDriveLabelsV2Label.
 *
 *  Enable a disabled label and restore it to its published state. For more
 *  information, see [Disable, enable, and delete a
 *  label](https://developers.google.com/workspace/drive/labels/guides/disable-delete-label).
 *  This will result in a new published revision based on the current disabled
 *  published revision. If there's an existing disabled draft revision, a new
 *  revision will be created based on that draft and will be enabled.
 *
 *  @param object The @c
 *    GTLRDriveLabels_GoogleAppsDriveLabelsV2EnableLabelRequest to include in
 *    the query.
 *  @param name Required. Label resource name.
 *
 *  @return GTLRDriveLabelsQuery_LabelsEnable
 */
+ (instancetype)queryWithObject:(GTLRDriveLabels_GoogleAppsDriveLabelsV2EnableLabelRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Get a label by its resource name. For more information, see [Search for
 *  labels](https://developers.google.com/workspace/drive/labels/guides/search-label).
 *  Resource name may be any of: * `labels/{id}` - See `labels/{id}\@latest` *
 *  `labels/{id}\@latest` - Gets the latest revision of the label. *
 *  `labels/{id}\@published` - Gets the current published revision of the label.
 *  * `labels/{id}\@{revision_id}` - Gets the label at the specified revision
 *  ID.
 *
 *  Method: drivelabels.labels.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabelsReadonly
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabelsReadonly
 */
@interface GTLRDriveLabelsQuery_LabelsGet : GTLRDriveLabelsQuery

/**
 *  The BCP-47 language code to use for evaluating localized field labels. When
 *  not specified, values in the default configured language are used.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Required. Label resource name. May be any of: * `labels/{id}` (equivalent to
 *  labels/{id}\@latest) * `labels/{id}\@latest` * `labels/{id}\@published` *
 *  `labels/{id}\@{revision_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Set to `true` in order to use the user's admin credentials. The server
 *  verifies that the user is an admin for the label before allowing access.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  When specified, only certain fields belonging to the indicated view are
 *  returned.
 *
 *  Likely values:
 *    @arg @c kGTLRDriveLabelsViewLabelViewBasic Implies the field mask:
 *        `name,id,revision_id,label_type,properties.*` (Value:
 *        "LABEL_VIEW_BASIC")
 *    @arg @c kGTLRDriveLabelsViewLabelViewFull All possible fields. (Value:
 *        "LABEL_VIEW_FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleAppsDriveLabelsV2Label.
 *
 *  Get a label by its resource name. For more information, see [Search for
 *  labels](https://developers.google.com/workspace/drive/labels/guides/search-label).
 *  Resource name may be any of: * `labels/{id}` - See `labels/{id}\@latest` *
 *  `labels/{id}\@latest` - Gets the latest revision of the label. *
 *  `labels/{id}\@published` - Gets the current published revision of the label.
 *  * `labels/{id}\@{revision_id}` - Gets the label at the specified revision
 *  ID.
 *
 *  @param name Required. Label resource name. May be any of: * `labels/{id}`
 *    (equivalent to labels/{id}\@latest) * `labels/{id}\@latest` *
 *    `labels/{id}\@published` * `labels/{id}\@{revision_id}`
 *
 *  @return GTLRDriveLabelsQuery_LabelsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List labels. For more information, see [Search for
 *  labels](https://developers.google.com/workspace/drive/labels/guides/search-label).
 *
 *  Method: drivelabels.labels.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabelsReadonly
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabelsReadonly
 */
@interface GTLRDriveLabelsQuery_LabelsList : GTLRDriveLabelsQuery

/**
 *  The customer to scope this list request to. For example:
 *  `customers/abcd1234`. If unset, will return all labels within the current
 *  customer.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  The BCP-47 language code to use for evaluating localized field labels. When
 *  not specified, values in the default configured language are used.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Specifies the level of access the user must have on the returned labels. The
 *  minimum role a user must have on a label. Defaults to `READER`.
 *
 *  Likely values:
 *    @arg @c kGTLRDriveLabelsMinimumRoleLabelRoleUnspecified Unknown role.
 *        (Value: "LABEL_ROLE_UNSPECIFIED")
 *    @arg @c kGTLRDriveLabelsMinimumRoleReader A reader can read the label and
 *        associated metadata applied to Drive items. (Value: "READER")
 *    @arg @c kGTLRDriveLabelsMinimumRoleApplier An applier can write associated
 *        metadata on Drive items in which they also have write access to.
 *        Implies `READER`. (Value: "APPLIER")
 *    @arg @c kGTLRDriveLabelsMinimumRoleOrganizer An organizer can pin this
 *        label in shared drives they manage and add new appliers to the label.
 *        (Value: "ORGANIZER")
 *    @arg @c kGTLRDriveLabelsMinimumRoleEditor Editors can make any update
 *        including deleting the label which also deletes the associated Drive
 *        item metadata. Implies `APPLIER`. (Value: "EDITOR")
 */
@property(nonatomic, copy, nullable) NSString *minimumRole;

/** Maximum number of labels to return per page. Default: 50. Max: 200. */
@property(nonatomic, assign) NSInteger pageSize;

/** The token of the page to return. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Whether to include only published labels in the results. * When `true`, only
 *  the current published label revisions are returned. Disabled labels are
 *  included. Returned label resource names reference the published revision
 *  (`labels/{id}/{revision_id}`). * When `false`, the current label revisions
 *  are returned, which might not be published. Returned label resource names
 *  don't reference a specific revision (`labels/{id}`).
 */
@property(nonatomic, assign) BOOL publishedOnly;

/**
 *  Set to `true` in order to use the user's admin credentials. This will return
 *  all labels within the customer.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  When specified, only certain fields belonging to the indicated view are
 *  returned.
 *
 *  Likely values:
 *    @arg @c kGTLRDriveLabelsViewLabelViewBasic Implies the field mask:
 *        `name,id,revision_id,label_type,properties.*` (Value:
 *        "LABEL_VIEW_BASIC")
 *    @arg @c kGTLRDriveLabelsViewLabelViewFull All possible fields. (Value:
 *        "LABEL_VIEW_FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleAppsDriveLabelsV2ListLabelsResponse.
 *
 *  List labels. For more information, see [Search for
 *  labels](https://developers.google.com/workspace/drive/labels/guides/search-label).
 *
 *  @return GTLRDriveLabelsQuery_LabelsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Lists the label locks on a label.
 *
 *  Method: drivelabels.labels.locks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabelsReadonly
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabelsReadonly
 */
@interface GTLRDriveLabelsQuery_LabelsLocksList : GTLRDriveLabelsQuery

/** Maximum number of locks to return per page. Default: 100. Max: 200. */
@property(nonatomic, assign) NSInteger pageSize;

/** The token of the page to return. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Label on which locks are applied. Format: `labels/{label}`. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleAppsDriveLabelsV2ListLabelLocksResponse.
 *
 *  Lists the label locks on a label.
 *
 *  @param parent Required. Label on which locks are applied. Format:
 *    `labels/{label}`.
 *
 *  @return GTLRDriveLabelsQuery_LabelsLocksList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Deletes label permissions. Permissions affect the label resource as a whole,
 *  aren't revisioned, and don't require publishing.
 *
 *  Method: drivelabels.labels.permissions.batchDelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsPermissionsBatchDelete : GTLRDriveLabelsQuery

/**
 *  Required. The parent label resource name shared by all permissions being
 *  deleted. Format: `labels/{label}`. If this is set, the parent field in the
 *  `UpdateLabelPermissionRequest` messages must either be empty or match this
 *  field.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleProtobufEmpty.
 *
 *  Deletes label permissions. Permissions affect the label resource as a whole,
 *  aren't revisioned, and don't require publishing.
 *
 *  @param object The @c
 *    GTLRDriveLabels_GoogleAppsDriveLabelsV2BatchDeleteLabelPermissionsRequest
 *    to include in the query.
 *  @param parent Required. The parent label resource name shared by all
 *    permissions being deleted. Format: `labels/{label}`. If this is set, the
 *    parent field in the `UpdateLabelPermissionRequest` messages must either be
 *    empty or match this field.
 *
 *  @return GTLRDriveLabelsQuery_LabelsPermissionsBatchDelete
 */
+ (instancetype)queryWithObject:(GTLRDriveLabels_GoogleAppsDriveLabelsV2BatchDeleteLabelPermissionsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Updates label permissions. If a permission for the indicated principal
 *  doesn't exist, a label permission is created, otherwise the existing
 *  permission is updated. Permissions affect the label resource as a whole,
 *  aren't revisioned, and don't require publishing.
 *
 *  Method: drivelabels.labels.permissions.batchUpdate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsPermissionsBatchUpdate : GTLRDriveLabelsQuery

/**
 *  Required. The parent label resource name shared by all permissions being
 *  updated. Format: `labels/{label}`. If this is set, the parent field in the
 *  `UpdateLabelPermissionRequest` messages must either be empty or match this
 *  field.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDriveLabels_GoogleAppsDriveLabelsV2BatchUpdateLabelPermissionsResponse.
 *
 *  Updates label permissions. If a permission for the indicated principal
 *  doesn't exist, a label permission is created, otherwise the existing
 *  permission is updated. Permissions affect the label resource as a whole,
 *  aren't revisioned, and don't require publishing.
 *
 *  @param object The @c
 *    GTLRDriveLabels_GoogleAppsDriveLabelsV2BatchUpdateLabelPermissionsRequest
 *    to include in the query.
 *  @param parent Required. The parent label resource name shared by all
 *    permissions being updated. Format: `labels/{label}`. If this is set, the
 *    parent field in the `UpdateLabelPermissionRequest` messages must either be
 *    empty or match this field.
 *
 *  @return GTLRDriveLabelsQuery_LabelsPermissionsBatchUpdate
 */
+ (instancetype)queryWithObject:(GTLRDriveLabels_GoogleAppsDriveLabelsV2BatchUpdateLabelPermissionsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Updates a label's permissions. If a permission for the indicated principal
 *  doesn't exist, a label permission is created, otherwise the existing
 *  permission is updated. Permissions affect the label resource as a whole,
 *  aren't revisioned, and don't require publishing.
 *
 *  Method: drivelabels.labels.permissions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsPermissionsCreate : GTLRDriveLabelsQuery

/**
 *  Required. The parent label resource name on the label permission is created.
 *  Format: `labels/{label}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Set to `true` in order to use the user's admin credentials. The server will
 *  verify the user is an admin for the label before allowing access.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelPermission.
 *
 *  Updates a label's permissions. If a permission for the indicated principal
 *  doesn't exist, a label permission is created, otherwise the existing
 *  permission is updated. Permissions affect the label resource as a whole,
 *  aren't revisioned, and don't require publishing.
 *
 *  @param object The @c GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelPermission
 *    to include in the query.
 *  @param parent Required. The parent label resource name on the label
 *    permission is created. Format: `labels/{label}`.
 *
 *  @return GTLRDriveLabelsQuery_LabelsPermissionsCreate
 */
+ (instancetype)queryWithObject:(GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelPermission *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a label's permission. Permissions affect the label resource as a
 *  whole, aren't revisioned, and don't require publishing.
 *
 *  Method: drivelabels.labels.permissions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsPermissionsDelete : GTLRDriveLabelsQuery

/** Required. Label permission resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Set to `true` in order to use the user's admin credentials. The server will
 *  verify the user is an admin for the label before allowing access.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleProtobufEmpty.
 *
 *  Deletes a label's permission. Permissions affect the label resource as a
 *  whole, aren't revisioned, and don't require publishing.
 *
 *  @param name Required. Label permission resource name.
 *
 *  @return GTLRDriveLabelsQuery_LabelsPermissionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists a label's permissions.
 *
 *  Method: drivelabels.labels.permissions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabelsReadonly
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabelsReadonly
 */
@interface GTLRDriveLabelsQuery_LabelsPermissionsList : GTLRDriveLabelsQuery

/**
 *  Maximum number of permissions to return per page. Default: 50. Max: 200.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The token of the page to return. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent label resource name on which label permissions are
 *  listed. Format: `labels/{label}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Set to `true` in order to use the user's admin credentials. The server will
 *  verify the user is an admin for the label before allowing access.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c
 *  GTLRDriveLabels_GoogleAppsDriveLabelsV2ListLabelPermissionsResponse.
 *
 *  Lists a label's permissions.
 *
 *  @param parent Required. The parent label resource name on which label
 *    permissions are listed. Format: `labels/{label}`.
 *
 *  @return GTLRDriveLabelsQuery_LabelsPermissionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Publish all draft changes to the label. Once published, the label may not
 *  return to its draft state. For more information, see [Create and publish a
 *  label](https://developers.google.com/workspace/drive/labels/guides/create-label).
 *  Publishing a label will result in a new published revision. All previous
 *  draft revisions will be deleted. Previous published revisions will be kept
 *  but are subject to automated deletion as needed. For more information, see
 *  [Label
 *  lifecycle](https://developers.google.com/workspace/drive/labels/guides/label-lifecycle).
 *  Once published, some changes are no longer permitted. Generally, any change
 *  that would invalidate or cause new restrictions on existing metadata related
 *  to the label will be rejected. For example, the following changes to a label
 *  will be rejected after the label is published: * The label cannot be
 *  directly deleted. It must be disabled first, then deleted. *
 *  `Field.FieldType` cannot be changed. * Changes to field validation options
 *  cannot reject something that was previously accepted. * Reducing the maximum
 *  entries.
 *
 *  Method: drivelabels.labels.publish
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsPublish : GTLRDriveLabelsQuery

/** Required. Label resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleAppsDriveLabelsV2Label.
 *
 *  Publish all draft changes to the label. Once published, the label may not
 *  return to its draft state. For more information, see [Create and publish a
 *  label](https://developers.google.com/workspace/drive/labels/guides/create-label).
 *  Publishing a label will result in a new published revision. All previous
 *  draft revisions will be deleted. Previous published revisions will be kept
 *  but are subject to automated deletion as needed. For more information, see
 *  [Label
 *  lifecycle](https://developers.google.com/workspace/drive/labels/guides/label-lifecycle).
 *  Once published, some changes are no longer permitted. Generally, any change
 *  that would invalidate or cause new restrictions on existing metadata related
 *  to the label will be rejected. For example, the following changes to a label
 *  will be rejected after the label is published: * The label cannot be
 *  directly deleted. It must be disabled first, then deleted. *
 *  `Field.FieldType` cannot be changed. * Changes to field validation options
 *  cannot reject something that was previously accepted. * Reducing the maximum
 *  entries.
 *
 *  @param object The @c
 *    GTLRDriveLabels_GoogleAppsDriveLabelsV2PublishLabelRequest to include in
 *    the query.
 *  @param name Required. Label resource name.
 *
 *  @return GTLRDriveLabelsQuery_LabelsPublish
 */
+ (instancetype)queryWithObject:(GTLRDriveLabels_GoogleAppsDriveLabelsV2PublishLabelRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists the label locks on a label.
 *
 *  Method: drivelabels.labels.revisions.locks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabelsReadonly
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabelsReadonly
 */
@interface GTLRDriveLabelsQuery_LabelsRevisionsLocksList : GTLRDriveLabelsQuery

/** Maximum number of locks to return per page. Default: 100. Max: 200. */
@property(nonatomic, assign) NSInteger pageSize;

/** The token of the page to return. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Label on which locks are applied. Format: `labels/{label}`. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleAppsDriveLabelsV2ListLabelLocksResponse.
 *
 *  Lists the label locks on a label.
 *
 *  @param parent Required. Label on which locks are applied. Format:
 *    `labels/{label}`.
 *
 *  @return GTLRDriveLabelsQuery_LabelsRevisionsLocksList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Deletes label permissions. Permissions affect the label resource as a whole,
 *  aren't revisioned, and don't require publishing.
 *
 *  Method: drivelabels.labels.revisions.permissions.batchDelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsRevisionsPermissionsBatchDelete : GTLRDriveLabelsQuery

/**
 *  Required. The parent label resource name shared by all permissions being
 *  deleted. Format: `labels/{label}`. If this is set, the parent field in the
 *  `UpdateLabelPermissionRequest` messages must either be empty or match this
 *  field.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleProtobufEmpty.
 *
 *  Deletes label permissions. Permissions affect the label resource as a whole,
 *  aren't revisioned, and don't require publishing.
 *
 *  @param object The @c
 *    GTLRDriveLabels_GoogleAppsDriveLabelsV2BatchDeleteLabelPermissionsRequest
 *    to include in the query.
 *  @param parent Required. The parent label resource name shared by all
 *    permissions being deleted. Format: `labels/{label}`. If this is set, the
 *    parent field in the `UpdateLabelPermissionRequest` messages must either be
 *    empty or match this field.
 *
 *  @return GTLRDriveLabelsQuery_LabelsRevisionsPermissionsBatchDelete
 */
+ (instancetype)queryWithObject:(GTLRDriveLabels_GoogleAppsDriveLabelsV2BatchDeleteLabelPermissionsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Updates label permissions. If a permission for the indicated principal
 *  doesn't exist, a label permission is created, otherwise the existing
 *  permission is updated. Permissions affect the label resource as a whole,
 *  aren't revisioned, and don't require publishing.
 *
 *  Method: drivelabels.labels.revisions.permissions.batchUpdate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsRevisionsPermissionsBatchUpdate : GTLRDriveLabelsQuery

/**
 *  Required. The parent label resource name shared by all permissions being
 *  updated. Format: `labels/{label}`. If this is set, the parent field in the
 *  `UpdateLabelPermissionRequest` messages must either be empty or match this
 *  field.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDriveLabels_GoogleAppsDriveLabelsV2BatchUpdateLabelPermissionsResponse.
 *
 *  Updates label permissions. If a permission for the indicated principal
 *  doesn't exist, a label permission is created, otherwise the existing
 *  permission is updated. Permissions affect the label resource as a whole,
 *  aren't revisioned, and don't require publishing.
 *
 *  @param object The @c
 *    GTLRDriveLabels_GoogleAppsDriveLabelsV2BatchUpdateLabelPermissionsRequest
 *    to include in the query.
 *  @param parent Required. The parent label resource name shared by all
 *    permissions being updated. Format: `labels/{label}`. If this is set, the
 *    parent field in the `UpdateLabelPermissionRequest` messages must either be
 *    empty or match this field.
 *
 *  @return GTLRDriveLabelsQuery_LabelsRevisionsPermissionsBatchUpdate
 */
+ (instancetype)queryWithObject:(GTLRDriveLabels_GoogleAppsDriveLabelsV2BatchUpdateLabelPermissionsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Updates a label's permissions. If a permission for the indicated principal
 *  doesn't exist, a label permission is created, otherwise the existing
 *  permission is updated. Permissions affect the label resource as a whole,
 *  aren't revisioned, and don't require publishing.
 *
 *  Method: drivelabels.labels.revisions.permissions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsRevisionsPermissionsCreate : GTLRDriveLabelsQuery

/**
 *  Required. The parent label resource name on the label permission is created.
 *  Format: `labels/{label}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Set to `true` in order to use the user's admin credentials. The server will
 *  verify the user is an admin for the label before allowing access.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelPermission.
 *
 *  Updates a label's permissions. If a permission for the indicated principal
 *  doesn't exist, a label permission is created, otherwise the existing
 *  permission is updated. Permissions affect the label resource as a whole,
 *  aren't revisioned, and don't require publishing.
 *
 *  @param object The @c GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelPermission
 *    to include in the query.
 *  @param parent Required. The parent label resource name on the label
 *    permission is created. Format: `labels/{label}`.
 *
 *  @return GTLRDriveLabelsQuery_LabelsRevisionsPermissionsCreate
 */
+ (instancetype)queryWithObject:(GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelPermission *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a label's permission. Permissions affect the label resource as a
 *  whole, aren't revisioned, and don't require publishing.
 *
 *  Method: drivelabels.labels.revisions.permissions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsRevisionsPermissionsDelete : GTLRDriveLabelsQuery

/** Required. Label permission resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Set to `true` in order to use the user's admin credentials. The server will
 *  verify the user is an admin for the label before allowing access.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleProtobufEmpty.
 *
 *  Deletes a label's permission. Permissions affect the label resource as a
 *  whole, aren't revisioned, and don't require publishing.
 *
 *  @param name Required. Label permission resource name.
 *
 *  @return GTLRDriveLabelsQuery_LabelsRevisionsPermissionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists a label's permissions.
 *
 *  Method: drivelabels.labels.revisions.permissions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabelsReadonly
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabelsReadonly
 */
@interface GTLRDriveLabelsQuery_LabelsRevisionsPermissionsList : GTLRDriveLabelsQuery

/**
 *  Maximum number of permissions to return per page. Default: 50. Max: 200.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The token of the page to return. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent label resource name on which label permissions are
 *  listed. Format: `labels/{label}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Set to `true` in order to use the user's admin credentials. The server will
 *  verify the user is an admin for the label before allowing access.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c
 *  GTLRDriveLabels_GoogleAppsDriveLabelsV2ListLabelPermissionsResponse.
 *
 *  Lists a label's permissions.
 *
 *  @param parent Required. The parent label resource name on which label
 *    permissions are listed. Format: `labels/{label}`.
 *
 *  @return GTLRDriveLabelsQuery_LabelsRevisionsPermissionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a label's permissions. If a permission for the indicated principal
 *  doesn't exist, a label permission is created, otherwise the existing
 *  permission is updated. Permissions affect the label resource as a whole,
 *  aren't revisioned, and don't require publishing.
 *
 *  Method: drivelabels.labels.revisions.updatePermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsRevisionsUpdatePermissions : GTLRDriveLabelsQuery

/** Required. The parent label resource name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Set to `true` in order to use the user's admin credentials. The server will
 *  verify the user is an admin for the label before allowing access.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelPermission.
 *
 *  Updates a label's permissions. If a permission for the indicated principal
 *  doesn't exist, a label permission is created, otherwise the existing
 *  permission is updated. Permissions affect the label resource as a whole,
 *  aren't revisioned, and don't require publishing.
 *
 *  @param object The @c GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelPermission
 *    to include in the query.
 *  @param parent Required. The parent label resource name.
 *
 *  @return GTLRDriveLabelsQuery_LabelsRevisionsUpdatePermissions
 */
+ (instancetype)queryWithObject:(GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelPermission *)object
                         parent:(NSString *)parent;

@end

/**
 *  Updates a label's `CopyMode`. Changes to this policy aren't revisioned,
 *  don't require publishing, and take effect immediately.
 *
 *  Method: drivelabels.labels.updateLabelCopyMode
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsUpdateLabelCopyMode : GTLRDriveLabelsQuery

/** Required. The resource name of the label to update. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleAppsDriveLabelsV2Label.
 *
 *  Updates a label's `CopyMode`. Changes to this policy aren't revisioned,
 *  don't require publishing, and take effect immediately.
 *
 *  @param object The @c
 *    GTLRDriveLabels_GoogleAppsDriveLabelsV2UpdateLabelCopyModeRequest to
 *    include in the query.
 *  @param name Required. The resource name of the label to update.
 *
 *  @return GTLRDriveLabelsQuery_LabelsUpdateLabelCopyMode
 */
+ (instancetype)queryWithObject:(GTLRDriveLabels_GoogleAppsDriveLabelsV2UpdateLabelCopyModeRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a label's `EnabledAppSettings`. Enabling a label in a Google
 *  Workspace app allows it to be used in that app. This change isn't
 *  revisioned, doesn't require publishing, and takes effect immediately.
 *
 *  Method: drivelabels.labels.updateLabelEnabledAppSettings
 */
@interface GTLRDriveLabelsQuery_LabelsUpdateLabelEnabledAppSettings : GTLRDriveLabelsQuery

/**
 *  Required. The resource name of the label to update. The resource name of the
 *  label to update.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleAppsDriveLabelsV2Label.
 *
 *  Updates a label's `EnabledAppSettings`. Enabling a label in a Google
 *  Workspace app allows it to be used in that app. This change isn't
 *  revisioned, doesn't require publishing, and takes effect immediately.
 *
 *  @param object The @c
 *    GTLRDriveLabels_GoogleAppsDriveLabelsV2UpdateLabelEnabledAppSettingsRequest
 *    to include in the query.
 *  @param name Required. The resource name of the label to update. The resource
 *    name of the label to update.
 *
 *  @return GTLRDriveLabelsQuery_LabelsUpdateLabelEnabledAppSettings
 */
+ (instancetype)queryWithObject:(GTLRDriveLabels_GoogleAppsDriveLabelsV2UpdateLabelEnabledAppSettingsRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a label's permissions. If a permission for the indicated principal
 *  doesn't exist, a label permission is created, otherwise the existing
 *  permission is updated. Permissions affect the label resource as a whole,
 *  aren't revisioned, and don't require publishing.
 *
 *  Method: drivelabels.labels.updatePermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 */
@interface GTLRDriveLabelsQuery_LabelsUpdatePermissions : GTLRDriveLabelsQuery

/** Required. The parent label resource name. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Set to `true` in order to use the user's admin credentials. The server will
 *  verify the user is an admin for the label before allowing access.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelPermission.
 *
 *  Updates a label's permissions. If a permission for the indicated principal
 *  doesn't exist, a label permission is created, otherwise the existing
 *  permission is updated. Permissions affect the label resource as a whole,
 *  aren't revisioned, and don't require publishing.
 *
 *  @param object The @c GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelPermission
 *    to include in the query.
 *  @param parent Required. The parent label resource name.
 *
 *  @return GTLRDriveLabelsQuery_LabelsUpdatePermissions
 */
+ (instancetype)queryWithObject:(GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelPermission *)object
                         parent:(NSString *)parent;

@end

/**
 *  Get the constraints on the structure of a label; such as, the maximum number
 *  of fields allowed and maximum length of the label title.
 *
 *  Method: drivelabels.limits.getLabel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabelsReadonly
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabelsReadonly
 */
@interface GTLRDriveLabelsQuery_LimitsGetLabel : GTLRDriveLabelsQuery

/** Required. Label revision resource name must be: "limits/label". */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleAppsDriveLabelsV2LabelLimits.
 *
 *  Get the constraints on the structure of a label; such as, the maximum number
 *  of fields allowed and maximum length of the label title.
 *
 *  @return GTLRDriveLabelsQuery_LimitsGetLabel
 */
+ (instancetype)query;

@end

/**
 *  Gets the user capabilities.
 *
 *  Method: drivelabels.users.getCapabilities
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveAdminLabelsReadonly
 *    @c kGTLRAuthScopeDriveLabelsDriveLabels
 *    @c kGTLRAuthScopeDriveLabelsDriveLabelsReadonly
 */
@interface GTLRDriveLabelsQuery_UsersGetCapabilities : GTLRDriveLabelsQuery

/**
 *  The customer to scope this request to. For example: `customers/abcd1234`. If
 *  unset, it will return settings within the current customer.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Required. The resource name of the user. Only "users/me/capabilities" is
 *  supported.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDriveLabels_GoogleAppsDriveLabelsV2UserCapabilities.
 *
 *  Gets the user capabilities.
 *
 *  @param name Required. The resource name of the user. Only
 *    "users/me/capabilities" is supported.
 *
 *  @return GTLRDriveLabelsQuery_UsersGetCapabilities
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
