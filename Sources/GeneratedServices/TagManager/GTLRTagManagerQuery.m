// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Tag Manager API (tagmanager/v2)
// Description:
//   This API allows clients to access and modify container and tag
//   configuration.
// Documentation:
//   https://developers.google.com/tag-manager

#import <GoogleAPIClientForREST/GTLRTagManagerQuery.h>

// ----------------------------------------------------------------------------
// Constants

// settingSource
NSString * const kGTLRTagManagerSettingSourceCurrent           = @"current";
NSString * const kGTLRTagManagerSettingSourceOther             = @"other";
NSString * const kGTLRTagManagerSettingSourceSettingSourceUnspecified = @"settingSourceUnspecified";

// type
NSString * const kGTLRTagManagerTypeAdvertiserId               = @"advertiserId";
NSString * const kGTLRTagManagerTypeAdvertisingTrackingEnabled = @"advertisingTrackingEnabled";
NSString * const kGTLRTagManagerTypeAmpBrowserLanguage         = @"ampBrowserLanguage";
NSString * const kGTLRTagManagerTypeAmpCanonicalHost           = @"ampCanonicalHost";
NSString * const kGTLRTagManagerTypeAmpCanonicalPath           = @"ampCanonicalPath";
NSString * const kGTLRTagManagerTypeAmpCanonicalUrl            = @"ampCanonicalUrl";
NSString * const kGTLRTagManagerTypeAmpClientId                = @"ampClientId";
NSString * const kGTLRTagManagerTypeAmpClientMaxScrollX        = @"ampClientMaxScrollX";
NSString * const kGTLRTagManagerTypeAmpClientMaxScrollY        = @"ampClientMaxScrollY";
NSString * const kGTLRTagManagerTypeAmpClientScreenHeight      = @"ampClientScreenHeight";
NSString * const kGTLRTagManagerTypeAmpClientScreenWidth       = @"ampClientScreenWidth";
NSString * const kGTLRTagManagerTypeAmpClientScrollX           = @"ampClientScrollX";
NSString * const kGTLRTagManagerTypeAmpClientScrollY           = @"ampClientScrollY";
NSString * const kGTLRTagManagerTypeAmpClientTimestamp         = @"ampClientTimestamp";
NSString * const kGTLRTagManagerTypeAmpClientTimezone          = @"ampClientTimezone";
NSString * const kGTLRTagManagerTypeAmpGtmEvent                = @"ampGtmEvent";
NSString * const kGTLRTagManagerTypeAmpPageDownloadTime        = @"ampPageDownloadTime";
NSString * const kGTLRTagManagerTypeAmpPageLoadTime            = @"ampPageLoadTime";
NSString * const kGTLRTagManagerTypeAmpPageViewId              = @"ampPageViewId";
NSString * const kGTLRTagManagerTypeAmpReferrer                = @"ampReferrer";
NSString * const kGTLRTagManagerTypeAmpTitle                   = @"ampTitle";
NSString * const kGTLRTagManagerTypeAmpTotalEngagedTime        = @"ampTotalEngagedTime";
NSString * const kGTLRTagManagerTypeAppId                      = @"appId";
NSString * const kGTLRTagManagerTypeAppName                    = @"appName";
NSString * const kGTLRTagManagerTypeAppVersionCode             = @"appVersionCode";
NSString * const kGTLRTagManagerTypeAppVersionName             = @"appVersionName";
NSString * const kGTLRTagManagerTypeBuiltInVariableTypeUnspecified = @"builtInVariableTypeUnspecified";
NSString * const kGTLRTagManagerTypeClickClasses               = @"clickClasses";
NSString * const kGTLRTagManagerTypeClickElement               = @"clickElement";
NSString * const kGTLRTagManagerTypeClickId                    = @"clickId";
NSString * const kGTLRTagManagerTypeClickTarget                = @"clickTarget";
NSString * const kGTLRTagManagerTypeClickText                  = @"clickText";
NSString * const kGTLRTagManagerTypeClickUrl                   = @"clickUrl";
NSString * const kGTLRTagManagerTypeClientName                 = @"clientName";
NSString * const kGTLRTagManagerTypeContainerId                = @"containerId";
NSString * const kGTLRTagManagerTypeContainerVersion           = @"containerVersion";
NSString * const kGTLRTagManagerTypeDebugMode                  = @"debugMode";
NSString * const kGTLRTagManagerTypeDeviceName                 = @"deviceName";
NSString * const kGTLRTagManagerTypeElementVisibilityFirstTime = @"elementVisibilityFirstTime";
NSString * const kGTLRTagManagerTypeElementVisibilityRatio     = @"elementVisibilityRatio";
NSString * const kGTLRTagManagerTypeElementVisibilityRecentTime = @"elementVisibilityRecentTime";
NSString * const kGTLRTagManagerTypeElementVisibilityTime      = @"elementVisibilityTime";
NSString * const kGTLRTagManagerTypeEnvironmentName            = @"environmentName";
NSString * const kGTLRTagManagerTypeErrorLine                  = @"errorLine";
NSString * const kGTLRTagManagerTypeErrorMessage               = @"errorMessage";
NSString * const kGTLRTagManagerTypeErrorUrl                   = @"errorUrl";
NSString * const kGTLRTagManagerTypeEvent                      = @"event";
NSString * const kGTLRTagManagerTypeEventName                  = @"eventName";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterCampaign = @"firebaseEventParameterCampaign";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterCampaignAclid = @"firebaseEventParameterCampaignAclid";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterCampaignAnid = @"firebaseEventParameterCampaignAnid";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterCampaignClickTimestamp = @"firebaseEventParameterCampaignClickTimestamp";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterCampaignContent = @"firebaseEventParameterCampaignContent";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterCampaignCp1 = @"firebaseEventParameterCampaignCp1";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterCampaignGclid = @"firebaseEventParameterCampaignGclid";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterCampaignSource = @"firebaseEventParameterCampaignSource";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterCampaignTerm = @"firebaseEventParameterCampaignTerm";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterCurrency = @"firebaseEventParameterCurrency";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterDynamicLinkAcceptTime = @"firebaseEventParameterDynamicLinkAcceptTime";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterDynamicLinkLinkid = @"firebaseEventParameterDynamicLinkLinkid";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterNotificationMessageDeviceTime = @"firebaseEventParameterNotificationMessageDeviceTime";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterNotificationMessageId = @"firebaseEventParameterNotificationMessageId";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterNotificationMessageName = @"firebaseEventParameterNotificationMessageName";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterNotificationMessageTime = @"firebaseEventParameterNotificationMessageTime";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterNotificationTopic = @"firebaseEventParameterNotificationTopic";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterPreviousAppVersion = @"firebaseEventParameterPreviousAppVersion";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterPreviousOsVersion = @"firebaseEventParameterPreviousOsVersion";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterPrice = @"firebaseEventParameterPrice";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterProductId = @"firebaseEventParameterProductId";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterQuantity = @"firebaseEventParameterQuantity";
NSString * const kGTLRTagManagerTypeFirebaseEventParameterValue = @"firebaseEventParameterValue";
NSString * const kGTLRTagManagerTypeFirstPartyServingUrl       = @"firstPartyServingUrl";
NSString * const kGTLRTagManagerTypeFormClasses                = @"formClasses";
NSString * const kGTLRTagManagerTypeFormElement                = @"formElement";
NSString * const kGTLRTagManagerTypeFormId                     = @"formId";
NSString * const kGTLRTagManagerTypeFormTarget                 = @"formTarget";
NSString * const kGTLRTagManagerTypeFormText                   = @"formText";
NSString * const kGTLRTagManagerTypeFormUrl                    = @"formUrl";
NSString * const kGTLRTagManagerTypeHistorySource              = @"historySource";
NSString * const kGTLRTagManagerTypeHtmlId                     = @"htmlId";
NSString * const kGTLRTagManagerTypeLanguage                   = @"language";
NSString * const kGTLRTagManagerTypeNewHistoryFragment         = @"newHistoryFragment";
NSString * const kGTLRTagManagerTypeNewHistoryState            = @"newHistoryState";
NSString * const kGTLRTagManagerTypeNewHistoryUrl              = @"newHistoryUrl";
NSString * const kGTLRTagManagerTypeOldHistoryFragment         = @"oldHistoryFragment";
NSString * const kGTLRTagManagerTypeOldHistoryState            = @"oldHistoryState";
NSString * const kGTLRTagManagerTypeOldHistoryUrl              = @"oldHistoryUrl";
NSString * const kGTLRTagManagerTypeOsVersion                  = @"osVersion";
NSString * const kGTLRTagManagerTypePageHostname               = @"pageHostname";
NSString * const kGTLRTagManagerTypePagePath                   = @"pagePath";
NSString * const kGTLRTagManagerTypePageUrl                    = @"pageUrl";
NSString * const kGTLRTagManagerTypePlatform                   = @"platform";
NSString * const kGTLRTagManagerTypeQueryString                = @"queryString";
NSString * const kGTLRTagManagerTypeRandomNumber               = @"randomNumber";
NSString * const kGTLRTagManagerTypeReferrer                   = @"referrer";
NSString * const kGTLRTagManagerTypeRequestMethod              = @"requestMethod";
NSString * const kGTLRTagManagerTypeRequestPath                = @"requestPath";
NSString * const kGTLRTagManagerTypeResolution                 = @"resolution";
NSString * const kGTLRTagManagerTypeScrollDepthDirection       = @"scrollDepthDirection";
NSString * const kGTLRTagManagerTypeScrollDepthThreshold       = @"scrollDepthThreshold";
NSString * const kGTLRTagManagerTypeScrollDepthUnits           = @"scrollDepthUnits";
NSString * const kGTLRTagManagerTypeSdkVersion                 = @"sdkVersion";
NSString * const kGTLRTagManagerTypeServerPageLocationHostname = @"serverPageLocationHostname";
NSString * const kGTLRTagManagerTypeServerPageLocationPath     = @"serverPageLocationPath";
NSString * const kGTLRTagManagerTypeServerPageLocationUrl      = @"serverPageLocationUrl";
NSString * const kGTLRTagManagerTypeVideoCurrentTime           = @"videoCurrentTime";
NSString * const kGTLRTagManagerTypeVideoDuration              = @"videoDuration";
NSString * const kGTLRTagManagerTypeVideoPercent               = @"videoPercent";
NSString * const kGTLRTagManagerTypeVideoProvider              = @"videoProvider";
NSString * const kGTLRTagManagerTypeVideoStatus                = @"videoStatus";
NSString * const kGTLRTagManagerTypeVideoTitle                 = @"videoTitle";
NSString * const kGTLRTagManagerTypeVideoUrl                   = @"videoUrl";
NSString * const kGTLRTagManagerTypeVideoVisible               = @"videoVisible";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRTagManagerQuery

@dynamic fields;

@end

@implementation GTLRTagManagerQuery_AccountsContainersCombine

@dynamic allowUserPermissionFeatureUpdate, containerId, path, settingSource;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:combine";
  GTLRTagManagerQuery_AccountsContainersCombine *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Container class];
  query.loggingName = @"tagmanager.accounts.containers.combine";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRTagManager_Container *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/containers";
  GTLRTagManagerQuery_AccountsContainersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_Container class];
  query.loggingName = @"tagmanager.accounts.containers.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersDelete

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.path = path;
  query.loggingName = @"tagmanager.accounts.containers.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersDestinationsGet

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersDestinationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Destination class];
  query.loggingName = @"tagmanager.accounts.containers.destinations.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersDestinationsLink

@dynamic allowUserPermissionFeatureUpdate, destinationId, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/destinations:link";
  GTLRTagManagerQuery_AccountsContainersDestinationsLink *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_Destination class];
  query.loggingName = @"tagmanager.accounts.containers.destinations.link";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersDestinationsList

@dynamic parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/destinations";
  GTLRTagManagerQuery_AccountsContainersDestinationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ListDestinationsResponse class];
  query.loggingName = @"tagmanager.accounts.containers.destinations.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersEnvironmentsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRTagManager_Environment *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/environments";
  GTLRTagManagerQuery_AccountsContainersEnvironmentsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_Environment class];
  query.loggingName = @"tagmanager.accounts.containers.environments.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersEnvironmentsDelete

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersEnvironmentsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.path = path;
  query.loggingName = @"tagmanager.accounts.containers.environments.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersEnvironmentsGet

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersEnvironmentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Environment class];
  query.loggingName = @"tagmanager.accounts.containers.environments.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersEnvironmentsList

@dynamic pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/environments";
  GTLRTagManagerQuery_AccountsContainersEnvironmentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ListEnvironmentsResponse class];
  query.loggingName = @"tagmanager.accounts.containers.environments.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersEnvironmentsReauthorize

@dynamic path;

+ (instancetype)queryWithObject:(GTLRTagManager_Environment *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:reauthorize";
  GTLRTagManagerQuery_AccountsContainersEnvironmentsReauthorize *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Environment class];
  query.loggingName = @"tagmanager.accounts.containers.environments.reauthorize";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersEnvironmentsUpdate

@dynamic fingerprint, path;

+ (instancetype)queryWithObject:(GTLRTagManager_Environment *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersEnvironmentsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Environment class];
  query.loggingName = @"tagmanager.accounts.containers.environments.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersGet

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Container class];
  query.loggingName = @"tagmanager.accounts.containers.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersList

@dynamic pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/containers";
  GTLRTagManagerQuery_AccountsContainersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ListContainersResponse class];
  query.loggingName = @"tagmanager.accounts.containers.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersLookup

@dynamic destinationId;

+ (instancetype)query {
  NSString *pathURITemplate = @"tagmanager/v2/accounts/containers:lookup";
  GTLRTagManagerQuery_AccountsContainersLookup *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRTagManager_Container class];
  query.loggingName = @"tagmanager.accounts.containers.lookup";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersMoveTagId

@dynamic allowUserPermissionFeatureUpdate, copySettings, copyTermsOfService,
         copyUsers, path, tagId, tagName;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:move_tag_id";
  GTLRTagManagerQuery_AccountsContainersMoveTagId *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Container class];
  query.loggingName = @"tagmanager.accounts.containers.move_tag_id";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersSnippet

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:snippet";
  GTLRTagManagerQuery_AccountsContainersSnippet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_GetContainerSnippetResponse class];
  query.loggingName = @"tagmanager.accounts.containers.snippet";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersUpdate

@dynamic fingerprint, path;

+ (instancetype)queryWithObject:(GTLRTagManager_Container *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Container class];
  query.loggingName = @"tagmanager.accounts.containers.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionHeadersLatest

@dynamic parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/version_headers:latest";
  GTLRTagManagerQuery_AccountsContainersVersionHeadersLatest *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ContainerVersionHeader class];
  query.loggingName = @"tagmanager.accounts.containers.version_headers.latest";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionHeadersList

@dynamic includeDeleted, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/version_headers";
  GTLRTagManagerQuery_AccountsContainersVersionHeadersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ListContainerVersionsResponse class];
  query.loggingName = @"tagmanager.accounts.containers.version_headers.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionsDelete

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersVersionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.path = path;
  query.loggingName = @"tagmanager.accounts.containers.versions.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionsGet

@dynamic containerVersionId, path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersVersionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_ContainerVersion class];
  query.loggingName = @"tagmanager.accounts.containers.versions.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionsLive

@dynamic parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/versions:live";
  GTLRTagManagerQuery_AccountsContainersVersionsLive *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ContainerVersion class];
  query.loggingName = @"tagmanager.accounts.containers.versions.live";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionsPublish

@dynamic fingerprint, path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:publish";
  GTLRTagManagerQuery_AccountsContainersVersionsPublish *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_PublishContainerVersionResponse class];
  query.loggingName = @"tagmanager.accounts.containers.versions.publish";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionsSetLatest

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:set_latest";
  GTLRTagManagerQuery_AccountsContainersVersionsSetLatest *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_ContainerVersion class];
  query.loggingName = @"tagmanager.accounts.containers.versions.set_latest";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionsUndelete

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:undelete";
  GTLRTagManagerQuery_AccountsContainersVersionsUndelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_ContainerVersion class];
  query.loggingName = @"tagmanager.accounts.containers.versions.undelete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersVersionsUpdate

@dynamic fingerprint, path;

+ (instancetype)queryWithObject:(GTLRTagManager_ContainerVersion *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersVersionsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_ContainerVersion class];
  query.loggingName = @"tagmanager.accounts.containers.versions.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesBuiltInVariablesCreate

@dynamic parent, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"type" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/built_in_variables";
  GTLRTagManagerQuery_AccountsContainersWorkspacesBuiltInVariablesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_CreateBuiltInVariableResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.built_in_variables.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesBuiltInVariablesDelete

@dynamic path, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"type" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesBuiltInVariablesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.path = path;
  query.loggingName = @"tagmanager.accounts.containers.workspaces.built_in_variables.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesBuiltInVariablesList

@dynamic pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/built_in_variables";
  GTLRTagManagerQuery_AccountsContainersWorkspacesBuiltInVariablesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ListEnabledBuiltInVariablesResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.built_in_variables.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesBuiltInVariablesRevert

@dynamic path, type;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}/built_in_variables:revert";
  GTLRTagManagerQuery_AccountsContainersWorkspacesBuiltInVariablesRevert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_RevertBuiltInVariableResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.built_in_variables.revert";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesClientsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRTagManager_Client *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/clients";
  GTLRTagManagerQuery_AccountsContainersWorkspacesClientsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_Client class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.clients.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesClientsDelete

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesClientsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.path = path;
  query.loggingName = @"tagmanager.accounts.containers.workspaces.clients.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesClientsGet

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesClientsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Client class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.clients.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesClientsList

@dynamic pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/clients";
  GTLRTagManagerQuery_AccountsContainersWorkspacesClientsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ListClientsResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.clients.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesClientsRevert

@dynamic fingerprint, path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:revert";
  GTLRTagManagerQuery_AccountsContainersWorkspacesClientsRevert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_RevertClientResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.clients.revert";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesClientsUpdate

@dynamic fingerprint, path;

+ (instancetype)queryWithObject:(GTLRTagManager_Client *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesClientsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Client class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.clients.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRTagManager_Workspace *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/workspaces";
  GTLRTagManagerQuery_AccountsContainersWorkspacesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_Workspace class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesCreateVersion

@dynamic path;

+ (instancetype)queryWithObject:(GTLRTagManager_CreateContainerVersionRequestVersionOptions *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:create_version";
  GTLRTagManagerQuery_AccountsContainersWorkspacesCreateVersion *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_CreateContainerVersionResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.create_version";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesDelete

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.path = path;
  query.loggingName = @"tagmanager.accounts.containers.workspaces.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesFoldersCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRTagManager_Folder *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/folders";
  GTLRTagManagerQuery_AccountsContainersWorkspacesFoldersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_Folder class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.folders.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesFoldersDelete

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesFoldersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.path = path;
  query.loggingName = @"tagmanager.accounts.containers.workspaces.folders.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesFoldersEntities

@dynamic pageToken, path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:entities";
  GTLRTagManagerQuery_AccountsContainersWorkspacesFoldersEntities *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_FolderEntities class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.folders.entities";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesFoldersGet

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesFoldersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Folder class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.folders.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesFoldersList

@dynamic pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/folders";
  GTLRTagManagerQuery_AccountsContainersWorkspacesFoldersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ListFoldersResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.folders.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesFoldersMoveEntitiesToFolder

@dynamic path, tagId, triggerId, variableId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"tagId" : [NSString class],
    @"triggerId" : [NSString class],
    @"variableId" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRTagManager_Folder *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:move_entities_to_folder";
  GTLRTagManagerQuery_AccountsContainersWorkspacesFoldersMoveEntitiesToFolder *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.loggingName = @"tagmanager.accounts.containers.workspaces.folders.move_entities_to_folder";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesFoldersRevert

@dynamic fingerprint, path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:revert";
  GTLRTagManagerQuery_AccountsContainersWorkspacesFoldersRevert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_RevertFolderResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.folders.revert";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesFoldersUpdate

@dynamic fingerprint, path;

+ (instancetype)queryWithObject:(GTLRTagManager_Folder *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesFoldersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Folder class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.folders.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesGet

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Workspace class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesGetStatus

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}/status";
  GTLRTagManagerQuery_AccountsContainersWorkspacesGetStatus *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_GetWorkspaceStatusResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.getStatus";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesGtagConfigCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRTagManager_GtagConfig *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/gtag_config";
  GTLRTagManagerQuery_AccountsContainersWorkspacesGtagConfigCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_GtagConfig class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.gtag_config.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesGtagConfigDelete

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesGtagConfigDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.path = path;
  query.loggingName = @"tagmanager.accounts.containers.workspaces.gtag_config.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesGtagConfigGet

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesGtagConfigGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_GtagConfig class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.gtag_config.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesGtagConfigList

@dynamic pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/gtag_config";
  GTLRTagManagerQuery_AccountsContainersWorkspacesGtagConfigList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ListGtagConfigResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.gtag_config.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesGtagConfigUpdate

@dynamic fingerprint, path;

+ (instancetype)queryWithObject:(GTLRTagManager_GtagConfig *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesGtagConfigUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_GtagConfig class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.gtag_config.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesList

@dynamic pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/workspaces";
  GTLRTagManagerQuery_AccountsContainersWorkspacesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ListWorkspacesResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesQuickPreview

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:quick_preview";
  GTLRTagManagerQuery_AccountsContainersWorkspacesQuickPreview *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_QuickPreviewResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.quick_preview";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesResolveConflict

@dynamic fingerprint, path;

+ (instancetype)queryWithObject:(GTLRTagManager_Entity *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:resolve_conflict";
  GTLRTagManagerQuery_AccountsContainersWorkspacesResolveConflict *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.loggingName = @"tagmanager.accounts.containers.workspaces.resolve_conflict";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesSync

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:sync";
  GTLRTagManagerQuery_AccountsContainersWorkspacesSync *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_SyncWorkspaceResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.sync";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTagsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRTagManager_Tag *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/tags";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTagsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_Tag class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.tags.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTagsDelete

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTagsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.path = path;
  query.loggingName = @"tagmanager.accounts.containers.workspaces.tags.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTagsGet

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTagsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Tag class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.tags.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTagsList

@dynamic pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/tags";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTagsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ListTagsResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.tags.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTagsRevert

@dynamic fingerprint, path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:revert";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTagsRevert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_RevertTagResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.tags.revert";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTagsUpdate

@dynamic fingerprint, path;

+ (instancetype)queryWithObject:(GTLRTagManager_Tag *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTagsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Tag class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.tags.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTemplatesCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRTagManager_CustomTemplate *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/templates";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTemplatesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_CustomTemplate class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.templates.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTemplatesDelete

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTemplatesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.path = path;
  query.loggingName = @"tagmanager.accounts.containers.workspaces.templates.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTemplatesGet

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTemplatesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_CustomTemplate class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.templates.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTemplatesList

@dynamic pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/templates";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTemplatesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ListTemplatesResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.templates.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTemplatesRevert

@dynamic fingerprint, path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:revert";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTemplatesRevert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_RevertTemplateResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.templates.revert";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTemplatesUpdate

@dynamic fingerprint, path;

+ (instancetype)queryWithObject:(GTLRTagManager_CustomTemplate *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTemplatesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_CustomTemplate class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.templates.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTriggersCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRTagManager_Trigger *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/triggers";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTriggersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_Trigger class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.triggers.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTriggersDelete

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTriggersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.path = path;
  query.loggingName = @"tagmanager.accounts.containers.workspaces.triggers.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTriggersGet

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTriggersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Trigger class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.triggers.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTriggersList

@dynamic pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/triggers";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTriggersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ListTriggersResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.triggers.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTriggersRevert

@dynamic fingerprint, path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:revert";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTriggersRevert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_RevertTriggerResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.triggers.revert";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesTriggersUpdate

@dynamic fingerprint, path;

+ (instancetype)queryWithObject:(GTLRTagManager_Trigger *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesTriggersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Trigger class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.triggers.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesUpdate

@dynamic fingerprint, path;

+ (instancetype)queryWithObject:(GTLRTagManager_Workspace *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Workspace class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesVariablesCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRTagManager_Variable *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/variables";
  GTLRTagManagerQuery_AccountsContainersWorkspacesVariablesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_Variable class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.variables.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesVariablesDelete

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesVariablesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.path = path;
  query.loggingName = @"tagmanager.accounts.containers.workspaces.variables.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesVariablesGet

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesVariablesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Variable class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.variables.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesVariablesList

@dynamic pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/variables";
  GTLRTagManagerQuery_AccountsContainersWorkspacesVariablesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ListVariablesResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.variables.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesVariablesRevert

@dynamic fingerprint, path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:revert";
  GTLRTagManagerQuery_AccountsContainersWorkspacesVariablesRevert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_RevertVariableResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.variables.revert";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesVariablesUpdate

@dynamic fingerprint, path;

+ (instancetype)queryWithObject:(GTLRTagManager_Variable *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesVariablesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Variable class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.variables.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesZonesCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRTagManager_Zone *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/zones";
  GTLRTagManagerQuery_AccountsContainersWorkspacesZonesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_Zone class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.zones.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesZonesDelete

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesZonesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.path = path;
  query.loggingName = @"tagmanager.accounts.containers.workspaces.zones.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesZonesGet

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesZonesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Zone class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.zones.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesZonesList

@dynamic pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/zones";
  GTLRTagManagerQuery_AccountsContainersWorkspacesZonesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ListZonesResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.zones.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesZonesRevert

@dynamic fingerprint, path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}:revert";
  GTLRTagManagerQuery_AccountsContainersWorkspacesZonesRevert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_RevertZoneResponse class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.zones.revert";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsContainersWorkspacesZonesUpdate

@dynamic fingerprint, path;

+ (instancetype)queryWithObject:(GTLRTagManager_Zone *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsContainersWorkspacesZonesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Zone class];
  query.loggingName = @"tagmanager.accounts.containers.workspaces.zones.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsGet

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Account class];
  query.loggingName = @"tagmanager.accounts.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsList

@dynamic includeGoogleTags, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"tagmanager/v2/accounts";
  GTLRTagManagerQuery_AccountsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRTagManager_ListAccountsResponse class];
  query.loggingName = @"tagmanager.accounts.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsUpdate

@dynamic fingerprint, path;

+ (instancetype)queryWithObject:(GTLRTagManager_Account *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_Account class];
  query.loggingName = @"tagmanager.accounts.update";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsUserPermissionsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRTagManager_UserPermission *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/user_permissions";
  GTLRTagManagerQuery_AccountsUserPermissionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_UserPermission class];
  query.loggingName = @"tagmanager.accounts.user_permissions.create";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsUserPermissionsDelete

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsUserPermissionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.path = path;
  query.loggingName = @"tagmanager.accounts.user_permissions.delete";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsUserPermissionsGet

@dynamic path;

+ (instancetype)queryWithPath:(NSString *)path {
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsUserPermissionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_UserPermission class];
  query.loggingName = @"tagmanager.accounts.user_permissions.get";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsUserPermissionsList

@dynamic pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+parent}/user_permissions";
  GTLRTagManagerQuery_AccountsUserPermissionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRTagManager_ListUserPermissionsResponse class];
  query.loggingName = @"tagmanager.accounts.user_permissions.list";
  return query;
}

@end

@implementation GTLRTagManagerQuery_AccountsUserPermissionsUpdate

@dynamic path;

+ (instancetype)queryWithObject:(GTLRTagManager_UserPermission *)object
                           path:(NSString *)path {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"path" ];
  NSString *pathURITemplate = @"tagmanager/v2/{+path}";
  GTLRTagManagerQuery_AccountsUserPermissionsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.path = path;
  query.expectedObjectClass = [GTLRTagManager_UserPermission class];
  query.loggingName = @"tagmanager.accounts.user_permissions.update";
  return query;
}

@end
