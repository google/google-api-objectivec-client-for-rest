// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Tag Manager API (tagmanager/v2)
// Description:
//   This API allows clients to access and modify container and tag
//   configuration.
// Documentation:
//   https://developers.google.com/tag-manager

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRTagManager_Account;
@class GTLRTagManager_AccountAccess;
@class GTLRTagManager_AccountFeatures;
@class GTLRTagManager_BuiltInVariable;
@class GTLRTagManager_Client;
@class GTLRTagManager_Condition;
@class GTLRTagManager_Container;
@class GTLRTagManager_ContainerAccess;
@class GTLRTagManager_ContainerFeatures;
@class GTLRTagManager_ContainerVersion;
@class GTLRTagManager_ContainerVersionHeader;
@class GTLRTagManager_CustomTemplate;
@class GTLRTagManager_Destination;
@class GTLRTagManager_Entity;
@class GTLRTagManager_Environment;
@class GTLRTagManager_Folder;
@class GTLRTagManager_GalleryReference;
@class GTLRTagManager_GtagConfig;
@class GTLRTagManager_MergeConflict;
@class GTLRTagManager_Parameter;
@class GTLRTagManager_SetupTag;
@class GTLRTagManager_SyncStatus;
@class GTLRTagManager_Tag;
@class GTLRTagManager_TagConsentSetting;
@class GTLRTagManager_TeardownTag;
@class GTLRTagManager_Trigger;
@class GTLRTagManager_UserPermission;
@class GTLRTagManager_Variable;
@class GTLRTagManager_VariableFormatValue;
@class GTLRTagManager_Workspace;
@class GTLRTagManager_Zone;
@class GTLRTagManager_ZoneBoundary;
@class GTLRTagManager_ZoneChildContainer;
@class GTLRTagManager_ZoneTypeRestriction;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRTagManager_AccountAccess.permission

/** Value: "accountPermissionUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_AccountAccess_Permission_AccountPermissionUnspecified;
/** Value: "admin" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_AccountAccess_Permission_Admin;
/** Value: "noAccess" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_AccountAccess_Permission_NoAccess;
/** Value: "user" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_AccountAccess_Permission_User;

// ----------------------------------------------------------------------------
// GTLRTagManager_BuiltInVariable.type

/** Value: "advertiserId" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AdvertiserId;
/** Value: "advertisingTrackingEnabled" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AdvertisingTrackingEnabled;
/** Value: "ampBrowserLanguage" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpBrowserLanguage;
/** Value: "ampCanonicalHost" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpCanonicalHost;
/** Value: "ampCanonicalPath" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpCanonicalPath;
/** Value: "ampCanonicalUrl" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpCanonicalUrl;
/** Value: "ampClientId" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientId;
/** Value: "ampClientMaxScrollX" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientMaxScrollX;
/** Value: "ampClientMaxScrollY" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientMaxScrollY;
/** Value: "ampClientScreenHeight" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientScreenHeight;
/** Value: "ampClientScreenWidth" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientScreenWidth;
/** Value: "ampClientScrollX" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientScrollX;
/** Value: "ampClientScrollY" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientScrollY;
/** Value: "ampClientTimestamp" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientTimestamp;
/** Value: "ampClientTimezone" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientTimezone;
/** Value: "ampGtmEvent" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpGtmEvent;
/** Value: "ampPageDownloadTime" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpPageDownloadTime;
/** Value: "ampPageLoadTime" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpPageLoadTime;
/** Value: "ampPageViewId" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpPageViewId;
/** Value: "ampReferrer" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpReferrer;
/** Value: "ampTitle" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpTitle;
/** Value: "ampTotalEngagedTime" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpTotalEngagedTime;
/** Value: "appId" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AppId;
/** Value: "appName" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AppName;
/** Value: "appVersionCode" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AppVersionCode;
/** Value: "appVersionName" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_AppVersionName;
/** Value: "builtInVariableTypeUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_BuiltInVariableTypeUnspecified;
/** Value: "clickClasses" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ClickClasses;
/** Value: "clickElement" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ClickElement;
/** Value: "clickId" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ClickId;
/** Value: "clickTarget" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ClickTarget;
/** Value: "clickText" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ClickText;
/** Value: "clickUrl" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ClickUrl;
/** Value: "clientName" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ClientName;
/**
 *  For web or mobile.
 *
 *  Value: "containerId"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ContainerId;
/**
 *  For web or mobile.
 *
 *  Value: "containerVersion"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ContainerVersion;
/** Value: "debugMode" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_DebugMode;
/** Value: "deviceName" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_DeviceName;
/** Value: "elementVisibilityFirstTime" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ElementVisibilityFirstTime;
/** Value: "elementVisibilityRatio" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ElementVisibilityRatio;
/** Value: "elementVisibilityRecentTime" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ElementVisibilityRecentTime;
/** Value: "elementVisibilityTime" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ElementVisibilityTime;
/** Value: "environmentName" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_EnvironmentName;
/** Value: "errorLine" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ErrorLine;
/** Value: "errorMessage" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ErrorMessage;
/** Value: "errorUrl" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ErrorUrl;
/**
 *  For web or mobile.
 *
 *  Value: "event"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_Event;
/** Value: "eventName" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_EventName;
/** Value: "firebaseEventParameterCampaign" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaign;
/** Value: "firebaseEventParameterCampaignAclid" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignAclid;
/** Value: "firebaseEventParameterCampaignAnid" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignAnid;
/** Value: "firebaseEventParameterCampaignClickTimestamp" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignClickTimestamp;
/** Value: "firebaseEventParameterCampaignContent" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignContent;
/** Value: "firebaseEventParameterCampaignCp1" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignCp1;
/** Value: "firebaseEventParameterCampaignGclid" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignGclid;
/** Value: "firebaseEventParameterCampaignSource" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignSource;
/** Value: "firebaseEventParameterCampaignTerm" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignTerm;
/** Value: "firebaseEventParameterCurrency" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCurrency;
/** Value: "firebaseEventParameterDynamicLinkAcceptTime" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterDynamicLinkAcceptTime;
/** Value: "firebaseEventParameterDynamicLinkLinkid" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterDynamicLinkLinkid;
/** Value: "firebaseEventParameterNotificationMessageDeviceTime" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterNotificationMessageDeviceTime;
/** Value: "firebaseEventParameterNotificationMessageId" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterNotificationMessageId;
/** Value: "firebaseEventParameterNotificationMessageName" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterNotificationMessageName;
/** Value: "firebaseEventParameterNotificationMessageTime" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterNotificationMessageTime;
/** Value: "firebaseEventParameterNotificationTopic" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterNotificationTopic;
/** Value: "firebaseEventParameterPreviousAppVersion" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterPreviousAppVersion;
/** Value: "firebaseEventParameterPreviousOsVersion" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterPreviousOsVersion;
/** Value: "firebaseEventParameterPrice" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterPrice;
/** Value: "firebaseEventParameterProductId" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterProductId;
/** Value: "firebaseEventParameterQuantity" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterQuantity;
/** Value: "firebaseEventParameterValue" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterValue;
/** Value: "firstPartyServingUrl" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FirstPartyServingUrl;
/** Value: "formClasses" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FormClasses;
/** Value: "formElement" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FormElement;
/** Value: "formId" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FormId;
/** Value: "formTarget" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FormTarget;
/** Value: "formText" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FormText;
/** Value: "formUrl" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_FormUrl;
/** Value: "historySource" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_HistorySource;
/** Value: "htmlId" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_HtmlId;
/** Value: "language" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_Language;
/** Value: "newHistoryFragment" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_NewHistoryFragment;
/** Value: "newHistoryState" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_NewHistoryState;
/** Value: "newHistoryUrl" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_NewHistoryUrl;
/** Value: "oldHistoryFragment" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_OldHistoryFragment;
/** Value: "oldHistoryState" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_OldHistoryState;
/** Value: "oldHistoryUrl" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_OldHistoryUrl;
/** Value: "osVersion" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_OsVersion;
/** Value: "pageHostname" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_PageHostname;
/** Value: "pagePath" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_PagePath;
/** Value: "pageUrl" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_PageUrl;
/** Value: "platform" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_Platform;
/** Value: "queryString" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_QueryString;
/**
 *  For web or mobile.
 *
 *  Value: "randomNumber"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_RandomNumber;
/** Value: "referrer" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_Referrer;
/** Value: "requestMethod" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_RequestMethod;
/** Value: "requestPath" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_RequestPath;
/** Value: "resolution" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_Resolution;
/** Value: "scrollDepthDirection" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ScrollDepthDirection;
/** Value: "scrollDepthThreshold" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ScrollDepthThreshold;
/** Value: "scrollDepthUnits" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ScrollDepthUnits;
/** Value: "sdkVersion" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_SdkVersion;
/** Value: "serverPageLocationHostname" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ServerPageLocationHostname;
/** Value: "serverPageLocationPath" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ServerPageLocationPath;
/** Value: "serverPageLocationUrl" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_ServerPageLocationUrl;
/** Value: "videoCurrentTime" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_VideoCurrentTime;
/** Value: "videoDuration" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_VideoDuration;
/** Value: "videoPercent" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_VideoPercent;
/** Value: "videoProvider" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_VideoProvider;
/** Value: "videoStatus" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_VideoStatus;
/** Value: "videoTitle" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_VideoTitle;
/** Value: "videoUrl" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_VideoUrl;
/** Value: "videoVisible" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_BuiltInVariable_Type_VideoVisible;

// ----------------------------------------------------------------------------
// GTLRTagManager_Condition.type

/** Value: "conditionTypeUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Condition_Type_ConditionTypeUnspecified;
/** Value: "contains" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Condition_Type_Contains;
/** Value: "cssSelector" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Condition_Type_CssSelector;
/** Value: "endsWith" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Condition_Type_EndsWith;
/** Value: "equals" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Condition_Type_Equals;
/** Value: "greater" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Condition_Type_Greater;
/** Value: "greaterOrEquals" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Condition_Type_GreaterOrEquals;
/** Value: "less" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Condition_Type_Less;
/** Value: "lessOrEquals" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Condition_Type_LessOrEquals;
/** Value: "matchRegex" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Condition_Type_MatchRegex;
/** Value: "startsWith" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Condition_Type_StartsWith;
/**
 *  NOTE(lanzone): When defining a ConditionType here, don't forget to also
 *  define a matching PredicateType (in condition.proto).
 *
 *  Value: "urlMatches"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Condition_Type_UrlMatches;

// ----------------------------------------------------------------------------
// GTLRTagManager_Container.usageContext

/** Value: "amp" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Container_UsageContext_Amp;
/** Value: "android" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Container_UsageContext_Android;
/** Value: "androidSdk5" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Container_UsageContext_AndroidSdk5;
/** Value: "ios" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Container_UsageContext_Ios;
/** Value: "iosSdk5" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Container_UsageContext_IosSdk5;
/** Value: "server" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Container_UsageContext_Server;
/** Value: "usageContextUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Container_UsageContext_UsageContextUnspecified;
/** Value: "web" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Container_UsageContext_Web;

// ----------------------------------------------------------------------------
// GTLRTagManager_ContainerAccess.permission

/** Value: "approve" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_ContainerAccess_Permission_Approve;
/** Value: "containerPermissionUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_ContainerAccess_Permission_ContainerPermissionUnspecified;
/** Value: "edit" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_ContainerAccess_Permission_Edit;
/** Value: "noAccess" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_ContainerAccess_Permission_NoAccess;
/** Value: "publish" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_ContainerAccess_Permission_Publish;
/** Value: "read" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_ContainerAccess_Permission_Read;

// ----------------------------------------------------------------------------
// GTLRTagManager_Entity.changeStatus

/**
 *  The entity is added to the workspace.
 *
 *  Value: "added"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Entity_ChangeStatus_Added;
/** Value: "changeStatusUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Entity_ChangeStatus_ChangeStatusUnspecified;
/**
 *  The entity is deleted from the workspace.
 *
 *  Value: "deleted"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Entity_ChangeStatus_Deleted;
/**
 *  The entity has never been changed.
 *
 *  Value: "none"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Entity_ChangeStatus_None;
/**
 *  The entity has been updated in the workspace.
 *
 *  Value: "updated"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Entity_ChangeStatus_Updated;

// ----------------------------------------------------------------------------
// GTLRTagManager_Environment.type

/**
 *  Points to the latest container version.
 *
 *  Value: "latest"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Environment_Type_Latest;
/**
 *  Points to the current live container version.
 *
 *  Value: "live"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Environment_Type_Live;
/**
 *  Points to a user defined environment.
 *
 *  Value: "user"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Environment_Type_User;
/**
 *  Automatically managed environment that points to a workspace preview or
 *  version created by a workspace.
 *
 *  Value: "workspace"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Environment_Type_Workspace;

// ----------------------------------------------------------------------------
// GTLRTagManager_Parameter.type

/** Value: "boolean" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Parameter_Type_Boolean;
/** Value: "integer" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Parameter_Type_Integer;
/** Value: "list" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Parameter_Type_List;
/** Value: "map" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Parameter_Type_Map;
/** Value: "tagReference" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Parameter_Type_TagReference;
/**
 *  May include variable references (such as "{{myVariable}}").
 *
 *  Value: "template"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Parameter_Type_Template;
/** Value: "triggerReference" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Parameter_Type_TriggerReference;
/** Value: "typeUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Parameter_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRTagManager_Tag.tagFiringOption

/**
 *  Tag can only be fired per event but can be fired multiple times per load
 *  (e.g., app load or page load).
 *
 *  Value: "oncePerEvent"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Tag_TagFiringOption_OncePerEvent;
/**
 *  Tag can only be fired per load (e.g., app load or page load).
 *
 *  Value: "oncePerLoad"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Tag_TagFiringOption_OncePerLoad;
/** Value: "tagFiringOptionUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Tag_TagFiringOption_TagFiringOptionUnspecified;
/**
 *  Tag can be fired multiple times per event.
 *
 *  Value: "unlimited"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Tag_TagFiringOption_Unlimited;

// ----------------------------------------------------------------------------
// GTLRTagManager_TagConsentSetting.consentStatus

/**
 *  Tag requires additional consent settings.
 *
 *  Value: "needed"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_TagConsentSetting_ConsentStatus_Needed;
/**
 *  Tag doesn't require any additional consent settings.
 *
 *  Value: "notNeeded"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_TagConsentSetting_ConsentStatus_NotNeeded;
/**
 *  Default value where user has not specified any setting on it.
 *
 *  Value: "notSet"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_TagConsentSetting_ConsentStatus_NotSet;

// ----------------------------------------------------------------------------
// GTLRTagManager_Trigger.type

/** Value: "always" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_Always;
/** Value: "ampClick" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_AmpClick;
/** Value: "ampScroll" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_AmpScroll;
/** Value: "ampTimer" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_AmpTimer;
/** Value: "ampVisibility" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_AmpVisibility;
/** Value: "click" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_Click;
/** Value: "consentInit" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_ConsentInit;
/** Value: "customEvent" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_CustomEvent;
/** Value: "domReady" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_DomReady;
/** Value: "elementVisibility" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_ElementVisibility;
/** Value: "eventTypeUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_EventTypeUnspecified;
/** Value: "firebaseAppException" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_FirebaseAppException;
/** Value: "firebaseAppUpdate" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_FirebaseAppUpdate;
/** Value: "firebaseCampaign" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_FirebaseCampaign;
/** Value: "firebaseFirstOpen" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_FirebaseFirstOpen;
/** Value: "firebaseInAppPurchase" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_FirebaseInAppPurchase;
/** Value: "firebaseNotificationDismiss" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_FirebaseNotificationDismiss;
/** Value: "firebaseNotificationForeground" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_FirebaseNotificationForeground;
/** Value: "firebaseNotificationOpen" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_FirebaseNotificationOpen;
/** Value: "firebaseNotificationReceive" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_FirebaseNotificationReceive;
/** Value: "firebaseOsUpdate" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_FirebaseOsUpdate;
/** Value: "firebaseSessionStart" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_FirebaseSessionStart;
/** Value: "firebaseUserEngagement" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_FirebaseUserEngagement;
/** Value: "formSubmission" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_FormSubmission;
/** Value: "historyChange" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_HistoryChange;
/** Value: "init" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_Init;
/** Value: "jsError" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_JsError;
/** Value: "linkClick" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_LinkClick;
/** Value: "pageview" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_Pageview;
/** Value: "scrollDepth" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_ScrollDepth;
/** Value: "serverPageview" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_ServerPageview;
/** Value: "timer" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_Timer;
/** Value: "triggerGroup" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_TriggerGroup;
/** Value: "windowLoaded" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_WindowLoaded;
/** Value: "youTubeVideo" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_Trigger_Type_YouTubeVideo;

// ----------------------------------------------------------------------------
// GTLRTagManager_VariableFormatValue.caseConversionType

/**
 *  The option to convert a variable value to lowercase.
 *
 *  Value: "lowercase"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_VariableFormatValue_CaseConversionType_Lowercase;
/** Value: "none" */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_VariableFormatValue_CaseConversionType_None;
/**
 *  The option to convert a variable value to uppercase.
 *
 *  Value: "uppercase"
 */
FOUNDATION_EXTERN NSString * const kGTLRTagManager_VariableFormatValue_CaseConversionType_Uppercase;

/**
 *  Represents a Google Tag Manager Account.
 */
@interface GTLRTagManager_Account : GTLRObject

/** The Account ID uniquely identifies the GTM Account. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Read-only Account feature set */
@property(nonatomic, strong, nullable) GTLRTagManager_AccountFeatures *features;

/**
 *  The fingerprint of the GTM Account as computed at storage time. This value
 *  is recomputed whenever the account is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/**
 *  Account display name. \@mutable tagmanager.accounts.create \@mutable
 *  tagmanager.accounts.update
 */
@property(nonatomic, copy, nullable) NSString *name;

/** GTM Account's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Whether the account shares data anonymously with Google and others. This
 *  flag enables benchmarking by sharing your data in an anonymous form. Google
 *  will remove all identifiable information about your website, combine the
 *  data with hundreds of other anonymous sites and report aggregate trends in
 *  the benchmarking service. \@mutable tagmanager.accounts.create \@mutable
 *  tagmanager.accounts.update
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shareData;

/** Auto generated link to the tag manager UI */
@property(nonatomic, copy, nullable) NSString *tagManagerUrl;

@end


/**
 *  Defines the Google Tag Manager Account access permissions.
 */
@interface GTLRTagManager_AccountAccess : GTLRObject

/**
 *  Whether the user has no access, user access, or admin access to an account.
 *  \@mutable tagmanager.accounts.permissions.create \@mutable
 *  tagmanager.accounts.permissions.update
 *
 *  Likely values:
 *    @arg @c kGTLRTagManager_AccountAccess_Permission_AccountPermissionUnspecified
 *        Value "accountPermissionUnspecified"
 *    @arg @c kGTLRTagManager_AccountAccess_Permission_Admin Value "admin"
 *    @arg @c kGTLRTagManager_AccountAccess_Permission_NoAccess Value "noAccess"
 *    @arg @c kGTLRTagManager_AccountAccess_Permission_User Value "user"
 */
@property(nonatomic, copy, nullable) NSString *permission;

@end


/**
 *  GTLRTagManager_AccountFeatures
 */
@interface GTLRTagManager_AccountFeatures : GTLRObject

/**
 *  Whether this Account supports multiple Containers.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportMultipleContainers;

/**
 *  Whether this Account supports user permissions managed by GTM.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportUserPermissions;

@end


/**
 *  Built-in variables are a special category of variables that are pre-created
 *  and non-customizable. They provide common functionality like accessing
 *  properties of the gtm data layer, monitoring clicks, or accessing elements
 *  of a page URL.
 */
@interface GTLRTagManager_BuiltInVariable : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  Name of the built-in variable to be used to refer to the built-in variable.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** GTM BuiltInVariable's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Type of built-in variable.
 *  \@required.tagmanager.accounts.containers.workspaces.built_in_variable.update
 *  \@mutable tagmanager.accounts.containers.workspaces.built_in_variable.update
 *
 *  Likely values:
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AdvertiserId Value
 *        "advertiserId"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AdvertisingTrackingEnabled
 *        Value "advertisingTrackingEnabled"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpBrowserLanguage Value
 *        "ampBrowserLanguage"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpCanonicalHost Value
 *        "ampCanonicalHost"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpCanonicalPath Value
 *        "ampCanonicalPath"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpCanonicalUrl Value
 *        "ampCanonicalUrl"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpClientId Value
 *        "ampClientId"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpClientMaxScrollX Value
 *        "ampClientMaxScrollX"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpClientMaxScrollY Value
 *        "ampClientMaxScrollY"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpClientScreenHeight Value
 *        "ampClientScreenHeight"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpClientScreenWidth Value
 *        "ampClientScreenWidth"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpClientScrollX Value
 *        "ampClientScrollX"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpClientScrollY Value
 *        "ampClientScrollY"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpClientTimestamp Value
 *        "ampClientTimestamp"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpClientTimezone Value
 *        "ampClientTimezone"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpGtmEvent Value
 *        "ampGtmEvent"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpPageDownloadTime Value
 *        "ampPageDownloadTime"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpPageLoadTime Value
 *        "ampPageLoadTime"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpPageViewId Value
 *        "ampPageViewId"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpReferrer Value
 *        "ampReferrer"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpTitle Value "ampTitle"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AmpTotalEngagedTime Value
 *        "ampTotalEngagedTime"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AppId Value "appId"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AppName Value "appName"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AppVersionCode Value
 *        "appVersionCode"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_AppVersionName Value
 *        "appVersionName"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_BuiltInVariableTypeUnspecified
 *        Value "builtInVariableTypeUnspecified"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ClickClasses Value
 *        "clickClasses"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ClickElement Value
 *        "clickElement"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ClickId Value "clickId"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ClickTarget Value
 *        "clickTarget"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ClickText Value "clickText"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ClickUrl Value "clickUrl"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ClientName Value "clientName"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ContainerId For web or
 *        mobile. (Value: "containerId")
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ContainerVersion For web or
 *        mobile. (Value: "containerVersion")
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_DebugMode Value "debugMode"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_DeviceName Value "deviceName"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ElementVisibilityFirstTime
 *        Value "elementVisibilityFirstTime"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ElementVisibilityRatio Value
 *        "elementVisibilityRatio"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ElementVisibilityRecentTime
 *        Value "elementVisibilityRecentTime"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ElementVisibilityTime Value
 *        "elementVisibilityTime"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_EnvironmentName Value
 *        "environmentName"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ErrorLine Value "errorLine"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ErrorMessage Value
 *        "errorMessage"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ErrorUrl Value "errorUrl"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_Event For web or mobile.
 *        (Value: "event")
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_EventName Value "eventName"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaign
 *        Value "firebaseEventParameterCampaign"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignAclid
 *        Value "firebaseEventParameterCampaignAclid"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignAnid
 *        Value "firebaseEventParameterCampaignAnid"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignClickTimestamp
 *        Value "firebaseEventParameterCampaignClickTimestamp"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignContent
 *        Value "firebaseEventParameterCampaignContent"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignCp1
 *        Value "firebaseEventParameterCampaignCp1"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignGclid
 *        Value "firebaseEventParameterCampaignGclid"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignSource
 *        Value "firebaseEventParameterCampaignSource"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignTerm
 *        Value "firebaseEventParameterCampaignTerm"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCurrency
 *        Value "firebaseEventParameterCurrency"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterDynamicLinkAcceptTime
 *        Value "firebaseEventParameterDynamicLinkAcceptTime"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterDynamicLinkLinkid
 *        Value "firebaseEventParameterDynamicLinkLinkid"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterNotificationMessageDeviceTime
 *        Value "firebaseEventParameterNotificationMessageDeviceTime"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterNotificationMessageId
 *        Value "firebaseEventParameterNotificationMessageId"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterNotificationMessageName
 *        Value "firebaseEventParameterNotificationMessageName"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterNotificationMessageTime
 *        Value "firebaseEventParameterNotificationMessageTime"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterNotificationTopic
 *        Value "firebaseEventParameterNotificationTopic"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterPreviousAppVersion
 *        Value "firebaseEventParameterPreviousAppVersion"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterPreviousOsVersion
 *        Value "firebaseEventParameterPreviousOsVersion"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterPrice
 *        Value "firebaseEventParameterPrice"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterProductId
 *        Value "firebaseEventParameterProductId"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterQuantity
 *        Value "firebaseEventParameterQuantity"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterValue
 *        Value "firebaseEventParameterValue"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FirstPartyServingUrl Value
 *        "firstPartyServingUrl"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FormClasses Value
 *        "formClasses"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FormElement Value
 *        "formElement"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FormId Value "formId"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FormTarget Value "formTarget"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FormText Value "formText"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_FormUrl Value "formUrl"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_HistorySource Value
 *        "historySource"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_HtmlId Value "htmlId"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_Language Value "language"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_NewHistoryFragment Value
 *        "newHistoryFragment"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_NewHistoryState Value
 *        "newHistoryState"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_NewHistoryUrl Value
 *        "newHistoryUrl"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_OldHistoryFragment Value
 *        "oldHistoryFragment"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_OldHistoryState Value
 *        "oldHistoryState"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_OldHistoryUrl Value
 *        "oldHistoryUrl"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_OsVersion Value "osVersion"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_PageHostname Value
 *        "pageHostname"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_PagePath Value "pagePath"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_PageUrl Value "pageUrl"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_Platform Value "platform"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_QueryString Value
 *        "queryString"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_RandomNumber For web or
 *        mobile. (Value: "randomNumber")
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_Referrer Value "referrer"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_RequestMethod Value
 *        "requestMethod"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_RequestPath Value
 *        "requestPath"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_Resolution Value "resolution"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ScrollDepthDirection Value
 *        "scrollDepthDirection"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ScrollDepthThreshold Value
 *        "scrollDepthThreshold"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ScrollDepthUnits Value
 *        "scrollDepthUnits"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_SdkVersion Value "sdkVersion"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ServerPageLocationHostname
 *        Value "serverPageLocationHostname"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ServerPageLocationPath Value
 *        "serverPageLocationPath"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_ServerPageLocationUrl Value
 *        "serverPageLocationUrl"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_VideoCurrentTime Value
 *        "videoCurrentTime"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_VideoDuration Value
 *        "videoDuration"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_VideoPercent Value
 *        "videoPercent"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_VideoProvider Value
 *        "videoProvider"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_VideoStatus Value
 *        "videoStatus"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_VideoTitle Value "videoTitle"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_VideoUrl Value "videoUrl"
 *    @arg @c kGTLRTagManager_BuiltInVariable_Type_VideoVisible Value
 *        "videoVisible"
 */
@property(nonatomic, copy, nullable) NSString *type;

/** GTM Workspace ID. */
@property(nonatomic, copy, nullable) NSString *workspaceId;

@end


/**
 *  GTLRTagManager_Client
 */
@interface GTLRTagManager_Client : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The Client ID uniquely identifies the GTM client. */
@property(nonatomic, copy, nullable) NSString *clientId;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  The fingerprint of the GTM Client as computed at storage time. This value is
 *  recomputed whenever the client is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/**
 *  Client display name. \@mutable
 *  tagmanager.accounts.containers.workspaces.clients.create \@mutable
 *  tagmanager.accounts.containers.workspaces.clients.update
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  User notes on how to apply this tag in the container. \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, copy, nullable) NSString *notes;

/**
 *  The client's parameters. \@mutable
 *  tagmanager.accounts.containers.workspaces.clients.create \@mutable
 *  tagmanager.accounts.containers.workspaces.clients.update
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Parameter *> *parameter;

/** Parent folder id. */
@property(nonatomic, copy, nullable) NSString *parentFolderId;

/** GTM client's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Priority determines relative firing order. \@mutable
 *  tagmanager.accounts.containers.workspaces.clients.create \@mutable
 *  tagmanager.accounts.containers.workspaces.clients.update
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *priority;

/** Auto generated link to the tag manager UI */
@property(nonatomic, copy, nullable) NSString *tagManagerUrl;

/**
 *  Client type. \@mutable
 *  tagmanager.accounts.containers.workspaces.clients.create \@mutable
 *  tagmanager.accounts.containers.workspaces.clients.update
 */
@property(nonatomic, copy, nullable) NSString *type;

/** GTM Workspace ID. */
@property(nonatomic, copy, nullable) NSString *workspaceId;

@end


/**
 *  Represents a predicate.
 */
@interface GTLRTagManager_Condition : GTLRObject

/**
 *  A list of named parameters (key/value), depending on the condition's type.
 *  Notes: - For binary operators, include parameters named arg0 and arg1 for
 *  specifying the left and right operands, respectively. - At this time, the
 *  left operand (arg0) must be a reference to a variable. - For
 *  case-insensitive Regex matching, include a boolean parameter named
 *  ignore_case that is set to true. If not specified or set to any other value,
 *  the matching will be case sensitive. - To negate an operator, include a
 *  boolean parameter named negate boolean parameter that is set to true.
 *  \@mutable tagmanager.accounts.containers.workspaces.triggers.create
 *  \@mutable tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Parameter *> *parameter;

/**
 *  The type of operator for this condition. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 *
 *  Likely values:
 *    @arg @c kGTLRTagManager_Condition_Type_ConditionTypeUnspecified Value
 *        "conditionTypeUnspecified"
 *    @arg @c kGTLRTagManager_Condition_Type_Contains Value "contains"
 *    @arg @c kGTLRTagManager_Condition_Type_CssSelector Value "cssSelector"
 *    @arg @c kGTLRTagManager_Condition_Type_EndsWith Value "endsWith"
 *    @arg @c kGTLRTagManager_Condition_Type_Equals Value "equals"
 *    @arg @c kGTLRTagManager_Condition_Type_Greater Value "greater"
 *    @arg @c kGTLRTagManager_Condition_Type_GreaterOrEquals Value
 *        "greaterOrEquals"
 *    @arg @c kGTLRTagManager_Condition_Type_Less Value "less"
 *    @arg @c kGTLRTagManager_Condition_Type_LessOrEquals Value "lessOrEquals"
 *    @arg @c kGTLRTagManager_Condition_Type_MatchRegex Value "matchRegex"
 *    @arg @c kGTLRTagManager_Condition_Type_StartsWith Value "startsWith"
 *    @arg @c kGTLRTagManager_Condition_Type_UrlMatches NOTE(lanzone): When
 *        defining a ConditionType here, don't forget to also define a matching
 *        PredicateType (in condition.proto). (Value: "urlMatches")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents a Google Tag Manager Container, which specifies the platform tags
 *  will run on, manages workspaces, and retains container versions.
 */
@interface GTLRTagManager_Container : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The Container ID uniquely identifies the GTM Container. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  List of domain names associated with the Container. \@mutable
 *  tagmanager.accounts.containers.create \@mutable
 *  tagmanager.accounts.containers.update
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *domainName;

/** Read-only Container feature set. */
@property(nonatomic, strong, nullable) GTLRTagManager_ContainerFeatures *features;

/**
 *  The fingerprint of the GTM Container as computed at storage time. This value
 *  is recomputed whenever the account is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/**
 *  Container display name. \@mutable tagmanager.accounts.containers.create
 *  \@mutable tagmanager.accounts.containers.update
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Container Notes. \@mutable tagmanager.accounts.containers.create \@mutable
 *  tagmanager.accounts.containers.update
 */
@property(nonatomic, copy, nullable) NSString *notes;

/** GTM Container's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

/** Container Public ID. */
@property(nonatomic, copy, nullable) NSString *publicId;

/**
 *  The URLs of the cloud environment for the GTM Container. \@mutable
 *  tagmanager.accounts.containers.create \@mutable
 *  tagmanager.accounts.containers.update
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *taggingServerUrls;

/** All Tag IDs that refer to this Container. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tagIds;

/** Auto generated link to the tag manager UI */
@property(nonatomic, copy, nullable) NSString *tagManagerUrl;

/**
 *  List of Usage Contexts for the Container. Valid values include: web,
 *  android, or ios. \@mutable tagmanager.accounts.containers.create \@mutable
 *  tagmanager.accounts.containers.update
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *usageContext;

@end


/**
 *  Defines the Google Tag Manager Container access permissions.
 */
@interface GTLRTagManager_ContainerAccess : GTLRObject

/**
 *  GTM Container ID. \@mutable tagmanager.accounts.permissions.create \@mutable
 *  tagmanager.accounts.permissions.update
 */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  List of Container permissions. \@mutable
 *  tagmanager.accounts.permissions.create \@mutable
 *  tagmanager.accounts.permissions.update
 *
 *  Likely values:
 *    @arg @c kGTLRTagManager_ContainerAccess_Permission_Approve Value "approve"
 *    @arg @c kGTLRTagManager_ContainerAccess_Permission_ContainerPermissionUnspecified
 *        Value "containerPermissionUnspecified"
 *    @arg @c kGTLRTagManager_ContainerAccess_Permission_Edit Value "edit"
 *    @arg @c kGTLRTagManager_ContainerAccess_Permission_NoAccess Value
 *        "noAccess"
 *    @arg @c kGTLRTagManager_ContainerAccess_Permission_Publish Value "publish"
 *    @arg @c kGTLRTagManager_ContainerAccess_Permission_Read Value "read"
 */
@property(nonatomic, copy, nullable) NSString *permission;

@end


/**
 *  GTLRTagManager_ContainerFeatures
 */
@interface GTLRTagManager_ContainerFeatures : GTLRObject

/**
 *  Whether this Container supports built-in variables
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportBuiltInVariables;

/**
 *  Whether this Container supports clients.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportClients;

/**
 *  Whether this Container supports environments.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportEnvironments;

/**
 *  Whether this Container supports folders.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportFolders;

/**
 *  Whether this Container supports Google tag config.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportGtagConfigs;

/**
 *  Whether this Container supports tags.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportTags;

/**
 *  Whether this Container supports templates.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportTemplates;

/**
 *  Whether this Container supports triggers.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportTriggers;

/**
 *  Whether this Container supports user permissions managed by GTM.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportUserPermissions;

/**
 *  Whether this Container supports variables.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportVariables;

/**
 *  Whether this Container supports Container versions.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportVersions;

/**
 *  Whether this Container supports workspaces.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportWorkspaces;

/**
 *  Whether this Container supports zones.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportZones;

@end


/**
 *  Represents a Google Tag Manager Container Version.
 */
@interface GTLRTagManager_ContainerVersion : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The built-in variables in the container that this version was taken from.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_BuiltInVariable *> *builtInVariable;

/** The clients in the container that this version was taken from. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Client *> *client;

/** The container that this version was taken from. */
@property(nonatomic, strong, nullable) GTLRTagManager_Container *container;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/** The Container Version ID uniquely identifies the GTM Container Version. */
@property(nonatomic, copy, nullable) NSString *containerVersionId;

/** The custom templates in the container that this version was taken from. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_CustomTemplate *> *customTemplate;

/**
 *  A value of true indicates this container version has been deleted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleted;

/**
 *  Container version description. \@mutable
 *  tagmanager.accounts.containers.versions.update
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The fingerprint of the GTM Container Version as computed at storage time.
 *  This value is recomputed whenever the container version is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/** The folders in the container that this version was taken from. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Folder *> *folder;

/**
 *  The Google tag configs in the container that this version was taken from.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_GtagConfig *> *gtagConfig;

/**
 *  Container version display name. \@mutable
 *  tagmanager.accounts.containers.versions.update
 */
@property(nonatomic, copy, nullable) NSString *name;

/** GTM Container Version's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

/** The tags in the container that this version was taken from. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Tag *> *tag;

/** Auto generated link to the tag manager UI */
@property(nonatomic, copy, nullable) NSString *tagManagerUrl;

/** The triggers in the container that this version was taken from. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Trigger *> *trigger;

/** The variables in the container that this version was taken from. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Variable *> *variable;

/**
 *  The zones in the container that this version was taken from.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Zone *> *zoneProperty;

@end


/**
 *  Represents a Google Tag Manager Container Version Header.
 */
@interface GTLRTagManager_ContainerVersionHeader : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/** The Container Version ID uniquely identifies the GTM Container Version. */
@property(nonatomic, copy, nullable) NSString *containerVersionId;

/**
 *  A value of true indicates this container version has been deleted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleted;

/** Container version display name. */
@property(nonatomic, copy, nullable) NSString *name;

/** Number of clients in the container version. */
@property(nonatomic, copy, nullable) NSString *numClients;

/** Number of custom templates in the container version. */
@property(nonatomic, copy, nullable) NSString *numCustomTemplates;

/** Number of Google tag configs in the container version. */
@property(nonatomic, copy, nullable) NSString *numGtagConfigs;

/** Number of macros in the container version. */
@property(nonatomic, copy, nullable) NSString *numMacros;

/** Number of rules in the container version. */
@property(nonatomic, copy, nullable) NSString *numRules;

/** Number of tags in the container version. */
@property(nonatomic, copy, nullable) NSString *numTags;

/** Number of triggers in the container version. */
@property(nonatomic, copy, nullable) NSString *numTriggers;

/** Number of variables in the container version. */
@property(nonatomic, copy, nullable) NSString *numVariables;

/** Number of zones in the container version. */
@property(nonatomic, copy, nullable) NSString *numZones;

/** GTM Container Version's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  GTLRTagManager_CreateBuiltInVariableResponse
 */
@interface GTLRTagManager_CreateBuiltInVariableResponse : GTLRObject

/** List of created built-in variables. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_BuiltInVariable *> *builtInVariable;

@end


/**
 *  Options for new container versions.
 */
@interface GTLRTagManager_CreateContainerVersionRequestVersionOptions : GTLRObject

/** The name of the container version to be created. */
@property(nonatomic, copy, nullable) NSString *name;

/** The notes of the container version to be created. */
@property(nonatomic, copy, nullable) NSString *notes;

@end


/**
 *  Create container versions response.
 */
@interface GTLRTagManager_CreateContainerVersionResponse : GTLRObject

/**
 *  Compiler errors or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *compilerError;

/** The container version created. */
@property(nonatomic, strong, nullable) GTLRTagManager_ContainerVersion *containerVersion;

/**
 *  Auto generated workspace path created as a result of version creation. This
 *  field should only be populated if the created version was not a quick
 *  preview.
 */
@property(nonatomic, copy, nullable) NSString *newWorkspacePath NS_RETURNS_NOT_RETAINED;

/**
 *  Whether version creation failed when syncing the workspace to the latest
 *  container version.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_SyncStatus *syncStatus;

@end


/**
 *  Represents a Google Tag Manager Custom Template's contents.
 */
@interface GTLRTagManager_CustomTemplate : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  The fingerprint of the GTM Custom Template as computed at storage time. This
 *  value is recomputed whenever the template is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/** A reference to the Community Template Gallery entry. */
@property(nonatomic, strong, nullable) GTLRTagManager_GalleryReference *galleryReference;

/** Custom Template display name. */
@property(nonatomic, copy, nullable) NSString *name;

/** GTM Custom Template's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

/** Auto generated link to the tag manager UI */
@property(nonatomic, copy, nullable) NSString *tagManagerUrl;

/** The custom template in text format. */
@property(nonatomic, copy, nullable) NSString *templateData;

/** The Custom Template ID uniquely identifies the GTM custom template. */
@property(nonatomic, copy, nullable) NSString *templateId;

/** GTM Workspace ID. */
@property(nonatomic, copy, nullable) NSString *workspaceId;

@end


/**
 *  Represents a Google Tag Destination.
 */
@interface GTLRTagManager_Destination : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/** Destination ID. */
@property(nonatomic, copy, nullable) NSString *destinationId;

/** The Destination link ID uniquely identifies the Destination. */
@property(nonatomic, copy, nullable) NSString *destinationLinkId;

/**
 *  The fingerprint of the Google Tag Destination as computed at storage time.
 *  This value is recomputed whenever the destination is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/** Destination display name. */
@property(nonatomic, copy, nullable) NSString *name;

/** Destination's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

/** Auto generated link to the tag manager UI. */
@property(nonatomic, copy, nullable) NSString *tagManagerUrl;

@end


/**
 *  A workspace entity that may represent a tag, trigger, variable, or folder in
 *  addition to its status in the workspace.
 */
@interface GTLRTagManager_Entity : GTLRObject

/**
 *  Represents how the entity has been changed in the workspace.
 *
 *  Likely values:
 *    @arg @c kGTLRTagManager_Entity_ChangeStatus_Added The entity is added to
 *        the workspace. (Value: "added")
 *    @arg @c kGTLRTagManager_Entity_ChangeStatus_ChangeStatusUnspecified Value
 *        "changeStatusUnspecified"
 *    @arg @c kGTLRTagManager_Entity_ChangeStatus_Deleted The entity is deleted
 *        from the workspace. (Value: "deleted")
 *    @arg @c kGTLRTagManager_Entity_ChangeStatus_None The entity has never been
 *        changed. (Value: "none")
 *    @arg @c kGTLRTagManager_Entity_ChangeStatus_Updated The entity has been
 *        updated in the workspace. (Value: "updated")
 */
@property(nonatomic, copy, nullable) NSString *changeStatus;

/** The client being represented by the entity. */
@property(nonatomic, strong, nullable) GTLRTagManager_Client *client;

/** The folder being represented by the entity. */
@property(nonatomic, strong, nullable) GTLRTagManager_Folder *folder;

/** The tag being represented by the entity. */
@property(nonatomic, strong, nullable) GTLRTagManager_Tag *tag;

/** The trigger being represented by the entity. */
@property(nonatomic, strong, nullable) GTLRTagManager_Trigger *trigger;

/** The variable being represented by the entity. */
@property(nonatomic, strong, nullable) GTLRTagManager_Variable *variable;

@end


/**
 *  Represents a Google Tag Manager Environment. Note that a user can create,
 *  delete and update environments of type USER, but can only update the
 *  enable_debug and url fields of environments of other types.
 */
@interface GTLRTagManager_Environment : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The environment authorization code. */
@property(nonatomic, copy, nullable) NSString *authorizationCode;

/** The last update time-stamp for the authorization code. */
@property(nonatomic, strong, nullable) GTLRDateTime *authorizationTimestamp;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/** Represents a link to a container version. */
@property(nonatomic, copy, nullable) NSString *containerVersionId;

/**
 *  The environment description. Can be set or changed only on USER type
 *  environments. \@mutable tagmanager.accounts.containers.environments.create
 *  \@mutable tagmanager.accounts.containers.environments.update
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Whether or not to enable debug by default for the environment. \@mutable
 *  tagmanager.accounts.containers.environments.create \@mutable
 *  tagmanager.accounts.containers.environments.update
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableDebug;

/** GTM Environment ID uniquely identifies the GTM Environment. */
@property(nonatomic, copy, nullable) NSString *environmentId;

/**
 *  The fingerprint of the GTM environment as computed at storage time. This
 *  value is recomputed whenever the environment is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/**
 *  The environment display name. Can be set or changed only on USER type
 *  environments. \@mutable tagmanager.accounts.containers.environments.create
 *  \@mutable tagmanager.accounts.containers.environments.update
 */
@property(nonatomic, copy, nullable) NSString *name;

/** GTM Environment's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

/** Auto generated link to the tag manager UI */
@property(nonatomic, copy, nullable) NSString *tagManagerUrl;

/**
 *  The type of this environment.
 *
 *  Likely values:
 *    @arg @c kGTLRTagManager_Environment_Type_Latest Points to the latest
 *        container version. (Value: "latest")
 *    @arg @c kGTLRTagManager_Environment_Type_Live Points to the current live
 *        container version. (Value: "live")
 *    @arg @c kGTLRTagManager_Environment_Type_User Points to a user defined
 *        environment. (Value: "user")
 *    @arg @c kGTLRTagManager_Environment_Type_Workspace Automatically managed
 *        environment that points to a workspace preview or version created by a
 *        workspace. (Value: "workspace")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Default preview page url for the environment. \@mutable
 *  tagmanager.accounts.containers.environments.create \@mutable
 *  tagmanager.accounts.containers.environments.update
 */
@property(nonatomic, copy, nullable) NSString *url;

/** Represents a link to a quick preview of a workspace. */
@property(nonatomic, copy, nullable) NSString *workspaceId;

@end


/**
 *  Represents a Google Tag Manager Folder.
 */
@interface GTLRTagManager_Folder : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  The fingerprint of the GTM Folder as computed at storage time. This value is
 *  recomputed whenever the folder is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/** The Folder ID uniquely identifies the GTM Folder. */
@property(nonatomic, copy, nullable) NSString *folderId;

/**
 *  Folder display name. \@mutable
 *  tagmanager.accounts.containers.workspaces.folders.create \@mutable
 *  tagmanager.accounts.containers.workspaces.folders.update
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  User notes on how to apply this folder in the container. \@mutable
 *  tagmanager.accounts.containers.workspaces.folders.create \@mutable
 *  tagmanager.accounts.containers.workspaces.folders.update
 */
@property(nonatomic, copy, nullable) NSString *notes;

/** GTM Folder's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

/** Auto generated link to the tag manager UI */
@property(nonatomic, copy, nullable) NSString *tagManagerUrl;

/** GTM Workspace ID. */
@property(nonatomic, copy, nullable) NSString *workspaceId;

@end


/**
 *  Represents a Google Tag Manager Folder's contents.
 */
@interface GTLRTagManager_FolderEntities : GTLRObject

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** The list of tags inside the folder. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Tag *> *tag;

/** The list of triggers inside the folder. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Trigger *> *trigger;

/** The list of variables inside the folder. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Variable *> *variable;

@end


/**
 *  Represents the link between a custom template and an entry on the Community
 *  Template Gallery site.
 */
@interface GTLRTagManager_GalleryReference : GTLRObject

/** The name of the host for the community gallery template. */
@property(nonatomic, copy, nullable) NSString *host;

/**
 *  If a user has manually edited the community gallery template.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isModified;

/** The name of the owner for the community gallery template. */
@property(nonatomic, copy, nullable) NSString *owner;

/** The name of the repository for the community gallery template. */
@property(nonatomic, copy, nullable) NSString *repository;

/**
 *  The signature of the community gallery template as computed at import time.
 *  This value is recomputed whenever the template is updated from the gallery.
 */
@property(nonatomic, copy, nullable) NSString *signature;

/** The version of the community gallery template. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  GTLRTagManager_GetContainerSnippetResponse
 */
@interface GTLRTagManager_GetContainerSnippetResponse : GTLRObject

/** Tagging snippet for a Container. */
@property(nonatomic, copy, nullable) NSString *snippet;

@end


/**
 *  The changes that have occurred in the workspace since the base container
 *  version.
 */
@interface GTLRTagManager_GetWorkspaceStatusResponse : GTLRObject

/** The merge conflict after sync. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_MergeConflict *> *mergeConflict;

/** Entities that have been changed in the workspace. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Entity *> *workspaceChange;

@end


/**
 *  Represents a Google tag configuration.
 */
@interface GTLRTagManager_GtagConfig : GTLRObject

/** Google tag account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** Google tag container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  The fingerprint of the Google tag config as computed at storage time. This
 *  value is recomputed whenever the config is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/** The ID uniquely identifies the Google tag config. */
@property(nonatomic, copy, nullable) NSString *gtagConfigId;

/**
 *  The Google tag config's parameters. \@mutable
 *  tagmanager.accounts.containers.workspaces.gtag_config.create \@mutable
 *  tagmanager.accounts.containers.workspaces.gtag_config.update
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Parameter *> *parameter;

/** Google tag config's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

/** Auto generated link to the tag manager UI */
@property(nonatomic, copy, nullable) NSString *tagManagerUrl;

/**
 *  Google tag config type. \@required
 *  tagmanager.accounts.containers.workspaces.gtag_config.create \@required
 *  tagmanager.accounts.containers.workspaces.gtag_config.update \@mutable
 *  tagmanager.accounts.containers.workspaces.gtag_config.create \@mutable
 *  tagmanager.accounts.containers.workspaces.gtag_config.update
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Google tag workspace ID. Only used by GTM containers. Set to 0 otherwise.
 */
@property(nonatomic, copy, nullable) NSString *workspaceId;

@end


/**
 *  List Accounts Response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "account" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRTagManager_ListAccountsResponse : GTLRCollectionObject

/**
 *  List of GTM Accounts that a user has access to.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Account *> *account;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRTagManager_ListClientsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "client" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRTagManager_ListClientsResponse : GTLRCollectionObject

/**
 *  All GTM Clients of a GTM Container.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Client *> *client;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  List Containers Response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "container" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRTagManager_ListContainersResponse : GTLRCollectionObject

/**
 *  All Containers of a GTM Account.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Container *> *container;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  List container versions response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "containerVersionHeader" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRTagManager_ListContainerVersionsResponse : GTLRCollectionObject

/**
 *  All container version headers of a GTM Container.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_ContainerVersionHeader *> *containerVersionHeader;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRTagManager_ListDestinationsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "destination" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRTagManager_ListDestinationsResponse : GTLRCollectionObject

/**
 *  All Destinations linked to a GTM Container.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Destination *> *destination;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  A list of enabled built-in variables.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "builtInVariable" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRTagManager_ListEnabledBuiltInVariablesResponse : GTLRCollectionObject

/**
 *  All GTM BuiltInVariables of a GTM container.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_BuiltInVariable *> *builtInVariable;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  List Environments Response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "environment" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRTagManager_ListEnvironmentsResponse : GTLRCollectionObject

/**
 *  All Environments of a GTM Container.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Environment *> *environment;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  List Folders Response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "folder" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRTagManager_ListFoldersResponse : GTLRCollectionObject

/**
 *  All GTM Folders of a GTM Container.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Folder *> *folder;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRTagManager_ListGtagConfigResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "gtagConfig" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRTagManager_ListGtagConfigResponse : GTLRCollectionObject

/**
 *  All Google tag configs in a Container.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_GtagConfig *> *gtagConfig;

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  List Tags Response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "tag" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRTagManager_ListTagsResponse : GTLRCollectionObject

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  All GTM Tags of a GTM Container.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Tag *> *tag;

@end


/**
 *  GTLRTagManager_ListTemplatesResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "templateProperty" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRTagManager_ListTemplatesResponse : GTLRCollectionObject

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  All GTM Custom Templates of a GTM Container.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 *
 *  Remapped to 'templateProperty' to avoid language reserved word 'template'.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_CustomTemplate *> *templateProperty;

@end


/**
 *  List triggers response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "trigger" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRTagManager_ListTriggersResponse : GTLRCollectionObject

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  All GTM Triggers of a GTM Container.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Trigger *> *trigger;

@end


/**
 *  List user permissions response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "userPermission" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRTagManager_ListUserPermissionsResponse : GTLRCollectionObject

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  All GTM UserPermissions of a GTM Account.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_UserPermission *> *userPermission;

@end


/**
 *  List Variables Response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "variable" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRTagManager_ListVariablesResponse : GTLRCollectionObject

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  All GTM Variables of a GTM Container.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Variable *> *variable;

@end


/**
 *  A list of workspaces in a container.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "workspace" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRTagManager_ListWorkspacesResponse : GTLRCollectionObject

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  All Workspaces of a GTM Container.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Workspace *> *workspace;

@end


/**
 *  GTLRTagManager_ListZonesResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "zoneProperty" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRTagManager_ListZonesResponse : GTLRCollectionObject

/** Continuation token for fetching the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  All GTM Zones of a GTM Container.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Zone *> *zoneProperty;

@end


/**
 *  Represents a merge conflict.
 */
@interface GTLRTagManager_MergeConflict : GTLRObject

/**
 *  The base version entity (since the latest sync operation) that has
 *  conflicting changes compared to the workspace. If this field is missing, it
 *  means the workspace entity is deleted from the base version.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Entity *entityInBaseVersion;

/**
 *  The workspace entity that has conflicting changes compared to the base
 *  version. If an entity is deleted in a workspace, it will still appear with a
 *  deleted change status.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Entity *entityInWorkspace;

@end


/**
 *  Represents a Google Tag Manager Parameter.
 */
@interface GTLRTagManager_Parameter : GTLRObject

/**
 *  The named key that uniquely identifies a parameter. Required for top-level
 *  parameters, as well as map values. Ignored for list values. \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.create \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.update \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  This list parameter's parameters (keys will be ignored). \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.create \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.update \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Parameter *> *list;

/**
 *  This map parameter's parameters (must have keys; keys must be unique).
 *  \@mutable tagmanager.accounts.containers.workspaces.variables.create
 *  \@mutable tagmanager.accounts.containers.workspaces.variables.update
 *  \@mutable tagmanager.accounts.containers.workspaces.triggers.create
 *  \@mutable tagmanager.accounts.containers.workspaces.triggers.update
 *  \@mutable tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Parameter *> *map;

/**
 *  The parameter type. Valid values are: - boolean: The value represents a
 *  boolean, represented as 'true' or 'false' - integer: The value represents a
 *  64-bit signed integer value, in base 10 - list: A list of parameters should
 *  be specified - map: A map of parameters should be specified - template: The
 *  value represents any text; this can include variable references (even
 *  variable references that might return non-string types) - trigger_reference:
 *  The value represents a trigger, represented as the trigger id -
 *  tag_reference: The value represents a tag, represented as the tag name
 *  \@mutable tagmanager.accounts.containers.workspaces.variables.create
 *  \@mutable tagmanager.accounts.containers.workspaces.variables.update
 *  \@mutable tagmanager.accounts.containers.workspaces.triggers.create
 *  \@mutable tagmanager.accounts.containers.workspaces.triggers.update
 *  \@mutable tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 *
 *  Likely values:
 *    @arg @c kGTLRTagManager_Parameter_Type_Boolean Value "boolean"
 *    @arg @c kGTLRTagManager_Parameter_Type_Integer Value "integer"
 *    @arg @c kGTLRTagManager_Parameter_Type_List Value "list"
 *    @arg @c kGTLRTagManager_Parameter_Type_Map Value "map"
 *    @arg @c kGTLRTagManager_Parameter_Type_TagReference Value "tagReference"
 *    @arg @c kGTLRTagManager_Parameter_Type_Template May include variable
 *        references (such as "{{myVariable}}"). (Value: "template")
 *    @arg @c kGTLRTagManager_Parameter_Type_TriggerReference Value
 *        "triggerReference"
 *    @arg @c kGTLRTagManager_Parameter_Type_TypeUnspecified Value
 *        "typeUnspecified"
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  A parameter's value (may contain variable references such as
 *  "{{myVariable}}") as appropriate to the specified type. \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.create \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.update \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Publish container version response.
 */
@interface GTLRTagManager_PublishContainerVersionResponse : GTLRObject

/**
 *  Compiler errors or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *compilerError;

/** The container version created. */
@property(nonatomic, strong, nullable) GTLRTagManager_ContainerVersion *containerVersion;

@end


/**
 *  Response to quick previewing a workspace.
 */
@interface GTLRTagManager_QuickPreviewResponse : GTLRObject

/**
 *  Were there compiler errors or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *compilerError;

/** The quick previewed container version. */
@property(nonatomic, strong, nullable) GTLRTagManager_ContainerVersion *containerVersion;

/**
 *  Whether quick previewing failed when syncing the workspace to the latest
 *  container version.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_SyncStatus *syncStatus;

@end


/**
 *  The result of reverting a built-in variable in a workspace.
 */
@interface GTLRTagManager_RevertBuiltInVariableResponse : GTLRObject

/**
 *  Whether the built-in variable is enabled after reversion.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  The result of reverting a client in a workspace.
 */
@interface GTLRTagManager_RevertClientResponse : GTLRObject

/**
 *  Client as it appears in the latest container version since the last
 *  workspace synchronization operation. If no client is present, that means the
 *  client was deleted in the latest container version.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Client *client;

@end


/**
 *  The result of reverting folder changes in a workspace.
 */
@interface GTLRTagManager_RevertFolderResponse : GTLRObject

/**
 *  Folder as it appears in the latest container version since the last
 *  workspace synchronization operation. If no folder is present, that means the
 *  folder was deleted in the latest container version.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Folder *folder;

@end


/**
 *  The result of reverting a tag in a workspace.
 */
@interface GTLRTagManager_RevertTagResponse : GTLRObject

/**
 *  Tag as it appears in the latest container version since the last workspace
 *  synchronization operation. If no tag is present, that means the tag was
 *  deleted in the latest container version.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Tag *tag;

@end


/**
 *  The result of reverting a template in a workspace.
 */
@interface GTLRTagManager_RevertTemplateResponse : GTLRObject

/**
 *  Template as it appears in the latest container version since the last
 *  workspace synchronization operation. If no template is present, that means
 *  the template was deleted in the latest container version.
 *
 *  Remapped to 'templateProperty' to avoid language reserved word 'template'.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_CustomTemplate *templateProperty;

@end


/**
 *  The result of reverting a trigger in a workspace.
 */
@interface GTLRTagManager_RevertTriggerResponse : GTLRObject

/**
 *  Trigger as it appears in the latest container version since the last
 *  workspace synchronization operation. If no trigger is present, that means
 *  the trigger was deleted in the latest container version.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Trigger *trigger;

@end


/**
 *  The result of reverting a variable in a workspace.
 */
@interface GTLRTagManager_RevertVariableResponse : GTLRObject

/**
 *  Variable as it appears in the latest container version since the last
 *  workspace synchronization operation. If no variable is present, that means
 *  the variable was deleted in the latest container version.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Variable *variable;

@end


/**
 *  The result of reverting a zone in a workspace.
 */
@interface GTLRTagManager_RevertZoneResponse : GTLRObject

/**
 *  Zone as it appears in the latest container version since the last workspace
 *  synchronization operation. If no zone is present, that means the zone was
 *  deleted in the latest container version.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Zone *zoneProperty;

@end


/**
 *  Represents a reference to atag that fires before another tag in order to set
 *  up dependencies.
 */
@interface GTLRTagManager_SetupTag : GTLRObject

/**
 *  If true, fire the main tag if and only if the setup tag fires successfully.
 *  If false, fire the main tag regardless of setup tag firing status.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *stopOnSetupFailure;

/** The name of the setup tag. */
@property(nonatomic, copy, nullable) NSString *tagName;

@end


/**
 *  The status of a workspace after synchronization.
 */
@interface GTLRTagManager_SyncStatus : GTLRObject

/**
 *  Synchornization operation detected a merge conflict.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *mergeConflict;

/**
 *  An error occurred during the synchronization operation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *syncError;

@end


/**
 *  A response after synchronizing the workspace to the latest container
 *  version.
 */
@interface GTLRTagManager_SyncWorkspaceResponse : GTLRObject

/**
 *  The merge conflict after sync. If this field is not empty, the sync is still
 *  treated as successful. But a version cannot be created until all conflicts
 *  are resolved.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_MergeConflict *> *mergeConflict;

/**
 *  Indicates whether synchronization caused a merge conflict or sync error.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_SyncStatus *syncStatus;

@end


/**
 *  Represents a Google Tag Manager Tag.
 */
@interface GTLRTagManager_Tag : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Blocking rule IDs. If any of the listed rules evaluate to true, the tag will
 *  not fire. \@mutable tagmanager.accounts.containers.workspaces.tags.create
 *  \@mutable tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *blockingRuleId;

/**
 *  Blocking trigger IDs. If any of the listed triggers evaluate to true, the
 *  tag will not fire. \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *blockingTriggerId;

/**
 *  Consent settings of a tag. \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_TagConsentSetting *consentSettings;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  The fingerprint of the GTM Tag as computed at storage time. This value is
 *  recomputed whenever the tag is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/**
 *  Firing rule IDs. A tag will fire when any of the listed rules are true and
 *  all of its blockingRuleIds (if any specified) are false. \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *firingRuleId;

/**
 *  Firing trigger IDs. A tag will fire when any of the listed triggers are true
 *  and all of its blockingTriggerIds (if any specified) are false. \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *firingTriggerId;

/**
 *  If set to true, this tag will only fire in the live environment (e.g. not in
 *  preview or debug mode). \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *liveOnly;

/**
 *  A map of key-value pairs of tag metadata to be included in the event data
 *  for tag monitoring. Notes: - This parameter must be type MAP. - Each
 *  parameter in the map are type TEMPLATE, however cannot contain variable
 *  references. \@mutable tagmanager.accounts.containers.workspaces.tags.create
 *  \@mutable tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *monitoringMetadata;

/**
 *  If non-empty, then the tag display name will be included in the monitoring
 *  metadata map using the key specified. \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, copy, nullable) NSString *monitoringMetadataTagNameKey;

/**
 *  Tag display name. \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  User notes on how to apply this tag in the container. \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, copy, nullable) NSString *notes;

/**
 *  The tag's parameters. \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Parameter *> *parameter;

/** Parent folder id. */
@property(nonatomic, copy, nullable) NSString *parentFolderId;

/** GTM Tag's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Indicates whether the tag is paused, which prevents the tag from firing.
 *  \@mutable tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *paused;

/**
 *  User defined numeric priority of the tag. Tags are fired asynchronously in
 *  order of priority. Tags with higher numeric value fire first. A tag's
 *  priority can be a positive or negative value. The default value is 0.
 *  \@mutable tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *priority;

/**
 *  The end timestamp in milliseconds to schedule a tag. \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scheduleEndMs;

/**
 *  The start timestamp in milliseconds to schedule a tag. \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scheduleStartMs;

/** The list of setup tags. Currently we only allow one. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_SetupTag *> *setupTag;

/**
 *  Option to fire this tag.
 *
 *  Likely values:
 *    @arg @c kGTLRTagManager_Tag_TagFiringOption_OncePerEvent Tag can only be
 *        fired per event but can be fired multiple times per load (e.g., app
 *        load or page load). (Value: "oncePerEvent")
 *    @arg @c kGTLRTagManager_Tag_TagFiringOption_OncePerLoad Tag can only be
 *        fired per load (e.g., app load or page load). (Value: "oncePerLoad")
 *    @arg @c kGTLRTagManager_Tag_TagFiringOption_TagFiringOptionUnspecified
 *        Value "tagFiringOptionUnspecified"
 *    @arg @c kGTLRTagManager_Tag_TagFiringOption_Unlimited Tag can be fired
 *        multiple times per event. (Value: "unlimited")
 */
@property(nonatomic, copy, nullable) NSString *tagFiringOption;

/** The Tag ID uniquely identifies the GTM Tag. */
@property(nonatomic, copy, nullable) NSString *tagId;

/** Auto generated link to the tag manager UI */
@property(nonatomic, copy, nullable) NSString *tagManagerUrl;

/** The list of teardown tags. Currently we only allow one. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_TeardownTag *> *teardownTag;

/**
 *  GTM Tag Type. \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.create \@mutable
 *  tagmanager.accounts.containers.workspaces.tags.update
 */
@property(nonatomic, copy, nullable) NSString *type;

/** GTM Workspace ID. */
@property(nonatomic, copy, nullable) NSString *workspaceId;

@end


/**
 *  GTLRTagManager_TagConsentSetting
 */
@interface GTLRTagManager_TagConsentSetting : GTLRObject

/**
 *  The tag's consent status. If set to NEEDED, the runtime will check that the
 *  consent types specified by the consent_type field have been granted.
 *
 *  Likely values:
 *    @arg @c kGTLRTagManager_TagConsentSetting_ConsentStatus_Needed Tag
 *        requires additional consent settings. (Value: "needed")
 *    @arg @c kGTLRTagManager_TagConsentSetting_ConsentStatus_NotNeeded Tag
 *        doesn't require any additional consent settings. (Value: "notNeeded")
 *    @arg @c kGTLRTagManager_TagConsentSetting_ConsentStatus_NotSet Default
 *        value where user has not specified any setting on it. (Value:
 *        "notSet")
 */
@property(nonatomic, copy, nullable) NSString *consentStatus;

/**
 *  The type of consents to check for during tag firing if in the consent NEEDED
 *  state. This parameter must be of type LIST where each list item is of type
 *  STRING.
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *consentType;

@end


/**
 *  Represents a tag that fires after another tag in order to tear down
 *  dependencies.
 */
@interface GTLRTagManager_TeardownTag : GTLRObject

/**
 *  If true, fire the teardown tag if and only if the main tag fires
 *  successfully. If false, fire the teardown tag regardless of main tag firing
 *  status.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *stopTeardownOnFailure;

/** The name of the teardown tag. */
@property(nonatomic, copy, nullable) NSString *tagName;

@end


/**
 *  Represents a Google Tag Manager Trigger
 */
@interface GTLRTagManager_Trigger : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  Used in the case of auto event tracking. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Condition *> *autoEventFilter;

/**
 *  Whether or not we should only fire tags if the form submit or link click
 *  event is not cancelled by some other event handler (e.g. because of
 *  validation). Only valid for Form Submission and Link Click triggers.
 *  \@mutable tagmanager.accounts.containers.workspaces.triggers.create
 *  \@mutable tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *checkValidation;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  A visibility trigger minimum continuous visible time (in milliseconds). Only
 *  valid for AMP Visibility trigger. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *continuousTimeMinMilliseconds;

/**
 *  Used in the case of custom event, which is fired iff all Conditions are
 *  true. \@mutable tagmanager.accounts.containers.workspaces.triggers.create
 *  \@mutable tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Condition *> *customEventFilter;

/**
 *  Name of the GTM event that is fired. Only valid for Timer triggers.
 *  \@mutable tagmanager.accounts.containers.workspaces.triggers.create
 *  \@mutable tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *eventName;

/**
 *  The trigger will only fire iff all Conditions are true. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Condition *> *filter;

/**
 *  The fingerprint of the GTM Trigger as computed at storage time. This value
 *  is recomputed whenever the trigger is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/**
 *  List of integer percentage values for scroll triggers. The trigger will fire
 *  when each percentage is reached when the view is scrolled horizontally. Only
 *  valid for AMP scroll triggers. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *horizontalScrollPercentageList;

/**
 *  Time between triggering recurring Timer Events (in milliseconds). Only valid
 *  for Timer triggers. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *interval;

/**
 *  Time between Timer Events to fire (in seconds). Only valid for AMP Timer
 *  trigger. \@mutable tagmanager.accounts.containers.workspaces.triggers.create
 *  \@mutable tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *intervalSeconds;

/**
 *  Limit of the number of GTM events this Timer Trigger will fire. If no limit
 *  is set, we will continue to fire GTM events until the user leaves the page.
 *  Only valid for Timer triggers. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *limit;

/**
 *  Max time to fire Timer Events (in seconds). Only valid for AMP Timer
 *  trigger. \@mutable tagmanager.accounts.containers.workspaces.triggers.create
 *  \@mutable tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *maxTimerLengthSeconds;

/**
 *  Trigger display name. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  User notes on how to apply this trigger in the container. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, copy, nullable) NSString *notes;

/**
 *  Additional parameters. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Parameter *> *parameter;

/** Parent folder id. */
@property(nonatomic, copy, nullable) NSString *parentFolderId;

/** GTM Trigger's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  A click trigger CSS selector (i.e. "a", "button" etc.). Only valid for AMP
 *  Click trigger. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *selector;

/** Auto generated link to the tag manager UI */
@property(nonatomic, copy, nullable) NSString *tagManagerUrl;

/**
 *  A visibility trigger minimum total visible time (in milliseconds). Only
 *  valid for AMP Visibility trigger. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *totalTimeMinMilliseconds;

/** The Trigger ID uniquely identifies the GTM Trigger. */
@property(nonatomic, copy, nullable) NSString *triggerId;

/**
 *  Defines the data layer event that causes this trigger. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 *
 *  Likely values:
 *    @arg @c kGTLRTagManager_Trigger_Type_Always Value "always"
 *    @arg @c kGTLRTagManager_Trigger_Type_AmpClick Value "ampClick"
 *    @arg @c kGTLRTagManager_Trigger_Type_AmpScroll Value "ampScroll"
 *    @arg @c kGTLRTagManager_Trigger_Type_AmpTimer Value "ampTimer"
 *    @arg @c kGTLRTagManager_Trigger_Type_AmpVisibility Value "ampVisibility"
 *    @arg @c kGTLRTagManager_Trigger_Type_Click Value "click"
 *    @arg @c kGTLRTagManager_Trigger_Type_ConsentInit Value "consentInit"
 *    @arg @c kGTLRTagManager_Trigger_Type_CustomEvent Value "customEvent"
 *    @arg @c kGTLRTagManager_Trigger_Type_DomReady Value "domReady"
 *    @arg @c kGTLRTagManager_Trigger_Type_ElementVisibility Value
 *        "elementVisibility"
 *    @arg @c kGTLRTagManager_Trigger_Type_EventTypeUnspecified Value
 *        "eventTypeUnspecified"
 *    @arg @c kGTLRTagManager_Trigger_Type_FirebaseAppException Value
 *        "firebaseAppException"
 *    @arg @c kGTLRTagManager_Trigger_Type_FirebaseAppUpdate Value
 *        "firebaseAppUpdate"
 *    @arg @c kGTLRTagManager_Trigger_Type_FirebaseCampaign Value
 *        "firebaseCampaign"
 *    @arg @c kGTLRTagManager_Trigger_Type_FirebaseFirstOpen Value
 *        "firebaseFirstOpen"
 *    @arg @c kGTLRTagManager_Trigger_Type_FirebaseInAppPurchase Value
 *        "firebaseInAppPurchase"
 *    @arg @c kGTLRTagManager_Trigger_Type_FirebaseNotificationDismiss Value
 *        "firebaseNotificationDismiss"
 *    @arg @c kGTLRTagManager_Trigger_Type_FirebaseNotificationForeground Value
 *        "firebaseNotificationForeground"
 *    @arg @c kGTLRTagManager_Trigger_Type_FirebaseNotificationOpen Value
 *        "firebaseNotificationOpen"
 *    @arg @c kGTLRTagManager_Trigger_Type_FirebaseNotificationReceive Value
 *        "firebaseNotificationReceive"
 *    @arg @c kGTLRTagManager_Trigger_Type_FirebaseOsUpdate Value
 *        "firebaseOsUpdate"
 *    @arg @c kGTLRTagManager_Trigger_Type_FirebaseSessionStart Value
 *        "firebaseSessionStart"
 *    @arg @c kGTLRTagManager_Trigger_Type_FirebaseUserEngagement Value
 *        "firebaseUserEngagement"
 *    @arg @c kGTLRTagManager_Trigger_Type_FormSubmission Value "formSubmission"
 *    @arg @c kGTLRTagManager_Trigger_Type_HistoryChange Value "historyChange"
 *    @arg @c kGTLRTagManager_Trigger_Type_Init Value "init"
 *    @arg @c kGTLRTagManager_Trigger_Type_JsError Value "jsError"
 *    @arg @c kGTLRTagManager_Trigger_Type_LinkClick Value "linkClick"
 *    @arg @c kGTLRTagManager_Trigger_Type_Pageview Value "pageview"
 *    @arg @c kGTLRTagManager_Trigger_Type_ScrollDepth Value "scrollDepth"
 *    @arg @c kGTLRTagManager_Trigger_Type_ServerPageview Value "serverPageview"
 *    @arg @c kGTLRTagManager_Trigger_Type_Timer Value "timer"
 *    @arg @c kGTLRTagManager_Trigger_Type_TriggerGroup Value "triggerGroup"
 *    @arg @c kGTLRTagManager_Trigger_Type_WindowLoaded Value "windowLoaded"
 *    @arg @c kGTLRTagManager_Trigger_Type_YouTubeVideo Value "youTubeVideo"
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Globally unique id of the trigger that auto-generates this (a Form Submit,
 *  Link Click or Timer listener) if any. Used to make incompatible auto-events
 *  work together with trigger filtering based on trigger ids. This value is
 *  populated during output generation since the tags implied by triggers don't
 *  exist until then. Only valid for Form Submit, Link Click and Timer triggers.
 *  \@mutable tagmanager.accounts.containers.workspaces.triggers.create
 *  \@mutable tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *uniqueTriggerId;

/**
 *  List of integer percentage values for scroll triggers. The trigger will fire
 *  when each percentage is reached when the view is scrolled vertically. Only
 *  valid for AMP scroll triggers. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *verticalScrollPercentageList;

/**
 *  A visibility trigger CSS selector (i.e. "#id"). Only valid for AMP
 *  Visibility trigger. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *visibilitySelector;

/**
 *  A visibility trigger maximum percent visibility. Only valid for AMP
 *  Visibility trigger. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *visiblePercentageMax;

/**
 *  A visibility trigger minimum percent visibility. Only valid for AMP
 *  Visibility trigger. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *visiblePercentageMin;

/**
 *  Whether or not we should delay the form submissions or link opening until
 *  all of the tags have fired (by preventing the default action and later
 *  simulating the default action). Only valid for Form Submission and Link
 *  Click triggers. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *waitForTags;

/**
 *  How long to wait (in milliseconds) for tags to fire when 'waits_for_tags'
 *  above evaluates to true. Only valid for Form Submission and Link Click
 *  triggers. \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.create \@mutable
 *  tagmanager.accounts.containers.workspaces.triggers.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *waitForTagsTimeout;

/** GTM Workspace ID. */
@property(nonatomic, copy, nullable) NSString *workspaceId;

@end


/**
 *  Represents a user's permissions to an account and its container.
 */
@interface GTLRTagManager_UserPermission : GTLRObject

/**
 *  GTM Account access permissions. \@mutable
 *  tagmanager.accounts.permissions.create \@mutable
 *  tagmanager.accounts.permissions.update
 */
@property(nonatomic, strong, nullable) GTLRTagManager_AccountAccess *accountAccess;

/** The Account ID uniquely identifies the GTM Account. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  GTM Container access permissions. \@mutable
 *  tagmanager.accounts.permissions.create \@mutable
 *  tagmanager.accounts.permissions.update
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_ContainerAccess *> *containerAccess;

/** User's email address. \@mutable tagmanager.accounts.permissions.create */
@property(nonatomic, copy, nullable) NSString *emailAddress;

/** GTM UserPermission's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  Represents a Google Tag Manager Variable.
 */
@interface GTLRTagManager_Variable : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  For mobile containers only: A list of trigger IDs for disabling conditional
 *  variables; the variable is enabled if one of the enabling trigger is true
 *  while all the disabling trigger are false. Treated as an unordered set.
 *  \@mutable tagmanager.accounts.containers.workspaces.variables.create
 *  \@mutable tagmanager.accounts.containers.workspaces.variables.update
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *disablingTriggerId;

/**
 *  For mobile containers only: A list of trigger IDs for enabling conditional
 *  variables; the variable is enabled if one of the enabling triggers is true
 *  while all the disabling triggers are false. Treated as an unordered set.
 *  \@mutable tagmanager.accounts.containers.workspaces.variables.create
 *  \@mutable tagmanager.accounts.containers.workspaces.variables.update
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *enablingTriggerId;

/**
 *  The fingerprint of the GTM Variable as computed at storage time. This value
 *  is recomputed whenever the variable is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/** Option to convert a variable value to other value. */
@property(nonatomic, strong, nullable) GTLRTagManager_VariableFormatValue *formatValue;

/**
 *  Variable display name. \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.create \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.update
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  User notes on how to apply this variable in the container. \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.create \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.update
 */
@property(nonatomic, copy, nullable) NSString *notes;

/**
 *  The variable's parameters. \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.create \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.update
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Parameter *> *parameter;

/** Parent folder id. */
@property(nonatomic, copy, nullable) NSString *parentFolderId;

/** GTM Variable's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  The end timestamp in milliseconds to schedule a variable. \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.create \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.update
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scheduleEndMs;

/**
 *  The start timestamp in milliseconds to schedule a variable. \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.create \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.update
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scheduleStartMs;

/** Auto generated link to the tag manager UI */
@property(nonatomic, copy, nullable) NSString *tagManagerUrl;

/**
 *  GTM Variable Type. \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.create \@mutable
 *  tagmanager.accounts.containers.workspaces.variables.update
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The Variable ID uniquely identifies the GTM Variable. */
@property(nonatomic, copy, nullable) NSString *variableId;

/** GTM Workspace ID. */
@property(nonatomic, copy, nullable) NSString *workspaceId;

@end


/**
 *  GTLRTagManager_VariableFormatValue
 */
@interface GTLRTagManager_VariableFormatValue : GTLRObject

/**
 *  The option to convert a string-type variable value to either lowercase or
 *  uppercase.
 *
 *  Likely values:
 *    @arg @c kGTLRTagManager_VariableFormatValue_CaseConversionType_Lowercase
 *        The option to convert a variable value to lowercase. (Value:
 *        "lowercase")
 *    @arg @c kGTLRTagManager_VariableFormatValue_CaseConversionType_None Value
 *        "none"
 *    @arg @c kGTLRTagManager_VariableFormatValue_CaseConversionType_Uppercase
 *        The option to convert a variable value to uppercase. (Value:
 *        "uppercase")
 */
@property(nonatomic, copy, nullable) NSString *caseConversionType;

/** The value to convert if a variable value is false. */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *convertFalseToValue;

/** The value to convert if a variable value is null. */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *convertNullToValue;

/** The value to convert if a variable value is true. */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *convertTrueToValue;

/** The value to convert if a variable value is undefined. */
@property(nonatomic, strong, nullable) GTLRTagManager_Parameter *convertUndefinedToValue;

@end


/**
 *  Represents a Google Tag Manager Container Workspace.
 */
@interface GTLRTagManager_Workspace : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  Workspace description. \@mutable
 *  tagmanager.accounts.containers.workspaces.create \@mutable
 *  tagmanager.accounts.containers.workspaces.update
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The fingerprint of the GTM Workspace as computed at storage time. This value
 *  is recomputed whenever the workspace is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/**
 *  Workspace display name. \@mutable
 *  tagmanager.accounts.containers.workspaces.create \@mutable
 *  tagmanager.accounts.containers.workspaces.update
 */
@property(nonatomic, copy, nullable) NSString *name;

/** GTM Workspace's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

/** Auto generated link to the tag manager UI */
@property(nonatomic, copy, nullable) NSString *tagManagerUrl;

/** The Workspace ID uniquely identifies the GTM Workspace. */
@property(nonatomic, copy, nullable) NSString *workspaceId;

@end


/**
 *  Represents a Google Tag Manager Zone's contents.
 */
@interface GTLRTagManager_Zone : GTLRObject

/** GTM Account ID. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** This Zone's boundary. */
@property(nonatomic, strong, nullable) GTLRTagManager_ZoneBoundary *boundary;

/** Containers that are children of this Zone. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_ZoneChildContainer *> *childContainer;

/** GTM Container ID. */
@property(nonatomic, copy, nullable) NSString *containerId;

/**
 *  The fingerprint of the GTM Zone as computed at storage time. This value is
 *  recomputed whenever the zone is modified.
 */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/** Zone display name. */
@property(nonatomic, copy, nullable) NSString *name;

/** User notes on how to apply this zone in the container. */
@property(nonatomic, copy, nullable) NSString *notes;

/** GTM Zone's API relative path. */
@property(nonatomic, copy, nullable) NSString *path;

/** Auto generated link to the tag manager UI */
@property(nonatomic, copy, nullable) NSString *tagManagerUrl;

/** This Zone's type restrictions. */
@property(nonatomic, strong, nullable) GTLRTagManager_ZoneTypeRestriction *typeRestriction;

/** GTM Workspace ID. */
@property(nonatomic, copy, nullable) NSString *workspaceId;

/** The Zone ID uniquely identifies the GTM Zone. */
@property(nonatomic, copy, nullable) NSString *zoneId;

@end


/**
 *  Represents a Zone's boundaries.
 */
@interface GTLRTagManager_ZoneBoundary : GTLRObject

/** The conditions that, when conjoined, make up the boundary. */
@property(nonatomic, strong, nullable) NSArray<GTLRTagManager_Condition *> *condition;

/**
 *  Custom evaluation trigger IDs. A zone will evaluate its boundary conditions
 *  when any of the listed triggers are true.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *customEvaluationTriggerId;

@end


/**
 *  Represents a child container of a Zone.
 */
@interface GTLRTagManager_ZoneChildContainer : GTLRObject

/** The zone's nickname for the child container. */
@property(nonatomic, copy, nullable) NSString *nickname;

/** The child container's public id. */
@property(nonatomic, copy, nullable) NSString *publicId;

@end


/**
 *  Represents a Zone's type restrictions.
 */
@interface GTLRTagManager_ZoneTypeRestriction : GTLRObject

/**
 *  True if type restrictions have been enabled for this Zone.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enable;

/**
 *  List of type public ids that have been whitelisted for use in this Zone.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *whitelistedTypeId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
