// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Tag Manager API (tagmanager/v2)
// Description:
//   This API allows clients to access and modify container and tag
//   configuration.
// Documentation:
//   https://developers.google.com/tag-manager

#import <GoogleAPIClientForREST/GTLRTagManagerObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRTagManager_AccountAccess.permission
NSString * const kGTLRTagManager_AccountAccess_Permission_AccountPermissionUnspecified = @"accountPermissionUnspecified";
NSString * const kGTLRTagManager_AccountAccess_Permission_Admin = @"admin";
NSString * const kGTLRTagManager_AccountAccess_Permission_NoAccess = @"noAccess";
NSString * const kGTLRTagManager_AccountAccess_Permission_User = @"user";

// GTLRTagManager_BuiltInVariable.type
NSString * const kGTLRTagManager_BuiltInVariable_Type_AdvertiserId = @"advertiserId";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AdvertisingTrackingEnabled = @"advertisingTrackingEnabled";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpBrowserLanguage = @"ampBrowserLanguage";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpCanonicalHost = @"ampCanonicalHost";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpCanonicalPath = @"ampCanonicalPath";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpCanonicalUrl = @"ampCanonicalUrl";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientId = @"ampClientId";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientMaxScrollX = @"ampClientMaxScrollX";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientMaxScrollY = @"ampClientMaxScrollY";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientScreenHeight = @"ampClientScreenHeight";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientScreenWidth = @"ampClientScreenWidth";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientScrollX = @"ampClientScrollX";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientScrollY = @"ampClientScrollY";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientTimestamp = @"ampClientTimestamp";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpClientTimezone = @"ampClientTimezone";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpGtmEvent = @"ampGtmEvent";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpPageDownloadTime = @"ampPageDownloadTime";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpPageLoadTime = @"ampPageLoadTime";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpPageViewId = @"ampPageViewId";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpReferrer = @"ampReferrer";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpTitle = @"ampTitle";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AmpTotalEngagedTime = @"ampTotalEngagedTime";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AppId    = @"appId";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AppName  = @"appName";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AppVersionCode = @"appVersionCode";
NSString * const kGTLRTagManager_BuiltInVariable_Type_AppVersionName = @"appVersionName";
NSString * const kGTLRTagManager_BuiltInVariable_Type_BuiltInVariableTypeUnspecified = @"builtInVariableTypeUnspecified";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ClickClasses = @"clickClasses";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ClickElement = @"clickElement";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ClickId  = @"clickId";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ClickTarget = @"clickTarget";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ClickText = @"clickText";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ClickUrl = @"clickUrl";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ClientName = @"clientName";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ContainerId = @"containerId";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ContainerVersion = @"containerVersion";
NSString * const kGTLRTagManager_BuiltInVariable_Type_DebugMode = @"debugMode";
NSString * const kGTLRTagManager_BuiltInVariable_Type_DeviceName = @"deviceName";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ElementVisibilityFirstTime = @"elementVisibilityFirstTime";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ElementVisibilityRatio = @"elementVisibilityRatio";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ElementVisibilityRecentTime = @"elementVisibilityRecentTime";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ElementVisibilityTime = @"elementVisibilityTime";
NSString * const kGTLRTagManager_BuiltInVariable_Type_EnvironmentName = @"environmentName";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ErrorLine = @"errorLine";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ErrorMessage = @"errorMessage";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ErrorUrl = @"errorUrl";
NSString * const kGTLRTagManager_BuiltInVariable_Type_Event    = @"event";
NSString * const kGTLRTagManager_BuiltInVariable_Type_EventName = @"eventName";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaign = @"firebaseEventParameterCampaign";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignAclid = @"firebaseEventParameterCampaignAclid";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignAnid = @"firebaseEventParameterCampaignAnid";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignClickTimestamp = @"firebaseEventParameterCampaignClickTimestamp";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignContent = @"firebaseEventParameterCampaignContent";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignCp1 = @"firebaseEventParameterCampaignCp1";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignGclid = @"firebaseEventParameterCampaignGclid";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignSource = @"firebaseEventParameterCampaignSource";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCampaignTerm = @"firebaseEventParameterCampaignTerm";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterCurrency = @"firebaseEventParameterCurrency";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterDynamicLinkAcceptTime = @"firebaseEventParameterDynamicLinkAcceptTime";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterDynamicLinkLinkid = @"firebaseEventParameterDynamicLinkLinkid";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterNotificationMessageDeviceTime = @"firebaseEventParameterNotificationMessageDeviceTime";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterNotificationMessageId = @"firebaseEventParameterNotificationMessageId";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterNotificationMessageName = @"firebaseEventParameterNotificationMessageName";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterNotificationMessageTime = @"firebaseEventParameterNotificationMessageTime";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterNotificationTopic = @"firebaseEventParameterNotificationTopic";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterPreviousAppVersion = @"firebaseEventParameterPreviousAppVersion";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterPreviousOsVersion = @"firebaseEventParameterPreviousOsVersion";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterPrice = @"firebaseEventParameterPrice";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterProductId = @"firebaseEventParameterProductId";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterQuantity = @"firebaseEventParameterQuantity";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirebaseEventParameterValue = @"firebaseEventParameterValue";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FirstPartyServingUrl = @"firstPartyServingUrl";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FormClasses = @"formClasses";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FormElement = @"formElement";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FormId   = @"formId";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FormTarget = @"formTarget";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FormText = @"formText";
NSString * const kGTLRTagManager_BuiltInVariable_Type_FormUrl  = @"formUrl";
NSString * const kGTLRTagManager_BuiltInVariable_Type_HistorySource = @"historySource";
NSString * const kGTLRTagManager_BuiltInVariable_Type_HtmlId   = @"htmlId";
NSString * const kGTLRTagManager_BuiltInVariable_Type_Language = @"language";
NSString * const kGTLRTagManager_BuiltInVariable_Type_NewHistoryFragment = @"newHistoryFragment";
NSString * const kGTLRTagManager_BuiltInVariable_Type_NewHistoryState = @"newHistoryState";
NSString * const kGTLRTagManager_BuiltInVariable_Type_NewHistoryUrl = @"newHistoryUrl";
NSString * const kGTLRTagManager_BuiltInVariable_Type_OldHistoryFragment = @"oldHistoryFragment";
NSString * const kGTLRTagManager_BuiltInVariable_Type_OldHistoryState = @"oldHistoryState";
NSString * const kGTLRTagManager_BuiltInVariable_Type_OldHistoryUrl = @"oldHistoryUrl";
NSString * const kGTLRTagManager_BuiltInVariable_Type_OsVersion = @"osVersion";
NSString * const kGTLRTagManager_BuiltInVariable_Type_PageHostname = @"pageHostname";
NSString * const kGTLRTagManager_BuiltInVariable_Type_PagePath = @"pagePath";
NSString * const kGTLRTagManager_BuiltInVariable_Type_PageUrl  = @"pageUrl";
NSString * const kGTLRTagManager_BuiltInVariable_Type_Platform = @"platform";
NSString * const kGTLRTagManager_BuiltInVariable_Type_QueryString = @"queryString";
NSString * const kGTLRTagManager_BuiltInVariable_Type_RandomNumber = @"randomNumber";
NSString * const kGTLRTagManager_BuiltInVariable_Type_Referrer = @"referrer";
NSString * const kGTLRTagManager_BuiltInVariable_Type_RequestMethod = @"requestMethod";
NSString * const kGTLRTagManager_BuiltInVariable_Type_RequestPath = @"requestPath";
NSString * const kGTLRTagManager_BuiltInVariable_Type_Resolution = @"resolution";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ScrollDepthDirection = @"scrollDepthDirection";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ScrollDepthThreshold = @"scrollDepthThreshold";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ScrollDepthUnits = @"scrollDepthUnits";
NSString * const kGTLRTagManager_BuiltInVariable_Type_SdkVersion = @"sdkVersion";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ServerPageLocationHostname = @"serverPageLocationHostname";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ServerPageLocationPath = @"serverPageLocationPath";
NSString * const kGTLRTagManager_BuiltInVariable_Type_ServerPageLocationUrl = @"serverPageLocationUrl";
NSString * const kGTLRTagManager_BuiltInVariable_Type_VideoCurrentTime = @"videoCurrentTime";
NSString * const kGTLRTagManager_BuiltInVariable_Type_VideoDuration = @"videoDuration";
NSString * const kGTLRTagManager_BuiltInVariable_Type_VideoPercent = @"videoPercent";
NSString * const kGTLRTagManager_BuiltInVariable_Type_VideoProvider = @"videoProvider";
NSString * const kGTLRTagManager_BuiltInVariable_Type_VideoStatus = @"videoStatus";
NSString * const kGTLRTagManager_BuiltInVariable_Type_VideoTitle = @"videoTitle";
NSString * const kGTLRTagManager_BuiltInVariable_Type_VideoUrl = @"videoUrl";
NSString * const kGTLRTagManager_BuiltInVariable_Type_VideoVisible = @"videoVisible";

// GTLRTagManager_Condition.type
NSString * const kGTLRTagManager_Condition_Type_ConditionTypeUnspecified = @"conditionTypeUnspecified";
NSString * const kGTLRTagManager_Condition_Type_Contains       = @"contains";
NSString * const kGTLRTagManager_Condition_Type_CssSelector    = @"cssSelector";
NSString * const kGTLRTagManager_Condition_Type_EndsWith       = @"endsWith";
NSString * const kGTLRTagManager_Condition_Type_Equals         = @"equals";
NSString * const kGTLRTagManager_Condition_Type_Greater        = @"greater";
NSString * const kGTLRTagManager_Condition_Type_GreaterOrEquals = @"greaterOrEquals";
NSString * const kGTLRTagManager_Condition_Type_Less           = @"less";
NSString * const kGTLRTagManager_Condition_Type_LessOrEquals   = @"lessOrEquals";
NSString * const kGTLRTagManager_Condition_Type_MatchRegex     = @"matchRegex";
NSString * const kGTLRTagManager_Condition_Type_StartsWith     = @"startsWith";
NSString * const kGTLRTagManager_Condition_Type_UrlMatches     = @"urlMatches";

// GTLRTagManager_Container.usageContext
NSString * const kGTLRTagManager_Container_UsageContext_Amp    = @"amp";
NSString * const kGTLRTagManager_Container_UsageContext_Android = @"android";
NSString * const kGTLRTagManager_Container_UsageContext_AndroidSdk5 = @"androidSdk5";
NSString * const kGTLRTagManager_Container_UsageContext_Ios    = @"ios";
NSString * const kGTLRTagManager_Container_UsageContext_IosSdk5 = @"iosSdk5";
NSString * const kGTLRTagManager_Container_UsageContext_Server = @"server";
NSString * const kGTLRTagManager_Container_UsageContext_UsageContextUnspecified = @"usageContextUnspecified";
NSString * const kGTLRTagManager_Container_UsageContext_Web    = @"web";

// GTLRTagManager_ContainerAccess.permission
NSString * const kGTLRTagManager_ContainerAccess_Permission_Approve = @"approve";
NSString * const kGTLRTagManager_ContainerAccess_Permission_ContainerPermissionUnspecified = @"containerPermissionUnspecified";
NSString * const kGTLRTagManager_ContainerAccess_Permission_Edit = @"edit";
NSString * const kGTLRTagManager_ContainerAccess_Permission_NoAccess = @"noAccess";
NSString * const kGTLRTagManager_ContainerAccess_Permission_Publish = @"publish";
NSString * const kGTLRTagManager_ContainerAccess_Permission_Read = @"read";

// GTLRTagManager_Entity.changeStatus
NSString * const kGTLRTagManager_Entity_ChangeStatus_Added     = @"added";
NSString * const kGTLRTagManager_Entity_ChangeStatus_ChangeStatusUnspecified = @"changeStatusUnspecified";
NSString * const kGTLRTagManager_Entity_ChangeStatus_Deleted   = @"deleted";
NSString * const kGTLRTagManager_Entity_ChangeStatus_None      = @"none";
NSString * const kGTLRTagManager_Entity_ChangeStatus_Updated   = @"updated";

// GTLRTagManager_Environment.type
NSString * const kGTLRTagManager_Environment_Type_Latest    = @"latest";
NSString * const kGTLRTagManager_Environment_Type_Live      = @"live";
NSString * const kGTLRTagManager_Environment_Type_User      = @"user";
NSString * const kGTLRTagManager_Environment_Type_Workspace = @"workspace";

// GTLRTagManager_Parameter.type
NSString * const kGTLRTagManager_Parameter_Type_Boolean        = @"boolean";
NSString * const kGTLRTagManager_Parameter_Type_Integer        = @"integer";
NSString * const kGTLRTagManager_Parameter_Type_List           = @"list";
NSString * const kGTLRTagManager_Parameter_Type_Map            = @"map";
NSString * const kGTLRTagManager_Parameter_Type_TagReference   = @"tagReference";
NSString * const kGTLRTagManager_Parameter_Type_Template       = @"template";
NSString * const kGTLRTagManager_Parameter_Type_TriggerReference = @"triggerReference";
NSString * const kGTLRTagManager_Parameter_Type_TypeUnspecified = @"typeUnspecified";

// GTLRTagManager_Tag.tagFiringOption
NSString * const kGTLRTagManager_Tag_TagFiringOption_OncePerEvent = @"oncePerEvent";
NSString * const kGTLRTagManager_Tag_TagFiringOption_OncePerLoad = @"oncePerLoad";
NSString * const kGTLRTagManager_Tag_TagFiringOption_TagFiringOptionUnspecified = @"tagFiringOptionUnspecified";
NSString * const kGTLRTagManager_Tag_TagFiringOption_Unlimited = @"unlimited";

// GTLRTagManager_TagConsentSetting.consentStatus
NSString * const kGTLRTagManager_TagConsentSetting_ConsentStatus_Needed = @"needed";
NSString * const kGTLRTagManager_TagConsentSetting_ConsentStatus_NotNeeded = @"notNeeded";
NSString * const kGTLRTagManager_TagConsentSetting_ConsentStatus_NotSet = @"notSet";

// GTLRTagManager_Trigger.type
NSString * const kGTLRTagManager_Trigger_Type_Always           = @"always";
NSString * const kGTLRTagManager_Trigger_Type_AmpClick         = @"ampClick";
NSString * const kGTLRTagManager_Trigger_Type_AmpScroll        = @"ampScroll";
NSString * const kGTLRTagManager_Trigger_Type_AmpTimer         = @"ampTimer";
NSString * const kGTLRTagManager_Trigger_Type_AmpVisibility    = @"ampVisibility";
NSString * const kGTLRTagManager_Trigger_Type_Click            = @"click";
NSString * const kGTLRTagManager_Trigger_Type_ConsentInit      = @"consentInit";
NSString * const kGTLRTagManager_Trigger_Type_CustomEvent      = @"customEvent";
NSString * const kGTLRTagManager_Trigger_Type_DomReady         = @"domReady";
NSString * const kGTLRTagManager_Trigger_Type_ElementVisibility = @"elementVisibility";
NSString * const kGTLRTagManager_Trigger_Type_EventTypeUnspecified = @"eventTypeUnspecified";
NSString * const kGTLRTagManager_Trigger_Type_FirebaseAppException = @"firebaseAppException";
NSString * const kGTLRTagManager_Trigger_Type_FirebaseAppUpdate = @"firebaseAppUpdate";
NSString * const kGTLRTagManager_Trigger_Type_FirebaseCampaign = @"firebaseCampaign";
NSString * const kGTLRTagManager_Trigger_Type_FirebaseFirstOpen = @"firebaseFirstOpen";
NSString * const kGTLRTagManager_Trigger_Type_FirebaseInAppPurchase = @"firebaseInAppPurchase";
NSString * const kGTLRTagManager_Trigger_Type_FirebaseNotificationDismiss = @"firebaseNotificationDismiss";
NSString * const kGTLRTagManager_Trigger_Type_FirebaseNotificationForeground = @"firebaseNotificationForeground";
NSString * const kGTLRTagManager_Trigger_Type_FirebaseNotificationOpen = @"firebaseNotificationOpen";
NSString * const kGTLRTagManager_Trigger_Type_FirebaseNotificationReceive = @"firebaseNotificationReceive";
NSString * const kGTLRTagManager_Trigger_Type_FirebaseOsUpdate = @"firebaseOsUpdate";
NSString * const kGTLRTagManager_Trigger_Type_FirebaseSessionStart = @"firebaseSessionStart";
NSString * const kGTLRTagManager_Trigger_Type_FirebaseUserEngagement = @"firebaseUserEngagement";
NSString * const kGTLRTagManager_Trigger_Type_FormSubmission   = @"formSubmission";
NSString * const kGTLRTagManager_Trigger_Type_HistoryChange    = @"historyChange";
NSString * const kGTLRTagManager_Trigger_Type_Init             = @"init";
NSString * const kGTLRTagManager_Trigger_Type_JsError          = @"jsError";
NSString * const kGTLRTagManager_Trigger_Type_LinkClick        = @"linkClick";
NSString * const kGTLRTagManager_Trigger_Type_Pageview         = @"pageview";
NSString * const kGTLRTagManager_Trigger_Type_ScrollDepth      = @"scrollDepth";
NSString * const kGTLRTagManager_Trigger_Type_ServerPageview   = @"serverPageview";
NSString * const kGTLRTagManager_Trigger_Type_Timer            = @"timer";
NSString * const kGTLRTagManager_Trigger_Type_TriggerGroup     = @"triggerGroup";
NSString * const kGTLRTagManager_Trigger_Type_WindowLoaded     = @"windowLoaded";
NSString * const kGTLRTagManager_Trigger_Type_YouTubeVideo     = @"youTubeVideo";

// GTLRTagManager_VariableFormatValue.caseConversionType
NSString * const kGTLRTagManager_VariableFormatValue_CaseConversionType_Lowercase = @"lowercase";
NSString * const kGTLRTagManager_VariableFormatValue_CaseConversionType_None = @"none";
NSString * const kGTLRTagManager_VariableFormatValue_CaseConversionType_Uppercase = @"uppercase";

// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Account
//

@implementation GTLRTagManager_Account
@dynamic accountId, features, fingerprint, name, path, shareData, tagManagerUrl;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_AccountAccess
//

@implementation GTLRTagManager_AccountAccess
@dynamic permission;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_AccountFeatures
//

@implementation GTLRTagManager_AccountFeatures
@dynamic supportMultipleContainers, supportUserPermissions;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_BuiltInVariable
//

@implementation GTLRTagManager_BuiltInVariable
@dynamic accountId, containerId, name, path, type, workspaceId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Client
//

@implementation GTLRTagManager_Client
@dynamic accountId, clientId, containerId, fingerprint, name, notes, parameter,
         parentFolderId, path, priority, tagManagerUrl, type, workspaceId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"parameter" : [GTLRTagManager_Parameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Condition
//

@implementation GTLRTagManager_Condition
@dynamic parameter, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"parameter" : [GTLRTagManager_Parameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Container
//

@implementation GTLRTagManager_Container
@dynamic accountId, containerId, domainName, features, fingerprint, name, notes,
         path, publicId, taggingServerUrls, tagIds, tagManagerUrl, usageContext;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"domainName" : [NSString class],
    @"taggingServerUrls" : [NSString class],
    @"tagIds" : [NSString class],
    @"usageContext" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ContainerAccess
//

@implementation GTLRTagManager_ContainerAccess
@dynamic containerId, permission;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ContainerFeatures
//

@implementation GTLRTagManager_ContainerFeatures
@dynamic supportBuiltInVariables, supportClients, supportEnvironments,
         supportFolders, supportGtagConfigs, supportTags, supportTemplates,
         supportTriggers, supportUserPermissions, supportVariables,
         supportVersions, supportWorkspaces, supportZones;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ContainerVersion
//

@implementation GTLRTagManager_ContainerVersion
@dynamic accountId, builtInVariable, client, container, containerId,
         containerVersionId, customTemplate, deleted, descriptionProperty,
         fingerprint, folder, gtagConfig, name, path, tag, tagManagerUrl,
         trigger, variable, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"zoneProperty" : @"zone"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"builtInVariable" : [GTLRTagManager_BuiltInVariable class],
    @"client" : [GTLRTagManager_Client class],
    @"customTemplate" : [GTLRTagManager_CustomTemplate class],
    @"folder" : [GTLRTagManager_Folder class],
    @"gtagConfig" : [GTLRTagManager_GtagConfig class],
    @"tag" : [GTLRTagManager_Tag class],
    @"trigger" : [GTLRTagManager_Trigger class],
    @"variable" : [GTLRTagManager_Variable class],
    @"zone" : [GTLRTagManager_Zone class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ContainerVersionHeader
//

@implementation GTLRTagManager_ContainerVersionHeader
@dynamic accountId, containerId, containerVersionId, deleted, name, numClients,
         numCustomTemplates, numGtagConfigs, numMacros, numRules, numTags,
         numTriggers, numVariables, numZones, path;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_CreateBuiltInVariableResponse
//

@implementation GTLRTagManager_CreateBuiltInVariableResponse
@dynamic builtInVariable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"builtInVariable" : [GTLRTagManager_BuiltInVariable class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_CreateContainerVersionRequestVersionOptions
//

@implementation GTLRTagManager_CreateContainerVersionRequestVersionOptions
@dynamic name, notes;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_CreateContainerVersionResponse
//

@implementation GTLRTagManager_CreateContainerVersionResponse
@dynamic compilerError, containerVersion, newWorkspacePath, syncStatus;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_CustomTemplate
//

@implementation GTLRTagManager_CustomTemplate
@dynamic accountId, containerId, fingerprint, galleryReference, name, path,
         tagManagerUrl, templateData, templateId, workspaceId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Destination
//

@implementation GTLRTagManager_Destination
@dynamic accountId, containerId, destinationId, destinationLinkId, fingerprint,
         name, path, tagManagerUrl;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Entity
//

@implementation GTLRTagManager_Entity
@dynamic changeStatus, client, folder, tag, trigger, variable;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Environment
//

@implementation GTLRTagManager_Environment
@dynamic accountId, authorizationCode, authorizationTimestamp, containerId,
         containerVersionId, descriptionProperty, enableDebug, environmentId,
         fingerprint, name, path, tagManagerUrl, type, url, workspaceId;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Folder
//

@implementation GTLRTagManager_Folder
@dynamic accountId, containerId, fingerprint, folderId, name, notes, path,
         tagManagerUrl, workspaceId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_FolderEntities
//

@implementation GTLRTagManager_FolderEntities
@dynamic nextPageToken, tag, trigger, variable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"tag" : [GTLRTagManager_Tag class],
    @"trigger" : [GTLRTagManager_Trigger class],
    @"variable" : [GTLRTagManager_Variable class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_GalleryReference
//

@implementation GTLRTagManager_GalleryReference
@dynamic host, isModified, owner, repository, signature, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_GetContainerSnippetResponse
//

@implementation GTLRTagManager_GetContainerSnippetResponse
@dynamic snippet;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_GetWorkspaceStatusResponse
//

@implementation GTLRTagManager_GetWorkspaceStatusResponse
@dynamic mergeConflict, workspaceChange;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"mergeConflict" : [GTLRTagManager_MergeConflict class],
    @"workspaceChange" : [GTLRTagManager_Entity class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_GtagConfig
//

@implementation GTLRTagManager_GtagConfig
@dynamic accountId, containerId, fingerprint, gtagConfigId, parameter, path,
         tagManagerUrl, type, workspaceId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"parameter" : [GTLRTagManager_Parameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListAccountsResponse
//

@implementation GTLRTagManager_ListAccountsResponse
@dynamic account, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"account" : [GTLRTagManager_Account class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"account";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListClientsResponse
//

@implementation GTLRTagManager_ListClientsResponse
@dynamic client, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"client" : [GTLRTagManager_Client class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"client";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListContainersResponse
//

@implementation GTLRTagManager_ListContainersResponse
@dynamic container, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"container" : [GTLRTagManager_Container class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"container";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListContainerVersionsResponse
//

@implementation GTLRTagManager_ListContainerVersionsResponse
@dynamic containerVersionHeader, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"containerVersionHeader" : [GTLRTagManager_ContainerVersionHeader class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"containerVersionHeader";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListDestinationsResponse
//

@implementation GTLRTagManager_ListDestinationsResponse
@dynamic destination, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"destination" : [GTLRTagManager_Destination class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"destination";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListEnabledBuiltInVariablesResponse
//

@implementation GTLRTagManager_ListEnabledBuiltInVariablesResponse
@dynamic builtInVariable, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"builtInVariable" : [GTLRTagManager_BuiltInVariable class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"builtInVariable";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListEnvironmentsResponse
//

@implementation GTLRTagManager_ListEnvironmentsResponse
@dynamic environment, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"environment" : [GTLRTagManager_Environment class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"environment";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListFoldersResponse
//

@implementation GTLRTagManager_ListFoldersResponse
@dynamic folder, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"folder" : [GTLRTagManager_Folder class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"folder";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListGtagConfigResponse
//

@implementation GTLRTagManager_ListGtagConfigResponse
@dynamic gtagConfig, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"gtagConfig" : [GTLRTagManager_GtagConfig class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"gtagConfig";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListTagsResponse
//

@implementation GTLRTagManager_ListTagsResponse
@dynamic nextPageToken, tag;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"tag" : [GTLRTagManager_Tag class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"tag";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListTemplatesResponse
//

@implementation GTLRTagManager_ListTemplatesResponse
@dynamic nextPageToken, templateProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"templateProperty" : @"template" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"template" : [GTLRTagManager_CustomTemplate class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"templateProperty";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListTriggersResponse
//

@implementation GTLRTagManager_ListTriggersResponse
@dynamic nextPageToken, trigger;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"trigger" : [GTLRTagManager_Trigger class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"trigger";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListUserPermissionsResponse
//

@implementation GTLRTagManager_ListUserPermissionsResponse
@dynamic nextPageToken, userPermission;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"userPermission" : [GTLRTagManager_UserPermission class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"userPermission";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListVariablesResponse
//

@implementation GTLRTagManager_ListVariablesResponse
@dynamic nextPageToken, variable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"variable" : [GTLRTagManager_Variable class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"variable";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListWorkspacesResponse
//

@implementation GTLRTagManager_ListWorkspacesResponse
@dynamic nextPageToken, workspace;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"workspace" : [GTLRTagManager_Workspace class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"workspace";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ListZonesResponse
//

@implementation GTLRTagManager_ListZonesResponse
@dynamic nextPageToken, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"zone" : [GTLRTagManager_Zone class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"zoneProperty";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_MergeConflict
//

@implementation GTLRTagManager_MergeConflict
@dynamic entityInBaseVersion, entityInWorkspace;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Parameter
//

@implementation GTLRTagManager_Parameter
@dynamic key, list, map, type, value;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"list" : [GTLRTagManager_Parameter class],
    @"map" : [GTLRTagManager_Parameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_PublishContainerVersionResponse
//

@implementation GTLRTagManager_PublishContainerVersionResponse
@dynamic compilerError, containerVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_QuickPreviewResponse
//

@implementation GTLRTagManager_QuickPreviewResponse
@dynamic compilerError, containerVersion, syncStatus;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_RevertBuiltInVariableResponse
//

@implementation GTLRTagManager_RevertBuiltInVariableResponse
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_RevertClientResponse
//

@implementation GTLRTagManager_RevertClientResponse
@dynamic client;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_RevertFolderResponse
//

@implementation GTLRTagManager_RevertFolderResponse
@dynamic folder;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_RevertTagResponse
//

@implementation GTLRTagManager_RevertTagResponse
@dynamic tag;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_RevertTemplateResponse
//

@implementation GTLRTagManager_RevertTemplateResponse
@dynamic templateProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"templateProperty" : @"template" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_RevertTriggerResponse
//

@implementation GTLRTagManager_RevertTriggerResponse
@dynamic trigger;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_RevertVariableResponse
//

@implementation GTLRTagManager_RevertVariableResponse
@dynamic variable;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_RevertZoneResponse
//

@implementation GTLRTagManager_RevertZoneResponse
@dynamic zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_SetupTag
//

@implementation GTLRTagManager_SetupTag
@dynamic stopOnSetupFailure, tagName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_SyncStatus
//

@implementation GTLRTagManager_SyncStatus
@dynamic mergeConflict, syncError;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_SyncWorkspaceResponse
//

@implementation GTLRTagManager_SyncWorkspaceResponse
@dynamic mergeConflict, syncStatus;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"mergeConflict" : [GTLRTagManager_MergeConflict class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Tag
//

@implementation GTLRTagManager_Tag
@dynamic accountId, blockingRuleId, blockingTriggerId, consentSettings,
         containerId, fingerprint, firingRuleId, firingTriggerId, liveOnly,
         monitoringMetadata, monitoringMetadataTagNameKey, name, notes,
         parameter, parentFolderId, path, paused, priority, scheduleEndMs,
         scheduleStartMs, setupTag, tagFiringOption, tagId, tagManagerUrl,
         teardownTag, type, workspaceId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"blockingRuleId" : [NSString class],
    @"blockingTriggerId" : [NSString class],
    @"firingRuleId" : [NSString class],
    @"firingTriggerId" : [NSString class],
    @"parameter" : [GTLRTagManager_Parameter class],
    @"setupTag" : [GTLRTagManager_SetupTag class],
    @"teardownTag" : [GTLRTagManager_TeardownTag class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_TagConsentSetting
//

@implementation GTLRTagManager_TagConsentSetting
@dynamic consentStatus, consentType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_TeardownTag
//

@implementation GTLRTagManager_TeardownTag
@dynamic stopTeardownOnFailure, tagName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Trigger
//

@implementation GTLRTagManager_Trigger
@dynamic accountId, autoEventFilter, checkValidation, containerId,
         continuousTimeMinMilliseconds, customEventFilter, eventName, filter,
         fingerprint, horizontalScrollPercentageList, interval, intervalSeconds,
         limit, maxTimerLengthSeconds, name, notes, parameter, parentFolderId,
         path, selector, tagManagerUrl, totalTimeMinMilliseconds, triggerId,
         type, uniqueTriggerId, verticalScrollPercentageList,
         visibilitySelector, visiblePercentageMax, visiblePercentageMin,
         waitForTags, waitForTagsTimeout, workspaceId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"autoEventFilter" : [GTLRTagManager_Condition class],
    @"customEventFilter" : [GTLRTagManager_Condition class],
    @"filter" : [GTLRTagManager_Condition class],
    @"parameter" : [GTLRTagManager_Parameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_UserPermission
//

@implementation GTLRTagManager_UserPermission
@dynamic accountAccess, accountId, containerAccess, emailAddress, path;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"containerAccess" : [GTLRTagManager_ContainerAccess class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Variable
//

@implementation GTLRTagManager_Variable
@dynamic accountId, containerId, disablingTriggerId, enablingTriggerId,
         fingerprint, formatValue, name, notes, parameter, parentFolderId, path,
         scheduleEndMs, scheduleStartMs, tagManagerUrl, type, variableId,
         workspaceId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"disablingTriggerId" : [NSString class],
    @"enablingTriggerId" : [NSString class],
    @"parameter" : [GTLRTagManager_Parameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_VariableFormatValue
//

@implementation GTLRTagManager_VariableFormatValue
@dynamic caseConversionType, convertFalseToValue, convertNullToValue,
         convertTrueToValue, convertUndefinedToValue;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Workspace
//

@implementation GTLRTagManager_Workspace
@dynamic accountId, containerId, descriptionProperty, fingerprint, name, path,
         tagManagerUrl, workspaceId;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_Zone
//

@implementation GTLRTagManager_Zone
@dynamic accountId, boundary, childContainer, containerId, fingerprint, name,
         notes, path, tagManagerUrl, typeRestriction, workspaceId, zoneId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"childContainer" : [GTLRTagManager_ZoneChildContainer class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ZoneBoundary
//

@implementation GTLRTagManager_ZoneBoundary
@dynamic condition, customEvaluationTriggerId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"condition" : [GTLRTagManager_Condition class],
    @"customEvaluationTriggerId" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ZoneChildContainer
//

@implementation GTLRTagManager_ZoneChildContainer
@dynamic nickname, publicId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRTagManager_ZoneTypeRestriction
//

@implementation GTLRTagManager_ZoneTypeRestriction
@dynamic enable, whitelistedTypeId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"whitelistedTypeId" : [NSString class]
  };
  return map;
}

@end
