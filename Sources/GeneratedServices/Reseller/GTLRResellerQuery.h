// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Workspace Reseller API (reseller/v1)
// Description:
//   Perform common functions that are available on the Channel Services console
//   at scale, like placing orders and viewing customer information
// Documentation:
//   https://developers.google.com/google-apps/reseller/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRResellerObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// deletionType

/**
 *  Cancels the subscription immediately. This does not apply to a G Suite
 *  subscription.
 *
 *  Value: "cancel"
 */
FOUNDATION_EXTERN NSString * const kGTLRResellerDeletionTypeCancel;
/** Value: "deletion_type_undefined" */
FOUNDATION_EXTERN NSString * const kGTLRResellerDeletionTypeDeletionTypeUndefined;
/**
 *  Transfers a subscription directly to Google. The customer is immediately
 *  transferred to a direct billing relationship with Google and is given a
 *  short amount of time with no service interruption. The customer can then
 *  choose to set up billing directly with Google by using a credit card, or
 *  they can transfer to another reseller.
 *
 *  Value: "transfer_to_direct"
 */
FOUNDATION_EXTERN NSString * const kGTLRResellerDeletionTypeTransferToDirect;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Reseller query classes.
 */
@interface GTLRResellerQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets a customer account. Use this operation to see a customer account
 *  already in your reseller management, or to see the minimal account
 *  information for an existing customer that you do not manage. For more
 *  information about the API response for existing customers, see [retrieving a
 *  customer
 *  account](/admin-sdk/reseller/v1/how-tos/manage_customers#get_customer).
 *
 *  Method: reseller.customers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 *    @c kGTLRAuthScopeResellerAppsOrderReadonly
 */
@interface GTLRResellerQuery_CustomersGet : GTLRResellerQuery

/**
 *  This can be either the customer's primary domain name or the customer's
 *  unique identifier. If the domain name for a customer changes, the old domain
 *  name cannot be used to access the customer, but the customer's unique
 *  identifier (as returned by the API) can always be used. We recommend storing
 *  the unique identifier in your systems where applicable.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Fetches a @c GTLRReseller_Customer.
 *
 *  Gets a customer account. Use this operation to see a customer account
 *  already in your reseller management, or to see the minimal account
 *  information for an existing customer that you do not manage. For more
 *  information about the API response for existing customers, see [retrieving a
 *  customer
 *  account](/admin-sdk/reseller/v1/how-tos/manage_customers#get_customer).
 *
 *  @param customerId This can be either the customer's primary domain name or
 *    the customer's unique identifier. If the domain name for a customer
 *    changes, the old domain name cannot be used to access the customer, but
 *    the customer's unique identifier (as returned by the API) can always be
 *    used. We recommend storing the unique identifier in your systems where
 *    applicable.
 *
 *  @return GTLRResellerQuery_CustomersGet
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId;

@end

/**
 *  Orders a new customer's account. Before ordering a new customer account,
 *  establish whether the customer account already exists using the
 *  [`customers.get`](/admin-sdk/reseller/v1/reference/customers/get) If the
 *  customer account exists as a direct Google account or as a resold customer
 *  account from another reseller, use the `customerAuthToken\\` as described in
 *  [order a resold account for an existing
 *  customer](/admin-sdk/reseller/v1/how-tos/manage_customers#create_existing_customer).
 *  For more information about ordering a new customer account, see [order a new
 *  customer
 *  account](/admin-sdk/reseller/v1/how-tos/manage_customers#create_customer).
 *  After creating a new customer account, you must provision a user as an
 *  administrator. The customer's administrator is required to sign in to the
 *  Admin console and sign the G Suite via Reseller agreement to activate the
 *  account. Resellers are prohibited from signing the G Suite via Reseller
 *  agreement on the customer's behalf. For more information, see [order a new
 *  customer account](/admin-sdk/reseller/v1/how-tos/manage_customers#tos).
 *
 *  Method: reseller.customers.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_CustomersInsert : GTLRResellerQuery

/**
 *  The `customerAuthToken` query string is required when creating a resold
 *  account that transfers a direct customer's subscription or transfers another
 *  reseller customer's subscription to your reseller management. This is a
 *  hexadecimal authentication token needed to complete the subscription
 *  transfer. For more information, see the administrator help center.
 */
@property(nonatomic, copy, nullable) NSString *customerAuthToken;

/**
 *  Fetches a @c GTLRReseller_Customer.
 *
 *  Orders a new customer's account. Before ordering a new customer account,
 *  establish whether the customer account already exists using the
 *  [`customers.get`](/admin-sdk/reseller/v1/reference/customers/get) If the
 *  customer account exists as a direct Google account or as a resold customer
 *  account from another reseller, use the `customerAuthToken\\` as described in
 *  [order a resold account for an existing
 *  customer](/admin-sdk/reseller/v1/how-tos/manage_customers#create_existing_customer).
 *  For more information about ordering a new customer account, see [order a new
 *  customer
 *  account](/admin-sdk/reseller/v1/how-tos/manage_customers#create_customer).
 *  After creating a new customer account, you must provision a user as an
 *  administrator. The customer's administrator is required to sign in to the
 *  Admin console and sign the G Suite via Reseller agreement to activate the
 *  account. Resellers are prohibited from signing the G Suite via Reseller
 *  agreement on the customer's behalf. For more information, see [order a new
 *  customer account](/admin-sdk/reseller/v1/how-tos/manage_customers#tos).
 *
 *  @param object The @c GTLRReseller_Customer to include in the query.
 *
 *  @return GTLRResellerQuery_CustomersInsert
 */
+ (instancetype)queryWithObject:(GTLRReseller_Customer *)object;

@end

/**
 *  Updates a customer account's settings. This method supports patch semantics.
 *  You cannot update `customerType` via the Reseller API, but a `"team"`
 *  customer can verify their domain and become `customerType = "domain"`. For
 *  more information, see [Verify your domain to unlock Essentials
 *  features](https://support.google.com/a/answer/9122284).
 *
 *  Method: reseller.customers.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_CustomersPatch : GTLRResellerQuery

/**
 *  This can be either the customer's primary domain name or the customer's
 *  unique identifier. If the domain name for a customer changes, the old domain
 *  name cannot be used to access the customer, but the customer's unique
 *  identifier (as returned by the API) can always be used. We recommend storing
 *  the unique identifier in your systems where applicable.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Fetches a @c GTLRReseller_Customer.
 *
 *  Updates a customer account's settings. This method supports patch semantics.
 *  You cannot update `customerType` via the Reseller API, but a `"team"`
 *  customer can verify their domain and become `customerType = "domain"`. For
 *  more information, see [Verify your domain to unlock Essentials
 *  features](https://support.google.com/a/answer/9122284).
 *
 *  @param object The @c GTLRReseller_Customer to include in the query.
 *  @param customerId This can be either the customer's primary domain name or
 *    the customer's unique identifier. If the domain name for a customer
 *    changes, the old domain name cannot be used to access the customer, but
 *    the customer's unique identifier (as returned by the API) can always be
 *    used. We recommend storing the unique identifier in your systems where
 *    applicable.
 *
 *  @return GTLRResellerQuery_CustomersPatch
 */
+ (instancetype)queryWithObject:(GTLRReseller_Customer *)object
                     customerId:(NSString *)customerId;

@end

/**
 *  Updates a customer account's settings. You cannot update `customerType` via
 *  the Reseller API, but a `"team"` customer can verify their domain and become
 *  `customerType = "domain"`. For more information, see [update a customer's
 *  settings](/admin-sdk/reseller/v1/how-tos/manage_customers#update_customer).
 *
 *  Method: reseller.customers.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_CustomersUpdate : GTLRResellerQuery

/**
 *  This can be either the customer's primary domain name or the customer's
 *  unique identifier. If the domain name for a customer changes, the old domain
 *  name cannot be used to access the customer, but the customer's unique
 *  identifier (as returned by the API) can always be used. We recommend storing
 *  the unique identifier in your systems where applicable.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Fetches a @c GTLRReseller_Customer.
 *
 *  Updates a customer account's settings. You cannot update `customerType` via
 *  the Reseller API, but a `"team"` customer can verify their domain and become
 *  `customerType = "domain"`. For more information, see [update a customer's
 *  settings](/admin-sdk/reseller/v1/how-tos/manage_customers#update_customer).
 *
 *  @param object The @c GTLRReseller_Customer to include in the query.
 *  @param customerId This can be either the customer's primary domain name or
 *    the customer's unique identifier. If the domain name for a customer
 *    changes, the old domain name cannot be used to access the customer, but
 *    the customer's unique identifier (as returned by the API) can always be
 *    used. We recommend storing the unique identifier in your systems where
 *    applicable.
 *
 *  @return GTLRResellerQuery_CustomersUpdate
 */
+ (instancetype)queryWithObject:(GTLRReseller_Customer *)object
                     customerId:(NSString *)customerId;

@end

/**
 *  Returns all the details of the watch corresponding to the reseller.
 *
 *  Method: reseller.resellernotify.getwatchdetails
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 *    @c kGTLRAuthScopeResellerAppsOrderReadonly
 */
@interface GTLRResellerQuery_ResellernotifyGetwatchdetails : GTLRResellerQuery

/**
 *  Fetches a @c GTLRReseller_NotifyGetwatchdetailsResponse.
 *
 *  Returns all the details of the watch corresponding to the reseller.
 *
 *  @return GTLRResellerQuery_ResellernotifyGetwatchdetails
 */
+ (instancetype)query;

@end

/**
 *  Registers a Reseller for receiving notifications.
 *
 *  Method: reseller.resellernotify.register
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_ResellernotifyRegister : GTLRResellerQuery

/** The service account which will own the created Cloud-PubSub topic. */
@property(nonatomic, copy, nullable) NSString *serviceAccountEmailAddress;

/**
 *  Fetches a @c GTLRReseller_NotifyResource.
 *
 *  Registers a Reseller for receiving notifications.
 *
 *  @return GTLRResellerQuery_ResellernotifyRegister
 */
+ (instancetype)query;

@end

/**
 *  Unregisters a Reseller for receiving notifications.
 *
 *  Method: reseller.resellernotify.unregister
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_ResellernotifyUnregister : GTLRResellerQuery

/** The service account which owns the Cloud-PubSub topic. */
@property(nonatomic, copy, nullable) NSString *serviceAccountEmailAddress;

/**
 *  Fetches a @c GTLRReseller_NotifyResource.
 *
 *  Unregisters a Reseller for receiving notifications.
 *
 *  @return GTLRResellerQuery_ResellernotifyUnregister
 */
+ (instancetype)query;

@end

/**
 *  Activates a subscription previously suspended by the reseller. If you did
 *  not suspend the customer subscription and it is suspended for any other
 *  reason, such as for abuse or a pending ToS acceptance, this call will not
 *  reactivate the customer subscription.
 *
 *  Method: reseller.subscriptions.activate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_SubscriptionsActivate : GTLRResellerQuery

/**
 *  This can be either the customer's primary domain name or the customer's
 *  unique identifier. If the domain name for a customer changes, the old domain
 *  name cannot be used to access the customer, but the customer's unique
 *  identifier (as returned by the API) can always be used. We recommend storing
 *  the unique identifier in your systems where applicable.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  This is a required property. The `subscriptionId` is the subscription
 *  identifier and is unique for each customer. Since a `subscriptionId` changes
 *  when a subscription is updated, we recommend to not use this ID as a key for
 *  persistent data. And the `subscriptionId` can be found using the retrieve
 *  all reseller subscriptions method.
 */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  Fetches a @c GTLRReseller_Subscription.
 *
 *  Activates a subscription previously suspended by the reseller. If you did
 *  not suspend the customer subscription and it is suspended for any other
 *  reason, such as for abuse or a pending ToS acceptance, this call will not
 *  reactivate the customer subscription.
 *
 *  @param customerId This can be either the customer's primary domain name or
 *    the customer's unique identifier. If the domain name for a customer
 *    changes, the old domain name cannot be used to access the customer, but
 *    the customer's unique identifier (as returned by the API) can always be
 *    used. We recommend storing the unique identifier in your systems where
 *    applicable.
 *  @param subscriptionId This is a required property. The `subscriptionId` is
 *    the subscription identifier and is unique for each customer. Since a
 *    `subscriptionId` changes when a subscription is updated, we recommend to
 *    not use this ID as a key for persistent data. And the `subscriptionId` can
 *    be found using the retrieve all reseller subscriptions method.
 *
 *  @return GTLRResellerQuery_SubscriptionsActivate
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                     subscriptionId:(NSString *)subscriptionId;

@end

/**
 *  Updates a subscription plan. Use this method to update a plan for a 30-day
 *  trial or a flexible plan subscription to an annual commitment plan with
 *  monthly or yearly payments. How a plan is updated differs depending on the
 *  plan and the products. For more information, see the description in [manage
 *  subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#update_subscription_plan).
 *
 *  Method: reseller.subscriptions.changePlan
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_SubscriptionsChangePlan : GTLRResellerQuery

/**
 *  This can be either the customer's primary domain name or the customer's
 *  unique identifier. If the domain name for a customer changes, the old domain
 *  name cannot be used to access the customer, but the customer's unique
 *  identifier (as returned by the API) can always be used. We recommend storing
 *  the unique identifier in your systems where applicable.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  This is a required property. The `subscriptionId` is the subscription
 *  identifier and is unique for each customer. Since a `subscriptionId` changes
 *  when a subscription is updated, we recommend to not use this ID as a key for
 *  persistent data. And the `subscriptionId` can be found using the retrieve
 *  all reseller subscriptions method.
 */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  Fetches a @c GTLRReseller_Subscription.
 *
 *  Updates a subscription plan. Use this method to update a plan for a 30-day
 *  trial or a flexible plan subscription to an annual commitment plan with
 *  monthly or yearly payments. How a plan is updated differs depending on the
 *  plan and the products. For more information, see the description in [manage
 *  subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#update_subscription_plan).
 *
 *  @param object The @c GTLRReseller_ChangePlanRequest to include in the query.
 *  @param customerId This can be either the customer's primary domain name or
 *    the customer's unique identifier. If the domain name for a customer
 *    changes, the old domain name cannot be used to access the customer, but
 *    the customer's unique identifier (as returned by the API) can always be
 *    used. We recommend storing the unique identifier in your systems where
 *    applicable.
 *  @param subscriptionId This is a required property. The `subscriptionId` is
 *    the subscription identifier and is unique for each customer. Since a
 *    `subscriptionId` changes when a subscription is updated, we recommend to
 *    not use this ID as a key for persistent data. And the `subscriptionId` can
 *    be found using the retrieve all reseller subscriptions method.
 *
 *  @return GTLRResellerQuery_SubscriptionsChangePlan
 */
+ (instancetype)queryWithObject:(GTLRReseller_ChangePlanRequest *)object
                     customerId:(NSString *)customerId
                 subscriptionId:(NSString *)subscriptionId;

@end

/**
 *  Updates a user license's renewal settings. This is applicable for accounts
 *  with annual commitment plans only. For more information, see the description
 *  in [manage
 *  subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#update_renewal).
 *
 *  Method: reseller.subscriptions.changeRenewalSettings
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_SubscriptionsChangeRenewalSettings : GTLRResellerQuery

/**
 *  This can be either the customer's primary domain name or the customer's
 *  unique identifier. If the domain name for a customer changes, the old domain
 *  name cannot be used to access the customer, but the customer's unique
 *  identifier (as returned by the API) can always be used. We recommend storing
 *  the unique identifier in your systems where applicable.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  This is a required property. The `subscriptionId` is the subscription
 *  identifier and is unique for each customer. Since a `subscriptionId` changes
 *  when a subscription is updated, we recommend to not use this ID as a key for
 *  persistent data. And the `subscriptionId` can be found using the retrieve
 *  all reseller subscriptions method.
 */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  Fetches a @c GTLRReseller_Subscription.
 *
 *  Updates a user license's renewal settings. This is applicable for accounts
 *  with annual commitment plans only. For more information, see the description
 *  in [manage
 *  subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#update_renewal).
 *
 *  @param object The @c GTLRReseller_RenewalSettings to include in the query.
 *  @param customerId This can be either the customer's primary domain name or
 *    the customer's unique identifier. If the domain name for a customer
 *    changes, the old domain name cannot be used to access the customer, but
 *    the customer's unique identifier (as returned by the API) can always be
 *    used. We recommend storing the unique identifier in your systems where
 *    applicable.
 *  @param subscriptionId This is a required property. The `subscriptionId` is
 *    the subscription identifier and is unique for each customer. Since a
 *    `subscriptionId` changes when a subscription is updated, we recommend to
 *    not use this ID as a key for persistent data. And the `subscriptionId` can
 *    be found using the retrieve all reseller subscriptions method.
 *
 *  @return GTLRResellerQuery_SubscriptionsChangeRenewalSettings
 */
+ (instancetype)queryWithObject:(GTLRReseller_RenewalSettings *)object
                     customerId:(NSString *)customerId
                 subscriptionId:(NSString *)subscriptionId;

@end

/**
 *  Updates a subscription's user license settings. For more information about
 *  updating an annual commitment plan or a flexible plan subscription’s
 *  licenses, see [Manage
 *  Subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#update_subscription_seat).
 *
 *  Method: reseller.subscriptions.changeSeats
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_SubscriptionsChangeSeats : GTLRResellerQuery

/**
 *  This can be either the customer's primary domain name or the customer's
 *  unique identifier. If the domain name for a customer changes, the old domain
 *  name cannot be used to access the customer, but the customer's unique
 *  identifier (as returned by the API) can always be used. We recommend storing
 *  the unique identifier in your systems where applicable.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  This is a required property. The `subscriptionId` is the subscription
 *  identifier and is unique for each customer. Since a `subscriptionId` changes
 *  when a subscription is updated, we recommend to not use this ID as a key for
 *  persistent data. And the `subscriptionId` can be found using the retrieve
 *  all reseller subscriptions method.
 */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  Fetches a @c GTLRReseller_Subscription.
 *
 *  Updates a subscription's user license settings. For more information about
 *  updating an annual commitment plan or a flexible plan subscription’s
 *  licenses, see [Manage
 *  Subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#update_subscription_seat).
 *
 *  @param object The @c GTLRReseller_Seats to include in the query.
 *  @param customerId This can be either the customer's primary domain name or
 *    the customer's unique identifier. If the domain name for a customer
 *    changes, the old domain name cannot be used to access the customer, but
 *    the customer's unique identifier (as returned by the API) can always be
 *    used. We recommend storing the unique identifier in your systems where
 *    applicable.
 *  @param subscriptionId This is a required property. The `subscriptionId` is
 *    the subscription identifier and is unique for each customer. Since a
 *    `subscriptionId` changes when a subscription is updated, we recommend to
 *    not use this ID as a key for persistent data. And the `subscriptionId` can
 *    be found using the retrieve all reseller subscriptions method.
 *
 *  @return GTLRResellerQuery_SubscriptionsChangeSeats
 */
+ (instancetype)queryWithObject:(GTLRReseller_Seats *)object
                     customerId:(NSString *)customerId
                 subscriptionId:(NSString *)subscriptionId;

@end

/**
 *  Cancels, suspends, or transfers a subscription to direct.
 *
 *  Method: reseller.subscriptions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_SubscriptionsDelete : GTLRResellerQuery

/**
 *  This can be either the customer's primary domain name or the customer's
 *  unique identifier. If the domain name for a customer changes, the old domain
 *  name cannot be used to access the customer, but the customer's unique
 *  identifier (as returned by the API) can always be used. We recommend storing
 *  the unique identifier in your systems where applicable.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  The `deletionType` query string enables the cancellation, downgrade, or
 *  suspension of a subscription.
 *
 *  Likely values:
 *    @arg @c kGTLRResellerDeletionTypeDeletionTypeUndefined Value
 *        "deletion_type_undefined"
 *    @arg @c kGTLRResellerDeletionTypeCancel Cancels the subscription
 *        immediately. This does not apply to a G Suite subscription. (Value:
 *        "cancel")
 *    @arg @c kGTLRResellerDeletionTypeTransferToDirect Transfers a subscription
 *        directly to Google. The customer is immediately transferred to a
 *        direct billing relationship with Google and is given a short amount of
 *        time with no service interruption. The customer can then choose to set
 *        up billing directly with Google by using a credit card, or they can
 *        transfer to another reseller. (Value: "transfer_to_direct")
 */
@property(nonatomic, copy, nullable) NSString *deletionType;

/**
 *  This is a required property. The `subscriptionId` is the subscription
 *  identifier and is unique for each customer. Since a `subscriptionId` changes
 *  when a subscription is updated, we recommend to not use this ID as a key for
 *  persistent data. And the `subscriptionId` can be found using the retrieve
 *  all reseller subscriptions method.
 */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Cancels, suspends, or transfers a subscription to direct.
 *
 *  @param customerId This can be either the customer's primary domain name or
 *    the customer's unique identifier. If the domain name for a customer
 *    changes, the old domain name cannot be used to access the customer, but
 *    the customer's unique identifier (as returned by the API) can always be
 *    used. We recommend storing the unique identifier in your systems where
 *    applicable.
 *  @param subscriptionId This is a required property. The `subscriptionId` is
 *    the subscription identifier and is unique for each customer. Since a
 *    `subscriptionId` changes when a subscription is updated, we recommend to
 *    not use this ID as a key for persistent data. And the `subscriptionId` can
 *    be found using the retrieve all reseller subscriptions method.
 *  @param deletionType The `deletionType` query string enables the
 *    cancellation, downgrade, or suspension of a subscription.
 *
 *  Likely values for @c deletionType:
 *    @arg @c kGTLRResellerDeletionTypeDeletionTypeUndefined Value
 *        "deletion_type_undefined"
 *    @arg @c kGTLRResellerDeletionTypeCancel Cancels the subscription
 *        immediately. This does not apply to a G Suite subscription. (Value:
 *        "cancel")
 *    @arg @c kGTLRResellerDeletionTypeTransferToDirect Transfers a subscription
 *        directly to Google. The customer is immediately transferred to a
 *        direct billing relationship with Google and is given a short amount of
 *        time with no service interruption. The customer can then choose to set
 *        up billing directly with Google by using a credit card, or they can
 *        transfer to another reseller. (Value: "transfer_to_direct")
 *
 *  @return GTLRResellerQuery_SubscriptionsDelete
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                     subscriptionId:(NSString *)subscriptionId
                       deletionType:(NSString *)deletionType;

@end

/**
 *  Gets a specific subscription. The `subscriptionId` can be found using the
 *  [Retrieve all reseller
 *  subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#get_all_subscriptions)
 *  method. For more information about retrieving a specific subscription, see
 *  the information descrived in [manage
 *  subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#get_subscription).
 *
 *  Method: reseller.subscriptions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 *    @c kGTLRAuthScopeResellerAppsOrderReadonly
 */
@interface GTLRResellerQuery_SubscriptionsGet : GTLRResellerQuery

/**
 *  This can be either the customer's primary domain name or the customer's
 *  unique identifier. If the domain name for a customer changes, the old domain
 *  name cannot be used to access the customer, but the customer's unique
 *  identifier (as returned by the API) can always be used. We recommend storing
 *  the unique identifier in your systems where applicable.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  This is a required property. The `subscriptionId` is the subscription
 *  identifier and is unique for each customer. Since a `subscriptionId` changes
 *  when a subscription is updated, we recommend to not use this ID as a key for
 *  persistent data. And the `subscriptionId` can be found using the retrieve
 *  all reseller subscriptions method.
 */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  Fetches a @c GTLRReseller_Subscription.
 *
 *  Gets a specific subscription. The `subscriptionId` can be found using the
 *  [Retrieve all reseller
 *  subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#get_all_subscriptions)
 *  method. For more information about retrieving a specific subscription, see
 *  the information descrived in [manage
 *  subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#get_subscription).
 *
 *  @param customerId This can be either the customer's primary domain name or
 *    the customer's unique identifier. If the domain name for a customer
 *    changes, the old domain name cannot be used to access the customer, but
 *    the customer's unique identifier (as returned by the API) can always be
 *    used. We recommend storing the unique identifier in your systems where
 *    applicable.
 *  @param subscriptionId This is a required property. The `subscriptionId` is
 *    the subscription identifier and is unique for each customer. Since a
 *    `subscriptionId` changes when a subscription is updated, we recommend to
 *    not use this ID as a key for persistent data. And the `subscriptionId` can
 *    be found using the retrieve all reseller subscriptions method.
 *
 *  @return GTLRResellerQuery_SubscriptionsGet
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                     subscriptionId:(NSString *)subscriptionId;

@end

/**
 *  Creates or transfer a subscription. Create a subscription for a customer's
 *  account that you ordered using the [Order a new customer
 *  account](/admin-sdk/reseller/v1/reference/customers/insert.html) method. For
 *  more information about creating a subscription for different payment plans,
 *  see [manage
 *  subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#create_subscription).\\
 *  If you did not order the customer's account using the customer insert
 *  method, use the customer's `customerAuthToken` when creating a subscription
 *  for that customer. If transferring a G Suite subscription with an associated
 *  Google Drive or Google Vault subscription, use the [batch
 *  operation](/admin-sdk/reseller/v1/how-tos/batch.html) to transfer all of
 *  these subscriptions. For more information, see how to [transfer
 *  subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#transfer_a_subscription).
 *
 *  Method: reseller.subscriptions.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_SubscriptionsInsert : GTLRResellerQuery

/**
 *  The `customerAuthToken` query string is required when creating a resold
 *  account that transfers a direct customer's subscription or transfers another
 *  reseller customer's subscription to your reseller management. This is a
 *  hexadecimal authentication token needed to complete the subscription
 *  transfer. For more information, see the administrator help center.
 */
@property(nonatomic, copy, nullable) NSString *customerAuthToken;

/**
 *  This can be either the customer's primary domain name or the customer's
 *  unique identifier. If the domain name for a customer changes, the old domain
 *  name cannot be used to access the customer, but the customer's unique
 *  identifier (as returned by the API) can always be used. We recommend storing
 *  the unique identifier in your systems where applicable.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Fetches a @c GTLRReseller_Subscription.
 *
 *  Creates or transfer a subscription. Create a subscription for a customer's
 *  account that you ordered using the [Order a new customer
 *  account](/admin-sdk/reseller/v1/reference/customers/insert.html) method. For
 *  more information about creating a subscription for different payment plans,
 *  see [manage
 *  subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#create_subscription).\\
 *  If you did not order the customer's account using the customer insert
 *  method, use the customer's `customerAuthToken` when creating a subscription
 *  for that customer. If transferring a G Suite subscription with an associated
 *  Google Drive or Google Vault subscription, use the [batch
 *  operation](/admin-sdk/reseller/v1/how-tos/batch.html) to transfer all of
 *  these subscriptions. For more information, see how to [transfer
 *  subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#transfer_a_subscription).
 *
 *  @param object The @c GTLRReseller_Subscription to include in the query.
 *  @param customerId This can be either the customer's primary domain name or
 *    the customer's unique identifier. If the domain name for a customer
 *    changes, the old domain name cannot be used to access the customer, but
 *    the customer's unique identifier (as returned by the API) can always be
 *    used. We recommend storing the unique identifier in your systems where
 *    applicable.
 *
 *  @return GTLRResellerQuery_SubscriptionsInsert
 */
+ (instancetype)queryWithObject:(GTLRReseller_Subscription *)object
                     customerId:(NSString *)customerId;

@end

/**
 *  Lists of subscriptions managed by the reseller. The list can be all
 *  subscriptions, all of a customer's subscriptions, or all of a customer's
 *  transferable subscriptions. Optionally, this method can filter the response
 *  by a `customerNamePrefix`. For more information, see [manage
 *  subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions).
 *
 *  Method: reseller.subscriptions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 *    @c kGTLRAuthScopeResellerAppsOrderReadonly
 */
@interface GTLRResellerQuery_SubscriptionsList : GTLRResellerQuery

/**
 *  The `customerAuthToken` query string is required when creating a resold
 *  account that transfers a direct customer's subscription or transfers another
 *  reseller customer's subscription to your reseller management. This is a
 *  hexadecimal authentication token needed to complete the subscription
 *  transfer. For more information, see the administrator help center.
 */
@property(nonatomic, copy, nullable) NSString *customerAuthToken;

/**
 *  This can be either the customer's primary domain name or the customer's
 *  unique identifier. If the domain name for a customer changes, the old domain
 *  name cannot be used to access the customer, but the customer's unique
 *  identifier (as returned by the API) can always be used. We recommend storing
 *  the unique identifier in your systems where applicable.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  When retrieving all of your subscriptions and filtering for specific
 *  customers, you can enter a prefix for a customer name. Using an example
 *  customer group that includes `exam.com`, `example20.com` and `example.com`:
 *  - `exa` -- Returns all customer names that start with 'exa' which could
 *  include `exam.com`, `example20.com`, and `example.com`. A name prefix is
 *  similar to using a regular expression's asterisk, exa*. - `example` --
 *  Returns `example20.com` and `example.com`.
 */
@property(nonatomic, copy, nullable) NSString *customerNamePrefix;

/**
 *  When retrieving a large list, the `maxResults` is the maximum number of
 *  results per page. The `nextPageToken` value takes you to the next page. The
 *  default is 20.
 *
 *  @note The documented range is 1..100.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/** Token to specify next page in the list */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRReseller_Subscriptions.
 *
 *  Lists of subscriptions managed by the reseller. The list can be all
 *  subscriptions, all of a customer's subscriptions, or all of a customer's
 *  transferable subscriptions. Optionally, this method can filter the response
 *  by a `customerNamePrefix`. For more information, see [manage
 *  subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions).
 *
 *  @return GTLRResellerQuery_SubscriptionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Immediately move a 30-day free trial subscription to a paid service
 *  subscription. This method is only applicable if a payment plan has already
 *  been set up for the 30-day trial subscription. For more information, see
 *  [manage
 *  subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#paid_service).
 *
 *  Method: reseller.subscriptions.startPaidService
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_SubscriptionsStartPaidService : GTLRResellerQuery

/**
 *  This can be either the customer's primary domain name or the customer's
 *  unique identifier. If the domain name for a customer changes, the old domain
 *  name cannot be used to access the customer, but the customer's unique
 *  identifier (as returned by the API) can always be used. We recommend storing
 *  the unique identifier in your systems where applicable.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  This is a required property. The `subscriptionId` is the subscription
 *  identifier and is unique for each customer. Since a `subscriptionId` changes
 *  when a subscription is updated, we recommend to not use this ID as a key for
 *  persistent data. And the `subscriptionId` can be found using the retrieve
 *  all reseller subscriptions method.
 */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  Fetches a @c GTLRReseller_Subscription.
 *
 *  Immediately move a 30-day free trial subscription to a paid service
 *  subscription. This method is only applicable if a payment plan has already
 *  been set up for the 30-day trial subscription. For more information, see
 *  [manage
 *  subscriptions](/admin-sdk/reseller/v1/how-tos/manage_subscriptions#paid_service).
 *
 *  @param customerId This can be either the customer's primary domain name or
 *    the customer's unique identifier. If the domain name for a customer
 *    changes, the old domain name cannot be used to access the customer, but
 *    the customer's unique identifier (as returned by the API) can always be
 *    used. We recommend storing the unique identifier in your systems where
 *    applicable.
 *  @param subscriptionId This is a required property. The `subscriptionId` is
 *    the subscription identifier and is unique for each customer. Since a
 *    `subscriptionId` changes when a subscription is updated, we recommend to
 *    not use this ID as a key for persistent data. And the `subscriptionId` can
 *    be found using the retrieve all reseller subscriptions method.
 *
 *  @return GTLRResellerQuery_SubscriptionsStartPaidService
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                     subscriptionId:(NSString *)subscriptionId;

@end

/**
 *  Suspends an active subscription. You can use this method to suspend a paid
 *  subscription that is currently in the `ACTIVE` state. * For `FLEXIBLE`
 *  subscriptions, billing is paused. * For `ANNUAL_MONTHLY_PAY` or
 *  `ANNUAL_YEARLY_PAY` subscriptions: * Suspending the subscription does not
 *  change the renewal date that was originally committed to. * A suspended
 *  subscription does not renew. If you activate the subscription after the
 *  original renewal date, a new annual subscription will be created, starting
 *  on the day of activation. We strongly encourage you to suspend subscriptions
 *  only for short periods of time as suspensions over 60 days may result in the
 *  subscription being cancelled.
 *
 *  Method: reseller.subscriptions.suspend
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeResellerAppsOrder
 */
@interface GTLRResellerQuery_SubscriptionsSuspend : GTLRResellerQuery

/**
 *  This can be either the customer's primary domain name or the customer's
 *  unique identifier. If the domain name for a customer changes, the old domain
 *  name cannot be used to access the customer, but the customer's unique
 *  identifier (as returned by the API) can always be used. We recommend storing
 *  the unique identifier in your systems where applicable.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  This is a required property. The `subscriptionId` is the subscription
 *  identifier and is unique for each customer. Since a `subscriptionId` changes
 *  when a subscription is updated, we recommend to not use this ID as a key for
 *  persistent data. And the `subscriptionId` can be found using the retrieve
 *  all reseller subscriptions method.
 */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  Fetches a @c GTLRReseller_Subscription.
 *
 *  Suspends an active subscription. You can use this method to suspend a paid
 *  subscription that is currently in the `ACTIVE` state. * For `FLEXIBLE`
 *  subscriptions, billing is paused. * For `ANNUAL_MONTHLY_PAY` or
 *  `ANNUAL_YEARLY_PAY` subscriptions: * Suspending the subscription does not
 *  change the renewal date that was originally committed to. * A suspended
 *  subscription does not renew. If you activate the subscription after the
 *  original renewal date, a new annual subscription will be created, starting
 *  on the day of activation. We strongly encourage you to suspend subscriptions
 *  only for short periods of time as suspensions over 60 days may result in the
 *  subscription being cancelled.
 *
 *  @param customerId This can be either the customer's primary domain name or
 *    the customer's unique identifier. If the domain name for a customer
 *    changes, the old domain name cannot be used to access the customer, but
 *    the customer's unique identifier (as returned by the API) can always be
 *    used. We recommend storing the unique identifier in your systems where
 *    applicable.
 *  @param subscriptionId This is a required property. The `subscriptionId` is
 *    the subscription identifier and is unique for each customer. Since a
 *    `subscriptionId` changes when a subscription is updated, we recommend to
 *    not use this ID as a key for persistent data. And the `subscriptionId` can
 *    be found using the retrieve all reseller subscriptions method.
 *
 *  @return GTLRResellerQuery_SubscriptionsSuspend
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                     subscriptionId:(NSString *)subscriptionId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
