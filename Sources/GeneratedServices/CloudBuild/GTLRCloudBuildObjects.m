// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Build API (cloudbuild/v1)
// Description:
//   Creates and manages builds on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/cloud-build/docs/

#import <GoogleAPIClientForREST/GTLRCloudBuildObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRCloudBuild_ApprovalResult.decision
NSString * const kGTLRCloudBuild_ApprovalResult_Decision_Approved = @"APPROVED";
NSString * const kGTLRCloudBuild_ApprovalResult_Decision_DecisionUnspecified = @"DECISION_UNSPECIFIED";
NSString * const kGTLRCloudBuild_ApprovalResult_Decision_Rejected = @"REJECTED";

// GTLRCloudBuild_Build.status
NSString * const kGTLRCloudBuild_Build_Status_Cancelled     = @"CANCELLED";
NSString * const kGTLRCloudBuild_Build_Status_Expired       = @"EXPIRED";
NSString * const kGTLRCloudBuild_Build_Status_Failure       = @"FAILURE";
NSString * const kGTLRCloudBuild_Build_Status_InternalError = @"INTERNAL_ERROR";
NSString * const kGTLRCloudBuild_Build_Status_Pending       = @"PENDING";
NSString * const kGTLRCloudBuild_Build_Status_Queued        = @"QUEUED";
NSString * const kGTLRCloudBuild_Build_Status_StatusUnknown = @"STATUS_UNKNOWN";
NSString * const kGTLRCloudBuild_Build_Status_Success       = @"SUCCESS";
NSString * const kGTLRCloudBuild_Build_Status_Timeout       = @"TIMEOUT";
NSString * const kGTLRCloudBuild_Build_Status_Working       = @"WORKING";

// GTLRCloudBuild_BuildApproval.state
NSString * const kGTLRCloudBuild_BuildApproval_State_Approved  = @"APPROVED";
NSString * const kGTLRCloudBuild_BuildApproval_State_Cancelled = @"CANCELLED";
NSString * const kGTLRCloudBuild_BuildApproval_State_Pending   = @"PENDING";
NSString * const kGTLRCloudBuild_BuildApproval_State_Rejected  = @"REJECTED";
NSString * const kGTLRCloudBuild_BuildApproval_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRCloudBuild_BuildOptions.logging
NSString * const kGTLRCloudBuild_BuildOptions_Logging_CloudLoggingOnly = @"CLOUD_LOGGING_ONLY";
NSString * const kGTLRCloudBuild_BuildOptions_Logging_GcsOnly  = @"GCS_ONLY";
NSString * const kGTLRCloudBuild_BuildOptions_Logging_Legacy   = @"LEGACY";
NSString * const kGTLRCloudBuild_BuildOptions_Logging_LoggingUnspecified = @"LOGGING_UNSPECIFIED";
NSString * const kGTLRCloudBuild_BuildOptions_Logging_None     = @"NONE";
NSString * const kGTLRCloudBuild_BuildOptions_Logging_StackdriverOnly = @"STACKDRIVER_ONLY";

// GTLRCloudBuild_BuildOptions.logStreamingOption
NSString * const kGTLRCloudBuild_BuildOptions_LogStreamingOption_StreamDefault = @"STREAM_DEFAULT";
NSString * const kGTLRCloudBuild_BuildOptions_LogStreamingOption_StreamOff = @"STREAM_OFF";
NSString * const kGTLRCloudBuild_BuildOptions_LogStreamingOption_StreamOn = @"STREAM_ON";

// GTLRCloudBuild_BuildOptions.machineType
NSString * const kGTLRCloudBuild_BuildOptions_MachineType_E2Highcpu32 = @"E2_HIGHCPU_32";
NSString * const kGTLRCloudBuild_BuildOptions_MachineType_E2Highcpu8 = @"E2_HIGHCPU_8";
NSString * const kGTLRCloudBuild_BuildOptions_MachineType_N1Highcpu32 = @"N1_HIGHCPU_32";
NSString * const kGTLRCloudBuild_BuildOptions_MachineType_N1Highcpu8 = @"N1_HIGHCPU_8";
NSString * const kGTLRCloudBuild_BuildOptions_MachineType_Unspecified = @"UNSPECIFIED";

// GTLRCloudBuild_BuildOptions.requestedVerifyOption
NSString * const kGTLRCloudBuild_BuildOptions_RequestedVerifyOption_NotVerified = @"NOT_VERIFIED";
NSString * const kGTLRCloudBuild_BuildOptions_RequestedVerifyOption_Verified = @"VERIFIED";

// GTLRCloudBuild_BuildOptions.sourceProvenanceHash
NSString * const kGTLRCloudBuild_BuildOptions_SourceProvenanceHash_Md5 = @"MD5";
NSString * const kGTLRCloudBuild_BuildOptions_SourceProvenanceHash_None = @"NONE";
NSString * const kGTLRCloudBuild_BuildOptions_SourceProvenanceHash_Sha256 = @"SHA256";

// GTLRCloudBuild_BuildOptions.substitutionOption
NSString * const kGTLRCloudBuild_BuildOptions_SubstitutionOption_AllowLoose = @"ALLOW_LOOSE";
NSString * const kGTLRCloudBuild_BuildOptions_SubstitutionOption_MustMatch = @"MUST_MATCH";

// GTLRCloudBuild_BuildStep.status
NSString * const kGTLRCloudBuild_BuildStep_Status_Cancelled    = @"CANCELLED";
NSString * const kGTLRCloudBuild_BuildStep_Status_Expired      = @"EXPIRED";
NSString * const kGTLRCloudBuild_BuildStep_Status_Failure      = @"FAILURE";
NSString * const kGTLRCloudBuild_BuildStep_Status_InternalError = @"INTERNAL_ERROR";
NSString * const kGTLRCloudBuild_BuildStep_Status_Pending      = @"PENDING";
NSString * const kGTLRCloudBuild_BuildStep_Status_Queued       = @"QUEUED";
NSString * const kGTLRCloudBuild_BuildStep_Status_StatusUnknown = @"STATUS_UNKNOWN";
NSString * const kGTLRCloudBuild_BuildStep_Status_Success      = @"SUCCESS";
NSString * const kGTLRCloudBuild_BuildStep_Status_Timeout      = @"TIMEOUT";
NSString * const kGTLRCloudBuild_BuildStep_Status_Working      = @"WORKING";

// GTLRCloudBuild_BuildTrigger.eventType
NSString * const kGTLRCloudBuild_BuildTrigger_EventType_EventTypeUnspecified = @"EVENT_TYPE_UNSPECIFIED";
NSString * const kGTLRCloudBuild_BuildTrigger_EventType_Manual = @"MANUAL";
NSString * const kGTLRCloudBuild_BuildTrigger_EventType_Pubsub = @"PUBSUB";
NSString * const kGTLRCloudBuild_BuildTrigger_EventType_Repo   = @"REPO";
NSString * const kGTLRCloudBuild_BuildTrigger_EventType_Webhook = @"WEBHOOK";

// GTLRCloudBuild_BuildTrigger.includeBuildLogs
NSString * const kGTLRCloudBuild_BuildTrigger_IncludeBuildLogs_IncludeBuildLogsUnspecified = @"INCLUDE_BUILD_LOGS_UNSPECIFIED";
NSString * const kGTLRCloudBuild_BuildTrigger_IncludeBuildLogs_IncludeBuildLogsWithStatus = @"INCLUDE_BUILD_LOGS_WITH_STATUS";

// GTLRCloudBuild_FailureInfo.type
NSString * const kGTLRCloudBuild_FailureInfo_Type_FailureTypeUnspecified = @"FAILURE_TYPE_UNSPECIFIED";
NSString * const kGTLRCloudBuild_FailureInfo_Type_FetchSourceFailed = @"FETCH_SOURCE_FAILED";
NSString * const kGTLRCloudBuild_FailureInfo_Type_LoggingFailure = @"LOGGING_FAILURE";
NSString * const kGTLRCloudBuild_FailureInfo_Type_PushFailed   = @"PUSH_FAILED";
NSString * const kGTLRCloudBuild_FailureInfo_Type_PushImageNotFound = @"PUSH_IMAGE_NOT_FOUND";
NSString * const kGTLRCloudBuild_FailureInfo_Type_PushNotAuthorized = @"PUSH_NOT_AUTHORIZED";
NSString * const kGTLRCloudBuild_FailureInfo_Type_UserBuildStep = @"USER_BUILD_STEP";

// GTLRCloudBuild_GitFileSource.repoType
NSString * const kGTLRCloudBuild_GitFileSource_RepoType_BitbucketServer = @"BITBUCKET_SERVER";
NSString * const kGTLRCloudBuild_GitFileSource_RepoType_CloudSourceRepositories = @"CLOUD_SOURCE_REPOSITORIES";
NSString * const kGTLRCloudBuild_GitFileSource_RepoType_Github = @"GITHUB";
NSString * const kGTLRCloudBuild_GitFileSource_RepoType_Unknown = @"UNKNOWN";

// GTLRCloudBuild_GitRepoSource.repoType
NSString * const kGTLRCloudBuild_GitRepoSource_RepoType_BitbucketServer = @"BITBUCKET_SERVER";
NSString * const kGTLRCloudBuild_GitRepoSource_RepoType_CloudSourceRepositories = @"CLOUD_SOURCE_REPOSITORIES";
NSString * const kGTLRCloudBuild_GitRepoSource_RepoType_Github = @"GITHUB";
NSString * const kGTLRCloudBuild_GitRepoSource_RepoType_Unknown = @"UNKNOWN";

// GTLRCloudBuild_Hash.type
NSString * const kGTLRCloudBuild_Hash_Type_Md5    = @"MD5";
NSString * const kGTLRCloudBuild_Hash_Type_None   = @"NONE";
NSString * const kGTLRCloudBuild_Hash_Type_Sha256 = @"SHA256";

// GTLRCloudBuild_NetworkConfig.egressOption
NSString * const kGTLRCloudBuild_NetworkConfig_EgressOption_EgressOptionUnspecified = @"EGRESS_OPTION_UNSPECIFIED";
NSString * const kGTLRCloudBuild_NetworkConfig_EgressOption_NoPublicEgress = @"NO_PUBLIC_EGRESS";
NSString * const kGTLRCloudBuild_NetworkConfig_EgressOption_PublicEgress = @"PUBLIC_EGRESS";

// GTLRCloudBuild_PubsubConfig.state
NSString * const kGTLRCloudBuild_PubsubConfig_State_Ok         = @"OK";
NSString * const kGTLRCloudBuild_PubsubConfig_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRCloudBuild_PubsubConfig_State_SubscriptionDeleted = @"SUBSCRIPTION_DELETED";
NSString * const kGTLRCloudBuild_PubsubConfig_State_SubscriptionMisconfigured = @"SUBSCRIPTION_MISCONFIGURED";
NSString * const kGTLRCloudBuild_PubsubConfig_State_TopicDeleted = @"TOPIC_DELETED";

// GTLRCloudBuild_PullRequestFilter.commentControl
NSString * const kGTLRCloudBuild_PullRequestFilter_CommentControl_CommentsDisabled = @"COMMENTS_DISABLED";
NSString * const kGTLRCloudBuild_PullRequestFilter_CommentControl_CommentsEnabled = @"COMMENTS_ENABLED";
NSString * const kGTLRCloudBuild_PullRequestFilter_CommentControl_CommentsEnabledForExternalContributorsOnly = @"COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY";

// GTLRCloudBuild_RepositoryEventConfig.repositoryType
NSString * const kGTLRCloudBuild_RepositoryEventConfig_RepositoryType_Github = @"GITHUB";
NSString * const kGTLRCloudBuild_RepositoryEventConfig_RepositoryType_GithubEnterprise = @"GITHUB_ENTERPRISE";
NSString * const kGTLRCloudBuild_RepositoryEventConfig_RepositoryType_GitlabEnterprise = @"GITLAB_ENTERPRISE";
NSString * const kGTLRCloudBuild_RepositoryEventConfig_RepositoryType_RepositoryTypeUnspecified = @"REPOSITORY_TYPE_UNSPECIFIED";

// GTLRCloudBuild_Warning.priority
NSString * const kGTLRCloudBuild_Warning_Priority_Alert        = @"ALERT";
NSString * const kGTLRCloudBuild_Warning_Priority_Info         = @"INFO";
NSString * const kGTLRCloudBuild_Warning_Priority_PriorityUnspecified = @"PRIORITY_UNSPECIFIED";
NSString * const kGTLRCloudBuild_Warning_Priority_Warning      = @"WARNING";

// GTLRCloudBuild_WebhookConfig.state
NSString * const kGTLRCloudBuild_WebhookConfig_State_Ok        = @"OK";
NSString * const kGTLRCloudBuild_WebhookConfig_State_SecretDeleted = @"SECRET_DELETED";
NSString * const kGTLRCloudBuild_WebhookConfig_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRCloudBuild_WorkerPool.state
NSString * const kGTLRCloudBuild_WorkerPool_State_Creating     = @"CREATING";
NSString * const kGTLRCloudBuild_WorkerPool_State_Deleted      = @"DELETED";
NSString * const kGTLRCloudBuild_WorkerPool_State_Deleting     = @"DELETING";
NSString * const kGTLRCloudBuild_WorkerPool_State_Running      = @"RUNNING";
NSString * const kGTLRCloudBuild_WorkerPool_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRCloudBuild_WorkerPool_State_Updating     = @"UPDATING";

// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_ApprovalConfig
//

@implementation GTLRCloudBuild_ApprovalConfig
@dynamic approvalRequired;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_ApprovalResult
//

@implementation GTLRCloudBuild_ApprovalResult
@dynamic approvalTime, approverAccount, comment, decision, url;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_ApproveBuildRequest
//

@implementation GTLRCloudBuild_ApproveBuildRequest
@dynamic approvalResult;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_ArtifactObjects
//

@implementation GTLRCloudBuild_ArtifactObjects
@dynamic location, paths, timing;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"paths" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_ArtifactResult
//

@implementation GTLRCloudBuild_ArtifactResult
@dynamic fileHash, location;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fileHash" : [GTLRCloudBuild_FileHashes class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Artifacts
//

@implementation GTLRCloudBuild_Artifacts
@dynamic images, mavenArtifacts, objects, pythonPackages;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"images" : [NSString class],
    @"mavenArtifacts" : [GTLRCloudBuild_MavenArtifact class],
    @"pythonPackages" : [GTLRCloudBuild_PythonPackage class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BatchCreateBitbucketServerConnectedRepositoriesRequest
//

@implementation GTLRCloudBuild_BatchCreateBitbucketServerConnectedRepositoriesRequest
@dynamic requests;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requests" : [GTLRCloudBuild_CreateBitbucketServerConnectedRepositoryRequest class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BatchCreateBitbucketServerConnectedRepositoriesResponse
//

@implementation GTLRCloudBuild_BatchCreateBitbucketServerConnectedRepositoriesResponse
@dynamic bitbucketServerConnectedRepositories;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bitbucketServerConnectedRepositories" : [GTLRCloudBuild_BitbucketServerConnectedRepository class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata
//

@implementation GTLRCloudBuild_BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata
@dynamic completeTime, config, createTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BatchCreateGitLabConnectedRepositoriesRequest
//

@implementation GTLRCloudBuild_BatchCreateGitLabConnectedRepositoriesRequest
@dynamic requests;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requests" : [GTLRCloudBuild_CreateGitLabConnectedRepositoryRequest class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BatchCreateGitLabConnectedRepositoriesResponse
//

@implementation GTLRCloudBuild_BatchCreateGitLabConnectedRepositoriesResponse
@dynamic gitlabConnectedRepositories;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"gitlabConnectedRepositories" : [GTLRCloudBuild_GitLabConnectedRepository class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BatchCreateGitLabConnectedRepositoriesResponseMetadata
//

@implementation GTLRCloudBuild_BatchCreateGitLabConnectedRepositoriesResponseMetadata
@dynamic completeTime, config, createTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BitbucketServerConfig
//

@implementation GTLRCloudBuild_BitbucketServerConfig
@dynamic apiKey, connectedRepositories, createTime, hostUri, name,
         peeredNetwork, secrets, sslCa, username, webhookKey;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"connectedRepositories" : [GTLRCloudBuild_BitbucketServerRepositoryId class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BitbucketServerConnectedRepository
//

@implementation GTLRCloudBuild_BitbucketServerConnectedRepository
@dynamic parent, repo, status;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BitbucketServerRepository
//

@implementation GTLRCloudBuild_BitbucketServerRepository
@dynamic browseUri, descriptionProperty, displayName, name, repoId;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BitbucketServerRepositoryId
//

@implementation GTLRCloudBuild_BitbucketServerRepositoryId
@dynamic projectKey, repoSlug, webhookId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BitbucketServerSecrets
//

@implementation GTLRCloudBuild_BitbucketServerSecrets
@dynamic adminAccessTokenVersionName, readAccessTokenVersionName,
         webhookSecretVersionName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BitbucketServerTriggerConfig
//

@implementation GTLRCloudBuild_BitbucketServerTriggerConfig
@dynamic bitbucketServerConfig, bitbucketServerConfigResource, projectKey,
         pullRequest, push, repoSlug;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Build
//

@implementation GTLRCloudBuild_Build
@dynamic approval, artifacts, availableSecrets, buildTriggerId, createTime,
         failureInfo, finishTime, identifier, images, logsBucket, logUrl, name,
         options, projectId, queueTtl, results, secrets, serviceAccount, source,
         sourceProvenance, startTime, status, statusDetail, steps,
         substitutions, tags, timeout, timing, warnings;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"images" : [NSString class],
    @"secrets" : [GTLRCloudBuild_Secret class],
    @"steps" : [GTLRCloudBuild_BuildStep class],
    @"tags" : [NSString class],
    @"warnings" : [GTLRCloudBuild_Warning class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Build_Substitutions
//

@implementation GTLRCloudBuild_Build_Substitutions

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Build_Timing
//

@implementation GTLRCloudBuild_Build_Timing

+ (Class)classForAdditionalProperties {
  return [GTLRCloudBuild_TimeSpan class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BuildApproval
//

@implementation GTLRCloudBuild_BuildApproval
@dynamic config, result, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BuildOperationMetadata
//

@implementation GTLRCloudBuild_BuildOperationMetadata
@dynamic build;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BuildOptions
//

@implementation GTLRCloudBuild_BuildOptions
@dynamic diskSizeGb, dynamicSubstitutions, env, logging, logStreamingOption,
         machineType, pool, requestedVerifyOption, secretEnv,
         sourceProvenanceHash, substitutionOption, volumes, workerPool;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"env" : [NSString class],
    @"secretEnv" : [NSString class],
    @"sourceProvenanceHash" : [NSString class],
    @"volumes" : [GTLRCloudBuild_Volume class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BuildStep
//

@implementation GTLRCloudBuild_BuildStep
@dynamic allowExitCodes, allowFailure, args, dir, entrypoint, env, exitCode,
         identifier, name, pullTiming, script, secretEnv, status, timeout,
         timing, volumes, waitFor;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"allowExitCodes" : [NSNumber class],
    @"args" : [NSString class],
    @"env" : [NSString class],
    @"secretEnv" : [NSString class],
    @"volumes" : [GTLRCloudBuild_Volume class],
    @"waitFor" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BuildTrigger
//

@implementation GTLRCloudBuild_BuildTrigger
@dynamic approvalConfig, autodetect, bitbucketServerTriggerConfig, build,
         createTime, descriptionProperty, disabled, eventType, filename, filter,
         gitFileSource, github, gitlabEnterpriseEventsConfig, identifier,
         ignoredFiles, includeBuildLogs, includedFiles, name, pubsubConfig,
         repositoryEventConfig, resourceName, serviceAccount, sourceToBuild,
         substitutions, tags, triggerTemplate, webhookConfig;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"identifier" : @"id"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ignoredFiles" : [NSString class],
    @"includedFiles" : [NSString class],
    @"tags" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BuildTrigger_Substitutions
//

@implementation GTLRCloudBuild_BuildTrigger_Substitutions

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_BuiltImage
//

@implementation GTLRCloudBuild_BuiltImage
@dynamic digest, name, pushTiming;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_CancelBuildRequest
//

@implementation GTLRCloudBuild_CancelBuildRequest
@dynamic identifier, name, projectId;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_CancelOperationRequest
//

@implementation GTLRCloudBuild_CancelOperationRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_CreateBitbucketServerConfigOperationMetadata
//

@implementation GTLRCloudBuild_CreateBitbucketServerConfigOperationMetadata
@dynamic bitbucketServerConfig, completeTime, createTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_CreateBitbucketServerConnectedRepositoryRequest
//

@implementation GTLRCloudBuild_CreateBitbucketServerConnectedRepositoryRequest
@dynamic bitbucketServerConnectedRepository, parent;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_CreateGitHubEnterpriseConfigOperationMetadata
//

@implementation GTLRCloudBuild_CreateGitHubEnterpriseConfigOperationMetadata
@dynamic completeTime, createTime, githubEnterpriseConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_CreateGitLabConfigOperationMetadata
//

@implementation GTLRCloudBuild_CreateGitLabConfigOperationMetadata
@dynamic completeTime, createTime, gitlabConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_CreateGitLabConnectedRepositoryRequest
//

@implementation GTLRCloudBuild_CreateGitLabConnectedRepositoryRequest
@dynamic gitlabConnectedRepository, parent;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_CreateWorkerPoolOperationMetadata
//

@implementation GTLRCloudBuild_CreateWorkerPoolOperationMetadata
@dynamic completeTime, createTime, workerPool;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_DeleteBitbucketServerConfigOperationMetadata
//

@implementation GTLRCloudBuild_DeleteBitbucketServerConfigOperationMetadata
@dynamic bitbucketServerConfig, completeTime, createTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_DeleteGitHubEnterpriseConfigOperationMetadata
//

@implementation GTLRCloudBuild_DeleteGitHubEnterpriseConfigOperationMetadata
@dynamic completeTime, createTime, githubEnterpriseConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_DeleteGitLabConfigOperationMetadata
//

@implementation GTLRCloudBuild_DeleteGitLabConfigOperationMetadata
@dynamic completeTime, createTime, gitlabConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_DeleteWorkerPoolOperationMetadata
//

@implementation GTLRCloudBuild_DeleteWorkerPoolOperationMetadata
@dynamic completeTime, createTime, workerPool;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Empty
//

@implementation GTLRCloudBuild_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_FailureInfo
//

@implementation GTLRCloudBuild_FailureInfo
@dynamic detail, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_FileHashes
//

@implementation GTLRCloudBuild_FileHashes
@dynamic fileHash;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fileHash" : [GTLRCloudBuild_Hash class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_GitFileSource
//

@implementation GTLRCloudBuild_GitFileSource
@dynamic bitbucketServerConfig, githubEnterpriseConfig, path, repoType,
         revision, uri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_GitHubEnterpriseConfig
//

@implementation GTLRCloudBuild_GitHubEnterpriseConfig
@dynamic appId, createTime, displayName, hostUrl, name, peeredNetwork, secrets,
         sslCa, webhookKey;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_GitHubEnterpriseSecrets
//

@implementation GTLRCloudBuild_GitHubEnterpriseSecrets
@dynamic oauthClientIdName, oauthClientIdVersionName, oauthSecretName,
         oauthSecretVersionName, privateKeyName, privateKeyVersionName,
         webhookSecretName, webhookSecretVersionName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_GitHubEventsConfig
//

@implementation GTLRCloudBuild_GitHubEventsConfig
@dynamic enterpriseConfigResourceName, installationId, name, owner, pullRequest,
         push;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_GitLabConfig
//

@implementation GTLRCloudBuild_GitLabConfig
@dynamic connectedRepositories, createTime, enterpriseConfig, name, secrets,
         username, webhookKey;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"connectedRepositories" : [GTLRCloudBuild_GitLabRepositoryId class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_GitLabConnectedRepository
//

@implementation GTLRCloudBuild_GitLabConnectedRepository
@dynamic parent, repo, status;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_GitLabEnterpriseConfig
//

@implementation GTLRCloudBuild_GitLabEnterpriseConfig
@dynamic hostUri, serviceDirectoryConfig, sslCa;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_GitLabEventsConfig
//

@implementation GTLRCloudBuild_GitLabEventsConfig
@dynamic gitlabConfig, gitlabConfigResource, projectNamespace, pullRequest,
         push;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_GitLabRepository
//

@implementation GTLRCloudBuild_GitLabRepository
@dynamic browseUri, descriptionProperty, displayName, name, repositoryId;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_GitLabRepositoryId
//

@implementation GTLRCloudBuild_GitLabRepositoryId
@dynamic identifier, webhookId;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_GitLabSecrets
//

@implementation GTLRCloudBuild_GitLabSecrets
@dynamic apiAccessTokenVersion, apiKeyVersion, readAccessTokenVersion,
         webhookSecretVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_GitRepoSource
//

@implementation GTLRCloudBuild_GitRepoSource
@dynamic bitbucketServerConfig, githubEnterpriseConfig, ref, repoType, uri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Hash
//

@implementation GTLRCloudBuild_Hash
@dynamic type, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_HttpBody
//

@implementation GTLRCloudBuild_HttpBody
@dynamic contentType, data, extensions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"extensions" : [GTLRCloudBuild_HttpBody_Extensions_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_HttpBody_Extensions_Item
//

@implementation GTLRCloudBuild_HttpBody_Extensions_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_HTTPDelivery
//

@implementation GTLRCloudBuild_HTTPDelivery
@dynamic uri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_InlineSecret
//

@implementation GTLRCloudBuild_InlineSecret
@dynamic envMap, kmsKeyName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_InlineSecret_EnvMap
//

@implementation GTLRCloudBuild_InlineSecret_EnvMap

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_ListBitbucketServerConfigsResponse
//

@implementation GTLRCloudBuild_ListBitbucketServerConfigsResponse
@dynamic bitbucketServerConfigs, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bitbucketServerConfigs" : [GTLRCloudBuild_BitbucketServerConfig class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"bitbucketServerConfigs";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_ListBitbucketServerRepositoriesResponse
//

@implementation GTLRCloudBuild_ListBitbucketServerRepositoriesResponse
@dynamic bitbucketServerRepositories, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bitbucketServerRepositories" : [GTLRCloudBuild_BitbucketServerRepository class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"bitbucketServerRepositories";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_ListBuildsResponse
//

@implementation GTLRCloudBuild_ListBuildsResponse
@dynamic builds, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"builds" : [GTLRCloudBuild_Build class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"builds";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_ListBuildTriggersResponse
//

@implementation GTLRCloudBuild_ListBuildTriggersResponse
@dynamic nextPageToken, triggers;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"triggers" : [GTLRCloudBuild_BuildTrigger class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"triggers";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_ListGithubEnterpriseConfigsResponse
//

@implementation GTLRCloudBuild_ListGithubEnterpriseConfigsResponse
@dynamic configs;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"configs" : [GTLRCloudBuild_GitHubEnterpriseConfig class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_ListGitLabConfigsResponse
//

@implementation GTLRCloudBuild_ListGitLabConfigsResponse
@dynamic gitlabConfigs, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"gitlabConfigs" : [GTLRCloudBuild_GitLabConfig class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"gitlabConfigs";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_ListGitLabRepositoriesResponse
//

@implementation GTLRCloudBuild_ListGitLabRepositoriesResponse
@dynamic gitlabRepositories, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"gitlabRepositories" : [GTLRCloudBuild_GitLabRepository class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"gitlabRepositories";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_ListWorkerPoolsResponse
//

@implementation GTLRCloudBuild_ListWorkerPoolsResponse
@dynamic nextPageToken, workerPools;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"workerPools" : [GTLRCloudBuild_WorkerPool class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"workerPools";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_MavenArtifact
//

@implementation GTLRCloudBuild_MavenArtifact
@dynamic artifactId, groupId, path, repository, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_NetworkConfig
//

@implementation GTLRCloudBuild_NetworkConfig
@dynamic egressOption, peeredNetwork;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Notification
//

@implementation GTLRCloudBuild_Notification
@dynamic filter, httpDelivery, slackDelivery, smtpDelivery, structDelivery;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Notification_StructDelivery
//

@implementation GTLRCloudBuild_Notification_StructDelivery

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_NotifierConfig
//

@implementation GTLRCloudBuild_NotifierConfig
@dynamic apiVersion, kind, metadata, spec;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_NotifierMetadata
//

@implementation GTLRCloudBuild_NotifierMetadata
@dynamic name, notifier;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_NotifierSecret
//

@implementation GTLRCloudBuild_NotifierSecret
@dynamic name, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_NotifierSecretRef
//

@implementation GTLRCloudBuild_NotifierSecretRef
@dynamic secretRef;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_NotifierSpec
//

@implementation GTLRCloudBuild_NotifierSpec
@dynamic notification, secrets;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"secrets" : [GTLRCloudBuild_NotifierSecret class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Operation
//

@implementation GTLRCloudBuild_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Operation_Metadata
//

@implementation GTLRCloudBuild_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Operation_Response
//

@implementation GTLRCloudBuild_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_OperationMetadata
//

@implementation GTLRCloudBuild_OperationMetadata
@dynamic apiVersion, cancelRequested, createTime, endTime, statusDetail, target,
         verb;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_PoolOption
//

@implementation GTLRCloudBuild_PoolOption
@dynamic name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_PrivatePoolV1Config
//

@implementation GTLRCloudBuild_PrivatePoolV1Config
@dynamic networkConfig, workerConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_ProcessAppManifestCallbackOperationMetadata
//

@implementation GTLRCloudBuild_ProcessAppManifestCallbackOperationMetadata
@dynamic completeTime, createTime, githubEnterpriseConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_PubsubConfig
//

@implementation GTLRCloudBuild_PubsubConfig
@dynamic serviceAccountEmail, state, subscription, topic;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_PullRequestFilter
//

@implementation GTLRCloudBuild_PullRequestFilter
@dynamic branch, commentControl, invertRegex;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_PushFilter
//

@implementation GTLRCloudBuild_PushFilter
@dynamic branch, invertRegex, tag;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_PythonPackage
//

@implementation GTLRCloudBuild_PythonPackage
@dynamic paths, repository;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"paths" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_ReceiveTriggerWebhookResponse
//

@implementation GTLRCloudBuild_ReceiveTriggerWebhookResponse
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_RemoveBitbucketServerConnectedRepositoryRequest
//

@implementation GTLRCloudBuild_RemoveBitbucketServerConnectedRepositoryRequest
@dynamic connectedRepository;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_RemoveGitLabConnectedRepositoryRequest
//

@implementation GTLRCloudBuild_RemoveGitLabConnectedRepositoryRequest
@dynamic connectedRepository;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_RepositoryEventConfig
//

@implementation GTLRCloudBuild_RepositoryEventConfig
@dynamic pullRequest, push, repository, repositoryType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_RepoSource
//

@implementation GTLRCloudBuild_RepoSource
@dynamic branchName, commitSha, dir, invertRegex, projectId, repoName,
         substitutions, tagName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_RepoSource_Substitutions
//

@implementation GTLRCloudBuild_RepoSource_Substitutions

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Results
//

@implementation GTLRCloudBuild_Results
@dynamic artifactManifest, artifactTiming, buildStepImages, buildStepOutputs,
         images, mavenArtifacts, numArtifacts, pythonPackages;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"buildStepImages" : [NSString class],
    @"buildStepOutputs" : [NSString class],
    @"images" : [GTLRCloudBuild_BuiltImage class],
    @"mavenArtifacts" : [GTLRCloudBuild_UploadedMavenArtifact class],
    @"pythonPackages" : [GTLRCloudBuild_UploadedPythonPackage class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_RetryBuildRequest
//

@implementation GTLRCloudBuild_RetryBuildRequest
@dynamic identifier, name, projectId;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_RunBuildTriggerRequest
//

@implementation GTLRCloudBuild_RunBuildTriggerRequest
@dynamic projectId, source, triggerId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Secret
//

@implementation GTLRCloudBuild_Secret
@dynamic kmsKeyName, secretEnv;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Secret_SecretEnv
//

@implementation GTLRCloudBuild_Secret_SecretEnv

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_SecretManagerSecret
//

@implementation GTLRCloudBuild_SecretManagerSecret
@dynamic env, versionName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Secrets
//

@implementation GTLRCloudBuild_Secrets
@dynamic inlineProperty, secretManager;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"inlineProperty" : @"inline" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"inline" : [GTLRCloudBuild_InlineSecret class],
    @"secretManager" : [GTLRCloudBuild_SecretManagerSecret class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_ServiceDirectoryConfig
//

@implementation GTLRCloudBuild_ServiceDirectoryConfig
@dynamic service;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_SlackDelivery
//

@implementation GTLRCloudBuild_SlackDelivery
@dynamic webhookUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_SMTPDelivery
//

@implementation GTLRCloudBuild_SMTPDelivery
@dynamic fromAddress, password, port, recipientAddresses, senderAddress, server;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"recipientAddresses" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Source
//

@implementation GTLRCloudBuild_Source
@dynamic repoSource, storageSource, storageSourceManifest;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_SourceProvenance
//

@implementation GTLRCloudBuild_SourceProvenance
@dynamic fileHashes, resolvedRepoSource, resolvedStorageSource,
         resolvedStorageSourceManifest;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_SourceProvenance_FileHashes
//

@implementation GTLRCloudBuild_SourceProvenance_FileHashes

+ (Class)classForAdditionalProperties {
  return [GTLRCloudBuild_FileHashes class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Status
//

@implementation GTLRCloudBuild_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRCloudBuild_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Status_Details_Item
//

@implementation GTLRCloudBuild_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_StorageSource
//

@implementation GTLRCloudBuild_StorageSource
@dynamic bucket, generation, object;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_StorageSourceManifest
//

@implementation GTLRCloudBuild_StorageSourceManifest
@dynamic bucket, generation, object;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_TimeSpan
//

@implementation GTLRCloudBuild_TimeSpan
@dynamic endTime, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_UpdateBitbucketServerConfigOperationMetadata
//

@implementation GTLRCloudBuild_UpdateBitbucketServerConfigOperationMetadata
@dynamic bitbucketServerConfig, completeTime, createTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_UpdateGitHubEnterpriseConfigOperationMetadata
//

@implementation GTLRCloudBuild_UpdateGitHubEnterpriseConfigOperationMetadata
@dynamic completeTime, createTime, githubEnterpriseConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_UpdateGitLabConfigOperationMetadata
//

@implementation GTLRCloudBuild_UpdateGitLabConfigOperationMetadata
@dynamic completeTime, createTime, gitlabConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_UpdateWorkerPoolOperationMetadata
//

@implementation GTLRCloudBuild_UpdateWorkerPoolOperationMetadata
@dynamic completeTime, createTime, workerPool;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_UploadedMavenArtifact
//

@implementation GTLRCloudBuild_UploadedMavenArtifact
@dynamic fileHashes, pushTiming, uri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_UploadedPythonPackage
//

@implementation GTLRCloudBuild_UploadedPythonPackage
@dynamic fileHashes, pushTiming, uri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Volume
//

@implementation GTLRCloudBuild_Volume
@dynamic name, path;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_Warning
//

@implementation GTLRCloudBuild_Warning
@dynamic priority, text;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_WebhookConfig
//

@implementation GTLRCloudBuild_WebhookConfig
@dynamic secret, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_WorkerConfig
//

@implementation GTLRCloudBuild_WorkerConfig
@dynamic diskSizeGb, machineType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_WorkerPool
//

@implementation GTLRCloudBuild_WorkerPool
@dynamic annotations, createTime, deleteTime, displayName, ETag, name,
         privatePoolV1Config, state, uid, updateTime;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBuild_WorkerPool_Annotations
//

@implementation GTLRCloudBuild_WorkerPool_Annotations

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end
