// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Build API (cloudbuild/v1)
// Description:
//   Creates and manages builds on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/cloud-build/docs/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRCloudBuildObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Cloud Build query classes.
 */
@interface GTLRCloudBuildQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  ReceiveGitHubDotComWebhook is called when the API receives a github.com
 *  webhook.
 *
 *  Method: cloudbuild.githubDotComWebhook.receive
 */
@interface GTLRCloudBuildQuery_GithubDotComWebhookReceive : GTLRCloudBuildQuery

/**
 *  For GitHub Enterprise webhooks, this key is used to associate the webhook
 *  request with the GitHubEnterpriseConfig to use for validation.
 */
@property(nonatomic, copy, nullable) NSString *webhookKey;

/**
 *  Fetches a @c GTLRCloudBuild_Empty.
 *
 *  ReceiveGitHubDotComWebhook is called when the API receives a github.com
 *  webhook.
 *
 *  @param object The @c GTLRCloudBuild_HttpBody to include in the query.
 *
 *  @return GTLRCloudBuildQuery_GithubDotComWebhookReceive
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_HttpBody *)object;

@end

/**
 *  ReceiveRegionalWebhook is called when the API receives a regional GitHub
 *  webhook.
 *
 *  Method: cloudbuild.locations.regionalWebhook
 */
@interface GTLRCloudBuildQuery_LocationsRegionalWebhook : GTLRCloudBuildQuery

/** Required. The location where the webhook should be sent. */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  For GitHub Enterprise webhooks, this key is used to associate the webhook
 *  request with the GitHubEnterpriseConfig to use for validation.
 */
@property(nonatomic, copy, nullable) NSString *webhookKey;

/**
 *  Fetches a @c GTLRCloudBuild_Empty.
 *
 *  ReceiveRegionalWebhook is called when the API receives a regional GitHub
 *  webhook.
 *
 *  @param object The @c GTLRCloudBuild_HttpBody to include in the query.
 *  @param location Required. The location where the webhook should be sent.
 *
 *  @return GTLRCloudBuildQuery_LocationsRegionalWebhook
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_HttpBody *)object
                       location:(NSString *)location;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: cloudbuild.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_OperationsCancel : GTLRCloudBuildQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudBuild_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRCloudBuild_CancelOperationRequest to include in the
 *    query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRCloudBuildQuery_OperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: cloudbuild.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_OperationsGet : GTLRCloudBuildQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRCloudBuildQuery_OperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Approves or rejects a pending build. If approved, the returned LRO will be
 *  analogous to the LRO returned from a CreateBuild call. If rejected, the
 *  returned LRO will be immediately done.
 *
 *  Method: cloudbuild.projects.builds.approve
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsBuildsApprove : GTLRCloudBuildQuery

/**
 *  Required. Name of the target build. For example:
 *  "projects/{$project_id}/builds/{$build_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Approves or rejects a pending build. If approved, the returned LRO will be
 *  analogous to the LRO returned from a CreateBuild call. If rejected, the
 *  returned LRO will be immediately done.
 *
 *  @param object The @c GTLRCloudBuild_ApproveBuildRequest to include in the
 *    query.
 *  @param name Required. Name of the target build. For example:
 *    "projects/{$project_id}/builds/{$build_id}"
 *
 *  @return GTLRCloudBuildQuery_ProjectsBuildsApprove
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_ApproveBuildRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Cancels a build in progress.
 *
 *  Method: cloudbuild.projects.builds.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsBuildsCancel : GTLRCloudBuildQuery

/**
 *  Required. ID of the build.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Required. ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_Build.
 *
 *  Cancels a build in progress.
 *
 *  @param object The @c GTLRCloudBuild_CancelBuildRequest to include in the
 *    query.
 *  @param projectId Required. ID of the project.
 *  @param identifier Required. ID of the build.
 *
 *  @return GTLRCloudBuildQuery_ProjectsBuildsCancel
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_CancelBuildRequest *)object
                      projectId:(NSString *)projectId
                     identifier:(NSString *)identifier;

@end

/**
 *  Starts a build with the specified configuration. This method returns a
 *  long-running `Operation`, which includes the build ID. Pass the build ID to
 *  `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).
 *
 *  Method: cloudbuild.projects.builds.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsBuildsCreate : GTLRCloudBuildQuery

/**
 *  The parent resource where this build will be created. Format:
 *  `projects/{project}/locations/{location}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Starts a build with the specified configuration. This method returns a
 *  long-running `Operation`, which includes the build ID. Pass the build ID to
 *  `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).
 *
 *  @param object The @c GTLRCloudBuild_Build to include in the query.
 *  @param projectId Required. ID of the project.
 *
 *  @return GTLRCloudBuildQuery_ProjectsBuildsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_Build *)object
                      projectId:(NSString *)projectId;

@end

/**
 *  Returns information about a previously requested build. The `Build` that is
 *  returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`),
 *  and timing information.
 *
 *  Method: cloudbuild.projects.builds.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsBuildsGet : GTLRCloudBuildQuery

/**
 *  Required. ID of the build.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The name of the `Build` to retrieve. Format:
 *  `projects/{project}/locations/{location}/builds/{build}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_Build.
 *
 *  Returns information about a previously requested build. The `Build` that is
 *  returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`),
 *  and timing information.
 *
 *  @param projectId Required. ID of the project.
 *  @param identifier Required. ID of the build.
 *
 *  @return GTLRCloudBuildQuery_ProjectsBuildsGet
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId
                        identifier:(NSString *)identifier;

@end

/**
 *  Lists previously requested builds. Previously requested builds may still be
 *  in-progress, or may have finished successfully or unsuccessfully.
 *
 *  Method: cloudbuild.projects.builds.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsBuildsList : GTLRCloudBuildQuery

/** The raw filter text to constrain the results. */
@property(nonatomic, copy, nullable) NSString *filter;

/** Number of results to return in the list. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The page token for the next page of Builds. If unspecified, the first page
 *  of results is returned. If the token is rejected for any reason,
 *  INVALID_ARGUMENT will be thrown. In this case, the token should be
 *  discarded, and pagination should be restarted from the first page of
 *  results. See https://google.aip.dev/158 for more.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent of the collection of `Builds`. Format:
 *  `projects/{project}/locations/{location}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_ListBuildsResponse.
 *
 *  Lists previously requested builds. Previously requested builds may still be
 *  in-progress, or may have finished successfully or unsuccessfully.
 *
 *  @param projectId Required. ID of the project.
 *
 *  @return GTLRCloudBuildQuery_ProjectsBuildsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId;

@end

/**
 *  Creates a new build based on the specified build. This method creates a new
 *  build using the original build request, which may or may not result in an
 *  identical build. For triggered builds: * Triggered builds resolve to a
 *  precise revision; therefore a retry of a triggered build will result in a
 *  build that uses the same revision. For non-triggered builds that specify
 *  `RepoSource`: * If the original build built from the tip of a branch, the
 *  retried build will build from the tip of that branch, which may not be the
 *  same revision as the original build. * If the original build specified a
 *  commit sha or revision ID, the retried build will use the identical source.
 *  For builds that specify `StorageSource`: * If the original build pulled
 *  source from Google Cloud Storage without specifying the generation of the
 *  object, the new build will use the current object, which may be different
 *  from the original build source. * If the original build pulled source from
 *  Cloud Storage and specified the generation of the object, the new build will
 *  attempt to use the same object, which may or may not be available depending
 *  on the bucket's lifecycle management settings.
 *
 *  Method: cloudbuild.projects.builds.retry
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsBuildsRetry : GTLRCloudBuildQuery

/**
 *  Required. Build ID of the original build.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Required. ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Creates a new build based on the specified build. This method creates a new
 *  build using the original build request, which may or may not result in an
 *  identical build. For triggered builds: * Triggered builds resolve to a
 *  precise revision; therefore a retry of a triggered build will result in a
 *  build that uses the same revision. For non-triggered builds that specify
 *  `RepoSource`: * If the original build built from the tip of a branch, the
 *  retried build will build from the tip of that branch, which may not be the
 *  same revision as the original build. * If the original build specified a
 *  commit sha or revision ID, the retried build will use the identical source.
 *  For builds that specify `StorageSource`: * If the original build pulled
 *  source from Google Cloud Storage without specifying the generation of the
 *  object, the new build will use the current object, which may be different
 *  from the original build source. * If the original build pulled source from
 *  Cloud Storage and specified the generation of the object, the new build will
 *  attempt to use the same object, which may or may not be available depending
 *  on the bucket's lifecycle management settings.
 *
 *  @param object The @c GTLRCloudBuild_RetryBuildRequest to include in the
 *    query.
 *  @param projectId Required. ID of the project.
 *  @param identifier Required. Build ID of the original build.
 *
 *  @return GTLRCloudBuildQuery_ProjectsBuildsRetry
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_RetryBuildRequest *)object
                      projectId:(NSString *)projectId
                     identifier:(NSString *)identifier;

@end

/**
 *  Create an association between a GCP project and a GitHub Enterprise server.
 *
 *  Method: cloudbuild.projects.githubEnterpriseConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsCreate : GTLRCloudBuildQuery

/**
 *  Optional. The ID to use for the GithubEnterpriseConfig, which will become
 *  the final component of the GithubEnterpriseConfig's resource name.
 *  ghe_config_id must meet the following requirements: + They must contain only
 *  alphanumeric characters and dashes. + They can be 1-64 characters long. +
 *  They must begin and end with an alphanumeric character
 */
@property(nonatomic, copy, nullable) NSString *gheConfigId;

/**
 *  Name of the parent project. For example: projects/{$project_number} or
 *  projects/{$project_id}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Create an association between a GCP project and a GitHub Enterprise server.
 *
 *  @param object The @c GTLRCloudBuild_GitHubEnterpriseConfig to include in the
 *    query.
 *  @param parent Name of the parent project. For example:
 *    projects/{$project_number} or projects/{$project_id}
 *
 *  @return GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_GitHubEnterpriseConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete an association between a GCP project and a GitHub Enterprise server.
 *
 *  Method: cloudbuild.projects.githubEnterpriseConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsDelete : GTLRCloudBuildQuery

/** Unique identifier of the `GitHubEnterpriseConfig` */
@property(nonatomic, copy, nullable) NSString *configId;

/**
 *  This field should contain the name of the enterprise config resource. For
 *  example: "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/** ID of the project */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Delete an association between a GCP project and a GitHub Enterprise server.
 *
 *  @param name This field should contain the name of the enterprise config
 *    resource. For example:
 *    "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
 *
 *  @return GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieve a GitHubEnterpriseConfig.
 *
 *  Method: cloudbuild.projects.githubEnterpriseConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsGet : GTLRCloudBuildQuery

/** Unique identifier of the `GitHubEnterpriseConfig` */
@property(nonatomic, copy, nullable) NSString *configId;

/**
 *  This field should contain the name of the enterprise config resource. For
 *  example: "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/** ID of the project */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_GitHubEnterpriseConfig.
 *
 *  Retrieve a GitHubEnterpriseConfig.
 *
 *  @param name This field should contain the name of the enterprise config
 *    resource. For example:
 *    "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
 *
 *  @return GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List all GitHubEnterpriseConfigs for a given project.
 *
 *  Method: cloudbuild.projects.githubEnterpriseConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsList : GTLRCloudBuildQuery

/**
 *  Name of the parent project. For example: projects/{$project_number} or
 *  projects/{$project_id}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** ID of the project */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_ListGithubEnterpriseConfigsResponse.
 *
 *  List all GitHubEnterpriseConfigs for a given project.
 *
 *  @param parent Name of the parent project. For example:
 *    projects/{$project_number} or projects/{$project_id}
 *
 *  @return GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update an association between a GCP project and a GitHub Enterprise server.
 *
 *  Method: cloudbuild.projects.githubEnterpriseConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsPatch : GTLRCloudBuildQuery

/**
 *  Optional. The full resource name for the GitHubEnterpriseConfig For example:
 *  "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Update mask for the resource. If this is set, the server will only update
 *  the fields specified in the field mask. Otherwise, a full update of the
 *  mutable resource fields will be performed.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Update an association between a GCP project and a GitHub Enterprise server.
 *
 *  @param object The @c GTLRCloudBuild_GitHubEnterpriseConfig to include in the
 *    query.
 *  @param name Optional. The full resource name for the GitHubEnterpriseConfig
 *    For example: "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
 *
 *  @return GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_GitHubEnterpriseConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Batch connecting Bitbucket Server repositories to Cloud Build.
 *
 *  Method: cloudbuild.projects.locations.bitbucketServerConfigs.connectedRepositories.batchCreate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsConnectedRepositoriesBatchCreate : GTLRCloudBuildQuery

/**
 *  The name of the `BitbucketServerConfig` that added connected repository.
 *  Format:
 *  `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Batch connecting Bitbucket Server repositories to Cloud Build.
 *
 *  @param object The @c
 *    GTLRCloudBuild_BatchCreateBitbucketServerConnectedRepositoriesRequest to
 *    include in the query.
 *  @param parent The name of the `BitbucketServerConfig` that added connected
 *    repository. Format:
 *    `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsConnectedRepositoriesBatchCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_BatchCreateBitbucketServerConnectedRepositoriesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a new `BitbucketServerConfig`. This API is experimental.
 *
 *  Method: cloudbuild.projects.locations.bitbucketServerConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsCreate : GTLRCloudBuildQuery

/**
 *  Optional. The ID to use for the BitbucketServerConfig, which will become the
 *  final component of the BitbucketServerConfig's resource name.
 *  bitbucket_server_config_id must meet the following requirements: + They must
 *  contain only alphanumeric characters and dashes. + They can be 1-64
 *  characters long. + They must begin and end with an alphanumeric character.
 */
@property(nonatomic, copy, nullable) NSString *bitbucketServerConfigId;

/** Required. Name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Creates a new `BitbucketServerConfig`. This API is experimental.
 *
 *  @param object The @c GTLRCloudBuild_BitbucketServerConfig to include in the
 *    query.
 *  @param parent Required. Name of the parent resource.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_BitbucketServerConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a `BitbucketServerConfig`. This API is experimental.
 *
 *  Method: cloudbuild.projects.locations.bitbucketServerConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsDelete : GTLRCloudBuildQuery

/** Required. The config resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Delete a `BitbucketServerConfig`. This API is experimental.
 *
 *  @param name Required. The config resource name.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieve a `BitbucketServerConfig`. This API is experimental.
 *
 *  Method: cloudbuild.projects.locations.bitbucketServerConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsGet : GTLRCloudBuildQuery

/** Required. The config resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudBuild_BitbucketServerConfig.
 *
 *  Retrieve a `BitbucketServerConfig`. This API is experimental.
 *
 *  @param name Required. The config resource name.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List all `BitbucketServerConfigs` for a given project. This API is
 *  experimental.
 *
 *  Method: cloudbuild.projects.locations.bitbucketServerConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsList : GTLRCloudBuildQuery

/**
 *  The maximum number of configs to return. The service may return fewer than
 *  this value. If unspecified, at most 50 configs will be returned. The maximum
 *  value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListBitbucketServerConfigsRequest`
 *  call. Provide this to retrieve the subsequent page. When paginating, all
 *  other parameters provided to `ListBitbucketServerConfigsRequest` must match
 *  the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudBuild_ListBitbucketServerConfigsResponse.
 *
 *  List all `BitbucketServerConfigs` for a given project. This API is
 *  experimental.
 *
 *  @param parent Required. Name of the parent resource.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an existing `BitbucketServerConfig`. This API is experimental.
 *
 *  Method: cloudbuild.projects.locations.bitbucketServerConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsPatch : GTLRCloudBuildQuery

/** The resource name for the config. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Update mask for the resource. If this is set, the server will only update
 *  the fields specified in the field mask. Otherwise, a full update of the
 *  mutable resource fields will be performed.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Updates an existing `BitbucketServerConfig`. This API is experimental.
 *
 *  @param object The @c GTLRCloudBuild_BitbucketServerConfig to include in the
 *    query.
 *  @param name The resource name for the config.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_BitbucketServerConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Remove a Bitbucket Server repository from a given BitbucketServerConfig's
 *  connected repositories. This API is experimental.
 *
 *  Method: cloudbuild.projects.locations.bitbucketServerConfigs.removeBitbucketServerConnectedRepository
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsRemoveBitbucketServerConnectedRepository : GTLRCloudBuildQuery

/**
 *  Required. The name of the `BitbucketServerConfig` to remove a connected
 *  repository. Format:
 *  `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`
 */
@property(nonatomic, copy, nullable) NSString *config;

/**
 *  Fetches a @c GTLRCloudBuild_Empty.
 *
 *  Remove a Bitbucket Server repository from a given BitbucketServerConfig's
 *  connected repositories. This API is experimental.
 *
 *  @param object The @c
 *    GTLRCloudBuild_RemoveBitbucketServerConnectedRepositoryRequest to include
 *    in the query.
 *  @param config Required. The name of the `BitbucketServerConfig` to remove a
 *    connected repository. Format:
 *    `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsRemoveBitbucketServerConnectedRepository
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_RemoveBitbucketServerConnectedRepositoryRequest *)object
                         config:(NSString *)config;

@end

/**
 *  List all repositories for a given `BitbucketServerConfig`. This API is
 *  experimental.
 *
 *  Method: cloudbuild.projects.locations.bitbucketServerConfigs.repos.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsReposList : GTLRCloudBuildQuery

/**
 *  The maximum number of configs to return. The service may return fewer than
 *  this value. The maximum value is 1000; values above 1000 will be coerced to
 *  1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous
 *  `ListBitbucketServerRepositoriesRequest` call. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to
 *  `ListBitbucketServerConfigsRequest` must match the call that provided the
 *  page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudBuild_ListBitbucketServerRepositoriesResponse.
 *
 *  List all repositories for a given `BitbucketServerConfig`. This API is
 *  experimental.
 *
 *  @param parent Required. Name of the parent resource.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsReposList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Approves or rejects a pending build. If approved, the returned LRO will be
 *  analogous to the LRO returned from a CreateBuild call. If rejected, the
 *  returned LRO will be immediately done.
 *
 *  Method: cloudbuild.projects.locations.builds.approve
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsBuildsApprove : GTLRCloudBuildQuery

/**
 *  Required. Name of the target build. For example:
 *  "projects/{$project_id}/builds/{$build_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Approves or rejects a pending build. If approved, the returned LRO will be
 *  analogous to the LRO returned from a CreateBuild call. If rejected, the
 *  returned LRO will be immediately done.
 *
 *  @param object The @c GTLRCloudBuild_ApproveBuildRequest to include in the
 *    query.
 *  @param name Required. Name of the target build. For example:
 *    "projects/{$project_id}/builds/{$build_id}"
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsBuildsApprove
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_ApproveBuildRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Cancels a build in progress.
 *
 *  Method: cloudbuild.projects.locations.builds.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsBuildsCancel : GTLRCloudBuildQuery

/**
 *  The name of the `Build` to cancel. Format:
 *  `projects/{project}/locations/{location}/builds/{build}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudBuild_Build.
 *
 *  Cancels a build in progress.
 *
 *  @param object The @c GTLRCloudBuild_CancelBuildRequest to include in the
 *    query.
 *  @param name The name of the `Build` to cancel. Format:
 *    `projects/{project}/locations/{location}/builds/{build}`
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsBuildsCancel
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_CancelBuildRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Starts a build with the specified configuration. This method returns a
 *  long-running `Operation`, which includes the build ID. Pass the build ID to
 *  `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).
 *
 *  Method: cloudbuild.projects.locations.builds.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsBuildsCreate : GTLRCloudBuildQuery

/**
 *  The parent resource where this build will be created. Format:
 *  `projects/{project}/locations/{location}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Starts a build with the specified configuration. This method returns a
 *  long-running `Operation`, which includes the build ID. Pass the build ID to
 *  `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).
 *
 *  @param object The @c GTLRCloudBuild_Build to include in the query.
 *  @param parent The parent resource where this build will be created. Format:
 *    `projects/{project}/locations/{location}`
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsBuildsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_Build *)object
                         parent:(NSString *)parent;

@end

/**
 *  Returns information about a previously requested build. The `Build` that is
 *  returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`),
 *  and timing information.
 *
 *  Method: cloudbuild.projects.locations.builds.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsBuildsGet : GTLRCloudBuildQuery

/**
 *  Required. ID of the build.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The name of the `Build` to retrieve. Format:
 *  `projects/{project}/locations/{location}/builds/{build}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_Build.
 *
 *  Returns information about a previously requested build. The `Build` that is
 *  returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`),
 *  and timing information.
 *
 *  @param name The name of the `Build` to retrieve. Format:
 *    `projects/{project}/locations/{location}/builds/{build}`
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsBuildsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists previously requested builds. Previously requested builds may still be
 *  in-progress, or may have finished successfully or unsuccessfully.
 *
 *  Method: cloudbuild.projects.locations.builds.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsBuildsList : GTLRCloudBuildQuery

/** The raw filter text to constrain the results. */
@property(nonatomic, copy, nullable) NSString *filter;

/** Number of results to return in the list. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The page token for the next page of Builds. If unspecified, the first page
 *  of results is returned. If the token is rejected for any reason,
 *  INVALID_ARGUMENT will be thrown. In this case, the token should be
 *  discarded, and pagination should be restarted from the first page of
 *  results. See https://google.aip.dev/158 for more.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent of the collection of `Builds`. Format:
 *  `projects/{project}/locations/{location}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_ListBuildsResponse.
 *
 *  Lists previously requested builds. Previously requested builds may still be
 *  in-progress, or may have finished successfully or unsuccessfully.
 *
 *  @param parent The parent of the collection of `Builds`. Format:
 *    `projects/{project}/locations/{location}`
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsBuildsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a new build based on the specified build. This method creates a new
 *  build using the original build request, which may or may not result in an
 *  identical build. For triggered builds: * Triggered builds resolve to a
 *  precise revision; therefore a retry of a triggered build will result in a
 *  build that uses the same revision. For non-triggered builds that specify
 *  `RepoSource`: * If the original build built from the tip of a branch, the
 *  retried build will build from the tip of that branch, which may not be the
 *  same revision as the original build. * If the original build specified a
 *  commit sha or revision ID, the retried build will use the identical source.
 *  For builds that specify `StorageSource`: * If the original build pulled
 *  source from Google Cloud Storage without specifying the generation of the
 *  object, the new build will use the current object, which may be different
 *  from the original build source. * If the original build pulled source from
 *  Cloud Storage and specified the generation of the object, the new build will
 *  attempt to use the same object, which may or may not be available depending
 *  on the bucket's lifecycle management settings.
 *
 *  Method: cloudbuild.projects.locations.builds.retry
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsBuildsRetry : GTLRCloudBuildQuery

/**
 *  The name of the `Build` to retry. Format:
 *  `projects/{project}/locations/{location}/builds/{build}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Creates a new build based on the specified build. This method creates a new
 *  build using the original build request, which may or may not result in an
 *  identical build. For triggered builds: * Triggered builds resolve to a
 *  precise revision; therefore a retry of a triggered build will result in a
 *  build that uses the same revision. For non-triggered builds that specify
 *  `RepoSource`: * If the original build built from the tip of a branch, the
 *  retried build will build from the tip of that branch, which may not be the
 *  same revision as the original build. * If the original build specified a
 *  commit sha or revision ID, the retried build will use the identical source.
 *  For builds that specify `StorageSource`: * If the original build pulled
 *  source from Google Cloud Storage without specifying the generation of the
 *  object, the new build will use the current object, which may be different
 *  from the original build source. * If the original build pulled source from
 *  Cloud Storage and specified the generation of the object, the new build will
 *  attempt to use the same object, which may or may not be available depending
 *  on the bucket's lifecycle management settings.
 *
 *  @param object The @c GTLRCloudBuild_RetryBuildRequest to include in the
 *    query.
 *  @param name The name of the `Build` to retry. Format:
 *    `projects/{project}/locations/{location}/builds/{build}`
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsBuildsRetry
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_RetryBuildRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Create an association between a GCP project and a GitHub Enterprise server.
 *
 *  Method: cloudbuild.projects.locations.githubEnterpriseConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsCreate : GTLRCloudBuildQuery

/**
 *  Optional. The ID to use for the GithubEnterpriseConfig, which will become
 *  the final component of the GithubEnterpriseConfig's resource name.
 *  ghe_config_id must meet the following requirements: + They must contain only
 *  alphanumeric characters and dashes. + They can be 1-64 characters long. +
 *  They must begin and end with an alphanumeric character
 */
@property(nonatomic, copy, nullable) NSString *gheConfigId;

/**
 *  Name of the parent project. For example: projects/{$project_number} or
 *  projects/{$project_id}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Create an association between a GCP project and a GitHub Enterprise server.
 *
 *  @param object The @c GTLRCloudBuild_GitHubEnterpriseConfig to include in the
 *    query.
 *  @param parent Name of the parent project. For example:
 *    projects/{$project_number} or projects/{$project_id}
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_GitHubEnterpriseConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete an association between a GCP project and a GitHub Enterprise server.
 *
 *  Method: cloudbuild.projects.locations.githubEnterpriseConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsDelete : GTLRCloudBuildQuery

/** Unique identifier of the `GitHubEnterpriseConfig` */
@property(nonatomic, copy, nullable) NSString *configId;

/**
 *  This field should contain the name of the enterprise config resource. For
 *  example: "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/** ID of the project */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Delete an association between a GCP project and a GitHub Enterprise server.
 *
 *  @param name This field should contain the name of the enterprise config
 *    resource. For example:
 *    "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieve a GitHubEnterpriseConfig.
 *
 *  Method: cloudbuild.projects.locations.githubEnterpriseConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsGet : GTLRCloudBuildQuery

/** Unique identifier of the `GitHubEnterpriseConfig` */
@property(nonatomic, copy, nullable) NSString *configId;

/**
 *  This field should contain the name of the enterprise config resource. For
 *  example: "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/** ID of the project */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_GitHubEnterpriseConfig.
 *
 *  Retrieve a GitHubEnterpriseConfig.
 *
 *  @param name This field should contain the name of the enterprise config
 *    resource. For example:
 *    "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List all GitHubEnterpriseConfigs for a given project.
 *
 *  Method: cloudbuild.projects.locations.githubEnterpriseConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsList : GTLRCloudBuildQuery

/**
 *  Name of the parent project. For example: projects/{$project_number} or
 *  projects/{$project_id}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** ID of the project */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_ListGithubEnterpriseConfigsResponse.
 *
 *  List all GitHubEnterpriseConfigs for a given project.
 *
 *  @param parent Name of the parent project. For example:
 *    projects/{$project_number} or projects/{$project_id}
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsList
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update an association between a GCP project and a GitHub Enterprise server.
 *
 *  Method: cloudbuild.projects.locations.githubEnterpriseConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsPatch : GTLRCloudBuildQuery

/**
 *  Optional. The full resource name for the GitHubEnterpriseConfig For example:
 *  "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Update mask for the resource. If this is set, the server will only update
 *  the fields specified in the field mask. Otherwise, a full update of the
 *  mutable resource fields will be performed.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Update an association between a GCP project and a GitHub Enterprise server.
 *
 *  @param object The @c GTLRCloudBuild_GitHubEnterpriseConfig to include in the
 *    query.
 *  @param name Optional. The full resource name for the GitHubEnterpriseConfig
 *    For example: "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_GitHubEnterpriseConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Batch connecting GitLab repositories to Cloud Build. This API is
 *  experimental.
 *
 *  Method: cloudbuild.projects.locations.gitLabConfigs.connectedRepositories.batchCreate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsConnectedRepositoriesBatchCreate : GTLRCloudBuildQuery

/**
 *  The name of the `GitLabConfig` that adds connected repositories. Format:
 *  `projects/{project}/locations/{location}/gitLabConfigs/{config}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Batch connecting GitLab repositories to Cloud Build. This API is
 *  experimental.
 *
 *  @param object The @c
 *    GTLRCloudBuild_BatchCreateGitLabConnectedRepositoriesRequest to include in
 *    the query.
 *  @param parent The name of the `GitLabConfig` that adds connected
 *    repositories. Format:
 *    `projects/{project}/locations/{location}/gitLabConfigs/{config}`
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsConnectedRepositoriesBatchCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_BatchCreateGitLabConnectedRepositoriesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a new `GitLabConfig`. This API is experimental
 *
 *  Method: cloudbuild.projects.locations.gitLabConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsCreate : GTLRCloudBuildQuery

/**
 *  Optional. The ID to use for the GitLabConfig, which will become the final
 *  component of the GitLabConfig’s resource name. gitlab_config_id must meet
 *  the following requirements: + They must contain only alphanumeric characters
 *  and dashes. + They can be 1-64 characters long. + They must begin and end
 *  with an alphanumeric character
 */
@property(nonatomic, copy, nullable) NSString *gitlabConfigId;

/** Required. Name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Creates a new `GitLabConfig`. This API is experimental
 *
 *  @param object The @c GTLRCloudBuild_GitLabConfig to include in the query.
 *  @param parent Required. Name of the parent resource.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_GitLabConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a `GitLabConfig`. This API is experimental
 *
 *  Method: cloudbuild.projects.locations.gitLabConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsDelete : GTLRCloudBuildQuery

/** Required. The config resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Delete a `GitLabConfig`. This API is experimental
 *
 *  @param name Required. The config resource name.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieves a `GitLabConfig`. This API is experimental
 *
 *  Method: cloudbuild.projects.locations.gitLabConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsGet : GTLRCloudBuildQuery

/** Required. The config resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudBuild_GitLabConfig.
 *
 *  Retrieves a `GitLabConfig`. This API is experimental
 *
 *  @param name Required. The config resource name.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List all `GitLabConfigs` for a given project. This API is experimental
 *
 *  Method: cloudbuild.projects.locations.gitLabConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsList : GTLRCloudBuildQuery

/**
 *  The maximum number of configs to return. The service may return fewer than
 *  this value. If unspecified, at most 50 configs will be returned. The maximum
 *  value is 1000;, values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous ‘ListGitlabConfigsRequest’ call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to ‘ListGitlabConfigsRequest’ must match the call that
 *  provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Name of the parent resource */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudBuild_ListGitLabConfigsResponse.
 *
 *  List all `GitLabConfigs` for a given project. This API is experimental
 *
 *  @param parent Required. Name of the parent resource
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an existing `GitLabConfig`. This API is experimental
 *
 *  Method: cloudbuild.projects.locations.gitLabConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsPatch : GTLRCloudBuildQuery

/** The resource name for the config. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Update mask for the resource. If this is set, the server will only update
 *  the fields specified in the field mask. Otherwise, a full update of the
 *  mutable resource fields will be performed.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Updates an existing `GitLabConfig`. This API is experimental
 *
 *  @param object The @c GTLRCloudBuild_GitLabConfig to include in the query.
 *  @param name The resource name for the config.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_GitLabConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Remove a GitLab repository from a given GitLabConfig's connected
 *  repositories. This API is experimental.
 *
 *  Method: cloudbuild.projects.locations.gitLabConfigs.removeGitLabConnectedRepository
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsRemoveGitLabConnectedRepository : GTLRCloudBuildQuery

/**
 *  Required. The name of the `GitLabConfig` to remove a connected repository.
 *  Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`
 */
@property(nonatomic, copy, nullable) NSString *config;

/**
 *  Fetches a @c GTLRCloudBuild_Empty.
 *
 *  Remove a GitLab repository from a given GitLabConfig's connected
 *  repositories. This API is experimental.
 *
 *  @param object The @c GTLRCloudBuild_RemoveGitLabConnectedRepositoryRequest
 *    to include in the query.
 *  @param config Required. The name of the `GitLabConfig` to remove a connected
 *    repository. Format:
 *    `projects/{project}/locations/{location}/gitLabConfigs/{config}`
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsRemoveGitLabConnectedRepository
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_RemoveGitLabConnectedRepositoryRequest *)object
                         config:(NSString *)config;

@end

/**
 *  List all repositories for a given `GitLabConfig`. This API is experimental
 *
 *  Method: cloudbuild.projects.locations.gitLabConfigs.repos.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsReposList : GTLRCloudBuildQuery

/**
 *  The maximum number of repositories to return. The service may return fewer
 *  than this value.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous ListGitLabRepositoriesRequest` call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to `ListGitLabRepositoriesRequest` must match the call
 *  that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Name of the parent resource. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudBuild_ListGitLabRepositoriesResponse.
 *
 *  List all repositories for a given `GitLabConfig`. This API is experimental
 *
 *  @param parent Required. Name of the parent resource.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsReposList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: cloudbuild.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsOperationsCancel : GTLRCloudBuildQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudBuild_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRCloudBuild_CancelOperationRequest to include in the
 *    query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: cloudbuild.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsOperationsGet : GTLRCloudBuildQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new `BuildTrigger`. This API is experimental.
 *
 *  Method: cloudbuild.projects.locations.triggers.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsTriggersCreate : GTLRCloudBuildQuery

/**
 *  The parent resource where this trigger will be created. Format:
 *  `projects/{project}/locations/{location}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. ID of the project for which to configure automatic builds. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_BuildTrigger.
 *
 *  Creates a new `BuildTrigger`. This API is experimental.
 *
 *  @param object The @c GTLRCloudBuild_BuildTrigger to include in the query.
 *  @param parent The parent resource where this trigger will be created.
 *    Format: `projects/{project}/locations/{location}`
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsTriggersCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_BuildTrigger *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a `BuildTrigger` by its project ID and trigger ID. This API is
 *  experimental.
 *
 *  Method: cloudbuild.projects.locations.triggers.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsTriggersDelete : GTLRCloudBuildQuery

/**
 *  The name of the `Trigger` to delete. Format:
 *  `projects/{project}/locations/{location}/triggers/{trigger}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. ID of the project that owns the trigger. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Required. ID of the `BuildTrigger` to delete. */
@property(nonatomic, copy, nullable) NSString *triggerId;

/**
 *  Fetches a @c GTLRCloudBuild_Empty.
 *
 *  Deletes a `BuildTrigger` by its project ID and trigger ID. This API is
 *  experimental.
 *
 *  @param name The name of the `Trigger` to delete. Format:
 *    `projects/{project}/locations/{location}/triggers/{trigger}`
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsTriggersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about a `BuildTrigger`. This API is experimental.
 *
 *  Method: cloudbuild.projects.locations.triggers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsTriggersGet : GTLRCloudBuildQuery

/**
 *  The name of the `Trigger` to retrieve. Format:
 *  `projects/{project}/locations/{location}/triggers/{trigger}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. ID of the project that owns the trigger. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Required. Identifier (`id` or `name`) of the `BuildTrigger` to get. */
@property(nonatomic, copy, nullable) NSString *triggerId;

/**
 *  Fetches a @c GTLRCloudBuild_BuildTrigger.
 *
 *  Returns information about a `BuildTrigger`. This API is experimental.
 *
 *  @param name The name of the `Trigger` to retrieve. Format:
 *    `projects/{project}/locations/{location}/triggers/{trigger}`
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsTriggersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists existing `BuildTrigger`s. This API is experimental.
 *
 *  Method: cloudbuild.projects.locations.triggers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsTriggersList : GTLRCloudBuildQuery

/** Number of results to return in the list. */
@property(nonatomic, assign) NSInteger pageSize;

/** Token to provide to skip to a particular spot in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent of the collection of `Triggers`. Format:
 *  `projects/{project}/locations/{location}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. ID of the project for which to list BuildTriggers. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_ListBuildTriggersResponse.
 *
 *  Lists existing `BuildTrigger`s. This API is experimental.
 *
 *  @param parent The parent of the collection of `Triggers`. Format:
 *    `projects/{project}/locations/{location}`
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsTriggersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a `BuildTrigger` by its project ID and trigger ID. This API is
 *  experimental.
 *
 *  Method: cloudbuild.projects.locations.triggers.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsTriggersPatch : GTLRCloudBuildQuery

/** Required. ID of the project that owns the trigger. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  The `Trigger` name with format:
 *  `projects/{project}/locations/{location}/triggers/{trigger}`, where
 *  {trigger} is a unique identifier generated by the service.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/** Required. ID of the `BuildTrigger` to update. */
@property(nonatomic, copy, nullable) NSString *triggerId;

/**
 *  Fetches a @c GTLRCloudBuild_BuildTrigger.
 *
 *  Updates a `BuildTrigger` by its project ID and trigger ID. This API is
 *  experimental.
 *
 *  @param object The @c GTLRCloudBuild_BuildTrigger to include in the query.
 *  @param resourceName The `Trigger` name with format:
 *    `projects/{project}/locations/{location}/triggers/{trigger}`, where
 *    {trigger} is a unique identifier generated by the service.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsTriggersPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_BuildTrigger *)object
                   resourceName:(NSString *)resourceName;

@end

/**
 *  Runs a `BuildTrigger` at a particular source revision. To run a regional or
 *  global trigger, use the POST request that includes the location endpoint in
 *  the path. The POST request that does not include the location endpoint in
 *  the path can only be used when running global triggers.
 *
 *  Method: cloudbuild.projects.locations.triggers.run
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsTriggersRun : GTLRCloudBuildQuery

/**
 *  The name of the `Trigger` to run. Format:
 *  `projects/{project}/locations/{location}/triggers/{trigger}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Runs a `BuildTrigger` at a particular source revision. To run a regional or
 *  global trigger, use the POST request that includes the location endpoint in
 *  the path. The POST request that does not include the location endpoint in
 *  the path can only be used when running global triggers.
 *
 *  @param object The @c GTLRCloudBuild_RunBuildTriggerRequest to include in the
 *    query.
 *  @param name The name of the `Trigger` to run. Format:
 *    `projects/{project}/locations/{location}/triggers/{trigger}`
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsTriggersRun
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_RunBuildTriggerRequest *)object
                           name:(NSString *)name;

@end

/**
 *  ReceiveTriggerWebhook [Experimental] is called when the API receives a
 *  webhook request targeted at a specific trigger.
 *
 *  Method: cloudbuild.projects.locations.triggers.webhook
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsTriggersWebhook : GTLRCloudBuildQuery

/**
 *  The name of the `ReceiveTriggerWebhook` to retrieve. Format:
 *  `projects/{project}/locations/{location}/triggers/{trigger}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Project in which the specified trigger lives */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Secret token used for authorization if an OAuth token isn't provided. */
@property(nonatomic, copy, nullable) NSString *secret;

/** Name of the trigger to run the payload against */
@property(nonatomic, copy, nullable) NSString *trigger;

/**
 *  Fetches a @c GTLRCloudBuild_ReceiveTriggerWebhookResponse.
 *
 *  ReceiveTriggerWebhook [Experimental] is called when the API receives a
 *  webhook request targeted at a specific trigger.
 *
 *  @param object The @c GTLRCloudBuild_HttpBody to include in the query.
 *  @param name The name of the `ReceiveTriggerWebhook` to retrieve. Format:
 *    `projects/{project}/locations/{location}/triggers/{trigger}`
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsTriggersWebhook
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_HttpBody *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a `WorkerPool`.
 *
 *  Method: cloudbuild.projects.locations.workerPools.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsCreate : GTLRCloudBuildQuery

/**
 *  Required. The parent resource where this worker pool will be created.
 *  Format: `projects/{project}/locations/{location}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  If set, validate the request and preview the response, but do not actually
 *  post it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Required. Immutable. The ID to use for the `WorkerPool`, which will become
 *  the final component of the resource name. This value should be 1-63
 *  characters, and valid characters are /a-z-/.
 */
@property(nonatomic, copy, nullable) NSString *workerPoolId;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Creates a `WorkerPool`.
 *
 *  @param object The @c GTLRCloudBuild_WorkerPool to include in the query.
 *  @param parent Required. The parent resource where this worker pool will be
 *    created. Format: `projects/{project}/locations/{location}`.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_WorkerPool *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a `WorkerPool`.
 *
 *  Method: cloudbuild.projects.locations.workerPools.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsDelete : GTLRCloudBuildQuery

/**
 *  If set to true, and the `WorkerPool` is not found, the request will succeed
 *  but no action will be taken on the server.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  Optional. If provided, it must match the server's etag on the workerpool for
 *  the request to be processed.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Required. The name of the `WorkerPool` to delete. Format:
 *  `projects/{project}/locations/{location}/workerPools/{workerPool}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If set, validate the request and preview the response, but do not actually
 *  post it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Deletes a `WorkerPool`.
 *
 *  @param name Required. The name of the `WorkerPool` to delete. Format:
 *    `projects/{project}/locations/{location}/workerPools/{workerPool}`.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns details of a `WorkerPool`.
 *
 *  Method: cloudbuild.projects.locations.workerPools.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsGet : GTLRCloudBuildQuery

/**
 *  Required. The name of the `WorkerPool` to retrieve. Format:
 *  `projects/{project}/locations/{location}/workerPools/{workerPool}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudBuild_WorkerPool.
 *
 *  Returns details of a `WorkerPool`.
 *
 *  @param name Required. The name of the `WorkerPool` to retrieve. Format:
 *    `projects/{project}/locations/{location}/workerPools/{workerPool}`.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists `WorkerPool`s.
 *
 *  Method: cloudbuild.projects.locations.workerPools.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsList : GTLRCloudBuildQuery

/**
 *  The maximum number of `WorkerPool`s to return. The service may return fewer
 *  than this value. If omitted, the server will use a sensible default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListWorkerPools` call. Provide this
 *  to retrieve the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent of the collection of `WorkerPools`. Format:
 *  `projects/{project}/locations/{location}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudBuild_ListWorkerPoolsResponse.
 *
 *  Lists `WorkerPool`s.
 *
 *  @param parent Required. The parent of the collection of `WorkerPools`.
 *    Format: `projects/{project}/locations/{location}`.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a `WorkerPool`.
 *
 *  Method: cloudbuild.projects.locations.workerPools.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsPatch : GTLRCloudBuildQuery

/**
 *  Output only. The resource name of the `WorkerPool`, with format
 *  `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The
 *  value of `{worker_pool}` is provided by `worker_pool_id` in
 *  `CreateWorkerPool` request and the value of `{location}` is determined by
 *  the endpoint accessed.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A mask specifying which fields in `worker_pool` to update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  If set, validate the request and preview the response, but do not actually
 *  post it.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Updates a `WorkerPool`.
 *
 *  @param object The @c GTLRCloudBuild_WorkerPool to include in the query.
 *  @param name Output only. The resource name of the `WorkerPool`, with format
 *    `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The
 *    value of `{worker_pool}` is provided by `worker_pool_id` in
 *    `CreateWorkerPool` request and the value of `{location}` is determined by
 *    the endpoint accessed.
 *
 *  @return GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_WorkerPool *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new `BuildTrigger`. This API is experimental.
 *
 *  Method: cloudbuild.projects.triggers.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsTriggersCreate : GTLRCloudBuildQuery

/**
 *  The parent resource where this trigger will be created. Format:
 *  `projects/{project}/locations/{location}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. ID of the project for which to configure automatic builds. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_BuildTrigger.
 *
 *  Creates a new `BuildTrigger`. This API is experimental.
 *
 *  @param object The @c GTLRCloudBuild_BuildTrigger to include in the query.
 *  @param projectId Required. ID of the project for which to configure
 *    automatic builds.
 *
 *  @return GTLRCloudBuildQuery_ProjectsTriggersCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_BuildTrigger *)object
                      projectId:(NSString *)projectId;

@end

/**
 *  Deletes a `BuildTrigger` by its project ID and trigger ID. This API is
 *  experimental.
 *
 *  Method: cloudbuild.projects.triggers.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsTriggersDelete : GTLRCloudBuildQuery

/**
 *  The name of the `Trigger` to delete. Format:
 *  `projects/{project}/locations/{location}/triggers/{trigger}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. ID of the project that owns the trigger. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Required. ID of the `BuildTrigger` to delete. */
@property(nonatomic, copy, nullable) NSString *triggerId;

/**
 *  Fetches a @c GTLRCloudBuild_Empty.
 *
 *  Deletes a `BuildTrigger` by its project ID and trigger ID. This API is
 *  experimental.
 *
 *  @param projectId Required. ID of the project that owns the trigger.
 *  @param triggerId Required. ID of the `BuildTrigger` to delete.
 *
 *  @return GTLRCloudBuildQuery_ProjectsTriggersDelete
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId
                         triggerId:(NSString *)triggerId;

@end

/**
 *  Returns information about a `BuildTrigger`. This API is experimental.
 *
 *  Method: cloudbuild.projects.triggers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsTriggersGet : GTLRCloudBuildQuery

/**
 *  The name of the `Trigger` to retrieve. Format:
 *  `projects/{project}/locations/{location}/triggers/{trigger}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. ID of the project that owns the trigger. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Required. Identifier (`id` or `name`) of the `BuildTrigger` to get. */
@property(nonatomic, copy, nullable) NSString *triggerId;

/**
 *  Fetches a @c GTLRCloudBuild_BuildTrigger.
 *
 *  Returns information about a `BuildTrigger`. This API is experimental.
 *
 *  @param projectId Required. ID of the project that owns the trigger.
 *  @param triggerId Required. Identifier (`id` or `name`) of the `BuildTrigger`
 *    to get.
 *
 *  @return GTLRCloudBuildQuery_ProjectsTriggersGet
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId
                         triggerId:(NSString *)triggerId;

@end

/**
 *  Lists existing `BuildTrigger`s. This API is experimental.
 *
 *  Method: cloudbuild.projects.triggers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsTriggersList : GTLRCloudBuildQuery

/** Number of results to return in the list. */
@property(nonatomic, assign) NSInteger pageSize;

/** Token to provide to skip to a particular spot in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The parent of the collection of `Triggers`. Format:
 *  `projects/{project}/locations/{location}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. ID of the project for which to list BuildTriggers. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Fetches a @c GTLRCloudBuild_ListBuildTriggersResponse.
 *
 *  Lists existing `BuildTrigger`s. This API is experimental.
 *
 *  @param projectId Required. ID of the project for which to list
 *    BuildTriggers.
 *
 *  @return GTLRCloudBuildQuery_ProjectsTriggersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithProjectId:(NSString *)projectId;

@end

/**
 *  Updates a `BuildTrigger` by its project ID and trigger ID. This API is
 *  experimental.
 *
 *  Method: cloudbuild.projects.triggers.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsTriggersPatch : GTLRCloudBuildQuery

/** Required. ID of the project that owns the trigger. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Required. ID of the `BuildTrigger` to update. */
@property(nonatomic, copy, nullable) NSString *triggerId;

/**
 *  Fetches a @c GTLRCloudBuild_BuildTrigger.
 *
 *  Updates a `BuildTrigger` by its project ID and trigger ID. This API is
 *  experimental.
 *
 *  @param object The @c GTLRCloudBuild_BuildTrigger to include in the query.
 *  @param projectId Required. ID of the project that owns the trigger.
 *  @param triggerId Required. ID of the `BuildTrigger` to update.
 *
 *  @return GTLRCloudBuildQuery_ProjectsTriggersPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_BuildTrigger *)object
                      projectId:(NSString *)projectId
                      triggerId:(NSString *)triggerId;

@end

/**
 *  Runs a `BuildTrigger` at a particular source revision. To run a regional or
 *  global trigger, use the POST request that includes the location endpoint in
 *  the path. The POST request that does not include the location endpoint in
 *  the path can only be used when running global triggers.
 *
 *  Method: cloudbuild.projects.triggers.run
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudBuildCloudPlatform
 */
@interface GTLRCloudBuildQuery_ProjectsTriggersRun : GTLRCloudBuildQuery

/**
 *  The name of the `Trigger` to run. Format:
 *  `projects/{project}/locations/{location}/triggers/{trigger}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Required. ID of the trigger. */
@property(nonatomic, copy, nullable) NSString *triggerId;

/**
 *  Fetches a @c GTLRCloudBuild_Operation.
 *
 *  Runs a `BuildTrigger` at a particular source revision. To run a regional or
 *  global trigger, use the POST request that includes the location endpoint in
 *  the path. The POST request that does not include the location endpoint in
 *  the path can only be used when running global triggers.
 *
 *  @param object The @c GTLRCloudBuild_RepoSource to include in the query.
 *  @param projectId Required. ID of the project.
 *  @param triggerId Required. ID of the trigger.
 *
 *  @return GTLRCloudBuildQuery_ProjectsTriggersRun
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_RepoSource *)object
                      projectId:(NSString *)projectId
                      triggerId:(NSString *)triggerId;

@end

/**
 *  ReceiveTriggerWebhook [Experimental] is called when the API receives a
 *  webhook request targeted at a specific trigger.
 *
 *  Method: cloudbuild.projects.triggers.webhook
 */
@interface GTLRCloudBuildQuery_ProjectsTriggersWebhook : GTLRCloudBuildQuery

/**
 *  The name of the `ReceiveTriggerWebhook` to retrieve. Format:
 *  `projects/{project}/locations/{location}/triggers/{trigger}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Project in which the specified trigger lives */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Secret token used for authorization if an OAuth token isn't provided. */
@property(nonatomic, copy, nullable) NSString *secret;

/** Name of the trigger to run the payload against */
@property(nonatomic, copy, nullable) NSString *trigger;

/**
 *  Fetches a @c GTLRCloudBuild_ReceiveTriggerWebhookResponse.
 *
 *  ReceiveTriggerWebhook [Experimental] is called when the API receives a
 *  webhook request targeted at a specific trigger.
 *
 *  @param object The @c GTLRCloudBuild_HttpBody to include in the query.
 *  @param projectId Project in which the specified trigger lives
 *  @param trigger Name of the trigger to run the payload against
 *
 *  @return GTLRCloudBuildQuery_ProjectsTriggersWebhook
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_HttpBody *)object
                      projectId:(NSString *)projectId
                        trigger:(NSString *)trigger;

@end

/**
 *  ReceiveWebhook is called when the API receives a GitHub webhook.
 *
 *  Method: cloudbuild.webhook
 */
@interface GTLRCloudBuildQuery_V1Webhook : GTLRCloudBuildQuery

/**
 *  For GitHub Enterprise webhooks, this key is used to associate the webhook
 *  request with the GitHubEnterpriseConfig to use for validation.
 */
@property(nonatomic, copy, nullable) NSString *webhookKey;

/**
 *  Fetches a @c GTLRCloudBuild_Empty.
 *
 *  ReceiveWebhook is called when the API receives a GitHub webhook.
 *
 *  @param object The @c GTLRCloudBuild_HttpBody to include in the query.
 *
 *  @return GTLRCloudBuildQuery_V1Webhook
 */
+ (instancetype)queryWithObject:(GTLRCloudBuild_HttpBody *)object;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
