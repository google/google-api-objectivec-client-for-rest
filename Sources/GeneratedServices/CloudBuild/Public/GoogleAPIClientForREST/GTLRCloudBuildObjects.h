// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Build API (cloudbuild/v1)
// Description:
//   Creates and manages builds on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/cloud-build/docs/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudBuild_ApprovalConfig;
@class GTLRCloudBuild_ApprovalResult;
@class GTLRCloudBuild_ArtifactObjects;
@class GTLRCloudBuild_Artifacts;
@class GTLRCloudBuild_BitbucketServerConfig;
@class GTLRCloudBuild_BitbucketServerConnectedRepository;
@class GTLRCloudBuild_BitbucketServerRepository;
@class GTLRCloudBuild_BitbucketServerRepositoryId;
@class GTLRCloudBuild_BitbucketServerSecrets;
@class GTLRCloudBuild_BitbucketServerTriggerConfig;
@class GTLRCloudBuild_Build;
@class GTLRCloudBuild_Build_Substitutions;
@class GTLRCloudBuild_Build_Timing;
@class GTLRCloudBuild_BuildApproval;
@class GTLRCloudBuild_BuildOptions;
@class GTLRCloudBuild_BuildStep;
@class GTLRCloudBuild_BuildTrigger;
@class GTLRCloudBuild_BuildTrigger_Substitutions;
@class GTLRCloudBuild_BuiltImage;
@class GTLRCloudBuild_CreateBitbucketServerConnectedRepositoryRequest;
@class GTLRCloudBuild_CreateGitLabConnectedRepositoryRequest;
@class GTLRCloudBuild_FailureInfo;
@class GTLRCloudBuild_FileHashes;
@class GTLRCloudBuild_GitFileSource;
@class GTLRCloudBuild_GitHubEnterpriseConfig;
@class GTLRCloudBuild_GitHubEnterpriseSecrets;
@class GTLRCloudBuild_GitHubEventsConfig;
@class GTLRCloudBuild_GitLabConfig;
@class GTLRCloudBuild_GitLabConnectedRepository;
@class GTLRCloudBuild_GitLabEnterpriseConfig;
@class GTLRCloudBuild_GitLabEventsConfig;
@class GTLRCloudBuild_GitLabRepository;
@class GTLRCloudBuild_GitLabRepositoryId;
@class GTLRCloudBuild_GitLabSecrets;
@class GTLRCloudBuild_GitRepoSource;
@class GTLRCloudBuild_Hash;
@class GTLRCloudBuild_HttpBody_Extensions_Item;
@class GTLRCloudBuild_HTTPDelivery;
@class GTLRCloudBuild_InlineSecret;
@class GTLRCloudBuild_InlineSecret_EnvMap;
@class GTLRCloudBuild_MavenArtifact;
@class GTLRCloudBuild_NetworkConfig;
@class GTLRCloudBuild_Notification;
@class GTLRCloudBuild_Notification_StructDelivery;
@class GTLRCloudBuild_NotifierMetadata;
@class GTLRCloudBuild_NotifierSecret;
@class GTLRCloudBuild_NotifierSecretRef;
@class GTLRCloudBuild_NotifierSpec;
@class GTLRCloudBuild_Operation_Metadata;
@class GTLRCloudBuild_Operation_Response;
@class GTLRCloudBuild_PoolOption;
@class GTLRCloudBuild_PrivatePoolV1Config;
@class GTLRCloudBuild_PubsubConfig;
@class GTLRCloudBuild_PullRequestFilter;
@class GTLRCloudBuild_PushFilter;
@class GTLRCloudBuild_PythonPackage;
@class GTLRCloudBuild_RepositoryEventConfig;
@class GTLRCloudBuild_RepoSource;
@class GTLRCloudBuild_RepoSource_Substitutions;
@class GTLRCloudBuild_Results;
@class GTLRCloudBuild_Secret;
@class GTLRCloudBuild_Secret_SecretEnv;
@class GTLRCloudBuild_SecretManagerSecret;
@class GTLRCloudBuild_Secrets;
@class GTLRCloudBuild_ServiceDirectoryConfig;
@class GTLRCloudBuild_SlackDelivery;
@class GTLRCloudBuild_SMTPDelivery;
@class GTLRCloudBuild_Source;
@class GTLRCloudBuild_SourceProvenance;
@class GTLRCloudBuild_SourceProvenance_FileHashes;
@class GTLRCloudBuild_Status;
@class GTLRCloudBuild_Status_Details_Item;
@class GTLRCloudBuild_StorageSource;
@class GTLRCloudBuild_StorageSourceManifest;
@class GTLRCloudBuild_TimeSpan;
@class GTLRCloudBuild_UploadedMavenArtifact;
@class GTLRCloudBuild_UploadedPythonPackage;
@class GTLRCloudBuild_Volume;
@class GTLRCloudBuild_Warning;
@class GTLRCloudBuild_WebhookConfig;
@class GTLRCloudBuild_WorkerConfig;
@class GTLRCloudBuild_WorkerPool;
@class GTLRCloudBuild_WorkerPool_Annotations;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudBuild_ApprovalResult.decision

/**
 *  Build is approved.
 *
 *  Value: "APPROVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_ApprovalResult_Decision_Approved;
/**
 *  Default enum type. This should not be used.
 *
 *  Value: "DECISION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_ApprovalResult_Decision_DecisionUnspecified;
/**
 *  Build is rejected.
 *
 *  Value: "REJECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_ApprovalResult_Decision_Rejected;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_Build.status

/**
 *  Build or step was canceled by a user.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Build_Status_Cancelled;
/**
 *  Build was enqueued for longer than the value of `queue_ttl`.
 *
 *  Value: "EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Build_Status_Expired;
/**
 *  Build or step failed to complete successfully.
 *
 *  Value: "FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Build_Status_Failure;
/**
 *  Build or step failed due to an internal cause.
 *
 *  Value: "INTERNAL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Build_Status_InternalError;
/**
 *  Build has been created and is pending execution and queuing. It has not been
 *  queued.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Build_Status_Pending;
/**
 *  Build or step is queued; work has not yet begun.
 *
 *  Value: "QUEUED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Build_Status_Queued;
/**
 *  Status of the build is unknown.
 *
 *  Value: "STATUS_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Build_Status_StatusUnknown;
/**
 *  Build or step finished successfully.
 *
 *  Value: "SUCCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Build_Status_Success;
/**
 *  Build or step took longer than was allowed.
 *
 *  Value: "TIMEOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Build_Status_Timeout;
/**
 *  Build or step is being executed.
 *
 *  Value: "WORKING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Build_Status_Working;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_BuildApproval.state

/**
 *  Build approval has been approved.
 *
 *  Value: "APPROVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildApproval_State_Approved;
/**
 *  Build was cancelled while it was still pending approval.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildApproval_State_Cancelled;
/**
 *  Build approval is pending.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildApproval_State_Pending;
/**
 *  Build approval has been rejected.
 *
 *  Value: "REJECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildApproval_State_Rejected;
/**
 *  Default enum type. This should not be used.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildApproval_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_BuildOptions.logging

/**
 *  Build logs are stored in Cloud Logging. Selecting this option will not allow
 *  [logs streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).
 *
 *  Value: "CLOUD_LOGGING_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_Logging_CloudLoggingOnly;
/**
 *  Build logs are stored in Cloud Storage.
 *
 *  Value: "GCS_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_Logging_GcsOnly;
/**
 *  Build logs are stored in Cloud Logging and Cloud Storage.
 *
 *  Value: "LEGACY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_Logging_Legacy;
/**
 *  The service determines the logging mode. The default is `LEGACY`. Do not
 *  rely on the default logging behavior as it may change in the future.
 *
 *  Value: "LOGGING_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_Logging_LoggingUnspecified;
/**
 *  Turn off all logging. No build logs will be captured.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_Logging_None;
/**
 *  This option is the same as CLOUD_LOGGING_ONLY.
 *
 *  Value: "STACKDRIVER_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_Logging_StackdriverOnly;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_BuildOptions.logStreamingOption

/**
 *  Service may automatically determine build log streaming behavior.
 *
 *  Value: "STREAM_DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_LogStreamingOption_StreamDefault;
/**
 *  Build logs should not be streamed to Google Cloud Storage; they will be
 *  written when the build is completed.
 *
 *  Value: "STREAM_OFF"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_LogStreamingOption_StreamOff;
/**
 *  Build logs should be streamed to Google Cloud Storage.
 *
 *  Value: "STREAM_ON"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_LogStreamingOption_StreamOn;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_BuildOptions.machineType

/**
 *  Highcpu e2 machine with 32 CPUs.
 *
 *  Value: "E2_HIGHCPU_32"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_MachineType_E2Highcpu32;
/**
 *  Highcpu e2 machine with 8 CPUs.
 *
 *  Value: "E2_HIGHCPU_8"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_MachineType_E2Highcpu8;
/**
 *  Highcpu machine with 32 CPUs.
 *
 *  Value: "N1_HIGHCPU_32"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_MachineType_N1Highcpu32;
/**
 *  Highcpu machine with 8 CPUs.
 *
 *  Value: "N1_HIGHCPU_8"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_MachineType_N1Highcpu8;
/**
 *  Standard machine type.
 *
 *  Value: "UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_MachineType_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_BuildOptions.requestedVerifyOption

/**
 *  Not a verifiable build (the default).
 *
 *  Value: "NOT_VERIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_RequestedVerifyOption_NotVerified;
/**
 *  Build must be verified.
 *
 *  Value: "VERIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_RequestedVerifyOption_Verified;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_BuildOptions.sourceProvenanceHash

/**
 *  Use a md5 hash.
 *
 *  Value: "MD5"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_SourceProvenanceHash_Md5;
/**
 *  No hash requested.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_SourceProvenanceHash_None;
/**
 *  Use a sha256 hash.
 *
 *  Value: "SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_SourceProvenanceHash_Sha256;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_BuildOptions.substitutionOption

/**
 *  Do not fail the build if error in substitutions checks.
 *
 *  Value: "ALLOW_LOOSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_SubstitutionOption_AllowLoose;
/**
 *  Fails the build if error in substitutions checks, like missing a
 *  substitution in the template or in the map.
 *
 *  Value: "MUST_MATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildOptions_SubstitutionOption_MustMatch;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_BuildStep.status

/**
 *  Build or step was canceled by a user.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildStep_Status_Cancelled;
/**
 *  Build was enqueued for longer than the value of `queue_ttl`.
 *
 *  Value: "EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildStep_Status_Expired;
/**
 *  Build or step failed to complete successfully.
 *
 *  Value: "FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildStep_Status_Failure;
/**
 *  Build or step failed due to an internal cause.
 *
 *  Value: "INTERNAL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildStep_Status_InternalError;
/**
 *  Build has been created and is pending execution and queuing. It has not been
 *  queued.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildStep_Status_Pending;
/**
 *  Build or step is queued; work has not yet begun.
 *
 *  Value: "QUEUED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildStep_Status_Queued;
/**
 *  Status of the build is unknown.
 *
 *  Value: "STATUS_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildStep_Status_StatusUnknown;
/**
 *  Build or step finished successfully.
 *
 *  Value: "SUCCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildStep_Status_Success;
/**
 *  Build or step took longer than was allowed.
 *
 *  Value: "TIMEOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildStep_Status_Timeout;
/**
 *  Build or step is being executed.
 *
 *  Value: "WORKING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildStep_Status_Working;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_BuildTrigger.eventType

/**
 *  EVENT_TYPE_UNSPECIFIED event_types are ignored.
 *
 *  Value: "EVENT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildTrigger_EventType_EventTypeUnspecified;
/**
 *  MANUAL corresponds to manual-only invoked triggers.
 *
 *  Value: "MANUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildTrigger_EventType_Manual;
/**
 *  PUBSUB corresponds to pubsub triggers.
 *
 *  Value: "PUBSUB"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildTrigger_EventType_Pubsub;
/**
 *  REPO corresponds to the supported VCS integrations.
 *
 *  Value: "REPO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildTrigger_EventType_Repo;
/**
 *  WEBHOOK corresponds to webhook triggers.
 *
 *  Value: "WEBHOOK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildTrigger_EventType_Webhook;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_BuildTrigger.includeBuildLogs

/**
 *  Build logs will not be shown on GitHub.
 *
 *  Value: "INCLUDE_BUILD_LOGS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildTrigger_IncludeBuildLogs_IncludeBuildLogsUnspecified;
/**
 *  Build logs will be shown on GitHub.
 *
 *  Value: "INCLUDE_BUILD_LOGS_WITH_STATUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_BuildTrigger_IncludeBuildLogs_IncludeBuildLogsWithStatus;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_FailureInfo.type

/**
 *  Type unspecified
 *
 *  Value: "FAILURE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_FailureInfo_Type_FailureTypeUnspecified;
/**
 *  The source fetching has failed.
 *
 *  Value: "FETCH_SOURCE_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_FailureInfo_Type_FetchSourceFailed;
/**
 *  Backend logging failures. Should retry.
 *
 *  Value: "LOGGING_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_FailureInfo_Type_LoggingFailure;
/**
 *  Unable to push the image to the repository.
 *
 *  Value: "PUSH_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_FailureInfo_Type_PushFailed;
/**
 *  Final image not found.
 *
 *  Value: "PUSH_IMAGE_NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_FailureInfo_Type_PushImageNotFound;
/**
 *  Unauthorized push of the final image.
 *
 *  Value: "PUSH_NOT_AUTHORIZED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_FailureInfo_Type_PushNotAuthorized;
/**
 *  A build step has failed.
 *
 *  Value: "USER_BUILD_STEP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_FailureInfo_Type_UserBuildStep;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_GitFileSource.repoType

/**
 *  A Bitbucket Server-hosted repo.
 *
 *  Value: "BITBUCKET_SERVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_GitFileSource_RepoType_BitbucketServer;
/**
 *  A Google Cloud Source Repositories-hosted repo.
 *
 *  Value: "CLOUD_SOURCE_REPOSITORIES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_GitFileSource_RepoType_CloudSourceRepositories;
/**
 *  A GitHub-hosted repo not necessarily on "github.com" (i.e. GitHub
 *  Enterprise).
 *
 *  Value: "GITHUB"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_GitFileSource_RepoType_Github;
/**
 *  The default, unknown repo type.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_GitFileSource_RepoType_Unknown;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_GitRepoSource.repoType

/**
 *  A Bitbucket Server-hosted repo.
 *
 *  Value: "BITBUCKET_SERVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_GitRepoSource_RepoType_BitbucketServer;
/**
 *  A Google Cloud Source Repositories-hosted repo.
 *
 *  Value: "CLOUD_SOURCE_REPOSITORIES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_GitRepoSource_RepoType_CloudSourceRepositories;
/**
 *  A GitHub-hosted repo not necessarily on "github.com" (i.e. GitHub
 *  Enterprise).
 *
 *  Value: "GITHUB"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_GitRepoSource_RepoType_Github;
/**
 *  The default, unknown repo type.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_GitRepoSource_RepoType_Unknown;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_Hash.type

/**
 *  Use a md5 hash.
 *
 *  Value: "MD5"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Hash_Type_Md5;
/**
 *  No hash requested.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Hash_Type_None;
/**
 *  Use a sha256 hash.
 *
 *  Value: "SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Hash_Type_Sha256;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_NetworkConfig.egressOption

/**
 *  If set, defaults to PUBLIC_EGRESS.
 *
 *  Value: "EGRESS_OPTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_NetworkConfig_EgressOption_EgressOptionUnspecified;
/**
 *  If set, workers are created without any public address, which prevents
 *  network egress to public IPs unless a network proxy is configured.
 *
 *  Value: "NO_PUBLIC_EGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_NetworkConfig_EgressOption_NoPublicEgress;
/**
 *  If set, workers are created with a public address which allows for public
 *  internet egress.
 *
 *  Value: "PUBLIC_EGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_NetworkConfig_EgressOption_PublicEgress;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_PubsubConfig.state

/**
 *  The Pub/Sub subscription is properly configured.
 *
 *  Value: "OK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_PubsubConfig_State_Ok;
/**
 *  The subscription configuration has not been checked.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_PubsubConfig_State_StateUnspecified;
/**
 *  The subscription has been deleted.
 *
 *  Value: "SUBSCRIPTION_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_PubsubConfig_State_SubscriptionDeleted;
/**
 *  Some of the subscription's field are misconfigured.
 *
 *  Value: "SUBSCRIPTION_MISCONFIGURED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_PubsubConfig_State_SubscriptionMisconfigured;
/**
 *  The topic has been deleted.
 *
 *  Value: "TOPIC_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_PubsubConfig_State_TopicDeleted;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_PullRequestFilter.commentControl

/**
 *  Do not require comments on Pull Requests before builds are triggered.
 *
 *  Value: "COMMENTS_DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_PullRequestFilter_CommentControl_CommentsDisabled;
/**
 *  Enforce that repository owners or collaborators must comment on Pull
 *  Requests before builds are triggered.
 *
 *  Value: "COMMENTS_ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_PullRequestFilter_CommentControl_CommentsEnabled;
/**
 *  Enforce that repository owners or collaborators must comment on external
 *  contributors' Pull Requests before builds are triggered.
 *
 *  Value: "COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_PullRequestFilter_CommentControl_CommentsEnabledForExternalContributorsOnly;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_RepositoryEventConfig.repositoryType

/**
 *  The SCM repo is GITHUB.
 *
 *  Value: "GITHUB"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_RepositoryEventConfig_RepositoryType_Github;
/**
 *  The SCM repo is GITHUB Enterprise.
 *
 *  Value: "GITHUB_ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_RepositoryEventConfig_RepositoryType_GithubEnterprise;
/**
 *  The SCM repo is GITLAB Enterprise.
 *
 *  Value: "GITLAB_ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_RepositoryEventConfig_RepositoryType_GitlabEnterprise;
/**
 *  If unspecified, RepositoryType defaults to GITHUB.
 *
 *  Value: "REPOSITORY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_RepositoryEventConfig_RepositoryType_RepositoryTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_Warning.priority

/**
 *  e.g. alerts that a feature used in the build is pending removal
 *
 *  Value: "ALERT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Warning_Priority_Alert;
/**
 *  e.g. deprecation warnings and alternative feature highlights.
 *
 *  Value: "INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Warning_Priority_Info;
/**
 *  Should not be used.
 *
 *  Value: "PRIORITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Warning_Priority_PriorityUnspecified;
/**
 *  e.g. automated detection of possible issues with the build.
 *
 *  Value: "WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_Warning_Priority_Warning;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_WebhookConfig.state

/**
 *  The auth configuration is properly setup.
 *
 *  Value: "OK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_WebhookConfig_State_Ok;
/**
 *  The secret provided in auth_method has been deleted.
 *
 *  Value: "SECRET_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_WebhookConfig_State_SecretDeleted;
/**
 *  The webhook auth configuration not been checked.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_WebhookConfig_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_WorkerPool.state

/**
 *  `WorkerPool` is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_WorkerPool_State_Creating;
/**
 *  `WorkerPool` is deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_WorkerPool_State_Deleted;
/**
 *  `WorkerPool` is being deleted: cancelling builds and draining workers.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_WorkerPool_State_Deleting;
/**
 *  `WorkerPool` is running.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_WorkerPool_State_Running;
/**
 *  State of the `WorkerPool` is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_WorkerPool_State_StateUnspecified;
/**
 *  `WorkerPool` is being updated; new builds cannot be run.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_WorkerPool_State_Updating;

/**
 *  ApprovalConfig describes configuration for manual approval of a build.
 */
@interface GTLRCloudBuild_ApprovalConfig : GTLRObject

/**
 *  Whether or not approval is needed. If this is set on a build, it will become
 *  pending when created, and will need to be explicitly approved to start.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *approvalRequired;

@end


/**
 *  ApprovalResult describes the decision and associated metadata of a manual
 *  approval of a build.
 */
@interface GTLRCloudBuild_ApprovalResult : GTLRObject

/** Output only. The time when the approval decision was made. */
@property(nonatomic, strong, nullable) GTLRDateTime *approvalTime;

/**
 *  Output only. Email of the user that called the ApproveBuild API to approve
 *  or reject a build at the time that the API was called.
 */
@property(nonatomic, copy, nullable) NSString *approverAccount;

/** Optional. An optional comment for this manual approval result. */
@property(nonatomic, copy, nullable) NSString *comment;

/**
 *  Required. The decision of this manual approval.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_ApprovalResult_Decision_Approved Build is
 *        approved. (Value: "APPROVED")
 *    @arg @c kGTLRCloudBuild_ApprovalResult_Decision_DecisionUnspecified
 *        Default enum type. This should not be used. (Value:
 *        "DECISION_UNSPECIFIED")
 *    @arg @c kGTLRCloudBuild_ApprovalResult_Decision_Rejected Build is
 *        rejected. (Value: "REJECTED")
 */
@property(nonatomic, copy, nullable) NSString *decision;

/**
 *  Optional. An optional URL tied to this manual approval result. This field is
 *  essentially the same as comment, except that it will be rendered by the UI
 *  differently. An example use case is a link to an external job that approved
 *  this Build.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Request to approve or reject a pending build.
 */
@interface GTLRCloudBuild_ApproveBuildRequest : GTLRObject

/** Approval decision and metadata. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_ApprovalResult *approvalResult;

@end


/**
 *  Files in the workspace to upload to Cloud Storage upon successful completion
 *  of all build steps.
 */
@interface GTLRCloudBuild_ArtifactObjects : GTLRObject

/**
 *  Cloud Storage bucket and optional object path, in the form
 *  "gs://bucket/path/to/somewhere/". (see [Bucket Name
 *  Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 *  Files in the workspace matching any path pattern will be uploaded to Cloud
 *  Storage with this location as a prefix.
 */
@property(nonatomic, copy, nullable) NSString *location;

/** Path globs used to match files in the build's workspace. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *paths;

/**
 *  Output only. Stores timing information for pushing all artifact objects.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_TimeSpan *timing;

@end


/**
 *  An artifact that was uploaded during a build. This is a single record in the
 *  artifact manifest JSON file.
 */
@interface GTLRCloudBuild_ArtifactResult : GTLRObject

/** The file hash of the artifact. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_FileHashes *> *fileHash;

/**
 *  The path of an artifact in a Google Cloud Storage bucket, with the
 *  generation number. For example,
 *  `gs://mybucket/path/to/output.jar#generation`.
 */
@property(nonatomic, copy, nullable) NSString *location;

@end


/**
 *  Artifacts produced by a build that should be uploaded upon successful
 *  completion of all build steps.
 */
@interface GTLRCloudBuild_Artifacts : GTLRObject

/**
 *  A list of images to be pushed upon the successful completion of all build
 *  steps. The images will be pushed using the builder service account's
 *  credentials. The digests of the pushed images will be stored in the Build
 *  resource's results field. If any of the images fail to be pushed, the build
 *  is marked FAILURE.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *images;

/**
 *  A list of Maven artifacts to be uploaded to Artifact Registry upon
 *  successful completion of all build steps. Artifacts in the workspace
 *  matching specified paths globs will be uploaded to the specified Artifact
 *  Registry repository using the builder service account's credentials. If any
 *  artifacts fail to be pushed, the build is marked FAILURE.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_MavenArtifact *> *mavenArtifacts;

/**
 *  A list of objects to be uploaded to Cloud Storage upon successful completion
 *  of all build steps. Files in the workspace matching specified paths globs
 *  will be uploaded to the specified Cloud Storage location using the builder
 *  service account's credentials. The location and generation of the uploaded
 *  objects will be stored in the Build resource's results field. If any objects
 *  fail to be pushed, the build is marked FAILURE.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_ArtifactObjects *objects;

/**
 *  A list of Python packages to be uploaded to Artifact Registry upon
 *  successful completion of all build steps. The build service account
 *  credentials will be used to perform the upload. If any objects fail to be
 *  pushed, the build is marked FAILURE.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_PythonPackage *> *pythonPackages;

@end


/**
 *  RPC request object accepted by
 *  BatchCreateBitbucketServerConnectedRepositories RPC method.
 */
@interface GTLRCloudBuild_BatchCreateBitbucketServerConnectedRepositoriesRequest : GTLRObject

/** Required. Requests to connect Bitbucket Server repositories. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_CreateBitbucketServerConnectedRepositoryRequest *> *requests;

@end


/**
 *  Response of BatchCreateBitbucketServerConnectedRepositories RPC method
 *  including all successfully connected Bitbucket Server repositories.
 */
@interface GTLRCloudBuild_BatchCreateBitbucketServerConnectedRepositoriesResponse : GTLRObject

/** The connected Bitbucket Server repositories. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_BitbucketServerConnectedRepository *> *bitbucketServerConnectedRepositories;

@end


/**
 *  Metadata for `BatchCreateBitbucketServerConnectedRepositories` operation.
 */
@interface GTLRCloudBuild_BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata : GTLRObject

/** Time the operation was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/**
 *  The name of the `BitbucketServerConfig` that added connected repositories.
 *  Format:
 *  `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`
 */
@property(nonatomic, copy, nullable) NSString *config;

/** Time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

@end


/**
 *  RPC request object accepted by BatchCreateGitLabConnectedRepositories RPC
 *  method.
 */
@interface GTLRCloudBuild_BatchCreateGitLabConnectedRepositoriesRequest : GTLRObject

/** Required. Requests to connect GitLab repositories. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_CreateGitLabConnectedRepositoryRequest *> *requests;

@end


/**
 *  Response of BatchCreateGitLabConnectedRepositories RPC method.
 */
@interface GTLRCloudBuild_BatchCreateGitLabConnectedRepositoriesResponse : GTLRObject

/** The GitLab connected repository requests' responses. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_GitLabConnectedRepository *> *gitlabConnectedRepositories;

@end


/**
 *  Metadata for `BatchCreateGitLabConnectedRepositories` operation.
 */
@interface GTLRCloudBuild_BatchCreateGitLabConnectedRepositoriesResponseMetadata : GTLRObject

/** Time the operation was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/**
 *  The name of the `GitLabConfig` that added connected repositories. Format:
 *  `projects/{project}/locations/{location}/gitLabConfigs/{config}`
 */
@property(nonatomic, copy, nullable) NSString *config;

/** Time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

@end


/**
 *  BitbucketServerConfig represents the configuration for a Bitbucket Server.
 */
@interface GTLRCloudBuild_BitbucketServerConfig : GTLRObject

/**
 *  Required. Immutable. API Key that will be attached to webhook. Once this
 *  field has been set, it cannot be changed. If you need to change it, please
 *  create another BitbucketServerConfig.
 */
@property(nonatomic, copy, nullable) NSString *apiKey;

/** Output only. Connected Bitbucket Server repositories for this config. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_BitbucketServerRepositoryId *> *connectedRepositories;

/** Time when the config was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Required. Immutable. The URI of the Bitbucket Server host. Once this field
 *  has been set, it cannot be changed. If you need to change it, please create
 *  another BitbucketServerConfig.
 */
@property(nonatomic, copy, nullable) NSString *hostUri;

/** The resource name for the config. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The network to be used when reaching out to the Bitbucket Server
 *  instance. The VPC network must be enabled for private service connection.
 *  This should be set if the Bitbucket Server instance is hosted on-premises
 *  and not reachable by public internet. If this field is left empty, no
 *  network peering will occur and calls to the Bitbucket Server instance will
 *  be made over the public internet. Must be in the format
 *  `projects/{project}/global/networks/{network}`, where {project} is a project
 *  number or id and {network} is the name of a VPC network in the project.
 */
@property(nonatomic, copy, nullable) NSString *peeredNetwork;

/** Required. Secret Manager secrets needed by the config. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_BitbucketServerSecrets *secrets;

/**
 *  Optional. SSL certificate to use for requests to Bitbucket Server. The
 *  format should be PEM format but the extension can be one of .pem, .cer, or
 *  .crt.
 */
@property(nonatomic, copy, nullable) NSString *sslCa;

/** Username of the account Cloud Build will use on Bitbucket Server. */
@property(nonatomic, copy, nullable) NSString *username;

/**
 *  Output only. UUID included in webhook requests. The UUID is used to look up
 *  the corresponding config.
 */
@property(nonatomic, copy, nullable) NSString *webhookKey;

@end


/**
 *  / BitbucketServerConnectedRepository represents a connected Bitbucket Server
 *  / repository.
 */
@interface GTLRCloudBuild_BitbucketServerConnectedRepository : GTLRObject

/**
 *  The name of the `BitbucketServerConfig` that added connected repository.
 *  Format:
 *  `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** The Bitbucket Server repositories to connect. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_BitbucketServerRepositoryId *repo;

/** Output only. The status of the repo connection request. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Status *status;

@end


/**
 *  BitbucketServerRepository represents a repository hosted on a Bitbucket
 *  Server.
 */
@interface GTLRCloudBuild_BitbucketServerRepository : GTLRObject

/** Link to the browse repo page on the Bitbucket Server instance. */
@property(nonatomic, copy, nullable) NSString *browseUri;

/**
 *  Description of the repository.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Display name of the repository. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** The resource name of the repository. */
@property(nonatomic, copy, nullable) NSString *name;

/** Identifier for a repository hosted on a Bitbucket Server. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_BitbucketServerRepositoryId *repoId;

@end


/**
 *  BitbucketServerRepositoryId identifies a specific repository hosted on a
 *  Bitbucket Server.
 */
@interface GTLRCloudBuild_BitbucketServerRepositoryId : GTLRObject

/** Required. Identifier for the project storing the repository. */
@property(nonatomic, copy, nullable) NSString *projectKey;

/** Required. Identifier for the repository. */
@property(nonatomic, copy, nullable) NSString *repoSlug;

/**
 *  Output only. The ID of the webhook that was created for receiving events
 *  from this repo. We only create and manage a single webhook for each repo.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *webhookId;

@end


/**
 *  BitbucketServerSecrets represents the secrets in Secret Manager for a
 *  Bitbucket Server.
 */
@interface GTLRCloudBuild_BitbucketServerSecrets : GTLRObject

/**
 *  Required. The resource name for the admin access token's secret version.
 */
@property(nonatomic, copy, nullable) NSString *adminAccessTokenVersionName;

/** Required. The resource name for the read access token's secret version. */
@property(nonatomic, copy, nullable) NSString *readAccessTokenVersionName;

/**
 *  Required. Immutable. The resource name for the webhook secret's secret
 *  version. Once this field has been set, it cannot be changed. If you need to
 *  change it, please create another BitbucketServerConfig.
 */
@property(nonatomic, copy, nullable) NSString *webhookSecretVersionName;

@end


/**
 *  BitbucketServerTriggerConfig describes the configuration of a trigger that
 *  creates a build whenever a Bitbucket Server event is received.
 */
@interface GTLRCloudBuild_BitbucketServerTriggerConfig : GTLRObject

/**
 *  Output only. The BitbucketServerConfig specified in the
 *  bitbucket_server_config_resource field.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_BitbucketServerConfig *bitbucketServerConfig;

/**
 *  Required. The Bitbucket server config resource that this trigger config maps
 *  to.
 */
@property(nonatomic, copy, nullable) NSString *bitbucketServerConfigResource;

/**
 *  Required. Key of the project that the repo is in. For example: The key for
 *  https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
 */
@property(nonatomic, copy, nullable) NSString *projectKey;

/** Filter to match changes in pull requests. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_PullRequestFilter *pullRequest;

/** Filter to match changes in refs like branches, tags. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_PushFilter *push;

/**
 *  Required. Slug of the repository. A repository slug is a URL-friendly
 *  version of a repository name, automatically generated by Bitbucket for use
 *  in the URL. For example, if the repository name is 'test repo', in the URL
 *  it would become 'test-repo' as in
 *  https://mybitbucket.server/projects/TEST/repos/test-repo.
 */
@property(nonatomic, copy, nullable) NSString *repoSlug;

@end


/**
 *  A build resource in the Cloud Build API. At a high level, a `Build`
 *  describes where to find source code, how to build it (for example, the
 *  builder image to run on the source), and where to store the built artifacts.
 *  Fields can include the following variables, which will be expanded when the
 *  build is created: - $PROJECT_ID: the project ID of the build. -
 *  $PROJECT_NUMBER: the project number of the build. - $LOCATION: the
 *  location/region of the build. - $BUILD_ID: the autogenerated ID of the
 *  build. - $REPO_NAME: the source repository name specified by RepoSource. -
 *  $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag
 *  name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA
 *  specified by RepoSource or resolved from the specified branch or tag. -
 *  $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
 */
@interface GTLRCloudBuild_Build : GTLRObject

/**
 *  Output only. Describes this build's approval configuration, status, and
 *  result.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_BuildApproval *approval;

/**
 *  Artifacts produced by the build that should be uploaded upon successful
 *  completion of all build steps.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Artifacts *artifacts;

/** Secrets and secret environment variables. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Secrets *availableSecrets;

/**
 *  Output only. The ID of the `BuildTrigger` that triggered this build, if it
 *  was triggered automatically.
 */
@property(nonatomic, copy, nullable) NSString *buildTriggerId;

/**
 *  Output only. Time at which the request to create the build was received.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Contains information about the build when status=FAILURE. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_FailureInfo *failureInfo;

/**
 *  Output only. Time at which execution of the build was finished. The
 *  difference between finish_time and start_time is the duration of the build's
 *  execution.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *finishTime;

/**
 *  Output only. Unique identifier of the build.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  A list of images to be pushed upon the successful completion of all build
 *  steps. The images are pushed using the builder service account's
 *  credentials. The digests of the pushed images will be stored in the `Build`
 *  resource's results field. If any of the images fail to be pushed, the build
 *  status is marked `FAILURE`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *images;

/**
 *  Google Cloud Storage bucket where logs should be written (see [Bucket Name
 *  Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 *  Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
 */
@property(nonatomic, copy, nullable) NSString *logsBucket;

/** Output only. URL to logs for this build in Google Cloud Console. */
@property(nonatomic, copy, nullable) NSString *logUrl;

/**
 *  Output only. The 'Build' name with format:
 *  `projects/{project}/locations/{location}/builds/{build}`, where {build} is a
 *  unique identifier generated by the service.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Special options for this build. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_BuildOptions *options;

/** Output only. ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  TTL in queue for this build. If provided and the build is enqueued longer
 *  than this value, the build will expire and the build status will be
 *  `EXPIRED`. The TTL starts ticking from create_time.
 */
@property(nonatomic, strong, nullable) GTLRDuration *queueTtl;

/** Output only. Results of the build. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Results *results;

/**
 *  Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager
 *  is the recommended technique for managing sensitive data with Cloud Build.
 *  Use `available_secrets` to configure builds to access secrets from Secret
 *  Manager. For instructions, see:
 *  https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Secret *> *secrets;

/**
 *  IAM service account whose credentials will be used at build runtime. Must be
 *  of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can
 *  be email address or uniqueId of the service account.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/** The location of the source files to build. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Source *source;

/** Output only. A permanent fixed identifier for source. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_SourceProvenance *sourceProvenance;

/** Output only. Time at which execution of the build was started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. Status of the build.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_Build_Status_Cancelled Build or step was canceled
 *        by a user. (Value: "CANCELLED")
 *    @arg @c kGTLRCloudBuild_Build_Status_Expired Build was enqueued for longer
 *        than the value of `queue_ttl`. (Value: "EXPIRED")
 *    @arg @c kGTLRCloudBuild_Build_Status_Failure Build or step failed to
 *        complete successfully. (Value: "FAILURE")
 *    @arg @c kGTLRCloudBuild_Build_Status_InternalError Build or step failed
 *        due to an internal cause. (Value: "INTERNAL_ERROR")
 *    @arg @c kGTLRCloudBuild_Build_Status_Pending Build has been created and is
 *        pending execution and queuing. It has not been queued. (Value:
 *        "PENDING")
 *    @arg @c kGTLRCloudBuild_Build_Status_Queued Build or step is queued; work
 *        has not yet begun. (Value: "QUEUED")
 *    @arg @c kGTLRCloudBuild_Build_Status_StatusUnknown Status of the build is
 *        unknown. (Value: "STATUS_UNKNOWN")
 *    @arg @c kGTLRCloudBuild_Build_Status_Success Build or step finished
 *        successfully. (Value: "SUCCESS")
 *    @arg @c kGTLRCloudBuild_Build_Status_Timeout Build or step took longer
 *        than was allowed. (Value: "TIMEOUT")
 *    @arg @c kGTLRCloudBuild_Build_Status_Working Build or step is being
 *        executed. (Value: "WORKING")
 */
@property(nonatomic, copy, nullable) NSString *status;

/** Output only. Customer-readable message about the current status. */
@property(nonatomic, copy, nullable) NSString *statusDetail;

/** Required. The operations to be performed on the workspace. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_BuildStep *> *steps;

/** Substitutions data for `Build` resource. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Build_Substitutions *substitutions;

/** Tags for annotation of a `Build`. These are not docker tags. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

/**
 *  Amount of time that this build should be allowed to run, to second
 *  granularity. If this amount of time elapses, work on the build will cease
 *  and the build status will be `TIMEOUT`. `timeout` starts ticking from
 *  `startTime`. Default time is ten minutes.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/**
 *  Output only. Stores timing information for phases of the build. Valid keys
 *  are: * BUILD: time to execute all build steps. * PUSH: time to push all
 *  artifacts including docker images and non docker artifacts. * FETCHSOURCE:
 *  time to fetch source. * SETUPBUILD: time to set up build. If the build does
 *  not specify source or images, these keys will not be included.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Build_Timing *timing;

/**
 *  Output only. Non-fatal problems encountered during the execution of the
 *  build.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Warning *> *warnings;

@end


/**
 *  Substitutions data for `Build` resource.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudBuild_Build_Substitutions : GTLRObject
@end


/**
 *  Output only. Stores timing information for phases of the build. Valid keys
 *  are: * BUILD: time to execute all build steps. * PUSH: time to push all
 *  artifacts including docker images and non docker artifacts. * FETCHSOURCE:
 *  time to fetch source. * SETUPBUILD: time to set up build. If the build does
 *  not specify source or images, these keys will not be included.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudBuild_TimeSpan. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_Build_Timing : GTLRObject
@end


/**
 *  BuildApproval describes a build's approval configuration, state, and result.
 */
@interface GTLRCloudBuild_BuildApproval : GTLRObject

/** Output only. Configuration for manual approval of this build. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_ApprovalConfig *config;

/** Output only. Result of manual approval for this Build. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_ApprovalResult *result;

/**
 *  Output only. The state of this build's approval.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_BuildApproval_State_Approved Build approval has
 *        been approved. (Value: "APPROVED")
 *    @arg @c kGTLRCloudBuild_BuildApproval_State_Cancelled Build was cancelled
 *        while it was still pending approval. (Value: "CANCELLED")
 *    @arg @c kGTLRCloudBuild_BuildApproval_State_Pending Build approval is
 *        pending. (Value: "PENDING")
 *    @arg @c kGTLRCloudBuild_BuildApproval_State_Rejected Build approval has
 *        been rejected. (Value: "REJECTED")
 *    @arg @c kGTLRCloudBuild_BuildApproval_State_StateUnspecified Default enum
 *        type. This should not be used. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Metadata for build operations.
 */
@interface GTLRCloudBuild_BuildOperationMetadata : GTLRObject

/** The build that the operation is tracking. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Build *build;

@end


/**
 *  Optional arguments to enable specific features of builds.
 */
@interface GTLRCloudBuild_BuildOptions : GTLRObject

/**
 *  Requested disk size for the VM that runs the build. Note that this is *NOT*
 *  "disk free"; some of the space will be used by the operating system and
 *  build utilities. Also note that this is the minimum disk size that will be
 *  allocated for the build -- the build may run with a larger disk than
 *  requested. At present, the maximum disk size is 1000GB; builds that request
 *  more than the maximum are rejected with an error.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *diskSizeGb;

/**
 *  Option to specify whether or not to apply bash style string operations to
 *  the substitutions. NOTE: this is always enabled for triggered builds and
 *  cannot be overridden in the build configuration file.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dynamicSubstitutions;

/**
 *  A list of global environment variable definitions that will exist for all
 *  build steps in this build. If a variable is defined in both globally and in
 *  a build step, the variable will use the build step value. The elements are
 *  of the form "KEY=VALUE" for the environment variable "KEY" being given the
 *  value "VALUE".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *env;

/**
 *  Option to specify the logging mode, which determines if and where build logs
 *  are stored.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_BuildOptions_Logging_CloudLoggingOnly Build logs
 *        are stored in Cloud Logging. Selecting this option will not allow
 *        [logs
 *        streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).
 *        (Value: "CLOUD_LOGGING_ONLY")
 *    @arg @c kGTLRCloudBuild_BuildOptions_Logging_GcsOnly Build logs are stored
 *        in Cloud Storage. (Value: "GCS_ONLY")
 *    @arg @c kGTLRCloudBuild_BuildOptions_Logging_Legacy Build logs are stored
 *        in Cloud Logging and Cloud Storage. (Value: "LEGACY")
 *    @arg @c kGTLRCloudBuild_BuildOptions_Logging_LoggingUnspecified The
 *        service determines the logging mode. The default is `LEGACY`. Do not
 *        rely on the default logging behavior as it may change in the future.
 *        (Value: "LOGGING_UNSPECIFIED")
 *    @arg @c kGTLRCloudBuild_BuildOptions_Logging_None Turn off all logging. No
 *        build logs will be captured. (Value: "NONE")
 *    @arg @c kGTLRCloudBuild_BuildOptions_Logging_StackdriverOnly This option
 *        is the same as CLOUD_LOGGING_ONLY. (Value: "STACKDRIVER_ONLY")
 */
@property(nonatomic, copy, nullable) NSString *logging;

/**
 *  Option to define build log streaming behavior to Google Cloud Storage.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_BuildOptions_LogStreamingOption_StreamDefault
 *        Service may automatically determine build log streaming behavior.
 *        (Value: "STREAM_DEFAULT")
 *    @arg @c kGTLRCloudBuild_BuildOptions_LogStreamingOption_StreamOff Build
 *        logs should not be streamed to Google Cloud Storage; they will be
 *        written when the build is completed. (Value: "STREAM_OFF")
 *    @arg @c kGTLRCloudBuild_BuildOptions_LogStreamingOption_StreamOn Build
 *        logs should be streamed to Google Cloud Storage. (Value: "STREAM_ON")
 */
@property(nonatomic, copy, nullable) NSString *logStreamingOption;

/**
 *  Compute Engine machine type on which to run the build.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_BuildOptions_MachineType_E2Highcpu32 Highcpu e2
 *        machine with 32 CPUs. (Value: "E2_HIGHCPU_32")
 *    @arg @c kGTLRCloudBuild_BuildOptions_MachineType_E2Highcpu8 Highcpu e2
 *        machine with 8 CPUs. (Value: "E2_HIGHCPU_8")
 *    @arg @c kGTLRCloudBuild_BuildOptions_MachineType_N1Highcpu32 Highcpu
 *        machine with 32 CPUs. (Value: "N1_HIGHCPU_32")
 *    @arg @c kGTLRCloudBuild_BuildOptions_MachineType_N1Highcpu8 Highcpu
 *        machine with 8 CPUs. (Value: "N1_HIGHCPU_8")
 *    @arg @c kGTLRCloudBuild_BuildOptions_MachineType_Unspecified Standard
 *        machine type. (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *machineType;

/**
 *  Optional. Specification for execution on a `WorkerPool`. See [running builds
 *  in a private
 *  pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool)
 *  for more information.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_PoolOption *pool;

/**
 *  Requested verifiability options.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_BuildOptions_RequestedVerifyOption_NotVerified Not
 *        a verifiable build (the default). (Value: "NOT_VERIFIED")
 *    @arg @c kGTLRCloudBuild_BuildOptions_RequestedVerifyOption_Verified Build
 *        must be verified. (Value: "VERIFIED")
 */
@property(nonatomic, copy, nullable) NSString *requestedVerifyOption;

/**
 *  A list of global environment variables, which are encrypted using a Cloud
 *  Key Management Service crypto key. These values must be specified in the
 *  build's `Secret`. These variables will be available to all build steps in
 *  this build.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *secretEnv;

/** Requested hash for SourceProvenance. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourceProvenanceHash;

/**
 *  Option to specify behavior when there is an error in the substitution
 *  checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and
 *  cannot be overridden in the build configuration file.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_BuildOptions_SubstitutionOption_AllowLoose Do not
 *        fail the build if error in substitutions checks. (Value:
 *        "ALLOW_LOOSE")
 *    @arg @c kGTLRCloudBuild_BuildOptions_SubstitutionOption_MustMatch Fails
 *        the build if error in substitutions checks, like missing a
 *        substitution in the template or in the map. (Value: "MUST_MATCH")
 */
@property(nonatomic, copy, nullable) NSString *substitutionOption;

/**
 *  Global list of volumes to mount for ALL build steps Each volume is created
 *  as an empty volume prior to starting the build process. Upon completion of
 *  the build, volumes and their contents are discarded. Global volume names and
 *  paths cannot conflict with the volumes defined a build step. Using a global
 *  volume in a build with only one step is not valid as it is indicative of a
 *  build request with an incorrect configuration.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Volume *> *volumes;

/** This field deprecated; please use `pool.name` instead. */
@property(nonatomic, copy, nullable) NSString *workerPool;

@end


/**
 *  A step in the build pipeline.
 */
@interface GTLRCloudBuild_BuildStep : GTLRObject

/**
 *  Allow this build step to fail without failing the entire build if and only
 *  if the exit code is one of the specified codes. If allow_failure is also
 *  specified, this field will take precedence.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *allowExitCodes;

/**
 *  Allow this build step to fail without failing the entire build. If false,
 *  the entire build will fail if this step fails. Otherwise, the build will
 *  succeed, but this step will still have a failure status. Error information
 *  will be reported in the failure_detail field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowFailure;

/**
 *  A list of arguments that will be presented to the step when it is started.
 *  If the image used to run the step's container has an entrypoint, the `args`
 *  are used as arguments to that entrypoint. If the image does not define an
 *  entrypoint, the first element in args is used as the entrypoint, and the
 *  remainder will be used as arguments.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *args;

/**
 *  Working directory to use when running this step's container. If this value
 *  is a relative path, it is relative to the build's working directory. If this
 *  value is absolute, it may be outside the build's working directory, in which
 *  case the contents of the path may not be persisted across build step
 *  executions, unless a `volume` for that path is specified. If the build
 *  specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies
 *  an absolute path, the `RepoSource` `dir` is ignored for the step's
 *  execution.
 */
@property(nonatomic, copy, nullable) NSString *dir;

/**
 *  Entrypoint to be used instead of the build step image's default entrypoint.
 *  If unset, the image's default entrypoint is used.
 */
@property(nonatomic, copy, nullable) NSString *entrypoint;

/**
 *  A list of environment variable definitions to be used when running a step.
 *  The elements are of the form "KEY=VALUE" for the environment variable "KEY"
 *  being given the value "VALUE".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *env;

/**
 *  Output only. Return code from running the step.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exitCode;

/**
 *  Unique identifier for this build step, used in `wait_for` to reference this
 *  build step as a dependency.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Required. The name of the container image that will run this particular
 *  build step. If the image is available in the host's Docker daemon's cache,
 *  it will be run directly. If not, the host will attempt to pull the image
 *  first, using the builder service account's credentials if necessary. The
 *  Docker daemon's cache will already have the latest versions of all of the
 *  officially supported build steps
 *  ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
 *  The Docker daemon will also have cached many of the layers for some popular
 *  images, like "ubuntu", "debian", but they will be refreshed at the time you
 *  attempt to use them. If you built an image in a previous build step, it will
 *  be stored in the host's Docker daemon's cache and is available to use as the
 *  name for a later build step.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Stores timing information for pulling this build step's builder
 *  image only.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_TimeSpan *pullTiming;

/**
 *  A shell script to be executed in the step. When script is provided, the user
 *  cannot specify the entrypoint or args.
 */
@property(nonatomic, copy, nullable) NSString *script;

/**
 *  A list of environment variables which are encrypted using a Cloud Key
 *  Management Service crypto key. These values must be specified in the build's
 *  `Secret`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *secretEnv;

/**
 *  Output only. Status of the build step. At this time, build step status is
 *  only updated on build completion; step status is not updated in real-time as
 *  the build progresses.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_BuildStep_Status_Cancelled Build or step was
 *        canceled by a user. (Value: "CANCELLED")
 *    @arg @c kGTLRCloudBuild_BuildStep_Status_Expired Build was enqueued for
 *        longer than the value of `queue_ttl`. (Value: "EXPIRED")
 *    @arg @c kGTLRCloudBuild_BuildStep_Status_Failure Build or step failed to
 *        complete successfully. (Value: "FAILURE")
 *    @arg @c kGTLRCloudBuild_BuildStep_Status_InternalError Build or step
 *        failed due to an internal cause. (Value: "INTERNAL_ERROR")
 *    @arg @c kGTLRCloudBuild_BuildStep_Status_Pending Build has been created
 *        and is pending execution and queuing. It has not been queued. (Value:
 *        "PENDING")
 *    @arg @c kGTLRCloudBuild_BuildStep_Status_Queued Build or step is queued;
 *        work has not yet begun. (Value: "QUEUED")
 *    @arg @c kGTLRCloudBuild_BuildStep_Status_StatusUnknown Status of the build
 *        is unknown. (Value: "STATUS_UNKNOWN")
 *    @arg @c kGTLRCloudBuild_BuildStep_Status_Success Build or step finished
 *        successfully. (Value: "SUCCESS")
 *    @arg @c kGTLRCloudBuild_BuildStep_Status_Timeout Build or step took longer
 *        than was allowed. (Value: "TIMEOUT")
 *    @arg @c kGTLRCloudBuild_BuildStep_Status_Working Build or step is being
 *        executed. (Value: "WORKING")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Time limit for executing this build step. If not defined, the step has no
 *  time limit and will be allowed to continue to run until either it completes
 *  or the build itself times out.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/** Output only. Stores timing information for executing this build step. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_TimeSpan *timing;

/**
 *  List of volumes to mount into the build step. Each volume is created as an
 *  empty volume prior to execution of the build step. Upon completion of the
 *  build, volumes and their contents are discarded. Using a named volume in
 *  only one step is not valid as it is indicative of a build request with an
 *  incorrect configuration.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Volume *> *volumes;

/**
 *  The ID(s) of the step(s) that this build step depends on. This build step
 *  will not start until all the build steps in `wait_for` have completed
 *  successfully. If `wait_for` is empty, this build step will start when all
 *  previous build steps in the `Build.Steps` list have completed successfully.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *waitFor;

@end


/**
 *  Configuration for an automated build in response to source repository
 *  changes.
 */
@interface GTLRCloudBuild_BuildTrigger : GTLRObject

/**
 *  Configuration for manual approval to start a build invocation of this
 *  BuildTrigger.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_ApprovalConfig *approvalConfig;

/**
 *  Autodetect build configuration. The following precedence is used (case
 *  insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4.
 *  Dockerfile Currently only available for GitHub App Triggers.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autodetect;

/**
 *  BitbucketServerTriggerConfig describes the configuration of a trigger that
 *  creates a build whenever a Bitbucket Server event is received.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_BitbucketServerTriggerConfig *bitbucketServerTriggerConfig;

/** Contents of the build template. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Build *build;

/** Output only. Time when the trigger was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Human-readable description of this trigger.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  If true, the trigger will never automatically execute a build.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

/**
 *  EventType allows the user to explicitly set the type of event to which this
 *  BuildTrigger should respond. This field will be validated against the rest
 *  of the configuration if it is set.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_BuildTrigger_EventType_EventTypeUnspecified
 *        EVENT_TYPE_UNSPECIFIED event_types are ignored. (Value:
 *        "EVENT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudBuild_BuildTrigger_EventType_Manual MANUAL corresponds
 *        to manual-only invoked triggers. (Value: "MANUAL")
 *    @arg @c kGTLRCloudBuild_BuildTrigger_EventType_Pubsub PUBSUB corresponds
 *        to pubsub triggers. (Value: "PUBSUB")
 *    @arg @c kGTLRCloudBuild_BuildTrigger_EventType_Repo REPO corresponds to
 *        the supported VCS integrations. (Value: "REPO")
 *    @arg @c kGTLRCloudBuild_BuildTrigger_EventType_Webhook WEBHOOK corresponds
 *        to webhook triggers. (Value: "WEBHOOK")
 */
@property(nonatomic, copy, nullable) NSString *eventType;

/**
 *  Path, from the source root, to the build configuration file (i.e.
 *  cloudbuild.yaml).
 */
@property(nonatomic, copy, nullable) NSString *filename;

/** A Common Expression Language string. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The file source describing the local or remote Build template. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GitFileSource *gitFileSource;

/**
 *  GitHubEventsConfig describes the configuration of a trigger that creates a
 *  build whenever a GitHub event is received. Mutually exclusive with
 *  `trigger_template`.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GitHubEventsConfig *github;

/**
 *  GitLabEnterpriseEventsConfig describes the configuration of a trigger that
 *  creates a build whenever a GitLab Enterprise event is received.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GitLabEventsConfig *gitlabEnterpriseEventsConfig;

/**
 *  Output only. Unique identifier of the trigger.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  ignored_files and included_files are file glob matches using
 *  https://golang.org/pkg/path/filepath/#Match extended with support for "**".
 *  If ignored_files and changed files are both empty, then they are not used to
 *  determine whether or not to trigger a build. If ignored_files is not empty,
 *  then we ignore any files that match any of the ignored_file globs. If the
 *  change has no files that are outside of the ignored_files globs, then we do
 *  not trigger a build.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ignoredFiles;

/**
 *  If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub
 *  page when build status is final. Setting this field to
 *  INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in
 *  INVALID_ARGUMENT error.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_BuildTrigger_IncludeBuildLogs_IncludeBuildLogsUnspecified
 *        Build logs will not be shown on GitHub. (Value:
 *        "INCLUDE_BUILD_LOGS_UNSPECIFIED")
 *    @arg @c kGTLRCloudBuild_BuildTrigger_IncludeBuildLogs_IncludeBuildLogsWithStatus
 *        Build logs will be shown on GitHub. (Value:
 *        "INCLUDE_BUILD_LOGS_WITH_STATUS")
 */
@property(nonatomic, copy, nullable) NSString *includeBuildLogs;

/**
 *  If any of the files altered in the commit pass the ignored_files filter and
 *  included_files is empty, then as far as this filter is concerned, we should
 *  trigger the build. If any of the files altered in the commit pass the
 *  ignored_files filter and included_files is not empty, then we make sure that
 *  at least one of those files matches a included_files glob. If not, then we
 *  do not trigger a build.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *includedFiles;

/**
 *  User-assigned name of the trigger. Must be unique within the project.
 *  Trigger names must meet the following requirements: + They must contain only
 *  alphanumeric characters and dashes. + They can be 1-64 characters long. +
 *  They must begin and end with an alphanumeric character.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  PubsubConfig describes the configuration of a trigger that creates a build
 *  whenever a Pub/Sub message is published.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_PubsubConfig *pubsubConfig;

/**
 *  The configuration of a trigger that creates a build whenever an event from
 *  Repo API is received.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_RepositoryEventConfig *repositoryEventConfig;

/**
 *  The `Trigger` name with format:
 *  `projects/{project}/locations/{location}/triggers/{trigger}`, where
 *  {trigger} is a unique identifier generated by the service.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  The service account used for all user-controlled operations including
 *  UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no
 *  service account is set, then the standard Cloud Build service account
 *  ([PROJECT_NUM]\@system.gserviceaccount.com) will be used instead. Format:
 *  `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  The repo and ref of the repository from which to build. This field is used
 *  only for those triggers that do not respond to SCM events. Triggers that
 *  respond to such events build source at whatever commit caused the event.
 *  This field is currently only used by Webhook, Pub/Sub, Manual, and Cron
 *  triggers.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GitRepoSource *sourceToBuild;

/**
 *  Substitutions for Build resource. The keys must match the following regular
 *  expression: `^_[A-Z0-9_]+$`.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_BuildTrigger_Substitutions *substitutions;

/** Tags for annotation of a `BuildTrigger` */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

/**
 *  Template describing the types of source changes to trigger a build. Branch
 *  and tag names in trigger templates are interpreted as regular expressions.
 *  Any branch or tag change that matches that regular expression will trigger a
 *  build. Mutually exclusive with `github`.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_RepoSource *triggerTemplate;

/**
 *  WebhookConfig describes the configuration of a trigger that creates a build
 *  whenever a webhook is sent to a trigger's webhook URL.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_WebhookConfig *webhookConfig;

@end


/**
 *  Substitutions for Build resource. The keys must match the following regular
 *  expression: `^_[A-Z0-9_]+$`.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudBuild_BuildTrigger_Substitutions : GTLRObject
@end


/**
 *  An image built by the pipeline.
 */
@interface GTLRCloudBuild_BuiltImage : GTLRObject

/** Docker Registry 2.0 digest. */
@property(nonatomic, copy, nullable) NSString *digest;

/**
 *  Name used to push the container image to Google Container Registry, as
 *  presented to `docker push`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. Stores timing information for pushing the specified image. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_TimeSpan *pushTiming;

@end


/**
 *  Request to cancel an ongoing build.
 */
@interface GTLRCloudBuild_CancelBuildRequest : GTLRObject

/**
 *  Required. ID of the build.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The name of the `Build` to cancel. Format:
 *  `projects/{project}/locations/{location}/builds/{build}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRCloudBuild_CancelOperationRequest : GTLRObject
@end


/**
 *  Metadata for `CreateBitbucketServerConfig` operation.
 */
@interface GTLRCloudBuild_CreateBitbucketServerConfigOperationMetadata : GTLRObject

/**
 *  The resource name of the BitbucketServerConfig to be created. Format:
 *  `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
 */
@property(nonatomic, copy, nullable) NSString *bitbucketServerConfig;

/** Time the operation was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/** Time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

@end


/**
 *  Request to connect a repository from a connected Bitbucket Server host.
 */
@interface GTLRCloudBuild_CreateBitbucketServerConnectedRepositoryRequest : GTLRObject

/** Required. The Bitbucket Server repository to connect. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_BitbucketServerConnectedRepository *bitbucketServerConnectedRepository;

/**
 *  Required. The name of the `BitbucketServerConfig` that added connected
 *  repository. Format:
 *  `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

@end


/**
 *  Metadata for `CreateGithubEnterpriseConfig` operation.
 */
@interface GTLRCloudBuild_CreateGitHubEnterpriseConfigOperationMetadata : GTLRObject

/** Time the operation was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/** Time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The resource name of the GitHubEnterprise to be created. Format:
 *  `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
 */
@property(nonatomic, copy, nullable) NSString *githubEnterpriseConfig;

@end


/**
 *  Metadata for `CreateGitLabConfig` operation.
 */
@interface GTLRCloudBuild_CreateGitLabConfigOperationMetadata : GTLRObject

/** Time the operation was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/** Time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The resource name of the GitLabConfig to be created. Format:
 *  `projects/{project}/locations/{location}/gitlabConfigs/{id}`.
 */
@property(nonatomic, copy, nullable) NSString *gitlabConfig;

@end


/**
 *  Request to connect a repository from a connected GitLab host.
 */
@interface GTLRCloudBuild_CreateGitLabConnectedRepositoryRequest : GTLRObject

/** Required. The GitLab repository to connect. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GitLabConnectedRepository *gitlabConnectedRepository;

/**
 *  Required. The name of the `GitLabConfig` that adds connected repository.
 *  Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

@end


/**
 *  Metadata for the `CreateWorkerPool` operation.
 */
@interface GTLRCloudBuild_CreateWorkerPoolOperationMetadata : GTLRObject

/** Time the operation was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/** Time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The resource name of the `WorkerPool` to create. Format:
 *  `projects/{project}/locations/{location}/workerPools/{worker_pool}`.
 */
@property(nonatomic, copy, nullable) NSString *workerPool;

@end


/**
 *  Metadata for `DeleteBitbucketServerConfig` operation.
 */
@interface GTLRCloudBuild_DeleteBitbucketServerConfigOperationMetadata : GTLRObject

/**
 *  The resource name of the BitbucketServerConfig to be deleted. Format:
 *  `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
 */
@property(nonatomic, copy, nullable) NSString *bitbucketServerConfig;

/** Time the operation was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/** Time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

@end


/**
 *  Metadata for `DeleteGitHubEnterpriseConfig` operation.
 */
@interface GTLRCloudBuild_DeleteGitHubEnterpriseConfigOperationMetadata : GTLRObject

/** Time the operation was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/** Time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The resource name of the GitHubEnterprise to be deleted. Format:
 *  `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
 */
@property(nonatomic, copy, nullable) NSString *githubEnterpriseConfig;

@end


/**
 *  Metadata for `DeleteGitLabConfig` operation.
 */
@interface GTLRCloudBuild_DeleteGitLabConfigOperationMetadata : GTLRObject

/** Time the operation was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/** Time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The resource name of the GitLabConfig to be created. Format:
 *  `projects/{project}/locations/{location}/gitlabConfigs/{id}`.
 */
@property(nonatomic, copy, nullable) NSString *gitlabConfig;

@end


/**
 *  Metadata for the `DeleteWorkerPool` operation.
 */
@interface GTLRCloudBuild_DeleteWorkerPoolOperationMetadata : GTLRObject

/** Time the operation was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/** Time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The resource name of the `WorkerPool` being deleted. Format:
 *  `projects/{project}/locations/{location}/workerPools/{worker_pool}`.
 */
@property(nonatomic, copy, nullable) NSString *workerPool;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRCloudBuild_Empty : GTLRObject
@end


/**
 *  A fatal problem encountered during the execution of the build.
 */
@interface GTLRCloudBuild_FailureInfo : GTLRObject

/** Explains the failure issue in more detail using hard-coded text. */
@property(nonatomic, copy, nullable) NSString *detail;

/**
 *  The name of the failure.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_FailureInfo_Type_FailureTypeUnspecified Type
 *        unspecified (Value: "FAILURE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudBuild_FailureInfo_Type_FetchSourceFailed The source
 *        fetching has failed. (Value: "FETCH_SOURCE_FAILED")
 *    @arg @c kGTLRCloudBuild_FailureInfo_Type_LoggingFailure Backend logging
 *        failures. Should retry. (Value: "LOGGING_FAILURE")
 *    @arg @c kGTLRCloudBuild_FailureInfo_Type_PushFailed Unable to push the
 *        image to the repository. (Value: "PUSH_FAILED")
 *    @arg @c kGTLRCloudBuild_FailureInfo_Type_PushImageNotFound Final image not
 *        found. (Value: "PUSH_IMAGE_NOT_FOUND")
 *    @arg @c kGTLRCloudBuild_FailureInfo_Type_PushNotAuthorized Unauthorized
 *        push of the final image. (Value: "PUSH_NOT_AUTHORIZED")
 *    @arg @c kGTLRCloudBuild_FailureInfo_Type_UserBuildStep A build step has
 *        failed. (Value: "USER_BUILD_STEP")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Container message for hashes of byte content of files, used in
 *  SourceProvenance messages to verify integrity of source input to the build.
 */
@interface GTLRCloudBuild_FileHashes : GTLRObject

/** Collection of file hashes. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Hash *> *fileHash;

@end


/**
 *  GitFileSource describes a file within a (possibly remote) code repository.
 */
@interface GTLRCloudBuild_GitFileSource : GTLRObject

/**
 *  The full resource name of the bitbucket server config. Format:
 *  `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
 */
@property(nonatomic, copy, nullable) NSString *bitbucketServerConfig;

/**
 *  The full resource name of the github enterprise config. Format:
 *  `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
 *  `projects/{project}/githubEnterpriseConfigs/{id}`.
 */
@property(nonatomic, copy, nullable) NSString *githubEnterpriseConfig;

/** The path of the file, with the repo root as the root of the path. */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  See RepoType above.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_GitFileSource_RepoType_BitbucketServer A Bitbucket
 *        Server-hosted repo. (Value: "BITBUCKET_SERVER")
 *    @arg @c kGTLRCloudBuild_GitFileSource_RepoType_CloudSourceRepositories A
 *        Google Cloud Source Repositories-hosted repo. (Value:
 *        "CLOUD_SOURCE_REPOSITORIES")
 *    @arg @c kGTLRCloudBuild_GitFileSource_RepoType_Github A GitHub-hosted repo
 *        not necessarily on "github.com" (i.e. GitHub Enterprise). (Value:
 *        "GITHUB")
 *    @arg @c kGTLRCloudBuild_GitFileSource_RepoType_Unknown The default,
 *        unknown repo type. (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *repoType;

/**
 *  The branch, tag, arbitrary ref, or SHA version of the repo to use when
 *  resolving the filename (optional). This field respects the same
 *  syntax/resolution as described here: https://git-scm.com/docs/gitrevisions
 *  If unspecified, the revision from which the trigger invocation originated is
 *  assumed to be the revision from which to read the specified path.
 */
@property(nonatomic, copy, nullable) NSString *revision;

/**
 *  The URI of the repo. Either uri or repository can be specified. If
 *  unspecified, the repo from which the trigger invocation originated is
 *  assumed to be the repo from which to read the specified path.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  GitHubEnterpriseConfig represents a configuration for a GitHub Enterprise
 *  server.
 */
@interface GTLRCloudBuild_GitHubEnterpriseConfig : GTLRObject

/**
 *  Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise
 *  server.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *appId;

/**
 *  Output only. Time when the installation was associated with the project.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Name to display for this config. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** The URL of the github enterprise host the configuration is for. */
@property(nonatomic, copy, nullable) NSString *hostUrl;

/**
 *  Optional. The full resource name for the GitHubEnterpriseConfig For example:
 *  "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The network to be used when reaching out to the GitHub Enterprise
 *  server. The VPC network must be enabled for private service connection. This
 *  should be set if the GitHub Enterprise server is hosted on-premises and not
 *  reachable by public internet. If this field is left empty, no network
 *  peering will occur and calls to the GitHub Enterprise server will be made
 *  over the public internet. Must be in the format
 *  `projects/{project}/global/networks/{network}`, where {project} is a project
 *  number or id and {network} is the name of a VPC network in the project.
 */
@property(nonatomic, copy, nullable) NSString *peeredNetwork;

/** Names of secrets in Secret Manager. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GitHubEnterpriseSecrets *secrets;

/** Optional. SSL certificate to use for requests to GitHub Enterprise. */
@property(nonatomic, copy, nullable) NSString *sslCa;

/**
 *  The key that should be attached to webhook calls to the ReceiveWebhook
 *  endpoint.
 */
@property(nonatomic, copy, nullable) NSString *webhookKey;

@end


/**
 *  GitHubEnterpriseSecrets represents the names of all necessary secrets in
 *  Secret Manager for a GitHub Enterprise server. Format is:
 *  projects//secrets/.
 */
@interface GTLRCloudBuild_GitHubEnterpriseSecrets : GTLRObject

/** The resource name for the OAuth client ID secret in Secret Manager. */
@property(nonatomic, copy, nullable) NSString *oauthClientIdName;

/**
 *  The resource name for the OAuth client ID secret version in Secret Manager.
 */
@property(nonatomic, copy, nullable) NSString *oauthClientIdVersionName;

/** The resource name for the OAuth secret in Secret Manager. */
@property(nonatomic, copy, nullable) NSString *oauthSecretName;

/**
 *  The resource name for the OAuth secret secret version in Secret Manager.
 */
@property(nonatomic, copy, nullable) NSString *oauthSecretVersionName;

/** The resource name for the private key secret. */
@property(nonatomic, copy, nullable) NSString *privateKeyName;

/** The resource name for the private key secret version. */
@property(nonatomic, copy, nullable) NSString *privateKeyVersionName;

/** The resource name for the webhook secret in Secret Manager. */
@property(nonatomic, copy, nullable) NSString *webhookSecretName;

/**
 *  The resource name for the webhook secret secret version in Secret Manager.
 */
@property(nonatomic, copy, nullable) NSString *webhookSecretVersionName;

@end


/**
 *  GitHubEventsConfig describes the configuration of a trigger that creates a
 *  build whenever a GitHub event is received.
 */
@interface GTLRCloudBuild_GitHubEventsConfig : GTLRObject

/**
 *  Optional. The resource name of the github enterprise config that should be
 *  applied to this installation. For example:
 *  "projects/{$project_id}/githubEnterpriseConfigs/{$config_id}"
 */
@property(nonatomic, copy, nullable) NSString *enterpriseConfigResourceName;

/**
 *  The installationID that emits the GitHub event.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *installationId;

/**
 *  Name of the repository. For example: The name for
 *  https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Owner of the repository. For example: The owner for
 *  https://github.com/googlecloudplatform/cloud-builders is
 *  "googlecloudplatform".
 */
@property(nonatomic, copy, nullable) NSString *owner;

/** filter to match changes in pull requests. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_PullRequestFilter *pullRequest;

/** filter to match changes in refs like branches, tags. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_PushFilter *push;

@end


/**
 *  GitLabConfig represents the configuration for a GitLab integration.
 */
@interface GTLRCloudBuild_GitLabConfig : GTLRObject

/** Connected GitLab.com or GitLabEnterprise repositories for this config. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_GitLabRepositoryId *> *connectedRepositories;

/** Output only. Time when the config was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Optional. GitLabEnterprise config. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GitLabEnterpriseConfig *enterpriseConfig;

/** The resource name for the config. */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. Secret Manager secrets needed by the config. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GitLabSecrets *secrets;

/**
 *  Username of the GitLab.com or GitLab Enterprise account Cloud Build will
 *  use.
 */
@property(nonatomic, copy, nullable) NSString *username;

/**
 *  Output only. UUID included in webhook requests. The UUID is used to look up
 *  the corresponding config.
 */
@property(nonatomic, copy, nullable) NSString *webhookKey;

@end


/**
 *  GitLabConnectedRepository represents a GitLab connected repository request
 *  response.
 */
@interface GTLRCloudBuild_GitLabConnectedRepository : GTLRObject

/**
 *  The name of the `GitLabConfig` that added connected repository. Format:
 *  `projects/{project}/locations/{location}/gitLabConfigs/{config}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** The GitLab repositories to connect. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GitLabRepositoryId *repo;

/** Output only. The status of the repo connection request. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Status *status;

@end


/**
 *  GitLabEnterpriseConfig represents the configuration for a GitLabEnterprise
 *  integration.
 */
@interface GTLRCloudBuild_GitLabEnterpriseConfig : GTLRObject

/** Immutable. The URI of the GitlabEnterprise host. */
@property(nonatomic, copy, nullable) NSString *hostUri;

/**
 *  The Service Directory configuration to be used when reaching out to the
 *  GitLab Enterprise instance.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_ServiceDirectoryConfig *serviceDirectoryConfig;

/** The SSL certificate to use in requests to GitLab Enterprise instances. */
@property(nonatomic, copy, nullable) NSString *sslCa;

@end


/**
 *  GitLabEventsConfig describes the configuration of a trigger that creates a
 *  build whenever a GitLab event is received.
 */
@interface GTLRCloudBuild_GitLabEventsConfig : GTLRObject

/**
 *  Output only. The GitLabConfig specified in the gitlab_config_resource field.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GitLabConfig *gitlabConfig;

/** The GitLab config resource that this trigger config maps to. */
@property(nonatomic, copy, nullable) NSString *gitlabConfigResource;

/** Namespace of the GitLab project. */
@property(nonatomic, copy, nullable) NSString *projectNamespace;

/** Filter to match changes in pull requests. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_PullRequestFilter *pullRequest;

/** Filter to match changes in refs like branches, tags. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_PushFilter *push;

@end


/**
 *  Proto Representing a GitLabRepository
 */
@interface GTLRCloudBuild_GitLabRepository : GTLRObject

/** Link to the browse repo page on the GitLab instance */
@property(nonatomic, copy, nullable) NSString *browseUri;

/**
 *  Description of the repository
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Display name of the repository */
@property(nonatomic, copy, nullable) NSString *displayName;

/** The resource name of the repository */
@property(nonatomic, copy, nullable) NSString *name;

/** Identifier for a repository */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GitLabRepositoryId *repositoryId;

@end


/**
 *  GitLabRepositoryId identifies a specific repository hosted on GitLab.com or
 *  GitLabEnterprise
 */
@interface GTLRCloudBuild_GitLabRepositoryId : GTLRObject

/**
 *  Required. Identifier for the repository. example: "namespace/project-slug",
 *  namespace is usually the username or group ID
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Output only. The ID of the webhook that was created for receiving events
 *  from this repo. We only create and manage a single webhook for each repo.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *webhookId;

@end


/**
 *  GitLabSecrets represents the secrets in Secret Manager for a GitLab
 *  integration.
 */
@interface GTLRCloudBuild_GitLabSecrets : GTLRObject

/** Required. The resource name for the api access token’s secret version */
@property(nonatomic, copy, nullable) NSString *apiAccessTokenVersion;

/**
 *  Required. Immutable. API Key that will be attached to webhook requests from
 *  GitLab to Cloud Build.
 */
@property(nonatomic, copy, nullable) NSString *apiKeyVersion;

/** Required. The resource name for the read access token’s secret version */
@property(nonatomic, copy, nullable) NSString *readAccessTokenVersion;

/**
 *  Required. Immutable. The resource name for the webhook secret’s secret
 *  version. Once this field has been set, it cannot be changed. If you need to
 *  change it, please create another GitLabConfig.
 */
@property(nonatomic, copy, nullable) NSString *webhookSecretVersion;

@end


/**
 *  GitRepoSource describes a repo and ref of a code repository.
 */
@interface GTLRCloudBuild_GitRepoSource : GTLRObject

/**
 *  The full resource name of the bitbucket server config. Format:
 *  `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
 */
@property(nonatomic, copy, nullable) NSString *bitbucketServerConfig;

/**
 *  The full resource name of the github enterprise config. Format:
 *  `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
 *  `projects/{project}/githubEnterpriseConfigs/{id}`.
 */
@property(nonatomic, copy, nullable) NSString *githubEnterpriseConfig;

/** The branch or tag to use. Must start with "refs/" (required). */
@property(nonatomic, copy, nullable) NSString *ref;

/**
 *  See RepoType below.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_GitRepoSource_RepoType_BitbucketServer A Bitbucket
 *        Server-hosted repo. (Value: "BITBUCKET_SERVER")
 *    @arg @c kGTLRCloudBuild_GitRepoSource_RepoType_CloudSourceRepositories A
 *        Google Cloud Source Repositories-hosted repo. (Value:
 *        "CLOUD_SOURCE_REPOSITORIES")
 *    @arg @c kGTLRCloudBuild_GitRepoSource_RepoType_Github A GitHub-hosted repo
 *        not necessarily on "github.com" (i.e. GitHub Enterprise). (Value:
 *        "GITHUB")
 *    @arg @c kGTLRCloudBuild_GitRepoSource_RepoType_Unknown The default,
 *        unknown repo type. (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *repoType;

/**
 *  The URI of the repo. Either uri or repository can be specified and is
 *  required.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Container message for hash values.
 */
@interface GTLRCloudBuild_Hash : GTLRObject

/**
 *  The type of hash that was performed.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_Hash_Type_Md5 Use a md5 hash. (Value: "MD5")
 *    @arg @c kGTLRCloudBuild_Hash_Type_None No hash requested. (Value: "NONE")
 *    @arg @c kGTLRCloudBuild_Hash_Type_Sha256 Use a sha256 hash. (Value:
 *        "SHA256")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The hash value.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Message that represents an arbitrary HTTP body. It should only be used for
 *  payload formats that can't be represented as JSON, such as raw binary or an
 *  HTML page. This message can be used both in streaming and non-streaming API
 *  methods in the request as well as the response. It can be used as a
 *  top-level request field, which is convenient if one wants to extract
 *  parameters from either the URL or HTTP template into the request fields and
 *  also want access to the raw HTTP body. Example: message GetResourceRequest {
 *  // A unique request id. string request_id = 1; // The raw HTTP body is bound
 *  to this field. google.api.HttpBody http_body = 2; } service ResourceService
 *  { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc
 *  UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); }
 *  Example with streaming methods: service CaldavService { rpc
 *  GetCalendar(stream google.api.HttpBody) returns (stream
 *  google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns
 *  (stream google.api.HttpBody); } Use of this type only changes how the
 *  request and response bodies are handled, all other features will continue to
 *  work unchanged.
 */
@interface GTLRCloudBuild_HttpBody : GTLRObject

/**
 *  The HTTP Content-Type header value specifying the content type of the body.
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  The HTTP request/response body as raw binary.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  Application specific response metadata. Must be set in the first response
 *  for streaming APIs.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_HttpBody_Extensions_Item *> *extensions;

@end


/**
 *  GTLRCloudBuild_HttpBody_Extensions_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_HttpBody_Extensions_Item : GTLRObject
@end


/**
 *  HTTPDelivery is the delivery configuration for an HTTP notification.
 */
@interface GTLRCloudBuild_HTTPDelivery : GTLRObject

/** The URI to which JSON-containing HTTP POST requests should be sent. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Pairs a set of secret environment variables mapped to encrypted values with
 *  the Cloud KMS key to use to decrypt the value.
 */
@interface GTLRCloudBuild_InlineSecret : GTLRObject

/**
 *  Map of environment variable name to its encrypted value. Secret environment
 *  variables must be unique across all of a build's secrets, and must be used
 *  by at least one build step. Values can be at most 64 KB in size. There can
 *  be at most 100 secret values across all of a build's secrets.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_InlineSecret_EnvMap *envMap;

/**
 *  Resource name of Cloud KMS crypto key to decrypt the encrypted value. In
 *  format: projects/ * /locations/ * /keyRings/ * /cryptoKeys/ *
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

@end


/**
 *  Map of environment variable name to its encrypted value. Secret environment
 *  variables must be unique across all of a build's secrets, and must be used
 *  by at least one build step. Values can be at most 64 KB in size. There can
 *  be at most 100 secret values across all of a build's secrets.
 *
 *  @note This class is documented as having more properties of NSString
 *        (Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *        web-safe format).). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_InlineSecret_EnvMap : GTLRObject
@end


/**
 *  RPC response object returned by ListBitbucketServerConfigs RPC method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "bitbucketServerConfigs" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRCloudBuild_ListBitbucketServerConfigsResponse : GTLRCollectionObject

/**
 *  A list of BitbucketServerConfigs
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_BitbucketServerConfig *> *bitbucketServerConfigs;

/**
 *  A token that can be sent as `page_token` to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  RPC response object returned by the ListBitbucketServerRepositories RPC
 *  method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "bitbucketServerRepositories" property. If returned as the result
 *        of a query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRCloudBuild_ListBitbucketServerRepositoriesResponse : GTLRCollectionObject

/**
 *  List of Bitbucket Server repositories.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_BitbucketServerRepository *> *bitbucketServerRepositories;

/**
 *  A token that can be sent as `page_token` to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response including listed builds.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "builds" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudBuild_ListBuildsResponse : GTLRCollectionObject

/**
 *  Builds will be sorted by `create_time`, descending.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Build *> *builds;

/**
 *  Token to receive the next page of results. This will be absent if the end of
 *  the response list has been reached.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response containing existing `BuildTriggers`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "triggers" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudBuild_ListBuildTriggersResponse : GTLRCollectionObject

/** Token to receive the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  `BuildTriggers` for the project, sorted by `create_time` descending.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_BuildTrigger *> *triggers;

@end


/**
 *  RPC response object returned by ListGithubEnterpriseConfigs RPC method.
 */
@interface GTLRCloudBuild_ListGithubEnterpriseConfigsResponse : GTLRObject

/** A list of GitHubEnterpriseConfigs */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_GitHubEnterpriseConfig *> *configs;

@end


/**
 *  RPC response object returned by ListGitLabConfigs RPC method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "gitlabConfigs" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudBuild_ListGitLabConfigsResponse : GTLRCollectionObject

/**
 *  A list of GitLabConfigs
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_GitLabConfig *> *gitlabConfigs;

/**
 *  A token that can be sent as `page_token` to retrieve the next page If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  RPC response object returned by the ListGitLabRepositories RPC method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "gitlabRepositories" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRCloudBuild_ListGitLabRepositoriesResponse : GTLRCollectionObject

/**
 *  List of GitLab repositories
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_GitLabRepository *> *gitlabRepositories;

/**
 *  A token that can be sent as `page_token` to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response containing existing `WorkerPools`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "workerPools" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudBuild_ListWorkerPoolsResponse : GTLRCollectionObject

/**
 *  Continuation token used to page through large result sets. Provide this
 *  value in a subsequent ListWorkerPoolsRequest to return the next page of
 *  results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  `WorkerPools` for the specified project.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_WorkerPool *> *workerPools;

@end


/**
 *  A Maven artifact to upload to Artifact Registry upon successful completion
 *  of all build steps.
 */
@interface GTLRCloudBuild_MavenArtifact : GTLRObject

/**
 *  Maven `artifactId` value used when uploading the artifact to Artifact
 *  Registry.
 */
@property(nonatomic, copy, nullable) NSString *artifactId;

/**
 *  Maven `groupId` value used when uploading the artifact to Artifact Registry.
 */
@property(nonatomic, copy, nullable) NSString *groupId;

/**
 *  Path to an artifact in the build's workspace to be uploaded to Artifact
 *  Registry. This can be either an absolute path, e.g.
 *  /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from
 *  /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
 */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Artifact Registry repository, in the form
 *  "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the
 *  workspace specified by path will be uploaded to Artifact Registry with this
 *  location as a prefix.
 */
@property(nonatomic, copy, nullable) NSString *repository;

/**
 *  Maven `version` value used when uploading the artifact to Artifact Registry.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Defines the network configuration for the pool.
 */
@interface GTLRCloudBuild_NetworkConfig : GTLRObject

/**
 *  Option to configure network egress for the workers.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_NetworkConfig_EgressOption_EgressOptionUnspecified
 *        If set, defaults to PUBLIC_EGRESS. (Value:
 *        "EGRESS_OPTION_UNSPECIFIED")
 *    @arg @c kGTLRCloudBuild_NetworkConfig_EgressOption_NoPublicEgress If set,
 *        workers are created without any public address, which prevents network
 *        egress to public IPs unless a network proxy is configured. (Value:
 *        "NO_PUBLIC_EGRESS")
 *    @arg @c kGTLRCloudBuild_NetworkConfig_EgressOption_PublicEgress If set,
 *        workers are created with a public address which allows for public
 *        internet egress. (Value: "PUBLIC_EGRESS")
 */
@property(nonatomic, copy, nullable) NSString *egressOption;

/**
 *  Required. Immutable. The network definition that the workers are peered to.
 *  If this section is left empty, the workers will be peered to
 *  `WorkerPool.project_id` on the service producer network. Must be in the
 *  format `projects/{project}/global/networks/{network}`, where `{project}` is
 *  a project number, such as `12345`, and `{network}` is the name of a VPC
 *  network in the project. See [Understanding network configuration
 *  options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)
 */
@property(nonatomic, copy, nullable) NSString *peeredNetwork;

@end


/**
 *  Notification is the container which holds the data that is relevant to this
 *  particular notification.
 */
@interface GTLRCloudBuild_Notification : GTLRObject

/**
 *  The filter string to use for notification filtering. Currently, this is
 *  assumed to be a CEL program. See https://opensource.google/projects/cel for
 *  more.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Configuration for HTTP delivery. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_HTTPDelivery *httpDelivery;

/** Configuration for Slack delivery. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_SlackDelivery *slackDelivery;

/** Configuration for SMTP (email) delivery. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_SMTPDelivery *smtpDelivery;

/** Escape hatch for users to supply custom delivery configs. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Notification_StructDelivery *structDelivery;

@end


/**
 *  Escape hatch for users to supply custom delivery configs.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_Notification_StructDelivery : GTLRObject
@end


/**
 *  NotifierConfig is the top-level configuration message.
 */
@interface GTLRCloudBuild_NotifierConfig : GTLRObject

/** The API version of this configuration format. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** The type of notifier to use (e.g. SMTPNotifier). */
@property(nonatomic, copy, nullable) NSString *kind;

/** Metadata for referring to/handling/deploying this notifier. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_NotifierMetadata *metadata;

/** The actual configuration for this notifier. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_NotifierSpec *spec;

@end


/**
 *  NotifierMetadata contains the data which can be used to reference or
 *  describe this notifier.
 */
@interface GTLRCloudBuild_NotifierMetadata : GTLRObject

/**
 *  The human-readable and user-given name for the notifier. For example:
 *  "repo-merge-email-notifier".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The string representing the name and version of notifier to deploy. Expected
 *  to be of the form of "/:". For example:
 *  "gcr.io/my-project/notifiers/smtp:1.2.34".
 */
@property(nonatomic, copy, nullable) NSString *notifier;

@end


/**
 *  NotifierSecret is the container that maps a secret name (reference) to its
 *  Google Cloud Secret Manager resource path.
 */
@interface GTLRCloudBuild_NotifierSecret : GTLRObject

/**
 *  Name is the local name of the secret, such as the verbatim string
 *  "my-smtp-password".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Value is interpreted to be a resource path for fetching the actual
 *  (versioned) secret data for this secret. For example, this would be a Google
 *  Cloud Secret Manager secret version resource path like:
 *  "projects/my-project/secrets/my-secret/versions/latest".
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  NotifierSecretRef contains the reference to a secret stored in the
 *  corresponding NotifierSpec.
 */
@interface GTLRCloudBuild_NotifierSecretRef : GTLRObject

/**
 *  The value of `secret_ref` should be a `name` that is registered in a
 *  `Secret` in the `secrets` list of the `Spec`.
 */
@property(nonatomic, copy, nullable) NSString *secretRef;

@end


/**
 *  NotifierSpec is the configuration container for notifications.
 */
@interface GTLRCloudBuild_NotifierSpec : GTLRObject

/** The configuration of this particular notifier. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Notification *notification;

/** Configurations for secret resources used by this particular notifier. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_NotifierSecret *> *secrets;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudBuild_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRCloudBuild_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have been cancelled successfully have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cancelRequested;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusDetail;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Details about how a build should be executed on a `WorkerPool`. See [running
 *  builds in a private
 *  pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool)
 *  for more information.
 */
@interface GTLRCloudBuild_PoolOption : GTLRObject

/**
 *  The `WorkerPool` resource to execute the build on. You must have
 *  `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format
 *  projects/{project}/locations/{location}/workerPools/{workerPoolId}
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Configuration for a V1 `PrivatePool`.
 */
@interface GTLRCloudBuild_PrivatePoolV1Config : GTLRObject

/** Network configuration for the pool. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_NetworkConfig *networkConfig;

/** Machine configuration for the workers in the pool. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_WorkerConfig *workerConfig;

@end


/**
 *  Metadata for `ProcessAppManifestCallback` operation.
 */
@interface GTLRCloudBuild_ProcessAppManifestCallbackOperationMetadata : GTLRObject

/** Time the operation was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/** Time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The resource name of the GitHubEnterprise to be created. Format:
 *  `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
 */
@property(nonatomic, copy, nullable) NSString *githubEnterpriseConfig;

@end


/**
 *  PubsubConfig describes the configuration of a trigger that creates a build
 *  whenever a Pub/Sub message is published.
 */
@interface GTLRCloudBuild_PubsubConfig : GTLRObject

/** Service account that will make the push request. */
@property(nonatomic, copy, nullable) NSString *serviceAccountEmail;

/**
 *  Potential issues with the underlying Pub/Sub subscription configuration.
 *  Only populated on get requests.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_PubsubConfig_State_Ok The Pub/Sub subscription is
 *        properly configured. (Value: "OK")
 *    @arg @c kGTLRCloudBuild_PubsubConfig_State_StateUnspecified The
 *        subscription configuration has not been checked. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudBuild_PubsubConfig_State_SubscriptionDeleted The
 *        subscription has been deleted. (Value: "SUBSCRIPTION_DELETED")
 *    @arg @c kGTLRCloudBuild_PubsubConfig_State_SubscriptionMisconfigured Some
 *        of the subscription's field are misconfigured. (Value:
 *        "SUBSCRIPTION_MISCONFIGURED")
 *    @arg @c kGTLRCloudBuild_PubsubConfig_State_TopicDeleted The topic has been
 *        deleted. (Value: "TOPIC_DELETED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Name of the subscription. Format is
 *  `projects/{project}/subscriptions/{subscription}`.
 */
@property(nonatomic, copy, nullable) NSString *subscription;

/**
 *  The name of the topic from which this subscription is receiving messages.
 *  Format is `projects/{project}/topics/{topic}`.
 */
@property(nonatomic, copy, nullable) NSString *topic;

@end


/**
 *  PullRequestFilter contains filter properties for matching GitHub Pull
 *  Requests.
 */
@interface GTLRCloudBuild_PullRequestFilter : GTLRObject

/**
 *  Regex of branches to match. The syntax of the regular expressions accepted
 *  is the syntax accepted by RE2 and described at
 *  https://github.com/google/re2/wiki/Syntax
 */
@property(nonatomic, copy, nullable) NSString *branch;

/**
 *  Configure builds to run whether a repository owner or collaborator need to
 *  comment `/gcbrun`.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_PullRequestFilter_CommentControl_CommentsDisabled
 *        Do not require comments on Pull Requests before builds are triggered.
 *        (Value: "COMMENTS_DISABLED")
 *    @arg @c kGTLRCloudBuild_PullRequestFilter_CommentControl_CommentsEnabled
 *        Enforce that repository owners or collaborators must comment on Pull
 *        Requests before builds are triggered. (Value: "COMMENTS_ENABLED")
 *    @arg @c kGTLRCloudBuild_PullRequestFilter_CommentControl_CommentsEnabledForExternalContributorsOnly
 *        Enforce that repository owners or collaborators must comment on
 *        external contributors' Pull Requests before builds are triggered.
 *        (Value: "COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY")
 */
@property(nonatomic, copy, nullable) NSString *commentControl;

/**
 *  If true, branches that do NOT match the git_ref will trigger a build.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *invertRegex;

@end


/**
 *  Push contains filter properties for matching GitHub git pushes.
 */
@interface GTLRCloudBuild_PushFilter : GTLRObject

/**
 *  Regexes matching branches to build. The syntax of the regular expressions
 *  accepted is the syntax accepted by RE2 and described at
 *  https://github.com/google/re2/wiki/Syntax
 */
@property(nonatomic, copy, nullable) NSString *branch;

/**
 *  When true, only trigger a build if the revision regex does NOT match the
 *  git_ref regex.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *invertRegex;

/**
 *  Regexes matching tags to build. The syntax of the regular expressions
 *  accepted is the syntax accepted by RE2 and described at
 *  https://github.com/google/re2/wiki/Syntax
 */
@property(nonatomic, copy, nullable) NSString *tag;

@end


/**
 *  Python package to upload to Artifact Registry upon successful completion of
 *  all build steps. A package can encapsulate multiple objects to be uploaded
 *  to a single repository.
 */
@interface GTLRCloudBuild_PythonPackage : GTLRObject

/**
 *  Path globs used to match files in the build's workspace. For Python/ Twine,
 *  this is usually `dist/ *`, and sometimes additionally an `.asc` file.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *paths;

/**
 *  Artifact Registry repository, in the form
 *  "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace
 *  matching any path pattern will be uploaded to Artifact Registry with this
 *  location as a prefix.
 */
@property(nonatomic, copy, nullable) NSString *repository;

@end


/**
 *  ReceiveTriggerWebhookResponse [Experimental] is the response object for the
 *  ReceiveTriggerWebhook method.
 */
@interface GTLRCloudBuild_ReceiveTriggerWebhookResponse : GTLRObject
@end


/**
 *  RPC request object accepted by RemoveBitbucketServerConnectedRepository RPC
 *  method.
 */
@interface GTLRCloudBuild_RemoveBitbucketServerConnectedRepositoryRequest : GTLRObject

/** The connected repository to remove. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_BitbucketServerRepositoryId *connectedRepository;

@end


/**
 *  RPC request object accepted by RemoveGitLabConnectedRepository RPC method.
 */
@interface GTLRCloudBuild_RemoveGitLabConnectedRepositoryRequest : GTLRObject

/** The connected repository to remove. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GitLabRepositoryId *connectedRepository;

@end


/**
 *  The configuration of a trigger that creates a build whenever an event from
 *  Repo API is received.
 */
@interface GTLRCloudBuild_RepositoryEventConfig : GTLRObject

/** Filter to match changes in pull requests. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_PullRequestFilter *pullRequest;

/** Filter to match changes in refs like branches, tags. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_PushFilter *push;

/** The resource name of the Repo API resource. */
@property(nonatomic, copy, nullable) NSString *repository;

/**
 *  Output only. The type of the SCM vendor the repository points to.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_RepositoryEventConfig_RepositoryType_Github The
 *        SCM repo is GITHUB. (Value: "GITHUB")
 *    @arg @c kGTLRCloudBuild_RepositoryEventConfig_RepositoryType_GithubEnterprise
 *        The SCM repo is GITHUB Enterprise. (Value: "GITHUB_ENTERPRISE")
 *    @arg @c kGTLRCloudBuild_RepositoryEventConfig_RepositoryType_GitlabEnterprise
 *        The SCM repo is GITLAB Enterprise. (Value: "GITLAB_ENTERPRISE")
 *    @arg @c kGTLRCloudBuild_RepositoryEventConfig_RepositoryType_RepositoryTypeUnspecified
 *        If unspecified, RepositoryType defaults to GITHUB. (Value:
 *        "REPOSITORY_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *repositoryType;

@end


/**
 *  Location of the source in a Google Cloud Source Repository.
 */
@interface GTLRCloudBuild_RepoSource : GTLRObject

/**
 *  Regex matching branches to build. The syntax of the regular expressions
 *  accepted is the syntax accepted by RE2 and described at
 *  https://github.com/google/re2/wiki/Syntax
 */
@property(nonatomic, copy, nullable) NSString *branchName;

/** Explicit commit SHA to build. */
@property(nonatomic, copy, nullable) NSString *commitSha;

/**
 *  Directory, relative to the source root, in which to run the build. This must
 *  be a relative path. If a step's `dir` is specified and is an absolute path,
 *  this value is ignored for that step's execution.
 */
@property(nonatomic, copy, nullable) NSString *dir;

/**
 *  Only trigger a build if the revision regex does NOT match the revision
 *  regex.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *invertRegex;

/**
 *  ID of the project that owns the Cloud Source Repository. If omitted, the
 *  project ID requesting the build is assumed.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Name of the Cloud Source Repository. */
@property(nonatomic, copy, nullable) NSString *repoName;

/**
 *  Substitutions to use in a triggered build. Should only be used with
 *  RunBuildTrigger
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_RepoSource_Substitutions *substitutions;

/**
 *  Regex matching tags to build. The syntax of the regular expressions accepted
 *  is the syntax accepted by RE2 and described at
 *  https://github.com/google/re2/wiki/Syntax
 */
@property(nonatomic, copy, nullable) NSString *tagName;

@end


/**
 *  Substitutions to use in a triggered build. Should only be used with
 *  RunBuildTrigger
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudBuild_RepoSource_Substitutions : GTLRObject
@end


/**
 *  Artifacts created by the build pipeline.
 */
@interface GTLRCloudBuild_Results : GTLRObject

/**
 *  Path to the artifact manifest for non-container artifacts uploaded to Cloud
 *  Storage. Only populated when artifacts are uploaded to Cloud Storage.
 */
@property(nonatomic, copy, nullable) NSString *artifactManifest;

/** Time to push all non-container artifacts to Cloud Storage. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_TimeSpan *artifactTiming;

/**
 *  List of build step digests, in the order corresponding to build step
 *  indices.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *buildStepImages;

/**
 *  List of build step outputs, produced by builder images, in the order
 *  corresponding to build step indices. [Cloud
 *  Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can
 *  produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first
 *  4KB of data is stored.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *buildStepOutputs;

/** Container images that were built as a part of the build. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_BuiltImage *> *images;

/** Maven artifacts uploaded to Artifact Registry at the end of the build. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_UploadedMavenArtifact *> *mavenArtifacts;

/**
 *  Number of non-container artifacts uploaded to Cloud Storage. Only populated
 *  when artifacts are uploaded to Cloud Storage.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numArtifacts;

/** Python artifacts uploaded to Artifact Registry at the end of the build. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_UploadedPythonPackage *> *pythonPackages;

@end


/**
 *  Specifies a build to retry.
 */
@interface GTLRCloudBuild_RetryBuildRequest : GTLRObject

/**
 *  Required. Build ID of the original build.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The name of the `Build` to retry. Format:
 *  `projects/{project}/locations/{location}/builds/{build}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

@end


/**
 *  Specifies a build trigger to run and the source to use.
 */
@interface GTLRCloudBuild_RunBuildTriggerRequest : GTLRObject

/** Required. ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  Source to build against this trigger. Branch and tag names cannot consist of
 *  regular expressions.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_RepoSource *source;

/** Required. ID of the trigger. */
@property(nonatomic, copy, nullable) NSString *triggerId;

@end


/**
 *  Pairs a set of secret environment variables containing encrypted values with
 *  the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with
 *  `available_secrets` instead of using `kmsKeyName` with `secret`. For
 *  instructions see:
 *  https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
 */
@interface GTLRCloudBuild_Secret : GTLRObject

/** Cloud KMS key name to use to decrypt these envs. */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

/**
 *  Map of environment variable name to its encrypted value. Secret environment
 *  variables must be unique across all of a build's secrets, and must be used
 *  by at least one build step. Values can be at most 64 KB in size. There can
 *  be at most 100 secret values across all of a build's secrets.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Secret_SecretEnv *secretEnv;

@end


/**
 *  Map of environment variable name to its encrypted value. Secret environment
 *  variables must be unique across all of a build's secrets, and must be used
 *  by at least one build step. Values can be at most 64 KB in size. There can
 *  be at most 100 secret values across all of a build's secrets.
 *
 *  @note This class is documented as having more properties of NSString
 *        (Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *        web-safe format).). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_Secret_SecretEnv : GTLRObject
@end


/**
 *  Pairs a secret environment variable with a SecretVersion in Secret Manager.
 */
@interface GTLRCloudBuild_SecretManagerSecret : GTLRObject

/**
 *  Environment variable name to associate with the secret. Secret environment
 *  variables must be unique across all of a build's secrets, and must be used
 *  by at least one build step.
 */
@property(nonatomic, copy, nullable) NSString *env;

/**
 *  Resource name of the SecretVersion. In format: projects/ * /secrets/ *
 *  /versions/ *
 */
@property(nonatomic, copy, nullable) NSString *versionName;

@end


/**
 *  Secrets and secret environment variables.
 */
@interface GTLRCloudBuild_Secrets : GTLRObject

/**
 *  Secrets encrypted with KMS key and the associated secret environment
 *  variable.
 *
 *  Remapped to 'inlineProperty' to avoid language reserved word 'inline'.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_InlineSecret *> *inlineProperty;

/** Secrets in Secret Manager and associated secret environment variable. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_SecretManagerSecret *> *secretManager;

@end


/**
 *  ServiceDirectoryConfig represents Service Directory configuration for a SCM
 *  host connection.
 */
@interface GTLRCloudBuild_ServiceDirectoryConfig : GTLRObject

/**
 *  The Service Directory service name. Format:
 *  projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  SlackDelivery is the delivery configuration for delivering Slack messages
 *  via webhooks. See Slack webhook documentation at:
 *  https://api.slack.com/messaging/webhooks.
 */
@interface GTLRCloudBuild_SlackDelivery : GTLRObject

/**
 *  The secret reference for the Slack webhook URI for sending messages to a
 *  channel.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_NotifierSecretRef *webhookUri;

@end


/**
 *  SMTPDelivery is the delivery configuration for an SMTP (email) notification.
 */
@interface GTLRCloudBuild_SMTPDelivery : GTLRObject

/**
 *  This is the SMTP account/email that appears in the `From:` of the email. If
 *  empty, it is assumed to be sender.
 */
@property(nonatomic, copy, nullable) NSString *fromAddress;

/** The SMTP sender's password. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_NotifierSecretRef *password;

/** The SMTP port of the server. */
@property(nonatomic, copy, nullable) NSString *port;

/**
 *  This is the list of addresses to which we send the email (i.e. in the `To:`
 *  of the email).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *recipientAddresses;

/** This is the SMTP account/email that is used to send the message. */
@property(nonatomic, copy, nullable) NSString *senderAddress;

/** The address of the SMTP server. */
@property(nonatomic, copy, nullable) NSString *server;

@end


/**
 *  Location of the source in a supported storage service.
 */
@interface GTLRCloudBuild_Source : GTLRObject

/**
 *  If provided, get the source from this location in a Cloud Source Repository.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_RepoSource *repoSource;

/** If provided, get the source from this location in Google Cloud Storage. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_StorageSource *storageSource;

/**
 *  If provided, get the source from this manifest in Google Cloud Storage. This
 *  feature is in Preview; see description
 *  [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_StorageSourceManifest *storageSourceManifest;

@end


/**
 *  Provenance of the source. Ways to find the original source, or verify that
 *  some source was used for this build.
 */
@interface GTLRCloudBuild_SourceProvenance : GTLRObject

/**
 *  Output only. Hash(es) of the build source, which can be used to verify that
 *  the original source integrity was maintained in the build. Note that
 *  `FileHashes` will only be populated if `BuildOptions` has requested a
 *  `SourceProvenanceHash`. The keys to this map are file paths used as build
 *  source and the values contain the hash values for those files. If the build
 *  source came in a single package such as a gzipped tarfile (`.tar.gz`), the
 *  `FileHash` will be for the single path to that file.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_SourceProvenance_FileHashes *fileHashes;

/**
 *  A copy of the build's `source.repo_source`, if exists, with any revisions
 *  resolved.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_RepoSource *resolvedRepoSource;

/**
 *  A copy of the build's `source.storage_source`, if exists, with any
 *  generations resolved.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_StorageSource *resolvedStorageSource;

/**
 *  A copy of the build's `source.storage_source_manifest`, if exists, with any
 *  revisions resolved. This feature is in Preview.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_StorageSourceManifest *resolvedStorageSourceManifest;

@end


/**
 *  Output only. Hash(es) of the build source, which can be used to verify that
 *  the original source integrity was maintained in the build. Note that
 *  `FileHashes` will only be populated if `BuildOptions` has requested a
 *  `SourceProvenanceHash`. The keys to this map are file paths used as build
 *  source and the values contain the hash values for those files. If the build
 *  source came in a single package such as a gzipped tarfile (`.tar.gz`), the
 *  `FileHash` will be for the single path to that file.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudBuild_FileHashes. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_SourceProvenance_FileHashes : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudBuild_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudBuild_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_Status_Details_Item : GTLRObject
@end


/**
 *  Location of the source in an archive file in Google Cloud Storage.
 */
@interface GTLRCloudBuild_StorageSource : GTLRObject

/**
 *  Google Cloud Storage bucket containing the source (see [Bucket Name
 *  Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Google Cloud Storage generation for the object. If the generation is
 *  omitted, the latest generation will be used.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  Google Cloud Storage object containing the source. This object must be a
 *  zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to
 *  build.
 */
@property(nonatomic, copy, nullable) NSString *object;

@end


/**
 *  Location of the source manifest in Google Cloud Storage. This feature is in
 *  Preview; see description
 *  [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
 */
@interface GTLRCloudBuild_StorageSourceManifest : GTLRObject

/**
 *  Google Cloud Storage bucket containing the source manifest (see [Bucket Name
 *  Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Google Cloud Storage generation for the object. If the generation is
 *  omitted, the latest generation will be used.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  Google Cloud Storage object containing the source manifest. This object must
 *  be a JSON file.
 */
@property(nonatomic, copy, nullable) NSString *object;

@end


/**
 *  Start and end times for a build execution phase.
 */
@interface GTLRCloudBuild_TimeSpan : GTLRObject

/** End of time span. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Start of time span. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  Metadata for `UpdateBitbucketServerConfig` operation.
 */
@interface GTLRCloudBuild_UpdateBitbucketServerConfigOperationMetadata : GTLRObject

/**
 *  The resource name of the BitbucketServerConfig to be updated. Format:
 *  `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
 */
@property(nonatomic, copy, nullable) NSString *bitbucketServerConfig;

/** Time the operation was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/** Time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

@end


/**
 *  Metadata for `UpdateGitHubEnterpriseConfig` operation.
 */
@interface GTLRCloudBuild_UpdateGitHubEnterpriseConfigOperationMetadata : GTLRObject

/** Time the operation was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/** Time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The resource name of the GitHubEnterprise to be updated. Format:
 *  `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
 */
@property(nonatomic, copy, nullable) NSString *githubEnterpriseConfig;

@end


/**
 *  Metadata for `UpdateGitLabConfig` operation.
 */
@interface GTLRCloudBuild_UpdateGitLabConfigOperationMetadata : GTLRObject

/** Time the operation was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/** Time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The resource name of the GitLabConfig to be created. Format:
 *  `projects/{project}/locations/{location}/gitlabConfigs/{id}`.
 */
@property(nonatomic, copy, nullable) NSString *gitlabConfig;

@end


/**
 *  Metadata for the `UpdateWorkerPool` operation.
 */
@interface GTLRCloudBuild_UpdateWorkerPoolOperationMetadata : GTLRObject

/** Time the operation was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/** Time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The resource name of the `WorkerPool` being updated. Format:
 *  `projects/{project}/locations/{location}/workerPools/{worker_pool}`.
 */
@property(nonatomic, copy, nullable) NSString *workerPool;

@end


/**
 *  A Maven artifact uploaded using the MavenArtifact directive.
 */
@interface GTLRCloudBuild_UploadedMavenArtifact : GTLRObject

/** Hash types and values of the Maven Artifact. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_FileHashes *fileHashes;

/**
 *  Output only. Stores timing information for pushing the specified artifact.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_TimeSpan *pushTiming;

/** URI of the uploaded artifact. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Artifact uploaded using the PythonPackage directive.
 */
@interface GTLRCloudBuild_UploadedPythonPackage : GTLRObject

/** Hash types and values of the Python Artifact. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_FileHashes *fileHashes;

/**
 *  Output only. Stores timing information for pushing the specified artifact.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_TimeSpan *pushTiming;

/** URI of the uploaded artifact. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Volume describes a Docker container volume which is mounted into build steps
 *  in order to persist files across build step execution.
 */
@interface GTLRCloudBuild_Volume : GTLRObject

/**
 *  Name of the volume to mount. Volume names must be unique per build step and
 *  must be valid names for Docker volumes. Each named volume must be used by at
 *  least two build steps.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Path at which to mount the volume. Paths must be absolute and cannot
 *  conflict with other volume paths on the same build step or with certain
 *  reserved volume paths.
 */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  A non-fatal problem encountered during the execution of the build.
 */
@interface GTLRCloudBuild_Warning : GTLRObject

/**
 *  The priority for this warning.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_Warning_Priority_Alert e.g. alerts that a feature
 *        used in the build is pending removal (Value: "ALERT")
 *    @arg @c kGTLRCloudBuild_Warning_Priority_Info e.g. deprecation warnings
 *        and alternative feature highlights. (Value: "INFO")
 *    @arg @c kGTLRCloudBuild_Warning_Priority_PriorityUnspecified Should not be
 *        used. (Value: "PRIORITY_UNSPECIFIED")
 *    @arg @c kGTLRCloudBuild_Warning_Priority_Warning e.g. automated detection
 *        of possible issues with the build. (Value: "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *priority;

/** Explanation of the warning generated. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  WebhookConfig describes the configuration of a trigger that creates a build
 *  whenever a webhook is sent to a trigger's webhook URL.
 */
@interface GTLRCloudBuild_WebhookConfig : GTLRObject

/** Required. Resource name for the secret required as a URL parameter. */
@property(nonatomic, copy, nullable) NSString *secret;

/**
 *  Potential issues with the underlying Pub/Sub subscription configuration.
 *  Only populated on get requests.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_WebhookConfig_State_Ok The auth configuration is
 *        properly setup. (Value: "OK")
 *    @arg @c kGTLRCloudBuild_WebhookConfig_State_SecretDeleted The secret
 *        provided in auth_method has been deleted. (Value: "SECRET_DELETED")
 *    @arg @c kGTLRCloudBuild_WebhookConfig_State_StateUnspecified The webhook
 *        auth configuration not been checked. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Defines the configuration to be used for creating workers in the pool.
 */
@interface GTLRCloudBuild_WorkerConfig : GTLRObject

/**
 *  Size of the disk attached to the worker, in GB. See [Worker pool config
 *  file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema).
 *  Specify a value of up to 1000. If `0` is specified, Cloud Build will use a
 *  standard disk size.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *diskSizeGb;

/**
 *  Machine type of a worker, such as `e2-medium`. See [Worker pool config
 *  file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema).
 *  If left blank, Cloud Build will use a sensible default.
 */
@property(nonatomic, copy, nullable) NSString *machineType;

@end


/**
 *  Configuration for a `WorkerPool`. Cloud Build owns and maintains a pool of
 *  workers for general use and have no access to a project's private network.
 *  By default, builds submitted to Cloud Build will use a worker from this
 *  pool. If your build needs access to resources on a private network, create
 *  and use a `WorkerPool` to run your builds. Private `WorkerPool`s give your
 *  builds access to any single VPC network that you administer, including any
 *  on-prem resources connected to that VPC network. For an overview of private
 *  pools, see [Private pools
 *  overview](https://cloud.google.com/build/docs/private-pools/private-pools-overview).
 */
@interface GTLRCloudBuild_WorkerPool : GTLRObject

/**
 *  User specified annotations. See https://google.aip.dev/128#annotations for
 *  more details such as format and size limitations.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_WorkerPool_Annotations *annotations;

/**
 *  Output only. Time at which the request to create the `WorkerPool` was
 *  received.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. Time at which the request to delete the `WorkerPool` was
 *  received.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/**
 *  A user-specified, human-readable name for the `WorkerPool`. If provided,
 *  this value must be 1-63 characters.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. Checksum computed by the server. May be sent on update and
 *  delete requests to ensure that the client has an up-to-date value before
 *  proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. The resource name of the `WorkerPool`, with format
 *  `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The
 *  value of `{worker_pool}` is provided by `worker_pool_id` in
 *  `CreateWorkerPool` request and the value of `{location}` is determined by
 *  the endpoint accessed.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Legacy Private Pool configuration. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_PrivatePoolV1Config *privatePoolV1Config;

/**
 *  Output only. `WorkerPool` state.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_WorkerPool_State_Creating `WorkerPool` is being
 *        created. (Value: "CREATING")
 *    @arg @c kGTLRCloudBuild_WorkerPool_State_Deleted `WorkerPool` is deleted.
 *        (Value: "DELETED")
 *    @arg @c kGTLRCloudBuild_WorkerPool_State_Deleting `WorkerPool` is being
 *        deleted: cancelling builds and draining workers. (Value: "DELETING")
 *    @arg @c kGTLRCloudBuild_WorkerPool_State_Running `WorkerPool` is running.
 *        (Value: "RUNNING")
 *    @arg @c kGTLRCloudBuild_WorkerPool_State_StateUnspecified State of the
 *        `WorkerPool` is unknown. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudBuild_WorkerPool_State_Updating `WorkerPool` is being
 *        updated; new builds cannot be run. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. A unique identifier for the `WorkerPool`. */
@property(nonatomic, copy, nullable) NSString *uid;

/**
 *  Output only. Time at which the request to update the `WorkerPool` was
 *  received.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  User specified annotations. See https://google.aip.dev/128#annotations for
 *  more details such as format and size limitations.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudBuild_WorkerPool_Annotations : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
