// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Build API (cloudbuild/v2)
// Description:
//   Creates and manages builds on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/cloud-build/docs/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudBuild_AuditConfig;
@class GTLRCloudBuild_AuditLogConfig;
@class GTLRCloudBuild_Binding;
@class GTLRCloudBuild_Capabilities;
@class GTLRCloudBuild_ChildStatusReference;
@class GTLRCloudBuild_Connection;
@class GTLRCloudBuild_Connection_Annotations;
@class GTLRCloudBuild_CreateRepositoryRequest;
@class GTLRCloudBuild_EmbeddedTask;
@class GTLRCloudBuild_EmbeddedTask_Annotations;
@class GTLRCloudBuild_EmptyDirVolumeSource;
@class GTLRCloudBuild_EnvVar;
@class GTLRCloudBuild_ExecAction;
@class GTLRCloudBuild_Expr;
@class GTLRCloudBuild_GitHubConfig;
@class GTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition;
@class GTLRCloudBuild_GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig;
@class GTLRCloudBuild_GoogleDevtoolsCloudbuildV2GitLabConfig;
@class GTLRCloudBuild_GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig;
@class GTLRCloudBuild_HttpBody_Extensions_Item;
@class GTLRCloudBuild_InstallationState;
@class GTLRCloudBuild_Location;
@class GTLRCloudBuild_Location_Labels;
@class GTLRCloudBuild_Location_Metadata;
@class GTLRCloudBuild_OAuthCredential;
@class GTLRCloudBuild_Operation_Metadata;
@class GTLRCloudBuild_Operation_Response;
@class GTLRCloudBuild_Param;
@class GTLRCloudBuild_ParamSpec;
@class GTLRCloudBuild_ParamValue;
@class GTLRCloudBuild_PipelineRef;
@class GTLRCloudBuild_PipelineRun_Annotations;
@class GTLRCloudBuild_PipelineSpec;
@class GTLRCloudBuild_PipelineTask;
@class GTLRCloudBuild_PipelineWorkspaceDeclaration;
@class GTLRCloudBuild_Policy;
@class GTLRCloudBuild_Probe;
@class GTLRCloudBuild_PropertySpec;
@class GTLRCloudBuild_Repository;
@class GTLRCloudBuild_Repository_Annotations;
@class GTLRCloudBuild_SecretVolumeSource;
@class GTLRCloudBuild_SecurityContext;
@class GTLRCloudBuild_Sidecar;
@class GTLRCloudBuild_SkippedTask;
@class GTLRCloudBuild_Status;
@class GTLRCloudBuild_Status_Details_Item;
@class GTLRCloudBuild_Step;
@class GTLRCloudBuild_StepTemplate;
@class GTLRCloudBuild_TaskRef;
@class GTLRCloudBuild_TaskResult;
@class GTLRCloudBuild_TaskResult_Properties;
@class GTLRCloudBuild_TaskSpec;
@class GTLRCloudBuild_TimeoutFields;
@class GTLRCloudBuild_UserCredential;
@class GTLRCloudBuild_VolumeClaim;
@class GTLRCloudBuild_VolumeMount;
@class GTLRCloudBuild_VolumeSource;
@class GTLRCloudBuild_WhenExpression;
@class GTLRCloudBuild_WorkspaceBinding;
@class GTLRCloudBuild_WorkspaceDeclaration;
@class GTLRCloudBuild_WorkspacePipelineTaskBinding;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudBuild_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_ChildStatusReference.type

/**
 *  TaskRun.
 *
 *  Value: "TASK_RUN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_ChildStatusReference_Type_TaskRun;
/**
 *  Default enum type; should not be used.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_ChildStatusReference_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition.severity

/**
 *  Severity is informational only.
 *
 *  Value: "INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition_Severity_Info;
/**
 *  Default enum type; should not be used.
 *
 *  Value: "SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition_Severity_SeverityUnspecified;
/**
 *  Severity is warning.
 *
 *  Value: "WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition_Severity_Warning;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition.status

/**
 *  Failure
 *
 *  Value: "FALSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition_Status_False;
/**
 *  Success
 *
 *  Value: "TRUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition_Status_True;
/**
 *  Default enum type indicating execution is still ongoing.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition_Status_Unknown;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_InstallationState.stage

/**
 *  Installation process has been completed.
 *
 *  Value: "COMPLETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_InstallationState_Stage_Complete;
/**
 *  Only for GitHub Enterprise. An App creation has been requested. The user
 *  needs to confirm the creation in their GitHub enterprise host.
 *
 *  Value: "PENDING_CREATE_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_InstallationState_Stage_PendingCreateApp;
/**
 *  User needs to follow the link to install the GitHub (or Enterprise) App.
 *
 *  Value: "PENDING_INSTALL_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_InstallationState_Stage_PendingInstallApp;
/**
 *  User needs to authorize the GitHub (or Enterprise) App via OAuth.
 *
 *  Value: "PENDING_USER_OAUTH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_InstallationState_Stage_PendingUserOauth;
/**
 *  No stage specified.
 *
 *  Value: "STAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_InstallationState_Stage_StageUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_ParamSpec.type

/**
 *  Arrary type.
 *
 *  Value: "ARRAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_ParamSpec_Type_Array;
/**
 *  Default
 *
 *  Value: "STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_ParamSpec_Type_String;
/**
 *  Default enum type; should not be used.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_ParamSpec_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_ParamValue.type

/**
 *  Array type
 *
 *  Value: "ARRAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_ParamValue_Type_Array;
/**
 *  Default
 *
 *  Value: "STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_ParamValue_Type_String;
/**
 *  Default enum type; should not be used.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_ParamValue_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_PipelineRef.resolver

/**
 *  Bundles resolver. https://tekton.dev/docs/pipelines/bundle-resolver/
 *
 *  Value: "BUNDLES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_PipelineRef_Resolver_Bundles;
/**
 *  GCB repo resolver.
 *
 *  Value: "GCB_REPO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_PipelineRef_Resolver_GcbRepo;
/**
 *  Simple Git resolver. https://tekton.dev/docs/pipelines/git-resolver/
 *
 *  Value: "GIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_PipelineRef_Resolver_Git;
/**
 *  Default enum type; should not be used.
 *
 *  Value: "RESOLVER_NAME_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_PipelineRef_Resolver_ResolverNameUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_PipelineRun.pipelineRunStatus

/**
 *  Cancelled status.
 *
 *  Value: "PIPELINE_RUN_CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_PipelineRun_PipelineRunStatus_PipelineRunCancelled;
/**
 *  Default enum type; should not be used.
 *
 *  Value: "PIPELINE_RUN_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_PipelineRun_PipelineRunStatus_PipelineRunStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_PropertySpec.type

/**
 *  Default
 *
 *  Value: "STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_PropertySpec_Type_String;
/**
 *  Default enum type; should not be used.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_PropertySpec_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_TaskRef.resolver

/**
 *  Bundles resolver. https://tekton.dev/docs/pipelines/bundle-resolver/
 *
 *  Value: "BUNDLES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_TaskRef_Resolver_Bundles;
/**
 *  GCB repo resolver.
 *
 *  Value: "GCB_REPO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_TaskRef_Resolver_GcbRepo;
/**
 *  Simple Git resolver. https://tekton.dev/docs/pipelines/git-resolver/
 *
 *  Value: "GIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_TaskRef_Resolver_Git;
/**
 *  Default enum type; should not be used.
 *
 *  Value: "RESOLVER_NAME_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_TaskRef_Resolver_ResolverNameUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_TaskResult.type

/**
 *  Array type
 *
 *  Value: "ARRAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_TaskResult_Type_Array;
/**
 *  Object type
 *
 *  Value: "OBJECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_TaskResult_Type_Object;
/**
 *  Default
 *
 *  Value: "STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_TaskResult_Type_String;
/**
 *  Default enum type; should not be used.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_TaskResult_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_TaskSpec.managedSidecars

/**
 *  Default enum type; should not be used.
 *
 *  Value: "MANAGED_SIDECAR_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_TaskSpec_ManagedSidecars_ManagedSidecarUnspecified;
/**
 *  Sidecar for a privileged docker daemon.
 *
 *  Value: "PRIVILEGED_DOCKER_DAEMON"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_TaskSpec_ManagedSidecars_PrivilegedDockerDaemon;

// ----------------------------------------------------------------------------
// GTLRCloudBuild_WhenExpression.expressionOperator

/**
 *  Default enum type; should not be used.
 *
 *  Value: "EXPRESSION_OPERATOR_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_WhenExpression_ExpressionOperator_ExpressionOperatorUnspecified;
/**
 *  Input is in values.
 *
 *  Value: "IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_WhenExpression_ExpressionOperator_In;
/**
 *  Input is not in values.
 *
 *  Value: "NOT_IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBuild_WhenExpression_ExpressionOperator_NotIn;

/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRCloudBuild_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRCloudBuild_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_AuditLogConfig_LogType_AdminRead Admin reads.
 *        Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRCloudBuild_AuditLogConfig_LogType_DataRead Data reads.
 *        Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRCloudBuild_AuditLogConfig_LogType_DataWrite Data writes.
 *        Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRCloudBuild_AuditLogConfig_LogType_LogTypeUnspecified Default
 *        case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Message for creating repositoritories in batch.
 */
@interface GTLRCloudBuild_BatchCreateRepositoriesRequest : GTLRObject

/** Required. The request messages specifying the repositories to create. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_CreateRepositoryRequest *> *requests;

@end


/**
 *  Message for response of creating repositories in batch.
 */
@interface GTLRCloudBuild_BatchCreateRepositoriesResponse : GTLRObject

/** Repository resources created. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Repository *> *repositories;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRCloudBuild_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `domain:{domain}`: The G Suite domain
 *  (primary) that represents all the users of that domain. For example,
 *  `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a user that has been
 *  recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRCloudBuild_CancelOperationRequest : GTLRObject
@end


/**
 *  Capabilities adds and removes POSIX capabilities from running containers.
 */
@interface GTLRCloudBuild_Capabilities : GTLRObject

/** Optional. Added capabilities +optional */
@property(nonatomic, strong, nullable) NSArray<NSString *> *add;

/** Optional. Removed capabilities +optional */
@property(nonatomic, strong, nullable) NSArray<NSString *> *drop;

@end


/**
 *  ChildStatusReference is used to point to the statuses of individual TaskRuns
 *  and Runs within this PipelineRun.
 */
@interface GTLRCloudBuild_ChildStatusReference : GTLRObject

/** Name is the name of the TaskRun or Run this is referencing. */
@property(nonatomic, copy, nullable) NSString *name;

/** PipelineTaskName is the name of the PipelineTask this is referencing. */
@property(nonatomic, copy, nullable) NSString *pipelineTaskName;

/**
 *  Output only. Type of the child reference.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_ChildStatusReference_Type_TaskRun TaskRun. (Value:
 *        "TASK_RUN")
 *    @arg @c kGTLRCloudBuild_ChildStatusReference_Type_TypeUnspecified Default
 *        enum type; should not be used. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  WhenExpressions is the list of checks guarding the execution of the
 *  PipelineTask
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_WhenExpression *> *whenExpressions;

@end


/**
 *  A connection to a SCM like GitHub, GitHub Enterprise, Bitbucket Data Center
 *  or GitLab.
 */
@interface GTLRCloudBuild_Connection : GTLRObject

/** Allows clients to store small amounts of arbitrary data. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Connection_Annotations *annotations;

/**
 *  Output only. Server assigned timestamp for when the connection was created.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  If disabled is set to true, functionality is disabled for this connection.
 *  Repository based API methods and webhooks processing for repositories in
 *  this connection will be disabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

/**
 *  This checksum is computed by the server based on the value of other fields,
 *  and may be sent on update and delete requests to ensure the client has an
 *  up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Configuration for connections to github.com. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GitHubConfig *githubConfig;

/** Configuration for connections to an instance of GitHub Enterprise. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig *githubEnterpriseConfig;

/**
 *  Configuration for connections to gitlab.com or an instance of GitLab
 *  Enterprise.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GoogleDevtoolsCloudbuildV2GitLabConfig *gitlabConfig;

/** Output only. Installation state of the Connection. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_InstallationState *installationState;

/**
 *  Immutable. The resource name of the connection, in the format
 *  `projects/{project}/locations/{location}/connections/{connection_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Set to true when the connection is being set up or updated in
 *  the background.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/**
 *  Output only. Server assigned timestamp for when the connection was updated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Allows clients to store small amounts of arbitrary data.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudBuild_Connection_Annotations : GTLRObject
@end


/**
 *  Message for creating a Repository.
 */
@interface GTLRCloudBuild_CreateRepositoryRequest : GTLRObject

/**
 *  Required. The connection to contain the repository. If the request is part
 *  of a BatchCreateRepositoriesRequest, this field should be empty or match the
 *  parent specified there.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. The repository to create. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Repository *repository;

/**
 *  Required. The ID to use for the repository, which will become the final
 *  component of the repository's resource name. This ID should be unique in the
 *  connection. Allows alphanumeric characters and any of -._~%!$&'()*+,;=\@.
 */
@property(nonatomic, copy, nullable) NSString *repositoryId;

@end


/**
 *  EmbeddedTask defines a Task that is embedded in a Pipeline.
 */
@interface GTLRCloudBuild_EmbeddedTask : GTLRObject

/** User annotations. See https://google.aip.dev/128#annotations */
@property(nonatomic, strong, nullable) GTLRCloudBuild_EmbeddedTask_Annotations *annotations;

/** Spec to instantiate this TaskRun. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_TaskSpec *taskSpec;

@end


/**
 *  User annotations. See https://google.aip.dev/128#annotations
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudBuild_EmbeddedTask_Annotations : GTLRObject
@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRCloudBuild_Empty : GTLRObject
@end


/**
 *  Represents an empty Volume source.
 */
@interface GTLRCloudBuild_EmptyDirVolumeSource : GTLRObject
@end


/**
 *  Environment variable.
 */
@interface GTLRCloudBuild_EnvVar : GTLRObject

/** Name of the environment variable. */
@property(nonatomic, copy, nullable) NSString *name;

/** Value of the environment variable. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  ExecAction describes a "run in container" action.
 */
@interface GTLRCloudBuild_ExecAction : GTLRObject

/**
 *  Optional. Command is the command line to execute inside the container, the
 *  working directory for the command is root ('/') in the container's
 *  filesystem. The command is simply exec'd, it is not run inside a shell, so
 *  traditional shell instructions ('|', etc) won't work. To use a shell, you
 *  need to explicitly call out to that shell. Exit status of 0 is treated as
 *  live/healthy and non-zero is unhealthy. +optional
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *command;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRCloudBuild_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Response for fetching git refs
 */
@interface GTLRCloudBuild_FetchGitRefsResponse : GTLRObject

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Name of the refs fetched. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *refNames;

@end


/**
 *  Response message for FetchLinkableRepositories.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "repositories" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudBuild_FetchLinkableRepositoriesResponse : GTLRCollectionObject

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  repositories ready to be created.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Repository *> *repositories;

@end


/**
 *  Message for fetching SCM read token.
 */
@interface GTLRCloudBuild_FetchReadTokenRequest : GTLRObject
@end


/**
 *  Message for responding to get read token.
 */
@interface GTLRCloudBuild_FetchReadTokenResponse : GTLRObject

/** Expiration timestamp. Can be empty if unknown or non-expiring. */
@property(nonatomic, strong, nullable) GTLRDateTime *expirationTime;

/** The token content. */
@property(nonatomic, copy, nullable) NSString *token;

@end


/**
 *  Message for fetching SCM read/write token.
 */
@interface GTLRCloudBuild_FetchReadWriteTokenRequest : GTLRObject
@end


/**
 *  Message for responding to get read/write token.
 */
@interface GTLRCloudBuild_FetchReadWriteTokenResponse : GTLRObject

/** Expiration timestamp. Can be empty if unknown or non-expiring. */
@property(nonatomic, strong, nullable) GTLRDateTime *expirationTime;

/** The token content. */
@property(nonatomic, copy, nullable) NSString *token;

@end


/**
 *  Configuration for connections to github.com.
 */
@interface GTLRCloudBuild_GitHubConfig : GTLRObject

/**
 *  GitHub App installation id.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *appInstallationId;

/**
 *  OAuth credential of the account that authorized the Cloud Build GitHub App.
 *  It is recommended to use a robot account instead of a human user account.
 *  The OAuth token must be tied to the Cloud Build GitHub App.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_OAuthCredential *authorizerCredential;

@end


/**
 *  Conditions defines a readiness condition for a Knative resource.
 */
@interface GTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition : GTLRObject

/**
 *  LastTransitionTime is the last time the condition transitioned from one
 *  status to another.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastTransitionTime;

/** A human readable message indicating details about the transition. */
@property(nonatomic, copy, nullable) NSString *message;

/** The reason for the condition's last transition. */
@property(nonatomic, copy, nullable) NSString *reason;

/**
 *  Severity with which to treat failures of this type of condition.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition_Severity_Info
 *        Severity is informational only. (Value: "INFO")
 *    @arg @c kGTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition_Severity_SeverityUnspecified
 *        Default enum type; should not be used. (Value: "SEVERITY_UNSPECIFIED")
 *    @arg @c kGTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition_Severity_Warning
 *        Severity is warning. (Value: "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *severity;

/**
 *  Status of the condition.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition_Status_False
 *        Failure (Value: "FALSE")
 *    @arg @c kGTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition_Status_True
 *        Success (Value: "TRUE")
 *    @arg @c kGTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition_Status_Unknown
 *        Default enum type indicating execution is still ongoing. (Value:
 *        "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *status;

/** Type of condition. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Configuration for connections to an instance of GitHub Enterprise.
 */
@interface GTLRCloudBuild_GoogleDevtoolsCloudbuildV2GitHubEnterpriseConfig : GTLRObject

/** Required. API Key used for authentication of webhook events. */
@property(nonatomic, copy, nullable) NSString *apiKey;

/**
 *  Id of the GitHub App created from the manifest.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *appId;

/**
 *  ID of the installation of the GitHub App.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *appInstallationId;

/** The URL-friendly name of the GitHub App. */
@property(nonatomic, copy, nullable) NSString *appSlug;

/** Required. The URI of the GitHub Enterprise host this connection is for. */
@property(nonatomic, copy, nullable) NSString *hostUri;

/**
 *  SecretManager resource containing the private key of the GitHub App,
 *  formatted as `projects/ * /secrets/ * /versions/ *`.
 */
@property(nonatomic, copy, nullable) NSString *privateKeySecretVersion;

/** Output only. GitHub Enterprise version installed at the host_uri. */
@property(nonatomic, copy, nullable) NSString *serverVersion;

/**
 *  Configuration for using Service Directory to privately connect to a GitHub
 *  Enterprise server. This should only be set if the GitHub Enterprise server
 *  is hosted on-premises and not reachable by public internet. If this field is
 *  left empty, calls to the GitHub Enterprise server will be made over the
 *  public internet.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig *serviceDirectoryConfig;

/** SSL certificate to use for requests to GitHub Enterprise. */
@property(nonatomic, copy, nullable) NSString *sslCa;

/**
 *  SecretManager resource containing the webhook secret of the GitHub App,
 *  formatted as `projects/ * /secrets/ * /versions/ *`.
 */
@property(nonatomic, copy, nullable) NSString *webhookSecretSecretVersion;

@end


/**
 *  Configuration for connections to gitlab.com or an instance of GitLab
 *  Enterprise.
 */
@interface GTLRCloudBuild_GoogleDevtoolsCloudbuildV2GitLabConfig : GTLRObject

/** Required. A GitLab personal access token with the `api` scope access. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_UserCredential *authorizerCredential;

/**
 *  The URI of the GitLab Enterprise host this connection is for. If not
 *  specified, the default value is https://gitlab.com.
 */
@property(nonatomic, copy, nullable) NSString *hostUri;

/**
 *  Required. A GitLab personal access token with the minimum `read_api` scope
 *  access.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_UserCredential *readAuthorizerCredential;

/**
 *  Output only. Version of the GitLab Enterprise server running on the
 *  `host_uri`.
 */
@property(nonatomic, copy, nullable) NSString *serverVersion;

/**
 *  Configuration for using Service Directory to privately connect to a GitLab
 *  Enterprise server. This should only be set if the GitLab Enterprise server
 *  is hosted on-premises and not reachable by public internet. If this field is
 *  left empty, calls to the GitLab Enterprise server will be made over the
 *  public internet.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig *serviceDirectoryConfig;

/** SSL certificate to use for requests to GitLab Enterprise. */
@property(nonatomic, copy, nullable) NSString *sslCa;

/**
 *  Required. Immutable. SecretManager resource containing the webhook secret of
 *  a GitLab Enterprise project, formatted as `projects/ * /secrets/ *
 *  /versions/ *`.
 */
@property(nonatomic, copy, nullable) NSString *webhookSecretSecretVersion;

@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRCloudBuild_GoogleDevtoolsCloudbuildV2OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  ServiceDirectoryConfig represents Service Directory configuration for a
 *  connection.
 */
@interface GTLRCloudBuild_GoogleDevtoolsCloudbuildV2ServiceDirectoryConfig : GTLRObject

/**
 *  Required. The Service Directory service name. Format:
 *  projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Message that represents an arbitrary HTTP body. It should only be used for
 *  payload formats that can't be represented as JSON, such as raw binary or an
 *  HTML page. This message can be used both in streaming and non-streaming API
 *  methods in the request as well as the response. It can be used as a
 *  top-level request field, which is convenient if one wants to extract
 *  parameters from either the URL or HTTP template into the request fields and
 *  also want access to the raw HTTP body. Example: message GetResourceRequest {
 *  // A unique request id. string request_id = 1; // The raw HTTP body is bound
 *  to this field. google.api.HttpBody http_body = 2; } service ResourceService
 *  { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc
 *  UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); }
 *  Example with streaming methods: service CaldavService { rpc
 *  GetCalendar(stream google.api.HttpBody) returns (stream
 *  google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns
 *  (stream google.api.HttpBody); } Use of this type only changes how the
 *  request and response bodies are handled, all other features will continue to
 *  work unchanged.
 */
@interface GTLRCloudBuild_HttpBody : GTLRObject

/**
 *  The HTTP Content-Type header value specifying the content type of the body.
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  The HTTP request/response body as raw binary.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  Application specific response metadata. Must be set in the first response
 *  for streaming APIs.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_HttpBody_Extensions_Item *> *extensions;

@end


/**
 *  GTLRCloudBuild_HttpBody_Extensions_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_HttpBody_Extensions_Item : GTLRObject
@end


/**
 *  Describes stage and necessary actions to be taken by the user to complete
 *  the installation. Used for GitHub and GitHub Enterprise based connections.
 */
@interface GTLRCloudBuild_InstallationState : GTLRObject

/**
 *  Output only. Link to follow for next action. Empty string if the
 *  installation is already complete.
 */
@property(nonatomic, copy, nullable) NSString *actionUri;

/**
 *  Output only. Message of what the user should do next to continue the
 *  installation. Empty string if the installation is already complete.
 */
@property(nonatomic, copy, nullable) NSString *message;

/**
 *  Output only. Current step of the installation process.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_InstallationState_Stage_Complete Installation
 *        process has been completed. (Value: "COMPLETE")
 *    @arg @c kGTLRCloudBuild_InstallationState_Stage_PendingCreateApp Only for
 *        GitHub Enterprise. An App creation has been requested. The user needs
 *        to confirm the creation in their GitHub enterprise host. (Value:
 *        "PENDING_CREATE_APP")
 *    @arg @c kGTLRCloudBuild_InstallationState_Stage_PendingInstallApp User
 *        needs to follow the link to install the GitHub (or Enterprise) App.
 *        (Value: "PENDING_INSTALL_APP")
 *    @arg @c kGTLRCloudBuild_InstallationState_Stage_PendingUserOauth User
 *        needs to authorize the GitHub (or Enterprise) App via OAuth. (Value:
 *        "PENDING_USER_OAUTH")
 *    @arg @c kGTLRCloudBuild_InstallationState_Stage_StageUnspecified No stage
 *        specified. (Value: "STAGE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *stage;

@end


/**
 *  Message for response to listing Connections.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "connections" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudBuild_ListConnectionsResponse : GTLRCollectionObject

/**
 *  The list of Connections.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Connection *> *connections;

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudBuild_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Message for response to listing Repositories.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "repositories" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudBuild_ListRepositoriesResponse : GTLRCollectionObject

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of Repositories.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Repository *> *repositories;

@end


/**
 *  A resource that represents a Google Cloud location.
 */
@interface GTLRCloudBuild_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudBuild_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_Location_Metadata : GTLRObject
@end


/**
 *  Represents an OAuth token of the account that authorized the Connection, and
 *  associated metadata.
 */
@interface GTLRCloudBuild_OAuthCredential : GTLRObject

/**
 *  A SecretManager resource containing the OAuth token that authorizes the
 *  Cloud Build connection. Format: `projects/ * /secrets/ * /versions/ *`.
 */
@property(nonatomic, copy, nullable) NSString *oauthTokenSecretVersion;

/** Output only. The username associated to this token. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudBuild_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRCloudBuild_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have been cancelled successfully have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cancelRequested;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusDetail;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Param defined with name and value. PipelineRef can be used to refer to a
 *  specific instance of a Pipeline.
 */
@interface GTLRCloudBuild_Param : GTLRObject

/** Name of the parameter. */
@property(nonatomic, copy, nullable) NSString *name;

/** Value of the parameter. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_ParamValue *value;

@end


/**
 *  ParamSpec defines parameters needed beyond typed inputs (such as resources).
 *  Parameter values are provided by users as inputs on a TaskRun or
 *  PipelineRun.
 */
@interface GTLRCloudBuild_ParamSpec : GTLRObject

/**
 *  The default value a parameter takes if no input value is supplied
 *
 *  Remapped to 'defaultProperty' to avoid language reserved word 'default'.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_ParamValue *defaultProperty;

/**
 *  Description of the ParamSpec
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Name of the ParamSpec */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Type of ParamSpec
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_ParamSpec_Type_Array Arrary type. (Value: "ARRAY")
 *    @arg @c kGTLRCloudBuild_ParamSpec_Type_String Default (Value: "STRING")
 *    @arg @c kGTLRCloudBuild_ParamSpec_Type_TypeUnspecified Default enum type;
 *        should not be used. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Parameter value.
 */
@interface GTLRCloudBuild_ParamValue : GTLRObject

/** Value of the parameter if type is array. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *arrayVal;

/** Value of the parameter if type is string. */
@property(nonatomic, copy, nullable) NSString *stringVal;

/**
 *  Type of parameter.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_ParamValue_Type_Array Array type (Value: "ARRAY")
 *    @arg @c kGTLRCloudBuild_ParamValue_Type_String Default (Value: "STRING")
 *    @arg @c kGTLRCloudBuild_ParamValue_Type_TypeUnspecified Default enum type;
 *        should not be used. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  PipelineRef can be used to refer to a specific instance of a Pipeline.
 */
@interface GTLRCloudBuild_PipelineRef : GTLRObject

/** Name of the Pipeline. */
@property(nonatomic, copy, nullable) NSString *name GTLR_DEPRECATED;

/**
 *  Params contains the parameters used to identify the referenced Tekton
 *  resource. Example entries might include "repo" or "path" but the set of
 *  params ultimately depends on the chosen resolver.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Param *> *params;

/**
 *  Resolver is the name of the resolver that should perform resolution of the
 *  referenced Tekton resource.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_PipelineRef_Resolver_Bundles Bundles resolver.
 *        https://tekton.dev/docs/pipelines/bundle-resolver/ (Value: "BUNDLES")
 *    @arg @c kGTLRCloudBuild_PipelineRef_Resolver_GcbRepo GCB repo resolver.
 *        (Value: "GCB_REPO")
 *    @arg @c kGTLRCloudBuild_PipelineRef_Resolver_Git Simple Git resolver.
 *        https://tekton.dev/docs/pipelines/git-resolver/ (Value: "GIT")
 *    @arg @c kGTLRCloudBuild_PipelineRef_Resolver_ResolverNameUnspecified
 *        Default enum type; should not be used. (Value:
 *        "RESOLVER_NAME_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *resolver;

@end


/**
 *  Message describing PipelineRun object
 */
@interface GTLRCloudBuild_PipelineRun : GTLRObject

/** User annotations. See https://google.aip.dev/128#annotations */
@property(nonatomic, strong, nullable) GTLRCloudBuild_PipelineRun_Annotations *annotations;

/**
 *  Output only. List of TaskRun and Run names and PipelineTask names for
 *  children of this PipelineRun.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_ChildStatusReference *> *childReferences;

/** Output only. Time the pipeline completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completionTime;

/**
 *  Output only. Kubernetes Conditions convention for PipelineRun status and
 *  error.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_GoogleDevtoolsCloudbuildV2Condition *> *conditions;

/**
 *  Output only. Time at which the request to create the `PipelineRun` was
 *  received.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Needed for declarative-friendly resources. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. FinallyStartTime is when all non-finally tasks have been
 *  completed and only finally tasks are being executed. +optional
 */
@property(nonatomic, strong, nullable) GTLRDateTime *finallyStartTime;

/**
 *  Output only. The `PipelineRun` name with format
 *  `projects/{project}/locations/{location}/pipelineRuns/{pipeline_run}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Params is a list of parameter names and values. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Param *> *params;

/** PipelineRef refer to a specific instance of a Pipeline. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_PipelineRef *pipelineRef;

/**
 *  Pipelinerun status the user can provide. Used for cancellation.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_PipelineRun_PipelineRunStatus_PipelineRunCancelled
 *        Cancelled status. (Value: "PIPELINE_RUN_CANCELLED")
 *    @arg @c kGTLRCloudBuild_PipelineRun_PipelineRunStatus_PipelineRunStatusUnspecified
 *        Default enum type; should not be used. (Value:
 *        "PIPELINE_RUN_STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *pipelineRunStatus;

/** PipelineSpec defines the desired state of Pipeline. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_PipelineSpec *pipelineSpec;

/** Output only. The exact PipelineSpec used to instantiate the run. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_PipelineSpec *resolvedPipelineSpec;

/** Service account used in the Pipeline. */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Output only. List of tasks that were skipped due to when expressions
 *  evaluating to false.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_SkippedTask *> *skippedTasks;

/** Output only. Time the pipeline is actually started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Time after which the Pipeline times out. Currently three keys are accepted
 *  in the map pipeline, tasks and finally with Timeouts.pipeline >=
 *  Timeouts.tasks + Timeouts.finally
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_TimeoutFields *timeouts;

/** Output only. A unique identifier for the `PipelineRun`. */
@property(nonatomic, copy, nullable) NSString *uid;

/**
 *  Output only. Time at which the request to update the `PipelineRun` was
 *  received.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** Output only. The WorkerPool used to run this PipelineRun. */
@property(nonatomic, copy, nullable) NSString *workerPool;

/** Output only. The Workflow used to create this PipelineRun. */
@property(nonatomic, copy, nullable) NSString *workflow;

/** Workspaces is a list of WorkspaceBindings from volumes to workspaces. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_WorkspaceBinding *> *workspaces;

@end


/**
 *  User annotations. See https://google.aip.dev/128#annotations
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudBuild_PipelineRun_Annotations : GTLRObject
@end


/**
 *  PipelineSpec defines the desired state of Pipeline.
 */
@interface GTLRCloudBuild_PipelineSpec : GTLRObject

/**
 *  List of Tasks that execute just before leaving the Pipeline i.e. either
 *  after all Tasks are finished executing successfully or after a failure which
 *  would result in ending the Pipeline.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_PipelineTask *> *finallyTasks;

/**
 *  Output only. auto-generated yaml that is output only for display purpose for
 *  workflows using pipeline_spec, used by UI/gcloud cli for Workflows.
 */
@property(nonatomic, copy, nullable) NSString *generatedYaml;

/** List of parameters. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_ParamSpec *> *params;

/** List of Tasks that execute when this Pipeline is run. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_PipelineTask *> *tasks;

/**
 *  Workspaces declares a set of named workspaces that are expected to be
 *  provided by a PipelineRun.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_PipelineWorkspaceDeclaration *> *workspaces;

@end


/**
 *  PipelineTask defines a task in a Pipeline.
 */
@interface GTLRCloudBuild_PipelineTask : GTLRObject

/** Name of the task. */
@property(nonatomic, copy, nullable) NSString *name;

/** Params is a list of parameter names and values. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Param *> *params;

/**
 *  Retries represents how many times this task should be retried in case of
 *  task failure.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *retries;

/**
 *  RunAfter is the list of PipelineTask names that should be executed before
 *  this Task executes. (Used to force a specific ordering in graph execution.)
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *runAfter;

/** Reference to a specific instance of a task. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_TaskRef *taskRef;

/** Spec to instantiate this TaskRun. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_EmbeddedTask *taskSpec;

/**
 *  Time after which the TaskRun times out. Defaults to 1 hour. Specified
 *  TaskRun timeout should be less than 24h.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/** Conditions that need to be true for the task to run. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_WhenExpression *> *whenExpressions;

/**
 *  Workspaces maps workspaces from the pipeline spec to the workspaces declared
 *  in the Task.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_WorkspacePipelineTaskBinding *> *workspaces;

@end


/**
 *  Workspaces declares a set of named workspaces that are expected to be
 *  provided by a PipelineRun.
 */
@interface GTLRCloudBuild_PipelineWorkspaceDeclaration : GTLRObject

/**
 *  Description is a human readable string describing how the workspace will be
 *  used in the Pipeline.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Name is the name of a workspace to be provided by a PipelineRun. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional marks a Workspace as not being required in PipelineRuns. By default
 *  this field is false and so declared workspaces are required.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *optional;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** ``` { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
 *  members: - user:mike\@example.com - group:admins\@example.com -
 *  domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 ``` For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRCloudBuild_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Probe describes a health check to be performed against a container to
 *  determine whether it is alive or ready to receive traffic.
 */
@interface GTLRCloudBuild_Probe : GTLRObject

/** Optional. Exec specifies the action to take. +optional */
@property(nonatomic, strong, nullable) GTLRCloudBuild_ExecAction *exec;

/**
 *  Optional. How often (in seconds) to perform the probe. Default to 10
 *  seconds. Minimum value is 1. +optional
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *periodSeconds;

@end


/**
 *  PropertySpec holds information about a property in an object.
 */
@interface GTLRCloudBuild_PropertySpec : GTLRObject

/**
 *  A type for the object.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_PropertySpec_Type_String Default (Value: "STRING")
 *    @arg @c kGTLRCloudBuild_PropertySpec_Type_TypeUnspecified Default enum
 *        type; should not be used. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A repository associated to a parent connection.
 */
@interface GTLRCloudBuild_Repository : GTLRObject

/** Allows clients to store small amounts of arbitrary data. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Repository_Annotations *annotations;

/**
 *  Output only. Server assigned timestamp for when the connection was created.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  This checksum is computed by the server based on the value of other fields,
 *  and may be sent on update and delete requests to ensure the client has an
 *  up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Immutable. Resource name of the repository, in the format `projects/ *
 *  /locations/ * /connections/ * /repositories/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. Git Clone HTTPS URI. */
@property(nonatomic, copy, nullable) NSString *remoteUri;

/**
 *  Output only. Server assigned timestamp for when the connection was updated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** Output only. External ID of the webhook created for the repository. */
@property(nonatomic, copy, nullable) NSString *webhookId;

@end


/**
 *  Allows clients to store small amounts of arbitrary data.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudBuild_Repository_Annotations : GTLRObject
@end


/**
 *  Represents the custom metadata of the RunWorkflow long-running operation.
 */
@interface GTLRCloudBuild_RunWorkflowCustomOperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Output only. ID of the pipeline run created by RunWorkflow. */
@property(nonatomic, copy, nullable) NSString *pipelineRunId;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Secret Volume Source.
 */
@interface GTLRCloudBuild_SecretVolumeSource : GTLRObject

/** Name of the secret referenced by the WorkspaceBinding. */
@property(nonatomic, copy, nullable) NSString *secretName;

/**
 *  Output only. Resource name of the SecretVersion. In format: projects/ *
 *  /secrets/ * /versions/ *
 */
@property(nonatomic, copy, nullable) NSString *secretVersion;

@end


/**
 *  Security options the container should be run with.
 */
@interface GTLRCloudBuild_SecurityContext : GTLRObject

/**
 *  Optional. AllowPrivilegeEscalation controls whether a process can gain more
 *  privileges than its parent process. This bool directly controls if the
 *  no_new_privs flag will be set on the container process.
 *  AllowPrivilegeEscalation is true always when the container is: 1) run as
 *  Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when
 *  spec.os.name is windows. +optional
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowPrivilegeEscalation;

/** Optional. Adds and removes POSIX capabilities from running containers. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Capabilities *capabilities;

/**
 *  Run container in privileged mode.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *privileged;

/**
 *  Optional. The GID to run the entrypoint of the container process. Uses
 *  runtime default if unset. May also be set in PodSecurityContext. If set in
 *  both SecurityContext and PodSecurityContext, the value specified in
 *  SecurityContext takes precedence. Note that this field cannot be set when
 *  spec.os.name is windows. +optional
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *runAsGroup;

/**
 *  Optional. Indicates that the container must run as a non-root user. If true,
 *  the Kubelet will validate the image at runtime to ensure that it does not
 *  run as UID 0 (root) and fail to start the container if it does. If unset or
 *  false, no such validation will be performed. May also be set in
 *  PodSecurityContext. If set in both SecurityContext and PodSecurityContext,
 *  the value specified in SecurityContext takes precedence. +optional
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *runAsNonRoot;

/**
 *  Optional. The UID to run the entrypoint of the container process. Defaults
 *  to user specified in image metadata if unspecified. May also be set in
 *  PodSecurityContext. If set in both SecurityContext and PodSecurityContext,
 *  the value specified in SecurityContext takes precedence. Note that this
 *  field cannot be set when spec.os.name is windows. +optional
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *runAsUser;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRCloudBuild_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Sidecars run alongside the Task's step containers.
 */
@interface GTLRCloudBuild_Sidecar : GTLRObject

/** Arguments to the entrypoint. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *args;

/** Entrypoint array. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *command;

/** List of environment variables to set in the container. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_EnvVar *> *env;

/** Docker image name. */
@property(nonatomic, copy, nullable) NSString *image;

/** Name of the Sidecar. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Periodic probe of Sidecar service readiness. Container will be
 *  removed from service endpoints if the probe fails. Cannot be updated. More
 *  info:
 *  https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
 *  +optional
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_Probe *readinessProbe;

/** The contents of an executable file to execute. */
@property(nonatomic, copy, nullable) NSString *script;

/** Optional. Security options the container should be run with. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_SecurityContext *securityContext;

/** Pod volumes to mount into the container's filesystem. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_VolumeMount *> *volumeMounts;

/** Container's working directory. */
@property(nonatomic, copy, nullable) NSString *workingDir;

@end


/**
 *  SkippedTask is used to describe the Tasks that were skipped due to their
 *  When Expressions evaluating to False.
 */
@interface GTLRCloudBuild_SkippedTask : GTLRObject

/** Name is the Pipeline Task name */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. Reason is the cause of the PipelineTask being skipped. */
@property(nonatomic, copy, nullable) NSString *reason;

/**
 *  WhenExpressions is the list of checks guarding the execution of the
 *  PipelineTask
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_WhenExpression *> *whenExpressions;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudBuild_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudBuild_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_Status_Details_Item : GTLRObject
@end


/**
 *  Step embeds the Container type, which allows it to include fields not
 *  provided by Container.
 */
@interface GTLRCloudBuild_Step : GTLRObject

/** Arguments to the entrypoint. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *args;

/** Entrypoint array. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *command;

/** List of environment variables to set in the container. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_EnvVar *> *env;

/** Docker image name. */
@property(nonatomic, copy, nullable) NSString *image;

/** Name of the container specified as a DNS_LABEL. */
@property(nonatomic, copy, nullable) NSString *name;

/** The contents of an executable file to execute. */
@property(nonatomic, copy, nullable) NSString *script;

/**
 *  Optional. SecurityContext defines the security options the Step should be
 *  run with. If set, the fields of SecurityContext override the equivalent
 *  fields of PodSecurityContext. More info:
 *  https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
 *  +optional
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_SecurityContext *securityContext;

/** Time after which the Step times out. Defaults to never. */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/** Pod volumes to mount into the container's filesystem. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_VolumeMount *> *volumeMounts;

/** Container's working directory. */
@property(nonatomic, copy, nullable) NSString *workingDir;

@end


/**
 *  StepTemplate can be used as the basis for all step containers within the
 *  Task, so that the steps inherit settings on the base container.
 */
@interface GTLRCloudBuild_StepTemplate : GTLRObject

/**
 *  Optional. List of environment variables to set in the Step. Cannot be
 *  updated.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_EnvVar *> *env;

@end


/**
 *  TaskRef can be used to refer to a specific instance of a task. PipelineRef
 *  can be used to refer to a specific instance of a Pipeline.
 */
@interface GTLRCloudBuild_TaskRef : GTLRObject

/** Name of the task. */
@property(nonatomic, copy, nullable) NSString *name GTLR_DEPRECATED;

/**
 *  Params contains the parameters used to identify the referenced Tekton
 *  resource. Example entries might include "repo" or "path" but the set of
 *  params ultimately depends on the chosen resolver.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Param *> *params;

/**
 *  Resolver is the name of the resolver that should perform resolution of the
 *  referenced Tekton resource.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_TaskRef_Resolver_Bundles Bundles resolver.
 *        https://tekton.dev/docs/pipelines/bundle-resolver/ (Value: "BUNDLES")
 *    @arg @c kGTLRCloudBuild_TaskRef_Resolver_GcbRepo GCB repo resolver.
 *        (Value: "GCB_REPO")
 *    @arg @c kGTLRCloudBuild_TaskRef_Resolver_Git Simple Git resolver.
 *        https://tekton.dev/docs/pipelines/git-resolver/ (Value: "GIT")
 *    @arg @c kGTLRCloudBuild_TaskRef_Resolver_ResolverNameUnspecified Default
 *        enum type; should not be used. (Value: "RESOLVER_NAME_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *resolver;

@end


/**
 *  TaskResult is used to describe the results of a task.
 */
@interface GTLRCloudBuild_TaskResult : GTLRObject

/**
 *  Description of the result.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Name of the result. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  When type is OBJECT, this map holds the names of fields inside that object
 *  along with the type of data each field holds.
 */
@property(nonatomic, strong, nullable) GTLRCloudBuild_TaskResult_Properties *properties;

/**
 *  The type of data that the result holds.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_TaskResult_Type_Array Array type (Value: "ARRAY")
 *    @arg @c kGTLRCloudBuild_TaskResult_Type_Object Object type (Value:
 *        "OBJECT")
 *    @arg @c kGTLRCloudBuild_TaskResult_Type_String Default (Value: "STRING")
 *    @arg @c kGTLRCloudBuild_TaskResult_Type_TypeUnspecified Default enum type;
 *        should not be used. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  When type is OBJECT, this map holds the names of fields inside that object
 *  along with the type of data each field holds.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudBuild_PropertySpec. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBuild_TaskResult_Properties : GTLRObject
@end


/**
 *  TaskSpec contains the Spec to instantiate a TaskRun.
 */
@interface GTLRCloudBuild_TaskSpec : GTLRObject

/**
 *  Description of the task.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Sidecars that run alongside the Task’s step containers that should be added
 *  to this Task.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *managedSidecars;

/** List of parameters. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_ParamSpec *> *params;

/** Values that this Task can output. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_TaskResult *> *results;

/** Sidecars that run alongside the Task's step containers. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Sidecar *> *sidecars;

/** Steps of the task. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_Step *> *steps;

/**
 *  Optional. StepTemplate can be used as the basis for all step containers
 *  within the Task, so that the steps inherit settings on the base container.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_StepTemplate *> *stepTemplate;

/** A collection of volumes that are available to mount into steps. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_VolumeSource *> *volumes;

/** The volumes that this Task requires. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBuild_WorkspaceDeclaration *> *workspaces;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRCloudBuild_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRCloudBuild_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  TimeoutFields allows granular specification of pipeline, task, and finally
 *  timeouts
 */
@interface GTLRCloudBuild_TimeoutFields : GTLRObject

/** Finally sets the maximum allowed duration of this pipeline's finally */
@property(nonatomic, strong, nullable) GTLRDuration *finally;

/**
 *  Pipeline sets the maximum allowed duration for execution of the entire
 *  pipeline. The sum of individual timeouts for tasks and finally must not
 *  exceed this value.
 */
@property(nonatomic, strong, nullable) GTLRDuration *pipeline;

/** Tasks sets the maximum allowed duration of this pipeline's tasks */
@property(nonatomic, strong, nullable) GTLRDuration *tasks;

@end


/**
 *  Represents a personal access token that authorized the Connection, and
 *  associated metadata.
 */
@interface GTLRCloudBuild_UserCredential : GTLRObject

/** Output only. The username associated to this token. */
@property(nonatomic, copy, nullable) NSString *username;

/**
 *  Required. A SecretManager resource containing the user token that authorizes
 *  the Cloud Build connection. Format: `projects/ * /secrets/ * /versions/ *`.
 */
@property(nonatomic, copy, nullable) NSString *userTokenSecretVersion;

@end


/**
 *  VolumeClaim is a user's request for a volume.
 */
@interface GTLRCloudBuild_VolumeClaim : GTLRObject

/** Volume size, e.g. 1gb. */
@property(nonatomic, copy, nullable) NSString *storage;

@end


/**
 *  Pod volumes to mount into the container's filesystem.
 */
@interface GTLRCloudBuild_VolumeMount : GTLRObject

/**
 *  Path within the container at which the volume should be mounted. Must not
 *  contain ':'.
 */
@property(nonatomic, copy, nullable) NSString *mountPath;

/** Name of the volume. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Mounted read-only if true, read-write otherwise (false or unspecified).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readOnly;

/**
 *  Path within the volume from which the container's volume should be mounted.
 *  Defaults to "" (volume's root).
 */
@property(nonatomic, copy, nullable) NSString *subPath;

/**
 *  Expanded path within the volume from which the container's volume should be
 *  mounted. Behaves similarly to SubPath but environment variable references
 *  $(VAR_NAME) are expanded using the container's environment. Defaults to ""
 *  (volume's root).
 */
@property(nonatomic, copy, nullable) NSString *subPathExpr;

@end


/**
 *  Volumes available to mount.
 */
@interface GTLRCloudBuild_VolumeSource : GTLRObject

/** A temporary directory that shares a pod's lifetime. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_EmptyDirVolumeSource *emptyDir;

/**
 *  Name of the Volume. Must be a DNS_LABEL and unique within the pod. More
 *  info:
 *  https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Conditions that need to be true for the task to run.
 */
@interface GTLRCloudBuild_WhenExpression : GTLRObject

/**
 *  Operator that represents an Input's relationship to the values
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBuild_WhenExpression_ExpressionOperator_ExpressionOperatorUnspecified
 *        Default enum type; should not be used. (Value:
 *        "EXPRESSION_OPERATOR_UNSPECIFIED")
 *    @arg @c kGTLRCloudBuild_WhenExpression_ExpressionOperator_In Input is in
 *        values. (Value: "IN")
 *    @arg @c kGTLRCloudBuild_WhenExpression_ExpressionOperator_NotIn Input is
 *        not in values. (Value: "NOT_IN")
 */
@property(nonatomic, copy, nullable) NSString *expressionOperator;

/**
 *  Input is the string for guard checking which can be a static input or an
 *  output from a parent Task.
 */
@property(nonatomic, copy, nullable) NSString *input;

/**
 *  Values is an array of strings, which is compared against the input, for
 *  guard checking.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  WorkspaceBinding maps a workspace to a Volume. PipelineRef can be used to
 *  refer to a specific instance of a Pipeline.
 */
@interface GTLRCloudBuild_WorkspaceBinding : GTLRObject

/** Name of the workspace. */
@property(nonatomic, copy, nullable) NSString *name;

/** Secret Volume Source. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_SecretVolumeSource *secret;

/**
 *  Optional. SubPath is optionally a directory on the volume which should be
 *  used for this binding (i.e. the volume will be mounted at this sub
 *  directory). +optional
 */
@property(nonatomic, copy, nullable) NSString *subPath;

/** Volume claim that will be created in the same namespace. */
@property(nonatomic, strong, nullable) GTLRCloudBuild_VolumeClaim *volumeClaim;

@end


/**
 *  WorkspaceDeclaration is a declaration of a volume that a Task requires.
 */
@interface GTLRCloudBuild_WorkspaceDeclaration : GTLRObject

/**
 *  Description is a human readable description of this volume.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  MountPath overrides the directory that the volume will be made available at.
 */
@property(nonatomic, copy, nullable) NSString *mountPath;

/** Name is the name by which you can bind the volume at runtime. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Optional marks a Workspace as not being required in TaskRuns. By
 *  default this field is false and so declared workspaces are required.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *optional;

/**
 *  ReadOnly dictates whether a mounted volume is writable.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readOnly;

@end


/**
 *  WorkspacePipelineTaskBinding maps workspaces from the PipelineSpec to the
 *  workspaces declared in the Task.
 */
@interface GTLRCloudBuild_WorkspacePipelineTaskBinding : GTLRObject

/** Name of the workspace as declared by the task. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. SubPath is optionally a directory on the volume which should be
 *  used for this binding (i.e. the volume will be mounted at this sub
 *  directory). +optional
 */
@property(nonatomic, copy, nullable) NSString *subPath;

/** Name of the workspace declared by the pipeline. */
@property(nonatomic, copy, nullable) NSString *workspace;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
