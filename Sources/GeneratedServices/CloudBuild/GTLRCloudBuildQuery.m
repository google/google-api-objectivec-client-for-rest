// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Build API (cloudbuild/v1)
// Description:
//   Creates and manages builds on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/cloud-build/docs/

#import <GoogleAPIClientForREST/GTLRCloudBuildQuery.h>

@implementation GTLRCloudBuildQuery

@dynamic fields;

@end

@implementation GTLRCloudBuildQuery_GithubDotComWebhookReceive

@dynamic webhookKey;

+ (instancetype)queryWithObject:(GTLRCloudBuild_HttpBody *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v1/githubDotComWebhook:receive";
  GTLRCloudBuildQuery_GithubDotComWebhookReceive *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRCloudBuild_Empty class];
  query.loggingName = @"cloudbuild.githubDotComWebhook.receive";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_LocationsRegionalWebhook

@dynamic location, webhookKey;

+ (instancetype)queryWithObject:(GTLRCloudBuild_HttpBody *)object
                       location:(NSString *)location {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"location" ];
  NSString *pathURITemplate = @"v1/{+location}/regionalWebhook";
  GTLRCloudBuildQuery_LocationsRegionalWebhook *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.location = location;
  query.expectedObjectClass = [GTLRCloudBuild_Empty class];
  query.loggingName = @"cloudbuild.locations.regionalWebhook";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_OperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRCloudBuild_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRCloudBuildQuery_OperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Empty class];
  query.loggingName = @"cloudbuild.operations.cancel";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_OperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_OperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.operations.get";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsBuildsApprove

@dynamic name;

+ (instancetype)queryWithObject:(GTLRCloudBuild_ApproveBuildRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:approve";
  GTLRCloudBuildQuery_ProjectsBuildsApprove *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.builds.approve";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsBuildsCancel

@dynamic identifier, projectId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRCloudBuild_CancelBuildRequest *)object
                      projectId:(NSString *)projectId
                     identifier:(NSString *)identifier {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"id", @"projectId"
  ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/builds/{id}:cancel";
  GTLRCloudBuildQuery_ProjectsBuildsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRCloudBuild_Build class];
  query.loggingName = @"cloudbuild.projects.builds.cancel";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsBuildsCreate

@dynamic parent, projectId;

+ (instancetype)queryWithObject:(GTLRCloudBuild_Build *)object
                      projectId:(NSString *)projectId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/builds";
  GTLRCloudBuildQuery_ProjectsBuildsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.builds.create";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsBuildsGet

@dynamic identifier, name, projectId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithProjectId:(NSString *)projectId
                        identifier:(NSString *)identifier {
  NSArray *pathParams = @[
    @"id", @"projectId"
  ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/builds/{id}";
  GTLRCloudBuildQuery_ProjectsBuildsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRCloudBuild_Build class];
  query.loggingName = @"cloudbuild.projects.builds.get";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsBuildsList

@dynamic filter, pageSize, pageToken, parent, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId {
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/builds";
  GTLRCloudBuildQuery_ProjectsBuildsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRCloudBuild_ListBuildsResponse class];
  query.loggingName = @"cloudbuild.projects.builds.list";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsBuildsRetry

@dynamic identifier, projectId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithObject:(GTLRCloudBuild_RetryBuildRequest *)object
                      projectId:(NSString *)projectId
                     identifier:(NSString *)identifier {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"id", @"projectId"
  ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/builds/{id}:retry";
  GTLRCloudBuildQuery_ProjectsBuildsRetry *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.identifier = identifier;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.builds.retry";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsCreate

@dynamic gheConfigId, parent, projectId;

+ (instancetype)queryWithObject:(GTLRCloudBuild_GitHubEnterpriseConfig *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/githubEnterpriseConfigs";
  GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.githubEnterpriseConfigs.create";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsDelete

@dynamic configId, name, projectId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.githubEnterpriseConfigs.delete";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsGet

@dynamic configId, name, projectId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_GitHubEnterpriseConfig class];
  query.loggingName = @"cloudbuild.projects.githubEnterpriseConfigs.get";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsList

@dynamic parent, projectId;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/githubEnterpriseConfigs";
  GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_ListGithubEnterpriseConfigsResponse class];
  query.loggingName = @"cloudbuild.projects.githubEnterpriseConfigs.list";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRCloudBuild_GitHubEnterpriseConfig *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsGithubEnterpriseConfigsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.githubEnterpriseConfigs.patch";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsConnectedRepositoriesBatchCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRCloudBuild_BatchCreateBitbucketServerConnectedRepositoriesRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/connectedRepositories:batchCreate";
  GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsConnectedRepositoriesBatchCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.bitbucketServerConfigs.connectedRepositories.batchCreate";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsCreate

@dynamic bitbucketServerConfigId, parent;

+ (instancetype)queryWithObject:(GTLRCloudBuild_BitbucketServerConfig *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/bitbucketServerConfigs";
  GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.bitbucketServerConfigs.create";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.bitbucketServerConfigs.delete";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_BitbucketServerConfig class];
  query.loggingName = @"cloudbuild.projects.locations.bitbucketServerConfigs.get";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/bitbucketServerConfigs";
  GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_ListBitbucketServerConfigsResponse class];
  query.loggingName = @"cloudbuild.projects.locations.bitbucketServerConfigs.list";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRCloudBuild_BitbucketServerConfig *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.bitbucketServerConfigs.patch";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsRemoveBitbucketServerConnectedRepository

@dynamic config;

+ (instancetype)queryWithObject:(GTLRCloudBuild_RemoveBitbucketServerConnectedRepositoryRequest *)object
                         config:(NSString *)config {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"config" ];
  NSString *pathURITemplate = @"v1/{+config}:removeBitbucketServerConnectedRepository";
  GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsRemoveBitbucketServerConnectedRepository *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.config = config;
  query.expectedObjectClass = [GTLRCloudBuild_Empty class];
  query.loggingName = @"cloudbuild.projects.locations.bitbucketServerConfigs.removeBitbucketServerConnectedRepository";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsReposList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/repos";
  GTLRCloudBuildQuery_ProjectsLocationsBitbucketServerConfigsReposList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_ListBitbucketServerRepositoriesResponse class];
  query.loggingName = @"cloudbuild.projects.locations.bitbucketServerConfigs.repos.list";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsBuildsApprove

@dynamic name;

+ (instancetype)queryWithObject:(GTLRCloudBuild_ApproveBuildRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:approve";
  GTLRCloudBuildQuery_ProjectsLocationsBuildsApprove *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.builds.approve";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsBuildsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRCloudBuild_CancelBuildRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRCloudBuildQuery_ProjectsLocationsBuildsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Build class];
  query.loggingName = @"cloudbuild.projects.locations.builds.cancel";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsBuildsCreate

@dynamic parent, projectId;

+ (instancetype)queryWithObject:(GTLRCloudBuild_Build *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/builds";
  GTLRCloudBuildQuery_ProjectsLocationsBuildsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.builds.create";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsBuildsGet

@dynamic identifier, name, projectId;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"identifier" : @"id" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsBuildsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Build class];
  query.loggingName = @"cloudbuild.projects.locations.builds.get";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsBuildsList

@dynamic filter, pageSize, pageToken, parent, projectId;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/builds";
  GTLRCloudBuildQuery_ProjectsLocationsBuildsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_ListBuildsResponse class];
  query.loggingName = @"cloudbuild.projects.locations.builds.list";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsBuildsRetry

@dynamic name;

+ (instancetype)queryWithObject:(GTLRCloudBuild_RetryBuildRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:retry";
  GTLRCloudBuildQuery_ProjectsLocationsBuildsRetry *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.builds.retry";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsCreate

@dynamic gheConfigId, parent, projectId;

+ (instancetype)queryWithObject:(GTLRCloudBuild_GitHubEnterpriseConfig *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/githubEnterpriseConfigs";
  GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.githubEnterpriseConfigs.create";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsDelete

@dynamic configId, name, projectId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.githubEnterpriseConfigs.delete";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsGet

@dynamic configId, name, projectId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_GitHubEnterpriseConfig class];
  query.loggingName = @"cloudbuild.projects.locations.githubEnterpriseConfigs.get";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsList

@dynamic parent, projectId;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/githubEnterpriseConfigs";
  GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_ListGithubEnterpriseConfigsResponse class];
  query.loggingName = @"cloudbuild.projects.locations.githubEnterpriseConfigs.list";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRCloudBuild_GitHubEnterpriseConfig *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsGithubEnterpriseConfigsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.githubEnterpriseConfigs.patch";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsConnectedRepositoriesBatchCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRCloudBuild_BatchCreateGitLabConnectedRepositoriesRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/connectedRepositories:batchCreate";
  GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsConnectedRepositoriesBatchCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.gitLabConfigs.connectedRepositories.batchCreate";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsCreate

@dynamic gitlabConfigId, parent;

+ (instancetype)queryWithObject:(GTLRCloudBuild_GitLabConfig *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/gitLabConfigs";
  GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.gitLabConfigs.create";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.gitLabConfigs.delete";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_GitLabConfig class];
  query.loggingName = @"cloudbuild.projects.locations.gitLabConfigs.get";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/gitLabConfigs";
  GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_ListGitLabConfigsResponse class];
  query.loggingName = @"cloudbuild.projects.locations.gitLabConfigs.list";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRCloudBuild_GitLabConfig *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.gitLabConfigs.patch";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsRemoveGitLabConnectedRepository

@dynamic config;

+ (instancetype)queryWithObject:(GTLRCloudBuild_RemoveGitLabConnectedRepositoryRequest *)object
                         config:(NSString *)config {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"config" ];
  NSString *pathURITemplate = @"v1/{+config}:removeGitLabConnectedRepository";
  GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsRemoveGitLabConnectedRepository *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.config = config;
  query.expectedObjectClass = [GTLRCloudBuild_Empty class];
  query.loggingName = @"cloudbuild.projects.locations.gitLabConfigs.removeGitLabConnectedRepository";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsReposList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/repos";
  GTLRCloudBuildQuery_ProjectsLocationsGitLabConfigsReposList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_ListGitLabRepositoriesResponse class];
  query.loggingName = @"cloudbuild.projects.locations.gitLabConfigs.repos.list";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRCloudBuild_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRCloudBuildQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Empty class];
  query.loggingName = @"cloudbuild.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsTriggersCreate

@dynamic parent, projectId;

+ (instancetype)queryWithObject:(GTLRCloudBuild_BuildTrigger *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/triggers";
  GTLRCloudBuildQuery_ProjectsLocationsTriggersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_BuildTrigger class];
  query.loggingName = @"cloudbuild.projects.locations.triggers.create";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsTriggersDelete

@dynamic name, projectId, triggerId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsTriggersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Empty class];
  query.loggingName = @"cloudbuild.projects.locations.triggers.delete";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsTriggersGet

@dynamic name, projectId, triggerId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsTriggersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_BuildTrigger class];
  query.loggingName = @"cloudbuild.projects.locations.triggers.get";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsTriggersList

@dynamic pageSize, pageToken, parent, projectId;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/triggers";
  GTLRCloudBuildQuery_ProjectsLocationsTriggersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_ListBuildTriggersResponse class];
  query.loggingName = @"cloudbuild.projects.locations.triggers.list";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsTriggersPatch

@dynamic projectId, resourceName, triggerId;

+ (instancetype)queryWithObject:(GTLRCloudBuild_BuildTrigger *)object
                   resourceName:(NSString *)resourceName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceName" ];
  NSString *pathURITemplate = @"v1/{+resourceName}";
  GTLRCloudBuildQuery_ProjectsLocationsTriggersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceName = resourceName;
  query.expectedObjectClass = [GTLRCloudBuild_BuildTrigger class];
  query.loggingName = @"cloudbuild.projects.locations.triggers.patch";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsTriggersRun

@dynamic name;

+ (instancetype)queryWithObject:(GTLRCloudBuild_RunBuildTriggerRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:run";
  GTLRCloudBuildQuery_ProjectsLocationsTriggersRun *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.triggers.run";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsTriggersWebhook

@dynamic name, projectId, secret, trigger;

+ (instancetype)queryWithObject:(GTLRCloudBuild_HttpBody *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:webhook";
  GTLRCloudBuildQuery_ProjectsLocationsTriggersWebhook *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_ReceiveTriggerWebhookResponse class];
  query.loggingName = @"cloudbuild.projects.locations.triggers.webhook";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsCreate

@dynamic parent, validateOnly, workerPoolId;

+ (instancetype)queryWithObject:(GTLRCloudBuild_WorkerPool *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/workerPools";
  GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.workerPools.create";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsDelete

@dynamic allowMissing, ETag, name, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.workerPools.delete";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_WorkerPool class];
  query.loggingName = @"cloudbuild.projects.locations.workerPools.get";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/workerPools";
  GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_ListWorkerPoolsResponse class];
  query.loggingName = @"cloudbuild.projects.locations.workerPools.list";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsPatch

@dynamic name, updateMask, validateOnly;

+ (instancetype)queryWithObject:(GTLRCloudBuild_WorkerPool *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsWorkerPoolsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.workerPools.patch";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsTriggersCreate

@dynamic parent, projectId;

+ (instancetype)queryWithObject:(GTLRCloudBuild_BuildTrigger *)object
                      projectId:(NSString *)projectId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/triggers";
  GTLRCloudBuildQuery_ProjectsTriggersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRCloudBuild_BuildTrigger class];
  query.loggingName = @"cloudbuild.projects.triggers.create";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsTriggersDelete

@dynamic name, projectId, triggerId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         triggerId:(NSString *)triggerId {
  NSArray *pathParams = @[
    @"projectId", @"triggerId"
  ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/triggers/{triggerId}";
  GTLRCloudBuildQuery_ProjectsTriggersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.triggerId = triggerId;
  query.expectedObjectClass = [GTLRCloudBuild_Empty class];
  query.loggingName = @"cloudbuild.projects.triggers.delete";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsTriggersGet

@dynamic name, projectId, triggerId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                         triggerId:(NSString *)triggerId {
  NSArray *pathParams = @[
    @"projectId", @"triggerId"
  ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/triggers/{triggerId}";
  GTLRCloudBuildQuery_ProjectsTriggersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.triggerId = triggerId;
  query.expectedObjectClass = [GTLRCloudBuild_BuildTrigger class];
  query.loggingName = @"cloudbuild.projects.triggers.get";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsTriggersList

@dynamic pageSize, pageToken, parent, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId {
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/triggers";
  GTLRCloudBuildQuery_ProjectsTriggersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRCloudBuild_ListBuildTriggersResponse class];
  query.loggingName = @"cloudbuild.projects.triggers.list";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsTriggersPatch

@dynamic projectId, triggerId;

+ (instancetype)queryWithObject:(GTLRCloudBuild_BuildTrigger *)object
                      projectId:(NSString *)projectId
                      triggerId:(NSString *)triggerId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"projectId", @"triggerId"
  ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/triggers/{triggerId}";
  GTLRCloudBuildQuery_ProjectsTriggersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.triggerId = triggerId;
  query.expectedObjectClass = [GTLRCloudBuild_BuildTrigger class];
  query.loggingName = @"cloudbuild.projects.triggers.patch";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsTriggersRun

@dynamic name, projectId, triggerId;

+ (instancetype)queryWithObject:(GTLRCloudBuild_RepoSource *)object
                      projectId:(NSString *)projectId
                      triggerId:(NSString *)triggerId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"projectId", @"triggerId"
  ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/triggers/{triggerId}:run";
  GTLRCloudBuildQuery_ProjectsTriggersRun *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.triggerId = triggerId;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.triggers.run";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsTriggersWebhook

@dynamic name, projectId, secret, trigger;

+ (instancetype)queryWithObject:(GTLRCloudBuild_HttpBody *)object
                      projectId:(NSString *)projectId
                        trigger:(NSString *)trigger {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"projectId", @"trigger"
  ];
  NSString *pathURITemplate = @"v1/projects/{projectId}/triggers/{trigger}:webhook";
  GTLRCloudBuildQuery_ProjectsTriggersWebhook *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.trigger = trigger;
  query.expectedObjectClass = [GTLRCloudBuild_ReceiveTriggerWebhookResponse class];
  query.loggingName = @"cloudbuild.projects.triggers.webhook";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_V1Webhook

@dynamic webhookKey;

+ (instancetype)queryWithObject:(GTLRCloudBuild_HttpBody *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v1/webhook";
  GTLRCloudBuildQuery_V1Webhook *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRCloudBuild_Empty class];
  query.loggingName = @"cloudbuild.webhook";
  return query;
}

@end
