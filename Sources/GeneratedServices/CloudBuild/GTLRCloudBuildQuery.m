// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Build API (cloudbuild/v2)
// Description:
//   Creates and manages builds on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/cloud-build/docs/

#import <GoogleAPIClientForREST/GTLRCloudBuildQuery.h>

// ----------------------------------------------------------------------------
// Constants

// refType
NSString * const kGTLRCloudBuildRefTypeBranch             = @"BRANCH";
NSString * const kGTLRCloudBuildRefTypeRefTypeUnspecified = @"REF_TYPE_UNSPECIFIED";
NSString * const kGTLRCloudBuildRefTypeTag                = @"TAG";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRCloudBuildQuery

@dynamic fields;

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsCreate

@dynamic connectionId, parent;

+ (instancetype)queryWithObject:(GTLRCloudBuild_Connection *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/connections";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.connections.create";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsDelete

@dynamic ETag, name, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.connections.delete";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsFetchLinkableRepositories

@dynamic connection, pageSize, pageToken;

+ (instancetype)queryWithConnection:(NSString *)connection {
  NSArray *pathParams = @[ @"connection" ];
  NSString *pathURITemplate = @"v2/{+connection}:fetchLinkableRepositories";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsFetchLinkableRepositories *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.connection = connection;
  query.expectedObjectClass = [GTLRCloudBuild_FetchLinkableRepositoriesResponse class];
  query.loggingName = @"cloudbuild.projects.locations.connections.fetchLinkableRepositories";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Connection class];
  query.loggingName = @"cloudbuild.projects.locations.connections.get";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v2/{+resource}:getIamPolicy";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudBuild_Policy class];
  query.loggingName = @"cloudbuild.projects.locations.connections.getIamPolicy";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsList

@dynamic pageSize, pageToken, parent, returnPartialSuccess;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/connections";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_ListConnectionsResponse class];
  query.loggingName = @"cloudbuild.projects.locations.connections.list";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsPatch

@dynamic allowMissing, ETag, name, updateMask;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithObject:(GTLRCloudBuild_Connection *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.connections.patch";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsProcessWebhook

@dynamic parent, webhookKey;

+ (instancetype)queryWithObject:(GTLRCloudBuild_HttpBody *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/connections:processWebhook";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsProcessWebhook *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_Empty class];
  query.loggingName = @"cloudbuild.projects.locations.connections.processWebhook";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsRepositoriesAccessReadToken

@dynamic repository;

+ (instancetype)queryWithObject:(GTLRCloudBuild_FetchReadTokenRequest *)object
                     repository:(NSString *)repository {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"repository" ];
  NSString *pathURITemplate = @"v2/{+repository}:accessReadToken";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsRepositoriesAccessReadToken *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.repository = repository;
  query.expectedObjectClass = [GTLRCloudBuild_FetchReadTokenResponse class];
  query.loggingName = @"cloudbuild.projects.locations.connections.repositories.accessReadToken";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsRepositoriesAccessReadWriteToken

@dynamic repository;

+ (instancetype)queryWithObject:(GTLRCloudBuild_FetchReadWriteTokenRequest *)object
                     repository:(NSString *)repository {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"repository" ];
  NSString *pathURITemplate = @"v2/{+repository}:accessReadWriteToken";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsRepositoriesAccessReadWriteToken *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.repository = repository;
  query.expectedObjectClass = [GTLRCloudBuild_FetchReadWriteTokenResponse class];
  query.loggingName = @"cloudbuild.projects.locations.connections.repositories.accessReadWriteToken";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsRepositoriesBatchCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRCloudBuild_BatchCreateRepositoriesRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/repositories:batchCreate";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsRepositoriesBatchCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.connections.repositories.batchCreate";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsRepositoriesCreate

@dynamic parent, repositoryId;

+ (instancetype)queryWithObject:(GTLRCloudBuild_Repository *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/repositories";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsRepositoriesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.connections.repositories.create";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsRepositoriesDelete

@dynamic ETag, name, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsRepositoriesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.connections.repositories.delete";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsRepositoriesFetchGitRefs

@dynamic pageSize, pageToken, refType, repository;

+ (instancetype)queryWithRepository:(NSString *)repository {
  NSArray *pathParams = @[ @"repository" ];
  NSString *pathURITemplate = @"v2/{+repository}:fetchGitRefs";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsRepositoriesFetchGitRefs *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.repository = repository;
  query.expectedObjectClass = [GTLRCloudBuild_FetchGitRefsResponse class];
  query.loggingName = @"cloudbuild.projects.locations.connections.repositories.fetchGitRefs";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsRepositoriesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsRepositoriesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Repository class];
  query.loggingName = @"cloudbuild.projects.locations.connections.repositories.get";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsRepositoriesList

@dynamic filter, pageSize, pageToken, parent, returnPartialSuccess;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/repositories";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsRepositoriesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRCloudBuild_ListRepositoriesResponse class];
  query.loggingName = @"cloudbuild.projects.locations.connections.repositories.list";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRCloudBuild_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v2/{+resource}:setIamPolicy";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudBuild_Policy class];
  query.loggingName = @"cloudbuild.projects.locations.connections.setIamPolicy";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsConnectionsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRCloudBuild_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v2/{+resource}:testIamPermissions";
  GTLRCloudBuildQuery_ProjectsLocationsConnectionsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRCloudBuild_TestIamPermissionsResponse class];
  query.loggingName = @"cloudbuild.projects.locations.connections.testIamPermissions";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Location class];
  query.loggingName = @"cloudbuild.projects.locations.get";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}/locations";
  GTLRCloudBuildQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_ListLocationsResponse class];
  query.loggingName = @"cloudbuild.projects.locations.list";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRCloudBuild_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:cancel";
  GTLRCloudBuildQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Empty class];
  query.loggingName = @"cloudbuild.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRCloudBuildQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRCloudBuildQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRCloudBuild_Operation class];
  query.loggingName = @"cloudbuild.projects.locations.operations.get";
  return query;
}

@end
