// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Tasks API (tasks/v1)
// Description:
//   The Google Tasks API lets you manage your tasks and task lists.
// Documentation:
//   https://developers.google.com/tasks/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRTasks_AssignmentInfo;
@class GTLRTasks_DriveResourceInfo;
@class GTLRTasks_SpaceInfo;
@class GTLRTasks_Task;
@class GTLRTasks_Task_Links_Item;
@class GTLRTasks_TaskList;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRTasks_AssignmentInfo.surfaceType

/**
 *  Unknown value for this task's context.
 *
 *  Value: "CONTEXT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRTasks_AssignmentInfo_SurfaceType_ContextTypeUnspecified;
/**
 *  The task is assigned from a document.
 *
 *  Value: "DOCUMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRTasks_AssignmentInfo_SurfaceType_Document;
/**
 *  The task is created from Gmail.
 *
 *  Value: "GMAIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRTasks_AssignmentInfo_SurfaceType_Gmail;
/**
 *  The task is assigned from a Chat Space.
 *
 *  Value: "SPACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRTasks_AssignmentInfo_SurfaceType_Space;

/**
 *  Information about the source of the task assignment (Document, Chat Space).
 */
@interface GTLRTasks_AssignmentInfo : GTLRObject

/**
 *  Output only. Information about the Drive file where this task originates
 *  from. Currently, the Drive file can only be a document. This field is
 *  read-only.
 */
@property(nonatomic, strong, nullable) GTLRTasks_DriveResourceInfo *driveResourceInfo;

/**
 *  Output only. An absolute link to the original task in the surface of
 *  assignment (Docs, Chat spaces, etc.).
 */
@property(nonatomic, copy, nullable) NSString *linkToTask;

/**
 *  Output only. Information about the Chat Space where this task originates
 *  from. This field is read-only.
 */
@property(nonatomic, strong, nullable) GTLRTasks_SpaceInfo *spaceInfo;

/**
 *  Output only. The type of surface this assigned task originates from.
 *  Currently limited to DOCUMENT or SPACE.
 *
 *  Likely values:
 *    @arg @c kGTLRTasks_AssignmentInfo_SurfaceType_ContextTypeUnspecified
 *        Unknown value for this task's context. (Value:
 *        "CONTEXT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRTasks_AssignmentInfo_SurfaceType_Document The task is
 *        assigned from a document. (Value: "DOCUMENT")
 *    @arg @c kGTLRTasks_AssignmentInfo_SurfaceType_Gmail The task is created
 *        from Gmail. (Value: "GMAIL")
 *    @arg @c kGTLRTasks_AssignmentInfo_SurfaceType_Space The task is assigned
 *        from a Chat Space. (Value: "SPACE")
 */
@property(nonatomic, copy, nullable) NSString *surfaceType;

@end


/**
 *  Information about the Drive resource where a task was assigned from (the
 *  document, sheet, etc.).
 */
@interface GTLRTasks_DriveResourceInfo : GTLRObject

/** Output only. Identifier of the file in the Drive API. */
@property(nonatomic, copy, nullable) NSString *driveFileId;

/**
 *  Output only. Resource key required to access files shared via a shared link.
 *  Not required for all files. See also
 *  developers.google.com/drive/api/guides/resource-keys.
 */
@property(nonatomic, copy, nullable) NSString *resourceKey;

@end


/**
 *  Information about the Chat Space where a task was assigned from.
 */
@interface GTLRTasks_SpaceInfo : GTLRObject

/**
 *  Output only. The Chat space where this task originates from. The format is
 *  "spaces/{space}".
 */
@property(nonatomic, copy, nullable) NSString *space;

@end


/**
 *  GTLRTasks_Task
 */
@interface GTLRTasks_Task : GTLRObject

/**
 *  Output only. Context information for assigned tasks. A task can be assigned
 *  to a user, currently possible from surfaces like Docs and Chat Spaces. This
 *  field is populated for tasks assigned to the current user and identifies
 *  where the task was assigned from. This field is read-only.
 */
@property(nonatomic, strong, nullable) GTLRTasks_AssignmentInfo *assignmentInfo;

/**
 *  Completion date of the task (as a RFC 3339 timestamp). This field is omitted
 *  if the task has not been completed.
 */
@property(nonatomic, copy, nullable) NSString *completed;

/**
 *  Flag indicating whether the task has been deleted. For assigned tasks this
 *  field is read-only. They can only be deleted by calling tasks.delete, in
 *  which case both the assigned task and the original task (in Docs or Chat
 *  Spaces) are deleted. To delete the assigned task only, navigate to the
 *  assignment surface and unassign the task from there. The default is False.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleted;

/**
 *  Due date of the task (as a RFC 3339 timestamp). Optional. The due date only
 *  records date information; the time portion of the timestamp is discarded
 *  when setting the due date. It isn't possible to read or write the time that
 *  a task is due via the API.
 */
@property(nonatomic, copy, nullable) NSString *due;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Flag indicating whether the task is hidden. This is the case if the task had
 *  been marked completed when the task list was last cleared. The default is
 *  False. This field is read-only.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hidden;

/**
 *  Task identifier.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Output only. Type of the resource. This is always "tasks#task". */
@property(nonatomic, copy, nullable) NSString *kind;

/** Output only. Collection of links. This collection is read-only. */
@property(nonatomic, strong, nullable) NSArray<GTLRTasks_Task_Links_Item *> *links;

/**
 *  Notes describing the task. Tasks assigned from Google Docs cannot have
 *  notes. Optional. Maximum length allowed: 8192 characters.
 */
@property(nonatomic, copy, nullable) NSString *notes;

/**
 *  Output only. Parent task identifier. This field is omitted if it is a
 *  top-level task. Use the "move" method to move the task under a different
 *  parent or to the top level. A parent task can never be an assigned task
 *  (from Chat Spaces, Docs). This field is read-only.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Output only. String indicating the position of the task among its sibling
 *  tasks under the same parent task or at the top level. If this string is
 *  greater than another task's corresponding position string according to
 *  lexicographical ordering, the task is positioned after the other task under
 *  the same parent task (or at the top level). Use the "move" method to move
 *  the task to another position.
 */
@property(nonatomic, copy, nullable) NSString *position;

/**
 *  Output only. URL pointing to this task. Used to retrieve, update, or delete
 *  this task.
 */
@property(nonatomic, copy, nullable) NSString *selfLink;

/** Status of the task. This is either "needsAction" or "completed". */
@property(nonatomic, copy, nullable) NSString *status;

/** Title of the task. Maximum length allowed: 1024 characters. */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  Output only. Last modification time of the task (as a RFC 3339 timestamp).
 */
@property(nonatomic, copy, nullable) NSString *updated;

/** Output only. An absolute link to the task in the Google Tasks Web UI. */
@property(nonatomic, copy, nullable) NSString *webViewLink;

@end


/**
 *  GTLRTasks_Task_Links_Item
 */
@interface GTLRTasks_Task_Links_Item : GTLRObject

/**
 *  The description. In HTML speak: Everything between <a> and </a>.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The URL. */
@property(nonatomic, copy, nullable) NSString *link;

/** Type of the link, e.g. "email". */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRTasks_TaskList
 */
@interface GTLRTasks_TaskList : GTLRObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Task list identifier.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Output only. Type of the resource. This is always "tasks#taskList". */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Output only. URL pointing to this task list. Used to retrieve, update, or
 *  delete this task list.
 */
@property(nonatomic, copy, nullable) NSString *selfLink;

/** Title of the task list. Maximum length allowed: 1024 characters. */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  Output only. Last modification time of the task list (as a RFC 3339
 *  timestamp).
 */
@property(nonatomic, copy, nullable) NSString *updated;

@end


/**
 *  GTLRTasks_TaskLists
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRTasks_TaskLists : GTLRCollectionObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Collection of task lists.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTasks_TaskList *> *items;

/** Type of the resource. This is always "tasks#taskLists". */
@property(nonatomic, copy, nullable) NSString *kind;

/** Token that can be used to request the next page of this result. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRTasks_Tasks
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRTasks_Tasks : GTLRCollectionObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Collection of tasks.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRTasks_Task *> *items;

/** Type of the resource. This is always "tasks#tasks". */
@property(nonatomic, copy, nullable) NSString *kind;

/** Token used to access the next page of this result. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
