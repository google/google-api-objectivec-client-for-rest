// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Parameter Manager API (parametermanager/v1)
// Description:
//   Parameter Manager is a single source of truth to store, access and manage
//   the lifecycle of your workload parameters. Parameter Manager aims to make
//   management of sensitive application parameters effortless for customers
//   without diminishing focus on security.
// Documentation:
//   https://cloud.google.com/secret-manager/parameter-manager/docs/overview

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRParameterManagerObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// view

/**
 *  Include only the metadata for the resource.
 *
 *  Value: "BASIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRParameterManagerViewBasic;
/**
 *  Include metadata & other relevant payload data as well. This is the default
 *  view.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRParameterManagerViewFull;
/**
 *  The default / unset value. The API will default to the FULL view..
 *
 *  Value: "VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRParameterManagerViewViewUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Parameter Manager query classes.
 */
@interface GTLRParameterManagerQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets information about a location.
 *
 *  Method: parametermanager.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeParameterManagerCloudPlatform
 */
@interface GTLRParameterManagerQuery_ProjectsLocationsGet : GTLRParameterManagerQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRParameterManager_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRParameterManagerQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: parametermanager.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeParameterManagerCloudPlatform
 */
@interface GTLRParameterManagerQuery_ProjectsLocationsList : GTLRParameterManagerQuery

/**
 *  Optional. A list of extra location types that should be used as conditions
 *  for controlling the visibility of the locations.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *extraLocationTypes;

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRParameterManager_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRParameterManagerQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new Parameter in a given project and location.
 *
 *  Method: parametermanager.projects.locations.parameters.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeParameterManagerCloudPlatform
 */
@interface GTLRParameterManagerQuery_ProjectsLocationsParametersCreate : GTLRParameterManagerQuery

/** Required. Id of the Parameter resource */
@property(nonatomic, copy, nullable) NSString *parameterId;

/** Required. Value for parent in the format `projects/ * /locations/ *`. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRParameterManager_Parameter.
 *
 *  Creates a new Parameter in a given project and location.
 *
 *  @param object The @c GTLRParameterManager_Parameter to include in the query.
 *  @param parent Required. Value for parent in the format `projects/ *
 *    /locations/ *`.
 *
 *  @return GTLRParameterManagerQuery_ProjectsLocationsParametersCreate
 */
+ (instancetype)queryWithObject:(GTLRParameterManager_Parameter *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Parameter.
 *
 *  Method: parametermanager.projects.locations.parameters.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeParameterManagerCloudPlatform
 */
@interface GTLRParameterManagerQuery_ProjectsLocationsParametersDelete : GTLRParameterManagerQuery

/**
 *  Required. Name of the resource in the format `projects/ * /locations/ *
 *  /parameters/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRParameterManager_Empty.
 *
 *  Deletes a single Parameter.
 *
 *  @param name Required. Name of the resource in the format `projects/ *
 *    /locations/ * /parameters/ *`.
 *
 *  @return GTLRParameterManagerQuery_ProjectsLocationsParametersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single Parameter.
 *
 *  Method: parametermanager.projects.locations.parameters.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeParameterManagerCloudPlatform
 */
@interface GTLRParameterManagerQuery_ProjectsLocationsParametersGet : GTLRParameterManagerQuery

/**
 *  Required. Name of the resource in the format `projects/ * /locations/ *
 *  /parameters/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRParameterManager_Parameter.
 *
 *  Gets details of a single Parameter.
 *
 *  @param name Required. Name of the resource in the format `projects/ *
 *    /locations/ * /parameters/ *`.
 *
 *  @return GTLRParameterManagerQuery_ProjectsLocationsParametersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Parameters in a given project and location.
 *
 *  Method: parametermanager.projects.locations.parameters.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeParameterManagerCloudPlatform
 */
@interface GTLRParameterManagerQuery_ProjectsLocationsParametersList : GTLRParameterManagerQuery

/** Optional. Filtering results */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Hint for how to order the results */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. Requested page size. Server may return fewer items than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A token identifying a page of results the server should return.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Parent value for ListParametersRequest in the format `projects/ *
 *  /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRParameterManager_ListParametersResponse.
 *
 *  Lists Parameters in a given project and location.
 *
 *  @param parent Required. Parent value for ListParametersRequest in the format
 *    `projects/ * /locations/ *`.
 *
 *  @return GTLRParameterManagerQuery_ProjectsLocationsParametersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a single Parameter.
 *
 *  Method: parametermanager.projects.locations.parameters.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeParameterManagerCloudPlatform
 */
@interface GTLRParameterManagerQuery_ProjectsLocationsParametersPatch : GTLRParameterManagerQuery

/**
 *  Identifier. [Output only] The resource name of the Parameter in the format
 *  `projects/ * /locations/ * /parameters/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Field mask is used to specify the fields to be overwritten in the
 *  Parameter resource by the update. The fields specified in the update_mask
 *  are relative to the resource, not the full request. A mutable field will be
 *  overwritten if it is in the mask. If the user does not provide a mask then
 *  all mutable fields present in the request will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRParameterManager_Parameter.
 *
 *  Updates a single Parameter.
 *
 *  @param object The @c GTLRParameterManager_Parameter to include in the query.
 *  @param name Identifier. [Output only] The resource name of the Parameter in
 *    the format `projects/ * /locations/ * /parameters/ *`.
 *
 *  @return GTLRParameterManagerQuery_ProjectsLocationsParametersPatch
 */
+ (instancetype)queryWithObject:(GTLRParameterManager_Parameter *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new ParameterVersion in a given project, location, and parameter.
 *
 *  Method: parametermanager.projects.locations.parameters.versions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeParameterManagerCloudPlatform
 */
@interface GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsCreate : GTLRParameterManagerQuery

/** Required. Id of the ParameterVersion resource */
@property(nonatomic, copy, nullable) NSString *parameterVersionId;

/**
 *  Required. Value for parent in the format `projects/ * /locations/ *
 *  /parameters/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRParameterManager_ParameterVersion.
 *
 *  Creates a new ParameterVersion in a given project, location, and parameter.
 *
 *  @param object The @c GTLRParameterManager_ParameterVersion to include in the
 *    query.
 *  @param parent Required. Value for parent in the format `projects/ *
 *    /locations/ * /parameters/ *`.
 *
 *  @return GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsCreate
 */
+ (instancetype)queryWithObject:(GTLRParameterManager_ParameterVersion *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single ParameterVersion.
 *
 *  Method: parametermanager.projects.locations.parameters.versions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeParameterManagerCloudPlatform
 */
@interface GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsDelete : GTLRParameterManagerQuery

/**
 *  Required. Name of the resource in the format `projects/ * /locations/ *
 *  /parameters/ * /versions/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRParameterManager_Empty.
 *
 *  Deletes a single ParameterVersion.
 *
 *  @param name Required. Name of the resource in the format `projects/ *
 *    /locations/ * /parameters/ * /versions/ *`.
 *
 *  @return GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single ParameterVersion.
 *
 *  Method: parametermanager.projects.locations.parameters.versions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeParameterManagerCloudPlatform
 */
@interface GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsGet : GTLRParameterManagerQuery

/**
 *  Required. Name of the resource in the format `projects/ * /locations/ *
 *  /parameters/ * /versions/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. View of the ParameterVersion. In the default FULL view, all
 *  metadata & payload associated with the ParameterVersion will be returned.
 *
 *  Likely values:
 *    @arg @c kGTLRParameterManagerViewViewUnspecified The default / unset
 *        value. The API will default to the FULL view.. (Value:
 *        "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRParameterManagerViewBasic Include only the metadata for the
 *        resource. (Value: "BASIC")
 *    @arg @c kGTLRParameterManagerViewFull Include metadata & other relevant
 *        payload data as well. This is the default view. (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRParameterManager_ParameterVersion.
 *
 *  Gets details of a single ParameterVersion.
 *
 *  @param name Required. Name of the resource in the format `projects/ *
 *    /locations/ * /parameters/ * /versions/ *`.
 *
 *  @return GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists ParameterVersions in a given project, location, and parameter.
 *
 *  Method: parametermanager.projects.locations.parameters.versions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeParameterManagerCloudPlatform
 */
@interface GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsList : GTLRParameterManagerQuery

/** Optional. Filtering results */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Hint for how to order the results */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. Requested page size. Server may return fewer items than requested.
 *  If unspecified, server will pick an appropriate default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A token identifying a page of results the server should return.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Parent value for ListParameterVersionsRequest in the format
 *  `projects/ * /locations/ * /parameters/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRParameterManager_ListParameterVersionsResponse.
 *
 *  Lists ParameterVersions in a given project, location, and parameter.
 *
 *  @param parent Required. Parent value for ListParameterVersionsRequest in the
 *    format `projects/ * /locations/ * /parameters/ *`.
 *
 *  @return GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a single ParameterVersion.
 *
 *  Method: parametermanager.projects.locations.parameters.versions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeParameterManagerCloudPlatform
 */
@interface GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsPatch : GTLRParameterManagerQuery

/**
 *  Identifier. [Output only] The resource name of the ParameterVersion in the
 *  format `projects/ * /locations/ * /parameters/ * /versions/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Field mask is used to specify the fields to be overwritten in the
 *  ParameterVersion resource by the update. The fields specified in the
 *  update_mask are relative to the resource, not the full request. A mutable
 *  field will be overwritten if it is in the mask. If the user does not provide
 *  a mask then all mutable fields present in the request will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRParameterManager_ParameterVersion.
 *
 *  Updates a single ParameterVersion.
 *
 *  @param object The @c GTLRParameterManager_ParameterVersion to include in the
 *    query.
 *  @param name Identifier. [Output only] The resource name of the
 *    ParameterVersion in the format `projects/ * /locations/ * /parameters/ *
 *    /versions/ *`.
 *
 *  @return GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsPatch
 */
+ (instancetype)queryWithObject:(GTLRParameterManager_ParameterVersion *)object
                           name:(NSString *)name;

@end

/**
 *  Gets rendered version of a ParameterVersion.
 *
 *  Method: parametermanager.projects.locations.parameters.versions.render
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeParameterManagerCloudPlatform
 */
@interface GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsRender : GTLRParameterManagerQuery

/** Required. Name of the resource */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRParameterManager_RenderParameterVersionResponse.
 *
 *  Gets rendered version of a ParameterVersion.
 *
 *  @param name Required. Name of the resource
 *
 *  @return GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsRender
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
