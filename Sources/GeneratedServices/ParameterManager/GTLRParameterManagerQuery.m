// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Parameter Manager API (parametermanager/v1)
// Description:
//   Parameter Manager is a single source of truth to store, access and manage
//   the lifecycle of your workload parameters. Parameter Manager aims to make
//   management of sensitive application parameters effortless for customers
//   without diminishing focus on security.
// Documentation:
//   https://cloud.google.com/secret-manager/parameter-manager/docs/overview

#import <GoogleAPIClientForREST/GTLRParameterManagerQuery.h>

// ----------------------------------------------------------------------------
// Constants

// view
NSString * const kGTLRParameterManagerViewBasic           = @"BASIC";
NSString * const kGTLRParameterManagerViewFull            = @"FULL";
NSString * const kGTLRParameterManagerViewViewUnspecified = @"VIEW_UNSPECIFIED";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRParameterManagerQuery

@dynamic fields;

@end

@implementation GTLRParameterManagerQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRParameterManagerQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRParameterManager_Location class];
  query.loggingName = @"parametermanager.projects.locations.get";
  return query;
}

@end

@implementation GTLRParameterManagerQuery_ProjectsLocationsList

@dynamic extraLocationTypes, filter, name, pageSize, pageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"extraLocationTypes" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRParameterManagerQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRParameterManager_ListLocationsResponse class];
  query.loggingName = @"parametermanager.projects.locations.list";
  return query;
}

@end

@implementation GTLRParameterManagerQuery_ProjectsLocationsParametersCreate

@dynamic parameterId, parent, requestId;

+ (instancetype)queryWithObject:(GTLRParameterManager_Parameter *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/parameters";
  GTLRParameterManagerQuery_ProjectsLocationsParametersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRParameterManager_Parameter class];
  query.loggingName = @"parametermanager.projects.locations.parameters.create";
  return query;
}

@end

@implementation GTLRParameterManagerQuery_ProjectsLocationsParametersDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRParameterManagerQuery_ProjectsLocationsParametersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRParameterManager_Empty class];
  query.loggingName = @"parametermanager.projects.locations.parameters.delete";
  return query;
}

@end

@implementation GTLRParameterManagerQuery_ProjectsLocationsParametersGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRParameterManagerQuery_ProjectsLocationsParametersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRParameterManager_Parameter class];
  query.loggingName = @"parametermanager.projects.locations.parameters.get";
  return query;
}

@end

@implementation GTLRParameterManagerQuery_ProjectsLocationsParametersList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/parameters";
  GTLRParameterManagerQuery_ProjectsLocationsParametersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRParameterManager_ListParametersResponse class];
  query.loggingName = @"parametermanager.projects.locations.parameters.list";
  return query;
}

@end

@implementation GTLRParameterManagerQuery_ProjectsLocationsParametersPatch

@dynamic name, requestId, updateMask;

+ (instancetype)queryWithObject:(GTLRParameterManager_Parameter *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRParameterManagerQuery_ProjectsLocationsParametersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRParameterManager_Parameter class];
  query.loggingName = @"parametermanager.projects.locations.parameters.patch";
  return query;
}

@end

@implementation GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsCreate

@dynamic parameterVersionId, parent, requestId;

+ (instancetype)queryWithObject:(GTLRParameterManager_ParameterVersion *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/versions";
  GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRParameterManager_ParameterVersion class];
  query.loggingName = @"parametermanager.projects.locations.parameters.versions.create";
  return query;
}

@end

@implementation GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRParameterManager_Empty class];
  query.loggingName = @"parametermanager.projects.locations.parameters.versions.delete";
  return query;
}

@end

@implementation GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsGet

@dynamic name, view;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRParameterManager_ParameterVersion class];
  query.loggingName = @"parametermanager.projects.locations.parameters.versions.get";
  return query;
}

@end

@implementation GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/versions";
  GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRParameterManager_ListParameterVersionsResponse class];
  query.loggingName = @"parametermanager.projects.locations.parameters.versions.list";
  return query;
}

@end

@implementation GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsPatch

@dynamic name, requestId, updateMask;

+ (instancetype)queryWithObject:(GTLRParameterManager_ParameterVersion *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRParameterManager_ParameterVersion class];
  query.loggingName = @"parametermanager.projects.locations.parameters.versions.patch";
  return query;
}

@end

@implementation GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsRender

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:render";
  GTLRParameterManagerQuery_ProjectsLocationsParametersVersionsRender *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRParameterManager_RenderParameterVersionResponse class];
  query.loggingName = @"parametermanager.projects.locations.parameters.versions.render";
  return query;
}

@end
