// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase App Check API (firebaseappcheck/v1)
// Description:
//   Firebase App Check works alongside other Firebase services to help protect
//   your backend resources from abuse, such as billing fraud or phishing.
// Documentation:
//   https://firebase.google.com/docs/app-check

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRFirebaseappcheckObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Firebaseappcheck query classes.
 */
@interface GTLRFirebaseappcheckQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Returns a public JWK set as specified by [RFC
 *  7517](https://tools.ietf.org/html/rfc7517) that can be used to verify App
 *  Check tokens. Exactly one of the public keys in the returned set will
 *  successfully validate any App Check token that is currently valid.
 *
 *  Method: firebaseappcheck.jwks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_JwksGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name to the public JWK set. Must always be
 *  exactly the string `jwks`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1PublicJwkSet.
 *
 *  Returns a public JWK set as specified by [RFC
 *  7517](https://tools.ietf.org/html/rfc7517) that can be used to verify App
 *  Check tokens. Exactly one of the public keys in the returned set will
 *  successfully validate any App Check token that is currently valid.
 *
 *  @param name Required. The relative resource name to the public JWK set. Must
 *    always be exactly the string `jwks`.
 *
 *  @return GTLRFirebaseappcheckQuery_JwksGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Atomically gets the AppAttestConfigs for the specified list of apps.
 *
 *  Method: firebaseappcheck.projects.apps.appAttestConfig.batchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsAppAttestConfigBatchGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource names of the AppAttestConfigs to retrieve,
 *  in the format ``` projects/{project_number}/apps/{app_id}/appAttestConfig
 *  ``` A maximum of 100 objects can be retrieved in a batch.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

/**
 *  Required. The parent project name shared by all AppAttestConfigs being
 *  retrieved, in the format ``` projects/{project_number} ``` The parent
 *  collection in the `name` field of any resource being retrieved must match
 *  this field, or the entire batch fails.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1BatchGetAppAttestConfigsResponse.
 *
 *  Atomically gets the AppAttestConfigs for the specified list of apps.
 *
 *  @param parent Required. The parent project name shared by all
 *    AppAttestConfigs being retrieved, in the format ```
 *    projects/{project_number} ``` The parent collection in the `name` field of
 *    any resource being retrieved must match this field, or the entire batch
 *    fails.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsAppAttestConfigBatchGet
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the AppAttestConfig for the specified app.
 *
 *  Method: firebaseappcheck.projects.apps.appAttestConfig.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsAppAttestConfigGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the AppAttestConfig, in the format:
 *  ``` projects/{project_number}/apps/{app_id}/appAttestConfig ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1AppAttestConfig.
 *
 *  Gets the AppAttestConfig for the specified app.
 *
 *  @param name Required. The relative resource name of the AppAttestConfig, in
 *    the format: ``` projects/{project_number}/apps/{app_id}/appAttestConfig
 *    ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsAppAttestConfigGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the AppAttestConfig for the specified app. While this configuration
 *  is incomplete or invalid, the app will be unable to exchange AppAttest
 *  tokens for App Check tokens.
 *
 *  Method: firebaseappcheck.projects.apps.appAttestConfig.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsAppAttestConfigPatch : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the App Attest configuration object,
 *  in the format: ``` projects/{project_number}/apps/{app_id}/appAttestConfig
 *  ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A comma-separated list of names of fields in the AppAttestConfig
 *  Gets to update. Example: `token_ttl`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1AppAttestConfig.
 *
 *  Updates the AppAttestConfig for the specified app. While this configuration
 *  is incomplete or invalid, the app will be unable to exchange AppAttest
 *  tokens for App Check tokens.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1AppAttestConfig to include in
 *    the query.
 *  @param name Required. The relative resource name of the App Attest
 *    configuration object, in the format: ```
 *    projects/{project_number}/apps/{app_id}/appAttestConfig ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsAppAttestConfigPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1AppAttestConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new DebugToken for the specified app. For security reasons, after
 *  the creation operation completes, the `token` field cannot be updated or
 *  retrieved, but you can revoke the debug token using DeleteDebugToken. Each
 *  app can have a maximum of 20 debug tokens.
 *
 *  Method: firebaseappcheck.projects.apps.debugTokens.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensCreate : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the parent app in which the
 *  specified DebugToken will be created, in the format: ```
 *  projects/{project_number}/apps/{app_id} ```
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1DebugToken.
 *
 *  Creates a new DebugToken for the specified app. For security reasons, after
 *  the creation operation completes, the `token` field cannot be updated or
 *  retrieved, but you can revoke the debug token using DeleteDebugToken. Each
 *  app can have a maximum of 20 debug tokens.
 *
 *  @param object The @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1DebugToken
 *    to include in the query.
 *  @param parent Required. The relative resource name of the parent app in
 *    which the specified DebugToken will be created, in the format: ```
 *    projects/{project_number}/apps/{app_id} ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1DebugToken *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes the specified DebugToken. A deleted debug token cannot be used to
 *  exchange for an App Check token. Use this method when you suspect the secret
 *  `token` has been compromised or when you no longer need the debug token.
 *
 *  Method: firebaseappcheck.projects.apps.debugTokens.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensDelete : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the DebugToken to delete, in the
 *  format: ```
 *  projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleProtobufEmpty.
 *
 *  Deletes the specified DebugToken. A deleted debug token cannot be used to
 *  exchange for an App Check token. Use this method when you suspect the secret
 *  `token` has been compromised or when you no longer need the debug token.
 *
 *  @param name Required. The relative resource name of the DebugToken to
 *    delete, in the format: ```
 *    projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the specified DebugToken. For security reasons, the `token` field is
 *  never populated in the response.
 *
 *  Method: firebaseappcheck.projects.apps.debugTokens.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the debug token, in the format: ```
 *  projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1DebugToken.
 *
 *  Gets the specified DebugToken. For security reasons, the `token` field is
 *  never populated in the response.
 *
 *  @param name Required. The relative resource name of the debug token, in the
 *    format: ```
 *    projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all DebugTokens for the specified app. For security reasons, the
 *  `token` field is never populated in the response.
 *
 *  Method: firebaseappcheck.projects.apps.debugTokens.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensList : GTLRFirebaseappcheckQuery

/**
 *  The maximum number of DebugTokens to return in the response. Note that an
 *  app can have at most 20 debug tokens. The server may return fewer than this
 *  at its own discretion. If no value is specified (or too large a value is
 *  specified), the server will impose its own limit.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to ListDebugTokens indicating where in
 *  the set of DebugTokens to resume listing. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to
 *  ListDebugTokens must match the call that provided the page token; if they do
 *  not match, the result is undefined.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The relative resource name of the parent app for which to list
 *  each associated DebugToken, in the format: ```
 *  projects/{project_number}/apps/{app_id} ```
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ListDebugTokensResponse.
 *
 *  Lists all DebugTokens for the specified app. For security reasons, the
 *  `token` field is never populated in the response.
 *
 *  @param parent Required. The relative resource name of the parent app for
 *    which to list each associated DebugToken, in the format: ```
 *    projects/{project_number}/apps/{app_id} ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the specified DebugToken. For security reasons, the `token` field
 *  cannot be updated, nor will it be populated in the response, but you can
 *  revoke the debug token using DeleteDebugToken.
 *
 *  Method: firebaseappcheck.projects.apps.debugTokens.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensPatch : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the debug token, in the format: ```
 *  projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A comma-separated list of names of fields in the DebugToken to
 *  update. Example: `display_name`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1DebugToken.
 *
 *  Updates the specified DebugToken. For security reasons, the `token` field
 *  cannot be updated, nor will it be populated in the response, but you can
 *  revoke the debug token using DeleteDebugToken.
 *
 *  @param object The @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1DebugToken
 *    to include in the query.
 *  @param name Required. The relative resource name of the debug token, in the
 *    format: ```
 *    projects/{project_number}/apps/{app_id}/debugTokens/{debug_token_id} ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsDebugTokensPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1DebugToken *)object
                           name:(NSString *)name;

@end

/**
 *  Atomically gets the DeviceCheckConfigs for the specified list of apps. For
 *  security reasons, the `private_key` field is never populated in the
 *  response.
 *
 *  Method: firebaseappcheck.projects.apps.deviceCheckConfig.batchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigBatchGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource names of the DeviceCheckConfigs to retrieve,
 *  in the format ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig
 *  ``` A maximum of 100 objects can be retrieved in a batch.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

/**
 *  Required. The parent project name shared by all DeviceCheckConfigs being
 *  retrieved, in the format ``` projects/{project_number} ``` The parent
 *  collection in the `name` field of any resource being retrieved must match
 *  this field, or the entire batch fails.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1BatchGetDeviceCheckConfigsResponse.
 *
 *  Atomically gets the DeviceCheckConfigs for the specified list of apps. For
 *  security reasons, the `private_key` field is never populated in the
 *  response.
 *
 *  @param parent Required. The parent project name shared by all
 *    DeviceCheckConfigs being retrieved, in the format ```
 *    projects/{project_number} ``` The parent collection in the `name` field of
 *    any resource being retrieved must match this field, or the entire batch
 *    fails.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigBatchGet
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the DeviceCheckConfig for the specified app. For security reasons, the
 *  `private_key` field is never populated in the response.
 *
 *  Method: firebaseappcheck.projects.apps.deviceCheckConfig.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the DeviceCheckConfig, in the
 *  format: ``` projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1DeviceCheckConfig.
 *
 *  Gets the DeviceCheckConfig for the specified app. For security reasons, the
 *  `private_key` field is never populated in the response.
 *
 *  @param name Required. The relative resource name of the DeviceCheckConfig,
 *    in the format: ```
 *    projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the DeviceCheckConfig for the specified app. While this
 *  configuration is incomplete or invalid, the app will be unable to exchange
 *  DeviceCheck tokens for App Check tokens. For security reasons, the
 *  `private_key` field is never populated in the response.
 *
 *  Method: firebaseappcheck.projects.apps.deviceCheckConfig.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigPatch : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the DeviceCheck configuration
 *  object, in the format: ```
 *  projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A comma-separated list of names of fields in the DeviceCheckConfig
 *  Gets to update. Example: `key_id,private_key`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1DeviceCheckConfig.
 *
 *  Updates the DeviceCheckConfig for the specified app. While this
 *  configuration is incomplete or invalid, the app will be unable to exchange
 *  DeviceCheck tokens for App Check tokens. For security reasons, the
 *  `private_key` field is never populated in the response.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1DeviceCheckConfig to include
 *    in the query.
 *  @param name Required. The relative resource name of the DeviceCheck
 *    configuration object, in the format: ```
 *    projects/{project_number}/apps/{app_id}/deviceCheckConfig ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsDeviceCheckConfigPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1DeviceCheckConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Accepts an App Attest assertion and an artifact previously obtained from
 *  ExchangeAppAttestAttestation and verifies those with Apple. If valid,
 *  returns an AppCheckToken.
 *
 *  Method: firebaseappcheck.projects.apps.exchangeAppAttestAssertion
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsExchangeAppAttestAssertion : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the iOS app, in the format: ```
 *  projects/{project_number}/apps/{app_id} ``` If necessary, the
 *  `project_number` element can be replaced with the project ID of the Firebase
 *  project. Learn more about using project identifiers in Google's [AIP
 *  2510](https://google.aip.dev/cloud/2510) standard.
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1AppCheckToken.
 *
 *  Accepts an App Attest assertion and an artifact previously obtained from
 *  ExchangeAppAttestAttestation and verifies those with Apple. If valid,
 *  returns an AppCheckToken.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeAppAttestAssertionRequest
 *    to include in the query.
 *  @param app Required. The relative resource name of the iOS app, in the
 *    format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the
 *    `project_number` element can be replaced with the project ID of the
 *    Firebase project. Learn more about using project identifiers in Google's
 *    [AIP 2510](https://google.aip.dev/cloud/2510) standard.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsExchangeAppAttestAssertion
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeAppAttestAssertionRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Accepts an App Attest CBOR attestation and verifies it with Apple using your
 *  preconfigured team and bundle IDs. If valid, returns an attestation artifact
 *  that can later be exchanged for an AppCheckToken using
 *  ExchangeAppAttestAssertion. For convenience and performance, this method's
 *  response object will also contain an AppCheckToken (if the verification is
 *  successful).
 *
 *  Method: firebaseappcheck.projects.apps.exchangeAppAttestAttestation
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsExchangeAppAttestAttestation : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the iOS app, in the format: ```
 *  projects/{project_number}/apps/{app_id} ``` If necessary, the
 *  `project_number` element can be replaced with the project ID of the Firebase
 *  project. Learn more about using project identifiers in Google's [AIP
 *  2510](https://google.aip.dev/cloud/2510) standard.
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationResponse.
 *
 *  Accepts an App Attest CBOR attestation and verifies it with Apple using your
 *  preconfigured team and bundle IDs. If valid, returns an attestation artifact
 *  that can later be exchanged for an AppCheckToken using
 *  ExchangeAppAttestAssertion. For convenience and performance, this method's
 *  response object will also contain an AppCheckToken (if the verification is
 *  successful).
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationRequest
 *    to include in the query.
 *  @param app Required. The relative resource name of the iOS app, in the
 *    format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the
 *    `project_number` element can be replaced with the project ID of the
 *    Firebase project. Learn more about using project identifiers in Google's
 *    [AIP 2510](https://google.aip.dev/cloud/2510) standard.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsExchangeAppAttestAttestation
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeAppAttestAttestationRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Validates a custom token signed using your project's Admin SDK service
 *  account credentials. If valid, returns an AppCheckToken.
 *
 *  Method: firebaseappcheck.projects.apps.exchangeCustomToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsExchangeCustomToken : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the app, in the format: ```
 *  projects/{project_number}/apps/{app_id} ``` If necessary, the
 *  `project_number` element can be replaced with the project ID of the Firebase
 *  project. Learn more about using project identifiers in Google's [AIP
 *  2510](https://google.aip.dev/cloud/2510) standard.
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1AppCheckToken.
 *
 *  Validates a custom token signed using your project's Admin SDK service
 *  account credentials. If valid, returns an AppCheckToken.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeCustomTokenRequest to
 *    include in the query.
 *  @param app Required. The relative resource name of the app, in the format:
 *    ``` projects/{project_number}/apps/{app_id} ``` If necessary, the
 *    `project_number` element can be replaced with the project ID of the
 *    Firebase project. Learn more about using project identifiers in Google's
 *    [AIP 2510](https://google.aip.dev/cloud/2510) standard.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsExchangeCustomToken
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeCustomTokenRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Validates a debug token secret that you have previously created using
 *  CreateDebugToken. If valid, returns an AppCheckToken. Note that a
 *  restrictive quota is enforced on this method to prevent accidental exposure
 *  of the app to abuse.
 *
 *  Method: firebaseappcheck.projects.apps.exchangeDebugToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsExchangeDebugToken : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the app, in the format: ```
 *  projects/{project_number}/apps/{app_id} ``` If necessary, the
 *  `project_number` element can be replaced with the project ID of the Firebase
 *  project. Learn more about using project identifiers in Google's [AIP
 *  2510](https://google.aip.dev/cloud/2510) standard.
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1AppCheckToken.
 *
 *  Validates a debug token secret that you have previously created using
 *  CreateDebugToken. If valid, returns an AppCheckToken. Note that a
 *  restrictive quota is enforced on this method to prevent accidental exposure
 *  of the app to abuse.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeDebugTokenRequest to
 *    include in the query.
 *  @param app Required. The relative resource name of the app, in the format:
 *    ``` projects/{project_number}/apps/{app_id} ``` If necessary, the
 *    `project_number` element can be replaced with the project ID of the
 *    Firebase project. Learn more about using project identifiers in Google's
 *    [AIP 2510](https://google.aip.dev/cloud/2510) standard.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsExchangeDebugToken
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeDebugTokenRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Accepts a
 *  [`device_token`](https://developer.apple.com/documentation/devicecheck/dcdevice)
 *  issued by DeviceCheck, and attempts to validate it with Apple. If valid,
 *  returns an AppCheckToken.
 *
 *  Method: firebaseappcheck.projects.apps.exchangeDeviceCheckToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsExchangeDeviceCheckToken : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the iOS app, in the format: ```
 *  projects/{project_number}/apps/{app_id} ``` If necessary, the
 *  `project_number` element can be replaced with the project ID of the Firebase
 *  project. Learn more about using project identifiers in Google's [AIP
 *  2510](https://google.aip.dev/cloud/2510) standard.
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1AppCheckToken.
 *
 *  Accepts a
 *  [`device_token`](https://developer.apple.com/documentation/devicecheck/dcdevice)
 *  issued by DeviceCheck, and attempts to validate it with Apple. If valid,
 *  returns an AppCheckToken.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeDeviceCheckTokenRequest
 *    to include in the query.
 *  @param app Required. The relative resource name of the iOS app, in the
 *    format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the
 *    `project_number` element can be replaced with the project ID of the
 *    Firebase project. Learn more about using project identifiers in Google's
 *    [AIP 2510](https://google.aip.dev/cloud/2510) standard.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsExchangeDeviceCheckToken
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeDeviceCheckTokenRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Validates an [integrity verdict response token from Play
 *  Integrity](https://developer.android.com/google/play/integrity/verdict#decrypt-verify).
 *  If valid, returns an AppCheckToken.
 *
 *  Method: firebaseappcheck.projects.apps.exchangePlayIntegrityToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsExchangePlayIntegrityToken : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the Android app, in the format: ```
 *  projects/{project_number}/apps/{app_id} ``` If necessary, the
 *  `project_number` element can be replaced with the project ID of the Firebase
 *  project. Learn more about using project identifiers in Google's [AIP
 *  2510](https://google.aip.dev/cloud/2510) standard.
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1AppCheckToken.
 *
 *  Validates an [integrity verdict response token from Play
 *  Integrity](https://developer.android.com/google/play/integrity/verdict#decrypt-verify).
 *  If valid, returns an AppCheckToken.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangePlayIntegrityTokenRequest
 *    to include in the query.
 *  @param app Required. The relative resource name of the Android app, in the
 *    format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the
 *    `project_number` element can be replaced with the project ID of the
 *    Firebase project. Learn more about using project identifiers in Google's
 *    [AIP 2510](https://google.aip.dev/cloud/2510) standard.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsExchangePlayIntegrityToken
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangePlayIntegrityTokenRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Validates a [reCAPTCHA Enterprise response
 *  token](https://cloud.google.com/recaptcha-enterprise/docs/create-assessment#retrieve_token).
 *  If valid, returns an AppCheckToken.
 *
 *  Method: firebaseappcheck.projects.apps.exchangeRecaptchaEnterpriseToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsExchangeRecaptchaEnterpriseToken : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the web app, in the format: ```
 *  projects/{project_number}/apps/{app_id} ``` If necessary, the
 *  `project_number` element can be replaced with the project ID of the Firebase
 *  project. Learn more about using project identifiers in Google's [AIP
 *  2510](https://google.aip.dev/cloud/2510) standard.
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1AppCheckToken.
 *
 *  Validates a [reCAPTCHA Enterprise response
 *  token](https://cloud.google.com/recaptcha-enterprise/docs/create-assessment#retrieve_token).
 *  If valid, returns an AppCheckToken.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeRecaptchaEnterpriseTokenRequest
 *    to include in the query.
 *  @param app Required. The relative resource name of the web app, in the
 *    format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the
 *    `project_number` element can be replaced with the project ID of the
 *    Firebase project. Learn more about using project identifiers in Google's
 *    [AIP 2510](https://google.aip.dev/cloud/2510) standard.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsExchangeRecaptchaEnterpriseToken
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeRecaptchaEnterpriseTokenRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Validates a [reCAPTCHA v3 response
 *  token](https://developers.google.com/recaptcha/docs/v3). If valid, returns
 *  an AppCheckToken.
 *
 *  Method: firebaseappcheck.projects.apps.exchangeRecaptchaV3Token
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsExchangeRecaptchaV3Token : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the web app, in the format: ```
 *  projects/{project_number}/apps/{app_id} ``` If necessary, the
 *  `project_number` element can be replaced with the project ID of the Firebase
 *  project. Learn more about using project identifiers in Google's [AIP
 *  2510](https://google.aip.dev/cloud/2510) standard.
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1AppCheckToken.
 *
 *  Validates a [reCAPTCHA v3 response
 *  token](https://developers.google.com/recaptcha/docs/v3). If valid, returns
 *  an AppCheckToken.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeRecaptchaV3TokenRequest
 *    to include in the query.
 *  @param app Required. The relative resource name of the web app, in the
 *    format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the
 *    `project_number` element can be replaced with the project ID of the
 *    Firebase project. Learn more about using project identifiers in Google's
 *    [AIP 2510](https://google.aip.dev/cloud/2510) standard.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsExchangeRecaptchaV3Token
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeRecaptchaV3TokenRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Validates a [SafetyNet
 *  token](https://developer.android.com/training/safetynet/attestation#request-attestation-step).
 *  If valid, returns an AppCheckToken.
 *
 *  Method: firebaseappcheck.projects.apps.exchangeSafetyNetToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsExchangeSafetyNetToken : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the Android app, in the format: ```
 *  projects/{project_number}/apps/{app_id} ``` If necessary, the
 *  `project_number` element can be replaced with the project ID of the Firebase
 *  project. Learn more about using project identifiers in Google's [AIP
 *  2510](https://google.aip.dev/cloud/2510) standard.
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1AppCheckToken.
 *
 *  Validates a [SafetyNet
 *  token](https://developer.android.com/training/safetynet/attestation#request-attestation-step).
 *  If valid, returns an AppCheckToken.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeSafetyNetTokenRequest
 *    to include in the query.
 *  @param app Required. The relative resource name of the Android app, in the
 *    format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the
 *    `project_number` element can be replaced with the project ID of the
 *    Firebase project. Learn more about using project identifiers in Google's
 *    [AIP 2510](https://google.aip.dev/cloud/2510) standard.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsExchangeSafetyNetToken
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ExchangeSafetyNetTokenRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Generates a challenge that protects the integrity of an immediately
 *  following call to ExchangeAppAttestAttestation or
 *  ExchangeAppAttestAssertion. A challenge should not be reused for multiple
 *  calls.
 *
 *  Method: firebaseappcheck.projects.apps.generateAppAttestChallenge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsGenerateAppAttestChallenge : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the iOS app, in the format: ```
 *  projects/{project_number}/apps/{app_id} ``` If necessary, the
 *  `project_number` element can be replaced with the project ID of the Firebase
 *  project. Learn more about using project identifiers in Google's [AIP
 *  2510](https://google.aip.dev/cloud/2510) standard.
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1GenerateAppAttestChallengeResponse.
 *
 *  Generates a challenge that protects the integrity of an immediately
 *  following call to ExchangeAppAttestAttestation or
 *  ExchangeAppAttestAssertion. A challenge should not be reused for multiple
 *  calls.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1GenerateAppAttestChallengeRequest
 *    to include in the query.
 *  @param app Required. The relative resource name of the iOS app, in the
 *    format: ``` projects/{project_number}/apps/{app_id} ``` If necessary, the
 *    `project_number` element can be replaced with the project ID of the
 *    Firebase project. Learn more about using project identifiers in Google's
 *    [AIP 2510](https://google.aip.dev/cloud/2510) standard.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsGenerateAppAttestChallenge
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1GenerateAppAttestChallengeRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Generates a challenge that protects the integrity of an immediately
 *  following integrity verdict request to the Play Integrity API. The next call
 *  to ExchangePlayIntegrityToken using the resulting integrity token will
 *  verify the presence and validity of the challenge. A challenge should not be
 *  reused for multiple calls.
 *
 *  Method: firebaseappcheck.projects.apps.generatePlayIntegrityChallenge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsGeneratePlayIntegrityChallenge : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the app, in the format: ```
 *  projects/{project_number}/apps/{app_id} ``` If necessary, the
 *  `project_number` element can be replaced with the project ID of the Firebase
 *  project. Learn more about using project identifiers in Google's [AIP
 *  2510](https://google.aip.dev/cloud/2510) standard.
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeResponse.
 *
 *  Generates a challenge that protects the integrity of an immediately
 *  following integrity verdict request to the Play Integrity API. The next call
 *  to ExchangePlayIntegrityToken using the resulting integrity token will
 *  verify the presence and validity of the challenge. A challenge should not be
 *  reused for multiple calls.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeRequest
 *    to include in the query.
 *  @param app Required. The relative resource name of the app, in the format:
 *    ``` projects/{project_number}/apps/{app_id} ``` If necessary, the
 *    `project_number` element can be replaced with the project ID of the
 *    Firebase project. Learn more about using project identifiers in Google's
 *    [AIP 2510](https://google.aip.dev/cloud/2510) standard.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsGeneratePlayIntegrityChallenge
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1GeneratePlayIntegrityChallengeRequest *)object
                            app:(NSString *)app;

@end

/**
 *  Atomically gets the PlayIntegrityConfigs for the specified list of apps.
 *
 *  Method: firebaseappcheck.projects.apps.playIntegrityConfig.batchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsPlayIntegrityConfigBatchGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource names of the PlayIntegrityConfigs to
 *  retrieve, in the format ```
 *  projects/{project_number}/apps/{app_id}/playIntegrityConfig ``` A maximum of
 *  100 objects can be retrieved in a batch.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

/**
 *  Required. The parent project name shared by all PlayIntegrityConfigs being
 *  retrieved, in the format ``` projects/{project_number} ``` The parent
 *  collection in the `name` field of any resource being retrieved must match
 *  this field, or the entire batch fails.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1BatchGetPlayIntegrityConfigsResponse.
 *
 *  Atomically gets the PlayIntegrityConfigs for the specified list of apps.
 *
 *  @param parent Required. The parent project name shared by all
 *    PlayIntegrityConfigs being retrieved, in the format ```
 *    projects/{project_number} ``` The parent collection in the `name` field of
 *    any resource being retrieved must match this field, or the entire batch
 *    fails.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsPlayIntegrityConfigBatchGet
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the PlayIntegrityConfig for the specified app.
 *
 *  Method: firebaseappcheck.projects.apps.playIntegrityConfig.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsPlayIntegrityConfigGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the PlayIntegrityConfig, in the
 *  format: ``` projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1PlayIntegrityConfig.
 *
 *  Gets the PlayIntegrityConfig for the specified app.
 *
 *  @param name Required. The relative resource name of the PlayIntegrityConfig,
 *    in the format: ```
 *    projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsPlayIntegrityConfigGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the PlayIntegrityConfig for the specified app. While this
 *  configuration is incomplete or invalid, the app will be unable to exchange
 *  Play Integrity tokens for App Check tokens.
 *
 *  Method: firebaseappcheck.projects.apps.playIntegrityConfig.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsPlayIntegrityConfigPatch : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the Play Integrity configuration
 *  object, in the format: ```
 *  projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A comma-separated list of names of fields in the
 *  PlayIntegrityConfig Gets to update. Example: `token_ttl`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1PlayIntegrityConfig.
 *
 *  Updates the PlayIntegrityConfig for the specified app. While this
 *  configuration is incomplete or invalid, the app will be unable to exchange
 *  Play Integrity tokens for App Check tokens.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1PlayIntegrityConfig to
 *    include in the query.
 *  @param name Required. The relative resource name of the Play Integrity
 *    configuration object, in the format: ```
 *    projects/{project_number}/apps/{app_id}/playIntegrityConfig ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsPlayIntegrityConfigPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1PlayIntegrityConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Atomically gets the RecaptchaEnterpriseConfigs for the specified list of
 *  apps.
 *
 *  Method: firebaseappcheck.projects.apps.recaptchaEnterpriseConfig.batchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaEnterpriseConfigBatchGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource names of the RecaptchaEnterpriseConfigs to
 *  retrieve, in the format: ```
 *  projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ``` A
 *  maximum of 100 objects can be retrieved in a batch.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

/**
 *  Required. The parent project name shared by all RecaptchaEnterpriseConfigs
 *  being retrieved, in the format ``` projects/{project_number} ``` The parent
 *  collection in the `name` field of any resource being retrieved must match
 *  this field, or the entire batch fails.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1BatchGetRecaptchaEnterpriseConfigsResponse.
 *
 *  Atomically gets the RecaptchaEnterpriseConfigs for the specified list of
 *  apps.
 *
 *  @param parent Required. The parent project name shared by all
 *    RecaptchaEnterpriseConfigs being retrieved, in the format ```
 *    projects/{project_number} ``` The parent collection in the `name` field of
 *    any resource being retrieved must match this field, or the entire batch
 *    fails.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaEnterpriseConfigBatchGet
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the RecaptchaEnterpriseConfig for the specified app.
 *
 *  Method: firebaseappcheck.projects.apps.recaptchaEnterpriseConfig.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaEnterpriseConfigGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the RecaptchaEnterpriseConfig, in
 *  the format: ```
 *  projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig.
 *
 *  Gets the RecaptchaEnterpriseConfig for the specified app.
 *
 *  @param name Required. The relative resource name of the
 *    RecaptchaEnterpriseConfig, in the format: ```
 *    projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaEnterpriseConfigGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the RecaptchaEnterpriseConfig for the specified app. While this
 *  configuration is incomplete or invalid, the app will be unable to exchange
 *  reCAPTCHA Enterprise tokens for App Check tokens.
 *
 *  Method: firebaseappcheck.projects.apps.recaptchaEnterpriseConfig.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaEnterpriseConfigPatch : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the reCAPTCHA Enterprise
 *  configuration object, in the format: ```
 *  projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A comma-separated list of names of fields in the
 *  RecaptchaEnterpriseConfig to update. Example: `site_key`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig.
 *
 *  Updates the RecaptchaEnterpriseConfig for the specified app. While this
 *  configuration is incomplete or invalid, the app will be unable to exchange
 *  reCAPTCHA Enterprise tokens for App Check tokens.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig to
 *    include in the query.
 *  @param name Required. The relative resource name of the reCAPTCHA Enterprise
 *    configuration object, in the format: ```
 *    projects/{project_number}/apps/{app_id}/recaptchaEnterpriseConfig ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaEnterpriseConfigPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1RecaptchaEnterpriseConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Atomically gets the RecaptchaV3Configs for the specified list of apps. For
 *  security reasons, the `site_secret` field is never populated in the
 *  response.
 *
 *  Method: firebaseappcheck.projects.apps.recaptchaV3Config.batchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaV3ConfigBatchGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource names of the RecaptchaV3Configs to retrieve,
 *  in the format: ``` projects/{project_number}/apps/{app_id}/recaptchaV3Config
 *  ``` A maximum of 100 objects can be retrieved in a batch.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

/**
 *  Required. The parent project name shared by all RecaptchaV3Configs being
 *  retrieved, in the format ``` projects/{project_number} ``` The parent
 *  collection in the `name` field of any resource being retrieved must match
 *  this field, or the entire batch fails.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1BatchGetRecaptchaV3ConfigsResponse.
 *
 *  Atomically gets the RecaptchaV3Configs for the specified list of apps. For
 *  security reasons, the `site_secret` field is never populated in the
 *  response.
 *
 *  @param parent Required. The parent project name shared by all
 *    RecaptchaV3Configs being retrieved, in the format ```
 *    projects/{project_number} ``` The parent collection in the `name` field of
 *    any resource being retrieved must match this field, or the entire batch
 *    fails.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaV3ConfigBatchGet
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the RecaptchaV3Config for the specified app. For security reasons, the
 *  `site_secret` field is never populated in the response.
 *
 *  Method: firebaseappcheck.projects.apps.recaptchaV3Config.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaV3ConfigGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the RecaptchaV3Config, in the
 *  format: ``` projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1RecaptchaV3Config.
 *
 *  Gets the RecaptchaV3Config for the specified app. For security reasons, the
 *  `site_secret` field is never populated in the response.
 *
 *  @param name Required. The relative resource name of the RecaptchaV3Config,
 *    in the format: ```
 *    projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaV3ConfigGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the RecaptchaV3Config for the specified app. While this
 *  configuration is incomplete or invalid, the app will be unable to exchange
 *  reCAPTCHA tokens for App Check tokens. For security reasons, the
 *  `site_secret` field is never populated in the response.
 *
 *  Method: firebaseappcheck.projects.apps.recaptchaV3Config.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaV3ConfigPatch : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the reCAPTCHA v3 configuration
 *  object, in the format: ```
 *  projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A comma-separated list of names of fields in the RecaptchaV3Config
 *  to update. Example: `site_secret`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1RecaptchaV3Config.
 *
 *  Updates the RecaptchaV3Config for the specified app. While this
 *  configuration is incomplete or invalid, the app will be unable to exchange
 *  reCAPTCHA tokens for App Check tokens. For security reasons, the
 *  `site_secret` field is never populated in the response.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1RecaptchaV3Config to include
 *    in the query.
 *  @param name Required. The relative resource name of the reCAPTCHA v3
 *    configuration object, in the format: ```
 *    projects/{project_number}/apps/{app_id}/recaptchaV3Config ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsRecaptchaV3ConfigPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1RecaptchaV3Config *)object
                           name:(NSString *)name;

@end

/**
 *  Atomically gets the SafetyNetConfigs for the specified list of apps.
 *
 *  Method: firebaseappcheck.projects.apps.safetyNetConfig.batchGet
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsSafetyNetConfigBatchGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource names of the SafetyNetConfigs to retrieve,
 *  in the format ``` projects/{project_number}/apps/{app_id}/safetyNetConfig
 *  ``` A maximum of 100 objects can be retrieved in a batch.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

/**
 *  Required. The parent project name shared by all SafetyNetConfigs being
 *  retrieved, in the format ``` projects/{project_number} ``` The parent
 *  collection in the `name` field of any resource being retrieved must match
 *  this field, or the entire batch fails.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1BatchGetSafetyNetConfigsResponse.
 *
 *  Atomically gets the SafetyNetConfigs for the specified list of apps.
 *
 *  @param parent Required. The parent project name shared by all
 *    SafetyNetConfigs being retrieved, in the format ```
 *    projects/{project_number} ``` The parent collection in the `name` field of
 *    any resource being retrieved must match this field, or the entire batch
 *    fails.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsSafetyNetConfigBatchGet
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the SafetyNetConfig for the specified app.
 *
 *  Method: firebaseappcheck.projects.apps.safetyNetConfig.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsSafetyNetConfigGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the SafetyNetConfig, in the format:
 *  ``` projects/{project_number}/apps/{app_id}/safetyNetConfig ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1SafetyNetConfig.
 *
 *  Gets the SafetyNetConfig for the specified app.
 *
 *  @param name Required. The relative resource name of the SafetyNetConfig, in
 *    the format: ``` projects/{project_number}/apps/{app_id}/safetyNetConfig
 *    ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsSafetyNetConfigGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the SafetyNetConfig for the specified app. While this configuration
 *  is incomplete or invalid, the app will be unable to exchange SafetyNet
 *  tokens for App Check tokens.
 *
 *  Method: firebaseappcheck.projects.apps.safetyNetConfig.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsAppsSafetyNetConfigPatch : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the SafetyNet configuration object,
 *  in the format: ``` projects/{project_number}/apps/{app_id}/safetyNetConfig
 *  ```
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A comma-separated list of names of fields in the SafetyNetConfig
 *  Gets to update. Example: `token_ttl`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1SafetyNetConfig.
 *
 *  Updates the SafetyNetConfig for the specified app. While this configuration
 *  is incomplete or invalid, the app will be unable to exchange SafetyNet
 *  tokens for App Check tokens.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1SafetyNetConfig to include in
 *    the query.
 *  @param name Required. The relative resource name of the SafetyNet
 *    configuration object, in the format: ```
 *    projects/{project_number}/apps/{app_id}/safetyNetConfig ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsAppsSafetyNetConfigPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1SafetyNetConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Atomically updates the specified Service configurations.
 *
 *  Method: firebaseappcheck.projects.services.batchUpdate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsServicesBatchUpdate : GTLRFirebaseappcheckQuery

/**
 *  Required. The parent project name shared by all Service configurations being
 *  updated, in the format ``` projects/{project_number} ``` The parent
 *  collection in the `name` field of any resource being updated must match this
 *  field, or the entire batch fails.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1BatchUpdateServicesResponse.
 *
 *  Atomically updates the specified Service configurations.
 *
 *  @param object The @c
 *    GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1BatchUpdateServicesRequest to
 *    include in the query.
 *  @param parent Required. The parent project name shared by all Service
 *    configurations being updated, in the format ``` projects/{project_number}
 *    ``` The parent collection in the `name` field of any resource being
 *    updated must match this field, or the entire batch fails.
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsServicesBatchUpdate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1BatchUpdateServicesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets the Service configuration for the specified service name.
 *
 *  Method: firebaseappcheck.projects.services.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsServicesGet : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the Service to retrieve, in the
 *  format: ``` projects/{project_number}/services/{service_id} ``` Note that
 *  the `service_id` element must be a supported service ID. Currently, the
 *  following service IDs are supported: * `firebasestorage.googleapis.com`
 *  (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com` (Firebase
 *  Realtime Database) * `firestore.googleapis.com` (Cloud Firestore)
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1Service.
 *
 *  Gets the Service configuration for the specified service name.
 *
 *  @param name Required. The relative resource name of the Service to retrieve,
 *    in the format: ``` projects/{project_number}/services/{service_id} ```
 *    Note that the `service_id` element must be a supported service ID.
 *    Currently, the following service IDs are supported: *
 *    `firebasestorage.googleapis.com` (Cloud Storage for Firebase) *
 *    `firebasedatabase.googleapis.com` (Firebase Realtime Database) *
 *    `firestore.googleapis.com` (Cloud Firestore)
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsServicesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all Service configurations for the specified project. Only Services
 *  which were explicitly configured using UpdateService or BatchUpdateServices
 *  will be returned.
 *
 *  Method: firebaseappcheck.projects.services.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsServicesList : GTLRFirebaseappcheckQuery

/**
 *  The maximum number of Services to return in the response. Only explicitly
 *  configured services are returned. The server may return fewer than this at
 *  its own discretion. If no value is specified (or too large a value is
 *  specified), the server will impose its own limit.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned from a previous call to ListServices indicating where in the
 *  set of Services to resume listing. Provide this to retrieve the subsequent
 *  page. When paginating, all other parameters provided to ListServices must
 *  match the call that provided the page token; if they do not match, the
 *  result is undefined.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The relative resource name of the parent project for which to list
 *  each associated Service, in the format: ``` projects/{project_number} ```
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1ListServicesResponse.
 *
 *  Lists all Service configurations for the specified project. Only Services
 *  which were explicitly configured using UpdateService or BatchUpdateServices
 *  will be returned.
 *
 *  @param parent Required. The relative resource name of the parent project for
 *    which to list each associated Service, in the format: ```
 *    projects/{project_number} ```
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsServicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the specified Service configuration.
 *
 *  Method: firebaseappcheck.projects.services.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseappcheckCloudPlatform
 *    @c kGTLRAuthScopeFirebaseappcheckFirebase
 */
@interface GTLRFirebaseappcheckQuery_ProjectsServicesPatch : GTLRFirebaseappcheckQuery

/**
 *  Required. The relative resource name of the service configuration object, in
 *  the format: ``` projects/{project_number}/services/{service_id} ``` Note
 *  that the `service_id` element must be a supported service ID. Currently, the
 *  following service IDs are supported: * `firebasestorage.googleapis.com`
 *  (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com` (Firebase
 *  Realtime Database) * `firestore.googleapis.com` (Cloud Firestore)
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A comma-separated list of names of fields in the Service to
 *  update. Example: `enforcement_mode`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1Service.
 *
 *  Updates the specified Service configuration.
 *
 *  @param object The @c GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1Service to
 *    include in the query.
 *  @param name Required. The relative resource name of the service
 *    configuration object, in the format: ```
 *    projects/{project_number}/services/{service_id} ``` Note that the
 *    `service_id` element must be a supported service ID. Currently, the
 *    following service IDs are supported: * `firebasestorage.googleapis.com`
 *    (Cloud Storage for Firebase) * `firebasedatabase.googleapis.com` (Firebase
 *    Realtime Database) * `firestore.googleapis.com` (Cloud Firestore)
 *
 *  @return GTLRFirebaseappcheckQuery_ProjectsServicesPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseappcheck_GoogleFirebaseAppcheckV1Service *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
