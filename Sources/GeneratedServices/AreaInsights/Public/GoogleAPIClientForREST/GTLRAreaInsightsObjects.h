// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Places Insights API (areainsights/v1)
// Description:
//   Places Insights API.
// Documentation:
//   https://g3doc.corp.google.com/geo/platform/area_insights/README.md?cl=head

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAreaInsights_Circle;
@class GTLRAreaInsights_CustomArea;
@class GTLRAreaInsights_Filter;
@class GTLRAreaInsights_LatLng;
@class GTLRAreaInsights_LocationFilter;
@class GTLRAreaInsights_PlaceInsight;
@class GTLRAreaInsights_Polygon;
@class GTLRAreaInsights_RatingFilter;
@class GTLRAreaInsights_Region;
@class GTLRAreaInsights_TypeFilter;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRAreaInsights_ComputeInsightsRequest.insights

/**
 *  Count insight. When this insight is specified ComputeInsights returns the
 *  number of places that match the specified filter criteria. ``` For example
 *  if the request is: ComputeInsightsRequest { insights: INSIGHT_COUNT filter {
 *  location_filter {region: } type_filter {included_types: "restaurant"}
 *  operating_status: OPERATING_STATUS_OPERATIONAL price_levels:
 *  PRICE_LEVEL_FREE price_levels: PRICE_LEVEL_INEXPENSIVE min_rating: 4.0 } }
 *  The method will return the count of restaurants in California that are
 *  operational, with price level free or inexpensive and have an average rating
 *  of at least 4 starts. Example response: ComputeInsightsResponse { count: }
 *  ```
 *
 *  Value: "INSIGHT_COUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRAreaInsights_ComputeInsightsRequest_Insights_InsightCount;
/**
 *  Return Places When this insight is specified ComputeInsights returns Places
 *  that match the specified filter criteria. ``` For example if the request is:
 *  ComputeInsightsRequest { insights: INSIGHT_PLACES filter { location_filter
 *  {region: } type_filter {included_types: "restaurant"} operating_status:
 *  OPERATING_STATUS_OPERATIONAL price_levels: PRICE_LEVEL_FREE price_levels:
 *  PRICE_LEVEL_INEXPENSIVE min_rating: 4.0 } } The method will return list of
 *  places of restaurants in California that are operational, with price level
 *  free or inexpensive and have an average rating of at least 4 stars. Example
 *  response: ComputeInsightsResponse { place_insights { place: "places/ABC" }
 *  place_insights { place: "places/PQR" } place_insights { place: "places/XYZ"
 *  } } ```
 *
 *  Value: "INSIGHT_PLACES"
 */
FOUNDATION_EXTERN NSString * const kGTLRAreaInsights_ComputeInsightsRequest_Insights_InsightPlaces;
/**
 *  Not Specified.
 *
 *  Value: "INSIGHT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAreaInsights_ComputeInsightsRequest_Insights_InsightUnspecified;

// ----------------------------------------------------------------------------
// GTLRAreaInsights_Filter.operatingStatus

/**
 *  The place is operational and its open during its defined hours.
 *
 *  Value: "OPERATING_STATUS_OPERATIONAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAreaInsights_Filter_OperatingStatus_OperatingStatusOperational;
/**
 *  The Place is no longer in business.
 *
 *  Value: "OPERATING_STATUS_PERMANENTLY_CLOSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAreaInsights_Filter_OperatingStatus_OperatingStatusPermanentlyClosed;
/**
 *  The Place is temporarily closed and expected to reopen in the future.
 *
 *  Value: "OPERATING_STATUS_TEMPORARILY_CLOSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAreaInsights_Filter_OperatingStatus_OperatingStatusTemporarilyClosed;
/**
 *  Not Specified.
 *
 *  Value: "OPERATING_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAreaInsights_Filter_OperatingStatus_OperatingStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRAreaInsights_Filter.priceLevels

/**
 *  Place provides expensive services.
 *
 *  Value: "PRICE_LEVEL_EXPENSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAreaInsights_Filter_PriceLevels_PriceLevelExpensive;
/**
 *  Place provides free services.
 *
 *  Value: "PRICE_LEVEL_FREE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAreaInsights_Filter_PriceLevels_PriceLevelFree;
/**
 *  Place provides inexpensive services.
 *
 *  Value: "PRICE_LEVEL_INEXPENSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAreaInsights_Filter_PriceLevels_PriceLevelInexpensive;
/**
 *  Place provides moderately priced services.
 *
 *  Value: "PRICE_LEVEL_MODERATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAreaInsights_Filter_PriceLevels_PriceLevelModerate;
/**
 *  Place price level is unspecified or unknown.
 *
 *  Value: "PRICE_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAreaInsights_Filter_PriceLevels_PriceLevelUnspecified;
/**
 *  Place provides very expensive services.
 *
 *  Value: "PRICE_LEVEL_VERY_EXPENSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAreaInsights_Filter_PriceLevels_PriceLevelVeryExpensive;

/**
 *  A circle is defined by a center point and radius in meters.
 */
@interface GTLRAreaInsights_Circle : GTLRObject

/** The latitude and longitude of the center of the circle. */
@property(nonatomic, strong, nullable) GTLRAreaInsights_LatLng *latLng;

/**
 *  The Place resource name of the center of the circle. Only point places are
 *  supported.
 */
@property(nonatomic, copy, nullable) NSString *place;

/**
 *  Optional. The radius of the circle in meters
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *radius;

@end


/**
 *  Request for the ComputeInsights RPC.
 */
@interface GTLRAreaInsights_ComputeInsightsRequest : GTLRObject

/** Required. Insight filter. */
@property(nonatomic, strong, nullable) GTLRAreaInsights_Filter *filter;

/**
 *  Required. Insights to compute. Currently only INSIGHT_COUNT and
 *  INSIGHT_PLACES are supported.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *insights;

@end


/**
 *  Response for the ComputeInsights RPC.
 */
@interface GTLRAreaInsights_ComputeInsightsResponse : GTLRObject

/**
 *  Result for Insights.INSIGHT_COUNT.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/** Result for Insights.INSIGHT_PLACES. */
@property(nonatomic, strong, nullable) NSArray<GTLRAreaInsights_PlaceInsight *> *placeInsights;

@end


/**
 *  Custom Area.
 */
@interface GTLRAreaInsights_CustomArea : GTLRObject

/** Required. The custom area represented as a polygon */
@property(nonatomic, strong, nullable) GTLRAreaInsights_Polygon *polygon;

@end


/**
 *  Filters for the ComputeInsights RPC.
 */
@interface GTLRAreaInsights_Filter : GTLRObject

/**
 *  Required. Restricts results to places which are located in the area
 *  specified by location filters.
 */
@property(nonatomic, strong, nullable) GTLRAreaInsights_LocationFilter *locationFilter;

/**
 *  Optional. Restricts results to places whose operating status is included on
 *  this list. If operating_status is not set, OPERATING_STATUS_OPERATIONAL is
 *  used as default.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *operatingStatus;

/**
 *  Optional. Restricts results to places whose price level is included on this
 *  list. If price_level is not set, all price levels are included in the
 *  results.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *priceLevels;

/**
 *  Optional. Restricts results to places whose average user ratings are in the
 *  range specified by rating_filter. If rating_filter is not set, all ratings
 *  are included in the result.
 */
@property(nonatomic, strong, nullable) GTLRAreaInsights_RatingFilter *ratingFilter;

/** Required. Place type filters. */
@property(nonatomic, strong, nullable) GTLRAreaInsights_TypeFilter *typeFilter;

@end


/**
 *  An object that represents a latitude/longitude pair. This is expressed as a
 *  pair of doubles to represent degrees latitude and degrees longitude. Unless
 *  specified otherwise, this object must conform to the WGS84 standard. Values
 *  must be within normalized ranges.
 */
@interface GTLRAreaInsights_LatLng : GTLRObject

/**
 *  The latitude in degrees. It must be in the range [-90.0, +90.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latitude;

/**
 *  The longitude in degrees. It must be in the range [-180.0, +180.0].
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longitude;

@end


/**
 *  Location filters. Specifies the area of interest for the insight.
 */
@interface GTLRAreaInsights_LocationFilter : GTLRObject

/** Area as a circle. */
@property(nonatomic, strong, nullable) GTLRAreaInsights_Circle *circle;

/** Custom area specified by a polygon. */
@property(nonatomic, strong, nullable) GTLRAreaInsights_CustomArea *customArea;

/** Area as region. */
@property(nonatomic, strong, nullable) GTLRAreaInsights_Region *region;

@end


/**
 *  Holds information about a place
 */
@interface GTLRAreaInsights_PlaceInsight : GTLRObject

/**
 *  The unique identifier of the place. This resource name can be used to
 *  retrieve details about the place using the [Places
 *  API](https://developers.google.com/maps/documentation/places/web-service/reference/rest/v1/places/get).
 */
@property(nonatomic, copy, nullable) NSString *place;

@end


/**
 *  A polygon is represented by a series of connected coordinates in an
 *  counterclockwise ordered sequence. The coordinates form a closed loop and
 *  define a filled region. The first and last coordinates are equivalent, and
 *  they must contain identical values. The format is a simplified version of
 *  GeoJSON polygons (we only support one counterclockwise exterior ring).
 */
@interface GTLRAreaInsights_Polygon : GTLRObject

/** Optional. The coordinates that define the polygon. */
@property(nonatomic, strong, nullable) NSArray<GTLRAreaInsights_LatLng *> *coordinates;

@end


/**
 *  Average user rating filters.
 */
@interface GTLRAreaInsights_RatingFilter : GTLRObject

/**
 *  Optional. Restricts results to places whose average user rating is strictly
 *  less than or equal to max_rating. Values must be between 1.0 and 5.0.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxRating;

/**
 *  Optional. Restricts results to places whose average user rating is greater
 *  than or equal to min_rating. Values must be between 1.0 and 5.0.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minRating;

@end


/**
 *  A region is a geographic boundary such as: cities, postal codes, counties,
 *  states, etc.
 */
@interface GTLRAreaInsights_Region : GTLRObject

/** The unique identifier of a specific geographic region. */
@property(nonatomic, copy, nullable) NSString *place;

@end


/**
 *  Place type filters. Only Place types from [Table
 *  a](https://developers.google.com/maps/documentation/places/web-service/place-types#table-a)
 *  are supported. A place can only have a single primary type associated with
 *  it. For example, the primary type might be "mexican_restaurant" or
 *  "steak_house". Use included_primary_types and excluded_primary_types to
 *  filter the results on a place's primary type. A place can also have multiple
 *  type values associated with it. For example a restaurant might have the
 *  following types: "seafood_restaurant", "restaurant", "food",
 *  "point_of_interest", "establishment". Use included_types and excluded_types
 *  to filter the results on the list of types associated with a place. If a
 *  search is specified with multiple type restrictions, only places that
 *  satisfy all of the restrictions are returned. For example, if you specify
 *  {"included_types": ["restaurant"], "excluded_primary_types":
 *  ["steak_house"]}, the returned places provide "restaurant" related services
 *  but do not operate primarily as a "steak_house". If there are any
 *  conflicting types, i.e. a type appears in both included_types and
 *  excluded_types types or included_primary_types and excluded_primary_types,
 *  an INVALID_ARGUMENT error is returned. One of included_types or
 *  included_primary_types must be set.
 */
@interface GTLRAreaInsights_TypeFilter : GTLRObject

/** Optional. Excluded primary Place types. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *excludedPrimaryTypes;

/** Optional. Excluded Place types. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *excludedTypes;

/** Optional. Included primary Place types. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *includedPrimaryTypes;

/** Optional. Included Place types. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *includedTypes;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
