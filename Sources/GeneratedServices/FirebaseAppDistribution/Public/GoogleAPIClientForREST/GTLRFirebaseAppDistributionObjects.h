// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase App Distribution API (firebaseappdistribution/v1)
// Documentation:
//   https://firebase.google.com/products/app-distribution

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRFirebaseAppDistribution_GdataBlobstore2Info;
@class GTLRFirebaseAppDistribution_GdataCompositeMedia;
@class GTLRFirebaseAppDistribution_GdataContentTypeInfo;
@class GTLRFirebaseAppDistribution_GdataDiffChecksumsResponse;
@class GTLRFirebaseAppDistribution_GdataDiffDownloadResponse;
@class GTLRFirebaseAppDistribution_GdataDiffUploadRequest;
@class GTLRFirebaseAppDistribution_GdataDiffUploadResponse;
@class GTLRFirebaseAppDistribution_GdataDiffVersionResponse;
@class GTLRFirebaseAppDistribution_GdataDownloadParameters;
@class GTLRFirebaseAppDistribution_GdataMedia;
@class GTLRFirebaseAppDistribution_GdataObjectId;
@class GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1FeedbackReport;
@class GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Group;
@class GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Release;
@class GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1ReleaseNotes;
@class GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1TestCertificate;
@class GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Tester;
@class GTLRFirebaseAppDistribution_GoogleLongrunningOperation;
@class GTLRFirebaseAppDistribution_GoogleLongrunningOperation_Metadata;
@class GTLRFirebaseAppDistribution_GoogleLongrunningOperation_Response;
@class GTLRFirebaseAppDistribution_GoogleRpcStatus;
@class GTLRFirebaseAppDistribution_GoogleRpcStatus_Details_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRFirebaseAppDistribution_GdataCompositeMedia.referenceType

/**
 *  Reference points to a bigstore object
 *
 *  Value: "BIGSTORE_REF"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataCompositeMedia_ReferenceType_BigstoreRef;
/**
 *  Reference points to a blobstore object. This could be either a v1 blob_ref
 *  or a v2 blobstore2_info. Clients should check blobstore2_info first, since
 *  v1 is being deprecated.
 *
 *  Value: "BLOB_REF"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataCompositeMedia_ReferenceType_BlobRef;
/**
 *  Indicates the data is stored in cosmo_binary_reference.
 *
 *  Value: "COSMO_BINARY_REFERENCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataCompositeMedia_ReferenceType_CosmoBinaryReference;
/**
 *  Data is included into this proto buffer
 *
 *  Value: "INLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataCompositeMedia_ReferenceType_Inline;
/**
 *  Reference contains a GFS path or a local path.
 *
 *  Value: "PATH"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataCompositeMedia_ReferenceType_Path;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppDistribution_GdataMedia.referenceType

/**
 *  Informs Scotty to generate a response payload with the size specified in the
 *  length field. The contents of the payload are generated by Scotty and are
 *  undefined. This is useful for testing download speeds between the user and
 *  Scotty without involving a real payload source. Note: range is not supported
 *  when using arbitrary_bytes.
 *
 *  Value: "ARBITRARY_BYTES"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_ArbitraryBytes;
/**
 *  Reference points to a bigstore object
 *
 *  Value: "BIGSTORE_REF"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_BigstoreRef;
/**
 *  Reference points to a blobstore object. This could be either a v1 blob_ref
 *  or a v2 blobstore2_info. Clients should check blobstore2_info first, since
 *  v1 is being deprecated.
 *
 *  Value: "BLOB_REF"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_BlobRef;
/**
 *  The content for this media object is stored across multiple partial media
 *  objects under the composite_media field.
 *
 *  Value: "COMPOSITE_MEDIA"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_CompositeMedia;
/**
 *  Indicates the data is stored in cosmo_binary_reference.
 *
 *  Value: "COSMO_BINARY_REFERENCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_CosmoBinaryReference;
/**
 *  Indicates the data is stored in diff_checksums_response.
 *
 *  Value: "DIFF_CHECKSUMS_RESPONSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_DiffChecksumsResponse;
/**
 *  Indicates the data is stored in diff_download_response.
 *
 *  Value: "DIFF_DOWNLOAD_RESPONSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_DiffDownloadResponse;
/**
 *  Indicates the data is stored in diff_upload_request.
 *
 *  Value: "DIFF_UPLOAD_REQUEST"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_DiffUploadRequest;
/**
 *  Indicates the data is stored in diff_upload_response.
 *
 *  Value: "DIFF_UPLOAD_RESPONSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_DiffUploadResponse;
/**
 *  Indicates the data is stored in diff_version_response.
 *
 *  Value: "DIFF_VERSION_RESPONSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_DiffVersionResponse;
/**
 *  Data should be accessed from the current service using the operation
 *  GetMedia.
 *
 *  Value: "GET_MEDIA"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_GetMedia;
/**
 *  Data is included into this proto buffer
 *
 *  Value: "INLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_Inline;
/**
 *  Reference contains a GFS path or a local path.
 *
 *  Value: "PATH"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_Path;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo.integrationState

/**
 *  Aab integration state unspecified
 *
 *  Value: "AAB_INTEGRATION_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo_IntegrationState_AabIntegrationStateUnspecified;
/**
 *  Play App status is unavailable
 *
 *  Value: "AAB_STATE_UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo_IntegrationState_AabStateUnavailable;
/**
 *  The app in Play developer account is not in a published state
 *
 *  Value: "APP_NOT_PUBLISHED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo_IntegrationState_AppNotPublished;
/**
 *  App can receive app bundle uploads
 *
 *  Value: "INTEGRATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo_IntegrationState_Integrated;
/**
 *  There is no app in linked Play developer account with the same bundle id
 *
 *  Value: "NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo_IntegrationState_NoAppWithGivenBundleIdInPlayAccount;
/**
 *  Firebase project is not linked to a Play developer account
 *
 *  Value: "PLAY_ACCOUNT_NOT_LINKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo_IntegrationState_PlayAccountNotLinked;
/**
 *  Play IAS terms not accepted
 *
 *  Value: "PLAY_IAS_TERMS_NOT_ACCEPTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo_IntegrationState_PlayIasTermsNotAccepted;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1UploadReleaseResponse.result

/**
 *  Upload binary resulted in a new release
 *
 *  Value: "RELEASE_CREATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1UploadReleaseResponse_Result_ReleaseCreated;
/**
 *  Upload binary resulted in a no-op. A release with the exact same binary
 *  already exists.
 *
 *  Value: "RELEASE_UNMODIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1UploadReleaseResponse_Result_ReleaseUnmodified;
/**
 *  Upload binary updated an existing release
 *
 *  Value: "RELEASE_UPDATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1UploadReleaseResponse_Result_ReleaseUpdated;
/**
 *  Upload binary result unspecified
 *
 *  Value: "UPLOAD_RELEASE_RESULT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1UploadReleaseResponse_Result_UploadReleaseResultUnspecified;

/**
 *  Information to read/write to blobstore2.
 */
@interface GTLRFirebaseAppDistribution_GdataBlobstore2Info : GTLRObject

/**
 *  The blob generation id.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blobGeneration;

/** The blob id, e.g., /blobstore/prod/playground/scotty */
@property(nonatomic, copy, nullable) NSString *blobId;

/**
 *  Read handle passed from Bigstore -> Scotty for a GCS download. This is a
 *  signed, serialized blobstore2.ReadHandle proto which must never be set
 *  outside of Bigstore, and is not applicable to non-GCS media downloads.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *downloadReadHandle;

/**
 *  The blob read token. Needed to read blobs that have not been replicated.
 *  Might not be available until the final call.
 */
@property(nonatomic, copy, nullable) NSString *readToken;

/**
 *  Metadata passed from Blobstore -> Scotty for a new GCS upload. This is a
 *  signed, serialized blobstore2.BlobMetadataContainer proto which must never
 *  be consumed outside of Bigstore, and is not applicable to non-GCS media
 *  uploads.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *uploadMetadataContainer;

@end


/**
 *  A sequence of media data references representing composite data. Introduced
 *  to support Bigstore composite objects. For details, visit
 *  http://go/bigstore-composites.
 */
@interface GTLRFirebaseAppDistribution_GdataCompositeMedia : GTLRObject

/**
 *  Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should
 *  be the byte representation of a blobstore.BlobRef. Since Blobstore is
 *  deprecating v1, use blobstore2_info instead. For now, any v2 blob will also
 *  be represented in this field as v1 BlobRef.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *blobRef GTLR_DEPRECATED;

/**
 *  Blobstore v2 info, set if reference_type is BLOBSTORE_REF and it refers to a
 *  v2 blob.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataBlobstore2Info *blobstore2Info;

/**
 *  A binary data reference for a media download. Serves as a
 *  technology-agnostic binary reference in some Google infrastructure. This
 *  value is a serialized storage_cosmo.BinaryReference proto. Storing it as
 *  bytes is a hack to get around the fact that the cosmo proto (as well as
 *  others it includes) doesn't support JavaScript. This prevents us from
 *  including the actual type of this field.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *cosmoBinaryReference;

/**
 *  crc32.c hash for the payload.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *crc32cHash;

/**
 *  Media data, set if reference_type is INLINE
 *
 *  Remapped to 'inlineProperty' to avoid language reserved word 'inline'.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *inlineProperty;

/**
 *  Size of the data, in bytes
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/**
 *  MD5 hash for the payload.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *md5Hash;

/** Reference to a TI Blob, set if reference_type is BIGSTORE_REF. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataObjectId *objectId;

/** Path to the data, set if reference_type is PATH */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Describes what the field reference contains.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppDistribution_GdataCompositeMedia_ReferenceType_BigstoreRef
 *        Reference points to a bigstore object (Value: "BIGSTORE_REF")
 *    @arg @c kGTLRFirebaseAppDistribution_GdataCompositeMedia_ReferenceType_BlobRef
 *        Reference points to a blobstore object. This could be either a v1
 *        blob_ref or a v2 blobstore2_info. Clients should check blobstore2_info
 *        first, since v1 is being deprecated. (Value: "BLOB_REF")
 *    @arg @c kGTLRFirebaseAppDistribution_GdataCompositeMedia_ReferenceType_CosmoBinaryReference
 *        Indicates the data is stored in cosmo_binary_reference. (Value:
 *        "COSMO_BINARY_REFERENCE")
 *    @arg @c kGTLRFirebaseAppDistribution_GdataCompositeMedia_ReferenceType_Inline
 *        Data is included into this proto buffer (Value: "INLINE")
 *    @arg @c kGTLRFirebaseAppDistribution_GdataCompositeMedia_ReferenceType_Path
 *        Reference contains a GFS path or a local path. (Value: "PATH")
 */
@property(nonatomic, copy, nullable) NSString *referenceType;

/**
 *  SHA-1 hash for the payload.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *sha1Hash;

@end


/**
 *  Detailed Content-Type information from Scotty. The Content-Type of the media
 *  will typically be filled in by the header or Scotty's best_guess, but this
 *  extended information provides the backend with more information so that it
 *  can make a better decision if needed. This is only used on media upload
 *  requests from Scotty.
 */
@interface GTLRFirebaseAppDistribution_GdataContentTypeInfo : GTLRObject

/** Scotty's best guess of what the content type of the file is. */
@property(nonatomic, copy, nullable) NSString *bestGuess;

/**
 *  The content type of the file derived by looking at specific bytes (i.e.
 *  "magic bytes") of the actual file.
 */
@property(nonatomic, copy, nullable) NSString *fromBytes;

/**
 *  The content type of the file derived from the file extension of the original
 *  file name used by the client.
 */
@property(nonatomic, copy, nullable) NSString *fromFileName;

/**
 *  The content type of the file as specified in the request headers, multipart
 *  headers, or RUPIO start request.
 */
@property(nonatomic, copy, nullable) NSString *fromHeader;

/**
 *  The content type of the file derived from the file extension of the URL
 *  path. The URL path is assumed to represent a file name (which is typically
 *  only true for agents that are providing a REST API).
 */
@property(nonatomic, copy, nullable) NSString *fromUrlPath;

@end


/**
 *  Backend response for a Diff get checksums response. For details on the
 *  Scotty Diff protocol, visit http://go/scotty-diff-protocol.
 */
@interface GTLRFirebaseAppDistribution_GdataDiffChecksumsResponse : GTLRObject

/**
 *  Exactly one of these fields must be populated. If checksums_location is
 *  filled, the server will return the corresponding contents to the user. If
 *  object_location is filled, the server will calculate the checksums based on
 *  the content there and return that to the user. For details on the format of
 *  the checksums, see http://go/scotty-diff-protocol.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataCompositeMedia *checksumsLocation;

/**
 *  The chunk size of checksums. Must be a multiple of 256KB.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *chunkSizeBytes;

/**
 *  If set, calculate the checksums based on the contents and return them to the
 *  caller.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataCompositeMedia *objectLocation;

/**
 *  The total size of the server object.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectSizeBytes;

/** The object version of the object the checksums are being returned for. */
@property(nonatomic, copy, nullable) NSString *objectVersion;

@end


/**
 *  Backend response for a Diff download response. For details on the Scotty
 *  Diff protocol, visit http://go/scotty-diff-protocol.
 */
@interface GTLRFirebaseAppDistribution_GdataDiffDownloadResponse : GTLRObject

/** The original object location. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataCompositeMedia *objectLocation;

@end


/**
 *  A Diff upload request. For details on the Scotty Diff protocol, visit
 *  http://go/scotty-diff-protocol.
 */
@interface GTLRFirebaseAppDistribution_GdataDiffUploadRequest : GTLRObject

/**
 *  The location of the checksums for the new object. Agents must clone the
 *  object located here, as the upload server will delete the contents once a
 *  response is received. For details on the format of the checksums, see
 *  http://go/scotty-diff-protocol.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataCompositeMedia *checksumsInfo;

/**
 *  The location of the new object. Agents must clone the object located here,
 *  as the upload server will delete the contents once a response is received.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataCompositeMedia *objectInfo;

/**
 *  The object version of the object that is the base version the incoming diff
 *  script will be applied to. This field will always be filled in.
 */
@property(nonatomic, copy, nullable) NSString *objectVersion;

@end


/**
 *  Backend response for a Diff upload request. For details on the Scotty Diff
 *  protocol, visit http://go/scotty-diff-protocol.
 */
@interface GTLRFirebaseAppDistribution_GdataDiffUploadResponse : GTLRObject

/**
 *  The object version of the object at the server. Must be included in the end
 *  notification response. The version in the end notification response must
 *  correspond to the new version of the object that is now stored at the
 *  server, after the upload.
 */
@property(nonatomic, copy, nullable) NSString *objectVersion;

/**
 *  The location of the original file for a diff upload request. Must be filled
 *  in if responding to an upload start notification.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataCompositeMedia *originalObject;

@end


/**
 *  Backend response for a Diff get version response. For details on the Scotty
 *  Diff protocol, visit http://go/scotty-diff-protocol.
 */
@interface GTLRFirebaseAppDistribution_GdataDiffVersionResponse : GTLRObject

/**
 *  The total size of the server object.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectSizeBytes;

/** The version of the object stored at the server. */
@property(nonatomic, copy, nullable) NSString *objectVersion;

@end


/**
 *  Parameters specific to media downloads.
 */
@interface GTLRFirebaseAppDistribution_GdataDownloadParameters : GTLRObject

/**
 *  A boolean to be returned in the response to Scotty. Allows/disallows gzip
 *  encoding of the payload content when the server thinks it's advantageous
 *  (hence, does not guarantee compression) which allows Scotty to GZip the
 *  response to the client.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowGzipCompression;

/**
 *  Determining whether or not Apiary should skip the inclusion of any
 *  Content-Range header on its response to Scotty.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreRange;

@end


/**
 *  A reference to data stored on the filesystem, on GFS or in blobstore.
 */
@interface GTLRFirebaseAppDistribution_GdataMedia : GTLRObject

/**
 *  Deprecated, use one of explicit hash type fields instead. Algorithm used for
 *  calculating the hash. As of 2011/01/21, "MD5" is the only possible value for
 *  this field. New values may be added at any time.
 */
@property(nonatomic, copy, nullable) NSString *algorithm GTLR_DEPRECATED;

/**
 *  Use object_id instead.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *bigstoreObjectRef GTLR_DEPRECATED;

/**
 *  Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should
 *  be the byte representation of a blobstore.BlobRef. Since Blobstore is
 *  deprecating v1, use blobstore2_info instead. For now, any v2 blob will also
 *  be represented in this field as v1 BlobRef.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *blobRef GTLR_DEPRECATED;

/**
 *  Blobstore v2 info, set if reference_type is BLOBSTORE_REF and it refers to a
 *  v2 blob.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataBlobstore2Info *blobstore2Info;

/**
 *  A composite media composed of one or more media objects, set if
 *  reference_type is COMPOSITE_MEDIA. The media length field must be set to the
 *  sum of the lengths of all composite media objects. Note: All composite media
 *  must have length specified.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppDistribution_GdataCompositeMedia *> *compositeMedia;

/** MIME type of the data */
@property(nonatomic, copy, nullable) NSString *contentType;

/** Extended content type information provided for Scotty uploads. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataContentTypeInfo *contentTypeInfo;

/**
 *  A binary data reference for a media download. Serves as a
 *  technology-agnostic binary reference in some Google infrastructure. This
 *  value is a serialized storage_cosmo.BinaryReference proto. Storing it as
 *  bytes is a hack to get around the fact that the cosmo proto (as well as
 *  others it includes) doesn't support JavaScript. This prevents us from
 *  including the actual type of this field.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *cosmoBinaryReference;

/**
 *  For Scotty Uploads: Scotty-provided hashes for uploads For Scotty Downloads:
 *  (WARNING: DO NOT USE WITHOUT PERMISSION FROM THE SCOTTY TEAM.) A Hash
 *  provided by the agent to be used to verify the data being downloaded.
 *  Currently only supported for inline payloads. Further, only crc32c_hash is
 *  currently supported.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *crc32cHash;

/** Set if reference_type is DIFF_CHECKSUMS_RESPONSE. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataDiffChecksumsResponse *diffChecksumsResponse;

/** Set if reference_type is DIFF_DOWNLOAD_RESPONSE. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataDiffDownloadResponse *diffDownloadResponse;

/** Set if reference_type is DIFF_UPLOAD_REQUEST. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataDiffUploadRequest *diffUploadRequest;

/** Set if reference_type is DIFF_UPLOAD_RESPONSE. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataDiffUploadResponse *diffUploadResponse;

/** Set if reference_type is DIFF_VERSION_RESPONSE. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataDiffVersionResponse *diffVersionResponse;

/** Parameters for a media download. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataDownloadParameters *downloadParameters;

/** Original file name */
@property(nonatomic, copy, nullable) NSString *filename;

/**
 *  Deprecated, use one of explicit hash type fields instead. These two hash
 *  related fields will only be populated on Scotty based media uploads and will
 *  contain the content of the hash group in the NotificationRequest:
 *  http://cs/#google3/uploader/service/proto/upload_listener.proto&q=class:Hash
 *  Hex encoded hash value of the uploaded media.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty GTLR_DEPRECATED;

/**
 *  For Scotty uploads only. If a user sends a hash code and the backend has
 *  requested that Scotty verify the upload against the client hash, Scotty will
 *  perform the check on behalf of the backend and will reject it if the hashes
 *  don't match. This is set to true if Scotty performed this verification.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hashVerified;

/**
 *  Media data, set if reference_type is INLINE
 *
 *  Remapped to 'inlineProperty' to avoid language reserved word 'inline'.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *inlineProperty;

/**
 *  |is_potential_retry| is set false only when Scotty is certain that it has
 *  not sent the request before. When a client resumes an upload, this field
 *  must be set true in agent calls, because Scotty cannot be certain that it
 *  has never sent the request before due to potential failure in the session
 *  state persistence.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isPotentialRetry;

/**
 *  Size of the data, in bytes
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/**
 *  Scotty-provided MD5 hash for an upload.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *md5Hash;

/**
 *  Media id to forward to the operation GetMedia. Can be set if reference_type
 *  is GET_MEDIA.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *mediaId;

/** Reference to a TI Blob, set if reference_type is BIGSTORE_REF. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataObjectId *objectId;

/** Path to the data, set if reference_type is PATH */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Describes what the field reference contains.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_ArbitraryBytes
 *        Informs Scotty to generate a response payload with the size specified
 *        in the length field. The contents of the payload are generated by
 *        Scotty and are undefined. This is useful for testing download speeds
 *        between the user and Scotty without involving a real payload source.
 *        Note: range is not supported when using arbitrary_bytes. (Value:
 *        "ARBITRARY_BYTES")
 *    @arg @c kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_BigstoreRef
 *        Reference points to a bigstore object (Value: "BIGSTORE_REF")
 *    @arg @c kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_BlobRef
 *        Reference points to a blobstore object. This could be either a v1
 *        blob_ref or a v2 blobstore2_info. Clients should check blobstore2_info
 *        first, since v1 is being deprecated. (Value: "BLOB_REF")
 *    @arg @c kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_CompositeMedia
 *        The content for this media object is stored across multiple partial
 *        media objects under the composite_media field. (Value:
 *        "COMPOSITE_MEDIA")
 *    @arg @c kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_CosmoBinaryReference
 *        Indicates the data is stored in cosmo_binary_reference. (Value:
 *        "COSMO_BINARY_REFERENCE")
 *    @arg @c kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_DiffChecksumsResponse
 *        Indicates the data is stored in diff_checksums_response. (Value:
 *        "DIFF_CHECKSUMS_RESPONSE")
 *    @arg @c kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_DiffDownloadResponse
 *        Indicates the data is stored in diff_download_response. (Value:
 *        "DIFF_DOWNLOAD_RESPONSE")
 *    @arg @c kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_DiffUploadRequest
 *        Indicates the data is stored in diff_upload_request. (Value:
 *        "DIFF_UPLOAD_REQUEST")
 *    @arg @c kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_DiffUploadResponse
 *        Indicates the data is stored in diff_upload_response. (Value:
 *        "DIFF_UPLOAD_RESPONSE")
 *    @arg @c kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_DiffVersionResponse
 *        Indicates the data is stored in diff_version_response. (Value:
 *        "DIFF_VERSION_RESPONSE")
 *    @arg @c kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_GetMedia
 *        Data should be accessed from the current service using the operation
 *        GetMedia. (Value: "GET_MEDIA")
 *    @arg @c kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_Inline Data
 *        is included into this proto buffer (Value: "INLINE")
 *    @arg @c kGTLRFirebaseAppDistribution_GdataMedia_ReferenceType_Path
 *        Reference contains a GFS path or a local path. (Value: "PATH")
 */
@property(nonatomic, copy, nullable) NSString *referenceType;

/**
 *  Scotty-provided SHA1 hash for an upload.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *sha1Hash;

/**
 *  Scotty-provided SHA256 hash for an upload.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *sha256Hash;

/**
 *  Time at which the media data was last updated, in milliseconds since UNIX
 *  epoch
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timestamp;

/** A unique fingerprint/version id for the media data */
@property(nonatomic, copy, nullable) NSString *token;

@end


/**
 *  This is a copy of the tech.blob.ObjectId proto, which could not be used
 *  directly here due to transitive closure issues with JavaScript support; see
 *  http://b/8801763.
 */
@interface GTLRFirebaseAppDistribution_GdataObjectId : GTLRObject

/** The name of the bucket to which this object belongs. */
@property(nonatomic, copy, nullable) NSString *bucketName;

/**
 *  Generation of the object. Generations are monotonically increasing across
 *  writes, allowing them to be be compared to determine which generation is
 *  newer. If this is omitted in a request, then you are requesting the live
 *  object. See http://go/bigstore-versions
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/** The name of the object. */
@property(nonatomic, copy, nullable) NSString *objectName;

@end


/**
 *  Android App Bundle (AAB) information for a Firebase app.
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo : GTLRObject

/**
 *  App bundle integration state. Only valid for android apps.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo_IntegrationState_AabIntegrationStateUnspecified
 *        Aab integration state unspecified (Value:
 *        "AAB_INTEGRATION_STATE_UNSPECIFIED")
 *    @arg @c kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo_IntegrationState_AabStateUnavailable
 *        Play App status is unavailable (Value: "AAB_STATE_UNAVAILABLE")
 *    @arg @c kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo_IntegrationState_AppNotPublished
 *        The app in Play developer account is not in a published state (Value:
 *        "APP_NOT_PUBLISHED")
 *    @arg @c kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo_IntegrationState_Integrated
 *        App can receive app bundle uploads (Value: "INTEGRATED")
 *    @arg @c kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo_IntegrationState_NoAppWithGivenBundleIdInPlayAccount
 *        There is no app in linked Play developer account with the same bundle
 *        id (Value: "NO_APP_WITH_GIVEN_BUNDLE_ID_IN_PLAY_ACCOUNT")
 *    @arg @c kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo_IntegrationState_PlayAccountNotLinked
 *        Firebase project is not linked to a Play developer account (Value:
 *        "PLAY_ACCOUNT_NOT_LINKED")
 *    @arg @c kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo_IntegrationState_PlayIasTermsNotAccepted
 *        Play IAS terms not accepted (Value: "PLAY_IAS_TERMS_NOT_ACCEPTED")
 */
@property(nonatomic, copy, nullable) NSString *integrationState;

/**
 *  The name of the `AabInfo` resource. Format:
 *  `projects/{project_number}/apps/{app}/aabInfo`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  App bundle test certificate generated for the app. Set after the first app
 *  bundle is uploaded for this app.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1TestCertificate *testCertificate;

@end


/**
 *  The Request message for batch adding testers
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchAddTestersRequest : GTLRObject

/**
 *  Required. The email addresses of the tester resources to create. A maximum
 *  of 999 and a minimum of 1 tester can be created in a batch.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *emails;

@end


/**
 *  The Response message for `BatchAddTesters`.
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchAddTestersResponse : GTLRObject

/** The testers which are created and/or already exist */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Tester *> *testers;

@end


/**
 *  The request message for `BatchDeleteReleases`.
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchDeleteReleasesRequest : GTLRObject

/**
 *  Required. The names of the release resources to delete. Format:
 *  `projects/{project_number}/apps/{app_id}/releases/{release_id}` A maximum of
 *  100 releases can be deleted per request.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

@end


/**
 *  The request message for `BatchJoinGroup`
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchJoinGroupRequest : GTLRObject

/**
 *  Indicates whether to create tester resources based on `emails` if they don't
 *  exist yet.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *createMissingTesters;

/**
 *  Required. The emails of the testers to be added to the group. A maximum of
 *  999 and a minimum of 1 tester can be created in a batch.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *emails;

@end


/**
 *  Request message for `BatchLeaveGroup`
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchLeaveGroupRequest : GTLRObject

/**
 *  Required. The email addresses of the testers to be removed from the group. A
 *  maximum of 999 and a minimum of 1 testers can be removed in a batch.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *emails;

@end


/**
 *  The request message for `BatchRemoveTesters`.
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchRemoveTestersRequest : GTLRObject

/**
 *  Required. The email addresses of the tester resources to removed. A maximum
 *  of 999 and a minimum of 1 testers can be deleted in a batch.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *emails;

@end


/**
 *  The response message for `BatchRemoveTesters`
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchRemoveTestersResponse : GTLRObject

/** List of deleted tester emails */
@property(nonatomic, strong, nullable) NSArray<NSString *> *emails;

@end


/**
 *  The request message for `DistributeRelease`.
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1DistributeReleaseRequest : GTLRObject

/**
 *  A list of group aliases (IDs) to be given access to this release. A combined
 *  maximum of 999 `testerEmails` and `groupAliases` can be specified in a
 *  single request.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *groupAliases;

/**
 *  A list of tester email addresses to be given access to this release. A
 *  combined maximum of 999 `testerEmails` and `groupAliases` can be specified
 *  in a single request.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *testerEmails;

@end


/**
 *  The response message for `DistributeRelease`.
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1DistributeReleaseResponse : GTLRObject
@end


/**
 *  A feedback report submitted by a tester for a release.
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1FeedbackReport : GTLRObject

/** Output only. The time when the feedback report was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. A link to the Firebase console displaying the feedback report.
 */
@property(nonatomic, copy, nullable) NSString *firebaseConsoleUri;

/**
 *  The name of the feedback report resource. Format:
 *  `projects/{project_number}/apps/{app}/releases/{release}/feedbackReports/{feedback_report}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. A signed link (which expires in one hour) that lets you
 *  directly download the screenshot.
 */
@property(nonatomic, copy, nullable) NSString *screenshotUri;

/**
 *  Output only. The resource name of the tester who submitted the feedback
 *  report.
 */
@property(nonatomic, copy, nullable) NSString *tester;

/** Output only. The text of the feedback report. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A group which can contain testers. A group can be invited to test apps in a
 *  Firebase project.
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Group : GTLRObject

/** Required. The display name of the group. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. The number of invite links for this group.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inviteLinkCount;

/**
 *  The name of the group resource. Format:
 *  `projects/{project_number}/groups/{group_alias}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The number of releases this group is permitted to access.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *releaseCount;

/**
 *  Output only. The number of testers who are members of this group.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *testerCount;

@end


/**
 *  The response message for `ListFeedbackReports`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "feedbackReports" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1ListFeedbackReportsResponse : GTLRCollectionObject

/**
 *  The feedback reports
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1FeedbackReport *> *feedbackReports;

/**
 *  A short-lived token, which can be sent as `pageToken` to retrieve the next
 *  page. If this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for `ListGroups`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "groups" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1ListGroupsResponse : GTLRCollectionObject

/**
 *  The groups listed.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Group *> *groups;

/**
 *  A short-lived token, which can be sent as `pageToken` to retrieve the next
 *  page. If this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for `ListReleases`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "releases" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1ListReleasesResponse : GTLRCollectionObject

/**
 *  A short-lived token, which can be sent as `pageToken` to retrieve the next
 *  page. If this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The releases
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Release *> *releases;

@end


/**
 *  The response message for `ListTesters`.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "testers" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1ListTestersResponse : GTLRCollectionObject

/**
 *  A short-lived token, which can be sent as `pageToken` to retrieve the next
 *  page. If this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The testers listed.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Tester *> *testers;

@end


/**
 *  A release of a Firebase app.
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Release : GTLRObject

/**
 *  Output only. A signed link (which expires in one hour) to directly download
 *  the app binary (IPA/APK/AAB) file.
 */
@property(nonatomic, copy, nullable) NSString *binaryDownloadUri;

/**
 *  Output only. Build version of the release. For an Android release, the build
 *  version is the `versionCode`. For an iOS release, the build version is the
 *  `CFBundleVersion`.
 */
@property(nonatomic, copy, nullable) NSString *buildVersion;

/** Output only. The time the release was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. Display version of the release. For an Android release, the
 *  display version is the `versionName`. For an iOS release, the display
 *  version is the `CFBundleShortVersionString`.
 */
@property(nonatomic, copy, nullable) NSString *displayVersion;

/**
 *  Output only. A link to the Firebase console displaying a single release.
 */
@property(nonatomic, copy, nullable) NSString *firebaseConsoleUri;

/**
 *  The name of the release resource. Format:
 *  `projects/{project_number}/apps/{app_id}/releases/{release_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Notes of the release. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1ReleaseNotes *releaseNotes;

/**
 *  Output only. A link to the release in the tester web clip or Android app
 *  that lets testers (which were granted access to the app) view release notes
 *  and install the app onto their devices.
 */
@property(nonatomic, copy, nullable) NSString *testingUri;

@end


/**
 *  Notes that belong to a release.
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1ReleaseNotes : GTLRObject

/** The text of the release notes. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  App bundle test certificate
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1TestCertificate : GTLRObject

/** Hex string of MD5 hash of the test certificate used to resign the AAB */
@property(nonatomic, copy, nullable) NSString *hashMd5;

/** Hex string of SHA1 hash of the test certificate used to resign the AAB */
@property(nonatomic, copy, nullable) NSString *hashSha1;

/**
 *  Hex string of SHA256 hash of the test certificate used to resign the AAB
 */
@property(nonatomic, copy, nullable) NSString *hashSha256;

@end


/**
 *  A person that can be invited to test apps in a Firebase project.
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Tester : GTLRObject

/**
 *  The name of the tester associated with the Google account used to accept the
 *  tester invitation.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** The resource names of the groups this tester belongs to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *groups;

/**
 *  Output only. The time the tester was last active. This is the most recent
 *  time the tester installed one of the apps. If they've never installed one or
 *  if the release no longer exists, this is the time the tester was added to
 *  the project.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastActivityTime;

/**
 *  The name of the tester resource. Format:
 *  `projects/{project_number}/testers/{email_address}`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Operation metadata for `UploadRelease`.
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1UploadReleaseMetadata : GTLRObject
@end


/**
 *  Request message for `UploadRelease`.
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1UploadReleaseRequest : GTLRObject

/** Binary to upload */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GdataMedia *blob;

@end


/**
 *  Response message for `UploadRelease`.
 */
@interface GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1UploadReleaseResponse : GTLRObject

/**
 *  Release associated with the uploaded binary.
 *
 *  Remapped to 'releaseProperty' to avoid NSObject's 'release'.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Release *releaseProperty;

/**
 *  Result of upload release.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1UploadReleaseResponse_Result_ReleaseCreated
 *        Upload binary resulted in a new release (Value: "RELEASE_CREATED")
 *    @arg @c kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1UploadReleaseResponse_Result_ReleaseUnmodified
 *        Upload binary resulted in a no-op. A release with the exact same
 *        binary already exists. (Value: "RELEASE_UNMODIFIED")
 *    @arg @c kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1UploadReleaseResponse_Result_ReleaseUpdated
 *        Upload binary updated an existing release (Value: "RELEASE_UPDATED")
 *    @arg @c kGTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1UploadReleaseResponse_Result_UploadReleaseResultUnspecified
 *        Upload binary result unspecified (Value:
 *        "UPLOAD_RELEASE_RESULT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *result;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRFirebaseAppDistribution_GoogleLongrunningCancelOperationRequest : GTLRObject
@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseAppDistribution_GoogleLongrunningListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppDistribution_GoogleLongrunningOperation *> *operations;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRFirebaseAppDistribution_GoogleLongrunningOperation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GoogleRpcStatus *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GoogleLongrunningOperation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppDistribution_GoogleLongrunningOperation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseAppDistribution_GoogleLongrunningOperation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseAppDistribution_GoogleLongrunningOperation_Response : GTLRObject
@end


/**
 *  The request message for Operations.WaitOperation.
 */
@interface GTLRFirebaseAppDistribution_GoogleLongrunningWaitOperationRequest : GTLRObject

/**
 *  The maximum duration to wait before timing out. If left blank, the wait will
 *  be at most the time permitted by the underlying HTTP/RPC protocol. If RPC
 *  context deadline is also specified, the shorter one will be used.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRFirebaseAppDistribution_GoogleProtobufEmpty : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRFirebaseAppDistribution_GoogleRpcStatus : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppDistribution_GoogleRpcStatus_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRFirebaseAppDistribution_GoogleRpcStatus_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseAppDistribution_GoogleRpcStatus_Details_Item : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
