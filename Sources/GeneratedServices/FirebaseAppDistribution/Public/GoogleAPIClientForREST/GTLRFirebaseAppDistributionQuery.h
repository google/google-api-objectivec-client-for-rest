// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase App Distribution API (firebaseappdistribution/v1)
// Documentation:
//   https://firebase.google.com/products/app-distribution

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRFirebaseAppDistributionObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Firebase App Distribution query classes.
 */
@interface GTLRFirebaseAppDistributionQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Uploads a binary. Uploading a binary can result in a new release being
 *  created, an update to an existing release, or a no-op if a release with the
 *  same binary already exists.
 *
 *  Method: firebaseappdistribution.media.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_MediaUpload : GTLRFirebaseAppDistributionQuery

/**
 *  The name of the app resource. Format:
 *  `projects/{project_number}/apps/{app_id}`
 */
@property(nonatomic, copy, nullable) NSString *app;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleLongrunningOperation.
 *
 *  Uploads a binary. Uploading a binary can result in a new release being
 *  created, an update to an existing release, or a no-op if a release with the
 *  same binary already exists.
 *
 *  @param object The @c
 *    GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1UploadReleaseRequest
 *    to include in the query.
 *  @param app The name of the app resource. Format:
 *    `projects/{project_number}/apps/{app_id}`
 *  @param uploadParameters The media to include in this query. Accepted MIME
 *    type: * / *
 *
 *  @return GTLRFirebaseAppDistributionQuery_MediaUpload
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1UploadReleaseRequest *)object
                            app:(NSString *)app
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Gets Android App Bundle (AAB) information for a Firebase app.
 *
 *  Method: firebaseappdistribution.projects.apps.getAabInfo
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsAppsGetAabInfo : GTLRFirebaseAppDistributionQuery

/**
 *  Required. The name of the `AabInfo` resource to retrieve. Format:
 *  `projects/{project_number}/apps/{app_id}/aabInfo`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1AabInfo.
 *
 *  Gets Android App Bundle (AAB) information for a Firebase app.
 *
 *  @param name Required. The name of the `AabInfo` resource to retrieve.
 *    Format: `projects/{project_number}/apps/{app_id}/aabInfo`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsAppsGetAabInfo
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes releases. A maximum of 100 releases can be deleted per request.
 *
 *  Method: firebaseappdistribution.projects.apps.releases.batchDelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesBatchDelete : GTLRFirebaseAppDistributionQuery

/**
 *  Required. The name of the app resource, which is the parent of the release
 *  resources. Format: `projects/{project_number}/apps/{app_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleProtobufEmpty.
 *
 *  Deletes releases. A maximum of 100 releases can be deleted per request.
 *
 *  @param object The @c
 *    GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchDeleteReleasesRequest
 *    to include in the query.
 *  @param parent Required. The name of the app resource, which is the parent of
 *    the release resources. Format: `projects/{project_number}/apps/{app_id}`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesBatchDelete
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchDeleteReleasesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Distributes a release to testers. This call does the following: 1. Creates
 *  testers for the specified emails, if none exist. 2. Adds the testers and
 *  groups to the release. 3. Sends new testers an invitation email. 4. Sends
 *  existing testers a new release email. The request will fail with a
 *  `INVALID_ARGUMENT` if it contains a group that doesn't exist.
 *
 *  Method: firebaseappdistribution.projects.apps.releases.distribute
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesDistribute : GTLRFirebaseAppDistributionQuery

/**
 *  Required. The name of the release resource to distribute. Format:
 *  `projects/{project_number}/apps/{app_id}/releases/{release_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1DistributeReleaseResponse.
 *
 *  Distributes a release to testers. This call does the following: 1. Creates
 *  testers for the specified emails, if none exist. 2. Adds the testers and
 *  groups to the release. 3. Sends new testers an invitation email. 4. Sends
 *  existing testers a new release email. The request will fail with a
 *  `INVALID_ARGUMENT` if it contains a group that doesn't exist.
 *
 *  @param object The @c
 *    GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1DistributeReleaseRequest
 *    to include in the query.
 *  @param name Required. The name of the release resource to distribute.
 *    Format: `projects/{project_number}/apps/{app_id}/releases/{release_id}`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesDistribute
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1DistributeReleaseRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a feedback report.
 *
 *  Method: firebaseappdistribution.projects.apps.releases.feedbackReports.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesFeedbackReportsDelete : GTLRFirebaseAppDistributionQuery

/**
 *  Required. The name of the feedback report to delete. Format:
 *  projects/{project_number}/apps/{app}/releases/{release}/feedbackReports/{feedback_report}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleProtobufEmpty.
 *
 *  Deletes a feedback report.
 *
 *  @param name Required. The name of the feedback report to delete. Format:
 *    projects/{project_number}/apps/{app}/releases/{release}/feedbackReports/{feedback_report}
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesFeedbackReportsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a feedback report.
 *
 *  Method: firebaseappdistribution.projects.apps.releases.feedbackReports.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesFeedbackReportsGet : GTLRFirebaseAppDistributionQuery

/**
 *  Required. The name of the feedback report to retrieve. Format:
 *  projects/{project_number}/apps/{app}/releases/{release}/feedbackReports/{feedback_report}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1FeedbackReport.
 *
 *  Gets a feedback report.
 *
 *  @param name Required. The name of the feedback report to retrieve. Format:
 *    projects/{project_number}/apps/{app}/releases/{release}/feedbackReports/{feedback_report}
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesFeedbackReportsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists feedback reports. By default, sorts by `createTime` in descending
 *  order.
 *
 *  Method: firebaseappdistribution.projects.apps.releases.feedbackReports.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesFeedbackReportsList : GTLRFirebaseAppDistributionQuery

/**
 *  The expression to filter feedback reports listed in the response. To learn
 *  more about filtering, refer to [Google's AIP-160
 *  standard](http://aip.dev/160). Supported fields: - `tester` - `createTime`
 *  supports `<`, `<=`, `>` and `>=`, and expects an RFC-3339 formatted string
 *  Example: - `createTime <= "2023-03-10T00:00:00+04:00"` - `tester =
 *  "projects/-/testers/ *\@example.com"`
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The fields used to order releases. Supported fields: - `createTime` -
 *  `tester` To specify descending order for a field, append a "desc" suffix,
 *  for example, `createTime desc`. If this parameter is not set, releases are
 *  ordered by `createTime` in descending order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of feedback reports to return. The service may return
 *  fewer than this value. The valid range is [1-100]; If unspecified (0), at
 *  most 25 feedback reports are returned. Values above 100 are coerced to 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListFeedbackReports` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListFeedbackReports` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the release resource, which is the parent of the
 *  feedback report resources. Format:
 *  `projects/{project_number}/apps/{app}/releases/{release}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1ListFeedbackReportsResponse.
 *
 *  Lists feedback reports. By default, sorts by `createTime` in descending
 *  order.
 *
 *  @param parent Required. The name of the release resource, which is the
 *    parent of the feedback report resources. Format:
 *    `projects/{project_number}/apps/{app}/releases/{release}`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesFeedbackReportsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets a release.
 *
 *  Method: firebaseappdistribution.projects.apps.releases.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesGet : GTLRFirebaseAppDistributionQuery

/**
 *  Required. The name of the release resource to retrieve. Format:
 *  projects/{project_number}/apps/{app_id}/releases/{release_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Release.
 *
 *  Gets a release.
 *
 *  @param name Required. The name of the release resource to retrieve. Format:
 *    projects/{project_number}/apps/{app_id}/releases/{release_id}
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists releases. By default, sorts by `createTime` in descending order.
 *
 *  Method: firebaseappdistribution.projects.apps.releases.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesList : GTLRFirebaseAppDistributionQuery

/**
 *  The expression to filter releases listed in the response. To learn more
 *  about filtering, refer to [Google's AIP-160 standard](http://aip.dev/160).
 *  Supported fields: - `releaseNotes.text` supports `=` (can contain a wildcard
 *  character (`*`) at the beginning or end of the string) - `createTime`
 *  supports `<`, `<=`, `>` and `>=`, and expects an RFC-3339 formatted string
 *  Examples: - `createTime <= "2021-09-08T00:00:00+04:00"` -
 *  `releaseNotes.text="fixes" AND createTime >= "2021-09-08T00:00:00.0Z"` -
 *  `releaseNotes.text="*v1.0.0-rc*"`
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The fields used to order releases. Supported fields: - `createTime` To
 *  specify descending order for a field, append a "desc" suffix, for example,
 *  `createTime desc`. If this parameter is not set, releases are ordered by
 *  `createTime` in descending order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of releases to return. The service may return fewer than
 *  this value. The valid range is [1-100]; If unspecified (0), at most 25
 *  releases are returned. Values above 100 are coerced to 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListReleases` call. Provide this to
 *  retrieve the subsequent page. When paginating, all other parameters provided
 *  to `ListReleases` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the app resource, which is the parent of the release
 *  resources. Format: `projects/{project_number}/apps/{app_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1ListReleasesResponse.
 *
 *  Lists releases. By default, sorts by `createTime` in descending order.
 *
 *  @param parent Required. The name of the app resource, which is the parent of
 *    the release resources. Format: `projects/{project_number}/apps/{app_id}`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: firebaseappdistribution.projects.apps.releases.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesOperationsCancel : GTLRFirebaseAppDistributionQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleProtobufEmpty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c
 *    GTLRFirebaseAppDistribution_GoogleLongrunningCancelOperationRequest to
 *    include in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppDistribution_GoogleLongrunningCancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: firebaseappdistribution.projects.apps.releases.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesOperationsDelete : GTLRFirebaseAppDistributionQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleProtobufEmpty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: firebaseappdistribution.projects.apps.releases.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesOperationsGet : GTLRFirebaseAppDistributionQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: firebaseappdistribution.projects.apps.releases.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesOperationsList : GTLRFirebaseAppDistributionQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c
 *  GTLRFirebaseAppDistribution_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Waits until the specified long-running operation is done or reaches at most
 *  a specified timeout, returning the latest state. If the operation is already
 *  done, the latest state is immediately returned. If the timeout specified is
 *  greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If
 *  the server does not support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort
 *  basis. It may return the latest state before the specified timeout
 *  (including immediately), meaning even an immediate response is no guarantee
 *  that the operation is done.
 *
 *  Method: firebaseappdistribution.projects.apps.releases.operations.wait
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesOperationsWait : GTLRFirebaseAppDistributionQuery

/** The name of the operation resource to wait on. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleLongrunningOperation.
 *
 *  Waits until the specified long-running operation is done or reaches at most
 *  a specified timeout, returning the latest state. If the operation is already
 *  done, the latest state is immediately returned. If the timeout specified is
 *  greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If
 *  the server does not support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort
 *  basis. It may return the latest state before the specified timeout
 *  (including immediately), meaning even an immediate response is no guarantee
 *  that the operation is done.
 *
 *  @param object The @c
 *    GTLRFirebaseAppDistribution_GoogleLongrunningWaitOperationRequest to
 *    include in the query.
 *  @param name The name of the operation resource to wait on.
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesOperationsWait
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppDistribution_GoogleLongrunningWaitOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a release.
 *
 *  Method: firebaseappdistribution.projects.apps.releases.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesPatch : GTLRFirebaseAppDistributionQuery

/**
 *  The name of the release resource. Format:
 *  `projects/{project_number}/apps/{app_id}/releases/{release_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Release.
 *
 *  Updates a release.
 *
 *  @param object The @c
 *    GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Release to include in
 *    the query.
 *  @param name The name of the release resource. Format:
 *    `projects/{project_number}/apps/{app_id}/releases/{release_id}`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsAppsReleasesPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Release *)object
                           name:(NSString *)name;

@end

/**
 *  Batch adds members to a group. The testers will gain access to all releases
 *  that the groups have access to.
 *
 *  Method: firebaseappdistribution.projects.groups.batchJoin
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsGroupsBatchJoin : GTLRFirebaseAppDistributionQuery

/**
 *  Required. The name of the group resource to which testers are added. Format:
 *  `projects/{project_number}/groups/{group_alias}`
 */
@property(nonatomic, copy, nullable) NSString *group;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleProtobufEmpty.
 *
 *  Batch adds members to a group. The testers will gain access to all releases
 *  that the groups have access to.
 *
 *  @param object The @c
 *    GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchJoinGroupRequest
 *    to include in the query.
 *  @param group Required. The name of the group resource to which testers are
 *    added. Format: `projects/{project_number}/groups/{group_alias}`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsGroupsBatchJoin
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchJoinGroupRequest *)object
                          group:(NSString *)group;

@end

/**
 *  Batch removed members from a group. The testers will lose access to all
 *  releases that the groups have access to.
 *
 *  Method: firebaseappdistribution.projects.groups.batchLeave
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsGroupsBatchLeave : GTLRFirebaseAppDistributionQuery

/**
 *  Required. The name of the group resource from which testers are removed.
 *  Format: `projects/{project_number}/groups/{group_alias}`
 */
@property(nonatomic, copy, nullable) NSString *group;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleProtobufEmpty.
 *
 *  Batch removed members from a group. The testers will lose access to all
 *  releases that the groups have access to.
 *
 *  @param object The @c
 *    GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchLeaveGroupRequest
 *    to include in the query.
 *  @param group Required. The name of the group resource from which testers are
 *    removed. Format: `projects/{project_number}/groups/{group_alias}`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsGroupsBatchLeave
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchLeaveGroupRequest *)object
                          group:(NSString *)group;

@end

/**
 *  Create a group.
 *
 *  Method: firebaseappdistribution.projects.groups.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsGroupsCreate : GTLRFirebaseAppDistributionQuery

/**
 *  Optional. The "alias" to use for the group, which will become the final
 *  component of the group's resource name. This value must be unique per
 *  project. The field is named `groupId` to comply with AIP guidance for
 *  user-specified IDs. This value should be 4-63 characters, and valid
 *  characters are `/a-z-/`. If not set, it will be generated based on the
 *  display name.
 */
@property(nonatomic, copy, nullable) NSString *groupId;

/**
 *  Required. The name of the project resource, which is the parent of the group
 *  resource. Format: `projects/{project_number}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Group.
 *
 *  Create a group.
 *
 *  @param object The @c
 *    GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Group to include in
 *    the query.
 *  @param parent Required. The name of the project resource, which is the
 *    parent of the group resource. Format: `projects/{project_number}`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsGroupsCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Group *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete a group.
 *
 *  Method: firebaseappdistribution.projects.groups.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsGroupsDelete : GTLRFirebaseAppDistributionQuery

/**
 *  Required. The name of the group resource. Format:
 *  `projects/{project_number}/groups/{group_alias}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleProtobufEmpty.
 *
 *  Delete a group.
 *
 *  @param name Required. The name of the group resource. Format:
 *    `projects/{project_number}/groups/{group_alias}`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsGroupsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get a group.
 *
 *  Method: firebaseappdistribution.projects.groups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsGroupsGet : GTLRFirebaseAppDistributionQuery

/**
 *  Required. The name of the group resource to retrieve. Format:
 *  `projects/{project_number}/groups/{group_alias}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Group.
 *
 *  Get a group.
 *
 *  @param name Required. The name of the group resource to retrieve. Format:
 *    `projects/{project_number}/groups/{group_alias}`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsGroupsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List groups.
 *
 *  Method: firebaseappdistribution.projects.groups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsGroupsList : GTLRFirebaseAppDistributionQuery

/**
 *  Optional. The maximum number of groups to return. The service may return
 *  fewer than this value. The valid range is [1-100]; If unspecified (0), at
 *  most 25 groups are returned. Values above 100 are coerced to 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListGroups` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListGroups` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the project resource, which is the parent of the group
 *  resources. Format: `projects/{project_number}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1ListGroupsResponse.
 *
 *  List groups.
 *
 *  @param parent Required. The name of the project resource, which is the
 *    parent of the group resources. Format: `projects/{project_number}`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsGroupsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update a group.
 *
 *  Method: firebaseappdistribution.projects.groups.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsGroupsPatch : GTLRFirebaseAppDistributionQuery

/**
 *  The name of the group resource. Format:
 *  `projects/{project_number}/groups/{group_alias}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Group.
 *
 *  Update a group.
 *
 *  @param object The @c
 *    GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Group to include in
 *    the query.
 *  @param name The name of the group resource. Format:
 *    `projects/{project_number}/groups/{group_alias}`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsGroupsPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Group *)object
                           name:(NSString *)name;

@end

/**
 *  Batch adds testers. This call adds testers for the specified emails if they
 *  don't already exist. Returns all testers specified in the request, including
 *  newly created and previously existing testers. This action is idempotent.
 *
 *  Method: firebaseappdistribution.projects.testers.batchAdd
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsTestersBatchAdd : GTLRFirebaseAppDistributionQuery

/**
 *  Required. The name of the project resource. Format:
 *  `projects/{project_number}`
 */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c
 *  GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchAddTestersResponse.
 *
 *  Batch adds testers. This call adds testers for the specified emails if they
 *  don't already exist. Returns all testers specified in the request, including
 *  newly created and previously existing testers. This action is idempotent.
 *
 *  @param object The @c
 *    GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchAddTestersRequest
 *    to include in the query.
 *  @param project Required. The name of the project resource. Format:
 *    `projects/{project_number}`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsTestersBatchAdd
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchAddTestersRequest *)object
                        project:(NSString *)project;

@end

/**
 *  Batch removes testers. If found, this call deletes testers for the specified
 *  emails. Returns all deleted testers.
 *
 *  Method: firebaseappdistribution.projects.testers.batchRemove
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsTestersBatchRemove : GTLRFirebaseAppDistributionQuery

/**
 *  Required. The name of the project resource. Format:
 *  `projects/{project_number}`
 */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Fetches a @c
 *  GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchRemoveTestersResponse.
 *
 *  Batch removes testers. If found, this call deletes testers for the specified
 *  emails. Returns all deleted testers.
 *
 *  @param object The @c
 *    GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchRemoveTestersRequest
 *    to include in the query.
 *  @param project Required. The name of the project resource. Format:
 *    `projects/{project_number}`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsTestersBatchRemove
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1BatchRemoveTestersRequest *)object
                        project:(NSString *)project;

@end

/**
 *  Lists testers and their resource ids.
 *
 *  Method: firebaseappdistribution.projects.testers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsTestersList : GTLRFirebaseAppDistributionQuery

/**
 *  Optional. The expression to filter testers listed in the response. To learn
 *  more about filtering, refer to [Google's AIP-160
 *  standard](http://aip.dev/160). Supported fields: - `name` - `displayName` -
 *  `groups` Example: - `name = "projects/-/testers/ *\@example.com"` -
 *  `displayName = "Joe Sixpack"` - `groups = "projects/ * /groups/qa-team"`
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The maximum number of testers to return. The service may return
 *  fewer than this value. The valid range is [1-1000]; If unspecified (0), at
 *  most 10 testers are returned. Values above 1000 are coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListTesters` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListTesters` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the project resource, which is the parent of the
 *  tester resources. Format: `projects/{project_number}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1ListTestersResponse.
 *
 *  Lists testers and their resource ids.
 *
 *  @param parent Required. The name of the project resource, which is the
 *    parent of the tester resources. Format: `projects/{project_number}`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsTestersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update a tester. If the testers joins a group they gain access to all
 *  releases that the group has access to.
 *
 *  Method: firebaseappdistribution.projects.testers.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppDistributionCloudPlatform
 */
@interface GTLRFirebaseAppDistributionQuery_ProjectsTestersPatch : GTLRFirebaseAppDistributionQuery

/**
 *  The name of the tester resource. Format:
 *  `projects/{project_number}/testers/{email_address}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Tester.
 *
 *  Update a tester. If the testers joins a group they gain access to all
 *  releases that the group has access to.
 *
 *  @param object The @c
 *    GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Tester to include in
 *    the query.
 *  @param name The name of the tester resource. Format:
 *    `projects/{project_number}/testers/{email_address}`
 *
 *  @return GTLRFirebaseAppDistributionQuery_ProjectsTestersPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppDistribution_GoogleFirebaseAppdistroV1Tester *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
