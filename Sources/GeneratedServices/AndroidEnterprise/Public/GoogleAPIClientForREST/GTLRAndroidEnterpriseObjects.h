// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play EMM API (androidenterprise/v1)
// Description:
//   Manages the deployment of apps to Android Enterprise devices.
// Documentation:
//   https://developers.google.com/android/work/play/emm-api

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAndroidEnterprise_Administrator;
@class GTLRAndroidEnterprise_AdministratorWebTokenSpecManagedConfigurations;
@class GTLRAndroidEnterprise_AdministratorWebTokenSpecPlaySearch;
@class GTLRAndroidEnterprise_AdministratorWebTokenSpecPrivateApps;
@class GTLRAndroidEnterprise_AdministratorWebTokenSpecStoreBuilder;
@class GTLRAndroidEnterprise_AdministratorWebTokenSpecWebApps;
@class GTLRAndroidEnterprise_AdministratorWebTokenSpecZeroTouch;
@class GTLRAndroidEnterprise_AppRestrictionsSchema;
@class GTLRAndroidEnterprise_AppRestrictionsSchemaChangeEvent;
@class GTLRAndroidEnterprise_AppRestrictionsSchemaRestriction;
@class GTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue;
@class GTLRAndroidEnterprise_ApprovalUrlInfo;
@class GTLRAndroidEnterprise_AppState;
@class GTLRAndroidEnterprise_AppUpdateEvent;
@class GTLRAndroidEnterprise_AppVersion;
@class GTLRAndroidEnterprise_AutoInstallConstraint;
@class GTLRAndroidEnterprise_AutoInstallPolicy;
@class GTLRAndroidEnterprise_ConfigurationVariables;
@class GTLRAndroidEnterprise_Device;
@class GTLRAndroidEnterprise_DeviceReport;
@class GTLRAndroidEnterprise_DeviceReportUpdateEvent;
@class GTLRAndroidEnterprise_Enterprise;
@class GTLRAndroidEnterprise_EnterpriseAuthenticationAppLinkConfig;
@class GTLRAndroidEnterprise_Entitlement;
@class GTLRAndroidEnterprise_GroupLicense;
@class GTLRAndroidEnterprise_Install;
@class GTLRAndroidEnterprise_InstallFailureEvent;
@class GTLRAndroidEnterprise_KeyedAppState;
@class GTLRAndroidEnterprise_LocalizedText;
@class GTLRAndroidEnterprise_MaintenanceWindow;
@class GTLRAndroidEnterprise_ManagedConfiguration;
@class GTLRAndroidEnterprise_ManagedConfigurationsSettings;
@class GTLRAndroidEnterprise_ManagedProperty;
@class GTLRAndroidEnterprise_ManagedPropertyBundle;
@class GTLRAndroidEnterprise_NewDeviceEvent;
@class GTLRAndroidEnterprise_NewPermissionsEvent;
@class GTLRAndroidEnterprise_Notification;
@class GTLRAndroidEnterprise_PageInfo;
@class GTLRAndroidEnterprise_Policy;
@class GTLRAndroidEnterprise_Product;
@class GTLRAndroidEnterprise_ProductApprovalEvent;
@class GTLRAndroidEnterprise_ProductAvailabilityChangeEvent;
@class GTLRAndroidEnterprise_ProductPermission;
@class GTLRAndroidEnterprise_ProductPolicy;
@class GTLRAndroidEnterprise_ProductSigningCertificate;
@class GTLRAndroidEnterprise_ProductVisibility;
@class GTLRAndroidEnterprise_ServiceAccountKey;
@class GTLRAndroidEnterprise_StoreCluster;
@class GTLRAndroidEnterprise_StorePage;
@class GTLRAndroidEnterprise_TokenPagination;
@class GTLRAndroidEnterprise_TrackInfo;
@class GTLRAndroidEnterprise_User;
@class GTLRAndroidEnterprise_VariableSet;
@class GTLRAndroidEnterprise_WebApp;
@class GTLRAndroidEnterprise_WebAppIcon;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_AdministratorWebTokenSpec.permission

/**
 *  Permission to approve and unapprove apps.
 *
 *  Value: "approveApps"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AdministratorWebTokenSpec_Permission_ApproveApps;
/**
 *  Permission to manage app restrictions.
 *
 *  Value: "manageMcm"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AdministratorWebTokenSpec_Permission_ManageMcm;
/**
 *  Unknown permission.
 *
 *  Value: "unknown"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AdministratorWebTokenSpec_Permission_Unknown;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_AppRestrictionsSchemaRestriction.restrictionType

/**
 *  A restriction of boolean type.
 *
 *  Value: "bool"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppRestrictionsSchemaRestriction_RestrictionType_Bool;
/**
 *  [M+ devices only] A bundle of restrictions
 *
 *  Value: "bundle"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppRestrictionsSchemaRestriction_RestrictionType_Bundle;
/**
 *  [M+ devices only] An array of restriction bundles
 *
 *  Value: "bundleArray"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppRestrictionsSchemaRestriction_RestrictionType_BundleArray;
/**
 *  A choice of one item from a set.
 *
 *  Value: "choice"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppRestrictionsSchemaRestriction_RestrictionType_Choice;
/**
 *  A hidden restriction of string type (the default value can be used to pass
 *  along information that cannot be modified, such as a version code).
 *
 *  Value: "hidden"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppRestrictionsSchemaRestriction_RestrictionType_Hidden;
/**
 *  A restriction of integer type.
 *
 *  Value: "integer"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppRestrictionsSchemaRestriction_RestrictionType_Integer;
/**
 *  A choice of multiple items from a set.
 *
 *  Value: "multiselect"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppRestrictionsSchemaRestriction_RestrictionType_Multiselect;
/**
 *  A restriction of string type.
 *
 *  Value: "string"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppRestrictionsSchemaRestriction_RestrictionType_String;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue.type

/**
 *  A restriction of boolean type.
 *
 *  Value: "bool"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue_Type_Bool;
/**
 *  [M+ devices only] A bundle of restrictions
 *
 *  Value: "bundle"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue_Type_Bundle;
/**
 *  [M+ devices only] An array of restriction bundles
 *
 *  Value: "bundleArray"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue_Type_BundleArray;
/**
 *  A choice of one item from a set.
 *
 *  Value: "choice"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue_Type_Choice;
/**
 *  A hidden restriction of string type (the default value can be used to pass
 *  along information that cannot be modified, such as a version code).
 *
 *  Value: "hidden"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue_Type_Hidden;
/**
 *  A restriction of integer type.
 *
 *  Value: "integer"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue_Type_Integer;
/**
 *  A choice of multiple items from a set.
 *
 *  Value: "multiselect"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue_Type_Multiselect;
/**
 *  A restriction of string type.
 *
 *  Value: "string"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue_Type_String;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_AppVersion.track

/** Value: "alpha" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppVersion_Track_Alpha;
/** Value: "appTrackUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppVersion_Track_AppTrackUnspecified;
/** Value: "beta" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppVersion_Track_Beta;
/** Value: "production" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AppVersion_Track_Production;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_AutoInstallConstraint.chargingStateConstraint

/**
 *  Device doesn't have to be charging.
 *
 *  Value: "chargingNotRequired"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AutoInstallConstraint_ChargingStateConstraint_ChargingNotRequired;
/**
 *  Device has to be charging.
 *
 *  Value: "chargingRequired"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AutoInstallConstraint_ChargingStateConstraint_ChargingRequired;
/** Value: "chargingStateConstraintUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AutoInstallConstraint_ChargingStateConstraint_ChargingStateConstraintUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_AutoInstallConstraint.deviceIdleStateConstraint

/**
 *  Device doesn't have to be idle, app can be installed while the user is
 *  interacting with the device.
 *
 *  Value: "deviceIdleNotRequired"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AutoInstallConstraint_DeviceIdleStateConstraint_DeviceIdleNotRequired;
/**
 *  Device has to be idle.
 *
 *  Value: "deviceIdleRequired"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AutoInstallConstraint_DeviceIdleStateConstraint_DeviceIdleRequired;
/** Value: "deviceIdleStateConstraintUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AutoInstallConstraint_DeviceIdleStateConstraint_DeviceIdleStateConstraintUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_AutoInstallConstraint.networkTypeConstraint

/**
 *  Any active networks (Wi-Fi, cellular, etc.).
 *
 *  Value: "anyNetwork"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AutoInstallConstraint_NetworkTypeConstraint_AnyNetwork;
/** Value: "networkTypeConstraintUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AutoInstallConstraint_NetworkTypeConstraint_NetworkTypeConstraintUnspecified;
/**
 *  Any unmetered network (e.g. Wi-FI).
 *
 *  Value: "unmeteredNetwork"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AutoInstallConstraint_NetworkTypeConstraint_UnmeteredNetwork;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_AutoInstallPolicy.autoInstallMode

/** Value: "autoInstallModeUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AutoInstallPolicy_AutoInstallMode_AutoInstallModeUnspecified;
/**
 *  The product is automatically installed once, if the user uninstalls the
 *  product it will not be installed again.
 *
 *  Value: "autoInstallOnce"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AutoInstallPolicy_AutoInstallMode_AutoInstallOnce;
/**
 *  The product is not installed automatically, the user needs to install it
 *  from the Play Store.
 *
 *  Value: "doNotAutoInstall"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AutoInstallPolicy_AutoInstallMode_DoNotAutoInstall;
/**
 *  The product is automatically installed, if the user uninstalls the product
 *  it will be installed again. On managed devices the DPC should block
 *  uninstall.
 *
 *  Value: "forceAutoInstall"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_AutoInstallPolicy_AutoInstallMode_ForceAutoInstall;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_Device.managementType

/** Value: "containerApp" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Device_ManagementType_ContainerApp;
/** Value: "managedDevice" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Device_ManagementType_ManagedDevice;
/** Value: "managedProfile" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Device_ManagementType_ManagedProfile;
/** Value: "unmanagedProfile" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Device_ManagementType_UnmanagedProfile;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_DeviceState.accountState

/** Value: "disabled" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_DeviceState_AccountState_Disabled;
/** Value: "enabled" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_DeviceState_AccountState_Enabled;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_Entitlement.reason

/** Value: "free" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Entitlement_Reason_Free;
/** Value: "groupLicense" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Entitlement_Reason_GroupLicense;
/** Value: "userPurchase" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Entitlement_Reason_UserPurchase;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_GroupLicense.acquisitionKind

/** Value: "bulkPurchase" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_GroupLicense_AcquisitionKind_BulkPurchase;
/** Value: "free" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_GroupLicense_AcquisitionKind_Free;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_GroupLicense.approval

/** Value: "approved" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_GroupLicense_Approval_Approved;
/** Value: "unapproved" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_GroupLicense_Approval_Unapproved;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_GroupLicense.permissions

/** Value: "allCurrentAndFutureApproved" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_GroupLicense_Permissions_AllCurrentAndFutureApproved;
/** Value: "currentApproved" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_GroupLicense_Permissions_CurrentApproved;
/** Value: "needsReapproval" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_GroupLicense_Permissions_NeedsReapproval;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_Install.installState

/** Value: "installed" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Install_InstallState_Installed;
/** Value: "installPending" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Install_InstallState_InstallPending;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_InstallFailureEvent.failureReason

/**
 *  Used when the installation timed out. This can cover a number of situations,
 *  for example when the device did not have connectivity at any point during
 *  the retry period, or if the device is OOM.
 *
 *  Value: "timeout"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_InstallFailureEvent_FailureReason_Timeout;
/**
 *  Used whenever no better reason for failure can be provided.
 *
 *  Value: "unknown"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_InstallFailureEvent_FailureReason_Unknown;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_KeyedAppState.severity

/** Value: "severityError" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_KeyedAppState_Severity_SeverityError;
/** Value: "severityInfo" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_KeyedAppState_Severity_SeverityInfo;
/** Value: "severityUnknown" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_KeyedAppState_Severity_SeverityUnknown;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_NewDeviceEvent.managementType

/** Value: "managedDevice" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_NewDeviceEvent_ManagementType_ManagedDevice;
/** Value: "managedProfile" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_NewDeviceEvent_ManagementType_ManagedProfile;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_Notification.notificationType

/**
 *  Notification about new app restrictions schema change.
 *
 *  Value: "appRestricionsSchemaChange"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Notification_NotificationType_AppRestricionsSchemaChange;
/**
 *  Notification about app update.
 *
 *  Value: "appUpdate"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Notification_NotificationType_AppUpdate;
/**
 *  Notification about an updated device report.
 *
 *  Value: "deviceReportUpdate"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Notification_NotificationType_DeviceReportUpdate;
/**
 *  Notification about an app installation failure.
 *
 *  Value: "installFailure"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Notification_NotificationType_InstallFailure;
/**
 *  Notification about a new device.
 *
 *  Value: "newDevice"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Notification_NotificationType_NewDevice;
/**
 *  Notification about new app permissions.
 *
 *  Value: "newPermissions"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Notification_NotificationType_NewPermissions;
/**
 *  Notification about change to a product's approval status.
 *
 *  Value: "productApproval"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Notification_NotificationType_ProductApproval;
/**
 *  Notification about product availability change.
 *
 *  Value: "productAvailabilityChange"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Notification_NotificationType_ProductAvailabilityChange;
/**
 *  A test push notification.
 *
 *  Value: "testNotification"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Notification_NotificationType_TestNotification;
/** Value: "unknown" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Notification_NotificationType_Unknown;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_Policy.autoUpdatePolicy

/**
 *  Apps are auto-updated at any time. Data charges may apply.
 *
 *  Value: "always"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Policy_AutoUpdatePolicy_Always;
/**
 *  The auto update policy is not set.
 *
 *  Value: "autoUpdatePolicyUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Policy_AutoUpdatePolicy_AutoUpdatePolicyUnspecified;
/**
 *  The user can control auto-updates.
 *
 *  Value: "choiceToTheUser"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Policy_AutoUpdatePolicy_ChoiceToTheUser;
/**
 *  Apps are never auto-updated.
 *
 *  Value: "never"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Policy_AutoUpdatePolicy_Never;
/**
 *  Apps are auto-updated over WiFi only.
 *
 *  Value: "wifiOnly"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Policy_AutoUpdatePolicy_WifiOnly;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_Policy.deviceReportPolicy

/**
 *  Device reports are disabled.
 *
 *  Value: "deviceReportDisabled"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Policy_DeviceReportPolicy_DeviceReportDisabled;
/**
 *  Device reports are enabled.
 *
 *  Value: "deviceReportEnabled"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Policy_DeviceReportPolicy_DeviceReportEnabled;
/**
 *  The device report policy is not set.
 *
 *  Value: "deviceReportPolicyUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Policy_DeviceReportPolicy_DeviceReportPolicyUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_Policy.productAvailabilityPolicy

/**
 *  All products are available except those explicitly marked as unavailable in
 *  the product availability policy.
 *
 *  Value: "all"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Policy_ProductAvailabilityPolicy_All;
/**
 *  Unspecified, applies the user available product set by default.
 *
 *  Value: "productAvailabilityPolicyUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Policy_ProductAvailabilityPolicy_ProductAvailabilityPolicyUnspecified;
/**
 *  The approved products with product availability set to AVAILABLE in the
 *  product policy are available.
 *
 *  Value: "whitelist"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Policy_ProductAvailabilityPolicy_Whitelist;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_Product.availableTracks

/** Value: "alpha" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_AvailableTracks_Alpha;
/** Value: "appTrackUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_AvailableTracks_AppTrackUnspecified;
/** Value: "beta" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_AvailableTracks_Beta;
/** Value: "production" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_AvailableTracks_Production;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_Product.contentRating

/** Value: "all" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_ContentRating_All;
/** Value: "mature" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_ContentRating_Mature;
/** Value: "preTeen" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_ContentRating_PreTeen;
/** Value: "ratingUnknown" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_ContentRating_RatingUnknown;
/** Value: "teen" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_ContentRating_Teen;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_Product.distributionChannel

/** Value: "privateGoogleHosted" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_DistributionChannel_PrivateGoogleHosted;
/** Value: "privateSelfHosted" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_DistributionChannel_PrivateSelfHosted;
/** Value: "publicGoogleHosted" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_DistributionChannel_PublicGoogleHosted;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_Product.features

/** Value: "featureUnknown" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_Features_FeatureUnknown;
/**
 *  The app is a VPN.
 *
 *  Value: "vpnApp"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_Features_VpnApp;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_Product.productPricing

/**
 *  The product is free.
 *
 *  Value: "free"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_ProductPricing_Free;
/**
 *  The product is free, but offers in-app purchases.
 *
 *  Value: "freeWithInAppPurchase"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_ProductPricing_FreeWithInAppPurchase;
/**
 *  The product is paid.
 *
 *  Value: "paid"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_ProductPricing_Paid;
/**
 *  Unknown pricing, used to denote an approved product that is not generally
 *  available.
 *
 *  Value: "unknown"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_Product_ProductPricing_Unknown;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_ProductApprovalEvent.approved

/**
 *  The product was approved.
 *
 *  Value: "approved"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductApprovalEvent_Approved_Approved;
/**
 *  The product was unapproved.
 *
 *  Value: "unapproved"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductApprovalEvent_Approved_Unapproved;
/**
 *  Conveys no information.
 *
 *  Value: "unknown"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductApprovalEvent_Approved_Unknown;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_ProductAvailabilityChangeEvent.availabilityStatus

/**
 *  The previously unavailable product is again available on Google Play.
 *
 *  Value: "available"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductAvailabilityChangeEvent_AvailabilityStatus_Available;
/**
 *  The product was removed from Google Play.
 *
 *  Value: "removed"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductAvailabilityChangeEvent_AvailabilityStatus_Removed;
/**
 *  Conveys no information.
 *
 *  Value: "unknown"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductAvailabilityChangeEvent_AvailabilityStatus_Unknown;
/**
 *  The product was unpublished by the developer.
 *
 *  Value: "unpublished"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductAvailabilityChangeEvent_AvailabilityStatus_Unpublished;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_ProductPermission.state

/**
 *  The permission has been accepted by the enterprise.
 *
 *  Value: "accepted"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductPermission_State_Accepted;
/**
 *  The permission is required by the app but has not yet been accepted by the
 *  enterprise.
 *
 *  Value: "required"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductPermission_State_Required;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_ProductPolicy.autoUpdateMode

/**
 *  The app is automatically updated with low priority to minimize the impact on
 *  the user. The app is updated when the following constraints are met: * The
 *  device is not actively used * The device is connected to an unmetered
 *  network * The device is charging The device is notified about a new update
 *  within 24 hours after it is published by the developer, after which the app
 *  is updated the next time the constraints above are met.
 *
 *  Value: "autoUpdateDefault"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductPolicy_AutoUpdateMode_AutoUpdateDefault;
/**
 *  The app is updated as soon as possible. No constraints are applied. The
 *  device is notified immediately about a new app update after it is published
 *  by the developer.
 *
 *  Value: "autoUpdateHighPriority"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductPolicy_AutoUpdateMode_AutoUpdateHighPriority;
/**
 *  Unspecified. Defaults to AUTO_UPDATE_DEFAULT.
 *
 *  Value: "autoUpdateModeUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductPolicy_AutoUpdateMode_AutoUpdateModeUnspecified;
/**
 *  The app is not automatically updated for a maximum of 90 days after the app
 *  becomes out of date. 90 days after the app becomes out of date, the latest
 *  available version is installed automatically with low priority (see
 *  AUTO_UPDATE_DEFAULT). After the app is updated it is not automatically
 *  updated again until 90 days after it becomes out of date again. The user can
 *  still manually update the app from the Play Store at any time.
 *
 *  Value: "autoUpdatePostponed"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductPolicy_AutoUpdateMode_AutoUpdatePostponed;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_ProductPolicy.tracks

/** Value: "alpha" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductPolicy_Tracks_Alpha;
/** Value: "appTrackUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductPolicy_Tracks_AppTrackUnspecified;
/** Value: "beta" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductPolicy_Tracks_Beta;
/** Value: "production" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductPolicy_Tracks_Production;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_ProductsApproveRequest.approvedPermissions

/**
 *  All current and future permissions the app requires are automatically
 *  approved.
 *
 *  Value: "allPermissions"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductsApproveRequest_ApprovedPermissions_AllPermissions;
/**
 *  Approve only the permissions the product requires at approval time. If an
 *  update requires additional permissions, the app will not be updated on
 *  devices associated with enterprise users until the additional permissions
 *  are approved.
 *
 *  Value: "currentPermissionsOnly"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductsApproveRequest_ApprovedPermissions_CurrentPermissionsOnly;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_ProductSet.productSetBehavior

/**
 *  This product set represents all approved products. For Android app it
 *  represents only "production" track. (The value of the product_id field is
 *  therefore ignored).
 *
 *  Value: "allApproved"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductSet_ProductSetBehavior_AllApproved;
/**
 *  This product set represents all products. For Android app it represents only
 *  "production" track. (The value of the productId field is therefore ignored).
 *
 *  Value: "includeAll"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductSet_ProductSetBehavior_IncludeAll;
/**
 *  This value should never be sent and ignored if received.
 *
 *  Value: "unknown"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductSet_ProductSetBehavior_Unknown;
/**
 *  This product set constitutes a whitelist.
 *
 *  Value: "whitelist"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductSet_ProductSetBehavior_Whitelist;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_ProductVisibility.tracks

/** Value: "alpha" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductVisibility_Tracks_Alpha;
/** Value: "appTrackUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductVisibility_Tracks_AppTrackUnspecified;
/** Value: "beta" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductVisibility_Tracks_Beta;
/** Value: "production" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ProductVisibility_Tracks_Production;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_ServiceAccountKey.type

/**
 *  Google Credentials File format.
 *
 *  Value: "googleCredentials"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ServiceAccountKey_Type_GoogleCredentials;
/**
 *  PKCS12 format. The password for the PKCS12 file is 'notasecret'. For more
 *  information, see https://tools.ietf.org/html/rfc7292. The data for keys of
 *  this type are base64 encoded according to RFC 4648 Section 4. See
 *  http://tools.ietf.org/html/rfc4648#section-4.
 *
 *  Value: "pkcs12"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_ServiceAccountKey_Type_Pkcs12;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_StoreLayout.storeLayoutType

/** Value: "basic" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_StoreLayout_StoreLayoutType_Basic;
/** Value: "custom" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_StoreLayout_StoreLayoutType_Custom;
/** Value: "unknown" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_StoreLayout_StoreLayoutType_Unknown;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_User.accountType

/** Value: "deviceAccount" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_User_AccountType_DeviceAccount;
/** Value: "userAccount" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_User_AccountType_UserAccount;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_User.managementType

/** Value: "emmManaged" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_User_ManagementType_EmmManaged;
/** Value: "googleManaged" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_User_ManagementType_GoogleManaged;

// ----------------------------------------------------------------------------
// GTLRAndroidEnterprise_WebApp.displayMode

/** Value: "displayModeUnspecified" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_WebApp_DisplayMode_DisplayModeUnspecified;
/**
 *  Opens the web app in full screen without any visible controls. The browser
 *  UI elements, page URL, system status bar and back button are not visible,
 *  and the web app takes up the entirety of the available display area.
 *
 *  Value: "fullScreen"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_WebApp_DisplayMode_FullScreen;
/**
 *  Opens the web app with a minimal set of browser UI elements for controlling
 *  navigation and viewing the page URL.
 *
 *  Value: "minimalUi"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_WebApp_DisplayMode_MinimalUi;
/**
 *  Opens the web app to look and feel like a standalone native application. The
 *  browser UI elements and page URL are not visible, however the system status
 *  bar and back button are visible.
 *
 *  Value: "standalone"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidEnterprise_WebApp_DisplayMode_Standalone;

/**
 *  This represents an enterprise admin who can manage the enterprise in the
 *  managed Google Play store.
 */
@interface GTLRAndroidEnterprise_Administrator : GTLRObject

/** The admin's email address. */
@property(nonatomic, copy, nullable) NSString *email;

@end


/**
 *  A token authorizing an admin to access an iframe.
 */
@interface GTLRAndroidEnterprise_AdministratorWebToken : GTLRObject

/**
 *  An opaque token to be passed to the Play front-end to generate an iframe.
 */
@property(nonatomic, copy, nullable) NSString *token;

@end


/**
 *  Specification for a token used to generate iframes. The token specifies what
 *  data the admin is allowed to modify and the URI the iframe is allowed to
 *  communiate with.
 */
@interface GTLRAndroidEnterprise_AdministratorWebTokenSpec : GTLRObject

/** Options for displaying the Managed Configuration page. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_AdministratorWebTokenSpecManagedConfigurations *managedConfigurations;

/**
 *  The URI of the parent frame hosting the iframe. To prevent XSS, the iframe
 *  may not be hosted at other URIs. This URI must be https. Use whitespaces to
 *  separate multiple parent URIs.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Deprecated. Use PlaySearch.approveApps. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permission;

/** Options for displaying the managed Play Search apps page. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_AdministratorWebTokenSpecPlaySearch *playSearch;

/** Options for displaying the Private Apps page. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_AdministratorWebTokenSpecPrivateApps *privateApps;

/** Options for displaying the Organize apps page. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_AdministratorWebTokenSpecStoreBuilder *storeBuilder;

/** Options for displaying the Web Apps page. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_AdministratorWebTokenSpecWebApps *webApps;

/** Options for displaying the Zero Touch page. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_AdministratorWebTokenSpecZeroTouch *zeroTouch;

@end


/**
 *  GTLRAndroidEnterprise_AdministratorWebTokenSpecManagedConfigurations
 */
@interface GTLRAndroidEnterprise_AdministratorWebTokenSpecManagedConfigurations : GTLRObject

/**
 *  Whether the Managed Configuration page is displayed. Default is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  GTLRAndroidEnterprise_AdministratorWebTokenSpecPlaySearch
 */
@interface GTLRAndroidEnterprise_AdministratorWebTokenSpecPlaySearch : GTLRObject

/**
 *  Allow access to the iframe in approve mode. Default is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *approveApps;

/**
 *  Whether the managed Play Search apps page is displayed. Default is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  GTLRAndroidEnterprise_AdministratorWebTokenSpecPrivateApps
 */
@interface GTLRAndroidEnterprise_AdministratorWebTokenSpecPrivateApps : GTLRObject

/**
 *  Whether the Private Apps page is displayed. Default is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  GTLRAndroidEnterprise_AdministratorWebTokenSpecStoreBuilder
 */
@interface GTLRAndroidEnterprise_AdministratorWebTokenSpecStoreBuilder : GTLRObject

/**
 *  Whether the Organize apps page is displayed. Default is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  GTLRAndroidEnterprise_AdministratorWebTokenSpecWebApps
 */
@interface GTLRAndroidEnterprise_AdministratorWebTokenSpecWebApps : GTLRObject

/**
 *  Whether the Web Apps page is displayed. Default is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  GTLRAndroidEnterprise_AdministratorWebTokenSpecZeroTouch
 */
@interface GTLRAndroidEnterprise_AdministratorWebTokenSpecZeroTouch : GTLRObject

/**
 *  Whether zero-touch embedded UI is usable with this token. If enabled, the
 *  admin can link zero-touch customers to this enterprise.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  Represents the list of app restrictions available to be pre-configured for
 *  the product.
 */
@interface GTLRAndroidEnterprise_AppRestrictionsSchema : GTLRObject

/** Deprecated. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The set of restrictions that make up this schema. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_AppRestrictionsSchemaRestriction *> *restrictions;

@end


/**
 *  An event generated when a new app version is uploaded to Google Play and its
 *  app restrictions schema changed. To fetch the app restrictions schema for an
 *  app, use Products.getAppRestrictionsSchema on the EMM API.
 */
@interface GTLRAndroidEnterprise_AppRestrictionsSchemaChangeEvent : GTLRObject

/**
 *  The id of the product (e.g. "app:com.google.android.gm") for which the app
 *  restriction schema changed. This field will always be present.
 */
@property(nonatomic, copy, nullable) NSString *productId;

@end


/**
 *  A restriction in the App Restriction Schema represents a piece of
 *  configuration that may be pre-applied.
 */
@interface GTLRAndroidEnterprise_AppRestrictionsSchemaRestriction : GTLRObject

/**
 *  The default value of the restriction. bundle and bundleArray restrictions
 *  never have a default value.
 */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue *defaultValue;

/**
 *  A longer description of the restriction, giving more detail of what it
 *  affects.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  For choice or multiselect restrictions, the list of possible entries'
 *  human-readable names.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *entry;

/**
 *  For choice or multiselect restrictions, the list of possible entries'
 *  machine-readable values. These values should be used in the configuration,
 *  either as a single string value for a choice restriction or in a stringArray
 *  for a multiselect restriction.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *entryValue;

/**
 *  The unique key that the product uses to identify the restriction, e.g.
 *  "com.google.android.gm.fieldname".
 */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  For bundle or bundleArray restrictions, the list of nested restrictions. A
 *  bundle restriction is always nested within a bundleArray restriction, and a
 *  bundleArray restriction is at most two levels deep.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_AppRestrictionsSchemaRestriction *> *nestedRestriction;

/**
 *  The type of the restriction.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_AppRestrictionsSchemaRestriction_RestrictionType_Bool
 *        A restriction of boolean type. (Value: "bool")
 *    @arg @c kGTLRAndroidEnterprise_AppRestrictionsSchemaRestriction_RestrictionType_Bundle
 *        [M+ devices only] A bundle of restrictions (Value: "bundle")
 *    @arg @c kGTLRAndroidEnterprise_AppRestrictionsSchemaRestriction_RestrictionType_BundleArray
 *        [M+ devices only] An array of restriction bundles (Value:
 *        "bundleArray")
 *    @arg @c kGTLRAndroidEnterprise_AppRestrictionsSchemaRestriction_RestrictionType_Choice
 *        A choice of one item from a set. (Value: "choice")
 *    @arg @c kGTLRAndroidEnterprise_AppRestrictionsSchemaRestriction_RestrictionType_Hidden
 *        A hidden restriction of string type (the default value can be used to
 *        pass along information that cannot be modified, such as a version
 *        code). (Value: "hidden")
 *    @arg @c kGTLRAndroidEnterprise_AppRestrictionsSchemaRestriction_RestrictionType_Integer
 *        A restriction of integer type. (Value: "integer")
 *    @arg @c kGTLRAndroidEnterprise_AppRestrictionsSchemaRestriction_RestrictionType_Multiselect
 *        A choice of multiple items from a set. (Value: "multiselect")
 *    @arg @c kGTLRAndroidEnterprise_AppRestrictionsSchemaRestriction_RestrictionType_String
 *        A restriction of string type. (Value: "string")
 */
@property(nonatomic, copy, nullable) NSString *restrictionType;

/** The name of the restriction. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  A typed value for the restriction.
 */
@interface GTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue : GTLRObject

/**
 *  The type of the value being provided.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue_Type_Bool
 *        A restriction of boolean type. (Value: "bool")
 *    @arg @c kGTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue_Type_Bundle
 *        [M+ devices only] A bundle of restrictions (Value: "bundle")
 *    @arg @c kGTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue_Type_BundleArray
 *        [M+ devices only] An array of restriction bundles (Value:
 *        "bundleArray")
 *    @arg @c kGTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue_Type_Choice
 *        A choice of one item from a set. (Value: "choice")
 *    @arg @c kGTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue_Type_Hidden
 *        A hidden restriction of string type (the default value can be used to
 *        pass along information that cannot be modified, such as a version
 *        code). (Value: "hidden")
 *    @arg @c kGTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue_Type_Integer
 *        A restriction of integer type. (Value: "integer")
 *    @arg @c kGTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue_Type_Multiselect
 *        A choice of multiple items from a set. (Value: "multiselect")
 *    @arg @c kGTLRAndroidEnterprise_AppRestrictionsSchemaRestrictionRestrictionValue_Type_String
 *        A restriction of string type. (Value: "string")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The boolean value - this will only be present if type is bool.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valueBool;

/**
 *  The integer value - this will only be present if type is integer.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valueInteger;

/**
 *  The list of string values - this will only be present if type is
 *  multiselect.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *valueMultiselect;

/**
 *  The string value - this will be present for types string, choice and hidden.
 */
@property(nonatomic, copy, nullable) NSString *valueString;

@end


/**
 *  Information on an approval URL.
 */
@interface GTLRAndroidEnterprise_ApprovalUrlInfo : GTLRObject

/**
 *  A URL that displays a product's permissions and that can also be used to
 *  approve the product with the Products.approve call.
 */
@property(nonatomic, copy, nullable) NSString *approvalUrl;

@end


/**
 *  List of states set by the app.
 */
@interface GTLRAndroidEnterprise_AppState : GTLRObject

/** List of keyed app states. This field will always be present. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_KeyedAppState *> *keyedAppState;

/** The package name of the app. This field will always be present. */
@property(nonatomic, copy, nullable) NSString *packageName;

@end


/**
 *  An event generated when a new version of an app is uploaded to Google Play.
 *  Notifications are sent for new public versions only: alpha, beta, or canary
 *  versions do not generate this event. To fetch up-to-date version history for
 *  an app, use Products.Get on the EMM API.
 */
@interface GTLRAndroidEnterprise_AppUpdateEvent : GTLRObject

/**
 *  The id of the product (e.g. "app:com.google.android.gm") that was updated.
 *  This field will always be present.
 */
@property(nonatomic, copy, nullable) NSString *productId;

@end


/**
 *  This represents a single version of the app.
 */
@interface GTLRAndroidEnterprise_AppVersion : GTLRObject

/**
 *  True if this version is a production APK.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isProduction;

/**
 *  Deprecated, use trackId instead.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_AppVersion_Track_Alpha Value "alpha"
 *    @arg @c kGTLRAndroidEnterprise_AppVersion_Track_AppTrackUnspecified Value
 *        "appTrackUnspecified"
 *    @arg @c kGTLRAndroidEnterprise_AppVersion_Track_Beta Value "beta"
 *    @arg @c kGTLRAndroidEnterprise_AppVersion_Track_Production Value
 *        "production"
 */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Track ids that the app version is published in. Replaces the track field
 *  (deprecated), but doesn't include the production track (see isProduction
 *  instead).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *trackId;

/**
 *  Unique increasing identifier for the app version.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionCode;

/**
 *  The string used in the Play store by the app developer to identify the
 *  version. The string is not necessarily unique or localized (for example, the
 *  string could be "1.4").
 */
@property(nonatomic, copy, nullable) NSString *versionString;

@end


/**
 *  An AuthenticationToken is used by the EMM's device policy client on a device
 *  to provision the given EMM-managed user on that device.
 */
@interface GTLRAndroidEnterprise_AuthenticationToken : GTLRObject

/**
 *  The authentication token to be passed to the device policy client on the
 *  device where it can be used to provision the account for which this token
 *  was generated.
 */
@property(nonatomic, copy, nullable) NSString *token;

@end


/**
 *  The auto-install constraint. Defines a set of restrictions for installation.
 *  At least one of the fields must be set.
 */
@interface GTLRAndroidEnterprise_AutoInstallConstraint : GTLRObject

/**
 *  Charging state constraint.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_AutoInstallConstraint_ChargingStateConstraint_ChargingNotRequired
 *        Device doesn't have to be charging. (Value: "chargingNotRequired")
 *    @arg @c kGTLRAndroidEnterprise_AutoInstallConstraint_ChargingStateConstraint_ChargingRequired
 *        Device has to be charging. (Value: "chargingRequired")
 *    @arg @c kGTLRAndroidEnterprise_AutoInstallConstraint_ChargingStateConstraint_ChargingStateConstraintUnspecified
 *        Value "chargingStateConstraintUnspecified"
 */
@property(nonatomic, copy, nullable) NSString *chargingStateConstraint;

/**
 *  Device idle state constraint.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_AutoInstallConstraint_DeviceIdleStateConstraint_DeviceIdleNotRequired
 *        Device doesn't have to be idle, app can be installed while the user is
 *        interacting with the device. (Value: "deviceIdleNotRequired")
 *    @arg @c kGTLRAndroidEnterprise_AutoInstallConstraint_DeviceIdleStateConstraint_DeviceIdleRequired
 *        Device has to be idle. (Value: "deviceIdleRequired")
 *    @arg @c kGTLRAndroidEnterprise_AutoInstallConstraint_DeviceIdleStateConstraint_DeviceIdleStateConstraintUnspecified
 *        Value "deviceIdleStateConstraintUnspecified"
 */
@property(nonatomic, copy, nullable) NSString *deviceIdleStateConstraint;

/**
 *  Network type constraint.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_AutoInstallConstraint_NetworkTypeConstraint_AnyNetwork
 *        Any active networks (Wi-Fi, cellular, etc.). (Value: "anyNetwork")
 *    @arg @c kGTLRAndroidEnterprise_AutoInstallConstraint_NetworkTypeConstraint_NetworkTypeConstraintUnspecified
 *        Value "networkTypeConstraintUnspecified"
 *    @arg @c kGTLRAndroidEnterprise_AutoInstallConstraint_NetworkTypeConstraint_UnmeteredNetwork
 *        Any unmetered network (e.g. Wi-FI). (Value: "unmeteredNetwork")
 */
@property(nonatomic, copy, nullable) NSString *networkTypeConstraint;

@end


/**
 *  GTLRAndroidEnterprise_AutoInstallPolicy
 */
@interface GTLRAndroidEnterprise_AutoInstallPolicy : GTLRObject

/**
 *  The constraints for auto-installing the app. You can specify a maximum of
 *  one constraint.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_AutoInstallConstraint *> *autoInstallConstraint;

/**
 *  The auto-install mode. If unset defaults to "doNotAutoInstall".
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_AutoInstallPolicy_AutoInstallMode_AutoInstallModeUnspecified
 *        Value "autoInstallModeUnspecified"
 *    @arg @c kGTLRAndroidEnterprise_AutoInstallPolicy_AutoInstallMode_AutoInstallOnce
 *        The product is automatically installed once, if the user uninstalls
 *        the product it will not be installed again. (Value: "autoInstallOnce")
 *    @arg @c kGTLRAndroidEnterprise_AutoInstallPolicy_AutoInstallMode_DoNotAutoInstall
 *        The product is not installed automatically, the user needs to install
 *        it from the Play Store. (Value: "doNotAutoInstall")
 *    @arg @c kGTLRAndroidEnterprise_AutoInstallPolicy_AutoInstallMode_ForceAutoInstall
 *        The product is automatically installed, if the user uninstalls the
 *        product it will be installed again. On managed devices the DPC should
 *        block uninstall. (Value: "forceAutoInstall")
 */
@property(nonatomic, copy, nullable) NSString *autoInstallMode;

/**
 *  The priority of the install, as an unsigned integer. A lower number means
 *  higher priority.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoInstallPriority;

/**
 *  The minimum version of the app. If a lower version of the app is installed,
 *  then the app will be auto-updated according to the auto-install constraints,
 *  instead of waiting for the regular auto-update. You can set a minimum
 *  version code for at most 20 apps per device.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minimumVersionCode;

@end


/**
 *  A configuration variables resource contains the managed configuration
 *  settings ID to be applied to a single user, as well as the variable set that
 *  is attributed to the user. The variable set will be used to replace
 *  placeholders in the managed configuration settings.
 */
@interface GTLRAndroidEnterprise_ConfigurationVariables : GTLRObject

/** The ID of the managed configurations settings. */
@property(nonatomic, copy, nullable) NSString *mcmId;

/** The variable set that is attributed to the user. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_VariableSet *> *variableSet;

@end


/**
 *  A Devices resource represents a mobile device managed by the EMM and
 *  belonging to a specific enterprise user.
 */
@interface GTLRAndroidEnterprise_Device : GTLRObject

/**
 *  The Google Play Services Android ID for the device encoded as a lowercase
 *  hex string. For example, "123456789abcdef0".
 */
@property(nonatomic, copy, nullable) NSString *androidId;

/**
 *  Identifies the extent to which the device is controlled by a managed Google
 *  Play EMM in various deployment configurations. Possible values include: -
 *  "managedDevice", a device that has the EMM's device policy controller (DPC)
 *  as the device owner. - "managedProfile", a device that has a profile managed
 *  by the DPC (DPC is profile owner) in addition to a separate, personal
 *  profile that is unavailable to the DPC. - "containerApp", no longer used
 *  (deprecated). - "unmanagedProfile", a device that has been allowed (by the
 *  domain's admin, using the Admin Console to enable the privilege) to use
 *  managed Google Play, but the profile is itself not owned by a DPC.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_Device_ManagementType_ContainerApp Value
 *        "containerApp"
 *    @arg @c kGTLRAndroidEnterprise_Device_ManagementType_ManagedDevice Value
 *        "managedDevice"
 *    @arg @c kGTLRAndroidEnterprise_Device_ManagementType_ManagedProfile Value
 *        "managedProfile"
 *    @arg @c kGTLRAndroidEnterprise_Device_ManagementType_UnmanagedProfile
 *        Value "unmanagedProfile"
 */
@property(nonatomic, copy, nullable) NSString *managementType;

/** The policy enforced on the device. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_Policy *policy;

/** The device report updated with the latest app states. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_DeviceReport *report;

@end


/**
 *  Device report updated with the latest app states for managed apps on the
 *  device.
 */
@interface GTLRAndroidEnterprise_DeviceReport : GTLRObject

/**
 *  List of app states set by managed apps on the device. App states are defined
 *  by the app's developers. This field will always be present.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_AppState *> *appState;

/**
 *  The timestamp of the last report update in milliseconds since epoch. This
 *  field will always be present.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastUpdatedTimestampMillis;

@end


/**
 *  An event generated when an updated device report is available.
 */
@interface GTLRAndroidEnterprise_DeviceReportUpdateEvent : GTLRObject

/** The Android ID of the device. This field will always be present. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/**
 *  The device report updated with the latest app states. This field will always
 *  be present.
 */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_DeviceReport *report;

/** The ID of the user. This field will always be present. */
@property(nonatomic, copy, nullable) NSString *userId;

@end


/**
 *  GTLRAndroidEnterprise_DevicesListResponse
 */
@interface GTLRAndroidEnterprise_DevicesListResponse : GTLRObject

/** A managed device. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_Device *> *device;

@end


/**
 *  The state of a user's device, as accessed by the getState and setState
 *  methods on device resources.
 */
@interface GTLRAndroidEnterprise_DeviceState : GTLRObject

/**
 *  The state of the Google account on the device. "enabled" indicates that the
 *  Google account on the device can be used to access Google services
 *  (including Google Play), while "disabled" means that it cannot. A new device
 *  is initially in the "disabled" state.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_DeviceState_AccountState_Disabled Value
 *        "disabled"
 *    @arg @c kGTLRAndroidEnterprise_DeviceState_AccountState_Enabled Value
 *        "enabled"
 */
@property(nonatomic, copy, nullable) NSString *accountState;

@end


/**
 *  An Enterprises resource represents the binding between an EMM and a specific
 *  organization. That binding can be instantiated in one of two different ways
 *  using this API as follows: - For Google managed domain customers, the
 *  process involves using Enterprises.enroll and Enterprises.setAccount (in
 *  conjunction with artifacts obtained from the Admin console and the Google
 *  API Console) and submitted to the EMM through a more-or-less manual process.
 *  - For managed Google Play Accounts customers, the process involves using
 *  Enterprises.generateSignupUrl and Enterprises.completeSignup in conjunction
 *  with the managed Google Play sign-up UI (Google-provided mechanism) to
 *  create the binding without manual steps. As an EMM, you can support either
 *  or both approaches in your EMM console. See Create an Enterprise for
 *  details.
 */
@interface GTLRAndroidEnterprise_Enterprise : GTLRObject

/**
 *  Admins of the enterprise. This is only supported for enterprises created via
 *  the EMM-initiated flow.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_Administrator *> *administrator;

/**
 *  The unique ID for the enterprise.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The name of the enterprise, for example, "Example, Inc". */
@property(nonatomic, copy, nullable) NSString *name;

/** The enterprise's primary domain, such as "example.com". */
@property(nonatomic, copy, nullable) NSString *primaryDomain;

@end


/**
 *  A service account that can be used to authenticate as the enterprise to API
 *  calls that require such authentication.
 */
@interface GTLRAndroidEnterprise_EnterpriseAccount : GTLRObject

/** The email address of the service account. */
@property(nonatomic, copy, nullable) NSString *accountEmail;

@end


/**
 *  An authentication URL configuration for the authenticator app of an identity
 *  provider.
 */
@interface GTLRAndroidEnterprise_EnterpriseAuthenticationAppLinkConfig : GTLRObject

/** An authentication url. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  GTLRAndroidEnterprise_EnterprisesListResponse
 */
@interface GTLRAndroidEnterprise_EnterprisesListResponse : GTLRObject

/** An enterprise. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_Enterprise *> *enterprise;

@end


/**
 *  GTLRAndroidEnterprise_EnterprisesSendTestPushNotificationResponse
 */
@interface GTLRAndroidEnterprise_EnterprisesSendTestPushNotificationResponse : GTLRObject

/** The message ID of the test push notification that was sent. */
@property(nonatomic, copy, nullable) NSString *messageId;

/**
 *  The name of the Cloud Pub/Sub topic to which notifications for this
 *  enterprise's enrolled account will be sent.
 */
@property(nonatomic, copy, nullable) NSString *topicName;

@end


/**
 *  The presence of an Entitlements resource indicates that a user has the right
 *  to use a particular app. Entitlements are user specific, not device
 *  specific. This allows a user with an entitlement to an app to install the
 *  app on all their devices. It's also possible for a user to hold an
 *  entitlement to an app without installing the app on any device. The API can
 *  be used to create an entitlement. As an option, you can also use the API to
 *  trigger the installation of an app on all a user's managed devices at the
 *  same time the entitlement is created. If the app is free, creating the
 *  entitlement also creates a group license for that app. For paid apps,
 *  creating the entitlement consumes one license, and that license remains
 *  consumed until the entitlement is removed. If the enterprise hasn't
 *  purchased enough licenses, then no entitlement is created and the
 *  installation fails. An entitlement is also not created for an app if the app
 *  requires permissions that the enterprise hasn't accepted. If an entitlement
 *  is deleted, the app may be uninstalled from a user's device. As a best
 *  practice, uninstall the app by calling Installs.delete() before deleting the
 *  entitlement. Entitlements for apps that a user pays for on an unmanaged
 *  profile have "userPurchase" as the entitlement reason. These entitlements
 *  cannot be removed via the API.
 */
@interface GTLRAndroidEnterprise_Entitlement : GTLRObject

/**
 *  The ID of the product that the entitlement is for. For example,
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  The reason for the entitlement. For example, "free" for free apps. This
 *  property is temporary: it will be replaced by the acquisition kind field of
 *  group licenses.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_Entitlement_Reason_Free Value "free"
 *    @arg @c kGTLRAndroidEnterprise_Entitlement_Reason_GroupLicense Value
 *        "groupLicense"
 *    @arg @c kGTLRAndroidEnterprise_Entitlement_Reason_UserPurchase Value
 *        "userPurchase"
 */
@property(nonatomic, copy, nullable) NSString *reason;

@end


/**
 *  GTLRAndroidEnterprise_EntitlementsListResponse
 */
@interface GTLRAndroidEnterprise_EntitlementsListResponse : GTLRObject

/**
 *  An entitlement of a user to a product (e.g. an app). For example, a free app
 *  that they have installed, or a paid app that they have been allocated a
 *  license to.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_Entitlement *> *entitlement;

@end


/**
 *  Group license objects allow you to keep track of licenses (called
 *  entitlements) for both free and paid apps. For a free app, a group license
 *  is created when an enterprise admin first approves the product in Google
 *  Play or when the first entitlement for the product is created for a user via
 *  the API. For a paid app, a group license object is only created when an
 *  enterprise admin purchases the product in Google Play for the first time.
 *  Use the API to query group licenses. A Grouplicenses resource includes the
 *  total number of licenses purchased (paid apps only) and the total number of
 *  licenses currently in use. In other words, the total number of Entitlements
 *  that exist for the product. Only one group license object is created per
 *  product and group license objects are never deleted. If a product is
 *  unapproved, its group license remains. This allows enterprise admins to keep
 *  track of any remaining entitlements for the product.
 */
@interface GTLRAndroidEnterprise_GroupLicense : GTLRObject

/**
 *  How this group license was acquired. "bulkPurchase" means that this
 *  Grouplicenses resource was created because the enterprise purchased licenses
 *  for this product; otherwise, the value is "free" (for free products).
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_GroupLicense_AcquisitionKind_BulkPurchase
 *        Value "bulkPurchase"
 *    @arg @c kGTLRAndroidEnterprise_GroupLicense_AcquisitionKind_Free Value
 *        "free"
 */
@property(nonatomic, copy, nullable) NSString *acquisitionKind;

/**
 *  Whether the product to which this group license relates is currently
 *  approved by the enterprise. Products are approved when a group license is
 *  first created, but this approval may be revoked by an enterprise admin via
 *  Google Play. Unapproved products will not be visible to end users in
 *  collections, and new entitlements to them should not normally be created.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_GroupLicense_Approval_Approved Value
 *        "approved"
 *    @arg @c kGTLRAndroidEnterprise_GroupLicense_Approval_Unapproved Value
 *        "unapproved"
 */
@property(nonatomic, copy, nullable) NSString *approval;

/**
 *  The total number of provisioned licenses for this product. Returned by read
 *  operations, but ignored in write operations.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numProvisioned;

/**
 *  The number of purchased licenses (possibly in multiple purchases). If this
 *  field is omitted, then there is no limit on the number of licenses that can
 *  be provisioned (for example, if the acquisition kind is "free").
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numPurchased;

/**
 *  The permission approval status of the product. This field is only set if the
 *  product is approved. Possible states are: - "currentApproved", the current
 *  set of permissions is approved, but additional permissions will require the
 *  administrator to reapprove the product (If the product was approved without
 *  specifying the approved permissions setting, then this is the default
 *  behavior.), - "needsReapproval", the product has unapproved permissions. No
 *  additional product licenses can be assigned until the product is reapproved,
 *  - "allCurrentAndFutureApproved", the current permissions are approved and
 *  any future permission updates will be automatically approved without
 *  administrator review.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_GroupLicense_Permissions_AllCurrentAndFutureApproved
 *        Value "allCurrentAndFutureApproved"
 *    @arg @c kGTLRAndroidEnterprise_GroupLicense_Permissions_CurrentApproved
 *        Value "currentApproved"
 *    @arg @c kGTLRAndroidEnterprise_GroupLicense_Permissions_NeedsReapproval
 *        Value "needsReapproval"
 */
@property(nonatomic, copy, nullable) NSString *permissions;

/**
 *  The ID of the product that the license is for. For example,
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *productId;

@end


/**
 *  GTLRAndroidEnterprise_GroupLicensesListResponse
 */
@interface GTLRAndroidEnterprise_GroupLicensesListResponse : GTLRObject

/** A group license for a product approved for use in the enterprise. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_GroupLicense *> *groupLicense;

@end


/**
 *  GTLRAndroidEnterprise_GroupLicenseUsersListResponse
 */
@interface GTLRAndroidEnterprise_GroupLicenseUsersListResponse : GTLRObject

/** A user of an enterprise. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_User *> *user;

@end


/**
 *  The existence of an Installs resource indicates that an app is installed on
 *  a particular device (or that an install is pending). The API can be used to
 *  create an install resource using the update method. This triggers the actual
 *  install of the app on the device. If the user does not already have an
 *  entitlement for the app, then an attempt is made to create one. If this
 *  fails (for example, because the app is not free and there is no available
 *  license), then the creation of the install fails. The API can also be used
 *  to update an installed app. If the update method is used on an existing
 *  install, then the app will be updated to the latest available version. Note
 *  that it is not possible to force the installation of a specific version of
 *  an app: the version code is read-only. If a user installs an app themselves
 *  (as permitted by the enterprise), then again an install resource and
 *  possibly an entitlement resource are automatically created. The API can also
 *  be used to delete an install resource, which triggers the removal of the app
 *  from the device. Note that deleting an install does not automatically remove
 *  the corresponding entitlement, even if there are no remaining installs. The
 *  install resource will also be deleted if the user uninstalls the app
 *  themselves.
 */
@interface GTLRAndroidEnterprise_Install : GTLRObject

/**
 *  Install state. The state "installPending" means that an install request has
 *  recently been made and download to the device is in progress. The state
 *  "installed" means that the app has been installed. This field is read-only.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_Install_InstallState_Installed Value
 *        "installed"
 *    @arg @c kGTLRAndroidEnterprise_Install_InstallState_InstallPending Value
 *        "installPending"
 */
@property(nonatomic, copy, nullable) NSString *installState;

/**
 *  The ID of the product that the install is for. For example,
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  The version of the installed product. Guaranteed to be set only if the
 *  install state is "installed".
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionCode;

@end


/**
 *  An event generated when an app installation failed on a device
 */
@interface GTLRAndroidEnterprise_InstallFailureEvent : GTLRObject

/** The Android ID of the device. This field will always be present. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** Additional details on the failure if applicable. */
@property(nonatomic, copy, nullable) NSString *failureDetails;

/**
 *  The reason for the installation failure. This field will always be present.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_InstallFailureEvent_FailureReason_Timeout
 *        Used when the installation timed out. This can cover a number of
 *        situations, for example when the device did not have connectivity at
 *        any point during the retry period, or if the device is OOM. (Value:
 *        "timeout")
 *    @arg @c kGTLRAndroidEnterprise_InstallFailureEvent_FailureReason_Unknown
 *        Used whenever no better reason for failure can be provided. (Value:
 *        "unknown")
 */
@property(nonatomic, copy, nullable) NSString *failureReason;

/**
 *  The id of the product (e.g. "app:com.google.android.gm") for which the
 *  install failure event occured. This field will always be present.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/** The ID of the user. This field will always be present. */
@property(nonatomic, copy, nullable) NSString *userId;

@end


/**
 *  GTLRAndroidEnterprise_InstallsListResponse
 */
@interface GTLRAndroidEnterprise_InstallsListResponse : GTLRObject

/**
 *  An installation of an app for a user on a specific device. The existence of
 *  an install implies that the user must have an entitlement to the app.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_Install *> *install;

@end


/**
 *  Represents a keyed app state containing a key, timestamp, severity level,
 *  optional description, and optional data.
 */
@interface GTLRAndroidEnterprise_KeyedAppState : GTLRObject

/**
 *  Additional field intended for machine-readable data. For example, a number
 *  or JSON object. To prevent XSS, we recommend removing any HTML from the data
 *  before displaying it.
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  Key indicating what the app is providing a state for. The content of the key
 *  is set by the app's developer. To prevent XSS, we recommend removing any
 *  HTML from the key before displaying it. This field will always be present.
 */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  Free-form, human-readable message describing the app state. For example, an
 *  error message. To prevent XSS, we recommend removing any HTML from the
 *  message before displaying it.
 */
@property(nonatomic, copy, nullable) NSString *message;

/**
 *  Severity of the app state. This field will always be present.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_KeyedAppState_Severity_SeverityError Value
 *        "severityError"
 *    @arg @c kGTLRAndroidEnterprise_KeyedAppState_Severity_SeverityInfo Value
 *        "severityInfo"
 *    @arg @c kGTLRAndroidEnterprise_KeyedAppState_Severity_SeverityUnknown
 *        Value "severityUnknown"
 */
@property(nonatomic, copy, nullable) NSString *severity;

/**
 *  Timestamp of when the app set the state in milliseconds since epoch. This
 *  field will always be present.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *stateTimestampMillis;

@end


/**
 *  A localized string with its locale.
 */
@interface GTLRAndroidEnterprise_LocalizedText : GTLRObject

/** The BCP47 tag for a locale. (e.g. "en-US", "de"). */
@property(nonatomic, copy, nullable) NSString *locale;

/** The text localized in the associated locale. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Maintenance window for managed Google Play Accounts. This allows Play store
 *  to update the apps on the foreground in the designated window.
 */
@interface GTLRAndroidEnterprise_MaintenanceWindow : GTLRObject

/**
 *  Duration of the maintenance window, in milliseconds. The duration must be
 *  between 30 minutes and 24 hours (inclusive).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *durationMs;

/**
 *  Start time of the maintenance window, in milliseconds after midnight on the
 *  device. Windows can span midnight.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startTimeAfterMidnightMs;

@end


/**
 *  A managed configuration resource contains the set of managed properties
 *  defined by the app developer in the app's managed configurations schema, as
 *  well as any configuration variables defined for the user.
 */
@interface GTLRAndroidEnterprise_ManagedConfiguration : GTLRObject

/**
 *  Contains the ID of the managed configuration profile and the set of
 *  configuration variables (if any) defined for the user.
 */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_ConfigurationVariables *configurationVariables;

/** Deprecated. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The set of managed properties for this configuration. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_ManagedProperty *> *managedProperty;

/**
 *  The ID of the product that the managed configuration is for, e.g.
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *productId;

@end


/**
 *  GTLRAndroidEnterprise_ManagedConfigurationsForDeviceListResponse
 */
@interface GTLRAndroidEnterprise_ManagedConfigurationsForDeviceListResponse : GTLRObject

/** A managed configuration for an app on a specific device. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_ManagedConfiguration *> *managedConfigurationForDevice;

@end


/**
 *  GTLRAndroidEnterprise_ManagedConfigurationsForUserListResponse
 */
@interface GTLRAndroidEnterprise_ManagedConfigurationsForUserListResponse : GTLRObject

/** A managed configuration for an app for a specific user. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_ManagedConfiguration *> *managedConfigurationForUser;

@end


/**
 *  A managed configurations settings resource contains the set of managed
 *  properties that have been configured for an Android app to be applied to a
 *  set of users. The app's developer would have defined configurable properties
 *  in the managed configurations schema.
 */
@interface GTLRAndroidEnterprise_ManagedConfigurationsSettings : GTLRObject

/**
 *  The last updated time of the managed configuration settings in milliseconds
 *  since 1970-01-01T00:00:00Z.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastUpdatedTimestampMillis;

/** The ID of the managed configurations settings. */
@property(nonatomic, copy, nullable) NSString *mcmId;

/** The name of the managed configurations settings. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  GTLRAndroidEnterprise_ManagedConfigurationsSettingsListResponse
 */
@interface GTLRAndroidEnterprise_ManagedConfigurationsSettingsListResponse : GTLRObject

/**
 *  A managed configurations settings for an app that may be assigned to a group
 *  of users in an enterprise.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_ManagedConfigurationsSettings *> *managedConfigurationsSettings;

@end


/**
 *  A managed property of a managed configuration. The property must match one
 *  of the properties in the app restrictions schema of the product. Exactly one
 *  of the value fields must be populated, and it must match the property's type
 *  in the app restrictions schema.
 */
@interface GTLRAndroidEnterprise_ManagedProperty : GTLRObject

/** The unique key that identifies the property. */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  The boolean value - this will only be present if type of the property is
 *  bool.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valueBool;

/**
 *  The bundle of managed properties - this will only be present if type of the
 *  property is bundle.
 */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_ManagedPropertyBundle *valueBundle;

/**
 *  The list of bundles of properties - this will only be present if type of the
 *  property is bundle_array.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_ManagedPropertyBundle *> *valueBundleArray;

/**
 *  The integer value - this will only be present if type of the property is
 *  integer.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valueInteger;

/**
 *  The string value - this will only be present if type of the property is
 *  string, choice or hidden.
 */
@property(nonatomic, copy, nullable) NSString *valueString;

/**
 *  The list of string values - this will only be present if type of the
 *  property is multiselect.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *valueStringArray;

@end


/**
 *  A bundle of managed properties.
 */
@interface GTLRAndroidEnterprise_ManagedPropertyBundle : GTLRObject

/** The list of managed properties. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_ManagedProperty *> *managedProperty;

@end


/**
 *  An event generated when a new device is ready to be managed.
 */
@interface GTLRAndroidEnterprise_NewDeviceEvent : GTLRObject

/** The Android ID of the device. This field will always be present. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** Policy app on the device. */
@property(nonatomic, copy, nullable) NSString *dpcPackageName;

/**
 *  Identifies the extent to which the device is controlled by an Android EMM in
 *  various deployment configurations. Possible values include: -
 *  "managedDevice", a device where the DPC is set as device owner, -
 *  "managedProfile", a device where the DPC is set as profile owner.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_NewDeviceEvent_ManagementType_ManagedDevice
 *        Value "managedDevice"
 *    @arg @c kGTLRAndroidEnterprise_NewDeviceEvent_ManagementType_ManagedProfile
 *        Value "managedProfile"
 */
@property(nonatomic, copy, nullable) NSString *managementType;

/** The ID of the user. This field will always be present. */
@property(nonatomic, copy, nullable) NSString *userId;

@end


/**
 *  An event generated when new permissions are added to an app.
 */
@interface GTLRAndroidEnterprise_NewPermissionsEvent : GTLRObject

/**
 *  The set of permissions that the enterprise admin has already approved for
 *  this application. Use Permissions.Get on the EMM API to retrieve details
 *  about these permissions.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *approvedPermissions;

/**
 *  The id of the product (e.g. "app:com.google.android.gm") for which new
 *  permissions were added. This field will always be present.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  The set of permissions that the app is currently requesting. Use
 *  Permissions.Get on the EMM API to retrieve details about these permissions.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestedPermissions;

@end


/**
 *  A notification of one event relating to an enterprise.
 */
@interface GTLRAndroidEnterprise_Notification : GTLRObject

/** Notifications about new app restrictions schema changes. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_AppRestrictionsSchemaChangeEvent *appRestrictionsSchemaChangeEvent;

/** Notifications about app updates. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_AppUpdateEvent *appUpdateEvent;

/** Notifications about device report updates. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_DeviceReportUpdateEvent *deviceReportUpdateEvent;

/**
 *  The ID of the enterprise for which the notification is sent. This will
 *  always be present.
 */
@property(nonatomic, copy, nullable) NSString *enterpriseId;

/** Notifications about an app installation failure. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_InstallFailureEvent *installFailureEvent;

/** Notifications about new devices. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_NewDeviceEvent *newDeviceEvent NS_RETURNS_NOT_RETAINED;

/** Notifications about new app permissions. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_NewPermissionsEvent *newPermissionsEvent NS_RETURNS_NOT_RETAINED;

/**
 *  Type of the notification.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_Notification_NotificationType_AppRestricionsSchemaChange
 *        Notification about new app restrictions schema change. (Value:
 *        "appRestricionsSchemaChange")
 *    @arg @c kGTLRAndroidEnterprise_Notification_NotificationType_AppUpdate
 *        Notification about app update. (Value: "appUpdate")
 *    @arg @c kGTLRAndroidEnterprise_Notification_NotificationType_DeviceReportUpdate
 *        Notification about an updated device report. (Value:
 *        "deviceReportUpdate")
 *    @arg @c kGTLRAndroidEnterprise_Notification_NotificationType_InstallFailure
 *        Notification about an app installation failure. (Value:
 *        "installFailure")
 *    @arg @c kGTLRAndroidEnterprise_Notification_NotificationType_NewDevice
 *        Notification about a new device. (Value: "newDevice")
 *    @arg @c kGTLRAndroidEnterprise_Notification_NotificationType_NewPermissions
 *        Notification about new app permissions. (Value: "newPermissions")
 *    @arg @c kGTLRAndroidEnterprise_Notification_NotificationType_ProductApproval
 *        Notification about change to a product's approval status. (Value:
 *        "productApproval")
 *    @arg @c kGTLRAndroidEnterprise_Notification_NotificationType_ProductAvailabilityChange
 *        Notification about product availability change. (Value:
 *        "productAvailabilityChange")
 *    @arg @c kGTLRAndroidEnterprise_Notification_NotificationType_TestNotification
 *        A test push notification. (Value: "testNotification")
 *    @arg @c kGTLRAndroidEnterprise_Notification_NotificationType_Unknown Value
 *        "unknown"
 */
@property(nonatomic, copy, nullable) NSString *notificationType;

/** Notifications about changes to a product's approval status. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_ProductApprovalEvent *productApprovalEvent;

/** Notifications about product availability changes. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_ProductAvailabilityChangeEvent *productAvailabilityChangeEvent;

/**
 *  The time when the notification was published in milliseconds since
 *  1970-01-01T00:00:00Z. This will always be present.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timestampMillis;

@end


/**
 *  A resource returned by the PullNotificationSet API, which contains a
 *  collection of notifications for enterprises associated with the service
 *  account authenticated for the request.
 */
@interface GTLRAndroidEnterprise_NotificationSet : GTLRObject

/** The notifications received, or empty if no notifications are present. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_Notification *> *notification;

/**
 *  The notification set ID, required to mark the notification as received with
 *  the Enterprises.AcknowledgeNotification API. This will be omitted if no
 *  notifications are present.
 */
@property(nonatomic, copy, nullable) NSString *notificationSetId;

@end


/**
 *  Information about the current page. List operations that supports paging
 *  return only one "page" of results. This protocol buffer message describes
 *  the page that has been returned.
 */
@interface GTLRAndroidEnterprise_PageInfo : GTLRObject

/**
 *  Maximum number of results returned in one page. ! The number of results
 *  included in the API response.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resultPerPage;

/**
 *  Index of the first result returned in the current page.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startIndex;

/**
 *  Total number of results available on the backend ! The total number of
 *  results in the result set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalResults;

@end


/**
 *  A Permissions resource represents some extra capability, to be granted to an
 *  Android app, which requires explicit consent. An enterprise admin must
 *  consent to these permissions on behalf of their users before an entitlement
 *  for the app can be created. The permissions collection is read-only. The
 *  information provided for each permission (localized name and description) is
 *  intended to be used in the MDM user interface when obtaining consent from
 *  the enterprise.
 */
@interface GTLRAndroidEnterprise_Permission : GTLRObject

/**
 *  A longer description of the Permissions resource, giving more details of
 *  what it affects.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The name of the permission. */
@property(nonatomic, copy, nullable) NSString *name;

/** An opaque string uniquely identifying the permission. */
@property(nonatomic, copy, nullable) NSString *permissionId;

@end


/**
 *  The device policy for a given managed device.
 */
@interface GTLRAndroidEnterprise_Policy : GTLRObject

/**
 *  Recommended alternative: autoUpdateMode which is set per app, provides
 *  greater flexibility around update frequency. When autoUpdateMode is set to
 *  AUTO_UPDATE_POSTPONED or AUTO_UPDATE_HIGH_PRIORITY, this field has no
 *  effect. "choiceToTheUser" allows the device's user to configure the app
 *  update policy. "always" enables auto updates. "never" disables auto updates.
 *  "wifiOnly" enables auto updates only when the device is connected to wifi.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_Policy_AutoUpdatePolicy_Always Apps are
 *        auto-updated at any time. Data charges may apply. (Value: "always")
 *    @arg @c kGTLRAndroidEnterprise_Policy_AutoUpdatePolicy_AutoUpdatePolicyUnspecified
 *        The auto update policy is not set. (Value:
 *        "autoUpdatePolicyUnspecified")
 *    @arg @c kGTLRAndroidEnterprise_Policy_AutoUpdatePolicy_ChoiceToTheUser The
 *        user can control auto-updates. (Value: "choiceToTheUser")
 *    @arg @c kGTLRAndroidEnterprise_Policy_AutoUpdatePolicy_Never Apps are
 *        never auto-updated. (Value: "never")
 *    @arg @c kGTLRAndroidEnterprise_Policy_AutoUpdatePolicy_WifiOnly Apps are
 *        auto-updated over WiFi only. (Value: "wifiOnly")
 */
@property(nonatomic, copy, nullable) NSString *autoUpdatePolicy;

/**
 *  Whether the device reports app states to the EMM. The default value is
 *  "deviceReportDisabled".
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_Policy_DeviceReportPolicy_DeviceReportDisabled
 *        Device reports are disabled. (Value: "deviceReportDisabled")
 *    @arg @c kGTLRAndroidEnterprise_Policy_DeviceReportPolicy_DeviceReportEnabled
 *        Device reports are enabled. (Value: "deviceReportEnabled")
 *    @arg @c kGTLRAndroidEnterprise_Policy_DeviceReportPolicy_DeviceReportPolicyUnspecified
 *        The device report policy is not set. (Value:
 *        "deviceReportPolicyUnspecified")
 */
@property(nonatomic, copy, nullable) NSString *deviceReportPolicy;

/**
 *  The maintenance window defining when apps running in the foreground should
 *  be updated.
 */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_MaintenanceWindow *maintenanceWindow;

/**
 *  The availability granted to the device for the specified products. "all"
 *  gives the device access to all products, regardless of approval status.
 *  "all" does not enable automatic visibility of "alpha" or "beta" tracks.
 *  "whitelist" grants the device access the products specified in
 *  productPolicy[]. Only products that are approved or products that were
 *  previously approved (products with revoked approval) by the enterprise can
 *  be whitelisted. If no value is provided, the availability set at the user
 *  level is applied by default.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_Policy_ProductAvailabilityPolicy_All All
 *        products are available except those explicitly marked as unavailable
 *        in the product availability policy. (Value: "all")
 *    @arg @c kGTLRAndroidEnterprise_Policy_ProductAvailabilityPolicy_ProductAvailabilityPolicyUnspecified
 *        Unspecified, applies the user available product set by default.
 *        (Value: "productAvailabilityPolicyUnspecified")
 *    @arg @c kGTLRAndroidEnterprise_Policy_ProductAvailabilityPolicy_Whitelist
 *        The approved products with product availability set to AVAILABLE in
 *        the product policy are available. (Value: "whitelist")
 */
@property(nonatomic, copy, nullable) NSString *productAvailabilityPolicy;

/**
 *  The list of product policies. The productAvailabilityPolicy needs to be set
 *  to WHITELIST or ALL for the product policies to be applied.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_ProductPolicy *> *productPolicy;

@end


/**
 *  A Products resource represents an app in the Google Play store that is
 *  available to at least some users in the enterprise. (Some apps are
 *  restricted to a single enterprise, and no information about them is made
 *  available outside that enterprise.) The information provided for each
 *  product (localized name, icon, link to the full Google Play details page) is
 *  intended to allow a basic representation of the product within an EMM user
 *  interface.
 */
@interface GTLRAndroidEnterprise_Product : GTLRObject

/** The app restriction schema */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_AppRestrictionsSchema *appRestrictionsSchema;

/** The tracks visible to the enterprise. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_TrackInfo *> *appTracks;

/** App versions currently available for this product. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_AppVersion *> *appVersion;

/** The name of the author of the product (for example, the app developer). */
@property(nonatomic, copy, nullable) NSString *authorName;

/** The countries which this app is available in. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *availableCountries;

/** Deprecated, use appTracks instead. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *availableTracks;

/** The app category (e.g. RACING, SOCIAL, etc.) */
@property(nonatomic, copy, nullable) NSString *category;

/**
 *  The content rating for this app.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_Product_ContentRating_All Value "all"
 *    @arg @c kGTLRAndroidEnterprise_Product_ContentRating_Mature Value "mature"
 *    @arg @c kGTLRAndroidEnterprise_Product_ContentRating_PreTeen Value
 *        "preTeen"
 *    @arg @c kGTLRAndroidEnterprise_Product_ContentRating_RatingUnknown Value
 *        "ratingUnknown"
 *    @arg @c kGTLRAndroidEnterprise_Product_ContentRating_Teen Value "teen"
 */
@property(nonatomic, copy, nullable) NSString *contentRating;

/**
 *  The localized promotional description, if available.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** A link to the (consumer) Google Play details page for the product. */
@property(nonatomic, copy, nullable) NSString *detailsUrl;

/**
 *  How and to whom the package is made available. The value publicGoogleHosted
 *  means that the package is available through the Play store and not
 *  restricted to a specific enterprise. The value privateGoogleHosted means
 *  that the package is a private app (restricted to an enterprise) but hosted
 *  by Google. The value privateSelfHosted means that the package is a private
 *  app (restricted to an enterprise) and is privately hosted.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_Product_DistributionChannel_PrivateGoogleHosted
 *        Value "privateGoogleHosted"
 *    @arg @c kGTLRAndroidEnterprise_Product_DistributionChannel_PrivateSelfHosted
 *        Value "privateSelfHosted"
 *    @arg @c kGTLRAndroidEnterprise_Product_DistributionChannel_PublicGoogleHosted
 *        Value "publicGoogleHosted"
 */
@property(nonatomic, copy, nullable) NSString *distributionChannel;

/** Noteworthy features (if any) of this product. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *features;

/**
 *  A link to an image that can be used as an icon for the product. This image
 *  is suitable for use at up to 512px x 512px.
 */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The approximate time (within 7 days) the app was last published, expressed
 *  in milliseconds since epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastUpdatedTimestampMillis;

/**
 *  The minimum Android SDK necessary to run the app.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minAndroidSdkVersion;

/** A list of permissions required by the app. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_ProductPermission *> *permissions;

/**
 *  A string of the form *app:<package name>*. For example,
 *  app:com.google.android.gm represents the Gmail app.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Whether this product is free, free with in-app purchases, or paid. If the
 *  pricing is unknown, this means the product is not generally available
 *  anymore (even though it might still be available to people who own it).
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_Product_ProductPricing_Free The product is
 *        free. (Value: "free")
 *    @arg @c kGTLRAndroidEnterprise_Product_ProductPricing_FreeWithInAppPurchase
 *        The product is free, but offers in-app purchases. (Value:
 *        "freeWithInAppPurchase")
 *    @arg @c kGTLRAndroidEnterprise_Product_ProductPricing_Paid The product is
 *        paid. (Value: "paid")
 *    @arg @c kGTLRAndroidEnterprise_Product_ProductPricing_Unknown Unknown
 *        pricing, used to denote an approved product that is not generally
 *        available. (Value: "unknown")
 */
@property(nonatomic, copy, nullable) NSString *productPricing;

/** A description of the recent changes made to the app. */
@property(nonatomic, copy, nullable) NSString *recentChanges;

/**
 *  Deprecated.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requiresContainerApp;

/** A list of screenshot links representing the app. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *screenshotUrls;

/** The certificate used to sign this product. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_ProductSigningCertificate *signingCertificate;

/**
 *  A link to a smaller image that can be used as an icon for the product. This
 *  image is suitable for use at up to 128px x 128px.
 */
@property(nonatomic, copy, nullable) NSString *smallIconUrl;

/** The name of the product. */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  A link to the managed Google Play details page for the product, for use by
 *  an Enterprise admin.
 */
@property(nonatomic, copy, nullable) NSString *workDetailsUrl;

@end


/**
 *  An event generated when a product's approval status is changed.
 */
@interface GTLRAndroidEnterprise_ProductApprovalEvent : GTLRObject

/**
 *  Whether the product was approved or unapproved. This field will always be
 *  present.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_ProductApprovalEvent_Approved_Approved The
 *        product was approved. (Value: "approved")
 *    @arg @c kGTLRAndroidEnterprise_ProductApprovalEvent_Approved_Unapproved
 *        The product was unapproved. (Value: "unapproved")
 *    @arg @c kGTLRAndroidEnterprise_ProductApprovalEvent_Approved_Unknown
 *        Conveys no information. (Value: "unknown")
 */
@property(nonatomic, copy, nullable) NSString *approved;

/**
 *  The id of the product (e.g. "app:com.google.android.gm") for which the
 *  approval status has changed. This field will always be present.
 */
@property(nonatomic, copy, nullable) NSString *productId;

@end


/**
 *  An event generated whenever a product's availability changes.
 */
@interface GTLRAndroidEnterprise_ProductAvailabilityChangeEvent : GTLRObject

/**
 *  The new state of the product. This field will always be present.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_ProductAvailabilityChangeEvent_AvailabilityStatus_Available
 *        The previously unavailable product is again available on Google Play.
 *        (Value: "available")
 *    @arg @c kGTLRAndroidEnterprise_ProductAvailabilityChangeEvent_AvailabilityStatus_Removed
 *        The product was removed from Google Play. (Value: "removed")
 *    @arg @c kGTLRAndroidEnterprise_ProductAvailabilityChangeEvent_AvailabilityStatus_Unknown
 *        Conveys no information. (Value: "unknown")
 *    @arg @c kGTLRAndroidEnterprise_ProductAvailabilityChangeEvent_AvailabilityStatus_Unpublished
 *        The product was unpublished by the developer. (Value: "unpublished")
 */
@property(nonatomic, copy, nullable) NSString *availabilityStatus;

/**
 *  The id of the product (e.g. "app:com.google.android.gm") for which the
 *  product availability changed. This field will always be present.
 */
@property(nonatomic, copy, nullable) NSString *productId;

@end


/**
 *  A product permissions resource represents the set of permissions required by
 *  a specific app and whether or not they have been accepted by an enterprise
 *  admin. The API can be used to read the set of permissions, and also to
 *  update the set to indicate that permissions have been accepted.
 */
@interface GTLRAndroidEnterprise_ProductPermission : GTLRObject

/** An opaque string uniquely identifying the permission. */
@property(nonatomic, copy, nullable) NSString *permissionId;

/**
 *  Whether the permission has been accepted or not.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_ProductPermission_State_Accepted The
 *        permission has been accepted by the enterprise. (Value: "accepted")
 *    @arg @c kGTLRAndroidEnterprise_ProductPermission_State_Required The
 *        permission is required by the app but has not yet been accepted by the
 *        enterprise. (Value: "required")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Information about the permissions required by a specific app and whether
 *  they have been accepted by the enterprise.
 */
@interface GTLRAndroidEnterprise_ProductPermissions : GTLRObject

/** The permissions required by the app. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_ProductPermission *> *permission;

/**
 *  The ID of the app that the permissions relate to, e.g.
 *  "app:com.google.android.gm".
 */
@property(nonatomic, copy, nullable) NSString *productId;

@end


/**
 *  The policy for a product.
 */
@interface GTLRAndroidEnterprise_ProductPolicy : GTLRObject

/** The auto-install policy for the product. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_AutoInstallPolicy *autoInstallPolicy;

/**
 *  The auto-update mode for the product.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_ProductPolicy_AutoUpdateMode_AutoUpdateDefault
 *        The app is automatically updated with low priority to minimize the
 *        impact on the user. The app is updated when the following constraints
 *        are met: * The device is not actively used * The device is connected
 *        to an unmetered network * The device is charging The device is
 *        notified about a new update within 24 hours after it is published by
 *        the developer, after which the app is updated the next time the
 *        constraints above are met. (Value: "autoUpdateDefault")
 *    @arg @c kGTLRAndroidEnterprise_ProductPolicy_AutoUpdateMode_AutoUpdateHighPriority
 *        The app is updated as soon as possible. No constraints are applied.
 *        The device is notified immediately about a new app update after it is
 *        published by the developer. (Value: "autoUpdateHighPriority")
 *    @arg @c kGTLRAndroidEnterprise_ProductPolicy_AutoUpdateMode_AutoUpdateModeUnspecified
 *        Unspecified. Defaults to AUTO_UPDATE_DEFAULT. (Value:
 *        "autoUpdateModeUnspecified")
 *    @arg @c kGTLRAndroidEnterprise_ProductPolicy_AutoUpdateMode_AutoUpdatePostponed
 *        The app is not automatically updated for a maximum of 90 days after
 *        the app becomes out of date. 90 days after the app becomes out of
 *        date, the latest available version is installed automatically with low
 *        priority (see AUTO_UPDATE_DEFAULT). After the app is updated it is not
 *        automatically updated again until 90 days after it becomes out of date
 *        again. The user can still manually update the app from the Play Store
 *        at any time. (Value: "autoUpdatePostponed")
 */
@property(nonatomic, copy, nullable) NSString *autoUpdateMode;

/**
 *  An authentication URL configuration for the authenticator app of an identity
 *  provider. This helps to launch the identity provider's authenticator app
 *  during the authentication happening in a private app using Android WebView.
 *  Authenticator app should already be the [default
 *  handler](https://developer.android.com/training/app-links/verify-site-associations)
 *  for the authentication url on the device.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_EnterpriseAuthenticationAppLinkConfig *> *enterpriseAuthenticationAppLinkConfigs;

/** The managed configuration for the product. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_ManagedConfiguration *managedConfiguration;

/** The ID of the product. For example, "app:com.google.android.gm". */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Grants the device visibility to the specified product release track(s),
 *  identified by trackIds. The list of release tracks of a product can be
 *  obtained by calling Products.Get.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *trackIds;

/** Deprecated. Use trackIds instead. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tracks;

@end


/**
 *  GTLRAndroidEnterprise_ProductsApproveRequest
 */
@interface GTLRAndroidEnterprise_ProductsApproveRequest : GTLRObject

/**
 *  The approval URL that was shown to the user. Only the permissions shown to
 *  the user with that URL will be accepted, which may not be the product's
 *  entire set of permissions. For example, the URL may only display new
 *  permissions from an update after the product was approved, or not include
 *  new permissions if the product was updated since the URL was generated.
 */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_ApprovalUrlInfo *approvalUrlInfo;

/**
 *  Sets how new permission requests for the product are handled.
 *  "allPermissions" automatically approves all current and future permissions
 *  for the product. "currentPermissionsOnly" approves the current set of
 *  permissions for the product, but any future permissions added through
 *  updates will require manual reapproval. If not specified, only the current
 *  set of permissions will be approved.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_ProductsApproveRequest_ApprovedPermissions_AllPermissions
 *        All current and future permissions the app requires are automatically
 *        approved. (Value: "allPermissions")
 *    @arg @c kGTLRAndroidEnterprise_ProductsApproveRequest_ApprovedPermissions_CurrentPermissionsOnly
 *        Approve only the permissions the product requires at approval time. If
 *        an update requires additional permissions, the app will not be updated
 *        on devices associated with enterprise users until the additional
 *        permissions are approved. (Value: "currentPermissionsOnly")
 */
@property(nonatomic, copy, nullable) NSString *approvedPermissions;

@end


/**
 *  A set of products.
 */
@interface GTLRAndroidEnterprise_ProductSet : GTLRObject

/** The list of product IDs making up the set of products. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *productId;

/**
 *  The interpretation of this product set. "unknown" should never be sent and
 *  is ignored if received. "whitelist" means that the user is entitled to
 *  access the product set. "includeAll" means that all products are accessible,
 *  including products that are approved, products with revoked approval, and
 *  products that have never been approved. "allApproved" means that the user is
 *  entitled to access all products that are approved for the enterprise. If the
 *  value is "allApproved" or "includeAll", the productId field is ignored. If
 *  no value is provided, it is interpreted as "whitelist" for backwards
 *  compatibility. Further "allApproved" or "includeAll" does not enable
 *  automatic visibility of "alpha" or "beta" tracks for Android app. Use
 *  ProductVisibility to enable "alpha" or "beta" tracks per user.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_ProductSet_ProductSetBehavior_AllApproved
 *        This product set represents all approved products. For Android app it
 *        represents only "production" track. (The value of the product_id field
 *        is therefore ignored). (Value: "allApproved")
 *    @arg @c kGTLRAndroidEnterprise_ProductSet_ProductSetBehavior_IncludeAll
 *        This product set represents all products. For Android app it
 *        represents only "production" track. (The value of the productId field
 *        is therefore ignored). (Value: "includeAll")
 *    @arg @c kGTLRAndroidEnterprise_ProductSet_ProductSetBehavior_Unknown This
 *        value should never be sent and ignored if received. (Value: "unknown")
 *    @arg @c kGTLRAndroidEnterprise_ProductSet_ProductSetBehavior_Whitelist
 *        This product set constitutes a whitelist. (Value: "whitelist")
 */
@property(nonatomic, copy, nullable) NSString *productSetBehavior;

/**
 *  Additional list of product IDs making up the product set. Unlike the
 *  productID array, in this list It's possible to specify which tracks (alpha,
 *  beta, production) of a product are visible to the user. See
 *  ProductVisibility and its fields for more information. Specifying the same
 *  product ID both here and in the productId array is not allowed and it will
 *  result in an error.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_ProductVisibility *> *productVisibility;

@end


/**
 *  GTLRAndroidEnterprise_ProductsGenerateApprovalUrlResponse
 */
@interface GTLRAndroidEnterprise_ProductsGenerateApprovalUrlResponse : GTLRObject

/**
 *  A URL that can be rendered in an iframe to display the permissions (if any)
 *  of a product. This URL can be used to approve the product only once and only
 *  within 24 hours of being generated, using the Products.approve call. If the
 *  product is currently unapproved and has no permissions, this URL will point
 *  to an empty page. If the product is currently approved, a URL will only be
 *  generated if that product has added permissions since it was last approved,
 *  and the URL will only display those new permissions that have not yet been
 *  accepted.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  GTLRAndroidEnterprise_ProductSigningCertificate
 */
@interface GTLRAndroidEnterprise_ProductSigningCertificate : GTLRObject

/**
 *  The base64 urlsafe encoded SHA1 hash of the certificate. (This field is
 *  deprecated in favor of SHA2-256. It should not be used and may be removed at
 *  any time.)
 */
@property(nonatomic, copy, nullable) NSString *certificateHashSha1;

/** The base64 urlsafe encoded SHA2-256 hash of the certificate. */
@property(nonatomic, copy, nullable) NSString *certificateHashSha256;

@end


/**
 *  GTLRAndroidEnterprise_ProductsListResponse
 */
@interface GTLRAndroidEnterprise_ProductsListResponse : GTLRObject

/** General pagination information. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_PageInfo *pageInfo;

/**
 *  Information about a product (e.g. an app) in the Google Play store, for
 *  display to an enterprise admin.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_Product *> *product;

/** Pagination information for token pagination. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_TokenPagination *tokenPagination;

@end


/**
 *  A product to be made visible to a user.
 */
@interface GTLRAndroidEnterprise_ProductVisibility : GTLRObject

/**
 *  The product ID to make visible to the user. Required for each item in the
 *  productVisibility list.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Grants the user visibility to the specified product track(s), identified by
 *  trackIds.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *trackIds;

/** Deprecated. Use trackIds instead. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tracks;

@end


/**
 *  A service account identity, including the name and credentials that can be
 *  used to authenticate as the service account.
 */
@interface GTLRAndroidEnterprise_ServiceAccount : GTLRObject

/** Credentials that can be used to authenticate as this ServiceAccount. */
@property(nonatomic, strong, nullable) GTLRAndroidEnterprise_ServiceAccountKey *key;

/**
 *  The account name of the service account, in the form of an email address.
 *  Assigned by the server.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Credentials that can be used to authenticate as a service account.
 */
@interface GTLRAndroidEnterprise_ServiceAccountKey : GTLRObject

/**
 *  The body of the private key credentials file, in string format. This is only
 *  populated when the ServiceAccountKey is created, and is not stored by
 *  Google.
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  An opaque, unique identifier for this ServiceAccountKey. Assigned by the
 *  server.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Public key data for the credentials file. This is an X.509 cert. If you are
 *  using the googleCredentials key type, this is identical to the cert that can
 *  be retrieved by using the X.509 cert url inside of the credentials file.
 */
@property(nonatomic, copy, nullable) NSString *publicData;

/**
 *  The file format of the generated key data.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_ServiceAccountKey_Type_GoogleCredentials
 *        Google Credentials File format. (Value: "googleCredentials")
 *    @arg @c kGTLRAndroidEnterprise_ServiceAccountKey_Type_Pkcs12 PKCS12
 *        format. The password for the PKCS12 file is 'notasecret'. For more
 *        information, see https://tools.ietf.org/html/rfc7292. The data for
 *        keys of this type are base64 encoded according to RFC 4648 Section 4.
 *        See http://tools.ietf.org/html/rfc4648#section-4. (Value: "pkcs12")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRAndroidEnterprise_ServiceAccountKeysListResponse
 */
@interface GTLRAndroidEnterprise_ServiceAccountKeysListResponse : GTLRObject

/** The service account credentials. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_ServiceAccountKey *> *serviceAccountKey;

@end


/**
 *  A resource returned by the GenerateSignupUrl API, which contains the Signup
 *  URL and Completion Token.
 */
@interface GTLRAndroidEnterprise_SignupInfo : GTLRObject

/**
 *  An opaque token that will be required, along with the Enterprise Token, for
 *  obtaining the enterprise resource from CompleteSignup.
 */
@property(nonatomic, copy, nullable) NSString *completionToken;

/** Deprecated. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  A URL under which the Admin can sign up for an enterprise. The page pointed
 *  to cannot be rendered in an iframe.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Definition of a managed Google Play store cluster, a list of products
 *  displayed as part of a store page.
 */
@interface GTLRAndroidEnterprise_StoreCluster : GTLRObject

/**
 *  Unique ID of this cluster. Assigned by the server. Immutable once assigned.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Ordered list of localized strings giving the name of this page. The text
 *  displayed is the one that best matches the user locale, or the first entry
 *  if there is no good match. There needs to be at least one entry.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_LocalizedText *> *name;

/**
 *  String (US-ASCII only) used to determine order of this cluster within the
 *  parent page's elements. Page elements are sorted in lexicographic order of
 *  this field. Duplicated values are allowed, but ordering between elements
 *  with duplicate order is undefined. The value of this field is never visible
 *  to a user, it is used solely for the purpose of defining an ordering.
 *  Maximum length is 256 characters.
 */
@property(nonatomic, copy, nullable) NSString *orderInPage;

/**
 *  List of products in the order they are displayed in the cluster. There
 *  should not be duplicates within a cluster.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *productId;

@end


/**
 *  General setting for the managed Google Play store layout, currently only
 *  specifying the page to display the first time the store is opened.
 */
@interface GTLRAndroidEnterprise_StoreLayout : GTLRObject

/**
 *  The ID of the store page to be used as the homepage. The homepage is the
 *  first page shown in the managed Google Play Store. Not specifying a homepage
 *  is equivalent to setting the store layout type to "basic".
 */
@property(nonatomic, copy, nullable) NSString *homepageId;

/**
 *  The store layout type. By default, this value is set to "basic" if the
 *  homepageId field is not set, and to "custom" otherwise. If set to "basic",
 *  the layout will consist of all approved apps that have been whitelisted for
 *  the user.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_StoreLayout_StoreLayoutType_Basic Value
 *        "basic"
 *    @arg @c kGTLRAndroidEnterprise_StoreLayout_StoreLayoutType_Custom Value
 *        "custom"
 *    @arg @c kGTLRAndroidEnterprise_StoreLayout_StoreLayoutType_Unknown Value
 *        "unknown"
 */
@property(nonatomic, copy, nullable) NSString *storeLayoutType;

@end


/**
 *  GTLRAndroidEnterprise_StoreLayoutClustersListResponse
 */
@interface GTLRAndroidEnterprise_StoreLayoutClustersListResponse : GTLRObject

/** A store cluster of an enterprise. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_StoreCluster *> *cluster;

@end


/**
 *  GTLRAndroidEnterprise_StoreLayoutPagesListResponse
 */
@interface GTLRAndroidEnterprise_StoreLayoutPagesListResponse : GTLRObject

/** A store page of an enterprise. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_StorePage *> *page;

@end


/**
 *  Definition of a managed Google Play store page, made of a localized name and
 *  links to other pages. A page also contains clusters defined as a
 *  subcollection.
 */
@interface GTLRAndroidEnterprise_StorePage : GTLRObject

/**
 *  Unique ID of this page. Assigned by the server. Immutable once assigned.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Ordered list of pages a user should be able to reach from this page. The
 *  list can't include this page. It is recommended that the basic pages are
 *  created first, before adding the links between pages. The API doesn't verify
 *  that the pages exist or the pages are reachable.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *link;

/**
 *  Ordered list of localized strings giving the name of this page. The text
 *  displayed is the one that best matches the user locale, or the first entry
 *  if there is no good match. There needs to be at least one entry.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_LocalizedText *> *name;

@end


/**
 *  Pagination information returned by a List operation when token pagination is
 *  enabled. List operations that supports paging return only one "page" of
 *  results. This protocol buffer message describes the page that has been
 *  returned. When using token pagination, clients should use the next/previous
 *  token to get another page of the result. The presence or absence of
 *  next/previous token indicates whether a next/previous page is available and
 *  provides a mean of accessing this page. ListRequest.page_token should be set
 *  to either next_page_token or previous_page_token to access another page.
 */
@interface GTLRAndroidEnterprise_TokenPagination : GTLRObject

/**
 *  Tokens to pass to the standard list field 'page_token'. Whenever available,
 *  tokens are preferred over manipulating start_index.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, copy, nullable) NSString *previousPageToken;

@end


/**
 *  Id to name association of a track.
 */
@interface GTLRAndroidEnterprise_TrackInfo : GTLRObject

/**
 *  A modifiable name for a track. This is the visible name in the play
 *  developer console.
 */
@property(nonatomic, copy, nullable) NSString *trackAlias;

/**
 *  Unmodifiable, unique track identifier. This identifier is the releaseTrackId
 *  in the url of the play developer console page that displays the track
 *  information.
 */
@property(nonatomic, copy, nullable) NSString *trackId;

@end


/**
 *  A Users resource represents an account associated with an enterprise. The
 *  account may be specific to a device or to an individual user (who can then
 *  use the account across multiple devices). The account may provide access to
 *  managed Google Play only, or to other Google services, depending on the
 *  identity model: - The Google managed domain identity model requires
 *  synchronization to Google account sources (via primaryEmail). - The managed
 *  Google Play Accounts identity model provides a dynamic means for enterprises
 *  to create user or device accounts as needed. These accounts provide access
 *  to managed Google Play.
 */
@interface GTLRAndroidEnterprise_User : GTLRObject

/**
 *  A unique identifier you create for this user, such as "user342" or
 *  "asset#44418". Do not use personally identifiable information (PII) for this
 *  property. Must always be set for EMM-managed users. Not set for
 *  Google-managed users.
 */
@property(nonatomic, copy, nullable) NSString *accountIdentifier;

/**
 *  The type of account that this user represents. A userAccount can be
 *  installed on multiple devices, but a deviceAccount is specific to a single
 *  device. An EMM-managed user (emmManaged) can be either type (userAccount,
 *  deviceAccount), but a Google-managed user (googleManaged) is always a
 *  userAccount.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_User_AccountType_DeviceAccount Value
 *        "deviceAccount"
 *    @arg @c kGTLRAndroidEnterprise_User_AccountType_UserAccount Value
 *        "userAccount"
 */
@property(nonatomic, copy, nullable) NSString *accountType;

/**
 *  The name that will appear in user interfaces. Setting this property is
 *  optional when creating EMM-managed users. If you do set this property, use
 *  something generic about the organization (such as "Example, Inc.") or your
 *  name (as EMM). Not used for Google-managed user accounts. \@mutable
 *  androidenterprise.users.update
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The unique ID for the user.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The entity that manages the user. With googleManaged users, the source of
 *  truth is Google so EMMs have to make sure a Google Account exists for the
 *  user. With emmManaged users, the EMM is in charge.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_User_ManagementType_EmmManaged Value
 *        "emmManaged"
 *    @arg @c kGTLRAndroidEnterprise_User_ManagementType_GoogleManaged Value
 *        "googleManaged"
 */
@property(nonatomic, copy, nullable) NSString *managementType;

/**
 *  The user's primary email address, for example, "jsmith\@example.com". Will
 *  always be set for Google managed users and not set for EMM managed users.
 */
@property(nonatomic, copy, nullable) NSString *primaryEmail;

@end


/**
 *  GTLRAndroidEnterprise_UsersListResponse
 */
@interface GTLRAndroidEnterprise_UsersListResponse : GTLRObject

/** A user of an enterprise. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_User *> *user;

@end


/**
 *  A variable set is a key-value pair of EMM-provided placeholders and its
 *  corresponding value, which is attributed to a user. For example, $FIRSTNAME
 *  could be a placeholder, and its value could be Alice. Placeholders should
 *  start with a '$' sign and should be alphanumeric only.
 */
@interface GTLRAndroidEnterprise_VariableSet : GTLRObject

/** The placeholder string; defined by EMM. */
@property(nonatomic, copy, nullable) NSString *placeholder;

/** The value of the placeholder, specific to the user. */
@property(nonatomic, copy, nullable) NSString *userValue;

@end


/**
 *  A WebApps resource represents a web app created for an enterprise. Web apps
 *  are published to managed Google Play and can be distributed like other
 *  Android apps. On a user's device, a web app opens its specified URL.
 */
@interface GTLRAndroidEnterprise_WebApp : GTLRObject

/**
 *  The display mode of the web app. Possible values include: - "minimalUi", the
 *  device's status bar, navigation bar, the app's URL, and a refresh button are
 *  visible when the app is open. For HTTP URLs, you can only select this
 *  option. - "standalone", the device's status bar and navigation bar are
 *  visible when the app is open. - "fullScreen", the app opens in full screen
 *  mode, hiding the device's status and navigation bars. All browser UI
 *  elements, page URL, system status bar and back button are not visible, and
 *  the web app takes up the entirety of the available display area.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidEnterprise_WebApp_DisplayMode_DisplayModeUnspecified
 *        Value "displayModeUnspecified"
 *    @arg @c kGTLRAndroidEnterprise_WebApp_DisplayMode_FullScreen Opens the web
 *        app in full screen without any visible controls. The browser UI
 *        elements, page URL, system status bar and back button are not visible,
 *        and the web app takes up the entirety of the available display area.
 *        (Value: "fullScreen")
 *    @arg @c kGTLRAndroidEnterprise_WebApp_DisplayMode_MinimalUi Opens the web
 *        app with a minimal set of browser UI elements for controlling
 *        navigation and viewing the page URL. (Value: "minimalUi")
 *    @arg @c kGTLRAndroidEnterprise_WebApp_DisplayMode_Standalone Opens the web
 *        app to look and feel like a standalone native application. The browser
 *        UI elements and page URL are not visible, however the system status
 *        bar and back button are visible. (Value: "standalone")
 */
@property(nonatomic, copy, nullable) NSString *displayMode;

/**
 *  A list of icons representing this website. If absent, a default icon (for
 *  create) or the current icon (for update) will be used.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_WebAppIcon *> *icons;

/**
 *  A flag whether the app has been published to the Play store yet.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isPublished;

/**
 *  The start URL, i.e. the URL that should load when the user opens the
 *  application.
 */
@property(nonatomic, copy, nullable) NSString *startUrl;

/**
 *  The title of the web app as displayed to the user (e.g., amongst a list of
 *  other applications, or as a label for an icon).
 */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  The current version of the app. Note that the version can automatically
 *  increase during the lifetime of the web app, while Google does internal
 *  housekeeping to keep the web app up-to-date.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionCode;

/**
 *  The ID of the application. A string of the form "app:<package name>" where
 *  the package name always starts with the prefix
 *  "com.google.enterprise.webapp." followed by a random id.
 */
@property(nonatomic, copy, nullable) NSString *webAppId;

@end


/**
 *  Icon for a web app.
 */
@interface GTLRAndroidEnterprise_WebAppIcon : GTLRObject

/**
 *  The actual bytes of the image in a base64url encoded string (c.f. RFC4648,
 *  section 5 "Base 64 Encoding with URL and Filename Safe Alphabet"). - The
 *  image type can be png or jpg. - The image should ideally be square. - The
 *  image should ideally have a size of 512x512.
 */
@property(nonatomic, copy, nullable) NSString *imageData;

@end


/**
 *  GTLRAndroidEnterprise_WebAppsListResponse
 */
@interface GTLRAndroidEnterprise_WebAppsListResponse : GTLRObject

/** The manifest describing a web app. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidEnterprise_WebApp *> *webApp;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
