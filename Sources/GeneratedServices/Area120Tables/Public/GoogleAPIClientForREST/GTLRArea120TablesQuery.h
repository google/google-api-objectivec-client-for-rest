// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Area120 Tables API (area120tables/v1alpha1)
// Documentation:
//   https://support.google.com/area120-tables/answer/10011390

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRArea120TablesObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// view

/**
 *  Uses internally generated column id to identify values.
 *
 *  Value: "COLUMN_ID_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRArea120TablesViewColumnIdView;
/**
 *  Defaults to user entered text.
 *
 *  Value: "VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRArea120TablesViewViewUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Area120 Tables query classes.
 */
@interface GTLRArea120TablesQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets a table. Returns NOT_FOUND if the table does not exist.
 *
 *  Method: area120tables.tables.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeArea120TablesDrive
 *    @c kGTLRAuthScopeArea120TablesDriveFile
 *    @c kGTLRAuthScopeArea120TablesDriveReadonly
 *    @c kGTLRAuthScopeArea120TablesSpreadsheets
 *    @c kGTLRAuthScopeArea120TablesSpreadsheetsReadonly
 *    @c kGTLRAuthScopeArea120TablesTables
 */
@interface GTLRArea120TablesQuery_TablesGet : GTLRArea120TablesQuery

/** Required. The name of the table to retrieve. Format: tables/{table} */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRArea120Tables_Table.
 *
 *  Gets a table. Returns NOT_FOUND if the table does not exist.
 *
 *  @param name Required. The name of the table to retrieve. Format:
 *    tables/{table}
 *
 *  @return GTLRArea120TablesQuery_TablesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists tables for the user.
 *
 *  Method: area120tables.tables.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeArea120TablesDrive
 *    @c kGTLRAuthScopeArea120TablesDriveFile
 *    @c kGTLRAuthScopeArea120TablesDriveReadonly
 *    @c kGTLRAuthScopeArea120TablesSpreadsheets
 *    @c kGTLRAuthScopeArea120TablesSpreadsheetsReadonly
 *    @c kGTLRAuthScopeArea120TablesTables
 */
@interface GTLRArea120TablesQuery_TablesList : GTLRArea120TablesQuery

/**
 *  Optional. Sorting order for the list of tables on createTime/updateTime.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of tables to return. The service may return fewer than
 *  this value. If unspecified, at most 20 tables are returned. The maximum
 *  value is 100; values above 100 are coerced to 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListTables` call. Provide this to
 *  retrieve the subsequent page. When paginating, all other parameters provided
 *  to `ListTables` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRArea120Tables_ListTablesResponse.
 *
 *  Lists tables for the user.
 *
 *  @return GTLRArea120TablesQuery_TablesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Creates multiple rows.
 *
 *  Method: area120tables.tables.rows.batchCreate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeArea120TablesDrive
 *    @c kGTLRAuthScopeArea120TablesDriveFile
 *    @c kGTLRAuthScopeArea120TablesSpreadsheets
 *    @c kGTLRAuthScopeArea120TablesTables
 */
@interface GTLRArea120TablesQuery_TablesRowsBatchCreate : GTLRArea120TablesQuery

/**
 *  Required. The parent table where the rows will be created. Format:
 *  tables/{table}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRArea120Tables_BatchCreateRowsResponse.
 *
 *  Creates multiple rows.
 *
 *  @param object The @c GTLRArea120Tables_BatchCreateRowsRequest to include in
 *    the query.
 *  @param parent Required. The parent table where the rows will be created.
 *    Format: tables/{table}
 *
 *  @return GTLRArea120TablesQuery_TablesRowsBatchCreate
 */
+ (instancetype)queryWithObject:(GTLRArea120Tables_BatchCreateRowsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes multiple rows.
 *
 *  Method: area120tables.tables.rows.batchDelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeArea120TablesDrive
 *    @c kGTLRAuthScopeArea120TablesDriveFile
 *    @c kGTLRAuthScopeArea120TablesSpreadsheets
 *    @c kGTLRAuthScopeArea120TablesTables
 */
@interface GTLRArea120TablesQuery_TablesRowsBatchDelete : GTLRArea120TablesQuery

/**
 *  Required. The parent table shared by all rows being deleted. Format:
 *  tables/{table}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRArea120Tables_Empty.
 *
 *  Deletes multiple rows.
 *
 *  @param object The @c GTLRArea120Tables_BatchDeleteRowsRequest to include in
 *    the query.
 *  @param parent Required. The parent table shared by all rows being deleted.
 *    Format: tables/{table}
 *
 *  @return GTLRArea120TablesQuery_TablesRowsBatchDelete
 */
+ (instancetype)queryWithObject:(GTLRArea120Tables_BatchDeleteRowsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Updates multiple rows.
 *
 *  Method: area120tables.tables.rows.batchUpdate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeArea120TablesDrive
 *    @c kGTLRAuthScopeArea120TablesDriveFile
 *    @c kGTLRAuthScopeArea120TablesSpreadsheets
 *    @c kGTLRAuthScopeArea120TablesTables
 */
@interface GTLRArea120TablesQuery_TablesRowsBatchUpdate : GTLRArea120TablesQuery

/**
 *  Required. The parent table shared by all rows being updated. Format:
 *  tables/{table}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRArea120Tables_BatchUpdateRowsResponse.
 *
 *  Updates multiple rows.
 *
 *  @param object The @c GTLRArea120Tables_BatchUpdateRowsRequest to include in
 *    the query.
 *  @param parent Required. The parent table shared by all rows being updated.
 *    Format: tables/{table}
 *
 *  @return GTLRArea120TablesQuery_TablesRowsBatchUpdate
 */
+ (instancetype)queryWithObject:(GTLRArea120Tables_BatchUpdateRowsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a row.
 *
 *  Method: area120tables.tables.rows.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeArea120TablesDrive
 *    @c kGTLRAuthScopeArea120TablesDriveFile
 *    @c kGTLRAuthScopeArea120TablesSpreadsheets
 *    @c kGTLRAuthScopeArea120TablesTables
 */
@interface GTLRArea120TablesQuery_TablesRowsCreate : GTLRArea120TablesQuery

/**
 *  Required. The parent table where this row will be created. Format:
 *  tables/{table}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. Column key to use for values in the row. Defaults to user entered
 *  name.
 *
 *  Likely values:
 *    @arg @c kGTLRArea120TablesViewViewUnspecified Defaults to user entered
 *        text. (Value: "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRArea120TablesViewColumnIdView Uses internally generated
 *        column id to identify values. (Value: "COLUMN_ID_VIEW")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRArea120Tables_Row.
 *
 *  Creates a row.
 *
 *  @param object The @c GTLRArea120Tables_Row to include in the query.
 *  @param parent Required. The parent table where this row will be created.
 *    Format: tables/{table}
 *
 *  @return GTLRArea120TablesQuery_TablesRowsCreate
 */
+ (instancetype)queryWithObject:(GTLRArea120Tables_Row *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a row.
 *
 *  Method: area120tables.tables.rows.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeArea120TablesDrive
 *    @c kGTLRAuthScopeArea120TablesDriveFile
 *    @c kGTLRAuthScopeArea120TablesSpreadsheets
 *    @c kGTLRAuthScopeArea120TablesTables
 */
@interface GTLRArea120TablesQuery_TablesRowsDelete : GTLRArea120TablesQuery

/**
 *  Required. The name of the row to delete. Format: tables/{table}/rows/{row}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRArea120Tables_Empty.
 *
 *  Deletes a row.
 *
 *  @param name Required. The name of the row to delete. Format:
 *    tables/{table}/rows/{row}
 *
 *  @return GTLRArea120TablesQuery_TablesRowsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a row. Returns NOT_FOUND if the row does not exist in the table.
 *
 *  Method: area120tables.tables.rows.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeArea120TablesDrive
 *    @c kGTLRAuthScopeArea120TablesDriveFile
 *    @c kGTLRAuthScopeArea120TablesDriveReadonly
 *    @c kGTLRAuthScopeArea120TablesSpreadsheets
 *    @c kGTLRAuthScopeArea120TablesSpreadsheetsReadonly
 *    @c kGTLRAuthScopeArea120TablesTables
 */
@interface GTLRArea120TablesQuery_TablesRowsGet : GTLRArea120TablesQuery

/**
 *  Required. The name of the row to retrieve. Format: tables/{table}/rows/{row}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Column key to use for values in the row. Defaults to user entered
 *  name.
 *
 *  Likely values:
 *    @arg @c kGTLRArea120TablesViewViewUnspecified Defaults to user entered
 *        text. (Value: "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRArea120TablesViewColumnIdView Uses internally generated
 *        column id to identify values. (Value: "COLUMN_ID_VIEW")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRArea120Tables_Row.
 *
 *  Gets a row. Returns NOT_FOUND if the row does not exist in the table.
 *
 *  @param name Required. The name of the row to retrieve. Format:
 *    tables/{table}/rows/{row}
 *
 *  @return GTLRArea120TablesQuery_TablesRowsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists rows in a table. Returns NOT_FOUND if the table does not exist.
 *
 *  Method: area120tables.tables.rows.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeArea120TablesDrive
 *    @c kGTLRAuthScopeArea120TablesDriveFile
 *    @c kGTLRAuthScopeArea120TablesDriveReadonly
 *    @c kGTLRAuthScopeArea120TablesSpreadsheets
 *    @c kGTLRAuthScopeArea120TablesSpreadsheetsReadonly
 *    @c kGTLRAuthScopeArea120TablesTables
 */
@interface GTLRArea120TablesQuery_TablesRowsList : GTLRArea120TablesQuery

/**
 *  Optional. Filter to only include resources matching the requirements. For
 *  more information, see [Filtering list
 *  results](https://support.google.com/area120-tables/answer/10503371).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Sorting order for the list of rows on createTime/updateTime. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of rows to return. The service may return fewer than this
 *  value. If unspecified, at most 50 rows are returned. The maximum value is
 *  1,000; values above 1,000 are coerced to 1,000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListRows` call. Provide this to
 *  retrieve the subsequent page. When paginating, all other parameters provided
 *  to `ListRows` must match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The parent table. Format: tables/{table} */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. Column key to use for values in the row. Defaults to user entered
 *  name.
 *
 *  Likely values:
 *    @arg @c kGTLRArea120TablesViewViewUnspecified Defaults to user entered
 *        text. (Value: "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRArea120TablesViewColumnIdView Uses internally generated
 *        column id to identify values. (Value: "COLUMN_ID_VIEW")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRArea120Tables_ListRowsResponse.
 *
 *  Lists rows in a table. Returns NOT_FOUND if the table does not exist.
 *
 *  @param parent Required. The parent table. Format: tables/{table}
 *
 *  @return GTLRArea120TablesQuery_TablesRowsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a row.
 *
 *  Method: area120tables.tables.rows.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeArea120TablesDrive
 *    @c kGTLRAuthScopeArea120TablesDriveFile
 *    @c kGTLRAuthScopeArea120TablesSpreadsheets
 *    @c kGTLRAuthScopeArea120TablesTables
 */
@interface GTLRArea120TablesQuery_TablesRowsPatch : GTLRArea120TablesQuery

/**
 *  The resource name of the row. Row names have the form
 *  `tables/{table}/rows/{row}`. The name is ignored when creating a row.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Optional. Column key to use for values in the row. Defaults to user entered
 *  name.
 *
 *  Likely values:
 *    @arg @c kGTLRArea120TablesViewViewUnspecified Defaults to user entered
 *        text. (Value: "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRArea120TablesViewColumnIdView Uses internally generated
 *        column id to identify values. (Value: "COLUMN_ID_VIEW")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRArea120Tables_Row.
 *
 *  Updates a row.
 *
 *  @param object The @c GTLRArea120Tables_Row to include in the query.
 *  @param name The resource name of the row. Row names have the form
 *    `tables/{table}/rows/{row}`. The name is ignored when creating a row.
 *
 *  @return GTLRArea120TablesQuery_TablesRowsPatch
 */
+ (instancetype)queryWithObject:(GTLRArea120Tables_Row *)object
                           name:(NSString *)name;

@end

/**
 *  Gets a workspace. Returns NOT_FOUND if the workspace does not exist.
 *
 *  Method: area120tables.workspaces.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeArea120TablesDrive
 *    @c kGTLRAuthScopeArea120TablesDriveFile
 *    @c kGTLRAuthScopeArea120TablesDriveReadonly
 *    @c kGTLRAuthScopeArea120TablesSpreadsheets
 *    @c kGTLRAuthScopeArea120TablesSpreadsheetsReadonly
 *    @c kGTLRAuthScopeArea120TablesTables
 */
@interface GTLRArea120TablesQuery_WorkspacesGet : GTLRArea120TablesQuery

/**
 *  Required. The name of the workspace to retrieve. Format:
 *  workspaces/{workspace}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRArea120Tables_Workspace.
 *
 *  Gets a workspace. Returns NOT_FOUND if the workspace does not exist.
 *
 *  @param name Required. The name of the workspace to retrieve. Format:
 *    workspaces/{workspace}
 *
 *  @return GTLRArea120TablesQuery_WorkspacesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists workspaces for the user.
 *
 *  Method: area120tables.workspaces.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeArea120TablesDrive
 *    @c kGTLRAuthScopeArea120TablesDriveFile
 *    @c kGTLRAuthScopeArea120TablesDriveReadonly
 *    @c kGTLRAuthScopeArea120TablesSpreadsheets
 *    @c kGTLRAuthScopeArea120TablesSpreadsheetsReadonly
 *    @c kGTLRAuthScopeArea120TablesTables
 */
@interface GTLRArea120TablesQuery_WorkspacesList : GTLRArea120TablesQuery

/**
 *  The maximum number of workspaces to return. The service may return fewer
 *  than this value. If unspecified, at most 10 workspaces are returned. The
 *  maximum value is 25; values above 25 are coerced to 25.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListWorkspaces` call. Provide this
 *  to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListWorkspaces` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRArea120Tables_ListWorkspacesResponse.
 *
 *  Lists workspaces for the user.
 *
 *  @return GTLRArea120TablesQuery_WorkspacesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
