// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play Android Developer API (androidpublisher/v3)
// Description:
//   Lets Android application developers access their Google Play accounts. At a
//   high level, the expected workflow is to "insert" an Edit, make changes as
//   necessary, and then "commit" it.
// Documentation:
//   https://developers.google.com/android-publisher

#import <GoogleAPIClientForREST/GTLRAndroidPublisherQuery.h>

// ----------------------------------------------------------------------------
// Constants

// deobfuscationFileType
NSString * const kGTLRAndroidPublisherDeobfuscationFileTypeDeobfuscationFileTypeUnspecified = @"deobfuscationFileTypeUnspecified";
NSString * const kGTLRAndroidPublisherDeobfuscationFileTypeNativeCode = @"nativeCode";
NSString * const kGTLRAndroidPublisherDeobfuscationFileTypeProguard = @"proguard";

// expansionFileType
NSString * const kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified = @"expansionFileTypeUnspecified";
NSString * const kGTLRAndroidPublisherExpansionFileTypeMain    = @"main";
NSString * const kGTLRAndroidPublisherExpansionFileTypePatch   = @"patch";

// imageType
NSString * const kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified = @"appImageTypeUnspecified";
NSString * const kGTLRAndroidPublisherImageTypeFeatureGraphic  = @"featureGraphic";
NSString * const kGTLRAndroidPublisherImageTypeIcon            = @"icon";
NSString * const kGTLRAndroidPublisherImageTypePhoneScreenshots = @"phoneScreenshots";
NSString * const kGTLRAndroidPublisherImageTypeSevenInchScreenshots = @"sevenInchScreenshots";
NSString * const kGTLRAndroidPublisherImageTypeTenInchScreenshots = @"tenInchScreenshots";
NSString * const kGTLRAndroidPublisherImageTypeTvBanner        = @"tvBanner";
NSString * const kGTLRAndroidPublisherImageTypeTvScreenshots   = @"tvScreenshots";
NSString * const kGTLRAndroidPublisherImageTypeWearScreenshots = @"wearScreenshots";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRAndroidPublisherQuery

@dynamic fields;

@end

@implementation GTLRAndroidPublisherQuery_ApplicationsDeviceTierConfigsCreate

@dynamic allowUnknownDevices, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_DeviceTierConfig *)object
                    packageName:(NSString *)packageName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/deviceTierConfigs";
  GTLRAndroidPublisherQuery_ApplicationsDeviceTierConfigsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.expectedObjectClass = [GTLRAndroidPublisher_DeviceTierConfig class];
  query.loggingName = @"androidpublisher.applications.deviceTierConfigs.create";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_ApplicationsDeviceTierConfigsGet

@dynamic deviceTierConfigId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                  deviceTierConfigId:(long long)deviceTierConfigId {
  NSArray *pathParams = @[
    @"deviceTierConfigId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/deviceTierConfigs/{deviceTierConfigId}";
  GTLRAndroidPublisherQuery_ApplicationsDeviceTierConfigsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.deviceTierConfigId = deviceTierConfigId;
  query.expectedObjectClass = [GTLRAndroidPublisher_DeviceTierConfig class];
  query.loggingName = @"androidpublisher.applications.deviceTierConfigs.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_ApplicationsDeviceTierConfigsList

@dynamic packageName, pageSize, pageToken;

+ (instancetype)queryWithPackageName:(NSString *)packageName {
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/deviceTierConfigs";
  GTLRAndroidPublisherQuery_ApplicationsDeviceTierConfigsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.expectedObjectClass = [GTLRAndroidPublisher_ListDeviceTierConfigsResponse class];
  query.loggingName = @"androidpublisher.applications.deviceTierConfigs.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsApksAddexternallyhosted

@dynamic editId, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ApksAddExternallyHostedRequest *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/externallyHosted";
  GTLRAndroidPublisherQuery_EditsApksAddexternallyhosted *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_ApksAddExternallyHostedResponse class];
  query.loggingName = @"androidpublisher.edits.apks.addexternallyhosted";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsApksList

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/apks";
  GTLRAndroidPublisherQuery_EditsApksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_ApksListResponse class];
  query.loggingName = @"androidpublisher.edits.apks.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsApksUpload

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                    uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/apks";
  GTLRAndroidPublisherQuery_EditsApksUpload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRAndroidPublisher_Apk class];
  query.loggingName = @"androidpublisher.edits.apks.upload";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsBundlesList

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles";
  GTLRAndroidPublisherQuery_EditsBundlesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_BundlesListResponse class];
  query.loggingName = @"androidpublisher.edits.bundles.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsBundlesUpload

@dynamic ackBundleInstallationWarning, deviceTierConfigId, editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                    uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/bundles";
  GTLRAndroidPublisherQuery_EditsBundlesUpload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRAndroidPublisher_Bundle class];
  query.loggingName = @"androidpublisher.edits.bundles.upload";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsCommit

@dynamic changesNotSentForReview, editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}:commit";
  GTLRAndroidPublisherQuery_EditsCommit *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_AppEdit class];
  query.loggingName = @"androidpublisher.edits.commit";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsCountryavailabilityGet

@dynamic editId, packageName, track;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                               track:(NSString *)track {
  NSArray *pathParams = @[
    @"editId", @"packageName", @"track"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/countryAvailability/{track}";
  GTLRAndroidPublisherQuery_EditsCountryavailabilityGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.track = track;
  query.expectedObjectClass = [GTLRAndroidPublisher_TrackCountryAvailability class];
  query.loggingName = @"androidpublisher.edits.countryavailability.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsDelete

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}";
  GTLRAndroidPublisherQuery_EditsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.loggingName = @"androidpublisher.edits.delete";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsDeobfuscationfilesUpload

@dynamic apkVersionCode, deobfuscationFileType, editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                      apkVersionCode:(NSInteger)apkVersionCode
               deobfuscationFileType:(NSString *)deobfuscationFileType
                    uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSArray *pathParams = @[
    @"apkVersionCode", @"deobfuscationFileType", @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}";
  GTLRAndroidPublisherQuery_EditsDeobfuscationfilesUpload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.apkVersionCode = apkVersionCode;
  query.deobfuscationFileType = deobfuscationFileType;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRAndroidPublisher_DeobfuscationFilesUploadResponse class];
  query.loggingName = @"androidpublisher.edits.deobfuscationfiles.upload";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsDetailsGet

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/details";
  GTLRAndroidPublisherQuery_EditsDetailsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_AppDetails class];
  query.loggingName = @"androidpublisher.edits.details.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsDetailsPatch

@dynamic editId, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_AppDetails *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/details";
  GTLRAndroidPublisherQuery_EditsDetailsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_AppDetails class];
  query.loggingName = @"androidpublisher.edits.details.patch";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsDetailsUpdate

@dynamic editId, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_AppDetails *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/details";
  GTLRAndroidPublisherQuery_EditsDetailsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_AppDetails class];
  query.loggingName = @"androidpublisher.edits.details.update";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsExpansionfilesGet

@dynamic apkVersionCode, editId, expansionFileType, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                      apkVersionCode:(NSInteger)apkVersionCode
                   expansionFileType:(NSString *)expansionFileType {
  NSArray *pathParams = @[
    @"apkVersionCode", @"editId", @"expansionFileType", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}";
  GTLRAndroidPublisherQuery_EditsExpansionfilesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.apkVersionCode = apkVersionCode;
  query.expansionFileType = expansionFileType;
  query.expectedObjectClass = [GTLRAndroidPublisher_ExpansionFile class];
  query.loggingName = @"androidpublisher.edits.expansionfiles.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsExpansionfilesPatch

@dynamic apkVersionCode, editId, expansionFileType, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ExpansionFile *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                 apkVersionCode:(NSInteger)apkVersionCode
              expansionFileType:(NSString *)expansionFileType {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"apkVersionCode", @"editId", @"expansionFileType", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}";
  GTLRAndroidPublisherQuery_EditsExpansionfilesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.apkVersionCode = apkVersionCode;
  query.expansionFileType = expansionFileType;
  query.expectedObjectClass = [GTLRAndroidPublisher_ExpansionFile class];
  query.loggingName = @"androidpublisher.edits.expansionfiles.patch";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsExpansionfilesUpdate

@dynamic apkVersionCode, editId, expansionFileType, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ExpansionFile *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                 apkVersionCode:(NSInteger)apkVersionCode
              expansionFileType:(NSString *)expansionFileType {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"apkVersionCode", @"editId", @"expansionFileType", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}";
  GTLRAndroidPublisherQuery_EditsExpansionfilesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.apkVersionCode = apkVersionCode;
  query.expansionFileType = expansionFileType;
  query.expectedObjectClass = [GTLRAndroidPublisher_ExpansionFile class];
  query.loggingName = @"androidpublisher.edits.expansionfiles.update";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsExpansionfilesUpload

@dynamic apkVersionCode, editId, expansionFileType, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                      apkVersionCode:(NSInteger)apkVersionCode
                   expansionFileType:(NSString *)expansionFileType
                    uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSArray *pathParams = @[
    @"apkVersionCode", @"editId", @"expansionFileType", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}";
  GTLRAndroidPublisherQuery_EditsExpansionfilesUpload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.apkVersionCode = apkVersionCode;
  query.expansionFileType = expansionFileType;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRAndroidPublisher_ExpansionFilesUploadResponse class];
  query.loggingName = @"androidpublisher.edits.expansionfiles.upload";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsGet

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}";
  GTLRAndroidPublisherQuery_EditsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_AppEdit class];
  query.loggingName = @"androidpublisher.edits.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsImagesDelete

@dynamic editId, imageId, imageType, language, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType
                             imageId:(NSString *)imageId {
  NSArray *pathParams = @[
    @"editId", @"imageId", @"imageType", @"language", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}";
  GTLRAndroidPublisherQuery_EditsImagesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.language = language;
  query.imageType = imageType;
  query.imageId = imageId;
  query.loggingName = @"androidpublisher.edits.images.delete";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsImagesDeleteall

@dynamic editId, imageType, language, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType {
  NSArray *pathParams = @[
    @"editId", @"imageType", @"language", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}";
  GTLRAndroidPublisherQuery_EditsImagesDeleteall *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.language = language;
  query.imageType = imageType;
  query.expectedObjectClass = [GTLRAndroidPublisher_ImagesDeleteAllResponse class];
  query.loggingName = @"androidpublisher.edits.images.deleteall";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsImagesList

@dynamic editId, imageType, language, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType {
  NSArray *pathParams = @[
    @"editId", @"imageType", @"language", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}";
  GTLRAndroidPublisherQuery_EditsImagesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.language = language;
  query.imageType = imageType;
  query.expectedObjectClass = [GTLRAndroidPublisher_ImagesListResponse class];
  query.loggingName = @"androidpublisher.edits.images.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsImagesUpload

@dynamic editId, imageType, language, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType
                    uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSArray *pathParams = @[
    @"editId", @"imageType", @"language", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}";
  GTLRAndroidPublisherQuery_EditsImagesUpload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.language = language;
  query.imageType = imageType;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRAndroidPublisher_ImagesUploadResponse class];
  query.loggingName = @"androidpublisher.edits.images.upload";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsInsert

@dynamic packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_AppEdit *)object
                    packageName:(NSString *)packageName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits";
  GTLRAndroidPublisherQuery_EditsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.expectedObjectClass = [GTLRAndroidPublisher_AppEdit class];
  query.loggingName = @"androidpublisher.edits.insert";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsListingsDelete

@dynamic editId, language, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language {
  NSArray *pathParams = @[
    @"editId", @"language", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}";
  GTLRAndroidPublisherQuery_EditsListingsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.language = language;
  query.loggingName = @"androidpublisher.edits.listings.delete";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsListingsDeleteall

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/listings";
  GTLRAndroidPublisherQuery_EditsListingsDeleteall *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.loggingName = @"androidpublisher.edits.listings.deleteall";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsListingsGet

@dynamic editId, language, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language {
  NSArray *pathParams = @[
    @"editId", @"language", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}";
  GTLRAndroidPublisherQuery_EditsListingsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.language = language;
  query.expectedObjectClass = [GTLRAndroidPublisher_Listing class];
  query.loggingName = @"androidpublisher.edits.listings.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsListingsList

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/listings";
  GTLRAndroidPublisherQuery_EditsListingsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_ListingsListResponse class];
  query.loggingName = @"androidpublisher.edits.listings.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsListingsPatch

@dynamic editId, language, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Listing *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                       language:(NSString *)language {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"language", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}";
  GTLRAndroidPublisherQuery_EditsListingsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.language = language;
  query.expectedObjectClass = [GTLRAndroidPublisher_Listing class];
  query.loggingName = @"androidpublisher.edits.listings.patch";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsListingsUpdate

@dynamic editId, language, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Listing *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                       language:(NSString *)language {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"language", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/listings/{language}";
  GTLRAndroidPublisherQuery_EditsListingsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.language = language;
  query.expectedObjectClass = [GTLRAndroidPublisher_Listing class];
  query.loggingName = @"androidpublisher.edits.listings.update";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsTestersGet

@dynamic editId, packageName, track;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                               track:(NSString *)track {
  NSArray *pathParams = @[
    @"editId", @"packageName", @"track"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}";
  GTLRAndroidPublisherQuery_EditsTestersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.track = track;
  query.expectedObjectClass = [GTLRAndroidPublisher_Testers class];
  query.loggingName = @"androidpublisher.edits.testers.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsTestersPatch

@dynamic editId, packageName, track;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Testers *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"packageName", @"track"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}";
  GTLRAndroidPublisherQuery_EditsTestersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.track = track;
  query.expectedObjectClass = [GTLRAndroidPublisher_Testers class];
  query.loggingName = @"androidpublisher.edits.testers.patch";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsTestersUpdate

@dynamic editId, packageName, track;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Testers *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"packageName", @"track"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/testers/{track}";
  GTLRAndroidPublisherQuery_EditsTestersUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.track = track;
  query.expectedObjectClass = [GTLRAndroidPublisher_Testers class];
  query.loggingName = @"androidpublisher.edits.testers.update";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsTracksGet

@dynamic editId, packageName, track;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                               track:(NSString *)track {
  NSArray *pathParams = @[
    @"editId", @"packageName", @"track"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}";
  GTLRAndroidPublisherQuery_EditsTracksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.track = track;
  query.expectedObjectClass = [GTLRAndroidPublisher_Track class];
  query.loggingName = @"androidpublisher.edits.tracks.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsTracksList

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks";
  GTLRAndroidPublisherQuery_EditsTracksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_TracksListResponse class];
  query.loggingName = @"androidpublisher.edits.tracks.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsTracksPatch

@dynamic editId, packageName, track;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Track *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"packageName", @"track"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}";
  GTLRAndroidPublisherQuery_EditsTracksPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.track = track;
  query.expectedObjectClass = [GTLRAndroidPublisher_Track class];
  query.loggingName = @"androidpublisher.edits.tracks.patch";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsTracksUpdate

@dynamic editId, packageName, track;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Track *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"editId", @"packageName", @"track"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}/tracks/{track}";
  GTLRAndroidPublisherQuery_EditsTracksUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.editId = editId;
  query.track = track;
  query.expectedObjectClass = [GTLRAndroidPublisher_Track class];
  query.loggingName = @"androidpublisher.edits.tracks.update";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_EditsValidate

@dynamic editId, packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId {
  NSArray *pathParams = @[
    @"editId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/edits/{editId}:validate";
  GTLRAndroidPublisherQuery_EditsValidate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.editId = editId;
  query.expectedObjectClass = [GTLRAndroidPublisher_AppEdit class];
  query.loggingName = @"androidpublisher.edits.validate";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_GeneratedapksDownload

@dynamic downloadId, packageName, versionCode;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                         versionCode:(NSInteger)versionCode
                          downloadId:(NSString *)downloadId {
  NSArray *pathParams = @[
    @"downloadId", @"packageName", @"versionCode"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/generatedApks/{versionCode}/downloads/{downloadId}:download";
  GTLRAndroidPublisherQuery_GeneratedapksDownload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.versionCode = versionCode;
  query.downloadId = downloadId;
  query.loggingName = @"androidpublisher.generatedapks.download";
  return query;
}

+ (instancetype)queryForMediaWithPackageName:(NSString *)packageName
                                 versionCode:(NSInteger)versionCode
                                  downloadId:(NSString *)downloadId {
  GTLRAndroidPublisherQuery_GeneratedapksDownload *query =
    [self queryWithPackageName:packageName
                   versionCode:versionCode
                    downloadId:downloadId];
  query.downloadAsDataObjectType = @"media";
  query.useMediaDownloadService = YES;
  query.loggingName = @"Download androidpublisher.generatedapks.download";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_GeneratedapksList

@dynamic packageName, versionCode;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                         versionCode:(NSInteger)versionCode {
  NSArray *pathParams = @[
    @"packageName", @"versionCode"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/generatedApks/{versionCode}";
  GTLRAndroidPublisherQuery_GeneratedapksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.versionCode = versionCode;
  query.expectedObjectClass = [GTLRAndroidPublisher_GeneratedApksListResponse class];
  query.loggingName = @"androidpublisher.generatedapks.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_GrantsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Grant *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"androidpublisher/v3/{+parent}/grants";
  GTLRAndroidPublisherQuery_GrantsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRAndroidPublisher_Grant class];
  query.loggingName = @"androidpublisher.grants.create";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_GrantsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"androidpublisher/v3/{+name}";
  GTLRAndroidPublisherQuery_GrantsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.loggingName = @"androidpublisher.grants.delete";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_GrantsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Grant *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"androidpublisher/v3/{+name}";
  GTLRAndroidPublisherQuery_GrantsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAndroidPublisher_Grant class];
  query.loggingName = @"androidpublisher.grants.patch";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_InappproductsDelete

@dynamic packageName, sku;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                                 sku:(NSString *)sku {
  NSArray *pathParams = @[
    @"packageName", @"sku"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/inappproducts/{sku}";
  GTLRAndroidPublisherQuery_InappproductsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.sku = sku;
  query.loggingName = @"androidpublisher.inappproducts.delete";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_InappproductsGet

@dynamic packageName, sku;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                                 sku:(NSString *)sku {
  NSArray *pathParams = @[
    @"packageName", @"sku"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/inappproducts/{sku}";
  GTLRAndroidPublisherQuery_InappproductsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.sku = sku;
  query.expectedObjectClass = [GTLRAndroidPublisher_InAppProduct class];
  query.loggingName = @"androidpublisher.inappproducts.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_InappproductsInsert

@dynamic autoConvertMissingPrices, packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_InAppProduct *)object
                    packageName:(NSString *)packageName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/inappproducts";
  GTLRAndroidPublisherQuery_InappproductsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.expectedObjectClass = [GTLRAndroidPublisher_InAppProduct class];
  query.loggingName = @"androidpublisher.inappproducts.insert";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_InappproductsList

@dynamic maxResults, packageName, startIndex, token;

+ (instancetype)queryWithPackageName:(NSString *)packageName {
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/inappproducts";
  GTLRAndroidPublisherQuery_InappproductsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.expectedObjectClass = [GTLRAndroidPublisher_InappproductsListResponse class];
  query.loggingName = @"androidpublisher.inappproducts.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_InappproductsPatch

@dynamic autoConvertMissingPrices, packageName, sku;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_InAppProduct *)object
                    packageName:(NSString *)packageName
                            sku:(NSString *)sku {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"packageName", @"sku"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/inappproducts/{sku}";
  GTLRAndroidPublisherQuery_InappproductsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.sku = sku;
  query.expectedObjectClass = [GTLRAndroidPublisher_InAppProduct class];
  query.loggingName = @"androidpublisher.inappproducts.patch";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_InappproductsUpdate

@dynamic allowMissing, autoConvertMissingPrices, packageName, sku;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_InAppProduct *)object
                    packageName:(NSString *)packageName
                            sku:(NSString *)sku {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"packageName", @"sku"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/inappproducts/{sku}";
  GTLRAndroidPublisherQuery_InappproductsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.sku = sku;
  query.expectedObjectClass = [GTLRAndroidPublisher_InAppProduct class];
  query.loggingName = @"androidpublisher.inappproducts.update";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_InternalappsharingartifactsUploadapk

@dynamic packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                    uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/apk";
  GTLRAndroidPublisherQuery_InternalappsharingartifactsUploadapk *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRAndroidPublisher_InternalAppSharingArtifact class];
  query.loggingName = @"androidpublisher.internalappsharingartifacts.uploadapk";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_InternalappsharingartifactsUploadbundle

@dynamic packageName;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                    uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/internalappsharing/{packageName}/artifacts/bundle";
  GTLRAndroidPublisherQuery_InternalappsharingartifactsUploadbundle *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRAndroidPublisher_InternalAppSharingArtifact class];
  query.loggingName = @"androidpublisher.internalappsharingartifacts.uploadbundle";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationConvertRegionPrices

@dynamic packageName;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ConvertRegionPricesRequest *)object
                    packageName:(NSString *)packageName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/pricing:convertRegionPrices";
  GTLRAndroidPublisherQuery_MonetizationConvertRegionPrices *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.expectedObjectClass = [GTLRAndroidPublisher_ConvertRegionPricesResponse class];
  query.loggingName = @"androidpublisher.monetization.convertRegionPrices";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsArchive

@dynamic packageName, productId;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ArchiveSubscriptionRequest *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"packageName", @"productId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions/{productId}:archive";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsArchive *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.productId = productId;
  query.expectedObjectClass = [GTLRAndroidPublisher_Subscription class];
  query.loggingName = @"androidpublisher.monetization.subscriptions.archive";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansActivate

@dynamic basePlanId, packageName, productId;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ActivateBasePlanRequest *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                     basePlanId:(NSString *)basePlanId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"basePlanId", @"packageName", @"productId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:activate";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansActivate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.productId = productId;
  query.basePlanId = basePlanId;
  query.expectedObjectClass = [GTLRAndroidPublisher_Subscription class];
  query.loggingName = @"androidpublisher.monetization.subscriptions.basePlans.activate";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansDeactivate

@dynamic basePlanId, packageName, productId;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_DeactivateBasePlanRequest *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                     basePlanId:(NSString *)basePlanId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"basePlanId", @"packageName", @"productId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:deactivate";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansDeactivate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.productId = productId;
  query.basePlanId = basePlanId;
  query.expectedObjectClass = [GTLRAndroidPublisher_Subscription class];
  query.loggingName = @"androidpublisher.monetization.subscriptions.basePlans.deactivate";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansDelete

@dynamic basePlanId, packageName, productId;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId
                          basePlanId:(NSString *)basePlanId {
  NSArray *pathParams = @[
    @"basePlanId", @"packageName", @"productId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.productId = productId;
  query.basePlanId = basePlanId;
  query.loggingName = @"androidpublisher.monetization.subscriptions.basePlans.delete";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansMigratePrices

@dynamic basePlanId, packageName, productId;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_MigrateBasePlanPricesRequest *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                     basePlanId:(NSString *)basePlanId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"basePlanId", @"packageName", @"productId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}:migratePrices";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansMigratePrices *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.productId = productId;
  query.basePlanId = basePlanId;
  query.expectedObjectClass = [GTLRAndroidPublisher_MigrateBasePlanPricesResponse class];
  query.loggingName = @"androidpublisher.monetization.subscriptions.basePlans.migratePrices";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersActivate

@dynamic basePlanId, offerId, packageName, productId;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ActivateSubscriptionOfferRequest *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                     basePlanId:(NSString *)basePlanId
                        offerId:(NSString *)offerId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"basePlanId", @"offerId", @"packageName", @"productId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}:activate";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersActivate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.productId = productId;
  query.basePlanId = basePlanId;
  query.offerId = offerId;
  query.expectedObjectClass = [GTLRAndroidPublisher_SubscriptionOffer class];
  query.loggingName = @"androidpublisher.monetization.subscriptions.basePlans.offers.activate";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersCreate

@dynamic basePlanId, offerId, packageName, productId, regionsVersionVersion;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"regionsVersionVersion" : @"regionsVersion.version" };
}

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_SubscriptionOffer *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                     basePlanId:(NSString *)basePlanId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"basePlanId", @"packageName", @"productId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.productId = productId;
  query.basePlanId = basePlanId;
  query.expectedObjectClass = [GTLRAndroidPublisher_SubscriptionOffer class];
  query.loggingName = @"androidpublisher.monetization.subscriptions.basePlans.offers.create";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersDeactivate

@dynamic basePlanId, offerId, packageName, productId;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_DeactivateSubscriptionOfferRequest *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                     basePlanId:(NSString *)basePlanId
                        offerId:(NSString *)offerId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"basePlanId", @"offerId", @"packageName", @"productId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}:deactivate";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersDeactivate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.productId = productId;
  query.basePlanId = basePlanId;
  query.offerId = offerId;
  query.expectedObjectClass = [GTLRAndroidPublisher_SubscriptionOffer class];
  query.loggingName = @"androidpublisher.monetization.subscriptions.basePlans.offers.deactivate";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersDelete

@dynamic basePlanId, offerId, packageName, productId;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId
                          basePlanId:(NSString *)basePlanId
                             offerId:(NSString *)offerId {
  NSArray *pathParams = @[
    @"basePlanId", @"offerId", @"packageName", @"productId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.productId = productId;
  query.basePlanId = basePlanId;
  query.offerId = offerId;
  query.loggingName = @"androidpublisher.monetization.subscriptions.basePlans.offers.delete";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersGet

@dynamic basePlanId, offerId, packageName, productId;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId
                          basePlanId:(NSString *)basePlanId
                             offerId:(NSString *)offerId {
  NSArray *pathParams = @[
    @"basePlanId", @"offerId", @"packageName", @"productId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.productId = productId;
  query.basePlanId = basePlanId;
  query.offerId = offerId;
  query.expectedObjectClass = [GTLRAndroidPublisher_SubscriptionOffer class];
  query.loggingName = @"androidpublisher.monetization.subscriptions.basePlans.offers.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersList

@dynamic basePlanId, packageName, pageSize, pageToken, productId;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId
                          basePlanId:(NSString *)basePlanId {
  NSArray *pathParams = @[
    @"basePlanId", @"packageName", @"productId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.productId = productId;
  query.basePlanId = basePlanId;
  query.expectedObjectClass = [GTLRAndroidPublisher_ListSubscriptionOffersResponse class];
  query.loggingName = @"androidpublisher.monetization.subscriptions.basePlans.offers.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersPatch

@dynamic basePlanId, offerId, packageName, productId, regionsVersionVersion,
         updateMask;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"regionsVersionVersion" : @"regionsVersion.version" };
}

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_SubscriptionOffer *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                     basePlanId:(NSString *)basePlanId
                        offerId:(NSString *)offerId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"basePlanId", @"offerId", @"packageName", @"productId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions/{productId}/basePlans/{basePlanId}/offers/{offerId}";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.productId = productId;
  query.basePlanId = basePlanId;
  query.offerId = offerId;
  query.expectedObjectClass = [GTLRAndroidPublisher_SubscriptionOffer class];
  query.loggingName = @"androidpublisher.monetization.subscriptions.basePlans.offers.patch";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsCreate

@dynamic packageName, productId, regionsVersionVersion;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"regionsVersionVersion" : @"regionsVersion.version" };
}

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Subscription *)object
                    packageName:(NSString *)packageName {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.expectedObjectClass = [GTLRAndroidPublisher_Subscription class];
  query.loggingName = @"androidpublisher.monetization.subscriptions.create";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsDelete

@dynamic packageName, productId;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"packageName", @"productId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions/{productId}";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.productId = productId;
  query.loggingName = @"androidpublisher.monetization.subscriptions.delete";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsGet

@dynamic packageName, productId;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId {
  NSArray *pathParams = @[
    @"packageName", @"productId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions/{productId}";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.productId = productId;
  query.expectedObjectClass = [GTLRAndroidPublisher_Subscription class];
  query.loggingName = @"androidpublisher.monetization.subscriptions.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsList

@dynamic packageName, pageSize, pageToken, showArchived;

+ (instancetype)queryWithPackageName:(NSString *)packageName {
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.expectedObjectClass = [GTLRAndroidPublisher_ListSubscriptionsResponse class];
  query.loggingName = @"androidpublisher.monetization.subscriptions.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_MonetizationSubscriptionsPatch

@dynamic packageName, productId, regionsVersionVersion, updateMask;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"regionsVersionVersion" : @"regionsVersion.version" };
}

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Subscription *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"packageName", @"productId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/subscriptions/{productId}";
  GTLRAndroidPublisherQuery_MonetizationSubscriptionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.productId = productId;
  query.expectedObjectClass = [GTLRAndroidPublisher_Subscription class];
  query.loggingName = @"androidpublisher.monetization.subscriptions.patch";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_OrdersRefund

@dynamic orderId, packageName, revoke;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                             orderId:(NSString *)orderId {
  NSArray *pathParams = @[
    @"orderId", @"packageName"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/orders/{orderId}:refund";
  GTLRAndroidPublisherQuery_OrdersRefund *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.orderId = orderId;
  query.loggingName = @"androidpublisher.orders.refund";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesProductsAcknowledge

@dynamic packageName, productId, token;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ProductPurchasesAcknowledgeRequest *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                          token:(NSString *)token {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"packageName", @"productId", @"token"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}:acknowledge";
  GTLRAndroidPublisherQuery_PurchasesProductsAcknowledge *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.productId = productId;
  query.token = token;
  query.loggingName = @"androidpublisher.purchases.products.acknowledge";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesProductsGet

@dynamic packageName, productId, token;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId
                               token:(NSString *)token {
  NSArray *pathParams = @[
    @"packageName", @"productId", @"token"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/purchases/products/{productId}/tokens/{token}";
  GTLRAndroidPublisherQuery_PurchasesProductsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.productId = productId;
  query.token = token;
  query.expectedObjectClass = [GTLRAndroidPublisher_ProductPurchase class];
  query.loggingName = @"androidpublisher.purchases.products.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesSubscriptionsAcknowledge

@dynamic packageName, subscriptionId, token;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_SubscriptionPurchasesAcknowledgeRequest *)object
                    packageName:(NSString *)packageName
                 subscriptionId:(NSString *)subscriptionId
                          token:(NSString *)token {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"packageName", @"subscriptionId", @"token"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:acknowledge";
  GTLRAndroidPublisherQuery_PurchasesSubscriptionsAcknowledge *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.subscriptionId = subscriptionId;
  query.token = token;
  query.loggingName = @"androidpublisher.purchases.subscriptions.acknowledge";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesSubscriptionsCancel

@dynamic packageName, subscriptionId, token;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token {
  NSArray *pathParams = @[
    @"packageName", @"subscriptionId", @"token"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel";
  GTLRAndroidPublisherQuery_PurchasesSubscriptionsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.subscriptionId = subscriptionId;
  query.token = token;
  query.loggingName = @"androidpublisher.purchases.subscriptions.cancel";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesSubscriptionsDefer

@dynamic packageName, subscriptionId, token;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_SubscriptionPurchasesDeferRequest *)object
                    packageName:(NSString *)packageName
                 subscriptionId:(NSString *)subscriptionId
                          token:(NSString *)token {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"packageName", @"subscriptionId", @"token"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer";
  GTLRAndroidPublisherQuery_PurchasesSubscriptionsDefer *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.subscriptionId = subscriptionId;
  query.token = token;
  query.expectedObjectClass = [GTLRAndroidPublisher_SubscriptionPurchasesDeferResponse class];
  query.loggingName = @"androidpublisher.purchases.subscriptions.defer";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesSubscriptionsGet

@dynamic packageName, subscriptionId, token;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token {
  NSArray *pathParams = @[
    @"packageName", @"subscriptionId", @"token"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}";
  GTLRAndroidPublisherQuery_PurchasesSubscriptionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.subscriptionId = subscriptionId;
  query.token = token;
  query.expectedObjectClass = [GTLRAndroidPublisher_SubscriptionPurchase class];
  query.loggingName = @"androidpublisher.purchases.subscriptions.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesSubscriptionsRefund

@dynamic packageName, subscriptionId, token;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token {
  NSArray *pathParams = @[
    @"packageName", @"subscriptionId", @"token"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund";
  GTLRAndroidPublisherQuery_PurchasesSubscriptionsRefund *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.subscriptionId = subscriptionId;
  query.token = token;
  query.loggingName = @"androidpublisher.purchases.subscriptions.refund";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesSubscriptionsRevoke

@dynamic packageName, subscriptionId, token;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token {
  NSArray *pathParams = @[
    @"packageName", @"subscriptionId", @"token"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke";
  GTLRAndroidPublisherQuery_PurchasesSubscriptionsRevoke *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.subscriptionId = subscriptionId;
  query.token = token;
  query.loggingName = @"androidpublisher.purchases.subscriptions.revoke";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesSubscriptionsv2Get

@dynamic packageName, token;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                               token:(NSString *)token {
  NSArray *pathParams = @[
    @"packageName", @"token"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/purchases/subscriptionsv2/tokens/{token}";
  GTLRAndroidPublisherQuery_PurchasesSubscriptionsv2Get *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.token = token;
  query.expectedObjectClass = [GTLRAndroidPublisher_SubscriptionPurchaseV2 class];
  query.loggingName = @"androidpublisher.purchases.subscriptionsv2.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_PurchasesVoidedpurchasesList

@dynamic endTime, maxResults, packageName, startIndex, startTime, token, type;

+ (instancetype)queryWithPackageName:(NSString *)packageName {
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/purchases/voidedpurchases";
  GTLRAndroidPublisherQuery_PurchasesVoidedpurchasesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.expectedObjectClass = [GTLRAndroidPublisher_VoidedPurchasesListResponse class];
  query.loggingName = @"androidpublisher.purchases.voidedpurchases.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_ReviewsGet

@dynamic packageName, reviewId, translationLanguage;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                            reviewId:(NSString *)reviewId {
  NSArray *pathParams = @[
    @"packageName", @"reviewId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/reviews/{reviewId}";
  GTLRAndroidPublisherQuery_ReviewsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.reviewId = reviewId;
  query.expectedObjectClass = [GTLRAndroidPublisher_Review class];
  query.loggingName = @"androidpublisher.reviews.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_ReviewsList

@dynamic maxResults, packageName, startIndex, token, translationLanguage;

+ (instancetype)queryWithPackageName:(NSString *)packageName {
  NSArray *pathParams = @[ @"packageName" ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/reviews";
  GTLRAndroidPublisherQuery_ReviewsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.expectedObjectClass = [GTLRAndroidPublisher_ReviewsListResponse class];
  query.loggingName = @"androidpublisher.reviews.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_ReviewsReply

@dynamic packageName, reviewId;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ReviewsReplyRequest *)object
                    packageName:(NSString *)packageName
                       reviewId:(NSString *)reviewId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"packageName", @"reviewId"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/reviews/{reviewId}:reply";
  GTLRAndroidPublisherQuery_ReviewsReply *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.reviewId = reviewId;
  query.expectedObjectClass = [GTLRAndroidPublisher_ReviewsReplyResponse class];
  query.loggingName = @"androidpublisher.reviews.reply";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_SystemapksVariantsCreate

@dynamic packageName, versionCode;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Variant *)object
                    packageName:(NSString *)packageName
                    versionCode:(long long)versionCode {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"packageName", @"versionCode"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants";
  GTLRAndroidPublisherQuery_SystemapksVariantsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.packageName = packageName;
  query.versionCode = versionCode;
  query.expectedObjectClass = [GTLRAndroidPublisher_Variant class];
  query.loggingName = @"androidpublisher.systemapks.variants.create";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_SystemapksVariantsDownload

@dynamic packageName, variantId, versionCode;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                         versionCode:(long long)versionCode
                           variantId:(NSUInteger)variantId {
  NSArray *pathParams = @[
    @"packageName", @"variantId", @"versionCode"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants/{variantId}:download";
  GTLRAndroidPublisherQuery_SystemapksVariantsDownload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.versionCode = versionCode;
  query.variantId = variantId;
  query.loggingName = @"androidpublisher.systemapks.variants.download";
  return query;
}

+ (instancetype)queryForMediaWithPackageName:(NSString *)packageName
                                 versionCode:(long long)versionCode
                                   variantId:(NSUInteger)variantId {
  GTLRAndroidPublisherQuery_SystemapksVariantsDownload *query =
    [self queryWithPackageName:packageName
                   versionCode:versionCode
                     variantId:variantId];
  query.downloadAsDataObjectType = @"media";
  query.useMediaDownloadService = YES;
  query.loggingName = @"Download androidpublisher.systemapks.variants.download";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_SystemapksVariantsGet

@dynamic packageName, variantId, versionCode;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                         versionCode:(long long)versionCode
                           variantId:(NSUInteger)variantId {
  NSArray *pathParams = @[
    @"packageName", @"variantId", @"versionCode"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants/{variantId}";
  GTLRAndroidPublisherQuery_SystemapksVariantsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.versionCode = versionCode;
  query.variantId = variantId;
  query.expectedObjectClass = [GTLRAndroidPublisher_Variant class];
  query.loggingName = @"androidpublisher.systemapks.variants.get";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_SystemapksVariantsList

@dynamic packageName, versionCode;

+ (instancetype)queryWithPackageName:(NSString *)packageName
                         versionCode:(long long)versionCode {
  NSArray *pathParams = @[
    @"packageName", @"versionCode"
  ];
  NSString *pathURITemplate = @"androidpublisher/v3/applications/{packageName}/systemApks/{versionCode}/variants";
  GTLRAndroidPublisherQuery_SystemapksVariantsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.packageName = packageName;
  query.versionCode = versionCode;
  query.expectedObjectClass = [GTLRAndroidPublisher_SystemApksListResponse class];
  query.loggingName = @"androidpublisher.systemapks.variants.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_UsersCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_User *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"androidpublisher/v3/{+parent}/users";
  GTLRAndroidPublisherQuery_UsersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRAndroidPublisher_User class];
  query.loggingName = @"androidpublisher.users.create";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_UsersDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"androidpublisher/v3/{+name}";
  GTLRAndroidPublisherQuery_UsersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.loggingName = @"androidpublisher.users.delete";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_UsersList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"androidpublisher/v3/{+parent}/users";
  GTLRAndroidPublisherQuery_UsersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRAndroidPublisher_ListUsersResponse class];
  query.loggingName = @"androidpublisher.users.list";
  return query;
}

@end

@implementation GTLRAndroidPublisherQuery_UsersPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRAndroidPublisher_User *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"androidpublisher/v3/{+name}";
  GTLRAndroidPublisherQuery_UsersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRAndroidPublisher_User class];
  query.loggingName = @"androidpublisher.users.patch";
  return query;
}

@end
