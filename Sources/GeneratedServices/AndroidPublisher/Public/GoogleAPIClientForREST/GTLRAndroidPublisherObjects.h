// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play Android Developer API (androidpublisher/v3)
// Description:
//   Lets Android application developers access their Google Play accounts. At a
//   high level, the expected workflow is to "insert" an Edit, make changes as
//   necessary, and then "commit" it.
// Documentation:
//   https://developers.google.com/android-publisher

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRAndroidPublisher_AcquisitionTargetingRule;
@class GTLRAndroidPublisher_Apk;
@class GTLRAndroidPublisher_ApkBinary;
@class GTLRAndroidPublisher_AutoRenewingBasePlanType;
@class GTLRAndroidPublisher_AutoRenewingPlan;
@class GTLRAndroidPublisher_BasePlan;
@class GTLRAndroidPublisher_Bundle;
@class GTLRAndroidPublisher_CanceledStateContext;
@class GTLRAndroidPublisher_CancelSurveyResult;
@class GTLRAndroidPublisher_Comment;
@class GTLRAndroidPublisher_ConvertedOtherRegionsPrice;
@class GTLRAndroidPublisher_ConvertedRegionPrice;
@class GTLRAndroidPublisher_ConvertRegionPricesResponse_ConvertedRegionPrices;
@class GTLRAndroidPublisher_CountryTargeting;
@class GTLRAndroidPublisher_DeobfuscationFile;
@class GTLRAndroidPublisher_DeveloperComment;
@class GTLRAndroidPublisher_DeveloperInitiatedCancellation;
@class GTLRAndroidPublisher_DeviceGroup;
@class GTLRAndroidPublisher_DeviceId;
@class GTLRAndroidPublisher_DeviceMetadata;
@class GTLRAndroidPublisher_DeviceRam;
@class GTLRAndroidPublisher_DeviceSelector;
@class GTLRAndroidPublisher_DeviceSpec;
@class GTLRAndroidPublisher_DeviceTier;
@class GTLRAndroidPublisher_DeviceTierConfig;
@class GTLRAndroidPublisher_DeviceTierSet;
@class GTLRAndroidPublisher_ExpansionFile;
@class GTLRAndroidPublisher_ExternalAccountIdentifiers;
@class GTLRAndroidPublisher_ExternallyHostedApk;
@class GTLRAndroidPublisher_GeneratedApksPerSigningKey;
@class GTLRAndroidPublisher_GeneratedAssetPackSlice;
@class GTLRAndroidPublisher_GeneratedSplitApk;
@class GTLRAndroidPublisher_GeneratedStandaloneApk;
@class GTLRAndroidPublisher_GeneratedUniversalApk;
@class GTLRAndroidPublisher_Grant;
@class GTLRAndroidPublisher_Image;
@class GTLRAndroidPublisher_InAppProduct;
@class GTLRAndroidPublisher_InAppProduct_Listings;
@class GTLRAndroidPublisher_InAppProduct_Prices;
@class GTLRAndroidPublisher_InAppProductListing;
@class GTLRAndroidPublisher_IntroductoryPriceInfo;
@class GTLRAndroidPublisher_Listing;
@class GTLRAndroidPublisher_LocalizedText;
@class GTLRAndroidPublisher_ManagedProductTaxAndComplianceSettings;
@class GTLRAndroidPublisher_ManagedProductTaxAndComplianceSettings_TaxRateInfoByRegionCode;
@class GTLRAndroidPublisher_Money;
@class GTLRAndroidPublisher_OfferDetails;
@class GTLRAndroidPublisher_OfferTag;
@class GTLRAndroidPublisher_OtherRegionsBasePlanConfig;
@class GTLRAndroidPublisher_OtherRegionsSubscriptionOfferConfig;
@class GTLRAndroidPublisher_OtherRegionsSubscriptionOfferPhaseConfig;
@class GTLRAndroidPublisher_OtherRegionsSubscriptionOfferPhasePrices;
@class GTLRAndroidPublisher_PageInfo;
@class GTLRAndroidPublisher_PausedStateContext;
@class GTLRAndroidPublisher_PrepaidBasePlanType;
@class GTLRAndroidPublisher_PrepaidPlan;
@class GTLRAndroidPublisher_Price;
@class GTLRAndroidPublisher_RegionalBasePlanConfig;
@class GTLRAndroidPublisher_RegionalPriceMigrationConfig;
@class GTLRAndroidPublisher_RegionalSubscriptionOfferConfig;
@class GTLRAndroidPublisher_RegionalSubscriptionOfferPhaseConfig;
@class GTLRAndroidPublisher_RegionalTaxRateInfo;
@class GTLRAndroidPublisher_RegionsVersion;
@class GTLRAndroidPublisher_ReplacementCancellation;
@class GTLRAndroidPublisher_Review;
@class GTLRAndroidPublisher_ReviewReplyResult;
@class GTLRAndroidPublisher_SubscribeWithGoogleInfo;
@class GTLRAndroidPublisher_Subscription;
@class GTLRAndroidPublisher_SubscriptionCancelSurveyResult;
@class GTLRAndroidPublisher_SubscriptionDeferralInfo;
@class GTLRAndroidPublisher_SubscriptionItemPriceChangeDetails;
@class GTLRAndroidPublisher_SubscriptionListing;
@class GTLRAndroidPublisher_SubscriptionOffer;
@class GTLRAndroidPublisher_SubscriptionOfferPhase;
@class GTLRAndroidPublisher_SubscriptionOfferTargeting;
@class GTLRAndroidPublisher_SubscriptionPriceChange;
@class GTLRAndroidPublisher_SubscriptionPurchaseLineItem;
@class GTLRAndroidPublisher_SubscriptionTaxAndComplianceSettings;
@class GTLRAndroidPublisher_SubscriptionTaxAndComplianceSettings_TaxRateInfoByRegionCode;
@class GTLRAndroidPublisher_SystemFeature;
@class GTLRAndroidPublisher_SystemInitiatedCancellation;
@class GTLRAndroidPublisher_TargetingRuleScope;
@class GTLRAndroidPublisher_TestPurchase;
@class GTLRAndroidPublisher_Timestamp;
@class GTLRAndroidPublisher_TokenPagination;
@class GTLRAndroidPublisher_Track;
@class GTLRAndroidPublisher_TrackRelease;
@class GTLRAndroidPublisher_TrackTargetedCountry;
@class GTLRAndroidPublisher_UpgradeTargetingRule;
@class GTLRAndroidPublisher_User;
@class GTLRAndroidPublisher_UserComment;
@class GTLRAndroidPublisher_UserInitiatedCancellation;
@class GTLRAndroidPublisher_UsesPermission;
@class GTLRAndroidPublisher_Variant;
@class GTLRAndroidPublisher_VoidedPurchase;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_AutoRenewingBasePlanType.prorationMode

/**
 *  Users will be charged for their new base plan immediately and in full. Any
 *  remaining period of their existing subscription will be used to extend the
 *  duration of the new billing plan.
 *
 *  Value: "SUBSCRIPTION_PRORATION_MODE_CHARGE_FULL_PRICE_IMMEDIATELY"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_AutoRenewingBasePlanType_ProrationMode_SubscriptionProrationModeChargeFullPriceImmediately;
/**
 *  Users will be charged for their new base plan at the end of their current
 *  billing period.
 *
 *  Value: "SUBSCRIPTION_PRORATION_MODE_CHARGE_ON_NEXT_BILLING_DATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_AutoRenewingBasePlanType_ProrationMode_SubscriptionProrationModeChargeOnNextBillingDate;
/**
 *  Unspecified mode.
 *
 *  Value: "SUBSCRIPTION_PRORATION_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_AutoRenewingBasePlanType_ProrationMode_SubscriptionProrationModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_AutoRenewingBasePlanType.resubscribeState

/**
 *  Resubscribe is active.
 *
 *  Value: "RESUBSCRIBE_STATE_ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_AutoRenewingBasePlanType_ResubscribeState_ResubscribeStateActive;
/**
 *  Resubscribe is inactive.
 *
 *  Value: "RESUBSCRIBE_STATE_INACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_AutoRenewingBasePlanType_ResubscribeState_ResubscribeStateInactive;
/**
 *  Unspecified state.
 *
 *  Value: "RESUBSCRIBE_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_AutoRenewingBasePlanType_ResubscribeState_ResubscribeStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_BasePlan.state

/**
 *  The base plan is active and available for new subscribers.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_BasePlan_State_Active;
/**
 *  The base plan is currently in a draft state, and hasn't been activated. It
 *  can be safely deleted at this point.
 *
 *  Value: "DRAFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_BasePlan_State_Draft;
/**
 *  The base plan is inactive and only available for existing subscribers.
 *
 *  Value: "INACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_BasePlan_State_Inactive;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_BasePlan_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_CancelSurveyResult.reason

/**
 *  Cost related issues.
 *
 *  Value: "CANCEL_SURVEY_REASON_COST_RELATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_CancelSurveyResult_Reason_CancelSurveyReasonCostRelated;
/**
 *  The user found a better app.
 *
 *  Value: "CANCEL_SURVEY_REASON_FOUND_BETTER_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_CancelSurveyResult_Reason_CancelSurveyReasonFoundBetterApp;
/**
 *  Not enough usage of the subscription.
 *
 *  Value: "CANCEL_SURVEY_REASON_NOT_ENOUGH_USAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_CancelSurveyResult_Reason_CancelSurveyReasonNotEnoughUsage;
/**
 *  Other reasons.
 *
 *  Value: "CANCEL_SURVEY_REASON_OTHERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_CancelSurveyResult_Reason_CancelSurveyReasonOthers;
/**
 *  Technical issues while using the app.
 *
 *  Value: "CANCEL_SURVEY_REASON_TECHNICAL_ISSUES"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_CancelSurveyResult_Reason_CancelSurveyReasonTechnicalIssues;
/**
 *  Unspecified cancel survey reason.
 *
 *  Value: "CANCEL_SURVEY_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_CancelSurveyResult_Reason_CancelSurveyReasonUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_DeobfuscationFile.symbolType

/**
 *  Unspecified deobfuscation file type.
 *
 *  Value: "deobfuscationFileTypeUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_DeobfuscationFile_SymbolType_DeobfuscationFileTypeUnspecified;
/**
 *  Native debugging symbols file type.
 *
 *  Value: "nativeCode"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_DeobfuscationFile_SymbolType_NativeCode;
/**
 *  Proguard deobfuscation file type.
 *
 *  Value: "proguard"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_DeobfuscationFile_SymbolType_Proguard;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_Grant.appLevelPermissions

/**
 *  Unknown or unspecified permission.
 *
 *  Value: "APP_LEVEL_PERMISSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_Grant_AppLevelPermissions_AppLevelPermissionUnspecified;
/**
 *  View app information (read-only).
 *
 *  Value: "CAN_ACCESS_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_Grant_AppLevelPermissions_CanAccessApp;
/**
 *  Edit and delete draft apps.
 *
 *  Value: "CAN_MANAGE_DRAFT_APPS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_Grant_AppLevelPermissions_CanManageDraftApps;
/**
 *  Manage orders and subscriptions.
 *
 *  Value: "CAN_MANAGE_ORDERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_Grant_AppLevelPermissions_CanManageOrders;
/**
 *  Admin (all permissions).
 *
 *  Value: "CAN_MANAGE_PERMISSIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_Grant_AppLevelPermissions_CanManagePermissions;
/**
 *  Release to production, exclude devices, and use app signing by Google Play.
 *
 *  Value: "CAN_MANAGE_PUBLIC_APKS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_Grant_AppLevelPermissions_CanManagePublicApks;
/**
 *  Manage store presence.
 *
 *  Value: "CAN_MANAGE_PUBLIC_LISTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_Grant_AppLevelPermissions_CanManagePublicListing;
/**
 *  Release to testing tracks.
 *
 *  Value: "CAN_MANAGE_TRACK_APKS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_Grant_AppLevelPermissions_CanManageTrackApks;
/**
 *  Manage testing tracks and edit tester lists.
 *
 *  Value: "CAN_MANAGE_TRACK_USERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_Grant_AppLevelPermissions_CanManageTrackUsers;
/**
 *  Reply to reviews.
 *
 *  Value: "CAN_REPLY_TO_REVIEWS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_Grant_AppLevelPermissions_CanReplyToReviews;
/**
 *  View financial data.
 *
 *  Value: "CAN_VIEW_FINANCIAL_DATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_Grant_AppLevelPermissions_CanViewFinancialData;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_InAppProduct.purchaseType

/**
 *  The default product type - one time purchase.
 *
 *  Value: "managedUser"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_InAppProduct_PurchaseType_ManagedUser;
/**
 *  Unspecified purchase type.
 *
 *  Value: "purchaseTypeUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_InAppProduct_PurchaseType_PurchaseTypeUnspecified;
/**
 *  In-app product with a recurring period.
 *
 *  Value: "subscription"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_InAppProduct_PurchaseType_Subscription;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_InAppProduct.status

/**
 *  The product is published and active in the store.
 *
 *  Value: "active"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_InAppProduct_Status_Active;
/**
 *  The product is not published and therefore inactive in the store.
 *
 *  Value: "inactive"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_InAppProduct_Status_Inactive;
/**
 *  Unspecified status.
 *
 *  Value: "statusUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_InAppProduct_Status_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_ManagedProductTaxAndComplianceSettings.eeaWithdrawalRightType

/** Value: "WITHDRAWAL_RIGHT_DIGITAL_CONTENT" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_ManagedProductTaxAndComplianceSettings_EeaWithdrawalRightType_WithdrawalRightDigitalContent;
/** Value: "WITHDRAWAL_RIGHT_SERVICE" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_ManagedProductTaxAndComplianceSettings_EeaWithdrawalRightType_WithdrawalRightService;
/** Value: "WITHDRAWAL_RIGHT_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_ManagedProductTaxAndComplianceSettings_EeaWithdrawalRightType_WithdrawalRightTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_PrepaidBasePlanType.timeExtension

/**
 *  Time extension is active. Users are allowed to top-up or extend their
 *  prepaid plan.
 *
 *  Value: "TIME_EXTENSION_ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_PrepaidBasePlanType_TimeExtension_TimeExtensionActive;
/**
 *  Time extension is inactive. Users cannot top-up or extend their prepaid
 *  plan.
 *
 *  Value: "TIME_EXTENSION_INACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_PrepaidBasePlanType_TimeExtension_TimeExtensionInactive;
/**
 *  Unspecified state.
 *
 *  Value: "TIME_EXTENSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_PrepaidBasePlanType_TimeExtension_TimeExtensionUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_RegionalTaxRateInfo.streamingTaxType

/**
 *  US-specific telecommunications tax tier for multi channel audio streaming
 *  like radio.
 *
 *  Value: "STREAMING_TAX_TYPE_TELCO_AUDIO_MULTI_CHANNEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_RegionalTaxRateInfo_StreamingTaxType_StreamingTaxTypeTelcoAudioMultiChannel;
/**
 *  US-specific telecommunications tax tier for audio streaming, rental /
 *  subscription.
 *
 *  Value: "STREAMING_TAX_TYPE_TELCO_AUDIO_RENTAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_RegionalTaxRateInfo_StreamingTaxType_StreamingTaxTypeTelcoAudioRental;
/**
 *  US-specific telecommunications tax tier for audio streaming, sale /
 *  permanent download.
 *
 *  Value: "STREAMING_TAX_TYPE_TELCO_AUDIO_SALES"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_RegionalTaxRateInfo_StreamingTaxType_StreamingTaxTypeTelcoAudioSales;
/**
 *  US-specific telecommunications tax tier for video streaming of multi-channel
 *  programming.
 *
 *  Value: "STREAMING_TAX_TYPE_TELCO_VIDEO_MULTI_CHANNEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_RegionalTaxRateInfo_StreamingTaxType_StreamingTaxTypeTelcoVideoMultiChannel;
/**
 *  US-specific telecommunications tax tier for video streaming, on demand,
 *  rentals / subscriptions / pay-per-view.
 *
 *  Value: "STREAMING_TAX_TYPE_TELCO_VIDEO_RENTAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_RegionalTaxRateInfo_StreamingTaxType_StreamingTaxTypeTelcoVideoRental;
/**
 *  US-specific telecommunications tax tier for video streaming of pre-recorded
 *  content like movies, tv shows.
 *
 *  Value: "STREAMING_TAX_TYPE_TELCO_VIDEO_SALES"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_RegionalTaxRateInfo_StreamingTaxType_StreamingTaxTypeTelcoVideoSales;
/**
 *  No telecommunications tax collected.
 *
 *  Value: "STREAMING_TAX_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_RegionalTaxRateInfo_StreamingTaxType_StreamingTaxTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_RegionalTaxRateInfo.taxTier

/** Value: "TAX_TIER_BOOKS_1" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_RegionalTaxRateInfo_TaxTier_TaxTierBooks1;
/** Value: "TAX_TIER_LIVE_OR_BROADCAST_1" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_RegionalTaxRateInfo_TaxTier_TaxTierLiveOrBroadcast1;
/** Value: "TAX_TIER_MUSIC_OR_AUDIO_1" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_RegionalTaxRateInfo_TaxTier_TaxTierMusicOrAudio1;
/** Value: "TAX_TIER_NEWS_1" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_RegionalTaxRateInfo_TaxTier_TaxTierNews1;
/** Value: "TAX_TIER_NEWS_2" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_RegionalTaxRateInfo_TaxTier_TaxTierNews2;
/** Value: "TAX_TIER_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_RegionalTaxRateInfo_TaxTier_TaxTierUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_SubscriptionItemPriceChangeDetails.priceChangeMode

/**
 *  Price change mode unspecified. This value should never be set.
 *
 *  Value: "PRICE_CHANGE_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionItemPriceChangeDetails_PriceChangeMode_PriceChangeModeUnspecified;
/**
 *  If the subscription price is decreasing.
 *
 *  Value: "PRICE_DECREASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionItemPriceChangeDetails_PriceChangeMode_PriceDecrease;
/**
 *  If the subscription price is increasing and the user needs to accept it.
 *
 *  Value: "PRICE_INCREASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionItemPriceChangeDetails_PriceChangeMode_PriceIncrease;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_SubscriptionItemPriceChangeDetails.priceChangeState

/**
 *  The price change is applied, i.e. the user has started being charged the new
 *  price.
 *
 *  Value: "APPLIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionItemPriceChangeDetails_PriceChangeState_Applied;
/**
 *  The price change is confirmed to happen for the user.
 *
 *  Value: "CONFIRMED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionItemPriceChangeDetails_PriceChangeState_Confirmed;
/**
 *  Waiting for the user to agree for the price change.
 *
 *  Value: "OUTSTANDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionItemPriceChangeDetails_PriceChangeState_Outstanding;
/**
 *  Price change state unspecified. This value should not be used.
 *
 *  Value: "PRICE_CHANGE_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionItemPriceChangeDetails_PriceChangeState_PriceChangeStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_SubscriptionOffer.state

/**
 *  The subscription offer is available to new and existing users.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionOffer_State_Active;
/**
 *  The subscription offer is not and has never been available to users.
 *
 *  Value: "DRAFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionOffer_State_Draft;
/**
 *  The subscription offer is not available to new users. Existing users retain
 *  access.
 *
 *  Value: "INACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionOffer_State_Inactive;
/**
 *  Default value, should never be used.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionOffer_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_SubscriptionPurchaseV2.acknowledgementState

/**
 *  The subscription is acknowledged.
 *
 *  Value: "ACKNOWLEDGEMENT_STATE_ACKNOWLEDGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionPurchaseV2_AcknowledgementState_AcknowledgementStateAcknowledged;
/**
 *  The subscription is not acknowledged yet.
 *
 *  Value: "ACKNOWLEDGEMENT_STATE_PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionPurchaseV2_AcknowledgementState_AcknowledgementStatePending;
/**
 *  Unspecified acknowledgement state.
 *
 *  Value: "ACKNOWLEDGEMENT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionPurchaseV2_AcknowledgementState_AcknowledgementStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_SubscriptionPurchaseV2.subscriptionState

/**
 *  Subscription is active. - (1) If the subscription is an auto renewing plan,
 *  at least one item is auto_renew_enabled and not expired. - (2) If the
 *  subscription is a prepaid plan, at least one item is not expired.
 *
 *  Value: "SUBSCRIPTION_STATE_ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionPurchaseV2_SubscriptionState_SubscriptionStateActive;
/**
 *  Subscription is canceled but not expired yet. The state is only available
 *  when the subscription is an auto renewing plan. All items have
 *  auto_renew_enabled set to false.
 *
 *  Value: "SUBSCRIPTION_STATE_CANCELED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionPurchaseV2_SubscriptionState_SubscriptionStateCanceled;
/**
 *  Subscription is expired. All items have expiry_time in the past.
 *
 *  Value: "SUBSCRIPTION_STATE_EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionPurchaseV2_SubscriptionState_SubscriptionStateExpired;
/**
 *  Subscription is in grace period. The state is only available when the
 *  subscription is an auto renewing plan. In this state, all items are in grace
 *  period.
 *
 *  Value: "SUBSCRIPTION_STATE_IN_GRACE_PERIOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionPurchaseV2_SubscriptionState_SubscriptionStateInGracePeriod;
/**
 *  Subscription is on hold (suspended). The state is only available when the
 *  subscription is an auto renewing plan. In this state, all items are on hold.
 *
 *  Value: "SUBSCRIPTION_STATE_ON_HOLD"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionPurchaseV2_SubscriptionState_SubscriptionStateOnHold;
/**
 *  Subscription is paused. The state is only available when the subscription is
 *  an auto renewing plan. In this state, all items are in paused state.
 *
 *  Value: "SUBSCRIPTION_STATE_PAUSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionPurchaseV2_SubscriptionState_SubscriptionStatePaused;
/**
 *  Subscription was created but awaiting payment during signup. In this state,
 *  all items are awaiting payment.
 *
 *  Value: "SUBSCRIPTION_STATE_PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionPurchaseV2_SubscriptionState_SubscriptionStatePending;
/**
 *  Unspecified subscription state.
 *
 *  Value: "SUBSCRIPTION_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionPurchaseV2_SubscriptionState_SubscriptionStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_SubscriptionTaxAndComplianceSettings.eeaWithdrawalRightType

/** Value: "WITHDRAWAL_RIGHT_DIGITAL_CONTENT" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionTaxAndComplianceSettings_EeaWithdrawalRightType_WithdrawalRightDigitalContent;
/** Value: "WITHDRAWAL_RIGHT_SERVICE" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionTaxAndComplianceSettings_EeaWithdrawalRightType_WithdrawalRightService;
/** Value: "WITHDRAWAL_RIGHT_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_SubscriptionTaxAndComplianceSettings_EeaWithdrawalRightType_WithdrawalRightTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_TrackRelease.status

/**
 *  The release will have no further changes. Its APKs are being served to all
 *  users, unless they are eligible to APKs of a more recent release.
 *
 *  Value: "completed"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_TrackRelease_Status_Completed;
/**
 *  The release's APKs are not being served to users.
 *
 *  Value: "draft"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_TrackRelease_Status_Draft;
/**
 *  The release's APKs will no longer be served to users. Users who already have
 *  these APKs are unaffected.
 *
 *  Value: "halted"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_TrackRelease_Status_Halted;
/**
 *  The release's APKs are being served to a fraction of users, determined by
 *  'user_fraction'.
 *
 *  Value: "inProgress"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_TrackRelease_Status_InProgress;
/**
 *  Unspecified status.
 *
 *  Value: "statusUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_TrackRelease_Status_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_User.accessState

/**
 *  Account access has expired.
 *
 *  Value: "ACCESS_EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_AccessState_AccessExpired;
/**
 *  User has accepted an invitation and has access to the Play Console.
 *
 *  Value: "ACCESS_GRANTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_AccessState_AccessGranted;
/**
 *  Unknown or unspecified access state.
 *
 *  Value: "ACCESS_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_AccessState_AccessStateUnspecified;
/**
 *  Invitation has expired.
 *
 *  Value: "INVITATION_EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_AccessState_InvitationExpired;
/**
 *  User is invited but has not yet accepted the invitation.
 *
 *  Value: "INVITED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_AccessState_Invited;

// ----------------------------------------------------------------------------
// GTLRAndroidPublisher_User.developerAccountPermissions

/**
 *  Choose whether apps are public, or only available to your organization.
 *
 *  Value: "CAN_CHANGE_MANAGED_PLAY_SETTING_GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_DeveloperAccountPermissions_CanChangeManagedPlaySettingGlobal;
/**
 *  Create and publish private apps to your organization.
 *
 *  Value: "CAN_CREATE_MANAGED_PLAY_APPS_GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_DeveloperAccountPermissions_CanCreateManagedPlayAppsGlobal;
/**
 *  Edit Play Games Services projects.
 *
 *  Value: "CAN_EDIT_GAMES_GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_DeveloperAccountPermissions_CanEditGamesGlobal;
/**
 *  Create, edit, and delete draft apps.
 *
 *  Value: "CAN_MANAGE_DRAFT_APPS_GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_DeveloperAccountPermissions_CanManageDraftAppsGlobal;
/**
 *  Manage orders and subscriptions.
 *
 *  Value: "CAN_MANAGE_ORDERS_GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_DeveloperAccountPermissions_CanManageOrdersGlobal;
/**
 *  Admin (all permissions).
 *
 *  Value: "CAN_MANAGE_PERMISSIONS_GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_DeveloperAccountPermissions_CanManagePermissionsGlobal;
/**
 *  Release to production, exclude devices, and use app signing by Google Play.
 *
 *  Value: "CAN_MANAGE_PUBLIC_APKS_GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_DeveloperAccountPermissions_CanManagePublicApksGlobal;
/**
 *  Manage store presence.
 *
 *  Value: "CAN_MANAGE_PUBLIC_LISTING_GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_DeveloperAccountPermissions_CanManagePublicListingGlobal;
/**
 *  Release to testing tracks.
 *
 *  Value: "CAN_MANAGE_TRACK_APKS_GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_DeveloperAccountPermissions_CanManageTrackApksGlobal;
/**
 *  Manage testing tracks and edit tester lists.
 *
 *  Value: "CAN_MANAGE_TRACK_USERS_GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_DeveloperAccountPermissions_CanManageTrackUsersGlobal;
/**
 *  Publish Play Games Services projects.
 *
 *  Value: "CAN_PUBLISH_GAMES_GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_DeveloperAccountPermissions_CanPublishGamesGlobal;
/**
 *  Reply to reviews.
 *
 *  Value: "CAN_REPLY_TO_REVIEWS_GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_DeveloperAccountPermissions_CanReplyToReviewsGlobal;
/**
 *  View app information and download bulk reports (read-only).
 *
 *  Value: "CAN_SEE_ALL_APPS"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_DeveloperAccountPermissions_CanSeeAllApps;
/**
 *  View financial data, orders, and cancellation survey responses.
 *
 *  Value: "CAN_VIEW_FINANCIAL_DATA_GLOBAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_DeveloperAccountPermissions_CanViewFinancialDataGlobal;
/**
 *  Unknown or unspecified permission.
 *
 *  Value: "DEVELOPER_LEVEL_PERMISSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisher_User_DeveloperAccountPermissions_DeveloperLevelPermissionUnspecified;

/**
 *  Represents a targeting rule of the form: User never had {scope} before.
 */
@interface GTLRAndroidPublisher_AcquisitionTargetingRule : GTLRObject

/**
 *  Required. The scope of subscriptions this rule considers. Only allows "this
 *  subscription" and "any subscription in app".
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_TargetingRuleScope *scope;

@end


/**
 *  Request message for ActivateBasePlan.
 */
@interface GTLRAndroidPublisher_ActivateBasePlanRequest : GTLRObject
@end


/**
 *  Request message for ActivateSubscriptionOffer.
 */
@interface GTLRAndroidPublisher_ActivateSubscriptionOfferRequest : GTLRObject
@end


/**
 *  Information about an APK. The resource for ApksService.
 */
@interface GTLRAndroidPublisher_Apk : GTLRObject

/** Information about the binary payload of this APK. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_ApkBinary *binary;

/**
 *  The version code of the APK, as specified in the manifest file.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionCode;

@end


/**
 *  Represents the binary payload of an APK.
 */
@interface GTLRAndroidPublisher_ApkBinary : GTLRObject

/**
 *  A sha1 hash of the APK payload, encoded as a hex string and matching the
 *  output of the sha1sum command.
 */
@property(nonatomic, copy, nullable) NSString *sha1;

/**
 *  A sha256 hash of the APK payload, encoded as a hex string and matching the
 *  output of the sha256sum command.
 */
@property(nonatomic, copy, nullable) NSString *sha256;

@end


/**
 *  Request to create a new externally hosted APK.
 */
@interface GTLRAndroidPublisher_ApksAddExternallyHostedRequest : GTLRObject

/** The definition of the externally-hosted APK and where it is located. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_ExternallyHostedApk *externallyHostedApk;

@end


/**
 *  Response for creating a new externally hosted APK.
 */
@interface GTLRAndroidPublisher_ApksAddExternallyHostedResponse : GTLRObject

/** The definition of the externally-hosted APK and where it is located. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_ExternallyHostedApk *externallyHostedApk;

@end


/**
 *  Response listing all APKs.
 */
@interface GTLRAndroidPublisher_ApksListResponse : GTLRObject

/** All APKs. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Apk *> *apks;

/** The kind of this response ("androidpublisher#apksListResponse"). */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  The app details. The resource for DetailsService.
 */
@interface GTLRAndroidPublisher_AppDetails : GTLRObject

/** The user-visible support email for this app. */
@property(nonatomic, copy, nullable) NSString *contactEmail;

/** The user-visible support telephone number for this app. */
@property(nonatomic, copy, nullable) NSString *contactPhone;

/** The user-visible website for this app. */
@property(nonatomic, copy, nullable) NSString *contactWebsite;

/** Default language code, in BCP 47 format (eg "en-US"). */
@property(nonatomic, copy, nullable) NSString *defaultLanguage;

@end


/**
 *  An app edit. The resource for EditsService.
 */
@interface GTLRAndroidPublisher_AppEdit : GTLRObject

/**
 *  Output only. The time (as seconds since Epoch) at which the edit will expire
 *  and will be no longer valid for use.
 */
@property(nonatomic, copy, nullable) NSString *expiryTimeSeconds;

/**
 *  Output only. Identifier of the edit. Can be used in subsequent API calls.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  Request message for ArchiveSubscription.
 */
@interface GTLRAndroidPublisher_ArchiveSubscriptionRequest : GTLRObject
@end


/**
 *  Represents a base plan that automatically renews at the end of its
 *  subscription period.
 */
@interface GTLRAndroidPublisher_AutoRenewingBasePlanType : GTLRObject

/**
 *  Required. Subscription period, specified in ISO 8601 format. For a list of
 *  acceptable billing periods, refer to the help center.
 */
@property(nonatomic, copy, nullable) NSString *billingPeriodDuration;

/**
 *  Grace period of the subscription, specified in ISO 8601 format. Acceptable
 *  values are P0D (zero days), P3D (3 days), P7D (7 days), P14D (14 days), and
 *  P30D (30 days). If not specified, a default value will be used based on the
 *  recurring period duration.
 */
@property(nonatomic, copy, nullable) NSString *gracePeriodDuration;

/**
 *  Whether the renewing base plan is backward compatible. The backward
 *  compatible base plan is returned by the Google Play Billing Library
 *  deprecated method querySkuDetailsAsync(). Only one renewing base plan can be
 *  marked as legacy compatible for a given subscription.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *legacyCompatible;

/**
 *  Subscription offer id which is legacy compatible. The backward compatible
 *  subscription offer is returned by the Google Play Billing Library deprecated
 *  method querySkuDetailsAsync(). Only one subscription offer can be marked as
 *  legacy compatible for a given renewing base plan. To have no Subscription
 *  offer as legacy compatible set this field as empty string.
 */
@property(nonatomic, copy, nullable) NSString *legacyCompatibleSubscriptionOfferId;

/**
 *  The proration mode for the base plan determines what happens when a user
 *  switches to this plan from another base plan. If unspecified, defaults to
 *  CHARGE_ON_NEXT_BILLING_DATE.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_AutoRenewingBasePlanType_ProrationMode_SubscriptionProrationModeChargeFullPriceImmediately
 *        Users will be charged for their new base plan immediately and in full.
 *        Any remaining period of their existing subscription will be used to
 *        extend the duration of the new billing plan. (Value:
 *        "SUBSCRIPTION_PRORATION_MODE_CHARGE_FULL_PRICE_IMMEDIATELY")
 *    @arg @c kGTLRAndroidPublisher_AutoRenewingBasePlanType_ProrationMode_SubscriptionProrationModeChargeOnNextBillingDate
 *        Users will be charged for their new base plan at the end of their
 *        current billing period. (Value:
 *        "SUBSCRIPTION_PRORATION_MODE_CHARGE_ON_NEXT_BILLING_DATE")
 *    @arg @c kGTLRAndroidPublisher_AutoRenewingBasePlanType_ProrationMode_SubscriptionProrationModeUnspecified
 *        Unspecified mode. (Value: "SUBSCRIPTION_PRORATION_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *prorationMode;

/**
 *  Whether users should be able to resubscribe to this base plan in Google Play
 *  surfaces. Defaults to RESUBSCRIBE_STATE_ACTIVE if not specified.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_AutoRenewingBasePlanType_ResubscribeState_ResubscribeStateActive
 *        Resubscribe is active. (Value: "RESUBSCRIBE_STATE_ACTIVE")
 *    @arg @c kGTLRAndroidPublisher_AutoRenewingBasePlanType_ResubscribeState_ResubscribeStateInactive
 *        Resubscribe is inactive. (Value: "RESUBSCRIBE_STATE_INACTIVE")
 *    @arg @c kGTLRAndroidPublisher_AutoRenewingBasePlanType_ResubscribeState_ResubscribeStateUnspecified
 *        Unspecified state. (Value: "RESUBSCRIBE_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *resubscribeState;

@end


/**
 *  Information related to an auto renewing plan.
 */
@interface GTLRAndroidPublisher_AutoRenewingPlan : GTLRObject

/**
 *  If the subscription is currently set to auto-renew, e.g. the user has not
 *  canceled the subscription
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoRenewEnabled;

/**
 *  The information of the last price change for the item since subscription
 *  signup.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_SubscriptionItemPriceChangeDetails *priceChangeDetails;

@end


/**
 *  A single base plan for a subscription.
 */
@interface GTLRAndroidPublisher_BasePlan : GTLRObject

/** Set when the base plan automatically renews at a regular interval. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_AutoRenewingBasePlanType *autoRenewingBasePlanType;

/**
 *  Required. Immutable. The unique identifier of this base plan. Must be unique
 *  within the subscription, and conform with RFC-1034. That is, this ID can
 *  only contain lower-case letters (a-z), numbers (0-9), and hyphens (-), and
 *  be at most 63 characters.
 */
@property(nonatomic, copy, nullable) NSString *basePlanId;

/**
 *  List of up to 20 custom tags specified for this base plan, and returned to
 *  the app through the billing library. Subscription offers for this base plan
 *  will also receive these offer tags in the billing library.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_OfferTag *> *offerTags;

/**
 *  Pricing information for any new locations Play may launch in the future. If
 *  omitted, the BasePlan will not be automatically available any new locations
 *  Play may launch in the future.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_OtherRegionsBasePlanConfig *otherRegionsConfig;

/**
 *  Set when the base plan does not automatically renew at the end of the
 *  billing period.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_PrepaidBasePlanType *prepaidBasePlanType;

/** Region-specific information for this base plan. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_RegionalBasePlanConfig *> *regionalConfigs;

/**
 *  Output only. The state of the base plan, i.e. whether it's active. Draft and
 *  inactive base plans can be activated or deleted. Active base plans can be
 *  made inactive. Inactive base plans can be canceled. This field cannot be
 *  changed by updating the resource. Use the dedicated endpoints instead.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_BasePlan_State_Active The base plan is
 *        active and available for new subscribers. (Value: "ACTIVE")
 *    @arg @c kGTLRAndroidPublisher_BasePlan_State_Draft The base plan is
 *        currently in a draft state, and hasn't been activated. It can be
 *        safely deleted at this point. (Value: "DRAFT")
 *    @arg @c kGTLRAndroidPublisher_BasePlan_State_Inactive The base plan is
 *        inactive and only available for existing subscribers. (Value:
 *        "INACTIVE")
 *    @arg @c kGTLRAndroidPublisher_BasePlan_State_StateUnspecified Unspecified
 *        state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Information about an app bundle. The resource for BundlesService.
 */
@interface GTLRAndroidPublisher_Bundle : GTLRObject

/**
 *  A sha1 hash of the upload payload, encoded as a hex string and matching the
 *  output of the sha1sum command.
 */
@property(nonatomic, copy, nullable) NSString *sha1;

/**
 *  A sha256 hash of the upload payload, encoded as a hex string and matching
 *  the output of the sha256sum command.
 */
@property(nonatomic, copy, nullable) NSString *sha256;

/**
 *  The version code of the Android App Bundle, as specified in the Android App
 *  Bundle's base module APK manifest file.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionCode;

@end


/**
 *  Response listing all app bundles.
 */
@interface GTLRAndroidPublisher_BundlesListResponse : GTLRObject

/** All app bundles. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Bundle *> *bundles;

/** The kind of this response ("androidpublisher#bundlesListResponse"). */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Information specific to a subscription in canceled state.
 */
@interface GTLRAndroidPublisher_CanceledStateContext : GTLRObject

/** Subscription was canceled by the developer. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_DeveloperInitiatedCancellation *developerInitiatedCancellation;

/** Subscription was replaced by a new subscription. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_ReplacementCancellation *replacementCancellation;

/**
 *  Subscription was canceled by the system, for example because of a billing
 *  problem.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_SystemInitiatedCancellation *systemInitiatedCancellation;

/** Subscription was canceled by user. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_UserInitiatedCancellation *userInitiatedCancellation;

@end


/**
 *  Result of the cancel survey when the subscription was canceled by the user.
 */
@interface GTLRAndroidPublisher_CancelSurveyResult : GTLRObject

/**
 *  The reason the user selected in the cancel survey.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_CancelSurveyResult_Reason_CancelSurveyReasonCostRelated
 *        Cost related issues. (Value: "CANCEL_SURVEY_REASON_COST_RELATED")
 *    @arg @c kGTLRAndroidPublisher_CancelSurveyResult_Reason_CancelSurveyReasonFoundBetterApp
 *        The user found a better app. (Value:
 *        "CANCEL_SURVEY_REASON_FOUND_BETTER_APP")
 *    @arg @c kGTLRAndroidPublisher_CancelSurveyResult_Reason_CancelSurveyReasonNotEnoughUsage
 *        Not enough usage of the subscription. (Value:
 *        "CANCEL_SURVEY_REASON_NOT_ENOUGH_USAGE")
 *    @arg @c kGTLRAndroidPublisher_CancelSurveyResult_Reason_CancelSurveyReasonOthers
 *        Other reasons. (Value: "CANCEL_SURVEY_REASON_OTHERS")
 *    @arg @c kGTLRAndroidPublisher_CancelSurveyResult_Reason_CancelSurveyReasonTechnicalIssues
 *        Technical issues while using the app. (Value:
 *        "CANCEL_SURVEY_REASON_TECHNICAL_ISSUES")
 *    @arg @c kGTLRAndroidPublisher_CancelSurveyResult_Reason_CancelSurveyReasonUnspecified
 *        Unspecified cancel survey reason. (Value:
 *        "CANCEL_SURVEY_REASON_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *reason;

/**
 *  Only set for CANCEL_SURVEY_REASON_OTHERS. This is the user's freeform
 *  response to the survey.
 */
@property(nonatomic, copy, nullable) NSString *reasonUserInput;

@end


/**
 *  An entry of conversation between user and developer.
 */
@interface GTLRAndroidPublisher_Comment : GTLRObject

/** A comment from a developer. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_DeveloperComment *developerComment;

/** A comment from a user. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_UserComment *userComment;

@end


/**
 *  Converted other regions prices.
 */
@interface GTLRAndroidPublisher_ConvertedOtherRegionsPrice : GTLRObject

/**
 *  Price in EUR to use for the "Other regions" location exclusive of taxes.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Money *eurPrice;

/**
 *  Price in USD to use for the "Other regions" location exclusive of taxes.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Money *usdPrice;

@end


/**
 *  A converted region price.
 */
@interface GTLRAndroidPublisher_ConvertedRegionPrice : GTLRObject

/** The converted price tax inclusive. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Money *price;

/** The region code of the region. */
@property(nonatomic, copy, nullable) NSString *regionCode;

/** The tax amount of the converted price. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Money *taxAmount;

@end


/**
 *  Request message for ConvertRegionPrices.
 */
@interface GTLRAndroidPublisher_ConvertRegionPricesRequest : GTLRObject

/** The intital price to convert other regions from. Tax exclusive. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Money *price;

@end


/**
 *  Response message for ConvertRegionPrices.
 */
@interface GTLRAndroidPublisher_ConvertRegionPricesResponse : GTLRObject

/**
 *  Converted other regions prices in USD and EUR, to use for countries where
 *  Play doesn't support a country's local currency.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_ConvertedOtherRegionsPrice *convertedOtherRegionsPrice;

/** Map from region code to converted region price. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_ConvertRegionPricesResponse_ConvertedRegionPrices *convertedRegionPrices;

@end


/**
 *  Map from region code to converted region price.
 *
 *  @note This class is documented as having more properties of
 *        GTLRAndroidPublisher_ConvertedRegionPrice. Use @c -additionalJSONKeys
 *        and @c -additionalPropertyForName: to get the list of properties and
 *        then fetch them; or @c -additionalProperties to fetch them all at
 *        once.
 */
@interface GTLRAndroidPublisher_ConvertRegionPricesResponse_ConvertedRegionPrices : GTLRObject
@end


/**
 *  Country targeting specification.
 */
@interface GTLRAndroidPublisher_CountryTargeting : GTLRObject

/**
 *  Countries to target, specified as two letter [CLDR
 *  codes](https://unicode.org/cldr/charts/latest/supplemental/territory_containment_un_m_49.html).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *countries;

/**
 *  Include "rest of world" as well as explicitly targeted countries.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeRestOfWorld;

@end


/**
 *  Request message for DeactivateBasePlan.
 */
@interface GTLRAndroidPublisher_DeactivateBasePlanRequest : GTLRObject
@end


/**
 *  Request message for DeactivateSubscriptionOffer.
 */
@interface GTLRAndroidPublisher_DeactivateSubscriptionOfferRequest : GTLRObject
@end


/**
 *  Represents a deobfuscation file.
 */
@interface GTLRAndroidPublisher_DeobfuscationFile : GTLRObject

/**
 *  The type of the deobfuscation file.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_DeobfuscationFile_SymbolType_DeobfuscationFileTypeUnspecified
 *        Unspecified deobfuscation file type. (Value:
 *        "deobfuscationFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisher_DeobfuscationFile_SymbolType_NativeCode
 *        Native debugging symbols file type. (Value: "nativeCode")
 *    @arg @c kGTLRAndroidPublisher_DeobfuscationFile_SymbolType_Proguard
 *        Proguard deobfuscation file type. (Value: "proguard")
 */
@property(nonatomic, copy, nullable) NSString *symbolType;

@end


/**
 *  Responses for the upload.
 */
@interface GTLRAndroidPublisher_DeobfuscationFilesUploadResponse : GTLRObject

/** The uploaded Deobfuscation File configuration. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_DeobfuscationFile *deobfuscationFile;

@end


/**
 *  Developer entry from conversation between user and developer.
 */
@interface GTLRAndroidPublisher_DeveloperComment : GTLRObject

/** The last time at which this comment was updated. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Timestamp *lastModified;

/** The content of the comment, i.e. reply body. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Information specific to cancellations initiated by developers.
 */
@interface GTLRAndroidPublisher_DeveloperInitiatedCancellation : GTLRObject
@end


/**
 *  LINT.IfChange A group of devices. A group is defined by a set of device
 *  selectors. A device belongs to the group if it matches any selector (logical
 *  OR).
 */
@interface GTLRAndroidPublisher_DeviceGroup : GTLRObject

/**
 *  Device selectors for this group. A device matching any of the selectors is
 *  included in this group.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_DeviceSelector *> *deviceSelectors;

/** The name of the group. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Identifier of a device.
 */
@interface GTLRAndroidPublisher_DeviceId : GTLRObject

/** Value of Build.BRAND. */
@property(nonatomic, copy, nullable) NSString *buildBrand;

/** Value of Build.DEVICE. */
@property(nonatomic, copy, nullable) NSString *buildDevice;

@end


/**
 *  Characteristics of the user's device.
 */
@interface GTLRAndroidPublisher_DeviceMetadata : GTLRObject

/** Device CPU make, e.g. "Qualcomm" */
@property(nonatomic, copy, nullable) NSString *cpuMake;

/** Device CPU model, e.g. "MSM8974" */
@property(nonatomic, copy, nullable) NSString *cpuModel;

/** Device class (e.g. tablet) */
@property(nonatomic, copy, nullable) NSString *deviceClass;

/**
 *  OpenGL version
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *glEsVersion;

/** Device manufacturer (e.g. Motorola) */
@property(nonatomic, copy, nullable) NSString *manufacturer;

/** Comma separated list of native platforms (e.g. "arm", "arm7") */
@property(nonatomic, copy, nullable) NSString *nativePlatform;

/** Device model name (e.g. Droid) */
@property(nonatomic, copy, nullable) NSString *productName;

/**
 *  Device RAM in Megabytes, e.g. "2048"
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ramMb;

/**
 *  Screen density in DPI
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenDensityDpi;

/**
 *  Screen height in pixels
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenHeightPx;

/**
 *  Screen width in pixels
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenWidthPx;

@end


/**
 *  Conditions about a device's RAM capabilities.
 */
@interface GTLRAndroidPublisher_DeviceRam : GTLRObject

/**
 *  Maximum RAM in bytes (bound excluded).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxBytes;

/**
 *  Minimum RAM in bytes (bound included).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minBytes;

@end


/**
 *  Selector for a device group. A selector consists of a set of conditions on
 *  the device that should all match (logical AND) to determine a device group
 *  eligibility. For instance, if a selector specifies RAM conditions, device
 *  model inclusion and device model exclusion, a device is considered to match
 *  if: device matches RAM conditions AND device matches one of the included
 *  device models AND device doesn't match excluded device models
 */
@interface GTLRAndroidPublisher_DeviceSelector : GTLRObject

/** Conditions on the device's RAM. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_DeviceRam *deviceRam;

/**
 *  Device models excluded by this selector, even if they match all other
 *  conditions.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_DeviceId *> *excludedDeviceIds;

/**
 *  A device that has any of these system features is excluded by this selector,
 *  even if it matches all other conditions.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_SystemFeature *> *forbiddenSystemFeatures;

/** Device models included by this selector. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_DeviceId *> *includedDeviceIds;

/**
 *  A device needs to have all these system features to be included by the
 *  selector.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_SystemFeature *> *requiredSystemFeatures;

@end


/**
 *  The device spec used to generate a system APK.
 */
@interface GTLRAndroidPublisher_DeviceSpec : GTLRObject

/**
 *  Screen dpi.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *screenDensity;

/**
 *  Supported ABI architectures in the order of preference. The values should be
 *  the string as reported by the platform, e.g. "armeabi-v7a", "x86_64".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedAbis;

/** All installed locales represented as BCP-47 strings, e.g. "en-US". */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedLocales;

@end


/**
 *  A single device tier. Devices matching any of the device groups in
 *  device_group_names are considered to match the tier.
 */
@interface GTLRAndroidPublisher_DeviceTier : GTLRObject

/**
 *  Groups of devices included in this tier. These groups must be defined
 *  explicitly under device_groups in this configuration.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *deviceGroupNames;

/**
 *  The priority level of the tier. Tiers are evaluated in descending order of
 *  level: the highest level tier has the highest priority. The highest tier
 *  matching a given device is selected for that device. You should use a
 *  contiguous range of levels for your tiers in a tier set; tier levels in a
 *  tier set must be unique. For instance, if your tier set has 4 tiers
 *  (including the global fallback), you should define tiers 1, 2 and 3 in this
 *  configuration. Note: tier 0 is implicitly defined as a global fallback and
 *  selected for devices that don't match any of the tiers explicitly defined
 *  here. You mustn't define level 0 explicitly in this configuration.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *level;

@end


/**
 *  LINT.IfChange Configuration describing device targeting criteria for the
 *  content of an app.
 */
@interface GTLRAndroidPublisher_DeviceTierConfig : GTLRObject

/** Definition of device groups for the app. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_DeviceGroup *> *deviceGroups;

/**
 *  Output only. The device tier config ID.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deviceTierConfigId;

/** Definition of the set of device tiers for the app. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_DeviceTierSet *deviceTierSet;

@end


/**
 *  A set of device tiers. A tier set determines what variation of app content
 *  gets served to a specific device, for device-targeted content. You should
 *  assign a priority level to each tier, which determines the ordering by which
 *  they are evaluated by Play. See the documentation of DeviceTier.level for
 *  more details.
 */
@interface GTLRAndroidPublisher_DeviceTierSet : GTLRObject

/** Device tiers belonging to the set. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_DeviceTier *> *deviceTiers;

@end


/**
 *  An expansion file. The resource for ExpansionFilesService.
 */
@interface GTLRAndroidPublisher_ExpansionFile : GTLRObject

/**
 *  If set, this field indicates that this APK has an expansion file uploaded to
 *  it: this APK does not reference another APK's expansion file. The field's
 *  value is the size of the uploaded expansion file in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fileSize;

/**
 *  If set, this APK's expansion file references another APK's expansion file.
 *  The file_size field will not be set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *referencesVersion;

@end


/**
 *  Response for uploading an expansion file.
 */
@interface GTLRAndroidPublisher_ExpansionFilesUploadResponse : GTLRObject

/** The uploaded expansion file configuration. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_ExpansionFile *expansionFile;

@end


/**
 *  User account identifier in the third-party service.
 */
@interface GTLRAndroidPublisher_ExternalAccountIdentifiers : GTLRObject

/**
 *  User account identifier in the third-party service. Only present if account
 *  linking happened as part of the subscription purchase flow.
 */
@property(nonatomic, copy, nullable) NSString *externalAccountId;

/**
 *  An obfuscated version of the id that is uniquely associated with the user's
 *  account in your app. Present for the following purchases: * If account
 *  linking happened as part of the subscription purchase flow. * It was
 *  specified using
 *  https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedaccountid
 *  when the purchase was made.
 */
@property(nonatomic, copy, nullable) NSString *obfuscatedExternalAccountId;

/**
 *  An obfuscated version of the id that is uniquely associated with the user's
 *  profile in your app. Only present if specified using
 *  https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedprofileid
 *  when the purchase was made.
 */
@property(nonatomic, copy, nullable) NSString *obfuscatedExternalProfileId;

@end


/**
 *  Defines an APK available for this application that is hosted externally and
 *  not uploaded to Google Play. This function is only available to
 *  organizations using Managed Play whose application is configured to restrict
 *  distribution to the organizations.
 */
@interface GTLRAndroidPublisher_ExternallyHostedApk : GTLRObject

/** The application label. */
@property(nonatomic, copy, nullable) NSString *applicationLabel;

/**
 *  A certificate (or array of certificates if a certificate-chain is used) used
 *  to sign this APK, represented as a base64 encoded byte array.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *certificateBase64s;

/** The URL at which the APK is hosted. This must be an https URL. */
@property(nonatomic, copy, nullable) NSString *externallyHostedUrl;

/**
 *  The sha1 checksum of this APK, represented as a base64 encoded byte array.
 */
@property(nonatomic, copy, nullable) NSString *fileSha1Base64;

/**
 *  The sha256 checksum of this APK, represented as a base64 encoded byte array.
 */
@property(nonatomic, copy, nullable) NSString *fileSha256Base64;

/**
 *  The file size in bytes of this APK.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fileSize;

/** The icon image from the APK, as a base64 encoded byte array. */
@property(nonatomic, copy, nullable) NSString *iconBase64;

/**
 *  The maximum SDK supported by this APK (optional).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maximumSdk;

/**
 *  The minimum SDK targeted by this APK.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minimumSdk;

/** The native code environments supported by this APK (optional). */
@property(nonatomic, strong, nullable) NSArray<NSString *> *nativeCodes;

/** The package name. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The features required by this APK (optional). */
@property(nonatomic, strong, nullable) NSArray<NSString *> *usesFeatures;

/** The permissions requested by this APK. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_UsesPermission *> *usesPermissions;

/**
 *  The version code of this APK.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionCode;

/** The version name of this APK. */
@property(nonatomic, copy, nullable) NSString *versionName;

@end


/**
 *  Response to list generated APKs.
 */
@interface GTLRAndroidPublisher_GeneratedApksListResponse : GTLRObject

/** All generated APKs, grouped by the APK signing key. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_GeneratedApksPerSigningKey *> *generatedApks;

@end


/**
 *  Download metadata for split, standalone and universal APKs, as well as asset
 *  pack slices, signed with a given key.
 */
@interface GTLRAndroidPublisher_GeneratedApksPerSigningKey : GTLRObject

/** SHA256 hash of the APK signing public key certificate. */
@property(nonatomic, copy, nullable) NSString *certificateSha256Hash;

/**
 *  List of asset pack slices which will be served for this app bundle, signed
 *  with a key corresponding to certificate_sha256_hash.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_GeneratedAssetPackSlice *> *generatedAssetPackSlices;

/**
 *  List of generated split APKs, signed with a key corresponding to
 *  certificate_sha256_hash.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_GeneratedSplitApk *> *generatedSplitApks;

/**
 *  List of generated standalone APKs, signed with a key corresponding to
 *  certificate_sha256_hash.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_GeneratedStandaloneApk *> *generatedStandaloneApks;

/**
 *  Generated universal APK, signed with a key corresponding to
 *  certificate_sha256_hash. This field is not set if no universal APK was
 *  generated for this signing key.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_GeneratedUniversalApk *generatedUniversalApk;

@end


/**
 *  Download metadata for an asset pack slice.
 */
@interface GTLRAndroidPublisher_GeneratedAssetPackSlice : GTLRObject

/**
 *  Download ID, which uniquely identifies the APK to download. Should be
 *  supplied to `generatedapks.download` method.
 */
@property(nonatomic, copy, nullable) NSString *downloadId;

/** Name of the module that this asset slice belongs to. */
@property(nonatomic, copy, nullable) NSString *moduleName;

/** Asset slice ID. */
@property(nonatomic, copy, nullable) NSString *sliceId;

/**
 *  Asset module version.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Download metadata for a split APK.
 */
@interface GTLRAndroidPublisher_GeneratedSplitApk : GTLRObject

/**
 *  Download ID, which uniquely identifies the APK to download. Should be
 *  supplied to `generatedapks.download` method.
 */
@property(nonatomic, copy, nullable) NSString *downloadId;

/** Name of the module that this APK belongs to. */
@property(nonatomic, copy, nullable) NSString *moduleName;

/** Split ID. Empty for the main split of the base module. */
@property(nonatomic, copy, nullable) NSString *splitId;

/**
 *  ID of the generated variant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *variantId;

@end


/**
 *  Download metadata for a standalone APK.
 */
@interface GTLRAndroidPublisher_GeneratedStandaloneApk : GTLRObject

/**
 *  Download ID, which uniquely identifies the APK to download. Should be
 *  supplied to `generatedapks.download` method.
 */
@property(nonatomic, copy, nullable) NSString *downloadId;

/**
 *  ID of the generated variant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *variantId;

@end


/**
 *  Download metadata for a universal APK.
 */
@interface GTLRAndroidPublisher_GeneratedUniversalApk : GTLRObject

/**
 *  Download ID, which uniquely identifies the APK to download. Should be
 *  supplied to `generatedapks.download` method.
 */
@property(nonatomic, copy, nullable) NSString *downloadId;

@end


/**
 *  An access grant resource.
 */
@interface GTLRAndroidPublisher_Grant : GTLRObject

/** The permissions granted to the user for this app. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *appLevelPermissions;

/**
 *  Required. Resource name for this grant, following the pattern
 *  "developers/{developer}/users/{email}/grants/{package_name}". If this grant
 *  is for a draft app, the app ID will be used in this resource name instead of
 *  the package name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Immutable. The package name of the app. This will be empty for draft apps.
 */
@property(nonatomic, copy, nullable) NSString *packageName;

@end


/**
 *  An uploaded image. The resource for ImagesService.
 */
@interface GTLRAndroidPublisher_Image : GTLRObject

/**
 *  A unique id representing this image.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** A sha1 hash of the image. */
@property(nonatomic, copy, nullable) NSString *sha1;

/** A sha256 hash of the image. */
@property(nonatomic, copy, nullable) NSString *sha256;

/** A URL that will serve a preview of the image. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Response for deleting all images.
 */
@interface GTLRAndroidPublisher_ImagesDeleteAllResponse : GTLRObject

/** The deleted images. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Image *> *deleted;

@end


/**
 *  Response listing all images.
 */
@interface GTLRAndroidPublisher_ImagesListResponse : GTLRObject

/** All listed Images. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Image *> *images;

@end


/**
 *  Response for uploading an image.
 */
@interface GTLRAndroidPublisher_ImagesUploadResponse : GTLRObject

/** The uploaded image. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Image *image;

@end


/**
 *  An in-app product. The resource for InappproductsService.
 */
@interface GTLRAndroidPublisher_InAppProduct : GTLRObject

/**
 *  Default language of the localized data, as defined by BCP-47. e.g. "en-US".
 */
@property(nonatomic, copy, nullable) NSString *defaultLanguage;

/**
 *  Default price. Cannot be zero, as in-app products are never free. Always in
 *  the developer's Checkout merchant currency.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Price *defaultPrice;

/**
 *  Grace period of the subscription, specified in ISO 8601 format. Allows
 *  developers to give their subscribers a grace period when the payment for the
 *  new recurrence period is declined. Acceptable values are P0D (zero days),
 *  P3D (three days), P7D (seven days), P14D (14 days), and P30D (30 days).
 */
@property(nonatomic, copy, nullable) NSString *gracePeriod;

/**
 *  List of localized title and description data. Map key is the language of the
 *  localized data, as defined by BCP-47, e.g. "en-US".
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_InAppProduct_Listings *listings;

/**
 *  Details about taxes and legal compliance. Only applicable to managed
 *  products.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_ManagedProductTaxAndComplianceSettings *managedProductTaxesAndComplianceSettings;

/** Package name of the parent app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Prices per buyer region. None of these can be zero, as in-app products are
 *  never free. Map key is region code, as defined by ISO 3166-2.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_InAppProduct_Prices *prices;

/**
 *  The type of the product, e.g. a recurring subscription.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_InAppProduct_PurchaseType_ManagedUser The
 *        default product type - one time purchase. (Value: "managedUser")
 *    @arg @c kGTLRAndroidPublisher_InAppProduct_PurchaseType_PurchaseTypeUnspecified
 *        Unspecified purchase type. (Value: "purchaseTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisher_InAppProduct_PurchaseType_Subscription
 *        In-app product with a recurring period. (Value: "subscription")
 */
@property(nonatomic, copy, nullable) NSString *purchaseType;

/** Stock-keeping-unit (SKU) of the product, unique within an app. */
@property(nonatomic, copy, nullable) NSString *sku;

/**
 *  The status of the product, e.g. whether it's active.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_InAppProduct_Status_Active The product is
 *        published and active in the store. (Value: "active")
 *    @arg @c kGTLRAndroidPublisher_InAppProduct_Status_Inactive The product is
 *        not published and therefore inactive in the store. (Value: "inactive")
 *    @arg @c kGTLRAndroidPublisher_InAppProduct_Status_StatusUnspecified
 *        Unspecified status. (Value: "statusUnspecified")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Subscription period, specified in ISO 8601 format. Acceptable values are P1W
 *  (one week), P1M (one month), P3M (three months), P6M (six months), and P1Y
 *  (one year).
 */
@property(nonatomic, copy, nullable) NSString *subscriptionPeriod;

/**
 *  Details about taxes and legal compliance. Only applicable to subscription
 *  products.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_SubscriptionTaxAndComplianceSettings *subscriptionTaxesAndComplianceSettings;

/**
 *  Trial period, specified in ISO 8601 format. Acceptable values are anything
 *  between P7D (seven days) and P999D (999 days).
 */
@property(nonatomic, copy, nullable) NSString *trialPeriod;

@end


/**
 *  List of localized title and description data. Map key is the language of the
 *  localized data, as defined by BCP-47, e.g. "en-US".
 *
 *  @note This class is documented as having more properties of
 *        GTLRAndroidPublisher_InAppProductListing. Use @c -additionalJSONKeys
 *        and @c -additionalPropertyForName: to get the list of properties and
 *        then fetch them; or @c -additionalProperties to fetch them all at
 *        once.
 */
@interface GTLRAndroidPublisher_InAppProduct_Listings : GTLRObject
@end


/**
 *  Prices per buyer region. None of these can be zero, as in-app products are
 *  never free. Map key is region code, as defined by ISO 3166-2.
 *
 *  @note This class is documented as having more properties of
 *        GTLRAndroidPublisher_Price. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRAndroidPublisher_InAppProduct_Prices : GTLRObject
@end


/**
 *  Store listing of a single in-app product.
 */
@interface GTLRAndroidPublisher_InAppProductListing : GTLRObject

/** Localized entitlement benefits for a subscription. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *benefits;

/**
 *  Description for the store listing.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Title for the store listing. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Response listing all in-app products.
 */
@interface GTLRAndroidPublisher_InappproductsListResponse : GTLRObject

/** All in-app products. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_InAppProduct *> *inappproduct;

/**
 *  The kind of this response ("androidpublisher#inappproductsListResponse").
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Deprecated and unset. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_PageInfo *pageInfo;

/** Pagination token, to handle a number of products that is over one page. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_TokenPagination *tokenPagination;

@end


/**
 *  An artifact resource which gets created when uploading an APK or Android App
 *  Bundle through internal app sharing.
 */
@interface GTLRAndroidPublisher_InternalAppSharingArtifact : GTLRObject

/**
 *  The sha256 fingerprint of the certificate used to sign the generated
 *  artifact.
 */
@property(nonatomic, copy, nullable) NSString *certificateFingerprint;

/**
 *  The download URL generated for the uploaded artifact. Users that are
 *  authorized to download can follow the link to the Play Store app to install
 *  it.
 */
@property(nonatomic, copy, nullable) NSString *downloadUrl;

/**
 *  The sha256 hash of the artifact represented as a lowercase hexadecimal
 *  number, matching the output of the sha256sum command.
 */
@property(nonatomic, copy, nullable) NSString *sha256;

@end


/**
 *  Contains the introductory price information for a subscription.
 */
@interface GTLRAndroidPublisher_IntroductoryPriceInfo : GTLRObject

/**
 *  Introductory price of the subscription, not including tax. The currency is
 *  the same as price_currency_code. Price is expressed in micro-units, where
 *  1,000,000 micro-units represents one unit of the currency. For example, if
 *  the subscription price is €1.99, price_amount_micros is 1990000.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *introductoryPriceAmountMicros;

/**
 *  ISO 4217 currency code for the introductory subscription price. For example,
 *  if the price is specified in British pounds sterling, price_currency_code is
 *  "GBP".
 */
@property(nonatomic, copy, nullable) NSString *introductoryPriceCurrencyCode;

/**
 *  The number of billing period to offer introductory pricing.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *introductoryPriceCycles;

/**
 *  Introductory price period, specified in ISO 8601 format. Common values are
 *  (but not limited to) "P1W" (one week), "P1M" (one month), "P3M" (three
 *  months), "P6M" (six months), and "P1Y" (one year).
 */
@property(nonatomic, copy, nullable) NSString *introductoryPricePeriod;

@end


/**
 *  Response listing existing device tier configs.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "deviceTierConfigs" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRAndroidPublisher_ListDeviceTierConfigsResponse : GTLRCollectionObject

/**
 *  Device tier configs created by the developer.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_DeviceTierConfig *> *deviceTierConfigs;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  A localized store listing. The resource for ListingsService.
 */
@interface GTLRAndroidPublisher_Listing : GTLRObject

/** Full description of the app. */
@property(nonatomic, copy, nullable) NSString *fullDescription;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German).
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Short description of the app. */
@property(nonatomic, copy, nullable) NSString *shortDescription;

/** Localized title of the app. */
@property(nonatomic, copy, nullable) NSString *title;

/** URL of a promotional YouTube video for the app. */
@property(nonatomic, copy, nullable) NSString *video;

@end


/**
 *  Response listing all localized listings.
 */
@interface GTLRAndroidPublisher_ListingsListResponse : GTLRObject

/** The kind of this response ("androidpublisher#listingsListResponse"). */
@property(nonatomic, copy, nullable) NSString *kind;

/** All localized listings. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Listing *> *listings;

@end


/**
 *  Response message for ListSubscriptionOffers.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "subscriptionOffers" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRAndroidPublisher_ListSubscriptionOffersResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The subscription offers from the specified subscription.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_SubscriptionOffer *> *subscriptionOffers;

@end


/**
 *  Response message for ListSubscriptions.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "subscriptions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAndroidPublisher_ListSubscriptionsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The subscriptions from the specified app.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Subscription *> *subscriptions;

@end


/**
 *  A response containing one or more users with access to an account.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "users" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRAndroidPublisher_ListUsersResponse : GTLRCollectionObject

/**
 *  A token to pass to subsequent calls in order to retrieve subsequent results.
 *  This will not be set if there are no more results to return.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The resulting users.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_User *> *users;

@end


/**
 *  Localized text in given language.
 */
@interface GTLRAndroidPublisher_LocalizedText : GTLRObject

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German).
 */
@property(nonatomic, copy, nullable) NSString *language;

/** The text in the given language. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Details about taxation and legal compliance for managed products.
 */
@interface GTLRAndroidPublisher_ManagedProductTaxAndComplianceSettings : GTLRObject

/**
 *  Digital content or service classification for products distributed to users
 *  in the European Economic Area (EEA). The withdrawal regime under EEA
 *  consumer laws depends on this classification. Refer to the [Help Center
 *  article](https://support.google.com/googleplay/android-developer/answer/10463498)
 *  for more information.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_ManagedProductTaxAndComplianceSettings_EeaWithdrawalRightType_WithdrawalRightDigitalContent
 *        Value "WITHDRAWAL_RIGHT_DIGITAL_CONTENT"
 *    @arg @c kGTLRAndroidPublisher_ManagedProductTaxAndComplianceSettings_EeaWithdrawalRightType_WithdrawalRightService
 *        Value "WITHDRAWAL_RIGHT_SERVICE"
 *    @arg @c kGTLRAndroidPublisher_ManagedProductTaxAndComplianceSettings_EeaWithdrawalRightType_WithdrawalRightTypeUnspecified
 *        Value "WITHDRAWAL_RIGHT_TYPE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *eeaWithdrawalRightType;

/**
 *  A mapping from region code to tax rate details. The keys are region codes as
 *  defined by Unicode's "CLDR".
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_ManagedProductTaxAndComplianceSettings_TaxRateInfoByRegionCode *taxRateInfoByRegionCode;

@end


/**
 *  A mapping from region code to tax rate details. The keys are region codes as
 *  defined by Unicode's "CLDR".
 *
 *  @note This class is documented as having more properties of
 *        GTLRAndroidPublisher_RegionalTaxRateInfo. Use @c -additionalJSONKeys
 *        and @c -additionalPropertyForName: to get the list of properties and
 *        then fetch them; or @c -additionalProperties to fetch them all at
 *        once.
 */
@interface GTLRAndroidPublisher_ManagedProductTaxAndComplianceSettings_TaxRateInfoByRegionCode : GTLRObject
@end


/**
 *  Request message for MigrateBasePlanPrices.
 */
@interface GTLRAndroidPublisher_MigrateBasePlanPricesRequest : GTLRObject

/** Required. The regional prices to update. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_RegionalPriceMigrationConfig *> *regionalPriceMigrations;

/**
 *  Required. The version of the available regions being used for the
 *  regional_price_migrations.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_RegionsVersion *regionsVersion;

@end


/**
 *  Response message for MigrateBasePlanPrices.
 */
@interface GTLRAndroidPublisher_MigrateBasePlanPricesResponse : GTLRObject
@end


/**
 *  Represents an amount of money with its currency type.
 */
@interface GTLRAndroidPublisher_Money : GTLRObject

/** The three-letter currency code defined in ISO 4217. */
@property(nonatomic, copy, nullable) NSString *currencyCode;

/**
 *  Number of nano (10^-9) units of the amount. The value must be between
 *  -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos`
 *  must be positive or zero. If `units` is zero, `nanos` can be positive, zero,
 *  or negative. If `units` is negative, `nanos` must be negative or zero. For
 *  example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  The whole units of the amount. For example if `currencyCode` is `"USD"`,
 *  then 1 unit is one US dollar.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *units;

@end


/**
 *  Offer details information related to a purchase line item.
 */
@interface GTLRAndroidPublisher_OfferDetails : GTLRObject

/** The base plan ID. Present for all base plan and offers. */
@property(nonatomic, copy, nullable) NSString *basePlanId;

/** The offer ID. Only present for discounted offers. */
@property(nonatomic, copy, nullable) NSString *offerId;

/**
 *  The latest offer tags associated with the offer. It includes tags inherited
 *  from the base plan.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *offerTags;

@end


/**
 *  Represents a custom tag specified for base plans and subscription offers.
 */
@interface GTLRAndroidPublisher_OfferTag : GTLRObject

/**
 *  Must conform with RFC-1034. That is, this string can only contain lower-case
 *  letters (a-z), numbers (0-9), and hyphens (-), and be at most 20 characters.
 */
@property(nonatomic, copy, nullable) NSString *tag;

@end


/**
 *  Pricing information for any new locations Play may launch in.
 */
@interface GTLRAndroidPublisher_OtherRegionsBasePlanConfig : GTLRObject

/** Required. Price in EUR to use for any new locations Play may launch in. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Money *eurPrice;

/**
 *  Whether the base plan is available for new subscribers in any new locations
 *  Play may launch in. If not specified, this will default to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *newSubscriberAvailability NS_RETURNS_NOT_RETAINED;

/** Required. Price in USD to use for any new locations Play may launch in. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Money *usdPrice;

@end


/**
 *  Configuration for any new locations Play may launch in specified on a
 *  subscription offer.
 */
@interface GTLRAndroidPublisher_OtherRegionsSubscriptionOfferConfig : GTLRObject

/**
 *  Whether the subscription offer in any new locations Play may launch in the
 *  future. If not specified, this will default to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *otherRegionsNewSubscriberAvailability;

@end


/**
 *  Configuration for any new locations Play may launch in for a single offer
 *  phase.
 */
@interface GTLRAndroidPublisher_OtherRegionsSubscriptionOfferPhaseConfig : GTLRObject

/**
 *  The absolute amount of money subtracted from the base plan price prorated
 *  over the phase duration that the user pays for this offer phase. For
 *  example, if the base plan price for this region is $12 for a period of 1
 *  year, then a $1 absolute discount for a phase of a duration of 3 months
 *  would correspond to a price of $2. The resulting price may not be smaller
 *  than the minimum price allowed for any new locations Play may launch in.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_OtherRegionsSubscriptionOfferPhasePrices *absoluteDiscounts;

/**
 *  The absolute price the user pays for this offer phase. The price must not be
 *  smaller than the minimum price allowed for any new locations Play may launch
 *  in.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_OtherRegionsSubscriptionOfferPhasePrices *otherRegionsPrices;

/**
 *  The fraction of the base plan price prorated over the phase duration that
 *  the user pays for this offer phase. For example, if the base plan price for
 *  this region is $12 for a period of 1 year, then a 50% discount for a phase
 *  of a duration of 3 months would correspond to a price of $1.50. The discount
 *  must be specified as a fraction strictly larger than 0 and strictly smaller
 *  than 1. The resulting price will be rounded to the nearest billable unit
 *  (e.g. cents for USD). The relative discount is considered invalid if the
 *  discounted price ends up being smaller than the minimum price allowed in any
 *  new locations Play may launch in.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *relativeDiscount;

@end


/**
 *  Pricing information for any new locations Play may launch in.
 */
@interface GTLRAndroidPublisher_OtherRegionsSubscriptionOfferPhasePrices : GTLRObject

/** Required. Price in EUR to use for any new locations Play may launch in. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Money *eurPrice;

/** Required. Price in USD to use for any new locations Play may launch in. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Money *usdPrice;

@end


/**
 *  Information about the current page. List operations that supports paging
 *  return only one "page" of results. This protocol buffer message describes
 *  the page that has been returned.
 */
@interface GTLRAndroidPublisher_PageInfo : GTLRObject

/**
 *  Maximum number of results returned in one page. ! The number of results
 *  included in the API response.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resultPerPage;

/**
 *  Index of the first result returned in the current page.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startIndex;

/**
 *  Total number of results available on the backend ! The total number of
 *  results in the result set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalResults;

@end


/**
 *  Information specific to a subscription in paused state.
 */
@interface GTLRAndroidPublisher_PausedStateContext : GTLRObject

/** Time at which the subscription will be automatically resumed. */
@property(nonatomic, strong, nullable) GTLRDateTime *autoResumeTime;

@end


/**
 *  Represents a base plan that does not automatically renew at the end of the
 *  base plan, and must be manually renewed by the user.
 */
@interface GTLRAndroidPublisher_PrepaidBasePlanType : GTLRObject

/**
 *  Required. Subscription period, specified in ISO 8601 format. For a list of
 *  acceptable billing periods, refer to the help center.
 */
@property(nonatomic, copy, nullable) NSString *billingPeriodDuration;

/**
 *  Whether users should be able to extend this prepaid base plan in Google Play
 *  surfaces. Defaults to TIME_EXTENSION_ACTIVE if not specified.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_PrepaidBasePlanType_TimeExtension_TimeExtensionActive
 *        Time extension is active. Users are allowed to top-up or extend their
 *        prepaid plan. (Value: "TIME_EXTENSION_ACTIVE")
 *    @arg @c kGTLRAndroidPublisher_PrepaidBasePlanType_TimeExtension_TimeExtensionInactive
 *        Time extension is inactive. Users cannot top-up or extend their
 *        prepaid plan. (Value: "TIME_EXTENSION_INACTIVE")
 *    @arg @c kGTLRAndroidPublisher_PrepaidBasePlanType_TimeExtension_TimeExtensionUnspecified
 *        Unspecified state. (Value: "TIME_EXTENSION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *timeExtension;

@end


/**
 *  Information related to a prepaid plan.
 */
@interface GTLRAndroidPublisher_PrepaidPlan : GTLRObject

/**
 *  If present, this is the time after which top up purchases are allowed for
 *  the prepaid plan. Will not be present for expired prepaid plans.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *allowExtendAfterTime;

@end


/**
 *  Definition of a price, i.e. currency and units.
 */
@interface GTLRAndroidPublisher_Price : GTLRObject

/**
 *  3 letter Currency code, as defined by ISO 4217. See
 *  java/com/google/common/money/CurrencyCode.java
 */
@property(nonatomic, copy, nullable) NSString *currency;

/** Price in 1/million of the currency base unit, represented as a string. */
@property(nonatomic, copy, nullable) NSString *priceMicros;

@end


/**
 *  A ProductPurchase resource indicates the status of a user's inapp product
 *  purchase.
 */
@interface GTLRAndroidPublisher_ProductPurchase : GTLRObject

/**
 *  The acknowledgement state of the inapp product. Possible values are: 0. Yet
 *  to be acknowledged 1. Acknowledged
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *acknowledgementState;

/**
 *  The consumption state of the inapp product. Possible values are: 0. Yet to
 *  be consumed 1. Consumed
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *consumptionState;

/**
 *  A developer-specified string that contains supplemental information about an
 *  order.
 */
@property(nonatomic, copy, nullable) NSString *developerPayload;

/**
 *  This kind represents an inappPurchase object in the androidpublisher
 *  service.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  An obfuscated version of the id that is uniquely associated with the user's
 *  account in your app. Only present if specified using
 *  https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedaccountid
 *  when the purchase was made.
 */
@property(nonatomic, copy, nullable) NSString *obfuscatedExternalAccountId;

/**
 *  An obfuscated version of the id that is uniquely associated with the user's
 *  profile in your app. Only present if specified using
 *  https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedprofileid
 *  when the purchase was made.
 */
@property(nonatomic, copy, nullable) NSString *obfuscatedExternalProfileId;

/** The order id associated with the purchase of the inapp product. */
@property(nonatomic, copy, nullable) NSString *orderId;

/** The inapp product SKU. May not be present. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  The purchase state of the order. Possible values are: 0. Purchased 1.
 *  Canceled 2. Pending
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *purchaseState;

/**
 *  The time the product was purchased, in milliseconds since the epoch (Jan 1,
 *  1970).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *purchaseTimeMillis;

/**
 *  The purchase token generated to identify this purchase. May not be present.
 */
@property(nonatomic, copy, nullable) NSString *purchaseToken;

/**
 *  The type of purchase of the inapp product. This field is only set if this
 *  purchase was not made using the standard in-app billing flow. Possible
 *  values are: 0. Test (i.e. purchased from a license testing account) 1. Promo
 *  (i.e. purchased using a promo code) 2. Rewarded (i.e. from watching a video
 *  ad instead of paying)
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *purchaseType;

/**
 *  The quantity associated with the purchase of the inapp product. If not
 *  present, the quantity is 1.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *quantity;

/**
 *  ISO 3166-1 alpha-2 billing region code of the user at the time the product
 *  was granted.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

@end


/**
 *  Request for the product.purchases.acknowledge API.
 */
@interface GTLRAndroidPublisher_ProductPurchasesAcknowledgeRequest : GTLRObject

/** Payload to attach to the purchase. */
@property(nonatomic, copy, nullable) NSString *developerPayload;

@end


/**
 *  Configuration for a base plan specific to a region.
 */
@interface GTLRAndroidPublisher_RegionalBasePlanConfig : GTLRObject

/**
 *  Whether the base plan in the specified region is available for new
 *  subscribers. Existing subscribers will not have their subscription canceled
 *  if this value is set to false. If not specified, this will default to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *newSubscriberAvailability NS_RETURNS_NOT_RETAINED;

/**
 *  The price of the base plan in the specified region. Must be set if the base
 *  plan is available to new subscribers. Must be set in the currency that is
 *  linked to the specified region.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Money *price;

/**
 *  Required. Region code this configuration applies to, as defined by ISO
 *  3166-2, e.g. "US".
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

@end


/**
 *  Configuration for a price migration.
 */
@interface GTLRAndroidPublisher_RegionalPriceMigrationConfig : GTLRObject

/**
 *  Required. The cutoff time for historical prices that subscribers can remain
 *  paying. Subscribers who are on a price that was created before this cutoff
 *  time will be migrated to the currently-offered price. These subscribers will
 *  receive a notification that they will be paying a different price.
 *  Subscribers who do not agree to the new price will have their subscription
 *  ended at the next renewal.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *oldestAllowedPriceVersionTime;

/**
 *  Required. Region code this configuration applies to, as defined by ISO
 *  3166-2, e.g. "US".
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

@end


/**
 *  Configuration for a subscription offer in a single region.
 */
@interface GTLRAndroidPublisher_RegionalSubscriptionOfferConfig : GTLRObject

/**
 *  Whether the subscription offer in the specified region is available for new
 *  subscribers. Existing subscribers will not have their subscription cancelled
 *  if this value is set to false. If not specified, this will default to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *newSubscriberAvailability NS_RETURNS_NOT_RETAINED;

/**
 *  Required. Immutable. Region code this configuration applies to, as defined
 *  by ISO 3166-2, e.g. "US".
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

@end


/**
 *  Configuration for a single phase of a subscription offer in a single region.
 */
@interface GTLRAndroidPublisher_RegionalSubscriptionOfferPhaseConfig : GTLRObject

/**
 *  The absolute amount of money subtracted from the base plan price prorated
 *  over the phase duration that the user pays for this offer phase. For
 *  example, if the base plan price for this region is $12 for a period of 1
 *  year, then a $1 absolute discount for a phase of a duration of 3 months
 *  would correspond to a price of $2. The resulting price may not be smaller
 *  than the minimum price allowed for this region.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Money *absoluteDiscount;

/**
 *  The absolute price the user pays for this offer phase. The price must not be
 *  smaller than the minimum price allowed for this region.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Money *price;

/** Required. Immutable. The region to which this config applies. */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  The fraction of the base plan price prorated over the phase duration that
 *  the user pays for this offer phase. For example, if the base plan price for
 *  this region is $12 for a period of 1 year, then a 50% discount for a phase
 *  of a duration of 3 months would correspond to a price of $1.50. The discount
 *  must be specified as a fraction strictly larger than 0 and strictly smaller
 *  than 1. The resulting price will be rounded to the nearest billable unit
 *  (e.g. cents for USD). The relative discount is considered invalid if the
 *  discounted price ends up being smaller than the minimum price allowed in
 *  this region.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *relativeDiscount;

@end


/**
 *  Specified details about taxation in a given geographical region.
 */
@interface GTLRAndroidPublisher_RegionalTaxRateInfo : GTLRObject

/**
 *  You must tell us if your app contains streaming products to correctly charge
 *  US state and local sales tax. Field only supported in United States.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *eligibleForStreamingServiceTaxRate;

/**
 *  To collect communications or amusement taxes in the United States, choose
 *  the appropriate tax category. [Learn
 *  more](https://support.google.com/googleplay/android-developer/answer/10463498#streaming_tax).
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_RegionalTaxRateInfo_StreamingTaxType_StreamingTaxTypeTelcoAudioMultiChannel
 *        US-specific telecommunications tax tier for multi channel audio
 *        streaming like radio. (Value:
 *        "STREAMING_TAX_TYPE_TELCO_AUDIO_MULTI_CHANNEL")
 *    @arg @c kGTLRAndroidPublisher_RegionalTaxRateInfo_StreamingTaxType_StreamingTaxTypeTelcoAudioRental
 *        US-specific telecommunications tax tier for audio streaming, rental /
 *        subscription. (Value: "STREAMING_TAX_TYPE_TELCO_AUDIO_RENTAL")
 *    @arg @c kGTLRAndroidPublisher_RegionalTaxRateInfo_StreamingTaxType_StreamingTaxTypeTelcoAudioSales
 *        US-specific telecommunications tax tier for audio streaming, sale /
 *        permanent download. (Value: "STREAMING_TAX_TYPE_TELCO_AUDIO_SALES")
 *    @arg @c kGTLRAndroidPublisher_RegionalTaxRateInfo_StreamingTaxType_StreamingTaxTypeTelcoVideoMultiChannel
 *        US-specific telecommunications tax tier for video streaming of
 *        multi-channel programming. (Value:
 *        "STREAMING_TAX_TYPE_TELCO_VIDEO_MULTI_CHANNEL")
 *    @arg @c kGTLRAndroidPublisher_RegionalTaxRateInfo_StreamingTaxType_StreamingTaxTypeTelcoVideoRental
 *        US-specific telecommunications tax tier for video streaming, on
 *        demand, rentals / subscriptions / pay-per-view. (Value:
 *        "STREAMING_TAX_TYPE_TELCO_VIDEO_RENTAL")
 *    @arg @c kGTLRAndroidPublisher_RegionalTaxRateInfo_StreamingTaxType_StreamingTaxTypeTelcoVideoSales
 *        US-specific telecommunications tax tier for video streaming of
 *        pre-recorded content like movies, tv shows. (Value:
 *        "STREAMING_TAX_TYPE_TELCO_VIDEO_SALES")
 *    @arg @c kGTLRAndroidPublisher_RegionalTaxRateInfo_StreamingTaxType_StreamingTaxTypeUnspecified
 *        No telecommunications tax collected. (Value:
 *        "STREAMING_TAX_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *streamingTaxType;

/**
 *  Tax tier to specify reduced tax rate. Developers who sell digital news,
 *  magazines, newspapers, books, or audiobooks in various regions may be
 *  eligible for reduced tax rates. [Learn
 *  more](https://support.google.com/googleplay/android-developer/answer/10463498).
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_RegionalTaxRateInfo_TaxTier_TaxTierBooks1
 *        Value "TAX_TIER_BOOKS_1"
 *    @arg @c kGTLRAndroidPublisher_RegionalTaxRateInfo_TaxTier_TaxTierLiveOrBroadcast1
 *        Value "TAX_TIER_LIVE_OR_BROADCAST_1"
 *    @arg @c kGTLRAndroidPublisher_RegionalTaxRateInfo_TaxTier_TaxTierMusicOrAudio1
 *        Value "TAX_TIER_MUSIC_OR_AUDIO_1"
 *    @arg @c kGTLRAndroidPublisher_RegionalTaxRateInfo_TaxTier_TaxTierNews1
 *        Value "TAX_TIER_NEWS_1"
 *    @arg @c kGTLRAndroidPublisher_RegionalTaxRateInfo_TaxTier_TaxTierNews2
 *        Value "TAX_TIER_NEWS_2"
 *    @arg @c kGTLRAndroidPublisher_RegionalTaxRateInfo_TaxTier_TaxTierUnspecified
 *        Value "TAX_TIER_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *taxTier;

@end


/**
 *  The version of the available regions being used for the specified resource.
 */
@interface GTLRAndroidPublisher_RegionsVersion : GTLRObject

/**
 *  Required. A string representing version of the available regions being used
 *  for the specified resource. The current version is 2022/01.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Information specific to cancellations caused by subscription replacement.
 */
@interface GTLRAndroidPublisher_ReplacementCancellation : GTLRObject
@end


/**
 *  An Android app review.
 */
@interface GTLRAndroidPublisher_Review : GTLRObject

/** The name of the user who wrote the review. */
@property(nonatomic, copy, nullable) NSString *authorName;

/** A repeated field containing comments for the review. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Comment *> *comments;

/** Unique identifier for this review. */
@property(nonatomic, copy, nullable) NSString *reviewId;

@end


/**
 *  The result of replying/updating a reply to review.
 */
@interface GTLRAndroidPublisher_ReviewReplyResult : GTLRObject

/** The time at which the reply took effect. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Timestamp *lastEdited;

/** The reply text that was applied. */
@property(nonatomic, copy, nullable) NSString *replyText;

@end


/**
 *  Response listing reviews.
 */
@interface GTLRAndroidPublisher_ReviewsListResponse : GTLRObject

/** Information about the current page. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_PageInfo *pageInfo;

/** List of reviews. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Review *> *reviews;

/** Pagination token, to handle a number of products that is over one page. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_TokenPagination *tokenPagination;

@end


/**
 *  Request to reply to review or update existing reply.
 */
@interface GTLRAndroidPublisher_ReviewsReplyRequest : GTLRObject

/**
 *  The text to set as the reply. Replies of more than approximately 350
 *  characters will be rejected. HTML tags will be stripped.
 */
@property(nonatomic, copy, nullable) NSString *replyText;

@end


/**
 *  Response on status of replying to a review.
 */
@interface GTLRAndroidPublisher_ReviewsReplyResponse : GTLRObject

/** The result of replying/updating a reply to review. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_ReviewReplyResult *result;

@end


/**
 *  Information associated with purchases made with 'Subscribe with Google'.
 */
@interface GTLRAndroidPublisher_SubscribeWithGoogleInfo : GTLRObject

/** The email address of the user when the subscription was purchased. */
@property(nonatomic, copy, nullable) NSString *emailAddress;

/** The family name of the user when the subscription was purchased. */
@property(nonatomic, copy, nullable) NSString *familyName;

/** The given name of the user when the subscription was purchased. */
@property(nonatomic, copy, nullable) NSString *givenName;

/** The Google profile id of the user when the subscription was purchased. */
@property(nonatomic, copy, nullable) NSString *profileId;

/** The profile name of the user when the subscription was purchased. */
@property(nonatomic, copy, nullable) NSString *profileName;

@end


/**
 *  A single subscription for an app.
 */
@interface GTLRAndroidPublisher_Subscription : GTLRObject

/**
 *  Output only. Whether this subscription is archived. Archived subscriptions
 *  are not available to any subscriber any longer, cannot be updated, and are
 *  not returned in list requests unless the show archived flag is passed in.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *archived;

/**
 *  The set of base plans for this subscription. Represents the prices and
 *  duration of the subscription if no other offers apply.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_BasePlan *> *basePlans;

/**
 *  Required. List of localized listings for this subscription. Must contain at
 *  least an entry for the default language of the parent app.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_SubscriptionListing *> *listings;

/** Immutable. Package name of the parent app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Immutable. Unique product ID of the product. Unique within the parent app.
 *  Product IDs must be composed of lower-case letters (a-z), numbers (0-9),
 *  underscores (_) and dots (.). It must start with a lower-case letter or
 *  number, and be between 1 and 40 (inclusive) characters in length.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/** Details about taxes and legal compliance. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_SubscriptionTaxAndComplianceSettings *taxAndComplianceSettings;

@end


/**
 *  Information provided by the user when they complete the subscription
 *  cancellation flow (cancellation reason survey).
 */
@interface GTLRAndroidPublisher_SubscriptionCancelSurveyResult : GTLRObject

/**
 *  The cancellation reason the user chose in the survey. Possible values are:
 *  0. Other 1. I don't use this service enough 2. Technical issues 3.
 *  Cost-related reasons 4. I found a better app
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cancelSurveyReason;

/**
 *  The customized input cancel reason from the user. Only present when
 *  cancelReason is 0.
 */
@property(nonatomic, copy, nullable) NSString *userInputCancelReason;

@end


/**
 *  A SubscriptionDeferralInfo contains the data needed to defer a subscription
 *  purchase to a future expiry time.
 */
@interface GTLRAndroidPublisher_SubscriptionDeferralInfo : GTLRObject

/**
 *  The desired next expiry time to assign to the subscription, in milliseconds
 *  since the Epoch. The given time must be later/greater than the current
 *  expiry time for the subscription.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *desiredExpiryTimeMillis;

/**
 *  The expected expiry time for the subscription. If the current expiry time
 *  for the subscription is not the value specified here, the deferral will not
 *  occur.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expectedExpiryTimeMillis;

@end


/**
 *  Price change related information of a subscription item.
 */
@interface GTLRAndroidPublisher_SubscriptionItemPriceChangeDetails : GTLRObject

/**
 *  The renewal time at which the price change will become effective for the
 *  user. This is subject to change(to a future time) due to cases where the
 *  renewal time shifts like pause.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expectedNewPriceChargeTime;

/** New recurring price for the subscription item. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Money *newPrice NS_RETURNS_NOT_RETAINED;

/**
 *  Price change mode specifies how the subscription item price is changing.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_SubscriptionItemPriceChangeDetails_PriceChangeMode_PriceChangeModeUnspecified
 *        Price change mode unspecified. This value should never be set. (Value:
 *        "PRICE_CHANGE_MODE_UNSPECIFIED")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionItemPriceChangeDetails_PriceChangeMode_PriceDecrease
 *        If the subscription price is decreasing. (Value: "PRICE_DECREASE")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionItemPriceChangeDetails_PriceChangeMode_PriceIncrease
 *        If the subscription price is increasing and the user needs to accept
 *        it. (Value: "PRICE_INCREASE")
 */
@property(nonatomic, copy, nullable) NSString *priceChangeMode;

/**
 *  State the price change is currently in.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_SubscriptionItemPriceChangeDetails_PriceChangeState_Applied
 *        The price change is applied, i.e. the user has started being charged
 *        the new price. (Value: "APPLIED")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionItemPriceChangeDetails_PriceChangeState_Confirmed
 *        The price change is confirmed to happen for the user. (Value:
 *        "CONFIRMED")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionItemPriceChangeDetails_PriceChangeState_Outstanding
 *        Waiting for the user to agree for the price change. (Value:
 *        "OUTSTANDING")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionItemPriceChangeDetails_PriceChangeState_PriceChangeStateUnspecified
 *        Price change state unspecified. This value should not be used. (Value:
 *        "PRICE_CHANGE_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *priceChangeState;

@end


/**
 *  The consumer-visible metadata of a subscription.
 */
@interface GTLRAndroidPublisher_SubscriptionListing : GTLRObject

/**
 *  A list of benefits shown to the user on platforms such as the Play Store and
 *  in restoration flows in the language of this listing. Plain text. Ordered
 *  list of at most four benefits.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *benefits;

/**
 *  The description of this subscription in the language of this listing.
 *  Maximum length - 80 characters. Plain text.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Required. The language of this listing, as defined by BCP-47, e.g. "en-US".
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Required. The title of this subscription in the language of this listing.
 *  Plain text.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  A single, temporary offer
 */
@interface GTLRAndroidPublisher_SubscriptionOffer : GTLRObject

/**
 *  Required. Immutable. The ID of the base plan to which this offer is an
 *  extension.
 */
@property(nonatomic, copy, nullable) NSString *basePlanId;

/**
 *  Required. Immutable. Unique ID of this subscription offer. Must be unique
 *  within the base plan.
 */
@property(nonatomic, copy, nullable) NSString *offerId;

/**
 *  List of up to 20 custom tags specified for this offer, and returned to the
 *  app through the billing library.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_OfferTag *> *offerTags;

/** The configuration for any new locations Play may launch in the future. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_OtherRegionsSubscriptionOfferConfig *otherRegionsConfig;

/**
 *  Required. Immutable. The package name of the app the parent subscription
 *  belongs to.
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Required. The phases of this subscription offer. Must contain at least one
 *  entry, and may contain at most five. Users will always receive all these
 *  phases in the specified order. Phases may not be added, removed, or
 *  reordered after initial creation.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_SubscriptionOfferPhase *> *phases;

/**
 *  Required. Immutable. The ID of the parent subscription this offer belongs
 *  to.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Required. The region-specific configuration of this offer. Must contain at
 *  least one entry.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_RegionalSubscriptionOfferConfig *> *regionalConfigs;

/**
 *  Output only. The current state of this offer. Can be changed using Activate
 *  and Deactivate actions. NB: the base plan state supersedes this state, so an
 *  active offer may not be available if the base plan is not active.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_SubscriptionOffer_State_Active The
 *        subscription offer is available to new and existing users. (Value:
 *        "ACTIVE")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionOffer_State_Draft The
 *        subscription offer is not and has never been available to users.
 *        (Value: "DRAFT")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionOffer_State_Inactive The
 *        subscription offer is not available to new users. Existing users
 *        retain access. (Value: "INACTIVE")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionOffer_State_StateUnspecified
 *        Default value, should never be used. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  The requirements that users need to fulfil to be eligible for this offer.
 *  Represents the requirements that Play will evaluate to decide whether an
 *  offer should be returned. Developers may further filter these offers
 *  themselves.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_SubscriptionOfferTargeting *targeting;

@end


/**
 *  A single phase of a subscription offer.
 */
@interface GTLRAndroidPublisher_SubscriptionOfferPhase : GTLRObject

/**
 *  Required. The duration of a single recurrence of this phase. Specified in
 *  ISO 8601 format.
 */
@property(nonatomic, copy, nullable) NSString *duration;

/** Pricing information for any new locations Play may launch in. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_OtherRegionsSubscriptionOfferPhaseConfig *otherRegionsConfig;

/**
 *  Required. The number of times this phase repeats. If this offer phase is not
 *  free, each recurrence charges the user the price of this offer phase.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recurrenceCount;

/**
 *  Required. The region-specific configuration of this offer phase. This list
 *  must contain exactly one entry for each region for which the subscription
 *  offer has a regional config.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_RegionalSubscriptionOfferPhaseConfig *> *regionalConfigs;

@end


/**
 *  Defines the rule a user needs to satisfy to receive this offer.
 */
@interface GTLRAndroidPublisher_SubscriptionOfferTargeting : GTLRObject

/** Offer targeting rule for new user acquisition. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_AcquisitionTargetingRule *acquisitionRule;

/** Offer targeting rule for upgrading users' existing plans. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_UpgradeTargetingRule *upgradeRule;

@end


/**
 *  Contains the price change information for a subscription that can be used to
 *  control the user journey for the price change in the app. This can be in the
 *  form of seeking confirmation from the user or tailoring the experience for a
 *  successful conversion.
 */
@interface GTLRAndroidPublisher_SubscriptionPriceChange : GTLRObject

/**
 *  The new price the subscription will renew with if the price change is
 *  accepted by the user.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Price *newPrice NS_RETURNS_NOT_RETAINED;

/**
 *  The current state of the price change. Possible values are: 0. Outstanding:
 *  State for a pending price change waiting for the user to agree. In this
 *  state, you can optionally seek confirmation from the user using the In-App
 *  API. 1. Accepted: State for an accepted price change that the subscription
 *  will renew with unless it's canceled. The price change takes effect on a
 *  future date when the subscription renews. Note that the change might not
 *  occur when the subscription is renewed next.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *state;

@end


/**
 *  A SubscriptionPurchase resource indicates the status of a user's
 *  subscription purchase.
 */
@interface GTLRAndroidPublisher_SubscriptionPurchase : GTLRObject

/**
 *  The acknowledgement state of the subscription product. Possible values are:
 *  0. Yet to be acknowledged 1. Acknowledged
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *acknowledgementState;

/**
 *  Whether the subscription will automatically be renewed when it reaches its
 *  current expiry time.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoRenewing;

/**
 *  Time at which the subscription will be automatically resumed, in
 *  milliseconds since the Epoch. Only present if the user has requested to
 *  pause the subscription.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoResumeTimeMillis;

/**
 *  The reason why a subscription was canceled or is not auto-renewing. Possible
 *  values are: 0. User canceled the subscription 1. Subscription was canceled
 *  by the system, for example because of a billing problem 2. Subscription was
 *  replaced with a new subscription 3. Subscription was canceled by the
 *  developer
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cancelReason;

/**
 *  Information provided by the user when they complete the subscription
 *  cancellation flow (cancellation reason survey).
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_SubscriptionCancelSurveyResult *cancelSurveyResult;

/**
 *  ISO 3166-1 alpha-2 billing country/region code of the user at the time the
 *  subscription was granted.
 */
@property(nonatomic, copy, nullable) NSString *countryCode;

/**
 *  A developer-specified string that contains supplemental information about an
 *  order.
 */
@property(nonatomic, copy, nullable) NSString *developerPayload;

/**
 *  The email address of the user when the subscription was purchased. Only
 *  present for purchases made with 'Subscribe with Google'.
 */
@property(nonatomic, copy, nullable) NSString *emailAddress;

/**
 *  Time at which the subscription will expire, in milliseconds since the Epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expiryTimeMillis;

/**
 *  User account identifier in the third-party service. Only present if account
 *  linking happened as part of the subscription purchase flow.
 */
@property(nonatomic, copy, nullable) NSString *externalAccountId;

/**
 *  The family name of the user when the subscription was purchased. Only
 *  present for purchases made with 'Subscribe with Google'.
 */
@property(nonatomic, copy, nullable) NSString *familyName;

/**
 *  The given name of the user when the subscription was purchased. Only present
 *  for purchases made with 'Subscribe with Google'.
 */
@property(nonatomic, copy, nullable) NSString *givenName;

/**
 *  Introductory price information of the subscription. This is only present
 *  when the subscription was purchased with an introductory price. This field
 *  does not indicate the subscription is currently in introductory price
 *  period.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_IntroductoryPriceInfo *introductoryPriceInfo;

/**
 *  This kind represents a subscriptionPurchase object in the androidpublisher
 *  service.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The purchase token of the originating purchase if this subscription is one
 *  of the following: 0. Re-signup of a canceled but non-lapsed subscription 1.
 *  Upgrade/downgrade from a previous subscription For example, suppose a user
 *  originally signs up and you receive purchase token X, then the user cancels
 *  and goes through the resignup flow (before their subscription lapses) and
 *  you receive purchase token Y, and finally the user upgrades their
 *  subscription and you receive purchase token Z. If you call this API with
 *  purchase token Z, this field will be set to Y. If you call this API with
 *  purchase token Y, this field will be set to X. If you call this API with
 *  purchase token X, this field will not be set.
 */
@property(nonatomic, copy, nullable) NSString *linkedPurchaseToken;

/**
 *  An obfuscated version of the id that is uniquely associated with the user's
 *  account in your app. Present for the following purchases: * If account
 *  linking happened as part of the subscription purchase flow. * It was
 *  specified using
 *  https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedaccountid
 *  when the purchase was made.
 */
@property(nonatomic, copy, nullable) NSString *obfuscatedExternalAccountId;

/**
 *  An obfuscated version of the id that is uniquely associated with the user's
 *  profile in your app. Only present if specified using
 *  https://developer.android.com/reference/com/android/billingclient/api/BillingFlowParams.Builder#setobfuscatedprofileid
 *  when the purchase was made.
 */
@property(nonatomic, copy, nullable) NSString *obfuscatedExternalProfileId;

/**
 *  The order id of the latest recurring order associated with the purchase of
 *  the subscription. If the subscription was canceled because payment was
 *  declined, this will be the order id from the payment declined order.
 */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  The payment state of the subscription. Possible values are: 0. Payment
 *  pending 1. Payment received 2. Free trial 3. Pending deferred
 *  upgrade/downgrade Not present for canceled, expired subscriptions.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *paymentState;

/**
 *  Price of the subscription, For tax exclusive countries, the price doesn't
 *  include tax. For tax inclusive countries, the price includes tax. Price is
 *  expressed in micro-units, where 1,000,000 micro-units represents one unit of
 *  the currency. For example, if the subscription price is €1.99,
 *  price_amount_micros is 1990000.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *priceAmountMicros;

/**
 *  The latest price change information available. This is present only when
 *  there is an upcoming price change for the subscription yet to be applied.
 *  Once the subscription renews with the new price or the subscription is
 *  canceled, no price change information will be returned.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_SubscriptionPriceChange *priceChange;

/**
 *  ISO 4217 currency code for the subscription price. For example, if the price
 *  is specified in British pounds sterling, price_currency_code is "GBP".
 */
@property(nonatomic, copy, nullable) NSString *priceCurrencyCode;

/**
 *  The Google profile id of the user when the subscription was purchased. Only
 *  present for purchases made with 'Subscribe with Google'.
 */
@property(nonatomic, copy, nullable) NSString *profileId;

/**
 *  The profile name of the user when the subscription was purchased. Only
 *  present for purchases made with 'Subscribe with Google'.
 */
@property(nonatomic, copy, nullable) NSString *profileName;

/**
 *  The promotion code applied on this purchase. This field is only set if a
 *  vanity code promotion is applied when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *promotionCode;

/**
 *  The type of promotion applied on this purchase. This field is only set if a
 *  promotion is applied when the subscription was purchased. Possible values
 *  are: 0. One time code 1. Vanity code
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *promotionType;

/**
 *  The type of purchase of the subscription. This field is only set if this
 *  purchase was not made using the standard in-app billing flow. Possible
 *  values are: 0. Test (i.e. purchased from a license testing account) 1. Promo
 *  (i.e. purchased using a promo code)
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *purchaseType;

/**
 *  Time at which the subscription was granted, in milliseconds since the Epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startTimeMillis;

/**
 *  The time at which the subscription was canceled by the user, in milliseconds
 *  since the epoch. Only present if cancelReason is 0.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *userCancellationTimeMillis;

@end


/**
 *  Item-level info for a subscription purchase.
 */
@interface GTLRAndroidPublisher_SubscriptionPurchaseLineItem : GTLRObject

/** The item is auto renewing. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_AutoRenewingPlan *autoRenewingPlan;

/**
 *  Time at which the subscription expired or will expire unless the access is
 *  extended (ex. renews).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expiryTime;

/** The offer details for this item. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_OfferDetails *offerDetails;

/** The item is prepaid. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_PrepaidPlan *prepaidPlan;

/** The purchased product ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *productId;

@end


/**
 *  Request for the purchases.subscriptions.acknowledge API.
 */
@interface GTLRAndroidPublisher_SubscriptionPurchasesAcknowledgeRequest : GTLRObject

/** Payload to attach to the purchase. */
@property(nonatomic, copy, nullable) NSString *developerPayload;

@end


/**
 *  Request for the purchases.subscriptions.defer API.
 */
@interface GTLRAndroidPublisher_SubscriptionPurchasesDeferRequest : GTLRObject

/** The information about the new desired expiry time for the subscription. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_SubscriptionDeferralInfo *deferralInfo;

@end


/**
 *  Response for the purchases.subscriptions.defer API.
 */
@interface GTLRAndroidPublisher_SubscriptionPurchasesDeferResponse : GTLRObject

/**
 *  The new expiry time for the subscription in milliseconds since the Epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *newExpiryTimeMillis NS_RETURNS_NOT_RETAINED;

@end


/**
 *  Indicates the status of a user's subscription purchase.
 */
@interface GTLRAndroidPublisher_SubscriptionPurchaseV2 : GTLRObject

/**
 *  The acknowledgement state of the subscription.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_SubscriptionPurchaseV2_AcknowledgementState_AcknowledgementStateAcknowledged
 *        The subscription is acknowledged. (Value:
 *        "ACKNOWLEDGEMENT_STATE_ACKNOWLEDGED")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionPurchaseV2_AcknowledgementState_AcknowledgementStatePending
 *        The subscription is not acknowledged yet. (Value:
 *        "ACKNOWLEDGEMENT_STATE_PENDING")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionPurchaseV2_AcknowledgementState_AcknowledgementStateUnspecified
 *        Unspecified acknowledgement state. (Value:
 *        "ACKNOWLEDGEMENT_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *acknowledgementState;

/**
 *  Additional context around canceled subscriptions. Only present if the
 *  subscription currently has subscription_state SUBSCRIPTION_STATE_CANCELED.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_CanceledStateContext *canceledStateContext;

/** User account identifier in the third-party service. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_ExternalAccountIdentifiers *externalAccountIdentifiers;

/**
 *  This kind represents a SubscriptionPurchaseV2 object in the androidpublisher
 *  service.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The order id of the latest order associated with the purchase of the
 *  subscription. For autoRenewing subscription, this is the order id of signup
 *  order if it is not renewed yet, or the last recurring order id (success,
 *  pending, or declined order). For prepaid subscription, this is the order id
 *  associated with the queried purchase token.
 */
@property(nonatomic, copy, nullable) NSString *latestOrderId;

/**
 *  Item-level info for a subscription purchase. The items in the same purchase
 *  should be either all with AutoRenewingPlan or all with PrepaidPlan.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_SubscriptionPurchaseLineItem *> *lineItems;

/**
 *  The purchase token of the old subscription if this subscription is one of
 *  the following: * Re-signup of a canceled but non-lapsed subscription *
 *  Upgrade/downgrade from a previous subscription. * Convert from prepaid to
 *  auto renewing subscription. * Convert from an auto renewing subscription to
 *  prepaid. * Topup a prepaid subscription.
 */
@property(nonatomic, copy, nullable) NSString *linkedPurchaseToken;

/**
 *  Additional context around paused subscriptions. Only present if the
 *  subscription currently has subscription_state SUBSCRIPTION_STATE_PAUSED.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_PausedStateContext *pausedStateContext;

/**
 *  ISO 3166-1 alpha-2 billing country/region code of the user at the time the
 *  subscription was granted.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  Time at which the subscription was granted. Not set for pending
 *  subscriptions (subscription was created but awaiting payment during signup).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  User profile associated with purchases made with 'Subscribe with Google'.
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_SubscribeWithGoogleInfo *subscribeWithGoogleInfo;

/**
 *  The current state of the subscription.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_SubscriptionPurchaseV2_SubscriptionState_SubscriptionStateActive
 *        Subscription is active. - (1) If the subscription is an auto renewing
 *        plan, at least one item is auto_renew_enabled and not expired. - (2)
 *        If the subscription is a prepaid plan, at least one item is not
 *        expired. (Value: "SUBSCRIPTION_STATE_ACTIVE")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionPurchaseV2_SubscriptionState_SubscriptionStateCanceled
 *        Subscription is canceled but not expired yet. The state is only
 *        available when the subscription is an auto renewing plan. All items
 *        have auto_renew_enabled set to false. (Value:
 *        "SUBSCRIPTION_STATE_CANCELED")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionPurchaseV2_SubscriptionState_SubscriptionStateExpired
 *        Subscription is expired. All items have expiry_time in the past.
 *        (Value: "SUBSCRIPTION_STATE_EXPIRED")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionPurchaseV2_SubscriptionState_SubscriptionStateInGracePeriod
 *        Subscription is in grace period. The state is only available when the
 *        subscription is an auto renewing plan. In this state, all items are in
 *        grace period. (Value: "SUBSCRIPTION_STATE_IN_GRACE_PERIOD")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionPurchaseV2_SubscriptionState_SubscriptionStateOnHold
 *        Subscription is on hold (suspended). The state is only available when
 *        the subscription is an auto renewing plan. In this state, all items
 *        are on hold. (Value: "SUBSCRIPTION_STATE_ON_HOLD")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionPurchaseV2_SubscriptionState_SubscriptionStatePaused
 *        Subscription is paused. The state is only available when the
 *        subscription is an auto renewing plan. In this state, all items are in
 *        paused state. (Value: "SUBSCRIPTION_STATE_PAUSED")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionPurchaseV2_SubscriptionState_SubscriptionStatePending
 *        Subscription was created but awaiting payment during signup. In this
 *        state, all items are awaiting payment. (Value:
 *        "SUBSCRIPTION_STATE_PENDING")
 *    @arg @c kGTLRAndroidPublisher_SubscriptionPurchaseV2_SubscriptionState_SubscriptionStateUnspecified
 *        Unspecified subscription state. (Value:
 *        "SUBSCRIPTION_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *subscriptionState;

/** Only present if this subscription purchase is a test purchase. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_TestPurchase *testPurchase;

@end


/**
 *  Details about taxation, Google Play policy and legal compliance for
 *  subscription products.
 */
@interface GTLRAndroidPublisher_SubscriptionTaxAndComplianceSettings : GTLRObject

/**
 *  Digital content or service classification for products distributed to users
 *  in the European Economic Area (EEA). The withdrawal regime under EEA
 *  consumer laws depends on this classification. Refer to the [Help Center
 *  article](https://support.google.com/googleplay/android-developer/answer/10463498)
 *  for more information.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_SubscriptionTaxAndComplianceSettings_EeaWithdrawalRightType_WithdrawalRightDigitalContent
 *        Value "WITHDRAWAL_RIGHT_DIGITAL_CONTENT"
 *    @arg @c kGTLRAndroidPublisher_SubscriptionTaxAndComplianceSettings_EeaWithdrawalRightType_WithdrawalRightService
 *        Value "WITHDRAWAL_RIGHT_SERVICE"
 *    @arg @c kGTLRAndroidPublisher_SubscriptionTaxAndComplianceSettings_EeaWithdrawalRightType_WithdrawalRightTypeUnspecified
 *        Value "WITHDRAWAL_RIGHT_TYPE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *eeaWithdrawalRightType;

/**
 *  A mapping from region code to tax rate details. The keys are region codes as
 *  defined by Unicode's "CLDR".
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_SubscriptionTaxAndComplianceSettings_TaxRateInfoByRegionCode *taxRateInfoByRegionCode;

@end


/**
 *  A mapping from region code to tax rate details. The keys are region codes as
 *  defined by Unicode's "CLDR".
 *
 *  @note This class is documented as having more properties of
 *        GTLRAndroidPublisher_RegionalTaxRateInfo. Use @c -additionalJSONKeys
 *        and @c -additionalPropertyForName: to get the list of properties and
 *        then fetch them; or @c -additionalProperties to fetch them all at
 *        once.
 */
@interface GTLRAndroidPublisher_SubscriptionTaxAndComplianceSettings_TaxRateInfoByRegionCode : GTLRObject
@end


/**
 *  Response to list previously created system APK variants.
 */
@interface GTLRAndroidPublisher_SystemApksListResponse : GTLRObject

/** All system APK variants created. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Variant *> *variants;

@end


/**
 *  Representation of a system feature.
 */
@interface GTLRAndroidPublisher_SystemFeature : GTLRObject

/** The name of the feature. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Information specific to cancellations initiated by Google system.
 */
@interface GTLRAndroidPublisher_SystemInitiatedCancellation : GTLRObject
@end


/**
 *  Defines the scope of subscriptions which a targeting rule can match to
 *  target offers to users based on past or current entitlement.
 */
@interface GTLRAndroidPublisher_TargetingRuleScope : GTLRObject

/**
 *  The scope of the current targeting rule is the subscription with the
 *  specified subscription ID. Must be a subscription within the same parent
 *  app.
 */
@property(nonatomic, copy, nullable) NSString *specificSubscriptionInApp;

@end


/**
 *  The testers of an app. The resource for TestersService. Note: while it is
 *  possible in the Play Console UI to add testers via email lists, email lists
 *  are not supported by this resource.
 */
@interface GTLRAndroidPublisher_Testers : GTLRObject

/** All testing Google Groups, as email addresses. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *googleGroups;

@end


/**
 *  Whether this subscription purchase is a test purchase.
 */
@interface GTLRAndroidPublisher_TestPurchase : GTLRObject
@end


/**
 *  A Timestamp represents a point in time independent of any time zone or local
 *  calendar, encoded as a count of seconds and fractions of seconds at
 *  nanosecond resolution. The count is relative to an epoch at UTC midnight on
 *  January 1, 1970.
 */
@interface GTLRAndroidPublisher_Timestamp : GTLRObject

/**
 *  Non-negative fractions of a second at nanosecond resolution. Must be from 0
 *  to 999,999,999 inclusive.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Represents seconds of UTC time since Unix epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

@end


/**
 *  Pagination information returned by a List operation when token pagination is
 *  enabled. List operations that supports paging return only one "page" of
 *  results. This protocol buffer message describes the page that has been
 *  returned. When using token pagination, clients should use the next/previous
 *  token to get another page of the result. The presence or absence of
 *  next/previous token indicates whether a next/previous page is available and
 *  provides a mean of accessing this page. ListRequest.page_token should be set
 *  to either next_page_token or previous_page_token to access another page.
 */
@interface GTLRAndroidPublisher_TokenPagination : GTLRObject

/**
 *  Tokens to pass to the standard list field 'page_token'. Whenever available,
 *  tokens are preferred over manipulating start_index.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@property(nonatomic, copy, nullable) NSString *previousPageToken;

@end


/**
 *  A track configuration. The resource for TracksService.
 */
@interface GTLRAndroidPublisher_Track : GTLRObject

/**
 *  In a read request, represents all active releases in the track. In an update
 *  request, represents desired changes.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_TrackRelease *> *releases;

/** Identifier of the track. */
@property(nonatomic, copy, nullable) NSString *track;

@end


/**
 *  Resource for per-track country availability information.
 */
@interface GTLRAndroidPublisher_TrackCountryAvailability : GTLRObject

/**
 *  A list of one or more countries where artifacts in this track are available.
 *  This list includes all countries that are targeted by the track, even if
 *  only specific carriers are targeted in that country.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_TrackTargetedCountry *> *countries;

/**
 *  Whether artifacts in this track are available to "rest of the world"
 *  countries.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *restOfWorld;

/**
 *  Whether this track's availability is synced with the default production
 *  track. See
 *  https://support.google.com/googleplay/android-developer/answer/7550024 for
 *  more information on syncing country availability with production. Note that
 *  if this is true, the returned "countries" and "rest_of_world" fields will
 *  reflect the values for the default production track.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *syncWithProduction;

@end


/**
 *  A release within a track.
 */
@interface GTLRAndroidPublisher_TrackRelease : GTLRObject

/** Restricts a release to a specific set of countries. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_CountryTargeting *countryTargeting;

/**
 *  In-app update priority of the release. All newly added APKs in the release
 *  will be considered at this priority. Can take values in the range [0, 5],
 *  with 5 the highest priority. Defaults to 0. in_app_update_priority can not
 *  be updated once the release is rolled out. See
 *  https://developer.android.com/guide/playcore/in-app-updates.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inAppUpdatePriority;

/**
 *  The release name. Not required to be unique. If not set, the name is
 *  generated from the APK's version_name. If the release contains multiple
 *  APKs, the name is generated from the date.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** A description of what is new in this release. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_LocalizedText *> *releaseNotes;

/**
 *  The status of the release.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_TrackRelease_Status_Completed The release
 *        will have no further changes. Its APKs are being served to all users,
 *        unless they are eligible to APKs of a more recent release. (Value:
 *        "completed")
 *    @arg @c kGTLRAndroidPublisher_TrackRelease_Status_Draft The release's APKs
 *        are not being served to users. (Value: "draft")
 *    @arg @c kGTLRAndroidPublisher_TrackRelease_Status_Halted The release's
 *        APKs will no longer be served to users. Users who already have these
 *        APKs are unaffected. (Value: "halted")
 *    @arg @c kGTLRAndroidPublisher_TrackRelease_Status_InProgress The release's
 *        APKs are being served to a fraction of users, determined by
 *        'user_fraction'. (Value: "inProgress")
 *    @arg @c kGTLRAndroidPublisher_TrackRelease_Status_StatusUnspecified
 *        Unspecified status. (Value: "statusUnspecified")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Fraction of users who are eligible for a staged release. 0 < fraction < 1.
 *  Can only be set when status is "inProgress" or "halted".
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *userFraction;

/**
 *  Version codes of all APKs in the release. Must include version codes to
 *  retain from previous releases.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *versionCodes;

@end


/**
 *  Response listing all tracks.
 */
@interface GTLRAndroidPublisher_TracksListResponse : GTLRObject

/** The kind of this response ("androidpublisher#tracksListResponse"). */
@property(nonatomic, copy, nullable) NSString *kind;

/** All tracks. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Track *> *tracks;

@end


/**
 *  Representation of a single country where the contents of a track are
 *  available.
 */
@interface GTLRAndroidPublisher_TrackTargetedCountry : GTLRObject

/** The country to target, as a two-letter CLDR code. */
@property(nonatomic, copy, nullable) NSString *countryCode;

@end


/**
 *  Represents a targeting rule of the form: User currently has {scope} [with
 *  billing period {billing_period}].
 */
@interface GTLRAndroidPublisher_UpgradeTargetingRule : GTLRObject

/**
 *  The specific billing period duration, specified in ISO 8601 format, that a
 *  user must be currently subscribed to to be eligible for this rule. If not
 *  specified, users subscribed to any billing period are matched.
 */
@property(nonatomic, copy, nullable) NSString *billingPeriodDuration;

/**
 *  Limit this offer to only once per user. If set to true, a user can never be
 *  eligible for this offer again if they ever subscribed to this offer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *oncePerUser;

/**
 *  Required. The scope of subscriptions this rule considers. Only allows "this
 *  subscription" and "specific subscription in app".
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_TargetingRuleScope *scope;

@end


/**
 *  A user resource.
 */
@interface GTLRAndroidPublisher_User : GTLRObject

/**
 *  Output only. The state of the user's access to the Play Console.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisher_User_AccessState_AccessExpired Account
 *        access has expired. (Value: "ACCESS_EXPIRED")
 *    @arg @c kGTLRAndroidPublisher_User_AccessState_AccessGranted User has
 *        accepted an invitation and has access to the Play Console. (Value:
 *        "ACCESS_GRANTED")
 *    @arg @c kGTLRAndroidPublisher_User_AccessState_AccessStateUnspecified
 *        Unknown or unspecified access state. (Value:
 *        "ACCESS_STATE_UNSPECIFIED")
 *    @arg @c kGTLRAndroidPublisher_User_AccessState_InvitationExpired
 *        Invitation has expired. (Value: "INVITATION_EXPIRED")
 *    @arg @c kGTLRAndroidPublisher_User_AccessState_Invited User is invited but
 *        has not yet accepted the invitation. (Value: "INVITED")
 */
@property(nonatomic, copy, nullable) NSString *accessState;

/** Permissions for the user which apply across the developer account. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *developerAccountPermissions;

/** Immutable. The user's email address. */
@property(nonatomic, copy, nullable) NSString *email;

/**
 *  The time at which the user's access expires, if set. When setting this
 *  value, it must always be in the future.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expirationTime;

/** Output only. Per-app permissions for the user. */
@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_Grant *> *grants;

/**
 *  Required. Resource name for this user, following the pattern
 *  "developers/{developer}/users/{email}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Whether there are more permissions for the user that are not
 *  represented here. This can happen if the caller does not have permission to
 *  manage all apps in the account. This is also `true` if this user is the
 *  account owner. If this field is `true`, it should be taken as a signal that
 *  this user cannot be fully managed via the API. That is, the API caller is
 *  not be able to manage all of the permissions this user holds, either because
 *  it doesn't know about them or because the user is the account owner.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *partial;

@end


/**
 *  User entry from conversation between user and developer.
 */
@interface GTLRAndroidPublisher_UserComment : GTLRObject

/**
 *  Integer Android SDK version of the user's device at the time the review was
 *  written, e.g. 23 is Marshmallow. May be absent.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *androidOsVersion;

/**
 *  Integer version code of the app as installed at the time the review was
 *  written. May be absent.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *appVersionCode;

/**
 *  String version name of the app as installed at the time the review was
 *  written. May be absent.
 */
@property(nonatomic, copy, nullable) NSString *appVersionName;

/** Codename for the reviewer's device, e.g. klte, flounder. May be absent. */
@property(nonatomic, copy, nullable) NSString *device;

/** Information about the characteristics of the user's device. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_DeviceMetadata *deviceMetadata;

/** The last time at which this comment was updated. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_Timestamp *lastModified;

/**
 *  Untranslated text of the review, where the review was translated. If the
 *  review was not translated this is left blank.
 */
@property(nonatomic, copy, nullable) NSString *originalText;

/**
 *  Language code for the reviewer. This is taken from the device settings so is
 *  not guaranteed to match the language the review is written in. May be
 *  absent.
 */
@property(nonatomic, copy, nullable) NSString *reviewerLanguage;

/**
 *  The star rating associated with the review, from 1 to 5.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *starRating;

/**
 *  The content of the comment, i.e. review body. In some cases users have been
 *  able to write a review with separate title and body; in those cases the
 *  title and body are concatenated and separated by a tab character.
 */
@property(nonatomic, copy, nullable) NSString *text;

/**
 *  Number of users who have given this review a thumbs down.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *thumbsDownCount;

/**
 *  Number of users who have given this review a thumbs up.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *thumbsUpCount;

@end


/**
 *  Information specific to cancellations initiated by users.
 */
@interface GTLRAndroidPublisher_UserInitiatedCancellation : GTLRObject

/**
 *  Information provided by the user when they complete the subscription
 *  cancellation flow (cancellation reason survey).
 */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_CancelSurveyResult *cancelSurveyResult;

/**
 *  The time at which the subscription was canceled by the user. The user might
 *  still have access to the subscription after this time. Use
 *  line_items.expiry_time to determine if a user still has access.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *cancelTime;

@end


/**
 *  A permission used by this APK.
 */
@interface GTLRAndroidPublisher_UsesPermission : GTLRObject

/**
 *  Optionally, the maximum SDK version for which the permission is required.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxSdkVersion;

/** The name of the permission requested. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  APK that is suitable for inclusion in a system image. The resource of
 *  SystemApksService.
 */
@interface GTLRAndroidPublisher_Variant : GTLRObject

/** The device spec used to generate the APK. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_DeviceSpec *deviceSpec;

/**
 *  Output only. The ID of a previously created system APK variant.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *variantId;

@end


/**
 *  A VoidedPurchase resource indicates a purchase that was either
 *  canceled/refunded/charged-back.
 */
@interface GTLRAndroidPublisher_VoidedPurchase : GTLRObject

/**
 *  This kind represents a voided purchase object in the androidpublisher
 *  service.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The order id which uniquely identifies a one-time purchase, subscription
 *  purchase, or subscription renewal.
 */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  The time at which the purchase was made, in milliseconds since the epoch
 *  (Jan 1, 1970).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *purchaseTimeMillis;

/**
 *  The token which uniquely identifies a one-time purchase or subscription. To
 *  uniquely identify subscription renewals use order_id (available starting
 *  from version 3 of the API).
 */
@property(nonatomic, copy, nullable) NSString *purchaseToken;

/**
 *  The reason why the purchase was voided, possible values are: 0. Other 1.
 *  Remorse 2. Not_received 3. Defective 4. Accidental_purchase 5. Fraud 6.
 *  Friendly_fraud 7. Chargeback
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *voidedReason;

/**
 *  The initiator of voided purchase, possible values are: 0. User 1. Developer
 *  2. Google
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *voidedSource;

/**
 *  The time at which the purchase was canceled/refunded/charged-back, in
 *  milliseconds since the epoch (Jan 1, 1970).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *voidedTimeMillis;

@end


/**
 *  Response for the voidedpurchases.list API.
 */
@interface GTLRAndroidPublisher_VoidedPurchasesListResponse : GTLRObject

/** General pagination information. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_PageInfo *pageInfo;

/** Pagination information for token pagination. */
@property(nonatomic, strong, nullable) GTLRAndroidPublisher_TokenPagination *tokenPagination;

@property(nonatomic, strong, nullable) NSArray<GTLRAndroidPublisher_VoidedPurchase *> *voidedPurchases;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
