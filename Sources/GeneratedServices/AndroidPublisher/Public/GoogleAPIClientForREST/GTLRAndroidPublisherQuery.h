// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play Android Developer API (androidpublisher/v3)
// Description:
//   Lets Android application developers access their Google Play accounts. At a
//   high level, the expected workflow is to "insert" an Edit, make changes as
//   necessary, and then "commit" it.
// Documentation:
//   https://developers.google.com/android-publisher

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRAndroidPublisherObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// deobfuscationFileType

/**
 *  Unspecified deobfuscation file type.
 *
 *  Value: "deobfuscationFileTypeUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherDeobfuscationFileTypeDeobfuscationFileTypeUnspecified;
/**
 *  Native debugging symbols file type.
 *
 *  Value: "nativeCode"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherDeobfuscationFileTypeNativeCode;
/**
 *  Proguard deobfuscation file type.
 *
 *  Value: "proguard"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherDeobfuscationFileTypeProguard;

// ----------------------------------------------------------------------------
// expansionFileType

/**
 *  Unspecified expansion file type.
 *
 *  Value: "expansionFileTypeUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified;
/**
 *  Main expansion file.
 *
 *  Value: "main"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherExpansionFileTypeMain;
/**
 *  Patch expansion file.
 *
 *  Value: "patch"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherExpansionFileTypePatch;

// ----------------------------------------------------------------------------
// imageType

/**
 *  Unspecified type. Do not use.
 *
 *  Value: "appImageTypeUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified;
/**
 *  Feature graphic.
 *
 *  Value: "featureGraphic"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypeFeatureGraphic;
/**
 *  Icon.
 *
 *  Value: "icon"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypeIcon;
/**
 *  Phone screenshot.
 *
 *  Value: "phoneScreenshots"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypePhoneScreenshots;
/**
 *  Seven inch screenshot.
 *
 *  Value: "sevenInchScreenshots"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypeSevenInchScreenshots;
/**
 *  Ten inch screenshot.
 *
 *  Value: "tenInchScreenshots"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypeTenInchScreenshots;
/**
 *  TV banner.
 *
 *  Value: "tvBanner"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypeTvBanner;
/**
 *  TV screenshot.
 *
 *  Value: "tvScreenshots"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypeTvScreenshots;
/**
 *  Wear screenshot.
 *
 *  Value: "wearScreenshots"
 */
FOUNDATION_EXTERN NSString * const kGTLRAndroidPublisherImageTypeWearScreenshots;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Android Publisher query classes.
 */
@interface GTLRAndroidPublisherQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new device tier config for an app.
 *
 *  Method: androidpublisher.applications.deviceTierConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_ApplicationsDeviceTierConfigsCreate : GTLRAndroidPublisherQuery

/**
 *  Whether the service should accept device IDs that are unknown to Play's
 *  device catalog.
 */
@property(nonatomic, assign) BOOL allowUnknownDevices;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_DeviceTierConfig.
 *
 *  Creates a new device tier config for an app.
 *
 *  @param object The @c GTLRAndroidPublisher_DeviceTierConfig to include in the
 *    query.
 *  @param packageName Package name of the app.
 *
 *  @return GTLRAndroidPublisherQuery_ApplicationsDeviceTierConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_DeviceTierConfig *)object
                    packageName:(NSString *)packageName;

@end

/**
 *  Returns a particular device tier config.
 *
 *  Method: androidpublisher.applications.deviceTierConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_ApplicationsDeviceTierConfigsGet : GTLRAndroidPublisherQuery

/** Required. Id of an existing device tier config. */
@property(nonatomic, assign) long long deviceTierConfigId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_DeviceTierConfig.
 *
 *  Returns a particular device tier config.
 *
 *  @param packageName Package name of the app.
 *  @param deviceTierConfigId Required. Id of an existing device tier config.
 *
 *  @return GTLRAndroidPublisherQuery_ApplicationsDeviceTierConfigsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                  deviceTierConfigId:(long long)deviceTierConfigId;

@end

/**
 *  Returns created device tier configs, ordered by descending creation time.
 *
 *  Method: androidpublisher.applications.deviceTierConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_ApplicationsDeviceTierConfigsList : GTLRAndroidPublisherQuery

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  The maximum number of device tier configs to return. The service may return
 *  fewer than this value. If unspecified, at most 10 device tier configs will
 *  be returned. The maximum value for this field is 100; values above 100 will
 *  be coerced to 100. Device tier configs will be ordered by descending
 *  creation time.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListDeviceTierConfigs` call. Provide
 *  this to retrieve the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRAndroidPublisher_ListDeviceTierConfigsResponse.
 *
 *  Returns created device tier configs, ordered by descending creation time.
 *
 *  @param packageName Package name of the app.
 *
 *  @return GTLRAndroidPublisherQuery_ApplicationsDeviceTierConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName;

@end

/**
 *  Creates a new APK without uploading the APK itself to Google Play, instead
 *  hosting the APK at a specified URL. This function is only available to
 *  organizations using Managed Play whose application is configured to restrict
 *  distribution to the organizations.
 *
 *  Method: androidpublisher.edits.apks.addexternallyhosted
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsApksAddexternallyhosted : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ApksAddExternallyHostedResponse.
 *
 *  Creates a new APK without uploading the APK itself to Google Play, instead
 *  hosting the APK at a specified URL. This function is only available to
 *  organizations using Managed Play whose application is configured to restrict
 *  distribution to the organizations.
 *
 *  @param object The @c GTLRAndroidPublisher_ApksAddExternallyHostedRequest to
 *    include in the query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsApksAddexternallyhosted
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ApksAddExternallyHostedRequest *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId;

@end

/**
 *  Lists all current APKs of the app and edit.
 *
 *  Method: androidpublisher.edits.apks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsApksList : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ApksListResponse.
 *
 *  Lists all current APKs of the app and edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsApksList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Uploads an APK and adds to the current edit.
 *
 *  Method: androidpublisher.edits.apks.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsApksUpload : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_Apk.
 *
 *  Uploads an APK and adds to the current edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    10737418240. Accepted MIME types: application/octet-stream,
 *    application/vnd.android.package-archive
 *
 *  @return GTLRAndroidPublisherQuery_EditsApksUpload
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Lists all current Android App Bundles of the app and edit.
 *
 *  Method: androidpublisher.edits.bundles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsBundlesList : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_BundlesListResponse.
 *
 *  Lists all current Android App Bundles of the app and edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsBundlesList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Uploads a new Android App Bundle to this edit. If you are using the Google
 *  API client libraries, please increase the timeout of the http request before
 *  calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts
 *  and
 *  Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors)
 *  for an example in java.
 *
 *  Method: androidpublisher.edits.bundles.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsBundlesUpload : GTLRAndroidPublisherQuery

/**
 *  Must be set to true if the app bundle installation may trigger a warning on
 *  user devices (for example, if installation size may be over a threshold,
 *  typically 100 MB).
 */
@property(nonatomic, assign) BOOL ackBundleInstallationWarning;

/**
 *  Device tier config (DTC) to be used for generating deliverables (APKs).
 *  Contains id of the DTC or "LATEST" for last uploaded DTC.
 */
@property(nonatomic, copy, nullable) NSString *deviceTierConfigId;

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_Bundle.
 *
 *  Uploads a new Android App Bundle to this edit. If you are using the Google
 *  API client libraries, please increase the timeout of the http request before
 *  calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts
 *  and
 *  Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors)
 *  for an example in java.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    10737418240. Accepted MIME type: application/octet-stream
 *
 *  @return GTLRAndroidPublisherQuery_EditsBundlesUpload
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Commits an app edit.
 *
 *  Method: androidpublisher.edits.commit
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsCommit : GTLRAndroidPublisherQuery

/**
 *  Indicates that the changes in this edit will not be reviewed until they are
 *  explicitly sent for review from the Google Play Console UI. These changes
 *  will be added to any other changes that are not yet sent for review.
 */
@property(nonatomic, assign) BOOL changesNotSentForReview;

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppEdit.
 *
 *  Commits an app edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsCommit
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Gets country availability.
 *
 *  Method: androidpublisher.edits.countryavailability.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsCountryavailabilityGet : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The track to read from. */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_TrackCountryAvailability.
 *
 *  Gets country availability.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param track The track to read from.
 *
 *  @return GTLRAndroidPublisherQuery_EditsCountryavailabilityGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                               track:(NSString *)track;

@end

/**
 *  Deletes an app edit.
 *
 *  Method: androidpublisher.edits.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsDelete : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an app edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsDelete
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Uploads a new deobfuscation file and attaches to the specified APK.
 *
 *  Method: androidpublisher.edits.deobfuscationfiles.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsDeobfuscationfilesUpload : GTLRAndroidPublisherQuery

/** The version code of the APK whose Deobfuscation File is being uploaded. */
@property(nonatomic, assign) NSInteger apkVersionCode;

/**
 *  The type of the deobfuscation file.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherDeobfuscationFileTypeDeobfuscationFileTypeUnspecified
 *        Unspecified deobfuscation file type. (Value:
 *        "deobfuscationFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherDeobfuscationFileTypeProguard Proguard
 *        deobfuscation file type. (Value: "proguard")
 *    @arg @c kGTLRAndroidPublisherDeobfuscationFileTypeNativeCode Native
 *        debugging symbols file type. (Value: "nativeCode")
 */
@property(nonatomic, copy, nullable) NSString *deobfuscationFileType;

/** Unique identifier for this edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Unique identifier for the Android app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_DeobfuscationFilesUploadResponse.
 *
 *  Uploads a new deobfuscation file and attaches to the specified APK.
 *
 *  @param packageName Unique identifier for the Android app.
 *  @param editId Unique identifier for this edit.
 *  @param apkVersionCode The version code of the APK whose Deobfuscation File
 *    is being uploaded.
 *  @param deobfuscationFileType The type of the deobfuscation file.
 *
 *  Likely values for @c deobfuscationFileType:
 *    @arg @c kGTLRAndroidPublisherDeobfuscationFileTypeDeobfuscationFileTypeUnspecified
 *        Unspecified deobfuscation file type. (Value:
 *        "deobfuscationFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherDeobfuscationFileTypeProguard Proguard
 *        deobfuscation file type. (Value: "proguard")
 *    @arg @c kGTLRAndroidPublisherDeobfuscationFileTypeNativeCode Native
 *        debugging symbols file type. (Value: "nativeCode")
 *  @param uploadParameters The media to include in this query. Maximum size
 *    629145600. Accepted MIME type: application/octet-stream
 *
 *  @return GTLRAndroidPublisherQuery_EditsDeobfuscationfilesUpload
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                      apkVersionCode:(NSInteger)apkVersionCode
               deobfuscationFileType:(NSString *)deobfuscationFileType
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Gets details of an app.
 *
 *  Method: androidpublisher.edits.details.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsDetailsGet : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppDetails.
 *
 *  Gets details of an app.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsDetailsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Patches details of an app.
 *
 *  Method: androidpublisher.edits.details.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsDetailsPatch : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppDetails.
 *
 *  Patches details of an app.
 *
 *  @param object The @c GTLRAndroidPublisher_AppDetails to include in the
 *    query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsDetailsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_AppDetails *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId;

@end

/**
 *  Updates details of an app.
 *
 *  Method: androidpublisher.edits.details.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsDetailsUpdate : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppDetails.
 *
 *  Updates details of an app.
 *
 *  @param object The @c GTLRAndroidPublisher_AppDetails to include in the
 *    query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsDetailsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_AppDetails *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId;

@end

/**
 *  Fetches the expansion file configuration for the specified APK.
 *
 *  Method: androidpublisher.edits.expansionfiles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsExpansionfilesGet : GTLRAndroidPublisherQuery

/**
 *  The version code of the APK whose expansion file configuration is being read
 *  or modified.
 */
@property(nonatomic, assign) NSInteger apkVersionCode;

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  The file type of the file configuration which is being read or modified.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified
 *        Unspecified expansion file type. (Value:
 *        "expansionFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Main expansion file.
 *        (Value: "main")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Patch expansion file.
 *        (Value: "patch")
 */
@property(nonatomic, copy, nullable) NSString *expansionFileType;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ExpansionFile.
 *
 *  Fetches the expansion file configuration for the specified APK.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param apkVersionCode The version code of the APK whose expansion file
 *    configuration is being read or modified.
 *  @param expansionFileType The file type of the file configuration which is
 *    being read or modified.
 *
 *  Likely values for @c expansionFileType:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified
 *        Unspecified expansion file type. (Value:
 *        "expansionFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Main expansion file.
 *        (Value: "main")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Patch expansion file.
 *        (Value: "patch")
 *
 *  @return GTLRAndroidPublisherQuery_EditsExpansionfilesGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                      apkVersionCode:(NSInteger)apkVersionCode
                   expansionFileType:(NSString *)expansionFileType;

@end

/**
 *  Patches the APK's expansion file configuration to reference another APK's
 *  expansion file. To add a new expansion file use the Upload method.
 *
 *  Method: androidpublisher.edits.expansionfiles.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsExpansionfilesPatch : GTLRAndroidPublisherQuery

/**
 *  The version code of the APK whose expansion file configuration is being read
 *  or modified.
 */
@property(nonatomic, assign) NSInteger apkVersionCode;

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  The file type of the expansion file configuration which is being updated.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified
 *        Unspecified expansion file type. (Value:
 *        "expansionFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Main expansion file.
 *        (Value: "main")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Patch expansion file.
 *        (Value: "patch")
 */
@property(nonatomic, copy, nullable) NSString *expansionFileType;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ExpansionFile.
 *
 *  Patches the APK's expansion file configuration to reference another APK's
 *  expansion file. To add a new expansion file use the Upload method.
 *
 *  @param object The @c GTLRAndroidPublisher_ExpansionFile to include in the
 *    query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param apkVersionCode The version code of the APK whose expansion file
 *    configuration is being read or modified.
 *  @param expansionFileType The file type of the expansion file configuration
 *    which is being updated.
 *
 *  Likely values for @c expansionFileType:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified
 *        Unspecified expansion file type. (Value:
 *        "expansionFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Main expansion file.
 *        (Value: "main")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Patch expansion file.
 *        (Value: "patch")
 *
 *  @return GTLRAndroidPublisherQuery_EditsExpansionfilesPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ExpansionFile *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                 apkVersionCode:(NSInteger)apkVersionCode
              expansionFileType:(NSString *)expansionFileType;

@end

/**
 *  Updates the APK's expansion file configuration to reference another APK's
 *  expansion file. To add a new expansion file use the Upload method.
 *
 *  Method: androidpublisher.edits.expansionfiles.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsExpansionfilesUpdate : GTLRAndroidPublisherQuery

/**
 *  The version code of the APK whose expansion file configuration is being read
 *  or modified.
 */
@property(nonatomic, assign) NSInteger apkVersionCode;

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  The file type of the file configuration which is being read or modified.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified
 *        Unspecified expansion file type. (Value:
 *        "expansionFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Main expansion file.
 *        (Value: "main")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Patch expansion file.
 *        (Value: "patch")
 */
@property(nonatomic, copy, nullable) NSString *expansionFileType;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ExpansionFile.
 *
 *  Updates the APK's expansion file configuration to reference another APK's
 *  expansion file. To add a new expansion file use the Upload method.
 *
 *  @param object The @c GTLRAndroidPublisher_ExpansionFile to include in the
 *    query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param apkVersionCode The version code of the APK whose expansion file
 *    configuration is being read or modified.
 *  @param expansionFileType The file type of the file configuration which is
 *    being read or modified.
 *
 *  Likely values for @c expansionFileType:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified
 *        Unspecified expansion file type. (Value:
 *        "expansionFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Main expansion file.
 *        (Value: "main")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Patch expansion file.
 *        (Value: "patch")
 *
 *  @return GTLRAndroidPublisherQuery_EditsExpansionfilesUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ExpansionFile *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                 apkVersionCode:(NSInteger)apkVersionCode
              expansionFileType:(NSString *)expansionFileType;

@end

/**
 *  Uploads a new expansion file and attaches to the specified APK.
 *
 *  Method: androidpublisher.edits.expansionfiles.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsExpansionfilesUpload : GTLRAndroidPublisherQuery

/**
 *  The version code of the APK whose expansion file configuration is being read
 *  or modified.
 */
@property(nonatomic, assign) NSInteger apkVersionCode;

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  The file type of the expansion file configuration which is being updated.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified
 *        Unspecified expansion file type. (Value:
 *        "expansionFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Main expansion file.
 *        (Value: "main")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Patch expansion file.
 *        (Value: "patch")
 */
@property(nonatomic, copy, nullable) NSString *expansionFileType;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ExpansionFilesUploadResponse.
 *
 *  Uploads a new expansion file and attaches to the specified APK.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param apkVersionCode The version code of the APK whose expansion file
 *    configuration is being read or modified.
 *  @param expansionFileType The file type of the expansion file configuration
 *    which is being updated.
 *
 *  Likely values for @c expansionFileType:
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeExpansionFileTypeUnspecified
 *        Unspecified expansion file type. (Value:
 *        "expansionFileTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypeMain Main expansion file.
 *        (Value: "main")
 *    @arg @c kGTLRAndroidPublisherExpansionFileTypePatch Patch expansion file.
 *        (Value: "patch")
 *  @param uploadParameters The media to include in this query. Maximum size
 *    2147483648. Accepted MIME type: application/octet-stream
 *
 *  @return GTLRAndroidPublisherQuery_EditsExpansionfilesUpload
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                      apkVersionCode:(NSInteger)apkVersionCode
                   expansionFileType:(NSString *)expansionFileType
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Gets an app edit.
 *
 *  Method: androidpublisher.edits.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsGet : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppEdit.
 *
 *  Gets an app edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Deletes the image (specified by id) from the edit.
 *
 *  Method: androidpublisher.edits.images.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsImagesDelete : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Unique identifier an image within the set of images attached to this edit.
 */
@property(nonatomic, copy, nullable) NSString *imageId;

/**
 *  Type of the Image.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified Unspecified
 *        type. Do not use. (Value: "appImageTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Phone screenshot.
 *        (Value: "phoneScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Seven inch
 *        screenshot. (Value: "sevenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Ten inch
 *        screenshot. (Value: "tenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots TV screenshot. (Value:
 *        "tvScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Wear screenshot.
 *        (Value: "wearScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Icon. (Value: "icon")
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Feature graphic.
 *        (Value: "featureGraphic")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner TV banner. (Value:
 *        "tvBanner")
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German).
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes the image (specified by id) from the edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param language Language localization code (a BCP-47 language tag; for
 *    example, "de-AT" for Austrian German).
 *  @param imageType Type of the Image.
 *  @param imageId Unique identifier an image within the set of images attached
 *    to this edit.
 *
 *  Likely values for @c imageType:
 *    @arg @c kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified Unspecified
 *        type. Do not use. (Value: "appImageTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Phone screenshot.
 *        (Value: "phoneScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Seven inch
 *        screenshot. (Value: "sevenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Ten inch
 *        screenshot. (Value: "tenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots TV screenshot. (Value:
 *        "tvScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Wear screenshot.
 *        (Value: "wearScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Icon. (Value: "icon")
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Feature graphic.
 *        (Value: "featureGraphic")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner TV banner. (Value:
 *        "tvBanner")
 *
 *  @return GTLRAndroidPublisherQuery_EditsImagesDelete
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType
                             imageId:(NSString *)imageId;

@end

/**
 *  Deletes all images for the specified language and image type. Returns an
 *  empty response if no images are found.
 *
 *  Method: androidpublisher.edits.images.deleteall
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsImagesDeleteall : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Type of the Image. Providing an image type that refers to no images is a
 *  no-op.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified Unspecified
 *        type. Do not use. (Value: "appImageTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Phone screenshot.
 *        (Value: "phoneScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Seven inch
 *        screenshot. (Value: "sevenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Ten inch
 *        screenshot. (Value: "tenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots TV screenshot. (Value:
 *        "tvScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Wear screenshot.
 *        (Value: "wearScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Icon. (Value: "icon")
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Feature graphic.
 *        (Value: "featureGraphic")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner TV banner. (Value:
 *        "tvBanner")
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German). Providing a language that is not supported by the App is a
 *  no-op.
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ImagesDeleteAllResponse.
 *
 *  Deletes all images for the specified language and image type. Returns an
 *  empty response if no images are found.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param language Language localization code (a BCP-47 language tag; for
 *    example, "de-AT" for Austrian German). Providing a language that is not
 *    supported by the App is a no-op.
 *  @param imageType Type of the Image. Providing an image type that refers to
 *    no images is a no-op.
 *
 *  Likely values for @c imageType:
 *    @arg @c kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified Unspecified
 *        type. Do not use. (Value: "appImageTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Phone screenshot.
 *        (Value: "phoneScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Seven inch
 *        screenshot. (Value: "sevenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Ten inch
 *        screenshot. (Value: "tenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots TV screenshot. (Value:
 *        "tvScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Wear screenshot.
 *        (Value: "wearScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Icon. (Value: "icon")
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Feature graphic.
 *        (Value: "featureGraphic")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner TV banner. (Value:
 *        "tvBanner")
 *
 *  @return GTLRAndroidPublisherQuery_EditsImagesDeleteall
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType;

@end

/**
 *  Lists all images. The response may be empty.
 *
 *  Method: androidpublisher.edits.images.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsImagesList : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Type of the Image. Providing an image type that refers to no images will
 *  return an empty response.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified Unspecified
 *        type. Do not use. (Value: "appImageTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Phone screenshot.
 *        (Value: "phoneScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Seven inch
 *        screenshot. (Value: "sevenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Ten inch
 *        screenshot. (Value: "tenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots TV screenshot. (Value:
 *        "tvScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Wear screenshot.
 *        (Value: "wearScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Icon. (Value: "icon")
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Feature graphic.
 *        (Value: "featureGraphic")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner TV banner. (Value:
 *        "tvBanner")
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German). There must be a store listing for the specified language.
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ImagesListResponse.
 *
 *  Lists all images. The response may be empty.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param language Language localization code (a BCP-47 language tag; for
 *    example, "de-AT" for Austrian German). There must be a store listing for
 *    the specified language.
 *  @param imageType Type of the Image. Providing an image type that refers to
 *    no images will return an empty response.
 *
 *  Likely values for @c imageType:
 *    @arg @c kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified Unspecified
 *        type. Do not use. (Value: "appImageTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Phone screenshot.
 *        (Value: "phoneScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Seven inch
 *        screenshot. (Value: "sevenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Ten inch
 *        screenshot. (Value: "tenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots TV screenshot. (Value:
 *        "tvScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Wear screenshot.
 *        (Value: "wearScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Icon. (Value: "icon")
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Feature graphic.
 *        (Value: "featureGraphic")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner TV banner. (Value:
 *        "tvBanner")
 *
 *  @return GTLRAndroidPublisherQuery_EditsImagesList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType;

@end

/**
 *  Uploads an image of the specified language and image type, and adds to the
 *  edit.
 *
 *  Method: androidpublisher.edits.images.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsImagesUpload : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Type of the Image.
 *
 *  Likely values:
 *    @arg @c kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified Unspecified
 *        type. Do not use. (Value: "appImageTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Phone screenshot.
 *        (Value: "phoneScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Seven inch
 *        screenshot. (Value: "sevenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Ten inch
 *        screenshot. (Value: "tenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots TV screenshot. (Value:
 *        "tvScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Wear screenshot.
 *        (Value: "wearScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Icon. (Value: "icon")
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Feature graphic.
 *        (Value: "featureGraphic")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner TV banner. (Value:
 *        "tvBanner")
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German). Providing a language that is not supported by the App is a
 *  no-op.
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ImagesUploadResponse.
 *
 *  Uploads an image of the specified language and image type, and adds to the
 *  edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param language Language localization code (a BCP-47 language tag; for
 *    example, "de-AT" for Austrian German). Providing a language that is not
 *    supported by the App is a no-op.
 *  @param imageType Type of the Image.
 *
 *  Likely values for @c imageType:
 *    @arg @c kGTLRAndroidPublisherImageTypeAppImageTypeUnspecified Unspecified
 *        type. Do not use. (Value: "appImageTypeUnspecified")
 *    @arg @c kGTLRAndroidPublisherImageTypePhoneScreenshots Phone screenshot.
 *        (Value: "phoneScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeSevenInchScreenshots Seven inch
 *        screenshot. (Value: "sevenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTenInchScreenshots Ten inch
 *        screenshot. (Value: "tenInchScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvScreenshots TV screenshot. (Value:
 *        "tvScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeWearScreenshots Wear screenshot.
 *        (Value: "wearScreenshots")
 *    @arg @c kGTLRAndroidPublisherImageTypeIcon Icon. (Value: "icon")
 *    @arg @c kGTLRAndroidPublisherImageTypeFeatureGraphic Feature graphic.
 *        (Value: "featureGraphic")
 *    @arg @c kGTLRAndroidPublisherImageTypeTvBanner TV banner. (Value:
 *        "tvBanner")
 *  @param uploadParameters The media to include in this query. Maximum size
 *    15728640. Accepted MIME type: image/ *
 *
 *  @return GTLRAndroidPublisherQuery_EditsImagesUpload
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language
                           imageType:(NSString *)imageType
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Creates a new edit for an app.
 *
 *  Method: androidpublisher.edits.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsInsert : GTLRAndroidPublisherQuery

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppEdit.
 *
 *  Creates a new edit for an app.
 *
 *  @param object The @c GTLRAndroidPublisher_AppEdit to include in the query.
 *  @param packageName Package name of the app.
 *
 *  @return GTLRAndroidPublisherQuery_EditsInsert
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_AppEdit *)object
                    packageName:(NSString *)packageName;

@end

/**
 *  Deletes a localized store listing.
 *
 *  Method: androidpublisher.edits.listings.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsDelete : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German).
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a localized store listing.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param language Language localization code (a BCP-47 language tag; for
 *    example, "de-AT" for Austrian German).
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsDelete
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language;

@end

/**
 *  Deletes all store listings.
 *
 *  Method: androidpublisher.edits.listings.deleteall
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsDeleteall : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes all store listings.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsDeleteall
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Gets a localized store listing.
 *
 *  Method: androidpublisher.edits.listings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsGet : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German).
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_Listing.
 *
 *  Gets a localized store listing.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param language Language localization code (a BCP-47 language tag; for
 *    example, "de-AT" for Austrian German).
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                            language:(NSString *)language;

@end

/**
 *  Lists all localized store listings.
 *
 *  Method: androidpublisher.edits.listings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsList : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ListingsListResponse.
 *
 *  Lists all localized store listings.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Patches a localized store listing.
 *
 *  Method: androidpublisher.edits.listings.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsPatch : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German).
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_Listing.
 *
 *  Patches a localized store listing.
 *
 *  @param object The @c GTLRAndroidPublisher_Listing to include in the query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param language Language localization code (a BCP-47 language tag; for
 *    example, "de-AT" for Austrian German).
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Listing *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                       language:(NSString *)language;

@end

/**
 *  Creates or updates a localized store listing.
 *
 *  Method: androidpublisher.edits.listings.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsListingsUpdate : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/**
 *  Language localization code (a BCP-47 language tag; for example, "de-AT" for
 *  Austrian German).
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_Listing.
 *
 *  Creates or updates a localized store listing.
 *
 *  @param object The @c GTLRAndroidPublisher_Listing to include in the query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param language Language localization code (a BCP-47 language tag; for
 *    example, "de-AT" for Austrian German).
 *
 *  @return GTLRAndroidPublisherQuery_EditsListingsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Listing *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                       language:(NSString *)language;

@end

/**
 *  Gets testers. Note: Testers resource does not support email lists.
 *
 *  Method: androidpublisher.edits.testers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTestersGet : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The track to read from. */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Testers.
 *
 *  Gets testers. Note: Testers resource does not support email lists.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param track The track to read from.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTestersGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                               track:(NSString *)track;

@end

/**
 *  Patches testers. Note: Testers resource does not support email lists.
 *
 *  Method: androidpublisher.edits.testers.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTestersPatch : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The track to update. */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Testers.
 *
 *  Patches testers. Note: Testers resource does not support email lists.
 *
 *  @param object The @c GTLRAndroidPublisher_Testers to include in the query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param track The track to update.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTestersPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Testers *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track;

@end

/**
 *  Updates testers. Note: Testers resource does not support email lists.
 *
 *  Method: androidpublisher.edits.testers.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTestersUpdate : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The track to update. */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Testers.
 *
 *  Updates testers. Note: Testers resource does not support email lists.
 *
 *  @param object The @c GTLRAndroidPublisher_Testers to include in the query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param track The track to update.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTestersUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Testers *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track;

@end

/**
 *  Gets a track.
 *
 *  Method: androidpublisher.edits.tracks.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTracksGet : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Identifier of the track. */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Track.
 *
 *  Gets a track.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param track Identifier of the track.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTracksGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId
                               track:(NSString *)track;

@end

/**
 *  Lists all tracks.
 *
 *  Method: androidpublisher.edits.tracks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTracksList : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_TracksListResponse.
 *
 *  Lists all tracks.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTracksList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Patches a track.
 *
 *  Method: androidpublisher.edits.tracks.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTracksPatch : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Identifier of the track. */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Track.
 *
 *  Patches a track.
 *
 *  @param object The @c GTLRAndroidPublisher_Track to include in the query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param track Identifier of the track.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTracksPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Track *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track;

@end

/**
 *  Updates a track.
 *
 *  Method: androidpublisher.edits.tracks.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsTracksUpdate : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Identifier of the track. */
@property(nonatomic, copy, nullable) NSString *track;

/**
 *  Fetches a @c GTLRAndroidPublisher_Track.
 *
 *  Updates a track.
 *
 *  @param object The @c GTLRAndroidPublisher_Track to include in the query.
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *  @param track Identifier of the track.
 *
 *  @return GTLRAndroidPublisherQuery_EditsTracksUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Track *)object
                    packageName:(NSString *)packageName
                         editId:(NSString *)editId
                          track:(NSString *)track;

@end

/**
 *  Validates an app edit.
 *
 *  Method: androidpublisher.edits.validate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_EditsValidate : GTLRAndroidPublisherQuery

/** Identifier of the edit. */
@property(nonatomic, copy, nullable) NSString *editId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_AppEdit.
 *
 *  Validates an app edit.
 *
 *  @param packageName Package name of the app.
 *  @param editId Identifier of the edit.
 *
 *  @return GTLRAndroidPublisherQuery_EditsValidate
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                              editId:(NSString *)editId;

@end

/**
 *  Downloads a single signed APK generated from an app bundle.
 *
 *  Method: androidpublisher.generatedapks.download
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_GeneratedapksDownload : GTLRAndroidPublisherQuery

/**
 *  Download ID, which uniquely identifies the APK to download. Can be obtained
 *  from the response of `generatedapks.list` method.
 */
@property(nonatomic, copy, nullable) NSString *downloadId;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Version code of the app bundle. */
@property(nonatomic, assign) NSInteger versionCode;

/**
 *  Fetches the requested resource data as a @c GTLRDataObject.
 *
 *  Downloads a single signed APK generated from an app bundle.
 *
 *  @param packageName Package name of the app.
 *  @param versionCode Version code of the app bundle.
 *  @param downloadId Download ID, which uniquely identifies the APK to
 *    download. Can be obtained from the response of `generatedapks.list`
 *    method.
 *
 *  @return GTLRAndroidPublisherQuery_GeneratedapksDownload
 */
+ (instancetype)queryForMediaWithPackageName:(NSString *)packageName
                                 versionCode:(NSInteger)versionCode
                                  downloadId:(NSString *)downloadId;

@end

/**
 *  Returns download metadata for all APKs that were generated from a given app
 *  bundle.
 *
 *  Method: androidpublisher.generatedapks.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_GeneratedapksList : GTLRAndroidPublisherQuery

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Version code of the app bundle. */
@property(nonatomic, assign) NSInteger versionCode;

/**
 *  Fetches a @c GTLRAndroidPublisher_GeneratedApksListResponse.
 *
 *  Returns download metadata for all APKs that were generated from a given app
 *  bundle.
 *
 *  @param packageName Package name of the app.
 *  @param versionCode Version code of the app bundle.
 *
 *  @return GTLRAndroidPublisherQuery_GeneratedapksList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                         versionCode:(NSInteger)versionCode;

@end

/**
 *  Grant access for a user to the given package.
 *
 *  Method: androidpublisher.grants.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_GrantsCreate : GTLRAndroidPublisherQuery

/**
 *  Required. The user which needs permission. Format:
 *  developers/{developer}/users/{user}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAndroidPublisher_Grant.
 *
 *  Grant access for a user to the given package.
 *
 *  @param object The @c GTLRAndroidPublisher_Grant to include in the query.
 *  @param parent Required. The user which needs permission. Format:
 *    developers/{developer}/users/{user}
 *
 *  @return GTLRAndroidPublisherQuery_GrantsCreate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Grant *)object
                         parent:(NSString *)parent;

@end

/**
 *  Removes all access for the user to the given package or developer account.
 *
 *  Method: androidpublisher.grants.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_GrantsDelete : GTLRAndroidPublisherQuery

/**
 *  Required. The name of the grant to delete. Format:
 *  developers/{developer}/users/{email}/grants/{package_name}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes all access for the user to the given package or developer account.
 *
 *  @param name Required. The name of the grant to delete. Format:
 *    developers/{developer}/users/{email}/grants/{package_name}
 *
 *  @return GTLRAndroidPublisherQuery_GrantsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates access for the user to the given package.
 *
 *  Method: androidpublisher.grants.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_GrantsPatch : GTLRAndroidPublisherQuery

/**
 *  Required. Resource name for this grant, following the pattern
 *  "developers/{developer}/users/{email}/grants/{package_name}". If this grant
 *  is for a draft app, the app ID will be used in this resource name instead of
 *  the package name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The list of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAndroidPublisher_Grant.
 *
 *  Updates access for the user to the given package.
 *
 *  @param object The @c GTLRAndroidPublisher_Grant to include in the query.
 *  @param name Required. Resource name for this grant, following the pattern
 *    "developers/{developer}/users/{email}/grants/{package_name}". If this
 *    grant is for a draft app, the app ID will be used in this resource name
 *    instead of the package name.
 *
 *  @return GTLRAndroidPublisherQuery_GrantsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Grant *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes an in-app product (i.e. a managed product or a subscriptions).
 *
 *  Method: androidpublisher.inappproducts.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsDelete : GTLRAndroidPublisherQuery

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Unique identifier for the in-app product. */
@property(nonatomic, copy, nullable) NSString *sku;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an in-app product (i.e. a managed product or a subscriptions).
 *
 *  @param packageName Package name of the app.
 *  @param sku Unique identifier for the in-app product.
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsDelete
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                                 sku:(NSString *)sku;

@end

/**
 *  Gets an in-app product, which can be a managed product or a subscription.
 *
 *  Method: androidpublisher.inappproducts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsGet : GTLRAndroidPublisherQuery

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Unique identifier for the in-app product. */
@property(nonatomic, copy, nullable) NSString *sku;

/**
 *  Fetches a @c GTLRAndroidPublisher_InAppProduct.
 *
 *  Gets an in-app product, which can be a managed product or a subscription.
 *
 *  @param packageName Package name of the app.
 *  @param sku Unique identifier for the in-app product.
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                                 sku:(NSString *)sku;

@end

/**
 *  Creates an in-app product (i.e. a managed product or a subscriptions).
 *
 *  Method: androidpublisher.inappproducts.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsInsert : GTLRAndroidPublisherQuery

/**
 *  If true the prices for all regions targeted by the parent app that don't
 *  have a price specified for this in-app product will be auto converted to the
 *  target currency based on the default price. Defaults to false.
 */
@property(nonatomic, assign) BOOL autoConvertMissingPrices;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_InAppProduct.
 *
 *  Creates an in-app product (i.e. a managed product or a subscriptions).
 *
 *  @param object The @c GTLRAndroidPublisher_InAppProduct to include in the
 *    query.
 *  @param packageName Package name of the app.
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsInsert
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_InAppProduct *)object
                    packageName:(NSString *)packageName;

@end

/**
 *  Lists all in-app products - both managed products and subscriptions. If an
 *  app has a large number of in-app products, the response may be paginated. In
 *  this case the response field `tokenPagination.nextPageToken` will be set and
 *  the caller should provide its value as a `token` request parameter to
 *  retrieve the next page.
 *
 *  Method: androidpublisher.inappproducts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsList : GTLRAndroidPublisherQuery

/** Deprecated and ignored. The page size is determined by the server. */
@property(nonatomic, assign) NSUInteger maxResults;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Deprecated and ignored. Set the `token` parameter to rertieve the next page.
 */
@property(nonatomic, assign) NSUInteger startIndex;

/** Pagination token. If empty, list starts at the first product. */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidPublisher_InappproductsListResponse.
 *
 *  Lists all in-app products - both managed products and subscriptions. If an
 *  app has a large number of in-app products, the response may be paginated. In
 *  this case the response field `tokenPagination.nextPageToken` will be set and
 *  the caller should provide its value as a `token` request parameter to
 *  retrieve the next page.
 *
 *  @param packageName Package name of the app.
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName;

@end

/**
 *  Patches an in-app product (i.e. a managed product or a subscriptions).
 *
 *  Method: androidpublisher.inappproducts.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsPatch : GTLRAndroidPublisherQuery

/**
 *  If true the prices for all regions targeted by the parent app that don't
 *  have a price specified for this in-app product will be auto converted to the
 *  target currency based on the default price. Defaults to false.
 */
@property(nonatomic, assign) BOOL autoConvertMissingPrices;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Unique identifier for the in-app product. */
@property(nonatomic, copy, nullable) NSString *sku;

/**
 *  Fetches a @c GTLRAndroidPublisher_InAppProduct.
 *
 *  Patches an in-app product (i.e. a managed product or a subscriptions).
 *
 *  @param object The @c GTLRAndroidPublisher_InAppProduct to include in the
 *    query.
 *  @param packageName Package name of the app.
 *  @param sku Unique identifier for the in-app product.
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_InAppProduct *)object
                    packageName:(NSString *)packageName
                            sku:(NSString *)sku;

@end

/**
 *  Updates an in-app product (i.e. a managed product or a subscriptions).
 *
 *  Method: androidpublisher.inappproducts.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InappproductsUpdate : GTLRAndroidPublisherQuery

/**
 *  If set to true, and the in-app product with the given package_name and sku
 *  doesn't exist, the in-app product will be created.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  If true the prices for all regions targeted by the parent app that don't
 *  have a price specified for this in-app product will be auto converted to the
 *  target currency based on the default price. Defaults to false.
 */
@property(nonatomic, assign) BOOL autoConvertMissingPrices;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Unique identifier for the in-app product. */
@property(nonatomic, copy, nullable) NSString *sku;

/**
 *  Fetches a @c GTLRAndroidPublisher_InAppProduct.
 *
 *  Updates an in-app product (i.e. a managed product or a subscriptions).
 *
 *  @param object The @c GTLRAndroidPublisher_InAppProduct to include in the
 *    query.
 *  @param packageName Package name of the app.
 *  @param sku Unique identifier for the in-app product.
 *
 *  @return GTLRAndroidPublisherQuery_InappproductsUpdate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_InAppProduct *)object
                    packageName:(NSString *)packageName
                            sku:(NSString *)sku;

@end

/**
 *  Uploads an APK to internal app sharing. If you are using the Google API
 *  client libraries, please increase the timeout of the http request before
 *  calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts
 *  and
 *  Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors)
 *  for an example in java.
 *
 *  Method: androidpublisher.internalappsharingartifacts.uploadapk
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InternalappsharingartifactsUploadapk : GTLRAndroidPublisherQuery

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_InternalAppSharingArtifact.
 *
 *  Uploads an APK to internal app sharing. If you are using the Google API
 *  client libraries, please increase the timeout of the http request before
 *  calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts
 *  and
 *  Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors)
 *  for an example in java.
 *
 *  @param packageName Package name of the app.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    1073741824. Accepted MIME types: application/octet-stream,
 *    application/vnd.android.package-archive
 *
 *  @return GTLRAndroidPublisherQuery_InternalappsharingartifactsUploadapk
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Uploads an app bundle to internal app sharing. If you are using the Google
 *  API client libraries, please increase the timeout of the http request before
 *  calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts
 *  and
 *  Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors)
 *  for an example in java.
 *
 *  Method: androidpublisher.internalappsharingartifacts.uploadbundle
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_InternalappsharingartifactsUploadbundle : GTLRAndroidPublisherQuery

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_InternalAppSharingArtifact.
 *
 *  Uploads an app bundle to internal app sharing. If you are using the Google
 *  API client libraries, please increase the timeout of the http request before
 *  calling this endpoint (a timeout of 2 minutes is recommended). See [Timeouts
 *  and
 *  Errors](https://developers.google.com/api-client-library/java/google-api-java-client/errors)
 *  for an example in java.
 *
 *  @param packageName Package name of the app.
 *  @param uploadParameters The media to include in this query. Maximum size
 *    10737418240. Accepted MIME type: application/octet-stream
 *
 *  @return GTLRAndroidPublisherQuery_InternalappsharingartifactsUploadbundle
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                    uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Calculates the region prices, using today's exchange rate and
 *  country-specific pricing patterns, based on the price in the request for a
 *  set of regions.
 *
 *  Method: androidpublisher.monetization.convertRegionPrices
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationConvertRegionPrices : GTLRAndroidPublisherQuery

/** Required. The app package name. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Fetches a @c GTLRAndroidPublisher_ConvertRegionPricesResponse.
 *
 *  Calculates the region prices, using today's exchange rate and
 *  country-specific pricing patterns, based on the price in the request for a
 *  set of regions.
 *
 *  @param object The @c GTLRAndroidPublisher_ConvertRegionPricesRequest to
 *    include in the query.
 *  @param packageName Required. The app package name.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationConvertRegionPrices
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ConvertRegionPricesRequest *)object
                    packageName:(NSString *)packageName;

@end

/**
 *  Archives a subscription. Can only be done if at least one base plan was
 *  active in the past, and no base plan is available for new or existing
 *  subscribers currently. This action is irreversible, and the subscription ID
 *  will remain reserved.
 *
 *  Method: androidpublisher.monetization.subscriptions.archive
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsArchive : GTLRAndroidPublisherQuery

/**
 *  Required. The parent app (package name) of the app of the subscription to
 *  delete.
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Required. The unique product ID of the subscription to delete. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidPublisher_Subscription.
 *
 *  Archives a subscription. Can only be done if at least one base plan was
 *  active in the past, and no base plan is available for new or existing
 *  subscribers currently. This action is irreversible, and the subscription ID
 *  will remain reserved.
 *
 *  @param object The @c GTLRAndroidPublisher_ArchiveSubscriptionRequest to
 *    include in the query.
 *  @param packageName Required. The parent app (package name) of the app of the
 *    subscription to delete.
 *  @param productId Required. The unique product ID of the subscription to
 *    delete.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsArchive
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ArchiveSubscriptionRequest *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId;

@end

/**
 *  Activates a base plan. Once activated, base plans will be available to new
 *  subscribers.
 *
 *  Method: androidpublisher.monetization.subscriptions.basePlans.activate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansActivate : GTLRAndroidPublisherQuery

/** Required. The unique base plan ID of the base plan to activate. */
@property(nonatomic, copy, nullable) NSString *basePlanId;

/** Required. The parent app (package name) of the base plan to activate. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Required. The parent subscription (ID) of the base plan to activate. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidPublisher_Subscription.
 *
 *  Activates a base plan. Once activated, base plans will be available to new
 *  subscribers.
 *
 *  @param object The @c GTLRAndroidPublisher_ActivateBasePlanRequest to include
 *    in the query.
 *  @param packageName Required. The parent app (package name) of the base plan
 *    to activate.
 *  @param productId Required. The parent subscription (ID) of the base plan to
 *    activate.
 *  @param basePlanId Required. The unique base plan ID of the base plan to
 *    activate.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansActivate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ActivateBasePlanRequest *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                     basePlanId:(NSString *)basePlanId;

@end

/**
 *  Deactivates a base plan. Once deactivated, the base plan will become
 *  unavailable to new subscribers, but existing subscribers will maintain their
 *  subscription
 *
 *  Method: androidpublisher.monetization.subscriptions.basePlans.deactivate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansDeactivate : GTLRAndroidPublisherQuery

/** Required. The unique base plan ID of the base plan to deactivate. */
@property(nonatomic, copy, nullable) NSString *basePlanId;

/** Required. The parent app (package name) of the base plan to deactivate. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Required. The parent subscription (ID) of the base plan to deactivate. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidPublisher_Subscription.
 *
 *  Deactivates a base plan. Once deactivated, the base plan will become
 *  unavailable to new subscribers, but existing subscribers will maintain their
 *  subscription
 *
 *  @param object The @c GTLRAndroidPublisher_DeactivateBasePlanRequest to
 *    include in the query.
 *  @param packageName Required. The parent app (package name) of the base plan
 *    to deactivate.
 *  @param productId Required. The parent subscription (ID) of the base plan to
 *    deactivate.
 *  @param basePlanId Required. The unique base plan ID of the base plan to
 *    deactivate.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansDeactivate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_DeactivateBasePlanRequest *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                     basePlanId:(NSString *)basePlanId;

@end

/**
 *  Deletes a base plan. Can only be done for draft base plans. This action is
 *  irreversible.
 *
 *  Method: androidpublisher.monetization.subscriptions.basePlans.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansDelete : GTLRAndroidPublisherQuery

/** Required. The unique offer ID of the base plan to delete. */
@property(nonatomic, copy, nullable) NSString *basePlanId;

/** Required. The parent app (package name) of the base plan to delete. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Required. The parent subscription (ID) of the base plan to delete. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a base plan. Can only be done for draft base plans. This action is
 *  irreversible.
 *
 *  @param packageName Required. The parent app (package name) of the base plan
 *    to delete.
 *  @param productId Required. The parent subscription (ID) of the base plan to
 *    delete.
 *  @param basePlanId Required. The unique offer ID of the base plan to delete.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansDelete
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId
                          basePlanId:(NSString *)basePlanId;

@end

/**
 *  Migrates subscribers who are receiving an historical subscription price to
 *  the currently-offered price for the specified region. Requests will cause
 *  price change notifications to be sent to users who are currently receiving
 *  an historical price older than the supplied timestamp. Subscribers who do
 *  not agree to the new price will have their subscription ended at the next
 *  renewal.
 *
 *  Method: androidpublisher.monetization.subscriptions.basePlans.migratePrices
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansMigratePrices : GTLRAndroidPublisherQuery

/** Required. The unique base plan ID of the base plan to update prices on. */
@property(nonatomic, copy, nullable) NSString *basePlanId;

/**
 *  Required. Package name of the parent app. Must be equal to the package_name
 *  field on the Subscription resource.
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Required. The ID of the subscription to update. Must be equal to the
 *  product_id field on the Subscription resource.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidPublisher_MigrateBasePlanPricesResponse.
 *
 *  Migrates subscribers who are receiving an historical subscription price to
 *  the currently-offered price for the specified region. Requests will cause
 *  price change notifications to be sent to users who are currently receiving
 *  an historical price older than the supplied timestamp. Subscribers who do
 *  not agree to the new price will have their subscription ended at the next
 *  renewal.
 *
 *  @param object The @c GTLRAndroidPublisher_MigrateBasePlanPricesRequest to
 *    include in the query.
 *  @param packageName Required. Package name of the parent app. Must be equal
 *    to the package_name field on the Subscription resource.
 *  @param productId Required. The ID of the subscription to update. Must be
 *    equal to the product_id field on the Subscription resource.
 *  @param basePlanId Required. The unique base plan ID of the base plan to
 *    update prices on.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansMigratePrices
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_MigrateBasePlanPricesRequest *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                     basePlanId:(NSString *)basePlanId;

@end

/**
 *  Activates a subscription offer. Once activated, subscription offers will be
 *  available to new subscribers.
 *
 *  Method: androidpublisher.monetization.subscriptions.basePlans.offers.activate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersActivate : GTLRAndroidPublisherQuery

/** Required. The parent base plan (ID) of the offer to activate. */
@property(nonatomic, copy, nullable) NSString *basePlanId;

/** Required. The unique offer ID of the offer to activate. */
@property(nonatomic, copy, nullable) NSString *offerId;

/** Required. The parent app (package name) of the offer to activate. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Required. The parent subscription (ID) of the offer to activate. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidPublisher_SubscriptionOffer.
 *
 *  Activates a subscription offer. Once activated, subscription offers will be
 *  available to new subscribers.
 *
 *  @param object The @c GTLRAndroidPublisher_ActivateSubscriptionOfferRequest
 *    to include in the query.
 *  @param packageName Required. The parent app (package name) of the offer to
 *    activate.
 *  @param productId Required. The parent subscription (ID) of the offer to
 *    activate.
 *  @param basePlanId Required. The parent base plan (ID) of the offer to
 *    activate.
 *  @param offerId Required. The unique offer ID of the offer to activate.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersActivate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ActivateSubscriptionOfferRequest *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                     basePlanId:(NSString *)basePlanId
                        offerId:(NSString *)offerId;

@end

/**
 *  Creates a new subscription offer. Only auto-renewing base plans can have
 *  subscription offers. The offer state will be DRAFT until it is activated.
 *
 *  Method: androidpublisher.monetization.subscriptions.basePlans.offers.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersCreate : GTLRAndroidPublisherQuery

/**
 *  Required. The parent base plan (ID) for which the offer should be created.
 *  Must be equal to the base_plan_id field on the SubscriptionOffer resource.
 */
@property(nonatomic, copy, nullable) NSString *basePlanId;

/**
 *  Required. The ID to use for the offer. For the requirements on this format,
 *  see the documentation of the offer_id field on the SubscriptionOffer
 *  resource.
 */
@property(nonatomic, copy, nullable) NSString *offerId;

/**
 *  Required. The parent app (package name) for which the offer should be
 *  created. Must be equal to the package_name field on the Subscription
 *  resource.
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Required. The parent subscription (ID) for which the offer should be
 *  created. Must be equal to the product_id field on the SubscriptionOffer
 *  resource.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Required. A string representing version of the available regions being used
 *  for the specified resource. The current version is 2022/01.
 */
@property(nonatomic, copy, nullable) NSString *regionsVersionVersion;

/**
 *  Fetches a @c GTLRAndroidPublisher_SubscriptionOffer.
 *
 *  Creates a new subscription offer. Only auto-renewing base plans can have
 *  subscription offers. The offer state will be DRAFT until it is activated.
 *
 *  @param object The @c GTLRAndroidPublisher_SubscriptionOffer to include in
 *    the query.
 *  @param packageName Required. The parent app (package name) for which the
 *    offer should be created. Must be equal to the package_name field on the
 *    Subscription resource.
 *  @param productId Required. The parent subscription (ID) for which the offer
 *    should be created. Must be equal to the product_id field on the
 *    SubscriptionOffer resource.
 *  @param basePlanId Required. The parent base plan (ID) for which the offer
 *    should be created. Must be equal to the base_plan_id field on the
 *    SubscriptionOffer resource.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersCreate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_SubscriptionOffer *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                     basePlanId:(NSString *)basePlanId;

@end

/**
 *  Deactivates a subscription offer. Once deactivated, existing subscribers
 *  will maintain their subscription, but the offer will become unavailable to
 *  new subscribers.
 *
 *  Method: androidpublisher.monetization.subscriptions.basePlans.offers.deactivate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersDeactivate : GTLRAndroidPublisherQuery

/** Required. The parent base plan (ID) of the offer to deactivate. */
@property(nonatomic, copy, nullable) NSString *basePlanId;

/** Required. The unique offer ID of the offer to deactivate. */
@property(nonatomic, copy, nullable) NSString *offerId;

/** Required. The parent app (package name) of the offer to deactivate. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Required. The parent subscription (ID) of the offer to deactivate. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidPublisher_SubscriptionOffer.
 *
 *  Deactivates a subscription offer. Once deactivated, existing subscribers
 *  will maintain their subscription, but the offer will become unavailable to
 *  new subscribers.
 *
 *  @param object The @c GTLRAndroidPublisher_DeactivateSubscriptionOfferRequest
 *    to include in the query.
 *  @param packageName Required. The parent app (package name) of the offer to
 *    deactivate.
 *  @param productId Required. The parent subscription (ID) of the offer to
 *    deactivate.
 *  @param basePlanId Required. The parent base plan (ID) of the offer to
 *    deactivate.
 *  @param offerId Required. The unique offer ID of the offer to deactivate.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersDeactivate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_DeactivateSubscriptionOfferRequest *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                     basePlanId:(NSString *)basePlanId
                        offerId:(NSString *)offerId;

@end

/**
 *  Deletes a subscription offer. Can only be done for draft offers. This action
 *  is irreversible.
 *
 *  Method: androidpublisher.monetization.subscriptions.basePlans.offers.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersDelete : GTLRAndroidPublisherQuery

/** Required. The parent base plan (ID) of the offer to delete. */
@property(nonatomic, copy, nullable) NSString *basePlanId;

/** Required. The unique offer ID of the offer to delete. */
@property(nonatomic, copy, nullable) NSString *offerId;

/** Required. The parent app (package name) of the offer to delete. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Required. The parent subscription (ID) of the offer to delete. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a subscription offer. Can only be done for draft offers. This action
 *  is irreversible.
 *
 *  @param packageName Required. The parent app (package name) of the offer to
 *    delete.
 *  @param productId Required. The parent subscription (ID) of the offer to
 *    delete.
 *  @param basePlanId Required. The parent base plan (ID) of the offer to
 *    delete.
 *  @param offerId Required. The unique offer ID of the offer to delete.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersDelete
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId
                          basePlanId:(NSString *)basePlanId
                             offerId:(NSString *)offerId;

@end

/**
 *  Reads a single offer
 *
 *  Method: androidpublisher.monetization.subscriptions.basePlans.offers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersGet : GTLRAndroidPublisherQuery

/** Required. The parent base plan (ID) of the offer to get. */
@property(nonatomic, copy, nullable) NSString *basePlanId;

/** Required. The unique offer ID of the offer to get. */
@property(nonatomic, copy, nullable) NSString *offerId;

/** Required. The parent app (package name) of the offer to get. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Required. The parent subscription (ID) of the offer to get. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidPublisher_SubscriptionOffer.
 *
 *  Reads a single offer
 *
 *  @param packageName Required. The parent app (package name) of the offer to
 *    get.
 *  @param productId Required. The parent subscription (ID) of the offer to get.
 *  @param basePlanId Required. The parent base plan (ID) of the offer to get.
 *  @param offerId Required. The unique offer ID of the offer to get.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId
                          basePlanId:(NSString *)basePlanId
                             offerId:(NSString *)offerId;

@end

/**
 *  Lists all offers under a given subscription.
 *
 *  Method: androidpublisher.monetization.subscriptions.basePlans.offers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersList : GTLRAndroidPublisherQuery

/**
 *  Required. The parent base plan (ID) for which the offers should be read. May
 *  be specified as '-' to read all offers under a subscription.
 */
@property(nonatomic, copy, nullable) NSString *basePlanId;

/**
 *  Required. The parent app (package name) for which the subscriptions should
 *  be read.
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  The maximum number of subscriptions to return. The service may return fewer
 *  than this value. If unspecified, at most 50 subscriptions will be returned.
 *  The maximum value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListSubscriptionsOffers` call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to `ListSubscriptionOffers` must match the call that
 *  provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent subscription (ID) for which the offers should be read.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidPublisher_ListSubscriptionOffersResponse.
 *
 *  Lists all offers under a given subscription.
 *
 *  @param packageName Required. The parent app (package name) for which the
 *    subscriptions should be read.
 *  @param productId Required. The parent subscription (ID) for which the offers
 *    should be read.
 *  @param basePlanId Required. The parent base plan (ID) for which the offers
 *    should be read. May be specified as '-' to read all offers under a
 *    subscription.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId
                          basePlanId:(NSString *)basePlanId;

@end

/**
 *  Updates an existing subscription offer.
 *
 *  Method: androidpublisher.monetization.subscriptions.basePlans.offers.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersPatch : GTLRAndroidPublisherQuery

/**
 *  Required. Immutable. The ID of the base plan to which this offer is an
 *  extension.
 */
@property(nonatomic, copy, nullable) NSString *basePlanId;

/**
 *  Required. Immutable. Unique ID of this subscription offer. Must be unique
 *  within the base plan.
 */
@property(nonatomic, copy, nullable) NSString *offerId;

/**
 *  Required. Immutable. The package name of the app the parent subscription
 *  belongs to.
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Required. Immutable. The ID of the parent subscription this offer belongs
 *  to.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Required. A string representing version of the available regions being used
 *  for the specified resource. The current version is 2022/01.
 */
@property(nonatomic, copy, nullable) NSString *regionsVersionVersion;

/**
 *  Required. The list of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAndroidPublisher_SubscriptionOffer.
 *
 *  Updates an existing subscription offer.
 *
 *  @param object The @c GTLRAndroidPublisher_SubscriptionOffer to include in
 *    the query.
 *  @param packageName Required. Immutable. The package name of the app the
 *    parent subscription belongs to.
 *  @param productId Required. Immutable. The ID of the parent subscription this
 *    offer belongs to.
 *  @param basePlanId Required. Immutable. The ID of the base plan to which this
 *    offer is an extension.
 *  @param offerId Required. Immutable. Unique ID of this subscription offer.
 *    Must be unique within the base plan.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsBasePlansOffersPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_SubscriptionOffer *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                     basePlanId:(NSString *)basePlanId
                        offerId:(NSString *)offerId;

@end

/**
 *  Creates a new subscription. Newly added base plans will remain in draft
 *  state until activated.
 *
 *  Method: androidpublisher.monetization.subscriptions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsCreate : GTLRAndroidPublisherQuery

/**
 *  Required. The parent app (package name) for which the subscription should be
 *  created. Must be equal to the package_name field on the Subscription
 *  resource.
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Required. The ID to use for the subscription. For the requirements on this
 *  format, see the documentation of the product_id field on the Subscription
 *  resource.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Required. A string representing version of the available regions being used
 *  for the specified resource. The current version is 2022/01.
 */
@property(nonatomic, copy, nullable) NSString *regionsVersionVersion;

/**
 *  Fetches a @c GTLRAndroidPublisher_Subscription.
 *
 *  Creates a new subscription. Newly added base plans will remain in draft
 *  state until activated.
 *
 *  @param object The @c GTLRAndroidPublisher_Subscription to include in the
 *    query.
 *  @param packageName Required. The parent app (package name) for which the
 *    subscription should be created. Must be equal to the package_name field on
 *    the Subscription resource.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsCreate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Subscription *)object
                    packageName:(NSString *)packageName;

@end

/**
 *  Deletes a subscription. A subscription can only be deleted if it has never
 *  had a base plan published.
 *
 *  Method: androidpublisher.monetization.subscriptions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsDelete : GTLRAndroidPublisherQuery

/**
 *  Required. The parent app (package name) of the app of the subscription to
 *  delete.
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Required. The unique product ID of the subscription to delete. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a subscription. A subscription can only be deleted if it has never
 *  had a base plan published.
 *
 *  @param packageName Required. The parent app (package name) of the app of the
 *    subscription to delete.
 *  @param productId Required. The unique product ID of the subscription to
 *    delete.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsDelete
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId;

@end

/**
 *  Reads a single subscription.
 *
 *  Method: androidpublisher.monetization.subscriptions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsGet : GTLRAndroidPublisherQuery

/** Required. The parent app (package name) of the subscription to get. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Required. The unique product ID of the subscription to get. */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Fetches a @c GTLRAndroidPublisher_Subscription.
 *
 *  Reads a single subscription.
 *
 *  @param packageName Required. The parent app (package name) of the
 *    subscription to get.
 *  @param productId Required. The unique product ID of the subscription to get.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId;

@end

/**
 *  Lists all subscriptions under a given app.
 *
 *  Method: androidpublisher.monetization.subscriptions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsList : GTLRAndroidPublisherQuery

/**
 *  Required. The parent app (package name) for which the subscriptions should
 *  be read.
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  The maximum number of subscriptions to return. The service may return fewer
 *  than this value. If unspecified, at most 50 subscriptions will be returned.
 *  The maximum value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListSubscriptions` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListSubscriptions` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Whether archived subscriptions should be included in the response. Defaults
 *  to false.
 */
@property(nonatomic, assign) BOOL showArchived;

/**
 *  Fetches a @c GTLRAndroidPublisher_ListSubscriptionsResponse.
 *
 *  Lists all subscriptions under a given app.
 *
 *  @param packageName Required. The parent app (package name) for which the
 *    subscriptions should be read.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName;

@end

/**
 *  Updates an existing subscription.
 *
 *  Method: androidpublisher.monetization.subscriptions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_MonetizationSubscriptionsPatch : GTLRAndroidPublisherQuery

/** Immutable. Package name of the parent app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Immutable. Unique product ID of the product. Unique within the parent app.
 *  Product IDs must be composed of lower-case letters (a-z), numbers (0-9),
 *  underscores (_) and dots (.). It must start with a lower-case letter or
 *  number, and be between 1 and 40 (inclusive) characters in length.
 */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  Required. A string representing version of the available regions being used
 *  for the specified resource. The current version is 2022/01.
 */
@property(nonatomic, copy, nullable) NSString *regionsVersionVersion;

/**
 *  Required. The list of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAndroidPublisher_Subscription.
 *
 *  Updates an existing subscription.
 *
 *  @param object The @c GTLRAndroidPublisher_Subscription to include in the
 *    query.
 *  @param packageName Immutable. Package name of the parent app.
 *  @param productId Immutable. Unique product ID of the product. Unique within
 *    the parent app. Product IDs must be composed of lower-case letters (a-z),
 *    numbers (0-9), underscores (_) and dots (.). It must start with a
 *    lower-case letter or number, and be between 1 and 40 (inclusive)
 *    characters in length.
 *
 *  @return GTLRAndroidPublisherQuery_MonetizationSubscriptionsPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Subscription *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId;

@end

/**
 *  Refunds a user's subscription or in-app purchase order. Orders older than 1
 *  year cannot be refunded.
 *
 *  Method: androidpublisher.orders.refund
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_OrdersRefund : GTLRAndroidPublisherQuery

/**
 *  The order ID provided to the user when the subscription or in-app order was
 *  purchased.
 */
@property(nonatomic, copy, nullable) NSString *orderId;

/**
 *  The package name of the application for which this subscription or in-app
 *  item was purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Whether to revoke the purchased item. If set to true, access to the
 *  subscription or in-app item will be terminated immediately. If the item is a
 *  recurring subscription, all future payments will also be terminated.
 *  Consumed in-app items need to be handled by developer's app. (optional).
 */
@property(nonatomic, assign) BOOL revoke;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Refunds a user's subscription or in-app purchase order. Orders older than 1
 *  year cannot be refunded.
 *
 *  @param packageName The package name of the application for which this
 *    subscription or in-app item was purchased (for example, 'com.some.thing').
 *  @param orderId The order ID provided to the user when the subscription or
 *    in-app order was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_OrdersRefund
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                             orderId:(NSString *)orderId;

@end

/**
 *  Acknowledges a purchase of an inapp item.
 *
 *  Method: androidpublisher.purchases.products.acknowledge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesProductsAcknowledge : GTLRAndroidPublisherQuery

/**
 *  The package name of the application the inapp product was sold in (for
 *  example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The inapp product SKU (for example, 'com.some.thing.inapp1'). */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  The token provided to the user's device when the inapp product was
 *  purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Acknowledges a purchase of an inapp item.
 *
 *  @param object The @c GTLRAndroidPublisher_ProductPurchasesAcknowledgeRequest
 *    to include in the query.
 *  @param packageName The package name of the application the inapp product was
 *    sold in (for example, 'com.some.thing').
 *  @param productId The inapp product SKU (for example,
 *    'com.some.thing.inapp1').
 *  @param token The token provided to the user's device when the inapp product
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesProductsAcknowledge
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ProductPurchasesAcknowledgeRequest *)object
                    packageName:(NSString *)packageName
                      productId:(NSString *)productId
                          token:(NSString *)token;

@end

/**
 *  Checks the purchase and consumption status of an inapp item.
 *
 *  Method: androidpublisher.purchases.products.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesProductsGet : GTLRAndroidPublisherQuery

/**
 *  The package name of the application the inapp product was sold in (for
 *  example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The inapp product SKU (for example, 'com.some.thing.inapp1'). */
@property(nonatomic, copy, nullable) NSString *productId;

/**
 *  The token provided to the user's device when the inapp product was
 *  purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidPublisher_ProductPurchase.
 *
 *  Checks the purchase and consumption status of an inapp item.
 *
 *  @param packageName The package name of the application the inapp product was
 *    sold in (for example, 'com.some.thing').
 *  @param productId The inapp product SKU (for example,
 *    'com.some.thing.inapp1').
 *  @param token The token provided to the user's device when the inapp product
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesProductsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                           productId:(NSString *)productId
                               token:(NSString *)token;

@end

/**
 *  Acknowledges a subscription purchase.
 *
 *  Method: androidpublisher.purchases.subscriptions.acknowledge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsAcknowledge : GTLRAndroidPublisherQuery

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Acknowledges a subscription purchase.
 *
 *  @param object The @c
 *    GTLRAndroidPublisher_SubscriptionPurchasesAcknowledgeRequest to include in
 *    the query.
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsAcknowledge
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_SubscriptionPurchasesAcknowledgeRequest *)object
                    packageName:(NSString *)packageName
                 subscriptionId:(NSString *)subscriptionId
                          token:(NSString *)token;

@end

/**
 *  Cancels a user's subscription purchase. The subscription remains valid until
 *  its expiration time.
 *
 *  Method: androidpublisher.purchases.subscriptions.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsCancel : GTLRAndroidPublisherQuery

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Cancels a user's subscription purchase. The subscription remains valid until
 *  its expiration time.
 *
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsCancel
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token;

@end

/**
 *  Defers a user's subscription purchase until a specified future expiration
 *  time.
 *
 *  Method: androidpublisher.purchases.subscriptions.defer
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsDefer : GTLRAndroidPublisherQuery

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidPublisher_SubscriptionPurchasesDeferResponse.
 *
 *  Defers a user's subscription purchase until a specified future expiration
 *  time.
 *
 *  @param object The @c GTLRAndroidPublisher_SubscriptionPurchasesDeferRequest
 *    to include in the query.
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsDefer
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_SubscriptionPurchasesDeferRequest *)object
                    packageName:(NSString *)packageName
                 subscriptionId:(NSString *)subscriptionId
                          token:(NSString *)token;

@end

/**
 *  Checks whether a user's subscription purchase is valid and returns its
 *  expiry time.
 *
 *  Method: androidpublisher.purchases.subscriptions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsGet : GTLRAndroidPublisherQuery

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidPublisher_SubscriptionPurchase.
 *
 *  Checks whether a user's subscription purchase is valid and returns its
 *  expiry time.
 *
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token;

@end

/**
 *  Refunds a user's subscription purchase, but the subscription remains valid
 *  until its expiration time and it will continue to recur.
 *
 *  Method: androidpublisher.purchases.subscriptions.refund
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsRefund : GTLRAndroidPublisherQuery

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** "The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Refunds a user's subscription purchase, but the subscription remains valid
 *  until its expiration time and it will continue to recur.
 *
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId "The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsRefund
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token;

@end

/**
 *  Refunds and immediately revokes a user's subscription purchase. Access to
 *  the subscription will be terminated immediately and it will stop recurring.
 *
 *  Method: androidpublisher.purchases.subscriptions.revoke
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsRevoke : GTLRAndroidPublisherQuery

/**
 *  The package name of the application for which this subscription was
 *  purchased (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The purchased subscription ID (for example, 'monthly001'). */
@property(nonatomic, copy, nullable) NSString *subscriptionId;

/**
 *  The token provided to the user's device when the subscription was purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Refunds and immediately revokes a user's subscription purchase. Access to
 *  the subscription will be terminated immediately and it will stop recurring.
 *
 *  @param packageName The package name of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param subscriptionId The purchased subscription ID (for example,
 *    'monthly001').
 *  @param token The token provided to the user's device when the subscription
 *    was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsRevoke
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                      subscriptionId:(NSString *)subscriptionId
                               token:(NSString *)token;

@end

/**
 *  Get metadata about a subscription
 *
 *  Method: androidpublisher.purchases.subscriptionsv2.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesSubscriptionsv2Get : GTLRAndroidPublisherQuery

/**
 *  The package of the application for which this subscription was purchased
 *  (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Required. The token provided to the user's device when the subscription was
 *  purchased.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  Fetches a @c GTLRAndroidPublisher_SubscriptionPurchaseV2.
 *
 *  Get metadata about a subscription
 *
 *  @param packageName The package of the application for which this
 *    subscription was purchased (for example, 'com.some.thing').
 *  @param token Required. The token provided to the user's device when the
 *    subscription was purchased.
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesSubscriptionsv2Get
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                               token:(NSString *)token;

@end

/**
 *  Lists the purchases that were canceled, refunded or charged-back.
 *
 *  Method: androidpublisher.purchases.voidedpurchases.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_PurchasesVoidedpurchasesList : GTLRAndroidPublisherQuery

/**
 *  The time, in milliseconds since the Epoch, of the newest voided purchase
 *  that you want to see in the response. The value of this parameter cannot be
 *  greater than the current time and is ignored if a pagination token is set.
 *  Default value is current time. Note: This filter is applied on the time at
 *  which the record is seen as voided by our systems and not the actual voided
 *  time returned in the response.
 */
@property(nonatomic, assign) long long endTime;

/**
 *  Defines how many results the list operation should return. The default
 *  number depends on the resource collection.
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  The package name of the application for which voided purchases need to be
 *  returned (for example, 'com.some.thing').
 */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Defines the index of the first element to return. This can only be used if
 *  indexed paging is enabled.
 */
@property(nonatomic, assign) NSUInteger startIndex;

/**
 *  The time, in milliseconds since the Epoch, of the oldest voided purchase
 *  that you want to see in the response. The value of this parameter cannot be
 *  older than 30 days and is ignored if a pagination token is set. Default
 *  value is current time minus 30 days. Note: This filter is applied on the
 *  time at which the record is seen as voided by our systems and not the actual
 *  voided time returned in the response.
 */
@property(nonatomic, assign) long long startTime;

/**
 *  Defines the token of the page to return, usually taken from TokenPagination.
 *  This can only be used if token paging is enabled.
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  The type of voided purchases that you want to see in the response. Possible
 *  values are: 0. Only voided in-app product purchases will be returned in the
 *  response. This is the default value. 1. Both voided in-app purchases and
 *  voided subscription purchases will be returned in the response. Note: Before
 *  requesting to receive voided subscription purchases, you must switch to use
 *  orderId in the response which uniquely identifies one-time purchases and
 *  subscriptions. Otherwise, you will receive multiple subscription orders with
 *  the same PurchaseToken, because subscription renewal orders share the same
 *  PurchaseToken.
 */
@property(nonatomic, assign) NSInteger type;

/**
 *  Fetches a @c GTLRAndroidPublisher_VoidedPurchasesListResponse.
 *
 *  Lists the purchases that were canceled, refunded or charged-back.
 *
 *  @param packageName The package name of the application for which voided
 *    purchases need to be returned (for example, 'com.some.thing').
 *
 *  @return GTLRAndroidPublisherQuery_PurchasesVoidedpurchasesList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName;

@end

/**
 *  Gets a single review.
 *
 *  Method: androidpublisher.reviews.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_ReviewsGet : GTLRAndroidPublisherQuery

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Unique identifier for a review. */
@property(nonatomic, copy, nullable) NSString *reviewId;

/** Language localization code. */
@property(nonatomic, copy, nullable) NSString *translationLanguage;

/**
 *  Fetches a @c GTLRAndroidPublisher_Review.
 *
 *  Gets a single review.
 *
 *  @param packageName Package name of the app.
 *  @param reviewId Unique identifier for a review.
 *
 *  @return GTLRAndroidPublisherQuery_ReviewsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                            reviewId:(NSString *)reviewId;

@end

/**
 *  Lists all reviews.
 *
 *  Method: androidpublisher.reviews.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_ReviewsList : GTLRAndroidPublisherQuery

/** How many results the list operation should return. */
@property(nonatomic, assign) NSUInteger maxResults;

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The index of the first element to return. */
@property(nonatomic, assign) NSUInteger startIndex;

/** Pagination token. If empty, list starts at the first review. */
@property(nonatomic, copy, nullable) NSString *token;

/** Language localization code. */
@property(nonatomic, copy, nullable) NSString *translationLanguage;

/**
 *  Fetches a @c GTLRAndroidPublisher_ReviewsListResponse.
 *
 *  Lists all reviews.
 *
 *  @param packageName Package name of the app.
 *
 *  @return GTLRAndroidPublisherQuery_ReviewsList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName;

@end

/**
 *  Replies to a single review, or updates an existing reply.
 *
 *  Method: androidpublisher.reviews.reply
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_ReviewsReply : GTLRAndroidPublisherQuery

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** Unique identifier for a review. */
@property(nonatomic, copy, nullable) NSString *reviewId;

/**
 *  Fetches a @c GTLRAndroidPublisher_ReviewsReplyResponse.
 *
 *  Replies to a single review, or updates an existing reply.
 *
 *  @param object The @c GTLRAndroidPublisher_ReviewsReplyRequest to include in
 *    the query.
 *  @param packageName Package name of the app.
 *  @param reviewId Unique identifier for a review.
 *
 *  @return GTLRAndroidPublisherQuery_ReviewsReply
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_ReviewsReplyRequest *)object
                    packageName:(NSString *)packageName
                       reviewId:(NSString *)reviewId;

@end

/**
 *  Creates an APK which is suitable for inclusion in a system image from an
 *  already uploaded Android App Bundle.
 *
 *  Method: androidpublisher.systemapks.variants.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_SystemapksVariantsCreate : GTLRAndroidPublisherQuery

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The version code of the App Bundle. */
@property(nonatomic, assign) long long versionCode;

/**
 *  Fetches a @c GTLRAndroidPublisher_Variant.
 *
 *  Creates an APK which is suitable for inclusion in a system image from an
 *  already uploaded Android App Bundle.
 *
 *  @param object The @c GTLRAndroidPublisher_Variant to include in the query.
 *  @param packageName Package name of the app.
 *  @param versionCode The version code of the App Bundle.
 *
 *  @return GTLRAndroidPublisherQuery_SystemapksVariantsCreate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_Variant *)object
                    packageName:(NSString *)packageName
                    versionCode:(long long)versionCode;

@end

/**
 *  Downloads a previously created system APK which is suitable for inclusion in
 *  a system image.
 *
 *  Method: androidpublisher.systemapks.variants.download
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_SystemapksVariantsDownload : GTLRAndroidPublisherQuery

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The ID of a previously created system APK variant. */
@property(nonatomic, assign) NSUInteger variantId;

/** The version code of the App Bundle. */
@property(nonatomic, assign) long long versionCode;

/**
 *  Fetches the requested resource data as a @c GTLRDataObject.
 *
 *  Downloads a previously created system APK which is suitable for inclusion in
 *  a system image.
 *
 *  @param packageName Package name of the app.
 *  @param versionCode The version code of the App Bundle.
 *  @param variantId The ID of a previously created system APK variant.
 *
 *  @return GTLRAndroidPublisherQuery_SystemapksVariantsDownload
 */
+ (instancetype)queryForMediaWithPackageName:(NSString *)packageName
                                 versionCode:(long long)versionCode
                                   variantId:(NSUInteger)variantId;

@end

/**
 *  Returns a previously created system APK variant.
 *
 *  Method: androidpublisher.systemapks.variants.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_SystemapksVariantsGet : GTLRAndroidPublisherQuery

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The ID of a previously created system APK variant. */
@property(nonatomic, assign) NSUInteger variantId;

/** The version code of the App Bundle. */
@property(nonatomic, assign) long long versionCode;

/**
 *  Fetches a @c GTLRAndroidPublisher_Variant.
 *
 *  Returns a previously created system APK variant.
 *
 *  @param packageName Package name of the app.
 *  @param versionCode The version code of the App Bundle.
 *  @param variantId The ID of a previously created system APK variant.
 *
 *  @return GTLRAndroidPublisherQuery_SystemapksVariantsGet
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                         versionCode:(long long)versionCode
                           variantId:(NSUInteger)variantId;

@end

/**
 *  Returns the list of previously created system APK variants.
 *
 *  Method: androidpublisher.systemapks.variants.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_SystemapksVariantsList : GTLRAndroidPublisherQuery

/** Package name of the app. */
@property(nonatomic, copy, nullable) NSString *packageName;

/** The version code of the App Bundle. */
@property(nonatomic, assign) long long versionCode;

/**
 *  Fetches a @c GTLRAndroidPublisher_SystemApksListResponse.
 *
 *  Returns the list of previously created system APK variants.
 *
 *  @param packageName Package name of the app.
 *  @param versionCode The version code of the App Bundle.
 *
 *  @return GTLRAndroidPublisherQuery_SystemapksVariantsList
 */
+ (instancetype)queryWithPackageName:(NSString *)packageName
                         versionCode:(long long)versionCode;

@end

/**
 *  Grant access for a user to the given developer account.
 *
 *  Method: androidpublisher.users.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_UsersCreate : GTLRAndroidPublisherQuery

/**
 *  Required. The developer account to add the user to. Format:
 *  developers/{developer}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAndroidPublisher_User.
 *
 *  Grant access for a user to the given developer account.
 *
 *  @param object The @c GTLRAndroidPublisher_User to include in the query.
 *  @param parent Required. The developer account to add the user to. Format:
 *    developers/{developer}
 *
 *  @return GTLRAndroidPublisherQuery_UsersCreate
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_User *)object
                         parent:(NSString *)parent;

@end

/**
 *  Removes all access for the user to the given developer account.
 *
 *  Method: androidpublisher.users.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_UsersDelete : GTLRAndroidPublisherQuery

/**
 *  Required. The name of the user to delete. Format:
 *  developers/{developer}/users/{email}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes all access for the user to the given developer account.
 *
 *  @param name Required. The name of the user to delete. Format:
 *    developers/{developer}/users/{email}
 *
 *  @return GTLRAndroidPublisherQuery_UsersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all users with access to a developer account.
 *
 *  Method: androidpublisher.users.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_UsersList : GTLRAndroidPublisherQuery

/**
 *  The maximum number of results to return. This must be set to -1 to disable
 *  pagination.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token received from a previous call to this method, in order to retrieve
 *  further results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The developer account to fetch users from. Format:
 *  developers/{developer}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAndroidPublisher_ListUsersResponse.
 *
 *  Lists all users with access to a developer account.
 *
 *  @param parent Required. The developer account to fetch users from. Format:
 *    developers/{developer}
 *
 *  @return GTLRAndroidPublisherQuery_UsersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates access for the user to the developer account.
 *
 *  Method: androidpublisher.users.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAndroidPublisher
 */
@interface GTLRAndroidPublisherQuery_UsersPatch : GTLRAndroidPublisherQuery

/**
 *  Required. Resource name for this user, following the pattern
 *  "developers/{developer}/users/{email}".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The list of fields to be updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAndroidPublisher_User.
 *
 *  Updates access for the user to the developer account.
 *
 *  @param object The @c GTLRAndroidPublisher_User to include in the query.
 *  @param name Required. Resource name for this user, following the pattern
 *    "developers/{developer}/users/{email}".
 *
 *  @return GTLRAndroidPublisherQuery_UsersPatch
 */
+ (instancetype)queryWithObject:(GTLRAndroidPublisher_User *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
