// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Data Portability API (dataportability/v1)
// Description:
//   The Data Portability API lets you build applications that request
//   authorization from a user to move a copy of data from Google services into
//   your application. This enables data portability and facilitates switching
//   services.
// Documentation:
//   https://developers.google.com/data-portability

#import <GoogleAPIClientForREST/GTLRDataPortabilityQuery.h>

@implementation GTLRDataPortabilityQuery

@dynamic fields;

@end

@implementation GTLRDataPortabilityQuery_AccessTypeCheck

+ (instancetype)queryWithObject:(GTLRDataPortability_CheckAccessTypeRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v1/accessType:check";
  GTLRDataPortabilityQuery_AccessTypeCheck *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRDataPortability_CheckAccessTypeResponse class];
  query.loggingName = @"dataportability.accessType.check";
  return query;
}

@end

@implementation GTLRDataPortabilityQuery_ArchiveJobsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRDataPortability_CancelPortabilityArchiveRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRDataPortabilityQuery_ArchiveJobsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataPortability_CancelPortabilityArchiveResponse class];
  query.loggingName = @"dataportability.archiveJobs.cancel";
  return query;
}

@end

@implementation GTLRDataPortabilityQuery_ArchiveJobsGetPortabilityArchiveState

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRDataPortabilityQuery_ArchiveJobsGetPortabilityArchiveState *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRDataPortability_PortabilityArchiveState class];
  query.loggingName = @"dataportability.archiveJobs.getPortabilityArchiveState";
  return query;
}

@end

@implementation GTLRDataPortabilityQuery_ArchiveJobsRetry

@dynamic name;

+ (instancetype)queryWithObject:(GTLRDataPortability_RetryPortabilityArchiveRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:retry";
  GTLRDataPortabilityQuery_ArchiveJobsRetry *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRDataPortability_RetryPortabilityArchiveResponse class];
  query.loggingName = @"dataportability.archiveJobs.retry";
  return query;
}

@end

@implementation GTLRDataPortabilityQuery_AuthorizationReset

+ (instancetype)queryWithObject:(GTLRDataPortability_ResetAuthorizationRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v1/authorization:reset";
  GTLRDataPortabilityQuery_AuthorizationReset *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRDataPortability_Empty class];
  query.loggingName = @"dataportability.authorization.reset";
  return query;
}

@end

@implementation GTLRDataPortabilityQuery_PortabilityArchiveInitiate

+ (instancetype)queryWithObject:(GTLRDataPortability_InitiatePortabilityArchiveRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v1/portabilityArchive:initiate";
  GTLRDataPortabilityQuery_PortabilityArchiveInitiate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRDataPortability_InitiatePortabilityArchiveResponse class];
  query.loggingName = @"dataportability.portabilityArchive.initiate";
  return query;
}

@end
