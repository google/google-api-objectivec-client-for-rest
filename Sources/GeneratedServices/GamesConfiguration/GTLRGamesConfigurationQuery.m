// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play Game Services Publishing API (gamesConfiguration/v1configuration)
// Description:
//   The Google Play Game Services Publishing API allows developers to configure
//   their games in Game Services.
// Documentation:
//   https://developers.google.com/games/

#import <GoogleAPIClientForREST/GTLRGamesConfigurationQuery.h>

// ----------------------------------------------------------------------------
// Constants

// imageType
NSString * const kGTLRGamesConfigurationImageTypeAchievementIcon = @"ACHIEVEMENT_ICON";
NSString * const kGTLRGamesConfigurationImageTypeImageTypeUnspecified = @"IMAGE_TYPE_UNSPECIFIED";
NSString * const kGTLRGamesConfigurationImageTypeLeaderboardIcon = @"LEADERBOARD_ICON";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRGamesConfigurationQuery

@dynamic fields;

@end

@implementation GTLRGamesConfigurationQuery_AchievementConfigurationsDelete

@dynamic achievementId;

+ (instancetype)queryWithAchievementId:(NSString *)achievementId {
  NSArray *pathParams = @[ @"achievementId" ];
  NSString *pathURITemplate = @"games/v1configuration/achievements/{achievementId}";
  GTLRGamesConfigurationQuery_AchievementConfigurationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.achievementId = achievementId;
  query.loggingName = @"gamesConfiguration.achievementConfigurations.delete";
  return query;
}

@end

@implementation GTLRGamesConfigurationQuery_AchievementConfigurationsGet

@dynamic achievementId;

+ (instancetype)queryWithAchievementId:(NSString *)achievementId {
  NSArray *pathParams = @[ @"achievementId" ];
  NSString *pathURITemplate = @"games/v1configuration/achievements/{achievementId}";
  GTLRGamesConfigurationQuery_AchievementConfigurationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.achievementId = achievementId;
  query.expectedObjectClass = [GTLRGamesConfiguration_AchievementConfiguration class];
  query.loggingName = @"gamesConfiguration.achievementConfigurations.get";
  return query;
}

@end

@implementation GTLRGamesConfigurationQuery_AchievementConfigurationsInsert

@dynamic applicationId;

+ (instancetype)queryWithObject:(GTLRGamesConfiguration_AchievementConfiguration *)object
                  applicationId:(NSString *)applicationId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"applicationId" ];
  NSString *pathURITemplate = @"games/v1configuration/applications/{applicationId}/achievements";
  GTLRGamesConfigurationQuery_AchievementConfigurationsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.applicationId = applicationId;
  query.expectedObjectClass = [GTLRGamesConfiguration_AchievementConfiguration class];
  query.loggingName = @"gamesConfiguration.achievementConfigurations.insert";
  return query;
}

@end

@implementation GTLRGamesConfigurationQuery_AchievementConfigurationsList

@dynamic applicationId, maxResults, pageToken;

+ (instancetype)queryWithApplicationId:(NSString *)applicationId {
  NSArray *pathParams = @[ @"applicationId" ];
  NSString *pathURITemplate = @"games/v1configuration/applications/{applicationId}/achievements";
  GTLRGamesConfigurationQuery_AchievementConfigurationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.applicationId = applicationId;
  query.expectedObjectClass = [GTLRGamesConfiguration_AchievementConfigurationListResponse class];
  query.loggingName = @"gamesConfiguration.achievementConfigurations.list";
  return query;
}

@end

@implementation GTLRGamesConfigurationQuery_AchievementConfigurationsUpdate

@dynamic achievementId;

+ (instancetype)queryWithObject:(GTLRGamesConfiguration_AchievementConfiguration *)object
                  achievementId:(NSString *)achievementId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"achievementId" ];
  NSString *pathURITemplate = @"games/v1configuration/achievements/{achievementId}";
  GTLRGamesConfigurationQuery_AchievementConfigurationsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.achievementId = achievementId;
  query.expectedObjectClass = [GTLRGamesConfiguration_AchievementConfiguration class];
  query.loggingName = @"gamesConfiguration.achievementConfigurations.update";
  return query;
}

@end

@implementation GTLRGamesConfigurationQuery_ImageConfigurationsUpload

@dynamic imageType, resourceId;

+ (instancetype)queryWithResourceId:(NSString *)resourceId
                          imageType:(NSString *)imageType
                   uploadParameters:(GTLRUploadParameters *)uploadParameters {
  NSArray *pathParams = @[
    @"imageType", @"resourceId"
  ];
  NSString *pathURITemplate = @"games/v1configuration/images/{resourceId}/imageType/{imageType}";
  GTLRGamesConfigurationQuery_ImageConfigurationsUpload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.imageType = imageType;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRGamesConfiguration_ImageConfiguration class];
  query.loggingName = @"gamesConfiguration.imageConfigurations.upload";
  return query;
}

@end

@implementation GTLRGamesConfigurationQuery_LeaderboardConfigurationsDelete

@dynamic leaderboardId;

+ (instancetype)queryWithLeaderboardId:(NSString *)leaderboardId {
  NSArray *pathParams = @[ @"leaderboardId" ];
  NSString *pathURITemplate = @"games/v1configuration/leaderboards/{leaderboardId}";
  GTLRGamesConfigurationQuery_LeaderboardConfigurationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.leaderboardId = leaderboardId;
  query.loggingName = @"gamesConfiguration.leaderboardConfigurations.delete";
  return query;
}

@end

@implementation GTLRGamesConfigurationQuery_LeaderboardConfigurationsGet

@dynamic leaderboardId;

+ (instancetype)queryWithLeaderboardId:(NSString *)leaderboardId {
  NSArray *pathParams = @[ @"leaderboardId" ];
  NSString *pathURITemplate = @"games/v1configuration/leaderboards/{leaderboardId}";
  GTLRGamesConfigurationQuery_LeaderboardConfigurationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.leaderboardId = leaderboardId;
  query.expectedObjectClass = [GTLRGamesConfiguration_LeaderboardConfiguration class];
  query.loggingName = @"gamesConfiguration.leaderboardConfigurations.get";
  return query;
}

@end

@implementation GTLRGamesConfigurationQuery_LeaderboardConfigurationsInsert

@dynamic applicationId;

+ (instancetype)queryWithObject:(GTLRGamesConfiguration_LeaderboardConfiguration *)object
                  applicationId:(NSString *)applicationId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"applicationId" ];
  NSString *pathURITemplate = @"games/v1configuration/applications/{applicationId}/leaderboards";
  GTLRGamesConfigurationQuery_LeaderboardConfigurationsInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.applicationId = applicationId;
  query.expectedObjectClass = [GTLRGamesConfiguration_LeaderboardConfiguration class];
  query.loggingName = @"gamesConfiguration.leaderboardConfigurations.insert";
  return query;
}

@end

@implementation GTLRGamesConfigurationQuery_LeaderboardConfigurationsList

@dynamic applicationId, maxResults, pageToken;

+ (instancetype)queryWithApplicationId:(NSString *)applicationId {
  NSArray *pathParams = @[ @"applicationId" ];
  NSString *pathURITemplate = @"games/v1configuration/applications/{applicationId}/leaderboards";
  GTLRGamesConfigurationQuery_LeaderboardConfigurationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.applicationId = applicationId;
  query.expectedObjectClass = [GTLRGamesConfiguration_LeaderboardConfigurationListResponse class];
  query.loggingName = @"gamesConfiguration.leaderboardConfigurations.list";
  return query;
}

@end

@implementation GTLRGamesConfigurationQuery_LeaderboardConfigurationsUpdate

@dynamic leaderboardId;

+ (instancetype)queryWithObject:(GTLRGamesConfiguration_LeaderboardConfiguration *)object
                  leaderboardId:(NSString *)leaderboardId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"leaderboardId" ];
  NSString *pathURITemplate = @"games/v1configuration/leaderboards/{leaderboardId}";
  GTLRGamesConfigurationQuery_LeaderboardConfigurationsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.leaderboardId = leaderboardId;
  query.expectedObjectClass = [GTLRGamesConfiguration_LeaderboardConfiguration class];
  query.loggingName = @"gamesConfiguration.leaderboardConfigurations.update";
  return query;
}

@end
