// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Service Networking API (servicenetworking/v1)
// Description:
//   Provides automatic management of network configurations necessary for
//   certain services.
// Documentation:
//   https://cloud.google.com/service-infrastructure/docs/service-networking/getting-started

#import <GoogleAPIClientForREST/GTLRServiceNetworkingObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRServiceNetworking_Api.syntax
NSString * const kGTLRServiceNetworking_Api_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRServiceNetworking_Api_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// GTLRServiceNetworking_BackendRule.pathTranslation
NSString * const kGTLRServiceNetworking_BackendRule_PathTranslation_AppendPathToAddress = @"APPEND_PATH_TO_ADDRESS";
NSString * const kGTLRServiceNetworking_BackendRule_PathTranslation_ConstantAddress = @"CONSTANT_ADDRESS";
NSString * const kGTLRServiceNetworking_BackendRule_PathTranslation_PathTranslationUnspecified = @"PATH_TRANSLATION_UNSPECIFIED";

// GTLRServiceNetworking_Enum.syntax
NSString * const kGTLRServiceNetworking_Enum_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRServiceNetworking_Enum_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// GTLRServiceNetworking_Field.cardinality
NSString * const kGTLRServiceNetworking_Field_Cardinality_CardinalityOptional = @"CARDINALITY_OPTIONAL";
NSString * const kGTLRServiceNetworking_Field_Cardinality_CardinalityRepeated = @"CARDINALITY_REPEATED";
NSString * const kGTLRServiceNetworking_Field_Cardinality_CardinalityRequired = @"CARDINALITY_REQUIRED";
NSString * const kGTLRServiceNetworking_Field_Cardinality_CardinalityUnknown = @"CARDINALITY_UNKNOWN";

// GTLRServiceNetworking_Field.kind
NSString * const kGTLRServiceNetworking_Field_Kind_TypeBool    = @"TYPE_BOOL";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeBytes   = @"TYPE_BYTES";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeDouble  = @"TYPE_DOUBLE";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeEnum    = @"TYPE_ENUM";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeFixed32 = @"TYPE_FIXED32";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeFixed64 = @"TYPE_FIXED64";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeFloat   = @"TYPE_FLOAT";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeGroup   = @"TYPE_GROUP";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeInt32   = @"TYPE_INT32";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeInt64   = @"TYPE_INT64";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeMessage = @"TYPE_MESSAGE";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeSfixed32 = @"TYPE_SFIXED32";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeSfixed64 = @"TYPE_SFIXED64";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeSint32  = @"TYPE_SINT32";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeSint64  = @"TYPE_SINT64";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeString  = @"TYPE_STRING";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeUint32  = @"TYPE_UINT32";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeUint64  = @"TYPE_UINT64";
NSString * const kGTLRServiceNetworking_Field_Kind_TypeUnknown = @"TYPE_UNKNOWN";

// GTLRServiceNetworking_LabelDescriptor.valueType
NSString * const kGTLRServiceNetworking_LabelDescriptor_ValueType_Bool = @"BOOL";
NSString * const kGTLRServiceNetworking_LabelDescriptor_ValueType_Int64 = @"INT64";
NSString * const kGTLRServiceNetworking_LabelDescriptor_ValueType_String = @"STRING";

// GTLRServiceNetworking_Method.syntax
NSString * const kGTLRServiceNetworking_Method_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRServiceNetworking_Method_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// GTLRServiceNetworking_MetricDescriptor.launchStage
NSString * const kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Alpha = @"ALPHA";
NSString * const kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Beta = @"BETA";
NSString * const kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Deprecated = @"DEPRECATED";
NSString * const kGTLRServiceNetworking_MetricDescriptor_LaunchStage_EarlyAccess = @"EARLY_ACCESS";
NSString * const kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Ga = @"GA";
NSString * const kGTLRServiceNetworking_MetricDescriptor_LaunchStage_LaunchStageUnspecified = @"LAUNCH_STAGE_UNSPECIFIED";
NSString * const kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Prelaunch = @"PRELAUNCH";
NSString * const kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Unimplemented = @"UNIMPLEMENTED";

// GTLRServiceNetworking_MetricDescriptor.metricKind
NSString * const kGTLRServiceNetworking_MetricDescriptor_MetricKind_Cumulative = @"CUMULATIVE";
NSString * const kGTLRServiceNetworking_MetricDescriptor_MetricKind_Delta = @"DELTA";
NSString * const kGTLRServiceNetworking_MetricDescriptor_MetricKind_Gauge = @"GAUGE";
NSString * const kGTLRServiceNetworking_MetricDescriptor_MetricKind_MetricKindUnspecified = @"METRIC_KIND_UNSPECIFIED";

// GTLRServiceNetworking_MetricDescriptor.valueType
NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_Bool = @"BOOL";
NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_Distribution = @"DISTRIBUTION";
NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_Double = @"DOUBLE";
NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_Int64 = @"INT64";
NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_Money = @"MONEY";
NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_String = @"STRING";
NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_ValueTypeUnspecified = @"VALUE_TYPE_UNSPECIFIED";

// GTLRServiceNetworking_MetricDescriptorMetadata.launchStage
NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Alpha = @"ALPHA";
NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Beta = @"BETA";
NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Deprecated = @"DEPRECATED";
NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_EarlyAccess = @"EARLY_ACCESS";
NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Ga = @"GA";
NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_LaunchStageUnspecified = @"LAUNCH_STAGE_UNSPECIFIED";
NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Prelaunch = @"PRELAUNCH";
NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Unimplemented = @"UNIMPLEMENTED";

// GTLRServiceNetworking_MonitoredResourceDescriptor.launchStage
NSString * const kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Alpha = @"ALPHA";
NSString * const kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Beta = @"BETA";
NSString * const kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Deprecated = @"DEPRECATED";
NSString * const kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_EarlyAccess = @"EARLY_ACCESS";
NSString * const kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Ga = @"GA";
NSString * const kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_LaunchStageUnspecified = @"LAUNCH_STAGE_UNSPECIFIED";
NSString * const kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Prelaunch = @"PRELAUNCH";
NSString * const kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Unimplemented = @"UNIMPLEMENTED";

// GTLRServiceNetworking_Type.syntax
NSString * const kGTLRServiceNetworking_Type_Syntax_SyntaxProto2 = @"SYNTAX_PROTO2";
NSString * const kGTLRServiceNetworking_Type_Syntax_SyntaxProto3 = @"SYNTAX_PROTO3";

// GTLRServiceNetworking_ValidateConsumerConfigResponse.validationError
NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_ComputeApiNotEnabled = @"COMPUTE_API_NOT_ENABLED";
NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_ConsumerProjectNotServiceProject = @"CONSUMER_PROJECT_NOT_SERVICE_PROJECT";
NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_HostProjectNotFound = @"HOST_PROJECT_NOT_FOUND";
NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_NetworkNotFound = @"NETWORK_NOT_FOUND";
NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_NetworkNotInConsumersHostProject = @"NETWORK_NOT_IN_CONSUMERS_HOST_PROJECT";
NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_NetworkNotInConsumersProject = @"NETWORK_NOT_IN_CONSUMERS_PROJECT";
NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_NetworkNotPeered = @"NETWORK_NOT_PEERED";
NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_NetworkPeeringDeleted = @"NETWORK_PEERING_DELETED";
NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_RangesDeletedLater = @"RANGES_DELETED_LATER";
NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_RangesExhausted = @"RANGES_EXHAUSTED";
NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_RangesNotReserved = @"RANGES_NOT_RESERVED";
NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_ServiceNetworkingNotEnabled = @"SERVICE_NETWORKING_NOT_ENABLED";
NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_UsePermissionNotFound = @"USE_PERMISSION_NOT_FOUND";
NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_ValidationErrorUnspecified = @"VALIDATION_ERROR_UNSPECIFIED";
NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_ValidationNotRequested = @"VALIDATION_NOT_REQUESTED";

// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AddDnsRecordSetMetadata
//

@implementation GTLRServiceNetworking_AddDnsRecordSetMetadata
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AddDnsRecordSetRequest
//

@implementation GTLRServiceNetworking_AddDnsRecordSetRequest
@dynamic consumerNetwork, dnsRecordSet, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AddDnsZoneMetadata
//

@implementation GTLRServiceNetworking_AddDnsZoneMetadata
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AddDnsZoneRequest
//

@implementation GTLRServiceNetworking_AddDnsZoneRequest
@dynamic consumerNetwork, dnsSuffix, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AddDnsZoneResponse
//

@implementation GTLRServiceNetworking_AddDnsZoneResponse
@dynamic consumerPeeringZone, producerPrivateZone;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AddRolesMetadata
//

@implementation GTLRServiceNetworking_AddRolesMetadata
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AddRolesRequest
//

@implementation GTLRServiceNetworking_AddRolesRequest
@dynamic consumerNetwork, policyBinding;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"policyBinding" : [GTLRServiceNetworking_PolicyBinding class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AddRolesResponse
//

@implementation GTLRServiceNetworking_AddRolesResponse
@dynamic policyBinding;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"policyBinding" : [GTLRServiceNetworking_PolicyBinding class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AddSubnetworkRequest
//

@implementation GTLRServiceNetworking_AddSubnetworkRequest
@dynamic checkServiceNetworkingUsePermission, computeIdempotencyWindow,
         consumer, consumerNetwork, descriptionProperty, ipPrefixLength,
         outsideAllocationPublicIpRange, privateIpv6GoogleAccess, purpose,
         region, requestedAddress, requestedRanges, secondaryIpRangeSpecs,
         subnetwork, subnetworkUsers, useCustomComputeIdempotencyWindow;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requestedRanges" : [NSString class],
    @"secondaryIpRangeSpecs" : [GTLRServiceNetworking_SecondaryIpRangeSpec class],
    @"subnetworkUsers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Api
//

@implementation GTLRServiceNetworking_Api
@dynamic methods, mixins, name, options, sourceContext, syntax, version;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"methods" : [GTLRServiceNetworking_Method class],
    @"mixins" : [GTLRServiceNetworking_Mixin class],
    @"options" : [GTLRServiceNetworking_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Authentication
//

@implementation GTLRServiceNetworking_Authentication
@dynamic providers, rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"providers" : [GTLRServiceNetworking_AuthProvider class],
    @"rules" : [GTLRServiceNetworking_AuthenticationRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AuthenticationRule
//

@implementation GTLRServiceNetworking_AuthenticationRule
@dynamic allowWithoutCredential, oauth, requirements, selector;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requirements" : [GTLRServiceNetworking_AuthRequirement class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AuthProvider
//

@implementation GTLRServiceNetworking_AuthProvider
@dynamic audiences, authorizationUrl, identifier, issuer, jwksUri, jwtLocations;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jwtLocations" : [GTLRServiceNetworking_JwtLocation class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_AuthRequirement
//

@implementation GTLRServiceNetworking_AuthRequirement
@dynamic audiences, providerId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Backend
//

@implementation GTLRServiceNetworking_Backend
@dynamic rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceNetworking_BackendRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_BackendRule
//

@implementation GTLRServiceNetworking_BackendRule
@dynamic address, deadline, disableAuth, jwtAudience, operationDeadline,
         pathTranslation, protocol, selector;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Billing
//

@implementation GTLRServiceNetworking_Billing
@dynamic consumerDestinations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"consumerDestinations" : [GTLRServiceNetworking_BillingDestination class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_BillingDestination
//

@implementation GTLRServiceNetworking_BillingDestination
@dynamic metrics, monitoredResource;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metrics" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_CancelOperationRequest
//

@implementation GTLRServiceNetworking_CancelOperationRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_CloudSQLConfig
//

@implementation GTLRServiceNetworking_CloudSQLConfig
@dynamic service, umbrellaNetwork, umbrellaProject;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Connection
//

@implementation GTLRServiceNetworking_Connection
@dynamic network, peering, reservedPeeringRanges, service;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"reservedPeeringRanges" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_ConsumerConfig
//

@implementation GTLRServiceNetworking_ConsumerConfig
@dynamic cloudsqlConfigs, consumerExportCustomRoutes,
         consumerExportSubnetRoutesWithPublicIp, consumerImportCustomRoutes,
         consumerImportSubnetRoutesWithPublicIp, producerExportCustomRoutes,
         producerExportSubnetRoutesWithPublicIp, producerImportCustomRoutes,
         producerImportSubnetRoutesWithPublicIp, producerNetwork,
         reservedRanges, usedIpRanges, vpcScReferenceArchitectureEnabled;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"cloudsqlConfigs" : [GTLRServiceNetworking_CloudSQLConfig class],
    @"reservedRanges" : [GTLRServiceNetworking_GoogleCloudServicenetworkingV1ConsumerConfigReservedRange class],
    @"usedIpRanges" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_ConsumerConfigMetadata
//

@implementation GTLRServiceNetworking_ConsumerConfigMetadata
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_ConsumerProject
//

@implementation GTLRServiceNetworking_ConsumerProject
@dynamic projectNum;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Context
//

@implementation GTLRServiceNetworking_Context
@dynamic rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceNetworking_ContextRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_ContextRule
//

@implementation GTLRServiceNetworking_ContextRule
@dynamic allowedRequestExtensions, allowedResponseExtensions, provided,
         requested, selector;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"allowedRequestExtensions" : [NSString class],
    @"allowedResponseExtensions" : [NSString class],
    @"provided" : [NSString class],
    @"requested" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Control
//

@implementation GTLRServiceNetworking_Control
@dynamic environment;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_CustomError
//

@implementation GTLRServiceNetworking_CustomError
@dynamic rules, types;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceNetworking_CustomErrorRule class],
    @"types" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_CustomErrorRule
//

@implementation GTLRServiceNetworking_CustomErrorRule
@dynamic isErrorType, selector;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_CustomHttpPattern
//

@implementation GTLRServiceNetworking_CustomHttpPattern
@dynamic kind, path;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_DeleteConnectionMetadata
//

@implementation GTLRServiceNetworking_DeleteConnectionMetadata
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_DeleteConnectionRequest
//

@implementation GTLRServiceNetworking_DeleteConnectionRequest
@dynamic consumerNetwork;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_DeletePeeredDnsDomainMetadata
//

@implementation GTLRServiceNetworking_DeletePeeredDnsDomainMetadata
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_DisableVpcServiceControlsRequest
//

@implementation GTLRServiceNetworking_DisableVpcServiceControlsRequest
@dynamic consumerNetwork;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_DnsRecordSet
//

@implementation GTLRServiceNetworking_DnsRecordSet
@dynamic data, domain, ttl, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"data" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_DnsZone
//

@implementation GTLRServiceNetworking_DnsZone
@dynamic dnsSuffix, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Documentation
//

@implementation GTLRServiceNetworking_Documentation
@dynamic documentationRootUrl, overview, pages, rules, serviceRootUrl, summary;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"pages" : [GTLRServiceNetworking_Page class],
    @"rules" : [GTLRServiceNetworking_DocumentationRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_DocumentationRule
//

@implementation GTLRServiceNetworking_DocumentationRule
@dynamic deprecationDescription, descriptionProperty, selector;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Empty
//

@implementation GTLRServiceNetworking_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_EnableVpcServiceControlsRequest
//

@implementation GTLRServiceNetworking_EnableVpcServiceControlsRequest
@dynamic consumerNetwork;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Endpoint
//

@implementation GTLRServiceNetworking_Endpoint
@dynamic allowCors, name, target;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Enum
//

@implementation GTLRServiceNetworking_Enum
@dynamic enumvalue, name, options, sourceContext, syntax;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"enumvalue" : [GTLRServiceNetworking_EnumValue class],
    @"options" : [GTLRServiceNetworking_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_EnumValue
//

@implementation GTLRServiceNetworking_EnumValue
@dynamic name, number, options;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"options" : [GTLRServiceNetworking_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Field
//

@implementation GTLRServiceNetworking_Field
@dynamic cardinality, defaultValue, jsonName, kind, name, number, oneofIndex,
         options, packed, typeUrl;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"options" : [GTLRServiceNetworking_Option class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_GoogleCloudServicenetworkingV1betaConnection
//

@implementation GTLRServiceNetworking_GoogleCloudServicenetworkingV1betaConnection
@dynamic network, peering, reservedPeeringRanges, service;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"reservedPeeringRanges" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_GoogleCloudServicenetworkingV1betaSubnetwork
//

@implementation GTLRServiceNetworking_GoogleCloudServicenetworkingV1betaSubnetwork
@dynamic ipCidrRange, name, network, outsideAllocation;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_GoogleCloudServicenetworkingV1ConsumerConfigReservedRange
//

@implementation GTLRServiceNetworking_GoogleCloudServicenetworkingV1ConsumerConfigReservedRange
@dynamic address, ipPrefixLength, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Http
//

@implementation GTLRServiceNetworking_Http
@dynamic fullyDecodeReservedExpansion, rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceNetworking_HttpRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_HttpRule
//

@implementation GTLRServiceNetworking_HttpRule
@dynamic additionalBindings, body, custom, deleteProperty, get, patch, post,
         put, responseBody, selector;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"deleteProperty" : @"delete" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"additionalBindings" : [GTLRServiceNetworking_HttpRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_JwtLocation
//

@implementation GTLRServiceNetworking_JwtLocation
@dynamic cookie, header, query, valuePrefix;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_LabelDescriptor
//

@implementation GTLRServiceNetworking_LabelDescriptor
@dynamic descriptionProperty, key, valueType;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_ListConnectionsResponse
//

@implementation GTLRServiceNetworking_ListConnectionsResponse
@dynamic connections;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"connections" : [GTLRServiceNetworking_Connection class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_ListOperationsResponse
//

@implementation GTLRServiceNetworking_ListOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRServiceNetworking_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_ListPeeredDnsDomainsResponse
//

@implementation GTLRServiceNetworking_ListPeeredDnsDomainsResponse
@dynamic peeredDnsDomains;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"peeredDnsDomains" : [GTLRServiceNetworking_PeeredDnsDomain class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_LogDescriptor
//

@implementation GTLRServiceNetworking_LogDescriptor
@dynamic descriptionProperty, displayName, labels, name;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labels" : [GTLRServiceNetworking_LabelDescriptor class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Logging
//

@implementation GTLRServiceNetworking_Logging
@dynamic consumerDestinations, producerDestinations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"consumerDestinations" : [GTLRServiceNetworking_LoggingDestination class],
    @"producerDestinations" : [GTLRServiceNetworking_LoggingDestination class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_LoggingDestination
//

@implementation GTLRServiceNetworking_LoggingDestination
@dynamic logs, monitoredResource;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"logs" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Method
//

@implementation GTLRServiceNetworking_Method
@dynamic name, options, requestStreaming, requestTypeUrl, responseStreaming,
         responseTypeUrl, syntax;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"options" : [GTLRServiceNetworking_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_MetricDescriptor
//

@implementation GTLRServiceNetworking_MetricDescriptor
@dynamic descriptionProperty, displayName, labels, launchStage, metadata,
         metricKind, monitoredResourceTypes, name, type, unit, valueType;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labels" : [GTLRServiceNetworking_LabelDescriptor class],
    @"monitoredResourceTypes" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_MetricDescriptorMetadata
//

@implementation GTLRServiceNetworking_MetricDescriptorMetadata
@dynamic ingestDelay, launchStage, samplePeriod;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_MetricRule
//

@implementation GTLRServiceNetworking_MetricRule
@dynamic metricCosts, selector;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_MetricRule_MetricCosts
//

@implementation GTLRServiceNetworking_MetricRule_MetricCosts

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Mixin
//

@implementation GTLRServiceNetworking_Mixin
@dynamic name, root;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_MonitoredResourceDescriptor
//

@implementation GTLRServiceNetworking_MonitoredResourceDescriptor
@dynamic descriptionProperty, displayName, labels, launchStage, name, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"labels" : [GTLRServiceNetworking_LabelDescriptor class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Monitoring
//

@implementation GTLRServiceNetworking_Monitoring
@dynamic consumerDestinations, producerDestinations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"consumerDestinations" : [GTLRServiceNetworking_MonitoringDestination class],
    @"producerDestinations" : [GTLRServiceNetworking_MonitoringDestination class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_MonitoringDestination
//

@implementation GTLRServiceNetworking_MonitoringDestination
@dynamic metrics, monitoredResource;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metrics" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_OAuthRequirements
//

@implementation GTLRServiceNetworking_OAuthRequirements
@dynamic canonicalScopes;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Operation
//

@implementation GTLRServiceNetworking_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Operation_Metadata
//

@implementation GTLRServiceNetworking_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Operation_Response
//

@implementation GTLRServiceNetworking_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Option
//

@implementation GTLRServiceNetworking_Option
@dynamic name, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Option_Value
//

@implementation GTLRServiceNetworking_Option_Value

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Page
//

@implementation GTLRServiceNetworking_Page
@dynamic content, name, subpages;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"subpages" : [GTLRServiceNetworking_Page class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_PartialDeleteConnectionMetadata
//

@implementation GTLRServiceNetworking_PartialDeleteConnectionMetadata
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_PeeredDnsDomain
//

@implementation GTLRServiceNetworking_PeeredDnsDomain
@dynamic dnsSuffix, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_PeeredDnsDomainMetadata
//

@implementation GTLRServiceNetworking_PeeredDnsDomainMetadata
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_PolicyBinding
//

@implementation GTLRServiceNetworking_PolicyBinding
@dynamic member, role;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Quota
//

@implementation GTLRServiceNetworking_Quota
@dynamic limits, metricRules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"limits" : [GTLRServiceNetworking_QuotaLimit class],
    @"metricRules" : [GTLRServiceNetworking_MetricRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_QuotaLimit
//

@implementation GTLRServiceNetworking_QuotaLimit
@dynamic defaultLimit, descriptionProperty, displayName, duration, freeTier,
         maxLimit, metric, name, unit, values;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_QuotaLimit_Values
//

@implementation GTLRServiceNetworking_QuotaLimit_Values

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Range
//

@implementation GTLRServiceNetworking_Range
@dynamic ipCidrRange, network;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_RangeReservation
//

@implementation GTLRServiceNetworking_RangeReservation
@dynamic ipPrefixLength, requestedRanges, secondaryRangeIpPrefixLengths,
         subnetworkCandidates;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requestedRanges" : [NSString class],
    @"secondaryRangeIpPrefixLengths" : [NSNumber class],
    @"subnetworkCandidates" : [GTLRServiceNetworking_Subnetwork class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_RemoveDnsRecordSetMetadata
//

@implementation GTLRServiceNetworking_RemoveDnsRecordSetMetadata
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_RemoveDnsRecordSetRequest
//

@implementation GTLRServiceNetworking_RemoveDnsRecordSetRequest
@dynamic consumerNetwork, dnsRecordSet, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_RemoveDnsRecordSetResponse
//

@implementation GTLRServiceNetworking_RemoveDnsRecordSetResponse
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_RemoveDnsZoneMetadata
//

@implementation GTLRServiceNetworking_RemoveDnsZoneMetadata
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_RemoveDnsZoneRequest
//

@implementation GTLRServiceNetworking_RemoveDnsZoneRequest
@dynamic consumerNetwork, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_RemoveDnsZoneResponse
//

@implementation GTLRServiceNetworking_RemoveDnsZoneResponse
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Route
//

@implementation GTLRServiceNetworking_Route
@dynamic destRange, name, network, nextHopGateway;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_SearchRangeRequest
//

@implementation GTLRServiceNetworking_SearchRangeRequest
@dynamic ipPrefixLength, network;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_SecondaryIpRange
//

@implementation GTLRServiceNetworking_SecondaryIpRange
@dynamic ipCidrRange, rangeName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_SecondaryIpRangeSpec
//

@implementation GTLRServiceNetworking_SecondaryIpRangeSpec
@dynamic ipPrefixLength, outsideAllocationPublicIpRange, rangeName,
         requestedAddress;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Service
//

@implementation GTLRServiceNetworking_Service
@dynamic apis, authentication, backend, billing, configVersion, context,
         control, customError, documentation, endpoints, enums, http,
         identifier, logging, logs, metrics, monitoredResources, monitoring,
         name, producerProjectId, quota, sourceInfo, systemParameters,
         systemTypes, title, types, usage;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"apis" : [GTLRServiceNetworking_Api class],
    @"endpoints" : [GTLRServiceNetworking_Endpoint class],
    @"enums" : [GTLRServiceNetworking_Enum class],
    @"logs" : [GTLRServiceNetworking_LogDescriptor class],
    @"metrics" : [GTLRServiceNetworking_MetricDescriptor class],
    @"monitoredResources" : [GTLRServiceNetworking_MonitoredResourceDescriptor class],
    @"systemTypes" : [GTLRServiceNetworking_Type class],
    @"types" : [GTLRServiceNetworking_Type class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_SourceContext
//

@implementation GTLRServiceNetworking_SourceContext
@dynamic fileName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_SourceInfo
//

@implementation GTLRServiceNetworking_SourceInfo
@dynamic sourceFiles;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sourceFiles" : [GTLRServiceNetworking_SourceInfo_SourceFiles_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_SourceInfo_SourceFiles_Item
//

@implementation GTLRServiceNetworking_SourceInfo_SourceFiles_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Status
//

@implementation GTLRServiceNetworking_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRServiceNetworking_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Status_Details_Item
//

@implementation GTLRServiceNetworking_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Subnetwork
//

@implementation GTLRServiceNetworking_Subnetwork
@dynamic ipCidrRange, name, network, outsideAllocation, region,
         secondaryIpRanges;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"secondaryIpRanges" : [GTLRServiceNetworking_SecondaryIpRange class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_SystemParameter
//

@implementation GTLRServiceNetworking_SystemParameter
@dynamic httpHeader, name, urlQueryParameter;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_SystemParameterRule
//

@implementation GTLRServiceNetworking_SystemParameterRule
@dynamic parameters, selector;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"parameters" : [GTLRServiceNetworking_SystemParameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_SystemParameters
//

@implementation GTLRServiceNetworking_SystemParameters
@dynamic rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rules" : [GTLRServiceNetworking_SystemParameterRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Type
//

@implementation GTLRServiceNetworking_Type
@dynamic fields, name, oneofs, options, sourceContext, syntax;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fields" : [GTLRServiceNetworking_Field class],
    @"oneofs" : [NSString class],
    @"options" : [GTLRServiceNetworking_Option class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_UpdateConsumerConfigRequest
//

@implementation GTLRServiceNetworking_UpdateConsumerConfigRequest
@dynamic consumerConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_UpdateDnsRecordSetMetadata
//

@implementation GTLRServiceNetworking_UpdateDnsRecordSetMetadata
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_UpdateDnsRecordSetRequest
//

@implementation GTLRServiceNetworking_UpdateDnsRecordSetRequest
@dynamic consumerNetwork, existingDnsRecordSet, newDnsRecordSet, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_Usage
//

@implementation GTLRServiceNetworking_Usage
@dynamic producerNotificationChannel, requirements, rules;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requirements" : [NSString class],
    @"rules" : [GTLRServiceNetworking_UsageRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_UsageRule
//

@implementation GTLRServiceNetworking_UsageRule
@dynamic allowUnregisteredCalls, selector, skipServiceControl;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_ValidateConsumerConfigRequest
//

@implementation GTLRServiceNetworking_ValidateConsumerConfigRequest
@dynamic checkServiceNetworkingUsePermission, consumerNetwork, consumerProject,
         rangeReservation, validateNetwork;
@end


// ----------------------------------------------------------------------------
//
//   GTLRServiceNetworking_ValidateConsumerConfigResponse
//

@implementation GTLRServiceNetworking_ValidateConsumerConfigResponse
@dynamic existingSubnetworkCandidates, isValid, validationError;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"existingSubnetworkCandidates" : [GTLRServiceNetworking_Subnetwork class]
  };
  return map;
}

@end
