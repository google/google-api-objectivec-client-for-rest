// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Service Networking API (servicenetworking/v1)
// Description:
//   Provides automatic management of network configurations necessary for
//   certain services.
// Documentation:
//   https://cloud.google.com/service-infrastructure/docs/service-networking/getting-started

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRServiceNetworking_Api;
@class GTLRServiceNetworking_Authentication;
@class GTLRServiceNetworking_AuthenticationRule;
@class GTLRServiceNetworking_AuthProvider;
@class GTLRServiceNetworking_AuthRequirement;
@class GTLRServiceNetworking_Backend;
@class GTLRServiceNetworking_BackendRule;
@class GTLRServiceNetworking_Billing;
@class GTLRServiceNetworking_BillingDestination;
@class GTLRServiceNetworking_CloudSQLConfig;
@class GTLRServiceNetworking_Connection;
@class GTLRServiceNetworking_ConsumerConfig;
@class GTLRServiceNetworking_ConsumerProject;
@class GTLRServiceNetworking_Context;
@class GTLRServiceNetworking_ContextRule;
@class GTLRServiceNetworking_Control;
@class GTLRServiceNetworking_CustomError;
@class GTLRServiceNetworking_CustomErrorRule;
@class GTLRServiceNetworking_CustomHttpPattern;
@class GTLRServiceNetworking_DnsRecordSet;
@class GTLRServiceNetworking_DnsZone;
@class GTLRServiceNetworking_Documentation;
@class GTLRServiceNetworking_DocumentationRule;
@class GTLRServiceNetworking_Endpoint;
@class GTLRServiceNetworking_Enum;
@class GTLRServiceNetworking_EnumValue;
@class GTLRServiceNetworking_Field;
@class GTLRServiceNetworking_GoogleCloudServicenetworkingV1ConsumerConfigReservedRange;
@class GTLRServiceNetworking_Http;
@class GTLRServiceNetworking_HttpRule;
@class GTLRServiceNetworking_JwtLocation;
@class GTLRServiceNetworking_LabelDescriptor;
@class GTLRServiceNetworking_LogDescriptor;
@class GTLRServiceNetworking_Logging;
@class GTLRServiceNetworking_LoggingDestination;
@class GTLRServiceNetworking_Method;
@class GTLRServiceNetworking_MetricDescriptor;
@class GTLRServiceNetworking_MetricDescriptorMetadata;
@class GTLRServiceNetworking_MetricRule;
@class GTLRServiceNetworking_MetricRule_MetricCosts;
@class GTLRServiceNetworking_Mixin;
@class GTLRServiceNetworking_MonitoredResourceDescriptor;
@class GTLRServiceNetworking_Monitoring;
@class GTLRServiceNetworking_MonitoringDestination;
@class GTLRServiceNetworking_OAuthRequirements;
@class GTLRServiceNetworking_Operation;
@class GTLRServiceNetworking_Operation_Metadata;
@class GTLRServiceNetworking_Operation_Response;
@class GTLRServiceNetworking_Option;
@class GTLRServiceNetworking_Option_Value;
@class GTLRServiceNetworking_Page;
@class GTLRServiceNetworking_PeeredDnsDomain;
@class GTLRServiceNetworking_PolicyBinding;
@class GTLRServiceNetworking_Quota;
@class GTLRServiceNetworking_QuotaLimit;
@class GTLRServiceNetworking_QuotaLimit_Values;
@class GTLRServiceNetworking_RangeReservation;
@class GTLRServiceNetworking_SecondaryIpRange;
@class GTLRServiceNetworking_SecondaryIpRangeSpec;
@class GTLRServiceNetworking_SourceContext;
@class GTLRServiceNetworking_SourceInfo;
@class GTLRServiceNetworking_SourceInfo_SourceFiles_Item;
@class GTLRServiceNetworking_Status;
@class GTLRServiceNetworking_Status_Details_Item;
@class GTLRServiceNetworking_Subnetwork;
@class GTLRServiceNetworking_SystemParameter;
@class GTLRServiceNetworking_SystemParameterRule;
@class GTLRServiceNetworking_SystemParameters;
@class GTLRServiceNetworking_Type;
@class GTLRServiceNetworking_Usage;
@class GTLRServiceNetworking_UsageRule;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRServiceNetworking_Api.syntax

/**
 *  Syntax `proto2`.
 *
 *  Value: "SYNTAX_PROTO2"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Api_Syntax_SyntaxProto2;
/**
 *  Syntax `proto3`.
 *
 *  Value: "SYNTAX_PROTO3"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Api_Syntax_SyntaxProto3;

// ----------------------------------------------------------------------------
// GTLRServiceNetworking_BackendRule.pathTranslation

/**
 *  The request path will be appended to the backend address. # Examples Given
 *  the following operation config: Method path: /api/company/{cid}/user/{uid}
 *  Backend address: https://example.appspot.com Requests to the following
 *  request paths will call the backend at the translated path: Request path:
 *  /api/company/widgetworks/user/johndoe Translated:
 *  https://example.appspot.com/api/company/widgetworks/user/johndoe Request
 *  path: /api/company/widgetworks/user/johndoe?timezone=EST Translated:
 *  https://example.appspot.com/api/company/widgetworks/user/johndoe?timezone=EST
 *
 *  Value: "APPEND_PATH_TO_ADDRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_BackendRule_PathTranslation_AppendPathToAddress;
/**
 *  Use the backend address as-is, with no modification to the path. If the URL
 *  pattern contains variables, the variable names and values will be appended
 *  to the query string. If a query string parameter and a URL pattern variable
 *  have the same name, this may result in duplicate keys in the query string. #
 *  Examples Given the following operation config: Method path:
 *  /api/company/{cid}/user/{uid} Backend address:
 *  https://example.cloudfunctions.net/getUser Requests to the following request
 *  paths will call the backend at the translated path: Request path:
 *  /api/company/widgetworks/user/johndoe Translated:
 *  https://example.cloudfunctions.net/getUser?cid=widgetworks&uid=johndoe
 *  Request path: /api/company/widgetworks/user/johndoe?timezone=EST Translated:
 *  https://example.cloudfunctions.net/getUser?timezone=EST&cid=widgetworks&uid=johndoe
 *
 *  Value: "CONSTANT_ADDRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_BackendRule_PathTranslation_ConstantAddress;
/** Value: "PATH_TRANSLATION_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_BackendRule_PathTranslation_PathTranslationUnspecified;

// ----------------------------------------------------------------------------
// GTLRServiceNetworking_Enum.syntax

/**
 *  Syntax `proto2`.
 *
 *  Value: "SYNTAX_PROTO2"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Enum_Syntax_SyntaxProto2;
/**
 *  Syntax `proto3`.
 *
 *  Value: "SYNTAX_PROTO3"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Enum_Syntax_SyntaxProto3;

// ----------------------------------------------------------------------------
// GTLRServiceNetworking_Field.cardinality

/**
 *  For optional fields.
 *
 *  Value: "CARDINALITY_OPTIONAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Cardinality_CardinalityOptional;
/**
 *  For repeated fields.
 *
 *  Value: "CARDINALITY_REPEATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Cardinality_CardinalityRepeated;
/**
 *  For required fields. Proto2 syntax only.
 *
 *  Value: "CARDINALITY_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Cardinality_CardinalityRequired;
/**
 *  For fields with unknown cardinality.
 *
 *  Value: "CARDINALITY_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Cardinality_CardinalityUnknown;

// ----------------------------------------------------------------------------
// GTLRServiceNetworking_Field.kind

/**
 *  Field type bool.
 *
 *  Value: "TYPE_BOOL"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeBool;
/**
 *  Field type bytes.
 *
 *  Value: "TYPE_BYTES"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeBytes;
/**
 *  Field type double.
 *
 *  Value: "TYPE_DOUBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeDouble;
/**
 *  Field type enum.
 *
 *  Value: "TYPE_ENUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeEnum;
/**
 *  Field type fixed32.
 *
 *  Value: "TYPE_FIXED32"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeFixed32;
/**
 *  Field type fixed64.
 *
 *  Value: "TYPE_FIXED64"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeFixed64;
/**
 *  Field type float.
 *
 *  Value: "TYPE_FLOAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeFloat;
/**
 *  Field type group. Proto2 syntax only, and deprecated.
 *
 *  Value: "TYPE_GROUP"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeGroup;
/**
 *  Field type int32.
 *
 *  Value: "TYPE_INT32"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeInt32;
/**
 *  Field type int64.
 *
 *  Value: "TYPE_INT64"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeInt64;
/**
 *  Field type message.
 *
 *  Value: "TYPE_MESSAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeMessage;
/**
 *  Field type sfixed32.
 *
 *  Value: "TYPE_SFIXED32"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeSfixed32;
/**
 *  Field type sfixed64.
 *
 *  Value: "TYPE_SFIXED64"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeSfixed64;
/**
 *  Field type sint32.
 *
 *  Value: "TYPE_SINT32"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeSint32;
/**
 *  Field type sint64.
 *
 *  Value: "TYPE_SINT64"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeSint64;
/**
 *  Field type string.
 *
 *  Value: "TYPE_STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeString;
/**
 *  Field type uint32.
 *
 *  Value: "TYPE_UINT32"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeUint32;
/**
 *  Field type uint64.
 *
 *  Value: "TYPE_UINT64"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeUint64;
/**
 *  Field type unknown.
 *
 *  Value: "TYPE_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Field_Kind_TypeUnknown;

// ----------------------------------------------------------------------------
// GTLRServiceNetworking_LabelDescriptor.valueType

/**
 *  Boolean; true or false.
 *
 *  Value: "BOOL"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_LabelDescriptor_ValueType_Bool;
/**
 *  A 64-bit signed integer.
 *
 *  Value: "INT64"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_LabelDescriptor_ValueType_Int64;
/**
 *  A variable-length string. This is the default.
 *
 *  Value: "STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_LabelDescriptor_ValueType_String;

// ----------------------------------------------------------------------------
// GTLRServiceNetworking_Method.syntax

/**
 *  Syntax `proto2`.
 *
 *  Value: "SYNTAX_PROTO2"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Method_Syntax_SyntaxProto2;
/**
 *  Syntax `proto3`.
 *
 *  Value: "SYNTAX_PROTO3"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Method_Syntax_SyntaxProto3;

// ----------------------------------------------------------------------------
// GTLRServiceNetworking_MetricDescriptor.launchStage

/**
 *  Alpha is a limited availability test for releases before they are cleared
 *  for widespread use. By Alpha, all significant design issues are resolved and
 *  we are in the process of verifying functionality. Alpha customers need to
 *  apply for access, agree to applicable terms, and have their projects
 *  allowlisted. Alpha releases don't have to be feature complete, no SLAs are
 *  provided, and there are no technical support obligations, but they will be
 *  far enough along that customers can actually use them in test environments
 *  or for limited-use tests -- just like they would in normal production cases.
 *
 *  Value: "ALPHA"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Alpha;
/**
 *  Beta is the point at which we are ready to open a release for any customer
 *  to use. There are no SLA or technical support obligations in a Beta release.
 *  Products will be complete from a feature perspective, but may have some open
 *  outstanding issues. Beta releases are suitable for limited production use
 *  cases.
 *
 *  Value: "BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Beta;
/**
 *  Deprecated features are scheduled to be shut down and removed. For more
 *  information, see the "Deprecation Policy" section of our [Terms of
 *  Service](https://cloud.google.com/terms/) and the [Google Cloud Platform
 *  Subject to the Deprecation
 *  Policy](https://cloud.google.com/terms/deprecation) documentation.
 *
 *  Value: "DEPRECATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Deprecated;
/**
 *  Early Access features are limited to a closed group of testers. To use these
 *  features, you must sign up in advance and sign a Trusted Tester agreement
 *  (which includes confidentiality provisions). These features may be unstable,
 *  changed in backward-incompatible ways, and are not guaranteed to be
 *  released.
 *
 *  Value: "EARLY_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_LaunchStage_EarlyAccess;
/**
 *  GA features are open to all developers and are considered stable and fully
 *  qualified for production use.
 *
 *  Value: "GA"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Ga;
/**
 *  Do not use this default value.
 *
 *  Value: "LAUNCH_STAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_LaunchStage_LaunchStageUnspecified;
/**
 *  Prelaunch features are hidden from users and are only visible internally.
 *
 *  Value: "PRELAUNCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Prelaunch;
/**
 *  The feature is not yet implemented. Users can not use it.
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Unimplemented;

// ----------------------------------------------------------------------------
// GTLRServiceNetworking_MetricDescriptor.metricKind

/**
 *  A value accumulated over a time interval. Cumulative measurements in a time
 *  series should have the same start time and increasing end times, until an
 *  event resets the cumulative value to zero and sets a new start time for the
 *  following points.
 *
 *  Value: "CUMULATIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_MetricKind_Cumulative;
/**
 *  The change in a value during a time interval.
 *
 *  Value: "DELTA"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_MetricKind_Delta;
/**
 *  An instantaneous measurement of a value.
 *
 *  Value: "GAUGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_MetricKind_Gauge;
/**
 *  Do not use this default value.
 *
 *  Value: "METRIC_KIND_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_MetricKind_MetricKindUnspecified;

// ----------------------------------------------------------------------------
// GTLRServiceNetworking_MetricDescriptor.valueType

/**
 *  The value is a boolean. This value type can be used only if the metric kind
 *  is `GAUGE`.
 *
 *  Value: "BOOL"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_Bool;
/**
 *  The value is a `Distribution`.
 *
 *  Value: "DISTRIBUTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_Distribution;
/**
 *  The value is a double precision floating point number.
 *
 *  Value: "DOUBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_Double;
/**
 *  The value is a signed 64-bit integer.
 *
 *  Value: "INT64"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_Int64;
/**
 *  The value is money.
 *
 *  Value: "MONEY"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_Money;
/**
 *  The value is a text string. This value type can be used only if the metric
 *  kind is `GAUGE`.
 *
 *  Value: "STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_String;
/**
 *  Do not use this default value.
 *
 *  Value: "VALUE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptor_ValueType_ValueTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRServiceNetworking_MetricDescriptorMetadata.launchStage

/**
 *  Alpha is a limited availability test for releases before they are cleared
 *  for widespread use. By Alpha, all significant design issues are resolved and
 *  we are in the process of verifying functionality. Alpha customers need to
 *  apply for access, agree to applicable terms, and have their projects
 *  allowlisted. Alpha releases don't have to be feature complete, no SLAs are
 *  provided, and there are no technical support obligations, but they will be
 *  far enough along that customers can actually use them in test environments
 *  or for limited-use tests -- just like they would in normal production cases.
 *
 *  Value: "ALPHA"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Alpha;
/**
 *  Beta is the point at which we are ready to open a release for any customer
 *  to use. There are no SLA or technical support obligations in a Beta release.
 *  Products will be complete from a feature perspective, but may have some open
 *  outstanding issues. Beta releases are suitable for limited production use
 *  cases.
 *
 *  Value: "BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Beta;
/**
 *  Deprecated features are scheduled to be shut down and removed. For more
 *  information, see the "Deprecation Policy" section of our [Terms of
 *  Service](https://cloud.google.com/terms/) and the [Google Cloud Platform
 *  Subject to the Deprecation
 *  Policy](https://cloud.google.com/terms/deprecation) documentation.
 *
 *  Value: "DEPRECATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Deprecated;
/**
 *  Early Access features are limited to a closed group of testers. To use these
 *  features, you must sign up in advance and sign a Trusted Tester agreement
 *  (which includes confidentiality provisions). These features may be unstable,
 *  changed in backward-incompatible ways, and are not guaranteed to be
 *  released.
 *
 *  Value: "EARLY_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_EarlyAccess;
/**
 *  GA features are open to all developers and are considered stable and fully
 *  qualified for production use.
 *
 *  Value: "GA"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Ga;
/**
 *  Do not use this default value.
 *
 *  Value: "LAUNCH_STAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_LaunchStageUnspecified;
/**
 *  Prelaunch features are hidden from users and are only visible internally.
 *
 *  Value: "PRELAUNCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Prelaunch;
/**
 *  The feature is not yet implemented. Users can not use it.
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Unimplemented;

// ----------------------------------------------------------------------------
// GTLRServiceNetworking_MonitoredResourceDescriptor.launchStage

/**
 *  Alpha is a limited availability test for releases before they are cleared
 *  for widespread use. By Alpha, all significant design issues are resolved and
 *  we are in the process of verifying functionality. Alpha customers need to
 *  apply for access, agree to applicable terms, and have their projects
 *  allowlisted. Alpha releases don't have to be feature complete, no SLAs are
 *  provided, and there are no technical support obligations, but they will be
 *  far enough along that customers can actually use them in test environments
 *  or for limited-use tests -- just like they would in normal production cases.
 *
 *  Value: "ALPHA"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Alpha;
/**
 *  Beta is the point at which we are ready to open a release for any customer
 *  to use. There are no SLA or technical support obligations in a Beta release.
 *  Products will be complete from a feature perspective, but may have some open
 *  outstanding issues. Beta releases are suitable for limited production use
 *  cases.
 *
 *  Value: "BETA"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Beta;
/**
 *  Deprecated features are scheduled to be shut down and removed. For more
 *  information, see the "Deprecation Policy" section of our [Terms of
 *  Service](https://cloud.google.com/terms/) and the [Google Cloud Platform
 *  Subject to the Deprecation
 *  Policy](https://cloud.google.com/terms/deprecation) documentation.
 *
 *  Value: "DEPRECATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Deprecated;
/**
 *  Early Access features are limited to a closed group of testers. To use these
 *  features, you must sign up in advance and sign a Trusted Tester agreement
 *  (which includes confidentiality provisions). These features may be unstable,
 *  changed in backward-incompatible ways, and are not guaranteed to be
 *  released.
 *
 *  Value: "EARLY_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_EarlyAccess;
/**
 *  GA features are open to all developers and are considered stable and fully
 *  qualified for production use.
 *
 *  Value: "GA"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Ga;
/**
 *  Do not use this default value.
 *
 *  Value: "LAUNCH_STAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_LaunchStageUnspecified;
/**
 *  Prelaunch features are hidden from users and are only visible internally.
 *
 *  Value: "PRELAUNCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Prelaunch;
/**
 *  The feature is not yet implemented. Users can not use it.
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Unimplemented;

// ----------------------------------------------------------------------------
// GTLRServiceNetworking_Type.syntax

/**
 *  Syntax `proto2`.
 *
 *  Value: "SYNTAX_PROTO2"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Type_Syntax_SyntaxProto2;
/**
 *  Syntax `proto3`.
 *
 *  Value: "SYNTAX_PROTO3"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_Type_Syntax_SyntaxProto3;

// ----------------------------------------------------------------------------
// GTLRServiceNetworking_ValidateConsumerConfigResponse.validationError

/**
 *  The consumer project does not have the compute api enabled.
 *
 *  Value: "COMPUTE_API_NOT_ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_ComputeApiNotEnabled;
/**
 *  The consumer project is not a service project for the specified host
 *  project.
 *
 *  Value: "CONSUMER_PROJECT_NOT_SERVICE_PROJECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_ConsumerProjectNotServiceProject;
/**
 *  The host project associated with the consumer project was not found.
 *
 *  Value: "HOST_PROJECT_NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_HostProjectNotFound;
/**
 *  The network provided by the consumer does not exist.
 *
 *  Value: "NETWORK_NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_NetworkNotFound;
/**
 *  The consumer project is a service project, and network is a shared VPC, but
 *  the network is not in the host project of this consumer project.
 *
 *  Value: "NETWORK_NOT_IN_CONSUMERS_HOST_PROJECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_NetworkNotInConsumersHostProject;
/**
 *  The network is a regular VPC but the network is not in the consumer's
 *  project.
 *
 *  Value: "NETWORK_NOT_IN_CONSUMERS_PROJECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_NetworkNotInConsumersProject;
/**
 *  The network has not been peered with the producer org.
 *
 *  Value: "NETWORK_NOT_PEERED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_NetworkNotPeered;
/**
 *  The peering was created and later deleted.
 *
 *  Value: "NETWORK_PEERING_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_NetworkPeeringDeleted;
/**
 *  The IP ranges were reserved but deleted later.
 *
 *  Value: "RANGES_DELETED_LATER"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_RangesDeletedLater;
/**
 *  The reserved IP ranges do not have enough space to create a subnet of
 *  desired size.
 *
 *  Value: "RANGES_EXHAUSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_RangesExhausted;
/**
 *  The IP ranges were not reserved.
 *
 *  Value: "RANGES_NOT_RESERVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_RangesNotReserved;
/** Value: "SERVICE_NETWORKING_NOT_ENABLED" */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_ServiceNetworkingNotEnabled;
/**
 *  The consumer project does not have the permission from the host project.
 *
 *  Value: "USE_PERMISSION_NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_UsePermissionNotFound;
/** Value: "VALIDATION_ERROR_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_ValidationErrorUnspecified;
/**
 *  In case none of the validations are requested.
 *
 *  Value: "VALIDATION_NOT_REQUESTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_ValidationNotRequested;

/**
 *  Metadata provided through GetOperation request for the LRO generated by
 *  AddDnsRecordSet API
 */
@interface GTLRServiceNetworking_AddDnsRecordSetMetadata : GTLRObject
@end


/**
 *  Request to add a record set to a private managed DNS zone in the shared
 *  producer host project.
 */
@interface GTLRServiceNetworking_AddDnsRecordSetRequest : GTLRObject

/**
 *  Required. The network that the consumer is using to connect with services.
 *  Must be in the form of projects/{project}/global/networks/{network}
 *  {project} is the project number, as in '12345' {network} is the network
 *  name.
 */
@property(nonatomic, copy, nullable) NSString *consumerNetwork;

/** Required. The DNS record set to add. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_DnsRecordSet *dnsRecordSet;

/**
 *  Required. The name of the private DNS zone in the shared producer host
 *  project to which the record set will be added.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  Metadata provided through GetOperation request for the LRO generated by
 *  AddDnsZone API
 */
@interface GTLRServiceNetworking_AddDnsZoneMetadata : GTLRObject
@end


/**
 *  Request to add a private managed DNS zone in the shared producer host
 *  project and a matching DNS peering zone in the consumer project.
 */
@interface GTLRServiceNetworking_AddDnsZoneRequest : GTLRObject

/**
 *  Required. The network that the consumer is using to connect with services.
 *  Must be in the form of projects/{project}/global/networks/{network}
 *  {project} is the project number, as in '12345' {network} is the network
 *  name.
 */
@property(nonatomic, copy, nullable) NSString *consumerNetwork;

/** Required. The DNS name suffix for the zones e.g. `example.com`. */
@property(nonatomic, copy, nullable) NSString *dnsSuffix;

/**
 *  Required. The name for both the private zone in the shared producer host
 *  project and the peering zone in the consumer project. Must be unique within
 *  both projects. The name must be 1-63 characters long, must begin with a
 *  letter, end with a letter or digit, and only contain lowercase letters,
 *  digits or dashes.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Represents managed DNS zones created in the shared producer host and
 *  consumer projects.
 */
@interface GTLRServiceNetworking_AddDnsZoneResponse : GTLRObject

/** The DNS peering zone created in the consumer project. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_DnsZone *consumerPeeringZone;

/** The private DNS zone created in the shared producer host project. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_DnsZone *producerPrivateZone;

@end


/**
 *  Metadata provided through GetOperation request for the LRO generated by
 *  AddRoles API
 */
@interface GTLRServiceNetworking_AddRolesMetadata : GTLRObject
@end


/**
 *  Request for AddRoles to allow Service Producers to add roles in the shared
 *  VPC host project for them to use.
 */
@interface GTLRServiceNetworking_AddRolesRequest : GTLRObject

/**
 *  Required. The network that the consumer is using to connect with services.
 *  Must be in the form of projects/{project}/global/networks/{network}
 *  {project} is a project number, as in '12345' {network} is a network name.
 */
@property(nonatomic, copy, nullable) NSString *consumerNetwork;

/** Required. List of policy bindings to add to shared VPC host project. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_PolicyBinding *> *policyBinding;

@end


/**
 *  Represents IAM roles added to the shared VPC host project.
 */
@interface GTLRServiceNetworking_AddRolesResponse : GTLRObject

/**
 *  Required. List of policy bindings that were added to the shared VPC host
 *  project.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_PolicyBinding *> *policyBinding;

@end


/**
 *  Request to create a subnetwork in a previously peered service network.
 */
@interface GTLRServiceNetworking_AddSubnetworkRequest : GTLRObject

/**
 *  Optional. The IAM permission check determines whether the consumer project
 *  has 'servicenetworking.services.use' permission or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *checkServiceNetworkingUsePermission;

/**
 *  Optional. Specifies a custom time bucket for Arcus subnetwork request
 *  idempotency. If two equivalent concurrent requests are made, Arcus will know
 *  to ignore the request if it has already been completed or is in progress.
 *  Only requests with matching compute_idempotency_window have guaranteed
 *  idempotency. Changing this time window between requests results in undefined
 *  behavior. Zero (or empty) value with custom_compute_idempotency_window=true
 *  specifies no idempotency (i.e. no request ID is provided to Arcus). Maximum
 *  value of 14 days (enforced by Arcus limit). For more information on how to
 *  use, see: go/revisit-sn-idempotency-window
 */
@property(nonatomic, strong, nullable) GTLRDuration *computeIdempotencyWindow;

/**
 *  Required. A resource that represents the service consumer, such as
 *  `projects/123456`. The project number can be different from the value in the
 *  consumer network parameter. For example, the network might be part of a
 *  Shared VPC network. In those cases, Service Networking validates that this
 *  resource belongs to that Shared VPC.
 */
@property(nonatomic, copy, nullable) NSString *consumer;

/**
 *  Required. The name of the service consumer's VPC network. The network must
 *  have an existing private connection that was provisioned through the
 *  connections.create method. The name must be in the following format:
 *  `projects/{project}/global/networks/{network}`, where {project} is a project
 *  number, such as `12345`. {network} is the name of a VPC network in the
 *  project.
 */
@property(nonatomic, copy, nullable) NSString *consumerNetwork;

/**
 *  Optional. Description of the subnet.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Required. The prefix length of the subnet's IP address range. Use CIDR range
 *  notation, such as `30` to provision a subnet with an `x.x.x.x/30` CIDR
 *  range. The IP address range is drawn from a pool of available ranges in the
 *  service consumer's allocated range.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ipPrefixLength;

/**
 *  Optional. Enable outside allocation using public IP addresses. Any public IP
 *  range may be specified. If this field is provided, we will not use customer
 *  reserved ranges for this primary IP range.
 */
@property(nonatomic, copy, nullable) NSString *outsideAllocationPublicIpRange;

/**
 *  Optional. The private IPv6 google access type for the VMs in this subnet.
 *  For information about the access types that can be set using this field, see
 *  [subnetwork](https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks)
 *  in the Compute API documentation.
 */
@property(nonatomic, copy, nullable) NSString *privateIpv6GoogleAccess;

/**
 *  Optional. Defines the purpose field of the subnet, e.g.
 *  'PRIVATE_SERVICE_CONNECT'. For information about the purposes that can be
 *  set using this field, see
 *  [subnetwork](https://cloud.google.com/compute/docs/reference/rest/v1/subnetworks)
 *  in the Compute API documentation.
 */
@property(nonatomic, copy, nullable) NSString *purpose;

/**
 *  Required. The name of a [region](/compute/docs/regions-zones) for the
 *  subnet, such `europe-west1`.
 */
@property(nonatomic, copy, nullable) NSString *region;

/**
 *  Optional. The starting address of a range. The address must be a valid IPv4
 *  address in the x.x.x.x format. This value combined with the IP prefix range
 *  is the CIDR range for the subnet. The range must be within the allocated
 *  range that is assigned to the private connection. If the CIDR range isn't
 *  available, the call fails.
 */
@property(nonatomic, copy, nullable) NSString *requestedAddress;

/**
 *  Optional. The name of one or more allocated IP address ranges associated
 *  with this private service access connection. If no range names are provided
 *  all ranges associated with this connection will be considered. If a CIDR
 *  range with the specified IP prefix length is not available within these
 *  ranges, the call fails.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestedRanges;

/**
 *  Optional. A list of secondary IP ranges to be created within the new
 *  subnetwork.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_SecondaryIpRangeSpec *> *secondaryIpRangeSpecs;

/**
 *  Required. A name for the new subnet. For information about the naming
 *  requirements, see [subnetwork](/compute/docs/reference/rest/v1/subnetworks)
 *  in the Compute API documentation.
 */
@property(nonatomic, copy, nullable) NSString *subnetwork;

/**
 *  A list of members that are granted the
 *  `roles/servicenetworking.subnetworkAdmin` role on the subnet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *subnetworkUsers;

/**
 *  Optional. Specifies if Service Networking should use a custom time bucket
 *  for Arcus idempotency. If false, Service Networking uses a 300 second (5
 *  minute) Arcus idempotency window. If true, Service Networking uses a custom
 *  idempotency window provided by the user in field compute_idempotency_window.
 *  For more information on how to use, see: go/revisit-sn-idempotency-window
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useCustomComputeIdempotencyWindow;

@end


/**
 *  Api is a light-weight descriptor for an API Interface. Interfaces are also
 *  described as "protocol buffer services" in some contexts, such as by the
 *  "service" keyword in a .proto file, but they are different from API
 *  Services, which represent a concrete implementation of an interface as
 *  opposed to simply a description of methods and bindings. They are also
 *  sometimes simply referred to as "APIs" in other contexts, such as the name
 *  of this message itself. See https://cloud.google.com/apis/design/glossary
 *  for detailed terminology.
 */
@interface GTLRServiceNetworking_Api : GTLRObject

/** The methods of this interface, in unspecified order. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Method *> *methods;

/** Included interfaces. See Mixin. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Mixin *> *mixins;

/**
 *  The fully qualified name of this interface, including package name followed
 *  by the interface's simple name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Any metadata attached to the interface. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Option *> *options;

/**
 *  Source context for the protocol buffer service represented by this message.
 */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_SourceContext *sourceContext;

/**
 *  The source syntax of the service.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceNetworking_Api_Syntax_SyntaxProto2 Syntax `proto2`.
 *        (Value: "SYNTAX_PROTO2")
 *    @arg @c kGTLRServiceNetworking_Api_Syntax_SyntaxProto3 Syntax `proto3`.
 *        (Value: "SYNTAX_PROTO3")
 */
@property(nonatomic, copy, nullable) NSString *syntax;

/**
 *  A version string for this interface. If specified, must have the form
 *  `major-version.minor-version`, as in `1.10`. If the minor version is
 *  omitted, it defaults to zero. If the entire version field is empty, the
 *  major version is derived from the package name, as outlined below. If the
 *  field is not empty, the version in the package name will be verified to be
 *  consistent with what is provided here. The versioning schema uses [semantic
 *  versioning](http://semver.org) where the major version number indicates a
 *  breaking change and the minor version an additive, non-breaking change. Both
 *  version numbers are signals to users what to expect from different versions,
 *  and should be carefully chosen based on the product plan. The major version
 *  is also reflected in the package name of the interface, which must end in
 *  `v`, as in `google.feature.v1`. For major versions 0 and 1, the suffix can
 *  be omitted. Zero major versions must only be used for experimental, non-GA
 *  interfaces.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  `Authentication` defines the authentication configuration for API methods
 *  provided by an API service. Example: name: calendar.googleapis.com
 *  authentication: providers: - id: google_calendar_auth jwks_uri:
 *  https://www.googleapis.com/oauth2/v1/certs issuer:
 *  https://securetoken.google.com rules: - selector: "*" requirements:
 *  provider_id: google_calendar_auth - selector: google.calendar.Delegate
 *  oauth: canonical_scopes: https://www.googleapis.com/auth/calendar.read
 */
@interface GTLRServiceNetworking_Authentication : GTLRObject

/** Defines a set of authentication providers that a service supports. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_AuthProvider *> *providers;

/**
 *  A list of authentication rules that apply to individual API methods.
 *  **NOTE:** All service configuration rules follow "last one wins" order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_AuthenticationRule *> *rules;

@end


/**
 *  Authentication rules for the service. By default, if a method has any
 *  authentication requirements, every request must include a valid credential
 *  matching one of the requirements. It's an error to include more than one
 *  kind of credential in a single request. If a method doesn't have any auth
 *  requirements, request credentials will be ignored.
 */
@interface GTLRServiceNetworking_AuthenticationRule : GTLRObject

/**
 *  If true, the service accepts API keys without any other credential. This
 *  flag only applies to HTTP and gRPC requests.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowWithoutCredential;

/** The requirements for OAuth credentials. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_OAuthRequirements *oauth;

/** Requirements for additional authentication providers. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_AuthRequirement *> *requirements;

/**
 *  Selects the methods to which this rule applies. Refer to selector for syntax
 *  details.
 */
@property(nonatomic, copy, nullable) NSString *selector;

@end


/**
 *  Configuration for an authentication provider, including support for [JSON
 *  Web Token
 *  (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
 */
@interface GTLRServiceNetworking_AuthProvider : GTLRObject

/**
 *  The list of JWT
 *  [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3).
 *  that are allowed to access. A JWT containing any of these audiences will be
 *  accepted. When this setting is absent, JWTs with audiences: -
 *  "https://[service.name]/[google.protobuf.Api.name]" -
 *  "https://[service.name]/" will be accepted. For example, if no audiences are
 *  in the setting, LibraryService API will accept JWTs with the following
 *  audiences: -
 *  https://library-example.googleapis.com/google.example.library.v1.LibraryService
 *  - https://library-example.googleapis.com/ Example: audiences:
 *  bookstore_android.apps.googleusercontent.com,
 *  bookstore_web.apps.googleusercontent.com
 */
@property(nonatomic, copy, nullable) NSString *audiences;

/**
 *  Redirect URL if JWT token is required but not present or is expired.
 *  Implement authorizationUrl of securityDefinitions in OpenAPI spec.
 */
@property(nonatomic, copy, nullable) NSString *authorizationUrl;

/**
 *  The unique identifier of the auth provider. It will be referred to by
 *  `AuthRequirement.provider_id`. Example: "bookstore_auth".
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies the principal that issued the JWT. See
 *  https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1
 *  Usually a URL or an email address. Example: https://securetoken.google.com
 *  Example: 1234567-compute\@developer.gserviceaccount.com
 */
@property(nonatomic, copy, nullable) NSString *issuer;

/**
 *  URL of the provider's public key set to validate signature of the JWT. See
 *  [OpenID
 *  Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
 *  Optional if the key set document: - can be retrieved from [OpenID
 *  Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of
 *  the issuer. - can be inferred from the email domain of the issuer (e.g. a
 *  Google service account). Example: https://www.googleapis.com/oauth2/v1/certs
 */
@property(nonatomic, copy, nullable) NSString *jwksUri;

/**
 *  Defines the locations to extract the JWT. For now it is only used by the
 *  Cloud Endpoints to store the OpenAPI extension [x-google-jwt-locations]
 *  (https://cloud.google.com/endpoints/docs/openapi/openapi-extensions#x-google-jwt-locations)
 *  JWT locations can be one of HTTP headers, URL query parameters or cookies.
 *  The rule is that the first match wins. If not specified, default to use
 *  following 3 locations: 1) Authorization: Bearer 2) x-goog-iap-jwt-assertion
 *  3) access_token query parameter Default locations can be specified as
 *  followings: jwt_locations: - header: Authorization value_prefix: "Bearer " -
 *  header: x-goog-iap-jwt-assertion - query: access_token
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_JwtLocation *> *jwtLocations;

@end


/**
 *  User-defined authentication requirements, including support for [JSON Web
 *  Token
 *  (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
 */
@interface GTLRServiceNetworking_AuthRequirement : GTLRObject

/**
 *  NOTE: This will be deprecated soon, once AuthProvider.audiences is
 *  implemented and accepted in all the runtime components. The list of JWT
 *  [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3).
 *  that are allowed to access. A JWT containing any of these audiences will be
 *  accepted. When this setting is absent, only JWTs with audience
 *  "https://Service_name/API_name" will be accepted. For example, if no
 *  audiences are in the setting, LibraryService API will only accept JWTs with
 *  the following audience
 *  "https://library-example.googleapis.com/google.example.library.v1.LibraryService".
 *  Example: audiences: bookstore_android.apps.googleusercontent.com,
 *  bookstore_web.apps.googleusercontent.com
 */
@property(nonatomic, copy, nullable) NSString *audiences;

/** id from authentication provider. Example: provider_id: bookstore_auth */
@property(nonatomic, copy, nullable) NSString *providerId;

@end


/**
 *  `Backend` defines the backend configuration for a service.
 */
@interface GTLRServiceNetworking_Backend : GTLRObject

/**
 *  A list of API backend rules that apply to individual API methods. **NOTE:**
 *  All service configuration rules follow "last one wins" order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_BackendRule *> *rules;

@end


/**
 *  A backend rule provides configuration for an individual API element.
 */
@interface GTLRServiceNetworking_BackendRule : GTLRObject

/**
 *  The address of the API backend. The scheme is used to determine the backend
 *  protocol and security. The following schemes are accepted: SCHEME PROTOCOL
 *  SECURITY http:// HTTP None https:// HTTP TLS grpc:// gRPC None grpcs:// gRPC
 *  TLS It is recommended to explicitly include a scheme. Leaving out the scheme
 *  may cause constrasting behaviors across platforms. If the port is
 *  unspecified, the default is: - 80 for schemes without TLS - 443 for schemes
 *  with TLS For HTTP backends, use protocol to specify the protocol version.
 */
@property(nonatomic, copy, nullable) NSString *address;

/**
 *  The number of seconds to wait for a response from a request. The default
 *  varies based on the request protocol and deployment environment.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deadline;

/**
 *  When disable_auth is true, a JWT ID token won't be generated and the
 *  original "Authorization" HTTP header will be preserved. If the header is
 *  used to carry the original token and is expected by the backend, this field
 *  must be set to true to preserve the header.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableAuth;

/**
 *  The JWT audience is used when generating a JWT ID token for the backend.
 *  This ID token will be added in the HTTP "authorization" header, and sent to
 *  the backend.
 */
@property(nonatomic, copy, nullable) NSString *jwtAudience;

/**
 *  The number of seconds to wait for the completion of a long running
 *  operation. The default is no deadline.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *operationDeadline;

/**
 *  pathTranslation
 *
 *  Likely values:
 *    @arg @c kGTLRServiceNetworking_BackendRule_PathTranslation_AppendPathToAddress
 *        The request path will be appended to the backend address. # Examples
 *        Given the following operation config: Method path:
 *        /api/company/{cid}/user/{uid} Backend address:
 *        https://example.appspot.com Requests to the following request paths
 *        will call the backend at the translated path: Request path:
 *        /api/company/widgetworks/user/johndoe Translated:
 *        https://example.appspot.com/api/company/widgetworks/user/johndoe
 *        Request path: /api/company/widgetworks/user/johndoe?timezone=EST
 *        Translated:
 *        https://example.appspot.com/api/company/widgetworks/user/johndoe?timezone=EST
 *        (Value: "APPEND_PATH_TO_ADDRESS")
 *    @arg @c kGTLRServiceNetworking_BackendRule_PathTranslation_ConstantAddress
 *        Use the backend address as-is, with no modification to the path. If
 *        the URL pattern contains variables, the variable names and values will
 *        be appended to the query string. If a query string parameter and a URL
 *        pattern variable have the same name, this may result in duplicate keys
 *        in the query string. # Examples Given the following operation config:
 *        Method path: /api/company/{cid}/user/{uid} Backend address:
 *        https://example.cloudfunctions.net/getUser Requests to the following
 *        request paths will call the backend at the translated path: Request
 *        path: /api/company/widgetworks/user/johndoe Translated:
 *        https://example.cloudfunctions.net/getUser?cid=widgetworks&uid=johndoe
 *        Request path: /api/company/widgetworks/user/johndoe?timezone=EST
 *        Translated:
 *        https://example.cloudfunctions.net/getUser?timezone=EST&cid=widgetworks&uid=johndoe
 *        (Value: "CONSTANT_ADDRESS")
 *    @arg @c kGTLRServiceNetworking_BackendRule_PathTranslation_PathTranslationUnspecified
 *        Value "PATH_TRANSLATION_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *pathTranslation;

/**
 *  The protocol used for sending a request to the backend. The supported values
 *  are "http/1.1" and "h2". The default value is inferred from the scheme in
 *  the address field: SCHEME PROTOCOL http:// http/1.1 https:// http/1.1
 *  grpc:// h2 grpcs:// h2 For secure HTTP backends (https://) that support
 *  HTTP/2, set this field to "h2" for improved performance. Configuring this
 *  field to non-default values is only supported for secure HTTP backends. This
 *  field will be ignored for all other backends. See
 *  https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids
 *  for more details on the supported values.
 */
@property(nonatomic, copy, nullable) NSString *protocol;

/**
 *  Selects the methods to which this rule applies. Refer to selector for syntax
 *  details.
 */
@property(nonatomic, copy, nullable) NSString *selector;

@end


/**
 *  Billing related configuration of the service. The following example shows
 *  how to configure monitored resources and metrics for billing,
 *  `consumer_destinations` is the only supported destination and the monitored
 *  resources need at least one label key `cloud.googleapis.com/location` to
 *  indicate the location of the billing usage, using different monitored
 *  resources between monitoring and billing is recommended so they can be
 *  evolved independently: monitored_resources: - type:
 *  library.googleapis.com/billing_branch labels: - key:
 *  cloud.googleapis.com/location description: | Predefined label to support
 *  billing location restriction. - key: city description: | Custom label to
 *  define the city where the library branch is located in. - key: name
 *  description: Custom label to define the name of the library branch. metrics:
 *  - name: library.googleapis.com/book/borrowed_count metric_kind: DELTA
 *  value_type: INT64 unit: "1" billing: consumer_destinations: -
 *  monitored_resource: library.googleapis.com/billing_branch metrics: -
 *  library.googleapis.com/book/borrowed_count
 */
@interface GTLRServiceNetworking_Billing : GTLRObject

/**
 *  Billing configurations for sending metrics to the consumer project. There
 *  can be multiple consumer destinations per service, each one must have a
 *  different monitored resource type. A metric can be used in at most one
 *  consumer destination.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_BillingDestination *> *consumerDestinations;

@end


/**
 *  Configuration of a specific billing destination (Currently only support bill
 *  against consumer project).
 */
@interface GTLRServiceNetworking_BillingDestination : GTLRObject

/**
 *  Names of the metrics to report to this billing destination. Each name must
 *  be defined in Service.metrics section.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

/**
 *  The monitored resource type. The type must be defined in
 *  Service.monitored_resources section.
 */
@property(nonatomic, copy, nullable) NSString *monitoredResource;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRServiceNetworking_CancelOperationRequest : GTLRObject
@end


/**
 *  Cloud SQL configuration.
 */
@interface GTLRServiceNetworking_CloudSQLConfig : GTLRObject

/** Peering service used for peering with the Cloud SQL project. */
@property(nonatomic, copy, nullable) NSString *service;

/** The name of the umbrella network in the Cloud SQL umbrella project. */
@property(nonatomic, copy, nullable) NSString *umbrellaNetwork;

/**
 *  The project number of the Cloud SQL umbrella project.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *umbrellaProject;

@end


/**
 *  Represents a private connection resource. A private connection is
 *  implemented as a VPC Network Peering connection between a service producer's
 *  VPC network and a service consumer's VPC network.
 */
@interface GTLRServiceNetworking_Connection : GTLRObject

/**
 *  The name of service consumer's VPC network that's connected with service
 *  producer network, in the following format:
 *  `projects/{project}/global/networks/{network}`. `{project}` is a project
 *  number, such as in `12345` that includes the VPC service consumer's VPC
 *  network. `{network}` is the name of the service consumer's VPC network.
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  Output only. The name of the VPC Network Peering connection that was created
 *  by the service producer.
 */
@property(nonatomic, copy, nullable) NSString *peering;

/**
 *  The name of one or more allocated IP address ranges for this service
 *  producer of type `PEERING`. Note that invoking CreateConnection method with
 *  a different range when connection is already established will not modify
 *  already provisioned service producer subnetworks. If CreateConnection method
 *  is invoked repeatedly to reconnect when peering connection had been
 *  disconnected on the consumer side, leaving this field empty will restore
 *  previously allocated IP ranges.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *reservedPeeringRanges;

/**
 *  Output only. The name of the peering service that's associated with this
 *  connection, in the following format: `services/{service name}`.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Configuration information for a private service access connection.
 */
@interface GTLRServiceNetworking_ConsumerConfig : GTLRObject

/** Represents one or multiple Cloud SQL configurations. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_CloudSQLConfig *> *cloudsqlConfigs;

/**
 *  Export custom routes flag value for peering from consumer to producer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *consumerExportCustomRoutes;

/**
 *  Export subnet routes with public ip flag value for peering from consumer to
 *  producer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *consumerExportSubnetRoutesWithPublicIp;

/**
 *  Import custom routes flag value for peering from consumer to producer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *consumerImportCustomRoutes;

/**
 *  Import subnet routes with public ip flag value for peering from consumer to
 *  producer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *consumerImportSubnetRoutesWithPublicIp;

/**
 *  Export custom routes flag value for peering from producer to consumer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *producerExportCustomRoutes;

/**
 *  Export subnet routes with public ip flag value for peering from producer to
 *  consumer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *producerExportSubnetRoutesWithPublicIp;

/**
 *  Import custom routes flag value for peering from producer to consumer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *producerImportCustomRoutes;

/**
 *  Import subnet routes with public ip flag value for peering from producer to
 *  consumer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *producerImportSubnetRoutesWithPublicIp;

/**
 *  Output only. The VPC host network that is used to host managed service
 *  instances. In the format, projects/{project}/global/networks/{network} where
 *  {project} is the project number e.g. '12345' and {network} is the network
 *  name.
 */
@property(nonatomic, copy, nullable) NSString *producerNetwork;

/**
 *  Output only. The reserved ranges associated with this private service access
 *  connection.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_GoogleCloudServicenetworkingV1ConsumerConfigReservedRange *> *reservedRanges;

/** Output only. The IP ranges already in use by consumer or producer */
@property(nonatomic, strong, nullable) NSArray<NSString *> *usedIpRanges;

/**
 *  Output only. Indicates whether the VPC Service Controls reference
 *  architecture is configured for the producer VPC host network.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *vpcScReferenceArchitectureEnabled;

@end


/**
 *  Metadata provided through GetOperation request for the LRO generated by
 *  UpdateConsumerConfig API.
 */
@interface GTLRServiceNetworking_ConsumerConfigMetadata : GTLRObject
@end


/**
 *  Represents a consumer project.
 */
@interface GTLRServiceNetworking_ConsumerProject : GTLRObject

/**
 *  Required. Project number of the consumer that is launching the service
 *  instance. It can own the network that is peered with Google or, be a service
 *  project in an XPN where the host project has the network.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *projectNum;

@end


/**
 *  `Context` defines which contexts an API requests. Example: context: rules: -
 *  selector: "*" requested: - google.rpc.context.ProjectContext -
 *  google.rpc.context.OriginContext The above specifies that all methods in the
 *  API request `google.rpc.context.ProjectContext` and
 *  `google.rpc.context.OriginContext`. Available context types are defined in
 *  package `google.rpc.context`. This also provides mechanism to allowlist any
 *  protobuf message extension that can be sent in grpc metadata using
 *  “x-goog-ext--bin” and “x-goog-ext--jspb” format. For example, list any
 *  service specific protobuf types that can appear in grpc metadata as follows
 *  in your yaml file: Example: context: rules: - selector:
 *  "google.example.library.v1.LibraryService.CreateBook"
 *  allowed_request_extensions: - google.foo.v1.NewExtension
 *  allowed_response_extensions: - google.foo.v1.NewExtension You can also
 *  specify extension ID instead of fully qualified extension name here.
 */
@interface GTLRServiceNetworking_Context : GTLRObject

/**
 *  A list of RPC context rules that apply to individual API methods. **NOTE:**
 *  All service configuration rules follow "last one wins" order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_ContextRule *> *rules;

@end


/**
 *  A context rule provides information about the context for an individual API
 *  element.
 */
@interface GTLRServiceNetworking_ContextRule : GTLRObject

/**
 *  A list of full type names or extension IDs of extensions allowed in grpc
 *  side channel from client to backend.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedRequestExtensions;

/**
 *  A list of full type names or extension IDs of extensions allowed in grpc
 *  side channel from backend to client.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedResponseExtensions;

/** A list of full type names of provided contexts. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *provided;

/** A list of full type names of requested contexts. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requested;

/**
 *  Selects the methods to which this rule applies. Refer to selector for syntax
 *  details.
 */
@property(nonatomic, copy, nullable) NSString *selector;

@end


/**
 *  Selects and configures the service controller used by the service. The
 *  service controller handles two things: - **What is allowed:** for each API
 *  request, Chemist checks the project status, activation status, abuse status,
 *  billing status, service status, location restrictions, VPC Service Controls,
 *  SuperQuota, and other policies. - **What has happened:** for each API
 *  response, Chemist reports the telemetry data to analytics, auditing,
 *  billing, eventing, logging, monitoring, sawmill, and tracing. Chemist also
 *  accepts telemetry data not associated with API traffic, such as billing
 *  metrics. Example: control: environment: servicecontrol.googleapis.com
 */
@interface GTLRServiceNetworking_Control : GTLRObject

/**
 *  The service controller environment to use. If empty, no control plane
 *  feature (like quota and billing) will be enabled. The recommended value for
 *  most services is servicecontrol.googleapis.com
 */
@property(nonatomic, copy, nullable) NSString *environment;

@end


/**
 *  Customize service error responses. For example, list any service specific
 *  protobuf types that can appear in error detail lists of error responses.
 *  Example: custom_error: types: - google.foo.v1.CustomError -
 *  google.foo.v1.AnotherError
 */
@interface GTLRServiceNetworking_CustomError : GTLRObject

/**
 *  The list of custom error rules that apply to individual API messages.
 *  **NOTE:** All service configuration rules follow "last one wins" order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_CustomErrorRule *> *rules;

/**
 *  The list of custom error detail types, e.g. 'google.foo.v1.CustomError'.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *types;

@end


/**
 *  A custom error rule.
 */
@interface GTLRServiceNetworking_CustomErrorRule : GTLRObject

/**
 *  Mark this message as possible payload in error response. Otherwise, objects
 *  of this type will be filtered when they appear in error payload.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isErrorType;

/**
 *  Selects messages to which this rule applies. Refer to selector for syntax
 *  details.
 */
@property(nonatomic, copy, nullable) NSString *selector;

@end


/**
 *  A custom pattern is used for defining custom HTTP verb.
 */
@interface GTLRServiceNetworking_CustomHttpPattern : GTLRObject

/** The name of this custom HTTP verb. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The path matched by this custom verb. */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  Metadata provided through GetOperation request for the LRO generated by
 *  Delete Connection API
 */
@interface GTLRServiceNetworking_DeleteConnectionMetadata : GTLRObject
@end


/**
 *  Request to delete a private service access connection. The call will fail if
 *  there are any managed service instances using this connection.
 */
@interface GTLRServiceNetworking_DeleteConnectionRequest : GTLRObject

/**
 *  Required. The network that the consumer is using to connect with services.
 *  Must be in the form of projects/{project}/global/networks/{network}
 *  {project} is a project number, as in '12345' {network} is a network name.
 */
@property(nonatomic, copy, nullable) NSString *consumerNetwork;

@end


/**
 *  Metadata provided through GetOperation request for the LRO generated by
 *  DeletePeeredDnsDomain API.
 */
@interface GTLRServiceNetworking_DeletePeeredDnsDomainMetadata : GTLRObject
@end


/**
 *  Request to disable VPC service controls.
 */
@interface GTLRServiceNetworking_DisableVpcServiceControlsRequest : GTLRObject

/**
 *  Required. The network that the consumer is using to connect with services.
 *  Must be in the form of projects/{project}/global/networks/{network}
 *  {project} is a project number, as in '12345' {network} is network name.
 */
@property(nonatomic, copy, nullable) NSString *consumerNetwork;

@end


/**
 *  Represents a DNS record set resource.
 */
@interface GTLRServiceNetworking_DnsRecordSet : GTLRObject

/**
 *  Required. As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1)
 *  for examples see https://cloud.google.com/dns/records/json-record.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *data;

/**
 *  Required. The DNS or domain name of the record set, e.g. `test.example.com`.
 */
@property(nonatomic, copy, nullable) NSString *domain;

/**
 *  Required. The period of time for which this RecordSet can be cached by
 *  resolvers.
 */
@property(nonatomic, strong, nullable) GTLRDuration *ttl;

/** Required. The identifier of a supported record type. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents a DNS zone resource.
 */
@interface GTLRServiceNetworking_DnsZone : GTLRObject

/** The DNS name suffix of this zone e.g. `example.com.`. */
@property(nonatomic, copy, nullable) NSString *dnsSuffix;

/**
 *  User assigned name for this resource. Must be unique within the project. The
 *  name must be 1-63 characters long, must begin with a letter, end with a
 *  letter or digit, and only contain lowercase letters, digits or dashes.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  `Documentation` provides the information for describing a service. Example:
 *  documentation: summary: > The Google Calendar API gives access to most
 *  calendar features. pages: - name: Overview content: (== include
 *  google/foo/overview.md ==) - name: Tutorial content: (== include
 *  google/foo/tutorial.md ==) subpages; - name: Java content: (== include
 *  google/foo/tutorial_java.md ==) rules: - selector:
 *  google.calendar.Calendar.Get description: > ... - selector:
 *  google.calendar.Calendar.Put description: > ... Documentation is provided in
 *  markdown syntax. In addition to standard markdown features, definition
 *  lists, tables and fenced code blocks are supported. Section headers can be
 *  provided and are interpreted relative to the section nesting of the context
 *  where a documentation fragment is embedded. Documentation from the IDL is
 *  merged with documentation defined via the config at normalization time,
 *  where documentation provided by config rules overrides IDL provided. A
 *  number of constructs specific to the API platform are supported in
 *  documentation text. In order to reference a proto element, the following
 *  notation can be used: [fully.qualified.proto.name][] To override the display
 *  text used for the link, this can be used: [display
 *  text][fully.qualified.proto.name] Text can be excluded from doc using the
 *  following notation: (-- internal comment --) A few directives are available
 *  in documentation. Note that directives must appear on a single line to be
 *  properly identified. The `include` directive includes a markdown file from
 *  an external source: (== include path/to/file ==) The `resource_for`
 *  directive marks a message to be the resource of a collection in REST view.
 *  If it is not specified, tools attempt to infer the resource from the
 *  operations in a collection: (== resource_for v1.shelves.books ==) The
 *  directive `suppress_warning` does not directly affect documentation and is
 *  documented together with service config validation.
 */
@interface GTLRServiceNetworking_Documentation : GTLRObject

/** The URL to the root of documentation. */
@property(nonatomic, copy, nullable) NSString *documentationRootUrl;

/**
 *  Declares a single overview page. For example: documentation: summary: ...
 *  overview: (== include overview.md ==) This is a shortcut for the following
 *  declaration (using pages style): documentation: summary: ... pages: - name:
 *  Overview content: (== include overview.md ==) Note: you cannot specify both
 *  `overview` field and `pages` field.
 */
@property(nonatomic, copy, nullable) NSString *overview;

/** The top level pages for the documentation set. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Page *> *pages;

/**
 *  A list of documentation rules that apply to individual API elements.
 *  **NOTE:** All service configuration rules follow "last one wins" order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_DocumentationRule *> *rules;

/**
 *  Specifies the service root url if the default one (the service name from the
 *  yaml file) is not suitable. This can be seen in any fully specified service
 *  urls as well as sections that show a base that other urls are relative to.
 */
@property(nonatomic, copy, nullable) NSString *serviceRootUrl;

/**
 *  A short description of what the service does. The summary must be plain
 *  text. It becomes the overview of the service displayed in Google Cloud
 *  Console. NOTE: This field is equivalent to the standard field `description`.
 */
@property(nonatomic, copy, nullable) NSString *summary;

@end


/**
 *  A documentation rule provides information about individual API elements.
 */
@interface GTLRServiceNetworking_DocumentationRule : GTLRObject

/**
 *  Deprecation description of the selected element(s). It can be provided if an
 *  element is marked as `deprecated`.
 */
@property(nonatomic, copy, nullable) NSString *deprecationDescription;

/**
 *  Description of the selected proto element (e.g. a message, a method, a
 *  'service' definition, or a field). Defaults to leading & trailing comments
 *  taken from the proto source definition of the proto element.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The selector is a comma-separated list of patterns for any element such as a
 *  method, a field, an enum value. Each pattern is a qualified name of the
 *  element which may end in "*", indicating a wildcard. Wildcards are only
 *  allowed at the end and for a whole component of the qualified name, i.e.
 *  "foo.*" is ok, but not "foo.b*" or "foo.*.bar". A wildcard will match one or
 *  more components. To specify a default for all applicable elements, the whole
 *  pattern "*" is used.
 */
@property(nonatomic, copy, nullable) NSString *selector;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRServiceNetworking_Empty : GTLRObject
@end


/**
 *  Request to enable VPC service controls.
 */
@interface GTLRServiceNetworking_EnableVpcServiceControlsRequest : GTLRObject

/**
 *  Required. The network that the consumer is using to connect with services.
 *  Must be in the form of projects/{project}/global/networks/{network}
 *  {project} is a project number, as in '12345' {network} is network name.
 */
@property(nonatomic, copy, nullable) NSString *consumerNetwork;

@end


/**
 *  `Endpoint` describes a network address of a service that serves a set of
 *  APIs. It is commonly known as a service endpoint. A service may expose any
 *  number of service endpoints, and all service endpoints share the same
 *  service definition, such as quota limits and monitoring metrics. Example:
 *  type: google.api.Service name: library-example.googleapis.com endpoints: #
 *  Declares network address `https://library-example.googleapis.com` # for
 *  service `library-example.googleapis.com`. The `https` scheme # is implicit
 *  for all service endpoints. Other schemes may be # supported in the future. -
 *  name: library-example.googleapis.com allow_cors: false - name:
 *  content-staging-library-example.googleapis.com # Allows HTTP OPTIONS calls
 *  to be passed to the API frontend, for it # to decide whether the subsequent
 *  cross-origin request is allowed # to proceed. allow_cors: true
 */
@interface GTLRServiceNetworking_Endpoint : GTLRObject

/**
 *  Allowing
 *  [CORS](https://en.wikipedia.org/wiki/Cross-origin_resource_sharing), aka
 *  cross-domain traffic, would allow the backends served from this endpoint to
 *  receive and respond to HTTP OPTIONS requests. The response will be used by
 *  the browser to determine whether the subsequent cross-origin request is
 *  allowed to proceed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowCors;

/** The canonical name of this endpoint. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The specification of an Internet routable address of API frontend that will
 *  handle requests to this [API
 *  Endpoint](https://cloud.google.com/apis/design/glossary). It should be
 *  either a valid IPv4 address or a fully-qualified domain name. For example,
 *  "8.8.8.8" or "myservice.appspot.com".
 */
@property(nonatomic, copy, nullable) NSString *target;

@end


/**
 *  Enum type definition.
 */
@interface GTLRServiceNetworking_Enum : GTLRObject

/** Enum value definitions. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_EnumValue *> *enumvalue;

/** Enum type name. */
@property(nonatomic, copy, nullable) NSString *name;

/** Protocol buffer options. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Option *> *options;

/** The source context. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_SourceContext *sourceContext;

/**
 *  The source syntax.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceNetworking_Enum_Syntax_SyntaxProto2 Syntax `proto2`.
 *        (Value: "SYNTAX_PROTO2")
 *    @arg @c kGTLRServiceNetworking_Enum_Syntax_SyntaxProto3 Syntax `proto3`.
 *        (Value: "SYNTAX_PROTO3")
 */
@property(nonatomic, copy, nullable) NSString *syntax;

@end


/**
 *  Enum value definition.
 */
@interface GTLRServiceNetworking_EnumValue : GTLRObject

/** Enum value name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Enum value number.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *number;

/** Protocol buffer options. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Option *> *options;

@end


/**
 *  A single field of a message type.
 */
@interface GTLRServiceNetworking_Field : GTLRObject

/**
 *  The field cardinality.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceNetworking_Field_Cardinality_CardinalityOptional For
 *        optional fields. (Value: "CARDINALITY_OPTIONAL")
 *    @arg @c kGTLRServiceNetworking_Field_Cardinality_CardinalityRepeated For
 *        repeated fields. (Value: "CARDINALITY_REPEATED")
 *    @arg @c kGTLRServiceNetworking_Field_Cardinality_CardinalityRequired For
 *        required fields. Proto2 syntax only. (Value: "CARDINALITY_REQUIRED")
 *    @arg @c kGTLRServiceNetworking_Field_Cardinality_CardinalityUnknown For
 *        fields with unknown cardinality. (Value: "CARDINALITY_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *cardinality;

/**
 *  The string value of the default value of this field. Proto2 syntax only.
 */
@property(nonatomic, copy, nullable) NSString *defaultValue;

/** The field JSON name. */
@property(nonatomic, copy, nullable) NSString *jsonName;

/**
 *  The field type.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeBool Field type bool.
 *        (Value: "TYPE_BOOL")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeBytes Field type bytes.
 *        (Value: "TYPE_BYTES")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeDouble Field type double.
 *        (Value: "TYPE_DOUBLE")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeEnum Field type enum.
 *        (Value: "TYPE_ENUM")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeFixed32 Field type fixed32.
 *        (Value: "TYPE_FIXED32")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeFixed64 Field type fixed64.
 *        (Value: "TYPE_FIXED64")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeFloat Field type float.
 *        (Value: "TYPE_FLOAT")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeGroup Field type group.
 *        Proto2 syntax only, and deprecated. (Value: "TYPE_GROUP")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeInt32 Field type int32.
 *        (Value: "TYPE_INT32")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeInt64 Field type int64.
 *        (Value: "TYPE_INT64")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeMessage Field type message.
 *        (Value: "TYPE_MESSAGE")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeSfixed32 Field type
 *        sfixed32. (Value: "TYPE_SFIXED32")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeSfixed64 Field type
 *        sfixed64. (Value: "TYPE_SFIXED64")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeSint32 Field type sint32.
 *        (Value: "TYPE_SINT32")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeSint64 Field type sint64.
 *        (Value: "TYPE_SINT64")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeString Field type string.
 *        (Value: "TYPE_STRING")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeUint32 Field type uint32.
 *        (Value: "TYPE_UINT32")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeUint64 Field type uint64.
 *        (Value: "TYPE_UINT64")
 *    @arg @c kGTLRServiceNetworking_Field_Kind_TypeUnknown Field type unknown.
 *        (Value: "TYPE_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The field name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The field number.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *number;

/**
 *  The index of the field type in `Type.oneofs`, for message or enumeration
 *  types. The first type has index 1; zero means the type is not in the list.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *oneofIndex;

/** The protocol buffer options. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Option *> *options;

/**
 *  Whether to use alternative packed wire representation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *packed;

/**
 *  The field type URL, without the scheme, for message or enumeration types.
 *  Example: `"type.googleapis.com/google.protobuf.Timestamp"`.
 */
@property(nonatomic, copy, nullable) NSString *typeUrl;

@end


/**
 *  Represents a private connection resource. A private connection is
 *  implemented as a VPC Network Peering connection between a service producer's
 *  VPC network and a service consumer's VPC network.
 */
@interface GTLRServiceNetworking_GoogleCloudServicenetworkingV1betaConnection : GTLRObject

/**
 *  The name of service consumer's VPC network that's connected with service
 *  producer network, in the following format:
 *  `projects/{project}/global/networks/{network}`. `{project}` is a project
 *  number, such as in `12345` that includes the VPC service consumer's VPC
 *  network. `{network}` is the name of the service consumer's VPC network.
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  Output only. The name of the VPC Network Peering connection that was created
 *  by the service producer.
 */
@property(nonatomic, copy, nullable) NSString *peering;

/**
 *  The name of one or more allocated IP address ranges for this service
 *  producer of type `PEERING`. Note that invoking this method with a different
 *  range when connection is already established will not modify already
 *  provisioned service producer subnetworks.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *reservedPeeringRanges;

/**
 *  Output only. The name of the peering service that's associated with this
 *  connection, in the following format: `services/{service name}`.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Represents a subnet that was created or discovered by a private access
 *  management service.
 */
@interface GTLRServiceNetworking_GoogleCloudServicenetworkingV1betaSubnetwork : GTLRObject

/** Subnetwork CIDR range in `10.x.x.x/y` format. */
@property(nonatomic, copy, nullable) NSString *ipCidrRange;

/** Subnetwork name. See https://cloud.google.com/compute/docs/vpc/ */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  In the Shared VPC host project, the VPC network that's peered with the
 *  consumer network. For example:
 *  `projects/1234321/global/networks/host-network`
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  This is a discovered subnet that is not within the current consumer
 *  allocated ranges.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *outsideAllocation;

@end


/**
 *  Allocated IP address ranges for this private service access connection.
 */
@interface GTLRServiceNetworking_GoogleCloudServicenetworkingV1ConsumerConfigReservedRange : GTLRObject

/**
 *  The starting address of the reserved range. The address must be a valid IPv4
 *  address in the x.x.x.x format. This value combined with the IP prefix length
 *  is the CIDR range for the reserved range.
 */
@property(nonatomic, copy, nullable) NSString *address;

/**
 *  The prefix length of the reserved range.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ipPrefixLength;

/** The name of the reserved range. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Defines the HTTP configuration for an API service. It contains a list of
 *  HttpRule, each specifying the mapping of an RPC method to one or more HTTP
 *  REST API methods.
 */
@interface GTLRServiceNetworking_Http : GTLRObject

/**
 *  When set to true, URL path parameters will be fully URI-decoded except in
 *  cases of single segment matches in reserved expansion, where "%2F" will be
 *  left encoded. The default behavior is to not decode RFC 6570 reserved
 *  characters in multi segment matches.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fullyDecodeReservedExpansion;

/**
 *  A list of HTTP configuration rules that apply to individual API methods.
 *  **NOTE:** All service configuration rules follow "last one wins" order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_HttpRule *> *rules;

@end


/**
 *  # gRPC Transcoding gRPC Transcoding is a feature for mapping between a gRPC
 *  method and one or more HTTP REST endpoints. It allows developers to build a
 *  single API service that supports both gRPC APIs and REST APIs. Many systems,
 *  including [Google APIs](https://github.com/googleapis/googleapis), [Cloud
 *  Endpoints](https://cloud.google.com/endpoints), [gRPC
 *  Gateway](https://github.com/grpc-ecosystem/grpc-gateway), and
 *  [Envoy](https://github.com/envoyproxy/envoy) proxy support this feature and
 *  use it for large scale production services. `HttpRule` defines the schema of
 *  the gRPC/REST mapping. The mapping specifies how different portions of the
 *  gRPC request message are mapped to the URL path, URL query parameters, and
 *  HTTP request body. It also controls how the gRPC response message is mapped
 *  to the HTTP response body. `HttpRule` is typically specified as an
 *  `google.api.http` annotation on the gRPC method. Each mapping specifies a
 *  URL path template and an HTTP method. The path template may refer to one or
 *  more fields in the gRPC request message, as long as each field is a
 *  non-repeated field with a primitive (non-message) type. The path template
 *  controls how fields of the request message are mapped to the URL path.
 *  Example: service Messaging { rpc GetMessage(GetMessageRequest) returns
 *  (Message) { option (google.api.http) = { get: "/v1/{name=messages/ *}" }; }
 *  } message GetMessageRequest { string name = 1; // Mapped to URL path. }
 *  message Message { string text = 1; // The resource content. } This enables
 *  an HTTP REST to gRPC mapping as below: HTTP | gRPC -----|----- `GET
 *  /v1/messages/123456` | `GetMessage(name: "messages/123456")` Any fields in
 *  the request message which are not bound by the path template automatically
 *  become HTTP query parameters if there is no HTTP request body. For example:
 *  service Messaging { rpc GetMessage(GetMessageRequest) returns (Message) {
 *  option (google.api.http) = { get:"/v1/messages/{message_id}" }; } } message
 *  GetMessageRequest { message SubMessage { string subfield = 1; } string
 *  message_id = 1; // Mapped to URL path. int64 revision = 2; // Mapped to URL
 *  query parameter `revision`. SubMessage sub = 3; // Mapped to URL query
 *  parameter `sub.subfield`. } This enables a HTTP JSON to RPC mapping as
 *  below: HTTP | gRPC -----|----- `GET
 *  /v1/messages/123456?revision=2&sub.subfield=foo` | `GetMessage(message_id:
 *  "123456" revision: 2 sub: SubMessage(subfield: "foo"))` Note that fields
 *  which are mapped to URL query parameters must have a primitive type or a
 *  repeated primitive type or a non-repeated message type. In the case of a
 *  repeated type, the parameter can be repeated in the URL as
 *  `...?param=A&param=B`. In the case of a message type, each field of the
 *  message is mapped to a separate parameter, such as
 *  `...?foo.a=A&foo.b=B&foo.c=C`. For HTTP methods that allow a request body,
 *  the `body` field specifies the mapping. Consider a REST update method on the
 *  message resource collection: service Messaging { rpc
 *  UpdateMessage(UpdateMessageRequest) returns (Message) { option
 *  (google.api.http) = { patch: "/v1/messages/{message_id}" body: "message" };
 *  } } message UpdateMessageRequest { string message_id = 1; // mapped to the
 *  URL Message message = 2; // mapped to the body } The following HTTP JSON to
 *  RPC mapping is enabled, where the representation of the JSON in the request
 *  body is determined by protos JSON encoding: HTTP | gRPC -----|----- `PATCH
 *  /v1/messages/123456 { "text": "Hi!" }` | `UpdateMessage(message_id: "123456"
 *  message { text: "Hi!" })` The special name `*` can be used in the body
 *  mapping to define that every field not bound by the path template should be
 *  mapped to the request body. This enables the following alternative
 *  definition of the update method: service Messaging { rpc
 *  UpdateMessage(Message) returns (Message) { option (google.api.http) = {
 *  patch: "/v1/messages/{message_id}" body: "*" }; } } message Message { string
 *  message_id = 1; string text = 2; } The following HTTP JSON to RPC mapping is
 *  enabled: HTTP | gRPC -----|----- `PATCH /v1/messages/123456 { "text": "Hi!"
 *  }` | `UpdateMessage(message_id: "123456" text: "Hi!")` Note that when using
 *  `*` in the body mapping, it is not possible to have HTTP parameters, as all
 *  fields not bound by the path end in the body. This makes this option more
 *  rarely used in practice when defining REST APIs. The common usage of `*` is
 *  in custom methods which don't use the URL at all for transferring data. It
 *  is possible to define multiple HTTP methods for one RPC by using the
 *  `additional_bindings` option. Example: service Messaging { rpc
 *  GetMessage(GetMessageRequest) returns (Message) { option (google.api.http) =
 *  { get: "/v1/messages/{message_id}" additional_bindings { get:
 *  "/v1/users/{user_id}/messages/{message_id}" } }; } } message
 *  GetMessageRequest { string message_id = 1; string user_id = 2; } This
 *  enables the following two alternative HTTP JSON to RPC mappings: HTTP | gRPC
 *  -----|----- `GET /v1/messages/123456` | `GetMessage(message_id: "123456")`
 *  `GET /v1/users/me/messages/123456` | `GetMessage(user_id: "me" message_id:
 *  "123456")` ## Rules for HTTP mapping 1. Leaf request fields (recursive
 *  expansion nested messages in the request message) are classified into three
 *  categories: - Fields referred by the path template. They are passed via the
 *  URL path. - Fields referred by the HttpRule.body. They are passed via the
 *  HTTP request body. - All other fields are passed via the URL query
 *  parameters, and the parameter name is the field path in the request message.
 *  A repeated field can be represented as multiple query parameters under the
 *  same name. 2. If HttpRule.body is "*", there is no URL query parameter, all
 *  fields are passed via URL path and HTTP request body. 3. If HttpRule.body is
 *  omitted, there is no HTTP request body, all fields are passed via URL path
 *  and URL query parameters. ### Path template syntax Template = "/" Segments [
 *  Verb ] ; Segments = Segment { "/" Segment } ; Segment = "*" | "**" | LITERAL
 *  | Variable ; Variable = "{" FieldPath [ "=" Segments ] "}" ; FieldPath =
 *  IDENT { "." IDENT } ; Verb = ":" LITERAL ; The syntax `*` matches a single
 *  URL path segment. The syntax `**` matches zero or more URL path segments,
 *  which must be the last part of the URL path except the `Verb`. The syntax
 *  `Variable` matches part of the URL path as specified by its template. A
 *  variable template must not contain other variables. If a variable matches a
 *  single path segment, its template may be omitted, e.g. `{var}` is equivalent
 *  to `{var=*}`. The syntax `LITERAL` matches literal text in the URL path. If
 *  the `LITERAL` contains any reserved character, such characters should be
 *  percent-encoded before the matching. If a variable contains exactly one path
 *  segment, such as `"{var}"` or `"{var=*}"`, when such a variable is expanded
 *  into a URL path on the client side, all characters except `[-_.~0-9a-zA-Z]`
 *  are percent-encoded. The server side does the reverse decoding. Such
 *  variables show up in the [Discovery
 *  Document](https://developers.google.com/discovery/v1/reference/apis) as
 *  `{var}`. If a variable contains multiple path segments, such as `"{var=foo/
 *  *}"` or `"{var=**}"`, when such a variable is expanded into a URL path on
 *  the client side, all characters except `[-_.~/0-9a-zA-Z]` are
 *  percent-encoded. The server side does the reverse decoding, except "%2F" and
 *  "%2f" are left unchanged. Such variables show up in the [Discovery
 *  Document](https://developers.google.com/discovery/v1/reference/apis) as
 *  `{+var}`. ## Using gRPC API Service Configuration gRPC API Service
 *  Configuration (service config) is a configuration language for configuring a
 *  gRPC service to become a user-facing product. The service config is simply
 *  the YAML representation of the `google.api.Service` proto message. As an
 *  alternative to annotating your proto file, you can configure gRPC
 *  transcoding in your service config YAML files. You do this by specifying a
 *  `HttpRule` that maps the gRPC method to a REST endpoint, achieving the same
 *  effect as the proto annotation. This can be particularly useful if you have
 *  a proto that is reused in multiple services. Note that any transcoding
 *  specified in the service config will override any matching transcoding
 *  configuration in the proto. Example: http: rules: # Selects a gRPC method
 *  and applies HttpRule to it. - selector: example.v1.Messaging.GetMessage get:
 *  /v1/messages/{message_id}/{sub.subfield} ## Special notes When gRPC
 *  Transcoding is used to map a gRPC to JSON REST endpoints, the proto to JSON
 *  conversion must follow the [proto3
 *  specification](https://developers.google.com/protocol-buffers/docs/proto3#json).
 *  While the single segment variable follows the semantics of [RFC
 *  6570](https://tools.ietf.org/html/rfc6570) Section 3.2.2 Simple String
 *  Expansion, the multi segment variable **does not** follow RFC 6570 Section
 *  3.2.3 Reserved Expansion. The reason is that the Reserved Expansion does not
 *  expand special characters like `?` and `#`, which would lead to invalid
 *  URLs. As the result, gRPC Transcoding uses a custom encoding for multi
 *  segment variables. The path variables **must not** refer to any repeated or
 *  mapped field, because client libraries are not capable of handling such
 *  variable expansion. The path variables **must not** capture the leading "/"
 *  character. The reason is that the most common use case "{var}" does not
 *  capture the leading "/" character. For consistency, all path variables must
 *  share the same behavior. Repeated message fields must not be mapped to URL
 *  query parameters, because no client library can support such complicated
 *  mapping. If an API needs to use a JSON array for request or response body,
 *  it can map the request or response body to a repeated field. However, some
 *  gRPC Transcoding implementations may not support this feature.
 */
@interface GTLRServiceNetworking_HttpRule : GTLRObject

/**
 *  Additional HTTP bindings for the selector. Nested bindings must not contain
 *  an `additional_bindings` field themselves (that is, the nesting may only be
 *  one level deep).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_HttpRule *> *additionalBindings;

/**
 *  The name of the request field whose value is mapped to the HTTP request
 *  body, or `*` for mapping all request fields not captured by the path pattern
 *  to the HTTP body, or omitted for not having any HTTP request body. NOTE: the
 *  referred field must be present at the top-level of the request message type.
 */
@property(nonatomic, copy, nullable) NSString *body;

/**
 *  The custom pattern is used for specifying an HTTP method that is not
 *  included in the `pattern` field, such as HEAD, or "*" to leave the HTTP
 *  method unspecified for this rule. The wild-card rule is useful for services
 *  that provide content to Web (HTML) clients.
 */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_CustomHttpPattern *custom;

/**
 *  Maps to HTTP DELETE. Used for deleting a resource.
 *
 *  Remapped to 'deleteProperty' to avoid language reserved word 'delete'.
 */
@property(nonatomic, copy, nullable) NSString *deleteProperty;

/**
 *  Maps to HTTP GET. Used for listing and getting information about resources.
 */
@property(nonatomic, copy, nullable) NSString *get;

/** Maps to HTTP PATCH. Used for updating a resource. */
@property(nonatomic, copy, nullable) NSString *patch;

/**
 *  Maps to HTTP POST. Used for creating a resource or performing an action.
 */
@property(nonatomic, copy, nullable) NSString *post;

/** Maps to HTTP PUT. Used for replacing a resource. */
@property(nonatomic, copy, nullable) NSString *put;

/**
 *  Optional. The name of the response field whose value is mapped to the HTTP
 *  response body. When omitted, the entire response message will be used as the
 *  HTTP response body. NOTE: The referred field must be present at the
 *  top-level of the response message type.
 */
@property(nonatomic, copy, nullable) NSString *responseBody;

/**
 *  Selects a method to which this rule applies. Refer to selector for syntax
 *  details.
 */
@property(nonatomic, copy, nullable) NSString *selector;

@end


/**
 *  Specifies a location to extract JWT from an API request.
 */
@interface GTLRServiceNetworking_JwtLocation : GTLRObject

/** Specifies cookie name to extract JWT token. */
@property(nonatomic, copy, nullable) NSString *cookie;

/** Specifies HTTP header name to extract JWT token. */
@property(nonatomic, copy, nullable) NSString *header;

/** Specifies URL query parameter name to extract JWT token. */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  The value prefix. The value format is "value_prefix{token}" Only applies to
 *  "in" header type. Must be empty for "in" query type. If not empty, the
 *  header value has to match (case sensitive) this prefix. If not matched, JWT
 *  will not be extracted. If matched, JWT will be extracted after the prefix is
 *  removed. For example, for "Authorization: Bearer {JWT}",
 *  value_prefix="Bearer " with a space at the end.
 */
@property(nonatomic, copy, nullable) NSString *valuePrefix;

@end


/**
 *  A description of a label.
 */
@interface GTLRServiceNetworking_LabelDescriptor : GTLRObject

/**
 *  A human-readable description for the label.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The label key. */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  The type of data that can be assigned to the label.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceNetworking_LabelDescriptor_ValueType_Bool Boolean;
 *        true or false. (Value: "BOOL")
 *    @arg @c kGTLRServiceNetworking_LabelDescriptor_ValueType_Int64 A 64-bit
 *        signed integer. (Value: "INT64")
 *    @arg @c kGTLRServiceNetworking_LabelDescriptor_ValueType_String A
 *        variable-length string. This is the default. (Value: "STRING")
 */
@property(nonatomic, copy, nullable) NSString *valueType;

@end


/**
 *  ListConnectionsResponse is the response to list peering states for the given
 *  service and consumer project.
 */
@interface GTLRServiceNetworking_ListConnectionsResponse : GTLRObject

/** The list of Connections. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Connection *> *connections;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRServiceNetworking_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Operation *> *operations;

@end


/**
 *  Response to list peered DNS domains for a given connection.
 */
@interface GTLRServiceNetworking_ListPeeredDnsDomainsResponse : GTLRObject

/** The list of peered DNS domains. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_PeeredDnsDomain *> *peeredDnsDomains;

@end


/**
 *  A description of a log type. Example in YAML format: - name:
 *  library.googleapis.com/activity_history description: The history of
 *  borrowing and returning library items. display_name: Activity labels: - key:
 *  /customer_id description: Identifier of a library customer
 */
@interface GTLRServiceNetworking_LogDescriptor : GTLRObject

/**
 *  A human-readable description of this log. This information appears in the
 *  documentation and can contain details.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The human-readable name for this log. This information appears on the user
 *  interface and should be concise.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The set of labels that are available to describe a specific log entry.
 *  Runtime requests that contain labels not specified here are considered
 *  invalid.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_LabelDescriptor *> *labels;

/**
 *  The name of the log. It must be less than 512 characters long and can
 *  include the following characters: upper- and lower-case alphanumeric
 *  characters [A-Za-z0-9], and punctuation characters including slash,
 *  underscore, hyphen, period [/_-.].
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Logging configuration of the service. The following example shows how to
 *  configure logs to be sent to the producer and consumer projects. In the
 *  example, the `activity_history` log is sent to both the producer and
 *  consumer projects, whereas the `purchase_history` log is only sent to the
 *  producer project. monitored_resources: - type: library.googleapis.com/branch
 *  labels: - key: /city description: The city where the library branch is
 *  located in. - key: /name description: The name of the branch. logs: - name:
 *  activity_history labels: - key: /customer_id - name: purchase_history
 *  logging: producer_destinations: - monitored_resource:
 *  library.googleapis.com/branch logs: - activity_history - purchase_history
 *  consumer_destinations: - monitored_resource: library.googleapis.com/branch
 *  logs: - activity_history
 */
@interface GTLRServiceNetworking_Logging : GTLRObject

/**
 *  Logging configurations for sending logs to the consumer project. There can
 *  be multiple consumer destinations, each one must have a different monitored
 *  resource type. A log can be used in at most one consumer destination.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_LoggingDestination *> *consumerDestinations;

/**
 *  Logging configurations for sending logs to the producer project. There can
 *  be multiple producer destinations, each one must have a different monitored
 *  resource type. A log can be used in at most one producer destination.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_LoggingDestination *> *producerDestinations;

@end


/**
 *  Configuration of a specific logging destination (the producer project or the
 *  consumer project).
 */
@interface GTLRServiceNetworking_LoggingDestination : GTLRObject

/**
 *  Names of the logs to be sent to this destination. Each name must be defined
 *  in the Service.logs section. If the log name is not a domain scoped name, it
 *  will be automatically prefixed with the service name followed by "/".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *logs;

/**
 *  The monitored resource type. The type must be defined in the
 *  Service.monitored_resources section.
 */
@property(nonatomic, copy, nullable) NSString *monitoredResource;

@end


/**
 *  Method represents a method of an API interface.
 */
@interface GTLRServiceNetworking_Method : GTLRObject

/** The simple name of this method. */
@property(nonatomic, copy, nullable) NSString *name;

/** Any metadata attached to the method. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Option *> *options;

/**
 *  If true, the request is streamed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestStreaming;

/** A URL of the input message type. */
@property(nonatomic, copy, nullable) NSString *requestTypeUrl;

/**
 *  If true, the response is streamed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *responseStreaming;

/** The URL of the output message type. */
@property(nonatomic, copy, nullable) NSString *responseTypeUrl;

/**
 *  The source syntax of this method.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceNetworking_Method_Syntax_SyntaxProto2 Syntax `proto2`.
 *        (Value: "SYNTAX_PROTO2")
 *    @arg @c kGTLRServiceNetworking_Method_Syntax_SyntaxProto3 Syntax `proto3`.
 *        (Value: "SYNTAX_PROTO3")
 */
@property(nonatomic, copy, nullable) NSString *syntax;

@end


/**
 *  Defines a metric type and its schema. Once a metric descriptor is created,
 *  deleting or altering it stops data collection and makes the metric type's
 *  existing data unusable.
 */
@interface GTLRServiceNetworking_MetricDescriptor : GTLRObject

/**
 *  A detailed description of the metric, which can be used in documentation.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  A concise name for the metric, which can be displayed in user interfaces.
 *  Use sentence case without an ending period, for example "Request count".
 *  This field is optional but it is recommended to be set for any metrics
 *  associated with user-visible concepts, such as Quota.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The set of labels that can be used to describe a specific instance of this
 *  metric type. For example, the
 *  `appengine.googleapis.com/http/server/response_latencies` metric type has a
 *  label for the HTTP response code, `response_code`, so you can look at
 *  latencies for successful responses or just for responses that failed.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_LabelDescriptor *> *labels;

/**
 *  Optional. The launch stage of the metric definition.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Alpha Alpha is
 *        a limited availability test for releases before they are cleared for
 *        widespread use. By Alpha, all significant design issues are resolved
 *        and we are in the process of verifying functionality. Alpha customers
 *        need to apply for access, agree to applicable terms, and have their
 *        projects allowlisted. Alpha releases don't have to be feature
 *        complete, no SLAs are provided, and there are no technical support
 *        obligations, but they will be far enough along that customers can
 *        actually use them in test environments or for limited-use tests --
 *        just like they would in normal production cases. (Value: "ALPHA")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Beta Beta is
 *        the point at which we are ready to open a release for any customer to
 *        use. There are no SLA or technical support obligations in a Beta
 *        release. Products will be complete from a feature perspective, but may
 *        have some open outstanding issues. Beta releases are suitable for
 *        limited production use cases. (Value: "BETA")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Deprecated
 *        Deprecated features are scheduled to be shut down and removed. For
 *        more information, see the "Deprecation Policy" section of our [Terms
 *        of Service](https://cloud.google.com/terms/) and the [Google Cloud
 *        Platform Subject to the Deprecation
 *        Policy](https://cloud.google.com/terms/deprecation) documentation.
 *        (Value: "DEPRECATED")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_LaunchStage_EarlyAccess
 *        Early Access features are limited to a closed group of testers. To use
 *        these features, you must sign up in advance and sign a Trusted Tester
 *        agreement (which includes confidentiality provisions). These features
 *        may be unstable, changed in backward-incompatible ways, and are not
 *        guaranteed to be released. (Value: "EARLY_ACCESS")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Ga GA features
 *        are open to all developers and are considered stable and fully
 *        qualified for production use. (Value: "GA")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_LaunchStage_LaunchStageUnspecified
 *        Do not use this default value. (Value: "LAUNCH_STAGE_UNSPECIFIED")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Prelaunch
 *        Prelaunch features are hidden from users and are only visible
 *        internally. (Value: "PRELAUNCH")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_LaunchStage_Unimplemented
 *        The feature is not yet implemented. Users can not use it. (Value:
 *        "UNIMPLEMENTED")
 */
@property(nonatomic, copy, nullable) NSString *launchStage;

/** Optional. Metadata which can be used to guide usage of the metric. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_MetricDescriptorMetadata *metadata;

/**
 *  Whether the metric records instantaneous values, changes to a value, etc.
 *  Some combinations of `metric_kind` and `value_type` might not be supported.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_MetricKind_Cumulative A
 *        value accumulated over a time interval. Cumulative measurements in a
 *        time series should have the same start time and increasing end times,
 *        until an event resets the cumulative value to zero and sets a new
 *        start time for the following points. (Value: "CUMULATIVE")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_MetricKind_Delta The
 *        change in a value during a time interval. (Value: "DELTA")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_MetricKind_Gauge An
 *        instantaneous measurement of a value. (Value: "GAUGE")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_MetricKind_MetricKindUnspecified
 *        Do not use this default value. (Value: "METRIC_KIND_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *metricKind;

/**
 *  Read-only. If present, then a time series, which is identified partially by
 *  a metric type and a MonitoredResourceDescriptor, that is associated with
 *  this metric type can only be associated with one of the monitored resource
 *  types listed here.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *monitoredResourceTypes;

/** The resource name of the metric descriptor. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The metric type, including its DNS name prefix. The type is not URL-encoded.
 *  All user-defined metric types have the DNS name `custom.googleapis.com` or
 *  `external.googleapis.com`. Metric types should use a natural hierarchical
 *  grouping. For example: "custom.googleapis.com/invoice/paid/amount"
 *  "external.googleapis.com/prometheus/up"
 *  "appengine.googleapis.com/http/server/response_latencies"
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The units in which the metric value is reported. It is only applicable if
 *  the `value_type` is `INT64`, `DOUBLE`, or `DISTRIBUTION`. The `unit` defines
 *  the representation of the stored metric values. Different systems might
 *  scale the values to be more easily displayed (so a value of `0.02kBy`
 *  _might_ be displayed as `20By`, and a value of `3523kBy` _might_ be
 *  displayed as `3.5MBy`). However, if the `unit` is `kBy`, then the value of
 *  the metric is always in thousands of bytes, no matter how it might be
 *  displayed. If you want a custom metric to record the exact number of
 *  CPU-seconds used by a job, you can create an `INT64 CUMULATIVE` metric whose
 *  `unit` is `s{CPU}` (or equivalently `1s{CPU}` or just `s`). If the job uses
 *  12,005 CPU-seconds, then the value is written as `12005`. Alternatively, if
 *  you want a custom metric to record data in a more granular way, you can
 *  create a `DOUBLE CUMULATIVE` metric whose `unit` is `ks{CPU}`, and then
 *  write the value `12.005` (which is `12005/1000`), or use `Kis{CPU}` and
 *  write `11.723` (which is `12005/1024`). The supported units are a subset of
 *  [The Unified Code for Units of
 *  Measure](https://unitsofmeasure.org/ucum.html) standard: **Basic units
 *  (UNIT)** * `bit` bit * `By` byte * `s` second * `min` minute * `h` hour *
 *  `d` day * `1` dimensionless **Prefixes (PREFIX)** * `k` kilo (10^3) * `M`
 *  mega (10^6) * `G` giga (10^9) * `T` tera (10^12) * `P` peta (10^15) * `E`
 *  exa (10^18) * `Z` zetta (10^21) * `Y` yotta (10^24) * `m` milli (10^-3) *
 *  `u` micro (10^-6) * `n` nano (10^-9) * `p` pico (10^-12) * `f` femto
 *  (10^-15) * `a` atto (10^-18) * `z` zepto (10^-21) * `y` yocto (10^-24) *
 *  `Ki` kibi (2^10) * `Mi` mebi (2^20) * `Gi` gibi (2^30) * `Ti` tebi (2^40) *
 *  `Pi` pebi (2^50) **Grammar** The grammar also includes these connectors: *
 *  `/` division or ratio (as an infix operator). For examples, `kBy/{email}` or
 *  `MiBy/10ms` (although you should almost never have `/s` in a metric `unit`;
 *  rates should always be computed at query time from the underlying cumulative
 *  or delta value). * `.` multiplication or composition (as an infix operator).
 *  For examples, `GBy.d` or `k{watt}.h`. The grammar for a unit is as follows:
 *  Expression = Component { "." Component } { "/" Component } ; Component = ( [
 *  PREFIX ] UNIT | "%" ) [ Annotation ] | Annotation | "1" ; Annotation = "{"
 *  NAME "}" ; Notes: * `Annotation` is just a comment if it follows a `UNIT`.
 *  If the annotation is used alone, then the unit is equivalent to `1`. For
 *  examples, `{request}/s == 1/s`, `By{transmitted}/s == By/s`. * `NAME` is a
 *  sequence of non-blank printable ASCII characters not containing `{` or `}`.
 *  * `1` represents a unitary [dimensionless
 *  unit](https://en.wikipedia.org/wiki/Dimensionless_quantity) of 1, such as in
 *  `1/s`. It is typically used when none of the basic units are appropriate.
 *  For example, "new users per day" can be represented as `1/d` or
 *  `{new-users}/d` (and a metric value `5` would mean "5 new users).
 *  Alternatively, "thousands of page views per day" would be represented as
 *  `1000/d` or `k1/d` or `k{page_views}/d` (and a metric value of `5.3` would
 *  mean "5300 page views per day"). * `%` represents dimensionless value of
 *  1/100, and annotates values giving a percentage (so the metric values are
 *  typically in the range of 0..100, and a metric value `3` means "3 percent").
 *  * `10^2.%` indicates a metric contains a ratio, typically in the range 0..1,
 *  that will be multiplied by 100 and displayed as a percentage (so a metric
 *  value `0.03` means "3 percent").
 */
@property(nonatomic, copy, nullable) NSString *unit;

/**
 *  Whether the measurement is an integer, a floating-point number, etc. Some
 *  combinations of `metric_kind` and `value_type` might not be supported.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_ValueType_Bool The value
 *        is a boolean. This value type can be used only if the metric kind is
 *        `GAUGE`. (Value: "BOOL")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_ValueType_Distribution The
 *        value is a `Distribution`. (Value: "DISTRIBUTION")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_ValueType_Double The value
 *        is a double precision floating point number. (Value: "DOUBLE")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_ValueType_Int64 The value
 *        is a signed 64-bit integer. (Value: "INT64")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_ValueType_Money The value
 *        is money. (Value: "MONEY")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_ValueType_String The value
 *        is a text string. This value type can be used only if the metric kind
 *        is `GAUGE`. (Value: "STRING")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptor_ValueType_ValueTypeUnspecified
 *        Do not use this default value. (Value: "VALUE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *valueType;

@end


/**
 *  Additional annotations that can be used to guide the usage of a metric.
 */
@interface GTLRServiceNetworking_MetricDescriptorMetadata : GTLRObject

/**
 *  The delay of data points caused by ingestion. Data points older than this
 *  age are guaranteed to be ingested and available to be read, excluding data
 *  loss due to errors.
 */
@property(nonatomic, strong, nullable) GTLRDuration *ingestDelay;

/**
 *  Deprecated. Must use the MetricDescriptor.launch_stage instead.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Alpha
 *        Alpha is a limited availability test for releases before they are
 *        cleared for widespread use. By Alpha, all significant design issues
 *        are resolved and we are in the process of verifying functionality.
 *        Alpha customers need to apply for access, agree to applicable terms,
 *        and have their projects allowlisted. Alpha releases don't have to be
 *        feature complete, no SLAs are provided, and there are no technical
 *        support obligations, but they will be far enough along that customers
 *        can actually use them in test environments or for limited-use tests --
 *        just like they would in normal production cases. (Value: "ALPHA")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Beta
 *        Beta is the point at which we are ready to open a release for any
 *        customer to use. There are no SLA or technical support obligations in
 *        a Beta release. Products will be complete from a feature perspective,
 *        but may have some open outstanding issues. Beta releases are suitable
 *        for limited production use cases. (Value: "BETA")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Deprecated
 *        Deprecated features are scheduled to be shut down and removed. For
 *        more information, see the "Deprecation Policy" section of our [Terms
 *        of Service](https://cloud.google.com/terms/) and the [Google Cloud
 *        Platform Subject to the Deprecation
 *        Policy](https://cloud.google.com/terms/deprecation) documentation.
 *        (Value: "DEPRECATED")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_EarlyAccess
 *        Early Access features are limited to a closed group of testers. To use
 *        these features, you must sign up in advance and sign a Trusted Tester
 *        agreement (which includes confidentiality provisions). These features
 *        may be unstable, changed in backward-incompatible ways, and are not
 *        guaranteed to be released. (Value: "EARLY_ACCESS")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Ga GA
 *        features are open to all developers and are considered stable and
 *        fully qualified for production use. (Value: "GA")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_LaunchStageUnspecified
 *        Do not use this default value. (Value: "LAUNCH_STAGE_UNSPECIFIED")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Prelaunch
 *        Prelaunch features are hidden from users and are only visible
 *        internally. (Value: "PRELAUNCH")
 *    @arg @c kGTLRServiceNetworking_MetricDescriptorMetadata_LaunchStage_Unimplemented
 *        The feature is not yet implemented. Users can not use it. (Value:
 *        "UNIMPLEMENTED")
 */
@property(nonatomic, copy, nullable) NSString *launchStage;

/**
 *  The sampling period of metric data points. For metrics which are written
 *  periodically, consecutive data points are stored at this time interval,
 *  excluding data loss due to errors. Metrics with a higher granularity have a
 *  smaller sampling period.
 */
@property(nonatomic, strong, nullable) GTLRDuration *samplePeriod;

@end


/**
 *  Bind API methods to metrics. Binding a method to a metric causes that
 *  metric's configured quota behaviors to apply to the method call.
 */
@interface GTLRServiceNetworking_MetricRule : GTLRObject

/**
 *  Metrics to update when the selected methods are called, and the associated
 *  cost applied to each metric. The key of the map is the metric name, and the
 *  values are the amount increased for the metric against which the quota
 *  limits are defined. The value must not be negative.
 */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_MetricRule_MetricCosts *metricCosts;

/**
 *  Selects the methods to which this rule applies. Refer to selector for syntax
 *  details.
 */
@property(nonatomic, copy, nullable) NSString *selector;

@end


/**
 *  Metrics to update when the selected methods are called, and the associated
 *  cost applied to each metric. The key of the map is the metric name, and the
 *  values are the amount increased for the metric against which the quota
 *  limits are defined. The value must not be negative.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of longLongValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceNetworking_MetricRule_MetricCosts : GTLRObject
@end


/**
 *  Declares an API Interface to be included in this interface. The including
 *  interface must redeclare all the methods from the included interface, but
 *  documentation and options are inherited as follows: - If after comment and
 *  whitespace stripping, the documentation string of the redeclared method is
 *  empty, it will be inherited from the original method. - Each annotation
 *  belonging to the service config (http, visibility) which is not set in the
 *  redeclared method will be inherited. - If an http annotation is inherited,
 *  the path pattern will be modified as follows. Any version prefix will be
 *  replaced by the version of the including interface plus the root path if
 *  specified. Example of a simple mixin: package google.acl.v1; service
 *  AccessControl { // Get the underlying ACL object. rpc GetAcl(GetAclRequest)
 *  returns (Acl) { option (google.api.http).get = "/v1/{resource=**}:getAcl"; }
 *  } package google.storage.v2; service Storage { // rpc GetAcl(GetAclRequest)
 *  returns (Acl); // Get a data record. rpc GetData(GetDataRequest) returns
 *  (Data) { option (google.api.http).get = "/v2/{resource=**}"; } } Example of
 *  a mixin configuration: apis: - name: google.storage.v2.Storage mixins: -
 *  name: google.acl.v1.AccessControl The mixin construct implies that all
 *  methods in `AccessControl` are also declared with same name and
 *  request/response types in `Storage`. A documentation generator or annotation
 *  processor will see the effective `Storage.GetAcl` method after inheriting
 *  documentation and annotations as follows: service Storage { // Get the
 *  underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) { option
 *  (google.api.http).get = "/v2/{resource=**}:getAcl"; } ... } Note how the
 *  version in the path pattern changed from `v1` to `v2`. If the `root` field
 *  in the mixin is specified, it should be a relative path under which
 *  inherited HTTP paths are placed. Example: apis: - name:
 *  google.storage.v2.Storage mixins: - name: google.acl.v1.AccessControl root:
 *  acls This implies the following inherited HTTP annotation: service Storage {
 *  // Get the underlying ACL object. rpc GetAcl(GetAclRequest) returns (Acl) {
 *  option (google.api.http).get = "/v2/acls/{resource=**}:getAcl"; } ... }
 */
@interface GTLRServiceNetworking_Mixin : GTLRObject

/** The fully qualified name of the interface which is included. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If non-empty specifies a path under which inherited HTTP paths are rooted.
 */
@property(nonatomic, copy, nullable) NSString *root;

@end


/**
 *  An object that describes the schema of a MonitoredResource object using a
 *  type name and a set of labels. For example, the monitored resource
 *  descriptor for Google Compute Engine VM instances has a type of
 *  `"gce_instance"` and specifies the use of the labels `"instance_id"` and
 *  `"zone"` to identify particular VM instances. Different APIs can support
 *  different monitored resource types. APIs generally provide a `list` method
 *  that returns the monitored resource descriptors used by the API.
 */
@interface GTLRServiceNetworking_MonitoredResourceDescriptor : GTLRObject

/**
 *  Optional. A detailed description of the monitored resource type that might
 *  be used in documentation.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. A concise name for the monitored resource type that might be
 *  displayed in user interfaces. It should be a Title Cased Noun Phrase,
 *  without any article or other determiners. For example, `"Google Cloud SQL
 *  Database"`.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Required. A set of labels used to describe instances of this monitored
 *  resource type. For example, an individual Google Cloud SQL database is
 *  identified by values for the labels `"database_id"` and `"zone"`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_LabelDescriptor *> *labels;

/**
 *  Optional. The launch stage of the monitored resource definition.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Alpha
 *        Alpha is a limited availability test for releases before they are
 *        cleared for widespread use. By Alpha, all significant design issues
 *        are resolved and we are in the process of verifying functionality.
 *        Alpha customers need to apply for access, agree to applicable terms,
 *        and have their projects allowlisted. Alpha releases don't have to be
 *        feature complete, no SLAs are provided, and there are no technical
 *        support obligations, but they will be far enough along that customers
 *        can actually use them in test environments or for limited-use tests --
 *        just like they would in normal production cases. (Value: "ALPHA")
 *    @arg @c kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Beta
 *        Beta is the point at which we are ready to open a release for any
 *        customer to use. There are no SLA or technical support obligations in
 *        a Beta release. Products will be complete from a feature perspective,
 *        but may have some open outstanding issues. Beta releases are suitable
 *        for limited production use cases. (Value: "BETA")
 *    @arg @c kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Deprecated
 *        Deprecated features are scheduled to be shut down and removed. For
 *        more information, see the "Deprecation Policy" section of our [Terms
 *        of Service](https://cloud.google.com/terms/) and the [Google Cloud
 *        Platform Subject to the Deprecation
 *        Policy](https://cloud.google.com/terms/deprecation) documentation.
 *        (Value: "DEPRECATED")
 *    @arg @c kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_EarlyAccess
 *        Early Access features are limited to a closed group of testers. To use
 *        these features, you must sign up in advance and sign a Trusted Tester
 *        agreement (which includes confidentiality provisions). These features
 *        may be unstable, changed in backward-incompatible ways, and are not
 *        guaranteed to be released. (Value: "EARLY_ACCESS")
 *    @arg @c kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Ga
 *        GA features are open to all developers and are considered stable and
 *        fully qualified for production use. (Value: "GA")
 *    @arg @c kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_LaunchStageUnspecified
 *        Do not use this default value. (Value: "LAUNCH_STAGE_UNSPECIFIED")
 *    @arg @c kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Prelaunch
 *        Prelaunch features are hidden from users and are only visible
 *        internally. (Value: "PRELAUNCH")
 *    @arg @c kGTLRServiceNetworking_MonitoredResourceDescriptor_LaunchStage_Unimplemented
 *        The feature is not yet implemented. Users can not use it. (Value:
 *        "UNIMPLEMENTED")
 */
@property(nonatomic, copy, nullable) NSString *launchStage;

/**
 *  Optional. The resource name of the monitored resource descriptor:
 *  `"projects/{project_id}/monitoredResourceDescriptors/{type}"` where {type}
 *  is the value of the `type` field in this object and {project_id} is a
 *  project ID that provides API-specific context for accessing the type. APIs
 *  that do not use project information can use the resource name format
 *  `"monitoredResourceDescriptors/{type}"`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The monitored resource type. For example, the type
 *  `"cloudsql_database"` represents databases in Google Cloud SQL. For a list
 *  of types, see [Monitoring resource
 *  types](https://cloud.google.com/monitoring/api/resources) and [Logging
 *  resource types](https://cloud.google.com/logging/docs/api/v2/resource-list).
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Monitoring configuration of the service. The example below shows how to
 *  configure monitored resources and metrics for monitoring. In the example, a
 *  monitored resource and two metrics are defined. The
 *  `library.googleapis.com/book/returned_count` metric is sent to both producer
 *  and consumer projects, whereas the `library.googleapis.com/book/num_overdue`
 *  metric is only sent to the consumer project. monitored_resources: - type:
 *  library.googleapis.com/Branch display_name: "Library Branch" description: "A
 *  branch of a library." launch_stage: GA labels: - key: resource_container
 *  description: "The Cloud container (ie. project id) for the Branch." - key:
 *  location description: "The location of the library branch." - key: branch_id
 *  description: "The id of the branch." metrics: - name:
 *  library.googleapis.com/book/returned_count display_name: "Books Returned"
 *  description: "The count of books that have been returned." launch_stage: GA
 *  metric_kind: DELTA value_type: INT64 unit: "1" labels: - key: customer_id
 *  description: "The id of the customer." - name:
 *  library.googleapis.com/book/num_overdue display_name: "Books Overdue"
 *  description: "The current number of overdue books." launch_stage: GA
 *  metric_kind: GAUGE value_type: INT64 unit: "1" labels: - key: customer_id
 *  description: "The id of the customer." monitoring: producer_destinations: -
 *  monitored_resource: library.googleapis.com/Branch metrics: -
 *  library.googleapis.com/book/returned_count consumer_destinations: -
 *  monitored_resource: library.googleapis.com/Branch metrics: -
 *  library.googleapis.com/book/returned_count -
 *  library.googleapis.com/book/num_overdue
 */
@interface GTLRServiceNetworking_Monitoring : GTLRObject

/**
 *  Monitoring configurations for sending metrics to the consumer project. There
 *  can be multiple consumer destinations. A monitored resource type may appear
 *  in multiple monitoring destinations if different aggregations are needed for
 *  different sets of metrics associated with that monitored resource type. A
 *  monitored resource and metric pair may only be used once in the Monitoring
 *  configuration.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_MonitoringDestination *> *consumerDestinations;

/**
 *  Monitoring configurations for sending metrics to the producer project. There
 *  can be multiple producer destinations. A monitored resource type may appear
 *  in multiple monitoring destinations if different aggregations are needed for
 *  different sets of metrics associated with that monitored resource type. A
 *  monitored resource and metric pair may only be used once in the Monitoring
 *  configuration.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_MonitoringDestination *> *producerDestinations;

@end


/**
 *  Configuration of a specific monitoring destination (the producer project or
 *  the consumer project).
 */
@interface GTLRServiceNetworking_MonitoringDestination : GTLRObject

/**
 *  Types of the metrics to report to this monitoring destination. Each type
 *  must be defined in Service.metrics section.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *metrics;

/**
 *  The monitored resource type. The type must be defined in
 *  Service.monitored_resources section.
 */
@property(nonatomic, copy, nullable) NSString *monitoredResource;

@end


/**
 *  OAuth scopes are a way to define data and permissions on data. For example,
 *  there are scopes defined for "Read-only access to Google Calendar" and
 *  "Access to Cloud Platform". Users can consent to a scope for an application,
 *  giving it permission to access that data on their behalf. OAuth scope
 *  specifications should be fairly coarse grained; a user will need to see and
 *  understand the text description of what your scope means. In most cases: use
 *  one or at most two OAuth scopes for an entire family of products. If your
 *  product has multiple APIs, you should probably be sharing the OAuth scope
 *  across all of those APIs. When you need finer grained OAuth consent screens:
 *  talk with your product management about how developers will use them in
 *  practice. Please note that even though each of the canonical scopes is
 *  enough for a request to be accepted and passed to the backend, a request can
 *  still fail due to the backend requiring additional scopes or permissions.
 */
@interface GTLRServiceNetworking_OAuthRequirements : GTLRObject

/**
 *  The list of publicly documented OAuth scopes that are allowed access. An
 *  OAuth token containing any of these scopes will be accepted. Example:
 *  canonical_scopes: https://www.googleapis.com/auth/calendar,
 *  https://www.googleapis.com/auth/calendar.read
 */
@property(nonatomic, copy, nullable) NSString *canonicalScopes;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRServiceNetworking_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceNetworking_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceNetworking_Operation_Response : GTLRObject
@end


/**
 *  A protocol buffer option, which can be attached to a message, field,
 *  enumeration, etc.
 */
@interface GTLRServiceNetworking_Option : GTLRObject

/**
 *  The option's name. For protobuf built-in options (options defined in
 *  descriptor.proto), this is the short name. For example, `"map_entry"`. For
 *  custom options, it should be the fully-qualified name. For example,
 *  `"google.api.http"`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The option's value packed in an Any message. If the value is a primitive,
 *  the corresponding wrapper type defined in google/protobuf/wrappers.proto
 *  should be used. If the value is an enum, it should be stored as an int32
 *  value using the google.protobuf.Int32Value type.
 */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_Option_Value *value;

@end


/**
 *  The option's value packed in an Any message. If the value is a primitive,
 *  the corresponding wrapper type defined in google/protobuf/wrappers.proto
 *  should be used. If the value is an enum, it should be stored as an int32
 *  value using the google.protobuf.Int32Value type.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceNetworking_Option_Value : GTLRObject
@end


/**
 *  Represents a documentation page. A page can contain subpages to represent
 *  nested documentation set structure.
 */
@interface GTLRServiceNetworking_Page : GTLRObject

/**
 *  The Markdown content of the page. You can use (== include {path} ==) to
 *  include content from a Markdown file. The content can be used to produce the
 *  documentation page such as HTML format page.
 */
@property(nonatomic, copy, nullable) NSString *content;

/**
 *  The name of the page. It will be used as an identity of the page to generate
 *  URI of the page, text of the link to this page in navigation, etc. The full
 *  page name (start from the root page name to this page concatenated with `.`)
 *  can be used as reference to the page in your documentation. For example:
 *  pages: - name: Tutorial content: (== include tutorial.md ==) subpages: -
 *  name: Java content: (== include tutorial_java.md ==) You can reference
 *  `Java` page using Markdown reference link syntax: `Java`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Subpages of this page. The order of subpages specified here will be honored
 *  in the generated docset.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Page *> *subpages;

@end


/**
 *  Metadata provided through GetOperation request for the LRO generated by
 *  Partial Delete Connection API
 */
@interface GTLRServiceNetworking_PartialDeleteConnectionMetadata : GTLRObject
@end


/**
 *  DNS domain suffix for which requests originating in the producer VPC network
 *  are resolved in the associated consumer VPC network.
 */
@interface GTLRServiceNetworking_PeeredDnsDomain : GTLRObject

/**
 *  The DNS domain name suffix e.g. `example.com.`. Cloud DNS requires that a
 *  DNS suffix ends with a trailing dot.
 */
@property(nonatomic, copy, nullable) NSString *dnsSuffix;

/**
 *  User assigned name for this resource. Must be unique within the consumer
 *  network. The name must be 1-63 characters long, must begin with a letter,
 *  end with a letter or digit, and only contain lowercase letters, digits or
 *  dashes.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Metadata provided through GetOperation request for the LRO generated by
 *  CreatePeeredDnsDomain API.
 */
@interface GTLRServiceNetworking_PeeredDnsDomainMetadata : GTLRObject
@end


/**
 *  Grouping of IAM role and IAM member.
 */
@interface GTLRServiceNetworking_PolicyBinding : GTLRObject

/**
 *  Required. Member to bind the role with. See
 *  /iam/docs/reference/rest/v1/Policy#Binding for how to format each member.
 *  Eg. - user:myuser\@mydomain.com -
 *  serviceAccount:my-service-account\@app.gserviceaccount.com
 */
@property(nonatomic, copy, nullable) NSString *member;

/**
 *  Required. Role to apply. Only allowlisted roles can be used at the specified
 *  granularity. The role must be one of the following: -
 *  'roles/container.hostServiceAgentUser' applied on the shared VPC host
 *  project - 'roles/compute.securityAdmin' applied on the shared VPC host
 *  project
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  Quota configuration helps to achieve fairness and budgeting in service
 *  usage. The metric based quota configuration works this way: - The service
 *  configuration defines a set of metrics. - For API calls, the
 *  quota.metric_rules maps methods to metrics with corresponding costs. - The
 *  quota.limits defines limits on the metrics, which will be used for quota
 *  checks at runtime. An example quota configuration in yaml format: quota:
 *  limits: - name: apiWriteQpsPerProject metric:
 *  library.googleapis.com/write_calls unit: "1/min/{project}" # rate limit for
 *  consumer projects values: STANDARD: 10000 (The metric rules bind all methods
 *  to the read_calls metric, except for the UpdateBook and DeleteBook methods.
 *  These two methods are mapped to the write_calls metric, with the UpdateBook
 *  method consuming at twice rate as the DeleteBook method.) metric_rules: -
 *  selector: "*" metric_costs: library.googleapis.com/read_calls: 1 - selector:
 *  google.example.library.v1.LibraryService.UpdateBook metric_costs:
 *  library.googleapis.com/write_calls: 2 - selector:
 *  google.example.library.v1.LibraryService.DeleteBook metric_costs:
 *  library.googleapis.com/write_calls: 1 Corresponding Metric definition:
 *  metrics: - name: library.googleapis.com/read_calls display_name: Read
 *  requests metric_kind: DELTA value_type: INT64 - name:
 *  library.googleapis.com/write_calls display_name: Write requests metric_kind:
 *  DELTA value_type: INT64
 */
@interface GTLRServiceNetworking_Quota : GTLRObject

/** List of QuotaLimit definitions for the service. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_QuotaLimit *> *limits;

/**
 *  List of MetricRule definitions, each one mapping a selected method to one or
 *  more metrics.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_MetricRule *> *metricRules;

@end


/**
 *  `QuotaLimit` defines a specific limit that applies over a specified duration
 *  for a limit type. There can be at most one limit for a duration and limit
 *  type combination defined within a `QuotaGroup`.
 */
@interface GTLRServiceNetworking_QuotaLimit : GTLRObject

/**
 *  Default number of tokens that can be consumed during the specified duration.
 *  This is the number of tokens assigned when a client application developer
 *  activates the service for his/her project. Specifying a value of 0 will
 *  block all requests. This can be used if you are provisioning quota to
 *  selected consumers and blocking others. Similarly, a value of -1 will
 *  indicate an unlimited quota. No other negative values are allowed. Used by
 *  group-based quotas only.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultLimit;

/**
 *  Optional. User-visible, extended description for this quota limit. Should be
 *  used only when more context is needed to understand this limit than provided
 *  by the limit's display name (see: `display_name`).
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  User-visible display name for this limit. Optional. If not set, the UI will
 *  provide a default display name based on the quota configuration. This field
 *  can be used to override the default display name generated from the
 *  configuration.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Duration of this limit in textual notation. Must be "100s" or "1d". Used by
 *  group-based quotas only.
 */
@property(nonatomic, copy, nullable) NSString *duration;

/**
 *  Free tier value displayed in the Developers Console for this limit. The free
 *  tier is the number of tokens that will be subtracted from the billed amount
 *  when billing is enabled. This field can only be set on a limit with duration
 *  "1d", in a billable group; it is invalid on any other limit. If this field
 *  is not set, it defaults to 0, indicating that there is no free tier for this
 *  service. Used by group-based quotas only.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *freeTier;

/**
 *  Maximum number of tokens that can be consumed during the specified duration.
 *  Client application developers can override the default limit up to this
 *  maximum. If specified, this value cannot be set to a value less than the
 *  default limit. If not specified, it is set to the default limit. To allow
 *  clients to apply overrides with no upper bound, set this to -1, indicating
 *  unlimited maximum quota. Used by group-based quotas only.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxLimit;

/**
 *  The name of the metric this quota limit applies to. The quota limits with
 *  the same metric will be checked together during runtime. The metric must be
 *  defined within the service config.
 */
@property(nonatomic, copy, nullable) NSString *metric;

/**
 *  Name of the quota limit. The name must be provided, and it must be unique
 *  within the service. The name can only include alphanumeric characters as
 *  well as '-'. The maximum length of the limit name is 64 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Specify the unit of the quota limit. It uses the same syntax as Metric.unit.
 *  The supported unit kinds are determined by the quota backend system. Here
 *  are some examples: * "1/min/{project}" for quota per minute per project.
 *  Note: the order of unit components is insignificant. The "1" at the
 *  beginning is required to follow the metric unit syntax.
 */
@property(nonatomic, copy, nullable) NSString *unit;

/**
 *  Tiered limit values. You must specify this as a key:value pair, with an
 *  integer value that is the maximum number of requests allowed for the
 *  specified unit. Currently only STANDARD is supported.
 */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_QuotaLimit_Values *values;

@end


/**
 *  Tiered limit values. You must specify this as a key:value pair, with an
 *  integer value that is the maximum number of requests allowed for the
 *  specified unit. Currently only STANDARD is supported.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of longLongValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceNetworking_QuotaLimit_Values : GTLRObject
@end


/**
 *  Represents a found unused range.
 */
@interface GTLRServiceNetworking_Range : GTLRObject

/**
 *  CIDR range in "10.x.x.x/y" format that is within the allocated ranges and
 *  currently unused.
 */
@property(nonatomic, copy, nullable) NSString *ipCidrRange;

/**
 *  In the Shared VPC host project, the VPC network that's peered with the
 *  consumer network. For example:
 *  `projects/1234321/global/networks/host-network`
 */
@property(nonatomic, copy, nullable) NSString *network;

@end


/**
 *  Represents a range reservation.
 */
@interface GTLRServiceNetworking_RangeReservation : GTLRObject

/**
 *  Required. The size of the desired subnet. Use usual CIDR range notation. For
 *  example, '30' to find unused x.x.x.x/30 CIDR range. The goal is to determine
 *  if one of the allocated ranges has enough free space for a subnet of the
 *  requested size.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ipPrefixLength;

/**
 *  Optional. The name of one or more allocated IP address ranges associated
 *  with this private service access connection. If no range names are provided
 *  all ranges associated with this connection will be considered. If a CIDR
 *  range with the specified IP prefix length is not available within these
 *  ranges the validation fails.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requestedRanges;

/**
 *  Optional. The size of the desired secondary ranges for the subnet. Use usual
 *  CIDR range notation. For example, '30' to find unused x.x.x.x/30 CIDR range.
 *  The goal is to determine that the allocated ranges have enough free space
 *  for all the requested secondary ranges.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *secondaryRangeIpPrefixLengths;

/**
 *  Optional. List of subnetwork candidates to validate. The required input
 *  fields are `name`, `network`, and `region`. Subnetworks from this list which
 *  exist will be returned in the response with the `ip_cidr_range`,
 *  `secondary_ip_cider_ranges`, and `outside_allocation` fields set.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Subnetwork *> *subnetworkCandidates;

@end


/**
 *  Metadata provided through GetOperation request for the LRO generated by
 *  RemoveDnsRecordSet API
 */
@interface GTLRServiceNetworking_RemoveDnsRecordSetMetadata : GTLRObject
@end


/**
 *  Request to remove a record set from a private managed DNS zone in the shared
 *  producer host project. The name, type, ttl, and data values must all exactly
 *  match an existing record set in the specified zone.
 */
@interface GTLRServiceNetworking_RemoveDnsRecordSetRequest : GTLRObject

/**
 *  Required. The network that the consumer is using to connect with services.
 *  Must be in the form of projects/{project}/global/networks/{network}
 *  {project} is the project number, as in '12345' {network} is the network
 *  name.
 */
@property(nonatomic, copy, nullable) NSString *consumerNetwork;

/** Required. The DNS record set to remove. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_DnsRecordSet *dnsRecordSet;

/**
 *  Required. The name of the private DNS zone in the shared producer host
 *  project from which the record set will be removed.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  Blank message response type for RemoveDnsRecordSet API
 */
@interface GTLRServiceNetworking_RemoveDnsRecordSetResponse : GTLRObject
@end


/**
 *  Metadata provided through GetOperation request for the LRO generated by
 *  RemoveDnsZone API
 */
@interface GTLRServiceNetworking_RemoveDnsZoneMetadata : GTLRObject
@end


/**
 *  Request to remove a private managed DNS zone in the shared producer host
 *  project and a matching DNS peering zone in the consumer project.
 */
@interface GTLRServiceNetworking_RemoveDnsZoneRequest : GTLRObject

/**
 *  Required. The network that the consumer is using to connect with services.
 *  Must be in the form of projects/{project}/global/networks/{network}
 *  {project} is the project number, as in '12345' {network} is the network
 *  name.
 */
@property(nonatomic, copy, nullable) NSString *consumerNetwork;

/**
 *  Required. The name for both the private zone in the shared producer host
 *  project and the peering zone in the consumer project.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Blank message response type for RemoveDnsZone API
 */
@interface GTLRServiceNetworking_RemoveDnsZoneResponse : GTLRObject
@end


/**
 *  Represents a route that was created or discovered by a private access
 *  management service.
 */
@interface GTLRServiceNetworking_Route : GTLRObject

/** Destination CIDR range that this route applies to. */
@property(nonatomic, copy, nullable) NSString *destRange;

/** Route name. See https://cloud.google.com/vpc/docs/routes */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fully-qualified URL of the VPC network in the producer host tenant project
 *  that this route applies to. For example:
 *  `projects/123456/global/networks/host-network`
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  Fully-qualified URL of the gateway that should handle matching packets that
 *  this route applies to. For example:
 *  `projects/123456/global/gateways/default-internet-gateway`
 */
@property(nonatomic, copy, nullable) NSString *nextHopGateway;

@end


/**
 *  Request to search for an unused range within allocated ranges.
 */
@interface GTLRServiceNetworking_SearchRangeRequest : GTLRObject

/**
 *  Required. The prefix length of the IP range. Use usual CIDR range notation.
 *  For example, '30' to find unused x.x.x.x/30 CIDR range. Actual range will be
 *  determined using allocated range for the consumer peered network and
 *  returned in the result.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ipPrefixLength;

/**
 *  Network name in the consumer project. This network must have been already
 *  peered with a shared VPC network using CreateConnection method. Must be in a
 *  form 'projects/{project}/global/networks/{network}'. {project} is a project
 *  number, as in '12345' {network} is network name.
 */
@property(nonatomic, copy, nullable) NSString *network;

@end


/**
 *  GTLRServiceNetworking_SecondaryIpRange
 */
@interface GTLRServiceNetworking_SecondaryIpRange : GTLRObject

/** Secondary IP CIDR range in `x.x.x.x/y` format. */
@property(nonatomic, copy, nullable) NSString *ipCidrRange;

/** Name of the secondary IP range. */
@property(nonatomic, copy, nullable) NSString *rangeName;

@end


/**
 *  GTLRServiceNetworking_SecondaryIpRangeSpec
 */
@interface GTLRServiceNetworking_SecondaryIpRangeSpec : GTLRObject

/**
 *  Required. The prefix length of the secondary IP range. Use CIDR range
 *  notation, such as `30` to provision a secondary IP range with an
 *  `x.x.x.x/30` CIDR range. The IP address range is drawn from a pool of
 *  available ranges in the service consumer's allocated range.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ipPrefixLength;

/**
 *  Optional. Enable outside allocation using public IP addresses. Any public IP
 *  range may be specified. If this field is provided, we will not use customer
 *  reserved ranges for this secondary IP range.
 */
@property(nonatomic, copy, nullable) NSString *outsideAllocationPublicIpRange;

/**
 *  Required. A name for the secondary IP range. The name must be 1-63
 *  characters long, and comply with RFC1035. The name must be unique within the
 *  subnetwork.
 */
@property(nonatomic, copy, nullable) NSString *rangeName;

/**
 *  Optional. The starting address of a range. The address must be a valid IPv4
 *  address in the x.x.x.x format. This value combined with the IP prefix range
 *  is the CIDR range for the secondary IP range. The range must be within the
 *  allocated range that is assigned to the private connection. If the CIDR
 *  range isn't available, the call fails.
 */
@property(nonatomic, copy, nullable) NSString *requestedAddress;

@end


/**
 *  `Service` is the root object of Google API service configuration (service
 *  config). It describes the basic information about a logical service, such as
 *  the service name and the user-facing title, and delegates other aspects to
 *  sub-sections. Each sub-section is either a proto message or a repeated proto
 *  message that configures a specific aspect, such as auth. For more
 *  information, see each proto message definition. Example: type:
 *  google.api.Service name: calendar.googleapis.com title: Google Calendar API
 *  apis: - name: google.calendar.v3.Calendar visibility: rules: - selector:
 *  "google.calendar.v3.*" restriction: PREVIEW backend: rules: - selector:
 *  "google.calendar.v3.*" address: calendar.example.com authentication:
 *  providers: - id: google_calendar_auth jwks_uri:
 *  https://www.googleapis.com/oauth2/v1/certs issuer:
 *  https://securetoken.google.com rules: - selector: "*" requirements:
 *  provider_id: google_calendar_auth
 */
@interface GTLRServiceNetworking_Service : GTLRObject

/**
 *  A list of API interfaces exported by this service. Only the `name` field of
 *  the google.protobuf.Api needs to be provided by the configuration author, as
 *  the remaining fields will be derived from the IDL during the normalization
 *  process. It is an error to specify an API interface here which cannot be
 *  resolved against the associated IDL files.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Api *> *apis;

/** Auth configuration. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_Authentication *authentication;

/** API backend configuration. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_Backend *backend;

/** Billing configuration. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_Billing *billing;

/**
 *  Obsolete. Do not use. This field has no semantic meaning. The service config
 *  compiler always sets this field to `3`.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *configVersion;

/** Context configuration. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_Context *context;

/** Configuration for the service control plane. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_Control *control;

/** Custom error configuration. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_CustomError *customError;

/** Additional API documentation. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_Documentation *documentation;

/**
 *  Configuration for network endpoints. If this is empty, then an endpoint with
 *  the same name as the service is automatically generated to service all
 *  defined APIs.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Endpoint *> *endpoints;

/**
 *  A list of all enum types included in this API service. Enums referenced
 *  directly or indirectly by the `apis` are automatically included. Enums which
 *  are not referenced but shall be included should be listed here by name by
 *  the configuration author. Example: enums: - name: google.someapi.v1.SomeEnum
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Enum *> *enums;

/** HTTP configuration. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_Http *http;

/**
 *  A unique ID for a specific instance of this message, typically assigned by
 *  the client for tracking purpose. Must be no longer than 63 characters and
 *  only lower case letters, digits, '.', '_' and '-' are allowed. If empty, the
 *  server may choose to generate one instead.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Logging configuration. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_Logging *logging;

/** Defines the logs used by this service. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_LogDescriptor *> *logs;

/** Defines the metrics used by this service. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_MetricDescriptor *> *metrics;

/**
 *  Defines the monitored resources used by this service. This is required by
 *  the Service.monitoring and Service.logging configurations.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_MonitoredResourceDescriptor *> *monitoredResources;

/** Monitoring configuration. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_Monitoring *monitoring;

/**
 *  The service name, which is a DNS-like logical identifier for the service,
 *  such as `calendar.googleapis.com`. The service name typically goes through
 *  DNS verification to make sure the owner of the service also owns the DNS
 *  name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The Google project that owns this service. */
@property(nonatomic, copy, nullable) NSString *producerProjectId;

/** Quota configuration. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_Quota *quota;

/**
 *  Output only. The source information for this configuration if available.
 */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_SourceInfo *sourceInfo;

/** System parameter configuration. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_SystemParameters *systemParameters;

/**
 *  A list of all proto message types included in this API service. It serves
 *  similar purpose as [google.api.Service.types], except that these types are
 *  not needed by user-defined APIs. Therefore, they will not show up in the
 *  generated discovery doc. This field should only be used to define system
 *  APIs in ESF.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Type *> *systemTypes;

/**
 *  The product title for this service, it is the name displayed in Google Cloud
 *  Console.
 */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  A list of all proto message types included in this API service. Types
 *  referenced directly or indirectly by the `apis` are automatically included.
 *  Messages which are not referenced but shall be included, such as types used
 *  by the `google.protobuf.Any` type, should be listed here by name by the
 *  configuration author. Example: types: - name: google.protobuf.Int32
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Type *> *types;

/** Configuration controlling usage of this service. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_Usage *usage;

@end


/**
 *  `SourceContext` represents information about the source of a protobuf
 *  element, like the file in which it is defined.
 */
@interface GTLRServiceNetworking_SourceContext : GTLRObject

/**
 *  The path-qualified name of the .proto file that contained the associated
 *  protobuf element. For example: `"google/protobuf/source_context.proto"`.
 */
@property(nonatomic, copy, nullable) NSString *fileName;

@end


/**
 *  Source information used to create a Service Config
 */
@interface GTLRServiceNetworking_SourceInfo : GTLRObject

/** All files used during config generation. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_SourceInfo_SourceFiles_Item *> *sourceFiles;

@end


/**
 *  GTLRServiceNetworking_SourceInfo_SourceFiles_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceNetworking_SourceInfo_SourceFiles_Item : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRServiceNetworking_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRServiceNetworking_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRServiceNetworking_Status_Details_Item : GTLRObject
@end


/**
 *  Represents a subnet that was created or discovered by a private access
 *  management service.
 */
@interface GTLRServiceNetworking_Subnetwork : GTLRObject

/** Subnetwork CIDR range in `10.x.x.x/y` format. */
@property(nonatomic, copy, nullable) NSString *ipCidrRange;

/** Subnetwork name. See https://cloud.google.com/compute/docs/vpc/ */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  In the Shared VPC host project, the VPC network that's peered with the
 *  consumer network. For example:
 *  `projects/1234321/global/networks/host-network`
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  This is a discovered subnet that is not within the current consumer
 *  allocated ranges.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *outsideAllocation;

/** GCP region where the subnetwork is located. */
@property(nonatomic, copy, nullable) NSString *region;

/** List of secondary IP ranges in this subnetwork. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_SecondaryIpRange *> *secondaryIpRanges;

@end


/**
 *  Define a parameter's name and location. The parameter may be passed as
 *  either an HTTP header or a URL query parameter, and if both are passed the
 *  behavior is implementation-dependent.
 */
@interface GTLRServiceNetworking_SystemParameter : GTLRObject

/**
 *  Define the HTTP header name to use for the parameter. It is case
 *  insensitive.
 */
@property(nonatomic, copy, nullable) NSString *httpHeader;

/**
 *  Define the name of the parameter, such as "api_key" . It is case sensitive.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Define the URL query parameter name to use for the parameter. It is case
 *  sensitive.
 */
@property(nonatomic, copy, nullable) NSString *urlQueryParameter;

@end


/**
 *  Define a system parameter rule mapping system parameter definitions to
 *  methods.
 */
@interface GTLRServiceNetworking_SystemParameterRule : GTLRObject

/**
 *  Define parameters. Multiple names may be defined for a parameter. For a
 *  given method call, only one of them should be used. If multiple names are
 *  used the behavior is implementation-dependent. If none of the specified
 *  names are present the behavior is parameter-dependent.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_SystemParameter *> *parameters;

/**
 *  Selects the methods to which this rule applies. Use '*' to indicate all
 *  methods in all APIs. Refer to selector for syntax details.
 */
@property(nonatomic, copy, nullable) NSString *selector;

@end


/**
 *  ### System parameter configuration A system parameter is a special kind of
 *  parameter defined by the API system, not by an individual API. It is
 *  typically mapped to an HTTP header and/or a URL query parameter. This
 *  configuration specifies which methods change the names of the system
 *  parameters.
 */
@interface GTLRServiceNetworking_SystemParameters : GTLRObject

/**
 *  Define system parameters. The parameters defined here will override the
 *  default parameters implemented by the system. If this field is missing from
 *  the service config, default system parameters will be used. Default system
 *  parameters and names is implementation-dependent. Example: define api key
 *  for all methods system_parameters rules: - selector: "*" parameters: - name:
 *  api_key url_query_parameter: api_key Example: define 2 api key names for a
 *  specific method. system_parameters rules: - selector: "/ListShelves"
 *  parameters: - name: api_key http_header: Api-Key1 - name: api_key
 *  http_header: Api-Key2 **NOTE:** All service configuration rules follow "last
 *  one wins" order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_SystemParameterRule *> *rules;

@end


/**
 *  A protocol buffer message type.
 */
@interface GTLRServiceNetworking_Type : GTLRObject

/** The list of fields. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Field *> *fields;

/** The fully qualified message name. */
@property(nonatomic, copy, nullable) NSString *name;

/** The list of types appearing in `oneof` definitions in this type. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *oneofs;

/** The protocol buffer options. */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Option *> *options;

/** The source context. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_SourceContext *sourceContext;

/**
 *  The source syntax.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceNetworking_Type_Syntax_SyntaxProto2 Syntax `proto2`.
 *        (Value: "SYNTAX_PROTO2")
 *    @arg @c kGTLRServiceNetworking_Type_Syntax_SyntaxProto3 Syntax `proto3`.
 *        (Value: "SYNTAX_PROTO3")
 */
@property(nonatomic, copy, nullable) NSString *syntax;

@end


/**
 *  Request to update the configuration of a service networking connection
 *  including the import/export of custom routes and subnetwork routes with
 *  public IP.
 */
@interface GTLRServiceNetworking_UpdateConsumerConfigRequest : GTLRObject

/** Required. The updated peering config. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_ConsumerConfig *consumerConfig;

@end


/**
 *  Metadata provided through GetOperation request for the LRO generated by
 *  UpdateDnsRecordSet API
 */
@interface GTLRServiceNetworking_UpdateDnsRecordSetMetadata : GTLRObject
@end


/**
 *  Request to update a record set from a private managed DNS zone in the shared
 *  producer host project. The name, type, ttl, and data values of the existing
 *  record set must all exactly match an existing record set in the specified
 *  zone.
 */
@interface GTLRServiceNetworking_UpdateDnsRecordSetRequest : GTLRObject

/**
 *  Required. The network that the consumer is using to connect with services.
 *  Must be in the form of projects/{project}/global/networks/{network}
 *  {project} is the project number, as in '12345' {network} is the network
 *  name.
 */
@property(nonatomic, copy, nullable) NSString *consumerNetwork;

/** Required. The existing DNS record set to update. */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_DnsRecordSet *existingDnsRecordSet;

/**
 *  Required. The new values that the DNS record set should be updated to hold.
 */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_DnsRecordSet *newDnsRecordSet NS_RETURNS_NOT_RETAINED;

/**
 *  Required. The name of the private DNS zone in the shared producer host
 *  project from which the record set will be removed.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  Configuration controlling usage of a service.
 */
@interface GTLRServiceNetworking_Usage : GTLRObject

/**
 *  The full resource name of a channel used for sending notifications to the
 *  service producer. Google Service Management currently only supports [Google
 *  Cloud Pub/Sub](https://cloud.google.com/pubsub) as a notification channel.
 *  To use Google Cloud Pub/Sub as the channel, this must be the name of a Cloud
 *  Pub/Sub topic that uses the Cloud Pub/Sub topic name format documented in
 *  https://cloud.google.com/pubsub/docs/overview.
 */
@property(nonatomic, copy, nullable) NSString *producerNotificationChannel;

/**
 *  Requirements that must be satisfied before a consumer project can use the
 *  service. Each requirement is of the form /; for example
 *  'serviceusage.googleapis.com/billing-enabled'. For Google APIs, a Terms of
 *  Service requirement must be included here. Google Cloud APIs must include
 *  "serviceusage.googleapis.com/tos/cloud". Other Google APIs should include
 *  "serviceusage.googleapis.com/tos/universal". Additional ToS can be included
 *  based on the business needs.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requirements;

/**
 *  A list of usage rules that apply to individual API methods. **NOTE:** All
 *  service configuration rules follow "last one wins" order.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_UsageRule *> *rules;

@end


/**
 *  Usage configuration rules for the service. NOTE: Under development. Use this
 *  rule to configure unregistered calls for the service. Unregistered calls are
 *  calls that do not contain consumer project identity. (Example: calls that do
 *  not contain an API key). By default, API methods do not allow unregistered
 *  calls, and each method call must be identified by a consumer project
 *  identity. Use this rule to allow/disallow unregistered calls. Example of an
 *  API that wants to allow unregistered calls for entire service. usage: rules:
 *  - selector: "*" allow_unregistered_calls: true Example of a method that
 *  wants to allow unregistered calls. usage: rules: - selector:
 *  "google.example.library.v1.LibraryService.CreateBook"
 *  allow_unregistered_calls: true
 */
@interface GTLRServiceNetworking_UsageRule : GTLRObject

/**
 *  If true, the selected method allows unregistered calls, e.g. calls that
 *  don't identify any user or application.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowUnregisteredCalls;

/**
 *  Selects the methods to which this rule applies. Use '*' to indicate all
 *  methods in all APIs. Refer to selector for syntax details.
 */
@property(nonatomic, copy, nullable) NSString *selector;

/**
 *  If true, the selected method should skip service control and the control
 *  plane features, such as quota and billing, will not be available. This flag
 *  is used by Google Cloud Endpoints to bypass checks for internal methods,
 *  such as service health check methods.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipServiceControl;

@end


/**
 *  GTLRServiceNetworking_ValidateConsumerConfigRequest
 */
@interface GTLRServiceNetworking_ValidateConsumerConfigRequest : GTLRObject

/**
 *  Optional. The IAM permission check determines whether the consumer project
 *  has 'servicenetworking.services.use' permission or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *checkServiceNetworkingUsePermission;

/**
 *  Required. The network that the consumer is using to connect with services.
 *  Must be in the form of projects/{project}/global/networks/{network}
 *  {project} is a project number, as in '12345' {network} is network name.
 */
@property(nonatomic, copy, nullable) NSString *consumerNetwork;

/**
 *  NETWORK_NOT_IN_CONSUMERS_PROJECT, NETWORK_NOT_IN_CONSUMERS_HOST_PROJECT, and
 *  HOST_PROJECT_NOT_FOUND are done when consumer_project is provided.
 */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_ConsumerProject *consumerProject;

/**
 *  RANGES_EXHAUSTED, RANGES_EXHAUSTED, and RANGES_DELETED_LATER are done when
 *  range_reservation is provided.
 */
@property(nonatomic, strong, nullable) GTLRServiceNetworking_RangeReservation *rangeReservation;

/**
 *  The validations will be performed in the order listed in the ValidationError
 *  enum. The first failure will return. If a validation is not requested, then
 *  the next one will be performed. SERVICE_NETWORKING_NOT_ENABLED and
 *  NETWORK_NOT_PEERED checks are performed for all requests where validation is
 *  requested. NETWORK_NOT_FOUND and NETWORK_DISCONNECTED checks are done for
 *  requests that have validate_network set to true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *validateNetwork;

@end


/**
 *  GTLRServiceNetworking_ValidateConsumerConfigResponse
 */
@interface GTLRServiceNetworking_ValidateConsumerConfigResponse : GTLRObject

/**
 *  List of subnetwork candidates from the request which exist with the
 *  `ip_cidr_range`, `secondary_ip_cider_ranges`, and `outside_allocation`
 *  fields set.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRServiceNetworking_Subnetwork *> *existingSubnetworkCandidates;

/**
 *  Indicates whether all the requested validations passed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isValid;

/**
 *  The first validation which failed.
 *
 *  Likely values:
 *    @arg @c kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_ComputeApiNotEnabled
 *        The consumer project does not have the compute api enabled. (Value:
 *        "COMPUTE_API_NOT_ENABLED")
 *    @arg @c kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_ConsumerProjectNotServiceProject
 *        The consumer project is not a service project for the specified host
 *        project. (Value: "CONSUMER_PROJECT_NOT_SERVICE_PROJECT")
 *    @arg @c kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_HostProjectNotFound
 *        The host project associated with the consumer project was not found.
 *        (Value: "HOST_PROJECT_NOT_FOUND")
 *    @arg @c kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_NetworkNotFound
 *        The network provided by the consumer does not exist. (Value:
 *        "NETWORK_NOT_FOUND")
 *    @arg @c kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_NetworkNotInConsumersHostProject
 *        The consumer project is a service project, and network is a shared
 *        VPC, but the network is not in the host project of this consumer
 *        project. (Value: "NETWORK_NOT_IN_CONSUMERS_HOST_PROJECT")
 *    @arg @c kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_NetworkNotInConsumersProject
 *        The network is a regular VPC but the network is not in the consumer's
 *        project. (Value: "NETWORK_NOT_IN_CONSUMERS_PROJECT")
 *    @arg @c kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_NetworkNotPeered
 *        The network has not been peered with the producer org. (Value:
 *        "NETWORK_NOT_PEERED")
 *    @arg @c kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_NetworkPeeringDeleted
 *        The peering was created and later deleted. (Value:
 *        "NETWORK_PEERING_DELETED")
 *    @arg @c kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_RangesDeletedLater
 *        The IP ranges were reserved but deleted later. (Value:
 *        "RANGES_DELETED_LATER")
 *    @arg @c kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_RangesExhausted
 *        The reserved IP ranges do not have enough space to create a subnet of
 *        desired size. (Value: "RANGES_EXHAUSTED")
 *    @arg @c kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_RangesNotReserved
 *        The IP ranges were not reserved. (Value: "RANGES_NOT_RESERVED")
 *    @arg @c kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_ServiceNetworkingNotEnabled
 *        Value "SERVICE_NETWORKING_NOT_ENABLED"
 *    @arg @c kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_UsePermissionNotFound
 *        The consumer project does not have the permission from the host
 *        project. (Value: "USE_PERMISSION_NOT_FOUND")
 *    @arg @c kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_ValidationErrorUnspecified
 *        Value "VALIDATION_ERROR_UNSPECIFIED"
 *    @arg @c kGTLRServiceNetworking_ValidateConsumerConfigResponse_ValidationError_ValidationNotRequested
 *        In case none of the validations are requested. (Value:
 *        "VALIDATION_NOT_REQUESTED")
 */
@property(nonatomic, copy, nullable) NSString *validationError;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
