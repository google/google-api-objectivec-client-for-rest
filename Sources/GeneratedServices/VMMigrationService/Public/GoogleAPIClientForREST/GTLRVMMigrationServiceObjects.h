// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Migrate to Virtual Machines API (vmmigration/v1)
// Description:
//   Use the Migrate to Virtual Machines API to programmatically migrate
//   workloads.
// Documentation:
//   https://cloud.google.com/migrate/virtual-machines

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRVMMigrationService_AdaptingOSStep;
@class GTLRVMMigrationService_ApplianceVersion;
@class GTLRVMMigrationService_AppliedLicense;
@class GTLRVMMigrationService_AvailableUpdates;
@class GTLRVMMigrationService_CloneJob;
@class GTLRVMMigrationService_CloneStep;
@class GTLRVMMigrationService_ComputeEngineTargetDefaults;
@class GTLRVMMigrationService_ComputeEngineTargetDefaults_Labels;
@class GTLRVMMigrationService_ComputeEngineTargetDefaults_Metadata;
@class GTLRVMMigrationService_ComputeEngineTargetDetails;
@class GTLRVMMigrationService_ComputeEngineTargetDetails_Labels;
@class GTLRVMMigrationService_ComputeEngineTargetDetails_Metadata;
@class GTLRVMMigrationService_ComputeScheduling;
@class GTLRVMMigrationService_CutoverJob;
@class GTLRVMMigrationService_CutoverStep;
@class GTLRVMMigrationService_CycleStep;
@class GTLRVMMigrationService_DatacenterConnector;
@class GTLRVMMigrationService_Group;
@class GTLRVMMigrationService_InitializingReplicationStep;
@class GTLRVMMigrationService_InstantiatingMigratedVMStep;
@class GTLRVMMigrationService_Link;
@class GTLRVMMigrationService_LocalizedMessage;
@class GTLRVMMigrationService_Location;
@class GTLRVMMigrationService_Location_Labels;
@class GTLRVMMigrationService_Location_Metadata;
@class GTLRVMMigrationService_MigratingVm;
@class GTLRVMMigrationService_MigratingVm_Labels;
@class GTLRVMMigrationService_NetworkInterface;
@class GTLRVMMigrationService_Operation;
@class GTLRVMMigrationService_Operation_Metadata;
@class GTLRVMMigrationService_Operation_Response;
@class GTLRVMMigrationService_PostProcessingStep;
@class GTLRVMMigrationService_PreparingVMDisksStep;
@class GTLRVMMigrationService_ReplicatingStep;
@class GTLRVMMigrationService_ReplicationCycle;
@class GTLRVMMigrationService_ReplicationSync;
@class GTLRVMMigrationService_SchedulePolicy;
@class GTLRVMMigrationService_SchedulingNodeAffinity;
@class GTLRVMMigrationService_ShuttingDownSourceVMStep;
@class GTLRVMMigrationService_Source;
@class GTLRVMMigrationService_Source_Labels;
@class GTLRVMMigrationService_Status;
@class GTLRVMMigrationService_Status_Details_Item;
@class GTLRVMMigrationService_TargetProject;
@class GTLRVMMigrationService_UpgradeStatus;
@class GTLRVMMigrationService_UtilizationReport;
@class GTLRVMMigrationService_VmUtilizationInfo;
@class GTLRVMMigrationService_VmUtilizationMetrics;
@class GTLRVMMigrationService_VmwareSourceDetails;
@class GTLRVMMigrationService_VmwareVmDetails;
@class GTLRVMMigrationService_VmwareVmsDetails;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_AppliedLicense.type

/**
 *  The license type is Bring Your Own License type.
 *
 *  Value: "BYOL"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_AppliedLicense_Type_Byol;
/**
 *  No license available for the OS.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_AppliedLicense_Type_None;
/**
 *  The license type is Pay As You Go license type.
 *
 *  Value: "PAYG"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_AppliedLicense_Type_Payg;
/**
 *  Unspecified license for the OS.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_AppliedLicense_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_CloneJob.state

/**
 *  The clone job is active and running.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_CloneJob_State_Active;
/**
 *  OS adaptation is running as part of the clone job to generate license.
 *
 *  Value: "ADAPTING_OS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_CloneJob_State_AdaptingOs;
/**
 *  The clone job was cancelled.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_CloneJob_State_Cancelled;
/**
 *  The clone job is being cancelled.
 *
 *  Value: "CANCELLING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_CloneJob_State_Cancelling;
/**
 *  The clone job finished with errors.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_CloneJob_State_Failed;
/**
 *  The clone job has not yet started.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_CloneJob_State_Pending;
/**
 *  The state is unknown. This is used for API compatibility only and is not
 *  used by the system.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_CloneJob_State_StateUnspecified;
/**
 *  The clone job finished successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_CloneJob_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_ComputeEngineTargetDefaults.bootOption

/**
 *  The boot option is BIOS.
 *
 *  Value: "COMPUTE_ENGINE_BOOT_OPTION_BIOS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDefaults_BootOption_ComputeEngineBootOptionBios;
/**
 *  The boot option is EFI.
 *
 *  Value: "COMPUTE_ENGINE_BOOT_OPTION_EFI"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDefaults_BootOption_ComputeEngineBootOptionEfi;
/**
 *  The boot option is unknown.
 *
 *  Value: "COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDefaults_BootOption_ComputeEngineBootOptionUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_ComputeEngineTargetDefaults.diskType

/**
 *  An alternative to SSD persistent disks that balance performance and cost.
 *
 *  Value: "COMPUTE_ENGINE_DISK_TYPE_BALANCED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDefaults_DiskType_ComputeEngineDiskTypeBalanced;
/**
 *  SSD hard disk type.
 *
 *  Value: "COMPUTE_ENGINE_DISK_TYPE_SSD"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDefaults_DiskType_ComputeEngineDiskTypeSsd;
/**
 *  A Standard disk type.
 *
 *  Value: "COMPUTE_ENGINE_DISK_TYPE_STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDefaults_DiskType_ComputeEngineDiskTypeStandard;
/**
 *  An unspecified disk type. Will be used as STANDARD.
 *
 *  Value: "COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDefaults_DiskType_ComputeEngineDiskTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_ComputeEngineTargetDefaults.licenseType

/**
 *  The license type is Bring Your Own License type.
 *
 *  Value: "COMPUTE_ENGINE_LICENSE_TYPE_BYOL"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDefaults_LicenseType_ComputeEngineLicenseTypeByol;
/**
 *  The license type is the default for the OS.
 *
 *  Value: "COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDefaults_LicenseType_ComputeEngineLicenseTypeDefault;
/**
 *  The license type is Pay As You Go license type.
 *
 *  Value: "COMPUTE_ENGINE_LICENSE_TYPE_PAYG"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDefaults_LicenseType_ComputeEngineLicenseTypePayg;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_ComputeEngineTargetDetails.bootOption

/**
 *  The boot option is BIOS.
 *
 *  Value: "COMPUTE_ENGINE_BOOT_OPTION_BIOS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDetails_BootOption_ComputeEngineBootOptionBios;
/**
 *  The boot option is EFI.
 *
 *  Value: "COMPUTE_ENGINE_BOOT_OPTION_EFI"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDetails_BootOption_ComputeEngineBootOptionEfi;
/**
 *  The boot option is unknown.
 *
 *  Value: "COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDetails_BootOption_ComputeEngineBootOptionUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_ComputeEngineTargetDetails.diskType

/**
 *  An alternative to SSD persistent disks that balance performance and cost.
 *
 *  Value: "COMPUTE_ENGINE_DISK_TYPE_BALANCED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDetails_DiskType_ComputeEngineDiskTypeBalanced;
/**
 *  SSD hard disk type.
 *
 *  Value: "COMPUTE_ENGINE_DISK_TYPE_SSD"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDetails_DiskType_ComputeEngineDiskTypeSsd;
/**
 *  A Standard disk type.
 *
 *  Value: "COMPUTE_ENGINE_DISK_TYPE_STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDetails_DiskType_ComputeEngineDiskTypeStandard;
/**
 *  An unspecified disk type. Will be used as STANDARD.
 *
 *  Value: "COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDetails_DiskType_ComputeEngineDiskTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_ComputeEngineTargetDetails.licenseType

/**
 *  The license type is Bring Your Own License type.
 *
 *  Value: "COMPUTE_ENGINE_LICENSE_TYPE_BYOL"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDetails_LicenseType_ComputeEngineLicenseTypeByol;
/**
 *  The license type is the default for the OS.
 *
 *  Value: "COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDetails_LicenseType_ComputeEngineLicenseTypeDefault;
/**
 *  The license type is Pay As You Go license type.
 *
 *  Value: "COMPUTE_ENGINE_LICENSE_TYPE_PAYG"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeEngineTargetDetails_LicenseType_ComputeEngineLicenseTypePayg;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_ComputeScheduling.onHostMaintenance

/**
 *  Migrate the instance when the host machine undergoes maintenance.
 *
 *  Value: "MIGRATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeScheduling_OnHostMaintenance_Migrate;
/**
 *  An unknown, unexpected behavior.
 *
 *  Value: "ON_HOST_MAINTENANCE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeScheduling_OnHostMaintenance_OnHostMaintenanceUnspecified;
/**
 *  Terminate the instance when the host machine undergoes maintenance.
 *
 *  Value: "TERMINATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeScheduling_OnHostMaintenance_Terminate;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_ComputeScheduling.restartType

/**
 *  The Instance should be automatically restarted whenever it is terminated by
 *  Compute Engine.
 *
 *  Value: "AUTOMATIC_RESTART"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeScheduling_RestartType_AutomaticRestart;
/**
 *  The Instance isn't automatically restarted whenever it is terminated by
 *  Compute Engine.
 *
 *  Value: "NO_AUTOMATIC_RESTART"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeScheduling_RestartType_NoAutomaticRestart;
/**
 *  Unspecified behavior. This will use the default.
 *
 *  Value: "RESTART_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ComputeScheduling_RestartType_RestartTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_CutoverJob.state

/**
 *  The cutover job is active and running.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_CutoverJob_State_Active;
/**
 *  OS adaptation is running as part of the cutover job to generate license.
 *
 *  Value: "ADAPTING_OS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_CutoverJob_State_AdaptingOs;
/**
 *  The cutover job was cancelled.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_CutoverJob_State_Cancelled;
/**
 *  The cutover job is being cancelled.
 *
 *  Value: "CANCELLING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_CutoverJob_State_Cancelling;
/**
 *  The cutover job finished with errors.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_CutoverJob_State_Failed;
/**
 *  The cutover job has not yet started.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_CutoverJob_State_Pending;
/**
 *  The state is unknown. This is used for API compatibility only and is not
 *  used by the system.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_CutoverJob_State_StateUnspecified;
/**
 *  The cutover job finished successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_CutoverJob_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_DatacenterConnector.state

/**
 *  The source exists and its credentials were verified.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_DatacenterConnector_State_Active;
/**
 *  The source is available but might not be usable yet due to unvalidated
 *  credentials or another reason. The credentials referred to are the ones to
 *  the Source. The error message will contain further details.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_DatacenterConnector_State_Failed;
/**
 *  The source was sampled by health checks and is not available.
 *
 *  Value: "OFFLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_DatacenterConnector_State_Offline;
/**
 *  The state was not sampled by the health checks yet.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_DatacenterConnector_State_Pending;
/**
 *  The state is unknown. This is used for API compatibility only and is not
 *  used by the system.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_DatacenterConnector_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_MigratingVm.state

/**
 *  The replication is active, and it's running or scheduled to run.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigratingVm_State_Active;
/**
 *  The source VM was stopped and replicated. The replication is currently
 *  paused.
 *
 *  Value: "CUTOVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigratingVm_State_Cutover;
/**
 *  The source VM is being turned off, and a final replication is currently
 *  running.
 *
 *  Value: "CUTTING_OVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigratingVm_State_CuttingOver;
/**
 *  The replication process encountered an unrecoverable error and was aborted.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigratingVm_State_Error;
/**
 *  The replication process is done. The migrating VM is finalized and no longer
 *  consumes billable resources.
 *
 *  Value: "FINALIZED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigratingVm_State_Finalized;
/**
 *  The migrating VM is being finalized and migration resources are being
 *  removed.
 *
 *  Value: "FINALIZING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigratingVm_State_Finalizing;
/**
 *  A cutover job is active and replication cycle is running the final sync.
 *
 *  Value: "FINAL_SYNC"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigratingVm_State_FinalSync;
/**
 *  Migration is going through the first sync cycle.
 *
 *  Value: "FIRST_SYNC"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigratingVm_State_FirstSync;
/**
 *  The replication was paused by the user and no cycles are scheduled to run.
 *
 *  Value: "PAUSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigratingVm_State_Paused;
/**
 *  The VM in the source is being verified.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigratingVm_State_Pending;
/**
 *  The source VM was verified, and it's ready to start replication.
 *
 *  Value: "READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigratingVm_State_Ready;
/**
 *  The state was not sampled by the health checks yet.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigratingVm_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_MigrationError.code

/**
 *  Migrate for Compute encountered an error during appliance upgrade.
 *
 *  Value: "APPLIANCE_UPGRADE_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigrationError_Code_ApplianceUpgradeError;
/**
 *  Migrate for Compute encountered an error in clone operation.
 *
 *  Value: "CLONE_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigrationError_Code_CloneError;
/**
 *  Migrate for Compute encountered an error in cutover operation.
 *
 *  Value: "CUTOVER_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigrationError_Code_CutoverError;
/**
 *  Default value. This value is not used.
 *
 *  Value: "ERROR_CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigrationError_Code_ErrorCodeUnspecified;
/**
 *  Migrate for Compute encountered an error during OS adaptation.
 *
 *  Value: "OS_ADAPTATION_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigrationError_Code_OsAdaptationError;
/**
 *  Migrate for Compute encountered an error during source data operation.
 *
 *  Value: "SOURCE_REPLICATION_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigrationError_Code_SourceReplicationError;
/**
 *  Migrate for Compute encountered an error while validating replication source
 *  health.
 *
 *  Value: "SOURCE_VALIDATION_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigrationError_Code_SourceValidationError;
/**
 *  Migrate for Compute encountered an error during target data operation.
 *
 *  Value: "TARGET_REPLICATION_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigrationError_Code_TargetReplicationError;
/**
 *  Migrate for Compute encountered an unknown error.
 *
 *  Value: "UNKNOWN_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigrationError_Code_UnknownError;
/**
 *  Migrate for Compute encountered an error during utilization report creation.
 *
 *  Value: "UTILIZATION_REPORT_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_MigrationError_Code_UtilizationReportError;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_ReplicationCycle.state

/**
 *  The replication cycle finished with errors.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ReplicationCycle_State_Failed;
/**
 *  The replication cycle is paused.
 *
 *  Value: "PAUSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ReplicationCycle_State_Paused;
/**
 *  The replication cycle is running.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ReplicationCycle_State_Running;
/**
 *  The state is unknown. This is used for API compatibility only and is not
 *  used by the system.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ReplicationCycle_State_StateUnspecified;
/**
 *  The replication cycle finished successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_ReplicationCycle_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_SchedulingNodeAffinity.operatorProperty

/**
 *  The node resource group should be in these resources affinity.
 *
 *  Value: "IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_SchedulingNodeAffinity_OperatorProperty_In;
/**
 *  The node resource group should not be in these resources affinity.
 *
 *  Value: "NOT_IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_SchedulingNodeAffinity_OperatorProperty_NotIn;
/**
 *  An unknown, unexpected behavior.
 *
 *  Value: "OPERATOR_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_SchedulingNodeAffinity_OperatorProperty_OperatorUnspecified;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_UpgradeStatus.state

/**
 *  The upgrade failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_UpgradeStatus_State_Failed;
/**
 *  The upgrade has started.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_UpgradeStatus_State_Running;
/**
 *  The state was not sampled by the health checks yet.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_UpgradeStatus_State_StateUnspecified;
/**
 *  The upgrade finished successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_UpgradeStatus_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_UtilizationReport.state

/**
 *  The report is in the making.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_UtilizationReport_State_Creating;
/**
 *  Report creation failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_UtilizationReport_State_Failed;
/**
 *  The state is unknown. This value is not in use.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_UtilizationReport_State_StateUnspecified;
/**
 *  Report creation completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_UtilizationReport_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_UtilizationReport.timeFrame

/**
 *  One month.
 *
 *  Value: "MONTH"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_UtilizationReport_TimeFrame_Month;
/**
 *  The time frame was not specified and will default to WEEK.
 *
 *  Value: "TIME_FRAME_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_UtilizationReport_TimeFrame_TimeFrameUnspecified;
/**
 *  One week.
 *
 *  Value: "WEEK"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_UtilizationReport_TimeFrame_Week;
/**
 *  One year.
 *
 *  Value: "YEAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_UtilizationReport_TimeFrame_Year;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_VmwareVmDetails.bootOption

/**
 *  The boot option is BIOS.
 *
 *  Value: "BIOS"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_VmwareVmDetails_BootOption_Bios;
/**
 *  The boot option is unknown.
 *
 *  Value: "BOOT_OPTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_VmwareVmDetails_BootOption_BootOptionUnspecified;
/**
 *  The boot option is EFI.
 *
 *  Value: "EFI"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_VmwareVmDetails_BootOption_Efi;

// ----------------------------------------------------------------------------
// GTLRVMMigrationService_VmwareVmDetails.powerState

/**
 *  The VM is turned OFF.
 *
 *  Value: "OFF"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_VmwareVmDetails_PowerState_Off;
/**
 *  The VM is turned ON.
 *
 *  Value: "ON"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_VmwareVmDetails_PowerState_On;
/**
 *  Power state is not specified.
 *
 *  Value: "POWER_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_VmwareVmDetails_PowerState_PowerStateUnspecified;
/**
 *  The VM is suspended. This is similar to hibernation or sleep mode.
 *
 *  Value: "SUSPENDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRVMMigrationService_VmwareVmDetails_PowerState_Suspended;

/**
 *  AdaptingOSStep contains specific step details.
 */
@interface GTLRVMMigrationService_AdaptingOSStep : GTLRObject
@end


/**
 *  Request message for 'AddGroupMigration' request.
 */
@interface GTLRVMMigrationService_AddGroupMigrationRequest : GTLRObject

/** The full path name of the MigratingVm to add. */
@property(nonatomic, copy, nullable) NSString *migratingVm;

@end


/**
 *  Describes an appliance version.
 */
@interface GTLRVMMigrationService_ApplianceVersion : GTLRObject

/**
 *  Determine whether it's critical to upgrade the appliance to this version.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *critical;

/** Link to a page that contains the version release notes. */
@property(nonatomic, copy, nullable) NSString *releaseNotesUri;

/** A link for downloading the version. */
@property(nonatomic, copy, nullable) NSString *uri;

/** The appliance version. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  AppliedLicense holds the license data returned by adaptation module report.
 */
@interface GTLRVMMigrationService_AppliedLicense : GTLRObject

/** The OS license returned from the adaptation module's report. */
@property(nonatomic, copy, nullable) NSString *osLicense;

/**
 *  The license type that was used in OS adaptation.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_AppliedLicense_Type_Byol The license type
 *        is Bring Your Own License type. (Value: "BYOL")
 *    @arg @c kGTLRVMMigrationService_AppliedLicense_Type_None No license
 *        available for the OS. (Value: "NONE")
 *    @arg @c kGTLRVMMigrationService_AppliedLicense_Type_Payg The license type
 *        is Pay As You Go license type. (Value: "PAYG")
 *    @arg @c kGTLRVMMigrationService_AppliedLicense_Type_TypeUnspecified
 *        Unspecified license for the OS. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Holds informatiom about the available versions for upgrade.
 */
@interface GTLRVMMigrationService_AvailableUpdates : GTLRObject

/**
 *  The latest version for in place update. The current appliance can be updated
 *  to this version using the API or m4c CLI.
 */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ApplianceVersion *inPlaceUpdate;

/**
 *  The newest deployable version of the appliance. The current appliance can't
 *  be updated into this version, and the owner must manually deploy this OVA to
 *  a new appliance.
 */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ApplianceVersion *newDeployableAppliance NS_RETURNS_NOT_RETAINED;

@end


/**
 *  Request message for 'CancelCloneJob' request.
 */
@interface GTLRVMMigrationService_CancelCloneJobRequest : GTLRObject
@end


/**
 *  Request message for 'CancelCutoverJob' request.
 */
@interface GTLRVMMigrationService_CancelCutoverJobRequest : GTLRObject
@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRVMMigrationService_CancelOperationRequest : GTLRObject
@end


/**
 *  CloneJob describes the process of creating a clone of a MigratingVM to the
 *  requested target based on the latest successful uploaded snapshots. While
 *  the migration cycles of a MigratingVm take place, it is possible to verify
 *  the uploaded VM can be started in the cloud, by creating a clone. The clone
 *  can be created without any downtime, and it is created using the latest
 *  snapshots which are already in the cloud. The cloneJob is only responsible
 *  for its work, not its products, which means once it is finished, it will
 *  never touch the instance it created. It will only delete it in case of the
 *  CloneJob being cancelled or upon failure to clone.
 */
@interface GTLRVMMigrationService_CloneJob : GTLRObject

/** Output only. Details of the target VM in Compute Engine. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ComputeEngineTargetDetails *computeEngineTargetDetails;

/**
 *  Output only. The time the clone job was created (as an API call, not when it
 *  was actually created in the target).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the clone job was ended. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Provides details for the errors that led to the Clone Job's
 *  state.
 */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_Status *error;

/** Output only. The name of the clone. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. State of the clone job.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_CloneJob_State_Active The clone job is
 *        active and running. (Value: "ACTIVE")
 *    @arg @c kGTLRVMMigrationService_CloneJob_State_AdaptingOs OS adaptation is
 *        running as part of the clone job to generate license. (Value:
 *        "ADAPTING_OS")
 *    @arg @c kGTLRVMMigrationService_CloneJob_State_Cancelled The clone job was
 *        cancelled. (Value: "CANCELLED")
 *    @arg @c kGTLRVMMigrationService_CloneJob_State_Cancelling The clone job is
 *        being cancelled. (Value: "CANCELLING")
 *    @arg @c kGTLRVMMigrationService_CloneJob_State_Failed The clone job
 *        finished with errors. (Value: "FAILED")
 *    @arg @c kGTLRVMMigrationService_CloneJob_State_Pending The clone job has
 *        not yet started. (Value: "PENDING")
 *    @arg @c kGTLRVMMigrationService_CloneJob_State_StateUnspecified The state
 *        is unknown. This is used for API compatibility only and is not used by
 *        the system. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRVMMigrationService_CloneJob_State_Succeeded The clone job
 *        finished successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The time the state was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *stateTime;

/** Output only. The clone steps list representing its progress. */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_CloneStep *> *steps;

@end


/**
 *  CloneStep holds information about the clone step progress.
 */
@interface GTLRVMMigrationService_CloneStep : GTLRObject

/** Adapting OS step. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_AdaptingOSStep *adaptingOs;

/** The time the step has ended. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Instantiating migrated VM step. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_InstantiatingMigratedVMStep *instantiatingMigratedVm;

/** Preparing VM disks step. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_PreparingVMDisksStep *preparingVmDisks;

/** The time the step has started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  ComputeEngineTargetDefaults is a collection of details for creating a VM in
 *  a target Compute Engine project.
 */
@interface GTLRVMMigrationService_ComputeEngineTargetDefaults : GTLRObject

/** Additional licenses to assign to the VM. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *additionalLicenses;

/** Output only. The OS license returned from the adaptation module report. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_AppliedLicense *appliedLicense;

/**
 *  Output only. The VM Boot Option, as set in the source vm.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDefaults_BootOption_ComputeEngineBootOptionBios
 *        The boot option is BIOS. (Value: "COMPUTE_ENGINE_BOOT_OPTION_BIOS")
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDefaults_BootOption_ComputeEngineBootOptionEfi
 *        The boot option is EFI. (Value: "COMPUTE_ENGINE_BOOT_OPTION_EFI")
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDefaults_BootOption_ComputeEngineBootOptionUnspecified
 *        The boot option is unknown. (Value:
 *        "COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *bootOption;

/** Compute instance scheduling information (if empty default is used). */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ComputeScheduling *computeScheduling;

/**
 *  The disk type to use in the VM.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDefaults_DiskType_ComputeEngineDiskTypeBalanced
 *        An alternative to SSD persistent disks that balance performance and
 *        cost. (Value: "COMPUTE_ENGINE_DISK_TYPE_BALANCED")
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDefaults_DiskType_ComputeEngineDiskTypeSsd
 *        SSD hard disk type. (Value: "COMPUTE_ENGINE_DISK_TYPE_SSD")
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDefaults_DiskType_ComputeEngineDiskTypeStandard
 *        A Standard disk type. (Value: "COMPUTE_ENGINE_DISK_TYPE_STANDARD")
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDefaults_DiskType_ComputeEngineDiskTypeUnspecified
 *        An unspecified disk type. Will be used as STANDARD. (Value:
 *        "COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *diskType;

/** The hostname to assign to the VM. */
@property(nonatomic, copy, nullable) NSString *hostname;

/** A map of labels to associate with the VM. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ComputeEngineTargetDefaults_Labels *labels;

/**
 *  The license type to use in OS adaptation.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDefaults_LicenseType_ComputeEngineLicenseTypeByol
 *        The license type is Bring Your Own License type. (Value:
 *        "COMPUTE_ENGINE_LICENSE_TYPE_BYOL")
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDefaults_LicenseType_ComputeEngineLicenseTypeDefault
 *        The license type is the default for the OS. (Value:
 *        "COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT")
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDefaults_LicenseType_ComputeEngineLicenseTypePayg
 *        The license type is Pay As You Go license type. (Value:
 *        "COMPUTE_ENGINE_LICENSE_TYPE_PAYG")
 */
@property(nonatomic, copy, nullable) NSString *licenseType;

/** The machine type to create the VM with. */
@property(nonatomic, copy, nullable) NSString *machineType;

/** The machine type series to create the VM with. */
@property(nonatomic, copy, nullable) NSString *machineTypeSeries;

/** The metadata key/value pairs to assign to the VM. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ComputeEngineTargetDefaults_Metadata *metadata;

/** List of NICs connected to this VM. */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_NetworkInterface *> *networkInterfaces;

/** A map of network tags to associate with the VM. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *networkTags;

/**
 *  Defines whether the instance has Secure Boot enabled. This can be set to
 *  true only if the vm boot option is EFI.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *secureBoot;

/** The service account to associate the VM with. */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  The full path of the resource of type TargetProject which represents the
 *  Compute Engine project in which to create this VM.
 */
@property(nonatomic, copy, nullable) NSString *targetProject;

/** The name of the VM to create. */
@property(nonatomic, copy, nullable) NSString *vmName;

/**
 *  The zone in which to create the VM.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  A map of labels to associate with the VM.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRVMMigrationService_ComputeEngineTargetDefaults_Labels : GTLRObject
@end


/**
 *  The metadata key/value pairs to assign to the VM.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRVMMigrationService_ComputeEngineTargetDefaults_Metadata : GTLRObject
@end


/**
 *  ComputeEngineTargetDetails is a collection of details for creating a VM in a
 *  target Compute Engine project.
 */
@interface GTLRVMMigrationService_ComputeEngineTargetDetails : GTLRObject

/** Additional licenses to assign to the VM. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *additionalLicenses;

/** The OS license returned from the adaptation module report. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_AppliedLicense *appliedLicense;

/**
 *  The VM Boot Option, as set in the source vm.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDetails_BootOption_ComputeEngineBootOptionBios
 *        The boot option is BIOS. (Value: "COMPUTE_ENGINE_BOOT_OPTION_BIOS")
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDetails_BootOption_ComputeEngineBootOptionEfi
 *        The boot option is EFI. (Value: "COMPUTE_ENGINE_BOOT_OPTION_EFI")
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDetails_BootOption_ComputeEngineBootOptionUnspecified
 *        The boot option is unknown. (Value:
 *        "COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *bootOption;

/** Compute instance scheduling information (if empty default is used). */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ComputeScheduling *computeScheduling;

/**
 *  The disk type to use in the VM.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDetails_DiskType_ComputeEngineDiskTypeBalanced
 *        An alternative to SSD persistent disks that balance performance and
 *        cost. (Value: "COMPUTE_ENGINE_DISK_TYPE_BALANCED")
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDetails_DiskType_ComputeEngineDiskTypeSsd
 *        SSD hard disk type. (Value: "COMPUTE_ENGINE_DISK_TYPE_SSD")
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDetails_DiskType_ComputeEngineDiskTypeStandard
 *        A Standard disk type. (Value: "COMPUTE_ENGINE_DISK_TYPE_STANDARD")
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDetails_DiskType_ComputeEngineDiskTypeUnspecified
 *        An unspecified disk type. Will be used as STANDARD. (Value:
 *        "COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *diskType;

/** The hostname to assign to the VM. */
@property(nonatomic, copy, nullable) NSString *hostname;

/** A map of labels to associate with the VM. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ComputeEngineTargetDetails_Labels *labels;

/**
 *  The license type to use in OS adaptation.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDetails_LicenseType_ComputeEngineLicenseTypeByol
 *        The license type is Bring Your Own License type. (Value:
 *        "COMPUTE_ENGINE_LICENSE_TYPE_BYOL")
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDetails_LicenseType_ComputeEngineLicenseTypeDefault
 *        The license type is the default for the OS. (Value:
 *        "COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT")
 *    @arg @c kGTLRVMMigrationService_ComputeEngineTargetDetails_LicenseType_ComputeEngineLicenseTypePayg
 *        The license type is Pay As You Go license type. (Value:
 *        "COMPUTE_ENGINE_LICENSE_TYPE_PAYG")
 */
@property(nonatomic, copy, nullable) NSString *licenseType;

/** The machine type to create the VM with. */
@property(nonatomic, copy, nullable) NSString *machineType;

/** The machine type series to create the VM with. */
@property(nonatomic, copy, nullable) NSString *machineTypeSeries;

/** The metadata key/value pairs to assign to the VM. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ComputeEngineTargetDetails_Metadata *metadata;

/** List of NICs connected to this VM. */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_NetworkInterface *> *networkInterfaces;

/** A map of network tags to associate with the VM. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *networkTags;

/** The GCP target project ID or project name. */
@property(nonatomic, copy, nullable) NSString *project;

/**
 *  Defines whether the instance has Secure Boot enabled. This can be set to
 *  true only if the vm boot option is EFI.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *secureBoot;

/** The service account to associate the VM with. */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/** The name of the VM to create. */
@property(nonatomic, copy, nullable) NSString *vmName;

/**
 *  The zone in which to create the VM.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  A map of labels to associate with the VM.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRVMMigrationService_ComputeEngineTargetDetails_Labels : GTLRObject
@end


/**
 *  The metadata key/value pairs to assign to the VM.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRVMMigrationService_ComputeEngineTargetDetails_Metadata : GTLRObject
@end


/**
 *  Scheduling information for VM on maintenance/restart behaviour and node
 *  allocation in sole tenant nodes.
 */
@interface GTLRVMMigrationService_ComputeScheduling : GTLRObject

/**
 *  The minimum number of virtual CPUs this instance will consume when running
 *  on a sole-tenant node. Ignored if no node_affinites are configured.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minNodeCpus;

/**
 *  A set of node affinity and anti-affinity configurations for sole tenant
 *  nodes.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_SchedulingNodeAffinity *> *nodeAffinities;

/**
 *  How the instance should behave when the host machine undergoes maintenance
 *  that may temporarily impact instance performance.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_ComputeScheduling_OnHostMaintenance_Migrate
 *        Migrate the instance when the host machine undergoes maintenance.
 *        (Value: "MIGRATE")
 *    @arg @c kGTLRVMMigrationService_ComputeScheduling_OnHostMaintenance_OnHostMaintenanceUnspecified
 *        An unknown, unexpected behavior. (Value:
 *        "ON_HOST_MAINTENANCE_UNSPECIFIED")
 *    @arg @c kGTLRVMMigrationService_ComputeScheduling_OnHostMaintenance_Terminate
 *        Terminate the instance when the host machine undergoes maintenance.
 *        (Value: "TERMINATE")
 */
@property(nonatomic, copy, nullable) NSString *onHostMaintenance;

/**
 *  Whether the Instance should be automatically restarted whenever it is
 *  terminated by Compute Engine (not terminated by user). This configuration is
 *  identical to `automaticRestart` field in Compute Engine create instance
 *  under scheduling. It was changed to an enum (instead of a boolean) to match
 *  the default value in Compute Engine which is automatic restart.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_ComputeScheduling_RestartType_AutomaticRestart
 *        The Instance should be automatically restarted whenever it is
 *        terminated by Compute Engine. (Value: "AUTOMATIC_RESTART")
 *    @arg @c kGTLRVMMigrationService_ComputeScheduling_RestartType_NoAutomaticRestart
 *        The Instance isn't automatically restarted whenever it is terminated
 *        by Compute Engine. (Value: "NO_AUTOMATIC_RESTART")
 *    @arg @c kGTLRVMMigrationService_ComputeScheduling_RestartType_RestartTypeUnspecified
 *        Unspecified behavior. This will use the default. (Value:
 *        "RESTART_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *restartType;

@end


/**
 *  CutoverJob message describes a cutover of a migrating VM. The CutoverJob is
 *  the operation of shutting down the VM, creating a snapshot and clonning the
 *  VM using the replicated snapshot.
 */
@interface GTLRVMMigrationService_CutoverJob : GTLRObject

/** Output only. Details of the target VM in Compute Engine. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ComputeEngineTargetDetails *computeEngineTargetDetails;

/**
 *  Output only. The time the cutover job was created (as an API call, not when
 *  it was actually created in the target).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the cutover job had finished. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Provides details for the errors that led to the Cutover Job's
 *  state.
 */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_Status *error;

/** Output only. The name of the cutover job. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The current progress in percentage of the cutover job.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *progressPercent;

/**
 *  Output only. State of the cutover job.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_CutoverJob_State_Active The cutover job is
 *        active and running. (Value: "ACTIVE")
 *    @arg @c kGTLRVMMigrationService_CutoverJob_State_AdaptingOs OS adaptation
 *        is running as part of the cutover job to generate license. (Value:
 *        "ADAPTING_OS")
 *    @arg @c kGTLRVMMigrationService_CutoverJob_State_Cancelled The cutover job
 *        was cancelled. (Value: "CANCELLED")
 *    @arg @c kGTLRVMMigrationService_CutoverJob_State_Cancelling The cutover
 *        job is being cancelled. (Value: "CANCELLING")
 *    @arg @c kGTLRVMMigrationService_CutoverJob_State_Failed The cutover job
 *        finished with errors. (Value: "FAILED")
 *    @arg @c kGTLRVMMigrationService_CutoverJob_State_Pending The cutover job
 *        has not yet started. (Value: "PENDING")
 *    @arg @c kGTLRVMMigrationService_CutoverJob_State_StateUnspecified The
 *        state is unknown. This is used for API compatibility only and is not
 *        used by the system. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRVMMigrationService_CutoverJob_State_Succeeded The cutover job
 *        finished successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. A message providing possible extra details about the current
 *  state.
 */
@property(nonatomic, copy, nullable) NSString *stateMessage;

/** Output only. The time the state was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *stateTime;

/** Output only. The cutover steps list representing its progress. */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_CutoverStep *> *steps;

@end


/**
 *  CutoverStep holds information about the cutover step progress.
 */
@interface GTLRVMMigrationService_CutoverStep : GTLRObject

/** The time the step has ended. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Final sync step. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ReplicationCycle *finalSync;

/** Instantiating migrated VM step. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_InstantiatingMigratedVMStep *instantiatingMigratedVm;

/** Preparing VM disks step. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_PreparingVMDisksStep *preparingVmDisks;

/** A replication cycle prior cutover step. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ReplicationCycle *previousReplicationCycle;

/** Shutting down VM step. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ShuttingDownSourceVMStep *shuttingDownSourceVm;

/** The time the step has started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  CycleStep holds information about a step progress.
 */
@interface GTLRVMMigrationService_CycleStep : GTLRObject

/** The time the cycle step has ended. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Initializing replication step. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_InitializingReplicationStep *initializingReplication;

/** Post processing step. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_PostProcessingStep *postProcessing;

/** Replicating step. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ReplicatingStep *replicating;

/** The time the cycle step has started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  DatacenterConnector message describes a connector between the Source and
 *  GCP, which is installed on a vmware datacenter (an OVA vm installed by the
 *  user) to connect the Datacenter to GCP and support vm migration data
 *  transfer.
 */
@interface GTLRVMMigrationService_DatacenterConnector : GTLRObject

/**
 *  Output only. Appliance OVA version. This is the OVA which is manually
 *  installed by the user and contains the infrastructure for the automatically
 *  updatable components on the appliance.
 */
@property(nonatomic, copy, nullable) NSString *applianceInfrastructureVersion;

/**
 *  Output only. Appliance last installed update bundle version. This is the
 *  version of the automatically updatable components on the appliance.
 */
@property(nonatomic, copy, nullable) NSString *applianceSoftwareVersion;

/** Output only. The available versions for updating this appliance. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_AvailableUpdates *availableVersions;

/**
 *  Output only. The communication channel between the datacenter connector and
 *  GCP.
 */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Output only. The time the connector was created (as an API call, not when it
 *  was actually installed).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. Provides details on the state of the Datacenter Connector in
 *  case of an error.
 */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_Status *error;

/** Output only. The connector's name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Immutable. A unique key for this connector. This key is internal to the OVA
 *  connector and is supplied with its creation during the registration process
 *  and can not be modified.
 */
@property(nonatomic, copy, nullable) NSString *registrationId;

/**
 *  The service account to use in the connector when communicating with the
 *  cloud.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Output only. State of the DatacenterConnector, as determined by the health
 *  checks.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_DatacenterConnector_State_Active The
 *        source exists and its credentials were verified. (Value: "ACTIVE")
 *    @arg @c kGTLRVMMigrationService_DatacenterConnector_State_Failed The
 *        source is available but might not be usable yet due to unvalidated
 *        credentials or another reason. The credentials referred to are the
 *        ones to the Source. The error message will contain further details.
 *        (Value: "FAILED")
 *    @arg @c kGTLRVMMigrationService_DatacenterConnector_State_Offline The
 *        source was sampled by health checks and is not available. (Value:
 *        "OFFLINE")
 *    @arg @c kGTLRVMMigrationService_DatacenterConnector_State_Pending The
 *        state was not sampled by the health checks yet. (Value: "PENDING")
 *    @arg @c kGTLRVMMigrationService_DatacenterConnector_State_StateUnspecified
 *        The state is unknown. This is used for API compatibility only and is
 *        not used by the system. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The time the state was last set. */
@property(nonatomic, strong, nullable) GTLRDateTime *stateTime;

/** Output only. The last time the connector was updated with an API call. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Output only. The status of the current / last upgradeAppliance operation.
 */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_UpgradeStatus *upgradeStatus;

/**
 *  The version running in the DatacenterConnector. This is supplied by the OVA
 *  connector during the registration process and can not be modified.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRVMMigrationService_Empty : GTLRObject
@end


/**
 *  Response message for fetchInventory.
 */
@interface GTLRVMMigrationService_FetchInventoryResponse : GTLRObject

/**
 *  Output only. A token, which can be sent as `page_token` to retrieve the next
 *  page. If this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Output only. The timestamp when the source was last queried (if the result
 *  is from the cache).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** The description of the VMs in a Source of type Vmware. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_VmwareVmsDetails *vmwareVms;

@end


/**
 *  Request message for 'FinalizeMigration' request.
 */
@interface GTLRVMMigrationService_FinalizeMigrationRequest : GTLRObject
@end


/**
 *  Describes message for 'Group' resource. The Group is a collections of
 *  several MigratingVms.
 */
@interface GTLRVMMigrationService_Group : GTLRObject

/** Output only. The create time timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  User-provided description of the group.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Display name is a user defined name for this group which can be updated.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Output only. The Group name. */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The update time timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  InitializingReplicationStep contains specific step details.
 */
@interface GTLRVMMigrationService_InitializingReplicationStep : GTLRObject
@end


/**
 *  InstantiatingMigratedVMStep contains specific step details.
 */
@interface GTLRVMMigrationService_InstantiatingMigratedVMStep : GTLRObject
@end


/**
 *  Describes a URL link.
 */
@interface GTLRVMMigrationService_Link : GTLRObject

/**
 *  Describes what the link offers.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The URL of the link. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Response message for 'ListCloneJobs' request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "cloneJobs" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVMMigrationService_ListCloneJobsResponse : GTLRCollectionObject

/**
 *  Output only. The list of clone jobs response.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_CloneJob *> *cloneJobs;

/**
 *  Output only. A token, which can be sent as `page_token` to retrieve the next
 *  page. If this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Output only. Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for 'ListCutoverJobs' request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "cutoverJobs" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVMMigrationService_ListCutoverJobsResponse : GTLRCollectionObject

/**
 *  Output only. The list of cutover jobs response.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_CutoverJob *> *cutoverJobs;

/**
 *  Output only. A token, which can be sent as `page_token` to retrieve the next
 *  page. If this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Output only. Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for 'ListDatacenterConnectors' request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "datacenterConnectors" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRVMMigrationService_ListDatacenterConnectorsResponse : GTLRCollectionObject

/**
 *  Output only. The list of sources response.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_DatacenterConnector *> *datacenterConnectors;

/**
 *  Output only. A token, which can be sent as `page_token` to retrieve the next
 *  page. If this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Output only. Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for 'ListGroups' request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "groups" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVMMigrationService_ListGroupsResponse : GTLRCollectionObject

/**
 *  Output only. The list of groups response.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_Group *> *groups;

/**
 *  Output only. A token, which can be sent as `page_token` to retrieve the next
 *  page. If this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Output only. Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVMMigrationService_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for 'ListMigratingVms' request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "migratingVms" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVMMigrationService_ListMigratingVmsResponse : GTLRCollectionObject

/**
 *  Output only. The list of Migrating VMs response.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_MigratingVm *> *migratingVms;

/**
 *  Output only. A token, which can be sent as `page_token` to retrieve the next
 *  page. If this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Output only. Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVMMigrationService_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_Operation *> *operations;

@end


/**
 *  Response message for 'ListReplicationCycles' request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "replicationCycles" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRVMMigrationService_ListReplicationCyclesResponse : GTLRCollectionObject

/**
 *  Output only. A token, which can be sent as `page_token` to retrieve the next
 *  page. If this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Output only. The list of replication cycles response.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_ReplicationCycle *> *replicationCycles;

/** Output only. Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for 'ListSources' request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "sources" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRVMMigrationService_ListSourcesResponse : GTLRCollectionObject

/**
 *  Output only. A token, which can be sent as `page_token` to retrieve the next
 *  page. If this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Output only. The list of sources response.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_Source *> *sources;

/** Output only. Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for 'ListTargetProjects' call.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "targetProjects" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRVMMigrationService_ListTargetProjectsResponse : GTLRCollectionObject

/**
 *  Output only. A token, which can be sent as `page_token` to retrieve the next
 *  page. If this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Output only. The list of target response.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_TargetProject *> *targetProjects;

/** Output only. Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for 'ListUtilizationReports' request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "utilizationReports" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRVMMigrationService_ListUtilizationReportsResponse : GTLRCollectionObject

/**
 *  Output only. A token, which can be sent as `page_token` to retrieve the next
 *  page. If this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Output only. Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

/**
 *  Output only. The list of reports.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_UtilizationReport *> *utilizationReports;

@end


/**
 *  Provides a localized error message that is safe to return to the user which
 *  can be attached to an RPC error.
 */
@interface GTLRVMMigrationService_LocalizedMessage : GTLRObject

/**
 *  The locale used following the specification defined at
 *  https://www.rfc-editor.org/rfc/bcp/bcp47.txt. Examples are: "en-US",
 *  "fr-CH", "es-MX"
 */
@property(nonatomic, copy, nullable) NSString *locale;

/** The localized error message in the above locale. */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRVMMigrationService_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRVMMigrationService_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRVMMigrationService_Location_Metadata : GTLRObject
@end


/**
 *  MigratingVm describes the VM that will be migrated from a Source environment
 *  and its replication state.
 */
@interface GTLRVMMigrationService_MigratingVm : GTLRObject

/** Details of the target VM in Compute Engine. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ComputeEngineTargetDefaults *computeEngineTargetDefaults;

/**
 *  Output only. The time the migrating VM was created (this refers to this
 *  resource and not to the time it was installed in the source).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The percentage progress of the current running replication
 *  cycle.
 */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ReplicationCycle *currentSyncInfo;

/**
 *  The description attached to the migrating VM by the user.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The display name attached to the MigratingVm by the user. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. Provides details on the state of the Migrating VM in case of an
 *  error in replication.
 */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_Status *error;

/**
 *  Output only. The group this migrating vm is included in, if any. The group
 *  is represented by the full path of the appropriate Group resource.
 */
@property(nonatomic, copy, nullable) NSString *group;

/** The labels of the migrating VM. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_MigratingVm_Labels *labels;

/**
 *  Output only. The most updated snapshot created time in the source that
 *  finished replication.
 */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_ReplicationSync *lastSync;

/** Output only. The identifier of the MigratingVm. */
@property(nonatomic, copy, nullable) NSString *name;

/** The replication schedule policy. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_SchedulePolicy *policy;

/**
 *  Output only. The recent clone jobs performed on the migrating VM. This field
 *  holds the vm's last completed clone job and the vm's running clone job, if
 *  one exists. Note: To have this field populated you need to explicitly
 *  request it via the "view" parameter of the Get/List request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_CloneJob *> *recentCloneJobs;

/**
 *  Output only. The recent cutover jobs performed on the migrating VM. This
 *  field holds the vm's last completed cutover job and the vm's running cutover
 *  job, if one exists. Note: To have this field populated you need to
 *  explicitly request it via the "view" parameter of the Get/List request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_CutoverJob *> *recentCutoverJobs;

/**
 *  The unique ID of the VM in the source. The VM's name in vSphere can be
 *  changed, so this is not the VM's name but rather its moRef id. This id is of
 *  the form vm-.
 */
@property(nonatomic, copy, nullable) NSString *sourceVmId;

/**
 *  Output only. State of the MigratingVm.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_MigratingVm_State_Active The replication
 *        is active, and it's running or scheduled to run. (Value: "ACTIVE")
 *    @arg @c kGTLRVMMigrationService_MigratingVm_State_Cutover The source VM
 *        was stopped and replicated. The replication is currently paused.
 *        (Value: "CUTOVER")
 *    @arg @c kGTLRVMMigrationService_MigratingVm_State_CuttingOver The source
 *        VM is being turned off, and a final replication is currently running.
 *        (Value: "CUTTING_OVER")
 *    @arg @c kGTLRVMMigrationService_MigratingVm_State_Error The replication
 *        process encountered an unrecoverable error and was aborted. (Value:
 *        "ERROR")
 *    @arg @c kGTLRVMMigrationService_MigratingVm_State_Finalized The
 *        replication process is done. The migrating VM is finalized and no
 *        longer consumes billable resources. (Value: "FINALIZED")
 *    @arg @c kGTLRVMMigrationService_MigratingVm_State_Finalizing The migrating
 *        VM is being finalized and migration resources are being removed.
 *        (Value: "FINALIZING")
 *    @arg @c kGTLRVMMigrationService_MigratingVm_State_FinalSync A cutover job
 *        is active and replication cycle is running the final sync. (Value:
 *        "FINAL_SYNC")
 *    @arg @c kGTLRVMMigrationService_MigratingVm_State_FirstSync Migration is
 *        going through the first sync cycle. (Value: "FIRST_SYNC")
 *    @arg @c kGTLRVMMigrationService_MigratingVm_State_Paused The replication
 *        was paused by the user and no cycles are scheduled to run. (Value:
 *        "PAUSED")
 *    @arg @c kGTLRVMMigrationService_MigratingVm_State_Pending The VM in the
 *        source is being verified. (Value: "PENDING")
 *    @arg @c kGTLRVMMigrationService_MigratingVm_State_Ready The source VM was
 *        verified, and it's ready to start replication. (Value: "READY")
 *    @arg @c kGTLRVMMigrationService_MigratingVm_State_StateUnspecified The
 *        state was not sampled by the health checks yet. (Value:
 *        "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The last time the migrating VM state was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *stateTime;

/** Output only. The last time the migrating VM resource was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  The labels of the migrating VM.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRVMMigrationService_MigratingVm_Labels : GTLRObject
@end


/**
 *  Represents migration resource error information that can be used with
 *  google.rpc.Status message. MigrationError is used to present the user with
 *  error information in migration operations.
 */
@interface GTLRVMMigrationService_MigrationError : GTLRObject

/** Output only. Suggested action for solving the error. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_LocalizedMessage *actionItem;

/**
 *  Output only. The error code.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_MigrationError_Code_ApplianceUpgradeError
 *        Migrate for Compute encountered an error during appliance upgrade.
 *        (Value: "APPLIANCE_UPGRADE_ERROR")
 *    @arg @c kGTLRVMMigrationService_MigrationError_Code_CloneError Migrate for
 *        Compute encountered an error in clone operation. (Value:
 *        "CLONE_ERROR")
 *    @arg @c kGTLRVMMigrationService_MigrationError_Code_CutoverError Migrate
 *        for Compute encountered an error in cutover operation. (Value:
 *        "CUTOVER_ERROR")
 *    @arg @c kGTLRVMMigrationService_MigrationError_Code_ErrorCodeUnspecified
 *        Default value. This value is not used. (Value:
 *        "ERROR_CODE_UNSPECIFIED")
 *    @arg @c kGTLRVMMigrationService_MigrationError_Code_OsAdaptationError
 *        Migrate for Compute encountered an error during OS adaptation. (Value:
 *        "OS_ADAPTATION_ERROR")
 *    @arg @c kGTLRVMMigrationService_MigrationError_Code_SourceReplicationError
 *        Migrate for Compute encountered an error during source data operation.
 *        (Value: "SOURCE_REPLICATION_ERROR")
 *    @arg @c kGTLRVMMigrationService_MigrationError_Code_SourceValidationError
 *        Migrate for Compute encountered an error while validating replication
 *        source health. (Value: "SOURCE_VALIDATION_ERROR")
 *    @arg @c kGTLRVMMigrationService_MigrationError_Code_TargetReplicationError
 *        Migrate for Compute encountered an error during target data operation.
 *        (Value: "TARGET_REPLICATION_ERROR")
 *    @arg @c kGTLRVMMigrationService_MigrationError_Code_UnknownError Migrate
 *        for Compute encountered an unknown error. (Value: "UNKNOWN_ERROR")
 *    @arg @c kGTLRVMMigrationService_MigrationError_Code_UtilizationReportError
 *        Migrate for Compute encountered an error during utilization report
 *        creation. (Value: "UTILIZATION_REPORT_ERROR")
 */
@property(nonatomic, copy, nullable) NSString *code;

/** Output only. The localized error message. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_LocalizedMessage *errorMessage;

/** Output only. The time the error occurred. */
@property(nonatomic, strong, nullable) GTLRDateTime *errorTime;

/**
 *  Output only. URL(s) pointing to additional information on handling the
 *  current error.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_Link *> *helpLinks;

@end


/**
 *  NetworkInterface represents a NIC of a VM.
 */
@interface GTLRVMMigrationService_NetworkInterface : GTLRObject

/** The external IP to define in the NIC. */
@property(nonatomic, copy, nullable) NSString *externalIp;

/**
 *  The internal IP to define in the NIC. The formats accepted are: `ephemeral`
 *  \\ ipv4 address \\ a named address resource full path.
 */
@property(nonatomic, copy, nullable) NSString *internalIp;

/** The network to connect the NIC to. */
@property(nonatomic, copy, nullable) NSString *network;

/** The subnetwork to connect the NIC to. */
@property(nonatomic, copy, nullable) NSString *subnetwork;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRVMMigrationService_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRVMMigrationService_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRVMMigrationService_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRVMMigrationService_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Request message for 'PauseMigration' request.
 */
@interface GTLRVMMigrationService_PauseMigrationRequest : GTLRObject
@end


/**
 *  PostProcessingStep contains specific step details.
 */
@interface GTLRVMMigrationService_PostProcessingStep : GTLRObject
@end


/**
 *  PreparingVMDisksStep contains specific step details.
 */
@interface GTLRVMMigrationService_PreparingVMDisksStep : GTLRObject
@end


/**
 *  Request message for 'RemoveMigration' request.
 */
@interface GTLRVMMigrationService_RemoveGroupMigrationRequest : GTLRObject

/** The MigratingVm to remove. */
@property(nonatomic, copy, nullable) NSString *migratingVm;

@end


/**
 *  ReplicatingStep contains specific step details.
 */
@interface GTLRVMMigrationService_ReplicatingStep : GTLRObject

/**
 *  The source disks replication rate for the last 30 minutes in bytes per
 *  second.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastThirtyMinutesAverageBytesPerSecond;

/**
 *  The source disks replication rate for the last 2 minutes in bytes per
 *  second.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastTwoMinutesAverageBytesPerSecond;

/**
 *  Replicated bytes in the step.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *replicatedBytes;

/**
 *  Total bytes to be handled in the step.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytes;

@end


/**
 *  ReplicationCycle contains information about the current replication cycle
 *  status.
 */
@interface GTLRVMMigrationService_ReplicationCycle : GTLRObject

/**
 *  The cycle's ordinal number.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cycleNumber;

/** The time the replication cycle has ended. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Provides details on the state of the cycle in case of an error. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_Status *error;

/** The identifier of the ReplicationCycle. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The current progress in percentage of this cycle. Was replaced by 'steps'
 *  field, which breaks down the cycle progression more accurately.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *progressPercent;

/** The time the replication cycle has started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  State of the ReplicationCycle.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_ReplicationCycle_State_Failed The
 *        replication cycle finished with errors. (Value: "FAILED")
 *    @arg @c kGTLRVMMigrationService_ReplicationCycle_State_Paused The
 *        replication cycle is paused. (Value: "PAUSED")
 *    @arg @c kGTLRVMMigrationService_ReplicationCycle_State_Running The
 *        replication cycle is running. (Value: "RUNNING")
 *    @arg @c kGTLRVMMigrationService_ReplicationCycle_State_StateUnspecified
 *        The state is unknown. This is used for API compatibility only and is
 *        not used by the system. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRVMMigrationService_ReplicationCycle_State_Succeeded The
 *        replication cycle finished successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** The cycle's steps list representing its progress. */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_CycleStep *> *steps;

/** The accumulated duration the replication cycle was paused. */
@property(nonatomic, strong, nullable) GTLRDuration *totalPauseDuration;

@end


/**
 *  ReplicationSync contain information about the last replica sync to the
 *  cloud.
 */
@interface GTLRVMMigrationService_ReplicationSync : GTLRObject

/**
 *  The most updated snapshot created time in the source that finished
 *  replication.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastSyncTime;

@end


/**
 *  Request message for 'ResumeMigration' request.
 */
@interface GTLRVMMigrationService_ResumeMigrationRequest : GTLRObject
@end


/**
 *  A policy for scheduling replications.
 */
@interface GTLRVMMigrationService_SchedulePolicy : GTLRObject

/** The idle duration between replication stages. */
@property(nonatomic, strong, nullable) GTLRDuration *idleDuration;

/**
 *  A flag to indicate whether to skip OS adaptation during the replication
 *  sync. OS adaptation is a process where the VM's operating system undergoes
 *  changes and adaptations to fully function on Compute Engine.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipOsAdaptation;

@end


/**
 *  Node Affinity: the configuration of desired nodes onto which this Instance
 *  could be scheduled. Based on
 *  https://cloud.google.com/compute/docs/reference/rest/v1/instances/setScheduling
 */
@interface GTLRVMMigrationService_SchedulingNodeAffinity : GTLRObject

/** The label key of Node resource to reference. */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  The operator to use for the node resources specified in the `values`
 *  parameter.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_SchedulingNodeAffinity_OperatorProperty_In
 *        The node resource group should be in these resources affinity. (Value:
 *        "IN")
 *    @arg @c kGTLRVMMigrationService_SchedulingNodeAffinity_OperatorProperty_NotIn
 *        The node resource group should not be in these resources affinity.
 *        (Value: "NOT_IN")
 *    @arg @c kGTLRVMMigrationService_SchedulingNodeAffinity_OperatorProperty_OperatorUnspecified
 *        An unknown, unexpected behavior. (Value: "OPERATOR_UNSPECIFIED")
 *
 *  Remapped to 'operatorProperty' to avoid language reserved word 'operator'.
 */
@property(nonatomic, copy, nullable) NSString *operatorProperty;

/** Corresponds to the label values of Node resource. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  ShuttingDownSourceVMStep contains specific step details.
 */
@interface GTLRVMMigrationService_ShuttingDownSourceVMStep : GTLRObject
@end


/**
 *  Source message describes a specific vm migration Source resource. It
 *  contains the source environment information.
 */
@interface GTLRVMMigrationService_Source : GTLRObject

/** Output only. The create time timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  User-provided description of the source.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The labels of the source. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_Source_Labels *labels;

/** Output only. The Source name. */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The update time timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** Vmware type source details. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_VmwareSourceDetails *vmware;

@end


/**
 *  The labels of the source.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRVMMigrationService_Source_Labels : GTLRObject
@end


/**
 *  Request message for 'StartMigrationRequest' request.
 */
@interface GTLRVMMigrationService_StartMigrationRequest : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRVMMigrationService_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRVMMigrationService_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRVMMigrationService_Status_Details_Item : GTLRObject
@end


/**
 *  TargetProject message represents a target Compute Engine project for a
 *  migration or a clone.
 */
@interface GTLRVMMigrationService_TargetProject : GTLRObject

/**
 *  Output only. The time this target project resource was created (not related
 *  to when the Compute Engine project it points to was created).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The target project's description.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Output only. The name of the target project. */
@property(nonatomic, copy, nullable) NSString *name;

/** The target project ID (number) or project name. */
@property(nonatomic, copy, nullable) NSString *project;

/** Output only. The last time the target project resource was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Request message for 'UpgradeAppliance' request.
 */
@interface GTLRVMMigrationService_UpgradeApplianceRequest : GTLRObject

/**
 *  A request ID to identify requests. Specify a unique request ID so that if
 *  you must retry your request, the server will know to ignore the request if
 *  it has already been completed. The server will guarantee that for at least
 *  60 minutes after the first request. For example, consider a situation where
 *  you make an initial request and t he request times out. If you make the
 *  request again with the same request ID, the server can check if original
 *  operation with the same request ID was received, and if so, will ignore the
 *  second request. This prevents clients from accidentally creating duplicate
 *  commitments. The request ID must be a valid UUID with the exception that
 *  zero UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  UpgradeStatus contains information about upgradeAppliance operation.
 */
@interface GTLRVMMigrationService_UpgradeStatus : GTLRObject

/**
 *  Provides details on the state of the upgrade operation in case of an error.
 */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_Status *error;

/** The version from which we upgraded. */
@property(nonatomic, copy, nullable) NSString *previousVersion;

/** The time the operation was started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The state of the upgradeAppliance operation.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_UpgradeStatus_State_Failed The upgrade
 *        failed. (Value: "FAILED")
 *    @arg @c kGTLRVMMigrationService_UpgradeStatus_State_Running The upgrade
 *        has started. (Value: "RUNNING")
 *    @arg @c kGTLRVMMigrationService_UpgradeStatus_State_StateUnspecified The
 *        state was not sampled by the health checks yet. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRVMMigrationService_UpgradeStatus_State_Succeeded The upgrade
 *        finished successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** The version to upgrade to. */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Utilization report details the utilization (CPU, memory, etc.) of selected
 *  source VMs.
 */
@interface GTLRVMMigrationService_UtilizationReport : GTLRObject

/**
 *  Output only. The time the report was created (this refers to the time of the
 *  request, not the time the report creation completed).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The report display name, as assigned by the user. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. Provides details on the state of the report in case of an
 *  error.
 */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_Status *error;

/**
 *  Output only. The point in time when the time frame ends. Notice that the
 *  time frame is counted backwards. For instance if the "frame_end_time" value
 *  is 2021/01/20 and the time frame is WEEK then the report covers the week
 *  between 2021/01/20 and 2021/01/14.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *frameEndTime;

/** Output only. The report unique name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Current state of the report.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_UtilizationReport_State_Creating The
 *        report is in the making. (Value: "CREATING")
 *    @arg @c kGTLRVMMigrationService_UtilizationReport_State_Failed Report
 *        creation failed. (Value: "FAILED")
 *    @arg @c kGTLRVMMigrationService_UtilizationReport_State_StateUnspecified
 *        The state is unknown. This value is not in use. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRVMMigrationService_UtilizationReport_State_Succeeded Report
 *        creation completed successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The time the state was last set. */
@property(nonatomic, strong, nullable) GTLRDateTime *stateTime;

/**
 *  Time frame of the report.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_UtilizationReport_TimeFrame_Month One
 *        month. (Value: "MONTH")
 *    @arg @c kGTLRVMMigrationService_UtilizationReport_TimeFrame_TimeFrameUnspecified
 *        The time frame was not specified and will default to WEEK. (Value:
 *        "TIME_FRAME_UNSPECIFIED")
 *    @arg @c kGTLRVMMigrationService_UtilizationReport_TimeFrame_Week One week.
 *        (Value: "WEEK")
 *    @arg @c kGTLRVMMigrationService_UtilizationReport_TimeFrame_Year One year.
 *        (Value: "YEAR")
 */
@property(nonatomic, copy, nullable) NSString *timeFrame;

/**
 *  Output only. Total number of VMs included in the report.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *vmCount;

/**
 *  List of utilization information per VM. When sent as part of the request,
 *  the "vm_id" field is used in order to specify which VMs to include in the
 *  report. In that case all other fields are ignored.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_VmUtilizationInfo *> *vms;

@end


/**
 *  Utilization information of a single VM.
 */
@interface GTLRVMMigrationService_VmUtilizationInfo : GTLRObject

/** Utilization metrics for this VM. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_VmUtilizationMetrics *utilization;

/** The VM's ID in the source. */
@property(nonatomic, copy, nullable) NSString *vmId;

/** The description of the VM in a Source of type Vmware. */
@property(nonatomic, strong, nullable) GTLRVMMigrationService_VmwareVmDetails *vmwareVmDetails;

@end


/**
 *  Utilization metrics values for a single VM.
 */
@interface GTLRVMMigrationService_VmUtilizationMetrics : GTLRObject

/**
 *  Average CPU usage, percent.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cpuAveragePercent;

/**
 *  Max CPU usage, percent.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cpuMaxPercent;

/**
 *  Average disk IO rate, in kilobytes per second.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *diskIoRateAverageKbps;

/**
 *  Max disk IO rate, in kilobytes per second.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *diskIoRateMaxKbps;

/**
 *  Average memory usage, percent.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memoryAveragePercent;

/**
 *  Max memory usage, percent.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memoryMaxPercent;

/**
 *  Average network throughput (combined transmit-rates and receive-rates), in
 *  kilobytes per second.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *networkThroughputAverageKbps;

/**
 *  Max network throughput (combined transmit-rates and receive-rates), in
 *  kilobytes per second.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *networkThroughputMaxKbps;

@end


/**
 *  VmwareSourceDetails message describes a specific source details for the
 *  vmware source type.
 */
@interface GTLRVMMigrationService_VmwareSourceDetails : GTLRObject

/**
 *  Input only. The credentials password. This is write only and can not be read
 *  in a GET operation.
 */
@property(nonatomic, copy, nullable) NSString *password;

/** The thumbprint representing the certificate for the vcenter. */
@property(nonatomic, copy, nullable) NSString *thumbprint;

/** The credentials username. */
@property(nonatomic, copy, nullable) NSString *username;

/** The ip address of the vcenter this Source represents. */
@property(nonatomic, copy, nullable) NSString *vcenterIp;

@end


/**
 *  VmwareVmDetails describes a VM in vCenter.
 */
@interface GTLRVMMigrationService_VmwareVmDetails : GTLRObject

/**
 *  Output only. The VM Boot Option.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_VmwareVmDetails_BootOption_Bios The boot
 *        option is BIOS. (Value: "BIOS")
 *    @arg @c kGTLRVMMigrationService_VmwareVmDetails_BootOption_BootOptionUnspecified
 *        The boot option is unknown. (Value: "BOOT_OPTION_UNSPECIFIED")
 *    @arg @c kGTLRVMMigrationService_VmwareVmDetails_BootOption_Efi The boot
 *        option is EFI. (Value: "EFI")
 */
@property(nonatomic, copy, nullable) NSString *bootOption;

/**
 *  The total size of the storage allocated to the VM in MB.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *committedStorageMb;

/**
 *  The number of cpus in the VM.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cpuCount;

/**
 *  The descriptive name of the vCenter's datacenter this VM is contained in.
 */
@property(nonatomic, copy, nullable) NSString *datacenterDescription;

/** The id of the vCenter's datacenter this VM is contained in. */
@property(nonatomic, copy, nullable) NSString *datacenterId;

/**
 *  The number of disks the VM has.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *diskCount;

/** The display name of the VM. Note that this is not necessarily unique. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The VM's OS. See for example
 *  https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html
 *  for types of strings this might hold.
 */
@property(nonatomic, copy, nullable) NSString *guestDescription;

/**
 *  The size of the memory of the VM in MB.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memoryMb;

/**
 *  The power state of the VM at the moment list was taken.
 *
 *  Likely values:
 *    @arg @c kGTLRVMMigrationService_VmwareVmDetails_PowerState_Off The VM is
 *        turned OFF. (Value: "OFF")
 *    @arg @c kGTLRVMMigrationService_VmwareVmDetails_PowerState_On The VM is
 *        turned ON. (Value: "ON")
 *    @arg @c kGTLRVMMigrationService_VmwareVmDetails_PowerState_PowerStateUnspecified
 *        Power state is not specified. (Value: "POWER_STATE_UNSPECIFIED")
 *    @arg @c kGTLRVMMigrationService_VmwareVmDetails_PowerState_Suspended The
 *        VM is suspended. This is similar to hibernation or sleep mode. (Value:
 *        "SUSPENDED")
 */
@property(nonatomic, copy, nullable) NSString *powerState;

/** The unique identifier of the VM in vCenter. */
@property(nonatomic, copy, nullable) NSString *uuid;

/**
 *  The VM's id in the source (note that this is not the MigratingVm's id). This
 *  is the moref id of the VM.
 */
@property(nonatomic, copy, nullable) NSString *vmId;

@end


/**
 *  VmwareVmsDetails describes VMs in vCenter.
 */
@interface GTLRVMMigrationService_VmwareVmsDetails : GTLRObject

/** The details of the vmware VMs. */
@property(nonatomic, strong, nullable) NSArray<GTLRVMMigrationService_VmwareVmDetails *> *details;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
