// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Batch API (batch/v1)
// Description:
//   An API to manage the running of batch jobs on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/batch/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudBatch_Accelerator;
@class GTLRCloudBatch_ActionCondition;
@class GTLRCloudBatch_AgentInfo;
@class GTLRCloudBatch_AgentMetadata;
@class GTLRCloudBatch_AgentMetadata_OsRelease;
@class GTLRCloudBatch_AgentTask;
@class GTLRCloudBatch_AgentTaskInfo;
@class GTLRCloudBatch_AllocationPolicy;
@class GTLRCloudBatch_AllocationPolicy_Labels;
@class GTLRCloudBatch_AttachedDisk;
@class GTLRCloudBatch_AuditConfig;
@class GTLRCloudBatch_AuditLogConfig;
@class GTLRCloudBatch_Barrier;
@class GTLRCloudBatch_Binding;
@class GTLRCloudBatch_ComputeResource;
@class GTLRCloudBatch_Container;
@class GTLRCloudBatch_Disk;
@class GTLRCloudBatch_Environment;
@class GTLRCloudBatch_Environment_Variables;
@class GTLRCloudBatch_Expr;
@class GTLRCloudBatch_GCS;
@class GTLRCloudBatch_InstancePolicy;
@class GTLRCloudBatch_InstancePolicyOrTemplate;
@class GTLRCloudBatch_InstanceStatus;
@class GTLRCloudBatch_Job;
@class GTLRCloudBatch_Job_Labels;
@class GTLRCloudBatch_JobNotification;
@class GTLRCloudBatch_JobStatus;
@class GTLRCloudBatch_JobStatus_TaskGroups;
@class GTLRCloudBatch_LifecyclePolicy;
@class GTLRCloudBatch_Location;
@class GTLRCloudBatch_Location_Labels;
@class GTLRCloudBatch_Location_Metadata;
@class GTLRCloudBatch_LocationPolicy;
@class GTLRCloudBatch_LogsPolicy;
@class GTLRCloudBatch_Message;
@class GTLRCloudBatch_NetworkInterface;
@class GTLRCloudBatch_NetworkPolicy;
@class GTLRCloudBatch_NFS;
@class GTLRCloudBatch_Operation;
@class GTLRCloudBatch_Operation_Metadata;
@class GTLRCloudBatch_Operation_Response;
@class GTLRCloudBatch_Policy;
@class GTLRCloudBatch_Runnable;
@class GTLRCloudBatch_Script;
@class GTLRCloudBatch_ServiceAccount;
@class GTLRCloudBatch_Status;
@class GTLRCloudBatch_Status_Details_Item;
@class GTLRCloudBatch_StatusEvent;
@class GTLRCloudBatch_Task;
@class GTLRCloudBatch_TaskExecution;
@class GTLRCloudBatch_TaskGroup;
@class GTLRCloudBatch_TaskGroupStatus;
@class GTLRCloudBatch_TaskGroupStatus_Counts;
@class GTLRCloudBatch_TaskSpec;
@class GTLRCloudBatch_TaskSpec_Environments;
@class GTLRCloudBatch_TaskStatus;
@class GTLRCloudBatch_Volume;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudBatch_AgentInfo.state

/**
 *  The agent is running. The agent in the RUNNING state can never go back to
 *  the STARTING state.
 *
 *  Value: "AGENT_RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_AgentInfo_State_AgentRunning;
/**
 *  The agent is starting on the VM instance.
 *
 *  Value: "AGENT_STARTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_AgentInfo_State_AgentStarting;
/**
 *  Unspecified state.
 *
 *  Value: "AGENT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_AgentInfo_State_AgentStateUnspecified;
/**
 *  The agent has stopped, either on request or due to a failure.
 *
 *  Value: "AGENT_STOPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_AgentInfo_State_AgentStopped;

// ----------------------------------------------------------------------------
// GTLRCloudBatch_AgentTask.intendedState

/**
 *  Assigned state (includes running and finished).
 *
 *  Value: "ASSIGNED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_AgentTask_IntendedState_Assigned;
/**
 *  The agent should cancel the execution of this task.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_AgentTask_IntendedState_Cancelled;
/**
 *  Delete task from agent storage, stop reporting its state.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_AgentTask_IntendedState_Deleted;
/**
 *  Unspecified state.
 *
 *  Value: "INTENDED_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_AgentTask_IntendedState_IntendedStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBatch_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBatch_InstancePolicy.provisioningModel

/**
 *  Preemptible VM (PVM). Above SPOT VM is the preferable model for preemptible
 *  VM instances: the old preemptible VM model (indicated by this field) is the
 *  older model, and has been migrated to use the SPOT model as the underlying
 *  technology. This old model will still be supported.
 *
 *  Value: "PREEMPTIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_InstancePolicy_ProvisioningModel_Preemptible;
/**
 *  Unspecified.
 *
 *  Value: "PROVISIONING_MODEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_InstancePolicy_ProvisioningModel_ProvisioningModelUnspecified;
/**
 *  SPOT VM.
 *
 *  Value: "SPOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_InstancePolicy_ProvisioningModel_Spot;
/**
 *  Standard VM.
 *
 *  Value: "STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_InstancePolicy_ProvisioningModel_Standard;

// ----------------------------------------------------------------------------
// GTLRCloudBatch_InstanceStatus.provisioningModel

/**
 *  Preemptible VM (PVM). Above SPOT VM is the preferable model for preemptible
 *  VM instances: the old preemptible VM model (indicated by this field) is the
 *  older model, and has been migrated to use the SPOT model as the underlying
 *  technology. This old model will still be supported.
 *
 *  Value: "PREEMPTIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_InstanceStatus_ProvisioningModel_Preemptible;
/**
 *  Unspecified.
 *
 *  Value: "PROVISIONING_MODEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_InstanceStatus_ProvisioningModel_ProvisioningModelUnspecified;
/**
 *  SPOT VM.
 *
 *  Value: "SPOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_InstanceStatus_ProvisioningModel_Spot;
/**
 *  Standard VM.
 *
 *  Value: "STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_InstanceStatus_ProvisioningModel_Standard;

// ----------------------------------------------------------------------------
// GTLRCloudBatch_JobStatus.state

/**
 *  The Job will be deleted, but has not been deleted yet. Typically this is
 *  because resources used by the Job are still being cleaned up.
 *
 *  Value: "DELETION_IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_JobStatus_State_DeletionInProgress;
/**
 *  At least one Task in the Job has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_JobStatus_State_Failed;
/**
 *  Job is admitted (validated and persisted) and waiting for resources.
 *
 *  Value: "QUEUED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_JobStatus_State_Queued;
/**
 *  Resource allocation has been successful. At least one Task in the Job is
 *  RUNNING.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_JobStatus_State_Running;
/**
 *  Job is scheduled to run as soon as resource allocation is ready. The
 *  resource allocation may happen at a later time but with a high chance to
 *  succeed.
 *
 *  Value: "SCHEDULED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_JobStatus_State_Scheduled;
/** Value: "STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_JobStatus_State_StateUnspecified;
/**
 *  All Tasks in the Job have finished successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_JobStatus_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRCloudBatch_LifecyclePolicy.action

/**
 *  Action unspecified.
 *
 *  Value: "ACTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_LifecyclePolicy_Action_ActionUnspecified;
/**
 *  Action that tasks in the group will be stopped immediately.
 *
 *  Value: "FAIL_TASK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_LifecyclePolicy_Action_FailTask;
/**
 *  Action that tasks in the group will be scheduled to re-execute.
 *
 *  Value: "RETRY_TASK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_LifecyclePolicy_Action_RetryTask;

// ----------------------------------------------------------------------------
// GTLRCloudBatch_LogsPolicy.destination

/**
 *  Logs are streamed to Cloud Logging.
 *
 *  Value: "CLOUD_LOGGING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_LogsPolicy_Destination_CloudLogging;
/**
 *  Logs are not preserved.
 *
 *  Value: "DESTINATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_LogsPolicy_Destination_DestinationUnspecified;
/**
 *  Logs are saved to a file path.
 *
 *  Value: "PATH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_LogsPolicy_Destination_Path;

// ----------------------------------------------------------------------------
// GTLRCloudBatch_Message.newJobState

/**
 *  The Job will be deleted, but has not been deleted yet. Typically this is
 *  because resources used by the Job are still being cleaned up.
 *
 *  Value: "DELETION_IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_Message_NewJobState_DeletionInProgress;
/**
 *  At least one Task in the Job has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_Message_NewJobState_Failed;
/**
 *  Job is admitted (validated and persisted) and waiting for resources.
 *
 *  Value: "QUEUED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_Message_NewJobState_Queued;
/**
 *  Resource allocation has been successful. At least one Task in the Job is
 *  RUNNING.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_Message_NewJobState_Running;
/**
 *  Job is scheduled to run as soon as resource allocation is ready. The
 *  resource allocation may happen at a later time but with a high chance to
 *  succeed.
 *
 *  Value: "SCHEDULED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_Message_NewJobState_Scheduled;
/** Value: "STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_Message_NewJobState_StateUnspecified;
/**
 *  All Tasks in the Job have finished successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_Message_NewJobState_Succeeded;

// ----------------------------------------------------------------------------
// GTLRCloudBatch_Message.newTaskState

/**
 *  The Task is assigned to at least one VM.
 *
 *  Value: "ASSIGNED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_Message_NewTaskState_Assigned;
/**
 *  The Task has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_Message_NewTaskState_Failed;
/**
 *  The Task is created and waiting for resources.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_Message_NewTaskState_Pending;
/**
 *  The Task is running.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_Message_NewTaskState_Running;
/**
 *  unknown state
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_Message_NewTaskState_StateUnspecified;
/**
 *  The Task has succeeded.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_Message_NewTaskState_Succeeded;

// ----------------------------------------------------------------------------
// GTLRCloudBatch_Message.type

/**
 *  Notify users that the job state has changed.
 *
 *  Value: "JOB_STATE_CHANGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_Message_Type_JobStateChanged;
/**
 *  Notify users that the task state has changed.
 *
 *  Value: "TASK_STATE_CHANGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_Message_Type_TaskStateChanged;
/**
 *  Unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_Message_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudBatch_TaskStatus.state

/**
 *  The Task is assigned to at least one VM.
 *
 *  Value: "ASSIGNED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_TaskStatus_State_Assigned;
/**
 *  The Task has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_TaskStatus_State_Failed;
/**
 *  The Task is created and waiting for resources.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_TaskStatus_State_Pending;
/**
 *  The Task is running.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_TaskStatus_State_Running;
/**
 *  unknown state
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_TaskStatus_State_StateUnspecified;
/**
 *  The Task has succeeded.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudBatch_TaskStatus_State_Succeeded;

/**
 *  Accelerator describes Compute Engine accelerators to be attached to the VM.
 */
@interface GTLRCloudBatch_Accelerator : GTLRObject

/**
 *  The number of accelerators of this type.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  Deprecated: please use instances[0].install_gpu_drivers instead.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *installGpuDrivers;

/**
 *  The accelerator type. For example, "nvidia-tesla-t4". See `gcloud compute
 *  accelerator-types list`.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Conditions for actions to deal with task failures.
 */
@interface GTLRCloudBatch_ActionCondition : GTLRObject

/**
 *  Exit codes of a task execution. If there are more than 1 exit codes, when
 *  task executes with any of the exit code in the list, the condition is met
 *  and the action will be executed.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *exitCodes;

@end


/**
 *  VM Agent Info.
 */
@interface GTLRCloudBatch_AgentInfo : GTLRObject

/** The assigned Job ID */
@property(nonatomic, copy, nullable) NSString *jobId;

/** When the AgentInfo is generated. */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

/**
 *  Agent state.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBatch_AgentInfo_State_AgentRunning The agent is running.
 *        The agent in the RUNNING state can never go back to the STARTING
 *        state. (Value: "AGENT_RUNNING")
 *    @arg @c kGTLRCloudBatch_AgentInfo_State_AgentStarting The agent is
 *        starting on the VM instance. (Value: "AGENT_STARTING")
 *    @arg @c kGTLRCloudBatch_AgentInfo_State_AgentStateUnspecified Unspecified
 *        state. (Value: "AGENT_STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudBatch_AgentInfo_State_AgentStopped The agent has
 *        stopped, either on request or due to a failure. (Value:
 *        "AGENT_STOPPED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** The assigned task group ID. */
@property(nonatomic, copy, nullable) NSString *taskGroupId;

/** Task Info. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_AgentTaskInfo *> *tasks;

@end


/**
 *  AgentMetadata never changes for a single instance of VM agent.
 */
@interface GTLRCloudBatch_AgentMetadata : GTLRObject

/** When the VM agent started. */
@property(nonatomic, strong, nullable) GTLRDateTime *creationTime;

/**
 *  Full name of the entity that created this vm. For MIG, this path is:
 *  projects/{project}/regions/{region}/InstanceGroupManagers/{igm} The value is
 *  retrieved from the vm metadata key of "created-by".
 */
@property(nonatomic, copy, nullable) NSString *creator;

/** GCP instance name (go/instance-name). */
@property(nonatomic, copy, nullable) NSString *instance;

/**
 *  GCP instance ID (go/instance-id).
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *instanceId;

/** parsed contents of /etc/os-release */
@property(nonatomic, strong, nullable) GTLRCloudBatch_AgentMetadata_OsRelease *osRelease;

/** agent binary version running on VM */
@property(nonatomic, copy, nullable) NSString *version;

/**
 *  Agent zone.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  parsed contents of /etc/os-release
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudBatch_AgentMetadata_OsRelease : GTLRObject
@end


/**
 *  TODO(b/182501497) The message needs to be redefined when the Agent API
 *  server updates data in storage per the backend design.
 */
@interface GTLRCloudBatch_AgentTask : GTLRObject

/**
 *  The intended state of the task.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBatch_AgentTask_IntendedState_Assigned Assigned state
 *        (includes running and finished). (Value: "ASSIGNED")
 *    @arg @c kGTLRCloudBatch_AgentTask_IntendedState_Cancelled The agent should
 *        cancel the execution of this task. (Value: "CANCELLED")
 *    @arg @c kGTLRCloudBatch_AgentTask_IntendedState_Deleted Delete task from
 *        agent storage, stop reporting its state. (Value: "DELETED")
 *    @arg @c kGTLRCloudBatch_AgentTask_IntendedState_IntendedStateUnspecified
 *        Unspecified state. (Value: "INTENDED_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *intendedState;

/**
 *  The highest barrier reached by all tasks in the task's TaskGroup.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reachedBarrier;

/** Task Spec. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_TaskSpec *spec;

/** Task status. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_TaskStatus *status;

/** Task name. */
@property(nonatomic, copy, nullable) NSString *task;

@end


/**
 *  Task Info
 */
@interface GTLRCloudBatch_AgentTaskInfo : GTLRObject

/**
 *  The highest index of a runnable started by the agent for this task. The
 *  runnables are indexed from 1. Value 0 is undefined.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *runnable;

/** ID of the Task */
@property(nonatomic, copy, nullable) NSString *taskId;

/**
 *  The status of the Task. If we need agent specific fields we should fork the
 *  public TaskStatus into an agent specific one. Or add them below.
 */
@property(nonatomic, strong, nullable) GTLRCloudBatch_TaskStatus *taskStatus;

@end


/**
 *  A Job's resource allocation policy describes when, where, and how compute
 *  resources should be allocated for the Job.
 */
@interface GTLRCloudBatch_AllocationPolicy : GTLRObject

/**
 *  Describe instances that can be created by this AllocationPolicy. Only
 *  instances[0] is supported now.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_InstancePolicyOrTemplate *> *instances;

/**
 *  Labels applied to all VM instances and other resources created by
 *  AllocationPolicy. Labels could be user provided or system generated. You can
 *  assign up to 64 labels. [Google Compute Engine label
 *  restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions)
 *  apply. Label names that start with "goog-" or "google-" are reserved.
 */
@property(nonatomic, strong, nullable) GTLRCloudBatch_AllocationPolicy_Labels *labels;

/** Location where compute resources should be allocated for the Job. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_LocationPolicy *location;

/** The network policy. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_NetworkPolicy *network;

/** Service account that VMs will run as. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_ServiceAccount *serviceAccount;

@end


/**
 *  Labels applied to all VM instances and other resources created by
 *  AllocationPolicy. Labels could be user provided or system generated. You can
 *  assign up to 64 labels. [Google Compute Engine label
 *  restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions)
 *  apply. Label names that start with "goog-" or "google-" are reserved.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudBatch_AllocationPolicy_Labels : GTLRObject
@end


/**
 *  A new or an existing persistent disk (PD) or a local ssd attached to a VM
 *  instance.
 */
@interface GTLRCloudBatch_AttachedDisk : GTLRObject

/**
 *  Device name that the guest operating system will see. It is used by
 *  Runnable.volumes field to mount disks. So please specify the device_name if
 *  you want Batch to help mount the disk, and it should match the device_name
 *  field in volumes.
 */
@property(nonatomic, copy, nullable) NSString *deviceName;

/** Name of an existing PD. */
@property(nonatomic, copy, nullable) NSString *existingDisk;

@property(nonatomic, strong, nullable) GTLRCloudBatch_Disk *newDisk NS_RETURNS_NOT_RETAINED;

@end


/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRCloudBatch_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRCloudBatch_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBatch_AuditLogConfig_LogType_AdminRead Admin reads.
 *        Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRCloudBatch_AuditLogConfig_LogType_DataRead Data reads.
 *        Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRCloudBatch_AuditLogConfig_LogType_DataWrite Data writes.
 *        Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRCloudBatch_AuditLogConfig_LogType_LogTypeUnspecified Default
 *        case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Barrier runnable blocks until all tasks in a taskgroup reach it.
 */
@interface GTLRCloudBatch_Barrier : GTLRObject

/**
 *  Barriers are identified by their index in runnable list. Names are not
 *  required, but if present should be an identifier.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRCloudBatch_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRCloudBatch_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`:
 *  An email address (plus unique identifier) representing a user that has been
 *  recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. * `domain:{domain}`: The G Suite domain (primary) that
 *  represents all the users of that domain. For example, `google.com` or
 *  `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRCloudBatch_CancelOperationRequest : GTLRObject
@end


/**
 *  Compute resource requirements
 */
@interface GTLRCloudBatch_ComputeResource : GTLRObject

/**
 *  Extra boot disk size in MiB for each task.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bootDiskMib;

/**
 *  The milliCPU count.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cpuMilli;

/**
 *  Memory in MiB.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memoryMib;

@end


/**
 *  Container runnable.
 */
@interface GTLRCloudBatch_Container : GTLRObject

/**
 *  If set to true, external network access to and from container will be
 *  blocked. The container will use the default internal network
 *  'goog-internal'.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blockExternalNetwork;

/**
 *  Overrides the `CMD` specified in the container. If there is an ENTRYPOINT
 *  (either in the container image or with the entrypoint field below) then
 *  commands are appended as arguments to the ENTRYPOINT.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *commands;

/** Overrides the `ENTRYPOINT` specified in the container. */
@property(nonatomic, copy, nullable) NSString *entrypoint;

/** The URI to pull the container image from. */
@property(nonatomic, copy, nullable) NSString *imageUri;

/**
 *  Arbitrary additional options to include in the "docker run" command when
 *  running this container, e.g. "--network host".
 */
@property(nonatomic, copy, nullable) NSString *options;

/**
 *  Optional password for logging in to a docker registry. If password matches
 *  "projects/ * /secrets/ * /versions/ *" then Batch will read the password
 *  from the Secret Manager;
 */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  Optional username for logging in to a docker registry. If username matches
 *  "projects/ * /secrets/ * /versions/ *" then Batch will read the username
 *  from the Secret Manager.
 */
@property(nonatomic, copy, nullable) NSString *username;

/**
 *  Volumes to mount (bind mount) from the host machine files or directories
 *  into the container, formatted to match docker run's --volume option, e.g.
 *  /foo:/bar, or /foo:/bar:ro
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *volumes;

@end


/**
 *  A new persistent disk or a local ssd. A VM can only have one local SSD
 *  setting but multiple local SSD partitions.
 *  https://cloud.google.com/compute/docs/disks#pdspecs.
 *  https://cloud.google.com/compute/docs/disks#localssds.
 */
@interface GTLRCloudBatch_Disk : GTLRObject

/**
 *  Local SSDs are available through both "SCSI" and "NVMe" interfaces. If not
 *  indicated, "NVMe" will be the default one for local ssds. We only support
 *  "SCSI" for persistent disks now.
 */
@property(nonatomic, copy, nullable) NSString *diskInterface;

/** Name of a public or custom image used as the data source. */
@property(nonatomic, copy, nullable) NSString *image;

/**
 *  Disk size in GB. This field is ignored if `data_source` is `disk` or
 *  `image`. If `type` is `local-ssd`, size_gb should be a multiple of 375GB,
 *  otherwise, the final size will be the next greater multiple of 375 GB.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sizeGb;

/** Name of a snapshot used as the data source. */
@property(nonatomic, copy, nullable) NSString *snapshot;

/**
 *  Disk type as shown in `gcloud compute disk-types list` For example,
 *  "pd-ssd", "pd-standard", "pd-balanced", "local-ssd".
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRCloudBatch_Empty : GTLRObject
@end


/**
 *  An Environment describes a collection of environment variables to set when
 *  executing Tasks.
 */
@interface GTLRCloudBatch_Environment : GTLRObject

/** A map of environment variable names to values. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_Environment_Variables *variables;

@end


/**
 *  A map of environment variable names to values.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudBatch_Environment_Variables : GTLRObject
@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRCloudBatch_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Represents a Google Cloud Storage volume.
 */
@interface GTLRCloudBatch_GCS : GTLRObject

/**
 *  Remote path, either a bucket name or a subdirectory of a bucket, e.g.:
 *  bucket_name, bucket_name/subdirectory/
 */
@property(nonatomic, copy, nullable) NSString *remotePath;

@end


/**
 *  InstancePolicy describes an instance type and resources attached to each VM
 *  created by this InstancePolicy.
 */
@interface GTLRCloudBatch_InstancePolicy : GTLRObject

/** The accelerators attached to each VM instance. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_Accelerator *> *accelerators;

/**
 *  Non-boot disks to be attached for each VM created by this InstancePolicy.
 *  New disks will be deleted when the VM is deleted.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_AttachedDisk *> *disks;

/** The Compute Engine machine type. */
@property(nonatomic, copy, nullable) NSString *machineType;

/**
 *  The minimum CPU platform. See
 *  `https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform`.
 *  Not yet implemented.
 */
@property(nonatomic, copy, nullable) NSString *minCpuPlatform;

/**
 *  The provisioning model.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBatch_InstancePolicy_ProvisioningModel_Preemptible
 *        Preemptible VM (PVM). Above SPOT VM is the preferable model for
 *        preemptible VM instances: the old preemptible VM model (indicated by
 *        this field) is the older model, and has been migrated to use the SPOT
 *        model as the underlying technology. This old model will still be
 *        supported. (Value: "PREEMPTIBLE")
 *    @arg @c kGTLRCloudBatch_InstancePolicy_ProvisioningModel_ProvisioningModelUnspecified
 *        Unspecified. (Value: "PROVISIONING_MODEL_UNSPECIFIED")
 *    @arg @c kGTLRCloudBatch_InstancePolicy_ProvisioningModel_Spot SPOT VM.
 *        (Value: "SPOT")
 *    @arg @c kGTLRCloudBatch_InstancePolicy_ProvisioningModel_Standard Standard
 *        VM. (Value: "STANDARD")
 */
@property(nonatomic, copy, nullable) NSString *provisioningModel;

@end


/**
 *  Either an InstancePolicy or an instance template.
 */
@interface GTLRCloudBatch_InstancePolicyOrTemplate : GTLRObject

/**
 *  Set this field true if users want Batch to help fetch drivers from a third
 *  party location and install them for GPUs specified in policy.accelerators or
 *  instance_template on their behalf. Default is false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *installGpuDrivers;

/**
 *  Name of an instance template used to create VMs. Named the field as
 *  'instance_template' instead of 'template' to avoid c++ keyword conflict.
 */
@property(nonatomic, copy, nullable) NSString *instanceTemplate;

/** InstancePolicy. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_InstancePolicy *policy;

@end


/**
 *  VM instance status.
 */
@interface GTLRCloudBatch_InstanceStatus : GTLRObject

/** The Compute Engine machine type. */
@property(nonatomic, copy, nullable) NSString *machineType;

/**
 *  The VM instance provisioning model.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBatch_InstanceStatus_ProvisioningModel_Preemptible
 *        Preemptible VM (PVM). Above SPOT VM is the preferable model for
 *        preemptible VM instances: the old preemptible VM model (indicated by
 *        this field) is the older model, and has been migrated to use the SPOT
 *        model as the underlying technology. This old model will still be
 *        supported. (Value: "PREEMPTIBLE")
 *    @arg @c kGTLRCloudBatch_InstanceStatus_ProvisioningModel_ProvisioningModelUnspecified
 *        Unspecified. (Value: "PROVISIONING_MODEL_UNSPECIFIED")
 *    @arg @c kGTLRCloudBatch_InstanceStatus_ProvisioningModel_Spot SPOT VM.
 *        (Value: "SPOT")
 *    @arg @c kGTLRCloudBatch_InstanceStatus_ProvisioningModel_Standard Standard
 *        VM. (Value: "STANDARD")
 */
@property(nonatomic, copy, nullable) NSString *provisioningModel;

/**
 *  The max number of tasks can be assigned to this instance type.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *taskPack;

@end


/**
 *  The Cloud Batch Job description.
 */
@interface GTLRCloudBatch_Job : GTLRObject

/** Compute resource allocation for all TaskGroups in the Job. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_AllocationPolicy *allocationPolicy;

/** Output only. When the Job was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Labels for the Job. Labels could be user provided or system generated. For
 *  example, "labels": { "department": "finance", "environment": "test" } You
 *  can assign up to 64 labels. [Google Compute Engine label
 *  restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions)
 *  apply. Label names that start with "goog-" or "google-" are reserved.
 */
@property(nonatomic, strong, nullable) GTLRCloudBatch_Job_Labels *labels;

/** Log preservation policy for the Job. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_LogsPolicy *logsPolicy;

/**
 *  Output only. Job name. For example:
 *  "projects/123456/locations/us-central1/jobs/job01".
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Notification configurations. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_JobNotification *> *notifications;

/**
 *  Priority of the Job. The valid value range is [0, 100). A job with higher
 *  priority value is more likely to run earlier if all other requirements are
 *  satisfied.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *priority;

/** Output only. Job status. It is read only for users. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_JobStatus *status;

/** Required. TaskGroups in the Job. Only one TaskGroup is supported now. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_TaskGroup *> *taskGroups;

/**
 *  Output only. A system generated unique ID (in UUID4 format) for the Job.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. The last time the Job was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Labels for the Job. Labels could be user provided or system generated. For
 *  example, "labels": { "department": "finance", "environment": "test" } You
 *  can assign up to 64 labels. [Google Compute Engine label
 *  restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions)
 *  apply. Label names that start with "goog-" or "google-" are reserved.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudBatch_Job_Labels : GTLRObject
@end


/**
 *  Notification configurations.
 */
@interface GTLRCloudBatch_JobNotification : GTLRObject

/**
 *  The attribute requirements of messages to be sent to this Pub/Sub topic.
 *  Without this field, no message will be sent.
 */
@property(nonatomic, strong, nullable) GTLRCloudBatch_Message *message;

/**
 *  The Pub/Sub topic where notifications like the job state changes will be
 *  published. This topic exist in the same project as the job and billings will
 *  be charged to this project. If not specified, no Pub/Sub messages will be
 *  sent. Topic format: `projects/{project}/topics/{topic}`.
 */
@property(nonatomic, copy, nullable) NSString *pubsubTopic;

@end


/**
 *  Job status.
 */
@interface GTLRCloudBatch_JobStatus : GTLRObject

/** The duration of time that the Job spent in status RUNNING. */
@property(nonatomic, strong, nullable) GTLRDuration *runDuration;

/**
 *  Job state
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBatch_JobStatus_State_DeletionInProgress The Job will be
 *        deleted, but has not been deleted yet. Typically this is because
 *        resources used by the Job are still being cleaned up. (Value:
 *        "DELETION_IN_PROGRESS")
 *    @arg @c kGTLRCloudBatch_JobStatus_State_Failed At least one Task in the
 *        Job has failed. (Value: "FAILED")
 *    @arg @c kGTLRCloudBatch_JobStatus_State_Queued Job is admitted (validated
 *        and persisted) and waiting for resources. (Value: "QUEUED")
 *    @arg @c kGTLRCloudBatch_JobStatus_State_Running Resource allocation has
 *        been successful. At least one Task in the Job is RUNNING. (Value:
 *        "RUNNING")
 *    @arg @c kGTLRCloudBatch_JobStatus_State_Scheduled Job is scheduled to run
 *        as soon as resource allocation is ready. The resource allocation may
 *        happen at a later time but with a high chance to succeed. (Value:
 *        "SCHEDULED")
 *    @arg @c kGTLRCloudBatch_JobStatus_State_StateUnspecified Value
 *        "STATE_UNSPECIFIED"
 *    @arg @c kGTLRCloudBatch_JobStatus_State_Succeeded All Tasks in the Job
 *        have finished successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Job status events */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_StatusEvent *> *statusEvents;

/**
 *  Aggregated task status for each TaskGroup in the Job. The map key is
 *  TaskGroup ID.
 */
@property(nonatomic, strong, nullable) GTLRCloudBatch_JobStatus_TaskGroups *taskGroups;

@end


/**
 *  Aggregated task status for each TaskGroup in the Job. The map key is
 *  TaskGroup ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudBatch_TaskGroupStatus. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBatch_JobStatus_TaskGroups : GTLRObject
@end


/**
 *  LifecyclePolicy describes how to deal with task failures based on different
 *  conditions.
 */
@interface GTLRCloudBatch_LifecyclePolicy : GTLRObject

/**
 *  Action to execute when ActionCondition is true.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBatch_LifecyclePolicy_Action_ActionUnspecified Action
 *        unspecified. (Value: "ACTION_UNSPECIFIED")
 *    @arg @c kGTLRCloudBatch_LifecyclePolicy_Action_FailTask Action that tasks
 *        in the group will be stopped immediately. (Value: "FAIL_TASK")
 *    @arg @c kGTLRCloudBatch_LifecyclePolicy_Action_RetryTask Action that tasks
 *        in the group will be scheduled to re-execute. (Value: "RETRY_TASK")
 */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  Conditions that decide why a task failure is dealt with a specific action.
 */
@property(nonatomic, strong, nullable) GTLRCloudBatch_ActionCondition *actionCondition;

@end


/**
 *  ListJob Response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "jobs" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudBatch_ListJobsResponse : GTLRCollectionObject

/**
 *  Jobs.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_Job *> *jobs;

/** Next page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudBatch_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudBatch_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_Operation *> *operations;

@end


/**
 *  ListTasks Response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "tasks" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudBatch_ListTasksResponse : GTLRCollectionObject

/** Next page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Tasks.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_Task *> *tasks;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRCloudBatch_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCloudBatch_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRCloudBatch_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudBatch_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBatch_Location_Metadata : GTLRObject
@end


/**
 *  GTLRCloudBatch_LocationPolicy
 */
@interface GTLRCloudBatch_LocationPolicy : GTLRObject

/**
 *  A list of allowed location names represented by internal URLs. Each location
 *  can be a region or a zone. Only one region or multiple zones in one region
 *  is supported now. For example, ["regions/us-central1"] allow VMs in any
 *  zones in region us-central1. ["zones/us-central1-a", "zones/us-central1-c"]
 *  only allow VMs in zones us-central1-a and us-central1-c. All locations end
 *  up in different regions would cause errors. For example,
 *  ["regions/us-central1", "zones/us-central1-a", "zones/us-central1-b",
 *  "zones/us-west1-a"] contains 2 regions "us-central1" and "us-west1". An
 *  error is expected in this case.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedLocations;

@end


/**
 *  LogsPolicy describes how outputs from a Job's Tasks (stdout/stderr) will be
 *  preserved.
 */
@interface GTLRCloudBatch_LogsPolicy : GTLRObject

/**
 *  Where logs should be saved.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBatch_LogsPolicy_Destination_CloudLogging Logs are
 *        streamed to Cloud Logging. (Value: "CLOUD_LOGGING")
 *    @arg @c kGTLRCloudBatch_LogsPolicy_Destination_DestinationUnspecified Logs
 *        are not preserved. (Value: "DESTINATION_UNSPECIFIED")
 *    @arg @c kGTLRCloudBatch_LogsPolicy_Destination_Path Logs are saved to a
 *        file path. (Value: "PATH")
 */
@property(nonatomic, copy, nullable) NSString *destination;

/**
 *  The path to which logs are saved when the destination = PATH. This can be a
 *  local file path on the VM, or under the mount point of a Persistent Disk or
 *  Filestore, or a Cloud Storage path.
 */
@property(nonatomic, copy, nullable) NSString *logsPath;

@end


/**
 *  Message details. Describe the attribute that a message should have. Without
 *  specified message attributes, no message will be sent by default.
 */
@interface GTLRCloudBatch_Message : GTLRObject

/**
 *  The new job state.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBatch_Message_NewJobState_DeletionInProgress The Job
 *        will be deleted, but has not been deleted yet. Typically this is
 *        because resources used by the Job are still being cleaned up. (Value:
 *        "DELETION_IN_PROGRESS")
 *    @arg @c kGTLRCloudBatch_Message_NewJobState_Failed At least one Task in
 *        the Job has failed. (Value: "FAILED")
 *    @arg @c kGTLRCloudBatch_Message_NewJobState_Queued Job is admitted
 *        (validated and persisted) and waiting for resources. (Value: "QUEUED")
 *    @arg @c kGTLRCloudBatch_Message_NewJobState_Running Resource allocation
 *        has been successful. At least one Task in the Job is RUNNING. (Value:
 *        "RUNNING")
 *    @arg @c kGTLRCloudBatch_Message_NewJobState_Scheduled Job is scheduled to
 *        run as soon as resource allocation is ready. The resource allocation
 *        may happen at a later time but with a high chance to succeed. (Value:
 *        "SCHEDULED")
 *    @arg @c kGTLRCloudBatch_Message_NewJobState_StateUnspecified Value
 *        "STATE_UNSPECIFIED"
 *    @arg @c kGTLRCloudBatch_Message_NewJobState_Succeeded All Tasks in the Job
 *        have finished successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *newJobState NS_RETURNS_NOT_RETAINED;

/**
 *  The new task state.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBatch_Message_NewTaskState_Assigned The Task is assigned
 *        to at least one VM. (Value: "ASSIGNED")
 *    @arg @c kGTLRCloudBatch_Message_NewTaskState_Failed The Task has failed.
 *        (Value: "FAILED")
 *    @arg @c kGTLRCloudBatch_Message_NewTaskState_Pending The Task is created
 *        and waiting for resources. (Value: "PENDING")
 *    @arg @c kGTLRCloudBatch_Message_NewTaskState_Running The Task is running.
 *        (Value: "RUNNING")
 *    @arg @c kGTLRCloudBatch_Message_NewTaskState_StateUnspecified unknown
 *        state (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudBatch_Message_NewTaskState_Succeeded The Task has
 *        succeeded. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *newTaskState NS_RETURNS_NOT_RETAINED;

/**
 *  The message type.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBatch_Message_Type_JobStateChanged Notify users that the
 *        job state has changed. (Value: "JOB_STATE_CHANGED")
 *    @arg @c kGTLRCloudBatch_Message_Type_TaskStateChanged Notify users that
 *        the task state has changed. (Value: "TASK_STATE_CHANGED")
 *    @arg @c kGTLRCloudBatch_Message_Type_TypeUnspecified Unspecified. (Value:
 *        "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A network interface.
 */
@interface GTLRCloudBatch_NetworkInterface : GTLRObject

/** The URL of the network resource. */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  Default is false (with an external IP address). Required if no external
 *  public IP address is attached to the VM. If no external public IP address,
 *  additional configuration is required to allow the VM to access Google
 *  Services. See
 *  https://cloud.google.com/vpc/docs/configure-private-google-access and
 *  https://cloud.google.com/nat/docs/gce-example#create-nat for more
 *  information.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *noExternalIpAddress;

/** The URL of the Subnetwork resource. */
@property(nonatomic, copy, nullable) NSString *subnetwork;

@end


/**
 *  NetworkPolicy describes VM instance network configurations.
 */
@interface GTLRCloudBatch_NetworkPolicy : GTLRObject

/** Network configurations. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_NetworkInterface *> *networkInterfaces;

@end


/**
 *  Represents an NFS volume.
 */
@interface GTLRCloudBatch_NFS : GTLRObject

/** Remote source path exported from the NFS, e.g., "/share". */
@property(nonatomic, copy, nullable) NSString *remotePath;

/** The IP address of the NFS. */
@property(nonatomic, copy, nullable) NSString *server;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudBatch_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudBatch_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudBatch_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBatch_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBatch_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRCloudBatch_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRCloudBatch_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Request to report agent's state. The Request itself implies the agent is
 *  healthy.
 */
@interface GTLRCloudBatch_ReportAgentStateRequest : GTLRObject

/** Agent info. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_AgentInfo *agentInfo;

/** Agent metadata. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_AgentMetadata *metadata;

@end


/**
 *  Response to ReportAgentStateRequest.
 */
@interface GTLRCloudBatch_ReportAgentStateResponse : GTLRObject

/** Tasks assigned to the agent */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_AgentTask *> *tasks;

@end


/**
 *  Runnable describes instructions for executing a specific script or container
 *  as part of a Task.
 */
@interface GTLRCloudBatch_Runnable : GTLRObject

/**
 *  By default, after a Runnable fails, no further Runnable are executed. This
 *  flag indicates that this Runnable must be run even if the Task has already
 *  failed. This is useful for Runnables that copy output files off of the VM or
 *  for debugging. The always_run flag does not override the Task's overall
 *  max_run_duration. If the max_run_duration has expired then no further
 *  Runnables will execute, not even always_run Runnables.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *alwaysRun;

/**
 *  This flag allows a Runnable to continue running in the background while the
 *  Task executes subsequent Runnables. This is useful to provide services to
 *  other Runnables (or to provide debugging support tools like SSH servers).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *background;

/** Barrier runnable. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_Barrier *barrier;

/** Container runnable. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_Container *container;

/**
 *  Environment variables for this Runnable (overrides variables set for the
 *  whole Task or TaskGroup).
 */
@property(nonatomic, strong, nullable) GTLRCloudBatch_Environment *environment;

/**
 *  Normally, a non-zero exit status causes the Task to fail. This flag allows
 *  execution of other Runnables to continue instead.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreExitStatus;

/** Script runnable. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_Script *script;

/** Timeout for this Runnable. */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

@end


/**
 *  Script runnable.
 */
@interface GTLRCloudBatch_Script : GTLRObject

/** Script file path on the host VM. */
@property(nonatomic, copy, nullable) NSString *path;

/** Shell script text. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Carries information about a Google Cloud service account.
 */
@interface GTLRCloudBatch_ServiceAccount : GTLRObject

/**
 *  Email address of the service account. If not specified, the default Compute
 *  Engine service account for the project will be used. If instance template is
 *  being used, the service account has to be specified in the instance template
 *  and it has to match the email field here.
 */
@property(nonatomic, copy, nullable) NSString *email;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRCloudBatch_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRCloudBatch_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudBatch_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudBatch_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBatch_Status_Details_Item : GTLRObject
@end


/**
 *  Status event
 */
@interface GTLRCloudBatch_StatusEvent : GTLRObject

/**
 *  Description of the event.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The time this event occurred. */
@property(nonatomic, strong, nullable) GTLRDateTime *eventTime;

/** Task Execution */
@property(nonatomic, strong, nullable) GTLRCloudBatch_TaskExecution *taskExecution;

/** Type of the event. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A Cloud Batch task.
 */
@interface GTLRCloudBatch_Task : GTLRObject

/**
 *  Task name. The name is generated from the parent TaskGroup name and 'id'
 *  field. For example:
 *  "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01/tasks/task01".
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Task Status. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_TaskStatus *status;

@end


/**
 *  This Task Execution field includes detail information for task execution
 *  procedures, based on StatusEvent types.
 */
@interface GTLRCloudBatch_TaskExecution : GTLRObject

/**
 *  When task is completed as the status of FAILED or SUCCEEDED, exit code is
 *  for one task execution result, default is 0 as success.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exitCode;

@end


/**
 *  A TaskGroup contains one or multiple Tasks that share the same Runnable but
 *  with different runtime parameters.
 */
@interface GTLRCloudBatch_TaskGroup : GTLRObject

/**
 *  Output only. TaskGroup name. The system generates this field based on parent
 *  Job name. For example:
 *  "projects/123456/locations/us-west1/jobs/job01/taskGroups/group01".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Max number of tasks that can run in parallel. Default to min(task_count,
 *  1000).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *parallelism;

/**
 *  When true, Batch will configure SSH to allow passwordless login between VMs
 *  running the Batch tasks in the same TaskGroup.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *permissiveSsh;

/**
 *  When true, Batch will populate a file with a list of all VMs assigned to the
 *  TaskGroup and set the BATCH_HOSTS_FILE environment variable to the path of
 *  that file. Defaults to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requireHostsFile;

/**
 *  Number of Tasks in the TaskGroup. default is 1
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *taskCount;

/**
 *  Max number of tasks that can be run on a VM at the same time. If not
 *  specified, the system will decide a value based on available compute
 *  resources on a VM and task requirements.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *taskCountPerNode;

/**
 *  An array of environment variable mappings, which are passed to Tasks with
 *  matching indices. If task_environments is used then task_count should not be
 *  specified in the request (and will be ignored). Task count will be the
 *  length of task_environments. Tasks get a BATCH_TASK_INDEX and
 *  BATCH_TASK_COUNT environment variable, in addition to any environment
 *  variables set in task_environments, specifying the number of Tasks in the
 *  Task's parent TaskGroup, and the specific Task's index in the TaskGroup (0
 *  through BATCH_TASK_COUNT - 1). task_environments supports up to 200 entries.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_Environment *> *taskEnvironments;

/** Required. Tasks in the group share the same task spec. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_TaskSpec *taskSpec;

@end


/**
 *  Aggregated task status for a TaskGroup.
 */
@interface GTLRCloudBatch_TaskGroupStatus : GTLRObject

/**
 *  Count of task in each state in the TaskGroup. The map key is task state
 *  name.
 */
@property(nonatomic, strong, nullable) GTLRCloudBatch_TaskGroupStatus_Counts *counts;

/** Status of instances allocated for the TaskGroup. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_InstanceStatus *> *instances;

@end


/**
 *  Count of task in each state in the TaskGroup. The map key is task state
 *  name.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of longLongValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudBatch_TaskGroupStatus_Counts : GTLRObject
@end


/**
 *  Spec of a task
 */
@interface GTLRCloudBatch_TaskSpec : GTLRObject

/** ComputeResource requirements. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_ComputeResource *computeResource;

/** Environment variables to set before running the Task. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_Environment *environment;

/**
 *  Environment variables to set before running the Task. You can set up to 100
 *  environments.
 */
@property(nonatomic, strong, nullable) GTLRCloudBatch_TaskSpec_Environments *environments;

/**
 *  Lifecycle management schema when any task in a task group is failed. The
 *  valid size of lifecycle policies are [0, 10]. For each lifecycle policy,
 *  when the condition is met, the action in that policy will execute. If there
 *  are multiple policies that the task execution result matches, we use the
 *  action from the first matched policy. If task execution result does not meet
 *  with any of the defined lifecycle policy, we consider it as the default
 *  policy. Default policy means if the exit code is 0, exit task. If task ends
 *  with non-zero exit code, retry the task with max_retry_count.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_LifecyclePolicy *> *lifecyclePolicies;

/**
 *  Maximum number of retries on failures. The default, 0, which means never
 *  retry. The valid value range is [0, 10].
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxRetryCount;

/**
 *  Maximum duration the task should run. The task will be killed and marked as
 *  FAILED if over this limit.
 */
@property(nonatomic, strong, nullable) GTLRDuration *maxRunDuration;

/**
 *  The sequence of scripts or containers to run for this Task. Each Task using
 *  this TaskSpec executes its list of runnables in order. The Task succeeds if
 *  all of its runnables either exit with a zero status or any that exit with a
 *  non-zero status have the ignore_exit_status flag. Background runnables are
 *  killed automatically (if they have not already exited) a short time after
 *  all foreground runnables have completed. Even though this is likely to
 *  result in a non-zero exit status for the background runnable, these
 *  automatic kills are not treated as Task failures.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_Runnable *> *runnables;

/** Volumes to mount before running Tasks using this TaskSpec. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_Volume *> *volumes;

@end


/**
 *  Environment variables to set before running the Task. You can set up to 100
 *  environments.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudBatch_TaskSpec_Environments : GTLRObject
@end


/**
 *  Status of a task
 */
@interface GTLRCloudBatch_TaskStatus : GTLRObject

/**
 *  Task state
 *
 *  Likely values:
 *    @arg @c kGTLRCloudBatch_TaskStatus_State_Assigned The Task is assigned to
 *        at least one VM. (Value: "ASSIGNED")
 *    @arg @c kGTLRCloudBatch_TaskStatus_State_Failed The Task has failed.
 *        (Value: "FAILED")
 *    @arg @c kGTLRCloudBatch_TaskStatus_State_Pending The Task is created and
 *        waiting for resources. (Value: "PENDING")
 *    @arg @c kGTLRCloudBatch_TaskStatus_State_Running The Task is running.
 *        (Value: "RUNNING")
 *    @arg @c kGTLRCloudBatch_TaskStatus_State_StateUnspecified unknown state
 *        (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudBatch_TaskStatus_State_Succeeded The Task has succeeded.
 *        (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Detailed info about why the state is reached. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudBatch_StatusEvent *> *statusEvents;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRCloudBatch_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRCloudBatch_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Volume describes a volume and parameters for it to be mounted to a VM.
 */
@interface GTLRCloudBatch_Volume : GTLRObject

/**
 *  Device name of an attached disk volume, which should align with a
 *  device_name specified by
 *  job.allocation_policy.instances[0].policy.disks[i].device_name or defined by
 *  the given instance template in
 *  job.allocation_policy.instances[0].instance_template.
 */
@property(nonatomic, copy, nullable) NSString *deviceName;

/** A Google Cloud Storage (GCS) volume. */
@property(nonatomic, strong, nullable) GTLRCloudBatch_GCS *gcs;

/**
 *  For Google Cloud Storage (GCS), mount options are the options supported by
 *  the gcsfuse tool (https://github.com/GoogleCloudPlatform/gcsfuse). For
 *  existing persistent disks, mount options provided by the mount command
 *  (https://man7.org/linux/man-pages/man8/mount.8.html) except writing are
 *  supported. This is due to restrictions of multi-writer mode
 *  (https://cloud.google.com/compute/docs/disks/sharing-disks-between-vms). For
 *  other attached disks and Network File System (NFS), mount options are these
 *  supported by the mount command
 *  (https://man7.org/linux/man-pages/man8/mount.8.html).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *mountOptions;

/** The mount path for the volume, e.g. /mnt/disks/share. */
@property(nonatomic, copy, nullable) NSString *mountPath;

/**
 *  A Network File System (NFS) volume. For example, a Filestore file share.
 */
@property(nonatomic, strong, nullable) GTLRCloudBatch_NFS *nfs;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
