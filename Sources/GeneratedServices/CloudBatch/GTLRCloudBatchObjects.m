// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Batch API (batch/v1)
// Description:
//   An API to manage the running of batch jobs on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/batch/

#import <GoogleAPIClientForREST/GTLRCloudBatchObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRCloudBatch_AgentInfo.state
NSString * const kGTLRCloudBatch_AgentInfo_State_AgentRunning  = @"AGENT_RUNNING";
NSString * const kGTLRCloudBatch_AgentInfo_State_AgentStarting = @"AGENT_STARTING";
NSString * const kGTLRCloudBatch_AgentInfo_State_AgentStateUnspecified = @"AGENT_STATE_UNSPECIFIED";
NSString * const kGTLRCloudBatch_AgentInfo_State_AgentStopped  = @"AGENT_STOPPED";

// GTLRCloudBatch_AgentTask.intendedState
NSString * const kGTLRCloudBatch_AgentTask_IntendedState_Assigned = @"ASSIGNED";
NSString * const kGTLRCloudBatch_AgentTask_IntendedState_Cancelled = @"CANCELLED";
NSString * const kGTLRCloudBatch_AgentTask_IntendedState_Deleted = @"DELETED";
NSString * const kGTLRCloudBatch_AgentTask_IntendedState_IntendedStateUnspecified = @"INTENDED_STATE_UNSPECIFIED";

// GTLRCloudBatch_AuditLogConfig.logType
NSString * const kGTLRCloudBatch_AuditLogConfig_LogType_AdminRead = @"ADMIN_READ";
NSString * const kGTLRCloudBatch_AuditLogConfig_LogType_DataRead = @"DATA_READ";
NSString * const kGTLRCloudBatch_AuditLogConfig_LogType_DataWrite = @"DATA_WRITE";
NSString * const kGTLRCloudBatch_AuditLogConfig_LogType_LogTypeUnspecified = @"LOG_TYPE_UNSPECIFIED";

// GTLRCloudBatch_InstancePolicy.provisioningModel
NSString * const kGTLRCloudBatch_InstancePolicy_ProvisioningModel_Preemptible = @"PREEMPTIBLE";
NSString * const kGTLRCloudBatch_InstancePolicy_ProvisioningModel_ProvisioningModelUnspecified = @"PROVISIONING_MODEL_UNSPECIFIED";
NSString * const kGTLRCloudBatch_InstancePolicy_ProvisioningModel_Spot = @"SPOT";
NSString * const kGTLRCloudBatch_InstancePolicy_ProvisioningModel_Standard = @"STANDARD";

// GTLRCloudBatch_InstanceStatus.provisioningModel
NSString * const kGTLRCloudBatch_InstanceStatus_ProvisioningModel_Preemptible = @"PREEMPTIBLE";
NSString * const kGTLRCloudBatch_InstanceStatus_ProvisioningModel_ProvisioningModelUnspecified = @"PROVISIONING_MODEL_UNSPECIFIED";
NSString * const kGTLRCloudBatch_InstanceStatus_ProvisioningModel_Spot = @"SPOT";
NSString * const kGTLRCloudBatch_InstanceStatus_ProvisioningModel_Standard = @"STANDARD";

// GTLRCloudBatch_JobStatus.state
NSString * const kGTLRCloudBatch_JobStatus_State_DeletionInProgress = @"DELETION_IN_PROGRESS";
NSString * const kGTLRCloudBatch_JobStatus_State_Failed        = @"FAILED";
NSString * const kGTLRCloudBatch_JobStatus_State_Queued        = @"QUEUED";
NSString * const kGTLRCloudBatch_JobStatus_State_Running       = @"RUNNING";
NSString * const kGTLRCloudBatch_JobStatus_State_Scheduled     = @"SCHEDULED";
NSString * const kGTLRCloudBatch_JobStatus_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRCloudBatch_JobStatus_State_Succeeded     = @"SUCCEEDED";

// GTLRCloudBatch_LifecyclePolicy.action
NSString * const kGTLRCloudBatch_LifecyclePolicy_Action_ActionUnspecified = @"ACTION_UNSPECIFIED";
NSString * const kGTLRCloudBatch_LifecyclePolicy_Action_FailTask = @"FAIL_TASK";
NSString * const kGTLRCloudBatch_LifecyclePolicy_Action_RetryTask = @"RETRY_TASK";

// GTLRCloudBatch_LogsPolicy.destination
NSString * const kGTLRCloudBatch_LogsPolicy_Destination_CloudLogging = @"CLOUD_LOGGING";
NSString * const kGTLRCloudBatch_LogsPolicy_Destination_DestinationUnspecified = @"DESTINATION_UNSPECIFIED";
NSString * const kGTLRCloudBatch_LogsPolicy_Destination_Path   = @"PATH";

// GTLRCloudBatch_Message.newJobState
NSString * const kGTLRCloudBatch_Message_NewJobState_DeletionInProgress = @"DELETION_IN_PROGRESS";
NSString * const kGTLRCloudBatch_Message_NewJobState_Failed    = @"FAILED";
NSString * const kGTLRCloudBatch_Message_NewJobState_Queued    = @"QUEUED";
NSString * const kGTLRCloudBatch_Message_NewJobState_Running   = @"RUNNING";
NSString * const kGTLRCloudBatch_Message_NewJobState_Scheduled = @"SCHEDULED";
NSString * const kGTLRCloudBatch_Message_NewJobState_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRCloudBatch_Message_NewJobState_Succeeded = @"SUCCEEDED";

// GTLRCloudBatch_Message.newTaskState
NSString * const kGTLRCloudBatch_Message_NewTaskState_Assigned = @"ASSIGNED";
NSString * const kGTLRCloudBatch_Message_NewTaskState_Failed   = @"FAILED";
NSString * const kGTLRCloudBatch_Message_NewTaskState_Pending  = @"PENDING";
NSString * const kGTLRCloudBatch_Message_NewTaskState_Running  = @"RUNNING";
NSString * const kGTLRCloudBatch_Message_NewTaskState_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRCloudBatch_Message_NewTaskState_Succeeded = @"SUCCEEDED";

// GTLRCloudBatch_Message.type
NSString * const kGTLRCloudBatch_Message_Type_JobStateChanged  = @"JOB_STATE_CHANGED";
NSString * const kGTLRCloudBatch_Message_Type_TaskStateChanged = @"TASK_STATE_CHANGED";
NSString * const kGTLRCloudBatch_Message_Type_TypeUnspecified  = @"TYPE_UNSPECIFIED";

// GTLRCloudBatch_TaskStatus.state
NSString * const kGTLRCloudBatch_TaskStatus_State_Assigned     = @"ASSIGNED";
NSString * const kGTLRCloudBatch_TaskStatus_State_Failed       = @"FAILED";
NSString * const kGTLRCloudBatch_TaskStatus_State_Pending      = @"PENDING";
NSString * const kGTLRCloudBatch_TaskStatus_State_Running      = @"RUNNING";
NSString * const kGTLRCloudBatch_TaskStatus_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRCloudBatch_TaskStatus_State_Succeeded    = @"SUCCEEDED";

// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Accelerator
//

@implementation GTLRCloudBatch_Accelerator
@dynamic count, installGpuDrivers, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_ActionCondition
//

@implementation GTLRCloudBatch_ActionCondition
@dynamic exitCodes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"exitCodes" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_AgentInfo
//

@implementation GTLRCloudBatch_AgentInfo
@dynamic jobId, reportTime, state, taskGroupId, tasks;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"tasks" : [GTLRCloudBatch_AgentTaskInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_AgentMetadata
//

@implementation GTLRCloudBatch_AgentMetadata
@dynamic creationTime, creator, instance, instanceId, osRelease, version,
         zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_AgentMetadata_OsRelease
//

@implementation GTLRCloudBatch_AgentMetadata_OsRelease

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_AgentTask
//

@implementation GTLRCloudBatch_AgentTask
@dynamic intendedState, reachedBarrier, spec, status, task;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_AgentTaskInfo
//

@implementation GTLRCloudBatch_AgentTaskInfo
@dynamic runnable, taskId, taskStatus;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_AllocationPolicy
//

@implementation GTLRCloudBatch_AllocationPolicy
@dynamic instances, labels, location, network, serviceAccount;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"instances" : [GTLRCloudBatch_InstancePolicyOrTemplate class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_AllocationPolicy_Labels
//

@implementation GTLRCloudBatch_AllocationPolicy_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_AttachedDisk
//

@implementation GTLRCloudBatch_AttachedDisk
@dynamic deviceName, existingDisk, newDisk;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_AuditConfig
//

@implementation GTLRCloudBatch_AuditConfig
@dynamic auditLogConfigs, service;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditLogConfigs" : [GTLRCloudBatch_AuditLogConfig class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_AuditLogConfig
//

@implementation GTLRCloudBatch_AuditLogConfig
@dynamic exemptedMembers, logType;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"exemptedMembers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Barrier
//

@implementation GTLRCloudBatch_Barrier
@dynamic name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Binding
//

@implementation GTLRCloudBatch_Binding
@dynamic condition, members, role;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"members" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_CancelOperationRequest
//

@implementation GTLRCloudBatch_CancelOperationRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_ComputeResource
//

@implementation GTLRCloudBatch_ComputeResource
@dynamic bootDiskMib, cpuMilli, memoryMib;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Container
//

@implementation GTLRCloudBatch_Container
@dynamic blockExternalNetwork, commands, entrypoint, imageUri, options,
         password, username, volumes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"commands" : [NSString class],
    @"volumes" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Disk
//

@implementation GTLRCloudBatch_Disk
@dynamic diskInterface, image, sizeGb, snapshot, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Empty
//

@implementation GTLRCloudBatch_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Environment
//

@implementation GTLRCloudBatch_Environment
@dynamic variables;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Environment_Variables
//

@implementation GTLRCloudBatch_Environment_Variables

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Expr
//

@implementation GTLRCloudBatch_Expr
@dynamic descriptionProperty, expression, location, title;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_GCS
//

@implementation GTLRCloudBatch_GCS
@dynamic remotePath;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_InstancePolicy
//

@implementation GTLRCloudBatch_InstancePolicy
@dynamic accelerators, disks, machineType, minCpuPlatform, provisioningModel;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"accelerators" : [GTLRCloudBatch_Accelerator class],
    @"disks" : [GTLRCloudBatch_AttachedDisk class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_InstancePolicyOrTemplate
//

@implementation GTLRCloudBatch_InstancePolicyOrTemplate
@dynamic installGpuDrivers, instanceTemplate, policy;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_InstanceStatus
//

@implementation GTLRCloudBatch_InstanceStatus
@dynamic machineType, provisioningModel, taskPack;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Job
//

@implementation GTLRCloudBatch_Job
@dynamic allocationPolicy, createTime, labels, logsPolicy, name, notifications,
         priority, status, taskGroups, uid, updateTime;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"notifications" : [GTLRCloudBatch_JobNotification class],
    @"taskGroups" : [GTLRCloudBatch_TaskGroup class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Job_Labels
//

@implementation GTLRCloudBatch_Job_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_JobNotification
//

@implementation GTLRCloudBatch_JobNotification
@dynamic message, pubsubTopic;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_JobStatus
//

@implementation GTLRCloudBatch_JobStatus
@dynamic runDuration, state, statusEvents, taskGroups;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statusEvents" : [GTLRCloudBatch_StatusEvent class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_JobStatus_TaskGroups
//

@implementation GTLRCloudBatch_JobStatus_TaskGroups

+ (Class)classForAdditionalProperties {
  return [GTLRCloudBatch_TaskGroupStatus class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_LifecyclePolicy
//

@implementation GTLRCloudBatch_LifecyclePolicy
@dynamic action, actionCondition;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_ListJobsResponse
//

@implementation GTLRCloudBatch_ListJobsResponse
@dynamic jobs, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jobs" : [GTLRCloudBatch_Job class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"jobs";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_ListLocationsResponse
//

@implementation GTLRCloudBatch_ListLocationsResponse
@dynamic locations, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"locations" : [GTLRCloudBatch_Location class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"locations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_ListOperationsResponse
//

@implementation GTLRCloudBatch_ListOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRCloudBatch_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_ListTasksResponse
//

@implementation GTLRCloudBatch_ListTasksResponse
@dynamic nextPageToken, tasks, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"tasks" : [GTLRCloudBatch_Task class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"tasks";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Location
//

@implementation GTLRCloudBatch_Location
@dynamic displayName, labels, locationId, metadata, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Location_Labels
//

@implementation GTLRCloudBatch_Location_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Location_Metadata
//

@implementation GTLRCloudBatch_Location_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_LocationPolicy
//

@implementation GTLRCloudBatch_LocationPolicy
@dynamic allowedLocations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"allowedLocations" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_LogsPolicy
//

@implementation GTLRCloudBatch_LogsPolicy
@dynamic destination, logsPath;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Message
//

@implementation GTLRCloudBatch_Message
@dynamic newJobState, newTaskState, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_NetworkInterface
//

@implementation GTLRCloudBatch_NetworkInterface
@dynamic network, noExternalIpAddress, subnetwork;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_NetworkPolicy
//

@implementation GTLRCloudBatch_NetworkPolicy
@dynamic networkInterfaces;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"networkInterfaces" : [GTLRCloudBatch_NetworkInterface class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_NFS
//

@implementation GTLRCloudBatch_NFS
@dynamic remotePath, server;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Operation
//

@implementation GTLRCloudBatch_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Operation_Metadata
//

@implementation GTLRCloudBatch_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Operation_Response
//

@implementation GTLRCloudBatch_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_OperationMetadata
//

@implementation GTLRCloudBatch_OperationMetadata
@dynamic apiVersion, createTime, endTime, requestedCancellation, statusMessage,
         target, verb;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Policy
//

@implementation GTLRCloudBatch_Policy
@dynamic auditConfigs, bindings, ETag, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditConfigs" : [GTLRCloudBatch_AuditConfig class],
    @"bindings" : [GTLRCloudBatch_Binding class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_ReportAgentStateRequest
//

@implementation GTLRCloudBatch_ReportAgentStateRequest
@dynamic agentInfo, metadata;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_ReportAgentStateResponse
//

@implementation GTLRCloudBatch_ReportAgentStateResponse
@dynamic tasks;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"tasks" : [GTLRCloudBatch_AgentTask class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Runnable
//

@implementation GTLRCloudBatch_Runnable
@dynamic alwaysRun, background, barrier, container, environment,
         ignoreExitStatus, script, timeout;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Script
//

@implementation GTLRCloudBatch_Script
@dynamic path, text;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_ServiceAccount
//

@implementation GTLRCloudBatch_ServiceAccount
@dynamic email;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_SetIamPolicyRequest
//

@implementation GTLRCloudBatch_SetIamPolicyRequest
@dynamic policy, updateMask;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Status
//

@implementation GTLRCloudBatch_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRCloudBatch_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Status_Details_Item
//

@implementation GTLRCloudBatch_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_StatusEvent
//

@implementation GTLRCloudBatch_StatusEvent
@dynamic descriptionProperty, eventTime, taskExecution, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Task
//

@implementation GTLRCloudBatch_Task
@dynamic name, status;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_TaskExecution
//

@implementation GTLRCloudBatch_TaskExecution
@dynamic exitCode;
@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_TaskGroup
//

@implementation GTLRCloudBatch_TaskGroup
@dynamic name, parallelism, permissiveSsh, requireHostsFile, taskCount,
         taskCountPerNode, taskEnvironments, taskSpec;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"taskEnvironments" : [GTLRCloudBatch_Environment class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_TaskGroupStatus
//

@implementation GTLRCloudBatch_TaskGroupStatus
@dynamic counts, instances;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"instances" : [GTLRCloudBatch_InstanceStatus class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_TaskGroupStatus_Counts
//

@implementation GTLRCloudBatch_TaskGroupStatus_Counts

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_TaskSpec
//

@implementation GTLRCloudBatch_TaskSpec
@dynamic computeResource, environment, environments, lifecyclePolicies,
         maxRetryCount, maxRunDuration, runnables, volumes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"lifecyclePolicies" : [GTLRCloudBatch_LifecyclePolicy class],
    @"runnables" : [GTLRCloudBatch_Runnable class],
    @"volumes" : [GTLRCloudBatch_Volume class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_TaskSpec_Environments
//

@implementation GTLRCloudBatch_TaskSpec_Environments

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_TaskStatus
//

@implementation GTLRCloudBatch_TaskStatus
@dynamic state, statusEvents;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statusEvents" : [GTLRCloudBatch_StatusEvent class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_TestIamPermissionsRequest
//

@implementation GTLRCloudBatch_TestIamPermissionsRequest
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_TestIamPermissionsResponse
//

@implementation GTLRCloudBatch_TestIamPermissionsResponse
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRCloudBatch_Volume
//

@implementation GTLRCloudBatch_Volume
@dynamic deviceName, gcs, mountOptions, mountPath, nfs;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"mountOptions" : [NSString class]
  };
  return map;
}

@end
