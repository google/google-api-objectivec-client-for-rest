// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Memorystore for Memcached API (memcache/v1)
// Description:
//   Google Cloud Memorystore for Memcached API is used for creating and
//   managing Memcached instances in GCP.
// Documentation:
//   https://cloud.google.com/memorystore/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudMemorystoreforMemcached_DailyCycle;
@class GTLRCloudMemorystoreforMemcached_Date;
@class GTLRCloudMemorystoreforMemcached_DenyMaintenancePeriod;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1LocationMetadata_AvailableZones;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1MaintenancePolicy;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1ZoneMetadata;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_Labels;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenancePolicyNames;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenanceSchedules;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_NotificationParameters;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_ProducerMetadata;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_SoftwareVersions;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings_MaintenancePolicies;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility_Eligibilities;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility;
@class GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata;
@class GTLRCloudMemorystoreforMemcached_Instance;
@class GTLRCloudMemorystoreforMemcached_Instance_Labels;
@class GTLRCloudMemorystoreforMemcached_InstanceMessage;
@class GTLRCloudMemorystoreforMemcached_Location;
@class GTLRCloudMemorystoreforMemcached_Location_Labels;
@class GTLRCloudMemorystoreforMemcached_Location_Metadata;
@class GTLRCloudMemorystoreforMemcached_LocationMetadata_AvailableZones;
@class GTLRCloudMemorystoreforMemcached_MaintenancePolicy;
@class GTLRCloudMemorystoreforMemcached_MaintenancePolicy_Labels;
@class GTLRCloudMemorystoreforMemcached_MaintenanceSchedule;
@class GTLRCloudMemorystoreforMemcached_MaintenanceWindow;
@class GTLRCloudMemorystoreforMemcached_MemcacheParameters;
@class GTLRCloudMemorystoreforMemcached_MemcacheParameters_Params;
@class GTLRCloudMemorystoreforMemcached_Node;
@class GTLRCloudMemorystoreforMemcached_NodeConfig;
@class GTLRCloudMemorystoreforMemcached_Operation;
@class GTLRCloudMemorystoreforMemcached_Operation_Metadata;
@class GTLRCloudMemorystoreforMemcached_Operation_Response;
@class GTLRCloudMemorystoreforMemcached_Schedule;
@class GTLRCloudMemorystoreforMemcached_Status;
@class GTLRCloudMemorystoreforMemcached_Status_Details_Item;
@class GTLRCloudMemorystoreforMemcached_TimeOfDay;
@class GTLRCloudMemorystoreforMemcached_UpdatePolicy;
@class GTLRCloudMemorystoreforMemcached_WeeklyCycle;
@class GTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow;
@class GTLRCloudMemorystoreforMemcached_ZoneMetadata;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance.state

/**
 *  Instance is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Creating;
/**
 *  Instance is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Deleting;
/**
 *  Instance encountered an error and is in indeterministic state.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Error;
/**
 *  Instance has been created and is ready to use.
 *
 *  Value: "READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Ready;
/**
 *  Instance is unheathy and under repair.
 *
 *  Value: "REPAIRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Repairing;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_StateUnspecified;
/**
 *  Instance is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Updating;

// ----------------------------------------------------------------------------
// GTLRCloudMemorystoreforMemcached_Instance.memcacheVersion

/**
 *  Memcached 1.5 version.
 *
 *  Value: "MEMCACHE_1_5"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Instance_MemcacheVersion_Memcache15;
/** Value: "MEMCACHE_VERSION_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Instance_MemcacheVersion_MemcacheVersionUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudMemorystoreforMemcached_Instance.state

/**
 *  Memcached instance is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Instance_State_Creating;
/**
 *  Memcached instance is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Instance_State_Deleting;
/**
 *  Memcached instance is going through maintenance, e.g. data plane rollout.
 *
 *  Value: "PERFORMING_MAINTENANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Instance_State_PerformingMaintenance;
/**
 *  Memcached instance has been created and ready to be used.
 *
 *  Value: "READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Instance_State_Ready;
/**
 *  State not set.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Instance_State_StateUnspecified;
/**
 *  Memcached instance is updating configuration such as maintenance policy and
 *  schedule.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Instance_State_Updating;

// ----------------------------------------------------------------------------
// GTLRCloudMemorystoreforMemcached_InstanceMessage.code

/**
 *  Message Code not set.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_InstanceMessage_Code_CodeUnspecified;
/**
 *  Memcached nodes are distributed unevenly.
 *
 *  Value: "ZONE_DISTRIBUTION_UNBALANCED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_InstanceMessage_Code_ZoneDistributionUnbalanced;

// ----------------------------------------------------------------------------
// GTLRCloudMemorystoreforMemcached_MaintenancePolicy.state

/**
 *  Resource is being deleted. It can no longer be attached to instances.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_MaintenancePolicy_State_Deleting;
/**
 *  Resource is ready to be used.
 *
 *  Value: "READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_MaintenancePolicy_State_Ready;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_MaintenancePolicy_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudMemorystoreforMemcached_Node.state

/**
 *  Node is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Node_State_Creating;
/**
 *  Node is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Node_State_Deleting;
/**
 *  Node has been created and ready to be used.
 *
 *  Value: "READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Node_State_Ready;
/**
 *  Node state is not set.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Node_State_StateUnspecified;
/**
 *  Node is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Node_State_Updating;

// ----------------------------------------------------------------------------
// GTLRCloudMemorystoreforMemcached_RescheduleMaintenanceRequest.rescheduleType

/**
 *  If the user wants to schedule the maintenance to happen now.
 *
 *  Value: "IMMEDIATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_RescheduleMaintenanceRequest_RescheduleType_Immediate;
/**
 *  If the user wants to use the existing maintenance policy to find the next
 *  available window.
 *
 *  Value: "NEXT_AVAILABLE_WINDOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_RescheduleMaintenanceRequest_RescheduleType_NextAvailableWindow;
/**
 *  Not set.
 *
 *  Value: "RESCHEDULE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_RescheduleMaintenanceRequest_RescheduleType_RescheduleTypeUnspecified;
/**
 *  If the user wants to reschedule the maintenance to a specific time.
 *
 *  Value: "SPECIFIC_TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_RescheduleMaintenanceRequest_RescheduleType_SpecificTime;

// ----------------------------------------------------------------------------
// GTLRCloudMemorystoreforMemcached_Schedule.day

/**
 *  The day of the week is unspecified.
 *
 *  Value: "DAY_OF_WEEK_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Schedule_Day_DayOfWeekUnspecified;
/**
 *  Friday
 *
 *  Value: "FRIDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Schedule_Day_Friday;
/**
 *  Monday
 *
 *  Value: "MONDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Schedule_Day_Monday;
/**
 *  Saturday
 *
 *  Value: "SATURDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Schedule_Day_Saturday;
/**
 *  Sunday
 *
 *  Value: "SUNDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Schedule_Day_Sunday;
/**
 *  Thursday
 *
 *  Value: "THURSDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Schedule_Day_Thursday;
/**
 *  Tuesday
 *
 *  Value: "TUESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Schedule_Day_Tuesday;
/**
 *  Wednesday
 *
 *  Value: "WEDNESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_Schedule_Day_Wednesday;

// ----------------------------------------------------------------------------
// GTLRCloudMemorystoreforMemcached_UpdatePolicy.channel

/**
 *  Early channel within a customer project.
 *
 *  Value: "EARLIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_UpdatePolicy_Channel_Earlier;
/**
 *  Later channel within a customer project.
 *
 *  Value: "LATER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_UpdatePolicy_Channel_Later;
/**
 *  Unspecified channel.
 *
 *  Value: "UPDATE_CHANNEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_UpdatePolicy_Channel_UpdateChannelUnspecified;
/**
 *  ! ! The follow channels can ONLY be used if you adopt the new MW system! ! !
 *  NOTE: all WEEK channels are assumed to be under a weekly window. ! There is
 *  currently no dedicated channel definitions for Daily windows. ! If you use
 *  Daily window, the system will assume a 1d (24Hours) advanced ! notification
 *  period b/w EARLY and LATER. ! We may consider support more flexible daily
 *  channel specifications in ! the future. WEEK1 == EARLIER with minimum 7d
 *  advanced notification. {7d, 14d} The system will treat them equally and will
 *  use WEEK1 whenever it can. New customers are encouraged to use this channel
 *  annotation.
 *
 *  Value: "WEEK1"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_UpdatePolicy_Channel_Week1;
/**
 *  WEEK2 == LATER with minimum 14d advanced notification {14d, 21d}.
 *
 *  Value: "WEEK2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_UpdatePolicy_Channel_Week2;
/**
 *  WEEK5 == 40d support. minimum 35d advanced notification {35d, 42d}.
 *
 *  Value: "WEEK5"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_UpdatePolicy_Channel_Week5;

// ----------------------------------------------------------------------------
// GTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow.day

/**
 *  The day of the week is unspecified.
 *
 *  Value: "DAY_OF_WEEK_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow_Day_DayOfWeekUnspecified;
/**
 *  Friday
 *
 *  Value: "FRIDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow_Day_Friday;
/**
 *  Monday
 *
 *  Value: "MONDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow_Day_Monday;
/**
 *  Saturday
 *
 *  Value: "SATURDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow_Day_Saturday;
/**
 *  Sunday
 *
 *  Value: "SUNDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow_Day_Sunday;
/**
 *  Thursday
 *
 *  Value: "THURSDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow_Day_Thursday;
/**
 *  Tuesday
 *
 *  Value: "TUESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow_Day_Tuesday;
/**
 *  Wednesday
 *
 *  Value: "WEDNESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow_Day_Wednesday;

/**
 *  Request for ApplyParameters.
 */
@interface GTLRCloudMemorystoreforMemcached_ApplyParametersRequest : GTLRObject

/**
 *  Whether to apply instance-level parameter group to all nodes. If set to
 *  true, users are restricted from specifying individual nodes, and
 *  `ApplyParameters` updates all nodes within the instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *applyAll;

/** Nodes to which the instance-level parameter group is applied. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *nodeIds;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRCloudMemorystoreforMemcached_CancelOperationRequest : GTLRObject
@end


/**
 *  Time window specified for daily operations.
 */
@interface GTLRCloudMemorystoreforMemcached_DailyCycle : GTLRObject

/** Output only. Duration of the time window, set by service producer. */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/** Time within the day to start the operations. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_TimeOfDay *startTime;

@end


/**
 *  Represents a whole or partial calendar date, such as a birthday. The time of
 *  day and time zone are either specified elsewhere or are insignificant. The
 *  date is relative to the Gregorian Calendar. This can represent one of the
 *  following: * A full date, with non-zero year, month, and day values. * A
 *  month and day, with a zero year (for example, an anniversary). * A year on
 *  its own, with a zero month and a zero day. * A year and month, with a zero
 *  day (for example, a credit card expiration date). Related types: *
 *  google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
@interface GTLRCloudMemorystoreforMemcached_Date : GTLRObject

/**
 *  Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
 *  to specify a year by itself or a year and month where the day isn't
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of a year. Must be from 1 to 12, or 0 to specify a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  DenyMaintenancePeriod definition. Maintenance is forbidden within the deny
 *  period. The start_date must be less than the end_date.
 */
@interface GTLRCloudMemorystoreforMemcached_DenyMaintenancePeriod : GTLRObject

/**
 *  Deny period end date. This can be: * A full date, with non-zero year, month
 *  and day values. * A month and day value, with a zero year. Allows recurring
 *  deny periods each year. Date matching this period will have to be before the
 *  end.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_Date *endDate;

/**
 *  Deny period start date. This can be: * A full date, with non-zero year,
 *  month and day values. * A month and day value, with a zero year. Allows
 *  recurring deny periods each year. Date matching this period will have to be
 *  the same or after the start.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_Date *startDate;

/**
 *  Time in UTC when the Blackout period starts on start_date and ends on
 *  end_date. This can be: * Full time. * All zeros for 00:00:00 UTC
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_TimeOfDay *time;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRCloudMemorystoreforMemcached_Empty : GTLRObject
@end


/**
 *  Metadata for the given google.cloud.location.Location.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1LocationMetadata : GTLRObject

/**
 *  Output only. The set of available zones in the location. The map is keyed by
 *  the lowercase ID of each zone, as defined by GCE. These keys can be
 *  specified in the `zones` field when creating a Memcached instance.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1LocationMetadata_AvailableZones *availableZones;

@end


/**
 *  Output only. The set of available zones in the location. The map is keyed by
 *  the lowercase ID of each zone, as defined by GCE. These keys can be
 *  specified in the `zones` field when creating a Memcached instance.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1ZoneMetadata.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1LocationMetadata_AvailableZones : GTLRObject
@end


/**
 *  Maintenance policy per instance.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1MaintenancePolicy : GTLRObject

/** Output only. The time when the policy was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Description of what this policy is for. Create/Update methods return
 *  INVALID_ARGUMENT if the length is greater than 512.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Output only. The time when the policy was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Required. Maintenance window that is applied to resources covered by this
 *  policy. Minimum 1. For the current version, the maximum number of
 *  weekly_maintenance_windows is expected to be one.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow *> *weeklyMaintenanceWindow;

@end


/**
 *  Represents the metadata of a long-running operation.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cancelRequested;

/** Output only. Time when the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Time when the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusDetail;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1ZoneMetadata
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1ZoneMetadata : GTLRObject
@end


/**
 *  GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance : GTLRObject

/**
 *  consumer_defined_name is the name that is set by the consumer. On the other
 *  hand Name field represents system-assigned id of an instance so consumers
 *  are not necessarily aware of it. consumer_defined_name is used for
 *  notification/UI purposes for consumer to recognize their instances.
 */
@property(nonatomic, copy, nullable) NSString *consumerDefinedName;

/** Output only. Timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. The instance_type of this instance of format:
 *  projects/{project_number}/locations/{location_id}/instanceTypes/{instance_type_id}.
 *  Instance Type represents a high-level tier or SKU of the service that this
 *  instance belong to. When enabled(eg: Maintenance Rollout), Rollout uses
 *  'instance_type' along with 'software_versions' to determine whether instance
 *  needs an update or not.
 */
@property(nonatomic, copy, nullable) NSString *instanceType;

/**
 *  Optional. Resource labels to represent user provided metadata. Each label is
 *  a key-value pair, where both the key and the value are arbitrary strings
 *  provided by the user.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_Labels *labels;

/**
 *  Optional. Deprecated. The MaintenancePolicies that have been attached to the
 *  instance. The key must be of the type name of the oneof policy name defined
 *  in MaintenancePolicy, and the referenced policy must define the same policy
 *  type. For complete details of MaintenancePolicy, please refer to
 *  go/cloud-saas-mw-ug.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenancePolicyNames *maintenancePolicyNames;

/**
 *  The MaintenanceSchedule contains the scheduling information of published
 *  maintenance schedule with same key as software_versions.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenanceSchedules *maintenanceSchedules;

/** Optional. The MaintenanceSettings associated with instance. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings *maintenanceSettings;

/**
 *  Unique name of the resource. It uses the form:
 *  `projects/{project_number}/locations/{location_id}/instances/{instance_id}`
 *  Note: This name is passed, stored and logged across the rollout system. So
 *  use of consumer project_id or any other consumer PII in the name is strongly
 *  discouraged for wipeout (go/wipeout) compliance. See
 *  go/elysium/project_ids#storage-guidance for more details.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. notification_parameter are information that service producers may
 *  like to include that is not relevant to Rollout. This parameter will only be
 *  passed to Gamma and Cloud Logging for notification/logging purpose.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_NotificationParameters *notificationParameters;

/**
 *  Output only. Custom string attributes used primarily to expose
 *  producer-specific information in monitoring dashboards. See
 *  go/get-instance-metadata.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_ProducerMetadata *producerMetadata;

/**
 *  Output only. The list of data plane resources provisioned for this instance,
 *  e.g. compute VMs. See go/get-instance-metadata.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource *> *provisionedResources;

/**
 *  Link to the SLM instance template. Only populated when updating SLM
 *  instances via SSA's Actuation service adaptor. Service producers with custom
 *  control plane (e.g. Cloud SQL) doesn't need to populate this field. Instead
 *  they should use software_versions.
 */
@property(nonatomic, copy, nullable) NSString *slmInstanceTemplate;

/**
 *  Output only. SLO metadata for instance classification in the Standardized
 *  dataplane SLO platform. See go/cloud-ssa-standard-slo for feature
 *  description.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata *sloMetadata;

/**
 *  Software versions that are used to deploy this instance. This can be mutated
 *  by rollout services.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_SoftwareVersions *softwareVersions;

/**
 *  Output only. Current lifecycle state of the resource (e.g. if it's being
 *  created or ready to use).
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Creating
 *        Instance is being created. (Value: "CREATING")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Deleting
 *        Instance is being deleted. (Value: "DELETING")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Error
 *        Instance encountered an error and is in indeterministic state. (Value:
 *        "ERROR")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Ready
 *        Instance has been created and is ready to use. (Value: "READY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Repairing
 *        Instance is unheathy and under repair. (Value: "REPAIRING")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_StateUnspecified
 *        Unspecified state. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Updating
 *        Instance is being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. ID of the associated GCP tenant project. See
 *  go/get-instance-metadata.
 */
@property(nonatomic, copy, nullable) NSString *tenantProjectId;

/** Output only. Timestamp when the resource was last modified. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Resource labels to represent user provided metadata. Each label is
 *  a key-value pair, where both the key and the value are arbitrary strings
 *  provided by the user.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_Labels : GTLRObject
@end


/**
 *  Optional. Deprecated. The MaintenancePolicies that have been attached to the
 *  instance. The key must be of the type name of the oneof policy name defined
 *  in MaintenancePolicy, and the referenced policy must define the same policy
 *  type. For complete details of MaintenancePolicy, please refer to
 *  go/cloud-saas-mw-ug.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenancePolicyNames : GTLRObject
@end


/**
 *  The MaintenanceSchedule contains the scheduling information of published
 *  maintenance schedule with same key as software_versions.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenanceSchedules : GTLRObject
@end


/**
 *  Optional. notification_parameter are information that service producers may
 *  like to include that is not relevant to Rollout. This parameter will only be
 *  passed to Gamma and Cloud Logging for notification/logging purpose.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_NotificationParameters : GTLRObject
@end


/**
 *  Output only. Custom string attributes used primarily to expose
 *  producer-specific information in monitoring dashboards. See
 *  go/get-instance-metadata.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_ProducerMetadata : GTLRObject
@end


/**
 *  Software versions that are used to deploy this instance. This can be mutated
 *  by rollout services.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1Instance_SoftwareVersions : GTLRObject
@end


/**
 *  Maintenance schedule which is exposed to customer and potentially end user,
 *  indicating published upcoming future maintenance schedule
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule : GTLRObject

/**
 *  This field is deprecated, and will be always set to true since reschedule
 *  can happen multiple times now. This field should not be removed until all
 *  service producers remove this for their customers.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canReschedule;

/** The scheduled end time for the maintenance. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The rollout management policy this maintenance schedule is associated with.
 *  When doing reschedule update request, the reschedule should be against this
 *  given policy.
 */
@property(nonatomic, copy, nullable) NSString *rolloutManagementPolicy;

/**
 *  schedule_deadline_time is the time deadline any schedule start time cannot
 *  go beyond, including reschedule. It's normally the initial schedule start
 *  time plus maintenance window length (1 day or 1 week). Maintenance cannot be
 *  scheduled to start beyond this deadline.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleDeadlineTime;

/** The scheduled start time for the maintenance. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  Maintenance settings associated with instance. Allows service producers and
 *  end users to assign settings that controls maintenance on this instance.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings : GTLRObject

/**
 *  Optional. Exclude instance from maintenance. When true, rollout service will
 *  not attempt maintenance on the instance. Rollout service will include the
 *  instance in reported rollout progress as not attempted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exclude;

/**
 *  Optional. If the update call is triggered from rollback, set the value as
 *  true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isRollback;

/**
 *  Optional. The MaintenancePolicies that have been attached to the instance.
 *  The key must be of the type name of the oneof policy name defined in
 *  MaintenancePolicy, and the embedded policy must define the same policy type.
 *  For complete details of MaintenancePolicy, please refer to
 *  go/cloud-saas-mw-ug. If only the name is needed, then only populate
 *  MaintenancePolicy.name.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings_MaintenancePolicies *maintenancePolicies;

@end


/**
 *  Optional. The MaintenancePolicies that have been attached to the instance.
 *  The key must be of the type name of the oneof policy name defined in
 *  MaintenancePolicy, and the embedded policy must define the same policy type.
 *  For complete details of MaintenancePolicy, please refer to
 *  go/cloud-saas-mw-ug. If only the name is needed, then only populate
 *  MaintenancePolicy.name.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudMemorystoreforMemcached_MaintenancePolicy. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings_MaintenancePolicies : GTLRObject
@end


/**
 *  Node information for custom per-node SLO implementations. SSA does not
 *  support per-node SLO, but producers can populate per-node information in
 *  SloMetadata for custom precomputations. SSA Eligibility Exporter will emit
 *  per-node metric based on this information.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata : GTLRObject

/** The location of the node, if different from instance location. */
@property(nonatomic, copy, nullable) NSString *location;

/** The id of the node. This should be equal to SaasInstanceNode.node_id. */
@property(nonatomic, copy, nullable) NSString *nodeId;

/**
 *  If present, this will override eligibility for the node coming from instance
 *  or exclusions for specified SLIs.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility *perSliEligibility;

@end


/**
 *  Contains notification related data.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter : GTLRObject

/** Optional. Array of string values. e.g. instance's replica information. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  PerSliSloEligibility is a mapping from an SLI name to eligibility.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility : GTLRObject

/**
 *  An entry in the eligibilities map specifies an eligibility for a particular
 *  SLI for the given instance. The SLI key in the name must be a valid SLI name
 *  specified in the Eligibility Exporter binary flags otherwise an error will
 *  be emitted by Eligibility Exporter and the oncaller will be alerted. If an
 *  SLI has been defined in the binary flags but the eligibilities map does not
 *  contain it, the corresponding SLI time series will not be emitted by the
 *  Eligibility Exporter. This ensures a smooth rollout and compatibility
 *  between the data produced by different versions of the Eligibility
 *  Exporters. If eligibilities map contains a key for an SLI which has not been
 *  declared in the binary flags, there will be an error message emitted in the
 *  Eligibility Exporter log and the metric for the SLI in question will not be
 *  emitted.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility_Eligibilities *eligibilities;

@end


/**
 *  An entry in the eligibilities map specifies an eligibility for a particular
 *  SLI for the given instance. The SLI key in the name must be a valid SLI name
 *  specified in the Eligibility Exporter binary flags otherwise an error will
 *  be emitted by Eligibility Exporter and the oncaller will be alerted. If an
 *  SLI has been defined in the binary flags but the eligibilities map does not
 *  contain it, the corresponding SLI time series will not be emitted by the
 *  Eligibility Exporter. This ensures a smooth rollout and compatibility
 *  between the data produced by different versions of the Eligibility
 *  Exporters. If eligibilities map contains a key for an SLI which has not been
 *  declared in the binary flags, there will be an error message emitted in the
 *  Eligibility Exporter log and the metric for the SLI in question will not be
 *  emitted.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility_Eligibilities : GTLRObject
@end


/**
 *  Describes provisioned dataplane resources.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource : GTLRObject

/**
 *  Type of the resource. This can be either a GCP resource or a custom one
 *  (e.g. another cloud provider's VM). For GCP compute resources use singular
 *  form of the names listed in GCP compute API documentation
 *  (https://cloud.google.com/compute/docs/reference/rest/v1/), prefixed with
 *  'compute-', for example: 'compute-instance', 'compute-disk',
 *  'compute-autoscaler'.
 */
@property(nonatomic, copy, nullable) NSString *resourceType;

/**
 *  URL identifying the resource, e.g.
 *  "https://www.googleapis.com/compute/v1/projects/...)".
 */
@property(nonatomic, copy, nullable) NSString *resourceUrl;

@end


/**
 *  SloEligibility is a tuple containing eligibility value: true if an instance
 *  is eligible for SLO calculation or false if it should be excluded from all
 *  SLO-related calculations along with a user-defined reason.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility : GTLRObject

/**
 *  Whether an instance is eligible or ineligible.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *eligible;

/**
 *  User-defined reason for the current value of instance eligibility. Usually,
 *  this can be directly mapped to the internal state. An empty reason is
 *  allowed.
 */
@property(nonatomic, copy, nullable) NSString *reason;

@end


/**
 *  SloMetadata contains resources required for proper SLO classification of the
 *  instance.
 */
@interface GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata : GTLRObject

/**
 *  Optional. List of nodes. Some producers need to use per-node metadata to
 *  calculate SLO. This field allows such producers to publish per-node SLO meta
 *  data, which will be consumed by SSA Eligibility Exporter and published in
 *  the form of per node metric to Monarch.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata *> *nodes;

/**
 *  Optional. Multiple per-instance SLI eligibilities which apply for individual
 *  SLIs.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility *perSliEligibility;

/**
 *  Name of the SLO tier the Instance belongs to. This name will be expected to
 *  match the tiers specified in the service SLO configuration. Field is
 *  mandatory and must not be empty.
 */
@property(nonatomic, copy, nullable) NSString *tier;

@end


/**
 *  A Memorystore for Memcached instance
 */
@interface GTLRCloudMemorystoreforMemcached_Instance : GTLRObject

/**
 *  The full name of the Google Compute Engine
 *  [network](/compute/docs/networks-and-firewalls#networks) to which the
 *  instance is connected. If left unspecified, the `default` network will be
 *  used.
 */
@property(nonatomic, copy, nullable) NSString *authorizedNetwork;

/** Output only. The time the instance was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Endpoint for the Discovery API. */
@property(nonatomic, copy, nullable) NSString *discoveryEndpoint;

/**
 *  User provided name for the instance, which is only used for display
 *  purposes. Cannot be more than 80 characters.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  List of messages that describe the current state of the Memcached instance.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_InstanceMessage *> *instanceMessages;

/**
 *  Resource labels to represent user-provided metadata. Refer to cloud
 *  documentation on labels for more details.
 *  https://cloud.google.com/compute/docs/labeling-resources
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_Instance_Labels *labels;

/**
 *  The maintenance policy for the instance. If not provided, the maintenance
 *  event will be performed based on Memorystore internal rollout schedule.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_GoogleCloudMemcacheV1MaintenancePolicy *maintenancePolicy;

/** Output only. Published maintenance schedule. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_MaintenanceSchedule *maintenanceSchedule;

/**
 *  Output only. The full version of memcached server running on this instance.
 *  System automatically determines the full memcached version for an instance
 *  based on the input MemcacheVersion. The full version format will be
 *  "memcached-1.5.16".
 */
@property(nonatomic, copy, nullable) NSString *memcacheFullVersion;

/**
 *  Output only. List of Memcached nodes. Refer to Node message for more
 *  details.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_Node *> *memcacheNodes;

/**
 *  The major version of Memcached software. If not provided, latest supported
 *  version will be used. Currently the latest supported major version is
 *  `MEMCACHE_1_5`. The minor version will be automatically determined by our
 *  system based on the latest supported minor version.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Instance_MemcacheVersion_Memcache15
 *        Memcached 1.5 version. (Value: "MEMCACHE_1_5")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Instance_MemcacheVersion_MemcacheVersionUnspecified
 *        Value "MEMCACHE_VERSION_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *memcacheVersion;

/**
 *  Required. Unique name of the resource in this scope including project and
 *  location using the form:
 *  `projects/{project_id}/locations/{location_id}/instances/{instance_id}`
 *  Note: Memcached instances are managed and addressed at the regional level so
 *  `location_id` here refers to a Google Cloud region; however, users may
 *  choose which zones Memcached nodes should be provisioned in within an
 *  instance. Refer to zones field for more details.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. Configuration for Memcached nodes. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_NodeConfig *nodeConfig;

/**
 *  Required. Number of nodes in the Memcached instance.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nodeCount;

/** User defined parameters to apply to the memcached process on each node. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_MemcacheParameters *parameters;

/**
 *  Output only. The state of this Memcached instance.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Instance_State_Creating
 *        Memcached instance is being created. (Value: "CREATING")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Instance_State_Deleting
 *        Memcached instance is being deleted. (Value: "DELETING")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Instance_State_PerformingMaintenance
 *        Memcached instance is going through maintenance, e.g. data plane
 *        rollout. (Value: "PERFORMING_MAINTENANCE")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Instance_State_Ready Memcached
 *        instance has been created and ready to be used. (Value: "READY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Instance_State_StateUnspecified
 *        State not set. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Instance_State_Updating
 *        Memcached instance is updating configuration such as maintenance
 *        policy and schedule. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The time the instance was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Zones in which Memcached nodes should be provisioned. Memcached nodes will
 *  be equally distributed across these zones. If not provided, the service will
 *  by default create nodes in all zones in the region for the instance.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *zones;

@end


/**
 *  Resource labels to represent user-provided metadata. Refer to cloud
 *  documentation on labels for more details.
 *  https://cloud.google.com/compute/docs/labeling-resources
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_Instance_Labels : GTLRObject
@end


/**
 *  GTLRCloudMemorystoreforMemcached_InstanceMessage
 */
@interface GTLRCloudMemorystoreforMemcached_InstanceMessage : GTLRObject

/**
 *  A code that correspond to one type of user-facing message.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMemorystoreforMemcached_InstanceMessage_Code_CodeUnspecified
 *        Message Code not set. (Value: "CODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_InstanceMessage_Code_ZoneDistributionUnbalanced
 *        Memcached nodes are distributed unevenly. (Value:
 *        "ZONE_DISTRIBUTION_UNBALANCED")
 */
@property(nonatomic, copy, nullable) NSString *code;

/** Message on memcached instance which will be exposed to users. */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  Response for ListInstances.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "instances" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudMemorystoreforMemcached_ListInstancesResponse : GTLRCollectionObject

/**
 *  A list of Memcached instances in the project in the specified location, or
 *  across all locations. If the `location_id` in the parent field of the
 *  request is "-", all regions available to the project are queried, and the
 *  results aggregated.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_Instance *> *instances;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudMemorystoreforMemcached_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudMemorystoreforMemcached_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_Operation *> *operations;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRCloudMemorystoreforMemcached_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_Location_Metadata : GTLRObject
@end


/**
 *  Metadata for the given google.cloud.location.Location.
 */
@interface GTLRCloudMemorystoreforMemcached_LocationMetadata : GTLRObject

/**
 *  Output only. The set of available zones in the location. The map is keyed by
 *  the lowercase ID of each zone, as defined by GCE. These keys can be
 *  specified in the `zones` field when creating a Memcached instance.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_LocationMetadata_AvailableZones *availableZones;

@end


/**
 *  Output only. The set of available zones in the location. The map is keyed by
 *  the lowercase ID of each zone, as defined by GCE. These keys can be
 *  specified in the `zones` field when creating a Memcached instance.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudMemorystoreforMemcached_ZoneMetadata. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_LocationMetadata_AvailableZones : GTLRObject
@end


/**
 *  Defines policies to service maintenance events.
 */
@interface GTLRCloudMemorystoreforMemcached_MaintenancePolicy : GTLRObject

/** Output only. The time when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. Description of what this policy is for. Create/Update methods
 *  return INVALID_ARGUMENT if the length is greater than 512.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. Resource labels to represent user provided metadata. Each label is
 *  a key-value pair, where both the key and the value are arbitrary strings
 *  provided by the user.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_MaintenancePolicy_Labels *labels;

/**
 *  Required. MaintenancePolicy name using the form:
 *  `projects/{project_id}/locations/{location_id}/maintenancePolicies/{maintenance_policy_id}`
 *  where {project_id} refers to a GCP consumer project ID, {location_id} refers
 *  to a GCP region/zone, {maintenance_policy_id} must be 1-63 characters long
 *  and match the regular expression `[a-z0-9]([-a-z0-9]*[a-z0-9])?`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The state of the policy.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMemorystoreforMemcached_MaintenancePolicy_State_Deleting
 *        Resource is being deleted. It can no longer be attached to instances.
 *        (Value: "DELETING")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_MaintenancePolicy_State_Ready
 *        Resource is ready to be used. (Value: "READY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_MaintenancePolicy_State_StateUnspecified
 *        Unspecified state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Maintenance policy applicable to instance update. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_UpdatePolicy *updatePolicy;

/** Output only. The time when the resource was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Resource labels to represent user provided metadata. Each label is
 *  a key-value pair, where both the key and the value are arbitrary strings
 *  provided by the user.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_MaintenancePolicy_Labels : GTLRObject
@end


/**
 *  Upcoming maintenance schedule.
 */
@interface GTLRCloudMemorystoreforMemcached_MaintenanceSchedule : GTLRObject

/**
 *  Output only. The end time of any upcoming scheduled maintenance for this
 *  instance.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. The deadline that the maintenance schedule start time can not
 *  go beyond, including reschedule.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleDeadlineTime;

/**
 *  Output only. The start time of any upcoming scheduled maintenance for this
 *  instance.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  MaintenanceWindow definition.
 */
@interface GTLRCloudMemorystoreforMemcached_MaintenanceWindow : GTLRObject

/** Daily cycle. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_DailyCycle *dailyCycle;

/** Weekly cycle. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_WeeklyCycle *weeklyCycle;

@end


/**
 *  GTLRCloudMemorystoreforMemcached_MemcacheParameters
 */
@interface GTLRCloudMemorystoreforMemcached_MemcacheParameters : GTLRObject

/**
 *  Output only. The unique ID associated with this set of parameters. Users can
 *  use this id to determine if the parameters associated with the instance
 *  differ from the parameters associated with the nodes. A discrepancy between
 *  parameter ids can inform users that they may need to take action to apply
 *  parameters on nodes.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** User defined set of parameters to use in the memcached process. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_MemcacheParameters_Params *params;

@end


/**
 *  User defined set of parameters to use in the memcached process.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_MemcacheParameters_Params : GTLRObject
@end


/**
 *  GTLRCloudMemorystoreforMemcached_Node
 */
@interface GTLRCloudMemorystoreforMemcached_Node : GTLRObject

/**
 *  Output only. Hostname or IP address of the Memcached node used by the
 *  clients to connect to the Memcached server on this node.
 */
@property(nonatomic, copy, nullable) NSString *host;

/**
 *  Output only. Identifier of the Memcached node. The node id does not include
 *  project or location like the Memcached instance name.
 */
@property(nonatomic, copy, nullable) NSString *nodeId;

/** User defined parameters currently applied to the node. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_MemcacheParameters *parameters;

/**
 *  Output only. The port number of the Memcached server on this node.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/**
 *  Output only. Current state of the Memcached node.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Node_State_Creating Node is
 *        being created. (Value: "CREATING")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Node_State_Deleting Node is
 *        being deleted. (Value: "DELETING")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Node_State_Ready Node has been
 *        created and ready to be used. (Value: "READY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Node_State_StateUnspecified Node
 *        state is not set. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Node_State_Updating Node is
 *        being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Location (GCP Zone) for the Memcached node.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  Configuration for a Memcached Node.
 */
@interface GTLRCloudMemorystoreforMemcached_NodeConfig : GTLRObject

/**
 *  Required. Number of cpus per Memcached node.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cpuCount;

/**
 *  Required. Memory size in MiB for each Memcached node.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memorySizeMb;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudMemorystoreforMemcached_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of a long-running operation.
 */
@interface GTLRCloudMemorystoreforMemcached_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cancelRequested;

/** Output only. Time when the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Time when the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusDetail;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Request for RescheduleMaintenance.
 */
@interface GTLRCloudMemorystoreforMemcached_RescheduleMaintenanceRequest : GTLRObject

/**
 *  Required. If reschedule type is SPECIFIC_TIME, must set up schedule_time as
 *  well.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMemorystoreforMemcached_RescheduleMaintenanceRequest_RescheduleType_Immediate
 *        If the user wants to schedule the maintenance to happen now. (Value:
 *        "IMMEDIATE")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_RescheduleMaintenanceRequest_RescheduleType_NextAvailableWindow
 *        If the user wants to use the existing maintenance policy to find the
 *        next available window. (Value: "NEXT_AVAILABLE_WINDOW")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_RescheduleMaintenanceRequest_RescheduleType_RescheduleTypeUnspecified
 *        Not set. (Value: "RESCHEDULE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_RescheduleMaintenanceRequest_RescheduleType_SpecificTime
 *        If the user wants to reschedule the maintenance to a specific time.
 *        (Value: "SPECIFIC_TIME")
 */
@property(nonatomic, copy, nullable) NSString *rescheduleType;

/**
 *  Timestamp when the maintenance shall be rescheduled to if
 *  reschedule_type=SPECIFIC_TIME, in RFC 3339 format, for example
 *  `2012-11-15T16:19:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleTime;

@end


/**
 *  Configure the schedule.
 */
@interface GTLRCloudMemorystoreforMemcached_Schedule : GTLRObject

/**
 *  Allows to define schedule that runs specified day of the week.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Schedule_Day_DayOfWeekUnspecified
 *        The day of the week is unspecified. (Value: "DAY_OF_WEEK_UNSPECIFIED")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Schedule_Day_Friday Friday
 *        (Value: "FRIDAY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Schedule_Day_Monday Monday
 *        (Value: "MONDAY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Schedule_Day_Saturday Saturday
 *        (Value: "SATURDAY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Schedule_Day_Sunday Sunday
 *        (Value: "SUNDAY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Schedule_Day_Thursday Thursday
 *        (Value: "THURSDAY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Schedule_Day_Tuesday Tuesday
 *        (Value: "TUESDAY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_Schedule_Day_Wednesday Wednesday
 *        (Value: "WEDNESDAY")
 */
@property(nonatomic, copy, nullable) NSString *day;

/** Output only. Duration of the time window, set by service producer. */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/** Time within the window to start the operations. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_TimeOfDay *startTime;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudMemorystoreforMemcached_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudMemorystoreforMemcached_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudMemorystoreforMemcached_Status_Details_Item : GTLRObject
@end


/**
 *  Represents a time of day. The date and time zone are either not significant
 *  or are specified elsewhere. An API may choose to allow leap seconds. Related
 *  types are google.type.Date and `google.protobuf.Timestamp`.
 */
@interface GTLRCloudMemorystoreforMemcached_TimeOfDay : GTLRObject

/**
 *  Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to
 *  allow the value "24:00:00" for scenarios like business closing time.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hours;

/**
 *  Minutes of hour of day. Must be from 0 to 59.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minutes;

/**
 *  Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Seconds of minutes of the time. Must normally be from 0 to 59. An API may
 *  allow the value 60 if it allows leap-seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

@end


/**
 *  Request for UpdateParameters.
 */
@interface GTLRCloudMemorystoreforMemcached_UpdateParametersRequest : GTLRObject

/** The parameters to apply to the instance. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_MemcacheParameters *parameters;

/**
 *  Required. Mask of fields to update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Maintenance policy applicable to instance updates.
 */
@interface GTLRCloudMemorystoreforMemcached_UpdatePolicy : GTLRObject

/**
 *  Optional. Relative scheduling channel applied to resource.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMemorystoreforMemcached_UpdatePolicy_Channel_Earlier
 *        Early channel within a customer project. (Value: "EARLIER")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_UpdatePolicy_Channel_Later Later
 *        channel within a customer project. (Value: "LATER")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_UpdatePolicy_Channel_UpdateChannelUnspecified
 *        Unspecified channel. (Value: "UPDATE_CHANNEL_UNSPECIFIED")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_UpdatePolicy_Channel_Week1 ! !
 *        The follow channels can ONLY be used if you adopt the new MW system! !
 *        ! NOTE: all WEEK channels are assumed to be under a weekly window. !
 *        There is currently no dedicated channel definitions for Daily windows.
 *        ! If you use Daily window, the system will assume a 1d (24Hours)
 *        advanced ! notification period b/w EARLY and LATER. ! We may consider
 *        support more flexible daily channel specifications in ! the future.
 *        WEEK1 == EARLIER with minimum 7d advanced notification. {7d, 14d} The
 *        system will treat them equally and will use WEEK1 whenever it can. New
 *        customers are encouraged to use this channel annotation. (Value:
 *        "WEEK1")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_UpdatePolicy_Channel_Week2 WEEK2
 *        == LATER with minimum 14d advanced notification {14d, 21d}. (Value:
 *        "WEEK2")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_UpdatePolicy_Channel_Week5 WEEK5
 *        == 40d support. minimum 35d advanced notification {35d, 42d}. (Value:
 *        "WEEK5")
 */
@property(nonatomic, copy, nullable) NSString *channel;

/**
 *  Deny Maintenance Period that is applied to resource to indicate when
 *  maintenance is forbidden. User can specify zero or more non-overlapping deny
 *  periods. Maximum number of deny_maintenance_periods expected is one.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_DenyMaintenancePeriod *> *denyMaintenancePeriods;

/**
 *  Optional. Maintenance window that is applied to resources covered by this
 *  policy.
 */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_MaintenanceWindow *window;

@end


/**
 *  Time window specified for weekly operations.
 */
@interface GTLRCloudMemorystoreforMemcached_WeeklyCycle : GTLRObject

/** User can specify multiple windows in a week. Minimum of 1 window. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudMemorystoreforMemcached_Schedule *> *schedule;

@end


/**
 *  Time window specified for weekly operations.
 */
@interface GTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow : GTLRObject

/**
 *  Required. Allows to define schedule that runs specified day of the week.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow_Day_DayOfWeekUnspecified
 *        The day of the week is unspecified. (Value: "DAY_OF_WEEK_UNSPECIFIED")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow_Day_Friday
 *        Friday (Value: "FRIDAY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow_Day_Monday
 *        Monday (Value: "MONDAY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow_Day_Saturday
 *        Saturday (Value: "SATURDAY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow_Day_Sunday
 *        Sunday (Value: "SUNDAY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow_Day_Thursday
 *        Thursday (Value: "THURSDAY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow_Day_Tuesday
 *        Tuesday (Value: "TUESDAY")
 *    @arg @c kGTLRCloudMemorystoreforMemcached_WeeklyMaintenanceWindow_Day_Wednesday
 *        Wednesday (Value: "WEDNESDAY")
 */
@property(nonatomic, copy, nullable) NSString *day;

/** Required. Duration of the time window. */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/** Required. Start time of the window in UTC. */
@property(nonatomic, strong, nullable) GTLRCloudMemorystoreforMemcached_TimeOfDay *startTime;

@end


/**
 *  GTLRCloudMemorystoreforMemcached_ZoneMetadata
 */
@interface GTLRCloudMemorystoreforMemcached_ZoneMetadata : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
