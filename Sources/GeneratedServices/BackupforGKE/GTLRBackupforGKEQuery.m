// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Backup for GKE API (gkebackup/v1)
// Description:
//   Backup for GKE is a managed Kubernetes workload backup and restore service
//   for GKE clusters.
// Documentation:
//   https://cloud.google.com/kubernetes-engine/docs/add-on/backup-for-gke

#import <GoogleAPIClientForREST/GTLRBackupforGKEQuery.h>

@implementation GTLRBackupforGKEQuery

@dynamic fields;

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsCreate

@dynamic backupId, parent;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_Backup *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/backups";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRBackupforGKE_GoogleLongrunningOperation class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.backups.create";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsDelete

@dynamic ETag, force, name;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_GoogleLongrunningOperation class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.backups.delete";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_Backup class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.backups.get";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_Policy class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.backups.getIamPolicy";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/backups";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBackupforGKE_ListBackupsResponse class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.backups.list";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_Backup *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_GoogleLongrunningOperation class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.backups.patch";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_Policy class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.backups.setIamPolicy";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_TestIamPermissionsResponse class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.backups.testIamPermissions";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsVolumeBackupsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsVolumeBackupsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_VolumeBackup class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.backups.volumeBackups.get";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsVolumeBackupsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsVolumeBackupsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_Policy class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.backups.volumeBackups.getIamPolicy";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsVolumeBackupsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/volumeBackups";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsVolumeBackupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBackupforGKE_ListVolumeBackupsResponse class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.backups.volumeBackups.list";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsVolumeBackupsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsVolumeBackupsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_Policy class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.backups.volumeBackups.setIamPolicy";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsVolumeBackupsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansBackupsVolumeBackupsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_TestIamPermissionsResponse class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.backups.volumeBackups.testIamPermissions";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansCreate

@dynamic backupPlanId, parent;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_BackupPlan *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/backupPlans";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRBackupforGKE_GoogleLongrunningOperation class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.create";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansDelete

@dynamic ETag, name;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_GoogleLongrunningOperation class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.delete";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_BackupPlan class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.get";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_Policy class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.getIamPolicy";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/backupPlans";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBackupforGKE_ListBackupPlansResponse class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.list";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_BackupPlan *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_GoogleLongrunningOperation class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.patch";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_Policy class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.setIamPolicy";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRBackupforGKEQuery_ProjectsLocationsBackupPlansTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_TestIamPermissionsResponse class];
  query.loggingName = @"gkebackup.projects.locations.backupPlans.testIamPermissions";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsDeleteOperations

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRBackupforGKEQuery_ProjectsLocationsDeleteOperations *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_Empty class];
  query.loggingName = @"gkebackup.projects.locations.deleteOperations";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBackupforGKEQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_Location class];
  query.loggingName = @"gkebackup.projects.locations.get";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRBackupforGKEQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_ListLocationsResponse class];
  query.loggingName = @"gkebackup.projects.locations.list";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_GoogleLongrunningCancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRBackupforGKEQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_Empty class];
  query.loggingName = @"gkebackup.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBackupforGKEQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_GoogleLongrunningOperation class];
  query.loggingName = @"gkebackup.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRBackupforGKEQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_GoogleLongrunningListOperationsResponse class];
  query.loggingName = @"gkebackup.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansCreate

@dynamic parent, restorePlanId;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_RestorePlan *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/restorePlans";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRBackupforGKE_GoogleLongrunningOperation class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.create";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansDelete

@dynamic ETag, force, name;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_GoogleLongrunningOperation class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.delete";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_RestorePlan class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.get";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_Policy class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.getIamPolicy";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/restorePlans";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBackupforGKE_ListRestorePlansResponse class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.list";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_RestorePlan *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_GoogleLongrunningOperation class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.patch";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresCreate

@dynamic parent, restoreId;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_Restore *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/restores";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRBackupforGKE_GoogleLongrunningOperation class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.restores.create";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresDelete

@dynamic ETag, force, name;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"ETag" : @"etag" };
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_GoogleLongrunningOperation class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.restores.delete";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_Restore class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.restores.get";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_Policy class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.restores.getIamPolicy";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/restores";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBackupforGKE_ListRestoresResponse class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.restores.list";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_Restore *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_GoogleLongrunningOperation class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.restores.patch";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_Policy class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.restores.setIamPolicy";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_TestIamPermissionsResponse class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.restores.testIamPermissions";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresVolumeRestoresGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresVolumeRestoresGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRBackupforGKE_VolumeRestore class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.restores.volumeRestores.get";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresVolumeRestoresGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresVolumeRestoresGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_Policy class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.restores.volumeRestores.getIamPolicy";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresVolumeRestoresList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/volumeRestores";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresVolumeRestoresList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRBackupforGKE_ListVolumeRestoresResponse class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.restores.volumeRestores.list";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresVolumeRestoresSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresVolumeRestoresSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_Policy class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.restores.volumeRestores.setIamPolicy";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresVolumeRestoresTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansRestoresVolumeRestoresTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_TestIamPermissionsResponse class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.restores.volumeRestores.testIamPermissions";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_Policy class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.setIamPolicy";
  return query;
}

@end

@implementation GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRBackupforGKE_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRBackupforGKEQuery_ProjectsLocationsRestorePlansTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRBackupforGKE_TestIamPermissionsResponse class];
  query.loggingName = @"gkebackup.projects.locations.restorePlans.testIamPermissions";
  return query;
}

@end
