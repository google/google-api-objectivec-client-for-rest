// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Wallet API (walletobjects/v1)
// Description:
//   API for issuers to save and manage Google Wallet Objects.
// Documentation:
//   https://developers.google.com/pay/passes

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRWalletobjects_ActivationOptions;
@class GTLRWalletobjects_ActivationStatus;
@class GTLRWalletobjects_AirportInfo;
@class GTLRWalletobjects_AppLinkData;
@class GTLRWalletobjects_AppLinkDataAppLinkInfo;
@class GTLRWalletobjects_AppLinkDataAppLinkInfoAppTarget;
@class GTLRWalletobjects_AuthenticationKey;
@class GTLRWalletobjects_Barcode;
@class GTLRWalletobjects_BarcodeSectionDetail;
@class GTLRWalletobjects_Blobstore2Info;
@class GTLRWalletobjects_BoardingAndSeatingInfo;
@class GTLRWalletobjects_BoardingAndSeatingPolicy;
@class GTLRWalletobjects_CallbackOptions;
@class GTLRWalletobjects_CardBarcodeSectionDetails;
@class GTLRWalletobjects_CardRowOneItem;
@class GTLRWalletobjects_CardRowTemplateInfo;
@class GTLRWalletobjects_CardRowThreeItems;
@class GTLRWalletobjects_CardRowTwoItems;
@class GTLRWalletobjects_CardTemplateOverride;
@class GTLRWalletobjects_ClassTemplateInfo;
@class GTLRWalletobjects_CompositeMedia;
@class GTLRWalletobjects_ContentTypeInfo;
@class GTLRWalletobjects_DateTime;
@class GTLRWalletobjects_DetailsItemInfo;
@class GTLRWalletobjects_DetailsTemplateOverride;
@class GTLRWalletobjects_DeviceContext;
@class GTLRWalletobjects_DiffChecksumsResponse;
@class GTLRWalletobjects_DiffDownloadResponse;
@class GTLRWalletobjects_DiffUploadRequest;
@class GTLRWalletobjects_DiffUploadResponse;
@class GTLRWalletobjects_DiffVersionResponse;
@class GTLRWalletobjects_DiscoverableProgram;
@class GTLRWalletobjects_DiscoverableProgramMerchantSigninInfo;
@class GTLRWalletobjects_DiscoverableProgramMerchantSignupInfo;
@class GTLRWalletobjects_DownloadParameters;
@class GTLRWalletobjects_EventDateTime;
@class GTLRWalletobjects_EventReservationInfo;
@class GTLRWalletobjects_EventSeat;
@class GTLRWalletobjects_EventTicketClass;
@class GTLRWalletobjects_EventTicketObject;
@class GTLRWalletobjects_EventVenue;
@class GTLRWalletobjects_ExpiryNotification;
@class GTLRWalletobjects_FieldReference;
@class GTLRWalletobjects_FieldSelector;
@class GTLRWalletobjects_FirstRowOption;
@class GTLRWalletobjects_FlightCarrier;
@class GTLRWalletobjects_FlightClass;
@class GTLRWalletobjects_FlightHeader;
@class GTLRWalletobjects_FlightObject;
@class GTLRWalletobjects_FrequentFlyerInfo;
@class GTLRWalletobjects_GenericClass;
@class GTLRWalletobjects_GenericObject;
@class GTLRWalletobjects_GiftCardClass;
@class GTLRWalletobjects_GiftCardObject;
@class GTLRWalletobjects_GroupingInfo;
@class GTLRWalletobjects_Image;
@class GTLRWalletobjects_ImageModuleData;
@class GTLRWalletobjects_ImageUri;
@class GTLRWalletobjects_InfoModuleData;
@class GTLRWalletobjects_Issuer;
@class GTLRWalletobjects_IssuerContactInfo;
@class GTLRWalletobjects_IssuerToUserInfo;
@class GTLRWalletobjects_LabelValue;
@class GTLRWalletobjects_LabelValueRow;
@class GTLRWalletobjects_LatLongPoint;
@class GTLRWalletobjects_LinksModuleData;
@class GTLRWalletobjects_ListTemplateOverride;
@class GTLRWalletobjects_LocalizedString;
@class GTLRWalletobjects_LoyaltyClass;
@class GTLRWalletobjects_LoyaltyObject;
@class GTLRWalletobjects_LoyaltyPoints;
@class GTLRWalletobjects_LoyaltyPointsBalance;
@class GTLRWalletobjects_Media;
@class GTLRWalletobjects_MediaRequestInfo;
@class GTLRWalletobjects_Message;
@class GTLRWalletobjects_ModifyLinkedOfferObjects;
@class GTLRWalletobjects_Money;
@class GTLRWalletobjects_Notifications;
@class GTLRWalletobjects_ObjectId;
@class GTLRWalletobjects_OfferClass;
@class GTLRWalletobjects_OfferObject;
@class GTLRWalletobjects_Pagination;
@class GTLRWalletobjects_PassConstraints;
@class GTLRWalletobjects_Permission;
@class GTLRWalletobjects_PurchaseDetails;
@class GTLRWalletobjects_ReservationInfo;
@class GTLRWalletobjects_Resources;
@class GTLRWalletobjects_Review;
@class GTLRWalletobjects_RotatingBarcode;
@class GTLRWalletobjects_RotatingBarcodeTotpDetails;
@class GTLRWalletobjects_RotatingBarcodeTotpDetailsTotpParameters;
@class GTLRWalletobjects_RotatingBarcodeValues;
@class GTLRWalletobjects_SaveRestrictions;
@class GTLRWalletobjects_SecurityAnimation;
@class GTLRWalletobjects_SignUpInfo;
@class GTLRWalletobjects_SmartTapMerchantData;
@class GTLRWalletobjects_TemplateItem;
@class GTLRWalletobjects_TextModuleData;
@class GTLRWalletobjects_TicketCost;
@class GTLRWalletobjects_TicketLeg;
@class GTLRWalletobjects_TicketRestrictions;
@class GTLRWalletobjects_TicketSeat;
@class GTLRWalletobjects_TimeInterval;
@class GTLRWalletobjects_TransitClass;
@class GTLRWalletobjects_TransitObject;
@class GTLRWalletobjects_TranslatedString;
@class GTLRWalletobjects_UpcomingNotification;
@class GTLRWalletobjects_Uri;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRWalletobjects_ActivationStatus.state

/**
 *  Legacy alias for `ACTIVATED`. Deprecated.
 *
 *  Value: "activated"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_ActivationStatus_State_Activated GTLR_DEPRECATED;
/**
 *  Legacy alias for `NOT_ACTIVATED`. Deprecated.
 *
 *  Value: "not_activated"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_ActivationStatus_State_NotActivated GTLR_DEPRECATED;
/** Value: "UNKNOWN_STATE" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_ActivationStatus_State_UnknownState;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_Barcode.renderEncoding

/** Value: "RENDER_ENCODING_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Barcode_RenderEncoding_RenderEncodingUnspecified;
/**
 *  UTF_8 encoding for barcodes. This is only supported for barcode type qrCode.
 *
 *  Value: "UTF_8"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Barcode_RenderEncoding_Utf8;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_Barcode.type

/**
 *  Legacy alias for `AZTEC`. Deprecated. Not supported for Rotating Barcodes.
 *
 *  Value: "aztec"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Barcode_Type_Aztec GTLR_DEPRECATED;
/** Value: "BARCODE_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Barcode_Type_BarcodeTypeUnspecified;
/**
 *  Legacy alias for `CODABAR`. Deprecated. Not supported for Rotating Barcodes.
 *
 *  Value: "codabar"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Barcode_Type_Codabar GTLR_DEPRECATED;
/**
 *  Legacy alias for `CODE_128`. Deprecated. Not supported for Rotating
 *  Barcodes.
 *
 *  Value: "code128"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Barcode_Type_Code128 GTLR_DEPRECATED;
/**
 *  Legacy alias for `CODE_39`. Deprecated. Not supported for Rotating Barcodes.
 *
 *  Value: "code39"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Barcode_Type_Code39 GTLR_DEPRECATED;
/**
 *  Legacy alias for `DATA_MATRIX`. Deprecated. Not supported for Rotating
 *  Barcodes.
 *
 *  Value: "dataMatrix"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Barcode_Type_DataMatrix GTLR_DEPRECATED;
/**
 *  Legacy alias for `EAN_13`. Deprecated. Not supported for Rotating Barcodes.
 *
 *  Value: "EAN13"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Barcode_Type_Ean13 GTLR_DEPRECATED;
/**
 *  Legacy alias for `EAN_8`. Deprecated. Not supported for Rotating Barcodes.
 *
 *  Value: "ean8"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Barcode_Type_Ean8 GTLR_DEPRECATED;
/**
 *  Legacy alias for `ITF_14`. Deprecated. Not supported for Rotating Barcodes.
 *
 *  Value: "itf14"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Barcode_Type_Itf14 GTLR_DEPRECATED;
/**
 *  Legacy alias for `PDF_417`. Deprecated.
 *
 *  Value: "PDF417"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Barcode_Type_Pdf417 GTLR_DEPRECATED;
/**
 *  Legacy alias for `QR_CODE`. Deprecated.
 *
 *  Value: "qrcode"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Barcode_Type_Qrcode GTLR_DEPRECATED;
/**
 *  Legacy alias for `QR_CODE`. Deprecated.
 *
 *  Value: "qrCode"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Barcode_Type_QrCode GTLR_DEPRECATED;
/**
 *  Legacy alias for `TEXT_ONLY`. Deprecated. Not supported for Rotating
 *  Barcodes.
 *
 *  Value: "textOnly"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Barcode_Type_TextOnly GTLR_DEPRECATED;
/**
 *  Legacy alias for `UPC_A`. Deprecated. Not supported for Rotating Barcodes.
 *
 *  Value: "upcA"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Barcode_Type_UpcA GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_BoardingAndSeatingInfo.boardingDoor

/**
 *  Legacy alias for `BACK`. Deprecated.
 *
 *  Value: "back"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_BoardingAndSeatingInfo_BoardingDoor_Back GTLR_DEPRECATED;
/** Value: "BOARDING_DOOR_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_BoardingAndSeatingInfo_BoardingDoor_BoardingDoorUnspecified;
/**
 *  Legacy alias for `FRONT`. Deprecated.
 *
 *  Value: "front"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_BoardingAndSeatingInfo_BoardingDoor_Front GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_BoardingAndSeatingPolicy.boardingPolicy

/**
 *  Legacy alias for `BOARDING_POLICY_OTHER`. Deprecated.
 *
 *  Value: "boardingPolicyOther"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_BoardingAndSeatingPolicy_BoardingPolicy_BoardingPolicyOther GTLR_DEPRECATED;
/** Value: "BOARDING_POLICY_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_BoardingAndSeatingPolicy_BoardingPolicy_BoardingPolicyUnspecified;
/**
 *  Legacy alias for `GROUP_BASED`. Deprecated.
 *
 *  Value: "groupBased"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_BoardingAndSeatingPolicy_BoardingPolicy_GroupBased GTLR_DEPRECATED;
/**
 *  Legacy alias for `ZONE_BASED`. Deprecated.
 *
 *  Value: "zoneBased"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_BoardingAndSeatingPolicy_BoardingPolicy_ZoneBased GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_BoardingAndSeatingPolicy.seatClassPolicy

/**
 *  Legacy alias for `CABIN_BASED`. Deprecated.
 *
 *  Value: "cabinBased"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_BoardingAndSeatingPolicy_SeatClassPolicy_CabinBased GTLR_DEPRECATED;
/**
 *  Legacy alias for `CLASS_BASED`. Deprecated.
 *
 *  Value: "classBased"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_BoardingAndSeatingPolicy_SeatClassPolicy_ClassBased GTLR_DEPRECATED;
/**
 *  Legacy alias for `SEAT_CLASS_POLICY_OTHER`. Deprecated.
 *
 *  Value: "seatClassPolicyOther"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_BoardingAndSeatingPolicy_SeatClassPolicy_SeatClassPolicyOther GTLR_DEPRECATED;
/** Value: "SEAT_CLASS_POLICY_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_BoardingAndSeatingPolicy_SeatClassPolicy_SeatClassPolicyUnspecified;
/**
 *  Legacy alias for `TIER_BASED`. Deprecated.
 *
 *  Value: "tierBased"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_BoardingAndSeatingPolicy_SeatClassPolicy_TierBased GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_CompositeMedia.referenceType

/**
 *  Reference points to a bigstore object
 *
 *  Value: "BIGSTORE_REF"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_CompositeMedia_ReferenceType_BigstoreRef;
/**
 *  Reference points to a blobstore object. This could be either a v1 blob_ref
 *  or a v2 blobstore2_info. Clients should check blobstore2_info first, since
 *  v1 is being deprecated.
 *
 *  Value: "BLOB_REF"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_CompositeMedia_ReferenceType_BlobRef;
/**
 *  Indicates the data is stored in cosmo_binary_reference.
 *
 *  Value: "COSMO_BINARY_REFERENCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_CompositeMedia_ReferenceType_CosmoBinaryReference;
/**
 *  Data is included into this proto buffer
 *
 *  Value: "INLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_CompositeMedia_ReferenceType_Inline;
/**
 *  Reference contains a GFS path or a local path.
 *
 *  Value: "PATH"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_CompositeMedia_ReferenceType_Path;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_DiscoverableProgram.state

/**
 *  Legacy alias for `DISABLED`. Deprecated.
 *
 *  Value: "disabled"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgram_State_Disabled GTLR_DEPRECATED;
/**
 *  Legacy alias for `LIVE`. Deprecated.
 *
 *  Value: "live"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgram_State_Live GTLR_DEPRECATED;
/** Value: "STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgram_State_StateUnspecified;
/**
 *  Legacy alias for `TRUSTED_TESTERS`. Deprecated.
 *
 *  Value: "trustedTesters"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgram_State_TrustedTesters GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_DiscoverableProgramMerchantSignupInfo.signupSharedDatas

/**
 *  multi line address fields
 *
 *  Value: "ADDRESS_LINE_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgramMerchantSignupInfo_SignupSharedDatas_AddressLine1;
/** Value: "ADDRESS_LINE_2" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgramMerchantSignupInfo_SignupSharedDatas_AddressLine2;
/** Value: "ADDRESS_LINE_3" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgramMerchantSignupInfo_SignupSharedDatas_AddressLine3;
/** Value: "CITY" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgramMerchantSignupInfo_SignupSharedDatas_City;
/** Value: "COUNTRY" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgramMerchantSignupInfo_SignupSharedDatas_Country;
/** Value: "EMAIL" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgramMerchantSignupInfo_SignupSharedDatas_Email;
/** Value: "FIRST_NAME" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgramMerchantSignupInfo_SignupSharedDatas_FirstName;
/** Value: "LAST_NAME" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgramMerchantSignupInfo_SignupSharedDatas_LastName;
/** Value: "PHONE" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgramMerchantSignupInfo_SignupSharedDatas_Phone;
/** Value: "SHARED_DATA_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgramMerchantSignupInfo_SignupSharedDatas_SharedDataTypeUnspecified;
/** Value: "STATE" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgramMerchantSignupInfo_SignupSharedDatas_State;
/**
 *  single line address field
 *
 *  Value: "STREET_ADDRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgramMerchantSignupInfo_SignupSharedDatas_StreetAddress;
/** Value: "ZIPCODE" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_DiscoverableProgramMerchantSignupInfo_SignupSharedDatas_Zipcode;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_EventDateTime.doorsOpenLabel

/**
 *  Legacy alias for `DOORS_OPEN`. Deprecated.
 *
 *  Value: "doorsOpen"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventDateTime_DoorsOpenLabel_DoorsOpen GTLR_DEPRECATED;
/** Value: "DOORS_OPEN_LABEL_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventDateTime_DoorsOpenLabel_DoorsOpenLabelUnspecified;
/**
 *  Legacy alias for `GATES_OPEN`. Deprecated.
 *
 *  Value: "gatesOpen"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventDateTime_DoorsOpenLabel_GatesOpen GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_EventTicketClass.confirmationCodeLabel

/**
 *  Legacy alias for `CONFIRMATION_CODE`. Deprecated.
 *
 *  Value: "confirmationCode"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_ConfirmationCodeLabel_ConfirmationCode GTLR_DEPRECATED;
/** Value: "CONFIRMATION_CODE_LABEL_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_ConfirmationCodeLabel_ConfirmationCodeLabelUnspecified;
/**
 *  Legacy alias for `CONFIRMATION_NUMBER`. Deprecated.
 *
 *  Value: "confirmationNumber"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_ConfirmationCodeLabel_ConfirmationNumber GTLR_DEPRECATED;
/**
 *  Legacy alias for `ORDER_NUMBER`. Deprecated.
 *
 *  Value: "orderNumber"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_ConfirmationCodeLabel_OrderNumber GTLR_DEPRECATED;
/**
 *  Legacy alias for `RESERVATION_NUMBER`. Deprecated.
 *
 *  Value: "reservationNumber"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_ConfirmationCodeLabel_ReservationNumber GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_EventTicketClass.gateLabel

/**
 *  Legacy alias for `DOOR`. Deprecated.
 *
 *  Value: "door"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_GateLabel_Door GTLR_DEPRECATED;
/**
 *  Legacy alias for `ENTRANCE`. Deprecated.
 *
 *  Value: "entrance"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_GateLabel_Entrance GTLR_DEPRECATED;
/**
 *  Legacy alias for `GATE`. Deprecated.
 *
 *  Value: "gate"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_GateLabel_Gate GTLR_DEPRECATED;
/** Value: "GATE_LABEL_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_GateLabel_GateLabelUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_EventTicketClass.multipleDevicesAndHoldersAllowedStatus

/**
 *  Legacy alias for `MULTIPLE_HOLDERS`. Deprecated.
 *
 *  Value: "multipleHolders"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_MultipleDevicesAndHoldersAllowedStatus_MultipleHolders GTLR_DEPRECATED;
/**
 *  Legacy alias for `ONE_USER_ALL_DEVICES`. Deprecated.
 *
 *  Value: "oneUserAllDevices"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_MultipleDevicesAndHoldersAllowedStatus_OneUserAllDevices GTLR_DEPRECATED;
/**
 *  Legacy alias for `ONE_USER_ONE_DEVICE`. Deprecated.
 *
 *  Value: "oneUserOneDevice"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_MultipleDevicesAndHoldersAllowedStatus_OneUserOneDevice GTLR_DEPRECATED;
/**
 *  Unspecified preference.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_MultipleDevicesAndHoldersAllowedStatus_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_EventTicketClass.reviewStatus

/**
 *  Legacy alias for `APPROVED`. Deprecated.
 *
 *  Value: "approved"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_ReviewStatus_Approved GTLR_DEPRECATED;
/**
 *  Legacy alias for `DRAFT`. Deprecated.
 *
 *  Value: "draft"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_ReviewStatus_Draft GTLR_DEPRECATED;
/**
 *  Legacy alias for `REJECTED`. Deprecated.
 *
 *  Value: "rejected"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_ReviewStatus_Rejected GTLR_DEPRECATED;
/** Value: "REVIEW_STATUS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_ReviewStatus_ReviewStatusUnspecified;
/**
 *  Legacy alias for `UNDER_REVIEW`. Deprecated.
 *
 *  Value: "underReview"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_ReviewStatus_UnderReview GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_EventTicketClass.rowLabel

/**
 *  Legacy alias for `ROW`. Deprecated.
 *
 *  Value: "row"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_RowLabel_Row GTLR_DEPRECATED;
/** Value: "ROW_LABEL_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_RowLabel_RowLabelUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_EventTicketClass.seatLabel

/**
 *  Legacy alias for `SEAT`. Deprecated.
 *
 *  Value: "seat"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_SeatLabel_Seat GTLR_DEPRECATED;
/** Value: "SEAT_LABEL_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_SeatLabel_SeatLabelUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_EventTicketClass.sectionLabel

/**
 *  Legacy alias for `SECTION`. Deprecated.
 *
 *  Value: "section"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_SectionLabel_Section GTLR_DEPRECATED;
/** Value: "SECTION_LABEL_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_SectionLabel_SectionLabelUnspecified;
/**
 *  Legacy alias for `THEATER`. Deprecated.
 *
 *  Value: "theater"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_SectionLabel_Theater GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_EventTicketClass.viewUnlockRequirement

/**
 *  Default behavior for all the existing Passes if ViewUnlockRequirement is not
 *  set.
 *
 *  Value: "UNLOCK_NOT_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_ViewUnlockRequirement_UnlockNotRequired;
/**
 *  Requires the user to unlock their device each time the pass is viewed. If
 *  the user removes their device lock after saving the pass, then they will be
 *  prompted to create a device lock before the pass can be viewed.
 *
 *  Value: "UNLOCK_REQUIRED_TO_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_ViewUnlockRequirement_UnlockRequiredToView;
/**
 *  Default value, same as UNLOCK_NOT_REQUIRED.
 *
 *  Value: "VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketClass_ViewUnlockRequirement_ViewUnlockRequirementUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_EventTicketObject.state

/**
 *  Legacy alias for `ACTIVE`. Deprecated.
 *
 *  Value: "active"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketObject_State_Active GTLR_DEPRECATED;
/**
 *  Legacy alias for `COMPLETED`. Deprecated.
 *
 *  Value: "completed"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketObject_State_Completed GTLR_DEPRECATED;
/**
 *  Legacy alias for `EXPIRED`. Deprecated.
 *
 *  Value: "expired"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketObject_State_Expired GTLR_DEPRECATED;
/**
 *  Legacy alias for `INACTIVE`. Deprecated.
 *
 *  Value: "inactive"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketObject_State_Inactive GTLR_DEPRECATED;
/** Value: "STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_EventTicketObject_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_FieldReference.dateFormat

/**
 *  Default option when no format is specified, when selected, no formatting
 *  will be applied.
 *
 *  Value: "DATE_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FieldReference_DateFormat_DateFormatUnspecified;
/**
 *  Legacy alias for `DATE_ONLY`. Deprecated.
 *
 *  Value: "dateOnly"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FieldReference_DateFormat_DateOnly GTLR_DEPRECATED;
/**
 *  Legacy alias for `DATE_TIME`. Deprecated.
 *
 *  Value: "dateTime"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FieldReference_DateFormat_DateTime GTLR_DEPRECATED;
/**
 *  Legacy alias for `DATE_TIME_YEAR`. Deprecated.
 *
 *  Value: "dateTimeYear"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FieldReference_DateFormat_DateTimeYear GTLR_DEPRECATED;
/**
 *  Legacy alias for `DATE_YEAR`. Deprecated.
 *
 *  Value: "dateYear"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FieldReference_DateFormat_DateYear GTLR_DEPRECATED;
/**
 *  Legacy alias for `TIME_ONLY`. Deprecated.
 *
 *  Value: "timeOnly"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FieldReference_DateFormat_TimeOnly GTLR_DEPRECATED;
/**
 *  Renders `2018-12-14T13:00:00` as `2018-12`.
 *
 *  Value: "YEAR_MONTH"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FieldReference_DateFormat_YearMonth;
/**
 *  Renders `2018-12-14T13:00:00` as `2018-12-14`.
 *
 *  Value: "YEAR_MONTH_DAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FieldReference_DateFormat_YearMonthDay;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_FirstRowOption.transitOption

/**
 *  Legacy alias for `ORIGIN_AND_DESTINATION_CODES`. Deprecated.
 *
 *  Value: "originAndDestinationCodes"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FirstRowOption_TransitOption_OriginAndDestinationCodes GTLR_DEPRECATED;
/**
 *  Legacy alias for `ORIGIN_AND_DESTINATION_NAMES`. Deprecated.
 *
 *  Value: "originAndDestinationNames"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FirstRowOption_TransitOption_OriginAndDestinationNames GTLR_DEPRECATED;
/**
 *  Legacy alias for `ORIGIN_NAME`. Deprecated.
 *
 *  Value: "originName"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FirstRowOption_TransitOption_OriginName GTLR_DEPRECATED;
/** Value: "TRANSIT_OPTION_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FirstRowOption_TransitOption_TransitOptionUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_FlightClass.flightStatus

/**
 *  Legacy alias for `ACTIVE`. Deprecated.
 *
 *  Value: "active"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_FlightStatus_Active GTLR_DEPRECATED;
/**
 *  Legacy alias for `CANCELLED`. Deprecated.
 *
 *  Value: "cancelled"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_FlightStatus_Cancelled GTLR_DEPRECATED;
/**
 *  Legacy alias for `DIVERTED`. Deprecated.
 *
 *  Value: "diverted"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_FlightStatus_Diverted GTLR_DEPRECATED;
/** Value: "FLIGHT_STATUS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_FlightStatus_FlightStatusUnspecified;
/**
 *  Legacy alias for `LANDED`. Deprecated.
 *
 *  Value: "landed"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_FlightStatus_Landed GTLR_DEPRECATED;
/**
 *  Legacy alias for `REDIRECTED`. Deprecated.
 *
 *  Value: "redirected"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_FlightStatus_Redirected GTLR_DEPRECATED;
/**
 *  Legacy alias for `SCHEDULED`. Deprecated.
 *
 *  Value: "scheduled"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_FlightStatus_Scheduled GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_FlightClass.multipleDevicesAndHoldersAllowedStatus

/**
 *  Legacy alias for `MULTIPLE_HOLDERS`. Deprecated.
 *
 *  Value: "multipleHolders"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_MultipleDevicesAndHoldersAllowedStatus_MultipleHolders GTLR_DEPRECATED;
/**
 *  Legacy alias for `ONE_USER_ALL_DEVICES`. Deprecated.
 *
 *  Value: "oneUserAllDevices"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_MultipleDevicesAndHoldersAllowedStatus_OneUserAllDevices GTLR_DEPRECATED;
/**
 *  Legacy alias for `ONE_USER_ONE_DEVICE`. Deprecated.
 *
 *  Value: "oneUserOneDevice"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_MultipleDevicesAndHoldersAllowedStatus_OneUserOneDevice GTLR_DEPRECATED;
/**
 *  Unspecified preference.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_MultipleDevicesAndHoldersAllowedStatus_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_FlightClass.reviewStatus

/**
 *  Legacy alias for `APPROVED`. Deprecated.
 *
 *  Value: "approved"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_ReviewStatus_Approved GTLR_DEPRECATED;
/**
 *  Legacy alias for `DRAFT`. Deprecated.
 *
 *  Value: "draft"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_ReviewStatus_Draft GTLR_DEPRECATED;
/**
 *  Legacy alias for `REJECTED`. Deprecated.
 *
 *  Value: "rejected"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_ReviewStatus_Rejected GTLR_DEPRECATED;
/** Value: "REVIEW_STATUS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_ReviewStatus_ReviewStatusUnspecified;
/**
 *  Legacy alias for `UNDER_REVIEW`. Deprecated.
 *
 *  Value: "underReview"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_ReviewStatus_UnderReview GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_FlightClass.viewUnlockRequirement

/**
 *  Default behavior for all the existing Passes if ViewUnlockRequirement is not
 *  set.
 *
 *  Value: "UNLOCK_NOT_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_ViewUnlockRequirement_UnlockNotRequired;
/**
 *  Requires the user to unlock their device each time the pass is viewed. If
 *  the user removes their device lock after saving the pass, then they will be
 *  prompted to create a device lock before the pass can be viewed.
 *
 *  Value: "UNLOCK_REQUIRED_TO_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_ViewUnlockRequirement_UnlockRequiredToView;
/**
 *  Default value, same as UNLOCK_NOT_REQUIRED.
 *
 *  Value: "VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightClass_ViewUnlockRequirement_ViewUnlockRequirementUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_FlightObject.state

/**
 *  Legacy alias for `ACTIVE`. Deprecated.
 *
 *  Value: "active"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightObject_State_Active GTLR_DEPRECATED;
/**
 *  Legacy alias for `COMPLETED`. Deprecated.
 *
 *  Value: "completed"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightObject_State_Completed GTLR_DEPRECATED;
/**
 *  Legacy alias for `EXPIRED`. Deprecated.
 *
 *  Value: "expired"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightObject_State_Expired GTLR_DEPRECATED;
/**
 *  Legacy alias for `INACTIVE`. Deprecated.
 *
 *  Value: "inactive"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightObject_State_Inactive GTLR_DEPRECATED;
/** Value: "STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_FlightObject_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_GenericClass.multipleDevicesAndHoldersAllowedStatus

/**
 *  Legacy alias for `MULTIPLE_HOLDERS`. Deprecated.
 *
 *  Value: "multipleHolders"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericClass_MultipleDevicesAndHoldersAllowedStatus_MultipleHolders GTLR_DEPRECATED;
/**
 *  Legacy alias for `ONE_USER_ALL_DEVICES`. Deprecated.
 *
 *  Value: "oneUserAllDevices"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericClass_MultipleDevicesAndHoldersAllowedStatus_OneUserAllDevices GTLR_DEPRECATED;
/**
 *  Legacy alias for `ONE_USER_ONE_DEVICE`. Deprecated.
 *
 *  Value: "oneUserOneDevice"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericClass_MultipleDevicesAndHoldersAllowedStatus_OneUserOneDevice GTLR_DEPRECATED;
/**
 *  Unspecified preference.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericClass_MultipleDevicesAndHoldersAllowedStatus_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_GenericClass.viewUnlockRequirement

/**
 *  Default behavior for all the existing Passes if ViewUnlockRequirement is not
 *  set.
 *
 *  Value: "UNLOCK_NOT_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericClass_ViewUnlockRequirement_UnlockNotRequired;
/**
 *  Requires the user to unlock their device each time the pass is viewed. If
 *  the user removes their device lock after saving the pass, then they will be
 *  prompted to create a device lock before the pass can be viewed.
 *
 *  Value: "UNLOCK_REQUIRED_TO_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericClass_ViewUnlockRequirement_UnlockRequiredToView;
/**
 *  Default value, same as UNLOCK_NOT_REQUIRED.
 *
 *  Value: "VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericClass_ViewUnlockRequirement_ViewUnlockRequirementUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_GenericObject.genericType

/**
 *  Auto-insurance cards
 *
 *  Value: "GENERIC_AUTO_INSURANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_GenericType_GenericAutoInsurance;
/**
 *  Entry tickets
 *
 *  Value: "GENERIC_ENTRY_TICKET"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_GenericType_GenericEntryTicket;
/**
 *  Gym membership cards
 *
 *  Value: "GENERIC_GYM_MEMBERSHIP"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_GenericType_GenericGymMembership;
/**
 *  Home-insurance cards
 *
 *  Value: "GENERIC_HOME_INSURANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_GenericType_GenericHomeInsurance;
/**
 *  Library membership cards
 *
 *  Value: "GENERIC_LIBRARY_MEMBERSHIP"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_GenericType_GenericLibraryMembership;
/**
 *  Other type
 *
 *  Value: "GENERIC_OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_GenericType_GenericOther;
/**
 *  Parking pass
 *
 *  Value: "GENERIC_PARKING_PASS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_GenericType_GenericParkingPass;
/**
 *  Receipts
 *
 *  Value: "GENERIC_RECEIPT"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_GenericType_GenericReceipt;
/**
 *  Reservations
 *
 *  Value: "GENERIC_RESERVATIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_GenericType_GenericReservations;
/**
 *  Season pass
 *
 *  Value: "GENERIC_SEASON_PASS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_GenericType_GenericSeasonPass;
/**
 *  Unspecified generic type.
 *
 *  Value: "GENERIC_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_GenericType_GenericTypeUnspecified;
/**
 *  Utility bills
 *
 *  Value: "GENERIC_UTILITY_BILLS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_GenericType_GenericUtilityBills;
/**
 *  Voucher
 *
 *  Value: "GENERIC_VOUCHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_GenericType_GenericVoucher;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_GenericObject.state

/**
 *  Legacy alias for `ACTIVE`. Deprecated.
 *
 *  Value: "active"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_State_Active GTLR_DEPRECATED;
/**
 *  Legacy alias for `COMPLETED`. Deprecated.
 *
 *  Value: "completed"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_State_Completed GTLR_DEPRECATED;
/**
 *  Legacy alias for `EXPIRED`. Deprecated.
 *
 *  Value: "expired"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_State_Expired GTLR_DEPRECATED;
/**
 *  Legacy alias for `INACTIVE`. Deprecated.
 *
 *  Value: "inactive"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_State_Inactive GTLR_DEPRECATED;
/** Value: "STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GenericObject_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_GiftCardClass.multipleDevicesAndHoldersAllowedStatus

/**
 *  Legacy alias for `MULTIPLE_HOLDERS`. Deprecated.
 *
 *  Value: "multipleHolders"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardClass_MultipleDevicesAndHoldersAllowedStatus_MultipleHolders GTLR_DEPRECATED;
/**
 *  Legacy alias for `ONE_USER_ALL_DEVICES`. Deprecated.
 *
 *  Value: "oneUserAllDevices"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardClass_MultipleDevicesAndHoldersAllowedStatus_OneUserAllDevices GTLR_DEPRECATED;
/**
 *  Legacy alias for `ONE_USER_ONE_DEVICE`. Deprecated.
 *
 *  Value: "oneUserOneDevice"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardClass_MultipleDevicesAndHoldersAllowedStatus_OneUserOneDevice GTLR_DEPRECATED;
/**
 *  Unspecified preference.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardClass_MultipleDevicesAndHoldersAllowedStatus_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_GiftCardClass.reviewStatus

/**
 *  Legacy alias for `APPROVED`. Deprecated.
 *
 *  Value: "approved"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardClass_ReviewStatus_Approved GTLR_DEPRECATED;
/**
 *  Legacy alias for `DRAFT`. Deprecated.
 *
 *  Value: "draft"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardClass_ReviewStatus_Draft GTLR_DEPRECATED;
/**
 *  Legacy alias for `REJECTED`. Deprecated.
 *
 *  Value: "rejected"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardClass_ReviewStatus_Rejected GTLR_DEPRECATED;
/** Value: "REVIEW_STATUS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardClass_ReviewStatus_ReviewStatusUnspecified;
/**
 *  Legacy alias for `UNDER_REVIEW`. Deprecated.
 *
 *  Value: "underReview"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardClass_ReviewStatus_UnderReview GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_GiftCardClass.viewUnlockRequirement

/**
 *  Default behavior for all the existing Passes if ViewUnlockRequirement is not
 *  set.
 *
 *  Value: "UNLOCK_NOT_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardClass_ViewUnlockRequirement_UnlockNotRequired;
/**
 *  Requires the user to unlock their device each time the pass is viewed. If
 *  the user removes their device lock after saving the pass, then they will be
 *  prompted to create a device lock before the pass can be viewed.
 *
 *  Value: "UNLOCK_REQUIRED_TO_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardClass_ViewUnlockRequirement_UnlockRequiredToView;
/**
 *  Default value, same as UNLOCK_NOT_REQUIRED.
 *
 *  Value: "VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardClass_ViewUnlockRequirement_ViewUnlockRequirementUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_GiftCardObject.state

/**
 *  Legacy alias for `ACTIVE`. Deprecated.
 *
 *  Value: "active"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardObject_State_Active GTLR_DEPRECATED;
/**
 *  Legacy alias for `COMPLETED`. Deprecated.
 *
 *  Value: "completed"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardObject_State_Completed GTLR_DEPRECATED;
/**
 *  Legacy alias for `EXPIRED`. Deprecated.
 *
 *  Value: "expired"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardObject_State_Expired GTLR_DEPRECATED;
/**
 *  Legacy alias for `INACTIVE`. Deprecated.
 *
 *  Value: "inactive"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardObject_State_Inactive GTLR_DEPRECATED;
/** Value: "STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_GiftCardObject_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_IssuerToUserInfo.action

/** Value: "ACTION_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_IssuerToUserInfo_Action_ActionUnspecified;
/**
 *  Legacy alias for `S2AP`. Deprecated.
 *
 *  Value: "s2ap"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_IssuerToUserInfo_Action_S2ap GTLR_DEPRECATED;
/**
 *  Legacy alias for `SIGN_UP`. Deprecated.
 *
 *  Value: "signUp"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_IssuerToUserInfo_Action_SignUp GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_LoyaltyClass.multipleDevicesAndHoldersAllowedStatus

/**
 *  Legacy alias for `MULTIPLE_HOLDERS`. Deprecated.
 *
 *  Value: "multipleHolders"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyClass_MultipleDevicesAndHoldersAllowedStatus_MultipleHolders GTLR_DEPRECATED;
/**
 *  Legacy alias for `ONE_USER_ALL_DEVICES`. Deprecated.
 *
 *  Value: "oneUserAllDevices"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyClass_MultipleDevicesAndHoldersAllowedStatus_OneUserAllDevices GTLR_DEPRECATED;
/**
 *  Legacy alias for `ONE_USER_ONE_DEVICE`. Deprecated.
 *
 *  Value: "oneUserOneDevice"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyClass_MultipleDevicesAndHoldersAllowedStatus_OneUserOneDevice GTLR_DEPRECATED;
/**
 *  Unspecified preference.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyClass_MultipleDevicesAndHoldersAllowedStatus_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_LoyaltyClass.reviewStatus

/**
 *  Legacy alias for `APPROVED`. Deprecated.
 *
 *  Value: "approved"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyClass_ReviewStatus_Approved GTLR_DEPRECATED;
/**
 *  Legacy alias for `DRAFT`. Deprecated.
 *
 *  Value: "draft"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyClass_ReviewStatus_Draft GTLR_DEPRECATED;
/**
 *  Legacy alias for `REJECTED`. Deprecated.
 *
 *  Value: "rejected"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyClass_ReviewStatus_Rejected GTLR_DEPRECATED;
/** Value: "REVIEW_STATUS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyClass_ReviewStatus_ReviewStatusUnspecified;
/**
 *  Legacy alias for `UNDER_REVIEW`. Deprecated.
 *
 *  Value: "underReview"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyClass_ReviewStatus_UnderReview GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_LoyaltyClass.viewUnlockRequirement

/**
 *  Default behavior for all the existing Passes if ViewUnlockRequirement is not
 *  set.
 *
 *  Value: "UNLOCK_NOT_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyClass_ViewUnlockRequirement_UnlockNotRequired;
/**
 *  Requires the user to unlock their device each time the pass is viewed. If
 *  the user removes their device lock after saving the pass, then they will be
 *  prompted to create a device lock before the pass can be viewed.
 *
 *  Value: "UNLOCK_REQUIRED_TO_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyClass_ViewUnlockRequirement_UnlockRequiredToView;
/**
 *  Default value, same as UNLOCK_NOT_REQUIRED.
 *
 *  Value: "VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyClass_ViewUnlockRequirement_ViewUnlockRequirementUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_LoyaltyObject.state

/**
 *  Legacy alias for `ACTIVE`. Deprecated.
 *
 *  Value: "active"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyObject_State_Active GTLR_DEPRECATED;
/**
 *  Legacy alias for `COMPLETED`. Deprecated.
 *
 *  Value: "completed"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyObject_State_Completed GTLR_DEPRECATED;
/**
 *  Legacy alias for `EXPIRED`. Deprecated.
 *
 *  Value: "expired"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyObject_State_Expired GTLR_DEPRECATED;
/**
 *  Legacy alias for `INACTIVE`. Deprecated.
 *
 *  Value: "inactive"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyObject_State_Inactive GTLR_DEPRECATED;
/** Value: "STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_LoyaltyObject_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_Media.referenceType

/**
 *  Informs Scotty to generate a response payload with the size specified in the
 *  length field. The contents of the payload are generated by Scotty and are
 *  undefined. This is useful for testing download speeds between the user and
 *  Scotty without involving a real payload source. Note: range is not supported
 *  when using arbitrary_bytes.
 *
 *  Value: "ARBITRARY_BYTES"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Media_ReferenceType_ArbitraryBytes;
/**
 *  Reference points to a bigstore object
 *
 *  Value: "BIGSTORE_REF"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Media_ReferenceType_BigstoreRef;
/**
 *  Reference points to a blobstore object. This could be either a v1 blob_ref
 *  or a v2 blobstore2_info. Clients should check blobstore2_info first, since
 *  v1 is being deprecated.
 *
 *  Value: "BLOB_REF"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Media_ReferenceType_BlobRef;
/**
 *  The content for this media object is stored across multiple partial media
 *  objects under the composite_media field.
 *
 *  Value: "COMPOSITE_MEDIA"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Media_ReferenceType_CompositeMedia;
/**
 *  Indicates the data is stored in cosmo_binary_reference.
 *
 *  Value: "COSMO_BINARY_REFERENCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Media_ReferenceType_CosmoBinaryReference;
/**
 *  Indicates the data is stored in diff_checksums_response.
 *
 *  Value: "DIFF_CHECKSUMS_RESPONSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Media_ReferenceType_DiffChecksumsResponse;
/**
 *  Indicates the data is stored in diff_download_response.
 *
 *  Value: "DIFF_DOWNLOAD_RESPONSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Media_ReferenceType_DiffDownloadResponse;
/**
 *  Indicates the data is stored in diff_upload_request.
 *
 *  Value: "DIFF_UPLOAD_REQUEST"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Media_ReferenceType_DiffUploadRequest;
/**
 *  Indicates the data is stored in diff_upload_response.
 *
 *  Value: "DIFF_UPLOAD_RESPONSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Media_ReferenceType_DiffUploadResponse;
/**
 *  Indicates the data is stored in diff_version_response.
 *
 *  Value: "DIFF_VERSION_RESPONSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Media_ReferenceType_DiffVersionResponse;
/**
 *  Data should be accessed from the current service using the operation
 *  GetMedia.
 *
 *  Value: "GET_MEDIA"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Media_ReferenceType_GetMedia;
/**
 *  Data is included into this proto buffer
 *
 *  Value: "INLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Media_ReferenceType_Inline;
/**
 *  Reference contains a GFS path or a local path.
 *
 *  Value: "PATH"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Media_ReferenceType_Path;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_MediaRequestInfo.notificationType

/**
 *  Such requests signals the end of a request containing media upload. END
 *  should be handled just like normal Insert/Upload requests, that is, they
 *  should process the request and return a complete resource in the response.
 *  Pointers to media data (a GFS path usually) appear in the relevant fields in
 *  the inserted/updated resource. See gdata.Media in data.proto.
 *
 *  Value: "END"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_MediaRequestInfo_NotificationType_End;
/**
 *  Such requests indicate that an error occurred while processing the request.
 *  ERROR is only sent to the backend if it is configured to receive them. It is
 *  not guaranteed that all errors will result in this notification to the
 *  backend, even if the backend requests them. Since these requests are just
 *  for informational purposes, the response does not need to contain anything.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_MediaRequestInfo_NotificationType_Error;
/**
 *  Such requests signals that the upload has progressed and that the backend
 *  might want to access the media file specified in relevant fields in the
 *  resource. Only the media field(s) in the inserted/updated resource are set.
 *  The response should either return an error or succeed. On success, responses
 *  don't need to contain anything.
 *
 *  Value: "PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_MediaRequestInfo_NotificationType_Progress;
/**
 *  Such requests occur after an END and signal that the response has been sent
 *  back to the client. RESPONSE_SENT is only sent to the backend if it is
 *  configured to receive them. The response does not need to contain anything.
 *
 *  Value: "RESPONSE_SENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_MediaRequestInfo_NotificationType_ResponseSent;
/**
 *  Such requests signals the start of a request containing media upload. Only
 *  the media field(s) in the inserted/updated resource are set. The response
 *  should either return an error or succeed. On success, responses don't need
 *  to contain anything.
 *
 *  Value: "START"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_MediaRequestInfo_NotificationType_Start;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_Message.messageType

/**
 *  Legacy alias for `EXPIRATION_NOTIFICATION`. Deprecated.
 *
 *  Value: "expirationNotification"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Message_MessageType_ExpirationNotification GTLR_DEPRECATED;
/** Value: "MESSAGE_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Message_MessageType_MessageTypeUnspecified;
/**
 *  Legacy alias for `TEXT`. Deprecated.
 *
 *  Value: "text"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Message_MessageType_Text GTLR_DEPRECATED;
/**
 *  Renders the message as text on the card details screen and as an Android
 *  notification.
 *
 *  Value: "TEXT_AND_NOTIFY"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Message_MessageType_TextAndNotify;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_OfferClass.multipleDevicesAndHoldersAllowedStatus

/**
 *  Legacy alias for `MULTIPLE_HOLDERS`. Deprecated.
 *
 *  Value: "multipleHolders"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_MultipleDevicesAndHoldersAllowedStatus_MultipleHolders GTLR_DEPRECATED;
/**
 *  Legacy alias for `ONE_USER_ALL_DEVICES`. Deprecated.
 *
 *  Value: "oneUserAllDevices"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_MultipleDevicesAndHoldersAllowedStatus_OneUserAllDevices GTLR_DEPRECATED;
/**
 *  Legacy alias for `ONE_USER_ONE_DEVICE`. Deprecated.
 *
 *  Value: "oneUserOneDevice"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_MultipleDevicesAndHoldersAllowedStatus_OneUserOneDevice GTLR_DEPRECATED;
/**
 *  Unspecified preference.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_MultipleDevicesAndHoldersAllowedStatus_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_OfferClass.redemptionChannel

/**
 *  Legacy alias for `BOTH`. Deprecated.
 *
 *  Value: "both"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_RedemptionChannel_Both GTLR_DEPRECATED;
/**
 *  Legacy alias for `INSTORE`. Deprecated.
 *
 *  Value: "instore"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_RedemptionChannel_Instore GTLR_DEPRECATED;
/**
 *  Legacy alias for `ONLINE`. Deprecated.
 *
 *  Value: "online"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_RedemptionChannel_Online GTLR_DEPRECATED;
/** Value: "REDEMPTION_CHANNEL_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_RedemptionChannel_RedemptionChannelUnspecified;
/**
 *  Legacy alias for `TEMPORARY_PRICE_REDUCTION`. Deprecated.
 *
 *  Value: "temporaryPriceReduction"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_RedemptionChannel_TemporaryPriceReduction GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_OfferClass.reviewStatus

/**
 *  Legacy alias for `APPROVED`. Deprecated.
 *
 *  Value: "approved"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_ReviewStatus_Approved GTLR_DEPRECATED;
/**
 *  Legacy alias for `DRAFT`. Deprecated.
 *
 *  Value: "draft"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_ReviewStatus_Draft GTLR_DEPRECATED;
/**
 *  Legacy alias for `REJECTED`. Deprecated.
 *
 *  Value: "rejected"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_ReviewStatus_Rejected GTLR_DEPRECATED;
/** Value: "REVIEW_STATUS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_ReviewStatus_ReviewStatusUnspecified;
/**
 *  Legacy alias for `UNDER_REVIEW`. Deprecated.
 *
 *  Value: "underReview"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_ReviewStatus_UnderReview GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_OfferClass.viewUnlockRequirement

/**
 *  Default behavior for all the existing Passes if ViewUnlockRequirement is not
 *  set.
 *
 *  Value: "UNLOCK_NOT_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_ViewUnlockRequirement_UnlockNotRequired;
/**
 *  Requires the user to unlock their device each time the pass is viewed. If
 *  the user removes their device lock after saving the pass, then they will be
 *  prompted to create a device lock before the pass can be viewed.
 *
 *  Value: "UNLOCK_REQUIRED_TO_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_ViewUnlockRequirement_UnlockRequiredToView;
/**
 *  Default value, same as UNLOCK_NOT_REQUIRED.
 *
 *  Value: "VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferClass_ViewUnlockRequirement_ViewUnlockRequirementUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_OfferObject.state

/**
 *  Legacy alias for `ACTIVE`. Deprecated.
 *
 *  Value: "active"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferObject_State_Active GTLR_DEPRECATED;
/**
 *  Legacy alias for `COMPLETED`. Deprecated.
 *
 *  Value: "completed"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferObject_State_Completed GTLR_DEPRECATED;
/**
 *  Legacy alias for `EXPIRED`. Deprecated.
 *
 *  Value: "expired"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferObject_State_Expired GTLR_DEPRECATED;
/**
 *  Legacy alias for `INACTIVE`. Deprecated.
 *
 *  Value: "inactive"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferObject_State_Inactive GTLR_DEPRECATED;
/** Value: "STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_OfferObject_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_PassConstraints.nfcConstraint

/**
 *  Closed loop transit cards will not be conveyed while the pass is open.
 *
 *  Value: "BLOCK_CLOSED_LOOP_TRANSIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_PassConstraints_NfcConstraint_BlockClosedLoopTransit;
/**
 *  Payment cards will not be conveyed while the pass is open.
 *
 *  Value: "BLOCK_PAYMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_PassConstraints_NfcConstraint_BlockPayment;
/**
 *  Default value, no specified constraint.
 *
 *  Value: "NFC_CONSTRAINT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_PassConstraints_NfcConstraint_NfcConstraintUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_PassConstraints.screenshotEligibility

/**
 *  Default behavior for all existing Passes if ScreenshotEligibility is not
 *  set. Allows screenshots to be taken on Android devices.
 *
 *  Value: "ELIGIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_PassConstraints_ScreenshotEligibility_Eligible;
/**
 *  Disallows screenshots to be taken on Android devices. Note that older
 *  versions of Wallet may still allow screenshots to be taken.
 *
 *  Value: "INELIGIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_PassConstraints_ScreenshotEligibility_Ineligible;
/**
 *  Default value, same as ELIGIBLE.
 *
 *  Value: "SCREENSHOT_ELIGIBILITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_PassConstraints_ScreenshotEligibility_ScreenshotEligibilityUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_Permission.role

/**
 *  Legacy alias for `OWNER`. Deprecated.
 *
 *  Value: "owner"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Permission_Role_Owner GTLR_DEPRECATED;
/**
 *  Legacy alias for `READER`. Deprecated.
 *
 *  Value: "reader"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Permission_Role_Reader GTLR_DEPRECATED;
/** Value: "ROLE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Permission_Role_RoleUnspecified;
/**
 *  Legacy alias for `WRITER`. Deprecated.
 *
 *  Value: "writer"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_Permission_Role_Writer GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_RotatingBarcode.renderEncoding

/** Value: "RENDER_ENCODING_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcode_RenderEncoding_RenderEncodingUnspecified;
/**
 *  UTF_8 encoding for barcodes. This is only supported for barcode type qrCode.
 *
 *  Value: "UTF_8"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcode_RenderEncoding_Utf8;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_RotatingBarcode.type

/**
 *  Legacy alias for `AZTEC`. Deprecated. Not supported for Rotating Barcodes.
 *
 *  Value: "aztec"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcode_Type_Aztec GTLR_DEPRECATED;
/** Value: "BARCODE_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcode_Type_BarcodeTypeUnspecified;
/**
 *  Legacy alias for `CODABAR`. Deprecated. Not supported for Rotating Barcodes.
 *
 *  Value: "codabar"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcode_Type_Codabar GTLR_DEPRECATED;
/**
 *  Legacy alias for `CODE_128`. Deprecated. Not supported for Rotating
 *  Barcodes.
 *
 *  Value: "code128"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcode_Type_Code128 GTLR_DEPRECATED;
/**
 *  Legacy alias for `CODE_39`. Deprecated. Not supported for Rotating Barcodes.
 *
 *  Value: "code39"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcode_Type_Code39 GTLR_DEPRECATED;
/**
 *  Legacy alias for `DATA_MATRIX`. Deprecated. Not supported for Rotating
 *  Barcodes.
 *
 *  Value: "dataMatrix"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcode_Type_DataMatrix GTLR_DEPRECATED;
/**
 *  Legacy alias for `EAN_13`. Deprecated. Not supported for Rotating Barcodes.
 *
 *  Value: "EAN13"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcode_Type_Ean13 GTLR_DEPRECATED;
/**
 *  Legacy alias for `EAN_8`. Deprecated. Not supported for Rotating Barcodes.
 *
 *  Value: "ean8"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcode_Type_Ean8 GTLR_DEPRECATED;
/**
 *  Legacy alias for `ITF_14`. Deprecated. Not supported for Rotating Barcodes.
 *
 *  Value: "itf14"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcode_Type_Itf14 GTLR_DEPRECATED;
/**
 *  Legacy alias for `PDF_417`. Deprecated.
 *
 *  Value: "PDF417"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcode_Type_Pdf417 GTLR_DEPRECATED;
/**
 *  Legacy alias for `QR_CODE`. Deprecated.
 *
 *  Value: "qrcode"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcode_Type_Qrcode GTLR_DEPRECATED;
/**
 *  Legacy alias for `QR_CODE`. Deprecated.
 *
 *  Value: "qrCode"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcode_Type_QrCode GTLR_DEPRECATED;
/**
 *  Legacy alias for `TEXT_ONLY`. Deprecated. Not supported for Rotating
 *  Barcodes.
 *
 *  Value: "textOnly"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcode_Type_TextOnly GTLR_DEPRECATED;
/**
 *  Legacy alias for `UPC_A`. Deprecated. Not supported for Rotating Barcodes.
 *
 *  Value: "upcA"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcode_Type_UpcA GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_RotatingBarcodeTotpDetails.algorithm

/** Value: "TOTP_ALGORITHM_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcodeTotpDetails_Algorithm_TotpAlgorithmUnspecified;
/**
 *  TOTP algorithm from RFC 6238 with the SHA1 hash function
 *
 *  Value: "TOTP_SHA1"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_RotatingBarcodeTotpDetails_Algorithm_TotpSha1;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_SecurityAnimation.animationType

/** Value: "ANIMATION_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_SecurityAnimation_AnimationType_AnimationUnspecified;
/**
 *  Legacy alias for `FOIL_SHIMMER`. Deprecated.
 *
 *  Value: "foilShimmer"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_SecurityAnimation_AnimationType_FoilShimmer GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_TemplateItem.predefinedItem

/**
 *  Legacy alias for `FLIGHT_NUMBER_AND_OPERATING_FLIGHT_NUMBER`. Deprecated.
 *
 *  Value: "flightNumberAndOperatingFlightNumber"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TemplateItem_PredefinedItem_FlightNumberAndOperatingFlightNumber GTLR_DEPRECATED;
/**
 *  Legacy alias for `FREQUENT_FLYER_PROGRAM_NAME_AND_NUMBER`. Deprecated.
 *
 *  Value: "frequentFlyerProgramNameAndNumber"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TemplateItem_PredefinedItem_FrequentFlyerProgramNameAndNumber GTLR_DEPRECATED;
/** Value: "PREDEFINED_ITEM_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TemplateItem_PredefinedItem_PredefinedItemUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_TicketSeat.fareClass

/**
 *  Legacy alias for `BUSINESS`. Deprecated.
 *
 *  Value: "business"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TicketSeat_FareClass_Business GTLR_DEPRECATED;
/**
 *  Legacy alias for `ECONOMY`. Deprecated.
 *
 *  Value: "economy"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TicketSeat_FareClass_Economy GTLR_DEPRECATED;
/** Value: "FARE_CLASS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TicketSeat_FareClass_FareClassUnspecified;
/**
 *  Legacy alias for `FIRST`. Deprecated.
 *
 *  Value: "first"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TicketSeat_FareClass_First GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_TransitClass.multipleDevicesAndHoldersAllowedStatus

/**
 *  Legacy alias for `MULTIPLE_HOLDERS`. Deprecated.
 *
 *  Value: "multipleHolders"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_MultipleDevicesAndHoldersAllowedStatus_MultipleHolders GTLR_DEPRECATED;
/**
 *  Legacy alias for `ONE_USER_ALL_DEVICES`. Deprecated.
 *
 *  Value: "oneUserAllDevices"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_MultipleDevicesAndHoldersAllowedStatus_OneUserAllDevices GTLR_DEPRECATED;
/**
 *  Legacy alias for `ONE_USER_ONE_DEVICE`. Deprecated.
 *
 *  Value: "oneUserOneDevice"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_MultipleDevicesAndHoldersAllowedStatus_OneUserOneDevice GTLR_DEPRECATED;
/**
 *  Unspecified preference.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_MultipleDevicesAndHoldersAllowedStatus_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_TransitClass.reviewStatus

/**
 *  Legacy alias for `APPROVED`. Deprecated.
 *
 *  Value: "approved"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_ReviewStatus_Approved GTLR_DEPRECATED;
/**
 *  Legacy alias for `DRAFT`. Deprecated.
 *
 *  Value: "draft"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_ReviewStatus_Draft GTLR_DEPRECATED;
/**
 *  Legacy alias for `REJECTED`. Deprecated.
 *
 *  Value: "rejected"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_ReviewStatus_Rejected GTLR_DEPRECATED;
/** Value: "REVIEW_STATUS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_ReviewStatus_ReviewStatusUnspecified;
/**
 *  Legacy alias for `UNDER_REVIEW`. Deprecated.
 *
 *  Value: "underReview"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_ReviewStatus_UnderReview GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_TransitClass.transitType

/**
 *  Legacy alias for `BUS`. Deprecated.
 *
 *  Value: "bus"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_TransitType_Bus GTLR_DEPRECATED;
/**
 *  Legacy alias for `FERRY`. Deprecated.
 *
 *  Value: "ferry"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_TransitType_Ferry GTLR_DEPRECATED;
/**
 *  Legacy alias for `OTHER`. Deprecated.
 *
 *  Value: "other"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_TransitType_Other GTLR_DEPRECATED;
/**
 *  Legacy alias for `RAIL`. Deprecated.
 *
 *  Value: "rail"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_TransitType_Rail GTLR_DEPRECATED;
/**
 *  Legacy alias for `TRAM`. Deprecated.
 *
 *  Value: "tram"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_TransitType_Tram GTLR_DEPRECATED;
/** Value: "TRANSIT_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_TransitType_TransitTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_TransitClass.viewUnlockRequirement

/**
 *  Default behavior for all the existing Passes if ViewUnlockRequirement is not
 *  set.
 *
 *  Value: "UNLOCK_NOT_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_ViewUnlockRequirement_UnlockNotRequired;
/**
 *  Requires the user to unlock their device each time the pass is viewed. If
 *  the user removes their device lock after saving the pass, then they will be
 *  prompted to create a device lock before the pass can be viewed.
 *
 *  Value: "UNLOCK_REQUIRED_TO_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_ViewUnlockRequirement_UnlockRequiredToView;
/**
 *  Default value, same as UNLOCK_NOT_REQUIRED.
 *
 *  Value: "VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitClass_ViewUnlockRequirement_ViewUnlockRequirementUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_TransitObject.concessionCategory

/**
 *  Legacy alias for `ADULT`. Deprecated.
 *
 *  Value: "adult"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_ConcessionCategory_Adult GTLR_DEPRECATED;
/**
 *  Legacy alias for `CHILD`. Deprecated.
 *
 *  Value: "child"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_ConcessionCategory_Child GTLR_DEPRECATED;
/** Value: "CONCESSION_CATEGORY_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_ConcessionCategory_ConcessionCategoryUnspecified;
/**
 *  Legacy alias for `SENIOR`. Deprecated.
 *
 *  Value: "senior"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_ConcessionCategory_Senior GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_TransitObject.passengerType

/**
 *  Legacy alias for `MULTIPLE_PASSENGERS`. Deprecated.
 *
 *  Value: "multiplePassengers"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_PassengerType_MultiplePassengers GTLR_DEPRECATED;
/** Value: "PASSENGER_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_PassengerType_PassengerTypeUnspecified;
/**
 *  Legacy alias for `SINGLE_PASSENGER`. Deprecated.
 *
 *  Value: "singlePassenger"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_PassengerType_SinglePassenger GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_TransitObject.state

/**
 *  Legacy alias for `ACTIVE`. Deprecated.
 *
 *  Value: "active"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_State_Active GTLR_DEPRECATED;
/**
 *  Legacy alias for `COMPLETED`. Deprecated.
 *
 *  Value: "completed"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_State_Completed GTLR_DEPRECATED;
/**
 *  Legacy alias for `EXPIRED`. Deprecated.
 *
 *  Value: "expired"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_State_Expired GTLR_DEPRECATED;
/**
 *  Legacy alias for `INACTIVE`. Deprecated.
 *
 *  Value: "inactive"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_State_Inactive GTLR_DEPRECATED;
/** Value: "STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_TransitObject.ticketStatus

/**
 *  Legacy alias for `EXCHANGED`. Deprecated.
 *
 *  Value: "exchanged"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_TicketStatus_Exchanged GTLR_DEPRECATED;
/**
 *  Legacy alias for `REFUNDED`. Deprecated.
 *
 *  Value: "refunded"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_TicketStatus_Refunded GTLR_DEPRECATED;
/** Value: "TICKET_STATUS_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_TicketStatus_TicketStatusUnspecified;
/**
 *  Legacy alias for `USED`. Deprecated.
 *
 *  Value: "used"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_TicketStatus_Used GTLR_DEPRECATED;

// ----------------------------------------------------------------------------
// GTLRWalletobjects_TransitObject.tripType

/**
 *  Legacy alias for `ONE_WAY`. Deprecated.
 *
 *  Value: "oneWay"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_TripType_OneWay GTLR_DEPRECATED;
/**
 *  Legacy alias for `ROUND_TRIP`. Deprecated.
 *
 *  Value: "roundTrip"
 */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_TripType_RoundTrip GTLR_DEPRECATED;
/** Value: "TRIP_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRWalletobjects_TransitObject_TripType_TripTypeUnspecified;

/**
 *  ActivationOptions for the class
 */
@interface GTLRWalletobjects_ActivationOptions : GTLRObject

/**
 *  HTTPS URL that supports REST semantics. Would be used for requesting
 *  activation from partners for given valuable, triggered by the users.
 */
@property(nonatomic, copy, nullable) NSString *activationUrl;

/**
 *  Flag to allow users to make activation call from different device. This
 *  allows client to render the activation button enabled even if the
 *  activationStatus is ACTIVATED but the requested device is different than the
 *  current device.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowReactivation;

@end


/**
 *  The activation status of the object. This field includes activation status
 *  if valuable supports activation.
 */
@interface GTLRWalletobjects_ActivationStatus : GTLRObject

/**
 *  state
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_ActivationStatus_State_Activated Legacy alias
 *        for `ACTIVATED`. Deprecated. (Value: "activated")
 *    @arg @c kGTLRWalletobjects_ActivationStatus_State_NotActivated Legacy
 *        alias for `NOT_ACTIVATED`. Deprecated. (Value: "not_activated")
 *    @arg @c kGTLRWalletobjects_ActivationStatus_State_UnknownState Value
 *        "UNKNOWN_STATE"
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Resource used when the AddMessage endpoints are called.
 */
@interface GTLRWalletobjects_AddMessageRequest : GTLRObject

@property(nonatomic, strong, nullable) GTLRWalletobjects_Message *message;

@end


/**
 *  GTLRWalletobjects_AirportInfo
 */
@interface GTLRWalletobjects_AirportInfo : GTLRObject

/**
 *  Three character IATA airport code. This is a required field for `origin` and
 *  `destination`. Eg: "SFO"
 */
@property(nonatomic, copy, nullable) NSString *airportIataCode;

/**
 *  Optional field that overrides the airport city name defined by IATA. By
 *  default, Google takes the `airportIataCode` provided and maps it to the
 *  official airport city name defined by IATA. Official IATA airport city names
 *  can be found at IATA airport city names website. For example, for the
 *  airport IATA code "LTN", IATA website tells us that the corresponding
 *  airport city is "London". If this field is not populated, Google would
 *  display "London". However, populating this field with a custom name (eg:
 *  "London Luton") would override it.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *airportNameOverride;

/** A name of the gate. Eg: "B59" or "59" */
@property(nonatomic, copy, nullable) NSString *gate;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#airportInfo"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/** Terminal name. Eg: "INTL" or "I" */
@property(nonatomic, copy, nullable) NSString *terminal;

@end


/**
 *  GTLRWalletobjects_AppLinkData
 */
@interface GTLRWalletobjects_AppLinkData : GTLRObject

/** Optional information about the partner app link. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkDataAppLinkInfo *androidAppLinkInfo;

/** Deprecated. Links to open iOS apps are not supported. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkDataAppLinkInfo *iosAppLinkInfo GTLR_DEPRECATED;

/** Optional information about the partner web link. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkDataAppLinkInfo *webAppLinkInfo;

@end


/**
 *  GTLRWalletobjects_AppLinkDataAppLinkInfo
 */
@interface GTLRWalletobjects_AppLinkDataAppLinkInfo : GTLRObject

/** Deprecated. Image isn't supported in the app link module. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *appLogoImage GTLR_DEPRECATED;

/**
 *  Target to follow when opening the app link on clients. It will be used by
 *  partners to open their app or webpage.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkDataAppLinkInfoAppTarget *appTarget;

/**
 *  Deprecated. Description isn't supported in the app link module.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *descriptionProperty GTLR_DEPRECATED;

/** Deprecated. Title isn't supported in the app link module. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *title GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_AppLinkDataAppLinkInfoAppTarget
 */
@interface GTLRWalletobjects_AppLinkDataAppLinkInfoAppTarget : GTLRObject

/** Package name for AppTarget. For example: com.google.android.gm */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  URI for AppTarget. The description on the URI must be set. Prefer setting
 *  package field instead, if this target is defined for your application.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Uri *targetUri;

@end


/**
 *  GTLRWalletobjects_AuthenticationKey
 */
@interface GTLRWalletobjects_AuthenticationKey : GTLRObject

/**
 *  Available only to Smart Tap enabled partners. Contact support for additional
 *  guidance.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

/**
 *  Available only to Smart Tap enabled partners. Contact support for additional
 *  guidance.
 */
@property(nonatomic, copy, nullable) NSString *publicKeyPem;

@end


/**
 *  GTLRWalletobjects_Barcode
 */
@interface GTLRWalletobjects_Barcode : GTLRObject

/**
 *  An optional text that will override the default text that shows under the
 *  barcode. This field is intended for a human readable equivalent of the
 *  barcode value, used when the barcode cannot be scanned.
 */
@property(nonatomic, copy, nullable) NSString *alternateText;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#barcode"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  The render encoding for the barcode. When specified, barcode is rendered in
 *  the given encoding. Otherwise best known encoding is chosen by Google.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_Barcode_RenderEncoding_RenderEncodingUnspecified
 *        Value "RENDER_ENCODING_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_Barcode_RenderEncoding_Utf8 UTF_8 encoding for
 *        barcodes. This is only supported for barcode type qrCode. (Value:
 *        "UTF_8")
 */
@property(nonatomic, copy, nullable) NSString *renderEncoding;

/**
 *  Optional text that will be shown when the barcode is hidden behind a click
 *  action. This happens in cases where a pass has Smart Tap enabled. If not
 *  specified, a default is chosen by Google.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *showCodeText;

/**
 *  The type of barcode.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_Barcode_Type_Aztec Legacy alias for `AZTEC`.
 *        Deprecated. Not supported for Rotating Barcodes. (Value: "aztec")
 *    @arg @c kGTLRWalletobjects_Barcode_Type_BarcodeTypeUnspecified Value
 *        "BARCODE_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_Barcode_Type_Codabar Legacy alias for
 *        `CODABAR`. Deprecated. Not supported for Rotating Barcodes. (Value:
 *        "codabar")
 *    @arg @c kGTLRWalletobjects_Barcode_Type_Code128 Legacy alias for
 *        `CODE_128`. Deprecated. Not supported for Rotating Barcodes. (Value:
 *        "code128")
 *    @arg @c kGTLRWalletobjects_Barcode_Type_Code39 Legacy alias for `CODE_39`.
 *        Deprecated. Not supported for Rotating Barcodes. (Value: "code39")
 *    @arg @c kGTLRWalletobjects_Barcode_Type_DataMatrix Legacy alias for
 *        `DATA_MATRIX`. Deprecated. Not supported for Rotating Barcodes.
 *        (Value: "dataMatrix")
 *    @arg @c kGTLRWalletobjects_Barcode_Type_Ean13 Legacy alias for `EAN_13`.
 *        Deprecated. Not supported for Rotating Barcodes. (Value: "EAN13")
 *    @arg @c kGTLRWalletobjects_Barcode_Type_Ean8 Legacy alias for `EAN_8`.
 *        Deprecated. Not supported for Rotating Barcodes. (Value: "ean8")
 *    @arg @c kGTLRWalletobjects_Barcode_Type_Itf14 Legacy alias for `ITF_14`.
 *        Deprecated. Not supported for Rotating Barcodes. (Value: "itf14")
 *    @arg @c kGTLRWalletobjects_Barcode_Type_Pdf417 Legacy alias for `PDF_417`.
 *        Deprecated. (Value: "PDF417")
 *    @arg @c kGTLRWalletobjects_Barcode_Type_Qrcode Legacy alias for `QR_CODE`.
 *        Deprecated. (Value: "qrcode")
 *    @arg @c kGTLRWalletobjects_Barcode_Type_QrCode Legacy alias for `QR_CODE`.
 *        Deprecated. (Value: "qrCode")
 *    @arg @c kGTLRWalletobjects_Barcode_Type_TextOnly Legacy alias for
 *        `TEXT_ONLY`. Deprecated. Not supported for Rotating Barcodes. (Value:
 *        "textOnly")
 *    @arg @c kGTLRWalletobjects_Barcode_Type_UpcA Legacy alias for `UPC_A`.
 *        Deprecated. Not supported for Rotating Barcodes. (Value: "upcA")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The value encoded in the barcode. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRWalletobjects_BarcodeSectionDetail
 */
@interface GTLRWalletobjects_BarcodeSectionDetail : GTLRObject

/** A reference to an existing text-based or image field to display. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_FieldSelector *fieldSelector;

@end


/**
 *  Information to read/write to blobstore2.
 */
@interface GTLRWalletobjects_Blobstore2Info : GTLRObject

/**
 *  The blob generation id.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blobGeneration;

/** The blob id, e.g., /blobstore/prod/playground/scotty */
@property(nonatomic, copy, nullable) NSString *blobId;

/**
 *  Read handle passed from Bigstore -> Scotty for a GCS download. This is a
 *  signed, serialized blobstore2.ReadHandle proto which must never be set
 *  outside of Bigstore, and is not applicable to non-GCS media downloads.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *downloadReadHandle;

/**
 *  The blob read token. Needed to read blobs that have not been replicated.
 *  Might not be available until the final call.
 */
@property(nonatomic, copy, nullable) NSString *readToken;

/**
 *  Metadata passed from Blobstore -> Scotty for a new GCS upload. This is a
 *  signed, serialized blobstore2.BlobMetadataContainer proto which must never
 *  be consumed outside of Bigstore, and is not applicable to non-GCS media
 *  uploads.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *uploadMetadataContainer;

@end


/**
 *  GTLRWalletobjects_BoardingAndSeatingInfo
 */
@interface GTLRWalletobjects_BoardingAndSeatingInfo : GTLRObject

/**
 *  Set this field only if this flight boards through more than one door or
 *  bridge and you want to explicitly print the door location on the boarding
 *  pass. Most airlines route their passengers to the right door or bridge by
 *  refering to doors/bridges by the `seatClass`. In those cases `boardingDoor`
 *  should not be set.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_BoardingAndSeatingInfo_BoardingDoor_Back Legacy
 *        alias for `BACK`. Deprecated. (Value: "back")
 *    @arg @c kGTLRWalletobjects_BoardingAndSeatingInfo_BoardingDoor_BoardingDoorUnspecified
 *        Value "BOARDING_DOOR_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_BoardingAndSeatingInfo_BoardingDoor_Front
 *        Legacy alias for `FRONT`. Deprecated. (Value: "front")
 */
@property(nonatomic, copy, nullable) NSString *boardingDoor;

/**
 *  The value of boarding group (or zone) this passenger shall board with. eg:
 *  "B" The label for this value will be determined by the `boardingPolicy`
 *  field in the `flightClass` referenced by this object.
 */
@property(nonatomic, copy, nullable) NSString *boardingGroup;

/** The value of boarding position. eg: "76" */
@property(nonatomic, copy, nullable) NSString *boardingPosition;

/**
 *  A small image shown above the boarding barcode. Airlines can use it to
 *  communicate any special boarding privileges. In the event the security
 *  program logo is also set, this image might be rendered alongside the logo
 *  for that security program.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *boardingPrivilegeImage;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#boardingAndSeatingInfo"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  The passenger's seat assignment. To be used when there is no specific
 *  identifier to use in `seatNumber`. eg: "assigned at gate"
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *seatAssignment;

/** The value of the seat class. eg: "Economy" or "Economy Plus" */
@property(nonatomic, copy, nullable) NSString *seatClass;

/**
 *  The value of passenger seat. If there is no specific identifier, use
 *  `seatAssignment` instead. eg: "25A"
 */
@property(nonatomic, copy, nullable) NSString *seatNumber;

/**
 *  The sequence number on the boarding pass. This usually matches the sequence
 *  in which the passengers checked in. Airline might use the number for manual
 *  boarding and bag tags. eg: "49"
 */
@property(nonatomic, copy, nullable) NSString *sequenceNumber;

@end


/**
 *  GTLRWalletobjects_BoardingAndSeatingPolicy
 */
@interface GTLRWalletobjects_BoardingAndSeatingPolicy : GTLRObject

/**
 *  Indicates the policy the airline uses for boarding. If unset, Google will
 *  default to `zoneBased`.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_BoardingAndSeatingPolicy_BoardingPolicy_BoardingPolicyOther
 *        Legacy alias for `BOARDING_POLICY_OTHER`. Deprecated. (Value:
 *        "boardingPolicyOther")
 *    @arg @c kGTLRWalletobjects_BoardingAndSeatingPolicy_BoardingPolicy_BoardingPolicyUnspecified
 *        Value "BOARDING_POLICY_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_BoardingAndSeatingPolicy_BoardingPolicy_GroupBased
 *        Legacy alias for `GROUP_BASED`. Deprecated. (Value: "groupBased")
 *    @arg @c kGTLRWalletobjects_BoardingAndSeatingPolicy_BoardingPolicy_ZoneBased
 *        Legacy alias for `ZONE_BASED`. Deprecated. (Value: "zoneBased")
 */
@property(nonatomic, copy, nullable) NSString *boardingPolicy;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#boardingAndSeatingPolicy"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  Seating policy which dictates how we display the seat class. If unset,
 *  Google will default to `cabinBased`.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_BoardingAndSeatingPolicy_SeatClassPolicy_CabinBased
 *        Legacy alias for `CABIN_BASED`. Deprecated. (Value: "cabinBased")
 *    @arg @c kGTLRWalletobjects_BoardingAndSeatingPolicy_SeatClassPolicy_ClassBased
 *        Legacy alias for `CLASS_BASED`. Deprecated. (Value: "classBased")
 *    @arg @c kGTLRWalletobjects_BoardingAndSeatingPolicy_SeatClassPolicy_SeatClassPolicyOther
 *        Legacy alias for `SEAT_CLASS_POLICY_OTHER`. Deprecated. (Value:
 *        "seatClassPolicyOther")
 *    @arg @c kGTLRWalletobjects_BoardingAndSeatingPolicy_SeatClassPolicy_SeatClassPolicyUnspecified
 *        Value "SEAT_CLASS_POLICY_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_BoardingAndSeatingPolicy_SeatClassPolicy_TierBased
 *        Legacy alias for `TIER_BASED`. Deprecated. (Value: "tierBased")
 */
@property(nonatomic, copy, nullable) NSString *seatClassPolicy;

@end


/**
 *  GTLRWalletobjects_CallbackOptions
 */
@interface GTLRWalletobjects_CallbackOptions : GTLRObject

/**
 *  URL for the merchant endpoint that would be called to request updates. The
 *  URL should be hosted on HTTPS and robots.txt should allow the URL path to be
 *  accessible by UserAgent:Googlebot. Deprecated.
 */
@property(nonatomic, copy, nullable) NSString *updateRequestUrl GTLR_DEPRECATED;

/**
 *  The HTTPS url configured by the merchant. The URL should be hosted on HTTPS
 *  and robots.txt should allow the URL path to be accessible by
 *  UserAgent:Googlebot.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  GTLRWalletobjects_CardBarcodeSectionDetails
 */
@interface GTLRWalletobjects_CardBarcodeSectionDetails : GTLRObject

/** Optional information to display below the barcode. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_BarcodeSectionDetail *firstBottomDetail;

/**
 *  Optional information to display above the barcode. If `secondTopDetail` is
 *  defined, this will be displayed to the start side of this detail section.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_BarcodeSectionDetail *firstTopDetail;

/**
 *  Optional second piece of information to display above the barcode. If
 *  `firstTopDetail` is defined, this will be displayed to the end side of this
 *  detail section.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_BarcodeSectionDetail *secondTopDetail;

@end


/**
 *  GTLRWalletobjects_CardRowOneItem
 */
@interface GTLRWalletobjects_CardRowOneItem : GTLRObject

/**
 *  The item to be displayed in the row. This item will be automatically
 *  centered.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TemplateItem *item;

@end


/**
 *  GTLRWalletobjects_CardRowTemplateInfo
 */
@interface GTLRWalletobjects_CardRowTemplateInfo : GTLRObject

/**
 *  Template for a row containing one item. Exactly one of "one_item",
 *  "two_items", "three_items" must be set.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CardRowOneItem *oneItem;

/**
 *  Template for a row containing three items. Exactly one of "one_item",
 *  "two_items", "three_items" must be set.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CardRowThreeItems *threeItems;

/**
 *  Template for a row containing two items. Exactly one of "one_item",
 *  "two_items", "three_items" must be set.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CardRowTwoItems *twoItems;

@end


/**
 *  GTLRWalletobjects_CardRowThreeItems
 */
@interface GTLRWalletobjects_CardRowThreeItems : GTLRObject

/**
 *  The item to be displayed at the end of the row. This item will be aligned to
 *  the right.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TemplateItem *endItem;

/**
 *  The item to be displayed in the middle of the row. This item will be
 *  centered between the start and end items.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TemplateItem *middleItem;

/**
 *  The item to be displayed at the start of the row. This item will be aligned
 *  to the left.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TemplateItem *startItem;

@end


/**
 *  GTLRWalletobjects_CardRowTwoItems
 */
@interface GTLRWalletobjects_CardRowTwoItems : GTLRObject

/**
 *  The item to be displayed at the end of the row. This item will be aligned to
 *  the right.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TemplateItem *endItem;

/**
 *  The item to be displayed at the start of the row. This item will be aligned
 *  to the left.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TemplateItem *startItem;

@end


/**
 *  GTLRWalletobjects_CardTemplateOverride
 */
@interface GTLRWalletobjects_CardTemplateOverride : GTLRObject

/**
 *  Template information for rows in the card view. At most three rows are
 *  allowed to be specified.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_CardRowTemplateInfo *> *cardRowTemplateInfos;

@end


/**
 *  GTLRWalletobjects_ClassTemplateInfo
 */
@interface GTLRWalletobjects_ClassTemplateInfo : GTLRObject

/**
 *  Specifies extra information to be displayed above and below the barcode.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CardBarcodeSectionDetails *cardBarcodeSectionDetails;

/** Override for the card view. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CardTemplateOverride *cardTemplateOverride;

/** Override for the details view (beneath the card view). */
@property(nonatomic, strong, nullable) GTLRWalletobjects_DetailsTemplateOverride *detailsTemplateOverride;

/** Override for the passes list view. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ListTemplateOverride *listTemplateOverride;

@end


/**
 *  A sequence of media data references representing composite data. Introduced
 *  to support Bigstore composite objects. For details, visit
 *  http://go/bigstore-composites.
 */
@interface GTLRWalletobjects_CompositeMedia : GTLRObject

/**
 *  Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should
 *  be the byte representation of a blobstore.BlobRef. Since Blobstore is
 *  deprecating v1, use blobstore2_info instead. For now, any v2 blob will also
 *  be represented in this field as v1 BlobRef.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *blobRef GTLR_DEPRECATED;

/**
 *  Blobstore v2 info, set if reference_type is BLOBSTORE_REF and it refers to a
 *  v2 blob.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Blobstore2Info *blobstore2Info;

/**
 *  A binary data reference for a media download. Serves as a
 *  technology-agnostic binary reference in some Google infrastructure. This
 *  value is a serialized storage_cosmo.BinaryReference proto. Storing it as
 *  bytes is a hack to get around the fact that the cosmo proto (as well as
 *  others it includes) doesn't support JavaScript. This prevents us from
 *  including the actual type of this field.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *cosmoBinaryReference;

/**
 *  crc32.c hash for the payload.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *crc32cHash;

/**
 *  Media data, set if reference_type is INLINE
 *
 *  Remapped to 'inlineProperty' to avoid language reserved word 'inline'.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *inlineProperty;

/**
 *  Size of the data, in bytes
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/**
 *  MD5 hash for the payload.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *md5Hash;

/** Reference to a TI Blob, set if reference_type is BIGSTORE_REF. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ObjectId *objectId;

/** Path to the data, set if reference_type is PATH */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Describes what the field reference contains.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_CompositeMedia_ReferenceType_BigstoreRef
 *        Reference points to a bigstore object (Value: "BIGSTORE_REF")
 *    @arg @c kGTLRWalletobjects_CompositeMedia_ReferenceType_BlobRef Reference
 *        points to a blobstore object. This could be either a v1 blob_ref or a
 *        v2 blobstore2_info. Clients should check blobstore2_info first, since
 *        v1 is being deprecated. (Value: "BLOB_REF")
 *    @arg @c kGTLRWalletobjects_CompositeMedia_ReferenceType_CosmoBinaryReference
 *        Indicates the data is stored in cosmo_binary_reference. (Value:
 *        "COSMO_BINARY_REFERENCE")
 *    @arg @c kGTLRWalletobjects_CompositeMedia_ReferenceType_Inline Data is
 *        included into this proto buffer (Value: "INLINE")
 *    @arg @c kGTLRWalletobjects_CompositeMedia_ReferenceType_Path Reference
 *        contains a GFS path or a local path. (Value: "PATH")
 */
@property(nonatomic, copy, nullable) NSString *referenceType;

/**
 *  SHA-1 hash for the payload.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *sha1Hash;

@end


/**
 *  Detailed Content-Type information from Scotty. The Content-Type of the media
 *  will typically be filled in by the header or Scotty's best_guess, but this
 *  extended information provides the backend with more information so that it
 *  can make a better decision if needed. This is only used on media upload
 *  requests from Scotty.
 */
@interface GTLRWalletobjects_ContentTypeInfo : GTLRObject

/** Scotty's best guess of what the content type of the file is. */
@property(nonatomic, copy, nullable) NSString *bestGuess;

/**
 *  The content type of the file derived by looking at specific bytes (i.e.
 *  "magic bytes") of the actual file.
 */
@property(nonatomic, copy, nullable) NSString *fromBytes;

/**
 *  The content type of the file derived from the file extension of the original
 *  file name used by the client.
 */
@property(nonatomic, copy, nullable) NSString *fromFileName;

/**
 *  The content type of the file as specified in the request headers, multipart
 *  headers, or RUPIO start request.
 */
@property(nonatomic, copy, nullable) NSString *fromHeader;

/**
 *  The content type of the file derived from the file extension of the URL
 *  path. The URL path is assumed to represent a file name (which is typically
 *  only true for agents that are providing a REST API).
 */
@property(nonatomic, copy, nullable) NSString *fromUrlPath;

@end


/**
 *  GTLRWalletobjects_DateTime
 */
@interface GTLRWalletobjects_DateTime : GTLRObject

/**
 *  An ISO 8601 extended format date/time. Offset may or may not be required
 *  (refer to the parent field's documentation). Time may be specified up to
 *  nanosecond precision. Offsets may be specified with seconds precision (even
 *  though offset seconds is not part of ISO 8601). For example:
 *  `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the
 *  23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would
 *  be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4
 *  hours before UTC (same instant in time as the above example). If the
 *  date/time is intended for a physical location in New York, this would be the
 *  equivalent of Eastern Daylight Time (EDT). Remember that offset varies in
 *  regions that observe Daylight Saving Time (or Summer Time), depending on the
 *  time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52
 *  seconds after the 19th hour of April 12th, 1985 with no offset information.
 *  Providing an offset makes this an absolute instant in time around the world.
 *  The date/time will be adjusted based on the user's time zone. For example, a
 *  time of `2018-06-19T18:30:00-04:00` will be 18:30:00 for a user in New York
 *  and 15:30:00 for a user in Los Angeles. Omitting the offset makes this a
 *  local date/time, representing several instants in time around the world. The
 *  date/time will always be in the user's current time zone. For example, a
 *  time of `2018-06-19T18:30:00` will be 18:30:00 for a user in New York and
 *  also 18:30:00 for a user in Los Angeles. This is useful when the same local
 *  date/time should apply to many physical locations across several time zones.
 */
@property(nonatomic, copy, nullable) NSString *date;

@end


/**
 *  GTLRWalletobjects_DetailsItemInfo
 */
@interface GTLRWalletobjects_DetailsItemInfo : GTLRObject

/** The item to be displayed in the details list. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TemplateItem *item;

@end


/**
 *  GTLRWalletobjects_DetailsTemplateOverride
 */
@interface GTLRWalletobjects_DetailsTemplateOverride : GTLRObject

/** Information for the "nth" item displayed in the details list. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_DetailsItemInfo *> *detailsItemInfos;

@end


/**
 *  Device context associated with the object.
 */
@interface GTLRWalletobjects_DeviceContext : GTLRObject

/**
 *  If set, redemption information will only be returned to the given device
 *  upon activation of the object. This should not be used as a stable
 *  identifier to trace a user's device. It can change across different passes
 *  for the same device or even across different activations for the same
 *  device. When setting this, callers must also set has_linked_device on the
 *  object being activated.
 */
@property(nonatomic, copy, nullable) NSString *deviceToken;

@end


/**
 *  Backend response for a Diff get checksums response. For details on the
 *  Scotty Diff protocol, visit http://go/scotty-diff-protocol.
 */
@interface GTLRWalletobjects_DiffChecksumsResponse : GTLRObject

/**
 *  Exactly one of these fields must be populated. If checksums_location is
 *  filled, the server will return the corresponding contents to the user. If
 *  object_location is filled, the server will calculate the checksums based on
 *  the content there and return that to the user. For details on the format of
 *  the checksums, see http://go/scotty-diff-protocol.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CompositeMedia *checksumsLocation;

/**
 *  The chunk size of checksums. Must be a multiple of 256KB.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *chunkSizeBytes;

/**
 *  If set, calculate the checksums based on the contents and return them to the
 *  caller.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CompositeMedia *objectLocation;

/**
 *  The total size of the server object.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectSizeBytes;

/** The object version of the object the checksums are being returned for. */
@property(nonatomic, copy, nullable) NSString *objectVersion;

@end


/**
 *  Backend response for a Diff download response. For details on the Scotty
 *  Diff protocol, visit http://go/scotty-diff-protocol.
 */
@interface GTLRWalletobjects_DiffDownloadResponse : GTLRObject

/** The original object location. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CompositeMedia *objectLocation;

@end


/**
 *  A Diff upload request. For details on the Scotty Diff protocol, visit
 *  http://go/scotty-diff-protocol.
 */
@interface GTLRWalletobjects_DiffUploadRequest : GTLRObject

/**
 *  The location of the checksums for the new object. Agents must clone the
 *  object located here, as the upload server will delete the contents once a
 *  response is received. For details on the format of the checksums, see
 *  http://go/scotty-diff-protocol.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CompositeMedia *checksumsInfo;

/**
 *  The location of the new object. Agents must clone the object located here,
 *  as the upload server will delete the contents once a response is received.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CompositeMedia *objectInfo;

/**
 *  The object version of the object that is the base version the incoming diff
 *  script will be applied to. This field will always be filled in.
 */
@property(nonatomic, copy, nullable) NSString *objectVersion;

@end


/**
 *  Backend response for a Diff upload request. For details on the Scotty Diff
 *  protocol, visit http://go/scotty-diff-protocol.
 */
@interface GTLRWalletobjects_DiffUploadResponse : GTLRObject

/**
 *  The object version of the object at the server. Must be included in the end
 *  notification response. The version in the end notification response must
 *  correspond to the new version of the object that is now stored at the
 *  server, after the upload.
 */
@property(nonatomic, copy, nullable) NSString *objectVersion;

/**
 *  The location of the original file for a diff upload request. Must be filled
 *  in if responding to an upload start notification.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CompositeMedia *originalObject;

@end


/**
 *  Backend response for a Diff get version response. For details on the Scotty
 *  Diff protocol, visit http://go/scotty-diff-protocol.
 */
@interface GTLRWalletobjects_DiffVersionResponse : GTLRObject

/**
 *  The total size of the server object.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *objectSizeBytes;

/** The version of the object stored at the server. */
@property(nonatomic, copy, nullable) NSString *objectVersion;

@end


/**
 *  Information about how a class may be discovered and instantiated from within
 *  the Android Pay app. This is done by searching for a loyalty or gift card
 *  program and scanning or manually entering.
 */
@interface GTLRWalletobjects_DiscoverableProgram : GTLRObject

/**
 *  Information about the ability to signin and add a valuable for this program
 *  through a merchant site. Used when MERCHANT_HOSTED_SIGNIN is enabled.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_DiscoverableProgramMerchantSigninInfo *merchantSigninInfo;

/**
 *  Information about the ability to signup and add a valuable for this program
 *  through a merchant site. Used when MERCHANT_HOSTED_SIGNUP is enabled.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_DiscoverableProgramMerchantSignupInfo *merchantSignupInfo;

/**
 *  Visibility state of the discoverable program.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_DiscoverableProgram_State_Disabled Legacy alias
 *        for `DISABLED`. Deprecated. (Value: "disabled")
 *    @arg @c kGTLRWalletobjects_DiscoverableProgram_State_Live Legacy alias for
 *        `LIVE`. Deprecated. (Value: "live")
 *    @arg @c kGTLRWalletobjects_DiscoverableProgram_State_StateUnspecified
 *        Value "STATE_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_DiscoverableProgram_State_TrustedTesters Legacy
 *        alias for `TRUSTED_TESTERS`. Deprecated. (Value: "trustedTesters")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Information about the merchant hosted signin flow for a program.
 */
@interface GTLRWalletobjects_DiscoverableProgramMerchantSigninInfo : GTLRObject

/** The URL to direct the user to for the merchant's signin site. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Uri *signinWebsite;

@end


/**
 *  Information about the merchant hosted signup flow for a program.
 */
@interface GTLRWalletobjects_DiscoverableProgramMerchantSignupInfo : GTLRObject

/**
 *  User data that is sent in a POST request to the signup website URL. This
 *  information is encoded and then shared so that the merchant's website can
 *  prefill fields used to enroll the user for the discoverable program.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *signupSharedDatas;

/** The URL to direct the user to for the merchant's signup site. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Uri *signupWebsite;

@end


/**
 *  Parameters specific to media downloads.
 */
@interface GTLRWalletobjects_DownloadParameters : GTLRObject

/**
 *  A boolean to be returned in the response to Scotty. Allows/disallows gzip
 *  encoding of the payload content when the server thinks it's advantageous
 *  (hence, does not guarantee compression) which allows Scotty to GZip the
 *  response to the client.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowGzipCompression;

/**
 *  Determining whether or not Apiary should skip the inclusion of any
 *  Content-Range header on its response to Scotty.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreRange;

@end


/**
 *  GTLRWalletobjects_EventDateTime
 */
@interface GTLRWalletobjects_EventDateTime : GTLRObject

/**
 *  A custom label to use for the doors open value (`doorsOpen`) on the card
 *  detail view. This should only be used if the default "Doors Open" label or
 *  one of the `doorsOpenLabel` options is not sufficient. Both `doorsOpenLabel`
 *  and `customDoorsOpenLabel` may not be set. If neither is set, the label will
 *  default to "Doors Open", localized. If the doors open field is unset, this
 *  label will not be used.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customDoorsOpenLabel;

/**
 *  The date/time when the doors open at the venue. This is an ISO 8601 extended
 *  format date/time, with or without an offset. Time may be specified up to
 *  nanosecond precision. Offsets may be specified with seconds precision (even
 *  though offset seconds is not part of ISO 8601). For example:
 *  `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the
 *  23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would
 *  be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4
 *  hours before UTC (same instant in time as the above example). If the event
 *  were in New York, this would be the equivalent of Eastern Daylight Time
 *  (EDT). Remember that offset varies in regions that observe Daylight Saving
 *  Time (or Summer Time), depending on the time of the year.
 *  `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the
 *  19th hour of April 12th, 1985 with no offset information. The portion of the
 *  date/time without the offset is considered the "local date/time". This
 *  should be the local date/time at the venue. For example, if the event occurs
 *  at the 20th hour of June 5th, 2018 at the venue, the local date/time portion
 *  should be `2018-06-05T20:00:00`. If the local date/time at the venue is 4
 *  hours before UTC, an offset of `-04:00` may be appended. Without offset
 *  information, some rich features may not be available.
 */
@property(nonatomic, copy, nullable) NSString *doorsOpen;

/**
 *  The label to use for the doors open value (`doorsOpen`) on the card detail
 *  view. Each available option maps to a set of localized strings, so that
 *  translations are shown to the user based on their locale. Both
 *  `doorsOpenLabel` and `customDoorsOpenLabel` may not be set. If neither is
 *  set, the label will default to "Doors Open", localized. If the doors open
 *  field is unset, this label will not be used.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_EventDateTime_DoorsOpenLabel_DoorsOpen Legacy
 *        alias for `DOORS_OPEN`. Deprecated. (Value: "doorsOpen")
 *    @arg @c kGTLRWalletobjects_EventDateTime_DoorsOpenLabel_DoorsOpenLabelUnspecified
 *        Value "DOORS_OPEN_LABEL_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_EventDateTime_DoorsOpenLabel_GatesOpen Legacy
 *        alias for `GATES_OPEN`. Deprecated. (Value: "gatesOpen")
 */
@property(nonatomic, copy, nullable) NSString *doorsOpenLabel;

/**
 *  The date/time when the event ends. If the event spans multiple days, it
 *  should be the end date/time on the last day. This is an ISO 8601 extended
 *  format date/time, with or without an offset. Time may be specified up to
 *  nanosecond precision. Offsets may be specified with seconds precision (even
 *  though offset seconds is not part of ISO 8601). For example:
 *  `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the
 *  23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would
 *  be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4
 *  hours before UTC (same instant in time as the above example). If the event
 *  were in New York, this would be the equivalent of Eastern Daylight Time
 *  (EDT). Remember that offset varies in regions that observe Daylight Saving
 *  Time (or Summer Time), depending on the time of the year.
 *  `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the
 *  19th hour of April 12th, 1985 with no offset information. The portion of the
 *  date/time without the offset is considered the "local date/time". This
 *  should be the local date/time at the venue. For example, if the event occurs
 *  at the 20th hour of June 5th, 2018 at the venue, the local date/time portion
 *  should be `2018-06-05T20:00:00`. If the local date/time at the venue is 4
 *  hours before UTC, an offset of `-04:00` may be appended. Without offset
 *  information, some rich features may not be available.
 */
@property(nonatomic, copy, nullable) NSString *end;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#eventDateTime"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  The date/time when the event starts. If the event spans multiple days, it
 *  should be the start date/time on the first day. This is an ISO 8601 extended
 *  format date/time, with or without an offset. Time may be specified up to
 *  nanosecond precision. Offsets may be specified with seconds precision (even
 *  though offset seconds is not part of ISO 8601). For example:
 *  `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the
 *  23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would
 *  be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4
 *  hours before UTC (same instant in time as the above example). If the event
 *  were in New York, this would be the equivalent of Eastern Daylight Time
 *  (EDT). Remember that offset varies in regions that observe Daylight Saving
 *  Time (or Summer Time), depending on the time of the year.
 *  `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the
 *  19th hour of April 12th, 1985 with no offset information. The portion of the
 *  date/time without the offset is considered the "local date/time". This
 *  should be the local date/time at the venue. For example, if the event occurs
 *  at the 20th hour of June 5th, 2018 at the venue, the local date/time portion
 *  should be `2018-06-05T20:00:00`. If the local date/time at the venue is 4
 *  hours before UTC, an offset of `-04:00` may be appended. Without offset
 *  information, some rich features may not be available.
 */
@property(nonatomic, copy, nullable) NSString *start;

@end


/**
 *  GTLRWalletobjects_EventReservationInfo
 */
@interface GTLRWalletobjects_EventReservationInfo : GTLRObject

/**
 *  The confirmation code of the event reservation. This may also take the form
 *  of an "order number", "confirmation number", "reservation number", or other
 *  equivalent.
 */
@property(nonatomic, copy, nullable) NSString *confirmationCode;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#eventReservationInfo"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_EventSeat
 */
@interface GTLRWalletobjects_EventSeat : GTLRObject

/**
 *  The gate the ticket holder should enter to get to their seat, such as "A" or
 *  "West". This field is localizable so you may translate words or use
 *  different alphabets for the characters in an identifier.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *gate;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#eventSeat"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  The row of the seat, such as "1", E", "BB", or "A5". This field is
 *  localizable so you may translate words or use different alphabets for the
 *  characters in an identifier.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *row;

/**
 *  The seat number, such as "1", "2", "3", or any other seat identifier. This
 *  field is localizable so you may translate words or use different alphabets
 *  for the characters in an identifier.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *seat;

/**
 *  The section of the seat, such as "121". This field is localizable so you may
 *  translate words or use different alphabets for the characters in an
 *  identifier.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *section;

@end


/**
 *  GTLRWalletobjects_EventTicketClass
 */
@interface GTLRWalletobjects_EventTicketClass : GTLRObject

/**
 *  Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowMultipleUsersPerObject GTLR_DEPRECATED;

/**
 *  Optional app or website link that will be displayed as a button on the front
 *  of the pass. If AppLinkData is provided for the corresponding object that
 *  will be used instead.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkData *appLinkData;

/**
 *  Callback options to be used to call the issuer back for every save/delete of
 *  an object for this class by the end-user. All objects of this class are
 *  eligible for the callback.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CallbackOptions *callbackOptions;

/**
 *  Template information about how the class should be displayed. If unset,
 *  Google will fallback to a default set of fields to display.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ClassTemplateInfo *classTemplateInfo;

/**
 *  The label to use for the confirmation code value
 *  (`eventTicketObject.reservationInfo.confirmationCode`) on the card detail
 *  view. Each available option maps to a set of localized strings, so that
 *  translations are shown to the user based on their locale. Both
 *  `confirmationCodeLabel` and `customConfirmationCodeLabel` may not be set. If
 *  neither is set, the label will default to "Confirmation Code", localized. If
 *  the confirmation code field is unset, this label will not be used.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_EventTicketClass_ConfirmationCodeLabel_ConfirmationCode
 *        Legacy alias for `CONFIRMATION_CODE`. Deprecated. (Value:
 *        "confirmationCode")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_ConfirmationCodeLabel_ConfirmationCodeLabelUnspecified
 *        Value "CONFIRMATION_CODE_LABEL_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_EventTicketClass_ConfirmationCodeLabel_ConfirmationNumber
 *        Legacy alias for `CONFIRMATION_NUMBER`. Deprecated. (Value:
 *        "confirmationNumber")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_ConfirmationCodeLabel_OrderNumber
 *        Legacy alias for `ORDER_NUMBER`. Deprecated. (Value: "orderNumber")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_ConfirmationCodeLabel_ReservationNumber
 *        Legacy alias for `RESERVATION_NUMBER`. Deprecated. (Value:
 *        "reservationNumber")
 */
@property(nonatomic, copy, nullable) NSString *confirmationCodeLabel;

/**
 *  Country code used to display the card's country (when the user is not in
 *  that country), as well as to display localized content when content is not
 *  available in the user's locale.
 */
@property(nonatomic, copy, nullable) NSString *countryCode;

/**
 *  A custom label to use for the confirmation code value
 *  (`eventTicketObject.reservationInfo.confirmationCode`) on the card detail
 *  view. This should only be used if the default "Confirmation Code" label or
 *  one of the `confirmationCodeLabel` options is not sufficient. Both
 *  `confirmationCodeLabel` and `customConfirmationCodeLabel` may not be set. If
 *  neither is set, the label will default to "Confirmation Code", localized. If
 *  the confirmation code field is unset, this label will not be used.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customConfirmationCodeLabel;

/**
 *  A custom label to use for the gate value (`eventTicketObject.seatInfo.gate`)
 *  on the card detail view. This should only be used if the default "Gate"
 *  label or one of the `gateLabel` options is not sufficient. Both `gateLabel`
 *  and `customGateLabel` may not be set. If neither is set, the label will
 *  default to "Gate", localized. If the gate field is unset, this label will
 *  not be used.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customGateLabel;

/**
 *  A custom label to use for the row value (`eventTicketObject.seatInfo.row`)
 *  on the card detail view. This should only be used if the default "Row" label
 *  or one of the `rowLabel` options is not sufficient. Both `rowLabel` and
 *  `customRowLabel` may not be set. If neither is set, the label will default
 *  to "Row", localized. If the row field is unset, this label will not be used.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customRowLabel;

/**
 *  A custom label to use for the seat value (`eventTicketObject.seatInfo.seat`)
 *  on the card detail view. This should only be used if the default "Seat"
 *  label or one of the `seatLabel` options is not sufficient. Both `seatLabel`
 *  and `customSeatLabel` may not be set. If neither is set, the label will
 *  default to "Seat", localized. If the seat field is unset, this label will
 *  not be used.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customSeatLabel;

/**
 *  A custom label to use for the section value
 *  (`eventTicketObject.seatInfo.section`) on the card detail view. This should
 *  only be used if the default "Section" label or one of the `sectionLabel`
 *  options is not sufficient. Both `sectionLabel` and `customSectionLabel` may
 *  not be set. If neither is set, the label will default to "Section",
 *  localized. If the section field is unset, this label will not be used.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customSectionLabel;

/** The date & time information of the event. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_EventDateTime *dateTime;

/**
 *  Identifies whether this class supports Smart Tap. The `redemptionIssuers`
 *  and object level `smartTapRedemptionLevel` fields must also be set up
 *  correctly in order for a pass to support Smart Tap.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableSmartTap;

/**
 *  The ID of the event. This ID should be unique for every event in an account.
 *  It is used to group tickets together if the user has saved multiple tickets
 *  for the same event. It can be at most 64 characters. If provided, the
 *  grouping will be stable. Be wary of unintentional collision to avoid
 *  grouping tickets that should not be grouped. If you use only one class per
 *  event, you can simply set this to the `classId` (with or without the issuer
 *  ID portion). If not provided, the platform will attempt to use other data to
 *  group tickets (potentially unstable).
 */
@property(nonatomic, copy, nullable) NSString *eventId;

/** Required. The name of the event, such as "LA Dodgers at SF Giants". */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *eventName;

/** The fine print, terms, or conditions of the ticket. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *finePrint;

/**
 *  The label to use for the gate value (`eventTicketObject.seatInfo.gate`) on
 *  the card detail view. Each available option maps to a set of localized
 *  strings, so that translations are shown to the user based on their locale.
 *  Both `gateLabel` and `customGateLabel` may not be set. If neither is set,
 *  the label will default to "Gate", localized. If the gate field is unset,
 *  this label will not be used.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_EventTicketClass_GateLabel_Door Legacy alias
 *        for `DOOR`. Deprecated. (Value: "door")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_GateLabel_Entrance Legacy
 *        alias for `ENTRANCE`. Deprecated. (Value: "entrance")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_GateLabel_Gate Legacy alias
 *        for `GATE`. Deprecated. (Value: "gate")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_GateLabel_GateLabelUnspecified
 *        Value "GATE_LABEL_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *gateLabel;

/**
 *  Optional banner image displayed on the front of the card. If none is
 *  present, nothing will be displayed. The image will display at 100% width.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *heroImage;

/**
 *  The background color for the card. If not set the dominant color of the hero
 *  image is used, and if no hero image is set, the dominant color of the logo
 *  is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as
 *  `#ffcc00`. You can also use the shorthand version of the RGB triplet which
 *  is #rgb, such as `#fc0`.
 */
@property(nonatomic, copy, nullable) NSString *hexBackgroundColor;

/**
 *  The URI of your application's home page. Populating the URI in this field
 *  results in the exact same behavior as populating an URI in linksModuleData
 *  (when an object is rendered, a link to the homepage is shown in what would
 *  usually be thought of as the linksModuleData section of the object).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Uri *homepageUri;

/**
 *  Required. The unique identifier for a class. This ID must be unique across
 *  all classes from an issuer. This value should follow the format issuer ID.
 *  identifier where the former is issued by Google and latter is chosen by you.
 *  Your unique identifier should only include alphanumeric characters, '.',
 *  '_', or '-'.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Image module data. The maximum number of these fields displayed is 1 from
 *  object level and 1 for class object level.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_ImageModuleData *> *imageModulesData;

/** Deprecated. Use textModulesData instead. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_InfoModuleData *infoModuleData GTLR_DEPRECATED;

/**
 *  Required. The issuer name. Recommended maximum length is 20 characters to
 *  ensure full string is displayed on smaller screens.
 */
@property(nonatomic, copy, nullable) NSString *issuerName;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#eventTicketClass"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  Links module data. If links module data is also defined on the object, both
 *  will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LinksModuleData *linksModuleData;

/**
 *  Translated strings for the issuer_name. Recommended maximum length is 20
 *  characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedIssuerName;

/**
 *  Note: This field is currently not supported to trigger geo notifications.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LatLongPoint *> *locations GTLR_DEPRECATED;

/**
 *  The logo image of the ticket. This image is displayed in the card detail
 *  view of the app.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *logo;

/**
 *  An array of messages displayed in the app. All users of this object will
 *  receive its associated messages. The maximum number of these fields is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Message *> *messages;

/**
 *  Identifies whether multiple users and devices will save the same object
 *  referencing this class.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_EventTicketClass_MultipleDevicesAndHoldersAllowedStatus_MultipleHolders
 *        Legacy alias for `MULTIPLE_HOLDERS`. Deprecated. (Value:
 *        "multipleHolders")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_MultipleDevicesAndHoldersAllowedStatus_OneUserAllDevices
 *        Legacy alias for `ONE_USER_ALL_DEVICES`. Deprecated. (Value:
 *        "oneUserAllDevices")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_MultipleDevicesAndHoldersAllowedStatus_OneUserOneDevice
 *        Legacy alias for `ONE_USER_ONE_DEVICE`. Deprecated. (Value:
 *        "oneUserOneDevice")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_MultipleDevicesAndHoldersAllowedStatus_StatusUnspecified
 *        Unspecified preference. (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *multipleDevicesAndHoldersAllowedStatus;

/**
 *  Identifies which redemption issuers can redeem the pass over Smart Tap.
 *  Redemption issuers are identified by their issuer ID. Redemption issuers
 *  must have at least one Smart Tap key configured. The `enableSmartTap` and
 *  object level `smartTapRedemptionLevel` fields must also be set up correctly
 *  in order for a pass to support Smart Tap.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *redemptionIssuers;

/**
 *  The review comments set by the platform when a class is marked `approved` or
 *  `rejected`.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Review *review;

/**
 *  Required. The status of the class. This field can be set to `draft` or
 *  `underReview` using the insert, patch, or update API calls. Once the review
 *  state is changed from `draft` it may not be changed back to `draft`. You
 *  should keep this field to `draft` when the class is under development. A
 *  `draft` class cannot be used to create any object. You should set this field
 *  to `underReview` when you believe the class is ready for use. The platform
 *  will automatically set this field to `approved` and it can be immediately
 *  used to create or migrate objects. When updating an already `approved` class
 *  you should keep setting this field to `underReview`.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_EventTicketClass_ReviewStatus_Approved Legacy
 *        alias for `APPROVED`. Deprecated. (Value: "approved")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_ReviewStatus_Draft Legacy
 *        alias for `DRAFT`. Deprecated. (Value: "draft")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_ReviewStatus_Rejected Legacy
 *        alias for `REJECTED`. Deprecated. (Value: "rejected")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_ReviewStatus_ReviewStatusUnspecified
 *        Value "REVIEW_STATUS_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_EventTicketClass_ReviewStatus_UnderReview
 *        Legacy alias for `UNDER_REVIEW`. Deprecated. (Value: "underReview")
 */
@property(nonatomic, copy, nullable) NSString *reviewStatus;

/**
 *  The label to use for the row value (`eventTicketObject.seatInfo.row`) on the
 *  card detail view. Each available option maps to a set of localized strings,
 *  so that translations are shown to the user based on their locale. Both
 *  `rowLabel` and `customRowLabel` may not be set. If neither is set, the label
 *  will default to "Row", localized. If the row field is unset, this label will
 *  not be used.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_EventTicketClass_RowLabel_Row Legacy alias for
 *        `ROW`. Deprecated. (Value: "row")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_RowLabel_RowLabelUnspecified
 *        Value "ROW_LABEL_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *rowLabel;

/**
 *  The label to use for the seat value (`eventTicketObject.seatInfo.seat`) on
 *  the card detail view. Each available option maps to a set of localized
 *  strings, so that translations are shown to the user based on their locale.
 *  Both `seatLabel` and `customSeatLabel` may not be set. If neither is set,
 *  the label will default to "Seat", localized. If the seat field is unset,
 *  this label will not be used.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_EventTicketClass_SeatLabel_Seat Legacy alias
 *        for `SEAT`. Deprecated. (Value: "seat")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_SeatLabel_SeatLabelUnspecified
 *        Value "SEAT_LABEL_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *seatLabel;

/**
 *  The label to use for the section value
 *  (`eventTicketObject.seatInfo.section`) on the card detail view. Each
 *  available option maps to a set of localized strings, so that translations
 *  are shown to the user based on their locale. Both `sectionLabel` and
 *  `customSectionLabel` may not be set. If neither is set, the label will
 *  default to "Section", localized. If the section field is unset, this label
 *  will not be used.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_EventTicketClass_SectionLabel_Section Legacy
 *        alias for `SECTION`. Deprecated. (Value: "section")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_SectionLabel_SectionLabelUnspecified
 *        Value "SECTION_LABEL_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_EventTicketClass_SectionLabel_Theater Legacy
 *        alias for `THEATER`. Deprecated. (Value: "theater")
 */
@property(nonatomic, copy, nullable) NSString *sectionLabel;

/**
 *  Optional information about the security animation. If this is set a security
 *  animation will be rendered on pass details.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_SecurityAnimation *securityAnimation;

/**
 *  Text module data. If text module data is also defined on the class, both
 *  will be displayed. The maximum number of these fields displayed is 10 from
 *  the object and 10 from the class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TextModuleData *> *textModulesData;

/** Event venue details. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_EventVenue *venue;

/**
 *  Deprecated
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version GTLR_DEPRECATED;

/**
 *  View Unlock Requirement options for the event ticket.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_EventTicketClass_ViewUnlockRequirement_UnlockNotRequired
 *        Default behavior for all the existing Passes if ViewUnlockRequirement
 *        is not set. (Value: "UNLOCK_NOT_REQUIRED")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_ViewUnlockRequirement_UnlockRequiredToView
 *        Requires the user to unlock their device each time the pass is viewed.
 *        If the user removes their device lock after saving the pass, then they
 *        will be prompted to create a device lock before the pass can be
 *        viewed. (Value: "UNLOCK_REQUIRED_TO_VIEW")
 *    @arg @c kGTLRWalletobjects_EventTicketClass_ViewUnlockRequirement_ViewUnlockRequirementUnspecified
 *        Default value, same as UNLOCK_NOT_REQUIRED. (Value:
 *        "VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *viewUnlockRequirement;

/**
 *  The wide logo of the ticket. When provided, this will be used in place of
 *  the logo in the top left of the card view.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *wideLogo;

/** Deprecated. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *wordMark GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_EventTicketClassAddMessageResponse
 */
@interface GTLRWalletobjects_EventTicketClassAddMessageResponse : GTLRObject

/** The updated EventTicketClass resource. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_EventTicketClass *resource;

@end


/**
 *  GTLRWalletobjects_EventTicketClassListResponse
 */
@interface GTLRWalletobjects_EventTicketClassListResponse : GTLRObject

/** Pagination of the response. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Pagination *pagination;

/** Resources corresponding to the list request. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_EventTicketClass *> *resources;

@end


/**
 *  GTLRWalletobjects_EventTicketObject
 */
@interface GTLRWalletobjects_EventTicketObject : GTLRObject

/**
 *  Optional app or website link that will be displayed as a button on the front
 *  of the pass. If AppLinkData is provided for the corresponding class only
 *  object AppLinkData will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkData *appLinkData;

/** The barcode type and value. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Barcode *barcode;

/**
 *  Required. The class associated with this object. The class must be of the
 *  same type as this object, must already exist, and must be approved. Class
 *  IDs should follow the format issuer ID.identifier where the former is issued
 *  by Google and latter is chosen by you.
 */
@property(nonatomic, copy, nullable) NSString *classId;

/**
 *  A copy of the inherited fields of the parent class. These fields are
 *  retrieved during a GET.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_EventTicketClass *classReference;

/**
 *  Indicates if notifications should explicitly be suppressed. If this field is
 *  set to true, regardless of the `messages` field, expiration notifications to
 *  the user will be suppressed. By default, this field is set to false.
 *  Currently, this can only be set for offers.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableExpirationNotification;

/**
 *  The face value of the ticket, matching what would be printed on a physical
 *  version of the ticket.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Money *faceValue;

/** Information that controls how passes are grouped together. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_GroupingInfo *groupingInfo;

/**
 *  Whether this object is currently linked to a single device. This field is
 *  set by the platform when a user saves the object, linking it to their
 *  device. Intended for use by select partners. Contact support for additional
 *  information.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasLinkedDevice;

/**
 *  Indicates if the object has users. This field is set by the platform.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasUsers;

/**
 *  Optional banner image displayed on the front of the card. If none is
 *  present, hero image of the class, if present, will be displayed. If hero
 *  image of the class is also not present, nothing will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *heroImage;

/**
 *  The background color for the card. If not set the dominant color of the hero
 *  image is used, and if no hero image is set, the dominant color of the logo
 *  is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as
 *  `#ffcc00`. You can also use the shorthand version of the RGB triplet which
 *  is #rgb, such as `#fc0`.
 */
@property(nonatomic, copy, nullable) NSString *hexBackgroundColor;

/**
 *  Required. The unique identifier for an object. This ID must be unique across
 *  all objects from an issuer. This value should follow the format issuer
 *  ID.identifier where the former is issued by Google and latter is chosen by
 *  you. The unique identifier should only include alphanumeric characters, '.',
 *  '_', or '-'.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Image module data. The maximum number of these fields displayed is 1 from
 *  object level and 1 for class object level.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_ImageModuleData *> *imageModulesData;

/** Deprecated. Use textModulesData instead. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_InfoModuleData *infoModuleData;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#eventTicketObject"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  linked_object_ids are a list of other objects such as event ticket, loyalty,
 *  offer, generic, giftcard, transit and boarding pass that should be
 *  automatically attached to this event ticket object. If a user had saved this
 *  event ticket, then these linked_object_ids would be automatically pushed to
 *  the user's wallet (unless they turned off the setting to receive such linked
 *  passes). Make sure that objects present in linked_object_ids are already
 *  inserted - if not, calls would fail. Once linked, the linked objects cannot
 *  be unlinked. You cannot link objects belonging to another issuer. There is a
 *  limit to the number of objects that can be linked to a single object. After
 *  the limit is reached, new linked objects in the call will be ignored
 *  silently. Object IDs should follow the format issuer ID. identifier where
 *  the former is issued by Google and the latter is chosen by you.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *linkedObjectIds;

/**
 *  A list of offer objects linked to this event ticket. The offer objects must
 *  already exist. Offer object IDs should follow the format issuer ID.
 *  identifier where the former is issued by Google and latter is chosen by you.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *linkedOfferIds;

/**
 *  Links module data. If links module data is also defined on the class, both
 *  will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LinksModuleData *linksModuleData;

/**
 *  Note: This field is currently not supported to trigger geo notifications.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LatLongPoint *> *locations GTLR_DEPRECATED;

/**
 *  An array of messages displayed in the app. All users of this object will
 *  receive its associated messages. The maximum number of these fields is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Message *> *messages;

/**
 *  Pass constraints for the object. Includes limiting NFC and screenshot
 *  behaviors.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_PassConstraints *passConstraints;

/**
 *  Reservation details for this ticket. This is expected to be shared amongst
 *  all tickets that were purchased in the same order.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_EventReservationInfo *reservationInfo;

/** The rotating barcode type and value. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_RotatingBarcode *rotatingBarcode;

/**
 *  Restrictions on the object that needs to be verified before the user tries
 *  to save the pass. Note that this restrictions will only be applied during
 *  save time. If the restrictions changed after a user saves the pass, the new
 *  restrictions will not be applied to an already saved pass.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_SaveRestrictions *saveRestrictions;

/** Seating details for this ticket. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_EventSeat *seatInfo;

/**
 *  The value that will be transmitted to a Smart Tap certified terminal over
 *  NFC for this object. The class level fields `enableSmartTap` and
 *  `redemptionIssuers` must also be set up correctly in order for the pass to
 *  support Smart Tap. Only ASCII characters are supported.
 */
@property(nonatomic, copy, nullable) NSString *smartTapRedemptionValue;

/**
 *  Required. The state of the object. This field is used to determine how an
 *  object is displayed in the app. For example, an `inactive` object is moved
 *  to the "Expired passes" section.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_EventTicketObject_State_Active Legacy alias for
 *        `ACTIVE`. Deprecated. (Value: "active")
 *    @arg @c kGTLRWalletobjects_EventTicketObject_State_Completed Legacy alias
 *        for `COMPLETED`. Deprecated. (Value: "completed")
 *    @arg @c kGTLRWalletobjects_EventTicketObject_State_Expired Legacy alias
 *        for `EXPIRED`. Deprecated. (Value: "expired")
 *    @arg @c kGTLRWalletobjects_EventTicketObject_State_Inactive Legacy alias
 *        for `INACTIVE`. Deprecated. (Value: "inactive")
 *    @arg @c kGTLRWalletobjects_EventTicketObject_State_StateUnspecified Value
 *        "STATE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Text module data. If text module data is also defined on the class, both
 *  will be displayed. The maximum number of these fields displayed is 10 from
 *  the object and 10 from the class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TextModuleData *> *textModulesData;

/**
 *  Name of the ticket holder, if the ticket is assigned to a person. E.g. "John
 *  Doe" or "Jane Doe".
 */
@property(nonatomic, copy, nullable) NSString *ticketHolderName;

/**
 *  The number of the ticket. This can be a unique identifier across all tickets
 *  in an issuer's system, all tickets for the event (e.g. XYZ1234512345), or
 *  all tickets in the order (1, 2, 3, etc.).
 */
@property(nonatomic, copy, nullable) NSString *ticketNumber;

/**
 *  The type of the ticket, such as "Adult" or "Child", or "VIP" or "Standard".
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *ticketType;

/**
 *  The time period this object will be `active` and object can be used. An
 *  object's state will be changed to `expired` when this time period has
 *  passed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TimeInterval *validTimeInterval;

/**
 *  Deprecated
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_EventTicketObjectAddMessageResponse
 */
@interface GTLRWalletobjects_EventTicketObjectAddMessageResponse : GTLRObject

/** The updated EventTicketObject resource. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_EventTicketObject *resource;

@end


/**
 *  GTLRWalletobjects_EventTicketObjectListResponse
 */
@interface GTLRWalletobjects_EventTicketObjectListResponse : GTLRObject

/** Pagination of the response. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Pagination *pagination;

/** Resources corresponding to the list request. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_EventTicketObject *> *resources;

@end


/**
 *  GTLRWalletobjects_EventVenue
 */
@interface GTLRWalletobjects_EventVenue : GTLRObject

/**
 *  The address of the venue, such as "24 Willie Mays Plaza\\nSan Francisco, CA
 *  94107". Address lines are separated by line feed (`\\n`) characters. This is
 *  required.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *address;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#eventVenue"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/** The name of the venue, such as "AT&T Park". This is required. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *name;

@end


/**
 *  Indicates that the issuer would like Google Wallet to send expiry
 *  notifications 2 days prior to the card expiration.
 */
@interface GTLRWalletobjects_ExpiryNotification : GTLRObject

/**
 *  Indicates if the object needs to have expiry notification enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableNotification;

@end


/**
 *  Reference definition to use with field overrides.
 */
@interface GTLRWalletobjects_FieldReference : GTLRObject

/**
 *  Only valid if the `fieldPath` references a date field. Chooses how the date
 *  field will be formatted and displayed in the UI.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_FieldReference_DateFormat_DateFormatUnspecified
 *        Default option when no format is specified, when selected, no
 *        formatting will be applied. (Value: "DATE_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRWalletobjects_FieldReference_DateFormat_DateOnly Legacy alias
 *        for `DATE_ONLY`. Deprecated. (Value: "dateOnly")
 *    @arg @c kGTLRWalletobjects_FieldReference_DateFormat_DateTime Legacy alias
 *        for `DATE_TIME`. Deprecated. (Value: "dateTime")
 *    @arg @c kGTLRWalletobjects_FieldReference_DateFormat_DateTimeYear Legacy
 *        alias for `DATE_TIME_YEAR`. Deprecated. (Value: "dateTimeYear")
 *    @arg @c kGTLRWalletobjects_FieldReference_DateFormat_DateYear Legacy alias
 *        for `DATE_YEAR`. Deprecated. (Value: "dateYear")
 *    @arg @c kGTLRWalletobjects_FieldReference_DateFormat_TimeOnly Legacy alias
 *        for `TIME_ONLY`. Deprecated. (Value: "timeOnly")
 *    @arg @c kGTLRWalletobjects_FieldReference_DateFormat_YearMonth Renders
 *        `2018-12-14T13:00:00` as `2018-12`. (Value: "YEAR_MONTH")
 *    @arg @c kGTLRWalletobjects_FieldReference_DateFormat_YearMonthDay Renders
 *        `2018-12-14T13:00:00` as `2018-12-14`. (Value: "YEAR_MONTH_DAY")
 */
@property(nonatomic, copy, nullable) NSString *dateFormat;

/**
 *  Path to the field being referenced, prefixed with "object" or "class" and
 *  separated with dots. For example, it may be the string
 *  "object.purchaseDetails.purchasePrice".
 */
@property(nonatomic, copy, nullable) NSString *fieldPath;

@end


/**
 *  Custom field selector to use with field overrides.
 */
@interface GTLRWalletobjects_FieldSelector : GTLRObject

/**
 *  If more than one reference is supplied, then the first one that references a
 *  non-empty field will be displayed.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_FieldReference *> *fields;

@end


/**
 *  GTLRWalletobjects_FirstRowOption
 */
@interface GTLRWalletobjects_FirstRowOption : GTLRObject

/** A reference to the field to be displayed in the first row. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_FieldSelector *fieldOption;

/**
 *  transitOption
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_FirstRowOption_TransitOption_OriginAndDestinationCodes
 *        Legacy alias for `ORIGIN_AND_DESTINATION_CODES`. Deprecated. (Value:
 *        "originAndDestinationCodes")
 *    @arg @c kGTLRWalletobjects_FirstRowOption_TransitOption_OriginAndDestinationNames
 *        Legacy alias for `ORIGIN_AND_DESTINATION_NAMES`. Deprecated. (Value:
 *        "originAndDestinationNames")
 *    @arg @c kGTLRWalletobjects_FirstRowOption_TransitOption_OriginName Legacy
 *        alias for `ORIGIN_NAME`. Deprecated. (Value: "originName")
 *    @arg @c kGTLRWalletobjects_FirstRowOption_TransitOption_TransitOptionUnspecified
 *        Value "TRANSIT_OPTION_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *transitOption;

@end


/**
 *  GTLRWalletobjects_FlightCarrier
 */
@interface GTLRWalletobjects_FlightCarrier : GTLRObject

/**
 *  A logo for the airline alliance, displayed below the QR code that the
 *  passenger scans to board.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *airlineAllianceLogo;

/**
 *  A logo for the airline described by carrierIataCode and
 *  localizedAirlineName. This logo will be rendered at the top of the detailed
 *  card view.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *airlineLogo;

/**
 *  A localized name of the airline specified by carrierIataCode. If unset,
 *  `issuer_name` or `localized_issuer_name` from `FlightClass` will be used for
 *  display purposes. eg: "Swiss Air" for "LX"
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *airlineName;

/**
 *  Two character IATA airline code of the marketing carrier (as opposed to
 *  operating carrier). Exactly one of this or `carrierIcaoCode` needs to be
 *  provided for `carrier` and `operatingCarrier`. eg: "LX" for Swiss Air
 */
@property(nonatomic, copy, nullable) NSString *carrierIataCode;

/**
 *  Three character ICAO airline code of the marketing carrier (as opposed to
 *  operating carrier). Exactly one of this or `carrierIataCode` needs to be
 *  provided for `carrier` and `operatingCarrier`. eg: "EZY" for Easy Jet
 */
@property(nonatomic, copy, nullable) NSString *carrierIcaoCode;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#flightCarrier"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  The wide logo of the airline. When provided, this will be used in place of
 *  the airline logo in the top left of the card view.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *wideAirlineLogo;

@end


/**
 *  GTLRWalletobjects_FlightClass
 */
@interface GTLRWalletobjects_FlightClass : GTLRObject

/**
 *  Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowMultipleUsersPerObject GTLR_DEPRECATED;

/**
 *  Optional app or website link that will be displayed as a button on the front
 *  of the pass. If AppLinkData is provided for the corresponding object that
 *  will be used instead.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkData *appLinkData;

/**
 *  Policies for boarding and seating. These will inform which labels will be
 *  shown to users.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_BoardingAndSeatingPolicy *boardingAndSeatingPolicy;

/**
 *  Callback options to be used to call the issuer back for every save/delete of
 *  an object for this class by the end-user. All objects of this class are
 *  eligible for the callback.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CallbackOptions *callbackOptions;

/**
 *  Template information about how the class should be displayed. If unset,
 *  Google will fallback to a default set of fields to display.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ClassTemplateInfo *classTemplateInfo;

/**
 *  Country code used to display the card's country (when the user is not in
 *  that country), as well as to display localized content when content is not
 *  available in the user's locale.
 */
@property(nonatomic, copy, nullable) NSString *countryCode;

/** Required. Destination airport. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AirportInfo *destination;

/**
 *  Identifies whether this class supports Smart Tap. The `redemptionIssuers`
 *  and object level `smartTapRedemptionLevel` fields must also be set up
 *  correctly in order for a pass to support Smart Tap.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableSmartTap;

/** Required. Information about the flight carrier and number. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_FlightHeader *flightHeader;

/**
 *  Status of this flight. If unset, Google will compute status based on data
 *  from other sources, such as FlightStats, etc. Note: Google-computed status
 *  will not be returned in API responses.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_FlightClass_FlightStatus_Active Legacy alias
 *        for `ACTIVE`. Deprecated. (Value: "active")
 *    @arg @c kGTLRWalletobjects_FlightClass_FlightStatus_Cancelled Legacy alias
 *        for `CANCELLED`. Deprecated. (Value: "cancelled")
 *    @arg @c kGTLRWalletobjects_FlightClass_FlightStatus_Diverted Legacy alias
 *        for `DIVERTED`. Deprecated. (Value: "diverted")
 *    @arg @c kGTLRWalletobjects_FlightClass_FlightStatus_FlightStatusUnspecified
 *        Value "FLIGHT_STATUS_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_FlightClass_FlightStatus_Landed Legacy alias
 *        for `LANDED`. Deprecated. (Value: "landed")
 *    @arg @c kGTLRWalletobjects_FlightClass_FlightStatus_Redirected Legacy
 *        alias for `REDIRECTED`. Deprecated. (Value: "redirected")
 *    @arg @c kGTLRWalletobjects_FlightClass_FlightStatus_Scheduled Legacy alias
 *        for `SCHEDULED`. Deprecated. (Value: "scheduled")
 */
@property(nonatomic, copy, nullable) NSString *flightStatus;

/**
 *  Optional banner image displayed on the front of the card. If none is
 *  present, nothing will be displayed. The image will display at 100% width.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *heroImage;

/**
 *  The background color for the card. If not set the dominant color of the hero
 *  image is used, and if no hero image is set, the dominant color of the logo
 *  is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as
 *  `#ffcc00`. You can also use the shorthand version of the RGB triplet which
 *  is #rgb, such as `#fc0`.
 */
@property(nonatomic, copy, nullable) NSString *hexBackgroundColor;

/**
 *  The URI of your application's home page. Populating the URI in this field
 *  results in the exact same behavior as populating an URI in linksModuleData
 *  (when an object is rendered, a link to the homepage is shown in what would
 *  usually be thought of as the linksModuleData section of the object).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Uri *homepageUri;

/**
 *  Required. The unique identifier for a class. This ID must be unique across
 *  all classes from an issuer. This value should follow the format issuer ID.
 *  identifier where the former is issued by Google and latter is chosen by you.
 *  Your unique identifier should only include alphanumeric characters, '.',
 *  '_', or '-'.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Image module data. The maximum number of these fields displayed is 1 from
 *  object level and 1 for class object level.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_ImageModuleData *> *imageModulesData;

/** Deprecated. Use textModulesData instead. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_InfoModuleData *infoModuleData GTLR_DEPRECATED;

/**
 *  Required. The issuer name. Recommended maximum length is 20 characters to
 *  ensure full string is displayed on smaller screens.
 */
@property(nonatomic, copy, nullable) NSString *issuerName;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#flightClass"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  If this field is present, boarding passes served to a user's device will
 *  always be in this language. Represents the BCP 47 language tag. Example
 *  values are "en-US", "en-GB", "de", or "de-AT".
 */
@property(nonatomic, copy, nullable) NSString *languageOverride;

/**
 *  Links module data. If links module data is also defined on the object, both
 *  will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LinksModuleData *linksModuleData;

/**
 *  The boarding time as it would be printed on the boarding pass. This is an
 *  ISO 8601 extended format date/time without an offset. Time may be specified
 *  up to millisecond precision. eg: `2027-03-05T06:30:00` This should be the
 *  local date/time at the airport (not a UTC time). Google will reject the
 *  request if UTC offset is provided. Time zones will be calculated by Google
 *  based on departure airport.
 */
@property(nonatomic, copy, nullable) NSString *localBoardingDateTime;

/**
 *  The estimated time the aircraft plans to reach the destination gate (not the
 *  runway) or the actual time it reached the gate. This field should be set if
 *  at least one of the below is true: - It differs from the scheduled time.
 *  Google will use it to calculate the delay. - The aircraft already arrived at
 *  the gate. Google will use it to inform the user that the flight has arrived
 *  at the gate. This is an ISO 8601 extended format date/time without an
 *  offset. Time may be specified up to millisecond precision. eg:
 *  `2027-03-05T06:30:00` This should be the local date/time at the airport (not
 *  a UTC time). Google will reject the request if UTC offset is provided. Time
 *  zones will be calculated by Google based on arrival airport.
 */
@property(nonatomic, copy, nullable) NSString *localEstimatedOrActualArrivalDateTime;

/**
 *  The estimated time the aircraft plans to pull from the gate or the actual
 *  time the aircraft already pulled from the gate. Note: This is not the runway
 *  time. This field should be set if at least one of the below is true: - It
 *  differs from the scheduled time. Google will use it to calculate the delay.
 *  - The aircraft already pulled from the gate. Google will use it to inform
 *  the user when the flight actually departed. This is an ISO 8601 extended
 *  format date/time without an offset. Time may be specified up to millisecond
 *  precision. eg: `2027-03-05T06:30:00` This should be the local date/time at
 *  the airport (not a UTC time). Google will reject the request if UTC offset
 *  is provided. Time zones will be calculated by Google based on departure
 *  airport.
 */
@property(nonatomic, copy, nullable) NSString *localEstimatedOrActualDepartureDateTime;

/**
 *  The gate closing time as it would be printed on the boarding pass. Do not
 *  set this field if you do not want to print it in the boarding pass. This is
 *  an ISO 8601 extended format date/time without an offset. Time may be
 *  specified up to millisecond precision. eg: `2027-03-05T06:30:00` This should
 *  be the local date/time at the airport (not a UTC time). Google will reject
 *  the request if UTC offset is provided. Time zones will be calculated by
 *  Google based on departure airport.
 */
@property(nonatomic, copy, nullable) NSString *localGateClosingDateTime;

/**
 *  Translated strings for the issuer_name. Recommended maximum length is 20
 *  characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedIssuerName;

/**
 *  The scheduled time the aircraft plans to reach the destination gate (not the
 *  runway). Note: This field should not change too close to the flight time.
 *  For updates to departure times (delays, etc), please set
 *  `localEstimatedOrActualArrivalDateTime`. This is an ISO 8601 extended format
 *  date/time without an offset. Time may be specified up to millisecond
 *  precision. eg: `2027-03-05T06:30:00` This should be the local date/time at
 *  the airport (not a UTC time). Google will reject the request if UTC offset
 *  is provided. Time zones will be calculated by Google based on arrival
 *  airport.
 */
@property(nonatomic, copy, nullable) NSString *localScheduledArrivalDateTime;

/**
 *  Required. The scheduled date and time when the aircraft is expected to
 *  depart the gate (not the runway) Note: This field should not change too
 *  close to the departure time. For updates to departure times (delays, etc),
 *  please set `localEstimatedOrActualDepartureDateTime`. This is an ISO 8601
 *  extended format date/time without an offset. Time may be specified up to
 *  millisecond precision. eg: `2027-03-05T06:30:00` This should be the local
 *  date/time at the airport (not a UTC time). Google will reject the request if
 *  UTC offset is provided. Time zones will be calculated by Google based on
 *  departure airport.
 */
@property(nonatomic, copy, nullable) NSString *localScheduledDepartureDateTime;

/**
 *  Note: This field is currently not supported to trigger geo notifications.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LatLongPoint *> *locations GTLR_DEPRECATED;

/**
 *  An array of messages displayed in the app. All users of this object will
 *  receive its associated messages. The maximum number of these fields is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Message *> *messages;

/**
 *  Identifies whether multiple users and devices will save the same object
 *  referencing this class.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_FlightClass_MultipleDevicesAndHoldersAllowedStatus_MultipleHolders
 *        Legacy alias for `MULTIPLE_HOLDERS`. Deprecated. (Value:
 *        "multipleHolders")
 *    @arg @c kGTLRWalletobjects_FlightClass_MultipleDevicesAndHoldersAllowedStatus_OneUserAllDevices
 *        Legacy alias for `ONE_USER_ALL_DEVICES`. Deprecated. (Value:
 *        "oneUserAllDevices")
 *    @arg @c kGTLRWalletobjects_FlightClass_MultipleDevicesAndHoldersAllowedStatus_OneUserOneDevice
 *        Legacy alias for `ONE_USER_ONE_DEVICE`. Deprecated. (Value:
 *        "oneUserOneDevice")
 *    @arg @c kGTLRWalletobjects_FlightClass_MultipleDevicesAndHoldersAllowedStatus_StatusUnspecified
 *        Unspecified preference. (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *multipleDevicesAndHoldersAllowedStatus;

/** Required. Origin airport. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AirportInfo *origin;

/**
 *  Identifies which redemption issuers can redeem the pass over Smart Tap.
 *  Redemption issuers are identified by their issuer ID. Redemption issuers
 *  must have at least one Smart Tap key configured. The `enableSmartTap` and
 *  object level `smartTapRedemptionLevel` fields must also be set up correctly
 *  in order for a pass to support Smart Tap.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *redemptionIssuers;

/**
 *  The review comments set by the platform when a class is marked `approved` or
 *  `rejected`.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Review *review;

/**
 *  Required. The status of the class. This field can be set to `draft` or
 *  `underReview` using the insert, patch, or update API calls. Once the review
 *  state is changed from `draft` it may not be changed back to `draft`. You
 *  should keep this field to `draft` when the class is under development. A
 *  `draft` class cannot be used to create any object. You should set this field
 *  to `underReview` when you believe the class is ready for use. The platform
 *  will automatically set this field to `approved` and it can be immediately
 *  used to create or migrate objects. When updating an already `approved` class
 *  you should keep setting this field to `underReview`.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_FlightClass_ReviewStatus_Approved Legacy alias
 *        for `APPROVED`. Deprecated. (Value: "approved")
 *    @arg @c kGTLRWalletobjects_FlightClass_ReviewStatus_Draft Legacy alias for
 *        `DRAFT`. Deprecated. (Value: "draft")
 *    @arg @c kGTLRWalletobjects_FlightClass_ReviewStatus_Rejected Legacy alias
 *        for `REJECTED`. Deprecated. (Value: "rejected")
 *    @arg @c kGTLRWalletobjects_FlightClass_ReviewStatus_ReviewStatusUnspecified
 *        Value "REVIEW_STATUS_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_FlightClass_ReviewStatus_UnderReview Legacy
 *        alias for `UNDER_REVIEW`. Deprecated. (Value: "underReview")
 */
@property(nonatomic, copy, nullable) NSString *reviewStatus;

/**
 *  Optional information about the security animation. If this is set a security
 *  animation will be rendered on pass details.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_SecurityAnimation *securityAnimation;

/**
 *  Text module data. If text module data is also defined on the class, both
 *  will be displayed. The maximum number of these fields displayed is 10 from
 *  the object and 10 from the class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TextModuleData *> *textModulesData;

/**
 *  Deprecated
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version GTLR_DEPRECATED;

/**
 *  View Unlock Requirement options for the boarding pass.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_FlightClass_ViewUnlockRequirement_UnlockNotRequired
 *        Default behavior for all the existing Passes if ViewUnlockRequirement
 *        is not set. (Value: "UNLOCK_NOT_REQUIRED")
 *    @arg @c kGTLRWalletobjects_FlightClass_ViewUnlockRequirement_UnlockRequiredToView
 *        Requires the user to unlock their device each time the pass is viewed.
 *        If the user removes their device lock after saving the pass, then they
 *        will be prompted to create a device lock before the pass can be
 *        viewed. (Value: "UNLOCK_REQUIRED_TO_VIEW")
 *    @arg @c kGTLRWalletobjects_FlightClass_ViewUnlockRequirement_ViewUnlockRequirementUnspecified
 *        Default value, same as UNLOCK_NOT_REQUIRED. (Value:
 *        "VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *viewUnlockRequirement;

/** Deprecated. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *wordMark GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_FlightClassAddMessageResponse
 */
@interface GTLRWalletobjects_FlightClassAddMessageResponse : GTLRObject

/** The updated FlightClass resource. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_FlightClass *resource;

@end


/**
 *  GTLRWalletobjects_FlightClassListResponse
 */
@interface GTLRWalletobjects_FlightClassListResponse : GTLRObject

/** Pagination of the response. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Pagination *pagination;

/** Resources corresponding to the list request. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_FlightClass *> *resources;

@end


/**
 *  GTLRWalletobjects_FlightHeader
 */
@interface GTLRWalletobjects_FlightHeader : GTLRObject

/**
 *  Information about airline carrier. This is a required property of
 *  `flightHeader`.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_FlightCarrier *carrier;

/**
 *  The flight number without IATA carrier code. This field should contain only
 *  digits. This is a required property of `flightHeader`. eg: "123"
 */
@property(nonatomic, copy, nullable) NSString *flightNumber;

/**
 *  Override value to use for flight number. The default value used for display
 *  purposes is carrier + flight_number. If a different value needs to be shown
 *  to passengers, use this field to override the default behavior. eg: "XX1234
 *  / YY576"
 */
@property(nonatomic, copy, nullable) NSString *flightNumberDisplayOverride;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#flightHeader"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/** Information about operating airline carrier. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_FlightCarrier *operatingCarrier;

/**
 *  The flight number used by the operating carrier without IATA carrier code.
 *  This field should contain only digits. eg: "234"
 */
@property(nonatomic, copy, nullable) NSString *operatingFlightNumber;

@end


/**
 *  GTLRWalletobjects_FlightObject
 */
@interface GTLRWalletobjects_FlightObject : GTLRObject

/**
 *  Optional app or website link that will be displayed as a button on the front
 *  of the pass. If AppLinkData is provided for the corresponding class only
 *  object AppLinkData will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkData *appLinkData;

/** The barcode type and value. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Barcode *barcode;

/** Passenger specific information about boarding and seating. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_BoardingAndSeatingInfo *boardingAndSeatingInfo;

/**
 *  Required. The class associated with this object. The class must be of the
 *  same type as this object, must already exist, and must be approved. Class
 *  IDs should follow the format issuer ID.identifier where the former is issued
 *  by Google and latter is chosen by you.
 */
@property(nonatomic, copy, nullable) NSString *classId;

/**
 *  A copy of the inherited fields of the parent class. These fields are
 *  retrieved during a GET.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_FlightClass *classReference;

/**
 *  Indicates if notifications should explicitly be suppressed. If this field is
 *  set to true, regardless of the `messages` field, expiration notifications to
 *  the user will be suppressed. By default, this field is set to false.
 *  Currently, this can only be set for Flights.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableExpirationNotification;

/** Information that controls how passes are grouped together. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_GroupingInfo *groupingInfo;

/**
 *  Whether this object is currently linked to a single device. This field is
 *  set by the platform when a user saves the object, linking it to their
 *  device. Intended for use by select partners. Contact support for additional
 *  information.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasLinkedDevice;

/**
 *  Indicates if the object has users. This field is set by the platform.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasUsers;

/**
 *  Optional banner image displayed on the front of the card. If none is
 *  present, hero image of the class, if present, will be displayed. If hero
 *  image of the class is also not present, nothing will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *heroImage;

/**
 *  The background color for the card. If not set the dominant color of the hero
 *  image is used, and if no hero image is set, the dominant color of the logo
 *  is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as
 *  `#ffcc00`. You can also use the shorthand version of the RGB triplet which
 *  is #rgb, such as `#fc0`.
 */
@property(nonatomic, copy, nullable) NSString *hexBackgroundColor;

/**
 *  Required. The unique identifier for an object. This ID must be unique across
 *  all objects from an issuer. This value should follow the format issuer
 *  ID.identifier where the former is issued by Google and latter is chosen by
 *  you. The unique identifier should only include alphanumeric characters, '.',
 *  '_', or '-'.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Image module data. The maximum number of these fields displayed is 1 from
 *  object level and 1 for class object level.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_ImageModuleData *> *imageModulesData;

/** Deprecated. Use textModulesData instead. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_InfoModuleData *infoModuleData;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#flightObject"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  linked_object_ids are a list of other objects such as event ticket, loyalty,
 *  offer, generic, giftcard, transit and boarding pass that should be
 *  automatically attached to this flight object. If a user had saved this
 *  boarding pass, then these linked_object_ids would be automatically pushed to
 *  the user's wallet (unless they turned off the setting to receive such linked
 *  passes). Make sure that objects present in linked_object_ids are already
 *  inserted - if not, calls would fail. Once linked, the linked objects cannot
 *  be unlinked. You cannot link objects belonging to another issuer. There is a
 *  limit to the number of objects that can be linked to a single object. After
 *  the limit is reached, new linked objects in the call will be ignored
 *  silently. Object IDs should follow the format issuer ID. identifier where
 *  the former is issued by Google and the latter is chosen by you.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *linkedObjectIds;

/**
 *  Links module data. If links module data is also defined on the class, both
 *  will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LinksModuleData *linksModuleData;

/**
 *  Note: This field is currently not supported to trigger geo notifications.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LatLongPoint *> *locations GTLR_DEPRECATED;

/**
 *  An array of messages displayed in the app. All users of this object will
 *  receive its associated messages. The maximum number of these fields is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Message *> *messages;

/**
 *  Pass constraints for the object. Includes limiting NFC and screenshot
 *  behaviors.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_PassConstraints *passConstraints;

/**
 *  Required. Passenger name as it would appear on the boarding pass. eg: "Dave
 *  M Gahan" or "Gahan/Dave" or "GAHAN/DAVEM"
 */
@property(nonatomic, copy, nullable) NSString *passengerName;

/** Required. Information about flight reservation. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ReservationInfo *reservationInfo;

/** The rotating barcode type and value. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_RotatingBarcode *rotatingBarcode;

/**
 *  Restrictions on the object that needs to be verified before the user tries
 *  to save the pass. Note that this restrictions will only be applied during
 *  save time. If the restrictions changed after a user saves the pass, the new
 *  restrictions will not be applied to an already saved pass.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_SaveRestrictions *saveRestrictions;

/** An image for the security program that applies to the passenger. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *securityProgramLogo;

/**
 *  The value that will be transmitted to a Smart Tap certified terminal over
 *  NFC for this object. The class level fields `enableSmartTap` and
 *  `redemptionIssuers` must also be set up correctly in order for the pass to
 *  support Smart Tap. Only ASCII characters are supported.
 */
@property(nonatomic, copy, nullable) NSString *smartTapRedemptionValue;

/**
 *  Required. The state of the object. This field is used to determine how an
 *  object is displayed in the app. For example, an `inactive` object is moved
 *  to the "Expired passes" section.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_FlightObject_State_Active Legacy alias for
 *        `ACTIVE`. Deprecated. (Value: "active")
 *    @arg @c kGTLRWalletobjects_FlightObject_State_Completed Legacy alias for
 *        `COMPLETED`. Deprecated. (Value: "completed")
 *    @arg @c kGTLRWalletobjects_FlightObject_State_Expired Legacy alias for
 *        `EXPIRED`. Deprecated. (Value: "expired")
 *    @arg @c kGTLRWalletobjects_FlightObject_State_Inactive Legacy alias for
 *        `INACTIVE`. Deprecated. (Value: "inactive")
 *    @arg @c kGTLRWalletobjects_FlightObject_State_StateUnspecified Value
 *        "STATE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Text module data. If text module data is also defined on the class, both
 *  will be displayed. The maximum number of these fields displayed is 10 from
 *  the object and 10 from the class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TextModuleData *> *textModulesData;

/**
 *  The time period this object will be `active` and object can be used. An
 *  object's state will be changed to `expired` when this time period has
 *  passed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TimeInterval *validTimeInterval;

/**
 *  Deprecated
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_FlightObjectAddMessageResponse
 */
@interface GTLRWalletobjects_FlightObjectAddMessageResponse : GTLRObject

/** The updated FlightObject resource. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_FlightObject *resource;

@end


/**
 *  GTLRWalletobjects_FlightObjectListResponse
 */
@interface GTLRWalletobjects_FlightObjectListResponse : GTLRObject

/** Pagination of the response. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Pagination *pagination;

/** Resources corresponding to the list request. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_FlightObject *> *resources;

@end


/**
 *  GTLRWalletobjects_FrequentFlyerInfo
 */
@interface GTLRWalletobjects_FrequentFlyerInfo : GTLRObject

/**
 *  Frequent flyer number. Required for each nested object of kind
 *  `walletobjects#frequentFlyerInfo`.
 */
@property(nonatomic, copy, nullable) NSString *frequentFlyerNumber;

/** Frequent flyer program name. eg: "Lufthansa Miles & More" */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *frequentFlyerProgramName;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#frequentFlyerInfo"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

@end


/**
 *  Generic Class
 */
@interface GTLRWalletobjects_GenericClass : GTLRObject

/**
 *  Optional app or website link that will be displayed as a button on the front
 *  of the pass. If AppLinkData is provided for the corresponding object that
 *  will be used instead.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkData *appLinkData;

/**
 *  Callback options to be used to call the issuer back for every save/delete of
 *  an object for this class by the end-user. All objects of this class are
 *  eligible for the callback.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CallbackOptions *callbackOptions;

/**
 *  Template information about how the class should be displayed. If unset,
 *  Google will fallback to a default set of fields to display.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ClassTemplateInfo *classTemplateInfo;

/**
 *  Available only to Smart Tap enabled partners. Contact support for additional
 *  guidance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableSmartTap;

/**
 *  Required. The unique identifier for the class. This ID must be unique across
 *  all from an issuer. This value needs to follow the format
 *  `issuerID.identifier` where `issuerID` is issued by Google and `identifier`
 *  is chosen by you. The unique identifier can only include alphanumeric
 *  characters, `.`, `_`, or `-`.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Image module data. If `imageModulesData` is also defined on the object, both
 *  will be displayed. Only one of the image from class and one from object
 *  level will be rendered when both set.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_ImageModuleData *> *imageModulesData;

/**
 *  Links module data. If `linksModuleData` is also defined on the object, both
 *  will be displayed. The maximum number of these fields displayed is 10 from
 *  class and 10 from object.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LinksModuleData *linksModuleData;

/**
 *  An array of messages displayed in the app. All users of this object will
 *  receive its associated messages. The maximum number of these fields is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Message *> *messages;

/**
 *  Identifies whether multiple users and devices will save the same object
 *  referencing this class.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_GenericClass_MultipleDevicesAndHoldersAllowedStatus_MultipleHolders
 *        Legacy alias for `MULTIPLE_HOLDERS`. Deprecated. (Value:
 *        "multipleHolders")
 *    @arg @c kGTLRWalletobjects_GenericClass_MultipleDevicesAndHoldersAllowedStatus_OneUserAllDevices
 *        Legacy alias for `ONE_USER_ALL_DEVICES`. Deprecated. (Value:
 *        "oneUserAllDevices")
 *    @arg @c kGTLRWalletobjects_GenericClass_MultipleDevicesAndHoldersAllowedStatus_OneUserOneDevice
 *        Legacy alias for `ONE_USER_ONE_DEVICE`. Deprecated. (Value:
 *        "oneUserOneDevice")
 *    @arg @c kGTLRWalletobjects_GenericClass_MultipleDevicesAndHoldersAllowedStatus_StatusUnspecified
 *        Unspecified preference. (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *multipleDevicesAndHoldersAllowedStatus;

/**
 *  Identifies which redemption issuers can redeem the pass over Smart Tap.
 *  Redemption issuers are identified by their issuer ID. Redemption issuers
 *  must have at least one Smart Tap key configured. The `enableSmartTap` and
 *  object level `smartTapRedemptionLevel` fields must also be set up correctly
 *  in order for a pass to support Smart Tap.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *redemptionIssuers;

/**
 *  Optional information about the security animation. If this is set a security
 *  animation will be rendered on pass details.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_SecurityAnimation *securityAnimation;

/**
 *  Text module data. If `textModulesData` is also defined on the object, both
 *  will be displayed. The maximum number of these fields displayed is 10 from
 *  class and 10 from object.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TextModuleData *> *textModulesData;

/**
 *  View Unlock Requirement options for the generic pass.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_GenericClass_ViewUnlockRequirement_UnlockNotRequired
 *        Default behavior for all the existing Passes if ViewUnlockRequirement
 *        is not set. (Value: "UNLOCK_NOT_REQUIRED")
 *    @arg @c kGTLRWalletobjects_GenericClass_ViewUnlockRequirement_UnlockRequiredToView
 *        Requires the user to unlock their device each time the pass is viewed.
 *        If the user removes their device lock after saving the pass, then they
 *        will be prompted to create a device lock before the pass can be
 *        viewed. (Value: "UNLOCK_REQUIRED_TO_VIEW")
 *    @arg @c kGTLRWalletobjects_GenericClass_ViewUnlockRequirement_ViewUnlockRequirementUnspecified
 *        Default value, same as UNLOCK_NOT_REQUIRED. (Value:
 *        "VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *viewUnlockRequirement;

@end


/**
 *  Response to adding a new issuer message to the class. This contains the
 *  entire updated GenericClass.
 */
@interface GTLRWalletobjects_GenericClassAddMessageResponse : GTLRObject

/** The updated EventTicketClass resource. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_GenericClass *resource;

@end


/**
 *  List response which contains the list of all generic classes for a given
 *  issuer ID.
 */
@interface GTLRWalletobjects_GenericClassListResponse : GTLRObject

/** Pagination of the response. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Pagination *pagination;

/** Resources corresponding to the list request. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_GenericClass *> *resources;

@end


/**
 *  Generic Object
 */
@interface GTLRWalletobjects_GenericObject : GTLRObject

/**
 *  Optional app or website link that will be displayed as a button on the front
 *  of the pass. If AppLinkData is provided for the corresponding class only
 *  object AppLinkData will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkData *appLinkData;

/**
 *  The barcode type and value. If pass does not have a barcode, we can allow
 *  the issuer to set Barcode.alternate_text and display just that.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Barcode *barcode;

/**
 *  Required. The header of the pass. This is usually the Business name such as
 *  "XXX Gym", "AAA Insurance". This field is required and appears in the header
 *  row at the very top of the pass.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *cardTitle;

/**
 *  Required. The class associated with this object. The class must be of the
 *  same type as this object, must already exist, and must be approved. Class
 *  IDs should follow the format `issuerID.identifier` where `issuerID` is
 *  issued by Google and `identifier` is chosen by you.
 */
@property(nonatomic, copy, nullable) NSString *classId;

/**
 *  Specify which `GenericType` the card belongs to.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_GenericObject_GenericType_GenericAutoInsurance
 *        Auto-insurance cards (Value: "GENERIC_AUTO_INSURANCE")
 *    @arg @c kGTLRWalletobjects_GenericObject_GenericType_GenericEntryTicket
 *        Entry tickets (Value: "GENERIC_ENTRY_TICKET")
 *    @arg @c kGTLRWalletobjects_GenericObject_GenericType_GenericGymMembership
 *        Gym membership cards (Value: "GENERIC_GYM_MEMBERSHIP")
 *    @arg @c kGTLRWalletobjects_GenericObject_GenericType_GenericHomeInsurance
 *        Home-insurance cards (Value: "GENERIC_HOME_INSURANCE")
 *    @arg @c kGTLRWalletobjects_GenericObject_GenericType_GenericLibraryMembership
 *        Library membership cards (Value: "GENERIC_LIBRARY_MEMBERSHIP")
 *    @arg @c kGTLRWalletobjects_GenericObject_GenericType_GenericOther Other
 *        type (Value: "GENERIC_OTHER")
 *    @arg @c kGTLRWalletobjects_GenericObject_GenericType_GenericParkingPass
 *        Parking pass (Value: "GENERIC_PARKING_PASS")
 *    @arg @c kGTLRWalletobjects_GenericObject_GenericType_GenericReceipt
 *        Receipts (Value: "GENERIC_RECEIPT")
 *    @arg @c kGTLRWalletobjects_GenericObject_GenericType_GenericReservations
 *        Reservations (Value: "GENERIC_RESERVATIONS")
 *    @arg @c kGTLRWalletobjects_GenericObject_GenericType_GenericSeasonPass
 *        Season pass (Value: "GENERIC_SEASON_PASS")
 *    @arg @c kGTLRWalletobjects_GenericObject_GenericType_GenericTypeUnspecified
 *        Unspecified generic type. (Value: "GENERIC_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRWalletobjects_GenericObject_GenericType_GenericUtilityBills
 *        Utility bills (Value: "GENERIC_UTILITY_BILLS")
 *    @arg @c kGTLRWalletobjects_GenericObject_GenericType_GenericVoucher
 *        Voucher (Value: "GENERIC_VOUCHER")
 */
@property(nonatomic, copy, nullable) NSString *genericType;

/** Information that controls how passes are grouped together. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_GroupingInfo *groupingInfo;

/**
 *  Indicates if the object has users. This field is set by the platform.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasUsers;

/**
 *  Required. The title of the pass, such as "50% off coupon" or "Library card"
 *  or "Voucher". This field is required and appears in the title row of the
 *  pass detail view.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *header;

/**
 *  Banner image displayed on the front of the card if present. The image will
 *  be displayed at 100% width.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *heroImage;

/**
 *  The background color for the card. If not set, the dominant color of the
 *  hero image is used, and if no hero image is set, the dominant color of the
 *  logo is used and if logo is not set, a color would be chosen by Google.
 */
@property(nonatomic, copy, nullable) NSString *hexBackgroundColor;

/**
 *  Required. The unique identifier for an object. This ID must be unique across
 *  all objects from an issuer. This value needs to follow the format
 *  `issuerID.identifier` where `issuerID` is issued by Google and `identifier`
 *  is chosen by you. The unique identifier can only include alphanumeric
 *  characters, `.`, `_`, or `-`.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Image module data. Only one of the image from class and one from object
 *  level will be rendered when both set.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_ImageModuleData *> *imageModulesData;

/**
 *  linked_object_ids are a list of other objects such as event ticket, loyalty,
 *  offer, generic, giftcard, transit and boarding pass that should be
 *  automatically attached to this generic object. If a user had saved this
 *  generic card, then these linked_object_ids would be automatically pushed to
 *  the user's wallet (unless they turned off the setting to receive such linked
 *  passes). Make sure that objects present in linked_object_ids are already
 *  inserted - if not, calls would fail. Once linked, the linked objects cannot
 *  be unlinked. You cannot link objects belonging to another issuer. There is a
 *  limit to the number of objects that can be linked to a single object. After
 *  the limit is reached, new linked objects in the call will be ignored
 *  silently. Object IDs should follow the format issuer ID. identifier where
 *  the former is issued by Google and the latter is chosen by you.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *linkedObjectIds;

/**
 *  Links module data. If `linksModuleData` is also defined on the class, both
 *  will be displayed. The maximum number of these fields displayed is 10 from
 *  class and 10 from object.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LinksModuleData *linksModuleData;

/**
 *  The logo image of the pass. This image is displayed in the card detail view
 *  in upper left, and also on the list/thumbnail view. If the logo is not
 *  present, the first letter of `cardTitle` would be shown as logo.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *logo;

/**
 *  An array of messages displayed in the app. All users of this object will
 *  receive its associated messages. The maximum number of these fields is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Message *> *messages;

/** The notification settings that are enabled for this object. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Notifications *notifications;

/**
 *  Pass constraints for the object. Includes limiting NFC and screenshot
 *  behaviors.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_PassConstraints *passConstraints;

/** The rotating barcode settings/details. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_RotatingBarcode *rotatingBarcode;

/**
 *  Restrictions on the object that needs to be verified before the user tries
 *  to save the pass. Note that this restrictions will only be applied during
 *  save time. If the restrictions changed after a user saves the pass, the new
 *  restrictions will not be applied to an already saved pass.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_SaveRestrictions *saveRestrictions;

/**
 *  The value that will be transmitted to a Smart Tap certified terminal over
 *  NFC for this object. The class level fields `enableSmartTap` and
 *  `redemptionIssuers` must also be set up correctly in order for the pass to
 *  support Smart Tap. Only ASCII characters are supported.
 */
@property(nonatomic, copy, nullable) NSString *smartTapRedemptionValue;

/**
 *  The state of the object. This field is used to determine how an object is
 *  displayed in the app. For example, an `inactive` object is moved to the
 *  "Expired passes" section. If this is not provided, the object would be
 *  considered `ACTIVE`.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_GenericObject_State_Active Legacy alias for
 *        `ACTIVE`. Deprecated. (Value: "active")
 *    @arg @c kGTLRWalletobjects_GenericObject_State_Completed Legacy alias for
 *        `COMPLETED`. Deprecated. (Value: "completed")
 *    @arg @c kGTLRWalletobjects_GenericObject_State_Expired Legacy alias for
 *        `EXPIRED`. Deprecated. (Value: "expired")
 *    @arg @c kGTLRWalletobjects_GenericObject_State_Inactive Legacy alias for
 *        `INACTIVE`. Deprecated. (Value: "inactive")
 *    @arg @c kGTLRWalletobjects_GenericObject_State_StateUnspecified Value
 *        "STATE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  The title label of the pass, such as location where this pass can be used.
 *  Appears right above the title in the title row in the pass detail view.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *subheader;

/**
 *  Text module data. If `textModulesData` is also defined on the class, both
 *  will be displayed. The maximum number of these fields displayed is 10 from
 *  class and 10 from object.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TextModuleData *> *textModulesData;

/**
 *  The time period this object will be considered valid or usable. When the
 *  time period is passed, the object will be considered expired, which will
 *  affect the rendering on user's devices.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TimeInterval *validTimeInterval;

/**
 *  The wide logo of the pass. When provided, this will be used in place of the
 *  logo in the top left of the card view.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *wideLogo;

@end


/**
 *  Response to adding a new issuer message to the object. This contains the
 *  entire updated GenericObject.
 */
@interface GTLRWalletobjects_GenericObjectAddMessageResponse : GTLRObject

/** The updated GenericObject resource. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_GenericObject *resource;

@end


/**
 *  List response which contains the list of all generic objects for a given
 *  issuer ID.
 */
@interface GTLRWalletobjects_GenericObjectListResponse : GTLRObject

/** Pagination of the response. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Pagination *pagination;

/** Resources corresponding to the list request. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_GenericObject *> *resources;

@end


/**
 *  GTLRWalletobjects_GiftCardClass
 */
@interface GTLRWalletobjects_GiftCardClass : GTLRObject

/**
 *  Determines whether the merchant supports gift card redemption using barcode.
 *  If true, app displays a barcode for the gift card on the Gift card details
 *  screen. If false, a barcode is not displayed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowBarcodeRedemption;

/**
 *  Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowMultipleUsersPerObject GTLR_DEPRECATED;

/**
 *  Optional app or website link that will be displayed as a button on the front
 *  of the pass. If AppLinkData is provided for the corresponding object that
 *  will be used instead.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkData *appLinkData;

/**
 *  Callback options to be used to call the issuer back for every save/delete of
 *  an object for this class by the end-user. All objects of this class are
 *  eligible for the callback.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CallbackOptions *callbackOptions;

/** The label to display for the card number, such as "Card Number". */
@property(nonatomic, copy, nullable) NSString *cardNumberLabel;

/**
 *  Template information about how the class should be displayed. If unset,
 *  Google will fallback to a default set of fields to display.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ClassTemplateInfo *classTemplateInfo;

/**
 *  Country code used to display the card's country (when the user is not in
 *  that country), as well as to display localized content when content is not
 *  available in the user's locale.
 */
@property(nonatomic, copy, nullable) NSString *countryCode;

/**
 *  Identifies whether this class supports Smart Tap. The `redemptionIssuers`
 *  and object level `smartTapRedemptionLevel` fields must also be set up
 *  correctly in order for a pass to support Smart Tap.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableSmartTap;

/** The label to display for event number, such as "Target Event #". */
@property(nonatomic, copy, nullable) NSString *eventNumberLabel;

/**
 *  Optional banner image displayed on the front of the card. If none is
 *  present, nothing will be displayed. The image will display at 100% width.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *heroImage;

/**
 *  The background color for the card. If not set the dominant color of the hero
 *  image is used, and if no hero image is set, the dominant color of the logo
 *  is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as
 *  `#ffcc00`. You can also use the shorthand version of the RGB triplet which
 *  is #rgb, such as `#fc0`.
 */
@property(nonatomic, copy, nullable) NSString *hexBackgroundColor;

/**
 *  The URI of your application's home page. Populating the URI in this field
 *  results in the exact same behavior as populating an URI in linksModuleData
 *  (when an object is rendered, a link to the homepage is shown in what would
 *  usually be thought of as the linksModuleData section of the object).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Uri *homepageUri;

/**
 *  Required. The unique identifier for a class. This ID must be unique across
 *  all classes from an issuer. This value should follow the format issuer ID.
 *  identifier where the former is issued by Google and latter is chosen by you.
 *  Your unique identifier should only include alphanumeric characters, '.',
 *  '_', or '-'.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Image module data. The maximum number of these fields displayed is 1 from
 *  object level and 1 for class object level.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_ImageModuleData *> *imageModulesData;

/** Deprecated. Use textModulesData instead. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_InfoModuleData *infoModuleData GTLR_DEPRECATED;

/**
 *  Required. The issuer name. Recommended maximum length is 20 characters to
 *  ensure full string is displayed on smaller screens.
 */
@property(nonatomic, copy, nullable) NSString *issuerName;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#giftCardClass"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  Links module data. If links module data is also defined on the object, both
 *  will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LinksModuleData *linksModuleData;

/** Translated strings for the card_number_label. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedCardNumberLabel;

/** Translated strings for the event_number_label. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedEventNumberLabel;

/**
 *  Translated strings for the issuer_name. Recommended maximum length is 20
 *  characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedIssuerName;

/**
 *  Translated strings for the merchant_name. The app may display an ellipsis
 *  after the first 20 characters to ensure full string is displayed on smaller
 *  screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedMerchantName;

/** Translated strings for the pin_label. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedPinLabel;

/**
 *  Note: This field is currently not supported to trigger geo notifications.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LatLongPoint *> *locations GTLR_DEPRECATED;

/**
 *  Merchant name, such as "Adam's Apparel". The app may display an ellipsis
 *  after the first 20 characters to ensure full string is displayed on smaller
 *  screens.
 */
@property(nonatomic, copy, nullable) NSString *merchantName;

/**
 *  An array of messages displayed in the app. All users of this object will
 *  receive its associated messages. The maximum number of these fields is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Message *> *messages;

/**
 *  Identifies whether multiple users and devices will save the same object
 *  referencing this class.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_GiftCardClass_MultipleDevicesAndHoldersAllowedStatus_MultipleHolders
 *        Legacy alias for `MULTIPLE_HOLDERS`. Deprecated. (Value:
 *        "multipleHolders")
 *    @arg @c kGTLRWalletobjects_GiftCardClass_MultipleDevicesAndHoldersAllowedStatus_OneUserAllDevices
 *        Legacy alias for `ONE_USER_ALL_DEVICES`. Deprecated. (Value:
 *        "oneUserAllDevices")
 *    @arg @c kGTLRWalletobjects_GiftCardClass_MultipleDevicesAndHoldersAllowedStatus_OneUserOneDevice
 *        Legacy alias for `ONE_USER_ONE_DEVICE`. Deprecated. (Value:
 *        "oneUserOneDevice")
 *    @arg @c kGTLRWalletobjects_GiftCardClass_MultipleDevicesAndHoldersAllowedStatus_StatusUnspecified
 *        Unspecified preference. (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *multipleDevicesAndHoldersAllowedStatus;

/** The label to display for the PIN, such as "4-digit PIN". */
@property(nonatomic, copy, nullable) NSString *pinLabel;

/**
 *  The logo of the gift card program or company. This logo is displayed in both
 *  the details and list views of the app.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *programLogo;

/**
 *  Identifies which redemption issuers can redeem the pass over Smart Tap.
 *  Redemption issuers are identified by their issuer ID. Redemption issuers
 *  must have at least one Smart Tap key configured. The `enableSmartTap` and
 *  object level `smartTapRedemptionLevel` fields must also be set up correctly
 *  in order for a pass to support Smart Tap.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *redemptionIssuers;

/**
 *  The review comments set by the platform when a class is marked `approved` or
 *  `rejected`.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Review *review;

/**
 *  Required. The status of the class. This field can be set to `draft` or
 *  `underReview` using the insert, patch, or update API calls. Once the review
 *  state is changed from `draft` it may not be changed back to `draft`. You
 *  should keep this field to `draft` when the class is under development. A
 *  `draft` class cannot be used to create any object. You should set this field
 *  to `underReview` when you believe the class is ready for use. The platform
 *  will automatically set this field to `approved` and it can be immediately
 *  used to create or migrate objects. When updating an already `approved` class
 *  you should keep setting this field to `underReview`.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_GiftCardClass_ReviewStatus_Approved Legacy
 *        alias for `APPROVED`. Deprecated. (Value: "approved")
 *    @arg @c kGTLRWalletobjects_GiftCardClass_ReviewStatus_Draft Legacy alias
 *        for `DRAFT`. Deprecated. (Value: "draft")
 *    @arg @c kGTLRWalletobjects_GiftCardClass_ReviewStatus_Rejected Legacy
 *        alias for `REJECTED`. Deprecated. (Value: "rejected")
 *    @arg @c kGTLRWalletobjects_GiftCardClass_ReviewStatus_ReviewStatusUnspecified
 *        Value "REVIEW_STATUS_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_GiftCardClass_ReviewStatus_UnderReview Legacy
 *        alias for `UNDER_REVIEW`. Deprecated. (Value: "underReview")
 */
@property(nonatomic, copy, nullable) NSString *reviewStatus;

/**
 *  Optional information about the security animation. If this is set a security
 *  animation will be rendered on pass details.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_SecurityAnimation *securityAnimation;

/**
 *  Text module data. If text module data is also defined on the class, both
 *  will be displayed. The maximum number of these fields displayed is 10 from
 *  the object and 10 from the class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TextModuleData *> *textModulesData;

/**
 *  Deprecated
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version GTLR_DEPRECATED;

/**
 *  View Unlock Requirement options for the gift card.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_GiftCardClass_ViewUnlockRequirement_UnlockNotRequired
 *        Default behavior for all the existing Passes if ViewUnlockRequirement
 *        is not set. (Value: "UNLOCK_NOT_REQUIRED")
 *    @arg @c kGTLRWalletobjects_GiftCardClass_ViewUnlockRequirement_UnlockRequiredToView
 *        Requires the user to unlock their device each time the pass is viewed.
 *        If the user removes their device lock after saving the pass, then they
 *        will be prompted to create a device lock before the pass can be
 *        viewed. (Value: "UNLOCK_REQUIRED_TO_VIEW")
 *    @arg @c kGTLRWalletobjects_GiftCardClass_ViewUnlockRequirement_ViewUnlockRequirementUnspecified
 *        Default value, same as UNLOCK_NOT_REQUIRED. (Value:
 *        "VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *viewUnlockRequirement;

/**
 *  The wide logo of the gift card program or company. When provided, this will
 *  be used in place of the program logo in the top left of the card view.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *wideProgramLogo;

/** Deprecated. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *wordMark GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_GiftCardClassAddMessageResponse
 */
@interface GTLRWalletobjects_GiftCardClassAddMessageResponse : GTLRObject

/** The updated GiftCardClass resource. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_GiftCardClass *resource;

@end


/**
 *  GTLRWalletobjects_GiftCardClassListResponse
 */
@interface GTLRWalletobjects_GiftCardClassListResponse : GTLRObject

/** Pagination of the response. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Pagination *pagination;

/** Resources corresponding to the list request. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_GiftCardClass *> *resources;

@end


/**
 *  GTLRWalletobjects_GiftCardObject
 */
@interface GTLRWalletobjects_GiftCardObject : GTLRObject

/**
 *  Optional app or website link that will be displayed as a button on the front
 *  of the pass. If AppLinkData is provided for the corresponding class only
 *  object AppLinkData will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkData *appLinkData;

/** The card's monetary balance. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Money *balance;

/**
 *  The date and time when the balance was last updated. Offset is required. If
 *  balance is updated and this property is not provided, system will default to
 *  the current time.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_DateTime *balanceUpdateTime;

/** The barcode type and value. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Barcode *barcode;

/** Required. The card's number. */
@property(nonatomic, copy, nullable) NSString *cardNumber;

/**
 *  Required. The class associated with this object. The class must be of the
 *  same type as this object, must already exist, and must be approved. Class
 *  IDs should follow the format issuer ID.identifier where the former is issued
 *  by Google and latter is chosen by you.
 */
@property(nonatomic, copy, nullable) NSString *classId;

/**
 *  A copy of the inherited fields of the parent class. These fields are
 *  retrieved during a GET.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_GiftCardClass *classReference;

/**
 *  Indicates if notifications should explicitly be suppressed. If this field is
 *  set to true, regardless of the `messages` field, expiration notifications to
 *  the user will be suppressed. By default, this field is set to false.
 *  Currently, this can only be set for offers.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableExpirationNotification;

/** The card's event number, an optional field used by some gift cards. */
@property(nonatomic, copy, nullable) NSString *eventNumber;

/** Information that controls how passes are grouped together. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_GroupingInfo *groupingInfo;

/**
 *  Whether this object is currently linked to a single device. This field is
 *  set by the platform when a user saves the object, linking it to their
 *  device. Intended for use by select partners. Contact support for additional
 *  information.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasLinkedDevice;

/**
 *  Indicates if the object has users. This field is set by the platform.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasUsers;

/**
 *  Optional banner image displayed on the front of the card. If none is
 *  present, hero image of the class, if present, will be displayed. If hero
 *  image of the class is also not present, nothing will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *heroImage;

/**
 *  Required. The unique identifier for an object. This ID must be unique across
 *  all objects from an issuer. This value should follow the format issuer
 *  ID.identifier where the former is issued by Google and latter is chosen by
 *  you. The unique identifier should only include alphanumeric characters, '.',
 *  '_', or '-'.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Image module data. The maximum number of these fields displayed is 1 from
 *  object level and 1 for class object level.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_ImageModuleData *> *imageModulesData;

/** Deprecated. Use textModulesData instead. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_InfoModuleData *infoModuleData;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#giftCardObject"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  linked_object_ids are a list of other objects such as event ticket, loyalty,
 *  offer, generic, giftcard, transit and boarding pass that should be
 *  automatically attached to this giftcard object. If a user had saved this
 *  gift card, then these linked_object_ids would be automatically pushed to the
 *  user's wallet (unless they turned off the setting to receive such linked
 *  passes). Make sure that objects present in linked_object_ids are already
 *  inserted - if not, calls would fail. Once linked, the linked objects cannot
 *  be unlinked. You cannot link objects belonging to another issuer. There is a
 *  limit to the number of objects that can be linked to a single object. After
 *  the limit is reached, new linked objects in the call will be ignored
 *  silently. Object IDs should follow the format issuer ID. identifier where
 *  the former is issued by Google and the latter is chosen by you.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *linkedObjectIds;

/**
 *  Links module data. If links module data is also defined on the class, both
 *  will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LinksModuleData *linksModuleData;

/**
 *  Note: This field is currently not supported to trigger geo notifications.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LatLongPoint *> *locations GTLR_DEPRECATED;

/**
 *  An array of messages displayed in the app. All users of this object will
 *  receive its associated messages. The maximum number of these fields is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Message *> *messages;

/**
 *  Pass constraints for the object. Includes limiting NFC and screenshot
 *  behaviors.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_PassConstraints *passConstraints;

/** The card's PIN. */
@property(nonatomic, copy, nullable) NSString *pin;

/** The rotating barcode type and value. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_RotatingBarcode *rotatingBarcode;

/**
 *  Restrictions on the object that needs to be verified before the user tries
 *  to save the pass. Note that this restrictions will only be applied during
 *  save time. If the restrictions changed after a user saves the pass, the new
 *  restrictions will not be applied to an already saved pass.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_SaveRestrictions *saveRestrictions;

/**
 *  The value that will be transmitted to a Smart Tap certified terminal over
 *  NFC for this object. The class level fields `enableSmartTap` and
 *  `redemptionIssuers` must also be set up correctly in order for the pass to
 *  support Smart Tap. Only ASCII characters are supported.
 */
@property(nonatomic, copy, nullable) NSString *smartTapRedemptionValue;

/**
 *  Required. The state of the object. This field is used to determine how an
 *  object is displayed in the app. For example, an `inactive` object is moved
 *  to the "Expired passes" section.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_GiftCardObject_State_Active Legacy alias for
 *        `ACTIVE`. Deprecated. (Value: "active")
 *    @arg @c kGTLRWalletobjects_GiftCardObject_State_Completed Legacy alias for
 *        `COMPLETED`. Deprecated. (Value: "completed")
 *    @arg @c kGTLRWalletobjects_GiftCardObject_State_Expired Legacy alias for
 *        `EXPIRED`. Deprecated. (Value: "expired")
 *    @arg @c kGTLRWalletobjects_GiftCardObject_State_Inactive Legacy alias for
 *        `INACTIVE`. Deprecated. (Value: "inactive")
 *    @arg @c kGTLRWalletobjects_GiftCardObject_State_StateUnspecified Value
 *        "STATE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Text module data. If text module data is also defined on the class, both
 *  will be displayed. The maximum number of these fields displayed is 10 from
 *  the object and 10 from the class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TextModuleData *> *textModulesData;

/**
 *  The time period this object will be `active` and object can be used. An
 *  object's state will be changed to `expired` when this time period has
 *  passed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TimeInterval *validTimeInterval;

/**
 *  Deprecated
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_GiftCardObjectAddMessageResponse
 */
@interface GTLRWalletobjects_GiftCardObjectAddMessageResponse : GTLRObject

/** The updated GiftCardObject resource. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_GiftCardObject *resource;

@end


/**
 *  GTLRWalletobjects_GiftCardObjectListResponse
 */
@interface GTLRWalletobjects_GiftCardObjectListResponse : GTLRObject

/** Pagination of the response. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Pagination *pagination;

/** Resources corresponding to the list request. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_GiftCardObject *> *resources;

@end


/**
 *  GTLRWalletobjects_GroupingInfo
 */
@interface GTLRWalletobjects_GroupingInfo : GTLRObject

/**
 *  Optional grouping ID for grouping the passes with the same ID visually
 *  together. Grouping with different types of passes is allowed.
 */
@property(nonatomic, copy, nullable) NSString *groupingId;

/**
 *  Optional index for sorting the passes when they are grouped with other
 *  passes. Passes with lower sort index are shown before passes with higher
 *  sort index. If unspecified, the value is assumed to be INT_MAX. For two
 *  passes with the same sort index, the sorting behavior is undefined.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sortIndex;

@end


/**
 *  Wrapping type for Google hosted images. Next ID: 7
 */
@interface GTLRWalletobjects_Image : GTLRObject

/** Description of the image used for accessibility. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *contentDescription;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#image"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/** The URI for the image. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ImageUri *sourceUri;

@end


/**
 *  GTLRWalletobjects_ImageModuleData
 */
@interface GTLRWalletobjects_ImageModuleData : GTLRObject

/**
 *  The ID associated with an image module. This field is here to enable ease of
 *  management of image modules.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** A 100% width image. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *mainImage;

@end


/**
 *  GTLRWalletobjects_ImageUri
 */
@interface GTLRWalletobjects_ImageUri : GTLRObject

/**
 *  Additional information about the image, which is unused and retained only
 *  for backward compatibility.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty GTLR_DEPRECATED;

/**
 *  Translated strings for the description, which are unused and retained only
 *  for backward compatibility.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedDescription GTLR_DEPRECATED;

/** The location of the image. URIs must have a scheme. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  GTLRWalletobjects_InfoModuleData
 */
@interface GTLRWalletobjects_InfoModuleData : GTLRObject

/**
 *  A list of collections of labels and values. These will be displayed one
 *  after the other in a singular column.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LabelValueRow *> *labelValueRows;

/**
 *  showLastUpdateTime
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *showLastUpdateTime GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_Issuer
 */
@interface GTLRWalletobjects_Issuer : GTLRObject

/** Allows the issuer to provide their callback settings. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CallbackOptions *callbackOptions;

/** Issuer contact information. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_IssuerContactInfo *contactInfo;

/** URL for the issuer's home page. */
@property(nonatomic, copy, nullable) NSString *homepageUrl;

/**
 *  The unique identifier for an issuer account. This is automatically generated
 *  when the issuer is inserted.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *issuerId;

/** The account name of the issuer. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Available only to Smart Tap enabled partners. Contact support for additional
 *  guidance.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_SmartTapMerchantData *smartTapMerchantData;

@end


/**
 *  GTLRWalletobjects_IssuerContactInfo
 */
@interface GTLRWalletobjects_IssuerContactInfo : GTLRObject

/** Email addresses which will receive alerts. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *alertsEmails;

/** The primary contact email address. */
@property(nonatomic, copy, nullable) NSString *email;

/** The primary contact name. */
@property(nonatomic, copy, nullable) NSString *name;

/** The primary contact phone number. */
@property(nonatomic, copy, nullable) NSString *phone;

@end


/**
 *  GTLRWalletobjects_IssuerListResponse
 */
@interface GTLRWalletobjects_IssuerListResponse : GTLRObject

/** Resources corresponding to the list request. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Issuer *> *resources;

@end


/**
 *  GTLRWalletobjects_IssuerToUserInfo
 */
@interface GTLRWalletobjects_IssuerToUserInfo : GTLRObject

/**
 *  action
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_IssuerToUserInfo_Action_ActionUnspecified Value
 *        "ACTION_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_IssuerToUserInfo_Action_S2ap Legacy alias for
 *        `S2AP`. Deprecated. (Value: "s2ap")
 *    @arg @c kGTLRWalletobjects_IssuerToUserInfo_Action_SignUp Legacy alias for
 *        `SIGN_UP`. Deprecated. (Value: "signUp")
 */
@property(nonatomic, copy, nullable) NSString *action;

@property(nonatomic, strong, nullable) GTLRWalletobjects_SignUpInfo *signUpInfo;

/** Currently not used, consider deprecating. */
@property(nonatomic, copy, nullable) NSString *url;

/** JSON web token for action S2AP. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRWalletobjects_JwtInsertResponse
 */
@interface GTLRWalletobjects_JwtInsertResponse : GTLRObject

/**
 *  Data that corresponds to the ids of the provided classes and objects in the
 *  JWT. resources will only include the non-empty arrays (i.e. if the JWT only
 *  includes eventTicketObjects, then that is the only field that will be
 *  present in resources).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Resources *resources;

/**
 *  A URI that, when opened, will allow the end user to save the object(s)
 *  identified in the JWT to their Google account.
 */
@property(nonatomic, copy, nullable) NSString *saveUri;

@end


/**
 *  GTLRWalletobjects_JwtResource
 */
@interface GTLRWalletobjects_JwtResource : GTLRObject

/**
 *  A string representing a JWT of the format described at
 *  https://developers.google.com/wallet/reference/rest/v1/Jwt
 */
@property(nonatomic, copy, nullable) NSString *jwt;

@end


/**
 *  A pair of text strings to be displayed in the details view. Note we no
 *  longer display LabelValue/LabelValueRow as a table, instead a list of items.
 */
@interface GTLRWalletobjects_LabelValue : GTLRObject

/**
 *  The label for a specific row and column. Recommended maximum is 15
 *  characters for a two-column layout and 30 characters for a one-column
 *  layout.
 */
@property(nonatomic, copy, nullable) NSString *label;

/**
 *  Translated strings for the label. Recommended maximum is 15 characters for a
 *  two-column layout and 30 characters for a one-column layout.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedLabel;

/**
 *  Translated strings for the value. Recommended maximum is 15 characters for a
 *  two-column layout and 30 characters for a one-column layout.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedValue;

/**
 *  The value for a specific row and column. Recommended maximum is 15
 *  characters for a two-column layout and 30 characters for a one-column
 *  layout.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRWalletobjects_LabelValueRow
 */
@interface GTLRWalletobjects_LabelValueRow : GTLRObject

/**
 *  A list of labels and values. These will be displayed in a singular column,
 *  one after the other, not in multiple columns, despite the field name.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LabelValue *> *columns;

@end


/**
 *  GTLRWalletobjects_LatLongPoint
 */
@interface GTLRWalletobjects_LatLongPoint : GTLRObject

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#latLongPoint"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  The latitude specified as any value in the range of -90.0 through +90.0,
 *  both inclusive. Values outside these bounds will be rejected.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latitude;

/**
 *  The longitude specified in the range -180.0 through +180.0, both inclusive.
 *  Values outside these bounds will be rejected.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longitude;

@end


/**
 *  GTLRWalletobjects_LinksModuleData
 */
@interface GTLRWalletobjects_LinksModuleData : GTLRObject

/** The list of URIs. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Uri *> *uris;

@end


/**
 *  GTLRWalletobjects_ListTemplateOverride
 */
@interface GTLRWalletobjects_ListTemplateOverride : GTLRObject

/**
 *  Specifies from a predefined set of options or from a reference to the field
 *  what will be displayed in the first row. To set this override, set the
 *  FirstRowOption.fieldOption to the FieldSelector of your choice.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_FirstRowOption *firstRowOption;

/**
 *  A reference to the field to be displayed in the second row. This option is
 *  only displayed if there are not multiple user objects in a group. If there
 *  is a group, the second row will always display a field shared by all
 *  objects. To set this override, please set secondRowOption to the
 *  FieldSelector of you choice.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_FieldSelector *secondRowOption;

/**
 *  An unused/deprecated field. Setting it will have no effect on what the user
 *  sees.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_FieldSelector *thirdRowOption GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_LocalizedString
 */
@interface GTLRWalletobjects_LocalizedString : GTLRObject

/**
 *  Contains the string to be displayed if no appropriate translation is
 *  available.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TranslatedString *defaultValue;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#localizedString"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/** Contains the translations for the string. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TranslatedString *> *translatedValues;

@end


/**
 *  GTLRWalletobjects_LoyaltyClass
 */
@interface GTLRWalletobjects_LoyaltyClass : GTLRObject

/**
 *  The account ID label, such as "Member ID." Recommended maximum length is 15
 *  characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, copy, nullable) NSString *accountIdLabel;

/**
 *  The account name label, such as "Member Name." Recommended maximum length is
 *  15 characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, copy, nullable) NSString *accountNameLabel;

/**
 *  Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowMultipleUsersPerObject GTLR_DEPRECATED;

/**
 *  Optional app or website link that will be displayed as a button on the front
 *  of the pass. If AppLinkData is provided for the corresponding object that
 *  will be used instead.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkData *appLinkData;

/**
 *  Callback options to be used to call the issuer back for every save/delete of
 *  an object for this class by the end-user. All objects of this class are
 *  eligible for the callback.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CallbackOptions *callbackOptions;

/**
 *  Template information about how the class should be displayed. If unset,
 *  Google will fallback to a default set of fields to display.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ClassTemplateInfo *classTemplateInfo;

/**
 *  Country code used to display the card's country (when the user is not in
 *  that country), as well as to display localized content when content is not
 *  available in the user's locale.
 */
@property(nonatomic, copy, nullable) NSString *countryCode;

/**
 *  Information about how the class may be discovered and instantiated from
 *  within the Google Pay app.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_DiscoverableProgram *discoverableProgram;

/**
 *  Identifies whether this class supports Smart Tap. The `redemptionIssuers`
 *  and one of object level `smartTapRedemptionLevel`, barcode.value`, or
 *  `accountId` fields must also be set up correctly in order for a pass to
 *  support Smart Tap.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableSmartTap;

/**
 *  Optional banner image displayed on the front of the card. If none is
 *  present, nothing will be displayed. The image will display at 100% width.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *heroImage;

/**
 *  The background color for the card. If not set the dominant color of the hero
 *  image is used, and if no hero image is set, the dominant color of the logo
 *  is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as
 *  `#ffcc00`. You can also use the shorthand version of the RGB triplet which
 *  is #rgb, such as `#fc0`.
 */
@property(nonatomic, copy, nullable) NSString *hexBackgroundColor;

/**
 *  The URI of your application's home page. Populating the URI in this field
 *  results in the exact same behavior as populating an URI in linksModuleData
 *  (when an object is rendered, a link to the homepage is shown in what would
 *  usually be thought of as the linksModuleData section of the object).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Uri *homepageUri;

/**
 *  Required. The unique identifier for a class. This ID must be unique across
 *  all classes from an issuer. This value should follow the format issuer ID.
 *  identifier where the former is issued by Google and latter is chosen by you.
 *  Your unique identifier should only include alphanumeric characters, '.',
 *  '_', or '-'.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Image module data. The maximum number of these fields displayed is 1 from
 *  object level and 1 for class object level.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_ImageModuleData *> *imageModulesData;

/** Deprecated. Use textModulesData instead. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_InfoModuleData *infoModuleData GTLR_DEPRECATED;

/**
 *  Required. The issuer name. Recommended maximum length is 20 characters to
 *  ensure full string is displayed on smaller screens.
 */
@property(nonatomic, copy, nullable) NSString *issuerName;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#loyaltyClass"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  Links module data. If links module data is also defined on the object, both
 *  will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LinksModuleData *linksModuleData;

/**
 *  Translated strings for the account_id_label. Recommended maximum length is
 *  15 characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedAccountIdLabel;

/**
 *  Translated strings for the account_name_label. Recommended maximum length is
 *  15 characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedAccountNameLabel;

/**
 *  Translated strings for the issuer_name. Recommended maximum length is 20
 *  characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedIssuerName;

/**
 *  Translated strings for the program_name. The app may display an ellipsis
 *  after the first 20 characters to ensure full string is displayed on smaller
 *  screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedProgramName;

/**
 *  Translated strings for the rewards_tier. Recommended maximum length is 7
 *  characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedRewardsTier;

/**
 *  Translated strings for the rewards_tier_label. Recommended maximum length is
 *  9 characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedRewardsTierLabel;

/** Translated strings for the secondary_rewards_tier. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedSecondaryRewardsTier;

/** Translated strings for the secondary_rewards_tier_label. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedSecondaryRewardsTierLabel;

/**
 *  Note: This field is currently not supported to trigger geo notifications.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LatLongPoint *> *locations GTLR_DEPRECATED;

/**
 *  An array of messages displayed in the app. All users of this object will
 *  receive its associated messages. The maximum number of these fields is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Message *> *messages;

/**
 *  Identifies whether multiple users and devices will save the same object
 *  referencing this class.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_LoyaltyClass_MultipleDevicesAndHoldersAllowedStatus_MultipleHolders
 *        Legacy alias for `MULTIPLE_HOLDERS`. Deprecated. (Value:
 *        "multipleHolders")
 *    @arg @c kGTLRWalletobjects_LoyaltyClass_MultipleDevicesAndHoldersAllowedStatus_OneUserAllDevices
 *        Legacy alias for `ONE_USER_ALL_DEVICES`. Deprecated. (Value:
 *        "oneUserAllDevices")
 *    @arg @c kGTLRWalletobjects_LoyaltyClass_MultipleDevicesAndHoldersAllowedStatus_OneUserOneDevice
 *        Legacy alias for `ONE_USER_ONE_DEVICE`. Deprecated. (Value:
 *        "oneUserOneDevice")
 *    @arg @c kGTLRWalletobjects_LoyaltyClass_MultipleDevicesAndHoldersAllowedStatus_StatusUnspecified
 *        Unspecified preference. (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *multipleDevicesAndHoldersAllowedStatus;

/**
 *  Required. The logo of the loyalty program or company. This logo is displayed
 *  in both the details and list views of the app.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *programLogo;

/**
 *  Required. The program name, such as "Adam's Apparel". The app may display an
 *  ellipsis after the first 20 characters to ensure full string is displayed on
 *  smaller screens.
 */
@property(nonatomic, copy, nullable) NSString *programName;

/**
 *  Identifies which redemption issuers can redeem the pass over Smart Tap.
 *  Redemption issuers are identified by their issuer ID. Redemption issuers
 *  must have at least one Smart Tap key configured. The `enableSmartTap` and
 *  one of object level `smartTapRedemptionValue`, barcode.value`, or
 *  `accountId` fields must also be set up correctly in order for a pass to
 *  support Smart Tap.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *redemptionIssuers;

/**
 *  The review comments set by the platform when a class is marked `approved` or
 *  `rejected`.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Review *review;

/**
 *  Required. The status of the class. This field can be set to `draft` or
 *  `underReview` using the insert, patch, or update API calls. Once the review
 *  state is changed from `draft` it may not be changed back to `draft`. You
 *  should keep this field to `draft` when the class is under development. A
 *  `draft` class cannot be used to create any object. You should set this field
 *  to `underReview` when you believe the class is ready for use. The platform
 *  will automatically set this field to `approved` and it can be immediately
 *  used to create or migrate objects. When updating an already `approved` class
 *  you should keep setting this field to `underReview`.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_LoyaltyClass_ReviewStatus_Approved Legacy alias
 *        for `APPROVED`. Deprecated. (Value: "approved")
 *    @arg @c kGTLRWalletobjects_LoyaltyClass_ReviewStatus_Draft Legacy alias
 *        for `DRAFT`. Deprecated. (Value: "draft")
 *    @arg @c kGTLRWalletobjects_LoyaltyClass_ReviewStatus_Rejected Legacy alias
 *        for `REJECTED`. Deprecated. (Value: "rejected")
 *    @arg @c kGTLRWalletobjects_LoyaltyClass_ReviewStatus_ReviewStatusUnspecified
 *        Value "REVIEW_STATUS_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_LoyaltyClass_ReviewStatus_UnderReview Legacy
 *        alias for `UNDER_REVIEW`. Deprecated. (Value: "underReview")
 */
@property(nonatomic, copy, nullable) NSString *reviewStatus;

/**
 *  The rewards tier, such as "Gold" or "Platinum." Recommended maximum length
 *  is 7 characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, copy, nullable) NSString *rewardsTier;

/**
 *  The rewards tier label, such as "Rewards Tier." Recommended maximum length
 *  is 9 characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, copy, nullable) NSString *rewardsTierLabel;

/** The secondary rewards tier, such as "Gold" or "Platinum." */
@property(nonatomic, copy, nullable) NSString *secondaryRewardsTier;

/** The secondary rewards tier label, such as "Rewards Tier." */
@property(nonatomic, copy, nullable) NSString *secondaryRewardsTierLabel;

/**
 *  Optional information about the security animation. If this is set a security
 *  animation will be rendered on pass details.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_SecurityAnimation *securityAnimation;

/**
 *  Text module data. If text module data is also defined on the class, both
 *  will be displayed. The maximum number of these fields displayed is 10 from
 *  the object and 10 from the class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TextModuleData *> *textModulesData;

/**
 *  Deprecated
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version GTLR_DEPRECATED;

/**
 *  View Unlock Requirement options for the loyalty card.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_LoyaltyClass_ViewUnlockRequirement_UnlockNotRequired
 *        Default behavior for all the existing Passes if ViewUnlockRequirement
 *        is not set. (Value: "UNLOCK_NOT_REQUIRED")
 *    @arg @c kGTLRWalletobjects_LoyaltyClass_ViewUnlockRequirement_UnlockRequiredToView
 *        Requires the user to unlock their device each time the pass is viewed.
 *        If the user removes their device lock after saving the pass, then they
 *        will be prompted to create a device lock before the pass can be
 *        viewed. (Value: "UNLOCK_REQUIRED_TO_VIEW")
 *    @arg @c kGTLRWalletobjects_LoyaltyClass_ViewUnlockRequirement_ViewUnlockRequirementUnspecified
 *        Default value, same as UNLOCK_NOT_REQUIRED. (Value:
 *        "VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *viewUnlockRequirement;

/**
 *  The wide logo of the loyalty program or company. When provided, this will be
 *  used in place of the program logo in the top left of the card view.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *wideProgramLogo;

/** Deprecated. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *wordMark GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_LoyaltyClassAddMessageResponse
 */
@interface GTLRWalletobjects_LoyaltyClassAddMessageResponse : GTLRObject

/** The updated LoyaltyClass resource. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LoyaltyClass *resource;

@end


/**
 *  GTLRWalletobjects_LoyaltyClassListResponse
 */
@interface GTLRWalletobjects_LoyaltyClassListResponse : GTLRObject

/** Pagination of the response. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Pagination *pagination;

/** Resources corresponding to the list request. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LoyaltyClass *> *resources;

@end


/**
 *  GTLRWalletobjects_LoyaltyObject
 */
@interface GTLRWalletobjects_LoyaltyObject : GTLRObject

/**
 *  The loyalty account identifier. Recommended maximum length is 20 characters.
 */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The loyalty account holder name, such as "John Smith." Recommended maximum
 *  length is 20 characters to ensure full string is displayed on smaller
 *  screens.
 */
@property(nonatomic, copy, nullable) NSString *accountName;

/**
 *  Optional app or website link that will be displayed as a button on the front
 *  of the pass. If AppLinkData is provided for the corresponding class only
 *  object AppLinkData will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkData *appLinkData;

/** The barcode type and value. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Barcode *barcode;

/**
 *  Required. The class associated with this object. The class must be of the
 *  same type as this object, must already exist, and must be approved. Class
 *  IDs should follow the format issuer ID.identifier where the former is issued
 *  by Google and latter is chosen by you.
 */
@property(nonatomic, copy, nullable) NSString *classId;

/**
 *  A copy of the inherited fields of the parent class. These fields are
 *  retrieved during a GET.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LoyaltyClass *classReference;

/**
 *  Indicates if notifications should explicitly be suppressed. If this field is
 *  set to true, regardless of the `messages` field, expiration notifications to
 *  the user will be suppressed. By default, this field is set to false.
 *  Currently, this can only be set for offers.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableExpirationNotification;

/** Information that controls how passes are grouped together. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_GroupingInfo *groupingInfo;

/**
 *  Whether this object is currently linked to a single device. This field is
 *  set by the platform when a user saves the object, linking it to their
 *  device. Intended for use by select partners. Contact support for additional
 *  information.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasLinkedDevice;

/**
 *  Indicates if the object has users. This field is set by the platform.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasUsers;

/**
 *  Optional banner image displayed on the front of the card. If none is
 *  present, hero image of the class, if present, will be displayed. If hero
 *  image of the class is also not present, nothing will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *heroImage;

/**
 *  Required. The unique identifier for an object. This ID must be unique across
 *  all objects from an issuer. This value should follow the format issuer
 *  ID.identifier where the former is issued by Google and latter is chosen by
 *  you. The unique identifier should only include alphanumeric characters, '.',
 *  '_', or '-'.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Image module data. The maximum number of these fields displayed is 1 from
 *  object level and 1 for class object level.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_ImageModuleData *> *imageModulesData;

/** Deprecated. Use textModulesData instead. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_InfoModuleData *infoModuleData;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#loyaltyObject"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  linked_object_ids are a list of other objects such as event ticket, loyalty,
 *  offer, generic, giftcard, transit and boarding pass that should be
 *  automatically attached to this loyalty object. If a user had saved this
 *  loyalty card, then these linked_object_ids would be automatically pushed to
 *  the user's wallet (unless they turned off the setting to receive such linked
 *  passes). Make sure that objects present in linked_object_ids are already
 *  inserted - if not, calls would fail. Once linked, the linked objects cannot
 *  be unlinked. You cannot link objects belonging to another issuer. There is a
 *  limit to the number of objects that can be linked to a single object. After
 *  the limit is reached, new linked objects in the call will be ignored
 *  silently. Object IDs should follow the format issuer ID. identifier where
 *  the former is issued by Google and the latter is chosen by you.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *linkedObjectIds;

/**
 *  A list of offer objects linked to this loyalty card. The offer objects must
 *  already exist. Offer object IDs should follow the format issuer ID.
 *  identifier where the former is issued by Google and latter is chosen by you.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *linkedOfferIds;

/**
 *  Links module data. If links module data is also defined on the class, both
 *  will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LinksModuleData *linksModuleData;

/**
 *  Note: This field is currently not supported to trigger geo notifications.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LatLongPoint *> *locations GTLR_DEPRECATED;

/** The loyalty reward points label, balance, and type. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LoyaltyPoints *loyaltyPoints;

/**
 *  An array of messages displayed in the app. All users of this object will
 *  receive its associated messages. The maximum number of these fields is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Message *> *messages;

/**
 *  Pass constraints for the object. Includes limiting NFC and screenshot
 *  behaviors.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_PassConstraints *passConstraints;

/** The rotating barcode type and value. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_RotatingBarcode *rotatingBarcode;

/**
 *  Restrictions on the object that needs to be verified before the user tries
 *  to save the pass. Note that this restrictions will only be applied during
 *  save time. If the restrictions changed after a user saves the pass, the new
 *  restrictions will not be applied to an already saved pass.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_SaveRestrictions *saveRestrictions;

/**
 *  The secondary loyalty reward points label, balance, and type. Shown in
 *  addition to the primary loyalty points.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LoyaltyPoints *secondaryLoyaltyPoints;

/**
 *  The value that will be transmitted to a Smart Tap certified terminal over
 *  NFC for this object. The class level fields `enableSmartTap` and
 *  `redemptionIssuers` must also be set up correctly in order for the pass to
 *  support Smart Tap. Only ASCII characters are supported. If this value is not
 *  set but the class level fields `enableSmartTap` and `redemptionIssuers` are
 *  set up correctly, the `barcode.value` or the `accountId` fields are used as
 *  fallback if present.
 */
@property(nonatomic, copy, nullable) NSString *smartTapRedemptionValue;

/**
 *  Required. The state of the object. This field is used to determine how an
 *  object is displayed in the app. For example, an `inactive` object is moved
 *  to the "Expired passes" section.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_LoyaltyObject_State_Active Legacy alias for
 *        `ACTIVE`. Deprecated. (Value: "active")
 *    @arg @c kGTLRWalletobjects_LoyaltyObject_State_Completed Legacy alias for
 *        `COMPLETED`. Deprecated. (Value: "completed")
 *    @arg @c kGTLRWalletobjects_LoyaltyObject_State_Expired Legacy alias for
 *        `EXPIRED`. Deprecated. (Value: "expired")
 *    @arg @c kGTLRWalletobjects_LoyaltyObject_State_Inactive Legacy alias for
 *        `INACTIVE`. Deprecated. (Value: "inactive")
 *    @arg @c kGTLRWalletobjects_LoyaltyObject_State_StateUnspecified Value
 *        "STATE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Text module data. If text module data is also defined on the class, both
 *  will be displayed. The maximum number of these fields displayed is 10 from
 *  the object and 10 from the class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TextModuleData *> *textModulesData;

/**
 *  The time period this object will be `active` and object can be used. An
 *  object's state will be changed to `expired` when this time period has
 *  passed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TimeInterval *validTimeInterval;

/**
 *  Deprecated
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_LoyaltyObjectAddMessageResponse
 */
@interface GTLRWalletobjects_LoyaltyObjectAddMessageResponse : GTLRObject

/** The updated LoyaltyObject resource. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LoyaltyObject *resource;

@end


/**
 *  GTLRWalletobjects_LoyaltyObjectListResponse
 */
@interface GTLRWalletobjects_LoyaltyObjectListResponse : GTLRObject

/** Pagination of the response. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Pagination *pagination;

/** Resources corresponding to the list request. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LoyaltyObject *> *resources;

@end


/**
 *  GTLRWalletobjects_LoyaltyPoints
 */
@interface GTLRWalletobjects_LoyaltyPoints : GTLRObject

/**
 *  The account holder's loyalty point balance, such as "500" or "$10.00".
 *  Recommended maximum length is 7 characters. This is a required field of
 *  `loyaltyPoints` and `secondaryLoyaltyPoints`.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LoyaltyPointsBalance *balance;

/**
 *  The loyalty points label, such as "Points". Recommended maximum length is 9
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *label;

/**
 *  Translated strings for the label. Recommended maximum length is 9
 *  characters.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedLabel;

@end


/**
 *  GTLRWalletobjects_LoyaltyPointsBalance
 */
@interface GTLRWalletobjects_LoyaltyPointsBalance : GTLRObject

/**
 *  The double form of a balance. Only one of these subtypes (string, int,
 *  double, money) should be populated.
 *
 *  Remapped to 'doubleProperty' to avoid language reserved word 'double'.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *doubleProperty;

/**
 *  The integer form of a balance. Only one of these subtypes (string, int,
 *  double, money) should be populated.
 *
 *  Remapped to 'intProperty' to avoid language reserved word 'int'.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *intProperty;

/**
 *  The money form of a balance. Only one of these subtypes (string, int,
 *  double, money) should be populated.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Money *money;

/**
 *  The string form of a balance. Only one of these subtypes (string, int,
 *  double, money) should be populated.
 */
@property(nonatomic, copy, nullable) NSString *string;

@end


/**
 *  A reference to data stored on the filesystem, on GFS or in blobstore.
 */
@interface GTLRWalletobjects_Media : GTLRObject

/**
 *  Deprecated, use one of explicit hash type fields instead. Algorithm used for
 *  calculating the hash. As of 2011/01/21, "MD5" is the only possible value for
 *  this field. New values may be added at any time.
 */
@property(nonatomic, copy, nullable) NSString *algorithm GTLR_DEPRECATED;

/**
 *  Use object_id instead.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *bigstoreObjectRef GTLR_DEPRECATED;

/**
 *  Blobstore v1 reference, set if reference_type is BLOBSTORE_REF This should
 *  be the byte representation of a blobstore.BlobRef. Since Blobstore is
 *  deprecating v1, use blobstore2_info instead. For now, any v2 blob will also
 *  be represented in this field as v1 BlobRef.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *blobRef GTLR_DEPRECATED;

/**
 *  Blobstore v2 info, set if reference_type is BLOBSTORE_REF and it refers to a
 *  v2 blob.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Blobstore2Info *blobstore2Info;

/**
 *  A composite media composed of one or more media objects, set if
 *  reference_type is COMPOSITE_MEDIA. The media length field must be set to the
 *  sum of the lengths of all composite media objects. Note: All composite media
 *  must have length specified.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_CompositeMedia *> *compositeMedia;

/** MIME type of the data */
@property(nonatomic, copy, nullable) NSString *contentType;

/** Extended content type information provided for Scotty uploads. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ContentTypeInfo *contentTypeInfo;

/**
 *  A binary data reference for a media download. Serves as a
 *  technology-agnostic binary reference in some Google infrastructure. This
 *  value is a serialized storage_cosmo.BinaryReference proto. Storing it as
 *  bytes is a hack to get around the fact that the cosmo proto (as well as
 *  others it includes) doesn't support JavaScript. This prevents us from
 *  including the actual type of this field.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *cosmoBinaryReference;

/**
 *  For Scotty Uploads: Scotty-provided hashes for uploads For Scotty Downloads:
 *  (WARNING: DO NOT USE WITHOUT PERMISSION FROM THE SCOTTY TEAM.) A Hash
 *  provided by the agent to be used to verify the data being downloaded.
 *  Currently only supported for inline payloads. Further, only crc32c_hash is
 *  currently supported.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *crc32cHash;

/** Set if reference_type is DIFF_CHECKSUMS_RESPONSE. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_DiffChecksumsResponse *diffChecksumsResponse;

/** Set if reference_type is DIFF_DOWNLOAD_RESPONSE. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_DiffDownloadResponse *diffDownloadResponse;

/** Set if reference_type is DIFF_UPLOAD_REQUEST. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_DiffUploadRequest *diffUploadRequest;

/** Set if reference_type is DIFF_UPLOAD_RESPONSE. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_DiffUploadResponse *diffUploadResponse;

/** Set if reference_type is DIFF_VERSION_RESPONSE. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_DiffVersionResponse *diffVersionResponse;

/** Parameters for a media download. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_DownloadParameters *downloadParameters;

/** Original file name */
@property(nonatomic, copy, nullable) NSString *filename;

/**
 *  Deprecated, use one of explicit hash type fields instead. These two hash
 *  related fields will only be populated on Scotty based media uploads and will
 *  contain the content of the hash group in the NotificationRequest:
 *  http://cs/#google3/blobstore2/api/scotty/service/proto/upload_listener.proto&q=class:Hash
 *  Hex encoded hash value of the uploaded media.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty GTLR_DEPRECATED;

/**
 *  For Scotty uploads only. If a user sends a hash code and the backend has
 *  requested that Scotty verify the upload against the client hash, Scotty will
 *  perform the check on behalf of the backend and will reject it if the hashes
 *  don't match. This is set to true if Scotty performed this verification.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hashVerified;

/**
 *  Media data, set if reference_type is INLINE
 *
 *  Remapped to 'inlineProperty' to avoid language reserved word 'inline'.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *inlineProperty;

/**
 *  |is_potential_retry| is set false only when Scotty is certain that it has
 *  not sent the request before. When a client resumes an upload, this field
 *  must be set true in agent calls, because Scotty cannot be certain that it
 *  has never sent the request before due to potential failure in the session
 *  state persistence.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isPotentialRetry;

/**
 *  Size of the data, in bytes
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/**
 *  Scotty-provided MD5 hash for an upload.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *md5Hash;

/**
 *  Media id to forward to the operation GetMedia. Can be set if reference_type
 *  is GET_MEDIA.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *mediaId;

/** Reference to a TI Blob, set if reference_type is BIGSTORE_REF. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ObjectId *objectId;

/** Path to the data, set if reference_type is PATH */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Describes what the field reference contains.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_Media_ReferenceType_ArbitraryBytes Informs
 *        Scotty to generate a response payload with the size specified in the
 *        length field. The contents of the payload are generated by Scotty and
 *        are undefined. This is useful for testing download speeds between the
 *        user and Scotty without involving a real payload source. Note: range
 *        is not supported when using arbitrary_bytes. (Value:
 *        "ARBITRARY_BYTES")
 *    @arg @c kGTLRWalletobjects_Media_ReferenceType_BigstoreRef Reference
 *        points to a bigstore object (Value: "BIGSTORE_REF")
 *    @arg @c kGTLRWalletobjects_Media_ReferenceType_BlobRef Reference points to
 *        a blobstore object. This could be either a v1 blob_ref or a v2
 *        blobstore2_info. Clients should check blobstore2_info first, since v1
 *        is being deprecated. (Value: "BLOB_REF")
 *    @arg @c kGTLRWalletobjects_Media_ReferenceType_CompositeMedia The content
 *        for this media object is stored across multiple partial media objects
 *        under the composite_media field. (Value: "COMPOSITE_MEDIA")
 *    @arg @c kGTLRWalletobjects_Media_ReferenceType_CosmoBinaryReference
 *        Indicates the data is stored in cosmo_binary_reference. (Value:
 *        "COSMO_BINARY_REFERENCE")
 *    @arg @c kGTLRWalletobjects_Media_ReferenceType_DiffChecksumsResponse
 *        Indicates the data is stored in diff_checksums_response. (Value:
 *        "DIFF_CHECKSUMS_RESPONSE")
 *    @arg @c kGTLRWalletobjects_Media_ReferenceType_DiffDownloadResponse
 *        Indicates the data is stored in diff_download_response. (Value:
 *        "DIFF_DOWNLOAD_RESPONSE")
 *    @arg @c kGTLRWalletobjects_Media_ReferenceType_DiffUploadRequest Indicates
 *        the data is stored in diff_upload_request. (Value:
 *        "DIFF_UPLOAD_REQUEST")
 *    @arg @c kGTLRWalletobjects_Media_ReferenceType_DiffUploadResponse
 *        Indicates the data is stored in diff_upload_response. (Value:
 *        "DIFF_UPLOAD_RESPONSE")
 *    @arg @c kGTLRWalletobjects_Media_ReferenceType_DiffVersionResponse
 *        Indicates the data is stored in diff_version_response. (Value:
 *        "DIFF_VERSION_RESPONSE")
 *    @arg @c kGTLRWalletobjects_Media_ReferenceType_GetMedia Data should be
 *        accessed from the current service using the operation GetMedia.
 *        (Value: "GET_MEDIA")
 *    @arg @c kGTLRWalletobjects_Media_ReferenceType_Inline Data is included
 *        into this proto buffer (Value: "INLINE")
 *    @arg @c kGTLRWalletobjects_Media_ReferenceType_Path Reference contains a
 *        GFS path or a local path. (Value: "PATH")
 */
@property(nonatomic, copy, nullable) NSString *referenceType;

/**
 *  Scotty-provided SHA1 hash for an upload.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *sha1Hash;

/**
 *  Scotty-provided SHA256 hash for an upload.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *sha256Hash;

/**
 *  Time at which the media data was last updated, in milliseconds since UNIX
 *  epoch
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timestamp;

/** A unique fingerprint/version id for the media data */
@property(nonatomic, copy, nullable) NSString *token;

@end


/**
 *  Extra information added to operations that support Scotty media requests.
 */
@interface GTLRWalletobjects_MediaRequestInfo : GTLRObject

/**
 *  The number of current bytes uploaded or downloaded.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentBytes;

/**
 *  Data to be copied to backend requests. Custom data is returned to Scotty in
 *  the agent_state field, which Scotty will then provide in subsequent upload
 *  notifications.
 */
@property(nonatomic, copy, nullable) NSString *customData;

/**
 *  Set if the http request info is diff encoded. The value of this field is the
 *  version number of the base revision. This is corresponding to Apiary's
 *  mediaDiffObjectVersion
 *  (//depot/google3/java/com/google/api/server/media/variable/DiffObjectVersionVariable.java).
 *  See go/esf-scotty-diff-upload for more information.
 */
@property(nonatomic, copy, nullable) NSString *diffObjectVersion;

/**
 *  The existence of the final_status field indicates that this is the last call
 *  to the agent for this request_id.
 *  http://google3/uploader/agent/scotty_agent.proto?l=737&rcl=347601929
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *finalStatus;

/**
 *  The type of notification received from Scotty.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_MediaRequestInfo_NotificationType_End Such
 *        requests signals the end of a request containing media upload. END
 *        should be handled just like normal Insert/Upload requests, that is,
 *        they should process the request and return a complete resource in the
 *        response. Pointers to media data (a GFS path usually) appear in the
 *        relevant fields in the inserted/updated resource. See gdata.Media in
 *        data.proto. (Value: "END")
 *    @arg @c kGTLRWalletobjects_MediaRequestInfo_NotificationType_Error Such
 *        requests indicate that an error occurred while processing the request.
 *        ERROR is only sent to the backend if it is configured to receive them.
 *        It is not guaranteed that all errors will result in this notification
 *        to the backend, even if the backend requests them. Since these
 *        requests are just for informational purposes, the response does not
 *        need to contain anything. (Value: "ERROR")
 *    @arg @c kGTLRWalletobjects_MediaRequestInfo_NotificationType_Progress Such
 *        requests signals that the upload has progressed and that the backend
 *        might want to access the media file specified in relevant fields in
 *        the resource. Only the media field(s) in the inserted/updated resource
 *        are set. The response should either return an error or succeed. On
 *        success, responses don't need to contain anything. (Value: "PROGRESS")
 *    @arg @c kGTLRWalletobjects_MediaRequestInfo_NotificationType_ResponseSent
 *        Such requests occur after an END and signal that the response has been
 *        sent back to the client. RESPONSE_SENT is only sent to the backend if
 *        it is configured to receive them. The response does not need to
 *        contain anything. (Value: "RESPONSE_SENT")
 *    @arg @c kGTLRWalletobjects_MediaRequestInfo_NotificationType_Start Such
 *        requests signals the start of a request containing media upload. Only
 *        the media field(s) in the inserted/updated resource are set. The
 *        response should either return an error or succeed. On success,
 *        responses don't need to contain anything. (Value: "START")
 */
@property(nonatomic, copy, nullable) NSString *notificationType;

/** The Scotty request ID. */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  The partition of the Scotty server handling this request. type is
 *  uploader_service.RequestReceivedParamsServingInfo
 *  LINT.IfChange(request_received_params_serving_info_annotations)
 *  LINT.ThenChange()
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *requestReceivedParamsServingInfo;

/**
 *  The total size of the file.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytes;

/**
 *  Whether the total bytes field contains an estimated data.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalBytesIsEstimated;

@end


/**
 *  A message that will be displayed with a Valuable
 */
@interface GTLRWalletobjects_Message : GTLRObject

/** The message body. */
@property(nonatomic, copy, nullable) NSString *body;

/**
 *  The period of time that the message will be displayed to users. You can
 *  define both a `startTime` and `endTime` for each message. A message is
 *  displayed immediately after a Wallet Object is inserted unless a `startTime`
 *  is set. The message will appear in a list of messages indefinitely if
 *  `endTime` is not provided.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TimeInterval *displayInterval;

/** The message header. */
@property(nonatomic, copy, nullable) NSString *header;

/**
 *  The ID associated with a message. This field is here to enable ease of
 *  management of messages. Notice ID values could possibly duplicate across
 *  multiple messages in the same class/instance, and care must be taken to
 *  select a reasonable ID for each message.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#walletObjectMessage"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/** Translated strings for the message body. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedBody;

/** Translated strings for the message header. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedHeader;

/**
 *  The message type.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_Message_MessageType_ExpirationNotification
 *        Legacy alias for `EXPIRATION_NOTIFICATION`. Deprecated. (Value:
 *        "expirationNotification")
 *    @arg @c kGTLRWalletobjects_Message_MessageType_MessageTypeUnspecified
 *        Value "MESSAGE_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_Message_MessageType_Text Legacy alias for
 *        `TEXT`. Deprecated. (Value: "text")
 *    @arg @c kGTLRWalletobjects_Message_MessageType_TextAndNotify Renders the
 *        message as text on the card details screen and as an Android
 *        notification. (Value: "TEXT_AND_NOTIFY")
 */
@property(nonatomic, copy, nullable) NSString *messageType;

@end


/**
 *  GTLRWalletobjects_ModifyLinkedOfferObjects
 */
@interface GTLRWalletobjects_ModifyLinkedOfferObjects : GTLRObject

/** The linked offer object ids to add to the object. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *addLinkedOfferObjectIds;

/** The linked offer object ids to remove from the object. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *removeLinkedOfferObjectIds;

@end


/**
 *  GTLRWalletobjects_ModifyLinkedOfferObjectsRequest
 */
@interface GTLRWalletobjects_ModifyLinkedOfferObjectsRequest : GTLRObject

/** The linked offer object ids to add or remove from the object. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ModifyLinkedOfferObjects *linkedOfferObjectIds;

@end


/**
 *  GTLRWalletobjects_Money
 */
@interface GTLRWalletobjects_Money : GTLRObject

/** The currency code, such as "USD" or "EUR." */
@property(nonatomic, copy, nullable) NSString *currencyCode;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#money"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  The unit of money amount in micros. For example, $1 USD would be represented
 *  as 1000000 micros.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *micros;

@end


/**
 *  Indicates if the object needs to have notification enabled. We support only
 *  one of ExpiryNotification/UpcomingNotification. `expiryNotification` takes
 *  precedence over `upcomingNotification`. In other words if
 *  `expiryNotification` is set, we ignore the `upcomingNotification` field.
 */
@interface GTLRWalletobjects_Notifications : GTLRObject

/**
 *  A notification would be triggered at a specific time before the card
 *  expires.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ExpiryNotification *expiryNotification;

/**
 *  A notification would be triggered at a specific time before the card becomes
 *  usable.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_UpcomingNotification *upcomingNotification;

@end


/**
 *  This is a copy of the tech.blob.ObjectId proto, which could not be used
 *  directly here due to transitive closure issues with JavaScript support; see
 *  http://b/8801763.
 */
@interface GTLRWalletobjects_ObjectId : GTLRObject

/** The name of the bucket to which this object belongs. */
@property(nonatomic, copy, nullable) NSString *bucketName;

/**
 *  Generation of the object. Generations are monotonically increasing across
 *  writes, allowing them to be be compared to determine which generation is
 *  newer. If this is omitted in a request, then you are requesting the live
 *  object. See http://go/bigstore-versions
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/** The name of the object. */
@property(nonatomic, copy, nullable) NSString *objectName;

@end


/**
 *  GTLRWalletobjects_OfferClass
 */
@interface GTLRWalletobjects_OfferClass : GTLRObject

/**
 *  Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowMultipleUsersPerObject GTLR_DEPRECATED;

/**
 *  Optional app or website link that will be displayed as a button on the front
 *  of the pass. If AppLinkData is provided for the corresponding object that
 *  will be used instead.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkData *appLinkData;

/**
 *  Callback options to be used to call the issuer back for every save/delete of
 *  an object for this class by the end-user. All objects of this class are
 *  eligible for the callback.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CallbackOptions *callbackOptions;

/**
 *  Template information about how the class should be displayed. If unset,
 *  Google will fallback to a default set of fields to display.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ClassTemplateInfo *classTemplateInfo;

/**
 *  Country code used to display the card's country (when the user is not in
 *  that country), as well as to display localized content when content is not
 *  available in the user's locale.
 */
@property(nonatomic, copy, nullable) NSString *countryCode;

/** The details of the offer. */
@property(nonatomic, copy, nullable) NSString *details;

/**
 *  Identifies whether this class supports Smart Tap. The `redemptionIssuers`
 *  and object level `smartTapRedemptionLevel` fields must also be set up
 *  correctly in order for a pass to support Smart Tap.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableSmartTap;

/**
 *  The fine print or terms of the offer, such as "20% off any t-shirt at Adam's
 *  Apparel."
 */
@property(nonatomic, copy, nullable) NSString *finePrint;

/**
 *  The help link for the offer, such as `http://myownpersonaldomain.com/help`
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Uri *helpUri;

/**
 *  Optional banner image displayed on the front of the card. If none is
 *  present, nothing will be displayed. The image will display at 100% width.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *heroImage;

/**
 *  The background color for the card. If not set the dominant color of the hero
 *  image is used, and if no hero image is set, the dominant color of the logo
 *  is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as
 *  `#ffcc00`. You can also use the shorthand version of the RGB triplet which
 *  is #rgb, such as `#fc0`.
 */
@property(nonatomic, copy, nullable) NSString *hexBackgroundColor;

/**
 *  The URI of your application's home page. Populating the URI in this field
 *  results in the exact same behavior as populating an URI in linksModuleData
 *  (when an object is rendered, a link to the homepage is shown in what would
 *  usually be thought of as the linksModuleData section of the object).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Uri *homepageUri;

/**
 *  Required. The unique identifier for a class. This ID must be unique across
 *  all classes from an issuer. This value should follow the format issuer ID.
 *  identifier where the former is issued by Google and latter is chosen by you.
 *  Your unique identifier should only include alphanumeric characters, '.',
 *  '_', or '-'.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Image module data. The maximum number of these fields displayed is 1 from
 *  object level and 1 for class object level.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_ImageModuleData *> *imageModulesData;

/** Deprecated. Use textModulesData instead. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_InfoModuleData *infoModuleData GTLR_DEPRECATED;

/**
 *  Required. The issuer name. Recommended maximum length is 20 characters to
 *  ensure full string is displayed on smaller screens.
 */
@property(nonatomic, copy, nullable) NSString *issuerName;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#offerClass"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  Links module data. If links module data is also defined on the object, both
 *  will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LinksModuleData *linksModuleData;

/** Translated strings for the details. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedDetails;

/** Translated strings for the fine_print. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedFinePrint;

/**
 *  Translated strings for the issuer_name. Recommended maximum length is 20
 *  characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedIssuerName;

/**
 *  Translated strings for the provider. Recommended maximum length is 12
 *  characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedProvider;

/**
 *  Translated strings for the short title. Recommended maximum length is 20
 *  characters.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedShortTitle;

/**
 *  Translated strings for the title. Recommended maximum length is 60
 *  characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedTitle;

/**
 *  Note: This field is currently not supported to trigger geo notifications.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LatLongPoint *> *locations GTLR_DEPRECATED;

/**
 *  An array of messages displayed in the app. All users of this object will
 *  receive its associated messages. The maximum number of these fields is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Message *> *messages;

/**
 *  Identifies whether multiple users and devices will save the same object
 *  referencing this class.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_OfferClass_MultipleDevicesAndHoldersAllowedStatus_MultipleHolders
 *        Legacy alias for `MULTIPLE_HOLDERS`. Deprecated. (Value:
 *        "multipleHolders")
 *    @arg @c kGTLRWalletobjects_OfferClass_MultipleDevicesAndHoldersAllowedStatus_OneUserAllDevices
 *        Legacy alias for `ONE_USER_ALL_DEVICES`. Deprecated. (Value:
 *        "oneUserAllDevices")
 *    @arg @c kGTLRWalletobjects_OfferClass_MultipleDevicesAndHoldersAllowedStatus_OneUserOneDevice
 *        Legacy alias for `ONE_USER_ONE_DEVICE`. Deprecated. (Value:
 *        "oneUserOneDevice")
 *    @arg @c kGTLRWalletobjects_OfferClass_MultipleDevicesAndHoldersAllowedStatus_StatusUnspecified
 *        Unspecified preference. (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *multipleDevicesAndHoldersAllowedStatus;

/**
 *  Required. The offer provider (either the aggregator name or merchant name).
 *  Recommended maximum length is 12 characters to ensure full string is
 *  displayed on smaller screens.
 */
@property(nonatomic, copy, nullable) NSString *provider;

/**
 *  Required. The redemption channels applicable to this offer.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_OfferClass_RedemptionChannel_Both Legacy alias
 *        for `BOTH`. Deprecated. (Value: "both")
 *    @arg @c kGTLRWalletobjects_OfferClass_RedemptionChannel_Instore Legacy
 *        alias for `INSTORE`. Deprecated. (Value: "instore")
 *    @arg @c kGTLRWalletobjects_OfferClass_RedemptionChannel_Online Legacy
 *        alias for `ONLINE`. Deprecated. (Value: "online")
 *    @arg @c kGTLRWalletobjects_OfferClass_RedemptionChannel_RedemptionChannelUnspecified
 *        Value "REDEMPTION_CHANNEL_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_OfferClass_RedemptionChannel_TemporaryPriceReduction
 *        Legacy alias for `TEMPORARY_PRICE_REDUCTION`. Deprecated. (Value:
 *        "temporaryPriceReduction")
 */
@property(nonatomic, copy, nullable) NSString *redemptionChannel;

/**
 *  Identifies which redemption issuers can redeem the pass over Smart Tap.
 *  Redemption issuers are identified by their issuer ID. Redemption issuers
 *  must have at least one Smart Tap key configured. The `enableSmartTap` and
 *  object level `smartTapRedemptionLevel` fields must also be set up correctly
 *  in order for a pass to support Smart Tap.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *redemptionIssuers;

/**
 *  The review comments set by the platform when a class is marked `approved` or
 *  `rejected`.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Review *review;

/**
 *  Required. The status of the class. This field can be set to `draft` or The
 *  status of the class. This field can be set to `draft` or `underReview` using
 *  the insert, patch, or update API calls. Once the review state is changed
 *  from `draft` it may not be changed back to `draft`. You should keep this
 *  field to `draft` when the class is under development. A `draft` class cannot
 *  be used to create any object. You should set this field to `underReview`
 *  when you believe the class is ready for use. The platform will automatically
 *  set this field to `approved` and it can be immediately used to create or
 *  migrate objects. When updating an already `approved` class you should keep
 *  setting this field to `underReview`.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_OfferClass_ReviewStatus_Approved Legacy alias
 *        for `APPROVED`. Deprecated. (Value: "approved")
 *    @arg @c kGTLRWalletobjects_OfferClass_ReviewStatus_Draft Legacy alias for
 *        `DRAFT`. Deprecated. (Value: "draft")
 *    @arg @c kGTLRWalletobjects_OfferClass_ReviewStatus_Rejected Legacy alias
 *        for `REJECTED`. Deprecated. (Value: "rejected")
 *    @arg @c kGTLRWalletobjects_OfferClass_ReviewStatus_ReviewStatusUnspecified
 *        Value "REVIEW_STATUS_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_OfferClass_ReviewStatus_UnderReview Legacy
 *        alias for `UNDER_REVIEW`. Deprecated. (Value: "underReview")
 */
@property(nonatomic, copy, nullable) NSString *reviewStatus;

/**
 *  Optional information about the security animation. If this is set a security
 *  animation will be rendered on pass details.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_SecurityAnimation *securityAnimation;

/**
 *  A shortened version of the title of the offer, such as "20% off," shown to
 *  users as a quick reference to the offer contents. Recommended maximum length
 *  is 20 characters.
 */
@property(nonatomic, copy, nullable) NSString *shortTitle;

/**
 *  Text module data. If text module data is also defined on the class, both
 *  will be displayed. The maximum number of these fields displayed is 10 from
 *  the object and 10 from the class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TextModuleData *> *textModulesData;

/**
 *  Required. The title of the offer, such as "20% off any t-shirt." Recommended
 *  maximum length is 60 characters to ensure full string is displayed on
 *  smaller screens.
 */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  The title image of the offer. This image is displayed in both the details
 *  and list views of the app.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *titleImage;

/**
 *  Deprecated
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version GTLR_DEPRECATED;

/**
 *  View Unlock Requirement options for the offer.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_OfferClass_ViewUnlockRequirement_UnlockNotRequired
 *        Default behavior for all the existing Passes if ViewUnlockRequirement
 *        is not set. (Value: "UNLOCK_NOT_REQUIRED")
 *    @arg @c kGTLRWalletobjects_OfferClass_ViewUnlockRequirement_UnlockRequiredToView
 *        Requires the user to unlock their device each time the pass is viewed.
 *        If the user removes their device lock after saving the pass, then they
 *        will be prompted to create a device lock before the pass can be
 *        viewed. (Value: "UNLOCK_REQUIRED_TO_VIEW")
 *    @arg @c kGTLRWalletobjects_OfferClass_ViewUnlockRequirement_ViewUnlockRequirementUnspecified
 *        Default value, same as UNLOCK_NOT_REQUIRED. (Value:
 *        "VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *viewUnlockRequirement;

/**
 *  The wide title image of the offer. When provided, this will be used in place
 *  of the title image in the top left of the card view.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *wideTitleImage;

/** Deprecated. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *wordMark GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_OfferClassAddMessageResponse
 */
@interface GTLRWalletobjects_OfferClassAddMessageResponse : GTLRObject

/** The updated OfferClass resource. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_OfferClass *resource;

@end


/**
 *  GTLRWalletobjects_OfferClassListResponse
 */
@interface GTLRWalletobjects_OfferClassListResponse : GTLRObject

/** Pagination of the response. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Pagination *pagination;

/** Resources corresponding to the list request. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_OfferClass *> *resources;

@end


/**
 *  GTLRWalletobjects_OfferObject
 */
@interface GTLRWalletobjects_OfferObject : GTLRObject

/**
 *  Optional app or website link that will be displayed as a button on the front
 *  of the pass. If AppLinkData is provided for the corresponding class only
 *  object AppLinkData will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkData *appLinkData;

/** The barcode type and value. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Barcode *barcode;

/**
 *  Required. The class associated with this object. The class must be of the
 *  same type as this object, must already exist, and must be approved. Class
 *  IDs should follow the format issuer ID.identifier where the former is issued
 *  by Google and latter is chosen by you.
 */
@property(nonatomic, copy, nullable) NSString *classId;

/**
 *  A copy of the inherited fields of the parent class. These fields are
 *  retrieved during a GET.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_OfferClass *classReference;

/**
 *  Indicates if notifications should explicitly be suppressed. If this field is
 *  set to true, regardless of the `messages` field, expiration notifications to
 *  the user will be suppressed. By default, this field is set to false.
 *  Currently, this can only be set for offers.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableExpirationNotification;

/** Information that controls how passes are grouped together. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_GroupingInfo *groupingInfo;

/**
 *  Whether this object is currently linked to a single device. This field is
 *  set by the platform when a user saves the object, linking it to their
 *  device. Intended for use by select partners. Contact support for additional
 *  information.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasLinkedDevice;

/**
 *  Indicates if the object has users. This field is set by the platform.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasUsers;

/**
 *  Optional banner image displayed on the front of the card. If none is
 *  present, hero image of the class, if present, will be displayed. If hero
 *  image of the class is also not present, nothing will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *heroImage;

/**
 *  Required. The unique identifier for an object. This ID must be unique across
 *  all objects from an issuer. This value should follow the format issuer
 *  ID.identifier where the former is issued by Google and latter is chosen by
 *  you. The unique identifier should only include alphanumeric characters, '.',
 *  '_', or '-'.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Image module data. The maximum number of these fields displayed is 1 from
 *  object level and 1 for class object level.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_ImageModuleData *> *imageModulesData;

/** Deprecated. Use textModulesData instead. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_InfoModuleData *infoModuleData;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#offerObject"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  linked_object_ids are a list of other objects such as event ticket, loyalty,
 *  offer, generic, giftcard, transit and boarding pass that should be
 *  automatically attached to this offer object. If a user had saved this offer,
 *  then these linked_object_ids would be automatically pushed to the user's
 *  wallet (unless they turned off the setting to receive such linked passes).
 *  Make sure that objects present in linked_object_ids are already inserted -
 *  if not, calls would fail. Once linked, the linked objects cannot be
 *  unlinked. You cannot link objects belonging to another issuer. There is a
 *  limit to the number of objects that can be linked to a single object. After
 *  the limit is reached, new linked objects in the call will be ignored
 *  silently. Object IDs should follow the format issuer ID.identifier where the
 *  former is issued by Google and the latter is chosen by you.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *linkedObjectIds;

/**
 *  Links module data. If links module data is also defined on the class, both
 *  will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LinksModuleData *linksModuleData;

/**
 *  Note: This field is currently not supported to trigger geo notifications.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LatLongPoint *> *locations;

/**
 *  An array of messages displayed in the app. All users of this object will
 *  receive its associated messages. The maximum number of these fields is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Message *> *messages;

/**
 *  Pass constraints for the object. Includes limiting NFC and screenshot
 *  behaviors.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_PassConstraints *passConstraints;

/** The rotating barcode type and value. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_RotatingBarcode *rotatingBarcode;

/**
 *  Restrictions on the object that needs to be verified before the user tries
 *  to save the pass. Note that this restrictions will only be applied during
 *  save time. If the restrictions changed after a user saves the pass, the new
 *  restrictions will not be applied to an already saved pass.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_SaveRestrictions *saveRestrictions;

/**
 *  The value that will be transmitted to a Smart Tap certified terminal over
 *  NFC for this object. The class level fields `enableSmartTap` and
 *  `redemptionIssuers` must also be set up correctly in order for the pass to
 *  support Smart Tap. Only ASCII characters are supported.
 */
@property(nonatomic, copy, nullable) NSString *smartTapRedemptionValue;

/**
 *  Required. The state of the object. This field is used to determine how an
 *  object is displayed in the app. For example, an `inactive` object is moved
 *  to the "Expired passes" section.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_OfferObject_State_Active Legacy alias for
 *        `ACTIVE`. Deprecated. (Value: "active")
 *    @arg @c kGTLRWalletobjects_OfferObject_State_Completed Legacy alias for
 *        `COMPLETED`. Deprecated. (Value: "completed")
 *    @arg @c kGTLRWalletobjects_OfferObject_State_Expired Legacy alias for
 *        `EXPIRED`. Deprecated. (Value: "expired")
 *    @arg @c kGTLRWalletobjects_OfferObject_State_Inactive Legacy alias for
 *        `INACTIVE`. Deprecated. (Value: "inactive")
 *    @arg @c kGTLRWalletobjects_OfferObject_State_StateUnspecified Value
 *        "STATE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Text module data. If text module data is also defined on the class, both
 *  will be displayed. The maximum number of these fields displayed is 10 from
 *  the object and 10 from the class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TextModuleData *> *textModulesData;

/**
 *  The time period this object will be `active` and object can be used. An
 *  object's state will be changed to `expired` when this time period has
 *  passed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TimeInterval *validTimeInterval;

/**
 *  Deprecated
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_OfferObjectAddMessageResponse
 */
@interface GTLRWalletobjects_OfferObjectAddMessageResponse : GTLRObject

/** The updated OfferObject resource. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_OfferObject *resource;

@end


/**
 *  GTLRWalletobjects_OfferObjectListResponse
 */
@interface GTLRWalletobjects_OfferObjectListResponse : GTLRObject

/** Pagination of the response. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Pagination *pagination;

/** Resources corresponding to the list request. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_OfferObject *> *resources;

@end


/**
 *  GTLRWalletobjects_Pagination
 */
@interface GTLRWalletobjects_Pagination : GTLRObject

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#pagination"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/** Page token to send to fetch the next page. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Number of results returned in this page.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resultsPerPage;

@end


/**
 *  Container for any constraints that may be placed on passes.
 */
@interface GTLRWalletobjects_PassConstraints : GTLRObject

/** The NFC constraints for the pass. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *nfcConstraint;

/**
 *  The screenshot eligibility for the pass.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_PassConstraints_ScreenshotEligibility_Eligible
 *        Default behavior for all existing Passes if ScreenshotEligibility is
 *        not set. Allows screenshots to be taken on Android devices. (Value:
 *        "ELIGIBLE")
 *    @arg @c kGTLRWalletobjects_PassConstraints_ScreenshotEligibility_Ineligible
 *        Disallows screenshots to be taken on Android devices. Note that older
 *        versions of Wallet may still allow screenshots to be taken. (Value:
 *        "INELIGIBLE")
 *    @arg @c kGTLRWalletobjects_PassConstraints_ScreenshotEligibility_ScreenshotEligibilityUnspecified
 *        Default value, same as ELIGIBLE. (Value:
 *        "SCREENSHOT_ELIGIBILITY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *screenshotEligibility;

@end


/**
 *  GTLRWalletobjects_Permission
 */
@interface GTLRWalletobjects_Permission : GTLRObject

/**
 *  The email address of the user, group, or service account to which this
 *  permission refers to.
 */
@property(nonatomic, copy, nullable) NSString *emailAddress;

/**
 *  The role granted by this permission.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_Permission_Role_Owner Legacy alias for `OWNER`.
 *        Deprecated. (Value: "owner")
 *    @arg @c kGTLRWalletobjects_Permission_Role_Reader Legacy alias for
 *        `READER`. Deprecated. (Value: "reader")
 *    @arg @c kGTLRWalletobjects_Permission_Role_RoleUnspecified Value
 *        "ROLE_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_Permission_Role_Writer Legacy alias for
 *        `WRITER`. Deprecated. (Value: "writer")
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  GTLRWalletobjects_Permissions
 */
@interface GTLRWalletobjects_Permissions : GTLRObject

/**
 *  ID of the issuer the list of permissions refer to.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *issuerId;

/** The complete list of permissions for the issuer account. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Permission *> *permissions;

@end


/**
 *  GTLRWalletobjects_PurchaseDetails
 */
@interface GTLRWalletobjects_PurchaseDetails : GTLRObject

/** ID of the account used to purchase the ticket. */
@property(nonatomic, copy, nullable) NSString *accountId;

/**
 *  The confirmation code for the purchase. This may be the same for multiple
 *  different tickets and is used to group tickets together.
 */
@property(nonatomic, copy, nullable) NSString *confirmationCode;

/**
 *  The purchase date/time of the ticket. This is an ISO 8601 extended format
 *  date/time, with or without an offset. Time may be specified up to nanosecond
 *  precision. Offsets may be specified with seconds precision (even though
 *  offset seconds is not part of ISO 8601). For example:
 *  `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the
 *  23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would
 *  be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4
 *  hours before UTC (same instant in time as the above example). If the event
 *  were in New York, this would be the equivalent of Eastern Daylight Time
 *  (EDT). Remember that offset varies in regions that observe Daylight Saving
 *  Time (or Summer Time), depending on the time of the year.
 *  `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the
 *  19th hour of April 12th, 1985 with no offset information. Without offset
 *  information, some rich features may not be available.
 */
@property(nonatomic, copy, nullable) NSString *purchaseDateTime;

/**
 *  Receipt number/identifier for tracking the ticket purchase via the body that
 *  sold the ticket.
 */
@property(nonatomic, copy, nullable) NSString *purchaseReceiptNumber;

/** The cost of the ticket. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TicketCost *ticketCost;

@end


/**
 *  GTLRWalletobjects_ReservationInfo
 */
@interface GTLRWalletobjects_ReservationInfo : GTLRObject

/**
 *  Confirmation code needed to check into this flight. This is the number that
 *  the passenger would enter into a kiosk at the airport to look up the flight
 *  and print a boarding pass.
 */
@property(nonatomic, copy, nullable) NSString *confirmationCode;

/** E-ticket number. */
@property(nonatomic, copy, nullable) NSString *eticketNumber;

/** Frequent flyer membership information. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_FrequentFlyerInfo *frequentFlyerInfo;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#reservationInfo"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_Resources
 */
@interface GTLRWalletobjects_Resources : GTLRObject

/** A list of event ticket classes. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_EventTicketClass *> *eventTicketClasses;

/** A list of event ticket objects. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_EventTicketObject *> *eventTicketObjects;

/** A list of flight classes. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_FlightClass *> *flightClasses;

/** A list of flight objects. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_FlightObject *> *flightObjects;

/** A list of generic classes. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_GenericClass *> *genericClasses;

/** A list of generic objects. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_GenericObject *> *genericObjects;

/** A list of gift card classes. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_GiftCardClass *> *giftCardClasses;

/** A list of gift card objects. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_GiftCardObject *> *giftCardObjects;

/** A list of loyalty classes. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LoyaltyClass *> *loyaltyClasses;

/** A list of loyalty objects. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LoyaltyObject *> *loyaltyObjects;

/** A list of offer classes. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_OfferClass *> *offerClasses;

/** A list of offer objects. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_OfferObject *> *offerObjects;

/** A list of transit classes. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TransitClass *> *transitClasses;

/** A list of transit objects. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TransitObject *> *transitObjects;

@end


/**
 *  GTLRWalletobjects_Review
 */
@interface GTLRWalletobjects_Review : GTLRObject

@property(nonatomic, copy, nullable) NSString *comments;

@end


/**
 *  GTLRWalletobjects_RotatingBarcode
 */
@interface GTLRWalletobjects_RotatingBarcode : GTLRObject

/**
 *  An optional text that will override the default text that shows under the
 *  barcode. This field is intended for a human readable equivalent of the
 *  barcode value, used when the barcode cannot be scanned.
 */
@property(nonatomic, copy, nullable) NSString *alternateText;

/**
 *  Input only. NOTE: This feature is only available for the transit vertical.
 *  Optional set of initial rotating barcode values. This allows a small subset
 *  of barcodes to be included with the object. Further rotating barcode values
 *  must be uploaded with the UploadRotatingBarcodeValues endpoint.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_RotatingBarcodeValues *initialRotatingBarcodeValues;

/**
 *  The render encoding for the barcode. When specified, barcode is rendered in
 *  the given encoding. Otherwise best known encoding is chosen by Google.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_RotatingBarcode_RenderEncoding_RenderEncodingUnspecified
 *        Value "RENDER_ENCODING_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_RotatingBarcode_RenderEncoding_Utf8 UTF_8
 *        encoding for barcodes. This is only supported for barcode type qrCode.
 *        (Value: "UTF_8")
 */
@property(nonatomic, copy, nullable) NSString *renderEncoding;

/**
 *  Optional text that will be shown when the barcode is hidden behind a click
 *  action. This happens in cases where a pass has Smart Tap enabled. If not
 *  specified, a default is chosen by Google.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *showCodeText;

/** Details used to evaluate the {totp_value_n} substitutions. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_RotatingBarcodeTotpDetails *totpDetails;

/**
 *  The type of this barcode.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_RotatingBarcode_Type_Aztec Legacy alias for
 *        `AZTEC`. Deprecated. Not supported for Rotating Barcodes. (Value:
 *        "aztec")
 *    @arg @c kGTLRWalletobjects_RotatingBarcode_Type_BarcodeTypeUnspecified
 *        Value "BARCODE_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_RotatingBarcode_Type_Codabar Legacy alias for
 *        `CODABAR`. Deprecated. Not supported for Rotating Barcodes. (Value:
 *        "codabar")
 *    @arg @c kGTLRWalletobjects_RotatingBarcode_Type_Code128 Legacy alias for
 *        `CODE_128`. Deprecated. Not supported for Rotating Barcodes. (Value:
 *        "code128")
 *    @arg @c kGTLRWalletobjects_RotatingBarcode_Type_Code39 Legacy alias for
 *        `CODE_39`. Deprecated. Not supported for Rotating Barcodes. (Value:
 *        "code39")
 *    @arg @c kGTLRWalletobjects_RotatingBarcode_Type_DataMatrix Legacy alias
 *        for `DATA_MATRIX`. Deprecated. Not supported for Rotating Barcodes.
 *        (Value: "dataMatrix")
 *    @arg @c kGTLRWalletobjects_RotatingBarcode_Type_Ean13 Legacy alias for
 *        `EAN_13`. Deprecated. Not supported for Rotating Barcodes. (Value:
 *        "EAN13")
 *    @arg @c kGTLRWalletobjects_RotatingBarcode_Type_Ean8 Legacy alias for
 *        `EAN_8`. Deprecated. Not supported for Rotating Barcodes. (Value:
 *        "ean8")
 *    @arg @c kGTLRWalletobjects_RotatingBarcode_Type_Itf14 Legacy alias for
 *        `ITF_14`. Deprecated. Not supported for Rotating Barcodes. (Value:
 *        "itf14")
 *    @arg @c kGTLRWalletobjects_RotatingBarcode_Type_Pdf417 Legacy alias for
 *        `PDF_417`. Deprecated. (Value: "PDF417")
 *    @arg @c kGTLRWalletobjects_RotatingBarcode_Type_Qrcode Legacy alias for
 *        `QR_CODE`. Deprecated. (Value: "qrcode")
 *    @arg @c kGTLRWalletobjects_RotatingBarcode_Type_QrCode Legacy alias for
 *        `QR_CODE`. Deprecated. (Value: "qrCode")
 *    @arg @c kGTLRWalletobjects_RotatingBarcode_Type_TextOnly Legacy alias for
 *        `TEXT_ONLY`. Deprecated. Not supported for Rotating Barcodes. (Value:
 *        "textOnly")
 *    @arg @c kGTLRWalletobjects_RotatingBarcode_Type_UpcA Legacy alias for
 *        `UPC_A`. Deprecated. Not supported for Rotating Barcodes. (Value:
 *        "upcA")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  String encoded barcode value. This string supports the following
 *  substitutions: * {totp_value_n}: Replaced with the TOTP value (see
 *  TotpDetails.parameters). * {totp_timestamp_millis}: Replaced with the
 *  timestamp (millis since epoch) at which the barcode was generated. *
 *  {totp_timestamp_seconds}: Replaced with the timestamp (seconds since epoch)
 *  at which the barcode was generated.
 */
@property(nonatomic, copy, nullable) NSString *valuePattern;

@end


/**
 *  Configuration for the time-based OTP substitutions. See
 *  https://tools.ietf.org/html/rfc6238
 */
@interface GTLRWalletobjects_RotatingBarcodeTotpDetails : GTLRObject

/**
 *  The TOTP algorithm used to generate the OTP.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_RotatingBarcodeTotpDetails_Algorithm_TotpAlgorithmUnspecified
 *        Value "TOTP_ALGORITHM_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_RotatingBarcodeTotpDetails_Algorithm_TotpSha1
 *        TOTP algorithm from RFC 6238 with the SHA1 hash function (Value:
 *        "TOTP_SHA1")
 */
@property(nonatomic, copy, nullable) NSString *algorithm;

/**
 *  The TOTP parameters for each of the {totp_value_*} substitutions. The
 *  TotpParameters at index n is used for the {totp_value_n} substitution.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_RotatingBarcodeTotpDetailsTotpParameters *> *parameters;

/**
 *  The time interval used for the TOTP value generation, in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *periodMillis;

@end


/**
 *  Configuration for the key and value length. See
 *  https://www.rfc-editor.org/rfc/rfc4226#section-5.3
 */
@interface GTLRWalletobjects_RotatingBarcodeTotpDetailsTotpParameters : GTLRObject

/**
 *  The secret key used for the TOTP value generation, encoded as a Base16
 *  string.
 */
@property(nonatomic, copy, nullable) NSString *key;

/**
 *  The length of the TOTP value in decimal digits.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valueLength;

@end


/**
 *  A payload containing many barcode values and start date/time.
 */
@interface GTLRWalletobjects_RotatingBarcodeValues : GTLRObject

/**
 *  Required. The amount of time each barcode is valid for.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *periodMillis;

/**
 *  Required. The date/time the first barcode is valid from. Barcodes will be
 *  rotated through using period_millis defined on the object's
 *  RotatingBarcodeValueInfo. This is an ISO 8601 extended format date/time,
 *  with an offset. Time may be specified up to nanosecond precision. Offsets
 *  may be specified with seconds precision (even though offset seconds is not
 *  part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20
 *  minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
 *  `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after
 *  the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time
 *  as the above example). If the event were in New York, this would be the
 *  equivalent of Eastern Daylight Time (EDT). Remember that offset varies in
 *  regions that observe Daylight Saving Time (or Summer Time), depending on the
 *  time of the year.
 */
@property(nonatomic, copy, nullable) NSString *startDateTime;

/**
 *  Required. The values to encode in the barcode. At least one value is
 *  required.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  Defines restrictions on the object that will be verified during save. Note:
 *  this is an advanced feature, please contact Google for implementation
 *  support.
 */
@interface GTLRWalletobjects_SaveRestrictions : GTLRObject

/**
 *  Restrict the save of the referencing object to the given email address only.
 *  This is the hex output of SHA256 sum of the email address, all lowercase and
 *  without any notations like "." or "+", except "\@". For example, for
 *  example\@example.com, this value will be
 *  31c5543c1734d25c7206f5fd591525d0295bec6fe84ff82f946a34fe970a1e66 and for
 *  Example\@example.com, this value will be
 *  bc34f262c93ad7122763684ccea6f07fb7f5d8a2d11e60ce15a6f43fe70ce632 If email
 *  address of the logged-in user who tries to save this pass does not match
 *  with the defined value here, users won't be allowed to save this pass. They
 *  will instead be prompted with an error to contact the issuer. This
 *  information should be gathered from the user with an explicit consent via
 *  Sign in with Google integration
 *  https://developers.google.com/identity/authentication. Please contact with
 *  support before using Save Restrictions.
 */
@property(nonatomic, copy, nullable) NSString *restrictToEmailSha256;

@end


/**
 *  GTLRWalletobjects_SecurityAnimation
 */
@interface GTLRWalletobjects_SecurityAnimation : GTLRObject

/**
 *  Type of animation.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_SecurityAnimation_AnimationType_AnimationUnspecified
 *        Value "ANIMATION_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_SecurityAnimation_AnimationType_FoilShimmer
 *        Legacy alias for `FOIL_SHIMMER`. Deprecated. (Value: "foilShimmer")
 */
@property(nonatomic, copy, nullable) NSString *animationType;

@end


/**
 *  GTLRWalletobjects_SignUpInfo
 */
@interface GTLRWalletobjects_SignUpInfo : GTLRObject

/** ID of the class the user can sign up for. */
@property(nonatomic, copy, nullable) NSString *classId;

@end


/**
 *  GTLRWalletobjects_SmartTap
 */
@interface GTLRWalletobjects_SmartTap : GTLRObject

/**
 *  The unique identifier for a smart tap. This value should follow the format
 *  issuer ID.identifier where the former is issued by Google and latter is the
 *  Smart Tap id. The Smart Tap id is a Base64 encoded string which represents
 *  the id which was generated by the Google Pay app.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Communication from merchant to user. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_IssuerToUserInfo *> *infos;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#smartTap"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  Smart Tap merchant ID of who engaged in the Smart Tap interaction.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *merchantId;

@end


/**
 *  GTLRWalletobjects_SmartTapMerchantData
 */
@interface GTLRWalletobjects_SmartTapMerchantData : GTLRObject

/**
 *  Available only to Smart Tap enabled partners. Contact support for additional
 *  guidance.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_AuthenticationKey *> *authenticationKeys;

/**
 *  Available only to Smart Tap enabled partners. Contact support for additional
 *  guidance.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *smartTapMerchantId;

@end


/**
 *  GTLRWalletobjects_TemplateItem
 */
@interface GTLRWalletobjects_TemplateItem : GTLRObject

/**
 *  A reference to a field to display. If both `firstValue` and `secondValue`
 *  are populated, they will both appear as one item with a slash between them.
 *  For example, values A and B would be shown as "A / B".
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_FieldSelector *firstValue;

/**
 *  A predefined item to display. Only one of `firstValue` or `predefinedItem`
 *  may be set.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_TemplateItem_PredefinedItem_FlightNumberAndOperatingFlightNumber
 *        Legacy alias for `FLIGHT_NUMBER_AND_OPERATING_FLIGHT_NUMBER`.
 *        Deprecated. (Value: "flightNumberAndOperatingFlightNumber")
 *    @arg @c kGTLRWalletobjects_TemplateItem_PredefinedItem_FrequentFlyerProgramNameAndNumber
 *        Legacy alias for `FREQUENT_FLYER_PROGRAM_NAME_AND_NUMBER`. Deprecated.
 *        (Value: "frequentFlyerProgramNameAndNumber")
 *    @arg @c kGTLRWalletobjects_TemplateItem_PredefinedItem_PredefinedItemUnspecified
 *        Value "PREDEFINED_ITEM_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *predefinedItem;

/**
 *  A reference to a field to display. This may only be populated if the
 *  `firstValue` field is populated.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_FieldSelector *secondValue;

@end


/**
 *  Data for Text module. All fields are optional. Header will be displayed if
 *  available, different types of bodies will be concatenated if they are
 *  defined.
 */
@interface GTLRWalletobjects_TextModuleData : GTLRObject

/**
 *  The body of the Text Module, which is defined as an uninterrupted string.
 *  Recommended maximum length is 500 characters to ensure full string is
 *  displayed on smaller screens.
 */
@property(nonatomic, copy, nullable) NSString *body;

/**
 *  The header of the Text Module. Recommended maximum length is 35 characters
 *  to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, copy, nullable) NSString *header;

/**
 *  The ID associated with a text module. This field is here to enable ease of
 *  management of text modules and referencing them in template overrides. The
 *  ID should only include alphanumeric characters, '_', or '-'. It can not
 *  include dots, as dots are used to separate fields within
 *  FieldReference.fieldPaths in template overrides.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Translated strings for the body. Recommended maximum length is 500
 *  characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedBody;

/**
 *  Translated strings for the header. Recommended maximum length is 35
 *  characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedHeader;

@end


/**
 *  GTLRWalletobjects_TicketCost
 */
@interface GTLRWalletobjects_TicketCost : GTLRObject

/** A message describing any kind of discount that was applied. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *discountMessage;

/** The face value of the ticket. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Money *faceValue;

/** The actual purchase price of the ticket, after tax and/or discounts. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Money *purchasePrice;

@end


/**
 *  GTLRWalletobjects_TicketLeg
 */
@interface GTLRWalletobjects_TicketLeg : GTLRObject

/**
 *  The date/time of arrival. This is an ISO 8601 extended format date/time,
 *  with or without an offset. Time may be specified up to nanosecond precision.
 *  Offsets may be specified with seconds precision (even though offset seconds
 *  is not part of ISO 8601). For example: `1985-04-12T23:20:50.52Z` would be 20
 *  minutes and 50.52 seconds after the 23rd hour of April 12th, 1985 in UTC.
 *  `1985-04-12T19:20:50.52-04:00` would be 20 minutes and 50.52 seconds after
 *  the 19th hour of April 12th, 1985, 4 hours before UTC (same instant in time
 *  as the above example). If the event were in New York, this would be the
 *  equivalent of Eastern Daylight Time (EDT). Remember that offset varies in
 *  regions that observe Daylight Saving Time (or Summer Time), depending on the
 *  time of the year. `1985-04-12T19:20:50.52` would be 20 minutes and 50.52
 *  seconds after the 19th hour of April 12th, 1985 with no offset information.
 *  The portion of the date/time without the offset is considered the "local
 *  date/time". This should be the local date/time at the destination station.
 *  For example, if the event occurs at the 20th hour of June 5th, 2018 at the
 *  destination station, the local date/time portion should be
 *  `2018-06-05T20:00:00`. If the local date/time at the destination station is
 *  4 hours before UTC, an offset of `-04:00` may be appended. Without offset
 *  information, some rich features may not be available.
 */
@property(nonatomic, copy, nullable) NSString *arrivalDateTime;

/** The train or ship name/number that the passsenger needs to board. */
@property(nonatomic, copy, nullable) NSString *carriage;

/**
 *  The date/time of departure. This is required if there is no validity time
 *  interval set on the transit object. This is an ISO 8601 extended format
 *  date/time, with or without an offset. Time may be specified up to nanosecond
 *  precision. Offsets may be specified with seconds precision (even though
 *  offset seconds is not part of ISO 8601). For example:
 *  `1985-04-12T23:20:50.52Z` would be 20 minutes and 50.52 seconds after the
 *  23rd hour of April 12th, 1985 in UTC. `1985-04-12T19:20:50.52-04:00` would
 *  be 20 minutes and 50.52 seconds after the 19th hour of April 12th, 1985, 4
 *  hours before UTC (same instant in time as the above example). If the event
 *  were in New York, this would be the equivalent of Eastern Daylight Time
 *  (EDT). Remember that offset varies in regions that observe Daylight Saving
 *  Time (or Summer Time), depending on the time of the year.
 *  `1985-04-12T19:20:50.52` would be 20 minutes and 50.52 seconds after the
 *  19th hour of April 12th, 1985 with no offset information. The portion of the
 *  date/time without the offset is considered the "local date/time". This
 *  should be the local date/time at the origin station. For example, if the
 *  departure occurs at the 20th hour of June 5th, 2018 at the origin station,
 *  the local date/time portion should be `2018-06-05T20:00:00`. If the local
 *  date/time at the origin station is 4 hours before UTC, an offset of `-04:00`
 *  may be appended. Without offset information, some rich features may not be
 *  available.
 */
@property(nonatomic, copy, nullable) NSString *departureDateTime;

/** The destination name. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *destinationName;

/** The destination station code. */
@property(nonatomic, copy, nullable) NSString *destinationStationCode;

/**
 *  Short description/name of the fare for this leg of travel. Eg "Anytime
 *  Single Use".
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *fareName;

/**
 *  The name of the origin station. This is required if `desinationName` is
 *  present or if `originStationCode` is not present.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *originName;

/**
 *  The origin station code. This is required if `destinationStationCode` is
 *  present or if `originName` is not present.
 */
@property(nonatomic, copy, nullable) NSString *originStationCode;

/** The platform or gate where the passenger can board the carriage. */
@property(nonatomic, copy, nullable) NSString *platform;

/**
 *  The reserved seat for the passenger(s). If more than one seat is to be
 *  specified then use the `ticketSeats` field instead. Both `ticketSeat` and
 *  `ticketSeats` may not be set.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TicketSeat *ticketSeat;

/**
 *  The reserved seat for the passenger(s). If only one seat is to be specified
 *  then use the `ticketSeat` field instead. Both `ticketSeat` and `ticketSeats`
 *  may not be set.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TicketSeat *> *ticketSeats;

/** The name of the transit operator that is operating this leg of a trip. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *transitOperatorName;

/** Terminus station or destination of the train/bus/etc. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *transitTerminusName;

/**
 *  The zone of boarding within the platform.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  GTLRWalletobjects_TicketRestrictions
 */
@interface GTLRWalletobjects_TicketRestrictions : GTLRObject

/**
 *  Extra restrictions that don't fall under the "route" or "time" categories.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *otherRestrictions;

/**
 *  Restrictions about routes that may be taken. For example, this may be the
 *  string "Reserved CrossCountry trains only".
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *routeRestrictions;

/** More details about the above `routeRestrictions`. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *routeRestrictionsDetails;

/** Restrictions about times this ticket may be used. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *timeRestrictions;

@end


/**
 *  GTLRWalletobjects_TicketSeat
 */
@interface GTLRWalletobjects_TicketSeat : GTLRObject

/**
 *  The identifier of the train car or coach in which the ticketed seat is
 *  located. Eg. "10"
 */
@property(nonatomic, copy, nullable) NSString *coach;

/**
 *  A custome fare class to be used if no `fareClass` applies. Both `fareClass`
 *  and `customFareClass` may not be set.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customFareClass;

/**
 *  The fare class of the ticketed seat.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_TicketSeat_FareClass_Business Legacy alias for
 *        `BUSINESS`. Deprecated. (Value: "business")
 *    @arg @c kGTLRWalletobjects_TicketSeat_FareClass_Economy Legacy alias for
 *        `ECONOMY`. Deprecated. (Value: "economy")
 *    @arg @c kGTLRWalletobjects_TicketSeat_FareClass_FareClassUnspecified Value
 *        "FARE_CLASS_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_TicketSeat_FareClass_First Legacy alias for
 *        `FIRST`. Deprecated. (Value: "first")
 */
@property(nonatomic, copy, nullable) NSString *fareClass;

/**
 *  The identifier of where the ticketed seat is located. Eg. "42". If there is
 *  no specific identifier, use `seatAssigment` instead.
 */
@property(nonatomic, copy, nullable) NSString *seat;

/**
 *  The passenger's seat assignment. Eg. "no specific seat". To be used when
 *  there is no specific identifier to use in `seat`.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *seatAssignment;

@end


/**
 *  GTLRWalletobjects_TimeInterval
 */
@interface GTLRWalletobjects_TimeInterval : GTLRObject

/**
 *  End time of the interval. Offset is not required. If an offset is provided
 *  and `start` time is set, `start` must also include an offset.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_DateTime *end;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#timeInterval"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  Start time of the interval. Offset is not required. If an offset is provided
 *  and `end` time is set, `end` must also include an offset.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_DateTime *start;

@end


/**
 *  GTLRWalletobjects_TransitClass
 */
@interface GTLRWalletobjects_TransitClass : GTLRObject

/** Activation options for an activatable ticket. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ActivationOptions *activationOptions;

/**
 *  Deprecated. Use `multipleDevicesAndHoldersAllowedStatus` instead.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowMultipleUsersPerObject GTLR_DEPRECATED;

/**
 *  Optional app or website link that will be displayed as a button on the front
 *  of the pass. If AppLinkData is provided for the corresponding object that
 *  will be used instead.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkData *appLinkData;

/**
 *  Callback options to be used to call the issuer back for every save/delete of
 *  an object for this class by the end-user. All objects of this class are
 *  eligible for the callback.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_CallbackOptions *callbackOptions;

/**
 *  Template information about how the class should be displayed. If unset,
 *  Google will fallback to a default set of fields to display.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ClassTemplateInfo *classTemplateInfo;

/**
 *  Country code used to display the card's country (when the user is not in
 *  that country), as well as to display localized content when content is not
 *  available in the user's locale.
 */
@property(nonatomic, copy, nullable) NSString *countryCode;

/**
 *  A custom label to use for the carriage value
 *  (`transitObject.ticketLeg.carriage`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customCarriageLabel;

/**
 *  A custom label to use for the coach value
 *  (`transitObject.ticketLeg.ticketSeat.coach`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customCoachLabel;

/**
 *  A custom label to use for the transit concession category value
 *  (`transitObject.concessionCategory`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customConcessionCategoryLabel;

/**
 *  A custom label to use for the confirmation code value
 *  (`transitObject.purchaseDetails.confirmationCode`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customConfirmationCodeLabel;

/**
 *  A custom label to use for the transit discount message value
 *  (`transitObject.purchaseDetails.ticketCost.discountMessage`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customDiscountMessageLabel;

/**
 *  A custom label to use for the fare class value
 *  (`transitObject.ticketLeg.ticketSeat.fareClass`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customFareClassLabel;

/**
 *  A custom label to use for the transit fare name value
 *  (`transitObject.ticketLeg.fareName`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customFareNameLabel;

/**
 *  A custom label to use for the other restrictions value
 *  (`transitObject.ticketRestrictions.otherRestrictions`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customOtherRestrictionsLabel;

/**
 *  A custom label to use for the boarding platform value
 *  (`transitObject.ticketLeg.platform`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customPlatformLabel;

/**
 *  A custom label to use for the purchase face value
 *  (`transitObject.purchaseDetails.ticketCost.faceValue`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customPurchaseFaceValueLabel;

/**
 *  A custom label to use for the purchase price value
 *  (`transitObject.purchaseDetails.ticketCost.purchasePrice`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customPurchasePriceLabel;

/**
 *  A custom label to use for the purchase receipt number value
 *  (`transitObject.purchaseDetails.purchaseReceiptNumber`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customPurchaseReceiptNumberLabel;

/**
 *  A custom label to use for the route restrictions details value
 *  (`transitObject.ticketRestrictions.routeRestrictionsDetails`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customRouteRestrictionsDetailsLabel;

/**
 *  A custom label to use for the route restrictions value
 *  (`transitObject.ticketRestrictions.routeRestrictions`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customRouteRestrictionsLabel;

/**
 *  A custom label to use for the seat location value
 *  (`transitObject.ticketLeg.ticketSeat.seat`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customSeatLabel;

/**
 *  A custom label to use for the ticket number value
 *  (`transitObject.ticketNumber`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customTicketNumberLabel;

/**
 *  A custom label to use for the time restrictions details value
 *  (`transitObject.ticketRestrictions.timeRestrictions`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customTimeRestrictionsLabel;

/**
 *  A custom label to use for the transit terminus name value
 *  (`transitObject.ticketLeg.transitTerminusName`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customTransitTerminusNameLabel;

/**
 *  A custom label to use for the boarding zone value
 *  (`transitObject.ticketLeg.zone`).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customZoneLabel;

/**
 *  Controls the display of the single-leg itinerary for this class. By default,
 *  an itinerary will only display for multi-leg trips.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableSingleLegItinerary;

/**
 *  Identifies whether this class supports Smart Tap. The `redemptionIssuers`
 *  and object level `smartTapRedemptionLevel` fields must also be set up
 *  correctly in order for a pass to support Smart Tap.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableSmartTap;

/**
 *  Optional banner image displayed on the front of the card. If none is
 *  present, nothing will be displayed. The image will display at 100% width.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *heroImage;

/**
 *  The background color for the card. If not set the dominant color of the hero
 *  image is used, and if no hero image is set, the dominant color of the logo
 *  is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as
 *  `#ffcc00`. You can also use the shorthand version of the RGB triplet which
 *  is #rgb, such as `#fc0`.
 */
@property(nonatomic, copy, nullable) NSString *hexBackgroundColor;

/**
 *  The URI of your application's home page. Populating the URI in this field
 *  results in the exact same behavior as populating an URI in linksModuleData
 *  (when an object is rendered, a link to the homepage is shown in what would
 *  usually be thought of as the linksModuleData section of the object).
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Uri *homepageUri;

/**
 *  Required. The unique identifier for a class. This ID must be unique across
 *  all classes from an issuer. This value should follow the format issuer ID.
 *  identifier where the former is issued by Google and latter is chosen by you.
 *  Your unique identifier should only include alphanumeric characters, '.',
 *  '_', or '-'.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Image module data. The maximum number of these fields displayed is 1 from
 *  object level and 1 for class object level.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_ImageModuleData *> *imageModulesData;

/** Deprecated. Use textModulesData instead. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_InfoModuleData *infoModuleData GTLR_DEPRECATED;

/**
 *  Required. The issuer name. Recommended maximum length is 20 characters to
 *  ensure full string is displayed on smaller screens.
 */
@property(nonatomic, copy, nullable) NSString *issuerName;

/**
 *  If this field is present, transit tickets served to a user's device will
 *  always be in this language. Represents the BCP 47 language tag. Example
 *  values are "en-US", "en-GB", "de", or "de-AT".
 */
@property(nonatomic, copy, nullable) NSString *languageOverride;

/**
 *  Links module data. If links module data is also defined on the object, both
 *  will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LinksModuleData *linksModuleData;

/**
 *  Translated strings for the issuer_name. Recommended maximum length is 20
 *  characters to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedIssuerName;

/**
 *  Note: This field is currently not supported to trigger geo notifications.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LatLongPoint *> *locations GTLR_DEPRECATED;

/**
 *  Required. The logo image of the ticket. This image is displayed in the card
 *  detail view of the app.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *logo;

/**
 *  An array of messages displayed in the app. All users of this object will
 *  receive its associated messages. The maximum number of these fields is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Message *> *messages;

/**
 *  Identifies whether multiple users and devices will save the same object
 *  referencing this class.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_TransitClass_MultipleDevicesAndHoldersAllowedStatus_MultipleHolders
 *        Legacy alias for `MULTIPLE_HOLDERS`. Deprecated. (Value:
 *        "multipleHolders")
 *    @arg @c kGTLRWalletobjects_TransitClass_MultipleDevicesAndHoldersAllowedStatus_OneUserAllDevices
 *        Legacy alias for `ONE_USER_ALL_DEVICES`. Deprecated. (Value:
 *        "oneUserAllDevices")
 *    @arg @c kGTLRWalletobjects_TransitClass_MultipleDevicesAndHoldersAllowedStatus_OneUserOneDevice
 *        Legacy alias for `ONE_USER_ONE_DEVICE`. Deprecated. (Value:
 *        "oneUserOneDevice")
 *    @arg @c kGTLRWalletobjects_TransitClass_MultipleDevicesAndHoldersAllowedStatus_StatusUnspecified
 *        Unspecified preference. (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *multipleDevicesAndHoldersAllowedStatus;

/**
 *  Identifies which redemption issuers can redeem the pass over Smart Tap.
 *  Redemption issuers are identified by their issuer ID. Redemption issuers
 *  must have at least one Smart Tap key configured. The `enableSmartTap` and
 *  object level `smartTapRedemptionLevel` fields must also be set up correctly
 *  in order for a pass to support Smart Tap.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *redemptionIssuers;

/**
 *  The review comments set by the platform when a class is marked `approved` or
 *  `rejected`.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Review *review;

/**
 *  Required. The status of the class. This field can be set to `draft` or
 *  `underReview` using the insert, patch, or update API calls. Once the review
 *  state is changed from `draft` it may not be changed back to `draft`. You
 *  should keep this field to `draft` when the class is under development. A
 *  `draft` class cannot be used to create any object. You should set this field
 *  to `underReview` when you believe the class is ready for use. The platform
 *  will automatically set this field to `approved` and it can be immediately
 *  used to create or migrate objects. When updating an already `approved` class
 *  you should keep setting this field to `underReview`.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_TransitClass_ReviewStatus_Approved Legacy alias
 *        for `APPROVED`. Deprecated. (Value: "approved")
 *    @arg @c kGTLRWalletobjects_TransitClass_ReviewStatus_Draft Legacy alias
 *        for `DRAFT`. Deprecated. (Value: "draft")
 *    @arg @c kGTLRWalletobjects_TransitClass_ReviewStatus_Rejected Legacy alias
 *        for `REJECTED`. Deprecated. (Value: "rejected")
 *    @arg @c kGTLRWalletobjects_TransitClass_ReviewStatus_ReviewStatusUnspecified
 *        Value "REVIEW_STATUS_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_TransitClass_ReviewStatus_UnderReview Legacy
 *        alias for `UNDER_REVIEW`. Deprecated. (Value: "underReview")
 */
@property(nonatomic, copy, nullable) NSString *reviewStatus;

/**
 *  Optional information about the security animation. If this is set a security
 *  animation will be rendered on pass details.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_SecurityAnimation *securityAnimation;

/**
 *  Text module data. If text module data is also defined on the class, both
 *  will be displayed. The maximum number of these fields displayed is 10 from
 *  the object and 10 from the class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TextModuleData *> *textModulesData;

/** The name of the transit operator. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *transitOperatorName;

/**
 *  Required. The type of transit this class represents, such as "bus".
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_TransitClass_TransitType_Bus Legacy alias for
 *        `BUS`. Deprecated. (Value: "bus")
 *    @arg @c kGTLRWalletobjects_TransitClass_TransitType_Ferry Legacy alias for
 *        `FERRY`. Deprecated. (Value: "ferry")
 *    @arg @c kGTLRWalletobjects_TransitClass_TransitType_Other Legacy alias for
 *        `OTHER`. Deprecated. (Value: "other")
 *    @arg @c kGTLRWalletobjects_TransitClass_TransitType_Rail Legacy alias for
 *        `RAIL`. Deprecated. (Value: "rail")
 *    @arg @c kGTLRWalletobjects_TransitClass_TransitType_Tram Legacy alias for
 *        `TRAM`. Deprecated. (Value: "tram")
 *    @arg @c kGTLRWalletobjects_TransitClass_TransitType_TransitTypeUnspecified
 *        Value "TRANSIT_TYPE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *transitType;

/**
 *  Deprecated
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version GTLR_DEPRECATED;

/**
 *  View Unlock Requirement options for the transit ticket.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_TransitClass_ViewUnlockRequirement_UnlockNotRequired
 *        Default behavior for all the existing Passes if ViewUnlockRequirement
 *        is not set. (Value: "UNLOCK_NOT_REQUIRED")
 *    @arg @c kGTLRWalletobjects_TransitClass_ViewUnlockRequirement_UnlockRequiredToView
 *        Requires the user to unlock their device each time the pass is viewed.
 *        If the user removes their device lock after saving the pass, then they
 *        will be prompted to create a device lock before the pass can be
 *        viewed. (Value: "UNLOCK_REQUIRED_TO_VIEW")
 *    @arg @c kGTLRWalletobjects_TransitClass_ViewUnlockRequirement_ViewUnlockRequirementUnspecified
 *        Default value, same as UNLOCK_NOT_REQUIRED. (Value:
 *        "VIEW_UNLOCK_REQUIREMENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *viewUnlockRequirement;

/** Watermark image to display on the user's device. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *watermark;

/**
 *  The wide logo of the ticket. When provided, this will be used in place of
 *  the logo in the top left of the card view.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *wideLogo;

/** Deprecated. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *wordMark GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_TransitClassAddMessageResponse
 */
@interface GTLRWalletobjects_TransitClassAddMessageResponse : GTLRObject

/** The updated TransitClass resource. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TransitClass *resource;

@end


/**
 *  GTLRWalletobjects_TransitClassListResponse
 */
@interface GTLRWalletobjects_TransitClassListResponse : GTLRObject

/** Pagination of the response. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Pagination *pagination;

/** Resources corresponding to the list request. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TransitClass *> *resources;

@end


/**
 *  GTLRWalletobjects_TransitObject
 */
@interface GTLRWalletobjects_TransitObject : GTLRObject

/**
 *  The activation status for the object. Required if the class has
 *  `activationOptions` set.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_ActivationStatus *activationStatus;

/**
 *  Optional app or website link that will be displayed as a button on the front
 *  of the pass. If AppLinkData is provided for the corresponding class only
 *  object AppLinkData will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_AppLinkData *appLinkData;

/** The barcode type and value. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Barcode *barcode;

/**
 *  Required. The class associated with this object. The class must be of the
 *  same type as this object, must already exist, and must be approved. Class
 *  IDs should follow the format issuer ID.identifier where the former is issued
 *  by Google and latter is chosen by you.
 */
@property(nonatomic, copy, nullable) NSString *classId;

/**
 *  A copy of the inherited fields of the parent class. These fields are
 *  retrieved during a GET.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TransitClass *classReference;

/**
 *  The concession category for the ticket.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_TransitObject_ConcessionCategory_Adult Legacy
 *        alias for `ADULT`. Deprecated. (Value: "adult")
 *    @arg @c kGTLRWalletobjects_TransitObject_ConcessionCategory_Child Legacy
 *        alias for `CHILD`. Deprecated. (Value: "child")
 *    @arg @c kGTLRWalletobjects_TransitObject_ConcessionCategory_ConcessionCategoryUnspecified
 *        Value "CONCESSION_CATEGORY_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_TransitObject_ConcessionCategory_Senior Legacy
 *        alias for `SENIOR`. Deprecated. (Value: "senior")
 */
@property(nonatomic, copy, nullable) NSString *concessionCategory;

/**
 *  A custom concession category to use when `concessionCategory` does not
 *  provide the right option. Both `concessionCategory` and
 *  `customConcessionCategory` may not be set.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customConcessionCategory;

/**
 *  A custom status to use for the ticket status value when `ticketStatus` does
 *  not provide the right option. Both `ticketStatus` and `customTicketStatus`
 *  may not be set.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *customTicketStatus;

/** Device context associated with the object. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_DeviceContext *deviceContext;

/**
 *  Indicates if notifications should explicitly be suppressed. If this field is
 *  set to true, regardless of the `messages` field, expiration notifications to
 *  the user will be suppressed. By default, this field is set to false.
 *  Currently, this can only be set for offers.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableExpirationNotification;

/** Information that controls how passes are grouped together. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_GroupingInfo *groupingInfo;

/**
 *  Whether this object is currently linked to a single device. This field is
 *  set by the platform when a user saves the object, linking it to their
 *  device. Intended for use by select partners. Contact support for additional
 *  information.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasLinkedDevice;

/**
 *  Indicates if the object has users. This field is set by the platform.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasUsers;

/**
 *  Optional banner image displayed on the front of the card. If none is
 *  present, hero image of the class, if present, will be displayed. If hero
 *  image of the class is also not present, nothing will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Image *heroImage;

/**
 *  The background color for the card. If not set the dominant color of the hero
 *  image is used, and if no hero image is set, the dominant color of the logo
 *  is used. The format is #rrggbb where rrggbb is a hex RGB triplet, such as
 *  `#ffcc00`. You can also use the shorthand version of the RGB triplet which
 *  is #rgb, such as `#fc0`.
 */
@property(nonatomic, copy, nullable) NSString *hexBackgroundColor;

/**
 *  Required. The unique identifier for an object. This ID must be unique across
 *  all objects from an issuer. This value should follow the format issuer
 *  ID.identifier where the former is issued by Google and latter is chosen by
 *  you. The unique identifier should only include alphanumeric characters, '.',
 *  '_', or '-'.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Image module data. The maximum number of these fields displayed is 1 from
 *  object level and 1 for class object level.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_ImageModuleData *> *imageModulesData;

/** Deprecated. Use textModulesData instead. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_InfoModuleData *infoModuleData;

/**
 *  linked_object_ids are a list of other objects such as event ticket, loyalty,
 *  offer, generic, giftcard, transit and boarding pass that should be
 *  automatically attached to this transit object. If a user had saved this
 *  transit card, then these linked_object_ids would be automatically pushed to
 *  the user's wallet (unless they turned off the setting to receive such linked
 *  passes). Make sure that objects present in linked_object_ids are already
 *  inserted - if not, calls would fail. Once linked, the linked objects cannot
 *  be unlinked. You cannot link objects belonging to another issuer. There is a
 *  limit to the number of objects that can be linked to a single object. After
 *  the limit is reached, new linked objects in the call will be ignored
 *  silently. Object IDs should follow the format issuer ID. identifier where
 *  the former is issued by Google and the latter is chosen by you.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *linkedObjectIds;

/**
 *  Links module data. If links module data is also defined on the class, both
 *  will be displayed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LinksModuleData *linksModuleData;

/**
 *  Note: This field is currently not supported to trigger geo notifications.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_LatLongPoint *> *locations GTLR_DEPRECATED;

/**
 *  An array of messages displayed in the app. All users of this object will
 *  receive its associated messages. The maximum number of these fields is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_Message *> *messages;

/**
 *  Pass constraints for the object. Includes limiting NFC and screenshot
 *  behaviors.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_PassConstraints *passConstraints;

/**
 *  The name(s) of the passengers the ticket is assigned to. The above
 *  `passengerType` field is meant to give Google context on this field.
 */
@property(nonatomic, copy, nullable) NSString *passengerNames;

/**
 *  The number of passengers.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_TransitObject_PassengerType_MultiplePassengers
 *        Legacy alias for `MULTIPLE_PASSENGERS`. Deprecated. (Value:
 *        "multiplePassengers")
 *    @arg @c kGTLRWalletobjects_TransitObject_PassengerType_PassengerTypeUnspecified
 *        Value "PASSENGER_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_TransitObject_PassengerType_SinglePassenger
 *        Legacy alias for `SINGLE_PASSENGER`. Deprecated. (Value:
 *        "singlePassenger")
 */
@property(nonatomic, copy, nullable) NSString *passengerType;

/** Purchase details for this ticket. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_PurchaseDetails *purchaseDetails;

/** The rotating barcode type and value. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_RotatingBarcode *rotatingBarcode;

/**
 *  Restrictions on the object that needs to be verified before the user tries
 *  to save the pass. Note that this restrictions will only be applied during
 *  save time. If the restrictions changed after a user saves the pass, the new
 *  restrictions will not be applied to an already saved pass.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_SaveRestrictions *saveRestrictions;

/**
 *  The value that will be transmitted to a Smart Tap certified terminal over
 *  NFC for this object. The class level fields `enableSmartTap` and
 *  `redemptionIssuers` must also be set up correctly in order for the pass to
 *  support Smart Tap. Only ASCII characters are supported.
 */
@property(nonatomic, copy, nullable) NSString *smartTapRedemptionValue;

/**
 *  Required. The state of the object. This field is used to determine how an
 *  object is displayed in the app. For example, an `inactive` object is moved
 *  to the "Expired passes" section.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_TransitObject_State_Active Legacy alias for
 *        `ACTIVE`. Deprecated. (Value: "active")
 *    @arg @c kGTLRWalletobjects_TransitObject_State_Completed Legacy alias for
 *        `COMPLETED`. Deprecated. (Value: "completed")
 *    @arg @c kGTLRWalletobjects_TransitObject_State_Expired Legacy alias for
 *        `EXPIRED`. Deprecated. (Value: "expired")
 *    @arg @c kGTLRWalletobjects_TransitObject_State_Inactive Legacy alias for
 *        `INACTIVE`. Deprecated. (Value: "inactive")
 *    @arg @c kGTLRWalletobjects_TransitObject_State_StateUnspecified Value
 *        "STATE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Text module data. If text module data is also defined on the class, both
 *  will be displayed. The maximum number of these fields displayed is 10 from
 *  the object and 10 from the class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TextModuleData *> *textModulesData;

/**
 *  A single ticket leg contains departure and arrival information along with
 *  boarding and seating information. If more than one leg is to be specified
 *  then use the `ticketLegs` field instead. Both `ticketLeg` and `ticketLegs`
 *  may not be set.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TicketLeg *ticketLeg;

/**
 *  Each ticket may contain one or more legs. Each leg contains departure and
 *  arrival information along with boarding and seating information. If only one
 *  leg is to be specified then use the `ticketLeg` field instead. Both
 *  `ticketLeg` and `ticketLegs` may not be set.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TicketLeg *> *ticketLegs;

/**
 *  The number of the ticket. This is a unique identifier for the ticket in the
 *  transit operator's system.
 */
@property(nonatomic, copy, nullable) NSString *ticketNumber;

/**
 *  Information about what kind of restrictions there are on using this ticket.
 *  For example, which days of the week it must be used, or which routes are
 *  allowed to be taken.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TicketRestrictions *ticketRestrictions;

/**
 *  The status of the ticket. For states which affect display, use the `state`
 *  field instead.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_TransitObject_TicketStatus_Exchanged Legacy
 *        alias for `EXCHANGED`. Deprecated. (Value: "exchanged")
 *    @arg @c kGTLRWalletobjects_TransitObject_TicketStatus_Refunded Legacy
 *        alias for `REFUNDED`. Deprecated. (Value: "refunded")
 *    @arg @c kGTLRWalletobjects_TransitObject_TicketStatus_TicketStatusUnspecified
 *        Value "TICKET_STATUS_UNSPECIFIED"
 *    @arg @c kGTLRWalletobjects_TransitObject_TicketStatus_Used Legacy alias
 *        for `USED`. Deprecated. (Value: "used")
 */
@property(nonatomic, copy, nullable) NSString *ticketStatus;

/**
 *  This id is used to group tickets together if the user has saved multiple
 *  tickets for the same trip.
 */
@property(nonatomic, copy, nullable) NSString *tripId;

/**
 *  Required. The type of trip this transit object represents. Used to determine
 *  the pass title and/or which symbol to use between the origin and
 *  destination.
 *
 *  Likely values:
 *    @arg @c kGTLRWalletobjects_TransitObject_TripType_OneWay Legacy alias for
 *        `ONE_WAY`. Deprecated. (Value: "oneWay")
 *    @arg @c kGTLRWalletobjects_TransitObject_TripType_RoundTrip Legacy alias
 *        for `ROUND_TRIP`. Deprecated. (Value: "roundTrip")
 *    @arg @c kGTLRWalletobjects_TransitObject_TripType_TripTypeUnspecified
 *        Value "TRIP_TYPE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *tripType;

/**
 *  The time period this object will be `active` and object can be used. An
 *  object's state will be changed to `expired` when this time period has
 *  passed.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TimeInterval *validTimeInterval;

/**
 *  Deprecated
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version GTLR_DEPRECATED;

@end


/**
 *  GTLRWalletobjects_TransitObjectAddMessageResponse
 */
@interface GTLRWalletobjects_TransitObjectAddMessageResponse : GTLRObject

/** The updated TransitObject resource. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_TransitObject *resource;

@end


/**
 *  GTLRWalletobjects_TransitObjectListResponse
 */
@interface GTLRWalletobjects_TransitObjectListResponse : GTLRObject

/** Pagination of the response. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Pagination *pagination;

/** Resources corresponding to the list request. */
@property(nonatomic, strong, nullable) NSArray<GTLRWalletobjects_TransitObject *> *resources;

@end


/**
 *  Request to upload rotating barcode values.
 */
@interface GTLRWalletobjects_TransitObjectUploadRotatingBarcodeValuesRequest : GTLRObject

/** A reference to the rotating barcode values payload that was uploaded. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_Media *blob;

/** Extra information about the uploaded media. */
@property(nonatomic, strong, nullable) GTLRWalletobjects_MediaRequestInfo *mediaRequestInfo;

@end


/**
 *  Response for uploading rotating barcode values.
 */
@interface GTLRWalletobjects_TransitObjectUploadRotatingBarcodeValuesResponse : GTLRObject
@end


/**
 *  GTLRWalletobjects_TranslatedString
 */
@interface GTLRWalletobjects_TranslatedString : GTLRObject

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#translatedString"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  Represents the BCP 47 language tag. Example values are "en-US", "en-GB",
 *  "de", or "de-AT".
 */
@property(nonatomic, copy, nullable) NSString *language;

/** The UTF-8 encoded translated string. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Indicates that the issuer would like Google Wallet to send an upcoming card
 *  validity notification 1 day before card becomes valid/usable.
 */
@interface GTLRWalletobjects_UpcomingNotification : GTLRObject

/**
 *  Indicates if the object needs to have upcoming notification enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableNotification;

@end


/**
 *  GTLRWalletobjects_Uri
 */
@interface GTLRWalletobjects_Uri : GTLRObject

/**
 *  The URI's title appearing in the app as text. Recommended maximum is 20
 *  characters to ensure full string is displayed on smaller screens. Note that
 *  in some contexts this text is not used, such as when `description` is part
 *  of an image.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The ID associated with a uri. This field is here to enable ease of
 *  management of uris.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies what kind of resource this is. Value: the fixed string
 *  `"walletobjects#uri"`.
 */
@property(nonatomic, copy, nullable) NSString *kind GTLR_DEPRECATED;

/**
 *  Translated strings for the description. Recommended maximum is 20 characters
 *  to ensure full string is displayed on smaller screens.
 */
@property(nonatomic, strong, nullable) GTLRWalletobjects_LocalizedString *localizedDescription;

/**
 *  The location of a web page, image, or other resource. URIs in the
 *  `LinksModuleData` module can have different prefixes indicating the type of
 *  URI (a link to a web page, a link to a map, a telephone number, or an email
 *  address). URIs must have a scheme.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
