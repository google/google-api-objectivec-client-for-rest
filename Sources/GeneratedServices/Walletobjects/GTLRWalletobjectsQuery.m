// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Wallet API (walletobjects/v1)
// Description:
//   API for issuers to save and manage Google Wallet Objects.
// Documentation:
//   https://developers.google.com/pay/passes

#import <GoogleAPIClientForREST/GTLRWalletobjectsQuery.h>

@implementation GTLRWalletobjectsQuery

@dynamic fields;

@end

@implementation GTLRWalletobjectsQuery_EventticketclassAddmessage

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_AddMessageRequest *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/eventTicketClass/{resourceId}/addMessage";
  GTLRWalletobjectsQuery_EventticketclassAddmessage *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_EventTicketClassAddMessageResponse class];
  query.loggingName = @"walletobjects.eventticketclass.addmessage";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_EventticketclassGet

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(NSString *)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/eventTicketClass/{resourceId}";
  GTLRWalletobjectsQuery_EventticketclassGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_EventTicketClass class];
  query.loggingName = @"walletobjects.eventticketclass.get";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_EventticketclassInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_EventTicketClass *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/eventTicketClass";
  GTLRWalletobjectsQuery_EventticketclassInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_EventTicketClass class];
  query.loggingName = @"walletobjects.eventticketclass.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_EventticketclassList

@dynamic issuerId, maxResults, token;

+ (instancetype)query {
  NSString *pathURITemplate = @"walletobjects/v1/eventTicketClass";
  GTLRWalletobjectsQuery_EventticketclassList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRWalletobjects_EventTicketClassListResponse class];
  query.loggingName = @"walletobjects.eventticketclass.list";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_EventticketclassPatch

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_EventTicketClass *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/eventTicketClass/{resourceId}";
  GTLRWalletobjectsQuery_EventticketclassPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_EventTicketClass class];
  query.loggingName = @"walletobjects.eventticketclass.patch";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_EventticketclassUpdate

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_EventTicketClass *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/eventTicketClass/{resourceId}";
  GTLRWalletobjectsQuery_EventticketclassUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_EventTicketClass class];
  query.loggingName = @"walletobjects.eventticketclass.update";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_EventticketobjectAddmessage

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_AddMessageRequest *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/eventTicketObject/{resourceId}/addMessage";
  GTLRWalletobjectsQuery_EventticketobjectAddmessage *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_EventTicketObjectAddMessageResponse class];
  query.loggingName = @"walletobjects.eventticketobject.addmessage";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_EventticketobjectGet

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(NSString *)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/eventTicketObject/{resourceId}";
  GTLRWalletobjectsQuery_EventticketobjectGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_EventTicketObject class];
  query.loggingName = @"walletobjects.eventticketobject.get";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_EventticketobjectInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_EventTicketObject *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/eventTicketObject";
  GTLRWalletobjectsQuery_EventticketobjectInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_EventTicketObject class];
  query.loggingName = @"walletobjects.eventticketobject.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_EventticketobjectList

@dynamic classId, maxResults, token;

+ (instancetype)query {
  NSString *pathURITemplate = @"walletobjects/v1/eventTicketObject";
  GTLRWalletobjectsQuery_EventticketobjectList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRWalletobjects_EventTicketObjectListResponse class];
  query.loggingName = @"walletobjects.eventticketobject.list";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_EventticketobjectModifylinkedofferobjects

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_ModifyLinkedOfferObjectsRequest *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/eventTicketObject/{resourceId}/modifyLinkedOfferObjects";
  GTLRWalletobjectsQuery_EventticketobjectModifylinkedofferobjects *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_EventTicketObject class];
  query.loggingName = @"walletobjects.eventticketobject.modifylinkedofferobjects";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_EventticketobjectPatch

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_EventTicketObject *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/eventTicketObject/{resourceId}";
  GTLRWalletobjectsQuery_EventticketobjectPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_EventTicketObject class];
  query.loggingName = @"walletobjects.eventticketobject.patch";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_EventticketobjectUpdate

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_EventTicketObject *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/eventTicketObject/{resourceId}";
  GTLRWalletobjectsQuery_EventticketobjectUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_EventTicketObject class];
  query.loggingName = @"walletobjects.eventticketobject.update";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_FlightclassAddmessage

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_AddMessageRequest *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/flightClass/{resourceId}/addMessage";
  GTLRWalletobjectsQuery_FlightclassAddmessage *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_FlightClassAddMessageResponse class];
  query.loggingName = @"walletobjects.flightclass.addmessage";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_FlightclassGet

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(NSString *)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/flightClass/{resourceId}";
  GTLRWalletobjectsQuery_FlightclassGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_FlightClass class];
  query.loggingName = @"walletobjects.flightclass.get";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_FlightclassInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_FlightClass *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/flightClass";
  GTLRWalletobjectsQuery_FlightclassInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_FlightClass class];
  query.loggingName = @"walletobjects.flightclass.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_FlightclassList

@dynamic issuerId, maxResults, token;

+ (instancetype)query {
  NSString *pathURITemplate = @"walletobjects/v1/flightClass";
  GTLRWalletobjectsQuery_FlightclassList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRWalletobjects_FlightClassListResponse class];
  query.loggingName = @"walletobjects.flightclass.list";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_FlightclassPatch

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_FlightClass *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/flightClass/{resourceId}";
  GTLRWalletobjectsQuery_FlightclassPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_FlightClass class];
  query.loggingName = @"walletobjects.flightclass.patch";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_FlightclassUpdate

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_FlightClass *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/flightClass/{resourceId}";
  GTLRWalletobjectsQuery_FlightclassUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_FlightClass class];
  query.loggingName = @"walletobjects.flightclass.update";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_FlightobjectAddmessage

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_AddMessageRequest *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/flightObject/{resourceId}/addMessage";
  GTLRWalletobjectsQuery_FlightobjectAddmessage *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_FlightObjectAddMessageResponse class];
  query.loggingName = @"walletobjects.flightobject.addmessage";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_FlightobjectGet

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(NSString *)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/flightObject/{resourceId}";
  GTLRWalletobjectsQuery_FlightobjectGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_FlightObject class];
  query.loggingName = @"walletobjects.flightobject.get";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_FlightobjectInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_FlightObject *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/flightObject";
  GTLRWalletobjectsQuery_FlightobjectInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_FlightObject class];
  query.loggingName = @"walletobjects.flightobject.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_FlightobjectList

@dynamic classId, maxResults, token;

+ (instancetype)query {
  NSString *pathURITemplate = @"walletobjects/v1/flightObject";
  GTLRWalletobjectsQuery_FlightobjectList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRWalletobjects_FlightObjectListResponse class];
  query.loggingName = @"walletobjects.flightobject.list";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_FlightobjectPatch

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_FlightObject *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/flightObject/{resourceId}";
  GTLRWalletobjectsQuery_FlightobjectPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_FlightObject class];
  query.loggingName = @"walletobjects.flightobject.patch";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_FlightobjectUpdate

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_FlightObject *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/flightObject/{resourceId}";
  GTLRWalletobjectsQuery_FlightobjectUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_FlightObject class];
  query.loggingName = @"walletobjects.flightobject.update";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GenericclassGet

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(NSString *)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/genericClass/{resourceId}";
  GTLRWalletobjectsQuery_GenericclassGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_GenericClass class];
  query.loggingName = @"walletobjects.genericclass.get";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GenericclassInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_GenericClass *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/genericClass";
  GTLRWalletobjectsQuery_GenericclassInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_GenericClass class];
  query.loggingName = @"walletobjects.genericclass.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GenericclassList

@dynamic issuerId, maxResults, token;

+ (instancetype)query {
  NSString *pathURITemplate = @"walletobjects/v1/genericClass";
  GTLRWalletobjectsQuery_GenericclassList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRWalletobjects_GenericClassListResponse class];
  query.loggingName = @"walletobjects.genericclass.list";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GenericclassPatch

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_GenericClass *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/genericClass/{resourceId}";
  GTLRWalletobjectsQuery_GenericclassPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_GenericClass class];
  query.loggingName = @"walletobjects.genericclass.patch";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GenericclassUpdate

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_GenericClass *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/genericClass/{resourceId}";
  GTLRWalletobjectsQuery_GenericclassUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_GenericClass class];
  query.loggingName = @"walletobjects.genericclass.update";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GenericobjectGet

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(NSString *)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/genericObject/{resourceId}";
  GTLRWalletobjectsQuery_GenericobjectGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_GenericObject class];
  query.loggingName = @"walletobjects.genericobject.get";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GenericobjectInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_GenericObject *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/genericObject";
  GTLRWalletobjectsQuery_GenericobjectInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_GenericObject class];
  query.loggingName = @"walletobjects.genericobject.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GenericobjectList

@dynamic classId, maxResults, token;

+ (instancetype)query {
  NSString *pathURITemplate = @"walletobjects/v1/genericObject";
  GTLRWalletobjectsQuery_GenericobjectList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRWalletobjects_GenericObjectListResponse class];
  query.loggingName = @"walletobjects.genericobject.list";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GenericobjectPatch

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_GenericObject *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/genericObject/{resourceId}";
  GTLRWalletobjectsQuery_GenericobjectPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_GenericObject class];
  query.loggingName = @"walletobjects.genericobject.patch";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GenericobjectUpdate

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_GenericObject *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/genericObject/{resourceId}";
  GTLRWalletobjectsQuery_GenericobjectUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_GenericObject class];
  query.loggingName = @"walletobjects.genericobject.update";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GiftcardclassAddmessage

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_AddMessageRequest *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/giftCardClass/{resourceId}/addMessage";
  GTLRWalletobjectsQuery_GiftcardclassAddmessage *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_GiftCardClassAddMessageResponse class];
  query.loggingName = @"walletobjects.giftcardclass.addmessage";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GiftcardclassGet

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(NSString *)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/giftCardClass/{resourceId}";
  GTLRWalletobjectsQuery_GiftcardclassGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_GiftCardClass class];
  query.loggingName = @"walletobjects.giftcardclass.get";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GiftcardclassInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_GiftCardClass *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/giftCardClass";
  GTLRWalletobjectsQuery_GiftcardclassInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_GiftCardClass class];
  query.loggingName = @"walletobjects.giftcardclass.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GiftcardclassList

@dynamic issuerId, maxResults, token;

+ (instancetype)query {
  NSString *pathURITemplate = @"walletobjects/v1/giftCardClass";
  GTLRWalletobjectsQuery_GiftcardclassList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRWalletobjects_GiftCardClassListResponse class];
  query.loggingName = @"walletobjects.giftcardclass.list";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GiftcardclassPatch

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_GiftCardClass *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/giftCardClass/{resourceId}";
  GTLRWalletobjectsQuery_GiftcardclassPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_GiftCardClass class];
  query.loggingName = @"walletobjects.giftcardclass.patch";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GiftcardclassUpdate

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_GiftCardClass *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/giftCardClass/{resourceId}";
  GTLRWalletobjectsQuery_GiftcardclassUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_GiftCardClass class];
  query.loggingName = @"walletobjects.giftcardclass.update";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GiftcardobjectAddmessage

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_AddMessageRequest *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/giftCardObject/{resourceId}/addMessage";
  GTLRWalletobjectsQuery_GiftcardobjectAddmessage *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_GiftCardObjectAddMessageResponse class];
  query.loggingName = @"walletobjects.giftcardobject.addmessage";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GiftcardobjectGet

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(NSString *)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/giftCardObject/{resourceId}";
  GTLRWalletobjectsQuery_GiftcardobjectGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_GiftCardObject class];
  query.loggingName = @"walletobjects.giftcardobject.get";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GiftcardobjectInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_GiftCardObject *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/giftCardObject";
  GTLRWalletobjectsQuery_GiftcardobjectInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_GiftCardObject class];
  query.loggingName = @"walletobjects.giftcardobject.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GiftcardobjectList

@dynamic classId, maxResults, token;

+ (instancetype)query {
  NSString *pathURITemplate = @"walletobjects/v1/giftCardObject";
  GTLRWalletobjectsQuery_GiftcardobjectList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRWalletobjects_GiftCardObjectListResponse class];
  query.loggingName = @"walletobjects.giftcardobject.list";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GiftcardobjectPatch

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_GiftCardObject *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/giftCardObject/{resourceId}";
  GTLRWalletobjectsQuery_GiftcardobjectPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_GiftCardObject class];
  query.loggingName = @"walletobjects.giftcardobject.patch";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_GiftcardobjectUpdate

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_GiftCardObject *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/giftCardObject/{resourceId}";
  GTLRWalletobjectsQuery_GiftcardobjectUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_GiftCardObject class];
  query.loggingName = @"walletobjects.giftcardobject.update";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_IssuerGet

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(long long)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/issuer/{resourceId}";
  GTLRWalletobjectsQuery_IssuerGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_Issuer class];
  query.loggingName = @"walletobjects.issuer.get";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_IssuerInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_Issuer *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/issuer";
  GTLRWalletobjectsQuery_IssuerInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_Issuer class];
  query.loggingName = @"walletobjects.issuer.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_IssuerList

+ (instancetype)query {
  NSString *pathURITemplate = @"walletobjects/v1/issuer";
  GTLRWalletobjectsQuery_IssuerList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRWalletobjects_IssuerListResponse class];
  query.loggingName = @"walletobjects.issuer.list";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_IssuerPatch

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_Issuer *)object
                     resourceId:(long long)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/issuer/{resourceId}";
  GTLRWalletobjectsQuery_IssuerPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_Issuer class];
  query.loggingName = @"walletobjects.issuer.patch";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_IssuerUpdate

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_Issuer *)object
                     resourceId:(long long)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/issuer/{resourceId}";
  GTLRWalletobjectsQuery_IssuerUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_Issuer class];
  query.loggingName = @"walletobjects.issuer.update";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_JwtInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_JwtResource *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/jwt";
  GTLRWalletobjectsQuery_JwtInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_JwtInsertResponse class];
  query.loggingName = @"walletobjects.jwt.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_LoyaltyclassAddmessage

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_AddMessageRequest *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/loyaltyClass/{resourceId}/addMessage";
  GTLRWalletobjectsQuery_LoyaltyclassAddmessage *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_LoyaltyClassAddMessageResponse class];
  query.loggingName = @"walletobjects.loyaltyclass.addmessage";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_LoyaltyclassGet

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(NSString *)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/loyaltyClass/{resourceId}";
  GTLRWalletobjectsQuery_LoyaltyclassGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_LoyaltyClass class];
  query.loggingName = @"walletobjects.loyaltyclass.get";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_LoyaltyclassInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_LoyaltyClass *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/loyaltyClass";
  GTLRWalletobjectsQuery_LoyaltyclassInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_LoyaltyClass class];
  query.loggingName = @"walletobjects.loyaltyclass.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_LoyaltyclassList

@dynamic issuerId, maxResults, token;

+ (instancetype)query {
  NSString *pathURITemplate = @"walletobjects/v1/loyaltyClass";
  GTLRWalletobjectsQuery_LoyaltyclassList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRWalletobjects_LoyaltyClassListResponse class];
  query.loggingName = @"walletobjects.loyaltyclass.list";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_LoyaltyclassPatch

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_LoyaltyClass *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/loyaltyClass/{resourceId}";
  GTLRWalletobjectsQuery_LoyaltyclassPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_LoyaltyClass class];
  query.loggingName = @"walletobjects.loyaltyclass.patch";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_LoyaltyclassUpdate

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_LoyaltyClass *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/loyaltyClass/{resourceId}";
  GTLRWalletobjectsQuery_LoyaltyclassUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_LoyaltyClass class];
  query.loggingName = @"walletobjects.loyaltyclass.update";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_LoyaltyobjectAddmessage

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_AddMessageRequest *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/loyaltyObject/{resourceId}/addMessage";
  GTLRWalletobjectsQuery_LoyaltyobjectAddmessage *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_LoyaltyObjectAddMessageResponse class];
  query.loggingName = @"walletobjects.loyaltyobject.addmessage";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_LoyaltyobjectGet

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(NSString *)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/loyaltyObject/{resourceId}";
  GTLRWalletobjectsQuery_LoyaltyobjectGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_LoyaltyObject class];
  query.loggingName = @"walletobjects.loyaltyobject.get";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_LoyaltyobjectInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_LoyaltyObject *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/loyaltyObject";
  GTLRWalletobjectsQuery_LoyaltyobjectInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_LoyaltyObject class];
  query.loggingName = @"walletobjects.loyaltyobject.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_LoyaltyobjectList

@dynamic classId, maxResults, token;

+ (instancetype)query {
  NSString *pathURITemplate = @"walletobjects/v1/loyaltyObject";
  GTLRWalletobjectsQuery_LoyaltyobjectList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRWalletobjects_LoyaltyObjectListResponse class];
  query.loggingName = @"walletobjects.loyaltyobject.list";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_LoyaltyobjectModifylinkedofferobjects

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_ModifyLinkedOfferObjectsRequest *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/loyaltyObject/{resourceId}/modifyLinkedOfferObjects";
  GTLRWalletobjectsQuery_LoyaltyobjectModifylinkedofferobjects *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_LoyaltyObject class];
  query.loggingName = @"walletobjects.loyaltyobject.modifylinkedofferobjects";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_LoyaltyobjectPatch

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_LoyaltyObject *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/loyaltyObject/{resourceId}";
  GTLRWalletobjectsQuery_LoyaltyobjectPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_LoyaltyObject class];
  query.loggingName = @"walletobjects.loyaltyobject.patch";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_LoyaltyobjectUpdate

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_LoyaltyObject *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/loyaltyObject/{resourceId}";
  GTLRWalletobjectsQuery_LoyaltyobjectUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_LoyaltyObject class];
  query.loggingName = @"walletobjects.loyaltyobject.update";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_MediaDownload

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(NSString *)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/transitObject/{resourceId}/downloadRotatingBarcodeValues";
  GTLRWalletobjectsQuery_MediaDownload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_Media class];
  query.loggingName = @"walletobjects.media.download";
  return query;
}

+ (instancetype)queryForMediaWithResourceId:(NSString *)resourceId {
  GTLRWalletobjectsQuery_MediaDownload *query =
    [self queryWithResourceId:resourceId];
  query.downloadAsDataObjectType = @"media";
  query.useMediaDownloadService = YES;
  query.loggingName = @"Download walletobjects.media.download";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_MediaUpload

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_TransitObjectUploadRotatingBarcodeValuesRequest *)object
                     resourceId:(NSString *)resourceId
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/transitObject/{resourceId}/uploadRotatingBarcodeValues";
  GTLRWalletobjectsQuery_MediaUpload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRWalletobjects_TransitObjectUploadRotatingBarcodeValuesResponse class];
  query.loggingName = @"walletobjects.media.upload";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_OfferclassAddmessage

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_AddMessageRequest *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/offerClass/{resourceId}/addMessage";
  GTLRWalletobjectsQuery_OfferclassAddmessage *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_OfferClassAddMessageResponse class];
  query.loggingName = @"walletobjects.offerclass.addmessage";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_OfferclassGet

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(NSString *)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/offerClass/{resourceId}";
  GTLRWalletobjectsQuery_OfferclassGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_OfferClass class];
  query.loggingName = @"walletobjects.offerclass.get";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_OfferclassInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_OfferClass *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/offerClass";
  GTLRWalletobjectsQuery_OfferclassInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_OfferClass class];
  query.loggingName = @"walletobjects.offerclass.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_OfferclassList

@dynamic issuerId, maxResults, token;

+ (instancetype)query {
  NSString *pathURITemplate = @"walletobjects/v1/offerClass";
  GTLRWalletobjectsQuery_OfferclassList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRWalletobjects_OfferClassListResponse class];
  query.loggingName = @"walletobjects.offerclass.list";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_OfferclassPatch

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_OfferClass *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/offerClass/{resourceId}";
  GTLRWalletobjectsQuery_OfferclassPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_OfferClass class];
  query.loggingName = @"walletobjects.offerclass.patch";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_OfferclassUpdate

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_OfferClass *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/offerClass/{resourceId}";
  GTLRWalletobjectsQuery_OfferclassUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_OfferClass class];
  query.loggingName = @"walletobjects.offerclass.update";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_OfferobjectAddmessage

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_AddMessageRequest *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/offerObject/{resourceId}/addMessage";
  GTLRWalletobjectsQuery_OfferobjectAddmessage *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_OfferObjectAddMessageResponse class];
  query.loggingName = @"walletobjects.offerobject.addmessage";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_OfferobjectGet

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(NSString *)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/offerObject/{resourceId}";
  GTLRWalletobjectsQuery_OfferobjectGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_OfferObject class];
  query.loggingName = @"walletobjects.offerobject.get";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_OfferobjectInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_OfferObject *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/offerObject";
  GTLRWalletobjectsQuery_OfferobjectInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_OfferObject class];
  query.loggingName = @"walletobjects.offerobject.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_OfferobjectList

@dynamic classId, maxResults, token;

+ (instancetype)query {
  NSString *pathURITemplate = @"walletobjects/v1/offerObject";
  GTLRWalletobjectsQuery_OfferobjectList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRWalletobjects_OfferObjectListResponse class];
  query.loggingName = @"walletobjects.offerobject.list";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_OfferobjectPatch

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_OfferObject *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/offerObject/{resourceId}";
  GTLRWalletobjectsQuery_OfferobjectPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_OfferObject class];
  query.loggingName = @"walletobjects.offerobject.patch";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_OfferobjectUpdate

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_OfferObject *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/offerObject/{resourceId}";
  GTLRWalletobjectsQuery_OfferobjectUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_OfferObject class];
  query.loggingName = @"walletobjects.offerobject.update";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_PermissionsGet

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(long long)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/permissions/{resourceId}";
  GTLRWalletobjectsQuery_PermissionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_Permissions class];
  query.loggingName = @"walletobjects.permissions.get";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_PermissionsUpdate

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_Permissions *)object
                     resourceId:(long long)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/permissions/{resourceId}";
  GTLRWalletobjectsQuery_PermissionsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_Permissions class];
  query.loggingName = @"walletobjects.permissions.update";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_SmarttapInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_SmartTap *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/smartTap";
  GTLRWalletobjectsQuery_SmarttapInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_SmartTap class];
  query.loggingName = @"walletobjects.smarttap.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_TransitclassAddmessage

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_AddMessageRequest *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/transitClass/{resourceId}/addMessage";
  GTLRWalletobjectsQuery_TransitclassAddmessage *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_TransitClassAddMessageResponse class];
  query.loggingName = @"walletobjects.transitclass.addmessage";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_TransitclassGet

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(NSString *)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/transitClass/{resourceId}";
  GTLRWalletobjectsQuery_TransitclassGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_TransitClass class];
  query.loggingName = @"walletobjects.transitclass.get";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_TransitclassInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_TransitClass *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/transitClass";
  GTLRWalletobjectsQuery_TransitclassInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_TransitClass class];
  query.loggingName = @"walletobjects.transitclass.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_TransitclassList

@dynamic issuerId, maxResults, token;

+ (instancetype)query {
  NSString *pathURITemplate = @"walletobjects/v1/transitClass";
  GTLRWalletobjectsQuery_TransitclassList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRWalletobjects_TransitClassListResponse class];
  query.loggingName = @"walletobjects.transitclass.list";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_TransitclassPatch

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_TransitClass *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/transitClass/{resourceId}";
  GTLRWalletobjectsQuery_TransitclassPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_TransitClass class];
  query.loggingName = @"walletobjects.transitclass.patch";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_TransitclassUpdate

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_TransitClass *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/transitClass/{resourceId}";
  GTLRWalletobjectsQuery_TransitclassUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_TransitClass class];
  query.loggingName = @"walletobjects.transitclass.update";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_TransitobjectAddmessage

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_AddMessageRequest *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/transitObject/{resourceId}/addMessage";
  GTLRWalletobjectsQuery_TransitobjectAddmessage *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_TransitObjectAddMessageResponse class];
  query.loggingName = @"walletobjects.transitobject.addmessage";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_TransitobjectGet

@dynamic resourceId;

+ (instancetype)queryWithResourceId:(NSString *)resourceId {
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/transitObject/{resourceId}";
  GTLRWalletobjectsQuery_TransitobjectGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_TransitObject class];
  query.loggingName = @"walletobjects.transitobject.get";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_TransitobjectInsert

+ (instancetype)queryWithObject:(GTLRWalletobjects_TransitObject *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/transitObject";
  GTLRWalletobjectsQuery_TransitobjectInsert *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_TransitObject class];
  query.loggingName = @"walletobjects.transitobject.insert";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_TransitobjectList

@dynamic classId, maxResults, token;

+ (instancetype)query {
  NSString *pathURITemplate = @"walletobjects/v1/transitObject";
  GTLRWalletobjectsQuery_TransitobjectList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRWalletobjects_TransitObjectListResponse class];
  query.loggingName = @"walletobjects.transitobject.list";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_TransitobjectPatch

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_TransitObject *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/transitObject/{resourceId}";
  GTLRWalletobjectsQuery_TransitobjectPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_TransitObject class];
  query.loggingName = @"walletobjects.transitobject.patch";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_TransitobjectUpdate

@dynamic resourceId;

+ (instancetype)queryWithObject:(GTLRWalletobjects_TransitObject *)object
                     resourceId:(NSString *)resourceId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resourceId" ];
  NSString *pathURITemplate = @"walletobjects/v1/transitObject/{resourceId}";
  GTLRWalletobjectsQuery_TransitobjectUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resourceId = resourceId;
  query.expectedObjectClass = [GTLRWalletobjects_TransitObject class];
  query.loggingName = @"walletobjects.transitobject.update";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_WalletobjectsV1PrivateContentSetPassUpdateNotice

+ (instancetype)queryWithObject:(GTLRWalletobjects_SetPassUpdateNoticeRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/privateContent/setPassUpdateNotice";
  GTLRWalletobjectsQuery_WalletobjectsV1PrivateContentSetPassUpdateNotice *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_SetPassUpdateNoticeResponse class];
  query.loggingName = @"walletobjects.walletobjects.v1.privateContent.setPassUpdateNotice";
  return query;
}

@end

@implementation GTLRWalletobjectsQuery_WalletobjectsV1PrivateContentUploadPrivateData

+ (instancetype)queryWithObject:(GTLRWalletobjects_UploadPrivateDataRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"walletobjects/v1/privateContent/uploadPrivateData";
  GTLRWalletobjectsQuery_WalletobjectsV1PrivateContentUploadPrivateData *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRWalletobjects_UploadPrivateDataResponse class];
  query.loggingName = @"walletobjects.walletobjects.v1.privateContent.uploadPrivateData";
  return query;
}

@end
