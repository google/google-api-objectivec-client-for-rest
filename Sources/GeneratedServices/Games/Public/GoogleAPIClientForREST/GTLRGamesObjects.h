// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Play Game Services (games/v1)
// Description:
//   The Google Play games service allows developers to enhance games with
//   social leaderboards, achievements, game state, sign-in with Google, and
//   more.
// Documentation:
//   https://developers.google.com/games/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRGames_AchievementDefinition;
@class GTLRGames_AchievementIncrement;
@class GTLRGames_AchievementSetStepsAtLeast;
@class GTLRGames_AchievementUpdateRequest;
@class GTLRGames_AchievementUpdateResponse;
@class GTLRGames_ApplicationCategory;
@class GTLRGames_Category;
@class GTLRGames_EventBatchRecordFailure;
@class GTLRGames_EventChild;
@class GTLRGames_EventDefinition;
@class GTLRGames_EventPeriodRange;
@class GTLRGames_EventPeriodUpdate;
@class GTLRGames_EventRecordFailure;
@class GTLRGames_EventUpdateRequest;
@class GTLRGames_ImageAsset;
@class GTLRGames_Instance;
@class GTLRGames_InstanceAndroidDetails;
@class GTLRGames_InstanceIosDetails;
@class GTLRGames_InstanceWebDetails;
@class GTLRGames_Leaderboard;
@class GTLRGames_LeaderboardEntry;
@class GTLRGames_LeaderboardScoreRank;
@class GTLRGames_Player;
@class GTLRGames_Player_Name;
@class GTLRGames_PlayerAchievement;
@class GTLRGames_PlayerEvent;
@class GTLRGames_PlayerExperienceInfo;
@class GTLRGames_PlayerLeaderboardScore;
@class GTLRGames_PlayerLevel;
@class GTLRGames_PlayerScore;
@class GTLRGames_PlayerScoreResponse;
@class GTLRGames_ProfileSettings;
@class GTLRGames_ScoreSubmission;
@class GTLRGames_Snapshot;
@class GTLRGames_SnapshotImage;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRGames_AchievementDefinition.achievementType

/**
 *  Safe default, don't use.
 *
 *  Value: "ACHIEVEMENT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementDefinition_AchievementType_AchievementTypeUnspecified;
/**
 *  Achievement is incremental.
 *
 *  Value: "INCREMENTAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementDefinition_AchievementType_Incremental;
/**
 *  Achievement is either locked or unlocked.
 *
 *  Value: "STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementDefinition_AchievementType_Standard;

// ----------------------------------------------------------------------------
// GTLRGames_AchievementDefinition.initialState

/**
 *  Achievement is hidden.
 *
 *  Value: "HIDDEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementDefinition_InitialState_Hidden;
/**
 *  Safe default, don't use.
 *
 *  Value: "INITIAL_ACHIEVEMENT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementDefinition_InitialState_InitialAchievementStateUnspecified;
/**
 *  Achievement is revealed.
 *
 *  Value: "REVEALED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementDefinition_InitialState_Revealed;
/**
 *  Achievement is unlocked.
 *
 *  Value: "UNLOCKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementDefinition_InitialState_Unlocked;

// ----------------------------------------------------------------------------
// GTLRGames_AchievementRevealResponse.currentState

/**
 *  Safe default, don't use.
 *
 *  Value: "REVEAL_ACHIEVEMENT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementRevealResponse_CurrentState_RevealAchievementStateUnspecified;
/**
 *  Achievement is revealed.
 *
 *  Value: "REVEALED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementRevealResponse_CurrentState_Revealed;
/**
 *  Achievement is unlocked.
 *
 *  Value: "UNLOCKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementRevealResponse_CurrentState_Unlocked;

// ----------------------------------------------------------------------------
// GTLRGames_AchievementUpdateRequest.updateType

/**
 *  Safe default, don't use.
 *
 *  Value: "ACHIEVEMENT_UPDATE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementUpdateRequest_UpdateType_AchievementUpdateTypeUnspecified;
/**
 *  Achievement is incremented.
 *
 *  Value: "INCREMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementUpdateRequest_UpdateType_Increment;
/**
 *  Achievement is revealed.
 *
 *  Value: "REVEAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementUpdateRequest_UpdateType_Reveal;
/**
 *  Achievement progress is set to at least the passed value.
 *
 *  Value: "SET_STEPS_AT_LEAST"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementUpdateRequest_UpdateType_SetStepsAtLeast;
/**
 *  Achievement is unlocked.
 *
 *  Value: "UNLOCK"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementUpdateRequest_UpdateType_Unlock;

// ----------------------------------------------------------------------------
// GTLRGames_AchievementUpdateResponse.currentState

/**
 *  Achievement is hidden.
 *
 *  Value: "HIDDEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementUpdateResponse_CurrentState_Hidden;
/**
 *  Achievement is revealed.
 *
 *  Value: "REVEALED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementUpdateResponse_CurrentState_Revealed;
/**
 *  Achievement is unlocked.
 *
 *  Value: "UNLOCKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementUpdateResponse_CurrentState_Unlocked;
/**
 *  Safe default, don't use.
 *
 *  Value: "UPDATED_ACHIEVEMENT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_AchievementUpdateResponse_CurrentState_UpdatedAchievementStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRGames_Application.enabledFeatures

/**
 *  Safe default, don't use.
 *
 *  Value: "APPLICATION_FEATURE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_Application_EnabledFeatures_ApplicationFeatureUnspecified;
/**
 *  Saved Games (snapshots).
 *
 *  Value: "SNAPSHOTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_Application_EnabledFeatures_Snapshots;

// ----------------------------------------------------------------------------
// GTLRGames_EventBatchRecordFailure.failureCause

/**
 *  An attempt was made to record a batch of data which was already seen.
 *
 *  Value: "ALREADY_UPDATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_EventBatchRecordFailure_FailureCause_AlreadyUpdated;
/**
 *  Default value. Should not be used.
 *
 *  Value: "EVENT_FAILURE_CAUSE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_EventBatchRecordFailure_FailureCause_EventFailureCauseUnspecified;
/**
 *  An attempt was made to record data faster than the server will apply
 *  updates.
 *
 *  Value: "RECORD_RATE_HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_EventBatchRecordFailure_FailureCause_RecordRateHigh;
/**
 *  A batch was sent with data too far in the past to record.
 *
 *  Value: "TIME_PERIOD_EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_EventBatchRecordFailure_FailureCause_TimePeriodExpired;
/**
 *  A batch was sent with a time range that was too long.
 *
 *  Value: "TIME_PERIOD_LONG"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_EventBatchRecordFailure_FailureCause_TimePeriodLong;
/**
 *  A batch was sent with a time range that was too short.
 *
 *  Value: "TIME_PERIOD_SHORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_EventBatchRecordFailure_FailureCause_TimePeriodShort;
/**
 *  A batch request was issued with more events than are allowed in a single
 *  batch.
 *
 *  Value: "TOO_LARGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_EventBatchRecordFailure_FailureCause_TooLarge;

// ----------------------------------------------------------------------------
// GTLRGames_EventDefinition.visibility

/**
 *  Default value. Should not be used.
 *
 *  Value: "EVENT_VISIBILITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_EventDefinition_Visibility_EventVisibilityUnspecified;
/**
 *  This event should only be shown to users that have recorded this event at
 *  least once.
 *
 *  Value: "HIDDEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_EventDefinition_Visibility_Hidden;
/**
 *  This event should be visible to all users.
 *
 *  Value: "REVEALED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_EventDefinition_Visibility_Revealed;

// ----------------------------------------------------------------------------
// GTLRGames_EventRecordFailure.failureCause

/**
 *  Default value. Should not use.
 *
 *  Value: "EVENT_UPDATE_FAILURE_CAUSE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_EventRecordFailure_FailureCause_EventUpdateFailureCauseUnspecified;
/**
 *  An attempt was made to increment an event by a non-positive value.
 *
 *  Value: "INVALID_UPDATE_VALUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_EventRecordFailure_FailureCause_InvalidUpdateValue;
/**
 *  An attempt was made to set an event that was not defined.
 *
 *  Value: "NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_EventRecordFailure_FailureCause_NotFound;

// ----------------------------------------------------------------------------
// GTLRGames_Instance.platformType

/**
 *  Instance is for Android.
 *
 *  Value: "ANDROID"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_Instance_PlatformType_Android;
/**
 *  Instance is for iOS.
 *
 *  Value: "IOS"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_Instance_PlatformType_Ios;
/**
 *  Default value. Should be unused.
 *
 *  Value: "PLATFORM_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_Instance_PlatformType_PlatformTypeUnspecified;
/**
 *  Instance is for Web App.
 *
 *  Value: "WEB_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_Instance_PlatformType_WebApp;

// ----------------------------------------------------------------------------
// GTLRGames_Leaderboard.order

/**
 *  Larger values are better; scores are sorted in descending order
 *
 *  Value: "LARGER_IS_BETTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_Leaderboard_Order_LargerIsBetter;
/**
 *  Default value. This value is unused.
 *
 *  Value: "SCORE_ORDER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_Leaderboard_Order_ScoreOrderUnspecified;
/**
 *  Smaller values are better; scores are sorted in ascending order
 *
 *  Value: "SMALLER_IS_BETTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_Leaderboard_Order_SmallerIsBetter;

// ----------------------------------------------------------------------------
// GTLRGames_LeaderboardEntry.timeSpan

/**
 *  The score is an all-time score.
 *
 *  Value: "ALL_TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_LeaderboardEntry_TimeSpan_AllTime;
/**
 *  The score is a daily score.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_LeaderboardEntry_TimeSpan_Daily;
/**
 *  Default value. This value is unused.
 *
 *  Value: "SCORE_TIME_SPAN_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_LeaderboardEntry_TimeSpan_ScoreTimeSpanUnspecified;
/**
 *  The score is a weekly score.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_LeaderboardEntry_TimeSpan_Weekly;

// ----------------------------------------------------------------------------
// GTLRGames_Player.friendStatus

/**
 *  The player and requester are friends.
 *
 *  Value: "FRIEND"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_Player_FriendStatus_Friend;
/**
 *  Default value. This value is unused.
 *
 *  Value: "FRIEND_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_Player_FriendStatus_FriendStatusUnspecified;
/**
 *  There is no relationship between the players.
 *
 *  Value: "NO_RELATIONSHIP"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_Player_FriendStatus_NoRelationship;

// ----------------------------------------------------------------------------
// GTLRGames_PlayerAchievement.achievementState

/**
 *  Achievement is hidden.
 *
 *  Value: "HIDDEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_PlayerAchievement_AchievementState_Hidden;
/**
 *  Achievement is revealed.
 *
 *  Value: "REVEALED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_PlayerAchievement_AchievementState_Revealed;
/**
 *  Default value. This value is unused.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_PlayerAchievement_AchievementState_StateUnspecified;
/**
 *  Achievement is unlocked.
 *
 *  Value: "UNLOCKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_PlayerAchievement_AchievementState_Unlocked;

// ----------------------------------------------------------------------------
// GTLRGames_PlayerLeaderboardScore.timeSpan

/**
 *  The score is an all-time score.
 *
 *  Value: "ALL_TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_PlayerLeaderboardScore_TimeSpan_AllTime;
/**
 *  The score is a daily score.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_PlayerLeaderboardScore_TimeSpan_Daily;
/**
 *  Default value. This value is unused.
 *
 *  Value: "SCORE_TIME_SPAN_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_PlayerLeaderboardScore_TimeSpan_ScoreTimeSpanUnspecified;
/**
 *  The score is a weekly score.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_PlayerLeaderboardScore_TimeSpan_Weekly;

// ----------------------------------------------------------------------------
// GTLRGames_PlayerScore.timeSpan

/**
 *  The score is an all-time score.
 *
 *  Value: "ALL_TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_PlayerScore_TimeSpan_AllTime;
/**
 *  The score is a daily score.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_PlayerScore_TimeSpan_Daily;
/**
 *  Default value. This value is unused.
 *
 *  Value: "SCORE_TIME_SPAN_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_PlayerScore_TimeSpan_ScoreTimeSpanUnspecified;
/**
 *  The score is a weekly score.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_PlayerScore_TimeSpan_Weekly;

// ----------------------------------------------------------------------------
// GTLRGames_PlayerScoreResponse.beatenScoreTimeSpans

/**
 *  The score is an all-time score.
 *
 *  Value: "ALL_TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_PlayerScoreResponse_BeatenScoreTimeSpans_AllTime;
/**
 *  The score is a daily score.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_PlayerScoreResponse_BeatenScoreTimeSpans_Daily;
/**
 *  Default value. This value is unused.
 *
 *  Value: "SCORE_TIME_SPAN_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_PlayerScoreResponse_BeatenScoreTimeSpans_ScoreTimeSpanUnspecified;
/**
 *  The score is a weekly score.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_PlayerScoreResponse_BeatenScoreTimeSpans_Weekly;

// ----------------------------------------------------------------------------
// GTLRGames_ProfileSettings.friendsListVisibility

/**
 *  Unused.
 *
 *  Value: "FRIENDS_LIST_VISIBILITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_ProfileSettings_FriendsListVisibility_FriendsListVisibilityUnspecified;
/**
 *  The developer does not have access to the friends list, but can call the
 *  Android API to show a consent dialog.
 *
 *  Value: "REQUEST_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_ProfileSettings_FriendsListVisibility_RequestRequired;
/**
 *  The friends list is currently unavailable for this user, and it is not
 *  possible to request access at this time, either because the user has
 *  permanently declined or the friends feature is not available to them. In
 *  this state, any attempts to request access to the friends list will be
 *  unsuccessful.
 *
 *  Value: "UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_ProfileSettings_FriendsListVisibility_Unavailable;
/**
 *  The friends list is currently visible to the game.
 *
 *  Value: "VISIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_ProfileSettings_FriendsListVisibility_Visible;

// ----------------------------------------------------------------------------
// GTLRGames_RevisionCheckResponse.revisionStatus

/**
 *  There is currently a newer version available, but the revision being used
 *  still works.
 *
 *  Value: "DEPRECATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_RevisionCheckResponse_RevisionStatus_Deprecated;
/**
 *  The revision being used is not supported in any released version.
 *
 *  Value: "INVALID"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_RevisionCheckResponse_RevisionStatus_Invalid;
/**
 *  The revision being used is current.
 *
 *  Value: "OK"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_RevisionCheckResponse_RevisionStatus_Ok;
/**
 *  Default value. This value is unused.
 *
 *  Value: "REVISION_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_RevisionCheckResponse_RevisionStatus_RevisionStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRGames_Snapshot.type

/**
 *  A snapshot representing a save game.
 *
 *  Value: "SAVE_GAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_Snapshot_Type_SaveGame;
/**
 *  Default value. This value is unused.
 *
 *  Value: "SNAPSHOT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGames_Snapshot_Type_SnapshotTypeUnspecified;

/**
 *  An achievement definition object.
 */
@interface GTLRGames_AchievementDefinition : GTLRObject

/**
 *  The type of the achievement.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_AchievementDefinition_AchievementType_AchievementTypeUnspecified
 *        Safe default, don't use. (Value: "ACHIEVEMENT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRGames_AchievementDefinition_AchievementType_Incremental
 *        Achievement is incremental. (Value: "INCREMENTAL")
 *    @arg @c kGTLRGames_AchievementDefinition_AchievementType_Standard
 *        Achievement is either locked or unlocked. (Value: "STANDARD")
 */
@property(nonatomic, copy, nullable) NSString *achievementType;

/**
 *  The description of the achievement.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Experience points which will be earned when unlocking this achievement.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *experiencePoints;

/** The total steps for an incremental achievement as a string. */
@property(nonatomic, copy, nullable) NSString *formattedTotalSteps;

/**
 *  The ID of the achievement.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The initial state of the achievement.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_AchievementDefinition_InitialState_Hidden Achievement
 *        is hidden. (Value: "HIDDEN")
 *    @arg @c kGTLRGames_AchievementDefinition_InitialState_InitialAchievementStateUnspecified
 *        Safe default, don't use. (Value:
 *        "INITIAL_ACHIEVEMENT_STATE_UNSPECIFIED")
 *    @arg @c kGTLRGames_AchievementDefinition_InitialState_Revealed Achievement
 *        is revealed. (Value: "REVEALED")
 *    @arg @c kGTLRGames_AchievementDefinition_InitialState_Unlocked Achievement
 *        is unlocked. (Value: "UNLOCKED")
 */
@property(nonatomic, copy, nullable) NSString *initialState;

/**
 *  Indicates whether the revealed icon image being returned is a default image,
 *  or is provided by the game.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isRevealedIconUrlDefault;

/**
 *  Indicates whether the unlocked icon image being returned is a default image,
 *  or is game-provided.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isUnlockedIconUrlDefault;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#achievementDefinition`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The name of the achievement. */
@property(nonatomic, copy, nullable) NSString *name;

/** The image URL for the revealed achievement icon. */
@property(nonatomic, copy, nullable) NSString *revealedIconUrl;

/**
 *  The total steps for an incremental achievement.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSteps;

/** The image URL for the unlocked achievement icon. */
@property(nonatomic, copy, nullable) NSString *unlockedIconUrl;

@end


/**
 *  A list of achievement definition objects.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_AchievementDefinitionsListResponse : GTLRCollectionObject

/**
 *  The achievement definitions.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_AchievementDefinition *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#achievementDefinitionsListResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Token corresponding to the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The payload to request to increment an achievement.
 */
@interface GTLRGames_AchievementIncrement : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#GamesAchievementIncrement`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The requestId associated with an increment to an achievement.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestId;

/**
 *  The number of steps to be incremented.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *steps;

@end


/**
 *  An achievement increment response
 */
@interface GTLRGames_AchievementIncrementResponse : GTLRObject

/**
 *  The current steps recorded for this incremental achievement.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentSteps;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#achievementIncrementResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Whether the current steps for the achievement has reached the number of
 *  steps required to unlock.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *newlyUnlocked;

@end


/**
 *  An achievement reveal response
 */
@interface GTLRGames_AchievementRevealResponse : GTLRObject

/**
 *  The current state of the achievement for which a reveal was attempted. This
 *  might be `UNLOCKED` if the achievement was already unlocked.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_AchievementRevealResponse_CurrentState_RevealAchievementStateUnspecified
 *        Safe default, don't use. (Value:
 *        "REVEAL_ACHIEVEMENT_STATE_UNSPECIFIED")
 *    @arg @c kGTLRGames_AchievementRevealResponse_CurrentState_Revealed
 *        Achievement is revealed. (Value: "REVEALED")
 *    @arg @c kGTLRGames_AchievementRevealResponse_CurrentState_Unlocked
 *        Achievement is unlocked. (Value: "UNLOCKED")
 */
@property(nonatomic, copy, nullable) NSString *currentState;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#achievementRevealResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  The payload to request to increment an achievement.
 */
@interface GTLRGames_AchievementSetStepsAtLeast : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#GamesAchievementSetStepsAtLeast`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The minimum number of steps for the achievement to be set to.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *steps;

@end


/**
 *  An achievement set steps at least response.
 */
@interface GTLRGames_AchievementSetStepsAtLeastResponse : GTLRObject

/**
 *  The current steps recorded for this incremental achievement.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentSteps;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#achievementSetStepsAtLeastResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Whether the current steps for the achievement has reached the number of
 *  steps required to unlock.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *newlyUnlocked;

@end


/**
 *  An achievement unlock response
 */
@interface GTLRGames_AchievementUnlockResponse : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#achievementUnlockResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Whether this achievement was newly unlocked (that is, whether the unlock
 *  request for the achievement was the first for the player).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *newlyUnlocked;

@end


/**
 *  A list of achievement update requests.
 */
@interface GTLRGames_AchievementUpdateMultipleRequest : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#achievementUpdateMultipleRequest`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The individual achievement update requests. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_AchievementUpdateRequest *> *updates;

@end


/**
 *  Response message for UpdateMultipleAchievements rpc.
 */
@interface GTLRGames_AchievementUpdateMultipleResponse : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#achievementUpdateMultipleResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The updated state of the achievements. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_AchievementUpdateResponse *> *updatedAchievements;

@end


/**
 *  A request to update an achievement.
 */
@interface GTLRGames_AchievementUpdateRequest : GTLRObject

/** The achievement this update is being applied to. */
@property(nonatomic, copy, nullable) NSString *achievementId;

/**
 *  The payload if an update of type `INCREMENT` was requested for the
 *  achievement.
 */
@property(nonatomic, strong, nullable) GTLRGames_AchievementIncrement *incrementPayload;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#achievementUpdateRequest`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The payload if an update of type `SET_STEPS_AT_LEAST` was requested for the
 *  achievement.
 */
@property(nonatomic, strong, nullable) GTLRGames_AchievementSetStepsAtLeast *setStepsAtLeastPayload;

/**
 *  The type of update being applied.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_AchievementUpdateRequest_UpdateType_AchievementUpdateTypeUnspecified
 *        Safe default, don't use. (Value:
 *        "ACHIEVEMENT_UPDATE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRGames_AchievementUpdateRequest_UpdateType_Increment
 *        Achievement is incremented. (Value: "INCREMENT")
 *    @arg @c kGTLRGames_AchievementUpdateRequest_UpdateType_Reveal Achievement
 *        is revealed. (Value: "REVEAL")
 *    @arg @c kGTLRGames_AchievementUpdateRequest_UpdateType_SetStepsAtLeast
 *        Achievement progress is set to at least the passed value. (Value:
 *        "SET_STEPS_AT_LEAST")
 *    @arg @c kGTLRGames_AchievementUpdateRequest_UpdateType_Unlock Achievement
 *        is unlocked. (Value: "UNLOCK")
 */
@property(nonatomic, copy, nullable) NSString *updateType;

@end


/**
 *  An updated achievement.
 */
@interface GTLRGames_AchievementUpdateResponse : GTLRObject

/** The achievement this update is was applied to. */
@property(nonatomic, copy, nullable) NSString *achievementId;

/**
 *  The current state of the achievement.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_AchievementUpdateResponse_CurrentState_Hidden
 *        Achievement is hidden. (Value: "HIDDEN")
 *    @arg @c kGTLRGames_AchievementUpdateResponse_CurrentState_Revealed
 *        Achievement is revealed. (Value: "REVEALED")
 *    @arg @c kGTLRGames_AchievementUpdateResponse_CurrentState_Unlocked
 *        Achievement is unlocked. (Value: "UNLOCKED")
 *    @arg @c kGTLRGames_AchievementUpdateResponse_CurrentState_UpdatedAchievementStateUnspecified
 *        Safe default, don't use. (Value:
 *        "UPDATED_ACHIEVEMENT_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *currentState;

/**
 *  The current steps recorded for this achievement if it is incremental.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentSteps;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#achievementUpdateResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Whether this achievement was newly unlocked (that is, whether the unlock
 *  request for the achievement was the first for the player).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *newlyUnlocked;

/**
 *  Whether the requested updates actually affected the achievement.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *updateOccurred;

@end


/**
 *  The Application resource.
 */
@interface GTLRGames_Application : GTLRObject

/**
 *  The number of achievements visible to the currently authenticated player.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *achievementCount;

/** The assets of the application. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_ImageAsset *> *assets;

/** The author of the application. */
@property(nonatomic, copy, nullable) NSString *author;

/** The category of the application. */
@property(nonatomic, strong, nullable) GTLRGames_ApplicationCategory *category;

/**
 *  The description of the application.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** A list of features that have been enabled for the application. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *enabledFeatures;

/**
 *  The ID of the application.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The instances of the application. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_Instance *> *instances;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#application`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The last updated timestamp of the application.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastUpdatedTimestamp;

/**
 *  The number of leaderboards visible to the currently authenticated player.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *leaderboardCount;

/** The name of the application. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A hint to the client UI for what color to use as an app-themed color. The
 *  color is given as an RGB triplet (e.g. "E0E0E0").
 */
@property(nonatomic, copy, nullable) NSString *themeColor;

@end


/**
 *  An application category object.
 */
@interface GTLRGames_ApplicationCategory : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#applicationCategory`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The primary category. */
@property(nonatomic, copy, nullable) NSString *primary;

/** The secondary category. */
@property(nonatomic, copy, nullable) NSString *secondary;

@end


/**
 *  A third party application verification response resource.
 */
@interface GTLRGames_ApplicationVerifyResponse : GTLRObject

/**
 *  An alternate ID that was once used for the player that was issued the auth
 *  token used in this request. (This field is not normally populated.)
 */
@property(nonatomic, copy, nullable) NSString *alternatePlayerId;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#applicationVerifyResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The ID of the player that was issued the auth token used in this request.
 */
@property(nonatomic, copy, nullable) NSString *playerId;

@end


/**
 *  Data related to individual game categories.
 */
@interface GTLRGames_Category : GTLRObject

/** The category name. */
@property(nonatomic, copy, nullable) NSString *category;

/**
 *  Experience points earned in this category.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *experiencePoints;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#category`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  A third party list metagame categories response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_CategoryListResponse : GTLRCollectionObject

/**
 *  The list of categories with usage data.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_Category *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#categoryListResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Token corresponding to the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Container for a URL end point of the requested type.
 */
@interface GTLRGames_EndPoint : GTLRObject

/** A URL suitable for loading in a web browser for the requested endpoint. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  A batch update failure resource.
 */
@interface GTLRGames_EventBatchRecordFailure : GTLRObject

/**
 *  The cause for the update failure.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_EventBatchRecordFailure_FailureCause_AlreadyUpdated An
 *        attempt was made to record a batch of data which was already seen.
 *        (Value: "ALREADY_UPDATED")
 *    @arg @c kGTLRGames_EventBatchRecordFailure_FailureCause_EventFailureCauseUnspecified
 *        Default value. Should not be used. (Value:
 *        "EVENT_FAILURE_CAUSE_UNSPECIFIED")
 *    @arg @c kGTLRGames_EventBatchRecordFailure_FailureCause_RecordRateHigh An
 *        attempt was made to record data faster than the server will apply
 *        updates. (Value: "RECORD_RATE_HIGH")
 *    @arg @c kGTLRGames_EventBatchRecordFailure_FailureCause_TimePeriodExpired
 *        A batch was sent with data too far in the past to record. (Value:
 *        "TIME_PERIOD_EXPIRED")
 *    @arg @c kGTLRGames_EventBatchRecordFailure_FailureCause_TimePeriodLong A
 *        batch was sent with a time range that was too long. (Value:
 *        "TIME_PERIOD_LONG")
 *    @arg @c kGTLRGames_EventBatchRecordFailure_FailureCause_TimePeriodShort A
 *        batch was sent with a time range that was too short. (Value:
 *        "TIME_PERIOD_SHORT")
 *    @arg @c kGTLRGames_EventBatchRecordFailure_FailureCause_TooLarge A batch
 *        request was issued with more events than are allowed in a single
 *        batch. (Value: "TOO_LARGE")
 */
@property(nonatomic, copy, nullable) NSString *failureCause;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#eventBatchRecordFailure`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The time range which was rejected; empty for a request-wide failure. */
@property(nonatomic, strong, nullable) GTLRGames_EventPeriodRange *range;

@end


/**
 *  An event child relationship resource.
 */
@interface GTLRGames_EventChild : GTLRObject

/** The ID of the child event. */
@property(nonatomic, copy, nullable) NSString *childId;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#eventChild`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  An event definition resource.
 */
@interface GTLRGames_EventDefinition : GTLRObject

/** A list of events that are a child of this event. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_EventChild *> *childEvents;

/**
 *  Description of what this event represents.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The name to display for the event. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The ID of the event.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The base URL for the image that represents the event. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/**
 *  Indicates whether the icon image being returned is a default image, or is
 *  game-provided.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDefaultImageUrl;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#eventDefinition`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The visibility of event being tracked in this definition.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_EventDefinition_Visibility_EventVisibilityUnspecified
 *        Default value. Should not be used. (Value:
 *        "EVENT_VISIBILITY_UNSPECIFIED")
 *    @arg @c kGTLRGames_EventDefinition_Visibility_Hidden This event should
 *        only be shown to users that have recorded this event at least once.
 *        (Value: "HIDDEN")
 *    @arg @c kGTLRGames_EventDefinition_Visibility_Revealed This event should
 *        be visible to all users. (Value: "REVEALED")
 */
@property(nonatomic, copy, nullable) NSString *visibility;

@end


/**
 *  A ListDefinitions response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_EventDefinitionListResponse : GTLRCollectionObject

/**
 *  The event definitions.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_EventDefinition *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#eventDefinitionListResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The pagination token for the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  An event period time range.
 */
@interface GTLRGames_EventPeriodRange : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#eventPeriodRange`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The time when this update period ends, in millis, since 1970 UTC (Unix
 *  Epoch).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *periodEndMillis;

/**
 *  The time when this update period begins, in millis, since 1970 UTC (Unix
 *  Epoch).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *periodStartMillis;

@end


/**
 *  An event period update resource.
 */
@interface GTLRGames_EventPeriodUpdate : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#eventPeriodUpdate`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The time period being covered by this update. */
@property(nonatomic, strong, nullable) GTLRGames_EventPeriodRange *timePeriod;

/** The updates being made for this time period. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_EventUpdateRequest *> *updates;

@end


/**
 *  An event update failure resource.
 */
@interface GTLRGames_EventRecordFailure : GTLRObject

/** The ID of the event that was not updated. */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  The cause for the update failure.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_EventRecordFailure_FailureCause_EventUpdateFailureCauseUnspecified
 *        Default value. Should not use. (Value:
 *        "EVENT_UPDATE_FAILURE_CAUSE_UNSPECIFIED")
 *    @arg @c kGTLRGames_EventRecordFailure_FailureCause_InvalidUpdateValue An
 *        attempt was made to increment an event by a non-positive value.
 *        (Value: "INVALID_UPDATE_VALUE")
 *    @arg @c kGTLRGames_EventRecordFailure_FailureCause_NotFound An attempt was
 *        made to set an event that was not defined. (Value: "NOT_FOUND")
 */
@property(nonatomic, copy, nullable) NSString *failureCause;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#eventRecordFailure`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  An event period update resource.
 */
@interface GTLRGames_EventRecordRequest : GTLRObject

/**
 *  The current time when this update was sent, in milliseconds, since 1970 UTC
 *  (Unix Epoch).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentTimeMillis;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#eventRecordRequest`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The request ID used to identify this attempt to record events.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestId;

/** A list of the time period updates being made in this request. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_EventPeriodUpdate *> *timePeriods;

@end


/**
 *  An event period update resource.
 */
@interface GTLRGames_EventUpdateRequest : GTLRObject

/** The ID of the event being modified in this update. */
@property(nonatomic, copy, nullable) NSString *definitionId;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#eventUpdateRequest`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The number of times this event occurred in this time period.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *updateCount;

@end


/**
 *  An event period update resource.
 */
@interface GTLRGames_EventUpdateResponse : GTLRObject

/** Any batch-wide failures which occurred applying updates. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_EventBatchRecordFailure *> *batchFailures;

/** Any failures updating a particular event. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_EventRecordFailure *> *eventFailures;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#eventUpdateResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The current status of any updated events */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_PlayerEvent *> *playerEvents;

@end


/**
 *  An image asset object.
 */
@interface GTLRGames_ImageAsset : GTLRObject

/**
 *  The height of the asset.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *height;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#imageAsset`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The name of the asset. */
@property(nonatomic, copy, nullable) NSString *name;

/** The URL of the asset. */
@property(nonatomic, copy, nullable) NSString *url;

/**
 *  The width of the asset.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *width;

@end


/**
 *  The Instance resource.
 */
@interface GTLRGames_Instance : GTLRObject

/** URI which shows where a user can acquire this instance. */
@property(nonatomic, copy, nullable) NSString *acquisitionUri;

/** Platform dependent details for Android. */
@property(nonatomic, strong, nullable) GTLRGames_InstanceAndroidDetails *androidInstance;

/** Platform dependent details for iOS. */
@property(nonatomic, strong, nullable) GTLRGames_InstanceIosDetails *iosInstance;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#instance`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Localized display name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The platform type.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_Instance_PlatformType_Android Instance is for Android.
 *        (Value: "ANDROID")
 *    @arg @c kGTLRGames_Instance_PlatformType_Ios Instance is for iOS. (Value:
 *        "IOS")
 *    @arg @c kGTLRGames_Instance_PlatformType_PlatformTypeUnspecified Default
 *        value. Should be unused. (Value: "PLATFORM_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRGames_Instance_PlatformType_WebApp Instance is for Web App.
 *        (Value: "WEB_APP")
 */
@property(nonatomic, copy, nullable) NSString *platformType;

/**
 *  Flag to show if this game instance supports realtime play.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *realtimePlay;

/**
 *  Flag to show if this game instance supports turn based play.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *turnBasedPlay;

/** Platform dependent details for Web. */
@property(nonatomic, strong, nullable) GTLRGames_InstanceWebDetails *webInstance;

@end


/**
 *  The Android instance details resource.
 */
@interface GTLRGames_InstanceAndroidDetails : GTLRObject

/**
 *  Flag indicating whether the anti-piracy check is enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enablePiracyCheck;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#instanceAndroidDetails`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Android package name which maps to Google Play URL. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  Indicates that this instance is the default for new installations.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preferred;

@end


/**
 *  The iOS details resource.
 */
@interface GTLRGames_InstanceIosDetails : GTLRObject

/** Bundle identifier. */
@property(nonatomic, copy, nullable) NSString *bundleIdentifier;

/** iTunes App ID. */
@property(nonatomic, copy, nullable) NSString *itunesAppId;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#instanceIosDetails`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Indicates that this instance is the default for new installations on iPad
 *  devices.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preferredForIpad;

/**
 *  Indicates that this instance is the default for new installations on iPhone
 *  devices.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preferredForIphone;

/**
 *  Flag to indicate if this instance supports iPad.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportIpad;

/**
 *  Flag to indicate if this instance supports iPhone.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportIphone;

@end


/**
 *  The Web details resource.
 */
@interface GTLRGames_InstanceWebDetails : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#instanceWebDetails`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Launch URL for the game. */
@property(nonatomic, copy, nullable) NSString *launchUrl;

/**
 *  Indicates that this instance is the default for new installations.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preferred;

@end


/**
 *  The Leaderboard resource.
 */
@interface GTLRGames_Leaderboard : GTLRObject

/** The icon for the leaderboard. */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The leaderboard ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Indicates whether the icon image being returned is a default image, or is
 *  game-provided.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isIconUrlDefault;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#leaderboard`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The name of the leaderboard. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  How scores are ordered.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_Leaderboard_Order_LargerIsBetter Larger values are
 *        better; scores are sorted in descending order (Value:
 *        "LARGER_IS_BETTER")
 *    @arg @c kGTLRGames_Leaderboard_Order_ScoreOrderUnspecified Default value.
 *        This value is unused. (Value: "SCORE_ORDER_UNSPECIFIED")
 *    @arg @c kGTLRGames_Leaderboard_Order_SmallerIsBetter Smaller values are
 *        better; scores are sorted in ascending order (Value:
 *        "SMALLER_IS_BETTER")
 */
@property(nonatomic, copy, nullable) NSString *order;

@end


/**
 *  The Leaderboard Entry resource.
 */
@interface GTLRGames_LeaderboardEntry : GTLRObject

/** The localized string for the numerical value of this score. */
@property(nonatomic, copy, nullable) NSString *formattedScore;

/** The localized string for the rank of this score for this leaderboard. */
@property(nonatomic, copy, nullable) NSString *formattedScoreRank;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#leaderboardEntry`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The player who holds this score. */
@property(nonatomic, strong, nullable) GTLRGames_Player *player;

/**
 *  The rank of this score for this leaderboard.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scoreRank;

/**
 *  Additional information about the score. Values must contain no more than 64
 *  URI-safe characters as defined by section 2.3 of RFC 3986.
 */
@property(nonatomic, copy, nullable) NSString *scoreTag;

/**
 *  The numerical value of this score.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scoreValue;

/**
 *  The time span of this high score.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_LeaderboardEntry_TimeSpan_AllTime The score is an
 *        all-time score. (Value: "ALL_TIME")
 *    @arg @c kGTLRGames_LeaderboardEntry_TimeSpan_Daily The score is a daily
 *        score. (Value: "DAILY")
 *    @arg @c kGTLRGames_LeaderboardEntry_TimeSpan_ScoreTimeSpanUnspecified
 *        Default value. This value is unused. (Value:
 *        "SCORE_TIME_SPAN_UNSPECIFIED")
 *    @arg @c kGTLRGames_LeaderboardEntry_TimeSpan_Weekly The score is a weekly
 *        score. (Value: "WEEKLY")
 */
@property(nonatomic, copy, nullable) NSString *timeSpan;

/**
 *  The timestamp at which this score was recorded, in milliseconds since the
 *  epoch in UTC.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeTimestampMillis;

@end


/**
 *  A list of leaderboard objects.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_LeaderboardListResponse : GTLRCollectionObject

/**
 *  The leaderboards.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_Leaderboard *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#leaderboardListResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Token corresponding to the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  A score rank in a leaderboard.
 */
@interface GTLRGames_LeaderboardScoreRank : GTLRObject

/** The number of scores in the leaderboard as a string. */
@property(nonatomic, copy, nullable) NSString *formattedNumScores;

/** The rank in the leaderboard as a string. */
@property(nonatomic, copy, nullable) NSString *formattedRank;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#leaderboardScoreRank`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The number of scores in the leaderboard.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numScores;

/**
 *  The rank in the leaderboard.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rank;

@end


/**
 *  A ListScores response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_LeaderboardScores : GTLRCollectionObject

/**
 *  The scores in the leaderboard.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_LeaderboardEntry *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#leaderboardScores`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The pagination token for the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The total number of scores in the leaderboard.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numScores;

/**
 *  The score of the requesting player on the leaderboard. The player's score
 *  may appear both here and in the list of scores above. If you are viewing a
 *  public leaderboard and the player is not sharing their gameplay information
 *  publicly, the `scoreRank`and `formattedScoreRank` values will not be
 *  present.
 */
@property(nonatomic, strong, nullable) GTLRGames_LeaderboardEntry *playerScore;

/** The pagination token for the previous page of results. */
@property(nonatomic, copy, nullable) NSString *prevPageToken;

@end


/**
 *  The metagame config resource
 */
@interface GTLRGames_MetagameConfig : GTLRObject

/**
 *  Current version of the metagame configuration data. When this data is
 *  updated, the version number will be increased by one.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentVersion;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#metagameConfig`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The list of player levels. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_PlayerLevel *> *playerLevels;

@end


/**
 *  A Player resource.
 */
@interface GTLRGames_Player : GTLRObject

/** The base URL for the image that represents the player. */
@property(nonatomic, copy, nullable) NSString *avatarImageUrl;

/** The url to the landscape mode player banner image. */
@property(nonatomic, copy, nullable) NSString *bannerUrlLandscape;

/** The url to the portrait mode player banner image. */
@property(nonatomic, copy, nullable) NSString *bannerUrlPortrait;

/** The name to display for the player. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** An object to represent Play Game experience information for the player. */
@property(nonatomic, strong, nullable) GTLRGames_PlayerExperienceInfo *experienceInfo;

/**
 *  The friend status of the given player, relative to the requester. This is
 *  unset if the player is not sharing their friends list with the game.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_Player_FriendStatus_Friend The player and requester are
 *        friends. (Value: "FRIEND")
 *    @arg @c kGTLRGames_Player_FriendStatus_FriendStatusUnspecified Default
 *        value. This value is unused. (Value: "FRIEND_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRGames_Player_FriendStatus_NoRelationship There is no
 *        relationship between the players. (Value: "NO_RELATIONSHIP")
 */
@property(nonatomic, copy, nullable) NSString *friendStatus;

/** Per-application unique player identifier. */
@property(nonatomic, copy, nullable) NSString *gamePlayerId;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#player`
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** A representation of the individual components of the name. */
@property(nonatomic, strong, nullable) GTLRGames_Player_Name *name;

/**
 *  The player ID that was used for this player the first time they signed into
 *  the game in question. This is only populated for calls to player.get for the
 *  requesting player, only if the player ID has subsequently changed, and only
 *  to clients that support remapping player IDs.
 */
@property(nonatomic, copy, nullable) NSString *originalPlayerId;

/** The ID of the player. */
@property(nonatomic, copy, nullable) NSString *playerId;

/**
 *  The player's profile settings. Controls whether or not the player's profile
 *  is visible to other players.
 */
@property(nonatomic, strong, nullable) GTLRGames_ProfileSettings *profileSettings;

/** The player's title rewarded for their game activities. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  A representation of the individual components of the name.
 */
@interface GTLRGames_Player_Name : GTLRObject

/**
 *  The family name of this player. In some places, this is known as the last
 *  name.
 */
@property(nonatomic, copy, nullable) NSString *familyName;

/**
 *  The given name of this player. In some places, this is known as the first
 *  name.
 */
@property(nonatomic, copy, nullable) NSString *givenName;

@end


/**
 *  An achievement object.
 */
@interface GTLRGames_PlayerAchievement : GTLRObject

/**
 *  The state of the achievement.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_PlayerAchievement_AchievementState_Hidden Achievement
 *        is hidden. (Value: "HIDDEN")
 *    @arg @c kGTLRGames_PlayerAchievement_AchievementState_Revealed Achievement
 *        is revealed. (Value: "REVEALED")
 *    @arg @c kGTLRGames_PlayerAchievement_AchievementState_StateUnspecified
 *        Default value. This value is unused. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRGames_PlayerAchievement_AchievementState_Unlocked Achievement
 *        is unlocked. (Value: "UNLOCKED")
 */
@property(nonatomic, copy, nullable) NSString *achievementState;

/**
 *  The current steps for an incremental achievement.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentSteps;

/**
 *  Experience points earned for the achievement. This field is absent for
 *  achievements that have not yet been unlocked and 0 for achievements that
 *  have been unlocked by testers but that are unpublished.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *experiencePoints;

/** The current steps for an incremental achievement as a string. */
@property(nonatomic, copy, nullable) NSString *formattedCurrentStepsString;

/**
 *  The ID of the achievement.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#playerAchievement`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The timestamp of the last modification to this achievement's state.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastUpdatedTimestamp;

@end


/**
 *  A list of achievement objects.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_PlayerAchievementListResponse : GTLRCollectionObject

/**
 *  The achievements.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_PlayerAchievement *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#playerAchievementListResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Token corresponding to the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  An event status resource.
 */
@interface GTLRGames_PlayerEvent : GTLRObject

/** The ID of the event definition. */
@property(nonatomic, copy, nullable) NSString *definitionId;

/**
 *  The current number of times this event has occurred, as a string. The
 *  formatting of this string depends on the configuration of your event in the
 *  Play Games Developer Console.
 */
@property(nonatomic, copy, nullable) NSString *formattedNumEvents;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#playerEvent`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The current number of times this event has occurred.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numEvents;

/** The ID of the player. */
@property(nonatomic, copy, nullable) NSString *playerId;

@end


/**
 *  A ListByPlayer response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_PlayerEventListResponse : GTLRCollectionObject

/**
 *  The player events.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_PlayerEvent *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#playerEventListResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The pagination token for the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  1P/3P metadata about the player's experience.
 */
@interface GTLRGames_PlayerExperienceInfo : GTLRObject

/**
 *  The current number of experience points for the player.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentExperiencePoints;

/** The current level of the player. */
@property(nonatomic, strong, nullable) GTLRGames_PlayerLevel *currentLevel;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#playerExperienceInfo`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The timestamp when the player was leveled up, in millis since Unix epoch
 *  UTC.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastLevelUpTimestampMillis;

/**
 *  The next level of the player. If the current level is the maximum level,
 *  this should be same as the current level.
 */
@property(nonatomic, strong, nullable) GTLRGames_PlayerLevel *nextLevel;

@end


/**
 *  A player leaderboard score object.
 */
@interface GTLRGames_PlayerLeaderboardScore : GTLRObject

/** The rank of the score in the friends collection for this leaderboard. */
@property(nonatomic, strong, nullable) GTLRGames_LeaderboardScoreRank *friendsRank;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#playerLeaderboardScore`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The ID of the leaderboard this score is in. */
@property(nonatomic, copy, nullable) NSString *leaderboardId;

/**
 *  The public rank of the score in this leaderboard. This object will not be
 *  present if the user is not sharing their scores publicly.
 */
@property(nonatomic, strong, nullable) GTLRGames_LeaderboardScoreRank *publicRank;

/** The formatted value of this score. */
@property(nonatomic, copy, nullable) NSString *scoreString;

/**
 *  Additional information about the score. Values must contain no more than 64
 *  URI-safe characters as defined by section 2.3 of RFC 3986.
 */
@property(nonatomic, copy, nullable) NSString *scoreTag;

/**
 *  The numerical value of this score.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scoreValue;

/** The social rank of the score in this leaderboard. */
@property(nonatomic, strong, nullable) GTLRGames_LeaderboardScoreRank *socialRank;

/**
 *  The time span of this score.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_PlayerLeaderboardScore_TimeSpan_AllTime The score is an
 *        all-time score. (Value: "ALL_TIME")
 *    @arg @c kGTLRGames_PlayerLeaderboardScore_TimeSpan_Daily The score is a
 *        daily score. (Value: "DAILY")
 *    @arg @c kGTLRGames_PlayerLeaderboardScore_TimeSpan_ScoreTimeSpanUnspecified
 *        Default value. This value is unused. (Value:
 *        "SCORE_TIME_SPAN_UNSPECIFIED")
 *    @arg @c kGTLRGames_PlayerLeaderboardScore_TimeSpan_Weekly The score is a
 *        weekly score. (Value: "WEEKLY")
 */
@property(nonatomic, copy, nullable) NSString *timeSpan;

/**
 *  The timestamp at which this score was recorded, in milliseconds since the
 *  epoch in UTC.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writeTimestamp;

@end


/**
 *  A list of player leaderboard scores.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_PlayerLeaderboardScoreListResponse : GTLRCollectionObject

/**
 *  The leaderboard scores.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_PlayerLeaderboardScore *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#playerLeaderboardScoreListResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The pagination token for the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** The Player resources for the owner of this score. */
@property(nonatomic, strong, nullable) GTLRGames_Player *player;

@end


/**
 *  1P/3P metadata about a user's level.
 */
@interface GTLRGames_PlayerLevel : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#playerLevel`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The level for the user.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *level;

/**
 *  The maximum experience points for this level.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxExperiencePoints;

/**
 *  The minimum experience points for this level.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minExperiencePoints;

@end


/**
 *  A third party player list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_PlayerListResponse : GTLRCollectionObject

/**
 *  The players.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_Player *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#playerListResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Token corresponding to the next page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  A player score.
 */
@interface GTLRGames_PlayerScore : GTLRObject

/** The formatted score for this player score. */
@property(nonatomic, copy, nullable) NSString *formattedScore;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#playerScore`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The numerical value for this player score.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *score;

/**
 *  Additional information about this score. Values will contain no more than 64
 *  URI-safe characters as defined by section 2.3 of RFC 3986.
 */
@property(nonatomic, copy, nullable) NSString *scoreTag;

/**
 *  The time span for this player score.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_PlayerScore_TimeSpan_AllTime The score is an all-time
 *        score. (Value: "ALL_TIME")
 *    @arg @c kGTLRGames_PlayerScore_TimeSpan_Daily The score is a daily score.
 *        (Value: "DAILY")
 *    @arg @c kGTLRGames_PlayerScore_TimeSpan_ScoreTimeSpanUnspecified Default
 *        value. This value is unused. (Value: "SCORE_TIME_SPAN_UNSPECIFIED")
 *    @arg @c kGTLRGames_PlayerScore_TimeSpan_Weekly The score is a weekly
 *        score. (Value: "WEEKLY")
 */
@property(nonatomic, copy, nullable) NSString *timeSpan;

@end


/**
 *  A list of score submission statuses.
 */
@interface GTLRGames_PlayerScoreListResponse : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#playerScoreListResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The score submissions statuses. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_PlayerScoreResponse *> *submittedScores;

@end


/**
 *  A list of leaderboard entry resources.
 */
@interface GTLRGames_PlayerScoreResponse : GTLRObject

/**
 *  The time spans where the submitted score is better than the existing score
 *  for that time span.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *beatenScoreTimeSpans;

/** The formatted value of the submitted score. */
@property(nonatomic, copy, nullable) NSString *formattedScore;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#playerScoreResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The leaderboard ID that this score was submitted to. */
@property(nonatomic, copy, nullable) NSString *leaderboardId;

/**
 *  Additional information about this score. Values will contain no more than 64
 *  URI-safe characters as defined by section 2.3 of RFC 3986.
 */
@property(nonatomic, copy, nullable) NSString *scoreTag;

/**
 *  The scores in time spans that have not been beaten. As an example, the
 *  submitted score may be better than the player's `DAILY` score, but not
 *  better than the player's scores for the `WEEKLY` or `ALL_TIME` time spans.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_PlayerScore *> *unbeatenScores;

@end


/**
 *  A list of score submission requests.
 */
@interface GTLRGames_PlayerScoreSubmissionList : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#playerScoreSubmissionList`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The score submissions. */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_ScoreSubmission *> *scores;

@end


/**
 *  Profile settings
 */
@interface GTLRGames_ProfileSettings : GTLRObject

/**
 *  friendsListVisibility
 *
 *  Likely values:
 *    @arg @c kGTLRGames_ProfileSettings_FriendsListVisibility_FriendsListVisibilityUnspecified
 *        Unused. (Value: "FRIENDS_LIST_VISIBILITY_UNSPECIFIED")
 *    @arg @c kGTLRGames_ProfileSettings_FriendsListVisibility_RequestRequired
 *        The developer does not have access to the friends list, but can call
 *        the Android API to show a consent dialog. (Value: "REQUEST_REQUIRED")
 *    @arg @c kGTLRGames_ProfileSettings_FriendsListVisibility_Unavailable The
 *        friends list is currently unavailable for this user, and it is not
 *        possible to request access at this time, either because the user has
 *        permanently declined or the friends feature is not available to them.
 *        In this state, any attempts to request access to the friends list will
 *        be unsuccessful. (Value: "UNAVAILABLE")
 *    @arg @c kGTLRGames_ProfileSettings_FriendsListVisibility_Visible The
 *        friends list is currently visible to the game. (Value: "VISIBLE")
 */
@property(nonatomic, copy, nullable) NSString *friendsListVisibility;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#profileSettings`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Whether the player's profile is visible to the currently signed in player.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *profileVisible;

@end


/**
 *  A third party checking a revision response.
 */
@interface GTLRGames_RevisionCheckResponse : GTLRObject

/**
 *  The version of the API this client revision should use when calling API
 *  methods.
 */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#revisionCheckResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The result of the revision check.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_RevisionCheckResponse_RevisionStatus_Deprecated There
 *        is currently a newer version available, but the revision being used
 *        still works. (Value: "DEPRECATED")
 *    @arg @c kGTLRGames_RevisionCheckResponse_RevisionStatus_Invalid The
 *        revision being used is not supported in any released version. (Value:
 *        "INVALID")
 *    @arg @c kGTLRGames_RevisionCheckResponse_RevisionStatus_Ok The revision
 *        being used is current. (Value: "OK")
 *    @arg @c kGTLRGames_RevisionCheckResponse_RevisionStatus_RevisionStatusUnspecified
 *        Default value. This value is unused. (Value:
 *        "REVISION_STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *revisionStatus;

@end


/**
 *  Scoped player identifiers.
 */
@interface GTLRGames_ScopedPlayerIds : GTLRObject

/**
 *  Identifier of the player across all games of the given developer. Every
 *  player has the same developer_player_key in all games of one developer.
 *  Developer player key changes for the game if the game is transferred to
 *  another developer. Note that game_player_id will stay unchanged.
 */
@property(nonatomic, copy, nullable) NSString *developerPlayerKey;

/**
 *  Game-scoped player identifier. This is the same id that is returned in
 *  GetPlayer game_player_id field.
 */
@property(nonatomic, copy, nullable) NSString *gamePlayerId;

@end


/**
 *  A request to submit a score to leaderboards.
 */
@interface GTLRGames_ScoreSubmission : GTLRObject

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#scoreSubmission`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The leaderboard this score is being submitted to. */
@property(nonatomic, copy, nullable) NSString *leaderboardId;

/**
 *  The new score being submitted.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *score;

/**
 *  Additional information about this score. Values will contain no more than 64
 *  URI-safe characters as defined by section 2.3 of RFC 3986.
 */
@property(nonatomic, copy, nullable) NSString *scoreTag;

/**
 *  Signature Values will contain URI-safe characters as defined by section 2.3
 *  of RFC 3986.
 */
@property(nonatomic, copy, nullable) NSString *signature;

@end


/**
 *  An snapshot object.
 */
@interface GTLRGames_Snapshot : GTLRObject

/** The cover image of this snapshot. May be absent if there is no image. */
@property(nonatomic, strong, nullable) GTLRGames_SnapshotImage *coverImage;

/**
 *  The description of this snapshot.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The ID of the file underlying this snapshot in the Drive API. Only present
 *  if the snapshot is a view on a Drive file and the file is owned by the
 *  caller.
 */
@property(nonatomic, copy, nullable) NSString *driveId;

/**
 *  The duration associated with this snapshot, in millis.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *durationMillis;

/**
 *  The ID of the snapshot.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#snapshot`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The timestamp (in millis since Unix epoch) of the last modification to this
 *  snapshot.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastModifiedMillis;

/**
 *  The progress value (64-bit integer set by developer) associated with this
 *  snapshot.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *progressValue;

/** The title of this snapshot. */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  The type of this snapshot.
 *
 *  Likely values:
 *    @arg @c kGTLRGames_Snapshot_Type_SaveGame A snapshot representing a save
 *        game. (Value: "SAVE_GAME")
 *    @arg @c kGTLRGames_Snapshot_Type_SnapshotTypeUnspecified Default value.
 *        This value is unused. (Value: "SNAPSHOT_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The unique name provided when the snapshot was created. */
@property(nonatomic, copy, nullable) NSString *uniqueName;

@end


/**
 *  An image of a snapshot.
 */
@interface GTLRGames_SnapshotImage : GTLRObject

/**
 *  The height of the image.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *height;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#snapshotImage`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The MIME type of the image. */
@property(nonatomic, copy, nullable) NSString *mimeType;

/**
 *  The URL of the image. This URL may be invalidated at any time and should not
 *  be cached.
 */
@property(nonatomic, copy, nullable) NSString *url;

/**
 *  The width of the image.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *width;

@end


/**
 *  A third party list snapshots response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGames_SnapshotListResponse : GTLRCollectionObject

/**
 *  The snapshots.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGames_Snapshot *> *items;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#snapshotListResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Token corresponding to the next page of results. If there are no more
 *  results, the token is omitted.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  A third party stats resource.
 */
@interface GTLRGames_StatsResponse : GTLRObject

/**
 *  Average session length in minutes of the player. E.g., 1, 30, 60, ... . Not
 *  populated if there is not enough information.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *avgSessionLengthMinutes;

/**
 *  The probability of the player not returning to play the game in the next
 *  day. E.g., 0, 0.1, 0.5, ..., 1.0. Not populated if there is not enough
 *  information.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *churnProbability;

/**
 *  Number of days since the player last played this game. E.g., 0, 1, 5, 10,
 *  ... . Not populated if there is not enough information.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *daysSinceLastPlayed;

/**
 *  The probability of the player going to spend beyond a threshold amount of
 *  money. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough
 *  information.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *highSpenderProbability;

/**
 *  Uniquely identifies the type of this resource. Value is always the fixed
 *  string `games#statsResponse`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Number of in-app purchases made by the player in this game. E.g., 0, 1, 5,
 *  10, ... . Not populated if there is not enough information.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numPurchases;

/**
 *  The approximate number of sessions of the player within the last 28 days,
 *  where a session begins when the player is connected to Play Games Services
 *  and ends when they are disconnected. E.g., 0, 1, 5, 10, ... . Not populated
 *  if there is not enough information.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numSessions;

/**
 *  The approximation of the sessions percentile of the player within the last
 *  30 days, where a session begins when the player is connected to Play Games
 *  Services and ends when they are disconnected. E.g., 0, 0.25, 0.5, 0.75. Not
 *  populated if there is not enough information.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numSessionsPercentile;

/**
 *  The approximate spend percentile of the player in this game. E.g., 0, 0.25,
 *  0.5, 0.75. Not populated if there is not enough information.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *spendPercentile;

/**
 *  The probability of the player going to spend the game in the next seven
 *  days. E.g., 0, 0.25, 0.50, 0.75. Not populated if there is not enough
 *  information.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *spendProbability;

/**
 *  The predicted amount of money that the player going to spend in the next 28
 *  days. E.g., 1, 30, 60, ... . Not populated if there is not enough
 *  information.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSpendNext28Days;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
