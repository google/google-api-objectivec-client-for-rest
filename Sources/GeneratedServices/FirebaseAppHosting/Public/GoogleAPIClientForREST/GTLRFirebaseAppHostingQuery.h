// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase App Hosting API (firebaseapphosting/v1)
// Description:
//   Firebase App Hosting streamlines the development and deployment of dynamic
//   Next.js and Angular applications, offering built-in framework support,
//   GitHub integration, and integration with other Firebase products. You can
//   use this API to intervene in the Firebase App Hosting build process and add
//   custom functionality not supported in our default Console & CLI flows,
//   including triggering builds from external CI/CD workflows or deploying from
//   pre-built container images.
// Documentation:
//   https://firebase.google.com/docs/app-hosting

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRFirebaseAppHostingObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Firebase App Hosting query classes.
 */
@interface GTLRFirebaseAppHostingQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new build for a backend.
 *
 *  Method: firebaseapphosting.projects.locations.backends.builds.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsBuildsCreate : GTLRFirebaseAppHostingQuery

/** Required. Desired ID of the build being created. */
@property(nonatomic, copy, nullable) NSString *buildId;

/**
 *  Required. The parent backend in the format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Indicates that the request should be validated and default values
 *  populated, without persisting the request or creating any resources.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Operation.
 *
 *  Creates a new build for a backend.
 *
 *  @param object The @c GTLRFirebaseAppHosting_Build to include in the query.
 *  @param parent Required. The parent backend in the format:
 *    `projects/{project}/locations/{locationId}/backends/{backendId}`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsBuildsCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppHosting_Build *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single build.
 *
 *  Method: firebaseapphosting.projects.locations.backends.builds.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsBuildsDelete : GTLRFirebaseAppHostingQuery

/**
 *  Optional. If the client provided etag is out of date, delete will be
 *  returned FAILED_PRECONDITION error.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Required. Name of the resource in the format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Indicates that the request should be validated and default values
 *  populated, without persisting the request or deleting any resources.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Operation.
 *
 *  Deletes a single build.
 *
 *  @param name Required. Name of the resource in the format:
 *    `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsBuildsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets information about a build.
 *
 *  Method: firebaseapphosting.projects.locations.backends.builds.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsBuildsGet : GTLRFirebaseAppHostingQuery

/**
 *  Required. Name of the resource in the format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Build.
 *
 *  Gets information about a build.
 *
 *  @param name Required. Name of the resource in the format:
 *    `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsBuildsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists builds in a given project, location, and backend.
 *
 *  Method: firebaseapphosting.projects.locations.backends.builds.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsBuildsList : GTLRFirebaseAppHostingQuery

/**
 *  Optional. A filter to narrow down results to a preferred subset. Learn more
 *  about filtering in Google's [AIP 160 standard](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Hint for how to order the results. Supported fields are `name` and
 *  `createTime`. To specify descending order, append a `desc` suffix.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of results to return. If not set, the service
 *  selects a default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token received from the nextPageToken field in the
 *  response. Send that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent backend in the form
 *  `projects/{project}/locations/{locationId}/backends/{backendId}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. If true, the request returns soft-deleted resources that haven't
 *  been fully-deleted yet.
 */
@property(nonatomic, assign) BOOL showDeleted;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_ListBuildsResponse.
 *
 *  Lists builds in a given project, location, and backend.
 *
 *  @param parent Required. The parent backend in the form
 *    `projects/{project}/locations/{locationId}/backends/{backendId}`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsBuildsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a new backend in a given project and location.
 *
 *  Method: firebaseapphosting.projects.locations.backends.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsCreate : GTLRFirebaseAppHostingQuery

/**
 *  Required. Id of the backend. Also used as the service ID for Cloud Run, and
 *  as part of the default domain name.
 */
@property(nonatomic, copy, nullable) NSString *backendId;

/**
 *  Required. A parent name of the form
 *  `projects/{project}/locations/{locationId}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and t he request
 *  times out. If you make the request again with the same request ID, the
 *  server can check if original operation with the same request ID was
 *  received, and if so, will ignore the second request. This prevents clients
 *  from accidentally creating duplicate commitments. The request ID must be a
 *  valid UUID with the exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Indicates that the request should be validated and default values
 *  populated, without persisting the request or creating any resources.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Operation.
 *
 *  Creates a new backend in a given project and location.
 *
 *  @param object The @c GTLRFirebaseAppHosting_Backend to include in the query.
 *  @param parent Required. A parent name of the form
 *    `projects/{project}/locations/{locationId}`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppHosting_Backend *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single backend.
 *
 *  Method: firebaseapphosting.projects.locations.backends.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsDelete : GTLRFirebaseAppHostingQuery

/**
 *  Optional. If the client provided etag is out of date, delete will be
 *  returned FAILED_PRECONDITION error.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. If set to true, any resources for this backend will also be
 *  deleted. Otherwise, any children resources will block deletion.
 */
@property(nonatomic, assign) BOOL force;

/**
 *  Required. Name of the resource in the format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and t he request
 *  times out. If you make the request again with the same request ID, the
 *  server can check if original operation with the same request ID was
 *  received, and if so, will ignore the second request. This prevents clients
 *  from accidentally creating duplicate commitments. The request ID must be a
 *  valid UUID with the exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Indicates that the request should be validated, without persisting
 *  the request or updating any resources.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Operation.
 *
 *  Deletes a single backend.
 *
 *  @param name Required. Name of the resource in the format:
 *    `projects/{project}/locations/{locationId}/backends/{backendId}`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Links a new domain to a backend.
 *
 *  Method: firebaseapphosting.projects.locations.backends.domains.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsDomainsCreate : GTLRFirebaseAppHostingQuery

/** Required. Id of the domain to create. Must be a valid domain name. */
@property(nonatomic, copy, nullable) NSString *domainId;

/**
 *  Required. The parent backend in the format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Indicates that the request should be validated and default values
 *  populated, without persisting the request or creating any resources.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Operation.
 *
 *  Links a new domain to a backend.
 *
 *  @param object The @c GTLRFirebaseAppHosting_Domain to include in the query.
 *  @param parent Required. The parent backend in the format:
 *    `projects/{project}/locations/{locationId}/backends/{backendId}`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsDomainsCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppHosting_Domain *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single domain.
 *
 *  Method: firebaseapphosting.projects.locations.backends.domains.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsDomainsDelete : GTLRFirebaseAppHostingQuery

/**
 *  Optional. If the client provided etag is out of date, delete will be
 *  returned FAILED_PRECONDITION error.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Required. Name of the resource in the format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Indicates that the request should be validated and default values
 *  populated, without persisting the request or deleting any resources.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Operation.
 *
 *  Deletes a single domain.
 *
 *  @param name Required. Name of the resource in the format:
 *    `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsDomainsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets information about a domain.
 *
 *  Method: firebaseapphosting.projects.locations.backends.domains.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsDomainsGet : GTLRFirebaseAppHostingQuery

/**
 *  Required. Name of the resource in the format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Domain.
 *
 *  Gets information about a domain.
 *
 *  @param name Required. Name of the resource in the format:
 *    `projects/{project}/locations/{locationId}/backends/{backendId}/domains/{domainId}`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsDomainsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists domains of a backend.
 *
 *  Method: firebaseapphosting.projects.locations.backends.domains.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsDomainsList : GTLRFirebaseAppHostingQuery

/**
 *  Optional. A filter to narrow down results to a preferred subset. Learn more
 *  about filtering in Google's [AIP 160 standard](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Hint for how to order the results. Supported fields are `name` and
 *  `createTime`. To specify descending order, append a `desc` suffix.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of results to return. If not set, the service
 *  selects a default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token received from the nextPageToken field in the
 *  response. Send that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent backend in the format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. If true, the request returns soft-deleted resources that haven't
 *  been fully-deleted yet.
 */
@property(nonatomic, assign) BOOL showDeleted;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_ListDomainsResponse.
 *
 *  Lists domains of a backend.
 *
 *  @param parent Required. The parent backend in the format:
 *    `projects/{project}/locations/{locationId}/backends/{backendId}`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsDomainsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the information for a single domain.
 *
 *  Method: firebaseapphosting.projects.locations.backends.domains.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsDomainsPatch : GTLRFirebaseAppHostingQuery

/**
 *  Optional. If set to true, and the domain is not found, a new domain will be
 *  created.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  Identifier. The resource name of the domain, e.g.
 *  `/projects/p/locations/l/backends/b/domains/foo.com`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Field mask is used to specify the fields to be overwritten in the
 *  Domain resource by the update. The fields specified in the update_mask are
 *  relative to the resource, not the full request. A field will be overwritten
 *  if it is in the mask. If the user does not provide a mask then all fields
 *  will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Optional. Indicates that the request should be validated and default values
 *  populated, without persisting the request or modifying any resources.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Operation.
 *
 *  Updates the information for a single domain.
 *
 *  @param object The @c GTLRFirebaseAppHosting_Domain to include in the query.
 *  @param name Identifier. The resource name of the domain, e.g.
 *    `/projects/p/locations/l/backends/b/domains/foo.com`
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsDomainsPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppHosting_Domain *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a backend.
 *
 *  Method: firebaseapphosting.projects.locations.backends.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsGet : GTLRFirebaseAppHostingQuery

/**
 *  Required. Name of the resource in the format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Backend.
 *
 *  Gets information about a backend.
 *
 *  @param name Required. Name of the resource in the format:
 *    `projects/{project}/locations/{locationId}/backends/{backendId}`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists backends in a given project and location.
 *
 *  Method: firebaseapphosting.projects.locations.backends.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsList : GTLRFirebaseAppHostingQuery

/**
 *  Optional. A filter to narrow down results to a preferred subset. Learn more
 *  about filtering in Google's [AIP 160 standard](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Hint for how to order the results. Supported fields are `name` and
 *  `createTime`. To specify descending order, append a `desc` suffix.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of results to return. If not set, the service
 *  selects a default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token received from the nextPageToken field in the
 *  response. Send that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. A parent name of the form
 *  `projects/{project}/locations/{locationId}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. If true, the request returns soft-deleted resources that haven't
 *  been fully-deleted yet.
 */
@property(nonatomic, assign) BOOL showDeleted;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_ListBackendsResponse.
 *
 *  Lists backends in a given project and location.
 *
 *  @param parent Required. A parent name of the form
 *    `projects/{project}/locations/{locationId}`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the information for a single backend.
 *
 *  Method: firebaseapphosting.projects.locations.backends.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsPatch : GTLRFirebaseAppHostingQuery

/**
 *  Optional. If set to true, and the backend is not found, a new backend will
 *  be created.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  Identifier. The resource name of the backend. Format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and t he request
 *  times out. If you make the request again with the same request ID, the
 *  server can check if original operation with the same request ID was
 *  received, and if so, will ignore the second request. This prevents clients
 *  from accidentally creating duplicate commitments. The request ID must be a
 *  valid UUID with the exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Field mask is used to specify the fields to be overwritten in the
 *  backend resource by the update. The fields specified in the update_mask are
 *  relative to the resource, not the full request. A field will be overwritten
 *  if it is in the mask. If the user does not provide a mask then all fields
 *  will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Optional. Indicates that the request should be validated, without persisting
 *  the request or updating any resources.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Operation.
 *
 *  Updates the information for a single backend.
 *
 *  @param object The @c GTLRFirebaseAppHosting_Backend to include in the query.
 *  @param name Identifier. The resource name of the backend. Format:
 *    `projects/{project}/locations/{locationId}/backends/{backendId}`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppHosting_Backend *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new rollout for a backend.
 *
 *  Method: firebaseapphosting.projects.locations.backends.rollouts.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsRolloutsCreate : GTLRFirebaseAppHostingQuery

/**
 *  Required. The parent backend in the format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/** Optional. Desired ID of the rollout being created. */
@property(nonatomic, copy, nullable) NSString *rolloutId;

/**
 *  Optional. Indicates that the request should be validated and default values
 *  populated, without persisting the request or creating any resources.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Operation.
 *
 *  Creates a new rollout for a backend.
 *
 *  @param object The @c GTLRFirebaseAppHosting_Rollout to include in the query.
 *  @param parent Required. The parent backend in the format:
 *    `projects/{project}/locations/{locationId}/backends/{backendId}`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsRolloutsCreate
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppHosting_Rollout *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets information about a rollout.
 *
 *  Method: firebaseapphosting.projects.locations.backends.rollouts.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsRolloutsGet : GTLRFirebaseAppHostingQuery

/**
 *  Required. Name of the resource in the format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}/rollouts/{rolloutId}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Rollout.
 *
 *  Gets information about a rollout.
 *
 *  @param name Required. Name of the resource in the format:
 *    `projects/{project}/locations/{locationId}/backends/{backendId}/rollouts/{rolloutId}`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsRolloutsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists rollouts for a backend.
 *
 *  Method: firebaseapphosting.projects.locations.backends.rollouts.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsRolloutsList : GTLRFirebaseAppHostingQuery

/**
 *  Optional. A filter to narrow down results to a preferred subset. Learn more
 *  about filtering in Google's [AIP 160 standard](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Hint for how to order the results. Supported fields are `name` and
 *  `createTime`. To specify descending order, append a `desc` suffix.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. The maximum number of results to return. If not set, the service
 *  selects a default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token received from the nextPageToken field in the
 *  response. Send that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent backend in the format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. If true, the request returns soft-deleted resources that haven't
 *  been fully-deleted yet.
 */
@property(nonatomic, assign) BOOL showDeleted;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_ListRolloutsResponse.
 *
 *  Lists rollouts for a backend.
 *
 *  @param parent Required. The parent backend in the format:
 *    `projects/{project}/locations/{locationId}/backends/{backendId}`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsRolloutsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets information about a backend's traffic.
 *
 *  Method: firebaseapphosting.projects.locations.backends.traffic.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsTrafficGet : GTLRFirebaseAppHostingQuery

/**
 *  Required. Name of the resource in the format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Traffic.
 *
 *  Gets information about a backend's traffic.
 *
 *  @param name Required. Name of the resource in the format:
 *    `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsTrafficGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates a backend's traffic.
 *
 *  Method: firebaseapphosting.projects.locations.backends.traffic.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsTrafficPatch : GTLRFirebaseAppHostingQuery

/**
 *  Identifier. The resource name of the backend's traffic. Format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and t he request
 *  times out. If you make the request again with the same request ID, the
 *  server can check if original operation with the same request ID was
 *  received, and if so, will ignore the second request. This prevents clients
 *  from accidentally creating duplicate commitments. The request ID must be a
 *  valid UUID with the exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Field mask is used to specify the fields to be overwritten in the
 *  traffic resource by the update. The fields specified in the update_mask are
 *  relative to the resource, not the full request. A field will be overwritten
 *  if it is in the mask. If the user does not provide a mask then all fields
 *  will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Optional. Indicates that the request should be validated, without persisting
 *  the request or updating any resources.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Operation.
 *
 *  Updates a backend's traffic.
 *
 *  @param object The @c GTLRFirebaseAppHosting_Traffic to include in the query.
 *  @param name Identifier. The resource name of the backend's traffic. Format:
 *    `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsBackendsTrafficPatch
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppHosting_Traffic *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a location.
 *
 *  Method: firebaseapphosting.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsGet : GTLRFirebaseAppHostingQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: firebaseapphosting.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsList : GTLRFirebaseAppHostingQuery

/**
 *  Optional. A list of extra location types that should be used as conditions
 *  for controlling the visibility of the locations.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *extraLocationTypes;

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: firebaseapphosting.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsOperationsCancel : GTLRFirebaseAppHostingQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRFirebaseAppHosting_CancelOperationRequest to
 *    include in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRFirebaseAppHosting_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: firebaseapphosting.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsOperationsDelete : GTLRFirebaseAppHostingQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: firebaseapphosting.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsOperationsGet : GTLRFirebaseAppHostingQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: firebaseapphosting.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeFirebaseAppHostingCloudPlatform
 */
@interface GTLRFirebaseAppHostingQuery_ProjectsLocationsOperationsList : GTLRFirebaseAppHostingQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRFirebaseAppHosting_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRFirebaseAppHostingQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
