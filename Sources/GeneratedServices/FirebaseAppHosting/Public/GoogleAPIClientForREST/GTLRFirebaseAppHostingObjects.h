// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Firebase App Hosting API (firebaseapphosting/v1)
// Description:
//   Firebase App Hosting streamlines the development and deployment of dynamic
//   Next.js and Angular applications, offering built-in framework support,
//   GitHub integration, and integration with other Firebase products. You can
//   use this API to intervene in the Firebase App Hosting build process and add
//   custom functionality not supported in our default Console & CLI flows,
//   including triggering builds from external CI/CD workflows or deploying from
//   pre-built container images.
// Documentation:
//   https://firebase.google.com/docs/app-hosting

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRFirebaseAppHosting_Backend;
@class GTLRFirebaseAppHosting_Backend_Annotations;
@class GTLRFirebaseAppHosting_Backend_Labels;
@class GTLRFirebaseAppHosting_Build;
@class GTLRFirebaseAppHosting_Build_Annotations;
@class GTLRFirebaseAppHosting_Build_Labels;
@class GTLRFirebaseAppHosting_BuildSource;
@class GTLRFirebaseAppHosting_Codebase;
@class GTLRFirebaseAppHosting_CodebaseSource;
@class GTLRFirebaseAppHosting_Config;
@class GTLRFirebaseAppHosting_ContainerSource;
@class GTLRFirebaseAppHosting_CustomDomainOperationMetadata;
@class GTLRFirebaseAppHosting_CustomDomainStatus;
@class GTLRFirebaseAppHosting_DnsRecord;
@class GTLRFirebaseAppHosting_DnsRecordSet;
@class GTLRFirebaseAppHosting_DnsUpdates;
@class GTLRFirebaseAppHosting_Domain;
@class GTLRFirebaseAppHosting_Domain_Annotations;
@class GTLRFirebaseAppHosting_Domain_Labels;
@class GTLRFirebaseAppHosting_EnvironmentVariable;
@class GTLRFirebaseAppHosting_Error;
@class GTLRFirebaseAppHosting_LiveMigrationStep;
@class GTLRFirebaseAppHosting_Location;
@class GTLRFirebaseAppHosting_Location_Labels;
@class GTLRFirebaseAppHosting_Location_Metadata;
@class GTLRFirebaseAppHosting_ManagedResource;
@class GTLRFirebaseAppHosting_Operation;
@class GTLRFirebaseAppHosting_Operation_Metadata;
@class GTLRFirebaseAppHosting_Operation_Response;
@class GTLRFirebaseAppHosting_Redirect;
@class GTLRFirebaseAppHosting_Rollout;
@class GTLRFirebaseAppHosting_Rollout_Annotations;
@class GTLRFirebaseAppHosting_Rollout_Labels;
@class GTLRFirebaseAppHosting_RolloutPolicy;
@class GTLRFirebaseAppHosting_RunConfig;
@class GTLRFirebaseAppHosting_RunService;
@class GTLRFirebaseAppHosting_ServingBehavior;
@class GTLRFirebaseAppHosting_Status;
@class GTLRFirebaseAppHosting_Status_Details_Item;
@class GTLRFirebaseAppHosting_Traffic_Annotations;
@class GTLRFirebaseAppHosting_Traffic_Labels;
@class GTLRFirebaseAppHosting_TrafficSet;
@class GTLRFirebaseAppHosting_TrafficSplit;
@class GTLRFirebaseAppHosting_UserMetadata;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_Backend.servingLocality

/**
 *  In this mode, App Hosting serves your backend's content from multiple
 *  points-of-presence (POP) across the globe. App Hosting replicates your
 *  backend's configuration and cached data to these POPs and uses a global CDN
 *  to further decrease response latency. App Hosting-maintained Cloud Resources
 *  on your project, such as Cloud Run services, Cloud Build build, and Artifact
 *  Registry Images are still confined to your backend's parent region.
 *  Responses cached by the CDN may be stored in the POPs for the duration of
 *  the cache's TTL.
 *
 *  Value: "GLOBAL_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Backend_ServingLocality_GlobalAccess;
/**
 *  In this mode, App Hosting serves your backend's content from your chosen
 *  parent region. App Hosting only maintains data and serving infrastructure in
 *  that chosen region and does not replicate your data to other regions.
 *
 *  Value: "REGIONAL_STRICT"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Backend_ServingLocality_RegionalStrict;
/**
 *  Unspecified. Will return an error if used.
 *
 *  Value: "SERVING_LOCALITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Backend_ServingLocality_ServingLocalityUnspecified;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_Build.state

/**
 *  The build is building.
 *
 *  Value: "BUILDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Build_State_Building;
/**
 *  The build has completed and is awaiting the next step. This may move to
 *  DEPLOYING once App Hosting starts to set up infrastructure.
 *
 *  Value: "BUILT"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Build_State_Built;
/**
 *  The infrastructure for this build is being set up.
 *
 *  Value: "DEPLOYING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Build_State_Deploying;
/**
 *  The build has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Build_State_Failed;
/**
 *  The infrastructure for this build is ready. The build may or may not be
 *  serving traffic - see `Backend.traffic` for the current state, or
 *  `Backend.traffic_statuses` for the desired state.
 *
 *  Value: "READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Build_State_Ready;
/**
 *  The build is in an unknown state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Build_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_CustomDomainOperationMetadata.certState

/**
 *  The certificate is active, providing secure connections for the domain names
 *  it represents.
 *
 *  Value: "CERT_ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_CertState_CertActive;
/**
 *  The certificate has expired. App Hosting can no longer serve secure content
 *  on your domain name.
 *
 *  Value: "CERT_EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_CertState_CertExpired;
/**
 *  The certificate is expiring, all domain names on it will be given new
 *  certificates.
 *
 *  Value: "CERT_EXPIRING_SOON"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_CertState_CertExpiringSoon;
/**
 *  The initial state of every certificate, represents App Hosting's intent to
 *  create a certificate before requests to a Certificate Authority are made.
 *
 *  Value: "CERT_PREPARING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_CertState_CertPreparing;
/**
 *  The certificate was recently created, and needs time to propagate in App
 *  Hosting's load balancers.
 *
 *  Value: "CERT_PROPAGATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_CertState_CertPropagating;
/**
 *  The certificate's state is unspecified. The message is invalid if this is
 *  unspecified.
 *
 *  Value: "CERT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_CertState_CertStateUnspecified;
/**
 *  App Hosting is validating whether a domain name's DNS records are in a state
 *  that allow certificate creation on its behalf.
 *
 *  Value: "CERT_VALIDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_CertState_CertValidating;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_CustomDomainOperationMetadata.hostState

/**
 *  All requests against your domain are served by App Hosting, via your
 *  domain's assigned shard. If the custom domain's `OwnershipState` is also
 *  `OWNERSHIP_ACTIVE`, App Hosting serves its backend's content on requests for
 *  the domain.
 *
 *  Value: "HOST_ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_HostState_HostActive;
/**
 *  Your domain has IP addresses that resolve to both App Hosting and to other
 *  services. To ensure consistent results, remove `A` and `AAAA` records
 *  related to non-App-Hosting services.
 *
 *  Value: "HOST_CONFLICT"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_HostState_HostConflict;
/**
 *  Your domain has only IP addresses that don't ultimately resolve to App
 *  Hosting.
 *
 *  Value: "HOST_NON_FAH"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_HostState_HostNonFah;
/**
 *  Your custom domain's host state is unspecified. The message is invalid if
 *  this is unspecified.
 *
 *  Value: "HOST_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_HostState_HostStateUnspecified;
/**
 *  Your custom domain isn't associated with any IP addresses.
 *
 *  Value: "HOST_UNHOSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_HostState_HostUnhosted;
/**
 *  Your custom domain can't be reached. App Hosting services' DNS queries to
 *  find your domain's IP addresses resulted in errors. See your
 *  `CustomDomainStatus`'s `issues` field for more details.
 *
 *  Value: "HOST_UNREACHABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_HostState_HostUnreachable;
/**
 *  Your domain has IP addresses that resolve to an incorrect instance of the
 *  App Hosting Data Plane. App Hosting has multiple data plane instances to
 *  ensure high availability. The SSL certificate that App Hosting creates for
 *  your domain is only available on its assigned instance. If your domain's IP
 *  addresses resolve to an incorrect instance, App Hosting won't be able to
 *  serve secure content on it.
 *
 *  Value: "HOST_WRONG_SHARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_HostState_HostWrongShard;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_CustomDomainOperationMetadata.ownershipState

/**
 *  Your custom domain owns its domain.
 *
 *  Value: "OWNERSHIP_ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_OwnershipState_OwnershipActive;
/**
 *  Your custom domain has conflicting `TXT` records that indicate ownership by
 *  both your current custom domain one or more others. Remove the extraneous
 *  ownership records to grant the current custom domain ownership.
 *
 *  Value: "OWNERSHIP_CONFLICT"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_OwnershipState_OwnershipConflict;
/**
 *  Your custom domain is owned by another App Hosting custom domain. Remove the
 *  conflicting records and replace them with records for your current custom
 *  domain.
 *
 *  Value: "OWNERSHIP_MISMATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_OwnershipState_OwnershipMismatch;
/**
 *  Your custom domain's domain has no App-Hosting-related ownership records; no
 *  backend is authorized to serve on the domain in this Origin shard.
 *
 *  Value: "OWNERSHIP_MISSING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_OwnershipState_OwnershipMissing;
/**
 *  Your custom domain's DNS records are configured correctly. App Hosting will
 *  transfer ownership of your domain to this custom domain within 24 hours.
 *
 *  Value: "OWNERSHIP_PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_OwnershipState_OwnershipPending;
/**
 *  Your custom domain's ownership state is unspecified. This should never
 *  happen.
 *
 *  Value: "OWNERSHIP_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_OwnershipState_OwnershipStateUnspecified;
/**
 *  Your custom domain can't be reached. App Hosting services' DNS queries to
 *  find your domain's ownership records resulted in errors. See your
 *  `CustomDomainStatus`'s `issues` field for more details.
 *
 *  Value: "OWNERSHIP_UNREACHABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_OwnershipState_OwnershipUnreachable;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_CustomDomainStatus.certState

/**
 *  The certificate is active, providing secure connections for the domain names
 *  it represents.
 *
 *  Value: "CERT_ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_CertState_CertActive;
/**
 *  The certificate has expired. App Hosting can no longer serve secure content
 *  on your domain name.
 *
 *  Value: "CERT_EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_CertState_CertExpired;
/**
 *  The certificate is expiring, all domain names on it will be given new
 *  certificates.
 *
 *  Value: "CERT_EXPIRING_SOON"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_CertState_CertExpiringSoon;
/**
 *  The initial state of every certificate, represents App Hosting's intent to
 *  create a certificate before requests to a Certificate Authority are made.
 *
 *  Value: "CERT_PREPARING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_CertState_CertPreparing;
/**
 *  The certificate was recently created, and needs time to propagate in App
 *  Hosting's load balancers.
 *
 *  Value: "CERT_PROPAGATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_CertState_CertPropagating;
/**
 *  The certificate's state is unspecified. The message is invalid if this is
 *  unspecified.
 *
 *  Value: "CERT_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_CertState_CertStateUnspecified;
/**
 *  App Hosting is validating whether a domain name's DNS records are in a state
 *  that allow certificate creation on its behalf.
 *
 *  Value: "CERT_VALIDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_CertState_CertValidating;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_CustomDomainStatus.hostState

/**
 *  All requests against your domain are served by App Hosting, via your
 *  domain's assigned shard. If the custom domain's `OwnershipState` is also
 *  `OWNERSHIP_ACTIVE`, App Hosting serves its backend's content on requests for
 *  the domain.
 *
 *  Value: "HOST_ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_HostState_HostActive;
/**
 *  Your domain has IP addresses that resolve to both App Hosting and to other
 *  services. To ensure consistent results, remove `A` and `AAAA` records
 *  related to non-App-Hosting services.
 *
 *  Value: "HOST_CONFLICT"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_HostState_HostConflict;
/**
 *  Your domain has only IP addresses that don't ultimately resolve to App
 *  Hosting.
 *
 *  Value: "HOST_NON_FAH"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_HostState_HostNonFah;
/**
 *  Your custom domain's host state is unspecified. The message is invalid if
 *  this is unspecified.
 *
 *  Value: "HOST_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_HostState_HostStateUnspecified;
/**
 *  Your custom domain isn't associated with any IP addresses.
 *
 *  Value: "HOST_UNHOSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_HostState_HostUnhosted;
/**
 *  Your custom domain can't be reached. App Hosting services' DNS queries to
 *  find your domain's IP addresses resulted in errors. See your
 *  `CustomDomainStatus`'s `issues` field for more details.
 *
 *  Value: "HOST_UNREACHABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_HostState_HostUnreachable;
/**
 *  Your domain has IP addresses that resolve to an incorrect instance of the
 *  App Hosting Data Plane. App Hosting has multiple data plane instances to
 *  ensure high availability. The SSL certificate that App Hosting creates for
 *  your domain is only available on its assigned instance. If your domain's IP
 *  addresses resolve to an incorrect instance, App Hosting won't be able to
 *  serve secure content on it.
 *
 *  Value: "HOST_WRONG_SHARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_HostState_HostWrongShard;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_CustomDomainStatus.ownershipState

/**
 *  Your custom domain owns its domain.
 *
 *  Value: "OWNERSHIP_ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_OwnershipState_OwnershipActive;
/**
 *  Your custom domain has conflicting `TXT` records that indicate ownership by
 *  both your current custom domain one or more others. Remove the extraneous
 *  ownership records to grant the current custom domain ownership.
 *
 *  Value: "OWNERSHIP_CONFLICT"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_OwnershipState_OwnershipConflict;
/**
 *  Your custom domain is owned by another App Hosting custom domain. Remove the
 *  conflicting records and replace them with records for your current custom
 *  domain.
 *
 *  Value: "OWNERSHIP_MISMATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_OwnershipState_OwnershipMismatch;
/**
 *  Your custom domain's domain has no App-Hosting-related ownership records; no
 *  backend is authorized to serve on the domain in this Origin shard.
 *
 *  Value: "OWNERSHIP_MISSING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_OwnershipState_OwnershipMissing;
/**
 *  Your custom domain's DNS records are configured correctly. App Hosting will
 *  transfer ownership of your domain to this custom domain within 24 hours.
 *
 *  Value: "OWNERSHIP_PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_OwnershipState_OwnershipPending;
/**
 *  Your custom domain's ownership state is unspecified. This should never
 *  happen.
 *
 *  Value: "OWNERSHIP_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_OwnershipState_OwnershipStateUnspecified;
/**
 *  Your custom domain can't be reached. App Hosting services' DNS queries to
 *  find your domain's ownership records resulted in errors. See your
 *  `CustomDomainStatus`'s `issues` field for more details.
 *
 *  Value: "OWNERSHIP_UNREACHABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_CustomDomainStatus_OwnershipState_OwnershipUnreachable;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_DnsRecord.relevantState

/**
 *  The custom domain's certificate state.
 *
 *  Value: "CERT_STATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_DnsRecord_RelevantState_CertState;
/**
 *  This message is invalid if this is unspecified.
 *
 *  Value: "CUSTOM_DOMAIN_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_DnsRecord_RelevantState_CustomDomainStateUnspecified;
/**
 *  The custom domain's host state.
 *
 *  Value: "HOST_STATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_DnsRecord_RelevantState_HostState;
/**
 *  The custom domain's ownership state.
 *
 *  Value: "OWNERSHIP_STATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_DnsRecord_RelevantState_OwnershipState;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_DnsRecord.requiredAction

/**
 *  Add this record to your DNS records.
 *
 *  Value: "ADD"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_DnsRecord_RequiredAction_Add;
/**
 *  No action necessary.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_DnsRecord_RequiredAction_None;
/**
 *  Remove this record from your DNS records.
 *
 *  Value: "REMOVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_DnsRecord_RequiredAction_Remove;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_DnsRecord.type

/**
 *  An `A` record, as defined in [RFC
 *  1035](https://tools.ietf.org/html/rfc1035). A records determine which IPv4
 *  addresses a domain directs traffic towards.
 *
 *  Value: "A"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_DnsRecord_Type_A;
/**
 *  An AAAA record, as defined in [RFC
 *  3596](https://tools.ietf.org/html/rfc3596) AAAA records determine which IPv6
 *  addresses a domain directs traffic towards.
 *
 *  Value: "AAAA"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_DnsRecord_Type_Aaaa;
/**
 *  A CAA record, as defined in [RFC 6844](https://tools.ietf.org/html/rfc6844).
 *  CAA, or Certificate Authority Authorization, records determine which
 *  Certificate Authorities (SSL certificate minting organizations) are
 *  authorized to mint a certificate for the domain. App Hosting uses `pki.goog`
 *  as its primary CA. CAA records cascade. A CAA record on `foo.com` also
 *  applies to `bar.foo.com` unless `bar.foo.com` has its own set of CAA
 *  records. CAA records are optional. If a domain and its parents have no CAA
 *  records, all CAs are authorized to mint certificates on its behalf. In
 *  general, App Hosting only asks you to modify CAA records when doing so is
 *  required to unblock SSL cert creation.
 *
 *  Value: "CAA"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_DnsRecord_Type_Caa;
/**
 *  A `CNAME` record, as defined in [RFC
 *  1035](https://tools.ietf.org/html/rfc1035). `CNAME` or Canonical Name
 *  records map a domain to a different, canonical domain. If a `CNAME` record
 *  is present, it should be the only record on the domain.
 *
 *  Value: "CNAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_DnsRecord_Type_Cname;
/**
 *  A `TXT` record, as defined in [RFC
 *  1035](https://tools.ietf.org/html/rfc1035). `TXT` records hold arbitrary
 *  text data on a domain. Hosting uses `TXT` records to establish which
 *  Firebase Project has permission to act on a domain.
 *
 *  Value: "TXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_DnsRecord_Type_Txt;
/**
 *  The record's type is unspecified. The message is invalid if this is
 *  unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_DnsRecord_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_Domain.type

/**
 *  Custom, developer-owned domains. Custom Domains allow you to associate a
 *  domain you own with your App Hosting backend, and configure that domain to
 *  serve your backend's content.
 *
 *  Value: "CUSTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Domain_Type_Custom;
/**
 *  Default, App Hosting-provided and managed domains. These domains are created
 *  automatically with their parent backend and cannot be deleted except by
 *  deleting that parent, and cannot be moved to another backend. Default
 *  domains can be disabled via the `disabled` field.
 *
 *  Value: "DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Domain_Type_Default;
/**
 *  The type is unspecified (this should not happen).
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Domain_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_EnvironmentVariable.availability

/**
 *  The default value, unspecified, which is unused.
 *
 *  Value: "AVAILABILITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_EnvironmentVariable_Availability_AvailabilityUnspecified;
/**
 *  This value is available when creating a Build from source code.
 *
 *  Value: "BUILD"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_EnvironmentVariable_Availability_Build;
/**
 *  This value is available at runtime within Cloud Run.
 *
 *  Value: "RUNTIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_EnvironmentVariable_Availability_Runtime;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_Error.errorSource

/**
 *  Indicates that the build failed during the Cloud Build process, such as a
 *  build timeout.
 *
 *  Value: "CLOUD_BUILD"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Error_ErrorSource_CloudBuild;
/**
 *  Indicates that the build failed during the Cloud Run process, such as a
 *  service creation failure.
 *
 *  Value: "CLOUD_RUN"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Error_ErrorSource_CloudRun;
/**
 *  Indicates that generic error occurred outside of the Cloud Build or Cloud
 *  Run processes, such as a pre-empted or user-canceled App Hosting Build.
 *
 *  Value: "ERROR_SOURCE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Error_ErrorSource_ErrorSourceUnspecified;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_LiveMigrationStep.relevantDomainStates

/**
 *  The custom domain's certificate state.
 *
 *  Value: "CERT_STATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_LiveMigrationStep_RelevantDomainStates_CertState;
/**
 *  This message is invalid if this is unspecified.
 *
 *  Value: "CUSTOM_DOMAIN_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_LiveMigrationStep_RelevantDomainStates_CustomDomainStateUnspecified;
/**
 *  The custom domain's host state.
 *
 *  Value: "HOST_STATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_LiveMigrationStep_RelevantDomainStates_HostState;
/**
 *  The custom domain's ownership state.
 *
 *  Value: "OWNERSHIP_STATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_LiveMigrationStep_RelevantDomainStates_OwnershipState;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_LiveMigrationStep.stepState

/**
 *  The step is complete. You've already made the necessary changes to your
 *  domain and/or prior hosting service to advance to the next step. Once all
 *  steps are complete, App Hosting is ready to serve secure content on your
 *  domain.
 *
 *  Value: "COMPLETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_LiveMigrationStep_StepState_Complete;
/**
 *  The step is incomplete. You should complete any `dnsUpdates` changes to
 *  complete it.
 *
 *  Value: "INCOMPLETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_LiveMigrationStep_StepState_Incomplete;
/**
 *  The step's state is pending. Complete prior steps before working on a
 *  `PENDING` step.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_LiveMigrationStep_StepState_Pending;
/**
 *  App Hosting doesn't have enough information to construct the step yet.
 *  Complete any prior steps and/or resolve this step's issue to proceed.
 *
 *  Value: "PREPARING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_LiveMigrationStep_StepState_Preparing;
/**
 *  You've done your part to update records and present challenges as necessary.
 *  App Hosting is now completing background processes to complete the step,
 *  e.g. minting an SSL cert for your domain.
 *
 *  Value: "PROCESSING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_LiveMigrationStep_StepState_Processing;
/**
 *  The step's state is unspecified. The message is invalid if this is
 *  unspecified.
 *
 *  Value: "STEP_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_LiveMigrationStep_StepState_StepStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRFirebaseAppHosting_Rollout.state

/**
 *  The rollout has been cancelled.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Rollout_State_Cancelled;
/**
 *  The rollout has failed. See error for more information.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Rollout_State_Failed;
/**
 *  The rollout has been paused due to either being manually paused or a PAUSED
 *  stage. This should be set while `paused = true`.
 *
 *  Value: "PAUSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Rollout_State_Paused;
/**
 *  The rollout is waiting for the build process to complete, which builds the
 *  code and sets up the underlying infrastructure.
 *
 *  Value: "PENDING_BUILD"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Rollout_State_PendingBuild;
/**
 *  The rollout has started and is actively modifying traffic.
 *
 *  Value: "PROGRESSING"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Rollout_State_Progressing;
/**
 *  The rollout is waiting for actuation to begin. This may be because it is
 *  waiting on another rollout to complete.
 *
 *  Value: "QUEUED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Rollout_State_Queued;
/**
 *  The rollout is in an unknown state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Rollout_State_StateUnspecified;
/**
 *  The rollout has completed.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRFirebaseAppHosting_Rollout_State_Succeeded;

/**
 *  A backend is the primary resource of App Hosting.
 */
@interface GTLRFirebaseAppHosting_Backend : GTLRObject

/**
 *  Optional. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Backend_Annotations *annotations;

/**
 *  Optional. The [ID of a Web
 *  App](https://firebase.google.com/docs/reference/firebase-management/rest/v1beta1/projects.webApps#WebApp.FIELDS.app_id)
 *  associated with the backend.
 */
@property(nonatomic, copy, nullable) NSString *appId;

/**
 *  Optional. If specified, the connection to an external source repository to
 *  watch for event-driven updates to the backend.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Codebase *codebase;

/** Output only. Time at which the backend was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Time at which the backend was deleted. */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/** Optional. Human-readable name. 63 character limit. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Optional. The environment name of the backend, used to load environment
 *  variables from environment specific configuration.
 */
@property(nonatomic, copy, nullable) NSString *environment;

/**
 *  Output only. Server-computed checksum based on other values; may be sent on
 *  update or delete to ensure operation is done on expected resource.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. Unstructured key value map that can be used to organize and
 *  categorize objects.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Backend_Labels *labels;

/** Output only. A list of the resources managed by this backend. */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_ManagedResource *> *managedResources;

/** Optional. Deprecated: Use `environment` instead. */
@property(nonatomic, copy, nullable) NSString *mode GTLR_DEPRECATED;

/**
 *  Identifier. The resource name of the backend. Format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. A field that, if true, indicates that the system is working to
 *  make adjustments to the backend during a LRO.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/**
 *  Required. The name of the service account used for Cloud Build and Cloud
 *  Run. Should have the role roles/firebaseapphosting.computeRunner or
 *  equivalent permissions.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Required. Immutable. Specifies how App Hosting will serve the content for
 *  this backend. It will either be contained to a single region
 *  (REGIONAL_STRICT) or allowed to use App Hosting's global-replicated serving
 *  infrastructure (GLOBAL_ACCESS).
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppHosting_Backend_ServingLocality_GlobalAccess In
 *        this mode, App Hosting serves your backend's content from multiple
 *        points-of-presence (POP) across the globe. App Hosting replicates your
 *        backend's configuration and cached data to these POPs and uses a
 *        global CDN to further decrease response latency. App
 *        Hosting-maintained Cloud Resources on your project, such as Cloud Run
 *        services, Cloud Build build, and Artifact Registry Images are still
 *        confined to your backend's parent region. Responses cached by the CDN
 *        may be stored in the POPs for the duration of the cache's TTL. (Value:
 *        "GLOBAL_ACCESS")
 *    @arg @c kGTLRFirebaseAppHosting_Backend_ServingLocality_RegionalStrict In
 *        this mode, App Hosting serves your backend's content from your chosen
 *        parent region. App Hosting only maintains data and serving
 *        infrastructure in that chosen region and does not replicate your data
 *        to other regions. (Value: "REGIONAL_STRICT")
 *    @arg @c kGTLRFirebaseAppHosting_Backend_ServingLocality_ServingLocalityUnspecified
 *        Unspecified. Will return an error if used. (Value:
 *        "SERVING_LOCALITY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *servingLocality;

/** Output only. System-assigned, unique identifier. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Time at which the backend was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** Output only. The primary URI to communicate with the backend. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Optional. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseAppHosting_Backend_Annotations : GTLRObject
@end


/**
 *  Optional. Unstructured key value map that can be used to organize and
 *  categorize objects.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseAppHosting_Backend_Labels : GTLRObject
@end


/**
 *  A single build for a backend, at a specific point codebase reference tag and
 *  point in time. Encapsulates several resources, including an Artifact
 *  Registry container image, a Cloud Build invocation that built the image, and
 *  the Cloud Run revision that uses that image.
 */
@interface GTLRFirebaseAppHosting_Build : GTLRObject

/**
 *  Optional. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Build_Annotations *annotations;

/**
 *  Output only. The location of the [Cloud Build
 *  logs](https://cloud.google.com/build/docs/view-build-results) for the build
 *  process.
 */
@property(nonatomic, copy, nullable) NSString *buildLogsUri;

/** Optional. Additional configuration of the service. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Config *config;

/** Output only. Time at which the build was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Time at which the build was deleted. */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/** Optional. Human-readable name. 63 character limit. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. The environment name of the backend when this build was
 *  created.
 */
@property(nonatomic, copy, nullable) NSString *environment;

/**
 *  Output only. A list of all errors that occurred during an App Hosting build.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_Error *> *errors;

/**
 *  Output only. Server-computed checksum based on other values; may be sent on
 *  update or delete to ensure operation is done on expected resource.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Output only. The Artifact Registry [container
 *  image](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages)
 *  URI, used by the Cloud Run
 *  [`revision`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services.revisions)
 *  for this build.
 */
@property(nonatomic, copy, nullable) NSString *image;

/**
 *  Optional. Unstructured key value map that can be used to organize and
 *  categorize objects.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Build_Labels *labels;

/**
 *  Identifier. The resource name of the build. Format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}/builds/{buildId}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. A field that, if true, indicates that the build has an ongoing
 *  LRO.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/** Required. Immutable. The source for the build. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_BuildSource *source;

/**
 *  Output only. The state of the build.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppHosting_Build_State_Building The build is
 *        building. (Value: "BUILDING")
 *    @arg @c kGTLRFirebaseAppHosting_Build_State_Built The build has completed
 *        and is awaiting the next step. This may move to DEPLOYING once App
 *        Hosting starts to set up infrastructure. (Value: "BUILT")
 *    @arg @c kGTLRFirebaseAppHosting_Build_State_Deploying The infrastructure
 *        for this build is being set up. (Value: "DEPLOYING")
 *    @arg @c kGTLRFirebaseAppHosting_Build_State_Failed The build has failed.
 *        (Value: "FAILED")
 *    @arg @c kGTLRFirebaseAppHosting_Build_State_Ready The infrastructure for
 *        this build is ready. The build may or may not be serving traffic - see
 *        `Backend.traffic` for the current state, or `Backend.traffic_statuses`
 *        for the desired state. (Value: "READY")
 *    @arg @c kGTLRFirebaseAppHosting_Build_State_StateUnspecified The build is
 *        in an unknown state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. System-assigned, unique identifier. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Time at which the build was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseAppHosting_Build_Annotations : GTLRObject
@end


/**
 *  Optional. Unstructured key value map that can be used to organize and
 *  categorize objects.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseAppHosting_Build_Labels : GTLRObject
@end


/**
 *  The source for the build.
 */
@interface GTLRFirebaseAppHosting_BuildSource : GTLRObject

/** A codebase source. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_CodebaseSource *codebase;

/** An Artifact Registry container image source. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_ContainerSource *container;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRFirebaseAppHosting_CancelOperationRequest : GTLRObject
@end


/**
 *  The connection to an external source repository to watch for event-driven
 *  updates to the backend.
 */
@interface GTLRFirebaseAppHosting_Codebase : GTLRObject

/**
 *  Required. The resource name for the Developer Connect
 *  [`gitRepositoryLink`](https://cloud.google.com/developer-connect/docs/api/reference/rest/v1/projects.locations.connections.gitRepositoryLinks)
 *  connected to this backend, in the format:
 *  `projects/{project}/locations/{location}/connections/{connection}/gitRepositoryLinks/{repositoryLink}`
 *  The connection for the `gitRepositoryLink` must made be using the Firebase
 *  App Hosting GitHub App via the Firebase Console.
 */
@property(nonatomic, copy, nullable) NSString *repository;

/**
 *  Optional. If `repository` is provided, the directory relative to the root of
 *  the repository to use as the root for the deployed web app.
 */
@property(nonatomic, copy, nullable) NSString *rootDirectory;

@end


/**
 *  A codebase source, representing the state of the codebase that the build
 *  will be created at.
 */
@interface GTLRFirebaseAppHosting_CodebaseSource : GTLRObject

/**
 *  Output only. The author contained in the metadata of a version control
 *  change.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_UserMetadata *author;

/** The branch in the codebase to build from, using the latest commit. */
@property(nonatomic, copy, nullable) NSString *branch;

/** The commit in the codebase to build from. */
@property(nonatomic, copy, nullable) NSString *commit;

/** Output only. The message of a codebase change. */
@property(nonatomic, copy, nullable) NSString *commitMessage;

/** Output only. The time the change was made. */
@property(nonatomic, strong, nullable) GTLRDateTime *commitTime;

/**
 *  Output only. The human-friendly name to use for this Codebase when
 *  displaying a build. We use the first eight characters of the SHA-1 hash for
 *  GitHub.com.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. The full SHA-1 hash of a Git commit, if available.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty;

/**
 *  Output only. A URI linking to the codebase on an hosting provider's website.
 *  May not be valid if the commit has been rebased or force-pushed out of
 *  existence in the linked repository.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Additional configuration of the backend for this build.
 */
@interface GTLRFirebaseAppHosting_Config : GTLRObject

/** Optional. Environment variables for this build. */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_EnvironmentVariable *> *env;

/**
 *  Optional. Additional configuration of the Cloud Run
 *  [`service`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services#resource:-service).
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_RunConfig *runConfig;

@end


/**
 *  The URI of an Artifact Registry [container
 *  image](https://cloud.google.com/artifact-registry/docs/reference/rest/v1/projects.locations.repositories.dockerImages)
 *  to use as the build source.
 */
@interface GTLRFirebaseAppHosting_ContainerSource : GTLRObject

/** Required. A URI representing a container for the backend to use. */
@property(nonatomic, copy, nullable) NSString *image;

@end


/**
 *  Additional metadata for operations on custom domains.
 */
@interface GTLRFirebaseAppHosting_CustomDomainOperationMetadata : GTLRObject

/**
 *  Output only. The custom domain's `CertState`, which must be `CERT_ACTIVE`
 *  for the create operations to complete.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_CertState_CertActive
 *        The certificate is active, providing secure connections for the domain
 *        names it represents. (Value: "CERT_ACTIVE")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_CertState_CertExpired
 *        The certificate has expired. App Hosting can no longer serve secure
 *        content on your domain name. (Value: "CERT_EXPIRED")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_CertState_CertExpiringSoon
 *        The certificate is expiring, all domain names on it will be given new
 *        certificates. (Value: "CERT_EXPIRING_SOON")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_CertState_CertPreparing
 *        The initial state of every certificate, represents App Hosting's
 *        intent to create a certificate before requests to a Certificate
 *        Authority are made. (Value: "CERT_PREPARING")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_CertState_CertPropagating
 *        The certificate was recently created, and needs time to propagate in
 *        App Hosting's load balancers. (Value: "CERT_PROPAGATING")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_CertState_CertStateUnspecified
 *        The certificate's state is unspecified. The message is invalid if this
 *        is unspecified. (Value: "CERT_STATE_UNSPECIFIED")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_CertState_CertValidating
 *        App Hosting is validating whether a domain name's DNS records are in a
 *        state that allow certificate creation on its behalf. (Value:
 *        "CERT_VALIDATING")
 */
@property(nonatomic, copy, nullable) NSString *certState;

/**
 *  Output only. The custom domain's `HostState`, which must be `HOST_ACTIVE`
 *  for Create operations of the domain name this `CustomDomain` refers toto
 *  complete.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_HostState_HostActive
 *        All requests against your domain are served by App Hosting, via your
 *        domain's assigned shard. If the custom domain's `OwnershipState` is
 *        also `OWNERSHIP_ACTIVE`, App Hosting serves its backend's content on
 *        requests for the domain. (Value: "HOST_ACTIVE")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_HostState_HostConflict
 *        Your domain has IP addresses that resolve to both App Hosting and to
 *        other services. To ensure consistent results, remove `A` and `AAAA`
 *        records related to non-App-Hosting services. (Value: "HOST_CONFLICT")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_HostState_HostNonFah
 *        Your domain has only IP addresses that don't ultimately resolve to App
 *        Hosting. (Value: "HOST_NON_FAH")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_HostState_HostStateUnspecified
 *        Your custom domain's host state is unspecified. The message is invalid
 *        if this is unspecified. (Value: "HOST_STATE_UNSPECIFIED")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_HostState_HostUnhosted
 *        Your custom domain isn't associated with any IP addresses. (Value:
 *        "HOST_UNHOSTED")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_HostState_HostUnreachable
 *        Your custom domain can't be reached. App Hosting services' DNS queries
 *        to find your domain's IP addresses resulted in errors. See your
 *        `CustomDomainStatus`'s `issues` field for more details. (Value:
 *        "HOST_UNREACHABLE")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_HostState_HostWrongShard
 *        Your domain has IP addresses that resolve to an incorrect instance of
 *        the App Hosting Data Plane. App Hosting has multiple data plane
 *        instances to ensure high availability. The SSL certificate that App
 *        Hosting creates for your domain is only available on its assigned
 *        instance. If your domain's IP addresses resolve to an incorrect
 *        instance, App Hosting won't be able to serve secure content on it.
 *        (Value: "HOST_WRONG_SHARD")
 */
@property(nonatomic, copy, nullable) NSString *hostState;

/**
 *  Output only. A list of issues that are currently preventing the operation
 *  from completing. These are generally DNS-related issues encountered when
 *  querying a domain's records or attempting to mint an SSL certificate.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_Status *> *issues;

/**
 *  Output only. A list of steps that the user must complete to migrate their
 *  domain to App Hosting without downtime.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_LiveMigrationStep *> *liveMigrationSteps;

/**
 *  Output only. The custom domain's `OwnershipState`, which must be
 *  `OWNERSHIP_ACTIVE` for the create operations to complete.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_OwnershipState_OwnershipActive
 *        Your custom domain owns its domain. (Value: "OWNERSHIP_ACTIVE")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_OwnershipState_OwnershipConflict
 *        Your custom domain has conflicting `TXT` records that indicate
 *        ownership by both your current custom domain one or more others.
 *        Remove the extraneous ownership records to grant the current custom
 *        domain ownership. (Value: "OWNERSHIP_CONFLICT")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_OwnershipState_OwnershipMismatch
 *        Your custom domain is owned by another App Hosting custom domain.
 *        Remove the conflicting records and replace them with records for your
 *        current custom domain. (Value: "OWNERSHIP_MISMATCH")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_OwnershipState_OwnershipMissing
 *        Your custom domain's domain has no App-Hosting-related ownership
 *        records; no backend is authorized to serve on the domain in this
 *        Origin shard. (Value: "OWNERSHIP_MISSING")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_OwnershipState_OwnershipPending
 *        Your custom domain's DNS records are configured correctly. App Hosting
 *        will transfer ownership of your domain to this custom domain within 24
 *        hours. (Value: "OWNERSHIP_PENDING")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_OwnershipState_OwnershipStateUnspecified
 *        Your custom domain's ownership state is unspecified. This should never
 *        happen. (Value: "OWNERSHIP_STATE_UNSPECIFIED")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainOperationMetadata_OwnershipState_OwnershipUnreachable
 *        Your custom domain can't be reached. App Hosting services' DNS queries
 *        to find your domain's ownership records resulted in errors. See your
 *        `CustomDomainStatus`'s `issues` field for more details. (Value:
 *        "OWNERSHIP_UNREACHABLE")
 */
@property(nonatomic, copy, nullable) NSString *ownershipState;

/**
 *  Output only. A set of DNS record updates to perform, to allow App Hosting to
 *  serve secure content on the domain.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_DnsUpdates *> *quickSetupUpdates;

@end


/**
 *  The status of a custom domain's linkage to a backend.
 */
@interface GTLRFirebaseAppHosting_CustomDomainStatus : GTLRObject

/**
 *  Output only. Tracks SSL certificate status for the domain.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_CertState_CertActive
 *        The certificate is active, providing secure connections for the domain
 *        names it represents. (Value: "CERT_ACTIVE")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_CertState_CertExpired
 *        The certificate has expired. App Hosting can no longer serve secure
 *        content on your domain name. (Value: "CERT_EXPIRED")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_CertState_CertExpiringSoon
 *        The certificate is expiring, all domain names on it will be given new
 *        certificates. (Value: "CERT_EXPIRING_SOON")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_CertState_CertPreparing
 *        The initial state of every certificate, represents App Hosting's
 *        intent to create a certificate before requests to a Certificate
 *        Authority are made. (Value: "CERT_PREPARING")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_CertState_CertPropagating
 *        The certificate was recently created, and needs time to propagate in
 *        App Hosting's load balancers. (Value: "CERT_PROPAGATING")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_CertState_CertStateUnspecified
 *        The certificate's state is unspecified. The message is invalid if this
 *        is unspecified. (Value: "CERT_STATE_UNSPECIFIED")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_CertState_CertValidating
 *        App Hosting is validating whether a domain name's DNS records are in a
 *        state that allow certificate creation on its behalf. (Value:
 *        "CERT_VALIDATING")
 */
@property(nonatomic, copy, nullable) NSString *certState;

/**
 *  Output only. Tracks whether a custom domain is detected as appropriately
 *  directing traffic to App Hosting.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_HostState_HostActive
 *        All requests against your domain are served by App Hosting, via your
 *        domain's assigned shard. If the custom domain's `OwnershipState` is
 *        also `OWNERSHIP_ACTIVE`, App Hosting serves its backend's content on
 *        requests for the domain. (Value: "HOST_ACTIVE")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_HostState_HostConflict
 *        Your domain has IP addresses that resolve to both App Hosting and to
 *        other services. To ensure consistent results, remove `A` and `AAAA`
 *        records related to non-App-Hosting services. (Value: "HOST_CONFLICT")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_HostState_HostNonFah
 *        Your domain has only IP addresses that don't ultimately resolve to App
 *        Hosting. (Value: "HOST_NON_FAH")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_HostState_HostStateUnspecified
 *        Your custom domain's host state is unspecified. The message is invalid
 *        if this is unspecified. (Value: "HOST_STATE_UNSPECIFIED")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_HostState_HostUnhosted
 *        Your custom domain isn't associated with any IP addresses. (Value:
 *        "HOST_UNHOSTED")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_HostState_HostUnreachable
 *        Your custom domain can't be reached. App Hosting services' DNS queries
 *        to find your domain's IP addresses resulted in errors. See your
 *        `CustomDomainStatus`'s `issues` field for more details. (Value:
 *        "HOST_UNREACHABLE")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_HostState_HostWrongShard
 *        Your domain has IP addresses that resolve to an incorrect instance of
 *        the App Hosting Data Plane. App Hosting has multiple data plane
 *        instances to ensure high availability. The SSL certificate that App
 *        Hosting creates for your domain is only available on its assigned
 *        instance. If your domain's IP addresses resolve to an incorrect
 *        instance, App Hosting won't be able to serve secure content on it.
 *        (Value: "HOST_WRONG_SHARD")
 */
@property(nonatomic, copy, nullable) NSString *hostState;

/**
 *  Output only. A list of issues with domain configuration. Allows users to
 *  self-correct problems with DNS records.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_Status *> *issues;

/**
 *  Output only. Tracks whether the backend is permitted to serve content on the
 *  domain, based off the domain's DNS records.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_OwnershipState_OwnershipActive
 *        Your custom domain owns its domain. (Value: "OWNERSHIP_ACTIVE")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_OwnershipState_OwnershipConflict
 *        Your custom domain has conflicting `TXT` records that indicate
 *        ownership by both your current custom domain one or more others.
 *        Remove the extraneous ownership records to grant the current custom
 *        domain ownership. (Value: "OWNERSHIP_CONFLICT")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_OwnershipState_OwnershipMismatch
 *        Your custom domain is owned by another App Hosting custom domain.
 *        Remove the conflicting records and replace them with records for your
 *        current custom domain. (Value: "OWNERSHIP_MISMATCH")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_OwnershipState_OwnershipMissing
 *        Your custom domain's domain has no App-Hosting-related ownership
 *        records; no backend is authorized to serve on the domain in this
 *        Origin shard. (Value: "OWNERSHIP_MISSING")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_OwnershipState_OwnershipPending
 *        Your custom domain's DNS records are configured correctly. App Hosting
 *        will transfer ownership of your domain to this custom domain within 24
 *        hours. (Value: "OWNERSHIP_PENDING")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_OwnershipState_OwnershipStateUnspecified
 *        Your custom domain's ownership state is unspecified. This should never
 *        happen. (Value: "OWNERSHIP_STATE_UNSPECIFIED")
 *    @arg @c kGTLRFirebaseAppHosting_CustomDomainStatus_OwnershipState_OwnershipUnreachable
 *        Your custom domain can't be reached. App Hosting services' DNS queries
 *        to find your domain's ownership records resulted in errors. See your
 *        `CustomDomainStatus`'s `issues` field for more details. (Value:
 *        "OWNERSHIP_UNREACHABLE")
 */
@property(nonatomic, copy, nullable) NSString *ownershipState;

/**
 *  Output only. Lists the records that must added or removed to a custom
 *  domain's DNS in order to finish setup and start serving content. Field is
 *  present during onboarding. Also present after onboarding if one or more of
 *  the above states is not *_ACTIVE, indicating the domain's DNS records are in
 *  a bad state.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_DnsUpdates *> *requiredDnsUpdates;

@end


/**
 *  A representation of a DNS records for a domain. DNS records are resource
 *  records that define how systems and services should behave when handling
 *  requests for a domain. For example, when you add `A` records to your
 *  domain's DNS records, you're informing other systems (such as your users'
 *  web browsers) to contact those IPv4 addresses to retrieve resources relevant
 *  to your domain (such as your App Hosting files).
 */
@interface GTLRFirebaseAppHosting_DnsRecord : GTLRObject

/** Output only. The domain the record pertains to, e.g. `foo.bar.com.`. */
@property(nonatomic, copy, nullable) NSString *domainName;

/**
 *  Output only. The data of the record. The meaning of the value depends on
 *  record type: - A and AAAA: IP addresses for the domain. - CNAME: Another
 *  domain to check for records. - TXT: Arbitrary text strings associated with
 *  the domain. App Hosting uses TXT records to determine which Firebase
 *  projects have permission to act on the domain's behalf. - CAA: The record's
 *  flags, tag, and value, e.g. `0 issue "pki.goog"`.
 */
@property(nonatomic, copy, nullable) NSString *rdata;

/**
 *  Output only. An enum that indicates which state(s) this DNS record applies
 *  to. Populated for all records with an `ADD` or `REMOVE` required action.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *relevantState;

/**
 *  Output only. An enum that indicates the a required action for this record.
 *  Populated when the record is part of a required change in a `DnsUpdates`
 *  `discovered` or `desired` record set.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppHosting_DnsRecord_RequiredAction_Add Add this
 *        record to your DNS records. (Value: "ADD")
 *    @arg @c kGTLRFirebaseAppHosting_DnsRecord_RequiredAction_None No action
 *        necessary. (Value: "NONE")
 *    @arg @c kGTLRFirebaseAppHosting_DnsRecord_RequiredAction_Remove Remove
 *        this record from your DNS records. (Value: "REMOVE")
 */
@property(nonatomic, copy, nullable) NSString *requiredAction;

/**
 *  Output only. The record's type, which determines what data the record
 *  contains.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppHosting_DnsRecord_Type_A An `A` record, as defined
 *        in [RFC 1035](https://tools.ietf.org/html/rfc1035). A records
 *        determine which IPv4 addresses a domain directs traffic towards.
 *        (Value: "A")
 *    @arg @c kGTLRFirebaseAppHosting_DnsRecord_Type_Aaaa An AAAA record, as
 *        defined in [RFC 3596](https://tools.ietf.org/html/rfc3596) AAAA
 *        records determine which IPv6 addresses a domain directs traffic
 *        towards. (Value: "AAAA")
 *    @arg @c kGTLRFirebaseAppHosting_DnsRecord_Type_Caa A CAA record, as
 *        defined in [RFC 6844](https://tools.ietf.org/html/rfc6844). CAA, or
 *        Certificate Authority Authorization, records determine which
 *        Certificate Authorities (SSL certificate minting organizations) are
 *        authorized to mint a certificate for the domain. App Hosting uses
 *        `pki.goog` as its primary CA. CAA records cascade. A CAA record on
 *        `foo.com` also applies to `bar.foo.com` unless `bar.foo.com` has its
 *        own set of CAA records. CAA records are optional. If a domain and its
 *        parents have no CAA records, all CAs are authorized to mint
 *        certificates on its behalf. In general, App Hosting only asks you to
 *        modify CAA records when doing so is required to unblock SSL cert
 *        creation. (Value: "CAA")
 *    @arg @c kGTLRFirebaseAppHosting_DnsRecord_Type_Cname A `CNAME` record, as
 *        defined in [RFC 1035](https://tools.ietf.org/html/rfc1035). `CNAME` or
 *        Canonical Name records map a domain to a different, canonical domain.
 *        If a `CNAME` record is present, it should be the only record on the
 *        domain. (Value: "CNAME")
 *    @arg @c kGTLRFirebaseAppHosting_DnsRecord_Type_Txt A `TXT` record, as
 *        defined in [RFC 1035](https://tools.ietf.org/html/rfc1035). `TXT`
 *        records hold arbitrary text data on a domain. Hosting uses `TXT`
 *        records to establish which Firebase Project has permission to act on a
 *        domain. (Value: "TXT")
 *    @arg @c kGTLRFirebaseAppHosting_DnsRecord_Type_TypeUnspecified The
 *        record's type is unspecified. The message is invalid if this is
 *        unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A set of DNS records relevant to the setup and maintenance of a custom
 *  domain in App Hosting.
 */
@interface GTLRFirebaseAppHosting_DnsRecordSet : GTLRObject

/**
 *  Output only. An error App Hosting services encountered when querying your
 *  domain's DNS records. Note: App Hosting ignores `NXDOMAIN` errors, as those
 *  generally just mean that a domain name hasn't been set up yet.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Status *checkError;

/** Output only. The domain name the record set pertains to. */
@property(nonatomic, copy, nullable) NSString *domainName;

/** Output only. Records on the domain. */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_DnsRecord *> *records;

@end


/**
 *  A set of DNS record updates that you should make to allow App Hosting to
 *  serve secure content in response to requests against your domain. These
 *  updates present the current state of your domain's and related subdomains'
 *  DNS records when App Hosting last queried them, and the desired set of
 *  records that App Hosting needs to see before your custom domain can be fully
 *  active.
 */
@interface GTLRFirebaseAppHosting_DnsUpdates : GTLRObject

/**
 *  Output only. The last time App Hosting checked your custom domain's DNS
 *  records.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *checkTime;

/**
 *  Output only. The set of DNS records App Hosting needs in order to be able to
 *  serve secure content on the domain.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_DnsRecordSet *> *desired;

/**
 *  Output only. The set of DNS records App Hosting discovered when inspecting a
 *  domain.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_DnsRecordSet *> *discovered;

/** Output only. The domain name the DNS updates pertain to. */
@property(nonatomic, copy, nullable) NSString *domainName;

@end


/**
 *  A domain name that is associated with a backend.
 */
@interface GTLRFirebaseAppHosting_Domain : GTLRObject

/** Optional. Annotations as key value pairs. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Domain_Annotations *annotations;

/** Output only. Time at which the domain was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. Represents the state and configuration of a `CUSTOM` type
 *  domain. It is only present on Domains of that type.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_CustomDomainStatus *customDomainStatus;

/** Output only. Time at which the domain was deleted. */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/**
 *  Optional. Whether the domain is disabled. Defaults to false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

/**
 *  Optional. Mutable human-readable name for the domain. 63 character limit.
 *  e.g. `prod domain`.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. Server-computed checksum based on other values; may be sent on
 *  update or delete to ensure operation is done on expected resource.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Optional. Labels as key value pairs. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Domain_Labels *labels;

/**
 *  Identifier. The resource name of the domain, e.g.
 *  `/projects/p/locations/l/backends/b/domains/foo.com`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. A field that, if true, indicates that the build has an ongoing
 *  LRO.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/**
 *  Optional. The serving behavior of the domain. If specified, the domain will
 *  serve content other than its backend's live content.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_ServingBehavior *serve;

/**
 *  Output only. The type of the domain.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppHosting_Domain_Type_Custom Custom, developer-owned
 *        domains. Custom Domains allow you to associate a domain you own with
 *        your App Hosting backend, and configure that domain to serve your
 *        backend's content. (Value: "CUSTOM")
 *    @arg @c kGTLRFirebaseAppHosting_Domain_Type_Default Default, App
 *        Hosting-provided and managed domains. These domains are created
 *        automatically with their parent backend and cannot be deleted except
 *        by deleting that parent, and cannot be moved to another backend.
 *        Default domains can be disabled via the `disabled` field. (Value:
 *        "DEFAULT")
 *    @arg @c kGTLRFirebaseAppHosting_Domain_Type_TypeUnspecified The type is
 *        unspecified (this should not happen). (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Output only. System-assigned, unique identifier. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Time at which the domain was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Annotations as key value pairs.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseAppHosting_Domain_Annotations : GTLRObject
@end


/**
 *  Optional. Labels as key value pairs.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseAppHosting_Domain_Labels : GTLRObject
@end


/**
 *  Represents the metadata of a long-running operation on domains.
 */
@interface GTLRFirebaseAppHosting_DomainOperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Additional metadata for operations on custom domains. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_CustomDomainOperationMetadata *customDomainOperationMetadata;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have been cancelled successfully have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRFirebaseAppHosting_Empty : GTLRObject
@end


/**
 *  Environment variables for this build.
 */
@interface GTLRFirebaseAppHosting_EnvironmentVariable : GTLRObject

/**
 *  Optional. Where this variable should be made available. If left unspecified,
 *  will be available in both BUILD and BACKEND.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *availability;

/**
 *  A fully qualified secret version. The value of the secret will be accessed
 *  once while building the application and once per cold start of the container
 *  at runtime. The service account used by Cloud Build and by Cloud Run must
 *  each have the `secretmanager.versions.access` permission on the secret.
 */
@property(nonatomic, copy, nullable) NSString *secret;

/**
 *  A plaintext value. This value is encrypted at rest, but all project readers
 *  can view the value when reading your backend configuration.
 */
@property(nonatomic, copy, nullable) NSString *value;

/**
 *  Required. The name of the environment variable. - Must be a valid
 *  environment variable name (e.g. A-Z or underscores). - May not start with
 *  "FIREBASE" or "GOOGLE". - May not be a reserved environment variable for
 *  KNative/Cloud Run
 */
@property(nonatomic, copy, nullable) NSString *variable;

@end


/**
 *  The container for the rpc status and source for any errors found during the
 *  build process.
 */
@interface GTLRFirebaseAppHosting_Error : GTLRObject

/** Output only. Resource link */
@property(nonatomic, copy, nullable) NSString *cloudResource;

/**
 *  Output only. A status and (human readable) error message for the build, if
 *  in a `FAILED` state.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Status *error;

/**
 *  Output only. The source of the error for the build, if in a `FAILED` state.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppHosting_Error_ErrorSource_CloudBuild Indicates
 *        that the build failed during the Cloud Build process, such as a build
 *        timeout. (Value: "CLOUD_BUILD")
 *    @arg @c kGTLRFirebaseAppHosting_Error_ErrorSource_CloudRun Indicates that
 *        the build failed during the Cloud Run process, such as a service
 *        creation failure. (Value: "CLOUD_RUN")
 *    @arg @c kGTLRFirebaseAppHosting_Error_ErrorSource_ErrorSourceUnspecified
 *        Indicates that generic error occurred outside of the Cloud Build or
 *        Cloud Run processes, such as a pre-empted or user-canceled App Hosting
 *        Build. (Value: "ERROR_SOURCE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *errorSource;

@end


/**
 *  Message for response to list backends
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "backends" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseAppHosting_ListBackendsResponse : GTLRCollectionObject

/**
 *  The list of backends
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_Backend *> *backends;

/** A token identifying the next page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Message for response to list builds.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "builds" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseAppHosting_ListBuildsResponse : GTLRCollectionObject

/**
 *  The list of builds.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_Build *> *builds;

/** A token identifying the next page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Message for response to list domains.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "domains" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseAppHosting_ListDomainsResponse : GTLRCollectionObject

/**
 *  Output only. The list of domains.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_Domain *> *domains;

/**
 *  Output only. A token identifying the next page of results the server should
 *  return.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Output only. Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseAppHosting_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseAppHosting_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_Operation *> *operations;

@end


/**
 *  Message for response to list rollouts.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "rollouts" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRFirebaseAppHosting_ListRolloutsResponse : GTLRCollectionObject

/** A token identifying the next page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The list of rollouts.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_Rollout *> *rollouts;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  A set of updates including ACME challenges and DNS records that allow App
 *  Hosting to create an SSL certificate and establish project ownership for
 *  your domain name before you direct traffic to App Hosting servers. Use these
 *  updates to facilitate zero downtime migrations to App Hosting from other
 *  services. After you've made the recommended updates, check your custom
 *  domain's `ownershipState` and `certState`. To avoid downtime, they should be
 *  `OWNERSHIP_ACTIVE` and `CERT_ACTIVE`, respectively, before you update your
 *  `A` and `AAAA` records.
 */
@interface GTLRFirebaseAppHosting_LiveMigrationStep : GTLRObject

/**
 *  Output only. DNS updates to facilitate your domain's zero-downtime migration
 *  to App Hosting.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_DnsUpdates *> *dnsUpdates;

/** Output only. Issues that prevent the current step from completing. */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_Status *> *issues;

/**
 *  Output only. One or more states from the `CustomDomainStatus` of the
 *  migrating domain that this step is attempting to make ACTIVE. For example,
 *  if the step is attempting to mint an SSL certificate, this field will
 *  include `CERT_STATE`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *relevantDomainStates;

/**
 *  Output only. The state of the live migration step, indicates whether you
 *  should work to complete the step now, in the future, or have already
 *  completed it.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppHosting_LiveMigrationStep_StepState_Complete The
 *        step is complete. You've already made the necessary changes to your
 *        domain and/or prior hosting service to advance to the next step. Once
 *        all steps are complete, App Hosting is ready to serve secure content
 *        on your domain. (Value: "COMPLETE")
 *    @arg @c kGTLRFirebaseAppHosting_LiveMigrationStep_StepState_Incomplete The
 *        step is incomplete. You should complete any `dnsUpdates` changes to
 *        complete it. (Value: "INCOMPLETE")
 *    @arg @c kGTLRFirebaseAppHosting_LiveMigrationStep_StepState_Pending The
 *        step's state is pending. Complete prior steps before working on a
 *        `PENDING` step. (Value: "PENDING")
 *    @arg @c kGTLRFirebaseAppHosting_LiveMigrationStep_StepState_Preparing App
 *        Hosting doesn't have enough information to construct the step yet.
 *        Complete any prior steps and/or resolve this step's issue to proceed.
 *        (Value: "PREPARING")
 *    @arg @c kGTLRFirebaseAppHosting_LiveMigrationStep_StepState_Processing
 *        You've done your part to update records and present challenges as
 *        necessary. App Hosting is now completing background processes to
 *        complete the step, e.g. minting an SSL cert for your domain. (Value:
 *        "PROCESSING")
 *    @arg @c kGTLRFirebaseAppHosting_LiveMigrationStep_StepState_StepStateUnspecified
 *        The step's state is unspecified. The message is invalid if this is
 *        unspecified. (Value: "STEP_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *stepState;

@end


/**
 *  A resource that represents a Google Cloud location.
 */
@interface GTLRFirebaseAppHosting_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseAppHosting_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseAppHosting_Location_Metadata : GTLRObject
@end


/**
 *  An external resource managed by App Hosting on the project.
 */
@interface GTLRFirebaseAppHosting_ManagedResource : GTLRObject

/**
 *  A Cloud Run
 *  [`service`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services#resource:-service),
 *  managed by App Hosting.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_RunService *runService;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRFirebaseAppHosting_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseAppHosting_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseAppHosting_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of a long-running operation.
 */
@interface GTLRFirebaseAppHosting_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have been cancelled successfully have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Specifies redirect behavior for a domain.
 */
@interface GTLRFirebaseAppHosting_Redirect : GTLRObject

/**
 *  Optional. The status code to use in a redirect response. Must be a valid
 *  HTTP 3XX status code. Defaults to 302 if not present.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *status;

/**
 *  Required. The URI of the redirect's intended destination. This URI will be
 *  prepended to the original request path. URI without a scheme are assumed to
 *  be HTTPS.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  A single rollout of a build for a backend.
 */
@interface GTLRFirebaseAppHosting_Rollout : GTLRObject

/**
 *  Optional. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Rollout_Annotations *annotations;

/**
 *  Immutable. The name of a build that already exists. It doesn't have to be
 *  built; a rollout will wait for a build to be ready before updating traffic.
 */
@property(nonatomic, copy, nullable) NSString *build;

/** Output only. Time at which the rollout was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Time at which the rollout was deleted. */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/** Optional. Human-readable name. 63 character limit. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. A status and (human readable) error message for the rollout, if
 *  in a `FAILED` state.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Status *error;

/**
 *  Output only. Server-computed checksum based on other values; may be sent on
 *  update or delete to ensure operation is done on expected resource.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. Unstructured key value map that can be used to organize and
 *  categorize objects.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Rollout_Labels *labels;

/**
 *  Identifier. The resource name of the rollout. Format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}/rollouts/{rolloutId}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. A field that, if true, indicates that the Rollout currently has
 *  an LRO.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/**
 *  Output only. The state of the rollout.
 *
 *  Likely values:
 *    @arg @c kGTLRFirebaseAppHosting_Rollout_State_Cancelled The rollout has
 *        been cancelled. (Value: "CANCELLED")
 *    @arg @c kGTLRFirebaseAppHosting_Rollout_State_Failed The rollout has
 *        failed. See error for more information. (Value: "FAILED")
 *    @arg @c kGTLRFirebaseAppHosting_Rollout_State_Paused The rollout has been
 *        paused due to either being manually paused or a PAUSED stage. This
 *        should be set while `paused = true`. (Value: "PAUSED")
 *    @arg @c kGTLRFirebaseAppHosting_Rollout_State_PendingBuild The rollout is
 *        waiting for the build process to complete, which builds the code and
 *        sets up the underlying infrastructure. (Value: "PENDING_BUILD")
 *    @arg @c kGTLRFirebaseAppHosting_Rollout_State_Progressing The rollout has
 *        started and is actively modifying traffic. (Value: "PROGRESSING")
 *    @arg @c kGTLRFirebaseAppHosting_Rollout_State_Queued The rollout is
 *        waiting for actuation to begin. This may be because it is waiting on
 *        another rollout to complete. (Value: "QUEUED")
 *    @arg @c kGTLRFirebaseAppHosting_Rollout_State_StateUnspecified The rollout
 *        is in an unknown state. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRFirebaseAppHosting_Rollout_State_Succeeded The rollout has
 *        completed. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. System-assigned, unique identifier. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Time at which the rollout was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseAppHosting_Rollout_Annotations : GTLRObject
@end


/**
 *  Optional. Unstructured key value map that can be used to organize and
 *  categorize objects.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseAppHosting_Rollout_Labels : GTLRObject
@end


/**
 *  The policy for how automatic builds and rollouts are triggered and rolled
 *  out.
 */
@interface GTLRFirebaseAppHosting_RolloutPolicy : GTLRObject

/**
 *  If set, specifies a branch that triggers a new build to be started with this
 *  policy. Otherwise, no automatic rollouts will happen.
 */
@property(nonatomic, copy, nullable) NSString *codebaseBranch;

/**
 *  Optional. A flag that, if true, prevents automatic rollouts from being
 *  created via this RolloutPolicy.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

/**
 *  Output only. If `disabled` is set, the time at which the automatic rollouts
 *  were disabled.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *disabledTime;

@end


/**
 *  Additional configuration to apply to the Cloud Run
 *  [`service`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services#resource:-service).
 */
@interface GTLRFirebaseAppHosting_RunConfig : GTLRObject

/**
 *  Optional. Maximum number of requests that each Cloud Run instance can
 *  receive. By default, each instance can receive Cloud Run's default of up to
 *  80 requests at the same time. Concurrency can be set to any integer value up
 *  to 1000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *concurrency;

/**
 *  Optional. Number of CPUs used for each serving instance. By default, cpu
 *  defaults to the Cloud Run's default of 1.0. CPU can be set to value 1, 2, 4,
 *  6, or 8 CPUs, and for less than 1 CPU, a value from 0.08 to less than 1.00,
 *  in increments of 0.01. If you set a value of less than 1 CPU, you must set
 *  concurrency to 1, and CPU will only be allocated during request processing.
 *  Increasing CPUs limit may require increase in memory limits: - 4 CPUs: at
 *  least 2 GiB - 6 CPUs: at least 4 GiB - 8 CPUs: at least 4 GiB
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cpu;

/**
 *  Optional. Number of Cloud Run instances to maintain at maximum for each
 *  revision. By default, each Cloud Run
 *  [`service`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services#resource:-service)
 *  scales out to Cloud Run's default of a maximum of 100 instances. The maximum
 *  max_instances limit is based on your quota. See
 *  https://cloud.google.com/run/docs/configuring/max-instances#limits.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxInstances;

/**
 *  Optional. Amount of memory allocated for each serving instance in MiB. By
 *  default, memory defaults to the Cloud Run's default where each instance is
 *  allocated 512 MiB of memory. Memory can be set to any integer value between
 *  128 to 32768. Increasing memory limit may require increase in CPUs limits: -
 *  Over 4 GiB: at least 2 CPUs - Over 8 GiB: at least 4 CPUs - Over 16 GiB: at
 *  least 6 CPUs - Over 24 GiB: at least 8 CPUs
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memoryMib;

/**
 *  Optional. Number of Cloud Run instances to maintain at minimum for each
 *  Cloud Run Service. By default, there are no minimum. Even if the service
 *  splits traffic across multiple revisions, the total number of instances for
 *  a service will be capped at this value.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minInstances;

@end


/**
 *  A managed Cloud Run
 *  [`service`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services#resource:-service).
 */
@interface GTLRFirebaseAppHosting_RunService : GTLRObject

/**
 *  Optional. The name of the Cloud Run
 *  [`service`](https://cloud.google.com/run/docs/reference/rest/v2/projects.locations.services#resource:-service),
 *  in the format:
 *  `projects/{project}/locations/{location}/services/{serviceId}`
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Indicates whether App Hosting will serve content on the domain.
 */
@interface GTLRFirebaseAppHosting_ServingBehavior : GTLRObject

/** Optional. Redirect behavior for a domain, if provided. */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Redirect *redirect;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRFirebaseAppHosting_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRFirebaseAppHosting_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRFirebaseAppHosting_Status_Details_Item : GTLRObject
@end


/**
 *  Controls traffic configuration for the backend.
 */
@interface GTLRFirebaseAppHosting_Traffic : GTLRObject

/**
 *  Optional. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Traffic_Annotations *annotations;

/** Output only. Time at which the backend was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. Current state of traffic allocation for the backend. When
 *  setting `target`, this field may differ for some time until the desired
 *  state is reached.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_TrafficSet *current;

/**
 *  Output only. Server-computed checksum based on other values; may be sent on
 *  update or delete to ensure operation is done on expected resource.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. Unstructured key value map that can be used to organize and
 *  categorize objects.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_Traffic_Labels *labels;

/**
 *  Identifier. The resource name of the backend's traffic. Format:
 *  `projects/{project}/locations/{locationId}/backends/{backendId}/traffic`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. A field that, if true, indicates that the system is working to
 *  make the backend's `current` match the requested `target` list.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/**
 *  A rollout policy specifies how new builds and automatic deployments are
 *  created.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_RolloutPolicy *rolloutPolicy;

/**
 *  Set to manually control the desired traffic for the backend. This will cause
 *  `current` to eventually match this value. The percentages must add up to
 *  100%.
 */
@property(nonatomic, strong, nullable) GTLRFirebaseAppHosting_TrafficSet *target;

/** Output only. System-assigned, unique identifier. */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. Time at which the backend was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Unstructured key value map that may be set by external tools to
 *  store and arbitrary metadata. They are not queryable and should be preserved
 *  when modifying objects.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseAppHosting_Traffic_Annotations : GTLRObject
@end


/**
 *  Optional. Unstructured key value map that can be used to organize and
 *  categorize objects.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRFirebaseAppHosting_Traffic_Labels : GTLRObject
@end


/**
 *  A list of traffic splits that together represent where traffic is being
 *  routed.
 */
@interface GTLRFirebaseAppHosting_TrafficSet : GTLRObject

/** Required. The list of traffic splits. */
@property(nonatomic, strong, nullable) NSArray<GTLRFirebaseAppHosting_TrafficSplit *> *splits;

@end


/**
 *  The traffic allocation for the backend.
 */
@interface GTLRFirebaseAppHosting_TrafficSplit : GTLRObject

/** Required. The build that traffic is being routed to. */
@property(nonatomic, copy, nullable) NSString *build;

/**
 *  Required. The percentage of traffic to send to the build. Currently must be
 *  100% or 0%.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *percent;

@end


/**
 *  Version control metadata for a user associated with a resolved codebase.
 *  Currently assumes a Git user.
 */
@interface GTLRFirebaseAppHosting_UserMetadata : GTLRObject

/**
 *  Output only. The 'name' field in a Git user's git.config. Required by Git.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. The 'email' field in a Git user's git.config, if available.
 */
@property(nonatomic, copy, nullable) NSString *email;

/**
 *  Output only. The URI of an image file associated with the user's account in
 *  an external source control provider, if available.
 */
@property(nonatomic, copy, nullable) NSString *imageUri;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
