// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Reader Revenue Subscription Linking API (readerrevenuesubscriptionlinking/v1)
// Description:
//   readerrevenuesubscriptionlinking.googleapis.com API.
// Documentation:
//   https://developers.google.com/news/subscribe/subscription-linking/overview

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRSubscriptionLinkingObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Subscription Linking query classes.
 */
@interface GTLRSubscriptionLinkingQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Removes a publication reader, effectively severing the association with a
 *  Google user. If `force` is set to true, any entitlements for this reader
 *  will also be deleted. (Otherwise, the request will only work if the reader
 *  has no entitlements.) - If the reader does not exist, return NOT_FOUND. -
 *  Return FAILED_PRECONDITION if the force field is false (or unset) and
 *  entitlements are present.
 *
 *  Method: readerrevenuesubscriptionlinking.publications.readers.delete
 */
@interface GTLRSubscriptionLinkingQuery_PublicationsReadersDelete : GTLRSubscriptionLinkingQuery

/** If set to true, any entitlements under the reader will also be purged. */
@property(nonatomic, assign) BOOL force;

/**
 *  Required. The resource name of the reader. Format:
 *  publications/{publication_id}/readers/{ppid}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSubscriptionLinking_DeleteReaderResponse.
 *
 *  Removes a publication reader, effectively severing the association with a
 *  Google user. If `force` is set to true, any entitlements for this reader
 *  will also be deleted. (Otherwise, the request will only work if the reader
 *  has no entitlements.) - If the reader does not exist, return NOT_FOUND. -
 *  Return FAILED_PRECONDITION if the force field is false (or unset) and
 *  entitlements are present.
 *
 *  @param name Required. The resource name of the reader. Format:
 *    publications/{publication_id}/readers/{ppid}
 *
 *  @return GTLRSubscriptionLinkingQuery_PublicationsReadersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a reader of a publication. Returns NOT_FOUND if the reader does not
 *  exist.
 *
 *  Method: readerrevenuesubscriptionlinking.publications.readers.get
 */
@interface GTLRSubscriptionLinkingQuery_PublicationsReadersGet : GTLRSubscriptionLinkingQuery

/**
 *  Required. The resource name of the reader. Format:
 *  publications/{publication_id}/readers/{ppid}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSubscriptionLinking_Reader.
 *
 *  Gets a reader of a publication. Returns NOT_FOUND if the reader does not
 *  exist.
 *
 *  @param name Required. The resource name of the reader. Format:
 *    publications/{publication_id}/readers/{ppid}
 *
 *  @return GTLRSubscriptionLinkingQuery_PublicationsReadersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the reader entitlements for a publication reader. - Returns
 *  PERMISSION_DENIED if the caller does not have access. - Returns NOT_FOUND if
 *  the reader does not exist.
 *
 *  Method: readerrevenuesubscriptionlinking.publications.readers.getEntitlements
 */
@interface GTLRSubscriptionLinkingQuery_PublicationsReadersGetEntitlements : GTLRSubscriptionLinkingQuery

/**
 *  Required. The name of the reader entitlements to retrieve. Format:
 *  publications/{publication_id}/readers/{reader_id}/entitlements
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRSubscriptionLinking_ReaderEntitlements.
 *
 *  Gets the reader entitlements for a publication reader. - Returns
 *  PERMISSION_DENIED if the caller does not have access. - Returns NOT_FOUND if
 *  the reader does not exist.
 *
 *  @param name Required. The name of the reader entitlements to retrieve.
 *    Format: publications/{publication_id}/readers/{reader_id}/entitlements
 *
 *  @return GTLRSubscriptionLinkingQuery_PublicationsReadersGetEntitlements
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates the reader entitlements for a publication reader. The entire reader
 *  entitlements will be overwritten by the new reader entitlements in the
 *  payload, like a PUT. - Returns PERMISSION_DENIED if the caller does not have
 *  access. - Returns NOT_FOUND if the reader does not exist.
 *
 *  Method: readerrevenuesubscriptionlinking.publications.readers.updateEntitlements
 */
@interface GTLRSubscriptionLinkingQuery_PublicationsReadersUpdateEntitlements : GTLRSubscriptionLinkingQuery

/** Output only. The resource name of the singleton. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The list of fields to update. Defaults to all fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRSubscriptionLinking_ReaderEntitlements.
 *
 *  Updates the reader entitlements for a publication reader. The entire reader
 *  entitlements will be overwritten by the new reader entitlements in the
 *  payload, like a PUT. - Returns PERMISSION_DENIED if the caller does not have
 *  access. - Returns NOT_FOUND if the reader does not exist.
 *
 *  @param object The @c GTLRSubscriptionLinking_ReaderEntitlements to include
 *    in the query.
 *  @param name Output only. The resource name of the singleton.
 *
 *  @return GTLRSubscriptionLinkingQuery_PublicationsReadersUpdateEntitlements
 */
+ (instancetype)queryWithObject:(GTLRSubscriptionLinking_ReaderEntitlements *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
