// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Network Connectivity API (networkconnectivity/v1)
// Description:
//   This API enables connectivity with and between Google Cloud resources.
// Documentation:
//   https://cloud.google.com/network-connectivity/docs/reference/networkconnectivity/rest

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRNetworkconnectivity_AuditConfig;
@class GTLRNetworkconnectivity_AuditLogConfig;
@class GTLRNetworkconnectivity_Binding;
@class GTLRNetworkconnectivity_Expr;
@class GTLRNetworkconnectivity_GoogleLongrunningOperation;
@class GTLRNetworkconnectivity_GoogleLongrunningOperation_Metadata;
@class GTLRNetworkconnectivity_GoogleLongrunningOperation_Response;
@class GTLRNetworkconnectivity_GoogleRpcStatus;
@class GTLRNetworkconnectivity_GoogleRpcStatus_Details_Item;
@class GTLRNetworkconnectivity_Hub;
@class GTLRNetworkconnectivity_Hub_Labels;
@class GTLRNetworkconnectivity_InternalRange;
@class GTLRNetworkconnectivity_InternalRange_Labels;
@class GTLRNetworkconnectivity_LinkedInterconnectAttachments;
@class GTLRNetworkconnectivity_LinkedRouterApplianceInstances;
@class GTLRNetworkconnectivity_LinkedVpnTunnels;
@class GTLRNetworkconnectivity_Location;
@class GTLRNetworkconnectivity_Location_Labels;
@class GTLRNetworkconnectivity_Location_Metadata;
@class GTLRNetworkconnectivity_Policy;
@class GTLRNetworkconnectivity_RouterApplianceInstance;
@class GTLRNetworkconnectivity_RoutingVPC;
@class GTLRNetworkconnectivity_Spoke;
@class GTLRNetworkconnectivity_Spoke_Labels;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRNetworkconnectivity_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRNetworkconnectivity_Hub.state

/**
 *  The resource is active
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_Hub_State_Active;
/**
 *  The resource's create operation is in progress
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_Hub_State_Creating;
/**
 *  The resource's Delete operation is in progress
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_Hub_State_Deleting;
/**
 *  No state information available
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_Hub_State_StateUnspecified;
/**
 *  The resource's Update operation is in progress
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_Hub_State_Updating;

// ----------------------------------------------------------------------------
// GTLRNetworkconnectivity_InternalRange.overlaps

/**
 *  Allow creation of static routes more specific that the current
 *  InternalRange.
 *
 *  Value: "OVERLAP_ROUTE_RANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_InternalRange_Overlaps_OverlapRouteRange;
/**
 *  No overlap overrides.
 *
 *  Value: "OVERLAP_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_InternalRange_Overlaps_OverlapUnspecified;

// ----------------------------------------------------------------------------
// GTLRNetworkconnectivity_InternalRange.peering

/**
 *  This behavior can be set when the Internal Range is being reserved for usage
 *  by the peers. This means that no resource within the VPC in which it is
 *  being created can use this to associate with a GCP resource, but one of the
 *  peer’s can. This represents "donating" a range for peers to use.
 *
 *  Value: "FOR_PEER"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_InternalRange_Peering_ForPeer;
/**
 *  This is the default behavior and represents the case that this InternalRange
 *  is intended to be used in the VPC on which it is created and is accessible
 *  from it’s peers. This implies that peers or peer-of-peer’s cannot use this
 *  range.
 *
 *  Value: "FOR_SELF"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_InternalRange_Peering_ForSelf;
/**
 *  This behavior can be set when the Internal Range is being reserved for usage
 *  by the VPC on which it is created but not shared with the peers. In a sense
 *  it is local to the VPC. This can be used to create Internal Ranges for
 *  various purposes like HTTP_INTERNAL_LOAD_BALANCER or for interconnect routes
 *  that are not shared with peers. This also implies that peer’s cannot use
 *  this range in a way that is visible to this VPC, but can re-use this range
 *  as long as it is NOT_SHARED from the peer VPC too.
 *
 *  Value: "NOT_SHARED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_InternalRange_Peering_NotShared;
/**
 *  If Peering is left unspecified in CreateInternalRange or
 *  UpdateInternalRange, it will be defaulted to FOR_SELF.
 *
 *  Value: "PEERING_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_InternalRange_Peering_PeeringUnspecified;

// ----------------------------------------------------------------------------
// GTLRNetworkconnectivity_InternalRange.usage

/**
 *  Ranges created with EXTERNAL_TO_VPC cannot be associated with GCP resources
 *  and are meant to block out address ranges for various use cases, like for
 *  example, usage on-prem, with dynamic route announcements via interconnect.
 *
 *  Value: "EXTERNAL_TO_VPC"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_InternalRange_Usage_ExternalToVpc;
/**
 *  A GCP resource can use the reserved CIDR block by associating it with the
 *  Internal Range resource if usage is set to FOR_VPC.
 *
 *  Value: "FOR_VPC"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_InternalRange_Usage_ForVpc;
/**
 *  Unspecified usage is allowed in calls which identify the resource by other
 *  fields and do not need Usage set to complete. These are i.e.:
 *  GetInternalRange and DeleteInternalRange. Usage needs to be specified
 *  explicitly in CreateInternalRange or UpdateInternalRange calls.
 *
 *  Value: "USAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_InternalRange_Usage_UsageUnspecified;

// ----------------------------------------------------------------------------
// GTLRNetworkconnectivity_LocationMetadata.locationFeatures

/**
 *  No publicly supported feature in this location
 *
 *  Value: "LOCATION_FEATURE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_LocationMetadata_LocationFeatures_LocationFeatureUnspecified;
/**
 *  Site-to-cloud spokes are supported in this location
 *
 *  Value: "SITE_TO_CLOUD_SPOKES"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_LocationMetadata_LocationFeatures_SiteToCloudSpokes;
/**
 *  Site-to-site spokes are supported in this location
 *
 *  Value: "SITE_TO_SITE_SPOKES"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_LocationMetadata_LocationFeatures_SiteToSiteSpokes;

// ----------------------------------------------------------------------------
// GTLRNetworkconnectivity_Spoke.state

/**
 *  The resource is active
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_Spoke_State_Active;
/**
 *  The resource's create operation is in progress
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_Spoke_State_Creating;
/**
 *  The resource's Delete operation is in progress
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_Spoke_State_Deleting;
/**
 *  No state information available
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_Spoke_State_StateUnspecified;
/**
 *  The resource's Update operation is in progress
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRNetworkconnectivity_Spoke_State_Updating;

/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRNetworkconnectivity_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkconnectivity_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRNetworkconnectivity_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkconnectivity_AuditLogConfig_LogType_AdminRead Admin
 *        reads. Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRNetworkconnectivity_AuditLogConfig_LogType_DataRead Data
 *        reads. Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRNetworkconnectivity_AuditLogConfig_LogType_DataWrite Data
 *        writes. Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRNetworkconnectivity_AuditLogConfig_LogType_LogTypeUnspecified
 *        Default case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRNetworkconnectivity_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRNetworkconnectivity_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`:
 *  An email address (plus unique identifier) representing a user that has been
 *  recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. * `domain:{domain}`: The G Suite domain (primary) that
 *  represents all the users of that domain. For example, `google.com` or
 *  `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRNetworkconnectivity_Empty : GTLRObject
@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRNetworkconnectivity_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRNetworkconnectivity_GoogleLongrunningCancelOperationRequest : GTLRObject
@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRNetworkconnectivity_GoogleLongrunningListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkconnectivity_GoogleLongrunningOperation *> *operations;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRNetworkconnectivity_GoogleLongrunningOperation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRNetworkconnectivity_GoogleRpcStatus *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRNetworkconnectivity_GoogleLongrunningOperation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRNetworkconnectivity_GoogleLongrunningOperation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRNetworkconnectivity_GoogleLongrunningOperation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRNetworkconnectivity_GoogleLongrunningOperation_Response : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRNetworkconnectivity_GoogleRpcStatus : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkconnectivity_GoogleRpcStatus_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRNetworkconnectivity_GoogleRpcStatus_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRNetworkconnectivity_GoogleRpcStatus_Details_Item : GTLRObject
@end


/**
 *  A Network Connectivity Center hub is a collection of spokes. A single hub
 *  can contain spokes from multiple regions. However, if any of a hub's spokes
 *  use the data transfer feature, the resources associated with those spokes
 *  must all reside in the same VPC network. Spokes that do not use data
 *  transfer can be associated with any VPC network in your project.
 */
@interface GTLRNetworkconnectivity_Hub : GTLRObject

/** Output only. The time the hub was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  An optional description of the hub.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional labels in key:value format. For more information about labels, see
 *  [Requirements for
 *  labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
 */
@property(nonatomic, strong, nullable) GTLRNetworkconnectivity_Hub_Labels *labels;

/**
 *  Immutable. The name of the hub. Hub names must be unique. They use the
 *  following form: `projects/{project_number}/locations/global/hubs/{hub_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The VPC networks associated with this hub's spokes. This field is read-only.
 *  Network Connectivity Center automatically populates it based on the set of
 *  spokes attached to the hub.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkconnectivity_RoutingVPC *> *routingVpcs;

/**
 *  Output only. The current lifecycle state of this hub.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkconnectivity_Hub_State_Active The resource is active
 *        (Value: "ACTIVE")
 *    @arg @c kGTLRNetworkconnectivity_Hub_State_Creating The resource's create
 *        operation is in progress (Value: "CREATING")
 *    @arg @c kGTLRNetworkconnectivity_Hub_State_Deleting The resource's Delete
 *        operation is in progress (Value: "DELETING")
 *    @arg @c kGTLRNetworkconnectivity_Hub_State_StateUnspecified No state
 *        information available (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRNetworkconnectivity_Hub_State_Updating The resource's Update
 *        operation is in progress (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. The Google-generated UUID for the hub. This value is unique
 *  across all hub resources. If a hub is deleted and another with the same name
 *  is created, the new hub is assigned a different unique_id.
 */
@property(nonatomic, copy, nullable) NSString *uniqueId;

/** Output only. The time the hub was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional labels in key:value format. For more information about labels, see
 *  [Requirements for
 *  labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkconnectivity_Hub_Labels : GTLRObject
@end


/**
 *  The InternalRange resource for IPAM operations within a VPC network. Used to
 *  represent a private address range along with behavioral characterstics of
 *  that range (it's usage and peering behavior). Networking resources can link
 *  to this range if they are created as belonging to it. Next id: 14
 */
@interface GTLRNetworkconnectivity_InternalRange : GTLRObject

/** Time when the InternalRange was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  A description of this resource.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** IP range that this InternalRange defines. */
@property(nonatomic, copy, nullable) NSString *ipCidrRange;

/** User-defined labels. */
@property(nonatomic, strong, nullable) GTLRNetworkconnectivity_InternalRange_Labels *labels;

/**
 *  Immutable. The name of a InternalRange. Format:
 *  projects/{project}/locations/{location}/internalRanges/{internal_range} See:
 *  https://google.aip.dev/122#fields-representing-resource-names
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The URL or resource ID of the network in which to reserve the Internal
 *  Range. The network cannot be deleted if there are any reserved Internal
 *  Ranges referring to it. Legacy network is not supported. This can only be
 *  specified for a global internal address. Example: - URL:
 *  /compute/v1/projects/{project}/global/networks/{resourceId} - ID: network123
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  Optional. Types of resources that are allowed to overlap with the current
 *  InternalRange.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *overlaps;

/**
 *  The type of peering set for this InternalRange.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkconnectivity_InternalRange_Peering_ForPeer This
 *        behavior can be set when the Internal Range is being reserved for
 *        usage by the peers. This means that no resource within the VPC in
 *        which it is being created can use this to associate with a GCP
 *        resource, but one of the peer’s can. This represents "donating" a
 *        range for peers to use. (Value: "FOR_PEER")
 *    @arg @c kGTLRNetworkconnectivity_InternalRange_Peering_ForSelf This is the
 *        default behavior and represents the case that this InternalRange is
 *        intended to be used in the VPC on which it is created and is
 *        accessible from it’s peers. This implies that peers or peer-of-peer’s
 *        cannot use this range. (Value: "FOR_SELF")
 *    @arg @c kGTLRNetworkconnectivity_InternalRange_Peering_NotShared This
 *        behavior can be set when the Internal Range is being reserved for
 *        usage by the VPC on which it is created but not shared with the peers.
 *        In a sense it is local to the VPC. This can be used to create Internal
 *        Ranges for various purposes like HTTP_INTERNAL_LOAD_BALANCER or for
 *        interconnect routes that are not shared with peers. This also implies
 *        that peer’s cannot use this range in a way that is visible to this
 *        VPC, but can re-use this range as long as it is NOT_SHARED from the
 *        peer VPC too. (Value: "NOT_SHARED")
 *    @arg @c kGTLRNetworkconnectivity_InternalRange_Peering_PeeringUnspecified
 *        If Peering is left unspecified in CreateInternalRange or
 *        UpdateInternalRange, it will be defaulted to FOR_SELF. (Value:
 *        "PEERING_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *peering;

/**
 *  An alternate to ip_cidr_range. Can be set when trying to create a
 *  reservation that automatically finds a free range of the given size. If both
 *  ip_cidr_range and prefix_length are set, it's an error if the range sizes
 *  don't match. Can also be used during updates to change the range size.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *prefixLength;

/**
 *  Optional. Can be set to narrow down or pick a different address space while
 *  searching for a free range. If not set, defaults to the "10.0.0.0/8" address
 *  space. This can be used to search in other rfc-1918 address spaces like
 *  "172.16.0.0/12" and "192.168.0.0/16" or non-rfc-1918 address spaces used in
 *  the VPC.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *targetCidrRange;

/** Time when the InternalRange was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  The type of usage set for this InternalRange.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkconnectivity_InternalRange_Usage_ExternalToVpc Ranges
 *        created with EXTERNAL_TO_VPC cannot be associated with GCP resources
 *        and are meant to block out address ranges for various use cases, like
 *        for example, usage on-prem, with dynamic route announcements via
 *        interconnect. (Value: "EXTERNAL_TO_VPC")
 *    @arg @c kGTLRNetworkconnectivity_InternalRange_Usage_ForVpc A GCP resource
 *        can use the reserved CIDR block by associating it with the Internal
 *        Range resource if usage is set to FOR_VPC. (Value: "FOR_VPC")
 *    @arg @c kGTLRNetworkconnectivity_InternalRange_Usage_UsageUnspecified
 *        Unspecified usage is allowed in calls which identify the resource by
 *        other fields and do not need Usage set to complete. These are i.e.:
 *        GetInternalRange and DeleteInternalRange. Usage needs to be specified
 *        explicitly in CreateInternalRange or UpdateInternalRange calls.
 *        (Value: "USAGE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *usage;

/**
 *  Output only. The list of resources that refer to this internal range.
 *  Resources that use the InternalRange for their range allocation are referred
 *  to as users of the range. Other resources mark themselves as users while
 *  doing so by creating a reference to this InternalRange. Having a user, based
 *  on this reference, prevents deletion of the InternalRange referred to. Can
 *  be empty.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *users;

@end


/**
 *  User-defined labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkconnectivity_InternalRange_Labels : GTLRObject
@end


/**
 *  A collection of VLAN attachment resources. These resources should be
 *  redundant attachments that all advertise the same prefixes to Google Cloud.
 *  Alternatively, in active/passive configurations, all attachments should be
 *  capable of advertising the same prefixes.
 */
@interface GTLRNetworkconnectivity_LinkedInterconnectAttachments : GTLRObject

/**
 *  A value that controls whether site-to-site data transfer is enabled for
 *  these resources. Data transfer is available only in [supported
 *  locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *siteToSiteDataTransfer;

/** The URIs of linked interconnect attachment resources */
@property(nonatomic, strong, nullable) NSArray<NSString *> *uris;

/** Output only. The VPC network where these VLAN attachments are located. */
@property(nonatomic, copy, nullable) NSString *vpcNetwork;

@end


/**
 *  A collection of router appliance instances. If you configure multiple router
 *  appliance instances to receive data from the same set of sites outside of
 *  Google Cloud, we recommend that you associate those instances with the same
 *  spoke.
 */
@interface GTLRNetworkconnectivity_LinkedRouterApplianceInstances : GTLRObject

/** The list of router appliance instances. */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkconnectivity_RouterApplianceInstance *> *instances;

/**
 *  A value that controls whether site-to-site data transfer is enabled for
 *  these resources. Data transfer is available only in [supported
 *  locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *siteToSiteDataTransfer;

/**
 *  Output only. The VPC network where these router appliance instances are
 *  located.
 */
@property(nonatomic, copy, nullable) NSString *vpcNetwork;

@end


/**
 *  A collection of Cloud VPN tunnel resources. These resources should be
 *  redundant HA VPN tunnels that all advertise the same prefixes to Google
 *  Cloud. Alternatively, in a passive/active configuration, all tunnels should
 *  be capable of advertising the same prefixes.
 */
@interface GTLRNetworkconnectivity_LinkedVpnTunnels : GTLRObject

/**
 *  A value that controls whether site-to-site data transfer is enabled for
 *  these resources. Data transfer is available only in [supported
 *  locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *siteToSiteDataTransfer;

/** The URIs of linked VPN tunnel resources. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *uris;

/** Output only. The VPC network where these VPN tunnels are located. */
@property(nonatomic, copy, nullable) NSString *vpcNetwork;

@end


/**
 *  Response for HubService.ListHubs method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "hubs" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRNetworkconnectivity_ListHubsResponse : GTLRCollectionObject

/**
 *  The requested hubs.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkconnectivity_Hub *> *hubs;

/**
 *  The next pagination token in the List response. It should be used as
 *  page_token for the following request. An empty value means no more result.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response for InternalRange.ListInternalRanges
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "internalRanges" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRNetworkconnectivity_ListInternalRangesResponse : GTLRCollectionObject

/**
 *  InternalRanges to be returned.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkconnectivity_InternalRange *> *internalRanges;

/**
 *  The next pagination token in the List response. It should be used as
 *  page_token for the following request. An empty value means no more result.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRNetworkconnectivity_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkconnectivity_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response for HubService.ListSpokes.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "spokes" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRNetworkconnectivity_ListSpokesResponse : GTLRCollectionObject

/**
 *  The next pagination token in the List response. It should be used as
 *  page_token for the following request. An empty value means no more result.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The requested spokes.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkconnectivity_Spoke *> *spokes;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRNetworkconnectivity_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRNetworkconnectivity_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRNetworkconnectivity_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkconnectivity_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRNetworkconnectivity_Location_Metadata : GTLRObject
@end


/**
 *  Metadata about locations
 */
@interface GTLRNetworkconnectivity_LocationMetadata : GTLRObject

/** List of supported features */
@property(nonatomic, strong, nullable) NSArray<NSString *> *locationFeatures;

@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRNetworkconnectivity_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have been cancelled successfully have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRNetworkconnectivity_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkconnectivity_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRNetworkconnectivity_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  A router appliance instance is a Compute Engine virtual machine (VM)
 *  instance that acts as a BGP speaker. A router appliance instance is
 *  specified by the URI of the VM and the internal IP address of one of the
 *  VM's network interfaces.
 */
@interface GTLRNetworkconnectivity_RouterApplianceInstance : GTLRObject

/** The IP address on the VM to use for peering. */
@property(nonatomic, copy, nullable) NSString *ipAddress;

/** The URI of the VM. */
@property(nonatomic, copy, nullable) NSString *virtualMachine;

@end


/**
 *  RoutingVPC contains information about the VPC networks associated with the
 *  spokes of a Network Connectivity Center hub.
 */
@interface GTLRNetworkconnectivity_RoutingVPC : GTLRObject

/**
 *  Output only. If true, indicates that this VPC network is currently
 *  associated with spokes that use the data transfer feature (spokes where the
 *  site_to_site_data_transfer field is set to true). If you create new spokes
 *  that use data transfer, they must be associated with this VPC network. At
 *  most, one VPC network will have this field set to true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requiredForNewSiteToSiteDataTransferSpokes;

/** The URI of the VPC network. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRNetworkconnectivity_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRNetworkconnectivity_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  A Network Connectivity Center spoke represents a connection between your
 *  Google Cloud network resources and a non-Google-Cloud network. When you
 *  create a spoke, you associate it with a hub. You must also identify a value
 *  for exactly one of the following fields: * linked_vpn_tunnels *
 *  linked_interconnect_attachments * linked_router_appliance_instances
 */
@interface GTLRNetworkconnectivity_Spoke : GTLRObject

/** Output only. The time the spoke was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  An optional description of the spoke.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Immutable. The name of the hub that this spoke is attached to. */
@property(nonatomic, copy, nullable) NSString *hub;

/**
 *  Optional labels in key:value format. For more information about labels, see
 *  [Requirements for
 *  labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
 */
@property(nonatomic, strong, nullable) GTLRNetworkconnectivity_Spoke_Labels *labels;

/** VLAN attachments that are associated with the spoke. */
@property(nonatomic, strong, nullable) GTLRNetworkconnectivity_LinkedInterconnectAttachments *linkedInterconnectAttachments;

/** Router appliance instances that are associated with the spoke. */
@property(nonatomic, strong, nullable) GTLRNetworkconnectivity_LinkedRouterApplianceInstances *linkedRouterApplianceInstances;

/** VPN tunnels that are associated with the spoke. */
@property(nonatomic, strong, nullable) GTLRNetworkconnectivity_LinkedVpnTunnels *linkedVpnTunnels;

/**
 *  Immutable. The name of the spoke. Spoke names must be unique. They use the
 *  following form:
 *  `projects/{project_number}/locations/{region}/spokes/{spoke_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The current lifecycle state of this spoke.
 *
 *  Likely values:
 *    @arg @c kGTLRNetworkconnectivity_Spoke_State_Active The resource is active
 *        (Value: "ACTIVE")
 *    @arg @c kGTLRNetworkconnectivity_Spoke_State_Creating The resource's
 *        create operation is in progress (Value: "CREATING")
 *    @arg @c kGTLRNetworkconnectivity_Spoke_State_Deleting The resource's
 *        Delete operation is in progress (Value: "DELETING")
 *    @arg @c kGTLRNetworkconnectivity_Spoke_State_StateUnspecified No state
 *        information available (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRNetworkconnectivity_Spoke_State_Updating The resource's
 *        Update operation is in progress (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. The Google-generated UUID for the spoke. This value is unique
 *  across all spoke resources. If a spoke is deleted and another with the same
 *  name is created, the new spoke is assigned a different unique_id.
 */
@property(nonatomic, copy, nullable) NSString *uniqueId;

/** Output only. The time the spoke was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional labels in key:value format. For more information about labels, see
 *  [Requirements for
 *  labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRNetworkconnectivity_Spoke_Labels : GTLRObject
@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRNetworkconnectivity_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRNetworkconnectivity_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
