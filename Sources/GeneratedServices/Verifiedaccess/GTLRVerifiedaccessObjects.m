// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Chrome Verified Access API (verifiedaccess/v2)
// Description:
//   API for Verified Access chrome extension to provide credential verification
//   for chrome devices connecting to an enterprise network
// Documentation:
//   https://developers.google.com/chrome/verified-access

#import <GoogleAPIClientForREST/GTLRVerifiedaccessObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRVerifiedaccess_VerifyChallengeResponseResult.keyTrustLevel
NSString * const kGTLRVerifiedaccess_VerifyChallengeResponseResult_KeyTrustLevel_ChromeBrowserHwKey = @"CHROME_BROWSER_HW_KEY";
NSString * const kGTLRVerifiedaccess_VerifyChallengeResponseResult_KeyTrustLevel_ChromeBrowserOsKey = @"CHROME_BROWSER_OS_KEY";
NSString * const kGTLRVerifiedaccess_VerifyChallengeResponseResult_KeyTrustLevel_ChromeOsDeveloperMode = @"CHROME_OS_DEVELOPER_MODE";
NSString * const kGTLRVerifiedaccess_VerifyChallengeResponseResult_KeyTrustLevel_ChromeOsVerifiedMode = @"CHROME_OS_VERIFIED_MODE";
NSString * const kGTLRVerifiedaccess_VerifyChallengeResponseResult_KeyTrustLevel_KeyTrustLevelUnspecified = @"KEY_TRUST_LEVEL_UNSPECIFIED";

// ----------------------------------------------------------------------------
//
//   GTLRVerifiedaccess_Challenge
//

@implementation GTLRVerifiedaccess_Challenge
@dynamic alternativeChallenge, challenge;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVerifiedaccess_Empty
//

@implementation GTLRVerifiedaccess_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRVerifiedaccess_VerifyChallengeResponseRequest
//

@implementation GTLRVerifiedaccess_VerifyChallengeResponseRequest
@dynamic challengeResponse, expectedIdentity;
@end


// ----------------------------------------------------------------------------
//
//   GTLRVerifiedaccess_VerifyChallengeResponseResult
//

@implementation GTLRVerifiedaccess_VerifyChallengeResponseResult
@dynamic customerId, devicePermanentId, deviceSignal, keyTrustLevel,
         signedPublicKeyAndChallenge, virtualDeviceId;
@end
