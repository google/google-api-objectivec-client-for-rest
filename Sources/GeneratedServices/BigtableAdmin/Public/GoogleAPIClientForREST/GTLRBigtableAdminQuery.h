// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Bigtable Admin API (bigtableadmin/v2)
// Description:
//   Administer your Cloud Bigtable tables and instances.
// Documentation:
//   https://cloud.google.com/bigtable/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRBigtableAdminObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// view

/**
 *  Only populates `name` and fields related to the table's encryption state.
 *
 *  Value: "ENCRYPTION_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigtableAdminViewEncryptionView;
/**
 *  Populates all fields except for stats. See STATS_VIEW to request stats.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigtableAdminViewFull;
/**
 *  Only populates `name`.
 *
 *  Value: "NAME_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigtableAdminViewNameOnly;
/**
 *  Only populates `name` and fields related to the table's replication state.
 *
 *  Value: "REPLICATION_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigtableAdminViewReplicationView;
/**
 *  Only populates `name` and fields related to the table's schema.
 *
 *  Value: "SCHEMA_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigtableAdminViewSchemaView;
/**
 *  Only populates `name` and fields related to the table's stats (e.g.
 *  TableStats and ColumnFamilyStats).
 *
 *  Value: "STATS_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigtableAdminViewStatsView;
/**
 *  Uses the default view for each method as documented in its request.
 *
 *  Value: "VIEW_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigtableAdminViewViewUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Bigtable Admin query classes.
 */
@interface GTLRBigtableAdminQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: bigtableadmin.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_OperationsCancel : GTLRBigtableAdminQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRBigtableAdminQuery_OperationsCancel
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: bigtableadmin.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_OperationsDelete : GTLRBigtableAdminQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRBigtableAdminQuery_OperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: bigtableadmin.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_OperationsGet : GTLRBigtableAdminQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRBigtableAdminQuery_OperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: bigtableadmin.operations.projects.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_OperationsProjectsOperationsList : GTLRBigtableAdminQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRBigtableAdmin_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRBigtableAdminQuery_OperationsProjectsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates an app profile within an instance.
 *
 *  Method: bigtableadmin.projects.instances.appProfiles.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesCreate : GTLRBigtableAdminQuery

/**
 *  Required. The ID to be used when referring to the new app profile within its
 *  instance, e.g., just `myprofile` rather than
 *  `projects/myproject/instances/myinstance/appProfiles/myprofile`.
 */
@property(nonatomic, copy, nullable) NSString *appProfileId;

/** If true, ignore safety checks when creating the app profile. */
@property(nonatomic, assign) BOOL ignoreWarnings;

/**
 *  Required. The unique name of the instance in which to create the new app
 *  profile. Values are of the form `projects/{project}/instances/{instance}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_AppProfile.
 *
 *  Creates an app profile within an instance.
 *
 *  @param object The @c GTLRBigtableAdmin_AppProfile to include in the query.
 *  @param parent Required. The unique name of the instance in which to create
 *    the new app profile. Values are of the form
 *    `projects/{project}/instances/{instance}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesCreate
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_AppProfile *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes an app profile from an instance.
 *
 *  Method: bigtableadmin.projects.instances.appProfiles.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesDelete : GTLRBigtableAdminQuery

/** Required. If true, ignore safety checks when deleting the app profile. */
@property(nonatomic, assign) BOOL ignoreWarnings;

/**
 *  Required. The unique name of the app profile to be deleted. Values are of
 *  the form
 *  `projects/{project}/instances/{instance}/appProfiles/{app_profile}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Empty.
 *
 *  Deletes an app profile from an instance.
 *
 *  @param name Required. The unique name of the app profile to be deleted.
 *    Values are of the form
 *    `projects/{project}/instances/{instance}/appProfiles/{app_profile}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets information about an app profile.
 *
 *  Method: bigtableadmin.projects.instances.appProfiles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesGet : GTLRBigtableAdminQuery

/**
 *  Required. The unique name of the requested app profile. Values are of the
 *  form `projects/{project}/instances/{instance}/appProfiles/{app_profile}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_AppProfile.
 *
 *  Gets information about an app profile.
 *
 *  @param name Required. The unique name of the requested app profile. Values
 *    are of the form
 *    `projects/{project}/instances/{instance}/appProfiles/{app_profile}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about app profiles in an instance.
 *
 *  Method: bigtableadmin.projects.instances.appProfiles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesList : GTLRBigtableAdminQuery

/**
 *  Maximum number of results per page. A page_size of zero lets the server
 *  choose the number of items to return. A page_size which is strictly positive
 *  will return at most that many items. A negative page_size will cause an
 *  error. Following the first request, subsequent paginated calls are not
 *  required to pass a page_size. If a page_size is set in subsequent calls, it
 *  must match the page_size given in the first request.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The value of `next_page_token` returned by a previous call. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The unique name of the instance for which a list of app profiles
 *  is requested. Values are of the form
 *  `projects/{project}/instances/{instance}`. Use `{instance} = '-'` to list
 *  AppProfiles for all Instances in a project, e.g.,
 *  `projects/myproject/instances/-`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_ListAppProfilesResponse.
 *
 *  Lists information about app profiles in an instance.
 *
 *  @param parent Required. The unique name of the instance for which a list of
 *    app profiles is requested. Values are of the form
 *    `projects/{project}/instances/{instance}`. Use `{instance} = '-'` to list
 *    AppProfiles for all Instances in a project, e.g.,
 *    `projects/myproject/instances/-`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an app profile within an instance.
 *
 *  Method: bigtableadmin.projects.instances.appProfiles.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesPatch : GTLRBigtableAdminQuery

/** If true, ignore safety checks when updating the app profile. */
@property(nonatomic, assign) BOOL ignoreWarnings;

/**
 *  The unique name of the app profile. Values are of the form
 *  `projects/{project}/instances/{instance}/appProfiles/_a-zA-Z0-9*`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The subset of app profile fields which should be replaced. If
 *  unset, all fields will be replaced.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Updates an app profile within an instance.
 *
 *  @param object The @c GTLRBigtableAdmin_AppProfile to include in the query.
 *  @param name The unique name of the app profile. Values are of the form
 *    `projects/{project}/instances/{instance}/appProfiles/_a-zA-Z0-9*`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesAppProfilesPatch
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_AppProfile *)object
                           name:(NSString *)name;

@end

/**
 *  Copy a Cloud Bigtable backup to a new backup in the destination cluster
 *  located in the destination instance and project.
 *
 *  Method: bigtableadmin.projects.instances.clusters.backups.copy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsCopy : GTLRBigtableAdminQuery

/**
 *  Required. The name of the destination cluster that will contain the backup
 *  copy. The cluster must already exists. Values are of the form:
 *  `projects/{project}/instances/{instance}/clusters/{cluster}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Copy a Cloud Bigtable backup to a new backup in the destination cluster
 *  located in the destination instance and project.
 *
 *  @param object The @c GTLRBigtableAdmin_CopyBackupRequest to include in the
 *    query.
 *  @param parent Required. The name of the destination cluster that will
 *    contain the backup copy. The cluster must already exists. Values are of
 *    the form: `projects/{project}/instances/{instance}/clusters/{cluster}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsCopy
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_CopyBackupRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Starts creating a new Cloud Bigtable Backup. The returned backup
 *  long-running operation can be used to track creation of the backup. The
 *  metadata field type is CreateBackupMetadata. The response field type is
 *  Backup, if successful. Cancelling the returned operation will stop the
 *  creation and delete the backup.
 *
 *  Method: bigtableadmin.projects.instances.clusters.backups.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsCreate : GTLRBigtableAdminQuery

/**
 *  Required. The id of the backup to be created. The `backup_id` along with the
 *  parent `parent` are combined as {parent}/backups/{backup_id} to create the
 *  full backup name, of the form:
 *  `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup_id}`.
 *  This string must be between 1 and 50 characters in length and match the
 *  regex _a-zA-Z0-9*.
 */
@property(nonatomic, copy, nullable) NSString *backupId;

/**
 *  Required. This must be one of the clusters in the instance in which this
 *  table is located. The backup will be stored in this cluster. Values are of
 *  the form `projects/{project}/instances/{instance}/clusters/{cluster}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Starts creating a new Cloud Bigtable Backup. The returned backup
 *  long-running operation can be used to track creation of the backup. The
 *  metadata field type is CreateBackupMetadata. The response field type is
 *  Backup, if successful. Cancelling the returned operation will stop the
 *  creation and delete the backup.
 *
 *  @param object The @c GTLRBigtableAdmin_Backup to include in the query.
 *  @param parent Required. This must be one of the clusters in the instance in
 *    which this table is located. The backup will be stored in this cluster.
 *    Values are of the form
 *    `projects/{project}/instances/{instance}/clusters/{cluster}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsCreate
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_Backup *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a pending or completed Cloud Bigtable backup.
 *
 *  Method: bigtableadmin.projects.instances.clusters.backups.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsDelete : GTLRBigtableAdminQuery

/**
 *  Required. Name of the backup to delete. Values are of the form
 *  `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Empty.
 *
 *  Deletes a pending or completed Cloud Bigtable backup.
 *
 *  @param name Required. Name of the backup to delete. Values are of the form
 *    `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets metadata on a pending or completed Cloud Bigtable Backup.
 *
 *  Method: bigtableadmin.projects.instances.clusters.backups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsGet : GTLRBigtableAdminQuery

/**
 *  Required. Name of the backup. Values are of the form
 *  `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Backup.
 *
 *  Gets metadata on a pending or completed Cloud Bigtable Backup.
 *
 *  @param name Required. Name of the backup. Values are of the form
 *    `projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a Table resource. Returns an empty policy
 *  if the resource exists but does not have a policy set.
 *
 *  Method: bigtableadmin.projects.instances.clusters.backups.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsGetIamPolicy : GTLRBigtableAdminQuery

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBigtableAdmin_Policy.
 *
 *  Gets the access control policy for a Table resource. Returns an empty policy
 *  if the resource exists but does not have a policy set.
 *
 *  @param object The @c GTLRBigtableAdmin_GetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists Cloud Bigtable backups. Returns both completed and pending backups.
 *
 *  Method: bigtableadmin.projects.instances.clusters.backups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsList : GTLRBigtableAdminQuery

/**
 *  A filter expression that filters backups listed in the response. The
 *  expression must specify the field name, a comparison operator, and the value
 *  that you want to use for filtering. The value must be a string, a number, or
 *  a boolean. The comparison operator must be <, >, <=, >=, !=, =, or :. Colon
 *  ':' represents a HAS operator which is roughly synonymous with equality.
 *  Filter rules are case insensitive. The fields eligible for filtering are: *
 *  `name` * `source_table` * `state` * `start_time` (and values are of the
 *  format YYYY-MM-DDTHH:MM:SSZ) * `end_time` (and values are of the format
 *  YYYY-MM-DDTHH:MM:SSZ) * `expire_time` (and values are of the format
 *  YYYY-MM-DDTHH:MM:SSZ) * `size_bytes` To filter on multiple expressions,
 *  provide each separate expression within parentheses. By default, each
 *  expression is an AND expression. However, you can include AND, OR, and NOT
 *  expressions explicitly. Some examples of using filters are: * `name:"exact"`
 *  --> The backup's name is the string "exact". * `name:howl` --> The backup's
 *  name contains the string "howl". * `source_table:prod` --> The
 *  source_table's name contains the string "prod". * `state:CREATING` --> The
 *  backup is pending creation. * `state:READY` --> The backup is fully created
 *  and ready for use. * `(name:howl) AND (start_time <
 *  \\"2018-03-28T14:50:00Z\\")` --> The backup name contains the string "howl"
 *  and start_time of the backup is before 2018-03-28T14:50:00Z. * `size_bytes >
 *  10000000000` --> The backup's size is greater than 10GB
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  An expression for specifying the sort order of the results of the request.
 *  The string value should specify one or more fields in Backup. The full
 *  syntax is described at https://aip.dev/132#ordering. Fields supported are: *
 *  name * source_table * expire_time * start_time * end_time * size_bytes *
 *  state For example, "start_time". The default sorting order is ascending. To
 *  specify descending order for the field, a suffix " desc" should be appended
 *  to the field name. For example, "start_time desc". Redundant space
 *  characters in the syntax are insigificant. If order_by is empty, results
 *  will be sorted by `start_time` in descending order starting from the most
 *  recently created backup.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Number of backups to be returned in the response. If 0 or less, defaults to
 *  the server's maximum allowed page size.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  If non-empty, `page_token` should contain a next_page_token from a previous
 *  ListBackupsResponse to the same `parent` and with the same `filter`.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The cluster to list backups from. Values are of the form
 *  `projects/{project}/instances/{instance}/clusters/{cluster}`. Use `{cluster}
 *  = '-'` to list backups for all clusters in an instance, e.g.,
 *  `projects/{project}/instances/{instance}/clusters/-`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_ListBackupsResponse.
 *
 *  Lists Cloud Bigtable backups. Returns both completed and pending backups.
 *
 *  @param parent Required. The cluster to list backups from. Values are of the
 *    form `projects/{project}/instances/{instance}/clusters/{cluster}`. Use
 *    `{cluster} = '-'` to list backups for all clusters in an instance, e.g.,
 *    `projects/{project}/instances/{instance}/clusters/-`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a pending or completed Cloud Bigtable Backup.
 *
 *  Method: bigtableadmin.projects.instances.clusters.backups.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsPatch : GTLRBigtableAdminQuery

/**
 *  A globally unique identifier for the backup which cannot be changed. Values
 *  are of the form `projects/{project}/instances/{instance}/clusters/{cluster}/
 *  backups/_a-zA-Z0-9*` The final segment of the name must be between 1 and 50
 *  characters in length. The backup is stored in the cluster identified by the
 *  prefix of the backup name of the form
 *  `projects/{project}/instances/{instance}/clusters/{cluster}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. A mask specifying which fields (e.g. `expire_time`) in the Backup
 *  resource should be updated. This mask is relative to the Backup resource,
 *  not to the request message. The field mask must always be specified; this
 *  prevents any future fields from being erased accidentally by clients that do
 *  not know about them.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRBigtableAdmin_Backup.
 *
 *  Updates a pending or completed Cloud Bigtable Backup.
 *
 *  @param object The @c GTLRBigtableAdmin_Backup to include in the query.
 *  @param name A globally unique identifier for the backup which cannot be
 *    changed. Values are of the form
 *    `projects/{project}/instances/{instance}/clusters/{cluster}/
 *    backups/_a-zA-Z0-9*` The final segment of the name must be between 1 and
 *    50 characters in length. The backup is stored in the cluster identified by
 *    the prefix of the backup name of the form
 *    `projects/{project}/instances/{instance}/clusters/{cluster}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsPatch
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_Backup *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on a Table resource. Replaces any existing
 *  policy.
 *
 *  Method: bigtableadmin.projects.instances.clusters.backups.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsSetIamPolicy : GTLRBigtableAdminQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBigtableAdmin_Policy.
 *
 *  Sets the access control policy on a Table resource. Replaces any existing
 *  policy.
 *
 *  @param object The @c GTLRBigtableAdmin_SetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that the caller has on the specified table resource.
 *
 *  Method: bigtableadmin.projects.instances.clusters.backups.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsTestIamPermissions : GTLRBigtableAdminQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBigtableAdmin_TestIamPermissionsResponse.
 *
 *  Returns permissions that the caller has on the specified table resource.
 *
 *  @param object The @c GTLRBigtableAdmin_TestIamPermissionsRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersBackupsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Creates a cluster within an instance. Note that exactly one of
 *  Cluster.serve_nodes and Cluster.cluster_config.cluster_autoscaling_config
 *  can be set. If serve_nodes is set to non-zero, then the cluster is manually
 *  scaled. If cluster_config.cluster_autoscaling_config is non-empty, then
 *  autoscaling is enabled.
 *
 *  Method: bigtableadmin.projects.instances.clusters.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersCreate : GTLRBigtableAdminQuery

/**
 *  Required. The ID to be used when referring to the new cluster within its
 *  instance, e.g., just `mycluster` rather than
 *  `projects/myproject/instances/myinstance/clusters/mycluster`.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/**
 *  Required. The unique name of the instance in which to create the new
 *  cluster. Values are of the form `projects/{project}/instances/{instance}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Creates a cluster within an instance. Note that exactly one of
 *  Cluster.serve_nodes and Cluster.cluster_config.cluster_autoscaling_config
 *  can be set. If serve_nodes is set to non-zero, then the cluster is manually
 *  scaled. If cluster_config.cluster_autoscaling_config is non-empty, then
 *  autoscaling is enabled.
 *
 *  @param object The @c GTLRBigtableAdmin_Cluster to include in the query.
 *  @param parent Required. The unique name of the instance in which to create
 *    the new cluster. Values are of the form
 *    `projects/{project}/instances/{instance}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersCreate
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_Cluster *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a cluster from an instance.
 *
 *  Method: bigtableadmin.projects.instances.clusters.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersDelete : GTLRBigtableAdminQuery

/**
 *  Required. The unique name of the cluster to be deleted. Values are of the
 *  form `projects/{project}/instances/{instance}/clusters/{cluster}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Empty.
 *
 *  Deletes a cluster from an instance.
 *
 *  @param name Required. The unique name of the cluster to be deleted. Values
 *    are of the form
 *    `projects/{project}/instances/{instance}/clusters/{cluster}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets information about a cluster.
 *
 *  Method: bigtableadmin.projects.instances.clusters.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersGet : GTLRBigtableAdminQuery

/**
 *  Required. The unique name of the requested cluster. Values are of the form
 *  `projects/{project}/instances/{instance}/clusters/{cluster}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Cluster.
 *
 *  Gets information about a cluster.
 *
 *  @param name Required. The unique name of the requested cluster. Values are
 *    of the form `projects/{project}/instances/{instance}/clusters/{cluster}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists hot tablets in a cluster, within the time range provided. Hot tablets
 *  are ordered based on CPU usage.
 *
 *  Method: bigtableadmin.projects.instances.clusters.hotTablets.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersHotTabletsList : GTLRBigtableAdminQuery

/** The end time to list hot tablets. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Maximum number of results per page. A page_size that is empty or zero lets
 *  the server choose the number of items to return. A page_size which is
 *  strictly positive will return at most that many items. A negative page_size
 *  will cause an error. Following the first request, subsequent paginated calls
 *  do not need a page_size field. If a page_size is set in subsequent calls, it
 *  must match the page_size given in the first request.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The value of `next_page_token` returned by a previous call. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The cluster name to list hot tablets. Value is in the following
 *  form: `projects/{project}/instances/{instance}/clusters/{cluster}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The start time to list hot tablets. The hot tablets in the response will
 *  have start times between the requested start time and end time. Start time
 *  defaults to Now if it is unset, and end time defaults to Now - 24 hours if
 *  it is unset. The start time should be less than the end time, and the
 *  maximum allowed time range between start time and end time is 48 hours.
 *  Start time and end time should have values between Now and Now - 14 days.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Fetches a @c GTLRBigtableAdmin_ListHotTabletsResponse.
 *
 *  Lists hot tablets in a cluster, within the time range provided. Hot tablets
 *  are ordered based on CPU usage.
 *
 *  @param parent Required. The cluster name to list hot tablets. Value is in
 *    the following form:
 *    `projects/{project}/instances/{instance}/clusters/{cluster}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersHotTabletsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists information about clusters in an instance.
 *
 *  Method: bigtableadmin.projects.instances.clusters.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersList : GTLRBigtableAdminQuery

/** DEPRECATED: This field is unused and ignored. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The unique name of the instance for which a list of clusters is
 *  requested. Values are of the form `projects/{project}/instances/{instance}`.
 *  Use `{instance} = '-'` to list Clusters for all Instances in a project,
 *  e.g., `projects/myproject/instances/-`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_ListClustersResponse.
 *
 *  Lists information about clusters in an instance.
 *
 *  @param parent Required. The unique name of the instance for which a list of
 *    clusters is requested. Values are of the form
 *    `projects/{project}/instances/{instance}`. Use `{instance} = '-'` to list
 *    Clusters for all Instances in a project, e.g.,
 *    `projects/myproject/instances/-`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Partially updates a cluster within a project. This method is the preferred
 *  way to update a Cluster. To enable and update autoscaling, set
 *  cluster_config.cluster_autoscaling_config. When autoscaling is enabled,
 *  serve_nodes is treated as an OUTPUT_ONLY field, meaning that updates to it
 *  are ignored. Note that an update cannot simultaneously set serve_nodes to
 *  non-zero and cluster_config.cluster_autoscaling_config to non-empty, and
 *  also specify both in the update_mask. To disable autoscaling, clear
 *  cluster_config.cluster_autoscaling_config, and explicitly set a serve_node
 *  count via the update_mask.
 *
 *  Method: bigtableadmin.projects.instances.clusters.partialUpdateCluster
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersPartialUpdateCluster : GTLRBigtableAdminQuery

/**
 *  The unique name of the cluster. Values are of the form
 *  `projects/{project}/instances/{instance}/clusters/a-z*`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The subset of Cluster fields which should be replaced.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Partially updates a cluster within a project. This method is the preferred
 *  way to update a Cluster. To enable and update autoscaling, set
 *  cluster_config.cluster_autoscaling_config. When autoscaling is enabled,
 *  serve_nodes is treated as an OUTPUT_ONLY field, meaning that updates to it
 *  are ignored. Note that an update cannot simultaneously set serve_nodes to
 *  non-zero and cluster_config.cluster_autoscaling_config to non-empty, and
 *  also specify both in the update_mask. To disable autoscaling, clear
 *  cluster_config.cluster_autoscaling_config, and explicitly set a serve_node
 *  count via the update_mask.
 *
 *  @param object The @c GTLRBigtableAdmin_Cluster to include in the query.
 *  @param name The unique name of the cluster. Values are of the form
 *    `projects/{project}/instances/{instance}/clusters/a-z*`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersPartialUpdateCluster
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_Cluster *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a cluster within an instance. Note that UpdateCluster does not
 *  support updating cluster_config.cluster_autoscaling_config. In order to
 *  update it, you must use PartialUpdateCluster.
 *
 *  Method: bigtableadmin.projects.instances.clusters.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesClustersUpdate : GTLRBigtableAdminQuery

/**
 *  The unique name of the cluster. Values are of the form
 *  `projects/{project}/instances/{instance}/clusters/a-z*`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Updates a cluster within an instance. Note that UpdateCluster does not
 *  support updating cluster_config.cluster_autoscaling_config. In order to
 *  update it, you must use PartialUpdateCluster.
 *
 *  @param object The @c GTLRBigtableAdmin_Cluster to include in the query.
 *  @param name The unique name of the cluster. Values are of the form
 *    `projects/{project}/instances/{instance}/clusters/a-z*`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesClustersUpdate
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_Cluster *)object
                           name:(NSString *)name;

@end

/**
 *  Create an instance within a project. Note that exactly one of
 *  Cluster.serve_nodes and Cluster.cluster_config.cluster_autoscaling_config
 *  can be set. If serve_nodes is set to non-zero, then the cluster is manually
 *  scaled. If cluster_config.cluster_autoscaling_config is non-empty, then
 *  autoscaling is enabled.
 *
 *  Method: bigtableadmin.projects.instances.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesCreate : GTLRBigtableAdminQuery

/**
 *  Required. The unique name of the project in which to create the new
 *  instance. Values are of the form `projects/{project}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Create an instance within a project. Note that exactly one of
 *  Cluster.serve_nodes and Cluster.cluster_config.cluster_autoscaling_config
 *  can be set. If serve_nodes is set to non-zero, then the cluster is manually
 *  scaled. If cluster_config.cluster_autoscaling_config is non-empty, then
 *  autoscaling is enabled.
 *
 *  @param object The @c GTLRBigtableAdmin_CreateInstanceRequest to include in
 *    the query.
 *  @param parent Required. The unique name of the project in which to create
 *    the new instance. Values are of the form `projects/{project}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesCreate
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_CreateInstanceRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Delete an instance from a project.
 *
 *  Method: bigtableadmin.projects.instances.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesDelete : GTLRBigtableAdminQuery

/**
 *  Required. The unique name of the instance to be deleted. Values are of the
 *  form `projects/{project}/instances/{instance}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Empty.
 *
 *  Delete an instance from a project.
 *
 *  @param name Required. The unique name of the instance to be deleted. Values
 *    are of the form `projects/{project}/instances/{instance}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets information about an instance.
 *
 *  Method: bigtableadmin.projects.instances.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesGet : GTLRBigtableAdminQuery

/**
 *  Required. The unique name of the requested instance. Values are of the form
 *  `projects/{project}/instances/{instance}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Instance.
 *
 *  Gets information about an instance.
 *
 *  @param name Required. The unique name of the requested instance. Values are
 *    of the form `projects/{project}/instances/{instance}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for an instance resource. Returns an empty
 *  policy if an instance exists but does not have a policy set.
 *
 *  Method: bigtableadmin.projects.instances.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesGetIamPolicy : GTLRBigtableAdminQuery

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBigtableAdmin_Policy.
 *
 *  Gets the access control policy for an instance resource. Returns an empty
 *  policy if an instance exists but does not have a policy set.
 *
 *  @param object The @c GTLRBigtableAdmin_GetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists information about instances in a project.
 *
 *  Method: bigtableadmin.projects.instances.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesList : GTLRBigtableAdminQuery

/** DEPRECATED: This field is unused and ignored. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The unique name of the project for which a list of instances is
 *  requested. Values are of the form `projects/{project}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_ListInstancesResponse.
 *
 *  Lists information about instances in a project.
 *
 *  @param parent Required. The unique name of the project for which a list of
 *    instances is requested. Values are of the form `projects/{project}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Partially updates an instance within a project. This method can modify all
 *  fields of an Instance and is the preferred way to update an Instance.
 *
 *  Method: bigtableadmin.projects.instances.partialUpdateInstance
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesPartialUpdateInstance : GTLRBigtableAdminQuery

/**
 *  The unique name of the instance. Values are of the form
 *  `projects/{project}/instances/a-z+[a-z0-9]`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The subset of Instance fields which should be replaced. Must be
 *  explicitly set.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Partially updates an instance within a project. This method can modify all
 *  fields of an Instance and is the preferred way to update an Instance.
 *
 *  @param object The @c GTLRBigtableAdmin_Instance to include in the query.
 *  @param name The unique name of the instance. Values are of the form
 *    `projects/{project}/instances/a-z+[a-z0-9]`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesPartialUpdateInstance
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_Instance *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on an instance resource. Replaces any
 *  existing policy.
 *
 *  Method: bigtableadmin.projects.instances.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesSetIamPolicy : GTLRBigtableAdminQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBigtableAdmin_Policy.
 *
 *  Sets the access control policy on an instance resource. Replaces any
 *  existing policy.
 *
 *  @param object The @c GTLRBigtableAdmin_SetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Checks replication consistency based on a consistency token, that is, if
 *  replication has caught up based on the conditions specified in the token and
 *  the check request.
 *
 *  Method: bigtableadmin.projects.instances.tables.checkConsistency
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesCheckConsistency : GTLRBigtableAdminQuery

/**
 *  Required. The unique name of the Table for which to check replication
 *  consistency. Values are of the form
 *  `projects/{project}/instances/{instance}/tables/{table}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_CheckConsistencyResponse.
 *
 *  Checks replication consistency based on a consistency token, that is, if
 *  replication has caught up based on the conditions specified in the token and
 *  the check request.
 *
 *  @param object The @c GTLRBigtableAdmin_CheckConsistencyRequest to include in
 *    the query.
 *  @param name Required. The unique name of the Table for which to check
 *    replication consistency. Values are of the form
 *    `projects/{project}/instances/{instance}/tables/{table}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesCheckConsistency
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_CheckConsistencyRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new table in the specified instance. The table can be created with
 *  a full set of initial column families, specified in the request.
 *
 *  Method: bigtableadmin.projects.instances.tables.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesCreate : GTLRBigtableAdminQuery

/**
 *  Required. The unique name of the instance in which to create the table.
 *  Values are of the form `projects/{project}/instances/{instance}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_Table.
 *
 *  Creates a new table in the specified instance. The table can be created with
 *  a full set of initial column families, specified in the request.
 *
 *  @param object The @c GTLRBigtableAdmin_CreateTableRequest to include in the
 *    query.
 *  @param parent Required. The unique name of the instance in which to create
 *    the table. Values are of the form
 *    `projects/{project}/instances/{instance}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesCreate
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_CreateTableRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Permanently deletes a specified table and all of its data.
 *
 *  Method: bigtableadmin.projects.instances.tables.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesDelete : GTLRBigtableAdminQuery

/**
 *  Required. The unique name of the table to be deleted. Values are of the form
 *  `projects/{project}/instances/{instance}/tables/{table}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Empty.
 *
 *  Permanently deletes a specified table and all of its data.
 *
 *  @param name Required. The unique name of the table to be deleted. Values are
 *    of the form `projects/{project}/instances/{instance}/tables/{table}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Permanently drop/delete a row range from a specified table. The request can
 *  specify whether to delete all rows in a table, or only those that match a
 *  particular prefix.
 *
 *  Method: bigtableadmin.projects.instances.tables.dropRowRange
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesDropRowRange : GTLRBigtableAdminQuery

/**
 *  Required. The unique name of the table on which to drop a range of rows.
 *  Values are of the form
 *  `projects/{project}/instances/{instance}/tables/{table}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Empty.
 *
 *  Permanently drop/delete a row range from a specified table. The request can
 *  specify whether to delete all rows in a table, or only those that match a
 *  particular prefix.
 *
 *  @param object The @c GTLRBigtableAdmin_DropRowRangeRequest to include in the
 *    query.
 *  @param name Required. The unique name of the table on which to drop a range
 *    of rows. Values are of the form
 *    `projects/{project}/instances/{instance}/tables/{table}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesDropRowRange
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_DropRowRangeRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Generates a consistency token for a Table, which can be used in
 *  CheckConsistency to check whether mutations to the table that finished
 *  before this call started have been replicated. The tokens will be available
 *  for 90 days.
 *
 *  Method: bigtableadmin.projects.instances.tables.generateConsistencyToken
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesGenerateConsistencyToken : GTLRBigtableAdminQuery

/**
 *  Required. The unique name of the Table for which to create a consistency
 *  token. Values are of the form
 *  `projects/{project}/instances/{instance}/tables/{table}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_GenerateConsistencyTokenResponse.
 *
 *  Generates a consistency token for a Table, which can be used in
 *  CheckConsistency to check whether mutations to the table that finished
 *  before this call started have been replicated. The tokens will be available
 *  for 90 days.
 *
 *  @param object The @c GTLRBigtableAdmin_GenerateConsistencyTokenRequest to
 *    include in the query.
 *  @param name Required. The unique name of the Table for which to create a
 *    consistency token. Values are of the form
 *    `projects/{project}/instances/{instance}/tables/{table}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesGenerateConsistencyToken
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_GenerateConsistencyTokenRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets metadata information about the specified table.
 *
 *  Method: bigtableadmin.projects.instances.tables.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesGet : GTLRBigtableAdminQuery

/**
 *  Required. The unique name of the requested table. Values are of the form
 *  `projects/{project}/instances/{instance}/tables/{table}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The view to be applied to the returned table's fields. Defaults to
 *  `SCHEMA_VIEW` if unspecified.
 *
 *  Likely values:
 *    @arg @c kGTLRBigtableAdminViewViewUnspecified Uses the default view for
 *        each method as documented in its request. (Value: "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRBigtableAdminViewNameOnly Only populates `name`. (Value:
 *        "NAME_ONLY")
 *    @arg @c kGTLRBigtableAdminViewSchemaView Only populates `name` and fields
 *        related to the table's schema. (Value: "SCHEMA_VIEW")
 *    @arg @c kGTLRBigtableAdminViewReplicationView Only populates `name` and
 *        fields related to the table's replication state. (Value:
 *        "REPLICATION_VIEW")
 *    @arg @c kGTLRBigtableAdminViewEncryptionView Only populates `name` and
 *        fields related to the table's encryption state. (Value:
 *        "ENCRYPTION_VIEW")
 *    @arg @c kGTLRBigtableAdminViewStatsView Only populates `name` and fields
 *        related to the table's stats (e.g. TableStats and ColumnFamilyStats).
 *        (Value: "STATS_VIEW")
 *    @arg @c kGTLRBigtableAdminViewFull Populates all fields except for stats.
 *        See STATS_VIEW to request stats. (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBigtableAdmin_Table.
 *
 *  Gets metadata information about the specified table.
 *
 *  @param name Required. The unique name of the requested table. Values are of
 *    the form `projects/{project}/instances/{instance}/tables/{table}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a Table resource. Returns an empty policy
 *  if the resource exists but does not have a policy set.
 *
 *  Method: bigtableadmin.projects.instances.tables.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesGetIamPolicy : GTLRBigtableAdminQuery

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBigtableAdmin_Policy.
 *
 *  Gets the access control policy for a Table resource. Returns an empty policy
 *  if the resource exists but does not have a policy set.
 *
 *  @param object The @c GTLRBigtableAdmin_GetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesGetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_GetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Lists all tables served from a specified instance.
 *
 *  Method: bigtableadmin.projects.instances.tables.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesList : GTLRBigtableAdminQuery

/**
 *  Maximum number of results per page. A page_size of zero lets the server
 *  choose the number of items to return. A page_size which is strictly positive
 *  will return at most that many items. A negative page_size will cause an
 *  error. Following the first request, subsequent paginated calls are not
 *  required to pass a page_size. If a page_size is set in subsequent calls, it
 *  must match the page_size given in the first request.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The value of `next_page_token` returned by a previous call. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The unique name of the instance for which tables should be listed.
 *  Values are of the form `projects/{project}/instances/{instance}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The view to be applied to the returned tables' fields. Only NAME_ONLY view
 *  (default), REPLICATION_VIEW and ENCRYPTION_VIEW are supported.
 *
 *  Likely values:
 *    @arg @c kGTLRBigtableAdminViewViewUnspecified Uses the default view for
 *        each method as documented in its request. (Value: "VIEW_UNSPECIFIED")
 *    @arg @c kGTLRBigtableAdminViewNameOnly Only populates `name`. (Value:
 *        "NAME_ONLY")
 *    @arg @c kGTLRBigtableAdminViewSchemaView Only populates `name` and fields
 *        related to the table's schema. (Value: "SCHEMA_VIEW")
 *    @arg @c kGTLRBigtableAdminViewReplicationView Only populates `name` and
 *        fields related to the table's replication state. (Value:
 *        "REPLICATION_VIEW")
 *    @arg @c kGTLRBigtableAdminViewEncryptionView Only populates `name` and
 *        fields related to the table's encryption state. (Value:
 *        "ENCRYPTION_VIEW")
 *    @arg @c kGTLRBigtableAdminViewStatsView Only populates `name` and fields
 *        related to the table's stats (e.g. TableStats and ColumnFamilyStats).
 *        (Value: "STATS_VIEW")
 *    @arg @c kGTLRBigtableAdminViewFull Populates all fields except for stats.
 *        See STATS_VIEW to request stats. (Value: "FULL")
 */
@property(nonatomic, copy, nullable) NSString *view;

/**
 *  Fetches a @c GTLRBigtableAdmin_ListTablesResponse.
 *
 *  Lists all tables served from a specified instance.
 *
 *  @param parent Required. The unique name of the instance for which tables
 *    should be listed. Values are of the form
 *    `projects/{project}/instances/{instance}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Performs a series of column family modifications on the specified table.
 *  Either all or none of the modifications will occur before this method
 *  returns, but data requests received prior to that point may see a table
 *  where only some modifications have taken effect.
 *
 *  Method: bigtableadmin.projects.instances.tables.modifyColumnFamilies
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesModifyColumnFamilies : GTLRBigtableAdminQuery

/**
 *  Required. The unique name of the table whose families should be modified.
 *  Values are of the form
 *  `projects/{project}/instances/{instance}/tables/{table}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Table.
 *
 *  Performs a series of column family modifications on the specified table.
 *  Either all or none of the modifications will occur before this method
 *  returns, but data requests received prior to that point may see a table
 *  where only some modifications have taken effect.
 *
 *  @param object The @c GTLRBigtableAdmin_ModifyColumnFamiliesRequest to
 *    include in the query.
 *  @param name Required. The unique name of the table whose families should be
 *    modified. Values are of the form
 *    `projects/{project}/instances/{instance}/tables/{table}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesModifyColumnFamilies
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_ModifyColumnFamiliesRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a specified table.
 *
 *  Method: bigtableadmin.projects.instances.tables.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesPatch : GTLRBigtableAdminQuery

/**
 *  The unique name of the table. Values are of the form
 *  `projects/{project}/instances/{instance}/tables/_a-zA-Z0-9*`. Views:
 *  `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `STATS_VIEW`, `FULL`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The list of fields to update. A mask specifying which fields (e.g.
 *  `change_stream_config`) in the `table` field should be updated. This mask is
 *  relative to the `table` field, not to the request message. The wildcard (*)
 *  path is currently not supported. Currently UpdateTable is only supported for
 *  the following fields: * `change_stream_config` *
 *  `change_stream_config.retention_period` * `deletion_protection` If
 *  `column_families` is set in `update_mask`, it will return an UNIMPLEMENTED
 *  error.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Updates a specified table.
 *
 *  @param object The @c GTLRBigtableAdmin_Table to include in the query.
 *  @param name The unique name of the table. Values are of the form
 *    `projects/{project}/instances/{instance}/tables/_a-zA-Z0-9*`. Views:
 *    `NAME_ONLY`, `SCHEMA_VIEW`, `REPLICATION_VIEW`, `STATS_VIEW`, `FULL`
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesPatch
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_Table *)object
                           name:(NSString *)name;

@end

/**
 *  Create a new table by restoring from a completed backup. The returned table
 *  long-running operation can be used to track the progress of the operation,
 *  and to cancel it. The metadata field type is RestoreTableMetadata. The
 *  response type is Table, if successful.
 *
 *  Method: bigtableadmin.projects.instances.tables.restore
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesRestore : GTLRBigtableAdminQuery

/**
 *  Required. The name of the instance in which to create the restored table.
 *  Values are of the form `projects//instances/`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Create a new table by restoring from a completed backup. The returned table
 *  long-running operation can be used to track the progress of the operation,
 *  and to cancel it. The metadata field type is RestoreTableMetadata. The
 *  response type is Table, if successful.
 *
 *  @param object The @c GTLRBigtableAdmin_RestoreTableRequest to include in the
 *    query.
 *  @param parent Required. The name of the instance in which to create the
 *    restored table. Values are of the form `projects//instances/`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesRestore
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_RestoreTableRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Sets the access control policy on a Table resource. Replaces any existing
 *  policy.
 *
 *  Method: bigtableadmin.projects.instances.tables.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesSetIamPolicy : GTLRBigtableAdminQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBigtableAdmin_Policy.
 *
 *  Sets the access control policy on a Table resource. Replaces any existing
 *  policy.
 *
 *  @param object The @c GTLRBigtableAdmin_SetIamPolicyRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that the caller has on the specified table resource.
 *
 *  Method: bigtableadmin.projects.instances.tables.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesTestIamPermissions : GTLRBigtableAdminQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBigtableAdmin_TestIamPermissionsResponse.
 *
 *  Returns permissions that the caller has on the specified table resource.
 *
 *  @param object The @c GTLRBigtableAdmin_TestIamPermissionsRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Restores a specified table which was accidentally deleted.
 *
 *  Method: bigtableadmin.projects.instances.tables.undelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminTable
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTablesUndelete : GTLRBigtableAdminQuery

/**
 *  Required. The unique name of the table to be restored. Values are of the
 *  form `projects/{project}/instances/{instance}/tables/{table}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Operation.
 *
 *  Restores a specified table which was accidentally deleted.
 *
 *  @param object The @c GTLRBigtableAdmin_UndeleteTableRequest to include in
 *    the query.
 *  @param name Required. The unique name of the table to be restored. Values
 *    are of the form `projects/{project}/instances/{instance}/tables/{table}`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTablesUndelete
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_UndeleteTableRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Returns permissions that the caller has on the specified instance resource.
 *
 *  Method: bigtableadmin.projects.instances.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesTestIamPermissions : GTLRBigtableAdminQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRBigtableAdmin_TestIamPermissionsResponse.
 *
 *  Returns permissions that the caller has on the specified instance resource.
 *
 *  @param object The @c GTLRBigtableAdmin_TestIamPermissionsRequest to include
 *    in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Updates an instance within a project. This method updates only the display
 *  name and type for an Instance. To update other Instance properties, such as
 *  labels, use PartialUpdateInstance.
 *
 *  Method: bigtableadmin.projects.instances.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 */
@interface GTLRBigtableAdminQuery_ProjectsInstancesUpdate : GTLRBigtableAdminQuery

/**
 *  The unique name of the instance. Values are of the form
 *  `projects/{project}/instances/a-z+[a-z0-9]`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Instance.
 *
 *  Updates an instance within a project. This method updates only the display
 *  name and type for an Instance. To update other Instance properties, such as
 *  labels, use PartialUpdateInstance.
 *
 *  @param object The @c GTLRBigtableAdmin_Instance to include in the query.
 *  @param name The unique name of the instance. Values are of the form
 *    `projects/{project}/instances/a-z+[a-z0-9]`.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsInstancesUpdate
 */
+ (instancetype)queryWithObject:(GTLRBigtableAdmin_Instance *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a location.
 *
 *  Method: bigtableadmin.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_ProjectsLocationsGet : GTLRBigtableAdminQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigtableAdmin_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: bigtableadmin.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminBigtableAdminInstance
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdmin
 *    @c kGTLRAuthScopeBigtableAdminCloudBigtableAdminCluster
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatform
 *    @c kGTLRAuthScopeBigtableAdminCloudPlatformReadOnly
 */
@interface GTLRBigtableAdminQuery_ProjectsLocationsList : GTLRBigtableAdminQuery

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRBigtableAdmin_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRBigtableAdminQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
