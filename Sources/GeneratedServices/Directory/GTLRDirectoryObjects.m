// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Admin SDK API (admin/directory_v1)
// Description:
//   Admin SDK lets administrators of enterprise domains to view and manage
//   resources like user, groups etc. It also provides audit and usage reports
//   of domain.
// Documentation:
//   https://developers.google.com/admin-sdk/

#import <GoogleAPIClientForREST/GTLRDirectoryObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRDirectory_AuxiliaryMessage.severity
NSString * const kGTLRDirectory_AuxiliaryMessage_Severity_SeverityError = @"SEVERITY_ERROR";
NSString * const kGTLRDirectory_AuxiliaryMessage_Severity_SeverityInfo = @"SEVERITY_INFO";
NSString * const kGTLRDirectory_AuxiliaryMessage_Severity_SeverityUnspecified = @"SEVERITY_UNSPECIFIED";
NSString * const kGTLRDirectory_AuxiliaryMessage_Severity_SeverityWarning = @"SEVERITY_WARNING";

// GTLRDirectory_ChromeosdevicesCommand.state
NSString * const kGTLRDirectory_ChromeosdevicesCommand_State_AckedByClient = @"ACKED_BY_CLIENT";
NSString * const kGTLRDirectory_ChromeosdevicesCommand_State_Cancelled = @"CANCELLED";
NSString * const kGTLRDirectory_ChromeosdevicesCommand_State_ExecutedByClient = @"EXECUTED_BY_CLIENT";
NSString * const kGTLRDirectory_ChromeosdevicesCommand_State_Expired = @"EXPIRED";
NSString * const kGTLRDirectory_ChromeosdevicesCommand_State_Pending = @"PENDING";
NSString * const kGTLRDirectory_ChromeosdevicesCommand_State_SentToClient = @"SENT_TO_CLIENT";
NSString * const kGTLRDirectory_ChromeosdevicesCommand_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRDirectory_ChromeosdevicesCommand.type
NSString * const kGTLRDirectory_ChromeosdevicesCommand_Type_CommandTypeUnspecified = @"COMMAND_TYPE_UNSPECIFIED";
NSString * const kGTLRDirectory_ChromeosdevicesCommand_Type_Reboot = @"REBOOT";
NSString * const kGTLRDirectory_ChromeosdevicesCommand_Type_RemotePowerwash = @"REMOTE_POWERWASH";
NSString * const kGTLRDirectory_ChromeosdevicesCommand_Type_SetVolume = @"SET_VOLUME";
NSString * const kGTLRDirectory_ChromeosdevicesCommand_Type_TakeAScreenshot = @"TAKE_A_SCREENSHOT";
NSString * const kGTLRDirectory_ChromeosdevicesCommand_Type_WipeUsers = @"WIPE_USERS";

// GTLRDirectory_ChromeosdevicesCommandResult.result
NSString * const kGTLRDirectory_ChromeosdevicesCommandResult_Result_CommandResultTypeUnspecified = @"COMMAND_RESULT_TYPE_UNSPECIFIED";
NSString * const kGTLRDirectory_ChromeosdevicesCommandResult_Result_Failure = @"FAILURE";
NSString * const kGTLRDirectory_ChromeosdevicesCommandResult_Result_Ignored = @"IGNORED";
NSString * const kGTLRDirectory_ChromeosdevicesCommandResult_Result_Success = @"SUCCESS";

// GTLRDirectory_ChromeosdevicesIssueCommandRequest.commandType
NSString * const kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_CommandTypeUnspecified = @"COMMAND_TYPE_UNSPECIFIED";
NSString * const kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_Reboot = @"REBOOT";
NSString * const kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_RemotePowerwash = @"REMOTE_POWERWASH";
NSString * const kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_SetVolume = @"SET_VOLUME";
NSString * const kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_TakeAScreenshot = @"TAKE_A_SCREENSHOT";
NSString * const kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_WipeUsers = @"WIPE_USERS";

// GTLRDirectory_FailureInfo.errorCode
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_Aborted  = @"ABORTED";
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_AlreadyExists = @"ALREADY_EXISTS";
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_Cancelled = @"CANCELLED";
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_DataLoss = @"DATA_LOSS";
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_DeadlineExceeded = @"DEADLINE_EXCEEDED";
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_FailedPrecondition = @"FAILED_PRECONDITION";
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_Internal = @"INTERNAL";
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_InvalidArgument = @"INVALID_ARGUMENT";
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_NotFound = @"NOT_FOUND";
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_Ok       = @"OK";
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_OutOfRange = @"OUT_OF_RANGE";
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_PermissionDenied = @"PERMISSION_DENIED";
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_ResourceExhausted = @"RESOURCE_EXHAUSTED";
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_Unauthenticated = @"UNAUTHENTICATED";
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_Unavailable = @"UNAVAILABLE";
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_Unimplemented = @"UNIMPLEMENTED";
NSString * const kGTLRDirectory_FailureInfo_ErrorCode_Unknown  = @"UNKNOWN";

// GTLRDirectory_OsUpdateStatus.state
NSString * const kGTLRDirectory_OsUpdateStatus_State_UpdateStateDownloadInProgress = @"updateStateDownloadInProgress";
NSString * const kGTLRDirectory_OsUpdateStatus_State_UpdateStateNeedReboot = @"updateStateNeedReboot";
NSString * const kGTLRDirectory_OsUpdateStatus_State_UpdateStateNotStarted = @"updateStateNotStarted";
NSString * const kGTLRDirectory_OsUpdateStatus_State_UpdateStateUnspecified = @"updateStateUnspecified";

// GTLRDirectory_PrintServerFailureInfo.errorCode
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Aborted = @"ABORTED";
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_AlreadyExists = @"ALREADY_EXISTS";
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Cancelled = @"CANCELLED";
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_DataLoss = @"DATA_LOSS";
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_DeadlineExceeded = @"DEADLINE_EXCEEDED";
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_FailedPrecondition = @"FAILED_PRECONDITION";
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Internal = @"INTERNAL";
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_InvalidArgument = @"INVALID_ARGUMENT";
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_NotFound = @"NOT_FOUND";
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Ok = @"OK";
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_OutOfRange = @"OUT_OF_RANGE";
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_PermissionDenied = @"PERMISSION_DENIED";
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_ResourceExhausted = @"RESOURCE_EXHAUSTED";
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Unauthenticated = @"UNAUTHENTICATED";
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Unavailable = @"UNAVAILABLE";
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Unimplemented = @"UNIMPLEMENTED";
NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Unknown = @"UNKNOWN";

// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Alias
//

@implementation GTLRDirectory_Alias
@dynamic alias, ETag, identifier, kind, primaryEmail;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"ETag" : @"etag",
    @"identifier" : @"id"
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Aliases
//

@implementation GTLRDirectory_Aliases
@dynamic aliases, ETag, kind;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"aliases" : [NSObject class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Asp
//

@implementation GTLRDirectory_Asp
@dynamic codeId, creationTime, ETag, kind, lastTimeUsed, name, userKey;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Asps
//

@implementation GTLRDirectory_Asps
@dynamic ETag, items, kind;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRDirectory_Asp class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_AuxiliaryMessage
//

@implementation GTLRDirectory_AuxiliaryMessage
@dynamic auxiliaryMessage, fieldMask, severity;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_BatchCreatePrintersRequest
//

@implementation GTLRDirectory_BatchCreatePrintersRequest
@dynamic requests;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requests" : [GTLRDirectory_CreatePrinterRequest class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_BatchCreatePrintersResponse
//

@implementation GTLRDirectory_BatchCreatePrintersResponse
@dynamic failures, printers;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"failures" : [GTLRDirectory_FailureInfo class],
    @"printers" : [GTLRDirectory_Printer class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_BatchCreatePrintServersRequest
//

@implementation GTLRDirectory_BatchCreatePrintServersRequest
@dynamic requests;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"requests" : [GTLRDirectory_CreatePrintServerRequest class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_BatchCreatePrintServersResponse
//

@implementation GTLRDirectory_BatchCreatePrintServersResponse
@dynamic failures, printServers;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"failures" : [GTLRDirectory_PrintServerFailureInfo class],
    @"printServers" : [GTLRDirectory_PrintServer class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_BatchDeletePrintersRequest
//

@implementation GTLRDirectory_BatchDeletePrintersRequest
@dynamic printerIds;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"printerIds" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_BatchDeletePrintersResponse
//

@implementation GTLRDirectory_BatchDeletePrintersResponse
@dynamic failedPrinters, printerIds;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"failedPrinters" : [GTLRDirectory_FailureInfo class],
    @"printerIds" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_BatchDeletePrintServersRequest
//

@implementation GTLRDirectory_BatchDeletePrintServersRequest
@dynamic printServerIds;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"printServerIds" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_BatchDeletePrintServersResponse
//

@implementation GTLRDirectory_BatchDeletePrintServersResponse
@dynamic failedPrintServers, printServerIds;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"failedPrintServers" : [GTLRDirectory_PrintServerFailureInfo class],
    @"printServerIds" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Building
//

@implementation GTLRDirectory_Building
@dynamic address, buildingId, buildingName, coordinates, descriptionProperty,
         etags, floorNames, kind;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"floorNames" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_BuildingAddress
//

@implementation GTLRDirectory_BuildingAddress
@dynamic addressLines, administrativeArea, languageCode, locality, postalCode,
         regionCode, sublocality;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"addressLines" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_BuildingCoordinates
//

@implementation GTLRDirectory_BuildingCoordinates
@dynamic latitude, longitude;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Buildings
//

@implementation GTLRDirectory_Buildings
@dynamic buildings, ETag, kind, nextPageToken;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"buildings" : [GTLRDirectory_Building class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"buildings";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_CalendarResource
//

@implementation GTLRDirectory_CalendarResource
@dynamic buildingId, capacity, etags, featureInstances, floorName, floorSection,
         generatedResourceName, kind, resourceCategory, resourceDescription,
         resourceEmail, resourceId, resourceName, resourceType,
         userVisibleDescription;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_CalendarResources
//

@implementation GTLRDirectory_CalendarResources
@dynamic ETag, items, kind, nextPageToken;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRDirectory_CalendarResource class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Channel
//

@implementation GTLRDirectory_Channel
@dynamic address, expiration, identifier, kind, params, payload, resourceId,
         resourceUri, token, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Channel_Params
//

@implementation GTLRDirectory_Channel_Params

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDevice
//

@implementation GTLRDirectory_ChromeOsDevice
@dynamic activeTimeRanges, annotatedAssetId, annotatedLocation, annotatedUser,
         autoUpdateExpiration, bootMode, cpuInfo, cpuStatusReports, deviceFiles,
         deviceId, diskVolumeReports, dockMacAddress, ETag, ethernetMacAddress,
         ethernetMacAddress0, firmwareVersion, firstEnrollmentTime, kind,
         lastEnrollmentTime, lastKnownNetwork, lastSync, macAddress,
         manufactureDate, meid, model, notes, orderNumber, orgUnitId,
         orgUnitPath, osUpdateStatus, osVersion, platformVersion, recentUsers,
         screenshotFiles, serialNumber, status, supportEndDate,
         systemRamFreeReports, systemRamTotal, tpmVersionInfo, willAutoRenew;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"activeTimeRanges" : [GTLRDirectory_ChromeOsDevice_ActiveTimeRanges_Item class],
    @"cpuInfo" : [GTLRDirectory_ChromeOsDevice_CpuInfo_Item class],
    @"cpuStatusReports" : [GTLRDirectory_ChromeOsDevice_CpuStatusReports_Item class],
    @"deviceFiles" : [GTLRDirectory_ChromeOsDevice_DeviceFiles_Item class],
    @"diskVolumeReports" : [GTLRDirectory_ChromeOsDevice_DiskVolumeReports_Item class],
    @"lastKnownNetwork" : [GTLRDirectory_ChromeOsDevice_LastKnownNetwork_Item class],
    @"recentUsers" : [GTLRDirectory_ChromeOsDevice_RecentUsers_Item class],
    @"screenshotFiles" : [GTLRDirectory_ChromeOsDevice_ScreenshotFiles_Item class],
    @"systemRamFreeReports" : [GTLRDirectory_ChromeOsDevice_SystemRamFreeReports_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDevice_ActiveTimeRanges_Item
//

@implementation GTLRDirectory_ChromeOsDevice_ActiveTimeRanges_Item
@dynamic activeTime, date;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDevice_CpuInfo_Item
//

@implementation GTLRDirectory_ChromeOsDevice_CpuInfo_Item
@dynamic architecture, logicalCpus, maxClockSpeedKhz, model;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"logicalCpus" : [GTLRDirectory_ChromeOsDevice_CpuInfo_Item_LogicalCpus_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDevice_CpuStatusReports_Item
//

@implementation GTLRDirectory_ChromeOsDevice_CpuStatusReports_Item
@dynamic cpuTemperatureInfo, cpuUtilizationPercentageInfo, reportTime;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"cpuTemperatureInfo" : [GTLRDirectory_ChromeOsDevice_CpuStatusReports_Item_CpuTemperatureInfo_Item class],
    @"cpuUtilizationPercentageInfo" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDevice_DeviceFiles_Item
//

@implementation GTLRDirectory_ChromeOsDevice_DeviceFiles_Item
@dynamic createTime, downloadUrl, name, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDevice_DiskVolumeReports_Item
//

@implementation GTLRDirectory_ChromeOsDevice_DiskVolumeReports_Item
@dynamic volumeInfo;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"volumeInfo" : [GTLRDirectory_ChromeOsDevice_DiskVolumeReports_Item_VolumeInfo_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDevice_LastKnownNetwork_Item
//

@implementation GTLRDirectory_ChromeOsDevice_LastKnownNetwork_Item
@dynamic ipAddress, wanIpAddress;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDevice_RecentUsers_Item
//

@implementation GTLRDirectory_ChromeOsDevice_RecentUsers_Item
@dynamic email, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDevice_ScreenshotFiles_Item
//

@implementation GTLRDirectory_ChromeOsDevice_ScreenshotFiles_Item
@dynamic createTime, downloadUrl, name, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDevice_SystemRamFreeReports_Item
//

@implementation GTLRDirectory_ChromeOsDevice_SystemRamFreeReports_Item
@dynamic reportTime, systemRamFreeInfo;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"systemRamFreeInfo" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDevice_TpmVersionInfo
//

@implementation GTLRDirectory_ChromeOsDevice_TpmVersionInfo
@dynamic family, firmwareVersion, manufacturer, specLevel, tpmModel,
         vendorSpecific;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDevice_CpuInfo_Item_LogicalCpus_Item
//

@implementation GTLRDirectory_ChromeOsDevice_CpuInfo_Item_LogicalCpus_Item
@dynamic cStates, currentScalingFrequencyKhz, idleDuration,
         maxScalingFrequencyKhz;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"cStates" : [GTLRDirectory_ChromeOsDevice_CpuInfo_Item_LogicalCpus_Item_CStates_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDevice_CpuStatusReports_Item_CpuTemperatureInfo_Item
//

@implementation GTLRDirectory_ChromeOsDevice_CpuStatusReports_Item_CpuTemperatureInfo_Item
@dynamic label, temperature;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDevice_DiskVolumeReports_Item_VolumeInfo_Item
//

@implementation GTLRDirectory_ChromeOsDevice_DiskVolumeReports_Item_VolumeInfo_Item
@dynamic storageFree, storageTotal, volumeId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDevice_CpuInfo_Item_LogicalCpus_Item_CStates_Item
//

@implementation GTLRDirectory_ChromeOsDevice_CpuInfo_Item_LogicalCpus_Item_CStates_Item
@dynamic displayName, sessionDuration;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDeviceAction
//

@implementation GTLRDirectory_ChromeOsDeviceAction
@dynamic action, deprovisionReason;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsDevices
//

@implementation GTLRDirectory_ChromeOsDevices
@dynamic chromeosdevices, ETag, kind, nextPageToken;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"chromeosdevices" : [GTLRDirectory_ChromeOsDevice class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"chromeosdevices";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeosdevicesCommand
//

@implementation GTLRDirectory_ChromeosdevicesCommand
@dynamic commandExpireTime, commandId, commandResult, issueTime, payload, state,
         type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeosdevicesCommandResult
//

@implementation GTLRDirectory_ChromeosdevicesCommandResult
@dynamic errorMessage, executeTime, result;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeosdevicesIssueCommandRequest
//

@implementation GTLRDirectory_ChromeosdevicesIssueCommandRequest
@dynamic commandType, payload;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeosdevicesIssueCommandResponse
//

@implementation GTLRDirectory_ChromeosdevicesIssueCommandResponse
@dynamic commandId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ChromeOsMoveDevicesToOu
//

@implementation GTLRDirectory_ChromeOsMoveDevicesToOu
@dynamic deviceIds;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"deviceIds" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_CreatePrinterRequest
//

@implementation GTLRDirectory_CreatePrinterRequest
@dynamic parent, printer;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_CreatePrintServerRequest
//

@implementation GTLRDirectory_CreatePrintServerRequest
@dynamic parent, printServer;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Customer
//

@implementation GTLRDirectory_Customer
@dynamic alternateEmail, customerCreationTime, customerDomain, ETag, identifier,
         kind, language, phoneNumber, postalAddress;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"ETag" : @"etag",
    @"identifier" : @"id"
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_CustomerPostalAddress
//

@implementation GTLRDirectory_CustomerPostalAddress
@dynamic addressLine1, addressLine2, addressLine3, contactName, countryCode,
         locality, organizationName, postalCode, region;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_DomainAlias
//

@implementation GTLRDirectory_DomainAlias
@dynamic creationTime, domainAliasName, ETag, kind, parentDomainName, verified;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_DomainAliases
//

@implementation GTLRDirectory_DomainAliases
@dynamic domainAliases, ETag, kind;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"domainAliases" : [GTLRDirectory_DomainAlias class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Domains
//

@implementation GTLRDirectory_Domains
@dynamic creationTime, domainAliases, domainName, ETag, isPrimary, kind,
         verified;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"domainAliases" : [GTLRDirectory_DomainAlias class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Domains2
//

@implementation GTLRDirectory_Domains2
@dynamic domains, ETag, kind;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"domains" : [GTLRDirectory_Domains class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Empty
//

@implementation GTLRDirectory_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_FailureInfo
//

@implementation GTLRDirectory_FailureInfo
@dynamic errorCode, errorMessage, printer, printerId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Feature
//

@implementation GTLRDirectory_Feature
@dynamic etags, kind, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_FeatureInstance
//

@implementation GTLRDirectory_FeatureInstance
@dynamic feature;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_FeatureRename
//

@implementation GTLRDirectory_FeatureRename
@dynamic newName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Features
//

@implementation GTLRDirectory_Features
@dynamic ETag, features, kind, nextPageToken;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"features" : [GTLRDirectory_Feature class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"features";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Group
//

@implementation GTLRDirectory_Group
@dynamic adminCreated, aliases, descriptionProperty, directMembersCount, email,
         ETag, identifier, kind, name, nonEditableAliases;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"ETag" : @"etag",
    @"identifier" : @"id"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"aliases" : [NSString class],
    @"nonEditableAliases" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_GroupAlias
//

@implementation GTLRDirectory_GroupAlias
@dynamic alias, ETag, identifier, kind, primaryEmail;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"ETag" : @"etag",
    @"identifier" : @"id"
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Groups
//

@implementation GTLRDirectory_Groups
@dynamic ETag, groups, kind, nextPageToken;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"groups" : [GTLRDirectory_Group class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"groups";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ListPrinterModelsResponse
//

@implementation GTLRDirectory_ListPrinterModelsResponse
@dynamic nextPageToken, printerModels;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"printerModels" : [GTLRDirectory_PrinterModel class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"printerModels";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ListPrintersResponse
//

@implementation GTLRDirectory_ListPrintersResponse
@dynamic nextPageToken, printers;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"printers" : [GTLRDirectory_Printer class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"printers";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_ListPrintServersResponse
//

@implementation GTLRDirectory_ListPrintServersResponse
@dynamic nextPageToken, printServers;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"printServers" : [GTLRDirectory_PrintServer class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"printServers";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Member
//

@implementation GTLRDirectory_Member
@dynamic deliverySettings, email, ETag, identifier, kind, role, status, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"deliverySettings" : @"delivery_settings",
    @"ETag" : @"etag",
    @"identifier" : @"id"
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Members
//

@implementation GTLRDirectory_Members
@dynamic ETag, kind, members, nextPageToken;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"members" : [GTLRDirectory_Member class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"members";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_MembersHasMember
//

@implementation GTLRDirectory_MembersHasMember
@dynamic isMember;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_MobileDevice
//

@implementation GTLRDirectory_MobileDevice
@dynamic adbStatus, applications, basebandVersion, bootloaderVersion, brand,
         buildNumber, defaultLanguage, developerOptionsStatus,
         deviceCompromisedStatus, deviceId, devicePasswordStatus, email,
         encryptionStatus, ETag, firstSync, hardware, hardwareId, imei,
         kernelVersion, kind, lastSync, managedAccountIsOnOwnerProfile,
         manufacturer, meid, model, name, networkOperator, os,
         otherAccountsInfo, privilege, releaseVersion, resourceId,
         securityPatchLevel, serialNumber, status, supportsWorkProfile, type,
         unknownSourcesStatus, userAgent, wifiMacAddress;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"applications" : [GTLRDirectory_MobileDevice_Applications_Item class],
    @"email" : [NSString class],
    @"name" : [NSString class],
    @"otherAccountsInfo" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_MobileDevice_Applications_Item
//

@implementation GTLRDirectory_MobileDevice_Applications_Item
@dynamic displayName, packageName, permission, versionCode, versionName;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permission" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_MobileDeviceAction
//

@implementation GTLRDirectory_MobileDeviceAction
@dynamic action;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_MobileDevices
//

@implementation GTLRDirectory_MobileDevices
@dynamic ETag, kind, mobiledevices, nextPageToken;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"mobiledevices" : [GTLRDirectory_MobileDevice class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"mobiledevices";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_OrgUnit
//

@implementation GTLRDirectory_OrgUnit
@dynamic blockInheritance, descriptionProperty, ETag, kind, name, orgUnitId,
         orgUnitPath, parentOrgUnitId, parentOrgUnitPath;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"ETag" : @"etag"
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_OrgUnits
//

@implementation GTLRDirectory_OrgUnits
@dynamic ETag, kind, organizationUnits;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"organizationUnits" : [GTLRDirectory_OrgUnit class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_OsUpdateStatus
//

@implementation GTLRDirectory_OsUpdateStatus
@dynamic rebootTime, state, targetKioskAppVersion, targetOsVersion,
         updateCheckTime, updateTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Printer
//

@implementation GTLRDirectory_Printer
@dynamic auxiliaryMessages, createTime, descriptionProperty, displayName,
         identifier, makeAndModel, name, orgUnitId, uri, useDriverlessConfig;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"identifier" : @"id"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auxiliaryMessages" : [GTLRDirectory_AuxiliaryMessage class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_PrinterModel
//

@implementation GTLRDirectory_PrinterModel
@dynamic displayName, makeAndModel, manufacturer;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_PrintServer
//

@implementation GTLRDirectory_PrintServer
@dynamic createTime, descriptionProperty, displayName, identifier, name,
         orgUnitId, uri;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"identifier" : @"id"
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_PrintServerFailureInfo
//

@implementation GTLRDirectory_PrintServerFailureInfo
@dynamic errorCode, errorMessage, printServer, printServerId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Privilege
//

@implementation GTLRDirectory_Privilege
@dynamic childPrivileges, ETag, isOuScopable, kind, privilegeName, serviceId,
         serviceName;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"childPrivileges" : [GTLRDirectory_Privilege class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Privileges
//

@implementation GTLRDirectory_Privileges
@dynamic ETag, items, kind;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRDirectory_Privilege class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Role
//

@implementation GTLRDirectory_Role
@dynamic ETag, isSuperAdminRole, isSystemRole, kind, roleDescription, roleId,
         roleName, rolePrivileges;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"rolePrivileges" : [GTLRDirectory_Role_RolePrivileges_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Role_RolePrivileges_Item
//

@implementation GTLRDirectory_Role_RolePrivileges_Item
@dynamic privilegeName, serviceId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_RoleAssignment
//

@implementation GTLRDirectory_RoleAssignment
@dynamic assignedTo, ETag, kind, orgUnitId, roleAssignmentId, roleId, scopeType;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_RoleAssignments
//

@implementation GTLRDirectory_RoleAssignments
@dynamic ETag, items, kind, nextPageToken;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRDirectory_RoleAssignment class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Roles
//

@implementation GTLRDirectory_Roles
@dynamic ETag, items, kind, nextPageToken;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRDirectory_Role class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Schema
//

@implementation GTLRDirectory_Schema
@dynamic displayName, ETag, fields, kind, schemaId, schemaName;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fields" : [GTLRDirectory_SchemaFieldSpec class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_SchemaFieldSpec
//

@implementation GTLRDirectory_SchemaFieldSpec
@dynamic displayName, ETag, fieldId, fieldName, fieldType, indexed, kind,
         multiValued, numericIndexingSpec, readAccessType;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_SchemaFieldSpec_NumericIndexingSpec
//

@implementation GTLRDirectory_SchemaFieldSpec_NumericIndexingSpec
@dynamic maxValue, minValue;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Schemas
//

@implementation GTLRDirectory_Schemas
@dynamic ETag, kind, schemas;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"schemas" : [GTLRDirectory_Schema class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Token
//

@implementation GTLRDirectory_Token
@dynamic anonymous, clientId, displayText, ETag, kind, nativeApp, scopes,
         userKey;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"scopes" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Tokens
//

@implementation GTLRDirectory_Tokens
@dynamic ETag, items, kind;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRDirectory_Token class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_User
//

@implementation GTLRDirectory_User
@dynamic addresses, agreedToTerms, aliases, archived, changePasswordAtNextLogin,
         creationTime, customerId, customSchemas, deletionTime, emails, ETag,
         externalIds, gender, hashFunction, identifier, ims,
         includeInGlobalAddressList, ipWhitelisted, isAdmin, isDelegatedAdmin,
         isEnforcedIn2Sv, isEnrolledIn2Sv, isMailboxSetup, keywords, kind,
         languages, lastLoginTime, locations, name, nonEditableAliases, notes,
         organizations, orgUnitPath, password, phones, posixAccounts,
         primaryEmail, recoveryEmail, recoveryPhone, relations, sshPublicKeys,
         suspended, suspensionReason, thumbnailPhotoEtag, thumbnailPhotoUrl,
         websites;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"ETag" : @"etag",
    @"identifier" : @"id"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"aliases" : [NSString class],
    @"nonEditableAliases" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_User_CustomSchemas
//

@implementation GTLRDirectory_User_CustomSchemas

+ (Class)classForAdditionalProperties {
  return [GTLRDirectory_UserCustomProperties class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserAbout
//

@implementation GTLRDirectory_UserAbout
@dynamic contentType, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserAddress
//

@implementation GTLRDirectory_UserAddress
@dynamic country, countryCode, customType, extendedAddress, formatted, locality,
         poBox, postalCode, primary, region, sourceIsStructured, streetAddress,
         type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserAlias
//

@implementation GTLRDirectory_UserAlias
@dynamic alias, ETag, identifier, kind, primaryEmail;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"ETag" : @"etag",
    @"identifier" : @"id"
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserCustomProperties
//

@implementation GTLRDirectory_UserCustomProperties

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserEmail
//

@implementation GTLRDirectory_UserEmail
@dynamic address, customType, primary, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserExternalId
//

@implementation GTLRDirectory_UserExternalId
@dynamic customType, type, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserGender
//

@implementation GTLRDirectory_UserGender
@dynamic addressMeAs, customGender, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserIm
//

@implementation GTLRDirectory_UserIm
@dynamic customProtocol, customType, im, primary, protocol, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserKeyword
//

@implementation GTLRDirectory_UserKeyword
@dynamic customType, type, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserLanguage
//

@implementation GTLRDirectory_UserLanguage
@dynamic customLanguage, languageCode, preference;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserLocation
//

@implementation GTLRDirectory_UserLocation
@dynamic area, buildingId, customType, deskCode, floorName, floorSection, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserMakeAdmin
//

@implementation GTLRDirectory_UserMakeAdmin
@dynamic status;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserName
//

@implementation GTLRDirectory_UserName
@dynamic familyName, fullName, givenName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserOrganization
//

@implementation GTLRDirectory_UserOrganization
@dynamic costCenter, customType, department, descriptionProperty, domain,
         fullTimeEquivalent, location, name, primary, symbol, title, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserPhone
//

@implementation GTLRDirectory_UserPhone
@dynamic customType, primary, type, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserPhoto
//

@implementation GTLRDirectory_UserPhoto
@dynamic ETag, height, identifier, kind, mimeType, photoData, primaryEmail,
         width;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"ETag" : @"etag",
    @"identifier" : @"id"
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserPosixAccount
//

@implementation GTLRDirectory_UserPosixAccount
@dynamic accountId, gecos, gid, homeDirectory, operatingSystemType, primary,
         shell, systemId, uid, username;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserRelation
//

@implementation GTLRDirectory_UserRelation
@dynamic customType, type, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_Users
//

@implementation GTLRDirectory_Users
@dynamic ETag, kind, nextPageToken, triggerEvent, users;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"ETag" : @"etag",
    @"triggerEvent" : @"trigger_event"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"users" : [GTLRDirectory_User class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"users";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserSshPublicKey
//

@implementation GTLRDirectory_UserSshPublicKey
@dynamic expirationTimeUsec, fingerprint, key;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserUndelete
//

@implementation GTLRDirectory_UserUndelete
@dynamic orgUnitPath;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_UserWebsite
//

@implementation GTLRDirectory_UserWebsite
@dynamic customType, primary, type, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_VerificationCode
//

@implementation GTLRDirectory_VerificationCode
@dynamic ETag, kind, userId, verificationCode;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDirectory_VerificationCodes
//

@implementation GTLRDirectory_VerificationCodes
@dynamic ETag, items, kind;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRDirectory_VerificationCode class]
  };
  return map;
}

@end
