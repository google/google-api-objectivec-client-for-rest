// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Admin SDK API (admin/directory_v1)
// Description:
//   Admin SDK lets administrators of enterprise domains to view and manage
//   resources like user, groups etc. It also provides audit and usage reports
//   of domain.
// Documentation:
//   https://developers.google.com/admin-sdk/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDirectory_Asp;
@class GTLRDirectory_AuxiliaryMessage;
@class GTLRDirectory_Building;
@class GTLRDirectory_BuildingAddress;
@class GTLRDirectory_BuildingCoordinates;
@class GTLRDirectory_CalendarResource;
@class GTLRDirectory_Channel_Params;
@class GTLRDirectory_ChromeOsDevice;
@class GTLRDirectory_ChromeOsDevice_ActiveTimeRanges_Item;
@class GTLRDirectory_ChromeOsDevice_CpuInfo_Item;
@class GTLRDirectory_ChromeOsDevice_CpuInfo_Item_LogicalCpus_Item;
@class GTLRDirectory_ChromeOsDevice_CpuInfo_Item_LogicalCpus_Item_CStates_Item;
@class GTLRDirectory_ChromeOsDevice_CpuStatusReports_Item;
@class GTLRDirectory_ChromeOsDevice_CpuStatusReports_Item_CpuTemperatureInfo_Item;
@class GTLRDirectory_ChromeOsDevice_DeviceFiles_Item;
@class GTLRDirectory_ChromeOsDevice_DiskVolumeReports_Item;
@class GTLRDirectory_ChromeOsDevice_DiskVolumeReports_Item_VolumeInfo_Item;
@class GTLRDirectory_ChromeOsDevice_LastKnownNetwork_Item;
@class GTLRDirectory_ChromeOsDevice_RecentUsers_Item;
@class GTLRDirectory_ChromeOsDevice_ScreenshotFiles_Item;
@class GTLRDirectory_ChromeOsDevice_SystemRamFreeReports_Item;
@class GTLRDirectory_ChromeOsDevice_TpmVersionInfo;
@class GTLRDirectory_ChromeosdevicesCommandResult;
@class GTLRDirectory_CreatePrinterRequest;
@class GTLRDirectory_CreatePrintServerRequest;
@class GTLRDirectory_CustomerPostalAddress;
@class GTLRDirectory_DomainAlias;
@class GTLRDirectory_Domains;
@class GTLRDirectory_FailureInfo;
@class GTLRDirectory_Feature;
@class GTLRDirectory_Group;
@class GTLRDirectory_Member;
@class GTLRDirectory_MobileDevice;
@class GTLRDirectory_MobileDevice_Applications_Item;
@class GTLRDirectory_OrgUnit;
@class GTLRDirectory_OsUpdateStatus;
@class GTLRDirectory_Printer;
@class GTLRDirectory_PrinterModel;
@class GTLRDirectory_PrintServer;
@class GTLRDirectory_PrintServerFailureInfo;
@class GTLRDirectory_Privilege;
@class GTLRDirectory_Role;
@class GTLRDirectory_Role_RolePrivileges_Item;
@class GTLRDirectory_RoleAssignment;
@class GTLRDirectory_Schema;
@class GTLRDirectory_SchemaFieldSpec;
@class GTLRDirectory_SchemaFieldSpec_NumericIndexingSpec;
@class GTLRDirectory_Token;
@class GTLRDirectory_User;
@class GTLRDirectory_User_CustomSchemas;
@class GTLRDirectory_UserCustomProperties;
@class GTLRDirectory_UserName;
@class GTLRDirectory_VerificationCode;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRDirectory_AuxiliaryMessage.severity

/**
 *  Message of severity: error.
 *
 *  Value: "SEVERITY_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_AuxiliaryMessage_Severity_SeverityError;
/**
 *  Message of severity: info.
 *
 *  Value: "SEVERITY_INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_AuxiliaryMessage_Severity_SeverityInfo;
/**
 *  Message type unspecified.
 *
 *  Value: "SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_AuxiliaryMessage_Severity_SeverityUnspecified;
/**
 *  Message of severity: warning.
 *
 *  Value: "SEVERITY_WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_AuxiliaryMessage_Severity_SeverityWarning;

// ----------------------------------------------------------------------------
// GTLRDirectory_ChromeosdevicesCommand.state

/**
 *  The client has responded that it received the command.
 *
 *  Value: "ACKED_BY_CLIENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommand_State_AckedByClient;
/**
 *  The command is cancelled by admin while in PENDING.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommand_State_Cancelled;
/**
 *  The client has (un)successfully executed the command.
 *
 *  Value: "EXECUTED_BY_CLIENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommand_State_ExecutedByClient;
/**
 *  The command didn't get executed by the client within the expected time.
 *
 *  Value: "EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommand_State_Expired;
/**
 *  An unexpired command not yet sent to the client.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommand_State_Pending;
/**
 *  The command has been sent to the client.
 *
 *  Value: "SENT_TO_CLIENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommand_State_SentToClient;
/**
 *  The command status was unspecified.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommand_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRDirectory_ChromeosdevicesCommand.type

/**
 *  The command type was unspecified.
 *
 *  Value: "COMMAND_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommand_Type_CommandTypeUnspecified;
/**
 *  Reboot the device. Can only be issued to Kiosk and managed guest session
 *  devices.
 *
 *  Value: "REBOOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommand_Type_Reboot;
/**
 *  Wipes the device by performing a power wash. Executing this command in the
 *  device will remove all data including user policies, device policies and
 *  enrollment policies. Warning: This will revert the device back to a factory
 *  state with no enrollment unless the device is subject to forced or auto
 *  enrollment. Use with caution, as this is an irreversible action!
 *
 *  Value: "REMOTE_POWERWASH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommand_Type_RemotePowerwash;
/**
 *  Set the volume of the device. Can only be issued to Kiosk and managed guest
 *  session devices.
 *
 *  Value: "SET_VOLUME"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommand_Type_SetVolume;
/**
 *  Take a screenshot of the device. Only available if the device is in Kiosk
 *  Mode.
 *
 *  Value: "TAKE_A_SCREENSHOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommand_Type_TakeAScreenshot;
/**
 *  Wipe all the users off of the device. Executing this command in the device
 *  will remove all user profile data, but it will keep device policy and
 *  enrollment.
 *
 *  Value: "WIPE_USERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommand_Type_WipeUsers;

// ----------------------------------------------------------------------------
// GTLRDirectory_ChromeosdevicesCommandResult.result

/**
 *  The command result was unspecified.
 *
 *  Value: "COMMAND_RESULT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommandResult_Result_CommandResultTypeUnspecified;
/**
 *  The command could not be executed successfully.
 *
 *  Value: "FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommandResult_Result_Failure;
/**
 *  The command was ignored as obsolete.
 *
 *  Value: "IGNORED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommandResult_Result_Ignored;
/**
 *  The command was successfully executed.
 *
 *  Value: "SUCCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesCommandResult_Result_Success;

// ----------------------------------------------------------------------------
// GTLRDirectory_ChromeosdevicesIssueCommandRequest.commandType

/**
 *  The command type was unspecified.
 *
 *  Value: "COMMAND_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_CommandTypeUnspecified;
/**
 *  Reboot the device. Can only be issued to Kiosk and managed guest session
 *  devices.
 *
 *  Value: "REBOOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_Reboot;
/**
 *  Wipes the device by performing a power wash. Executing this command in the
 *  device will remove all data including user policies, device policies and
 *  enrollment policies. Warning: This will revert the device back to a factory
 *  state with no enrollment unless the device is subject to forced or auto
 *  enrollment. Use with caution, as this is an irreversible action!
 *
 *  Value: "REMOTE_POWERWASH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_RemotePowerwash;
/**
 *  Set the volume of the device. Can only be issued to Kiosk and managed guest
 *  session devices.
 *
 *  Value: "SET_VOLUME"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_SetVolume;
/**
 *  Take a screenshot of the device. Only available if the device is in Kiosk
 *  Mode.
 *
 *  Value: "TAKE_A_SCREENSHOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_TakeAScreenshot;
/**
 *  Wipe all the users off of the device. Executing this command in the device
 *  will remove all user profile data, but it will keep device policy and
 *  enrollment.
 *
 *  Value: "WIPE_USERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_WipeUsers;

// ----------------------------------------------------------------------------
// GTLRDirectory_FailureInfo.errorCode

/**
 *  The operation was aborted, typically due to a concurrency issue such as a
 *  sequencer check failure or transaction abort. See the guidelines above for
 *  deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP
 *  Mapping: 409 Conflict
 *
 *  Value: "ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_Aborted;
/**
 *  The entity that a client attempted to create (e.g., file or directory)
 *  already exists. HTTP Mapping: 409 Conflict
 *
 *  Value: "ALREADY_EXISTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_AlreadyExists;
/**
 *  The operation was cancelled, typically by the caller. HTTP Mapping: 499
 *  Client Closed Request
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_Cancelled;
/**
 *  Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server
 *  Error
 *
 *  Value: "DATA_LOSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_DataLoss;
/**
 *  The deadline expired before the operation could complete. For operations
 *  that change the state of the system, this error may be returned even if the
 *  operation has completed successfully. For example, a successful response
 *  from a server could have been delayed long enough for the deadline to
 *  expire. HTTP Mapping: 504 Gateway Timeout
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_DeadlineExceeded;
/**
 *  The operation was rejected because the system is not in a state required for
 *  the operation's execution. For example, the directory to be deleted is
 *  non-empty, an rmdir operation is applied to a non-directory, etc. Service
 *  implementors can use the following guidelines to decide between
 *  `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE`
 *  if the client can retry just the failing call. (b) Use `ABORTED` if the
 *  client should retry at a higher level. For example, when a client-specified
 *  test-and-set fails, indicating the client should restart a read-modify-write
 *  sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until
 *  the system state has been explicitly fixed. For example, if an "rmdir" fails
 *  because the directory is non-empty, `FAILED_PRECONDITION` should be returned
 *  since the client should not retry unless the files are deleted from the
 *  directory. HTTP Mapping: 400 Bad Request
 *
 *  Value: "FAILED_PRECONDITION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_FailedPrecondition;
/**
 *  Internal errors. This means that some invariants expected by the underlying
 *  system have been broken. This error code is reserved for serious errors.
 *  HTTP Mapping: 500 Internal Server Error
 *
 *  Value: "INTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_Internal;
/**
 *  The client specified an invalid argument. Note that this differs from
 *  `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are
 *  problematic regardless of the state of the system (e.g., a malformed file
 *  name). HTTP Mapping: 400 Bad Request
 *
 *  Value: "INVALID_ARGUMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_InvalidArgument;
/**
 *  Some requested entity (e.g., file or directory) was not found. Note to
 *  server developers: if a request is denied for an entire class of users, such
 *  as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be
 *  used. If a request is denied for some users within a class of users, such as
 *  user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping:
 *  404 Not Found
 *
 *  Value: "NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_NotFound;
/**
 *  Not an error; returned on success. HTTP Mapping: 200 OK
 *
 *  Value: "OK"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_Ok;
/**
 *  The operation was attempted past the valid range. E.g., seeking or reading
 *  past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem
 *  that may be fixed if the system state changes. For example, a 32-bit file
 *  system will generate `INVALID_ARGUMENT` if asked to read at an offset that
 *  is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked
 *  to read from an offset past the current file size. There is a fair bit of
 *  overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using
 *  `OUT_OF_RANGE` (the more specific error) when it applies so that callers who
 *  are iterating through a space can easily look for an `OUT_OF_RANGE` error to
 *  detect when they are done. HTTP Mapping: 400 Bad Request
 *
 *  Value: "OUT_OF_RANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_OutOfRange;
/**
 *  The caller does not have permission to execute the specified operation.
 *  `PERMISSION_DENIED` must not be used for rejections caused by exhausting
 *  some resource (use `RESOURCE_EXHAUSTED` instead for those errors).
 *  `PERMISSION_DENIED` must not be used if the caller can not be identified
 *  (use `UNAUTHENTICATED` instead for those errors). This error code does not
 *  imply the request is valid or the requested entity exists or satisfies other
 *  pre-conditions. HTTP Mapping: 403 Forbidden
 *
 *  Value: "PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_PermissionDenied;
/**
 *  Some resource has been exhausted, perhaps a per-user quota, or perhaps the
 *  entire file system is out of space. HTTP Mapping: 429 Too Many Requests
 *
 *  Value: "RESOURCE_EXHAUSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_ResourceExhausted;
/**
 *  The request does not have valid authentication credentials for the
 *  operation. HTTP Mapping: 401 Unauthorized
 *
 *  Value: "UNAUTHENTICATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_Unauthenticated;
/**
 *  The service is currently unavailable. This is most likely a transient
 *  condition, which can be corrected by retrying with a backoff. Note that it
 *  is not always safe to retry non-idempotent operations. See the guidelines
 *  above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and
 *  `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable
 *
 *  Value: "UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_Unavailable;
/**
 *  The operation is not implemented or is not supported/enabled in this
 *  service. HTTP Mapping: 501 Not Implemented
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_Unimplemented;
/**
 *  Unknown error. For example, this error may be returned when a `Status` value
 *  received from another address space belongs to an error space that is not
 *  known in this address space. Also errors raised by APIs that do not return
 *  enough error information may be converted to this error. HTTP Mapping: 500
 *  Internal Server Error
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_FailureInfo_ErrorCode_Unknown;

// ----------------------------------------------------------------------------
// GTLRDirectory_OsUpdateStatus.state

/**
 *  The pending update is being downloaded.
 *
 *  Value: "updateStateDownloadInProgress"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_OsUpdateStatus_State_UpdateStateDownloadInProgress;
/**
 *  The device is ready to install the update, but must reboot.
 *
 *  Value: "updateStateNeedReboot"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_OsUpdateStatus_State_UpdateStateNeedReboot;
/**
 *  There is an update pending but it hasn't started.
 *
 *  Value: "updateStateNotStarted"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_OsUpdateStatus_State_UpdateStateNotStarted;
/**
 *  The update state is unspecified.
 *
 *  Value: "updateStateUnspecified"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_OsUpdateStatus_State_UpdateStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRDirectory_PrintServerFailureInfo.errorCode

/**
 *  The operation was aborted, typically due to a concurrency issue such as a
 *  sequencer check failure or transaction abort. See the guidelines above for
 *  deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP
 *  Mapping: 409 Conflict
 *
 *  Value: "ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Aborted;
/**
 *  The entity that a client attempted to create (e.g., file or directory)
 *  already exists. HTTP Mapping: 409 Conflict
 *
 *  Value: "ALREADY_EXISTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_AlreadyExists;
/**
 *  The operation was cancelled, typically by the caller. HTTP Mapping: 499
 *  Client Closed Request
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Cancelled;
/**
 *  Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server
 *  Error
 *
 *  Value: "DATA_LOSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_DataLoss;
/**
 *  The deadline expired before the operation could complete. For operations
 *  that change the state of the system, this error may be returned even if the
 *  operation has completed successfully. For example, a successful response
 *  from a server could have been delayed long enough for the deadline to
 *  expire. HTTP Mapping: 504 Gateway Timeout
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_DeadlineExceeded;
/**
 *  The operation was rejected because the system is not in a state required for
 *  the operation's execution. For example, the directory to be deleted is
 *  non-empty, an rmdir operation is applied to a non-directory, etc. Service
 *  implementors can use the following guidelines to decide between
 *  `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE`
 *  if the client can retry just the failing call. (b) Use `ABORTED` if the
 *  client should retry at a higher level. For example, when a client-specified
 *  test-and-set fails, indicating the client should restart a read-modify-write
 *  sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until
 *  the system state has been explicitly fixed. For example, if an "rmdir" fails
 *  because the directory is non-empty, `FAILED_PRECONDITION` should be returned
 *  since the client should not retry unless the files are deleted from the
 *  directory. HTTP Mapping: 400 Bad Request
 *
 *  Value: "FAILED_PRECONDITION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_FailedPrecondition;
/**
 *  Internal errors. This means that some invariants expected by the underlying
 *  system have been broken. This error code is reserved for serious errors.
 *  HTTP Mapping: 500 Internal Server Error
 *
 *  Value: "INTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Internal;
/**
 *  The client specified an invalid argument. Note that this differs from
 *  `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are
 *  problematic regardless of the state of the system (e.g., a malformed file
 *  name). HTTP Mapping: 400 Bad Request
 *
 *  Value: "INVALID_ARGUMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_InvalidArgument;
/**
 *  Some requested entity (e.g., file or directory) was not found. Note to
 *  server developers: if a request is denied for an entire class of users, such
 *  as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be
 *  used. If a request is denied for some users within a class of users, such as
 *  user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping:
 *  404 Not Found
 *
 *  Value: "NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_NotFound;
/**
 *  Not an error; returned on success. HTTP Mapping: 200 OK
 *
 *  Value: "OK"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Ok;
/**
 *  The operation was attempted past the valid range. E.g., seeking or reading
 *  past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem
 *  that may be fixed if the system state changes. For example, a 32-bit file
 *  system will generate `INVALID_ARGUMENT` if asked to read at an offset that
 *  is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked
 *  to read from an offset past the current file size. There is a fair bit of
 *  overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using
 *  `OUT_OF_RANGE` (the more specific error) when it applies so that callers who
 *  are iterating through a space can easily look for an `OUT_OF_RANGE` error to
 *  detect when they are done. HTTP Mapping: 400 Bad Request
 *
 *  Value: "OUT_OF_RANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_OutOfRange;
/**
 *  The caller does not have permission to execute the specified operation.
 *  `PERMISSION_DENIED` must not be used for rejections caused by exhausting
 *  some resource (use `RESOURCE_EXHAUSTED` instead for those errors).
 *  `PERMISSION_DENIED` must not be used if the caller can not be identified
 *  (use `UNAUTHENTICATED` instead for those errors). This error code does not
 *  imply the request is valid or the requested entity exists or satisfies other
 *  pre-conditions. HTTP Mapping: 403 Forbidden
 *
 *  Value: "PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_PermissionDenied;
/**
 *  Some resource has been exhausted, perhaps a per-user quota, or perhaps the
 *  entire file system is out of space. HTTP Mapping: 429 Too Many Requests
 *
 *  Value: "RESOURCE_EXHAUSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_ResourceExhausted;
/**
 *  The request does not have valid authentication credentials for the
 *  operation. HTTP Mapping: 401 Unauthorized
 *
 *  Value: "UNAUTHENTICATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Unauthenticated;
/**
 *  The service is currently unavailable. This is most likely a transient
 *  condition, which can be corrected by retrying with a backoff. Note that it
 *  is not always safe to retry non-idempotent operations. See the guidelines
 *  above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and
 *  `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable
 *
 *  Value: "UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Unavailable;
/**
 *  The operation is not implemented or is not supported/enabled in this
 *  service. HTTP Mapping: 501 Not Implemented
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Unimplemented;
/**
 *  Unknown error. For example, this error may be returned when a `Status` value
 *  received from another address space belongs to an error space that is not
 *  known in this address space. Also errors raised by APIs that do not return
 *  enough error information may be converted to this error. HTTP Mapping: 500
 *  Internal Server Error
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Unknown;

/**
 *  JSON template for Alias object in Directory API.
 */
@interface GTLRDirectory_Alias : GTLRObject

@property(nonatomic, copy, nullable) NSString *alias;
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@property(nonatomic, copy, nullable) NSString *kind;
@property(nonatomic, copy, nullable) NSString *primaryEmail;

@end


/**
 *  JSON response template to list aliases in Directory API.
 */
@interface GTLRDirectory_Aliases : GTLRObject

/**
 *  aliases
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) NSArray *aliases;

@property(nonatomic, copy, nullable) NSString *ETag;
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  An application-specific password (ASP) is used with applications that do not
 *  accept a verification code when logging into the application on certain
 *  devices. The ASP access code is used instead of the login and password you
 *  commonly use when accessing an application through a browser. For more
 *  information about ASPs and how to create one, see the [help
 *  center](https://support.google.com/a/answer/2537800#asp).
 */
@interface GTLRDirectory_Asp : GTLRObject

/**
 *  The unique ID of the ASP.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *codeId;

/**
 *  The time when the ASP was created. Expressed in [Unix
 *  time](https://en.wikipedia.org/wiki/Epoch_time) format.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/** ETag of the ASP. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The type of the API resource. This is always `admin#directory#asp`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The time when the ASP was last used. Expressed in [Unix
 *  time](https://en.wikipedia.org/wiki/Epoch_time) format.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastTimeUsed;

/**
 *  The name of the application that the user, represented by their `userId`,
 *  entered when the ASP was created.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The unique ID of the user who issued the ASP. */
@property(nonatomic, copy, nullable) NSString *userKey;

@end


/**
 *  GTLRDirectory_Asps
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRDirectory_Asps : GTLRCollectionObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  A list of ASP resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_Asp *> *items;

/** The type of the API resource. This is always `admin#directory#aspList`. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Auxiliary message about issues with printers or settings. Example:
 *  {message_type:AUXILIARY_MESSAGE_WARNING, field_mask:make_and_model,
 *  message:"Given printer is invalid or no longer supported."}
 */
@interface GTLRDirectory_AuxiliaryMessage : GTLRObject

/**
 *  Human readable message in English. Example: "Given printer is invalid or no
 *  longer supported."
 */
@property(nonatomic, copy, nullable) NSString *auxiliaryMessage;

/**
 *  Field that this message concerns.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fieldMask;

/**
 *  Message severity
 *
 *  Likely values:
 *    @arg @c kGTLRDirectory_AuxiliaryMessage_Severity_SeverityError Message of
 *        severity: error. (Value: "SEVERITY_ERROR")
 *    @arg @c kGTLRDirectory_AuxiliaryMessage_Severity_SeverityInfo Message of
 *        severity: info. (Value: "SEVERITY_INFO")
 *    @arg @c kGTLRDirectory_AuxiliaryMessage_Severity_SeverityUnspecified
 *        Message type unspecified. (Value: "SEVERITY_UNSPECIFIED")
 *    @arg @c kGTLRDirectory_AuxiliaryMessage_Severity_SeverityWarning Message
 *        of severity: warning. (Value: "SEVERITY_WARNING")
 */
@property(nonatomic, copy, nullable) NSString *severity;

@end


/**
 *  Request for adding new printers in batch.
 */
@interface GTLRDirectory_BatchCreatePrintersRequest : GTLRObject

/** A list of Printers to be created. Max 50 at a time. */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_CreatePrinterRequest *> *requests;

@end


/**
 *  Response for adding new printers in batch.
 */
@interface GTLRDirectory_BatchCreatePrintersResponse : GTLRObject

/**
 *  A list of create failures. Printer IDs are not populated, as printer were
 *  not created.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_FailureInfo *> *failures;

/** A list of successfully created printers with their IDs populated. */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_Printer *> *printers;

@end


/**
 *  Request to add multiple new print servers in a batch.
 */
@interface GTLRDirectory_BatchCreatePrintServersRequest : GTLRObject

/**
 *  Required. A list of `PrintServer` resources to be created (max `50` per
 *  batch).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_CreatePrintServerRequest *> *requests;

@end


/**
 *  GTLRDirectory_BatchCreatePrintServersResponse
 */
@interface GTLRDirectory_BatchCreatePrintServersResponse : GTLRObject

/**
 *  A list of create failures. `PrintServer` IDs are not populated, as print
 *  servers were not created.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_PrintServerFailureInfo *> *failures;

/** A list of successfully created print servers with their IDs populated. */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_PrintServer *> *printServers;

@end


/**
 *  Request for deleting existing printers in batch.
 */
@interface GTLRDirectory_BatchDeletePrintersRequest : GTLRObject

/** A list of Printer.id that should be deleted. Max 100 at a time. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *printerIds;

@end


/**
 *  Response for deleting existing printers in batch.
 */
@interface GTLRDirectory_BatchDeletePrintersResponse : GTLRObject

/** A list of update failures. */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_FailureInfo *> *failedPrinters;

/** A list of Printer.id that were successfully deleted. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *printerIds;

@end


/**
 *  Request to delete multiple existing print servers in a batch.
 */
@interface GTLRDirectory_BatchDeletePrintServersRequest : GTLRObject

/**
 *  A list of print server IDs that should be deleted (max `100` per batch).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *printServerIds;

@end


/**
 *  GTLRDirectory_BatchDeletePrintServersResponse
 */
@interface GTLRDirectory_BatchDeletePrintServersResponse : GTLRObject

/** A list of update failures. */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_PrintServerFailureInfo *> *failedPrintServers;

/** A list of print server IDs that were successfully deleted. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *printServerIds;

@end


/**
 *  Public API: Resources.buildings
 */
@interface GTLRDirectory_Building : GTLRObject

/**
 *  The postal address of the building. See
 *  [`PostalAddress`](/my-business/reference/rest/v4/PostalAddress) for details.
 *  Note that only a single address line and region code are required.
 */
@property(nonatomic, strong, nullable) GTLRDirectory_BuildingAddress *address;

/**
 *  Unique identifier for the building. The maximum length is 100 characters.
 */
@property(nonatomic, copy, nullable) NSString *buildingId;

/**
 *  The building name as seen by users in Calendar. Must be unique for the
 *  customer. For example, "NYC-CHEL". The maximum length is 100 characters.
 */
@property(nonatomic, copy, nullable) NSString *buildingName;

/**
 *  The geographic coordinates of the center of the building, expressed as
 *  latitude and longitude in decimal degrees.
 */
@property(nonatomic, strong, nullable) GTLRDirectory_BuildingCoordinates *coordinates;

/**
 *  A brief description of the building. For example, "Chelsea Market".
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *etags;

/**
 *  The display names for all floors in this building. The floors are expected
 *  to be sorted in ascending order, from lowest floor to highest floor. For
 *  example, ["B2", "B1", "L", "1", "2", "2M", "3", "PH"] Must contain at least
 *  one entry.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *floorNames;

/** Kind of resource this is. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Public API: Resources.buildings
 */
@interface GTLRDirectory_BuildingAddress : GTLRObject

/** Unstructured address lines describing the lower levels of an address. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *addressLines;

/**
 *  Optional. Highest administrative subdivision which is used for postal
 *  addresses of a country or region.
 */
@property(nonatomic, copy, nullable) NSString *administrativeArea;

/**
 *  Optional. BCP-47 language code of the contents of this address (if known).
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Optional. Generally refers to the city/town portion of the address.
 *  Examples: US city, IT comune, UK post town. In regions of the world where
 *  localities are not well defined or do not fit into this structure well,
 *  leave locality empty and use addressLines.
 */
@property(nonatomic, copy, nullable) NSString *locality;

/** Optional. Postal code of the address. */
@property(nonatomic, copy, nullable) NSString *postalCode;

/** Required. CLDR region code of the country/region of the address. */
@property(nonatomic, copy, nullable) NSString *regionCode;

/** Optional. Sublocality of the address. */
@property(nonatomic, copy, nullable) NSString *sublocality;

@end


/**
 *  Public API: Resources.buildings
 */
@interface GTLRDirectory_BuildingCoordinates : GTLRObject

/**
 *  Latitude in decimal degrees.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latitude;

/**
 *  Longitude in decimal degrees.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *longitude;

@end


/**
 *  Public API: Resources.buildings
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "buildings" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDirectory_Buildings : GTLRCollectionObject

/**
 *  The Buildings in this page of results.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_Building *> *buildings;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Kind of resource this is. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The continuation token, used to page through large result sets. Provide this
 *  value in a subsequent request to return the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Public API: Resources.calendars
 */
@interface GTLRDirectory_CalendarResource : GTLRObject

/** Unique ID for the building a resource is located in. */
@property(nonatomic, copy, nullable) NSString *buildingId;

/**
 *  Capacity of a resource, number of seats in a room.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *capacity;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *etags;

/**
 *  Instances of features for the calendar resource.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id featureInstances;

/** Name of the floor a resource is located on. */
@property(nonatomic, copy, nullable) NSString *floorName;

/** Name of the section within a floor a resource is located in. */
@property(nonatomic, copy, nullable) NSString *floorSection;

/**
 *  The read-only auto-generated name of the calendar resource which includes
 *  metadata about the resource such as building name, floor, capacity, etc. For
 *  example, "NYC-2-Training Room 1A (16)".
 */
@property(nonatomic, copy, nullable) NSString *generatedResourceName;

/**
 *  The type of the resource. For calendar resources, the value is
 *  `admin#directory#resources#calendars#CalendarResource`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The category of the calendar resource. Either CONFERENCE_ROOM or OTHER.
 *  Legacy data is set to CATEGORY_UNKNOWN.
 */
@property(nonatomic, copy, nullable) NSString *resourceCategory;

/** Description of the resource, visible only to admins. */
@property(nonatomic, copy, nullable) NSString *resourceDescription;

/**
 *  The read-only email for the calendar resource. Generated as part of creating
 *  a new calendar resource.
 */
@property(nonatomic, copy, nullable) NSString *resourceEmail;

/** The unique ID for the calendar resource. */
@property(nonatomic, copy, nullable) NSString *resourceId;

/** The name of the calendar resource. For example, "Training Room 1A". */
@property(nonatomic, copy, nullable) NSString *resourceName;

/** The type of the calendar resource, intended for non-room resources. */
@property(nonatomic, copy, nullable) NSString *resourceType;

/** Description of the resource, visible to users and admins. */
@property(nonatomic, copy, nullable) NSString *userVisibleDescription;

@end


/**
 *  Public API: Resources.calendars
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDirectory_CalendarResources : GTLRCollectionObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The CalendarResources in this page of results.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_CalendarResource *> *items;

/**
 *  Identifies this as a collection of CalendarResources. This is always
 *  `admin#directory#resources#calendars#calendarResourcesList`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The continuation token, used to page through large result sets. Provide this
 *  value in a subsequent request to return the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  An notification channel used to watch for resource changes.
 */
@interface GTLRDirectory_Channel : GTLRObject

/** The address where notifications are delivered for this channel. */
@property(nonatomic, copy, nullable) NSString *address;

/**
 *  Date and time of notification channel expiration, expressed as a Unix
 *  timestamp, in milliseconds. Optional.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expiration;

/**
 *  A UUID or similar unique string that identifies this channel.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies this as a notification channel used to watch for changes to a
 *  resource, which is `api#channel`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Additional parameters controlling delivery channel behavior. Optional. For
 *  example, `params.ttl` specifies the time-to-live in seconds for the
 *  notification channel, where the default is 2 hours and the maximum TTL is 2
 *  days.
 */
@property(nonatomic, strong, nullable) GTLRDirectory_Channel_Params *params;

/**
 *  A Boolean value to indicate whether payload is wanted. Optional.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *payload;

/**
 *  An opaque ID that identifies the resource being watched on this channel.
 *  Stable across different API versions.
 */
@property(nonatomic, copy, nullable) NSString *resourceId;

/** A version-specific identifier for the watched resource. */
@property(nonatomic, copy, nullable) NSString *resourceUri;

/**
 *  An arbitrary string delivered to the target address with each notification
 *  delivered over this channel. Optional.
 */
@property(nonatomic, copy, nullable) NSString *token;

/** The type of delivery mechanism used for this channel. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Additional parameters controlling delivery channel behavior. Optional. For
 *  example, `params.ttl` specifies the time-to-live in seconds for the
 *  notification channel, where the default is 2 hours and the maximum TTL is 2
 *  days.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDirectory_Channel_Params : GTLRObject
@end


/**
 *  Google Chrome devices run on the [Chrome
 *  OS](https://support.google.com/chromeos). For more information about common
 *  API tasks, see the [Developer's
 *  Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices).
 */
@interface GTLRDirectory_ChromeOsDevice : GTLRObject

/** A list of active time ranges (Read-only). */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_ChromeOsDevice_ActiveTimeRanges_Item *> *activeTimeRanges;

/**
 *  The asset identifier as noted by an administrator or specified during
 *  enrollment.
 */
@property(nonatomic, copy, nullable) NSString *annotatedAssetId;

/**
 *  The address or location of the device as noted by the administrator. Maximum
 *  length is `200` characters. Empty values are allowed.
 */
@property(nonatomic, copy, nullable) NSString *annotatedLocation;

/**
 *  The user of the device as noted by the administrator. Maximum length is 100
 *  characters. Empty values are allowed.
 */
@property(nonatomic, copy, nullable) NSString *annotatedUser;

/**
 *  (Read-only) The timestamp after which the device will stop receiving Chrome
 *  updates or support
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoUpdateExpiration;

/**
 *  The boot mode for the device. The possible values are: * `Verified`: The
 *  device is running a valid version of the Chrome OS. * `Dev`: The devices's
 *  developer hardware switch is enabled. When booted, the device has a command
 *  line shell. For an example of a developer switch, see the [Chromebook
 *  developer
 *  information](https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/samsung-series-5-chromebook#TOC-Developer-switch).
 */
@property(nonatomic, copy, nullable) NSString *bootMode;

/** Information regarding CPU specs in the device. */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_ChromeOsDevice_CpuInfo_Item *> *cpuInfo;

/** Reports of CPU utilization and temperature (Read-only) */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_ChromeOsDevice_CpuStatusReports_Item *> *cpuStatusReports;

/** A list of device files to download (Read-only) */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_ChromeOsDevice_DeviceFiles_Item *> *deviceFiles;

/** The unique ID of the Chrome device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** Reports of disk space and other info about mounted/connected volumes. */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_ChromeOsDevice_DiskVolumeReports_Item *> *diskVolumeReports;

/**
 *  (Read-only) Built-in MAC address for the docking station that the device
 *  connected to. Factory sets Media access control address (MAC address)
 *  assigned for use by a dock. It is reserved specifically for MAC pass through
 *  device policy. The format is twelve (12) hexadecimal digits without any
 *  delimiter (uppercase letters). This is only relevant for some devices.
 */
@property(nonatomic, copy, nullable) NSString *dockMacAddress;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The device's MAC address on the ethernet network interface. */
@property(nonatomic, copy, nullable) NSString *ethernetMacAddress;

/**
 *  (Read-only) MAC address used by the Chromebook’s internal ethernet port, and
 *  for onboard network (ethernet) interface. The format is twelve (12)
 *  hexadecimal digits without any delimiter (uppercase letters). This is only
 *  relevant for some devices.
 */
@property(nonatomic, copy, nullable) NSString *ethernetMacAddress0;

/** The Chrome device's firmware version. */
@property(nonatomic, copy, nullable) NSString *firmwareVersion;

/** Date and time for the first time the device was enrolled. */
@property(nonatomic, copy, nullable) NSString *firstEnrollmentTime;

/**
 *  The type of resource. For the Chromeosdevices resource, the value is
 *  `admin#directory#chromeosdevice`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** Date and time the device was last enrolled (Read-only) */
@property(nonatomic, strong, nullable) GTLRDateTime *lastEnrollmentTime;

/** Contains last known network (Read-only) */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_ChromeOsDevice_LastKnownNetwork_Item *> *lastKnownNetwork;

/**
 *  Date and time the device was last synchronized with the policy settings in
 *  the G Suite administrator control panel (Read-only)
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastSync;

/**
 *  The device's wireless MAC address. If the device does not have this
 *  information, it is not included in the response.
 */
@property(nonatomic, copy, nullable) NSString *macAddress;

/** (Read-only) The date the device was manufactured in yyyy-mm-dd format. */
@property(nonatomic, copy, nullable) NSString *manufactureDate;

/**
 *  The Mobile Equipment Identifier (MEID) or the International Mobile Equipment
 *  Identity (IMEI) for the 3G mobile card in a mobile device. A MEID/IMEI is
 *  typically used when adding a device to a wireless carrier's post-pay service
 *  plan. If the device does not have this information, this property is not
 *  included in the response. For more information on how to export a MEID/IMEI
 *  list, see the [Developer's
 *  Guide](/admin-sdk/directory/v1/guides/manage-chrome-devices.html#export_meid).
 */
@property(nonatomic, copy, nullable) NSString *meid;

/**
 *  The device's model information. If the device does not have this
 *  information, this property is not included in the response.
 */
@property(nonatomic, copy, nullable) NSString *model;

/**
 *  Notes about this device added by the administrator. This property can be
 *  [searched](https://support.google.com/chrome/a/answer/1698333) with the
 *  [list](/admin-sdk/directory/v1/reference/chromeosdevices/list) method's
 *  `query` parameter. Maximum length is 500 characters. Empty values are
 *  allowed.
 */
@property(nonatomic, copy, nullable) NSString *notes;

/**
 *  The device's order number. Only devices directly purchased from Google have
 *  an order number.
 */
@property(nonatomic, copy, nullable) NSString *orderNumber;

/**
 *  The unique ID of the organizational unit. orgUnitPath is the human readable
 *  version of orgUnitId. While orgUnitPath may change by renaming an
 *  organizational unit within the path, orgUnitId is unchangeable for one
 *  organizational unit. This property can be
 *  [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou)
 *  using the API. For more information about how to create an organizational
 *  structure for your device, see the [administration help
 *  center](https://support.google.com/a/answer/182433).
 */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/**
 *  The full parent path with the organizational unit's name associated with the
 *  device. Path names are case insensitive. If the parent organizational unit
 *  is the top-level organization, it is represented as a forward slash, `/`.
 *  This property can be
 *  [updated](/admin-sdk/directory/v1/guides/manage-chrome-devices#move_chrome_devices_to_ou)
 *  using the API. For more information about how to create an organizational
 *  structure for your device, see the [administration help
 *  center](https://support.google.com/a/answer/182433).
 */
@property(nonatomic, copy, nullable) NSString *orgUnitPath;

/** The status of the OS updates for the device. */
@property(nonatomic, strong, nullable) GTLRDirectory_OsUpdateStatus *osUpdateStatus;

/** The Chrome device's operating system version. */
@property(nonatomic, copy, nullable) NSString *osVersion;

/** The Chrome device's platform version. */
@property(nonatomic, copy, nullable) NSString *platformVersion;

/** A list of recent device users, in descending order, by last login time. */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_ChromeOsDevice_RecentUsers_Item *> *recentUsers;

/**
 *  A list of screenshot files to download. Type is always "SCREENSHOT_FILE".
 *  (Read-only)
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_ChromeOsDevice_ScreenshotFiles_Item *> *screenshotFiles;

/**
 *  The Chrome device serial number entered when the device was enabled. This
 *  value is the same as the Admin console's *Serial Number* in the *Chrome OS
 *  Devices* tab.
 */
@property(nonatomic, copy, nullable) NSString *serialNumber;

/** The status of the device. */
@property(nonatomic, copy, nullable) NSString *status;

/** Final date the device will be supported (Read-only) */
@property(nonatomic, strong, nullable) GTLRDateTime *supportEndDate;

/** Reports of amounts of available RAM memory (Read-only) */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_ChromeOsDevice_SystemRamFreeReports_Item *> *systemRamFreeReports;

/**
 *  Total RAM on the device [in bytes] (Read-only)
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *systemRamTotal;

/** Trusted Platform Module (TPM) (Read-only) */
@property(nonatomic, strong, nullable) GTLRDirectory_ChromeOsDevice_TpmVersionInfo *tpmVersionInfo;

/**
 *  Determines if the device will auto renew its support after the support end
 *  date. This is a read-only property.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *willAutoRenew;

@end


/**
 *  GTLRDirectory_ChromeOsDevice_ActiveTimeRanges_Item
 */
@interface GTLRDirectory_ChromeOsDevice_ActiveTimeRanges_Item : GTLRObject

/**
 *  Duration of usage in milliseconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *activeTime;

/**
 *  Date of usage
 *
 *  Date only (yyyy-mm-dd).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *date;

@end


/**
 *  CPU specs for a CPU.
 */
@interface GTLRDirectory_ChromeOsDevice_CpuInfo_Item : GTLRObject

/** The CPU architecture. */
@property(nonatomic, copy, nullable) NSString *architecture;

/** Information for the Logical CPUs */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_ChromeOsDevice_CpuInfo_Item_LogicalCpus_Item *> *logicalCpus;

/**
 *  The max CPU clock speed in kHz.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxClockSpeedKhz;

/** The CPU model name. */
@property(nonatomic, copy, nullable) NSString *model;

@end


/**
 *  GTLRDirectory_ChromeOsDevice_CpuStatusReports_Item
 */
@interface GTLRDirectory_ChromeOsDevice_CpuStatusReports_Item : GTLRObject

/** A list of CPU temperature samples. */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_ChromeOsDevice_CpuStatusReports_Item_CpuTemperatureInfo_Item *> *cpuTemperatureInfo;

/**
 *  cpuUtilizationPercentageInfo
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *cpuUtilizationPercentageInfo;

/** Date and time the report was received. */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

@end


/**
 *  GTLRDirectory_ChromeOsDevice_DeviceFiles_Item
 */
@interface GTLRDirectory_ChromeOsDevice_DeviceFiles_Item : GTLRObject

/** Date and time the file was created */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** File download URL */
@property(nonatomic, copy, nullable) NSString *downloadUrl;

/** File name */
@property(nonatomic, copy, nullable) NSString *name;

/** File type */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRDirectory_ChromeOsDevice_DiskVolumeReports_Item
 */
@interface GTLRDirectory_ChromeOsDevice_DiskVolumeReports_Item : GTLRObject

/** Disk volumes */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_ChromeOsDevice_DiskVolumeReports_Item_VolumeInfo_Item *> *volumeInfo;

@end


/**
 *  Information for an ip address.
 */
@interface GTLRDirectory_ChromeOsDevice_LastKnownNetwork_Item : GTLRObject

/** The IP address. */
@property(nonatomic, copy, nullable) NSString *ipAddress;

/** The WAN IP address. */
@property(nonatomic, copy, nullable) NSString *wanIpAddress;

@end


/**
 *  A list of recent device users, in descending order, by last login time.
 */
@interface GTLRDirectory_ChromeOsDevice_RecentUsers_Item : GTLRObject

/**
 *  The user's email address. This is only present if the user type is
 *  `USER_TYPE_MANAGED`.
 */
@property(nonatomic, copy, nullable) NSString *email;

/** The type of the user. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRDirectory_ChromeOsDevice_ScreenshotFiles_Item
 */
@interface GTLRDirectory_ChromeOsDevice_ScreenshotFiles_Item : GTLRObject

/** Date and time the file was created */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** File download URL */
@property(nonatomic, copy, nullable) NSString *downloadUrl;

/** File name */
@property(nonatomic, copy, nullable) NSString *name;

/** File type */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRDirectory_ChromeOsDevice_SystemRamFreeReports_Item
 */
@interface GTLRDirectory_ChromeOsDevice_SystemRamFreeReports_Item : GTLRObject

/** Date and time the report was received. */
@property(nonatomic, strong, nullable) GTLRDateTime *reportTime;

/**
 *  systemRamFreeInfo
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *systemRamFreeInfo;

@end


/**
 *  Trusted Platform Module (TPM) (Read-only)
 */
@interface GTLRDirectory_ChromeOsDevice_TpmVersionInfo : GTLRObject

/**
 *  TPM family. We use the TPM 2.0 style encoding, e.g.: TPM 1.2: "1.2" ->
 *  312e3200 TPM 2.0: "2.0" -> 322e3000
 */
@property(nonatomic, copy, nullable) NSString *family;

/** TPM firmware version. */
@property(nonatomic, copy, nullable) NSString *firmwareVersion;

/** TPM manufacturer code. */
@property(nonatomic, copy, nullable) NSString *manufacturer;

/**
 *  TPM specification level. See Library Specification for TPM 2.0 and Main
 *  Specification for TPM 1.2.
 */
@property(nonatomic, copy, nullable) NSString *specLevel;

/** TPM model number. */
@property(nonatomic, copy, nullable) NSString *tpmModel;

/** Vendor-specific information such as Vendor ID. */
@property(nonatomic, copy, nullable) NSString *vendorSpecific;

@end


/**
 *  Status of a single logical CPU.
 */
@interface GTLRDirectory_ChromeOsDevice_CpuInfo_Item_LogicalCpus_Item : GTLRObject

/**
 *  C-States indicate the power consumption state of the CPU. For more
 *  information look at documentation published by the CPU maker.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_ChromeOsDevice_CpuInfo_Item_LogicalCpus_Item_CStates_Item *> *cStates;

/**
 *  Current frequency the CPU is running at.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentScalingFrequencyKhz;

/** Idle time since last boot. */
@property(nonatomic, strong, nullable) GTLRDuration *idleDuration;

/**
 *  Maximum frequency the CPU is allowed to run at, by policy.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxScalingFrequencyKhz;

@end


/**
 *  GTLRDirectory_ChromeOsDevice_CpuStatusReports_Item_CpuTemperatureInfo_Item
 */
@interface GTLRDirectory_ChromeOsDevice_CpuStatusReports_Item_CpuTemperatureInfo_Item : GTLRObject

/** CPU label */
@property(nonatomic, copy, nullable) NSString *label;

/**
 *  Temperature in Celsius degrees.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *temperature;

@end


/**
 *  GTLRDirectory_ChromeOsDevice_DiskVolumeReports_Item_VolumeInfo_Item
 */
@interface GTLRDirectory_ChromeOsDevice_DiskVolumeReports_Item_VolumeInfo_Item : GTLRObject

/**
 *  Free disk space [in bytes]
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *storageFree;

/**
 *  Total disk space [in bytes]
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *storageTotal;

/** Volume id */
@property(nonatomic, copy, nullable) NSString *volumeId;

@end


/**
 *  Status of a single C-state. C-states are various modes the CPU can
 *  transition to in order to use more or less power.
 */
@interface GTLRDirectory_ChromeOsDevice_CpuInfo_Item_LogicalCpus_Item_CStates_Item : GTLRObject

/** Name of the state. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Time spent in the state since the last reboot. */
@property(nonatomic, strong, nullable) GTLRDuration *sessionDuration;

@end


/**
 *  Data about an update to the status of a Chrome OS device.
 */
@interface GTLRDirectory_ChromeOsDeviceAction : GTLRObject

/** Action to be taken on the Chrome OS device. */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  Only used when the action is `deprovision`. With the `deprovision` action,
 *  this field is required. *Note*: The deprovision reason is audited because it
 *  might have implications on licenses for perpetual subscription customers.
 */
@property(nonatomic, copy, nullable) NSString *deprovisionReason;

@end


/**
 *  GTLRDirectory_ChromeOsDevices
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "chromeosdevices" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRDirectory_ChromeOsDevices : GTLRCollectionObject

/**
 *  A list of Chrome OS Device objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_ChromeOsDevice *> *chromeosdevices;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Kind of resource this is. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Token used to access the next page of this result. To access the next page,
 *  use this token's value in the `pageToken` query string of this request.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Information regarding a command that was issued to a device.
 */
@interface GTLRDirectory_ChromeosdevicesCommand : GTLRObject

/**
 *  The time at which the command will expire. If the device doesn't execute the
 *  command within this time the command will become expired.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *commandExpireTime;

/**
 *  Unique ID of a device command.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *commandId;

/** The result of the command execution. */
@property(nonatomic, strong, nullable) GTLRDirectory_ChromeosdevicesCommandResult *commandResult;

/** The timestamp when the command was issued by the admin. */
@property(nonatomic, strong, nullable) GTLRDateTime *issueTime;

/** The payload that the command specified, if any. */
@property(nonatomic, copy, nullable) NSString *payload;

/**
 *  Indicates the command state.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommand_State_AckedByClient The
 *        client has responded that it received the command. (Value:
 *        "ACKED_BY_CLIENT")
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommand_State_Cancelled The command
 *        is cancelled by admin while in PENDING. (Value: "CANCELLED")
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommand_State_ExecutedByClient The
 *        client has (un)successfully executed the command. (Value:
 *        "EXECUTED_BY_CLIENT")
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommand_State_Expired The command
 *        didn't get executed by the client within the expected time. (Value:
 *        "EXPIRED")
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommand_State_Pending An unexpired
 *        command not yet sent to the client. (Value: "PENDING")
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommand_State_SentToClient The
 *        command has been sent to the client. (Value: "SENT_TO_CLIENT")
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommand_State_StateUnspecified The
 *        command status was unspecified. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  The type of the command.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommand_Type_CommandTypeUnspecified
 *        The command type was unspecified. (Value: "COMMAND_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommand_Type_Reboot Reboot the
 *        device. Can only be issued to Kiosk and managed guest session devices.
 *        (Value: "REBOOT")
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommand_Type_RemotePowerwash Wipes
 *        the device by performing a power wash. Executing this command in the
 *        device will remove all data including user policies, device policies
 *        and enrollment policies. Warning: This will revert the device back to
 *        a factory state with no enrollment unless the device is subject to
 *        forced or auto enrollment. Use with caution, as this is an
 *        irreversible action! (Value: "REMOTE_POWERWASH")
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommand_Type_SetVolume Set the
 *        volume of the device. Can only be issued to Kiosk and managed guest
 *        session devices. (Value: "SET_VOLUME")
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommand_Type_TakeAScreenshot Take a
 *        screenshot of the device. Only available if the device is in Kiosk
 *        Mode. (Value: "TAKE_A_SCREENSHOT")
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommand_Type_WipeUsers Wipe all the
 *        users off of the device. Executing this command in the device will
 *        remove all user profile data, but it will keep device policy and
 *        enrollment. (Value: "WIPE_USERS")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The result of executing a command.
 */
@interface GTLRDirectory_ChromeosdevicesCommandResult : GTLRObject

/**
 *  The error message with a short explanation as to why the command failed.
 *  Only present if the command failed.
 */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/** The time at which the command was executed or failed to execute. */
@property(nonatomic, strong, nullable) GTLRDateTime *executeTime;

/**
 *  The result of the command.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommandResult_Result_CommandResultTypeUnspecified
 *        The command result was unspecified. (Value:
 *        "COMMAND_RESULT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommandResult_Result_Failure The
 *        command could not be executed successfully. (Value: "FAILURE")
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommandResult_Result_Ignored The
 *        command was ignored as obsolete. (Value: "IGNORED")
 *    @arg @c kGTLRDirectory_ChromeosdevicesCommandResult_Result_Success The
 *        command was successfully executed. (Value: "SUCCESS")
 */
@property(nonatomic, copy, nullable) NSString *result;

@end


/**
 *  A request for issuing a command.
 */
@interface GTLRDirectory_ChromeosdevicesIssueCommandRequest : GTLRObject

/**
 *  The type of command.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_CommandTypeUnspecified
 *        The command type was unspecified. (Value: "COMMAND_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_Reboot
 *        Reboot the device. Can only be issued to Kiosk and managed guest
 *        session devices. (Value: "REBOOT")
 *    @arg @c kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_RemotePowerwash
 *        Wipes the device by performing a power wash. Executing this command in
 *        the device will remove all data including user policies, device
 *        policies and enrollment policies. Warning: This will revert the device
 *        back to a factory state with no enrollment unless the device is
 *        subject to forced or auto enrollment. Use with caution, as this is an
 *        irreversible action! (Value: "REMOTE_POWERWASH")
 *    @arg @c kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_SetVolume
 *        Set the volume of the device. Can only be issued to Kiosk and managed
 *        guest session devices. (Value: "SET_VOLUME")
 *    @arg @c kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_TakeAScreenshot
 *        Take a screenshot of the device. Only available if the device is in
 *        Kiosk Mode. (Value: "TAKE_A_SCREENSHOT")
 *    @arg @c kGTLRDirectory_ChromeosdevicesIssueCommandRequest_CommandType_WipeUsers
 *        Wipe all the users off of the device. Executing this command in the
 *        device will remove all user profile data, but it will keep device
 *        policy and enrollment. (Value: "WIPE_USERS")
 */
@property(nonatomic, copy, nullable) NSString *commandType;

/**
 *  The payload for the command, provide it only if command supports it. The
 *  following commands support adding payload: - SET_VOLUME: Payload is a
 *  stringified JSON object in the form: { "volume": 50 }. The volume has to be
 *  an integer in the range [0,100].
 */
@property(nonatomic, copy, nullable) NSString *payload;

@end


/**
 *  A response for issuing a command.
 */
@interface GTLRDirectory_ChromeosdevicesIssueCommandResponse : GTLRObject

/**
 *  The unique ID of the issued command, used to retrieve the command status.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *commandId;

@end


/**
 *  GTLRDirectory_ChromeOsMoveDevicesToOu
 */
@interface GTLRDirectory_ChromeOsMoveDevicesToOu : GTLRObject

/** Chrome OS devices to be moved to OU */
@property(nonatomic, strong, nullable) NSArray<NSString *> *deviceIds;

@end


/**
 *  Request for adding a new printer.
 */
@interface GTLRDirectory_CreatePrinterRequest : GTLRObject

/** Required. The name of the customer. Format: customers/{customer_id} */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. A printer to create. If you want to place the printer under
 *  particular OU then populate printer.org_unit_id filed. Otherwise the printer
 *  will be placed under root OU.
 */
@property(nonatomic, strong, nullable) GTLRDirectory_Printer *printer;

@end


/**
 *  Request for adding a new print server.
 */
@interface GTLRDirectory_CreatePrintServerRequest : GTLRObject

/**
 *  Required. The [unique
 *  ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers)
 *  of the customer's Google Workspace account. Format: `customers/{id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. A print server to create. If you want to place the print server
 *  under a specific organizational unit (OU), then populate the `org_unit_id`.
 *  Otherwise the print server is created under the root OU. The `org_unit_id`
 *  can be retrieved using the [Directory
 *  API](https://developers.google.com/admin-sdk/directory/v1/guides/manage-org-units).
 */
@property(nonatomic, strong, nullable) GTLRDirectory_PrintServer *printServer;

@end


/**
 *  GTLRDirectory_Customer
 */
@interface GTLRDirectory_Customer : GTLRObject

/**
 *  The customer's secondary contact email address. This email address cannot be
 *  on the same domain as the `customerDomain`
 */
@property(nonatomic, copy, nullable) NSString *alternateEmail;

/** The customer's creation time (Readonly) */
@property(nonatomic, strong, nullable) GTLRDateTime *customerCreationTime;

/**
 *  The customer's primary domain name string. Do not include the `www` prefix
 *  when creating a new customer.
 */
@property(nonatomic, copy, nullable) NSString *customerDomain;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The unique ID for the customer's Google Workspace account. (Readonly)
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Identifies the resource as a customer. Value: `admin#directory#customer`
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The customer's ISO 639-2 language code. See the [Language
 *  Codes](/admin-sdk/directory/v1/languages) page for the list of supported
 *  codes. Valid language codes outside the supported set will be accepted by
 *  the API but may lead to unexpected behavior. The default value is `en`.
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  The customer's contact phone number in
 *  [E.164](https://en.wikipedia.org/wiki/E.164) format.
 */
@property(nonatomic, copy, nullable) NSString *phoneNumber;

/** The customer's postal address information. */
@property(nonatomic, strong, nullable) GTLRDirectory_CustomerPostalAddress *postalAddress;

@end


/**
 *  GTLRDirectory_CustomerPostalAddress
 */
@interface GTLRDirectory_CustomerPostalAddress : GTLRObject

/**
 *  A customer's physical address. The address can be composed of one to three
 *  lines.
 */
@property(nonatomic, copy, nullable) NSString *addressLine1;

/** Address line 2 of the address. */
@property(nonatomic, copy, nullable) NSString *addressLine2;

/** Address line 3 of the address. */
@property(nonatomic, copy, nullable) NSString *addressLine3;

/** The customer contact's name. */
@property(nonatomic, copy, nullable) NSString *contactName;

/**
 *  This is a required property. For `countryCode` information see the [ISO 3166
 *  country code elements](https://www.iso.org/iso/country_codes.htm).
 */
@property(nonatomic, copy, nullable) NSString *countryCode;

/**
 *  Name of the locality. An example of a locality value is the city of `San
 *  Francisco`.
 */
@property(nonatomic, copy, nullable) NSString *locality;

/** The company or company division name. */
@property(nonatomic, copy, nullable) NSString *organizationName;

/**
 *  The postal code. A postalCode example is a postal zip code such as `10009`.
 *  This is in accordance with - http:
 *  //portablecontacts.net/draft-spec.html#address_element.
 */
@property(nonatomic, copy, nullable) NSString *postalCode;

/**
 *  Name of the region. An example of a region value is `NY` for the state of
 *  New York.
 */
@property(nonatomic, copy, nullable) NSString *region;

@end


/**
 *  GTLRDirectory_DomainAlias
 */
@interface GTLRDirectory_DomainAlias : GTLRObject

/**
 *  The creation time of the domain alias. (Read-only).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/** The domain alias name. */
@property(nonatomic, copy, nullable) NSString *domainAliasName;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Kind of resource this is. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The parent domain name that the domain alias is associated with. This can
 *  either be a primary or secondary domain name within a customer.
 */
@property(nonatomic, copy, nullable) NSString *parentDomainName;

/**
 *  Indicates the verification state of a domain alias. (Read-only)
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verified;

@end


/**
 *  GTLRDirectory_DomainAliases
 */
@interface GTLRDirectory_DomainAliases : GTLRObject

/** A list of domain alias objects. */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_DomainAlias *> *domainAliases;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Kind of resource this is. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  GTLRDirectory_Domains
 */
@interface GTLRDirectory_Domains : GTLRObject

/**
 *  Creation time of the domain. Expressed in [Unix
 *  time](https://en.wikipedia.org/wiki/Epoch_time) format. (Read-only).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creationTime;

/** A list of domain alias objects. (Read-only) */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_DomainAlias *> *domainAliases;

/** The domain name of the customer. */
@property(nonatomic, copy, nullable) NSString *domainName;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Indicates if the domain is a primary domain (Read-only).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isPrimary;

/** Kind of resource this is. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Indicates the verification state of a domain. (Read-only).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verified;

@end


/**
 *  GTLRDirectory_Domains2
 */
@interface GTLRDirectory_Domains2 : GTLRObject

/** A list of domain objects. */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_Domains *> *domains;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Kind of resource this is. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRDirectory_Empty : GTLRObject
@end


/**
 *  Info about failures
 */
@interface GTLRDirectory_FailureInfo : GTLRObject

/**
 *  Canonical code for why the update failed to apply.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_Aborted The operation was
 *        aborted, typically due to a concurrency issue such as a sequencer
 *        check failure or transaction abort. See the guidelines above for
 *        deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`.
 *        HTTP Mapping: 409 Conflict (Value: "ABORTED")
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_AlreadyExists The entity that
 *        a client attempted to create (e.g., file or directory) already exists.
 *        HTTP Mapping: 409 Conflict (Value: "ALREADY_EXISTS")
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_Cancelled The operation was
 *        cancelled, typically by the caller. HTTP Mapping: 499 Client Closed
 *        Request (Value: "CANCELLED")
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_DataLoss Unrecoverable data
 *        loss or corruption. HTTP Mapping: 500 Internal Server Error (Value:
 *        "DATA_LOSS")
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_DeadlineExceeded The deadline
 *        expired before the operation could complete. For operations that
 *        change the state of the system, this error may be returned even if the
 *        operation has completed successfully. For example, a successful
 *        response from a server could have been delayed long enough for the
 *        deadline to expire. HTTP Mapping: 504 Gateway Timeout (Value:
 *        "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_FailedPrecondition The
 *        operation was rejected because the system is not in a state required
 *        for the operation's execution. For example, the directory to be
 *        deleted is non-empty, an rmdir operation is applied to a
 *        non-directory, etc. Service implementors can use the following
 *        guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and
 *        `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the
 *        failing call. (b) Use `ABORTED` if the client should retry at a higher
 *        level. For example, when a client-specified test-and-set fails,
 *        indicating the client should restart a read-modify-write sequence. (c)
 *        Use `FAILED_PRECONDITION` if the client should not retry until the
 *        system state has been explicitly fixed. For example, if an "rmdir"
 *        fails because the directory is non-empty, `FAILED_PRECONDITION` should
 *        be returned since the client should not retry unless the files are
 *        deleted from the directory. HTTP Mapping: 400 Bad Request (Value:
 *        "FAILED_PRECONDITION")
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_Internal Internal errors.
 *        This means that some invariants expected by the underlying system have
 *        been broken. This error code is reserved for serious errors. HTTP
 *        Mapping: 500 Internal Server Error (Value: "INTERNAL")
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_InvalidArgument The client
 *        specified an invalid argument. Note that this differs from
 *        `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are
 *        problematic regardless of the state of the system (e.g., a malformed
 *        file name). HTTP Mapping: 400 Bad Request (Value: "INVALID_ARGUMENT")
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_NotFound Some requested
 *        entity (e.g., file or directory) was not found. Note to server
 *        developers: if a request is denied for an entire class of users, such
 *        as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may
 *        be used. If a request is denied for some users within a class of
 *        users, such as user-based access control, `PERMISSION_DENIED` must be
 *        used. HTTP Mapping: 404 Not Found (Value: "NOT_FOUND")
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_Ok Not an error; returned on
 *        success. HTTP Mapping: 200 OK (Value: "OK")
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_OutOfRange The operation was
 *        attempted past the valid range. E.g., seeking or reading past
 *        end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem
 *        that may be fixed if the system state changes. For example, a 32-bit
 *        file system will generate `INVALID_ARGUMENT` if asked to read at an
 *        offset that is not in the range [0,2^32-1], but it will generate
 *        `OUT_OF_RANGE` if asked to read from an offset past the current file
 *        size. There is a fair bit of overlap between `FAILED_PRECONDITION` and
 *        `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific
 *        error) when it applies so that callers who are iterating through a
 *        space can easily look for an `OUT_OF_RANGE` error to detect when they
 *        are done. HTTP Mapping: 400 Bad Request (Value: "OUT_OF_RANGE")
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_PermissionDenied The caller
 *        does not have permission to execute the specified operation.
 *        `PERMISSION_DENIED` must not be used for rejections caused by
 *        exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those
 *        errors). `PERMISSION_DENIED` must not be used if the caller can not be
 *        identified (use `UNAUTHENTICATED` instead for those errors). This
 *        error code does not imply the request is valid or the requested entity
 *        exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden
 *        (Value: "PERMISSION_DENIED")
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_ResourceExhausted Some
 *        resource has been exhausted, perhaps a per-user quota, or perhaps the
 *        entire file system is out of space. HTTP Mapping: 429 Too Many
 *        Requests (Value: "RESOURCE_EXHAUSTED")
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_Unauthenticated The request
 *        does not have valid authentication credentials for the operation. HTTP
 *        Mapping: 401 Unauthorized (Value: "UNAUTHENTICATED")
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_Unavailable The service is
 *        currently unavailable. This is most likely a transient condition,
 *        which can be corrected by retrying with a backoff. Note that it is not
 *        always safe to retry non-idempotent operations. See the guidelines
 *        above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and
 *        `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable (Value:
 *        "UNAVAILABLE")
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_Unimplemented The operation
 *        is not implemented or is not supported/enabled in this service. HTTP
 *        Mapping: 501 Not Implemented (Value: "UNIMPLEMENTED")
 *    @arg @c kGTLRDirectory_FailureInfo_ErrorCode_Unknown Unknown error. For
 *        example, this error may be returned when a `Status` value received
 *        from another address space belongs to an error space that is not known
 *        in this address space. Also errors raised by APIs that do not return
 *        enough error information may be converted to this error. HTTP Mapping:
 *        500 Internal Server Error (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *errorCode;

/** Failure reason message. */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/** Failed printer. */
@property(nonatomic, strong, nullable) GTLRDirectory_Printer *printer;

/** Id of a failed printer. */
@property(nonatomic, copy, nullable) NSString *printerId;

@end


/**
 *  JSON template for Feature object in Directory API.
 */
@interface GTLRDirectory_Feature : GTLRObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *etags;

/** Kind of resource this is. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The name of the feature. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  JSON template for a feature instance.
 */
@interface GTLRDirectory_FeatureInstance : GTLRObject

/**
 *  The feature that this is an instance of. A calendar resource may have
 *  multiple instances of a feature.
 */
@property(nonatomic, strong, nullable) GTLRDirectory_Feature *feature;

@end


/**
 *  GTLRDirectory_FeatureRename
 */
@interface GTLRDirectory_FeatureRename : GTLRObject

/** New name of the feature. */
@property(nonatomic, copy, nullable) NSString *newName NS_RETURNS_NOT_RETAINED;

@end


/**
 *  Public API: Resources.features
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "features" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDirectory_Features : GTLRCollectionObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The Features in this page of results.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_Feature *> *features;

/** Kind of resource this is. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The continuation token, used to page through large result sets. Provide this
 *  value in a subsequent request to return the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Google Groups provide your users the ability to send messages to groups of
 *  people using the group's email address. For more information about common
 *  tasks, see the [Developer's
 *  Guide](/admin-sdk/directory/v1/guides/manage-groups).
 */
@interface GTLRDirectory_Group : GTLRObject

/**
 *  Read-only. Value is `true` if this group was created by an administrator
 *  rather than a user.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *adminCreated;

/**
 *  Read-only. The list of a group's alias email addresses. To add, update, or
 *  remove a group's aliases, use the `groups.aliases` methods. If edited in a
 *  group's POST or PUT request, the edit is ignored.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *aliases;

/**
 *  An extended description to help users determine the purpose of a group. For
 *  example, you can include information about who should join the group, the
 *  types of messages to send to the group, links to FAQs about the group, or
 *  related groups. Maximum length is `4,096` characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The number of users that are direct members of the group. If a group is a
 *  member (child) of this group (the parent), members of the child group are
 *  not counted in the `directMembersCount` property of the parent group.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *directMembersCount;

/**
 *  The group's email address. If your account has multiple domains, select the
 *  appropriate domain for the email address. The `email` must be unique. This
 *  property is required when creating a group. Group email addresses are
 *  subject to the same character usage rules as usernames, see the [help
 *  center](https://support.google.com/a/answer/9193374) for details.
 */
@property(nonatomic, copy, nullable) NSString *email;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Read-only. The unique ID of a group. A group `id` can be used as a group
 *  request URI's `groupKey`.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The type of the API resource. For Groups resources, the value is
 *  `admin#directory#group`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The group's display name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Read-only. The list of the group's non-editable alias email addresses that
 *  are outside of the account's primary domain or subdomains. These are
 *  functioning email addresses used by the group. This is a read-only property
 *  returned in the API's response for a group. If edited in a group's POST or
 *  PUT request, the edit is ignored.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *nonEditableAliases;

@end


/**
 *  The Directory API manages aliases, which are alternative email addresses.
 */
@interface GTLRDirectory_GroupAlias : GTLRObject

/** The alias email address. */
@property(nonatomic, copy, nullable) NSString *alias;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The unique ID of the group.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The type of the API resource. For Alias resources, the value is
 *  `admin#directory#alias`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The primary email address of the group. */
@property(nonatomic, copy, nullable) NSString *primaryEmail;

@end


/**
 *  GTLRDirectory_Groups
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "groups" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDirectory_Groups : GTLRCollectionObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  A list of group objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_Group *> *groups;

/** Kind of resource this is. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Token used to access next page of this result. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response for listing allowed printer models.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "printerModels" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDirectory_ListPrinterModelsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Printer models that are currently allowed to be configured for ChromeOs.
 *  Some printers may be added or removed over time.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_PrinterModel *> *printerModels;

@end


/**
 *  Response for listing printers.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "printers" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDirectory_ListPrintersResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of printers. If `org_unit_id` was given in the request, then only
 *  printers visible for this OU will be returned. If `org_unit_id` was not
 *  given in the request, then all printers will be returned.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_Printer *> *printers;

@end


/**
 *  GTLRDirectory_ListPrintServersResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "printServers" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDirectory_ListPrintServersResponse : GTLRCollectionObject

/**
 *  A token that can be sent as `page_token` in a request to retrieve the next
 *  page. If this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of print servers.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_PrintServer *> *printServers;

@end


/**
 *  A Google Groups member can be a user or another group. This member can be
 *  inside or outside of your account's domains. For more information about
 *  common group member tasks, see the [Developer's
 *  Guide](/admin-sdk/directory/v1/guides/manage-group-members).
 */
@interface GTLRDirectory_Member : GTLRObject

/**
 *  Defines mail delivery preferences of member. This is only supported by
 *  create/update/get.
 */
@property(nonatomic, copy, nullable) NSString *deliverySettings;

/**
 *  The member's email address. A member can be a user or another group. This
 *  property is required when adding a member to a group. The `email` must be
 *  unique and cannot be an alias of another group. If the email address is
 *  changed, the API automatically reflects the email address changes.
 */
@property(nonatomic, copy, nullable) NSString *email;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The unique ID of the group member. A member `id` can be used as a member
 *  request URI's `memberKey`.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The type of the API resource. For Members resources, the value is
 *  `admin#directory#member`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The member's role in a group. The API returns an error for cycles in group
 *  memberships. For example, if `group1` is a member of `group2`, `group2`
 *  cannot be a member of `group1`. For more information about a member's role,
 *  see the [administration help
 *  center](https://support.google.com/a/answer/167094).
 */
@property(nonatomic, copy, nullable) NSString *role;

/** Status of member (Immutable) */
@property(nonatomic, copy, nullable) NSString *status;

/** The type of group member. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRDirectory_Members
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "members" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDirectory_Members : GTLRCollectionObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Kind of resource this is. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  A list of member objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_Member *> *members;

/** Token used to access next page of this result. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  JSON template for Has Member response in Directory API.
 */
@interface GTLRDirectory_MembersHasMember : GTLRObject

/**
 *  Output only. Identifies whether the given user is a member of the group.
 *  Membership can be direct or nested.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isMember;

@end


/**
 *  Google Workspace Mobile Management includes Android, [Google
 *  Sync](https://support.google.com/a/answer/135937), and iOS devices. For more
 *  information about common group mobile device API tasks, see the [Developer's
 *  Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices.html).
 */
@interface GTLRDirectory_MobileDevice : GTLRObject

/**
 *  Adb (USB debugging) enabled or disabled on device (Read-only)
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *adbStatus;

/**
 *  The list of applications installed on an Android mobile device. It is not
 *  applicable to Google Sync and iOS devices. The list includes any Android
 *  applications that access Google Workspace data. When updating an
 *  applications list, it is important to note that updates replace the existing
 *  list. If the Android device has two existing applications and the API
 *  updates the list with five applications, the is now the updated list of five
 *  applications.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_MobileDevice_Applications_Item *> *applications;

/** The device's baseband version. */
@property(nonatomic, copy, nullable) NSString *basebandVersion;

/** Mobile Device Bootloader version (Read-only) */
@property(nonatomic, copy, nullable) NSString *bootloaderVersion;

/** Mobile Device Brand (Read-only) */
@property(nonatomic, copy, nullable) NSString *brand;

/** The device's operating system build number. */
@property(nonatomic, copy, nullable) NSString *buildNumber;

/** The default locale used on the device. */
@property(nonatomic, copy, nullable) NSString *defaultLanguage;

/**
 *  Developer options enabled or disabled on device (Read-only)
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *developerOptionsStatus;

/** The compromised device status. */
@property(nonatomic, copy, nullable) NSString *deviceCompromisedStatus;

/**
 *  The serial number for a Google Sync mobile device. For Android and iOS
 *  devices, this is a software generated unique identifier.
 */
@property(nonatomic, copy, nullable) NSString *deviceId;

/** DevicePasswordStatus (Read-only) */
@property(nonatomic, copy, nullable) NSString *devicePasswordStatus;

/**
 *  The list of the owner's email addresses. If your application needs the
 *  current list of user emails, use the
 *  [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For
 *  additional information, see the [retrieve a
 *  user](/admin-sdk/directory/v1/guides/manage-users#get_user) method.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *email;

/** Mobile Device Encryption Status (Read-only) */
@property(nonatomic, copy, nullable) NSString *encryptionStatus;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Date and time the device was first synchronized with the policy settings in
 *  the G Suite administrator control panel (Read-only)
 */
@property(nonatomic, strong, nullable) GTLRDateTime *firstSync;

/** Mobile Device Hardware (Read-only) */
@property(nonatomic, copy, nullable) NSString *hardware;

/**
 *  The IMEI/MEID unique identifier for Android hardware. It is not applicable
 *  to Google Sync devices. When adding an Android mobile device, this is an
 *  optional property. When updating one of these devices, this is a read-only
 *  property.
 */
@property(nonatomic, copy, nullable) NSString *hardwareId;

/** The device's IMEI number. */
@property(nonatomic, copy, nullable) NSString *imei;

/** The device's kernel version. */
@property(nonatomic, copy, nullable) NSString *kernelVersion;

/**
 *  The type of the API resource. For Mobiledevices resources, the value is
 *  `admin#directory#mobiledevice`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Date and time the device was last synchronized with the policy settings in
 *  the G Suite administrator control panel (Read-only)
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastSync;

/**
 *  Boolean indicating if this account is on owner/primary profile or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *managedAccountIsOnOwnerProfile;

/** Mobile Device manufacturer (Read-only) */
@property(nonatomic, copy, nullable) NSString *manufacturer;

/** The device's MEID number. */
@property(nonatomic, copy, nullable) NSString *meid;

/**
 *  The mobile device's model name, for example Nexus S. This property can be
 *  [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For
 *  more information, see the [Developer's
 *  Guide](/admin-sdk/directory/v1/guides/manage-mobile=devices#update_mobile_device).
 */
@property(nonatomic, copy, nullable) NSString *model;

/**
 *  The list of the owner's user names. If your application needs the current
 *  list of device owner names, use the
 *  [get](/admin-sdk/directory/v1/reference/mobiledevices/get.html) method. For
 *  more information about retrieving mobile device user information, see the
 *  [Developer's Guide](/admin-sdk/directory/v1/guides/manage-users#get_user).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *name;

/** Mobile Device mobile or network operator (if available) (Read-only) */
@property(nonatomic, copy, nullable) NSString *networkOperator;

/**
 *  The mobile device's operating system, for example IOS 4.3 or Android 2.3.5.
 *  This property can be
 *  [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html). For
 *  more information, see the [Developer's
 *  Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).
 */
@property(nonatomic, copy, nullable) NSString *os;

/** The list of accounts added on device (Read-only) */
@property(nonatomic, strong, nullable) NSArray<NSString *> *otherAccountsInfo;

/** DMAgentPermission (Read-only) */
@property(nonatomic, copy, nullable) NSString *privilege;

/** Mobile Device release version version (Read-only) */
@property(nonatomic, copy, nullable) NSString *releaseVersion;

/** The unique ID the API service uses to identify the mobile device. */
@property(nonatomic, copy, nullable) NSString *resourceId;

/**
 *  Mobile Device Security patch level (Read-only)
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *securityPatchLevel;

/** The device's serial number. */
@property(nonatomic, copy, nullable) NSString *serialNumber;

/** The device's status. */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Work profile supported on device (Read-only)
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportsWorkProfile;

/** The type of mobile device. */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Unknown sources enabled or disabled on device (Read-only)
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *unknownSourcesStatus;

/**
 *  Gives information about the device such as `os` version. This property can
 *  be [updated](/admin-sdk/directory/v1/reference/mobiledevices/update.html).
 *  For more information, see the [Developer's
 *  Guide](/admin-sdk/directory/v1/guides/manage-mobile-devices#update_mobile_device).
 */
@property(nonatomic, copy, nullable) NSString *userAgent;

/** The device's MAC address on Wi-Fi networks. */
@property(nonatomic, copy, nullable) NSString *wifiMacAddress;

@end


/**
 *  GTLRDirectory_MobileDevice_Applications_Item
 */
@interface GTLRDirectory_MobileDevice_Applications_Item : GTLRObject

/** The application's display name. An example is `Browser`. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** The application's package name. An example is `com.android.browser`. */
@property(nonatomic, copy, nullable) NSString *packageName;

/**
 *  The list of permissions of this application. These can be either a standard
 *  Android permission or one defined by the application, and are found in an
 *  application's [Android
 *  manifest](https://developer.android.com/guide/topics/manifest/uses-permission-element.html).
 *  Examples of a Calendar application's permissions are `READ_CALENDAR`, or
 *  `MANAGE_ACCOUNTS`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permission;

/**
 *  The application's version code. An example is `13`.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionCode;

/** The application's version name. An example is `3.2-140714`. */
@property(nonatomic, copy, nullable) NSString *versionName;

@end


/**
 *  GTLRDirectory_MobileDeviceAction
 */
@interface GTLRDirectory_MobileDeviceAction : GTLRObject

/** The action to be performed on the device. */
@property(nonatomic, copy, nullable) NSString *action;

@end


/**
 *  GTLRDirectory_MobileDevices
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "mobiledevices" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDirectory_MobileDevices : GTLRCollectionObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Kind of resource this is. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  A list of Mobile Device objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_MobileDevice *> *mobiledevices;

/** Token used to access next page of this result. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Managing your account's organizational units allows you to configure your
 *  users' access to services and custom settings. For more information about
 *  common organizational unit tasks, see the [Developer's
 *  Guide](/admin-sdk/directory/v1/guides/manage-org-units.html). The customer's
 *  organizational unit hierarchy is limited to 35 levels of depth.
 */
@interface GTLRDirectory_OrgUnit : GTLRObject

/**
 *  Determines if a sub-organizational unit can inherit the settings of the
 *  parent organization. The default value is `false`, meaning a
 *  sub-organizational unit inherits the settings of the nearest parent
 *  organizational unit. For more information on inheritance and users in an
 *  organization structure, see the [administration help
 *  center](https://support.google.com/a/answer/4352075).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blockInheritance;

/**
 *  Description of the organizational unit.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The type of the API resource. For Orgunits resources, the value is
 *  `admin#directory#orgUnit`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The organizational unit's path name. For example, an organizational unit's
 *  name within the /corp/support/sales_support parent path is sales_support.
 *  Required.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The unique ID of the organizational unit. */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/**
 *  The full path to the organizational unit. The `orgUnitPath` is a derived
 *  property. When listed, it is derived from `parentOrgunitPath` and
 *  organizational unit's `name`. For example, for an organizational unit named
 *  'apps' under parent organization '/engineering', the orgUnitPath is
 *  '/engineering/apps'. In order to edit an `orgUnitPath`, either update the
 *  name of the organization or the `parentOrgunitPath`. A user's organizational
 *  unit determines which Google Workspace services the user has access to. If
 *  the user is moved to a new organization, the user's access changes. For more
 *  information about organization structures, see the [administration help
 *  center](https://support.google.com/a/answer/4352075). For more information
 *  about moving a user to a different organization, see [Update a
 *  user](/admin-sdk/directory/v1/guides/manage-users.html#update_user).
 */
@property(nonatomic, copy, nullable) NSString *orgUnitPath;

/**
 *  The unique ID of the parent organizational unit. Required, unless
 *  `parentOrgUnitPath` is set.
 */
@property(nonatomic, copy, nullable) NSString *parentOrgUnitId;

/**
 *  The organizational unit's parent path. For example, /corp/sales is the
 *  parent path for /corp/sales/sales_support organizational unit. Required,
 *  unless `parentOrgUnitId` is set.
 */
@property(nonatomic, copy, nullable) NSString *parentOrgUnitPath;

@end


/**
 *  GTLRDirectory_OrgUnits
 */
@interface GTLRDirectory_OrgUnits : GTLRObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The type of the API resource. For Org Unit resources, the type is
 *  `admin#directory#orgUnits`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** A list of organizational unit objects. */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_OrgUnit *> *organizationUnits;

@end


/**
 *  Contains information regarding the current OS update status.
 */
@interface GTLRDirectory_OsUpdateStatus : GTLRObject

/** Date and time of the last reboot. */
@property(nonatomic, copy, nullable) NSString *rebootTime;

/**
 *  The update state of an OS update.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectory_OsUpdateStatus_State_UpdateStateDownloadInProgress
 *        The pending update is being downloaded. (Value:
 *        "updateStateDownloadInProgress")
 *    @arg @c kGTLRDirectory_OsUpdateStatus_State_UpdateStateNeedReboot The
 *        device is ready to install the update, but must reboot. (Value:
 *        "updateStateNeedReboot")
 *    @arg @c kGTLRDirectory_OsUpdateStatus_State_UpdateStateNotStarted There is
 *        an update pending but it hasn't started. (Value:
 *        "updateStateNotStarted")
 *    @arg @c kGTLRDirectory_OsUpdateStatus_State_UpdateStateUnspecified The
 *        update state is unspecified. (Value: "updateStateUnspecified")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** New required platform version from the pending updated kiosk app. */
@property(nonatomic, copy, nullable) NSString *targetKioskAppVersion;

/**
 *  New platform version of the OS image being downloaded and applied. It is
 *  only set when update status is UPDATE_STATUS_DOWNLOAD_IN_PROGRESS or
 *  UPDATE_STATUS_NEED_REBOOT. Note this could be a dummy "0.0.0.0" for
 *  UPDATE_STATUS_NEED_REBOOT for some edge cases, e.g. update engine is
 *  restarted without a reboot.
 */
@property(nonatomic, copy, nullable) NSString *targetOsVersion;

/** Date and time of the last update check. */
@property(nonatomic, copy, nullable) NSString *updateCheckTime;

/** Date and time of the last successful OS update. */
@property(nonatomic, copy, nullable) NSString *updateTime;

@end


/**
 *  Printer configuration.
 */
@interface GTLRDirectory_Printer : GTLRObject

/**
 *  Output only. Auxiliary messages about issues with the printer configuration
 *  if any.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_AuxiliaryMessage *> *auxiliaryMessages;

/** Output only. Time when printer was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Editable. Description of printer.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Editable. Name of printer. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Id of the printer. (During printer creation leave empty)
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Editable. Make and model of printer. e.g. Lexmark MS610de Value must be in
 *  format as seen in ListPrinterModels response.
 */
@property(nonatomic, copy, nullable) NSString *makeAndModel;

/**
 *  The resource name of the Printer object, in the format
 *  customers/{customer-id}/printers/{printer-id} (During printer creation leave
 *  empty)
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Organization Unit that owns this printer (Only can be set during Printer
 *  creation)
 */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/** Editable. Printer URI. */
@property(nonatomic, copy, nullable) NSString *uri;

/**
 *  Editable. flag to use driverless configuration or not. If it's set to be
 *  true, make_and_model can be ignored
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useDriverlessConfig;

@end


/**
 *  Printer manufacturer and model
 */
@interface GTLRDirectory_PrinterModel : GTLRObject

/** Display name. eq. "Brother MFC-8840D" */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Make and model as represented in "make_and_model" field in Printer object.
 *  eq. "brother mfc-8840d"
 */
@property(nonatomic, copy, nullable) NSString *makeAndModel;

/** Manufacturer. eq. "Brother" */
@property(nonatomic, copy, nullable) NSString *manufacturer;

@end


/**
 *  Configuration for a print server.
 */
@interface GTLRDirectory_PrintServer : GTLRObject

/** Output only. Time when the print server was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Editable. Description of the print server (as shown in the Admin console).
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Editable. Display name of the print server (as shown in the Admin console).
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Immutable. ID of the print server. Leave empty when creating.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Immutable. Resource name of the print server. Leave empty when creating.
 *  Format: `customers/{customer.id}/printServers/{print_server.id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  ID of the organization unit (OU) that owns this print server. This value can
 *  only be set when the print server is initially created. If it's not
 *  populated, the print server is placed under the root OU. The `org_unit_id`
 *  can be retrieved using the [Directory
 *  API](/admin-sdk/directory/reference/rest/v1/orgunits).
 */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/** Editable. Print server URI. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Info about failures
 */
@interface GTLRDirectory_PrintServerFailureInfo : GTLRObject

/**
 *  Canonical code for why the update failed to apply.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Aborted The
 *        operation was aborted, typically due to a concurrency issue such as a
 *        sequencer check failure or transaction abort. See the guidelines above
 *        for deciding between `FAILED_PRECONDITION`, `ABORTED`, and
 *        `UNAVAILABLE`. HTTP Mapping: 409 Conflict (Value: "ABORTED")
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_AlreadyExists The
 *        entity that a client attempted to create (e.g., file or directory)
 *        already exists. HTTP Mapping: 409 Conflict (Value: "ALREADY_EXISTS")
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Cancelled The
 *        operation was cancelled, typically by the caller. HTTP Mapping: 499
 *        Client Closed Request (Value: "CANCELLED")
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_DataLoss
 *        Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal
 *        Server Error (Value: "DATA_LOSS")
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_DeadlineExceeded
 *        The deadline expired before the operation could complete. For
 *        operations that change the state of the system, this error may be
 *        returned even if the operation has completed successfully. For
 *        example, a successful response from a server could have been delayed
 *        long enough for the deadline to expire. HTTP Mapping: 504 Gateway
 *        Timeout (Value: "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_FailedPrecondition
 *        The operation was rejected because the system is not in a state
 *        required for the operation's execution. For example, the directory to
 *        be deleted is non-empty, an rmdir operation is applied to a
 *        non-directory, etc. Service implementors can use the following
 *        guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and
 *        `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the
 *        failing call. (b) Use `ABORTED` if the client should retry at a higher
 *        level. For example, when a client-specified test-and-set fails,
 *        indicating the client should restart a read-modify-write sequence. (c)
 *        Use `FAILED_PRECONDITION` if the client should not retry until the
 *        system state has been explicitly fixed. For example, if an "rmdir"
 *        fails because the directory is non-empty, `FAILED_PRECONDITION` should
 *        be returned since the client should not retry unless the files are
 *        deleted from the directory. HTTP Mapping: 400 Bad Request (Value:
 *        "FAILED_PRECONDITION")
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Internal Internal
 *        errors. This means that some invariants expected by the underlying
 *        system have been broken. This error code is reserved for serious
 *        errors. HTTP Mapping: 500 Internal Server Error (Value: "INTERNAL")
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_InvalidArgument
 *        The client specified an invalid argument. Note that this differs from
 *        `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are
 *        problematic regardless of the state of the system (e.g., a malformed
 *        file name). HTTP Mapping: 400 Bad Request (Value: "INVALID_ARGUMENT")
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_NotFound Some
 *        requested entity (e.g., file or directory) was not found. Note to
 *        server developers: if a request is denied for an entire class of
 *        users, such as gradual feature rollout or undocumented allowlist,
 *        `NOT_FOUND` may be used. If a request is denied for some users within
 *        a class of users, such as user-based access control,
 *        `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found (Value:
 *        "NOT_FOUND")
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Ok Not an error;
 *        returned on success. HTTP Mapping: 200 OK (Value: "OK")
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_OutOfRange The
 *        operation was attempted past the valid range. E.g., seeking or reading
 *        past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a
 *        problem that may be fixed if the system state changes. For example, a
 *        32-bit file system will generate `INVALID_ARGUMENT` if asked to read
 *        at an offset that is not in the range [0,2^32-1], but it will generate
 *        `OUT_OF_RANGE` if asked to read from an offset past the current file
 *        size. There is a fair bit of overlap between `FAILED_PRECONDITION` and
 *        `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific
 *        error) when it applies so that callers who are iterating through a
 *        space can easily look for an `OUT_OF_RANGE` error to detect when they
 *        are done. HTTP Mapping: 400 Bad Request (Value: "OUT_OF_RANGE")
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_PermissionDenied
 *        The caller does not have permission to execute the specified
 *        operation. `PERMISSION_DENIED` must not be used for rejections caused
 *        by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for
 *        those errors). `PERMISSION_DENIED` must not be used if the caller can
 *        not be identified (use `UNAUTHENTICATED` instead for those errors).
 *        This error code does not imply the request is valid or the requested
 *        entity exists or satisfies other pre-conditions. HTTP Mapping: 403
 *        Forbidden (Value: "PERMISSION_DENIED")
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_ResourceExhausted
 *        Some resource has been exhausted, perhaps a per-user quota, or perhaps
 *        the entire file system is out of space. HTTP Mapping: 429 Too Many
 *        Requests (Value: "RESOURCE_EXHAUSTED")
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Unauthenticated
 *        The request does not have valid authentication credentials for the
 *        operation. HTTP Mapping: 401 Unauthorized (Value: "UNAUTHENTICATED")
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Unavailable The
 *        service is currently unavailable. This is most likely a transient
 *        condition, which can be corrected by retrying with a backoff. Note
 *        that it is not always safe to retry non-idempotent operations. See the
 *        guidelines above for deciding between `FAILED_PRECONDITION`,
 *        `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable
 *        (Value: "UNAVAILABLE")
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Unimplemented The
 *        operation is not implemented or is not supported/enabled in this
 *        service. HTTP Mapping: 501 Not Implemented (Value: "UNIMPLEMENTED")
 *    @arg @c kGTLRDirectory_PrintServerFailureInfo_ErrorCode_Unknown Unknown
 *        error. For example, this error may be returned when a `Status` value
 *        received from another address space belongs to an error space that is
 *        not known in this address space. Also errors raised by APIs that do
 *        not return enough error information may be converted to this error.
 *        HTTP Mapping: 500 Internal Server Error (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *errorCode;

/** Failure reason message. */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/** Failed print server. */
@property(nonatomic, strong, nullable) GTLRDirectory_PrintServer *printServer;

/** ID of a failed print server. */
@property(nonatomic, copy, nullable) NSString *printServerId;

@end


/**
 *  GTLRDirectory_Privilege
 */
@interface GTLRDirectory_Privilege : GTLRObject

/**
 *  A list of child privileges. Privileges for a service form a tree. Each
 *  privilege can have a list of child privileges; this list is empty for a leaf
 *  privilege.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_Privilege *> *childPrivileges;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  If the privilege can be restricted to an organization unit.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isOuScopable;

/**
 *  The type of the API resource. This is always `admin#directory#privilege`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The name of the privilege. */
@property(nonatomic, copy, nullable) NSString *privilegeName;

/**
 *  The obfuscated ID of the service this privilege is for. This value is
 *  returned with
 *  [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).
 */
@property(nonatomic, copy, nullable) NSString *serviceId;

/** The name of the service this privilege is for. */
@property(nonatomic, copy, nullable) NSString *serviceName;

@end


/**
 *  GTLRDirectory_Privileges
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRDirectory_Privileges : GTLRCollectionObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  A list of Privilege resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_Privilege *> *items;

/**
 *  The type of the API resource. This is always `admin#directory#privileges`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  GTLRDirectory_Role
 */
@interface GTLRDirectory_Role : GTLRObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Returns `true` if the role is a super admin role.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isSuperAdminRole;

/**
 *  Returns `true` if this is a pre-defined system role.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isSystemRole;

/** The type of the API resource. This is always `admin#directory#role`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** A short description of the role. */
@property(nonatomic, copy, nullable) NSString *roleDescription;

/**
 *  ID of the role.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *roleId;

/** Name of the role. */
@property(nonatomic, copy, nullable) NSString *roleName;

/** The set of privileges that are granted to this role. */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_Role_RolePrivileges_Item *> *rolePrivileges;

@end


/**
 *  GTLRDirectory_Role_RolePrivileges_Item
 */
@interface GTLRDirectory_Role_RolePrivileges_Item : GTLRObject

/** The name of the privilege. */
@property(nonatomic, copy, nullable) NSString *privilegeName;

/**
 *  The obfuscated ID of the service this privilege is for. This value is
 *  returned with
 *  [`Privileges.list()`](/admin-sdk/directory/v1/reference/privileges/list).
 */
@property(nonatomic, copy, nullable) NSString *serviceId;

@end


/**
 *  Defines an assignment of a role.
 */
@interface GTLRDirectory_RoleAssignment : GTLRObject

/**
 *  The unique ID of the entity this role is assigned to—either the `user_id` of
 *  a user or the `uniqueId` of a service account, as defined in [Identity and
 *  Access Management
 *  (IAM)](https://cloud.google.com/iam/docs/reference/rest/v1/projects.serviceAccounts).
 */
@property(nonatomic, copy, nullable) NSString *assignedTo;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The type of the API resource. This is always
 *  `admin#directory#roleAssignment`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  If the role is restricted to an organization unit, this contains the ID for
 *  the organization unit the exercise of this role is restricted to.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/**
 *  ID of this roleAssignment.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *roleAssignmentId;

/**
 *  The ID of the role that is assigned.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *roleId;

/** The scope in which this role is assigned. */
@property(nonatomic, copy, nullable) NSString *scopeType;

@end


/**
 *  GTLRDirectory_RoleAssignments
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDirectory_RoleAssignments : GTLRCollectionObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  A list of RoleAssignment resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_RoleAssignment *> *items;

/**
 *  The type of the API resource. This is always
 *  `admin#directory#roleAssignments`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRDirectory_Roles
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDirectory_Roles : GTLRCollectionObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  A list of Role resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_Role *> *items;

/** The type of the API resource. This is always `admin#directory#roles`. */
@property(nonatomic, copy, nullable) NSString *kind;

@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The type of API resource. For Schema resources, this is always
 *  `admin#directory#schema`.
 */
@interface GTLRDirectory_Schema : GTLRObject

/** Display name for the schema. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** The ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** A list of fields in the schema. */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_SchemaFieldSpec *> *fields;

/** Kind of resource this is. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The unique identifier of the schema (Read-only) */
@property(nonatomic, copy, nullable) NSString *schemaId;

/**
 *  The schema's name. Each `schema_name` must be unique within a customer.
 *  Reusing a name results in a `409: Entity already exists` error.
 */
@property(nonatomic, copy, nullable) NSString *schemaName;

@end


/**
 *  You can use schemas to add custom fields to user profiles. You can use these
 *  fields to store information such as the projects your users work on, their
 *  physical locations, their hire dates, or whatever else fits your business
 *  needs. For more information, see [Custom User
 *  Fields](/admin-sdk/directory/v1/guides/manage-schemas).
 */
@interface GTLRDirectory_SchemaFieldSpec : GTLRObject

/** Display Name of the field. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** The ETag of the field. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The unique identifier of the field (Read-only) */
@property(nonatomic, copy, nullable) NSString *fieldId;

/** The name of the field. */
@property(nonatomic, copy, nullable) NSString *fieldName;

/** The type of the field. */
@property(nonatomic, copy, nullable) NSString *fieldType;

/**
 *  Boolean specifying whether the field is indexed or not. Default: `true`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *indexed;

/**
 *  The kind of resource this is. For schema fields this is always
 *  `admin#directory#schema#fieldspec`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  A boolean specifying whether this is a multi-valued field or not. Default:
 *  `false`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *multiValued;

/**
 *  Indexing spec for a numeric field. By default, only exact match queries will
 *  be supported for numeric fields. Setting the `numericIndexingSpec` allows
 *  range queries to be supported.
 */
@property(nonatomic, strong, nullable) GTLRDirectory_SchemaFieldSpec_NumericIndexingSpec *numericIndexingSpec;

/**
 *  Specifies who can view values of this field. See [Retrieve users as a
 *  non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin)
 *  for more information. Note: It may take up to 24 hours for changes to this
 *  field to be reflected.
 */
@property(nonatomic, copy, nullable) NSString *readAccessType;

@end


/**
 *  Indexing spec for a numeric field. By default, only exact match queries will
 *  be supported for numeric fields. Setting the `numericIndexingSpec` allows
 *  range queries to be supported.
 */
@interface GTLRDirectory_SchemaFieldSpec_NumericIndexingSpec : GTLRObject

/**
 *  Maximum value of this field. This is meant to be indicative rather than
 *  enforced. Values outside this range will still be indexed, but search may
 *  not be as performant.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxValue;

/**
 *  Minimum value of this field. This is meant to be indicative rather than
 *  enforced. Values outside this range will still be indexed, but search may
 *  not be as performant.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minValue;

@end


/**
 *  JSON response template for List Schema operation in Directory API.
 */
@interface GTLRDirectory_Schemas : GTLRObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Kind of resource this is. */
@property(nonatomic, copy, nullable) NSString *kind;

/** A list of UserSchema objects. */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_Schema *> *schemas;

@end


/**
 *  JSON template for token resource in Directory API.
 */
@interface GTLRDirectory_Token : GTLRObject

/**
 *  Whether the application is registered with Google. The value is `true` if
 *  the application has an anonymous Client ID.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *anonymous;

/** The Client ID of the application the token is issued to. */
@property(nonatomic, copy, nullable) NSString *clientId;

/** The displayable name of the application the token is issued to. */
@property(nonatomic, copy, nullable) NSString *displayText;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The type of the API resource. This is always `admin#directory#token`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Whether the token is issued to an installed application. The value is `true`
 *  if the application is installed to a desktop or mobile device.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nativeApp;

/** A list of authorization scopes the application is granted. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *scopes;

/** The unique ID of the user that issued the token. */
@property(nonatomic, copy, nullable) NSString *userKey;

@end


/**
 *  JSON response template for List tokens operation in Directory API.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRDirectory_Tokens : GTLRCollectionObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  A list of Token resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_Token *> *items;

/**
 *  The type of the API resource. This is always `admin#directory#tokenList`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  The Directory API allows you to create and manage your account's users, user
 *  aliases, and user Gmail chat profile photos. For more information about
 *  common tasks, see the [User Accounts Developer's
 *  Guide](/admin-sdk/directory/v1/guides/manage-users.html) and the [User
 *  Aliases Developer's
 *  Guide](/admin-sdk/directory/v1/guides/manage-user-aliases.html).
 */
@interface GTLRDirectory_User : GTLRObject

/**
 *  The list of the user's addresses. The maximum allowed data size for this
 *  field is 10Kb.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id addresses;

/**
 *  Output only. This property is `true` if the user has completed an initial
 *  login and accepted the Terms of Service agreement.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *agreedToTerms;

/** Output only. The list of the user's alias email addresses. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *aliases;

/**
 *  Indicates if user is archived.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *archived;

/**
 *  Indicates if the user is forced to change their password at next login. This
 *  setting doesn't apply when [the user signs in via a third-party identity
 *  provider](https://support.google.com/a/answer/60224).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *changePasswordAtNextLogin;

/** User's G Suite account creation time. (Read-only) */
@property(nonatomic, strong, nullable) GTLRDateTime *creationTime;

/**
 *  Output only. The customer ID to [retrieve all account
 *  users](/admin-sdk/directory/v1/guides/manage-users.html#get_all_users). You
 *  can use the alias `my_customer` to represent your account's `customerId`. As
 *  a reseller administrator, you can use the resold customer account's
 *  `customerId`. To get a `customerId`, use the account's primary domain in the
 *  `domain` parameter of a
 *  [users.list](/admin-sdk/directory/v1/reference/users/list) request.
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Custom fields of the user. The key is a `schema_name` and its values are
 *  `'field_name': 'field_value'`.
 */
@property(nonatomic, strong, nullable) GTLRDirectory_User_CustomSchemas *customSchemas;

@property(nonatomic, strong, nullable) GTLRDateTime *deletionTime;

/**
 *  The list of the user's email addresses. The maximum allowed data size for
 *  this field is 10Kb.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id emails;

/** Output only. ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The list of external IDs for the user, such as an employee or network ID.
 *  The maximum allowed data size for this field is 2Kb.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id externalIds;

/**
 *  The user's gender. The maximum allowed data size for this field is 1Kb.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id gender;

/**
 *  Stores the hash format of the `password` property. The following
 *  `hashFunction` values are allowed: * `MD5` - Accepts simple hex-encoded
 *  values. * `SHA-1` - Accepts simple hex-encoded values. * `crypt` - Compliant
 *  with the [C crypt library](https://en.wikipedia.org/wiki/Crypt_%28C%29).
 *  Supports the DES, MD5 (hash prefix `$1$`), SHA-256 (hash prefix `$5$`), and
 *  SHA-512 (hash prefix `$6$`) hash algorithms. If rounds are specified as part
 *  of the prefix, they must be 10,000 or fewer.
 */
@property(nonatomic, copy, nullable) NSString *hashFunction;

/**
 *  The unique ID for the user. A user `id` can be used as a user request URI's
 *  `userKey`.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The list of the user's Instant Messenger (IM) accounts. A user account can
 *  have multiple ims properties. But, only one of these ims properties can be
 *  the primary IM contact. The maximum allowed data size for this field is 2Kb.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id ims;

/**
 *  Indicates if the user's profile is visible in the Google Workspace global
 *  address list when the contact sharing feature is enabled for the domain. For
 *  more information about excluding user profiles, see the [administration help
 *  center](https://support.google.com/a/answer/1285988).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *includeInGlobalAddressList;

/**
 *  If `true`, the user's IP address is
 *  [whitelisted](https://support.google.com/a/answer/60752).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ipWhitelisted;

/**
 *  Output only. Indicates a user with super admininistrator privileges. The
 *  `isAdmin` property can only be edited in the [Make a user an
 *  administrator](/admin-sdk/directory/v1/guides/manage-users.html#make_admin)
 *  operation (
 *  [makeAdmin](/admin-sdk/directory/v1/reference/users/makeAdmin.html) method).
 *  If edited in the user
 *  [insert](/admin-sdk/directory/v1/reference/users/insert.html) or
 *  [update](/admin-sdk/directory/v1/reference/users/update.html) methods, the
 *  edit is ignored by the API service.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isAdmin;

/**
 *  Output only. Indicates if the user is a delegated administrator. Delegated
 *  administrators are supported by the API but cannot create or undelete users,
 *  or make users administrators. These requests are ignored by the API service.
 *  Roles and privileges for administrators are assigned using the [Admin
 *  console](https://support.google.com/a/answer/33325).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDelegatedAdmin;

/**
 *  Output only. Is 2-step verification enforced (Read-only)
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isEnforcedIn2Sv;

/**
 *  Output only. Is enrolled in 2-step verification (Read-only)
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isEnrolledIn2Sv;

/**
 *  Output only. Indicates if the user's Google mailbox is created. This
 *  property is only applicable if the user has been assigned a Gmail license.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isMailboxSetup;

/**
 *  The list of the user's keywords. The maximum allowed data size for this
 *  field is 1Kb.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id keywords;

/**
 *  Output only. The type of the API resource. For Users resources, the value is
 *  `admin#directory#user`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The user's languages. The maximum allowed data size for this field is 1Kb.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id languages;

/** User's last login time. (Read-only) */
@property(nonatomic, strong, nullable) GTLRDateTime *lastLoginTime;

/**
 *  The user's locations. The maximum allowed data size for this field is 10Kb.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id locations;

/**
 *  Holds the given and family names of the user, and the read-only `fullName`
 *  value. The maximum number of characters in the `givenName` and in the
 *  `familyName` values is 60. In addition, name values support unicode/UTF-8
 *  characters, and can contain spaces, letters (a-z), numbers (0-9), dashes
 *  (-), forward slashes (/), and periods (.). For more information about
 *  character usage rules, see the [administration help
 *  center](https://support.google.com/a/answer/9193374). Maximum allowed data
 *  size for this field is 1Kb.
 */
@property(nonatomic, strong, nullable) GTLRDirectory_UserName *name;

/**
 *  Output only. The list of the user's non-editable alias email addresses.
 *  These are typically outside the account's primary domain or sub-domain.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *nonEditableAliases;

/**
 *  Notes for the user.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id notes;

/**
 *  The list of organizations the user belongs to. The maximum allowed data size
 *  for this field is 10Kb.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id organizations;

/**
 *  The full path of the parent organization associated with the user. If the
 *  parent organization is the top-level, it is represented as a forward slash
 *  (`/`).
 */
@property(nonatomic, copy, nullable) NSString *orgUnitPath;

/** User's password */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  The list of the user's phone numbers. The maximum allowed data size for this
 *  field is 1Kb.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id phones;

/**
 *  The list of [POSIX](https://www.opengroup.org/austin/papers/posix_faq.html)
 *  account information for the user.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id posixAccounts;

/**
 *  The user's primary email address. This property is required in a request to
 *  create a user account. The `primaryEmail` must be unique and cannot be an
 *  alias of another user.
 */
@property(nonatomic, copy, nullable) NSString *primaryEmail;

/** Recovery email of the user. */
@property(nonatomic, copy, nullable) NSString *recoveryEmail;

/**
 *  Recovery phone of the user. The phone number must be in the E.164 format,
 *  starting with the plus sign (+). Example: *+16506661212*.
 */
@property(nonatomic, copy, nullable) NSString *recoveryPhone;

/**
 *  The list of the user's relationships to other users. The maximum allowed
 *  data size for this field is 2Kb.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id relations;

/**
 *  A list of SSH public keys.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id sshPublicKeys;

/**
 *  Indicates if user is suspended.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *suspended;

/**
 *  Output only. Has the reason a user account is suspended either by the
 *  administrator or by Google at the time of suspension. The property is
 *  returned only if the `suspended` property is `true`.
 */
@property(nonatomic, copy, nullable) NSString *suspensionReason;

/** Output only. ETag of the user's photo (Read-only) */
@property(nonatomic, copy, nullable) NSString *thumbnailPhotoEtag;

/** Output only. Photo Url of the user (Read-only) */
@property(nonatomic, copy, nullable) NSString *thumbnailPhotoUrl;

/**
 *  The user's websites. The maximum allowed data size for this field is 2Kb.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id websites;

@end


/**
 *  Custom fields of the user. The key is a `schema_name` and its values are
 *  `'field_name': 'field_value'`.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDirectory_UserCustomProperties. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDirectory_User_CustomSchemas : GTLRObject
@end


/**
 *  JSON template for About (notes) of a user in Directory API.
 */
@interface GTLRDirectory_UserAbout : GTLRObject

/**
 *  About entry can have a type which indicates the content type. It can either
 *  be plain or html. By default, notes contents are assumed to contain plain
 *  text.
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/** Actual value of notes. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  JSON template for address.
 */
@interface GTLRDirectory_UserAddress : GTLRObject

/** Country. */
@property(nonatomic, copy, nullable) NSString *country;

/** Country code. */
@property(nonatomic, copy, nullable) NSString *countryCode;

/** Custom type. */
@property(nonatomic, copy, nullable) NSString *customType;

/** Extended Address. */
@property(nonatomic, copy, nullable) NSString *extendedAddress;

/** Formatted address. */
@property(nonatomic, copy, nullable) NSString *formatted;

/** Locality. */
@property(nonatomic, copy, nullable) NSString *locality;

/** Other parts of address. */
@property(nonatomic, copy, nullable) NSString *poBox;

/** Postal code. */
@property(nonatomic, copy, nullable) NSString *postalCode;

/**
 *  If this is user's primary address. Only one entry could be marked as
 *  primary.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *primary;

/** Region. */
@property(nonatomic, copy, nullable) NSString *region;

/**
 *  User supplied address was structured. Structured addresses are NOT supported
 *  at this time. You might be able to write structured addresses but any values
 *  will eventually be clobbered.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sourceIsStructured;

/** Street. */
@property(nonatomic, copy, nullable) NSString *streetAddress;

/**
 *  Each entry can have a type which indicates standard values of that entry.
 *  For example address could be of home work etc. In addition to the standard
 *  type an entry can have a custom type and can take any value. Such type
 *  should have the CUSTOM value as type and also have a customType value.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The Directory API manages aliases, which are alternative email addresses.
 */
@interface GTLRDirectory_UserAlias : GTLRObject

/** The alias email address. */
@property(nonatomic, copy, nullable) NSString *alias;

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The unique ID for the user.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The type of the API resource. For Alias resources, the value is
 *  `admin#directory#alias`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The user's primary email address. */
@property(nonatomic, copy, nullable) NSString *primaryEmail;

@end


/**
 *  JSON template for a set of custom properties (i.e. all fields in a
 *  particular schema)
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDirectory_UserCustomProperties : GTLRObject
@end


/**
 *  JSON template for an email.
 */
@interface GTLRDirectory_UserEmail : GTLRObject

/** Email id of the user. */
@property(nonatomic, copy, nullable) NSString *address;

/** Custom Type. */
@property(nonatomic, copy, nullable) NSString *customType;

/**
 *  If this is user's primary email. Only one entry could be marked as primary.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *primary;

/**
 *  Each entry can have a type which indicates standard types of that entry. For
 *  example email could be of home, work etc. In addition to the standard type,
 *  an entry can have a custom type and can take any value Such types should
 *  have the CUSTOM value as type and also have a customType value.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  JSON template for an externalId entry.
 */
@interface GTLRDirectory_UserExternalId : GTLRObject

/** Custom type. */
@property(nonatomic, copy, nullable) NSString *customType;

/** The type of the Id. */
@property(nonatomic, copy, nullable) NSString *type;

/** The value of the id. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRDirectory_UserGender
 */
@interface GTLRDirectory_UserGender : GTLRObject

/**
 *  AddressMeAs. A human-readable string containing the proper way to refer to
 *  the profile owner by humans for example he/him/his or they/them/their.
 */
@property(nonatomic, copy, nullable) NSString *addressMeAs;

/** Custom gender. */
@property(nonatomic, copy, nullable) NSString *customGender;

/** Gender. */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  JSON template for instant messenger of an user.
 */
@interface GTLRDirectory_UserIm : GTLRObject

/** Custom protocol. */
@property(nonatomic, copy, nullable) NSString *customProtocol;

/** Custom type. */
@property(nonatomic, copy, nullable) NSString *customType;

/** Instant messenger id. */
@property(nonatomic, copy, nullable) NSString *im;

/**
 *  If this is user's primary im. Only one entry could be marked as primary.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *primary;

/**
 *  Protocol used in the instant messenger. It should be one of the values from
 *  ImProtocolTypes map. Similar to type it can take a CUSTOM value and specify
 *  the custom name in customProtocol field.
 */
@property(nonatomic, copy, nullable) NSString *protocol;

/**
 *  Each entry can have a type which indicates standard types of that entry. For
 *  example instant messengers could be of home work etc. In addition to the
 *  standard type an entry can have a custom type and can take any value. Such
 *  types should have the CUSTOM value as type and also have a customType value.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  JSON template for a keyword entry.
 */
@interface GTLRDirectory_UserKeyword : GTLRObject

/** Custom Type. */
@property(nonatomic, copy, nullable) NSString *customType;

/**
 *  Each entry can have a type which indicates standard type of that entry. For
 *  example keyword could be of type occupation or outlook. In addition to the
 *  standard type an entry can have a custom type and can give it any name. Such
 *  types should have the CUSTOM value as type and also have a customType value.
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Keyword. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  JSON template for a language entry.
 */
@interface GTLRDirectory_UserLanguage : GTLRObject

/**
 *  Other language. User can provide their own language name if there is no
 *  corresponding ISO 639 language code. If this is set, `languageCode` can't be
 *  set.
 */
@property(nonatomic, copy, nullable) NSString *customLanguage;

/**
 *  ISO 639 string representation of a language. See [Language
 *  Codes](/admin-sdk/directory/v1/languages) for the list of supported codes.
 *  Valid language codes outside the supported set will be accepted by the API
 *  but may lead to unexpected behavior. Illegal values cause `SchemaException`.
 *  If this is set, `customLanguage` can't be set.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Optional. If present, controls whether the specified `languageCode` is the
 *  user's preferred language. If `customLanguage` is set, this can't be set.
 *  Allowed values are `preferred` and `not_preferred`.
 */
@property(nonatomic, copy, nullable) NSString *preference;

@end


/**
 *  JSON template for a location entry.
 */
@interface GTLRDirectory_UserLocation : GTLRObject

/**
 *  Textual location. This is most useful for display purposes to concisely
 *  describe the location. For example 'Mountain View, CA', 'Near Seattle',
 *  'US-NYC-9TH 9A209A.''
 */
@property(nonatomic, copy, nullable) NSString *area;

/** Building Identifier. */
@property(nonatomic, copy, nullable) NSString *buildingId;

/** Custom Type. */
@property(nonatomic, copy, nullable) NSString *customType;

/** Most specific textual code of individual desk location. */
@property(nonatomic, copy, nullable) NSString *deskCode;

/** Floor name/number. */
@property(nonatomic, copy, nullable) NSString *floorName;

/**
 *  Floor section. More specific location within the floor. For example if a
 *  floor is divided into sections 'A', 'B' and 'C' this field would identify
 *  one of those values.
 */
@property(nonatomic, copy, nullable) NSString *floorSection;

/**
 *  Each entry can have a type which indicates standard types of that entry. For
 *  example location could be of types default and desk. In addition to standard
 *  type an entry can have a custom type and can give it any name. Such types
 *  should have 'custom' as type and also have a customType value.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRDirectory_UserMakeAdmin
 */
@interface GTLRDirectory_UserMakeAdmin : GTLRObject

/**
 *  Indicates the administrator status of the user.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *status;

@end


/**
 *  GTLRDirectory_UserName
 */
@interface GTLRDirectory_UserName : GTLRObject

/** The user's last name. Required when creating a user account. */
@property(nonatomic, copy, nullable) NSString *familyName;

/**
 *  The user's full name formed by concatenating the first and last name values.
 */
@property(nonatomic, copy, nullable) NSString *fullName;

/** The user's first name. Required when creating a user account. */
@property(nonatomic, copy, nullable) NSString *givenName;

@end


/**
 *  JSON template for an organization entry.
 */
@interface GTLRDirectory_UserOrganization : GTLRObject

/** The cost center of the users department. */
@property(nonatomic, copy, nullable) NSString *costCenter;

/** Custom type. */
@property(nonatomic, copy, nullable) NSString *customType;

/** Department within the organization. */
@property(nonatomic, copy, nullable) NSString *department;

/**
 *  Description of the organization.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The domain to which the organization belongs to. */
@property(nonatomic, copy, nullable) NSString *domain;

/**
 *  The full-time equivalent millipercent within the organization (100000 =
 *  100%).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fullTimeEquivalent;

/** Location of the organization. This need not be fully qualified address. */
@property(nonatomic, copy, nullable) NSString *location;

/** Name of the organization */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If it user's primary organization.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *primary;

/** Symbol of the organization. */
@property(nonatomic, copy, nullable) NSString *symbol;

/** Title (designation) of the user in the organization. */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  Each entry can have a type which indicates standard types of that entry. For
 *  example organization could be of school work etc. In addition to the
 *  standard type an entry can have a custom type and can give it any name. Such
 *  types should have the CUSTOM value as type and also have a CustomType value.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  JSON template for a phone entry.
 */
@interface GTLRDirectory_UserPhone : GTLRObject

/** Custom Type. */
@property(nonatomic, copy, nullable) NSString *customType;

/**
 *  If this is user's primary phone or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *primary;

/**
 *  Each entry can have a type which indicates standard types of that entry. For
 *  example phone could be of home_fax work mobile etc. In addition to the
 *  standard type an entry can have a custom type and can give it any name. Such
 *  types should have the CUSTOM value as type and also have a customType value.
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Phone number. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRDirectory_UserPhoto
 */
@interface GTLRDirectory_UserPhoto : GTLRObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Height of the photo in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *height;

/**
 *  The ID the API uses to uniquely identify the user.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The type of the API resource. For Photo resources, this is
 *  `admin#directory#user#photo`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The MIME type of the photo. Allowed values are `JPEG`, `PNG`, `GIF`, `BMP`,
 *  `TIFF`, and web-safe base64 encoding.
 */
@property(nonatomic, copy, nullable) NSString *mimeType;

/**
 *  The user photo's upload data in [web-safe
 *  Base64](https://en.wikipedia.org/wiki/Base64#URL_applications) format in
 *  bytes. This means: * The slash (/) character is replaced with the underscore
 *  (_) character. * The plus sign (+) character is replaced with the hyphen (-)
 *  character. * The equals sign (=) character is replaced with the asterisk
 *  (*). * For padding, the period (.) character is used instead of the RFC-4648
 *  baseURL definition which uses the equals sign (=) for padding. This is done
 *  to simplify URL-parsing. * Whatever the size of the photo being uploaded,
 *  the API downsizes it to 96x96 pixels.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *photoData;

/** The user's primary email address. */
@property(nonatomic, copy, nullable) NSString *primaryEmail;

/**
 *  Width of the photo in pixels.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *width;

@end


/**
 *  JSON template for a POSIX account entry.
 */
@interface GTLRDirectory_UserPosixAccount : GTLRObject

/** A POSIX account field identifier. */
@property(nonatomic, copy, nullable) NSString *accountId;

/** The GECOS (user information) for this account. */
@property(nonatomic, copy, nullable) NSString *gecos;

/**
 *  The default group ID.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *gid;

/** The path to the home directory for this account. */
@property(nonatomic, copy, nullable) NSString *homeDirectory;

/** The operating system type for this account. */
@property(nonatomic, copy, nullable) NSString *operatingSystemType;

/**
 *  If this is user's primary account within the SystemId.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *primary;

/** The path to the login shell for this account. */
@property(nonatomic, copy, nullable) NSString *shell;

/** System identifier for which account Username or Uid apply to. */
@property(nonatomic, copy, nullable) NSString *systemId;

/**
 *  The POSIX compliant user ID.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *uid;

/** The username of the account. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  JSON template for a relation entry.
 */
@interface GTLRDirectory_UserRelation : GTLRObject

/** Custom Type. */
@property(nonatomic, copy, nullable) NSString *customType;

/**
 *  The relation of the user. Some of the possible values are mother father
 *  sister brother manager assistant partner.
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The name of the relation. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRDirectory_Users
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "users" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDirectory_Users : GTLRCollectionObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Kind of resource this is. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Token used to access next page of this result. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Event that triggered this response (only used in case of Push Response) */
@property(nonatomic, copy, nullable) NSString *triggerEvent;

/**
 *  A list of user objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_User *> *users;

@end


/**
 *  JSON template for a POSIX account entry.
 */
@interface GTLRDirectory_UserSshPublicKey : GTLRObject

/**
 *  An expiration time in microseconds since epoch.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expirationTimeUsec;

/** A SHA-256 fingerprint of the SSH public key. (Read-only) */
@property(nonatomic, copy, nullable) NSString *fingerprint;

/** An SSH public key. */
@property(nonatomic, copy, nullable) NSString *key;

@end


/**
 *  GTLRDirectory_UserUndelete
 */
@interface GTLRDirectory_UserUndelete : GTLRObject

/** OrgUnit of User */
@property(nonatomic, copy, nullable) NSString *orgUnitPath;

@end


/**
 *  JSON template for a website entry.
 */
@interface GTLRDirectory_UserWebsite : GTLRObject

/** Custom Type. */
@property(nonatomic, copy, nullable) NSString *customType;

/**
 *  If this is user's primary website or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *primary;

/**
 *  Each entry can have a type which indicates standard types of that entry. For
 *  example website could be of home work blog etc. In addition to the standard
 *  type an entry can have a custom type and can give it any name. Such types
 *  should have the CUSTOM value as type and also have a customType value.
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Website. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  The Directory API allows you to view, generate, and invalidate backup
 *  verification codes for a user.
 */
@interface GTLRDirectory_VerificationCode : GTLRObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The type of the resource. This is always `admin#directory#verificationCode`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The obfuscated unique ID of the user. */
@property(nonatomic, copy, nullable) NSString *userId;

/**
 *  A current verification code for the user. Invalidated or used verification
 *  codes are not returned as part of the result.
 */
@property(nonatomic, copy, nullable) NSString *verificationCode;

@end


/**
 *  JSON response template for list verification codes operation in Directory
 *  API.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRDirectory_VerificationCodes : GTLRCollectionObject

/** ETag of the resource. */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  A list of verification code resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDirectory_VerificationCode *> *items;

/**
 *  The type of the resource. This is always
 *  `admin#directory#verificationCodesList`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
