// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Admin SDK API (admin/directory_v1)
// Description:
//   Admin SDK lets administrators of enterprise domains to view and manage
//   resources like user, groups etc. It also provides audit and usage reports
//   of domain.
// Documentation:
//   https://developers.google.com/admin-sdk/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRDirectoryObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// coordinatesSource

/**
 *  Building.coordinates are set to the coordinates included in the request.
 *
 *  Value: "CLIENT_SPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryCoordinatesSourceClientSpecified;
/**
 *  Building.coordinates are automatically populated based on the postal
 *  address.
 *
 *  Value: "RESOLVED_FROM_ADDRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryCoordinatesSourceResolvedFromAddress;
/**
 *  Defaults to `RESOLVED_FROM_ADDRESS` if postal address is provided.
 *  Otherwise, defaults to `CLIENT_SPECIFIED` if coordinates are provided.
 *
 *  Value: "SOURCE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryCoordinatesSourceSourceUnspecified;

// ----------------------------------------------------------------------------
// event

/** Value: "add" */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryEventAdd;
/** Value: "delete" */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryEventDelete;
/**
 *  User Admin Status Change Event
 *
 *  Value: "makeAdmin"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryEventMakeAdmin;
/**
 *  User Undeleted Event
 *
 *  Value: "undelete"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryEventUndelete;
/**
 *  User Updated Event
 *
 *  Value: "update"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryEventUpdate;

// ----------------------------------------------------------------------------
// orderBy

/**
 *  Chrome device location as annotated by the administrator.
 *
 *  Value: "annotatedLocation"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryOrderByAnnotatedLocation;
/**
 *  Chromebook user as annotated by administrator.
 *
 *  Value: "annotatedUser"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryOrderByAnnotatedUser;
/**
 *  The serial number for a Google Sync mobile device. For Android devices, this
 *  is a software generated unique identifier.
 *
 *  Value: "deviceId"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryOrderByDeviceId;
/** Value: "email" */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryOrderByEmail;
/**
 *  User's family name.
 *
 *  Value: "familyName"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryOrderByFamilyName;
/**
 *  User's given name.
 *
 *  Value: "givenName"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryOrderByGivenName;
/** Value: "lastSync" */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryOrderByLastSync;
/**
 *  The mobile device's model.
 *
 *  Value: "model"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryOrderByModel;
/**
 *  The device owner's user name.
 *
 *  Value: "name"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryOrderByName;
/**
 *  Chrome device notes as annotated by the administrator.
 *
 *  Value: "notes"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryOrderByNotes;
/**
 *  The device's operating system.
 *
 *  Value: "os"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryOrderByOs;
/**
 *  The Chrome device serial number entered when the device was enabled.
 *
 *  Value: "serialNumber"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryOrderBySerialNumber;
/** Value: "status" */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryOrderByStatus;
/**
 *  Type of the device.
 *
 *  Value: "type"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryOrderByType;

// ----------------------------------------------------------------------------
// projection

/** Value: "basic" */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryProjectionBasic;
/** Value: "custom" */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryProjectionCustom;
/** Value: "full" */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryProjectionFull;

// ----------------------------------------------------------------------------
// sortOrder

/**
 *  Ascending order.
 *
 *  Value: "ASCENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectorySortOrderAscending;
/**
 *  Descending order.
 *
 *  Value: "DESCENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectorySortOrderDescending;

// ----------------------------------------------------------------------------
// type

/**
 *  All sub-organizational units.
 *
 *  Value: "all"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryTypeAll;
/**
 *  Immediate children only (default).
 *
 *  Value: "children"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryTypeChildren;

// ----------------------------------------------------------------------------
// viewType

/** Value: "admin_view" */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryViewTypeAdminView;
/**
 *  Results only include fields for the user that are publicly visible to other
 *  users in the domain.
 *
 *  Value: "domain_public"
 */
FOUNDATION_EXTERN NSString * const kGTLRDirectoryViewTypeDomainPublic;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other directory query classes.
 */
@interface GTLRDirectoryQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Deletes an ASP issued by a user.
 *
 *  Method: directory.asps.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserSecurity
 */
@interface GTLRDirectoryQuery_AspsDelete : GTLRDirectoryQuery

/** The unique ID of the ASP to be deleted. */
@property(nonatomic, assign) NSInteger codeId;

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes an ASP issued by a user.
 *
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *  @param codeId The unique ID of the ASP to be deleted.
 *
 *  @return GTLRDirectoryQuery_AspsDelete
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey
                          codeId:(NSInteger)codeId;

@end

/**
 *  Gets information about an ASP issued by a user.
 *
 *  Method: directory.asps.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserSecurity
 */
@interface GTLRDirectoryQuery_AspsGet : GTLRDirectoryQuery

/** The unique ID of the ASP. */
@property(nonatomic, assign) NSInteger codeId;

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRDirectory_Asp.
 *
 *  Gets information about an ASP issued by a user.
 *
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *  @param codeId The unique ID of the ASP.
 *
 *  @return GTLRDirectoryQuery_AspsGet
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey
                          codeId:(NSInteger)codeId;

@end

/**
 *  Lists the ASPs issued by a user.
 *
 *  Method: directory.asps.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserSecurity
 */
@interface GTLRDirectoryQuery_AspsList : GTLRDirectoryQuery

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRDirectory_Asps.
 *
 *  Lists the ASPs issued by a user.
 *
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *
 *  @return GTLRDirectoryQuery_AspsList
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey;

@end

/**
 *  Stops watching resources through this channel.
 *
 *  Method: admin.channels.stop
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryCloudPlatform
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 *    @c kGTLRAuthScopeDirectoryDirectoryUserAlias
 *    @c kGTLRAuthScopeDirectoryDirectoryUserAliasReadonly
 *    @c kGTLRAuthScopeDirectoryDirectoryUserReadonly
 */
@interface GTLRDirectoryQuery_ChannelsStop : GTLRDirectoryQuery

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Stops watching resources through this channel.
 *
 *  @param object The @c GTLRDirectory_Channel to include in the query.
 *
 *  @return GTLRDirectoryQuery_ChannelsStop
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Channel *)object;

@end

/**
 *  Takes an action that affects a Chrome OS Device. This includes
 *  deprovisioning, disabling, and re-enabling devices. *Warning:* *
 *  Deprovisioning a device will stop device policy syncing and remove
 *  device-level printers. After a device is deprovisioned, it must be wiped
 *  before it can be re-enrolled. * Lost or stolen devices should use the
 *  disable action. * Re-enabling a disabled device will consume a device
 *  license. If you do not have sufficient licenses available when completing
 *  the re-enable action, you will receive an error. For more information about
 *  deprovisioning and disabling devices, visit the [help
 *  center](https://support.google.com/chrome/a/answer/3523633).
 *
 *  Method: directory.chromeosdevices.action
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceChromeos
 */
@interface GTLRDirectoryQuery_ChromeosdevicesAction : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's `customerId`. The `customerId` is also returned as part of the
 *  [Users resource](/admin-sdk/directory/v1/reference/users).
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  The unique ID of the device. The `resourceId`s are returned in the response
 *  from the
 *  [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list)
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *resourceId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Takes an action that affects a Chrome OS Device. This includes
 *  deprovisioning, disabling, and re-enabling devices. *Warning:* *
 *  Deprovisioning a device will stop device policy syncing and remove
 *  device-level printers. After a device is deprovisioned, it must be wiped
 *  before it can be re-enrolled. * Lost or stolen devices should use the
 *  disable action. * Re-enabling a disabled device will consume a device
 *  license. If you do not have sufficient licenses available when completing
 *  the re-enable action, you will receive an error. For more information about
 *  deprovisioning and disabling devices, visit the [help
 *  center](https://support.google.com/chrome/a/answer/3523633).
 *
 *  @param object The @c GTLRDirectory_ChromeOsDeviceAction to include in the
 *    query.
 *  @param customerId The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's `customerId`. The `customerId` is also returned
 *    as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
 *  @param resourceId The unique ID of the device. The `resourceId`s are
 *    returned in the response from the
 *    [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list)
 *    method.
 *
 *  @return GTLRDirectoryQuery_ChromeosdevicesAction
 */
+ (instancetype)queryWithObject:(GTLRDirectory_ChromeOsDeviceAction *)object
                     customerId:(NSString *)customerId
                     resourceId:(NSString *)resourceId;

@end

/**
 *  Retrieves a Chrome OS device's properties.
 *
 *  Method: directory.chromeosdevices.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceChromeos
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceChromeosReadonly
 */
@interface GTLRDirectoryQuery_ChromeosdevicesGet : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's `customerId`. The `customerId` is also returned as part of the
 *  [Users resource](/admin-sdk/directory/v1/reference/users).
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  The unique ID of the device. The `deviceId`s are returned in the response
 *  from the
 *  [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list)
 *  method.
 */
@property(nonatomic, copy, nullable) NSString *deviceId;

/**
 *  Determines whether the response contains the full list of properties or only
 *  a subset.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryProjectionBasic Includes only the basic metadata
 *        fields (e.g., deviceId, serialNumber, status, and user) (Value:
 *        "BASIC")
 *    @arg @c kGTLRDirectoryProjectionFull Includes all metadata fields (Value:
 *        "FULL")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  Fetches a @c GTLRDirectory_ChromeOsDevice.
 *
 *  Retrieves a Chrome OS device's properties.
 *
 *  @param customerId The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's `customerId`. The `customerId` is also returned
 *    as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
 *  @param deviceId The unique ID of the device. The `deviceId`s are returned in
 *    the response from the
 *    [chromeosdevices.list](/admin-sdk/directory/v1/reference/chromeosdevices/list)
 *    method.
 *
 *  @return GTLRDirectoryQuery_ChromeosdevicesGet
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                           deviceId:(NSString *)deviceId;

@end

/**
 *  Retrieves a paginated list of Chrome OS devices within an account.
 *
 *  Method: directory.chromeosdevices.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceChromeos
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceChromeosReadonly
 */
@interface GTLRDirectoryQuery_ChromeosdevicesList : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's `customerId`. The `customerId` is also returned as part of the
 *  [Users resource](/admin-sdk/directory/v1/reference/users).
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Return devices from all child orgunits, as well as the specified org unit.
 *  If this is set to true, 'orgUnitPath' must be provided.
 */
@property(nonatomic, assign) BOOL includeChildOrgunits;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 100.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Device property to use for sorting results.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryOrderByAnnotatedLocation Chrome device location as
 *        annotated by the administrator. (Value: "annotatedLocation")
 *    @arg @c kGTLRDirectoryOrderByAnnotatedUser Chromebook user as annotated by
 *        administrator. (Value: "annotatedUser")
 *    @arg @c kGTLRDirectoryOrderByLastSync The date and time the Chrome device
 *        was last synchronized with the policy settings in the Admin console.
 *        (Value: "lastSync")
 *    @arg @c kGTLRDirectoryOrderByNotes Chrome device notes as annotated by the
 *        administrator. (Value: "notes")
 *    @arg @c kGTLRDirectoryOrderBySerialNumber The Chrome device serial number
 *        entered when the device was enabled. (Value: "serialNumber")
 *    @arg @c kGTLRDirectoryOrderByStatus Chrome device status. For more
 *        information, see the <a
 *        [chromeosdevices](/admin-sdk/directory/v1/reference/chromeosdevices.html).
 *        (Value: "status")
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The full path of the organizational unit (minus the leading `/`) or its
 *  unique ID.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitPath;

/**
 *  The `pageToken` query parameter is used to request the next page of query
 *  results. The follow-on request's `pageToken` query parameter is the
 *  `nextPageToken` from your previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Restrict information returned to a set of selected fields.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryProjectionBasic Includes only the basic metadata
 *        fields (e.g., deviceId, serialNumber, status, and user) (Value:
 *        "BASIC")
 *    @arg @c kGTLRDirectoryProjectionFull Includes all metadata fields (Value:
 *        "FULL")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  Search string in the format given at
 *  https://developers.google.com/admin-sdk/directory/v1/list-query-operators
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Whether to return results in ascending or descending order. Must be used
 *  with the `orderBy` parameter.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectorySortOrderAscending Ascending order. (Value:
 *        "ASCENDING")
 *    @arg @c kGTLRDirectorySortOrderDescending Descending order. (Value:
 *        "DESCENDING")
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDirectory_ChromeOsDevices.
 *
 *  Retrieves a paginated list of Chrome OS devices within an account.
 *
 *  @param customerId The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's `customerId`. The `customerId` is also returned
 *    as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
 *
 *  @return GTLRDirectoryQuery_ChromeosdevicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId;

@end

/**
 *  Moves or inserts multiple Chrome OS devices to an organizational unit. You
 *  can move up to 50 devices at once.
 *
 *  Method: directory.chromeosdevices.moveDevicesToOu
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceChromeos
 */
@interface GTLRDirectoryQuery_ChromeosdevicesMoveDevicesToOu : GTLRDirectoryQuery

/** Immutable. ID of the Google Workspace account */
@property(nonatomic, copy, nullable) NSString *customerId;

/** Full path of the target organizational unit or its ID */
@property(nonatomic, copy, nullable) NSString *orgUnitPath;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Moves or inserts multiple Chrome OS devices to an organizational unit. You
 *  can move up to 50 devices at once.
 *
 *  @param object The @c GTLRDirectory_ChromeOsMoveDevicesToOu to include in the
 *    query.
 *  @param customerId Immutable. ID of the Google Workspace account
 *  @param orgUnitPath Full path of the target organizational unit or its ID
 *
 *  @return GTLRDirectoryQuery_ChromeosdevicesMoveDevicesToOu
 */
+ (instancetype)queryWithObject:(GTLRDirectory_ChromeOsMoveDevicesToOu *)object
                     customerId:(NSString *)customerId
                    orgUnitPath:(NSString *)orgUnitPath;

@end

/**
 *  Updates a device's updatable properties, such as `annotatedUser`,
 *  `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This
 *  method supports [patch
 *  semantics](/admin-sdk/directory/v1/guides/performance#patch).
 *
 *  Method: directory.chromeosdevices.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceChromeos
 */
@interface GTLRDirectoryQuery_ChromeosdevicesPatch : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's `customerId`. The `customerId` is also returned as part of the
 *  [Users resource](/admin-sdk/directory/v1/reference/users).
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  The unique ID of the device. The `deviceId`s are returned in the response
 *  from the
 *  [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method.
 */
@property(nonatomic, copy, nullable) NSString *deviceId;

/**
 *  Restrict information returned to a set of selected fields.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryProjectionBasic Includes only the basic metadata
 *        fields (e.g., deviceId, serialNumber, status, and user) (Value:
 *        "BASIC")
 *    @arg @c kGTLRDirectoryProjectionFull Includes all metadata fields (Value:
 *        "FULL")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  Fetches a @c GTLRDirectory_ChromeOsDevice.
 *
 *  Updates a device's updatable properties, such as `annotatedUser`,
 *  `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`. This
 *  method supports [patch
 *  semantics](/admin-sdk/directory/v1/guides/performance#patch).
 *
 *  @param object The @c GTLRDirectory_ChromeOsDevice to include in the query.
 *  @param customerId The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's `customerId`. The `customerId` is also returned
 *    as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
 *  @param deviceId The unique ID of the device. The `deviceId`s are returned in
 *    the response from the
 *    [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list)
 *    method.
 *
 *  @return GTLRDirectoryQuery_ChromeosdevicesPatch
 */
+ (instancetype)queryWithObject:(GTLRDirectory_ChromeOsDevice *)object
                     customerId:(NSString *)customerId
                       deviceId:(NSString *)deviceId;

@end

/**
 *  Updates a device's updatable properties, such as `annotatedUser`,
 *  `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`.
 *
 *  Method: directory.chromeosdevices.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceChromeos
 */
@interface GTLRDirectoryQuery_ChromeosdevicesUpdate : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's `customerId`. The `customerId` is also returned as part of the
 *  [Users resource](/admin-sdk/directory/v1/reference/users).
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  The unique ID of the device. The `deviceId`s are returned in the response
 *  from the
 *  [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list) method.
 */
@property(nonatomic, copy, nullable) NSString *deviceId;

/**
 *  Restrict information returned to a set of selected fields.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryProjectionBasic Includes only the basic metadata
 *        fields (e.g., deviceId, serialNumber, status, and user) (Value:
 *        "BASIC")
 *    @arg @c kGTLRDirectoryProjectionFull Includes all metadata fields (Value:
 *        "FULL")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  Fetches a @c GTLRDirectory_ChromeOsDevice.
 *
 *  Updates a device's updatable properties, such as `annotatedUser`,
 *  `annotatedLocation`, `notes`, `orgUnitPath`, or `annotatedAssetId`.
 *
 *  @param object The @c GTLRDirectory_ChromeOsDevice to include in the query.
 *  @param customerId The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's `customerId`. The `customerId` is also returned
 *    as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
 *  @param deviceId The unique ID of the device. The `deviceId`s are returned in
 *    the response from the
 *    [chromeosdevices.list](/admin-sdk/v1/reference/chromeosdevices/list)
 *    method.
 *
 *  @return GTLRDirectoryQuery_ChromeosdevicesUpdate
 */
+ (instancetype)queryWithObject:(GTLRDirectory_ChromeOsDevice *)object
                     customerId:(NSString *)customerId
                       deviceId:(NSString *)deviceId;

@end

/**
 *  Gets command data a specific command issued to the device.
 *
 *  Method: admin.customer.devices.chromeos.commands.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceChromeos
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceChromeosReadonly
 */
@interface GTLRDirectoryQuery_CustomerDevicesChromeosCommandsGet : GTLRDirectoryQuery

/** Immutable. ID of Chrome OS Device Command. */
@property(nonatomic, assign) long long commandId;

/** Immutable. ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customerId;

/** Immutable. ID of Chrome OS Device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/**
 *  Fetches a @c GTLRDirectory_ChromeosdevicesCommand.
 *
 *  Gets command data a specific command issued to the device.
 *
 *  @param customerId Immutable. ID of the Google Workspace account.
 *  @param deviceId Immutable. ID of Chrome OS Device.
 *  @param commandId Immutable. ID of Chrome OS Device Command.
 *
 *  @return GTLRDirectoryQuery_CustomerDevicesChromeosCommandsGet
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                           deviceId:(NSString *)deviceId
                          commandId:(long long)commandId;

@end

/**
 *  Issues a command for the device to execute.
 *
 *  Method: admin.customer.devices.chromeos.issueCommand
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceChromeos
 */
@interface GTLRDirectoryQuery_CustomerDevicesChromeosIssueCommand : GTLRDirectoryQuery

/** Immutable. ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customerId;

/** Immutable. ID of Chrome OS Device. */
@property(nonatomic, copy, nullable) NSString *deviceId;

/**
 *  Fetches a @c GTLRDirectory_ChromeosdevicesIssueCommandResponse.
 *
 *  Issues a command for the device to execute.
 *
 *  @param object The @c GTLRDirectory_ChromeosdevicesIssueCommandRequest to
 *    include in the query.
 *  @param customerId Immutable. ID of the Google Workspace account.
 *  @param deviceId Immutable. ID of Chrome OS Device.
 *
 *  @return GTLRDirectoryQuery_CustomerDevicesChromeosIssueCommand
 */
+ (instancetype)queryWithObject:(GTLRDirectory_ChromeosdevicesIssueCommandRequest *)object
                     customerId:(NSString *)customerId
                       deviceId:(NSString *)deviceId;

@end

/**
 *  Creates printers under given Organization Unit.
 *
 *  Method: admin.customers.chrome.printers.batchCreatePrinters
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryChromePrinters
 */
@interface GTLRDirectoryQuery_CustomersChromePrintersBatchCreatePrinters : GTLRDirectoryQuery

/** Required. The name of the customer. Format: customers/{customer_id} */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDirectory_BatchCreatePrintersResponse.
 *
 *  Creates printers under given Organization Unit.
 *
 *  @param object The @c GTLRDirectory_BatchCreatePrintersRequest to include in
 *    the query.
 *  @param parent Required. The name of the customer. Format:
 *    customers/{customer_id}
 *
 *  @return GTLRDirectoryQuery_CustomersChromePrintersBatchCreatePrinters
 */
+ (instancetype)queryWithObject:(GTLRDirectory_BatchCreatePrintersRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes printers in batch.
 *
 *  Method: admin.customers.chrome.printers.batchDeletePrinters
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryChromePrinters
 */
@interface GTLRDirectoryQuery_CustomersChromePrintersBatchDeletePrinters : GTLRDirectoryQuery

/** Required. The name of the customer. Format: customers/{customer_id} */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDirectory_BatchDeletePrintersResponse.
 *
 *  Deletes printers in batch.
 *
 *  @param object The @c GTLRDirectory_BatchDeletePrintersRequest to include in
 *    the query.
 *  @param parent Required. The name of the customer. Format:
 *    customers/{customer_id}
 *
 *  @return GTLRDirectoryQuery_CustomersChromePrintersBatchDeletePrinters
 */
+ (instancetype)queryWithObject:(GTLRDirectory_BatchDeletePrintersRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a printer under given Organization Unit.
 *
 *  Method: admin.customers.chrome.printers.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryChromePrinters
 */
@interface GTLRDirectoryQuery_CustomersChromePrintersCreate : GTLRDirectoryQuery

/** Required. The name of the customer. Format: customers/{customer_id} */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDirectory_Printer.
 *
 *  Creates a printer under given Organization Unit.
 *
 *  @param object The @c GTLRDirectory_Printer to include in the query.
 *  @param parent Required. The name of the customer. Format:
 *    customers/{customer_id}
 *
 *  @return GTLRDirectoryQuery_CustomersChromePrintersCreate
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Printer *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a `Printer`.
 *
 *  Method: admin.customers.chrome.printers.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryChromePrinters
 */
@interface GTLRDirectoryQuery_CustomersChromePrintersDelete : GTLRDirectoryQuery

/**
 *  Required. The name of the printer to be updated. Format:
 *  customers/{customer_id}/chrome/printers/{printer_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDirectory_Empty.
 *
 *  Deletes a `Printer`.
 *
 *  @param name Required. The name of the printer to be updated. Format:
 *    customers/{customer_id}/chrome/printers/{printer_id}
 *
 *  @return GTLRDirectoryQuery_CustomersChromePrintersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns a `Printer` resource (printer's config).
 *
 *  Method: admin.customers.chrome.printers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryChromePrinters
 *    @c kGTLRAuthScopeDirectoryChromePrintersReadonly
 */
@interface GTLRDirectoryQuery_CustomersChromePrintersGet : GTLRDirectoryQuery

/**
 *  Required. The name of the printer to retrieve. Format:
 *  customers/{customer_id}/chrome/printers/{printer_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDirectory_Printer.
 *
 *  Returns a `Printer` resource (printer's config).
 *
 *  @param name Required. The name of the printer to retrieve. Format:
 *    customers/{customer_id}/chrome/printers/{printer_id}
 *
 *  @return GTLRDirectoryQuery_CustomersChromePrintersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List printers configs.
 *
 *  Method: admin.customers.chrome.printers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryChromePrinters
 *    @c kGTLRAuthScopeDirectoryChromePrintersReadonly
 */
@interface GTLRDirectoryQuery_CustomersChromePrintersList : GTLRDirectoryQuery

/**
 *  Search query. Search syntax is shared between this api and Admin Console
 *  printers pages.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The order to sort results by. Must be one of display_name, description,
 *  make_and_model, or create_time. Default order is ascending, but descending
 *  order can be returned by appending "desc" to the order_by field. For
 *  instance, "description desc" will return the printers sorted by description
 *  in descending order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Organization Unit that we want to list the printers for. When org_unit is
 *  not present in the request then all printers of the customer are returned
 *  (or filtered). When org_unit is present in the request then only printers
 *  available to this OU will be returned (owned or inherited). You may see if
 *  printer is owned or inherited for this OU by looking at Printer.org_unit_id.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/**
 *  The maximum number of objects to return. The service may return fewer than
 *  this value.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** A page token, received from a previous call. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the customer who owns this collection of printers.
 *  Format: customers/{customer_id}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDirectory_ListPrintersResponse.
 *
 *  List printers configs.
 *
 *  @param parent Required. The name of the customer who owns this collection of
 *    printers. Format: customers/{customer_id}
 *
 *  @return GTLRDirectoryQuery_CustomersChromePrintersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists the supported printer models.
 *
 *  Method: admin.customers.chrome.printers.listPrinterModels
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryChromePrinters
 *    @c kGTLRAuthScopeDirectoryChromePrintersReadonly
 */
@interface GTLRDirectoryQuery_CustomersChromePrintersListPrinterModels : GTLRDirectoryQuery

/**
 *  Filer to list only models by a given manufacturer in format:
 *  "manufacturer:Brother". Search syntax is shared between this api and Admin
 *  Console printers pages.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The maximum number of objects to return. The service may return fewer than
 *  this value.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** A page token, received from a previous call. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the customer who owns this collection of printers.
 *  Format: customers/{customer_id}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDirectory_ListPrinterModelsResponse.
 *
 *  Lists the supported printer models.
 *
 *  @param parent Required. The name of the customer who owns this collection of
 *    printers. Format: customers/{customer_id}
 *
 *  @return GTLRDirectoryQuery_CustomersChromePrintersListPrinterModels
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a `Printer` resource.
 *
 *  Method: admin.customers.chrome.printers.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryChromePrinters
 */
@interface GTLRDirectoryQuery_CustomersChromePrintersPatch : GTLRDirectoryQuery

/**
 *  The list of fields to be cleared. Note, some of the fields are read only and
 *  cannot be updated. Values for not specified fields will be patched.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *clearMask;

/**
 *  The resource name of the Printer object, in the format
 *  customers/{customer-id}/printers/{printer-id} (During printer creation leave
 *  empty)
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to be updated. Note, some of the fields are read only and
 *  cannot be updated. Values for not specified fields will be patched.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDirectory_Printer.
 *
 *  Updates a `Printer` resource.
 *
 *  @param object The @c GTLRDirectory_Printer to include in the query.
 *  @param name The resource name of the Printer object, in the format
 *    customers/{customer-id}/printers/{printer-id} (During printer creation
 *    leave empty)
 *
 *  @return GTLRDirectoryQuery_CustomersChromePrintersPatch
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Printer *)object
                           name:(NSString *)name;

@end

/**
 *  Creates multiple print servers.
 *
 *  Method: admin.customers.chrome.printServers.batchCreatePrintServers
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryChromePrinters
 */
@interface GTLRDirectoryQuery_CustomersChromePrintServersBatchCreatePrintServers : GTLRDirectoryQuery

/**
 *  Required. The [unique
 *  ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers)
 *  of the customer's Google Workspace account. Format: `customers/{id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDirectory_BatchCreatePrintServersResponse.
 *
 *  Creates multiple print servers.
 *
 *  @param object The @c GTLRDirectory_BatchCreatePrintServersRequest to include
 *    in the query.
 *  @param parent Required. The [unique
 *    ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers)
 *    of the customer's Google Workspace account. Format: `customers/{id}`
 *
 *  @return GTLRDirectoryQuery_CustomersChromePrintServersBatchCreatePrintServers
 */
+ (instancetype)queryWithObject:(GTLRDirectory_BatchCreatePrintServersRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes multiple print servers.
 *
 *  Method: admin.customers.chrome.printServers.batchDeletePrintServers
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryChromePrinters
 */
@interface GTLRDirectoryQuery_CustomersChromePrintServersBatchDeletePrintServers : GTLRDirectoryQuery

/**
 *  Required. The [unique
 *  ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers)
 *  of the customer's Google Workspace account. Format:
 *  `customers/{customer.id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDirectory_BatchDeletePrintServersResponse.
 *
 *  Deletes multiple print servers.
 *
 *  @param object The @c GTLRDirectory_BatchDeletePrintServersRequest to include
 *    in the query.
 *  @param parent Required. The [unique
 *    ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers)
 *    of the customer's Google Workspace account. Format:
 *    `customers/{customer.id}`
 *
 *  @return GTLRDirectoryQuery_CustomersChromePrintServersBatchDeletePrintServers
 */
+ (instancetype)queryWithObject:(GTLRDirectory_BatchDeletePrintServersRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a print server.
 *
 *  Method: admin.customers.chrome.printServers.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryChromePrinters
 */
@interface GTLRDirectoryQuery_CustomersChromePrintServersCreate : GTLRDirectoryQuery

/**
 *  Required. The [unique
 *  ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers)
 *  of the customer's Google Workspace account. Format: `customers/{id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDirectory_PrintServer.
 *
 *  Creates a print server.
 *
 *  @param object The @c GTLRDirectory_PrintServer to include in the query.
 *  @param parent Required. The [unique
 *    ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers)
 *    of the customer's Google Workspace account. Format: `customers/{id}`
 *
 *  @return GTLRDirectoryQuery_CustomersChromePrintServersCreate
 */
+ (instancetype)queryWithObject:(GTLRDirectory_PrintServer *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a print server.
 *
 *  Method: admin.customers.chrome.printServers.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryChromePrinters
 */
@interface GTLRDirectoryQuery_CustomersChromePrintServersDelete : GTLRDirectoryQuery

/**
 *  Required. The name of the print server to be deleted. Format:
 *  `customers/{customer.id}/chrome/printServers/{print_server.id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDirectory_Empty.
 *
 *  Deletes a print server.
 *
 *  @param name Required. The name of the print server to be deleted. Format:
 *    `customers/{customer.id}/chrome/printServers/{print_server.id}`
 *
 *  @return GTLRDirectoryQuery_CustomersChromePrintServersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns a print server's configuration.
 *
 *  Method: admin.customers.chrome.printServers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryChromePrinters
 *    @c kGTLRAuthScopeDirectoryChromePrintersReadonly
 */
@interface GTLRDirectoryQuery_CustomersChromePrintServersGet : GTLRDirectoryQuery

/**
 *  Required. The [unique
 *  ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers)
 *  of the customer's Google Workspace account. Format: `customers/{id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDirectory_PrintServer.
 *
 *  Returns a print server's configuration.
 *
 *  @param name Required. The [unique
 *    ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers)
 *    of the customer's Google Workspace account. Format: `customers/{id}`
 *
 *  @return GTLRDirectoryQuery_CustomersChromePrintServersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists print server configurations.
 *
 *  Method: admin.customers.chrome.printServers.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryChromePrinters
 *    @c kGTLRAuthScopeDirectoryChromePrintersReadonly
 */
@interface GTLRDirectoryQuery_CustomersChromePrintServersList : GTLRDirectoryQuery

/**
 *  Search query in [Common Expression Language
 *  syntax](https://github.com/google/cel-spec). Supported filters are
 *  `display_name`, `description`, and `uri`. Example:
 *  `printServer.displayName=='marketing-queue'`.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Sort order for results. Supported values are `display_name`, `description`,
 *  or `create_time`. Default order is ascending, but descending order can be
 *  returned by appending "desc" to the `order_by` field. For instance,
 *  `orderBy=='description desc'` returns the print servers sorted by
 *  description in descending order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  If `org_unit_id` is present in the request, only print servers owned or
 *  inherited by the organizational unit (OU) are returned. If the `PrintServer`
 *  resource's `org_unit_id` matches the one in the request, the OU owns the
 *  server. If `org_unit_id` is not specified in the request, all print servers
 *  are returned or filtered against.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitId;

/**
 *  The maximum number of objects to return (default `100`, max `100`). The
 *  service might return fewer than this value.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A generated token to paginate results (the `next_page_token` from a previous
 *  call).
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The [unique
 *  ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers)
 *  of the customer's Google Workspace account. Format: `customers/{id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDirectory_ListPrintServersResponse.
 *
 *  Lists print server configurations.
 *
 *  @param parent Required. The [unique
 *    ID](https://developers.google.com/admin-sdk/directory/reference/rest/v1/customers)
 *    of the customer's Google Workspace account. Format: `customers/{id}`
 *
 *  @return GTLRDirectoryQuery_CustomersChromePrintServersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a print server's configuration.
 *
 *  Method: admin.customers.chrome.printServers.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryChromePrinters
 */
@interface GTLRDirectoryQuery_CustomersChromePrintServersPatch : GTLRDirectoryQuery

/**
 *  Immutable. Resource name of the print server. Leave empty when creating.
 *  Format: `customers/{customer.id}/printServers/{print_server.id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The list of fields to update. Some fields are read-only and cannot be
 *  updated. Values for unspecified fields are patched.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDirectory_PrintServer.
 *
 *  Updates a print server's configuration.
 *
 *  @param object The @c GTLRDirectory_PrintServer to include in the query.
 *  @param name Immutable. Resource name of the print server. Leave empty when
 *    creating. Format: `customers/{customer.id}/printServers/{print_server.id}`
 *
 *  @return GTLRDirectoryQuery_CustomersChromePrintServersPatch
 */
+ (instancetype)queryWithObject:(GTLRDirectory_PrintServer *)object
                           name:(NSString *)name;

@end

/**
 *  Retrieves a customer.
 *
 *  Method: directory.customers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryCustomer
 *    @c kGTLRAuthScopeDirectoryDirectoryCustomerReadonly
 */
@interface GTLRDirectoryQuery_CustomersGet : GTLRDirectoryQuery

/** Id of the customer to be retrieved */
@property(nonatomic, copy, nullable) NSString *customerKey;

/**
 *  Fetches a @c GTLRDirectory_Customer.
 *
 *  Retrieves a customer.
 *
 *  @param customerKey Id of the customer to be retrieved
 *
 *  @return GTLRDirectoryQuery_CustomersGet
 */
+ (instancetype)queryWithCustomerKey:(NSString *)customerKey;

@end

/**
 *  Patches a customer.
 *
 *  Method: directory.customers.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryCustomer
 */
@interface GTLRDirectoryQuery_CustomersPatch : GTLRDirectoryQuery

/** Id of the customer to be updated */
@property(nonatomic, copy, nullable) NSString *customerKey;

/**
 *  Fetches a @c GTLRDirectory_Customer.
 *
 *  Patches a customer.
 *
 *  @param object The @c GTLRDirectory_Customer to include in the query.
 *  @param customerKey Id of the customer to be updated
 *
 *  @return GTLRDirectoryQuery_CustomersPatch
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Customer *)object
                    customerKey:(NSString *)customerKey;

@end

/**
 *  Updates a customer.
 *
 *  Method: directory.customers.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryCustomer
 */
@interface GTLRDirectoryQuery_CustomersUpdate : GTLRDirectoryQuery

/** Id of the customer to be updated */
@property(nonatomic, copy, nullable) NSString *customerKey;

/**
 *  Fetches a @c GTLRDirectory_Customer.
 *
 *  Updates a customer.
 *
 *  @param object The @c GTLRDirectory_Customer to include in the query.
 *  @param customerKey Id of the customer to be updated
 *
 *  @return GTLRDirectoryQuery_CustomersUpdate
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Customer *)object
                    customerKey:(NSString *)customerKey;

@end

/**
 *  Deletes a domain Alias of the customer.
 *
 *  Method: directory.domainAliases.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDomain
 */
@interface GTLRDirectoryQuery_DomainAliasesDelete : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/** Name of domain alias to be retrieved. */
@property(nonatomic, copy, nullable) NSString *domainAliasName;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a domain Alias of the customer.
 *
 *  @param customer Immutable ID of the Google Workspace account.
 *  @param domainAliasName Name of domain alias to be retrieved.
 *
 *  @return GTLRDirectoryQuery_DomainAliasesDelete
 */
+ (instancetype)queryWithCustomer:(NSString *)customer
                  domainAliasName:(NSString *)domainAliasName;

@end

/**
 *  Retrieves a domain alias of the customer.
 *
 *  Method: directory.domainAliases.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDomain
 *    @c kGTLRAuthScopeDirectoryDirectoryDomainReadonly
 */
@interface GTLRDirectoryQuery_DomainAliasesGet : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/** Name of domain alias to be retrieved. */
@property(nonatomic, copy, nullable) NSString *domainAliasName;

/**
 *  Fetches a @c GTLRDirectory_DomainAlias.
 *
 *  Retrieves a domain alias of the customer.
 *
 *  @param customer Immutable ID of the Google Workspace account.
 *  @param domainAliasName Name of domain alias to be retrieved.
 *
 *  @return GTLRDirectoryQuery_DomainAliasesGet
 */
+ (instancetype)queryWithCustomer:(NSString *)customer
                  domainAliasName:(NSString *)domainAliasName;

@end

/**
 *  Inserts a domain alias of the customer.
 *
 *  Method: directory.domainAliases.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDomain
 */
@interface GTLRDirectoryQuery_DomainAliasesInsert : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRDirectory_DomainAlias.
 *
 *  Inserts a domain alias of the customer.
 *
 *  @param object The @c GTLRDirectory_DomainAlias to include in the query.
 *  @param customer Immutable ID of the Google Workspace account.
 *
 *  @return GTLRDirectoryQuery_DomainAliasesInsert
 */
+ (instancetype)queryWithObject:(GTLRDirectory_DomainAlias *)object
                       customer:(NSString *)customer;

@end

/**
 *  Lists the domain aliases of the customer.
 *
 *  Method: directory.domainAliases.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDomain
 *    @c kGTLRAuthScopeDirectoryDirectoryDomainReadonly
 */
@interface GTLRDirectoryQuery_DomainAliasesList : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/** Name of the parent domain for which domain aliases are to be fetched. */
@property(nonatomic, copy, nullable) NSString *parentDomainName;

/**
 *  Fetches a @c GTLRDirectory_DomainAliases.
 *
 *  Lists the domain aliases of the customer.
 *
 *  @param customer Immutable ID of the Google Workspace account.
 *
 *  @return GTLRDirectoryQuery_DomainAliasesList
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Deletes a domain of the customer.
 *
 *  Method: directory.domains.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDomain
 */
@interface GTLRDirectoryQuery_DomainsDelete : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/** Name of domain to be deleted */
@property(nonatomic, copy, nullable) NSString *domainName;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a domain of the customer.
 *
 *  @param customer Immutable ID of the Google Workspace account.
 *  @param domainName Name of domain to be deleted
 *
 *  @return GTLRDirectoryQuery_DomainsDelete
 */
+ (instancetype)queryWithCustomer:(NSString *)customer
                       domainName:(NSString *)domainName;

@end

/**
 *  Retrieves a domain of the customer.
 *
 *  Method: directory.domains.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDomain
 *    @c kGTLRAuthScopeDirectoryDirectoryDomainReadonly
 */
@interface GTLRDirectoryQuery_DomainsGet : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/** Name of domain to be retrieved */
@property(nonatomic, copy, nullable) NSString *domainName;

/**
 *  Fetches a @c GTLRDirectory_Domains.
 *
 *  Retrieves a domain of the customer.
 *
 *  @param customer Immutable ID of the Google Workspace account.
 *  @param domainName Name of domain to be retrieved
 *
 *  @return GTLRDirectoryQuery_DomainsGet
 */
+ (instancetype)queryWithCustomer:(NSString *)customer
                       domainName:(NSString *)domainName;

@end

/**
 *  Inserts a domain of the customer.
 *
 *  Method: directory.domains.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDomain
 */
@interface GTLRDirectoryQuery_DomainsInsert : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRDirectory_Domains.
 *
 *  Inserts a domain of the customer.
 *
 *  @param object The @c GTLRDirectory_Domains to include in the query.
 *  @param customer Immutable ID of the Google Workspace account.
 *
 *  @return GTLRDirectoryQuery_DomainsInsert
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Domains *)object
                       customer:(NSString *)customer;

@end

/**
 *  Lists the domains of the customer.
 *
 *  Method: directory.domains.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDomain
 *    @c kGTLRAuthScopeDirectoryDirectoryDomainReadonly
 */
@interface GTLRDirectoryQuery_DomainsList : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRDirectory_Domains2.
 *
 *  Lists the domains of the customer.
 *
 *  @param customer Immutable ID of the Google Workspace account.
 *
 *  @return GTLRDirectoryQuery_DomainsList
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Removes an alias.
 *
 *  Method: directory.groups.aliases.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryGroup
 */
@interface GTLRDirectoryQuery_GroupsAliasesDelete : GTLRDirectoryQuery

/** The alias to be removed */
@property(nonatomic, copy, nullable) NSString *alias;

/**
 *  Identifies the group in the API request. The value can be the group's email
 *  address, group alias, or the unique group ID.
 */
@property(nonatomic, copy, nullable) NSString *groupKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes an alias.
 *
 *  @param groupKey Identifies the group in the API request. The value can be
 *    the group's email address, group alias, or the unique group ID.
 *  @param alias The alias to be removed
 *
 *  @return GTLRDirectoryQuery_GroupsAliasesDelete
 */
+ (instancetype)queryWithGroupKey:(NSString *)groupKey
                            alias:(NSString *)alias;

@end

/**
 *  Adds an alias for the group.
 *
 *  Method: directory.groups.aliases.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryGroup
 */
@interface GTLRDirectoryQuery_GroupsAliasesInsert : GTLRDirectoryQuery

/**
 *  Identifies the group in the API request. The value can be the group's email
 *  address, group alias, or the unique group ID.
 */
@property(nonatomic, copy, nullable) NSString *groupKey;

/**
 *  Fetches a @c GTLRDirectory_Alias.
 *
 *  Adds an alias for the group.
 *
 *  @param object The @c GTLRDirectory_Alias to include in the query.
 *  @param groupKey Identifies the group in the API request. The value can be
 *    the group's email address, group alias, or the unique group ID.
 *
 *  @return GTLRDirectoryQuery_GroupsAliasesInsert
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Alias *)object
                       groupKey:(NSString *)groupKey;

@end

/**
 *  Lists all aliases for a group.
 *
 *  Method: directory.groups.aliases.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryGroup
 *    @c kGTLRAuthScopeDirectoryDirectoryGroupReadonly
 */
@interface GTLRDirectoryQuery_GroupsAliasesList : GTLRDirectoryQuery

/**
 *  Identifies the group in the API request. The value can be the group's email
 *  address, group alias, or the unique group ID.
 */
@property(nonatomic, copy, nullable) NSString *groupKey;

/**
 *  Fetches a @c GTLRDirectory_Aliases.
 *
 *  Lists all aliases for a group.
 *
 *  @param groupKey Identifies the group in the API request. The value can be
 *    the group's email address, group alias, or the unique group ID.
 *
 *  @return GTLRDirectoryQuery_GroupsAliasesList
 */
+ (instancetype)queryWithGroupKey:(NSString *)groupKey;

@end

/**
 *  Deletes a group.
 *
 *  Method: directory.groups.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryGroup
 */
@interface GTLRDirectoryQuery_GroupsDelete : GTLRDirectoryQuery

/**
 *  Identifies the group in the API request. The value can be the group's email
 *  address, group alias, or the unique group ID.
 */
@property(nonatomic, copy, nullable) NSString *groupKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a group.
 *
 *  @param groupKey Identifies the group in the API request. The value can be
 *    the group's email address, group alias, or the unique group ID.
 *
 *  @return GTLRDirectoryQuery_GroupsDelete
 */
+ (instancetype)queryWithGroupKey:(NSString *)groupKey;

@end

/**
 *  Retrieves a group's properties.
 *
 *  Method: directory.groups.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryGroup
 *    @c kGTLRAuthScopeDirectoryDirectoryGroupReadonly
 */
@interface GTLRDirectoryQuery_GroupsGet : GTLRDirectoryQuery

/**
 *  Identifies the group in the API request. The value can be the group's email
 *  address, group alias, or the unique group ID.
 */
@property(nonatomic, copy, nullable) NSString *groupKey;

/**
 *  Fetches a @c GTLRDirectory_Group.
 *
 *  Retrieves a group's properties.
 *
 *  @param groupKey Identifies the group in the API request. The value can be
 *    the group's email address, group alias, or the unique group ID.
 *
 *  @return GTLRDirectoryQuery_GroupsGet
 */
+ (instancetype)queryWithGroupKey:(NSString *)groupKey;

@end

/**
 *  Creates a group.
 *
 *  Method: directory.groups.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryGroup
 */
@interface GTLRDirectoryQuery_GroupsInsert : GTLRDirectoryQuery

/**
 *  Fetches a @c GTLRDirectory_Group.
 *
 *  Creates a group.
 *
 *  @param object The @c GTLRDirectory_Group to include in the query.
 *
 *  @return GTLRDirectoryQuery_GroupsInsert
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Group *)object;

@end

/**
 *  Retrieves all groups of a domain or of a user given a userKey (paginated).
 *
 *  Method: directory.groups.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryGroup
 *    @c kGTLRAuthScopeDirectoryDirectoryGroupReadonly
 */
@interface GTLRDirectoryQuery_GroupsList : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. In case of a
 *  multi-domain account, to fetch all groups for a customer, fill in this field
 *  instead of `domain`. You can also use the `my_customer` alias to represent
 *  your account's `customerId`. The `customerId` is also returned as part of
 *  the [Users](/admin-sdk/directory/v1/reference/users) resource. Either the
 *  `customer` or the `domain` parameter must be provided.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  The domain name. Use this field to get groups from only one domain. To
 *  return all domains for a customer account, use the `customer` query
 *  parameter instead.
 */
@property(nonatomic, copy, nullable) NSString *domain;

/**
 *  Maximum number of results to return. Max allowed value is 200.
 *
 *  @note If not set, the documented server-side default will be 200.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Column to use for sorting results
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryOrderByEmail Email of the group. (Value: "email")
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Token to specify next page in the list */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Query string search. Should be of the form "". Complete documentation is at
 *  https: //developers.google.com/admin-sdk/directory/v1/guides/search-groups
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Whether to return results in ascending or descending order. Only of use when
 *  orderBy is also used
 *
 *  Likely values:
 *    @arg @c kGTLRDirectorySortOrderAscending Ascending order. (Value:
 *        "ASCENDING")
 *    @arg @c kGTLRDirectorySortOrderDescending Descending order. (Value:
 *        "DESCENDING")
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Email or immutable ID of the user if only those groups are to be listed, the
 *  given user is a member of. If it's an ID, it should match with the ID of the
 *  user object.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRDirectory_Groups.
 *
 *  Retrieves all groups of a domain or of a user given a userKey (paginated).
 *
 *  @return GTLRDirectoryQuery_GroupsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Updates a group's properties. This method supports [patch
 *  semantics](/admin-sdk/directory/v1/guides/performance#patch).
 *
 *  Method: directory.groups.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryGroup
 */
@interface GTLRDirectoryQuery_GroupsPatch : GTLRDirectoryQuery

/**
 *  Identifies the group in the API request. The value can be the group's email
 *  address, group alias, or the unique group ID.
 */
@property(nonatomic, copy, nullable) NSString *groupKey;

/**
 *  Fetches a @c GTLRDirectory_Group.
 *
 *  Updates a group's properties. This method supports [patch
 *  semantics](/admin-sdk/directory/v1/guides/performance#patch).
 *
 *  @param object The @c GTLRDirectory_Group to include in the query.
 *  @param groupKey Identifies the group in the API request. The value can be
 *    the group's email address, group alias, or the unique group ID.
 *
 *  @return GTLRDirectoryQuery_GroupsPatch
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Group *)object
                       groupKey:(NSString *)groupKey;

@end

/**
 *  Updates a group's properties.
 *
 *  Method: directory.groups.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryGroup
 */
@interface GTLRDirectoryQuery_GroupsUpdate : GTLRDirectoryQuery

/**
 *  Identifies the group in the API request. The value can be the group's email
 *  address, group alias, or the unique group ID.
 */
@property(nonatomic, copy, nullable) NSString *groupKey;

/**
 *  Fetches a @c GTLRDirectory_Group.
 *
 *  Updates a group's properties.
 *
 *  @param object The @c GTLRDirectory_Group to include in the query.
 *  @param groupKey Identifies the group in the API request. The value can be
 *    the group's email address, group alias, or the unique group ID.
 *
 *  @return GTLRDirectoryQuery_GroupsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Group *)object
                       groupKey:(NSString *)groupKey;

@end

/**
 *  Removes a member from a group.
 *
 *  Method: directory.members.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryGroup
 *    @c kGTLRAuthScopeDirectoryDirectoryGroupMember
 */
@interface GTLRDirectoryQuery_MembersDelete : GTLRDirectoryQuery

/**
 *  Identifies the group in the API request. The value can be the group's email
 *  address, group alias, or the unique group ID.
 */
@property(nonatomic, copy, nullable) NSString *groupKey;

/**
 *  Identifies the group member in the API request. A group member can be a user
 *  or another group. The value can be the member's (group or user) primary
 *  email address, alias, or unique ID.
 */
@property(nonatomic, copy, nullable) NSString *memberKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes a member from a group.
 *
 *  @param groupKey Identifies the group in the API request. The value can be
 *    the group's email address, group alias, or the unique group ID.
 *  @param memberKey Identifies the group member in the API request. A group
 *    member can be a user or another group. The value can be the member's
 *    (group or user) primary email address, alias, or unique ID.
 *
 *  @return GTLRDirectoryQuery_MembersDelete
 */
+ (instancetype)queryWithGroupKey:(NSString *)groupKey
                        memberKey:(NSString *)memberKey;

@end

/**
 *  Retrieves a group member's properties.
 *
 *  Method: directory.members.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryGroup
 *    @c kGTLRAuthScopeDirectoryDirectoryGroupMember
 *    @c kGTLRAuthScopeDirectoryDirectoryGroupMemberReadonly
 *    @c kGTLRAuthScopeDirectoryDirectoryGroupReadonly
 */
@interface GTLRDirectoryQuery_MembersGet : GTLRDirectoryQuery

/**
 *  Identifies the group in the API request. The value can be the group's email
 *  address, group alias, or the unique group ID.
 */
@property(nonatomic, copy, nullable) NSString *groupKey;

/**
 *  Identifies the group member in the API request. A group member can be a user
 *  or another group. The value can be the member's (group or user) primary
 *  email address, alias, or unique ID.
 */
@property(nonatomic, copy, nullable) NSString *memberKey;

/**
 *  Fetches a @c GTLRDirectory_Member.
 *
 *  Retrieves a group member's properties.
 *
 *  @param groupKey Identifies the group in the API request. The value can be
 *    the group's email address, group alias, or the unique group ID.
 *  @param memberKey Identifies the group member in the API request. A group
 *    member can be a user or another group. The value can be the member's
 *    (group or user) primary email address, alias, or unique ID.
 *
 *  @return GTLRDirectoryQuery_MembersGet
 */
+ (instancetype)queryWithGroupKey:(NSString *)groupKey
                        memberKey:(NSString *)memberKey;

@end

/**
 *  Checks whether the given user is a member of the group. Membership can be
 *  direct or nested, but if nested, the `memberKey` and `groupKey` must be
 *  entities in the same domain or an `Invalid input` error is returned. To
 *  check for nested memberships that include entities outside of the group's
 *  domain, use the
 *  [`checkTransitiveMembership()`](https://cloud.google.com/identity/docs/reference/rest/v1/groups.memberships/checkTransitiveMembership)
 *  method in the Cloud Identity Groups API.
 *
 *  Method: directory.members.hasMember
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryGroup
 *    @c kGTLRAuthScopeDirectoryDirectoryGroupMember
 *    @c kGTLRAuthScopeDirectoryDirectoryGroupMemberReadonly
 *    @c kGTLRAuthScopeDirectoryDirectoryGroupReadonly
 */
@interface GTLRDirectoryQuery_MembersHasMember : GTLRDirectoryQuery

/**
 *  Identifies the group in the API request. The value can be the group's email
 *  address, group alias, or the unique group ID.
 */
@property(nonatomic, copy, nullable) NSString *groupKey;

/**
 *  Identifies the user member in the API request. The value can be the user's
 *  primary email address, alias, or unique ID.
 */
@property(nonatomic, copy, nullable) NSString *memberKey;

/**
 *  Fetches a @c GTLRDirectory_MembersHasMember.
 *
 *  Checks whether the given user is a member of the group. Membership can be
 *  direct or nested, but if nested, the `memberKey` and `groupKey` must be
 *  entities in the same domain or an `Invalid input` error is returned. To
 *  check for nested memberships that include entities outside of the group's
 *  domain, use the
 *  [`checkTransitiveMembership()`](https://cloud.google.com/identity/docs/reference/rest/v1/groups.memberships/checkTransitiveMembership)
 *  method in the Cloud Identity Groups API.
 *
 *  @param groupKey Identifies the group in the API request. The value can be
 *    the group's email address, group alias, or the unique group ID.
 *  @param memberKey Identifies the user member in the API request. The value
 *    can be the user's primary email address, alias, or unique ID.
 *
 *  @return GTLRDirectoryQuery_MembersHasMember
 */
+ (instancetype)queryWithGroupKey:(NSString *)groupKey
                        memberKey:(NSString *)memberKey;

@end

/**
 *  Adds a user to the specified group.
 *
 *  Method: directory.members.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryGroup
 *    @c kGTLRAuthScopeDirectoryDirectoryGroupMember
 */
@interface GTLRDirectoryQuery_MembersInsert : GTLRDirectoryQuery

/**
 *  Identifies the group in the API request. The value can be the group's email
 *  address, group alias, or the unique group ID.
 */
@property(nonatomic, copy, nullable) NSString *groupKey;

/**
 *  Fetches a @c GTLRDirectory_Member.
 *
 *  Adds a user to the specified group.
 *
 *  @param object The @c GTLRDirectory_Member to include in the query.
 *  @param groupKey Identifies the group in the API request. The value can be
 *    the group's email address, group alias, or the unique group ID.
 *
 *  @return GTLRDirectoryQuery_MembersInsert
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Member *)object
                       groupKey:(NSString *)groupKey;

@end

/**
 *  Retrieves a paginated list of all members in a group.
 *
 *  Method: directory.members.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryGroup
 *    @c kGTLRAuthScopeDirectoryDirectoryGroupMember
 *    @c kGTLRAuthScopeDirectoryDirectoryGroupMemberReadonly
 *    @c kGTLRAuthScopeDirectoryDirectoryGroupReadonly
 */
@interface GTLRDirectoryQuery_MembersList : GTLRDirectoryQuery

/**
 *  Identifies the group in the API request. The value can be the group's email
 *  address, group alias, or the unique group ID.
 */
@property(nonatomic, copy, nullable) NSString *groupKey;

/** Whether to list indirect memberships. Default: false. */
@property(nonatomic, assign) BOOL includeDerivedMembership;

/**
 *  Maximum number of results to return. Max allowed value is 200.
 *
 *  @note If not set, the documented server-side default will be 200.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Token to specify next page in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The `roles` query parameter allows you to retrieve group members by role.
 *  Allowed values are `OWNER`, `MANAGER`, and `MEMBER`.
 */
@property(nonatomic, copy, nullable) NSString *roles;

/**
 *  Fetches a @c GTLRDirectory_Members.
 *
 *  Retrieves a paginated list of all members in a group.
 *
 *  @param groupKey Identifies the group in the API request. The value can be
 *    the group's email address, group alias, or the unique group ID.
 *
 *  @return GTLRDirectoryQuery_MembersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithGroupKey:(NSString *)groupKey;

@end

/**
 *  Updates the membership properties of a user in the specified group. This
 *  method supports [patch
 *  semantics](/admin-sdk/directory/v1/guides/performance#patch).
 *
 *  Method: directory.members.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryGroup
 *    @c kGTLRAuthScopeDirectoryDirectoryGroupMember
 */
@interface GTLRDirectoryQuery_MembersPatch : GTLRDirectoryQuery

/**
 *  Identifies the group in the API request. The value can be the group's email
 *  address, group alias, or the unique group ID.
 */
@property(nonatomic, copy, nullable) NSString *groupKey;

/**
 *  Identifies the group member in the API request. A group member can be a user
 *  or another group. The value can be the member's (group or user) primary
 *  email address, alias, or unique ID.
 */
@property(nonatomic, copy, nullable) NSString *memberKey;

/**
 *  Fetches a @c GTLRDirectory_Member.
 *
 *  Updates the membership properties of a user in the specified group. This
 *  method supports [patch
 *  semantics](/admin-sdk/directory/v1/guides/performance#patch).
 *
 *  @param object The @c GTLRDirectory_Member to include in the query.
 *  @param groupKey Identifies the group in the API request. The value can be
 *    the group's email address, group alias, or the unique group ID.
 *  @param memberKey Identifies the group member in the API request. A group
 *    member can be a user or another group. The value can be the member's
 *    (group or user) primary email address, alias, or unique ID.
 *
 *  @return GTLRDirectoryQuery_MembersPatch
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Member *)object
                       groupKey:(NSString *)groupKey
                      memberKey:(NSString *)memberKey;

@end

/**
 *  Updates the membership of a user in the specified group.
 *
 *  Method: directory.members.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryGroup
 *    @c kGTLRAuthScopeDirectoryDirectoryGroupMember
 */
@interface GTLRDirectoryQuery_MembersUpdate : GTLRDirectoryQuery

/**
 *  Identifies the group in the API request. The value can be the group's email
 *  address, group alias, or the unique group ID.
 */
@property(nonatomic, copy, nullable) NSString *groupKey;

/**
 *  Identifies the group member in the API request. A group member can be a user
 *  or another group. The value can be the member's (group or user) primary
 *  email address, alias, or unique ID.
 */
@property(nonatomic, copy, nullable) NSString *memberKey;

/**
 *  Fetches a @c GTLRDirectory_Member.
 *
 *  Updates the membership of a user in the specified group.
 *
 *  @param object The @c GTLRDirectory_Member to include in the query.
 *  @param groupKey Identifies the group in the API request. The value can be
 *    the group's email address, group alias, or the unique group ID.
 *  @param memberKey Identifies the group member in the API request. A group
 *    member can be a user or another group. The value can be the member's
 *    (group or user) primary email address, alias, or unique ID.
 *
 *  @return GTLRDirectoryQuery_MembersUpdate
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Member *)object
                       groupKey:(NSString *)groupKey
                      memberKey:(NSString *)memberKey;

@end

/**
 *  Takes an action that affects a mobile device. For example, remotely wiping a
 *  device.
 *
 *  Method: directory.mobiledevices.action
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceMobile
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceMobileAction
 */
@interface GTLRDirectoryQuery_MobiledevicesAction : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's `customerId`. The `customerId` is also returned as part of the
 *  [Users resource](/admin-sdk/directory/v1/reference/users).
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/** The unique ID the API service uses to identify the mobile device. */
@property(nonatomic, copy, nullable) NSString *resourceId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Takes an action that affects a mobile device. For example, remotely wiping a
 *  device.
 *
 *  @param object The @c GTLRDirectory_MobileDeviceAction to include in the
 *    query.
 *  @param customerId The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's `customerId`. The `customerId` is also returned
 *    as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
 *  @param resourceId The unique ID the API service uses to identify the mobile
 *    device.
 *
 *  @return GTLRDirectoryQuery_MobiledevicesAction
 */
+ (instancetype)queryWithObject:(GTLRDirectory_MobileDeviceAction *)object
                     customerId:(NSString *)customerId
                     resourceId:(NSString *)resourceId;

@end

/**
 *  Removes a mobile device.
 *
 *  Method: directory.mobiledevices.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceMobile
 */
@interface GTLRDirectoryQuery_MobiledevicesDelete : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's `customerId`. The `customerId` is also returned as part of the
 *  [Users resource](/admin-sdk/directory/v1/reference/users).
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/** The unique ID the API service uses to identify the mobile device. */
@property(nonatomic, copy, nullable) NSString *resourceId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes a mobile device.
 *
 *  @param customerId The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's `customerId`. The `customerId` is also returned
 *    as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
 *  @param resourceId The unique ID the API service uses to identify the mobile
 *    device.
 *
 *  @return GTLRDirectoryQuery_MobiledevicesDelete
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                         resourceId:(NSString *)resourceId;

@end

/**
 *  Retrieves a mobile device's properties.
 *
 *  Method: directory.mobiledevices.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceMobile
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceMobileAction
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceMobileReadonly
 */
@interface GTLRDirectoryQuery_MobiledevicesGet : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's `customerId`. The `customerId` is also returned as part of the
 *  [Users resource](/admin-sdk/directory/v1/reference/users).
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Restrict information returned to a set of selected fields.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryProjectionBasic Includes only the basic metadata
 *        fields (e.g., deviceId, model, status, type, and status) (Value:
 *        "BASIC")
 *    @arg @c kGTLRDirectoryProjectionFull Includes all metadata fields (Value:
 *        "FULL")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/** The unique ID the API service uses to identify the mobile device. */
@property(nonatomic, copy, nullable) NSString *resourceId;

/**
 *  Fetches a @c GTLRDirectory_MobileDevice.
 *
 *  Retrieves a mobile device's properties.
 *
 *  @param customerId The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's `customerId`. The `customerId` is also returned
 *    as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
 *  @param resourceId The unique ID the API service uses to identify the mobile
 *    device.
 *
 *  @return GTLRDirectoryQuery_MobiledevicesGet
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                         resourceId:(NSString *)resourceId;

@end

/**
 *  Retrieves a paginated list of all user-owned mobile devices for an account.
 *  To retrieve a list that includes company-owned devices, use the Cloud
 *  Identity [Devices
 *  API](https://cloud.google.com/identity/docs/concepts/overview-devices)
 *  instead.
 *
 *  Method: directory.mobiledevices.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceMobile
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceMobileAction
 *    @c kGTLRAuthScopeDirectoryDirectoryDeviceMobileReadonly
 */
@interface GTLRDirectoryQuery_MobiledevicesList : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's `customerId`. The `customerId` is also returned as part of the
 *  [Users resource](/admin-sdk/directory/v1/reference/users).
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Maximum number of results to return. Max allowed value is 100.
 *
 *  @note If not set, the documented server-side default will be 100 (from the
 *        range 1..100).
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Device property to use for sorting results.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryOrderByDeviceId The serial number for a Google Sync
 *        mobile device. For Android devices, this is a software generated
 *        unique identifier. (Value: "deviceId")
 *    @arg @c kGTLRDirectoryOrderByEmail The device owner's email address.
 *        (Value: "email")
 *    @arg @c kGTLRDirectoryOrderByLastSync Last policy settings sync date time
 *        of the device. (Value: "lastSync")
 *    @arg @c kGTLRDirectoryOrderByModel The mobile device's model. (Value:
 *        "model")
 *    @arg @c kGTLRDirectoryOrderByName The device owner's user name. (Value:
 *        "name")
 *    @arg @c kGTLRDirectoryOrderByOs The device's operating system. (Value:
 *        "os")
 *    @arg @c kGTLRDirectoryOrderByStatus The device status. (Value: "status")
 *    @arg @c kGTLRDirectoryOrderByType Type of the device. (Value: "type")
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Token to specify next page in the list */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Restrict information returned to a set of selected fields.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryProjectionBasic Includes only the basic metadata
 *        fields (e.g., deviceId, model, status, type, and status) (Value:
 *        "BASIC")
 *    @arg @c kGTLRDirectoryProjectionFull Includes all metadata fields (Value:
 *        "FULL")
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  Search string in the format given at
 *  https://developers.google.com/admin-sdk/directory/v1/search-operators
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Whether to return results in ascending or descending order. Must be used
 *  with the `orderBy` parameter.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectorySortOrderAscending Ascending order. (Value:
 *        "ASCENDING")
 *    @arg @c kGTLRDirectorySortOrderDescending Descending order. (Value:
 *        "DESCENDING")
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Fetches a @c GTLRDirectory_MobileDevices.
 *
 *  Retrieves a paginated list of all user-owned mobile devices for an account.
 *  To retrieve a list that includes company-owned devices, use the Cloud
 *  Identity [Devices
 *  API](https://cloud.google.com/identity/docs/concepts/overview-devices)
 *  instead.
 *
 *  @param customerId The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's `customerId`. The `customerId` is also returned
 *    as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
 *
 *  @return GTLRDirectoryQuery_MobiledevicesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId;

@end

/**
 *  Removes an organizational unit.
 *
 *  Method: directory.orgunits.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryOrgunit
 */
@interface GTLRDirectoryQuery_OrgunitsDelete : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's `customerId`. The `customerId` is also returned as part of the
 *  [Users resource](/admin-sdk/directory/v1/reference/users).
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  The full path of the organizational unit (minus the leading `/`) or its
 *  unique ID.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitPath;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes an organizational unit.
 *
 *  @param customerId The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's `customerId`. The `customerId` is also returned
 *    as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
 *  @param orgUnitPath The full path of the organizational unit (minus the
 *    leading `/`) or its unique ID.
 *
 *  @return GTLRDirectoryQuery_OrgunitsDelete
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                        orgUnitPath:(NSString *)orgUnitPath;

@end

/**
 *  Retrieves an organizational unit.
 *
 *  Method: directory.orgunits.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryOrgunit
 *    @c kGTLRAuthScopeDirectoryDirectoryOrgunitReadonly
 */
@interface GTLRDirectoryQuery_OrgunitsGet : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's `customerId`. The `customerId` is also returned as part of the
 *  [Users resource](/admin-sdk/directory/v1/reference/users).
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  The full path of the organizational unit (minus the leading `/`) or its
 *  unique ID.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitPath;

/**
 *  Fetches a @c GTLRDirectory_OrgUnit.
 *
 *  Retrieves an organizational unit.
 *
 *  @param customerId The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's `customerId`. The `customerId` is also returned
 *    as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
 *  @param orgUnitPath The full path of the organizational unit (minus the
 *    leading `/`) or its unique ID.
 *
 *  @return GTLRDirectoryQuery_OrgunitsGet
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                        orgUnitPath:(NSString *)orgUnitPath;

@end

/**
 *  Adds an organizational unit.
 *
 *  Method: directory.orgunits.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryOrgunit
 */
@interface GTLRDirectoryQuery_OrgunitsInsert : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's `customerId`. The `customerId` is also returned as part of the
 *  [Users resource](/admin-sdk/directory/v1/reference/users).
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Fetches a @c GTLRDirectory_OrgUnit.
 *
 *  Adds an organizational unit.
 *
 *  @param object The @c GTLRDirectory_OrgUnit to include in the query.
 *  @param customerId The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's `customerId`. The `customerId` is also returned
 *    as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
 *
 *  @return GTLRDirectoryQuery_OrgunitsInsert
 */
+ (instancetype)queryWithObject:(GTLRDirectory_OrgUnit *)object
                     customerId:(NSString *)customerId;

@end

/**
 *  Retrieves a list of all organizational units for an account.
 *
 *  Method: directory.orgunits.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryOrgunit
 *    @c kGTLRAuthScopeDirectoryDirectoryOrgunitReadonly
 */
@interface GTLRDirectoryQuery_OrgunitsList : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's `customerId`. The `customerId` is also returned as part of the
 *  [Users resource](/admin-sdk/directory/v1/reference/users).
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  The full path to the organizational unit or its unique ID. Returns the
 *  children of the specified organizational unit.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitPath;

/**
 *  Whether to return all sub-organizations or just immediate children.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryTypeAll All sub-organizational units. (Value: "all")
 *    @arg @c kGTLRDirectoryTypeChildren Immediate children only (default).
 *        (Value: "children")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Fetches a @c GTLRDirectory_OrgUnits.
 *
 *  Retrieves a list of all organizational units for an account.
 *
 *  @param customerId The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's `customerId`. The `customerId` is also returned
 *    as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
 *
 *  @return GTLRDirectoryQuery_OrgunitsList
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId;

@end

/**
 *  Updates an organizational unit. This method supports [patch
 *  semantics](/admin-sdk/directory/v1/guides/performance#patch)
 *
 *  Method: directory.orgunits.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryOrgunit
 */
@interface GTLRDirectoryQuery_OrgunitsPatch : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's `customerId`. The `customerId` is also returned as part of the
 *  [Users resource](/admin-sdk/directory/v1/reference/users).
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  The full path of the organizational unit (minus the leading `/`) or its
 *  unique ID.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitPath;

/**
 *  Fetches a @c GTLRDirectory_OrgUnit.
 *
 *  Updates an organizational unit. This method supports [patch
 *  semantics](/admin-sdk/directory/v1/guides/performance#patch)
 *
 *  @param object The @c GTLRDirectory_OrgUnit to include in the query.
 *  @param customerId The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's `customerId`. The `customerId` is also returned
 *    as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
 *  @param orgUnitPath The full path of the organizational unit (minus the
 *    leading `/`) or its unique ID.
 *
 *  @return GTLRDirectoryQuery_OrgunitsPatch
 */
+ (instancetype)queryWithObject:(GTLRDirectory_OrgUnit *)object
                     customerId:(NSString *)customerId
                    orgUnitPath:(NSString *)orgUnitPath;

@end

/**
 *  Updates an organizational unit.
 *
 *  Method: directory.orgunits.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryOrgunit
 */
@interface GTLRDirectoryQuery_OrgunitsUpdate : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's `customerId`. The `customerId` is also returned as part of the
 *  [Users resource](/admin-sdk/directory/v1/reference/users).
 */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  The full path of the organizational unit (minus the leading `/`) or its
 *  unique ID.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitPath;

/**
 *  Fetches a @c GTLRDirectory_OrgUnit.
 *
 *  Updates an organizational unit.
 *
 *  @param object The @c GTLRDirectory_OrgUnit to include in the query.
 *  @param customerId The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's `customerId`. The `customerId` is also returned
 *    as part of the [Users resource](/admin-sdk/directory/v1/reference/users).
 *  @param orgUnitPath The full path of the organizational unit (minus the
 *    leading `/`) or its unique ID.
 *
 *  @return GTLRDirectoryQuery_OrgunitsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDirectory_OrgUnit *)object
                     customerId:(NSString *)customerId
                    orgUnitPath:(NSString *)orgUnitPath;

@end

/**
 *  Retrieves a paginated list of all privileges for a customer.
 *
 *  Method: directory.privileges.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryRolemanagement
 *    @c kGTLRAuthScopeDirectoryDirectoryRolemanagementReadonly
 */
@interface GTLRDirectoryQuery_PrivilegesList : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRDirectory_Privileges.
 *
 *  Retrieves a paginated list of all privileges for a customer.
 *
 *  @param customer Immutable ID of the Google Workspace account.
 *
 *  @return GTLRDirectoryQuery_PrivilegesList
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Deletes a building.
 *
 *  Method: directory.resources.buildings.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 */
@interface GTLRDirectoryQuery_ResourcesBuildingsDelete : GTLRDirectoryQuery

/** The id of the building to delete. */
@property(nonatomic, copy, nullable) NSString *buildingId;

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a building.
 *
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *  @param buildingId The id of the building to delete.
 *
 *  @return GTLRDirectoryQuery_ResourcesBuildingsDelete
 */
+ (instancetype)queryWithCustomer:(NSString *)customer
                       buildingId:(NSString *)buildingId;

@end

/**
 *  Retrieves a building.
 *
 *  Method: directory.resources.buildings.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendarReadonly
 */
@interface GTLRDirectoryQuery_ResourcesBuildingsGet : GTLRDirectoryQuery

/** The unique ID of the building to retrieve. */
@property(nonatomic, copy, nullable) NSString *buildingId;

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRDirectory_Building.
 *
 *  Retrieves a building.
 *
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *  @param buildingId The unique ID of the building to retrieve.
 *
 *  @return GTLRDirectoryQuery_ResourcesBuildingsGet
 */
+ (instancetype)queryWithCustomer:(NSString *)customer
                       buildingId:(NSString *)buildingId;

@end

/**
 *  Inserts a building.
 *
 *  Method: directory.resources.buildings.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 */
@interface GTLRDirectoryQuery_ResourcesBuildingsInsert : GTLRDirectoryQuery

/**
 *  Source from which Building.coordinates are derived.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryCoordinatesSourceClientSpecified
 *        Building.coordinates are set to the coordinates included in the
 *        request. (Value: "CLIENT_SPECIFIED")
 *    @arg @c kGTLRDirectoryCoordinatesSourceResolvedFromAddress
 *        Building.coordinates are automatically populated based on the postal
 *        address. (Value: "RESOLVED_FROM_ADDRESS")
 *    @arg @c kGTLRDirectoryCoordinatesSourceSourceUnspecified Defaults to
 *        `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise,
 *        defaults to `CLIENT_SPECIFIED` if coordinates are provided. (Value:
 *        "SOURCE_UNSPECIFIED")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDirectoryCoordinatesSourceSourceUnspecified.
 */
@property(nonatomic, copy, nullable) NSString *coordinatesSource;

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRDirectory_Building.
 *
 *  Inserts a building.
 *
 *  @param object The @c GTLRDirectory_Building to include in the query.
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *
 *  @return GTLRDirectoryQuery_ResourcesBuildingsInsert
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Building *)object
                       customer:(NSString *)customer;

@end

/**
 *  Retrieves a list of buildings for an account.
 *
 *  Method: directory.resources.buildings.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendarReadonly
 */
@interface GTLRDirectoryQuery_ResourcesBuildingsList : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Maximum number of results to return.
 *
 *  @note The documented range is 1..500.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Token to specify the next page in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDirectory_Buildings.
 *
 *  Retrieves a list of buildings for an account.
 *
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *
 *  @return GTLRDirectoryQuery_ResourcesBuildingsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Patches a building.
 *
 *  Method: directory.resources.buildings.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 */
@interface GTLRDirectoryQuery_ResourcesBuildingsPatch : GTLRDirectoryQuery

/** The id of the building to update. */
@property(nonatomic, copy, nullable) NSString *buildingId;

/**
 *  Source from which Building.coordinates are derived.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryCoordinatesSourceClientSpecified
 *        Building.coordinates are set to the coordinates included in the
 *        request. (Value: "CLIENT_SPECIFIED")
 *    @arg @c kGTLRDirectoryCoordinatesSourceResolvedFromAddress
 *        Building.coordinates are automatically populated based on the postal
 *        address. (Value: "RESOLVED_FROM_ADDRESS")
 *    @arg @c kGTLRDirectoryCoordinatesSourceSourceUnspecified Defaults to
 *        `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise,
 *        defaults to `CLIENT_SPECIFIED` if coordinates are provided. (Value:
 *        "SOURCE_UNSPECIFIED")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDirectoryCoordinatesSourceSourceUnspecified.
 */
@property(nonatomic, copy, nullable) NSString *coordinatesSource;

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRDirectory_Building.
 *
 *  Patches a building.
 *
 *  @param object The @c GTLRDirectory_Building to include in the query.
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *  @param buildingId The id of the building to update.
 *
 *  @return GTLRDirectoryQuery_ResourcesBuildingsPatch
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Building *)object
                       customer:(NSString *)customer
                     buildingId:(NSString *)buildingId;

@end

/**
 *  Updates a building.
 *
 *  Method: directory.resources.buildings.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 */
@interface GTLRDirectoryQuery_ResourcesBuildingsUpdate : GTLRDirectoryQuery

/** The id of the building to update. */
@property(nonatomic, copy, nullable) NSString *buildingId;

/**
 *  Source from which Building.coordinates are derived.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryCoordinatesSourceClientSpecified
 *        Building.coordinates are set to the coordinates included in the
 *        request. (Value: "CLIENT_SPECIFIED")
 *    @arg @c kGTLRDirectoryCoordinatesSourceResolvedFromAddress
 *        Building.coordinates are automatically populated based on the postal
 *        address. (Value: "RESOLVED_FROM_ADDRESS")
 *    @arg @c kGTLRDirectoryCoordinatesSourceSourceUnspecified Defaults to
 *        `RESOLVED_FROM_ADDRESS` if postal address is provided. Otherwise,
 *        defaults to `CLIENT_SPECIFIED` if coordinates are provided. (Value:
 *        "SOURCE_UNSPECIFIED")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDirectoryCoordinatesSourceSourceUnspecified.
 */
@property(nonatomic, copy, nullable) NSString *coordinatesSource;

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRDirectory_Building.
 *
 *  Updates a building.
 *
 *  @param object The @c GTLRDirectory_Building to include in the query.
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *  @param buildingId The id of the building to update.
 *
 *  @return GTLRDirectoryQuery_ResourcesBuildingsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Building *)object
                       customer:(NSString *)customer
                     buildingId:(NSString *)buildingId;

@end

/**
 *  Deletes a calendar resource.
 *
 *  Method: directory.resources.calendars.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 */
@interface GTLRDirectoryQuery_ResourcesCalendarsDelete : GTLRDirectoryQuery

/** The unique ID of the calendar resource to delete. */
@property(nonatomic, copy, nullable) NSString *calendarResourceId;

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a calendar resource.
 *
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *  @param calendarResourceId The unique ID of the calendar resource to delete.
 *
 *  @return GTLRDirectoryQuery_ResourcesCalendarsDelete
 */
+ (instancetype)queryWithCustomer:(NSString *)customer
               calendarResourceId:(NSString *)calendarResourceId;

@end

/**
 *  Retrieves a calendar resource.
 *
 *  Method: directory.resources.calendars.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendarReadonly
 */
@interface GTLRDirectoryQuery_ResourcesCalendarsGet : GTLRDirectoryQuery

/** The unique ID of the calendar resource to retrieve. */
@property(nonatomic, copy, nullable) NSString *calendarResourceId;

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRDirectory_CalendarResource.
 *
 *  Retrieves a calendar resource.
 *
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *  @param calendarResourceId The unique ID of the calendar resource to
 *    retrieve.
 *
 *  @return GTLRDirectoryQuery_ResourcesCalendarsGet
 */
+ (instancetype)queryWithCustomer:(NSString *)customer
               calendarResourceId:(NSString *)calendarResourceId;

@end

/**
 *  Inserts a calendar resource.
 *
 *  Method: directory.resources.calendars.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 */
@interface GTLRDirectoryQuery_ResourcesCalendarsInsert : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRDirectory_CalendarResource.
 *
 *  Inserts a calendar resource.
 *
 *  @param object The @c GTLRDirectory_CalendarResource to include in the query.
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *
 *  @return GTLRDirectoryQuery_ResourcesCalendarsInsert
 */
+ (instancetype)queryWithObject:(GTLRDirectory_CalendarResource *)object
                       customer:(NSString *)customer;

@end

/**
 *  Retrieves a list of calendar resources for an account.
 *
 *  Method: directory.resources.calendars.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendarReadonly
 */
@interface GTLRDirectoryQuery_ResourcesCalendarsList : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Maximum number of results to return.
 *
 *  @note The documented range is 1..500.
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Field(s) to sort results by in either ascending or descending order.
 *  Supported fields include `resourceId`, `resourceName`, `capacity`,
 *  `buildingId`, and `floorName`. If no order is specified, defaults to
 *  ascending. Should be of the form "field [asc|desc], field [asc|desc], ...".
 *  For example `buildingId, capacity desc` would return results sorted first by
 *  `buildingId` in ascending order then by `capacity` in descending order.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Token to specify the next page in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  String query used to filter results. Should be of the form "field operator
 *  value" where field can be any of supported fields and operators can be any
 *  of supported operations. Operators include '=' for exact match, '!=' for
 *  mismatch and ':' for prefix match or HAS match where applicable. For prefix
 *  match, the value should always be followed by a *. Logical operators NOT and
 *  AND are supported (in this order of precedence). Supported fields include
 *  `generatedResourceName`, `name`, `buildingId`, `floor_name`, `capacity`,
 *  `featureInstances.feature.name`, `resourceEmail`, `resourceCategory`. For
 *  example `buildingId=US-NYC-9TH AND featureInstances.feature.name:Phone`.
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Fetches a @c GTLRDirectory_CalendarResources.
 *
 *  Retrieves a list of calendar resources for an account.
 *
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *
 *  @return GTLRDirectoryQuery_ResourcesCalendarsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Patches a calendar resource.
 *
 *  Method: directory.resources.calendars.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 */
@interface GTLRDirectoryQuery_ResourcesCalendarsPatch : GTLRDirectoryQuery

/** The unique ID of the calendar resource to update. */
@property(nonatomic, copy, nullable) NSString *calendarResourceId;

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRDirectory_CalendarResource.
 *
 *  Patches a calendar resource.
 *
 *  @param object The @c GTLRDirectory_CalendarResource to include in the query.
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *  @param calendarResourceId The unique ID of the calendar resource to update.
 *
 *  @return GTLRDirectoryQuery_ResourcesCalendarsPatch
 */
+ (instancetype)queryWithObject:(GTLRDirectory_CalendarResource *)object
                       customer:(NSString *)customer
             calendarResourceId:(NSString *)calendarResourceId;

@end

/**
 *  Updates a calendar resource. This method supports patch semantics, meaning
 *  you only need to include the fields you wish to update. Fields that are not
 *  present in the request will be preserved.
 *
 *  Method: directory.resources.calendars.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 */
@interface GTLRDirectoryQuery_ResourcesCalendarsUpdate : GTLRDirectoryQuery

/** The unique ID of the calendar resource to update. */
@property(nonatomic, copy, nullable) NSString *calendarResourceId;

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRDirectory_CalendarResource.
 *
 *  Updates a calendar resource. This method supports patch semantics, meaning
 *  you only need to include the fields you wish to update. Fields that are not
 *  present in the request will be preserved.
 *
 *  @param object The @c GTLRDirectory_CalendarResource to include in the query.
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *  @param calendarResourceId The unique ID of the calendar resource to update.
 *
 *  @return GTLRDirectoryQuery_ResourcesCalendarsUpdate
 */
+ (instancetype)queryWithObject:(GTLRDirectory_CalendarResource *)object
                       customer:(NSString *)customer
             calendarResourceId:(NSString *)calendarResourceId;

@end

/**
 *  Deletes a feature.
 *
 *  Method: directory.resources.features.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 */
@interface GTLRDirectoryQuery_ResourcesFeaturesDelete : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/** The unique ID of the feature to delete. */
@property(nonatomic, copy, nullable) NSString *featureKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a feature.
 *
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *  @param featureKey The unique ID of the feature to delete.
 *
 *  @return GTLRDirectoryQuery_ResourcesFeaturesDelete
 */
+ (instancetype)queryWithCustomer:(NSString *)customer
                       featureKey:(NSString *)featureKey;

@end

/**
 *  Retrieves a feature.
 *
 *  Method: directory.resources.features.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendarReadonly
 */
@interface GTLRDirectoryQuery_ResourcesFeaturesGet : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/** The unique ID of the feature to retrieve. */
@property(nonatomic, copy, nullable) NSString *featureKey;

/**
 *  Fetches a @c GTLRDirectory_Feature.
 *
 *  Retrieves a feature.
 *
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *  @param featureKey The unique ID of the feature to retrieve.
 *
 *  @return GTLRDirectoryQuery_ResourcesFeaturesGet
 */
+ (instancetype)queryWithCustomer:(NSString *)customer
                       featureKey:(NSString *)featureKey;

@end

/**
 *  Inserts a feature.
 *
 *  Method: directory.resources.features.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 */
@interface GTLRDirectoryQuery_ResourcesFeaturesInsert : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRDirectory_Feature.
 *
 *  Inserts a feature.
 *
 *  @param object The @c GTLRDirectory_Feature to include in the query.
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *
 *  @return GTLRDirectoryQuery_ResourcesFeaturesInsert
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Feature *)object
                       customer:(NSString *)customer;

@end

/**
 *  Retrieves a list of features for an account.
 *
 *  Method: directory.resources.features.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendarReadonly
 */
@interface GTLRDirectoryQuery_ResourcesFeaturesList : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Maximum number of results to return.
 *
 *  @note The documented range is 1..500.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Token to specify the next page in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDirectory_Features.
 *
 *  Retrieves a list of features for an account.
 *
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *
 *  @return GTLRDirectoryQuery_ResourcesFeaturesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Patches a feature.
 *
 *  Method: directory.resources.features.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 */
@interface GTLRDirectoryQuery_ResourcesFeaturesPatch : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/** The unique ID of the feature to update. */
@property(nonatomic, copy, nullable) NSString *featureKey;

/**
 *  Fetches a @c GTLRDirectory_Feature.
 *
 *  Patches a feature.
 *
 *  @param object The @c GTLRDirectory_Feature to include in the query.
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *  @param featureKey The unique ID of the feature to update.
 *
 *  @return GTLRDirectoryQuery_ResourcesFeaturesPatch
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Feature *)object
                       customer:(NSString *)customer
                     featureKey:(NSString *)featureKey;

@end

/**
 *  Renames a feature.
 *
 *  Method: directory.resources.features.rename
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 */
@interface GTLRDirectoryQuery_ResourcesFeaturesRename : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/** The unique ID of the feature to rename. */
@property(nonatomic, copy, nullable) NSString *oldName;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Renames a feature.
 *
 *  @param object The @c GTLRDirectory_FeatureRename to include in the query.
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *  @param oldName The unique ID of the feature to rename.
 *
 *  @return GTLRDirectoryQuery_ResourcesFeaturesRename
 */
+ (instancetype)queryWithObject:(GTLRDirectory_FeatureRename *)object
                       customer:(NSString *)customer
                        oldName:(NSString *)oldName;

@end

/**
 *  Updates a feature.
 *
 *  Method: directory.resources.features.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryResourceCalendar
 */
@interface GTLRDirectoryQuery_ResourcesFeaturesUpdate : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. As an account
 *  administrator, you can also use the `my_customer` alias to represent your
 *  account's customer ID.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/** The unique ID of the feature to update. */
@property(nonatomic, copy, nullable) NSString *featureKey;

/**
 *  Fetches a @c GTLRDirectory_Feature.
 *
 *  Updates a feature.
 *
 *  @param object The @c GTLRDirectory_Feature to include in the query.
 *  @param customer The unique ID for the customer's Google Workspace account.
 *    As an account administrator, you can also use the `my_customer` alias to
 *    represent your account's customer ID.
 *  @param featureKey The unique ID of the feature to update.
 *
 *  @return GTLRDirectoryQuery_ResourcesFeaturesUpdate
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Feature *)object
                       customer:(NSString *)customer
                     featureKey:(NSString *)featureKey;

@end

/**
 *  Deletes a role assignment.
 *
 *  Method: directory.roleAssignments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryRolemanagement
 */
@interface GTLRDirectoryQuery_RoleAssignmentsDelete : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/** Immutable ID of the role assignment. */
@property(nonatomic, copy, nullable) NSString *roleAssignmentId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a role assignment.
 *
 *  @param customer Immutable ID of the Google Workspace account.
 *  @param roleAssignmentId Immutable ID of the role assignment.
 *
 *  @return GTLRDirectoryQuery_RoleAssignmentsDelete
 */
+ (instancetype)queryWithCustomer:(NSString *)customer
                 roleAssignmentId:(NSString *)roleAssignmentId;

@end

/**
 *  Retrieves a role assignment.
 *
 *  Method: directory.roleAssignments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryRolemanagement
 *    @c kGTLRAuthScopeDirectoryDirectoryRolemanagementReadonly
 */
@interface GTLRDirectoryQuery_RoleAssignmentsGet : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/** Immutable ID of the role assignment. */
@property(nonatomic, copy, nullable) NSString *roleAssignmentId;

/**
 *  Fetches a @c GTLRDirectory_RoleAssignment.
 *
 *  Retrieves a role assignment.
 *
 *  @param customer Immutable ID of the Google Workspace account.
 *  @param roleAssignmentId Immutable ID of the role assignment.
 *
 *  @return GTLRDirectoryQuery_RoleAssignmentsGet
 */
+ (instancetype)queryWithCustomer:(NSString *)customer
                 roleAssignmentId:(NSString *)roleAssignmentId;

@end

/**
 *  Creates a role assignment.
 *
 *  Method: directory.roleAssignments.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryRolemanagement
 */
@interface GTLRDirectoryQuery_RoleAssignmentsInsert : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRDirectory_RoleAssignment.
 *
 *  Creates a role assignment.
 *
 *  @param object The @c GTLRDirectory_RoleAssignment to include in the query.
 *  @param customer Immutable ID of the Google Workspace account.
 *
 *  @return GTLRDirectoryQuery_RoleAssignmentsInsert
 */
+ (instancetype)queryWithObject:(GTLRDirectory_RoleAssignment *)object
                       customer:(NSString *)customer;

@end

/**
 *  Retrieves a paginated list of all roleAssignments.
 *
 *  Method: directory.roleAssignments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryRolemanagement
 *    @c kGTLRAuthScopeDirectoryDirectoryRolemanagementReadonly
 */
@interface GTLRDirectoryQuery_RoleAssignmentsList : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Maximum number of results to return.
 *
 *  @note The documented range is 1..200.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Token to specify the next page in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Immutable ID of a role. If included in the request, returns only role
 *  assignments containing this role ID.
 */
@property(nonatomic, copy, nullable) NSString *roleId;

/**
 *  The user's primary email address, alias email address, or unique user ID. If
 *  included in the request, returns role assignments only for this user.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRDirectory_RoleAssignments.
 *
 *  Retrieves a paginated list of all roleAssignments.
 *
 *  @param customer Immutable ID of the Google Workspace account.
 *
 *  @return GTLRDirectoryQuery_RoleAssignmentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Deletes a role.
 *
 *  Method: directory.roles.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryRolemanagement
 */
@interface GTLRDirectoryQuery_RolesDelete : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/** Immutable ID of the role. */
@property(nonatomic, copy, nullable) NSString *roleId;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a role.
 *
 *  @param customer Immutable ID of the Google Workspace account.
 *  @param roleId Immutable ID of the role.
 *
 *  @return GTLRDirectoryQuery_RolesDelete
 */
+ (instancetype)queryWithCustomer:(NSString *)customer
                           roleId:(NSString *)roleId;

@end

/**
 *  Retrieves a role.
 *
 *  Method: directory.roles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryRolemanagement
 *    @c kGTLRAuthScopeDirectoryDirectoryRolemanagementReadonly
 */
@interface GTLRDirectoryQuery_RolesGet : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/** Immutable ID of the role. */
@property(nonatomic, copy, nullable) NSString *roleId;

/**
 *  Fetches a @c GTLRDirectory_Role.
 *
 *  Retrieves a role.
 *
 *  @param customer Immutable ID of the Google Workspace account.
 *  @param roleId Immutable ID of the role.
 *
 *  @return GTLRDirectoryQuery_RolesGet
 */
+ (instancetype)queryWithCustomer:(NSString *)customer
                           roleId:(NSString *)roleId;

@end

/**
 *  Creates a role.
 *
 *  Method: directory.roles.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryRolemanagement
 */
@interface GTLRDirectoryQuery_RolesInsert : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Fetches a @c GTLRDirectory_Role.
 *
 *  Creates a role.
 *
 *  @param object The @c GTLRDirectory_Role to include in the query.
 *  @param customer Immutable ID of the Google Workspace account.
 *
 *  @return GTLRDirectoryQuery_RolesInsert
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Role *)object
                       customer:(NSString *)customer;

@end

/**
 *  Retrieves a paginated list of all the roles in a domain.
 *
 *  Method: directory.roles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryRolemanagement
 *    @c kGTLRAuthScopeDirectoryDirectoryRolemanagementReadonly
 */
@interface GTLRDirectoryQuery_RolesList : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Maximum number of results to return.
 *
 *  @note The documented range is 1..100.
 */
@property(nonatomic, assign) NSInteger maxResults;

/** Token to specify the next page in the list. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDirectory_Roles.
 *
 *  Retrieves a paginated list of all the roles in a domain.
 *
 *  @param customer Immutable ID of the Google Workspace account.
 *
 *  @return GTLRDirectoryQuery_RolesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithCustomer:(NSString *)customer;

@end

/**
 *  Patches a role.
 *
 *  Method: directory.roles.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryRolemanagement
 */
@interface GTLRDirectoryQuery_RolesPatch : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/** Immutable ID of the role. */
@property(nonatomic, copy, nullable) NSString *roleId;

/**
 *  Fetches a @c GTLRDirectory_Role.
 *
 *  Patches a role.
 *
 *  @param object The @c GTLRDirectory_Role to include in the query.
 *  @param customer Immutable ID of the Google Workspace account.
 *  @param roleId Immutable ID of the role.
 *
 *  @return GTLRDirectoryQuery_RolesPatch
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Role *)object
                       customer:(NSString *)customer
                         roleId:(NSString *)roleId;

@end

/**
 *  Updates a role.
 *
 *  Method: directory.roles.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryRolemanagement
 */
@interface GTLRDirectoryQuery_RolesUpdate : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customer;

/** Immutable ID of the role. */
@property(nonatomic, copy, nullable) NSString *roleId;

/**
 *  Fetches a @c GTLRDirectory_Role.
 *
 *  Updates a role.
 *
 *  @param object The @c GTLRDirectory_Role to include in the query.
 *  @param customer Immutable ID of the Google Workspace account.
 *  @param roleId Immutable ID of the role.
 *
 *  @return GTLRDirectoryQuery_RolesUpdate
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Role *)object
                       customer:(NSString *)customer
                         roleId:(NSString *)roleId;

@end

/**
 *  Deletes a schema.
 *
 *  Method: directory.schemas.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserschema
 */
@interface GTLRDirectoryQuery_SchemasDelete : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customerId;

/** Name or immutable ID of the schema. */
@property(nonatomic, copy, nullable) NSString *schemaKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a schema.
 *
 *  @param customerId Immutable ID of the Google Workspace account.
 *  @param schemaKey Name or immutable ID of the schema.
 *
 *  @return GTLRDirectoryQuery_SchemasDelete
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                          schemaKey:(NSString *)schemaKey;

@end

/**
 *  Retrieves a schema.
 *
 *  Method: directory.schemas.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserschema
 *    @c kGTLRAuthScopeDirectoryDirectoryUserschemaReadonly
 */
@interface GTLRDirectoryQuery_SchemasGet : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customerId;

/** Name or immutable ID of the schema. */
@property(nonatomic, copy, nullable) NSString *schemaKey;

/**
 *  Fetches a @c GTLRDirectory_Schema.
 *
 *  Retrieves a schema.
 *
 *  @param customerId Immutable ID of the Google Workspace account.
 *  @param schemaKey Name or immutable ID of the schema.
 *
 *  @return GTLRDirectoryQuery_SchemasGet
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId
                          schemaKey:(NSString *)schemaKey;

@end

/**
 *  Creates a schema.
 *
 *  Method: directory.schemas.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserschema
 */
@interface GTLRDirectoryQuery_SchemasInsert : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Fetches a @c GTLRDirectory_Schema.
 *
 *  Creates a schema.
 *
 *  @param object The @c GTLRDirectory_Schema to include in the query.
 *  @param customerId Immutable ID of the Google Workspace account.
 *
 *  @return GTLRDirectoryQuery_SchemasInsert
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Schema *)object
                     customerId:(NSString *)customerId;

@end

/**
 *  Retrieves all schemas for a customer.
 *
 *  Method: directory.schemas.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserschema
 *    @c kGTLRAuthScopeDirectoryDirectoryUserschemaReadonly
 */
@interface GTLRDirectoryQuery_SchemasList : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Fetches a @c GTLRDirectory_Schemas.
 *
 *  Retrieves all schemas for a customer.
 *
 *  @param customerId Immutable ID of the Google Workspace account.
 *
 *  @return GTLRDirectoryQuery_SchemasList
 */
+ (instancetype)queryWithCustomerId:(NSString *)customerId;

@end

/**
 *  Patches a schema.
 *
 *  Method: directory.schemas.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserschema
 */
@interface GTLRDirectoryQuery_SchemasPatch : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customerId;

/** Name or immutable ID of the schema. */
@property(nonatomic, copy, nullable) NSString *schemaKey;

/**
 *  Fetches a @c GTLRDirectory_Schema.
 *
 *  Patches a schema.
 *
 *  @param object The @c GTLRDirectory_Schema to include in the query.
 *  @param customerId Immutable ID of the Google Workspace account.
 *  @param schemaKey Name or immutable ID of the schema.
 *
 *  @return GTLRDirectoryQuery_SchemasPatch
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Schema *)object
                     customerId:(NSString *)customerId
                      schemaKey:(NSString *)schemaKey;

@end

/**
 *  Updates a schema.
 *
 *  Method: directory.schemas.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserschema
 */
@interface GTLRDirectoryQuery_SchemasUpdate : GTLRDirectoryQuery

/** Immutable ID of the Google Workspace account. */
@property(nonatomic, copy, nullable) NSString *customerId;

/** Name or immutable ID of the schema. */
@property(nonatomic, copy, nullable) NSString *schemaKey;

/**
 *  Fetches a @c GTLRDirectory_Schema.
 *
 *  Updates a schema.
 *
 *  @param object The @c GTLRDirectory_Schema to include in the query.
 *  @param customerId Immutable ID of the Google Workspace account.
 *  @param schemaKey Name or immutable ID of the schema.
 *
 *  @return GTLRDirectoryQuery_SchemasUpdate
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Schema *)object
                     customerId:(NSString *)customerId
                      schemaKey:(NSString *)schemaKey;

@end

/**
 *  Deletes all access tokens issued by a user for an application.
 *
 *  Method: directory.tokens.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserSecurity
 */
@interface GTLRDirectoryQuery_TokensDelete : GTLRDirectoryQuery

/** The Client ID of the application the token is issued to. */
@property(nonatomic, copy, nullable) NSString *clientId;

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes all access tokens issued by a user for an application.
 *
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *  @param clientId The Client ID of the application the token is issued to.
 *
 *  @return GTLRDirectoryQuery_TokensDelete
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey
                        clientId:(NSString *)clientId;

@end

/**
 *  Gets information about an access token issued by a user.
 *
 *  Method: directory.tokens.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserSecurity
 */
@interface GTLRDirectoryQuery_TokensGet : GTLRDirectoryQuery

/** The Client ID of the application the token is issued to. */
@property(nonatomic, copy, nullable) NSString *clientId;

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRDirectory_Token.
 *
 *  Gets information about an access token issued by a user.
 *
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *  @param clientId The Client ID of the application the token is issued to.
 *
 *  @return GTLRDirectoryQuery_TokensGet
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey
                        clientId:(NSString *)clientId;

@end

/**
 *  Returns the set of tokens specified user has issued to 3rd party
 *  applications.
 *
 *  Method: directory.tokens.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserSecurity
 */
@interface GTLRDirectoryQuery_TokensList : GTLRDirectoryQuery

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRDirectory_Tokens.
 *
 *  Returns the set of tokens specified user has issued to 3rd party
 *  applications.
 *
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *
 *  @return GTLRDirectoryQuery_TokensList
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey;

@end

/**
 *  Turns off 2-Step Verification for user.
 *
 *  Method: directory.twoStepVerification.turnOff
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserSecurity
 */
@interface GTLRDirectoryQuery_TwoStepVerificationTurnOff : GTLRDirectoryQuery

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Turns off 2-Step Verification for user.
 *
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *
 *  @return GTLRDirectoryQuery_TwoStepVerificationTurnOff
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey;

@end

/**
 *  Removes an alias.
 *
 *  Method: directory.users.aliases.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 *    @c kGTLRAuthScopeDirectoryDirectoryUserAlias
 */
@interface GTLRDirectoryQuery_UsersAliasesDelete : GTLRDirectoryQuery

/** The alias to be removed. */
@property(nonatomic, copy, nullable) NSString *alias;

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes an alias.
 *
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *  @param alias The alias to be removed.
 *
 *  @return GTLRDirectoryQuery_UsersAliasesDelete
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey
                           alias:(NSString *)alias;

@end

/**
 *  Adds an alias.
 *
 *  Method: directory.users.aliases.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 *    @c kGTLRAuthScopeDirectoryDirectoryUserAlias
 */
@interface GTLRDirectoryQuery_UsersAliasesInsert : GTLRDirectoryQuery

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRDirectory_Alias.
 *
 *  Adds an alias.
 *
 *  @param object The @c GTLRDirectory_Alias to include in the query.
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *
 *  @return GTLRDirectoryQuery_UsersAliasesInsert
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Alias *)object
                        userKey:(NSString *)userKey;

@end

/**
 *  Lists all aliases for a user.
 *
 *  Method: directory.users.aliases.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 *    @c kGTLRAuthScopeDirectoryDirectoryUserAlias
 *    @c kGTLRAuthScopeDirectoryDirectoryUserAliasReadonly
 *    @c kGTLRAuthScopeDirectoryDirectoryUserReadonly
 */
@interface GTLRDirectoryQuery_UsersAliasesList : GTLRDirectoryQuery

/**
 *  Events to watch for.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryEventAdd Alias Created Event (Value: "add")
 *    @arg @c kGTLRDirectoryEventDelete Alias Deleted Event (Value: "delete")
 */
@property(nonatomic, copy, nullable) NSString *event;

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRDirectory_Aliases.
 *
 *  Lists all aliases for a user.
 *
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *
 *  @return GTLRDirectoryQuery_UsersAliasesList
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey;

@end

/**
 *  Watches for changes in users list.
 *
 *  Method: directory.users.aliases.watch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 *    @c kGTLRAuthScopeDirectoryDirectoryUserAlias
 *    @c kGTLRAuthScopeDirectoryDirectoryUserAliasReadonly
 *    @c kGTLRAuthScopeDirectoryDirectoryUserReadonly
 */
@interface GTLRDirectoryQuery_UsersAliasesWatch : GTLRDirectoryQuery

/**
 *  Events to watch for.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryEventAdd Alias Created Event (Value: "add")
 *    @arg @c kGTLRDirectoryEventDelete Alias Deleted Event (Value: "delete")
 */
@property(nonatomic, copy, nullable) NSString *event;

/** Email or immutable ID of the user */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRDirectory_Channel.
 *
 *  Watches for changes in users list.
 *
 *  @param object The @c GTLRDirectory_Channel to include in the query.
 *  @param userKey Email or immutable ID of the user
 *
 *  @return GTLRDirectoryQuery_UsersAliasesWatch
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Channel *)object
                        userKey:(NSString *)userKey;

@end

/**
 *  Deletes a user.
 *
 *  Method: directory.users.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 */
@interface GTLRDirectoryQuery_UsersDelete : GTLRDirectoryQuery

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Deletes a user.
 *
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *
 *  @return GTLRDirectoryQuery_UsersDelete
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey;

@end

/**
 *  Retrieves a user.
 *
 *  Method: directory.users.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 *    @c kGTLRAuthScopeDirectoryDirectoryUserReadonly
 */
@interface GTLRDirectoryQuery_UsersGet : GTLRDirectoryQuery

/**
 *  A comma-separated list of schema names. All fields from these schemas are
 *  fetched. This should only be set when `projection=custom`.
 */
@property(nonatomic, copy, nullable) NSString *customFieldMask;

/**
 *  What subset of fields to fetch for this user.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryProjectionBasic Do not include any custom fields for
 *        the user. (Value: "basic")
 *    @arg @c kGTLRDirectoryProjectionCustom Include custom fields from schemas
 *        requested in `customFieldMask`. (Value: "custom")
 *    @arg @c kGTLRDirectoryProjectionFull Include all fields associated with
 *        this user. (Value: "full")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDirectoryProjectionBasic.
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Whether to fetch the administrator-only or domain-wide public view of the
 *  user. For more information, see [Retrieve a user as a
 *  non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryViewTypeAdminView Results include both
 *        administrator-only and domain-public fields for the user. (Value:
 *        "admin_view")
 *    @arg @c kGTLRDirectoryViewTypeDomainPublic Results only include fields for
 *        the user that are publicly visible to other users in the domain.
 *        (Value: "domain_public")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDirectoryViewTypeAdminView.
 */
@property(nonatomic, copy, nullable) NSString *viewType;

/**
 *  Fetches a @c GTLRDirectory_User.
 *
 *  Retrieves a user.
 *
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *
 *  @return GTLRDirectoryQuery_UsersGet
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey;

@end

/**
 *  Creates a user.
 *
 *  Method: directory.users.insert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 */
@interface GTLRDirectoryQuery_UsersInsert : GTLRDirectoryQuery

/**
 *  Fetches a @c GTLRDirectory_User.
 *
 *  Creates a user.
 *
 *  @param object The @c GTLRDirectory_User to include in the query.
 *
 *  @return GTLRDirectoryQuery_UsersInsert
 */
+ (instancetype)queryWithObject:(GTLRDirectory_User *)object;

@end

/**
 *  Retrieves a paginated list of either deleted users or all users in a domain.
 *
 *  Method: directory.users.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryCloudPlatform
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 *    @c kGTLRAuthScopeDirectoryDirectoryUserReadonly
 */
@interface GTLRDirectoryQuery_UsersList : GTLRDirectoryQuery

/**
 *  The unique ID for the customer's Google Workspace account. In case of a
 *  multi-domain account, to fetch all groups for a customer, fill this field
 *  instead of domain. You can also use the `my_customer` alias to represent
 *  your account's `customerId`. The `customerId` is also returned as part of
 *  the [Users resource](/admin-sdk/directory/v1/reference/users). Either the
 *  `customer` or the `domain` parameter must be provided.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  A comma-separated list of schema names. All fields from these schemas are
 *  fetched. This should only be set when `projection=custom`.
 */
@property(nonatomic, copy, nullable) NSString *customFieldMask;

/**
 *  The domain name. Use this field to get groups from only one domain. To
 *  return all domains for a customer account, use the `customer` query
 *  parameter instead. Either the `customer` or the `domain` parameter must be
 *  provided.
 */
@property(nonatomic, copy, nullable) NSString *domain;

/**
 *  Event on which subscription is intended (if subscribing)
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryEventAdd User Created Event (Value: "add")
 *    @arg @c kGTLRDirectoryEventDelete User Deleted Event (Value: "delete")
 *    @arg @c kGTLRDirectoryEventMakeAdmin User Admin Status Change Event
 *        (Value: "makeAdmin")
 *    @arg @c kGTLRDirectoryEventUndelete User Undeleted Event (Value:
 *        "undelete")
 *    @arg @c kGTLRDirectoryEventUpdate User Updated Event (Value: "update")
 */
@property(nonatomic, copy, nullable) NSString *event;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 100 (from the
 *        range 1..500).
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Property to use for sorting results.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryOrderByEmail Primary email of the user. (Value:
 *        "email")
 *    @arg @c kGTLRDirectoryOrderByFamilyName User's family name. (Value:
 *        "familyName")
 *    @arg @c kGTLRDirectoryOrderByGivenName User's given name. (Value:
 *        "givenName")
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Token to specify next page in the list */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  What subset of fields to fetch for this user.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryProjectionBasic Do not include any custom fields for
 *        the user. (Value: "basic")
 *    @arg @c kGTLRDirectoryProjectionCustom Include custom fields from schemas
 *        requested in `customFieldMask`. (Value: "custom")
 *    @arg @c kGTLRDirectoryProjectionFull Include all fields associated with
 *        this user. (Value: "full")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDirectoryProjectionBasic.
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  Query string for searching user fields. For more information on constructing
 *  user queries, see [Search for
 *  Users](/admin-sdk/directory/v1/guides/search-users).
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  If set to `true`, retrieves the list of deleted users. (Default: `false`)
 */
@property(nonatomic, copy, nullable) NSString *showDeleted;

/**
 *  Whether to return results in ascending or descending order, ignoring case.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectorySortOrderAscending Ascending order. (Value:
 *        "ASCENDING")
 *    @arg @c kGTLRDirectorySortOrderDescending Descending order. (Value:
 *        "DESCENDING")
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Whether to fetch the administrator-only or domain-wide public view of the
 *  user. For more information, see [Retrieve a user as a
 *  non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryViewTypeAdminView Results include both
 *        administrator-only and domain-public fields for the user. (Value:
 *        "admin_view")
 *    @arg @c kGTLRDirectoryViewTypeDomainPublic Results only include fields for
 *        the user that are publicly visible to other users in the domain.
 *        (Value: "domain_public")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDirectoryViewTypeAdminView.
 */
@property(nonatomic, copy, nullable) NSString *viewType;

/**
 *  Fetches a @c GTLRDirectory_Users.
 *
 *  Retrieves a paginated list of either deleted users or all users in a domain.
 *
 *  @return GTLRDirectoryQuery_UsersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Makes a user a super administrator.
 *
 *  Method: directory.users.makeAdmin
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 */
@interface GTLRDirectoryQuery_UsersMakeAdmin : GTLRDirectoryQuery

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Makes a user a super administrator.
 *
 *  @param object The @c GTLRDirectory_UserMakeAdmin to include in the query.
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *
 *  @return GTLRDirectoryQuery_UsersMakeAdmin
 */
+ (instancetype)queryWithObject:(GTLRDirectory_UserMakeAdmin *)object
                        userKey:(NSString *)userKey;

@end

/**
 *  Updates a user using patch semantics. The update method should be used
 *  instead, since it also supports patch semantics and has better performance.
 *  This method is unable to clear fields that contain repeated objects
 *  (`addresses`, `phones`, etc). Use the update method instead.
 *
 *  Method: directory.users.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 */
@interface GTLRDirectoryQuery_UsersPatch : GTLRDirectoryQuery

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRDirectory_User.
 *
 *  Updates a user using patch semantics. The update method should be used
 *  instead, since it also supports patch semantics and has better performance.
 *  This method is unable to clear fields that contain repeated objects
 *  (`addresses`, `phones`, etc). Use the update method instead.
 *
 *  @param object The @c GTLRDirectory_User to include in the query.
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *
 *  @return GTLRDirectoryQuery_UsersPatch
 */
+ (instancetype)queryWithObject:(GTLRDirectory_User *)object
                        userKey:(NSString *)userKey;

@end

/**
 *  Removes the user's photo.
 *
 *  Method: directory.users.photos.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 */
@interface GTLRDirectoryQuery_UsersPhotosDelete : GTLRDirectoryQuery

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Removes the user's photo.
 *
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *
 *  @return GTLRDirectoryQuery_UsersPhotosDelete
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey;

@end

/**
 *  Retrieves the user's photo.
 *
 *  Method: directory.users.photos.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 *    @c kGTLRAuthScopeDirectoryDirectoryUserReadonly
 */
@interface GTLRDirectoryQuery_UsersPhotosGet : GTLRDirectoryQuery

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRDirectory_UserPhoto.
 *
 *  Retrieves the user's photo.
 *
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *
 *  @return GTLRDirectoryQuery_UsersPhotosGet
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey;

@end

/**
 *  Adds a photo for the user. This method supports [patch
 *  semantics](/admin-sdk/directory/v1/guides/performance#patch).
 *
 *  Method: directory.users.photos.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 */
@interface GTLRDirectoryQuery_UsersPhotosPatch : GTLRDirectoryQuery

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRDirectory_UserPhoto.
 *
 *  Adds a photo for the user. This method supports [patch
 *  semantics](/admin-sdk/directory/v1/guides/performance#patch).
 *
 *  @param object The @c GTLRDirectory_UserPhoto to include in the query.
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *
 *  @return GTLRDirectoryQuery_UsersPhotosPatch
 */
+ (instancetype)queryWithObject:(GTLRDirectory_UserPhoto *)object
                        userKey:(NSString *)userKey;

@end

/**
 *  Adds a photo for the user.
 *
 *  Method: directory.users.photos.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 */
@interface GTLRDirectoryQuery_UsersPhotosUpdate : GTLRDirectoryQuery

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRDirectory_UserPhoto.
 *
 *  Adds a photo for the user.
 *
 *  @param object The @c GTLRDirectory_UserPhoto to include in the query.
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *
 *  @return GTLRDirectoryQuery_UsersPhotosUpdate
 */
+ (instancetype)queryWithObject:(GTLRDirectory_UserPhoto *)object
                        userKey:(NSString *)userKey;

@end

/**
 *  Signs a user out of all web and device sessions and reset their sign-in
 *  cookies. User will have to sign in by authenticating again.
 *
 *  Method: directory.users.signOut
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserSecurity
 */
@interface GTLRDirectoryQuery_UsersSignOut : GTLRDirectoryQuery

/**
 *  Identifies the target user in the API request. The value can be the user's
 *  primary email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Signs a user out of all web and device sessions and reset their sign-in
 *  cookies. User will have to sign in by authenticating again.
 *
 *  @param userKey Identifies the target user in the API request. The value can
 *    be the user's primary email address, alias email address, or unique user
 *    ID.
 *
 *  @return GTLRDirectoryQuery_UsersSignOut
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey;

@end

/**
 *  Undeletes a deleted user.
 *
 *  Method: directory.users.undelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 */
@interface GTLRDirectoryQuery_UsersUndelete : GTLRDirectoryQuery

/** The immutable id of the user */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Undeletes a deleted user.
 *
 *  @param object The @c GTLRDirectory_UserUndelete to include in the query.
 *  @param userKey The immutable id of the user
 *
 *  @return GTLRDirectoryQuery_UsersUndelete
 */
+ (instancetype)queryWithObject:(GTLRDirectory_UserUndelete *)object
                        userKey:(NSString *)userKey;

@end

/**
 *  Updates a user. This method supports patch semantics, meaning you only need
 *  to include the fields you wish to update. Fields that are not present in the
 *  request will be preserved, and fields set to `null` will be cleared.
 *
 *  Method: directory.users.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 */
@interface GTLRDirectoryQuery_UsersUpdate : GTLRDirectoryQuery

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRDirectory_User.
 *
 *  Updates a user. This method supports patch semantics, meaning you only need
 *  to include the fields you wish to update. Fields that are not present in the
 *  request will be preserved, and fields set to `null` will be cleared.
 *
 *  @param object The @c GTLRDirectory_User to include in the query.
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *
 *  @return GTLRDirectoryQuery_UsersUpdate
 */
+ (instancetype)queryWithObject:(GTLRDirectory_User *)object
                        userKey:(NSString *)userKey;

@end

/**
 *  Watches for changes in users list.
 *
 *  Method: directory.users.watch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryCloudPlatform
 *    @c kGTLRAuthScopeDirectoryDirectoryUser
 *    @c kGTLRAuthScopeDirectoryDirectoryUserReadonly
 */
@interface GTLRDirectoryQuery_UsersWatch : GTLRDirectoryQuery

/**
 *  Immutable ID of the Google Workspace account. In case of multi-domain, to
 *  fetch all users for a customer, fill this field instead of domain.
 */
@property(nonatomic, copy, nullable) NSString *customer;

/**
 *  Comma-separated list of schema names. All fields from these schemas are
 *  fetched. This should only be set when projection=custom.
 */
@property(nonatomic, copy, nullable) NSString *customFieldMask;

/**
 *  Name of the domain. Fill this field to get users from only this domain. To
 *  return all users in a multi-domain fill customer field instead."
 */
@property(nonatomic, copy, nullable) NSString *domain;

/**
 *  Events to watch for.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryEventAdd User Created Event (Value: "add")
 *    @arg @c kGTLRDirectoryEventDelete User Deleted Event (Value: "delete")
 *    @arg @c kGTLRDirectoryEventMakeAdmin User Admin Status Change Event
 *        (Value: "makeAdmin")
 *    @arg @c kGTLRDirectoryEventUndelete User Undeleted Event (Value:
 *        "undelete")
 *    @arg @c kGTLRDirectoryEventUpdate User Updated Event (Value: "update")
 */
@property(nonatomic, copy, nullable) NSString *event;

/**
 *  Maximum number of results to return.
 *
 *  @note If not set, the documented server-side default will be 100 (from the
 *        range 1..500).
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  Column to use for sorting results
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryOrderByEmail Primary email of the user. (Value:
 *        "email")
 *    @arg @c kGTLRDirectoryOrderByFamilyName User's family name. (Value:
 *        "familyName")
 *    @arg @c kGTLRDirectoryOrderByGivenName User's given name. (Value:
 *        "givenName")
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Token to specify next page in the list */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  What subset of fields to fetch for this user.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryProjectionBasic Do not include any custom fields for
 *        the user. (Value: "basic")
 *    @arg @c kGTLRDirectoryProjectionCustom Include custom fields from schemas
 *        mentioned in customFieldMask. (Value: "custom")
 *    @arg @c kGTLRDirectoryProjectionFull Include all fields associated with
 *        this user. (Value: "full")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDirectoryProjectionBasic.
 */
@property(nonatomic, copy, nullable) NSString *projection;

/**
 *  Query string search. Should be of the form "". Complete documentation is at
 *  https: //developers.google.com/admin-sdk/directory/v1/guides/search-users
 */
@property(nonatomic, copy, nullable) NSString *query;

/** If set to true, retrieves the list of deleted users. (Default: false) */
@property(nonatomic, copy, nullable) NSString *showDeleted;

/**
 *  Whether to return results in ascending or descending order.
 *
 *  Likely values:
 *    @arg @c kGTLRDirectorySortOrderAscending Ascending order. (Value:
 *        "ASCENDING")
 *    @arg @c kGTLRDirectorySortOrderDescending Descending order. (Value:
 *        "DESCENDING")
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

/**
 *  Whether to fetch the administrator-only or domain-wide public view of the
 *  user. For more information, see [Retrieve a user as a
 *  non-administrator](/admin-sdk/directory/v1/guides/manage-users#retrieve_users_non_admin).
 *
 *  Likely values:
 *    @arg @c kGTLRDirectoryViewTypeAdminView Results include both
 *        administrator-only and domain-public fields. (Value: "admin_view")
 *    @arg @c kGTLRDirectoryViewTypeDomainPublic Results only include fields for
 *        the user that are publicly visible to other users in the domain.
 *        (Value: "domain_public")
 *
 *  @note If not set, the documented server-side default will be
 *        kGTLRDirectoryViewTypeAdminView.
 */
@property(nonatomic, copy, nullable) NSString *viewType;

/**
 *  Fetches a @c GTLRDirectory_Channel.
 *
 *  Watches for changes in users list.
 *
 *  @param object The @c GTLRDirectory_Channel to include in the query.
 *
 *  @return GTLRDirectoryQuery_UsersWatch
 */
+ (instancetype)queryWithObject:(GTLRDirectory_Channel *)object;

@end

/**
 *  Generates new backup verification codes for the user.
 *
 *  Method: directory.verificationCodes.generate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserSecurity
 */
@interface GTLRDirectoryQuery_VerificationCodesGenerate : GTLRDirectoryQuery

/** Email or immutable ID of the user */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Generates new backup verification codes for the user.
 *
 *  @param userKey Email or immutable ID of the user
 *
 *  @return GTLRDirectoryQuery_VerificationCodesGenerate
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey;

@end

/**
 *  Invalidates the current backup verification codes for the user.
 *
 *  Method: directory.verificationCodes.invalidate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserSecurity
 */
@interface GTLRDirectoryQuery_VerificationCodesInvalidate : GTLRDirectoryQuery

/** Email or immutable ID of the user */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Invalidates the current backup verification codes for the user.
 *
 *  @param userKey Email or immutable ID of the user
 *
 *  @return GTLRDirectoryQuery_VerificationCodesInvalidate
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey;

@end

/**
 *  Returns the current set of valid backup verification codes for the specified
 *  user.
 *
 *  Method: directory.verificationCodes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDirectoryDirectoryUserSecurity
 */
@interface GTLRDirectoryQuery_VerificationCodesList : GTLRDirectoryQuery

/**
 *  Identifies the user in the API request. The value can be the user's primary
 *  email address, alias email address, or unique user ID.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRDirectory_VerificationCodes.
 *
 *  Returns the current set of valid backup verification codes for the specified
 *  user.
 *
 *  @param userKey Identifies the user in the API request. The value can be the
 *    user's primary email address, alias email address, or unique user ID.
 *
 *  @return GTLRDirectoryQuery_VerificationCodesList
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
