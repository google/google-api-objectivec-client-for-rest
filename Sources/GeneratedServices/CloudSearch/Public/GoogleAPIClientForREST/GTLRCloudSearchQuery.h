// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Search API (cloudsearch/v1)
// Description:
//   Cloud Search provides cloud-based search capabilities over Google Workspace
//   data. The Cloud Search API allows indexing of non-Google Workspace data
//   into Cloud Search.
// Documentation:
//   https://developers.google.com/cloud-search/docs/guides/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRCloudSearchObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// mode

/**
 *  For changes that are executed after the response is sent back to the caller.
 *
 *  Value: "ASYNCHRONOUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearchModeAsynchronous;
/**
 *  For real-time updates.
 *
 *  Value: "SYNCHRONOUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearchModeSynchronous;
/**
 *  The priority is not specified in the update request. Leaving priority
 *  unspecified results in an update failure.
 *
 *  Value: "UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearchModeUnspecified;

// ----------------------------------------------------------------------------
// resolutionStatusCode

/**
 *  Input-only value. Used to list all unmapped identities regardless of status.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearchResolutionStatusCodeCodeUnspecified;
/**
 *  IDaaS does not understand the identity source, probably because the schema
 *  was modified in a non compatible way.
 *
 *  Value: "IDENTITY_SOURCE_MISCONFIGURED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearchResolutionStatusCodeIdentitySourceMisconfigured;
/**
 *  The identity source associated with the identity was either not found or
 *  deleted.
 *
 *  Value: "IDENTITY_SOURCE_NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearchResolutionStatusCodeIdentitySourceNotFound;
/**
 *  Internal error.
 *
 *  Value: "INTERNAL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearchResolutionStatusCodeInternalError;
/**
 *  The unmapped identity was not found in IDaaS, and needs to be provided by
 *  the user.
 *
 *  Value: "NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearchResolutionStatusCodeNotFound;
/**
 *  The number of users associated with the external identity is too large.
 *
 *  Value: "TOO_MANY_MAPPINGS_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearchResolutionStatusCodeTooManyMappingsFound;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Cloud Search query classes.
 */
@interface GTLRCloudSearchQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Checks whether an item is accessible by specified principal. Principal must
 *  be a user; groups and domain values aren't supported. **Note:** This API
 *  requires an admin account to execute.
 *
 *  Method: cloudsearch.debug.datasources.items.checkAccess
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchDebug
 */
@interface GTLRCloudSearchQuery_DebugDatasourcesItemsCheckAccess : GTLRCloudSearchQuery

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/** Item name, format: datasources/{source_id}/items/{item_id} */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_CheckAccessResponse.
 *
 *  Checks whether an item is accessible by specified principal. Principal must
 *  be a user; groups and domain values aren't supported. **Note:** This API
 *  requires an admin account to execute.
 *
 *  @param object The @c GTLRCloudSearch_Principal to include in the query.
 *  @param name Item name, format: datasources/{source_id}/items/{item_id}
 *
 *  @return GTLRCloudSearchQuery_DebugDatasourcesItemsCheckAccess
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_Principal *)object
                           name:(NSString *)name;

@end

/**
 *  Fetches the item whose viewUrl exactly matches that of the URL provided in
 *  the request. **Note:** This API requires an admin account to execute.
 *
 *  Method: cloudsearch.debug.datasources.items.searchByViewUrl
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchDebug
 */
@interface GTLRCloudSearchQuery_DebugDatasourcesItemsSearchByViewUrl : GTLRCloudSearchQuery

/** Source name, format: datasources/{source_id} */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_SearchItemsByViewUrlResponse.
 *
 *  Fetches the item whose viewUrl exactly matches that of the URL provided in
 *  the request. **Note:** This API requires an admin account to execute.
 *
 *  @param object The @c GTLRCloudSearch_SearchItemsByViewUrlRequest to include
 *    in the query.
 *  @param name Source name, format: datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_DebugDatasourcesItemsSearchByViewUrl
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_SearchItemsByViewUrlRequest *)object
                           name:(NSString *)name;

@end

/**
 *  List all unmapped identities for a specific item. **Note:** This API
 *  requires an admin account to execute.
 *
 *  Method: cloudsearch.debug.datasources.items.unmappedids.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchDebug
 */
@interface GTLRCloudSearchQuery_DebugDatasourcesItemsUnmappedidsList : GTLRCloudSearchQuery

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/** Maximum number of items to fetch in a request. Defaults to 100. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The name of the item, in the following format:
 *  datasources/{source_id}/items/{ID}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCloudSearch_ListUnmappedIdentitiesResponse.
 *
 *  List all unmapped identities for a specific item. **Note:** This API
 *  requires an admin account to execute.
 *
 *  @param parent The name of the item, in the following format:
 *    datasources/{source_id}/items/{ID}
 *
 *  @return GTLRCloudSearchQuery_DebugDatasourcesItemsUnmappedidsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists names of items associated with an unmapped identity. **Note:** This
 *  API requires an admin account to execute.
 *
 *  Method: cloudsearch.debug.identitysources.items.listForunmappedidentity
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchDebug
 */
@interface GTLRCloudSearchQuery_DebugIdentitysourcesItemsListForunmappedidentity : GTLRCloudSearchQuery

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

@property(nonatomic, copy, nullable) NSString *groupResourceName;

/** Maximum number of items to fetch in a request. Defaults to 100. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The name of the identity source, in the following format:
 *  identitysources/{source_id}}
 */
@property(nonatomic, copy, nullable) NSString *parent;

@property(nonatomic, copy, nullable) NSString *userResourceName;

/**
 *  Fetches a @c GTLRCloudSearch_ListItemNamesForUnmappedIdentityResponse.
 *
 *  Lists names of items associated with an unmapped identity. **Note:** This
 *  API requires an admin account to execute.
 *
 *  @param parent The name of the identity source, in the following format:
 *    identitysources/{source_id}}
 *
 *  @return GTLRCloudSearchQuery_DebugIdentitysourcesItemsListForunmappedidentity
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists unmapped user identities for an identity source. **Note:** This API
 *  requires an admin account to execute.
 *
 *  Method: cloudsearch.debug.identitysources.unmappedids.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchDebug
 */
@interface GTLRCloudSearchQuery_DebugIdentitysourcesUnmappedidsList : GTLRCloudSearchQuery

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/** Maximum number of items to fetch in a request. Defaults to 100. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The name of the identity source, in the following format:
 *  identitysources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Limit users selection to this status.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearchResolutionStatusCodeCodeUnspecified Input-only
 *        value. Used to list all unmapped identities regardless of status.
 *        (Value: "CODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearchResolutionStatusCodeNotFound The unmapped identity
 *        was not found in IDaaS, and needs to be provided by the user. (Value:
 *        "NOT_FOUND")
 *    @arg @c kGTLRCloudSearchResolutionStatusCodeIdentitySourceNotFound The
 *        identity source associated with the identity was either not found or
 *        deleted. (Value: "IDENTITY_SOURCE_NOT_FOUND")
 *    @arg @c kGTLRCloudSearchResolutionStatusCodeIdentitySourceMisconfigured
 *        IDaaS does not understand the identity source, probably because the
 *        schema was modified in a non compatible way. (Value:
 *        "IDENTITY_SOURCE_MISCONFIGURED")
 *    @arg @c kGTLRCloudSearchResolutionStatusCodeTooManyMappingsFound The
 *        number of users associated with the external identity is too large.
 *        (Value: "TOO_MANY_MAPPINGS_FOUND")
 *    @arg @c kGTLRCloudSearchResolutionStatusCodeInternalError Internal error.
 *        (Value: "INTERNAL_ERROR")
 */
@property(nonatomic, copy, nullable) NSString *resolutionStatusCode;

/**
 *  Fetches a @c GTLRCloudSearch_ListUnmappedIdentitiesResponse.
 *
 *  Lists unmapped user identities for an identity source. **Note:** This API
 *  requires an admin account to execute.
 *
 *  @param parent The name of the identity source, in the following format:
 *    identitysources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_DebugIdentitysourcesUnmappedidsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Deletes the schema of a data source. **Note:** This API requires an admin or
 *  service account to execute.
 *
 *  Method: cloudsearch.indexing.datasources.deleteSchema
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesDeleteSchema : GTLRCloudSearchQuery

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  The name of the data source to delete Schema. Format:
 *  datasources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Deletes the schema of a data source. **Note:** This API requires an admin or
 *  service account to execute.
 *
 *  @param name The name of the data source to delete Schema. Format:
 *    datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesDeleteSchema
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the schema of a data source. **Note:** This API requires an admin or
 *  service account to execute.
 *
 *  Method: cloudsearch.indexing.datasources.getSchema
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesGetSchema : GTLRCloudSearchQuery

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  The name of the data source to get Schema. Format: datasources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Schema.
 *
 *  Gets the schema of a data source. **Note:** This API requires an admin or
 *  service account to execute.
 *
 *  @param name The name of the data source to get Schema. Format:
 *    datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesGetSchema
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes Item resource for the specified resource name. This API requires an
 *  admin or service account to execute. The service account used is the one
 *  whitelisted in the corresponding data source.
 *
 *  Method: cloudsearch.indexing.datasources.items.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsDelete : GTLRCloudSearchQuery

/**
 *  The name of connector making this call. Format:
 *  datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  Required. The RequestMode for this request.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearchModeUnspecified The priority is not specified in
 *        the update request. Leaving priority unspecified results in an update
 *        failure. (Value: "UNSPECIFIED")
 *    @arg @c kGTLRCloudSearchModeSynchronous For real-time updates. (Value:
 *        "SYNCHRONOUS")
 *    @arg @c kGTLRCloudSearchModeAsynchronous For changes that are executed
 *        after the response is sent back to the caller. (Value: "ASYNCHRONOUS")
 */
@property(nonatomic, copy, nullable) NSString *mode;

/**
 *  Required. The name of the item to delete. Format:
 *  datasources/{source_id}/items/{item_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The incremented version of the item to delete from the index. The
 *  indexing system stores the version from the datasource as a byte string and
 *  compares the Item version in the index to the version of the queued Item
 *  using lexical ordering. Cloud Search Indexing won't delete any queued item
 *  with a version value that is less than or equal to the version of the
 *  currently indexed item. The maximum length for this field is 1024 bytes. For
 *  information on how item version affects the deletion process, refer to
 *  [Handle revisions after manual
 *  deletes](https://developers.google.com/cloud-search/docs/guides/operations).
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *version;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Deletes Item resource for the specified resource name. This API requires an
 *  admin or service account to execute. The service account used is the one
 *  whitelisted in the corresponding data source.
 *
 *  @param name Required. The name of the item to delete. Format:
 *    datasources/{source_id}/items/{item_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes all items in a queue. This method is useful for deleting stale
 *  items. This API requires an admin or service account to execute. The service
 *  account used is the one whitelisted in the corresponding data source.
 *
 *  Method: cloudsearch.indexing.datasources.items.deleteQueueItems
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsDeleteQueueItems : GTLRCloudSearchQuery

/**
 *  The name of the Data Source to delete items in a queue. Format:
 *  datasources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Deletes all items in a queue. This method is useful for deleting stale
 *  items. This API requires an admin or service account to execute. The service
 *  account used is the one whitelisted in the corresponding data source.
 *
 *  @param object The @c GTLRCloudSearch_DeleteQueueItemsRequest to include in
 *    the query.
 *  @param name The name of the Data Source to delete items in a queue. Format:
 *    datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsDeleteQueueItems
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_DeleteQueueItemsRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets Item resource by item name. This API requires an admin or service
 *  account to execute. The service account used is the one whitelisted in the
 *  corresponding data source.
 *
 *  Method: cloudsearch.indexing.datasources.items.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsGet : GTLRCloudSearchQuery

/**
 *  The name of connector making this call. Format:
 *  datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  The name of the item to get info. Format:
 *  datasources/{source_id}/items/{item_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Item.
 *
 *  Gets Item resource by item name. This API requires an admin or service
 *  account to execute. The service account used is the one whitelisted in the
 *  corresponding data source.
 *
 *  @param name The name of the item to get info. Format:
 *    datasources/{source_id}/items/{item_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates Item ACL, metadata, and content. It will insert the Item if it does
 *  not exist. This method does not support partial updates. Fields with no
 *  provided values are cleared out in the Cloud Search index. This API requires
 *  an admin or service account to execute. The service account used is the one
 *  whitelisted in the corresponding data source.
 *
 *  Method: cloudsearch.indexing.datasources.items.index
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsIndex : GTLRCloudSearchQuery

/**
 *  The name of the Item. Format: datasources/{source_id}/items/{item_id} This
 *  is a required field. The maximum length is 1536 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Updates Item ACL, metadata, and content. It will insert the Item if it does
 *  not exist. This method does not support partial updates. Fields with no
 *  provided values are cleared out in the Cloud Search index. This API requires
 *  an admin or service account to execute. The service account used is the one
 *  whitelisted in the corresponding data source.
 *
 *  @param object The @c GTLRCloudSearch_IndexItemRequest to include in the
 *    query.
 *  @param name The name of the Item. Format:
 *    datasources/{source_id}/items/{item_id} This is a required field. The
 *    maximum length is 1536 characters.
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsIndex
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_IndexItemRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Lists all or a subset of Item resources. This API requires an admin or
 *  service account to execute. The service account used is the one whitelisted
 *  in the corresponding data source.
 *
 *  Method: cloudsearch.indexing.datasources.items.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsList : GTLRCloudSearchQuery

/**
 *  When set to true, the indexing system only populates the following fields:
 *  name, version, queue. metadata.hash, metadata.title,
 *  metadata.sourceRepositoryURL, metadata.objectType, metadata.createTime,
 *  metadata.updateTime, metadata.contentLanguage, metadata.mimeType,
 *  structured_data.hash, content.hash, itemType, itemStatus.code,
 *  itemStatus.processingError.code, itemStatus.repositoryError.type, If this
 *  value is false, then all the fields are populated in Item.
 */
@property(nonatomic, assign) BOOL brief;

/**
 *  The name of connector making this call. Format:
 *  datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  The name of the Data Source to list Items. Format: datasources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Maximum number of items to fetch in a request. The max value is 1000 when
 *  brief is true. The max value is 10 if brief is false. The default value is
 *  10
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous List request, if any.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudSearch_ListItemsResponse.
 *
 *  Lists all or a subset of Item resources. This API requires an admin or
 *  service account to execute. The service account used is the one whitelisted
 *  in the corresponding data source.
 *
 *  @param name The name of the Data Source to list Items. Format:
 *    datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Polls for unreserved items from the indexing queue and marks a set as
 *  reserved, starting with items that have the oldest timestamp from the
 *  highest priority ItemStatus. The priority order is as follows: ERROR
 *  MODIFIED NEW_ITEM ACCEPTED Reserving items ensures that polling from other
 *  threads cannot create overlapping sets. After handling the reserved items,
 *  the client should put items back into the unreserved state, either by
 *  calling index, or by calling push with the type REQUEUE. Items automatically
 *  become available (unreserved) after 4 hours even if no update or push method
 *  is called. This API requires an admin or service account to execute. The
 *  service account used is the one whitelisted in the corresponding data
 *  source.
 *
 *  Method: cloudsearch.indexing.datasources.items.poll
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsPoll : GTLRCloudSearchQuery

/**
 *  The name of the Data Source to poll items. Format: datasources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_PollItemsResponse.
 *
 *  Polls for unreserved items from the indexing queue and marks a set as
 *  reserved, starting with items that have the oldest timestamp from the
 *  highest priority ItemStatus. The priority order is as follows: ERROR
 *  MODIFIED NEW_ITEM ACCEPTED Reserving items ensures that polling from other
 *  threads cannot create overlapping sets. After handling the reserved items,
 *  the client should put items back into the unreserved state, either by
 *  calling index, or by calling push with the type REQUEUE. Items automatically
 *  become available (unreserved) after 4 hours even if no update or push method
 *  is called. This API requires an admin or service account to execute. The
 *  service account used is the one whitelisted in the corresponding data
 *  source.
 *
 *  @param object The @c GTLRCloudSearch_PollItemsRequest to include in the
 *    query.
 *  @param name The name of the Data Source to poll items. Format:
 *    datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsPoll
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_PollItemsRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Pushes an item onto a queue for later polling and updating. This API
 *  requires an admin or service account to execute. The service account used is
 *  the one whitelisted in the corresponding data source.
 *
 *  Method: cloudsearch.indexing.datasources.items.push
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsPush : GTLRCloudSearchQuery

/**
 *  The name of the item to push into the indexing queue. Format:
 *  datasources/{source_id}/items/{ID} This is a required field. The maximum
 *  length is 1536 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Item.
 *
 *  Pushes an item onto a queue for later polling and updating. This API
 *  requires an admin or service account to execute. The service account used is
 *  the one whitelisted in the corresponding data source.
 *
 *  @param object The @c GTLRCloudSearch_PushItemRequest to include in the
 *    query.
 *  @param name The name of the item to push into the indexing queue. Format:
 *    datasources/{source_id}/items/{ID} This is a required field. The maximum
 *    length is 1536 characters.
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsPush
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_PushItemRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Unreserves all items from a queue, making them all eligible to be polled.
 *  This method is useful for resetting the indexing queue after a connector has
 *  been restarted. This API requires an admin or service account to execute.
 *  The service account used is the one whitelisted in the corresponding data
 *  source.
 *
 *  Method: cloudsearch.indexing.datasources.items.unreserve
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsUnreserve : GTLRCloudSearchQuery

/**
 *  The name of the Data Source to unreserve all items. Format:
 *  datasources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Unreserves all items from a queue, making them all eligible to be polled.
 *  This method is useful for resetting the indexing queue after a connector has
 *  been restarted. This API requires an admin or service account to execute.
 *  The service account used is the one whitelisted in the corresponding data
 *  source.
 *
 *  @param object The @c GTLRCloudSearch_UnreserveItemsRequest to include in the
 *    query.
 *  @param name The name of the Data Source to unreserve all items. Format:
 *    datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsUnreserve
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_UnreserveItemsRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates an upload session for uploading item content. For items smaller than
 *  100 KB, it's easier to embed the content inline within an index request.
 *  This API requires an admin or service account to execute. The service
 *  account used is the one whitelisted in the corresponding data source.
 *
 *  Method: cloudsearch.indexing.datasources.items.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesItemsUpload : GTLRCloudSearchQuery

/**
 *  The name of the Item to start a resumable upload. Format:
 *  datasources/{source_id}/items/{item_id}. The maximum length is 1536 bytes.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_UploadItemRef.
 *
 *  Creates an upload session for uploading item content. For items smaller than
 *  100 KB, it's easier to embed the content inline within an index request.
 *  This API requires an admin or service account to execute. The service
 *  account used is the one whitelisted in the corresponding data source.
 *
 *  @param object The @c GTLRCloudSearch_StartUploadItemRequest to include in
 *    the query.
 *  @param name The name of the Item to start a resumable upload. Format:
 *    datasources/{source_id}/items/{item_id}. The maximum length is 1536 bytes.
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesItemsUpload
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_StartUploadItemRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates the schema of a data source. This method does not perform
 *  incremental updates to the schema. Instead, this method updates the schema
 *  by overwriting the entire schema. **Note:** This API requires an admin or
 *  service account to execute.
 *
 *  Method: cloudsearch.indexing.datasources.updateSchema
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_IndexingDatasourcesUpdateSchema : GTLRCloudSearchQuery

/**
 *  The name of the data source to update Schema. Format:
 *  datasources/{source_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Updates the schema of a data source. This method does not perform
 *  incremental updates to the schema. Instead, this method updates the schema
 *  by overwriting the entire schema. **Note:** This API requires an admin or
 *  service account to execute.
 *
 *  @param object The @c GTLRCloudSearch_UpdateSchemaRequest to include in the
 *    query.
 *  @param name The name of the data source to update Schema. Format:
 *    datasources/{source_id}
 *
 *  @return GTLRCloudSearchQuery_IndexingDatasourcesUpdateSchema
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_UpdateSchemaRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Uploads media for indexing. The upload endpoint supports direct and
 *  resumable upload protocols and is intended for large items that can not be
 *  [inlined during index
 *  requests](https://developers.google.com/cloud-search/docs/reference/rest/v1/indexing.datasources.items#itemcontent).
 *  To index large content: 1. Call indexing.datasources.items.upload with the
 *  item name to begin an upload session and retrieve the UploadItemRef. 1. Call
 *  media.upload to upload the content, as a streaming request, using the same
 *  resource name from the UploadItemRef from step 1. 1. Call
 *  indexing.datasources.items.index to index the item. Populate the
 *  [ItemContent](/cloud-search/docs/reference/rest/v1/indexing.datasources.items#ItemContent)
 *  with the UploadItemRef from step 1. For additional information, see [Create
 *  a content connector using the REST
 *  API](https://developers.google.com/cloud-search/docs/guides/content-connector#rest).
 *  **Note:** This API requires a service account to execute.
 *
 *  Method: cloudsearch.media.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 */
@interface GTLRCloudSearchQuery_MediaUpload : GTLRCloudSearchQuery

/**
 *  Name of the media that is being downloaded. See ReadRequest.resource_name.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Fetches a @c GTLRCloudSearch_Media.
 *
 *  Uploads media for indexing. The upload endpoint supports direct and
 *  resumable upload protocols and is intended for large items that can not be
 *  [inlined during index
 *  requests](https://developers.google.com/cloud-search/docs/reference/rest/v1/indexing.datasources.items#itemcontent).
 *  To index large content: 1. Call indexing.datasources.items.upload with the
 *  item name to begin an upload session and retrieve the UploadItemRef. 1. Call
 *  media.upload to upload the content, as a streaming request, using the same
 *  resource name from the UploadItemRef from step 1. 1. Call
 *  indexing.datasources.items.index to index the item. Populate the
 *  [ItemContent](/cloud-search/docs/reference/rest/v1/indexing.datasources.items#ItemContent)
 *  with the UploadItemRef from step 1. For additional information, see [Create
 *  a content connector using the REST
 *  API](https://developers.google.com/cloud-search/docs/guides/content-connector#rest).
 *  **Note:** This API requires a service account to execute.
 *
 *  @param object The @c GTLRCloudSearch_Media to include in the query.
 *  @param resourceName Name of the media that is being downloaded. See
 *    ReadRequest.resource_name.
 *  @param uploadParameters The media to include in this query. Accepted MIME
 *    type: * / *
 *
 *  @return GTLRCloudSearchQuery_MediaUpload
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_Media *)object
                   resourceName:(NSString *)resourceName
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: cloudsearch.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchDebug
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery
 */
@interface GTLRCloudSearchQuery_OperationsGet : GTLRCloudSearchQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRCloudSearchQuery_OperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: cloudsearch.operations.lro.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchDebug
 *    @c kGTLRAuthScopeCloudSearchCloudSearchIndexing
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery
 */
@interface GTLRCloudSearchQuery_OperationsLroList : GTLRCloudSearchQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudSearch_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRCloudSearchQuery_OperationsLroList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  The Cloud Search Query API provides the search method, which returns the
 *  most relevant results from a user query. The results can come from Google
 *  Workspace apps, such as Gmail or Google Drive, or they can come from data
 *  that you have indexed from a third party. **Note:** This API requires a
 *  standard end user account to execute. A service account can't perform Query
 *  API requests directly; to use a service account to perform queries, set up
 *  [Google Workspace domain-wide delegation of
 *  authority](https://developers.google.com/cloud-search/docs/guides/delegation/).
 *
 *  Method: cloudsearch.query.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchQuery
 */
@interface GTLRCloudSearchQuery_QuerySearch : GTLRCloudSearchQuery

/**
 *  Fetches a @c GTLRCloudSearch_SearchResponse.
 *
 *  The Cloud Search Query API provides the search method, which returns the
 *  most relevant results from a user query. The results can come from Google
 *  Workspace apps, such as Gmail or Google Drive, or they can come from data
 *  that you have indexed from a third party. **Note:** This API requires a
 *  standard end user account to execute. A service account can't perform Query
 *  API requests directly; to use a service account to perform queries, set up
 *  [Google Workspace domain-wide delegation of
 *  authority](https://developers.google.com/cloud-search/docs/guides/delegation/).
 *
 *  @param object The @c GTLRCloudSearch_SearchRequest to include in the query.
 *
 *  @return GTLRCloudSearchQuery_QuerySearch
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_SearchRequest *)object;

@end

/**
 *  Returns list of sources that user can use for Search and Suggest APIs.
 *  **Note:** This API requires a standard end user account to execute. A
 *  service account can't perform Query API requests directly; to use a service
 *  account to perform queries, set up [Google Workspace domain-wide delegation
 *  of
 *  authority](https://developers.google.com/cloud-search/docs/guides/delegation/).
 *
 *  Method: cloudsearch.query.sources.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchQuery
 */
@interface GTLRCloudSearchQuery_QuerySourcesList : GTLRCloudSearchQuery

/** Number of sources to return in the response. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL requestOptionsDebugOptionsEnableDebugging;

/**
 *  The BCP-47 language code, such as "en-US" or "sr-Latn". For more
 *  information, see
 *  http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. For
 *  translations. Set this field using the language set in browser or for the
 *  page. In the event that the user's language preference is known, set this
 *  field to the known user language. When specified, the documents in search
 *  results are biased towards the specified language. From Suggest API
 *  perspective, for 3p suggest this is used as a hint while making predictions
 *  to add language boosting.
 */
@property(nonatomic, copy, nullable) NSString *requestOptionsLanguageCode;

/**
 *  The ID generated when you create a search application using the [admin
 *  console](https://support.google.com/a/answer/9043922).
 */
@property(nonatomic, copy, nullable) NSString *requestOptionsSearchApplicationId;

/**
 *  Current user's time zone id, such as "America/Los_Angeles" or
 *  "Australia/Sydney". These IDs are defined by [Unicode Common Locale Data
 *  Repository (CLDR)](http://cldr.unicode.org/) project, and currently
 *  available in the file
 *  [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml).
 *  This field is used to correctly interpret date and time queries. If this
 *  field is not specified, the default time zone (UTC) is used.
 */
@property(nonatomic, copy, nullable) NSString *requestOptionsTimeZone;

/**
 *  Fetches a @c GTLRCloudSearch_ListQuerySourcesResponse.
 *
 *  Returns list of sources that user can use for Search and Suggest APIs.
 *  **Note:** This API requires a standard end user account to execute. A
 *  service account can't perform Query API requests directly; to use a service
 *  account to perform queries, set up [Google Workspace domain-wide delegation
 *  of
 *  authority](https://developers.google.com/cloud-search/docs/guides/delegation/).
 *
 *  @return GTLRCloudSearchQuery_QuerySourcesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Provides suggestions for autocompleting the query. **Note:** This API
 *  requires a standard end user account to execute. A service account can't
 *  perform Query API requests directly; to use a service account to perform
 *  queries, set up [Google Workspace domain-wide delegation of
 *  authority](https://developers.google.com/cloud-search/docs/guides/delegation/).
 *
 *  Method: cloudsearch.query.suggest
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchQuery
 */
@interface GTLRCloudSearchQuery_QuerySuggest : GTLRCloudSearchQuery

/**
 *  Fetches a @c GTLRCloudSearch_SuggestResponse.
 *
 *  Provides suggestions for autocompleting the query. **Note:** This API
 *  requires a standard end user account to execute. A service account can't
 *  perform Query API requests directly; to use a service account to perform
 *  queries, set up [Google Workspace domain-wide delegation of
 *  authority](https://developers.google.com/cloud-search/docs/guides/delegation/).
 *
 *  @param object The @c GTLRCloudSearch_SuggestRequest to include in the query.
 *
 *  @return GTLRCloudSearchQuery_QuerySuggest
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_SuggestRequest *)object;

@end

/**
 *  Creates a datasource. **Note:** This API requires an admin account to
 *  execute.
 *
 *  Method: cloudsearch.settings.datasources.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_SettingsDatasourcesCreate : GTLRCloudSearchQuery

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Creates a datasource. **Note:** This API requires an admin account to
 *  execute.
 *
 *  @param object The @c GTLRCloudSearch_DataSource to include in the query.
 *
 *  @return GTLRCloudSearchQuery_SettingsDatasourcesCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_DataSource *)object;

@end

/**
 *  Deletes a datasource. **Note:** This API requires an admin account to
 *  execute.
 *
 *  Method: cloudsearch.settings.datasources.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_SettingsDatasourcesDelete : GTLRCloudSearchQuery

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/** The name of the datasource. Format: datasources/{source_id}. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Deletes a datasource. **Note:** This API requires an admin account to
 *  execute.
 *
 *  @param name The name of the datasource. Format: datasources/{source_id}.
 *
 *  @return GTLRCloudSearchQuery_SettingsDatasourcesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a datasource. **Note:** This API requires an admin account to execute.
 *
 *  Method: cloudsearch.settings.datasources.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_SettingsDatasourcesGet : GTLRCloudSearchQuery

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/** The name of the datasource resource. Format: datasources/{source_id}. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_DataSource.
 *
 *  Gets a datasource. **Note:** This API requires an admin account to execute.
 *
 *  @param name The name of the datasource resource. Format:
 *    datasources/{source_id}.
 *
 *  @return GTLRCloudSearchQuery_SettingsDatasourcesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists datasources. **Note:** This API requires an admin account to execute.
 *
 *  Method: cloudsearch.settings.datasources.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_SettingsDatasourcesList : GTLRCloudSearchQuery

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  Maximum number of datasources to fetch in a request. The max value is 1000.
 *  The default value is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** Starting index of the results. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudSearch_ListDataSourceResponse.
 *
 *  Lists datasources. **Note:** This API requires an admin account to execute.
 *
 *  @return GTLRCloudSearchQuery_SettingsDatasourcesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Updates a datasource. **Note:** This API requires an admin account to
 *  execute.
 *
 *  Method: cloudsearch.settings.datasources.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_SettingsDatasourcesPatch : GTLRCloudSearchQuery

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  The name of the datasource resource. Format: datasources/{source_id}. The
 *  name is ignored when creating a datasource.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Only applies to
 *  [`settings.datasources.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.datasources/patch).
 *  Update mask to control which fields to update. Example field paths: `name`,
 *  `displayName`. * If `update_mask` is non-empty, then only the fields
 *  specified in the `update_mask` are updated. * If you specify a field in the
 *  `update_mask`, but don't specify its value in the source, that field is
 *  cleared. * If the `update_mask` is not present or empty or has the value
 *  `*`, then all fields are updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Updates a datasource. **Note:** This API requires an admin account to
 *  execute.
 *
 *  @param object The @c GTLRCloudSearch_DataSource to include in the query.
 *  @param name The name of the datasource resource. Format:
 *    datasources/{source_id}. The name is ignored when creating a datasource.
 *
 *  @return GTLRCloudSearchQuery_SettingsDatasourcesPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_DataSource *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a datasource. **Note:** This API requires an admin account to
 *  execute.
 *
 *  Method: cloudsearch.settings.datasources.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_SettingsDatasourcesUpdate : GTLRCloudSearchQuery

/**
 *  The name of the datasource resource. Format: datasources/{source_id}. The
 *  name is ignored when creating a datasource.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Updates a datasource. **Note:** This API requires an admin account to
 *  execute.
 *
 *  @param object The @c GTLRCloudSearch_UpdateDataSourceRequest to include in
 *    the query.
 *  @param name The name of the datasource resource. Format:
 *    datasources/{source_id}. The name is ignored when creating a datasource.
 *
 *  @return GTLRCloudSearchQuery_SettingsDatasourcesUpdate
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_UpdateDataSourceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Get customer settings. **Note:** This API requires an admin account to
 *  execute.
 *
 *  Method: cloudsearch.settings.getCustomer
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_SettingsGetCustomer : GTLRCloudSearchQuery

/**
 *  Fetches a @c GTLRCloudSearch_CustomerSettings.
 *
 *  Get customer settings. **Note:** This API requires an admin account to
 *  execute.
 *
 *  @return GTLRCloudSearchQuery_SettingsGetCustomer
 */
+ (instancetype)query;

@end

/**
 *  Creates a search application. **Note:** This API requires an admin account
 *  to execute.
 *
 *  Method: cloudsearch.settings.searchapplications.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery
 */
@interface GTLRCloudSearchQuery_SettingsSearchapplicationsCreate : GTLRCloudSearchQuery

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Creates a search application. **Note:** This API requires an admin account
 *  to execute.
 *
 *  @param object The @c GTLRCloudSearch_SearchApplication to include in the
 *    query.
 *
 *  @return GTLRCloudSearchQuery_SettingsSearchapplicationsCreate
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_SearchApplication *)object;

@end

/**
 *  Deletes a search application. **Note:** This API requires an admin account
 *  to execute.
 *
 *  Method: cloudsearch.settings.searchapplications.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery
 */
@interface GTLRCloudSearchQuery_SettingsSearchapplicationsDelete : GTLRCloudSearchQuery

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  The name of the search application to be deleted. Format:
 *  applications/{application_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Deletes a search application. **Note:** This API requires an admin account
 *  to execute.
 *
 *  @param name The name of the search application to be deleted. Format:
 *    applications/{application_id}.
 *
 *  @return GTLRCloudSearchQuery_SettingsSearchapplicationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the specified search application. **Note:** This API requires an admin
 *  account to execute.
 *
 *  Method: cloudsearch.settings.searchapplications.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery
 */
@interface GTLRCloudSearchQuery_SettingsSearchapplicationsGet : GTLRCloudSearchQuery

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/**
 *  The name of the search application. Format:
 *  searchapplications/{application_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_SearchApplication.
 *
 *  Gets the specified search application. **Note:** This API requires an admin
 *  account to execute.
 *
 *  @param name The name of the search application. Format:
 *    searchapplications/{application_id}.
 *
 *  @return GTLRCloudSearchQuery_SettingsSearchapplicationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all search applications. **Note:** This API requires an admin account
 *  to execute.
 *
 *  Method: cloudsearch.settings.searchapplications.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery
 */
@interface GTLRCloudSearchQuery_SettingsSearchapplicationsList : GTLRCloudSearchQuery

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 */
@property(nonatomic, assign) BOOL debugOptionsEnableDebugging;

/** The maximum number of items to return. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The next_page_token value returned from a previous List request, if any. The
 *  default value is 10
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCloudSearch_ListSearchApplicationsResponse.
 *
 *  Lists all search applications. **Note:** This API requires an admin account
 *  to execute.
 *
 *  @return GTLRCloudSearchQuery_SettingsSearchapplicationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Updates a search application. **Note:** This API requires an admin account
 *  to execute.
 *
 *  Method: cloudsearch.settings.searchapplications.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery
 */
@interface GTLRCloudSearchQuery_SettingsSearchapplicationsPatch : GTLRCloudSearchQuery

/**
 *  The name of the Search Application. Format:
 *  searchapplications/{application_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Only applies to
 *  [`settings.searchapplications.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.searchapplications/patch).
 *  Update mask to control which fields to update. Example field paths:
 *  `search_application.name`, `search_application.displayName`. * If
 *  `update_mask` is non-empty, then only the fields specified in the
 *  `update_mask` are updated. * If you specify a field in the `update_mask`,
 *  but don't specify its value in the `search_application`, then that field is
 *  cleared. * If the `update_mask` is not present or empty or has the value
 *  `*`, then all fields are updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Updates a search application. **Note:** This API requires an admin account
 *  to execute.
 *
 *  @param object The @c GTLRCloudSearch_SearchApplication to include in the
 *    query.
 *  @param name The name of the Search Application. Format:
 *    searchapplications/{application_id}.
 *
 *  @return GTLRCloudSearchQuery_SettingsSearchapplicationsPatch
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_SearchApplication *)object
                           name:(NSString *)name;

@end

/**
 *  Resets a search application to default settings. This will return an empty
 *  response. **Note:** This API requires an admin account to execute.
 *
 *  Method: cloudsearch.settings.searchapplications.reset
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery
 */
@interface GTLRCloudSearchQuery_SettingsSearchapplicationsReset : GTLRCloudSearchQuery

/**
 *  The name of the search application to be reset. Format:
 *  applications/{application_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Resets a search application to default settings. This will return an empty
 *  response. **Note:** This API requires an admin account to execute.
 *
 *  @param object The @c GTLRCloudSearch_ResetSearchApplicationRequest to
 *    include in the query.
 *  @param name The name of the search application to be reset. Format:
 *    applications/{application_id}.
 *
 *  @return GTLRCloudSearchQuery_SettingsSearchapplicationsReset
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_ResetSearchApplicationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a search application. **Note:** This API requires an admin account
 *  to execute.
 *
 *  Method: cloudsearch.settings.searchapplications.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsQuery
 */
@interface GTLRCloudSearchQuery_SettingsSearchapplicationsUpdate : GTLRCloudSearchQuery

/**
 *  The name of the Search Application. Format:
 *  searchapplications/{application_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Only applies to
 *  [`settings.searchapplications.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.searchapplications/patch).
 *  Update mask to control which fields to update. Example field paths:
 *  `search_application.name`, `search_application.displayName`. * If
 *  `update_mask` is non-empty, then only the fields specified in the
 *  `update_mask` are updated. * If you specify a field in the `update_mask`,
 *  but don't specify its value in the `search_application`, then that field is
 *  cleared. * If the `update_mask` is not present or empty or has the value
 *  `*`, then all fields are updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Updates a search application. **Note:** This API requires an admin account
 *  to execute.
 *
 *  @param object The @c GTLRCloudSearch_SearchApplication to include in the
 *    query.
 *  @param name The name of the Search Application. Format:
 *    searchapplications/{application_id}.
 *
 *  @return GTLRCloudSearchQuery_SettingsSearchapplicationsUpdate
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_SearchApplication *)object
                           name:(NSString *)name;

@end

/**
 *  Update customer settings. **Note:** This API requires an admin account to
 *  execute.
 *
 *  Method: cloudsearch.settings.updateCustomer
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_SettingsUpdateCustomer : GTLRCloudSearchQuery

/**
 *  Update mask to control which fields get updated. If you specify a field in
 *  the update_mask but don't specify its value here, that field will be
 *  cleared. If the mask is not present or empty, all fields will be updated.
 *  Currently supported field paths: vpc_settings and audit_logging_settings
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Update customer settings. **Note:** This API requires an admin account to
 *  execute.
 *
 *  @param object The @c GTLRCloudSearch_CustomerSettings to include in the
 *    query.
 *
 *  @return GTLRCloudSearchQuery_SettingsUpdateCustomer
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_CustomerSettings *)object;

@end

/**
 *  Gets indexed item statistics aggreggated across all data sources. This API
 *  only returns statistics for previous dates; it doesn't return statistics for
 *  the current day. **Note:** This API requires a standard end user account to
 *  execute.
 *
 *  Method: cloudsearch.stats.getIndex
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStats
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStatsIndexing
 */
@interface GTLRCloudSearchQuery_StatsGetIndex : GTLRCloudSearchQuery

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger fromDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger fromDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger fromDateYear;

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger toDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger toDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger toDateYear;

/**
 *  Fetches a @c GTLRCloudSearch_GetCustomerIndexStatsResponse.
 *
 *  Gets indexed item statistics aggreggated across all data sources. This API
 *  only returns statistics for previous dates; it doesn't return statistics for
 *  the current day. **Note:** This API requires a standard end user account to
 *  execute.
 *
 *  @return GTLRCloudSearchQuery_StatsGetIndex
 */
+ (instancetype)query;

@end

/**
 *  Get the query statistics for customer. **Note:** This API requires a
 *  standard end user account to execute.
 *
 *  Method: cloudsearch.stats.getQuery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStats
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStatsIndexing
 */
@interface GTLRCloudSearchQuery_StatsGetQuery : GTLRCloudSearchQuery

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger fromDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger fromDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger fromDateYear;

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger toDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger toDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger toDateYear;

/**
 *  Fetches a @c GTLRCloudSearch_GetCustomerQueryStatsResponse.
 *
 *  Get the query statistics for customer. **Note:** This API requires a
 *  standard end user account to execute.
 *
 *  @return GTLRCloudSearchQuery_StatsGetQuery
 */
+ (instancetype)query;

@end

/**
 *  Get search application stats for customer. **Note:** This API requires a
 *  standard end user account to execute.
 *
 *  Method: cloudsearch.stats.getSearchapplication
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStats
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStatsIndexing
 */
@interface GTLRCloudSearchQuery_StatsGetSearchapplication : GTLRCloudSearchQuery

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger endDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger endDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger endDateYear;

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger startDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger startDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger startDateYear;

/**
 *  Fetches a @c GTLRCloudSearch_GetCustomerSearchApplicationStatsResponse.
 *
 *  Get search application stats for customer. **Note:** This API requires a
 *  standard end user account to execute.
 *
 *  @return GTLRCloudSearchQuery_StatsGetSearchapplication
 */
+ (instancetype)query;

@end

/**
 *  Get the # of search sessions, % of successful sessions with a click query
 *  statistics for customer. **Note:** This API requires a standard end user
 *  account to execute.
 *
 *  Method: cloudsearch.stats.getSession
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStats
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStatsIndexing
 */
@interface GTLRCloudSearchQuery_StatsGetSession : GTLRCloudSearchQuery

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger fromDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger fromDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger fromDateYear;

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger toDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger toDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger toDateYear;

/**
 *  Fetches a @c GTLRCloudSearch_GetCustomerSessionStatsResponse.
 *
 *  Get the # of search sessions, % of successful sessions with a click query
 *  statistics for customer. **Note:** This API requires a standard end user
 *  account to execute.
 *
 *  @return GTLRCloudSearchQuery_StatsGetSession
 */
+ (instancetype)query;

@end

/**
 *  Get the users statistics for customer. **Note:** This API requires a
 *  standard end user account to execute.
 *
 *  Method: cloudsearch.stats.getUser
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStats
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStatsIndexing
 */
@interface GTLRCloudSearchQuery_StatsGetUser : GTLRCloudSearchQuery

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger fromDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger fromDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger fromDateYear;

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger toDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger toDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger toDateYear;

/**
 *  Fetches a @c GTLRCloudSearch_GetCustomerUserStatsResponse.
 *
 *  Get the users statistics for customer. **Note:** This API requires a
 *  standard end user account to execute.
 *
 *  @return GTLRCloudSearchQuery_StatsGetUser
 */
+ (instancetype)query;

@end

/**
 *  Gets indexed item statistics for a single data source. **Note:** This API
 *  requires a standard end user account to execute.
 *
 *  Method: cloudsearch.stats.index.datasources.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStats
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStatsIndexing
 */
@interface GTLRCloudSearchQuery_StatsIndexDatasourcesGet : GTLRCloudSearchQuery

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger fromDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger fromDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger fromDateYear;

/**
 *  The resource id of the data source to retrieve statistics for, in the
 *  following format: "datasources/{source_id}"
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger toDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger toDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger toDateYear;

/**
 *  Fetches a @c GTLRCloudSearch_GetDataSourceIndexStatsResponse.
 *
 *  Gets indexed item statistics for a single data source. **Note:** This API
 *  requires a standard end user account to execute.
 *
 *  @param name The resource id of the data source to retrieve statistics for,
 *    in the following format: "datasources/{source_id}"
 *
 *  @return GTLRCloudSearchQuery_StatsIndexDatasourcesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get the query statistics for search application. **Note:** This API requires
 *  a standard end user account to execute.
 *
 *  Method: cloudsearch.stats.query.searchapplications.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStats
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStatsIndexing
 */
@interface GTLRCloudSearchQuery_StatsQuerySearchapplicationsGet : GTLRCloudSearchQuery

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger fromDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger fromDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger fromDateYear;

/**
 *  The resource id of the search application query stats, in the following
 *  format: searchapplications/{application_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger toDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger toDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger toDateYear;

/**
 *  Fetches a @c GTLRCloudSearch_GetSearchApplicationQueryStatsResponse.
 *
 *  Get the query statistics for search application. **Note:** This API requires
 *  a standard end user account to execute.
 *
 *  @param name The resource id of the search application query stats, in the
 *    following format: searchapplications/{application_id}
 *
 *  @return GTLRCloudSearchQuery_StatsQuerySearchapplicationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get the # of search sessions, % of successful sessions with a click query
 *  statistics for search application. **Note:** This API requires a standard
 *  end user account to execute.
 *
 *  Method: cloudsearch.stats.session.searchapplications.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStats
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStatsIndexing
 */
@interface GTLRCloudSearchQuery_StatsSessionSearchapplicationsGet : GTLRCloudSearchQuery

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger fromDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger fromDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger fromDateYear;

/**
 *  The resource id of the search application session stats, in the following
 *  format: searchapplications/{application_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger toDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger toDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger toDateYear;

/**
 *  Fetches a @c GTLRCloudSearch_GetSearchApplicationSessionStatsResponse.
 *
 *  Get the # of search sessions, % of successful sessions with a click query
 *  statistics for search application. **Note:** This API requires a standard
 *  end user account to execute.
 *
 *  @param name The resource id of the search application session stats, in the
 *    following format: searchapplications/{application_id}
 *
 *  @return GTLRCloudSearchQuery_StatsSessionSearchapplicationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Get the users statistics for search application. **Note:** This API requires
 *  a standard end user account to execute.
 *
 *  Method: cloudsearch.stats.user.searchapplications.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStats
 *    @c kGTLRAuthScopeCloudSearchCloudSearchStatsIndexing
 */
@interface GTLRCloudSearchQuery_StatsUserSearchapplicationsGet : GTLRCloudSearchQuery

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger fromDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger fromDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger fromDateYear;

/**
 *  The resource id of the search application session stats, in the following
 *  format: searchapplications/{application_id}
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Day of month. Must be from 1 to 31 and valid for the year and month. */
@property(nonatomic, assign) NSInteger toDateDay;

/** Month of date. Must be from 1 to 12. */
@property(nonatomic, assign) NSInteger toDateMonth;

/** Year of date. Must be from 1 to 9999. */
@property(nonatomic, assign) NSInteger toDateYear;

/**
 *  Fetches a @c GTLRCloudSearch_GetSearchApplicationUserStatsResponse.
 *
 *  Get the users statistics for search application. **Note:** This API requires
 *  a standard end user account to execute.
 *
 *  @param name The resource id of the search application session stats, in the
 *    following format: searchapplications/{application_id}
 *
 *  @return GTLRCloudSearchQuery_StatsUserSearchapplicationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Enables `third party` support in Google Cloud Search. **Note:** This API
 *  requires an admin account to execute.
 *
 *  Method: cloudsearch.initializeCustomer
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCloudSearchCloudSearch
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettings
 *    @c kGTLRAuthScopeCloudSearchCloudSearchSettingsIndexing
 */
@interface GTLRCloudSearchQuery_V1InitializeCustomer : GTLRCloudSearchQuery

/**
 *  Fetches a @c GTLRCloudSearch_Operation.
 *
 *  Enables `third party` support in Google Cloud Search. **Note:** This API
 *  requires an admin account to execute.
 *
 *  @param object The @c GTLRCloudSearch_InitializeCustomerRequest to include in
 *    the query.
 *
 *  @return GTLRCloudSearchQuery_V1InitializeCustomer
 */
+ (instancetype)queryWithObject:(GTLRCloudSearch_InitializeCustomerRequest *)object;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
