// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Search API (cloudsearch/v1)
// Description:
//   Cloud Search provides cloud-based search capabilities over Google Workspace
//   data. The Cloud Search API allows indexing of non-Google Workspace data
//   into Cloud Search.
// Documentation:
//   https://developers.google.com/cloud-search/docs/guides/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudSearch_AbuseReportingConfig;
@class GTLRCloudSearch_AckInfo;
@class GTLRCloudSearch_AclFixRequest;
@class GTLRCloudSearch_AclFixStatus;
@class GTLRCloudSearch_AclInfo;
@class GTLRCloudSearch_ActionParameter;
@class GTLRCloudSearch_AddonComposeUiActionMarkup;
@class GTLRCloudSearch_AffectedMembership;
@class GTLRCloudSearch_AllAuthenticatedUsersProto;
@class GTLRCloudSearch_Annotation;
@class GTLRCloudSearch_AppId;
@class GTLRCloudSearch_AppsDynamiteSharedAction;
@class GTLRCloudSearch_AppsDynamiteSharedActionActionParameter;
@class GTLRCloudSearch_AppsDynamiteSharedActivityFeedAnnotationData;
@class GTLRCloudSearch_AppsDynamiteSharedActivityFeedAnnotationDataUserInfo;
@class GTLRCloudSearch_AppsDynamiteSharedAppProfile;
@class GTLRCloudSearch_AppsDynamiteSharedAssistantAnnotationData;
@class GTLRCloudSearch_AppsDynamiteSharedAssistantDebugContext;
@class GTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContext;
@class GTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip;
@class GTLRCloudSearch_AppsDynamiteSharedAssistantSessionContext;
@class GTLRCloudSearch_AppsDynamiteSharedAssistantSuggestion;
@class GTLRCloudSearch_AppsDynamiteSharedAssistantUnfulfillableRequest;
@class GTLRCloudSearch_AppsDynamiteSharedAvatarInfo;
@class GTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata;
@class GTLRCloudSearch_AppsDynamiteSharedBorderStyle;
@class GTLRCloudSearch_AppsDynamiteSharedButton;
@class GTLRCloudSearch_AppsDynamiteSharedButtonList;
@class GTLRCloudSearch_AppsDynamiteSharedCalendarEventAnnotationData;
@class GTLRCloudSearch_AppsDynamiteSharedCalendarEventAnnotationDataCalendarEvent;
@class GTLRCloudSearch_AppsDynamiteSharedCalendarEventAnnotationDataCalendarEventTime;
@class GTLRCloudSearch_AppsDynamiteSharedCalendarEventAnnotationDataEventCreation;
@class GTLRCloudSearch_AppsDynamiteSharedCallAnnotationData;
@class GTLRCloudSearch_AppsDynamiteSharedCallMetadata;
@class GTLRCloudSearch_AppsDynamiteSharedCard;
@class GTLRCloudSearch_AppsDynamiteSharedCardCardAction;
@class GTLRCloudSearch_AppsDynamiteSharedCardCardHeader;
@class GTLRCloudSearch_AppsDynamiteSharedCardClickSuggestion;
@class GTLRCloudSearch_AppsDynamiteSharedCardSection;
@class GTLRCloudSearch_AppsDynamiteSharedChatItem;
@class GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfo;
@class GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemNudge;
@class GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemReactions;
@class GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply;
@class GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention;
@class GTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo;
@class GTLRCloudSearch_AppsDynamiteSharedColumns;
@class GTLRCloudSearch_AppsDynamiteSharedColumnsColumn;
@class GTLRCloudSearch_AppsDynamiteSharedColumnsColumnWidgets;
@class GTLRCloudSearch_AppsDynamiteSharedContentReportType;
@class GTLRCloudSearch_AppsDynamiteSharedCustomEmoji;
@class GTLRCloudSearch_AppsDynamiteSharedDateTimePicker;
@class GTLRCloudSearch_AppsDynamiteSharedDecoratedText;
@class GTLRCloudSearch_AppsDynamiteSharedDecoratedTextSwitchControl;
@class GTLRCloudSearch_AppsDynamiteSharedDimension;
@class GTLRCloudSearch_AppsDynamiteSharedDivider;
@class GTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata;
@class GTLRCloudSearch_AppsDynamiteSharedDocument;
@class GTLRCloudSearch_AppsDynamiteSharedEmoji;
@class GTLRCloudSearch_AppsDynamiteSharedFindDocumentSuggestion;
@class GTLRCloudSearch_AppsDynamiteSharedGrid;
@class GTLRCloudSearch_AppsDynamiteSharedGridGridItem;
@class GTLRCloudSearch_AppsDynamiteSharedGroupDetails;
@class GTLRCloudSearch_AppsDynamiteSharedGroupVisibility;
@class GTLRCloudSearch_AppsDynamiteSharedIcon;
@class GTLRCloudSearch_AppsDynamiteSharedImage;
@class GTLRCloudSearch_AppsDynamiteSharedImageComponent;
@class GTLRCloudSearch_AppsDynamiteSharedImageCropStyle;
@class GTLRCloudSearch_AppsDynamiteSharedJustification;
@class GTLRCloudSearch_AppsDynamiteSharedJustificationPerson;
@class GTLRCloudSearch_AppsDynamiteSharedMeetMetadata;
@class GTLRCloudSearch_AppsDynamiteSharedMessageInfo;
@class GTLRCloudSearch_AppsDynamiteSharedMessageIntegrationPayload;
@class GTLRCloudSearch_AppsDynamiteSharedOnClick;
@class GTLRCloudSearch_AppsDynamiteSharedOpenLink;
@class GTLRCloudSearch_AppsDynamiteSharedOpenLinkAppUri;
@class GTLRCloudSearch_AppsDynamiteSharedOpenLinkAppUriIntent;
@class GTLRCloudSearch_AppsDynamiteSharedOpenLinkAppUriIntentExtraData;
@class GTLRCloudSearch_AppsDynamiteSharedOrganizationInfo;
@class GTLRCloudSearch_AppsDynamiteSharedOrganizationInfoConsumerInfo;
@class GTLRCloudSearch_AppsDynamiteSharedOrganizationInfoCustomerInfo;
@class GTLRCloudSearch_AppsDynamiteSharedOriginAppSuggestion;
@class GTLRCloudSearch_AppsDynamiteSharedPhoneNumber;
@class GTLRCloudSearch_AppsDynamiteSharedReaction;
@class GTLRCloudSearch_AppsDynamiteSharedRetentionSettings;
@class GTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount;
@class GTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCounts;
@class GTLRCloudSearch_AppsDynamiteSharedSelectionInput;
@class GTLRCloudSearch_AppsDynamiteSharedSelectionInputSelectionItem;
@class GTLRCloudSearch_AppsDynamiteSharedSuggestions;
@class GTLRCloudSearch_AppsDynamiteSharedSuggestionsSuggestionItem;
@class GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationData;
@class GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataAssigneeChange;
@class GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataCompletionChange;
@class GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataCreation;
@class GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataDeletionChange;
@class GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataTaskProperties;
@class GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataUserDefinedMessage;
@class GTLRCloudSearch_AppsDynamiteSharedTasksMessageIntegrationPayload;
@class GTLRCloudSearch_AppsDynamiteSharedTextInput;
@class GTLRCloudSearch_AppsDynamiteSharedTextParagraph;
@class GTLRCloudSearch_AppsDynamiteSharedUserBlockRelationship;
@class GTLRCloudSearch_AppsDynamiteSharedVideoReference;
@class GTLRCloudSearch_AppsDynamiteSharedWidget;
@class GTLRCloudSearch_AppsDynamiteV1ApiCompatV1Action;
@class GTLRCloudSearch_AppsDynamiteV1ApiCompatV1ActionConfirm;
@class GTLRCloudSearch_AppsDynamiteV1ApiCompatV1Attachment;
@class GTLRCloudSearch_AppsDynamiteV1ApiCompatV1Field;
@class GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupAddAttachmentsActionMarkup;
@class GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupAddAttachmentsActionMarkupAddonAttachment;
@class GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkup;
@class GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup;
@class GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError;
@class GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupParameter;
@class GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupEditAttendeesActionMarkup;
@class GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupEditConferenceDataActionMarkup;
@class GTLRCloudSearch_Attachment;
@class GTLRCloudSearch_AuditLoggingSettings;
@class GTLRCloudSearch_AuthorizedItemId;
@class GTLRCloudSearch_AutoComplete;
@class GTLRCloudSearch_AutoCompleteItem;
@class GTLRCloudSearch_BabelMessageProps;
@class GTLRCloudSearch_BabelPlaceholderMetadata;
@class GTLRCloudSearch_BooleanOperatorOptions;
@class GTLRCloudSearch_BooleanPropertyOptions;
@class GTLRCloudSearch_BorderStyle;
@class GTLRCloudSearch_BotInfo;
@class GTLRCloudSearch_BotResponse;
@class GTLRCloudSearch_BroadcastAccess;
@class GTLRCloudSearch_BroadcastSessionInfo;
@class GTLRCloudSearch_BroadcastStats;
@class GTLRCloudSearch_Button;
@class GTLRCloudSearch_CalendarClientActionMarkup;
@class GTLRCloudSearch_CallInfo;
@class GTLRCloudSearch_CallSettings;
@class GTLRCloudSearch_CapTokenHolderProto;
@class GTLRCloudSearch_Card;
@class GTLRCloudSearch_CardAction;
@class GTLRCloudSearch_CardCapabilityMetadata;
@class GTLRCloudSearch_CardHeader;
@class GTLRCloudSearch_ChatClientActionMarkup;
@class GTLRCloudSearch_ChatConfig;
@class GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadata;
@class GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataAttachmentMetadata;
@class GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataBotMessageMetadata;
@class GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataCalendarEventMetadata;
@class GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataDeleteMetadata;
@class GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataEditMetadata;
@class GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataTasksMetadata;
@class GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataVideoCallMetadata;
@class GTLRCloudSearch_ChatConserverMessageContent;
@class GTLRCloudSearch_ChatContentExtension;
@class GTLRCloudSearch_ChatProto;
@class GTLRCloudSearch_CircleProto;
@class GTLRCloudSearch_CloudPrincipalProto;
@class GTLRCloudSearch_CoActivity;
@class GTLRCloudSearch_Collaboration;
@class GTLRCloudSearch_Color;
@class GTLRCloudSearch_CommunalLabelTag;
@class GTLRCloudSearch_CompositeFilter;
@class GTLRCloudSearch_ConsentedAppUnfurlMetadata;
@class GTLRCloudSearch_ContactGroupProto;
@class GTLRCloudSearch_ContentReport;
@class GTLRCloudSearch_ContentReportJustification;
@class GTLRCloudSearch_ContentReportSummary;
@class GTLRCloudSearch_ContextAttribute;
@class GTLRCloudSearch_ContextualAddOnMarkup;
@class GTLRCloudSearch_CseInfo;
@class GTLRCloudSearch_CustomEmojiMetadata;
@class GTLRCloudSearch_CustomerId;
@class GTLRCloudSearch_CustomerIndexStats;
@class GTLRCloudSearch_CustomerQueryStats;
@class GTLRCloudSearch_CustomerSearchApplicationStats;
@class GTLRCloudSearch_CustomerSessionStats;
@class GTLRCloudSearch_CustomerUserStats;
@class GTLRCloudSearch_CustomFunctionReturnValueMarkup;
@class GTLRCloudSearch_DataLossPreventionMetadata;
@class GTLRCloudSearch_DataSource;
@class GTLRCloudSearch_DataSourceIndexStats;
@class GTLRCloudSearch_DataSourceRestriction;
@class GTLRCloudSearch_Date;
@class GTLRCloudSearch_DateOperatorOptions;
@class GTLRCloudSearch_DatePropertyOptions;
@class GTLRCloudSearch_DateTimePicker;
@class GTLRCloudSearch_DateValues;
@class GTLRCloudSearch_DebugOptions;
@class GTLRCloudSearch_DeepLinkData;
@class GTLRCloudSearch_DeleteMetadata;
@class GTLRCloudSearch_DeliveryMedium;
@class GTLRCloudSearch_DisplayedProperty;
@class GTLRCloudSearch_Divider;
@class GTLRCloudSearch_DlpScanSummary;
@class GTLRCloudSearch_DmId;
@class GTLRCloudSearch_DocumentInfo;
@class GTLRCloudSearch_DoubleOperatorOptions;
@class GTLRCloudSearch_DoublePropertyOptions;
@class GTLRCloudSearch_DoubleValues;
@class GTLRCloudSearch_DriveClientActionMarkup;
@class GTLRCloudSearch_DriveFollowUpRestrict;
@class GTLRCloudSearch_DriveLocationRestrict;
@class GTLRCloudSearch_DriveMetadata;
@class GTLRCloudSearch_DriveMimeTypeRestrict;
@class GTLRCloudSearch_DriveTimeSpanRestrict;
@class GTLRCloudSearch_EditMetadata;
@class GTLRCloudSearch_EditorClientActionMarkup;
@class GTLRCloudSearch_EmailAddress;
@class GTLRCloudSearch_EmailOwnerProto;
@class GTLRCloudSearch_EmbedClientItem;
@class GTLRCloudSearch_EnumOperatorOptions;
@class GTLRCloudSearch_EnumPropertyOptions;
@class GTLRCloudSearch_EnumValuePair;
@class GTLRCloudSearch_EnumValues;
@class GTLRCloudSearch_ErrorInfo;
@class GTLRCloudSearch_ErrorMessage;
@class GTLRCloudSearch_EventAnnotation;
@class GTLRCloudSearch_EventProto;
@class GTLRCloudSearch_FacetBucket;
@class GTLRCloudSearch_FacetOptions;
@class GTLRCloudSearch_FacetResult;
@class GTLRCloudSearch_FieldViolation;
@class GTLRCloudSearch_Filter;
@class GTLRCloudSearch_FilterOptions;
@class GTLRCloudSearch_FixedFooter;
@class GTLRCloudSearch_FormAction;
@class GTLRCloudSearch_FormatMetadata;
@class GTLRCloudSearch_Formatting;
@class GTLRCloudSearch_FreshnessOptions;
@class GTLRCloudSearch_GaiaGroupProto;
@class GTLRCloudSearch_GaiaUserProto;
@class GTLRCloudSearch_GatewayAccess;
@class GTLRCloudSearch_GatewaySipAccess;
@class GTLRCloudSearch_GmailClientActionMarkup;
@class GTLRCloudSearch_GoogleChatConfig;
@class GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkup;
@class GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCard;
@class GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardCardAction;
@class GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardCardHeader;
@class GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardSection;
@class GTLRCloudSearch_GoogleChatV1WidgetMarkup;
@class GTLRCloudSearch_GoogleChatV1WidgetMarkupButton;
@class GTLRCloudSearch_GoogleChatV1WidgetMarkupFormAction;
@class GTLRCloudSearch_GoogleChatV1WidgetMarkupFormActionActionParameter;
@class GTLRCloudSearch_GoogleChatV1WidgetMarkupImage;
@class GTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton;
@class GTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue;
@class GTLRCloudSearch_GoogleChatV1WidgetMarkupOnClick;
@class GTLRCloudSearch_GoogleChatV1WidgetMarkupOpenLink;
@class GTLRCloudSearch_GoogleChatV1WidgetMarkupTextButton;
@class GTLRCloudSearch_GoogleChatV1WidgetMarkupTextParagraph;
@class GTLRCloudSearch_GoogleDocsResultInfo;
@class GTLRCloudSearch_Grid;
@class GTLRCloudSearch_GridItem;
@class GTLRCloudSearch_GroupDetailsUpdatedMetadata;
@class GTLRCloudSearch_GroupId;
@class GTLRCloudSearch_GroupLinkSharingModificationEvent;
@class GTLRCloudSearch_GroupRetentionSettingsUpdatedMetaData;
@class GTLRCloudSearch_GsuiteIntegrationMetadata;
@class GTLRCloudSearch_GSuitePrincipal;
@class GTLRCloudSearch_HangoutEvent;
@class GTLRCloudSearch_HangoutVideoEventMetadata;
@class GTLRCloudSearch_HashtagData;
@class GTLRCloudSearch_HostAppActionMarkup;
@class GTLRCloudSearch_HostProto;
@class GTLRCloudSearch_HtmlOperatorOptions;
@class GTLRCloudSearch_HtmlPropertyOptions;
@class GTLRCloudSearch_HtmlValues;
@class GTLRCloudSearch_IconImage;
@class GTLRCloudSearch_Id;
@class GTLRCloudSearch_Image;
@class GTLRCloudSearch_ImageButton;
@class GTLRCloudSearch_ImageComponent;
@class GTLRCloudSearch_ImageCropStyle;
@class GTLRCloudSearch_ImageKeyValue;
@class GTLRCloudSearch_IncomingWebhookChangedMetadata;
@class GTLRCloudSearch_IndexItemOptions;
@class GTLRCloudSearch_InsertContent;
@class GTLRCloudSearch_IntegerOperatorOptions;
@class GTLRCloudSearch_IntegerPropertyOptions;
@class GTLRCloudSearch_IntegerValues;
@class GTLRCloudSearch_IntegrationConfigMutation;
@class GTLRCloudSearch_IntegrationConfigUpdatedMetadata;
@class GTLRCloudSearch_Interaction;
@class GTLRCloudSearch_InviteAcceptedEvent;
@class GTLRCloudSearch_InviteeInfo;
@class GTLRCloudSearch_Item;
@class GTLRCloudSearch_ItemAcl;
@class GTLRCloudSearch_ItemContent;
@class GTLRCloudSearch_ItemCountByStatus;
@class GTLRCloudSearch_ItemMetadata;
@class GTLRCloudSearch_ItemStatus;
@class GTLRCloudSearch_ItemStructuredData;
@class GTLRCloudSearch_KeyValue;
@class GTLRCloudSearch_LanguageConfig;
@class GTLRCloudSearch_LdapGroupProto;
@class GTLRCloudSearch_LdapUserProto;
@class GTLRCloudSearch_LegacyUploadMetadata;
@class GTLRCloudSearch_LinkData;
@class GTLRCloudSearch_MatchRange;
@class GTLRCloudSearch_MdbGroupProto;
@class GTLRCloudSearch_MdbUserProto;
@class GTLRCloudSearch_MeetingSpace;
@class GTLRCloudSearch_Member;
@class GTLRCloudSearch_MemberId;
@class GTLRCloudSearch_MembershipChangedMetadata;
@class GTLRCloudSearch_MembershipChangeEvent;
@class GTLRCloudSearch_Menu;
@class GTLRCloudSearch_MenuItem;
@class GTLRCloudSearch_Message;
@class GTLRCloudSearch_MessageAttributes;
@class GTLRCloudSearch_MessageId;
@class GTLRCloudSearch_MessageParentId;
@class GTLRCloudSearch_MessageProps;
@class GTLRCloudSearch_Metadata;
@class GTLRCloudSearch_Metaline;
@class GTLRCloudSearch_Name;
@class GTLRCloudSearch_NamedProperty;
@class GTLRCloudSearch_OAuthConsumerProto;
@class GTLRCloudSearch_ObjectDefinition;
@class GTLRCloudSearch_ObjectDisplayOptions;
@class GTLRCloudSearch_ObjectOptions;
@class GTLRCloudSearch_ObjectPropertyOptions;
@class GTLRCloudSearch_ObjectValues;
@class GTLRCloudSearch_OnClick;
@class GTLRCloudSearch_OpenCreatedDraftActionMarkup;
@class GTLRCloudSearch_OpenLink;
@class GTLRCloudSearch_Operation;
@class GTLRCloudSearch_Operation_Metadata;
@class GTLRCloudSearch_Operation_Response;
@class GTLRCloudSearch_OtrChatMessageEvent;
@class GTLRCloudSearch_OtrModificationEvent;
@class GTLRCloudSearch_PackagingServiceClient;
@class GTLRCloudSearch_PaygateInfo;
@class GTLRCloudSearch_PeopleSuggestion;
@class GTLRCloudSearch_Person;
@class GTLRCloudSearch_PersonalLabelTag;
@class GTLRCloudSearch_PhoneAccess;
@class GTLRCloudSearch_PhoneNumber;
@class GTLRCloudSearch_Photo;
@class GTLRCloudSearch_PinnedItemId;
@class GTLRCloudSearch_PostiniUserProto;
@class GTLRCloudSearch_Presenter;
@class GTLRCloudSearch_Principal;
@class GTLRCloudSearch_PrincipalProto;
@class GTLRCloudSearch_PrivateMessageInfo;
@class GTLRCloudSearch_ProcessingError;
@class GTLRCloudSearch_PropertyDefinition;
@class GTLRCloudSearch_PropertyDisplayOptions;
@class GTLRCloudSearch_Provenance;
@class GTLRCloudSearch_PushItem;
@class GTLRCloudSearch_QueryCountByStatus;
@class GTLRCloudSearch_QueryInterpretation;
@class GTLRCloudSearch_QueryInterpretationConfig;
@class GTLRCloudSearch_QueryInterpretationOptions;
@class GTLRCloudSearch_QueryOperator;
@class GTLRCloudSearch_QuerySource;
@class GTLRCloudSearch_QuerySuggestion;
@class GTLRCloudSearch_QuotedMessageMetadata;
@class GTLRCloudSearch_RbacRoleProto;
@class GTLRCloudSearch_RbacSubjectProto;
@class GTLRCloudSearch_ReactionInfo;
@class GTLRCloudSearch_ReadReceiptsSettingsUpdatedMetadata;
@class GTLRCloudSearch_Recipient;
@class GTLRCloudSearch_RecordingEvent;
@class GTLRCloudSearch_RecordingInfo;
@class GTLRCloudSearch_RecordingSessionInfo;
@class GTLRCloudSearch_RenameEvent;
@class GTLRCloudSearch_RepositoryError;
@class GTLRCloudSearch_RequestFileScope;
@class GTLRCloudSearch_RequestFileScopeForActiveDocument;
@class GTLRCloudSearch_RequestOptions;
@class GTLRCloudSearch_RequiredMessageFeaturesMetadata;
@class GTLRCloudSearch_ResourceRoleProto;
@class GTLRCloudSearch_ResponseDebugInfo;
@class GTLRCloudSearch_ResultCounts;
@class GTLRCloudSearch_ResultDebugInfo;
@class GTLRCloudSearch_ResultDisplayField;
@class GTLRCloudSearch_ResultDisplayLine;
@class GTLRCloudSearch_ResultDisplayMetadata;
@class GTLRCloudSearch_RetrievalImportance;
@class GTLRCloudSearch_RoomRenameMetadata;
@class GTLRCloudSearch_RoomUpdatedMetadata;
@class GTLRCloudSearch_Roster;
@class GTLRCloudSearch_RosterId;
@class GTLRCloudSearch_SafeUrlProto;
@class GTLRCloudSearch_Schema;
@class GTLRCloudSearch_ScoringConfig;
@class GTLRCloudSearch_SearchApplication;
@class GTLRCloudSearch_SearchApplicationQueryStats;
@class GTLRCloudSearch_SearchApplicationSessionStats;
@class GTLRCloudSearch_SearchApplicationUserStats;
@class GTLRCloudSearch_SearchQualityMetadata;
@class GTLRCloudSearch_SearchResult;
@class GTLRCloudSearch_Section;
@class GTLRCloudSearch_Segment;
@class GTLRCloudSearch_SelectionControl;
@class GTLRCloudSearch_SelectionItem;
@class GTLRCloudSearch_SessionEvent;
@class GTLRCloudSearch_SessionStateInfo;
@class GTLRCloudSearch_Settings;
@class GTLRCloudSearch_ShareScope;
@class GTLRCloudSearch_SheetsClientActionMarkup;
@class GTLRCloudSearch_SigningKeyPossessorProto;
@class GTLRCloudSearch_SimpleSecretHolderProto;
@class GTLRCloudSearch_SimpleSecretLabelProto;
@class GTLRCloudSearch_SlashCommandMetadata;
@class GTLRCloudSearch_Snippet;
@class GTLRCloudSearch_SocialCommonAttachmentAttachment;
@class GTLRCloudSearch_SocialGraphNodeProto;
@class GTLRCloudSearch_SortOptions;
@class GTLRCloudSearch_Source;
@class GTLRCloudSearch_SourceConfig;
@class GTLRCloudSearch_SourceCrowdingConfig;
@class GTLRCloudSearch_SourceResultCount;
@class GTLRCloudSearch_SourceScoringConfig;
@class GTLRCloudSearch_SpaceId;
@class GTLRCloudSearch_SpellResult;
@class GTLRCloudSearch_SquareProto;
@class GTLRCloudSearch_Status;
@class GTLRCloudSearch_Status_Details_Item;
@class GTLRCloudSearch_StoredParticipantId;
@class GTLRCloudSearch_StreamingSessionInfo;
@class GTLRCloudSearch_StreamViewerStats;
@class GTLRCloudSearch_StructuredDataObject;
@class GTLRCloudSearch_StructuredResult;
@class GTLRCloudSearch_SuggestResult;
@class GTLRCloudSearch_SupportUrls;
@class GTLRCloudSearch_SwitchWidget;
@class GTLRCloudSearch_TaskActionMarkup;
@class GTLRCloudSearch_TextButton;
@class GTLRCloudSearch_TextField;
@class GTLRCloudSearch_TextKeyValue;
@class GTLRCloudSearch_TextOperatorOptions;
@class GTLRCloudSearch_TextParagraph;
@class GTLRCloudSearch_TextPropertyOptions;
@class GTLRCloudSearch_TextValues;
@class GTLRCloudSearch_TimestampOperatorOptions;
@class GTLRCloudSearch_TimestampPropertyOptions;
@class GTLRCloudSearch_TimestampValues;
@class GTLRCloudSearch_TombstoneMetadata;
@class GTLRCloudSearch_Toolbar;
@class GTLRCloudSearch_TopicId;
@class GTLRCloudSearch_TranscriptionSessionInfo;
@class GTLRCloudSearch_TransientData;
@class GTLRCloudSearch_TrustedResourceUrlProto;
@class GTLRCloudSearch_TypeInfo;
@class GTLRCloudSearch_UniversalPhoneAccess;
@class GTLRCloudSearch_UnmappedIdentity;
@class GTLRCloudSearch_UpdateBccRecipients;
@class GTLRCloudSearch_UpdateBody;
@class GTLRCloudSearch_UpdateCcRecipients;
@class GTLRCloudSearch_UpdateDraftActionMarkup;
@class GTLRCloudSearch_UpdateSubject;
@class GTLRCloudSearch_UpdateToRecipients;
@class GTLRCloudSearch_UploadItemRef;
@class GTLRCloudSearch_UploadMetadata;
@class GTLRCloudSearch_UrlMetadata;
@class GTLRCloudSearch_User;
@class GTLRCloudSearch_UserDisplayInfo;
@class GTLRCloudSearch_UserId;
@class GTLRCloudSearch_UserInfo;
@class GTLRCloudSearch_UserMentionData;
@class GTLRCloudSearch_UserMentionMetadata;
@class GTLRCloudSearch_Value;
@class GTLRCloudSearch_ValueFilter;
@class GTLRCloudSearch_VideoCallMetadata;
@class GTLRCloudSearch_VideoInfo;
@class GTLRCloudSearch_VoicePhoneNumber;
@class GTLRCloudSearch_VoicePhoneNumberI18nData;
@class GTLRCloudSearch_VPCSettings;
@class GTLRCloudSearch_WhiteboardInfo;
@class GTLRCloudSearch_WidgetMarkup;
@class GTLRCloudSearch_WrappedResourceKey;
@class GTLRCloudSearch_YouTubeBroadcastSessionInfo;
@class GTLRCloudSearch_YouTubeBroadcastStats;
@class GTLRCloudSearch_YouTubeLiveBroadcastEvent;
@class GTLRCloudSearch_YoutubeMetadata;
@class GTLRCloudSearch_YoutubeUserProto;
@class GTLRCloudSearch_ZwiebackSessionProto;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AclFixRequest.role

/** Value: "COMMENTER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AclFixRequest_Role_Commenter;
/** Value: "READER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AclFixRequest_Role_Reader;
/** Value: "UNKNOWN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AclFixRequest_Role_Unknown;
/** Value: "WRITER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AclFixRequest_Role_Writer;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AclFixStatus.fixability

/** Value: "ACL_FIXER_ERROR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AclFixStatus_Fixability_AclFixerError;
/** Value: "ALREADY_ACCESSIBLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AclFixStatus_Fixability_AlreadyAccessible;
/** Value: "CAN_FIX" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AclFixStatus_Fixability_CanFix;
/** Value: "CANNOT_FIX" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AclFixStatus_Fixability_CannotFix;
/** Value: "UNKNOWN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AclFixStatus_Fixability_Unknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AclInfo.scope

/**
 *  Now it works only for google.com. Anybody at the same domain. Now it works
 *  only
 *
 *  Value: "DASHER_DOMAIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AclInfo_Scope_DasherDomain;
/**
 *  Anybody at the same domain with the link.
 *
 *  Value: "DASHER_DOMAIN_WITH_LINK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AclInfo_Scope_DasherDomainWithLink;
/**
 *  Explicit set of people and groups.
 *
 *  Value: "LIMITED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AclInfo_Scope_Limited;
/**
 *  Anybody.
 *
 *  Value: "PUBLIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AclInfo_Scope_Public;
/**
 *  for google.com. Anybody with the link.
 *
 *  Value: "PUBLIC_WITH_LINK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AclInfo_Scope_PublicWithLink;
/**
 *  Special tag to indicate TeamDrive scope.
 *
 *  Value: "TEAM_DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AclInfo_Scope_TeamDrive;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AddonComposeUiActionMarkup.type

/**
 *  Dismisses the add-on compose UI.
 *
 *  Value: "DISMISS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AddonComposeUiActionMarkup_Type_Dismiss;
/**
 *  Default. When unspecified, no action is taken.
 *
 *  Value: "UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AddonComposeUiActionMarkup_Type_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AffectedMembership.priorMembershipRole

/**
 *  This role is used for two purposes. 1. A group is invited to a room, making
 *  it discoverable for its members. 2. A user was part of a room, but willingly
 *  left the room.
 *
 *  Value: "ROLE_INVITEE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AffectedMembership_PriorMembershipRole_RoleInvitee;
/**
 *  --- Following roles are for joined members of a roster. --- Default role for
 *  any joined user. Has basic capabilities within a room.
 *
 *  Value: "ROLE_MEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AffectedMembership_PriorMembershipRole_RoleMember;
/**
 *  This role is used when a user is forcibly removed from a room by another
 *  user. They will no longer be able to search for the room, but their history
 *  will be retained.
 *
 *  Value: "ROLE_NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AffectedMembership_PriorMembershipRole_RoleNone;
/**
 *  Role assigned to room creators and explicitly promoted members. Has broad
 *  powers to manage the room.
 *
 *  Value: "ROLE_OWNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AffectedMembership_PriorMembershipRole_RoleOwner;
/** Value: "ROLE_UNKNOWN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AffectedMembership_PriorMembershipRole_RoleUnknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AffectedMembership.priorMembershipState

/**
 *  This state should never be stored in Spanner. It is a state for responses to
 *  the clients to indicate that membership mutations have failed and the member
 *  is in its previous state.
 *
 *  Value: "MEMBER_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AffectedMembership_PriorMembershipState_MemberFailed;
/**
 *  An invitation to the space has been sent
 *
 *  Value: "MEMBER_INVITED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AffectedMembership_PriorMembershipState_MemberInvited;
/**
 *  User has joined the space
 *
 *  Value: "MEMBER_JOINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AffectedMembership_PriorMembershipState_MemberJoined;
/**
 *  User is not a member
 *
 *  Value: "MEMBER_NOT_A_MEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AffectedMembership_PriorMembershipState_MemberNotAMember;
/**
 *  Default state, do not use
 *
 *  Value: "MEMBER_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AffectedMembership_PriorMembershipState_MemberUnknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AffectedMembership.targetMembershipRole

/**
 *  This role is used for two purposes. 1. A group is invited to a room, making
 *  it discoverable for its members. 2. A user was part of a room, but willingly
 *  left the room.
 *
 *  Value: "ROLE_INVITEE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AffectedMembership_TargetMembershipRole_RoleInvitee;
/**
 *  --- Following roles are for joined members of a roster. --- Default role for
 *  any joined user. Has basic capabilities within a room.
 *
 *  Value: "ROLE_MEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AffectedMembership_TargetMembershipRole_RoleMember;
/**
 *  This role is used when a user is forcibly removed from a room by another
 *  user. They will no longer be able to search for the room, but their history
 *  will be retained.
 *
 *  Value: "ROLE_NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AffectedMembership_TargetMembershipRole_RoleNone;
/**
 *  Role assigned to room creators and explicitly promoted members. Has broad
 *  powers to manage the room.
 *
 *  Value: "ROLE_OWNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AffectedMembership_TargetMembershipRole_RoleOwner;
/** Value: "ROLE_UNKNOWN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AffectedMembership_TargetMembershipRole_RoleUnknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Annotation.chipRenderType

/** Value: "CHIP_RENDER_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_ChipRenderType_ChipRenderTypeUnspecified;
/**
 *  Client should not render the annotation as a chip.
 *
 *  Value: "DO_NOT_RENDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_ChipRenderType_DoNotRender;
/**
 *  Clients must render the annotation as a chip, and if they cannot render this
 *  many Annotations, show a fallback card.
 *
 *  Value: "RENDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_ChipRenderType_Render;
/**
 *  Client can render the annotation if it has room to render it.
 *
 *  Value: "RENDER_IF_POSSIBLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_ChipRenderType_RenderIfPossible;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Annotation.type

/** Value: "BABEL_PLACEHOLDER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_BabelPlaceholder;
/**
 *  Card capability for in-stream widgets.
 *
 *  Value: "CARD_CAPABILITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_CardCapability;
/** Value: "CONSENTED_APP_UNFURL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_ConsentedAppUnfurl;
/** Value: "CUSTOM_EMOJI" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_CustomEmoji;
/** Value: "DATA_LOSS_PREVENTION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_DataLossPrevention;
/** Value: "DRIVE_DOC" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_DriveDoc;
/**
 *  Any drive file
 *
 *  Value: "DRIVE_FILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_DriveFile;
/** Value: "DRIVE_FORM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_DriveForm;
/** Value: "DRIVE_SHEET" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_DriveSheet;
/** Value: "DRIVE_SLIDE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_DriveSlide;
/**
 *  UI should not be concerned with FORMAT_DATA
 *
 *  Value: "FORMAT_DATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_FormatData;
/** Value: "GROUP_RETENTION_SETTINGS_UPDATED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_GroupRetentionSettingsUpdated;
/**
 *  Generic annotation for gsuite integrations
 *
 *  Value: "GSUITE_INTEGRATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_GsuiteIntegration;
/** Value: "IMAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_Image;
/** Value: "INCOMING_WEBHOOK_CHANGED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_IncomingWebhookChanged;
/** Value: "INTEGRATION_CONFIG_UPDATED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_IntegrationConfigUpdated;
/**
 *  Message-level annotations. First message of an invite. Should not be set by
 *  clients.
 *
 *  Value: "INVITATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_Invitation;
/**
 *  Annotation types for system messages. Clients should never set this.
 *
 *  Value: "MEMBERSHIP_CHANGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_MembershipChanged;
/** Value: "PDF" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_Pdf;
/** Value: "READ_RECEIPTS_SETTINGS_UPDATED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_ReadReceiptsSettingsUpdated;
/**
 *  Clients can use this to see whether they support the entire message, or show
 *  a fallback chip otherwise.
 *
 *  Value: "REQUIRED_MESSAGE_FEATURES_METADATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_RequiredMessageFeaturesMetadata;
/** Value: "ROOM_UPDATED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_RoomUpdated;
/** Value: "SLASH_COMMAND" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_SlashCommand;
/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_TypeUnspecified;
/**
 *  Blobstore uploads
 *
 *  Value: "UPLOAD_METADATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_UploadMetadata;
/**
 *  These can have overlaps, i.e. same message can have multiple of these. For
 *  example a Drive link to a PDF can have URL, DRIVE_FILE and PDF all set Links
 *
 *  Value: "URL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_Url;
/** Value: "USER_MENTION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_UserMention;
/**
 *  Any video, not just youtube, the url decides how to play
 *
 *  Value: "VIDEO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_Video;
/**
 *  For Thor integration
 *
 *  Value: "VIDEO_CALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Annotation_Type_VideoCall;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppId.appType

/**
 *  3P APP eg. external Bots(Asana Bot), 1P Bots(Drive Bot).
 *
 *  Value: "APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppId_AppType_App;
/** Value: "APP_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppId_AppType_AppTypeUnspecified;
/**
 *  1P APP eg. Tasks, Meet, Docs, Calendar..
 *
 *  Value: "GSUITE_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppId_AppType_GsuiteApp;
/**
 *  Asynchronous messages via an incoming webhook.
 *
 *  Value: "INCOMING_WEBHOOK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppId_AppType_IncomingWebhook;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppId.gsuiteAppType

/** Value: "ACTIVITY_FEED_APP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppId_GsuiteAppType_ActivityFeedApp;
/**
 *  Powered by Bullseye
 *
 *  Value: "ASSISTIVE_SUGGESTION_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppId_GsuiteAppType_AssistiveSuggestionApp;
/** Value: "CALENDAR_APP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppId_GsuiteAppType_CalendarApp;
/** Value: "CHAT_IN_MEET_APP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppId_GsuiteAppType_ChatInMeetApp;
/** Value: "CONTACTS_APP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppId_GsuiteAppType_ContactsApp;
/** Value: "DOCS_APP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppId_GsuiteAppType_DocsApp;
/** Value: "DRIVE_APP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppId_GsuiteAppType_DriveApp;
/** Value: "GSUITE_APP_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppId_GsuiteAppType_GsuiteAppTypeUnspecified;
/** Value: "MEET_APP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppId_GsuiteAppType_MeetApp;
/** Value: "SHEETS_APP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppId_GsuiteAppType_SheetsApp;
/** Value: "SLIDES_APP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppId_GsuiteAppType_SlidesApp;
/** Value: "TASKS_APP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppId_GsuiteAppType_TasksApp;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedAction.interaction

/**
 *  Default value if interaction is not specified.
 *
 *  Value: "INTERACTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAction_Interaction_InteractionUnspecified;
/**
 *  A dialog opens by clicking the button.
 *
 *  Value: "OPEN_DIALOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAction_Interaction_OpenDialog;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedAction.loadIndicator

/**
 *  Nothing is displayed.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAction_LoadIndicator_None;
/**
 *  Displays a spinner to indicate that content is loading.
 *
 *  Value: "SPINNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAction_LoadIndicator_Spinner;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedActivityFeedAnnotationDataUserInfo.updaterCountDisplayType

/**
 *  A precise updater count is known and the value set in updater_count_to_show
 *  should be used.
 *
 *  Value: "EXACT_COUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedActivityFeedAnnotationDataUserInfo_UpdaterCountDisplayType_ExactCount;
/**
 *  A precise updater count could not be calculated, but there is at least one.
 *  Any value set in updater_count_to_show should NOT be used.
 *
 *  Value: "NONZERO_COUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedActivityFeedAnnotationDataUserInfo_UpdaterCountDisplayType_NonzeroCount;
/** Value: "UPDATER_COUNT_DISPLAY_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedActivityFeedAnnotationDataUserInfo_UpdaterCountDisplayType_UpdaterCountDisplayTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContext.thumbsFeedback

/**
 *  Thumbs down selected
 *
 *  Value: "DOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContext_ThumbsFeedback_Down;
/**
 *  Thumbs are not selected
 *
 *  Value: "NONE_SELECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContext_ThumbsFeedback_NoneSelected;
/**
 *  Unspecified thumbs state
 *
 *  Value: "THUMBS_FEEDBACK_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContext_ThumbsFeedback_ThumbsFeedbackUnspecified;
/**
 *  Thumbs up selected
 *
 *  Value: "UP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContext_ThumbsFeedback_Up;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip.feedbackChipType

/**
 *  The correct files were presented
 *
 *  Value: "CORRECT_FILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_FeedbackChipType_CorrectFile;
/**
 *  The Assistant card triggered appropriately
 *
 *  Value: "CORRECT_TRIGGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_FeedbackChipType_CorrectTrigger;
/**
 *  The feature is disruptive
 *
 *  Value: "DISRUPTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_FeedbackChipType_Disruptive;
/**
 *  Unspecified type of feedback chip
 *
 *  Value: "FEEDBACK_CHIP_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_FeedbackChipType_FeedbackChipTypeUnspecified;
/**
 *  Other reason
 *
 *  Value: "OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_FeedbackChipType_Other;
/**
 *  Incorrect files were presented
 *
 *  Value: "WRONG_FILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_FeedbackChipType_WrongFile;
/**
 *  Bad/noisy triggering
 *
 *  Value: "WRONG_TRIGGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_FeedbackChipType_WrongTrigger;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip.state

/**
 *  Unspecified selection state
 *
 *  Value: "FEEDBACK_CHIP_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_State_FeedbackChipStateUnspecified;
/**
 *  Chip is selected
 *
 *  Value: "SELECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_State_Selected;
/**
 *  Chip is not selected
 *
 *  Value: "UNSELECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_State_Unselected;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata.dlpScanOutcome

/**
 *  Rule fetch completed and evaluation were attempted, but all of the rules
 *  failed to be evaluated.
 *
 *  Value: "SCAN_FAILURE_ALL_RULES_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanFailureAllRulesFailed;
/**
 *  Rule fetch and evaluation were attempted but an exception occurred.
 *
 *  Value: "SCAN_FAILURE_EXCEPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanFailureException;
/**
 *  An IllegalStateException is thrown when executing DLP on attachments. This
 *  could happen if the space row is missing.
 *
 *  Value: "SCAN_FAILURE_ILLEGAL_STATE_FOR_ATTACHMENTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanFailureIllegalStateForAttachments;
/**
 *  Rule fetch and evaluation were attempted but the scanning timed out.
 *
 *  Value: "SCAN_FAILURE_TIMEOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanFailureTimeout;
/**
 *  Rule fetch happened, but rule evaluation is skipped because Changeling
 *  returned an empty response while converting the attachment to text.
 *
 *  Value: "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_EMPTY_RESPONSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanRuleEvaluationSkippedChangelingEmptyResponse;
/**
 *  Rule fetch happened, but rule evaluation is skipped because Changeling
 *  returned permanent failure while converting the attachment to text.
 *
 *  Value: "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_PERMANENT_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanRuleEvaluationSkippedChangelingPermanentError;
/**
 *  Rule fetch happened, but rule evaluation is skipped because none of the
 *  rules are applicable to the given action params.
 *
 *  Value: "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_ACTION_PARAMS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanRuleEvaluationSkippedNoApplicableRulesForActionParams;
/**
 *  Rule fetch happened, but rule evaluation is skipped because none of the
 *  rules are applicable to the given trigger.
 *
 *  Value: "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_TRIGGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanRuleEvaluationSkippedNoApplicableRulesForTrigger;
/**
 *  Rule fetch happened, but rule evaluation is skipped because no rules were
 *  found.
 *
 *  Value: "SCAN_RULE_EVALUATION_SKIPPED_NO_RULES_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanRuleEvaluationSkippedNoRulesFound;
/**
 *  Rule fetch and evaluation are skipped because the user sending message is
 *  consumer.
 *
 *  Value: "SCAN_SKIPPED_CONSUMER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSkippedConsumer;
/**
 *  Rule fetch and evaluation is skipped because DLP is not enabled for the
 *  user.
 *
 *  Value: "SCAN_SKIPPED_EXPERIMENT_DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSkippedExperimentDisabled;
/**
 *  Scanning was skipped because the message originated from Interop or Babel.
 *
 *  Value: "SCAN_SKIPPED_MESSAGE_FROM_UNSUPPORTED_ORIGIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSkippedMessageFromUnsupportedOrigin;
/**
 *  Rule fetch and evaluation are skipped because there is no message to scan.
 *  Deprecated: this should not happen since there must be message or attachment
 *  for DLP scan.
 *
 *  Value: "SCAN_SKIPPED_NO_MESSAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSkippedNoMessage;
/**
 *  Rule fetch and evaluation are skipped because the user sending message is a
 *  non-human user (i.e. a bot).
 *
 *  Value: "SCAN_SKIPPED_NON_HUMAN_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSkippedNonHumanUser;
/**
 *  Rule fetch and evaluation are skipped because the user has acknowledged the
 *  warning on the message that triggered the Warn violation and sent the
 *  message anyway.
 *
 *  Value: "SCAN_SKIPPED_USER_ACKNOWLEDGED_WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSkippedUserAcknowledgedWarning;
/**
 *  Violation is detected and will be logged to BIP (no user-facing action
 *  performed).
 *
 *  Value: "SCAN_SUCCEEDED_AUDIT_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSucceededAuditOnly;
/**
 *  Violation is detected. The message/attachment will be blocked (or deleted if
 *  this happens in failure recovery), the user will be warned, and the
 *  violation will be logged to BIP.
 *
 *  Value: "SCAN_SUCCEEDED_BLOCK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSucceededBlock;
/**
 *  This means no violation is detected on the given message/attachment.
 *
 *  Value: "SCAN_SUCCEEDED_NO_VIOLATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSucceededNoViolation;
/**
 *  Violation is detected. The user will be warned, and the violation will be
 *  logged to BIP.
 *
 *  Value: "SCAN_SUCCEEDED_WARN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSucceededWarn;
/**
 *  Rules were fetched but some evaluations failed. An audit-only violation was
 *  found in the rules that were successfully evaluated. The violation will be
 *  logged to BIP (no user-facing action performed).
 *
 *  Value: "SCAN_SUCCEEDED_WITH_FAILURES_AUDIT_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSucceededWithFailuresAuditOnly;
/**
 *  Rules were fetched but some evaluations failed. A blocking violation was
 *  found in the rules that were successfully evaluated. The message/attachment
 *  will be blocked, the user will be notified, and the violation will be logged
 *  to BIP. A blocking violation takes precedence over all other violation
 *  types.
 *
 *  Value: "SCAN_SUCCEEDED_WITH_FAILURES_BLOCK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSucceededWithFailuresBlock;
/**
 *  Rules were fetched but some evaluations failed. No violation was found in
 *  the rules that were successfully evaluated.
 *
 *  Value: "SCAN_SUCCEEDED_WITH_FAILURES_NO_VIOLATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSucceededWithFailuresNoViolation;
/**
 *  Rules were fetched but some evaluations failed. A warn violation was found
 *  in the rules that were successfully evaluated. The user will be warned, and
 *  the violation will be logged to BIP.
 *
 *  Value: "SCAN_SUCCEEDED_WITH_FAILURES_WARN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSucceededWithFailuresWarn;
/** Value: "SCAN_UNKNOWN_OUTCOME" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanUnknownOutcome;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata.virusScanResult

/** Value: "CLEAN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_VirusScanResult_Clean;
/** Value: "ERROR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_VirusScanResult_Error;
/** Value: "INFECTED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_VirusScanResult_Infected;
/**
 *  The document violates Google's policy for executables and archives.
 *
 *  Value: "POLICY_VIOLATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_VirusScanResult_PolicyViolation;
/** Value: "UNKNOWN_VIRUS_SCAN_RESULT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_VirusScanResult_UnknownVirusScanResult;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedBorderStyle.type

/**
 *  No value specified.
 *
 *  Value: "BORDER_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBorderStyle_Type_BorderTypeUnspecified;
/**
 *  No border.
 *
 *  Value: "NO_BORDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBorderStyle_Type_NoBorder;
/**
 *  Outline.
 *
 *  Value: "STROKE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedBorderStyle_Type_Stroke;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedCallAnnotationData.callStatus

/**
 *  Indicates that the call has ended.
 *
 *  Value: "CALL_ENDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedCallAnnotationData_CallStatus_CallEnded;
/**
 *  Indicates that the call is missed.
 *
 *  Value: "CALL_MISSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedCallAnnotationData_CallStatus_CallMissed;
/**
 *  Indicates that the call has started.
 *
 *  Value: "CALL_STARTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedCallAnnotationData_CallStatus_CallStarted;
/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "CALL_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedCallAnnotationData_CallStatus_CallStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedCardCardHeader.imageType

/**
 *  Applies a circular mask to the image.
 *
 *  Value: "CIRCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedCardCardHeader_ImageType_Circle;
/**
 *  Applies no cropping to the image.
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedCardCardHeader_ImageType_Square;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemNudge.nudgeType

/**
 *  The message creator is nudged since the message may require a follow-up.
 *
 *  Value: "FOLLOW_UP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemNudge_NudgeType_FollowUp;
/**
 *  The message receiver is nudged since the message may require a reply.
 *
 *  Value: "REPLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemNudge_NudgeType_Reply;
/** Value: "UNDEFINED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemNudge_NudgeType_Undefined;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply.replyType

/**
 *  The thread reply feed item is for a thread follower who's not the root
 *  message poster.
 *
 *  Value: "FOLLOWER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply_ReplyType_Follower;
/**
 *  The thread reply feed item is for the root message poster.
 *
 *  Value: "ROOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply_ReplyType_Root;
/** Value: "UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply_ReplyType_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention.type

/**
 *  Mentioned by \@all.
 *
 *  Value: "ALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention_Type_All;
/**
 *  Mentioned directly by name.
 *
 *  Value: "DIRECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention_Type_Direct;
/**
 *  Mention type not specified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo.attributeCheckerGroupType

/**
 *  Represents an Activity Feed space. These groups are modeled like flat rooms
 *  and contain items for users to catch up on important things. Each user
 *  should only have one group of this type. See go/activity-feed.
 *  LINT.ThenChange(//depot/google3/logs/proto/apps_dynamite/dynamite_visual_element_entry.proto:LoggingGroupType,//depot/google3/java/com/google/apps/dynamite/v1/web/ui/group/groups.js:LoggingGroupType)
 *
 *  Value: "ACTIVITY_FEED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_ActivityFeed;
/**
 *  LINT.IfChange
 *
 *  Value: "ATTRIBUTE_CHECKER_GROUP_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_AttributeCheckerGroupTypeUnspecified;
/**
 *  A flat room that contains a single thread.
 *
 *  Value: "FLAT_ROOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_FlatRoom;
/**
 *  A group DM that has multiple human users with immutable group membership.
 *  Deprecated. Use IMMUTABLE_MEMBERSHIP_HUMAN_DM instead.
 *
 *  Value: "IMMUTABLE_MEMBERSHIP_GROUP_DM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_ImmutableMembershipGroupDm;
/**
 *  A DM with immutable group membership. It can be a 1:1 DM or a group DM with
 *  multiple human users.
 *
 *  Value: "IMMUTABLE_MEMBERSHIP_HUMAN_DM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_ImmutableMembershipHumanDm;
/**
 *  A 1:1 DM between a human user and a bot.
 *
 *  Value: "ONE_TO_ONE_BOT_DM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_OneToOneBotDm;
/**
 *  A 1:1 DM that has two human users. Deprecated. Use
 *  IMMUTABLE_MEMBERSHIP_HUMAN_DM instead.
 *
 *  Value: "ONE_TO_ONE_HUMAN_DM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_OneToOneHumanDm;
/**
 *  A post room. Topics in this room are organized in a post/reply style. See
 *  the design doc for more details: go/PostRoomsInDynamite. Deprecated. Post
 *  rooms are no longer supported.
 *
 *  Value: "POST_ROOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_PostRoom;
/**
 *  A threaded room. Topics in this room are threaded, and users can reply to
 *  any topic.
 *
 *  Value: "THREADED_ROOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_ThreadedRoom;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedColumns.wrapStyle

/**
 *  Column widgets don't wrap.
 *
 *  Value: "NOWRAP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedColumns_WrapStyle_Nowrap;
/**
 *  Column Widgets wrap.
 *
 *  Value: "WRAP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedColumns_WrapStyle_Wrap;
/**
 *  Unspecified.
 *
 *  Value: "WRAP_STYLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedColumns_WrapStyle_WrapStyleUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedColumnsColumn.horizontalAlignment

/**
 *  Alignment to the center position.
 *
 *  Value: "CENTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_HorizontalAlignment_Center;
/**
 *  Alignment to the end position.
 *
 *  Value: "END"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_HorizontalAlignment_End;
/**
 *  Unspecified alignment.
 *
 *  Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_HorizontalAlignment_HorizontalAlignmentUnspecified;
/**
 *  Alignment to the start position.
 *
 *  Value: "START"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_HorizontalAlignment_Start;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedColumnsColumn.horizontalSizeStyle

/**
 *  Fills up the available horizontal width. Default value if unspecified.
 *
 *  Value: "FILL_AVAILABLE_SPACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_HorizontalSizeStyle_FillAvailableSpace;
/**
 *  Fills up the minimum horizontal width.
 *
 *  Value: "FILL_MINIMUM_SPACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_HorizontalSizeStyle_FillMinimumSpace;
/**
 *  Unspecified.
 *
 *  Value: "HORIZONTAL_SIZE_STYLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_HorizontalSizeStyle_HorizontalSizeStyleUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedColumnsColumn.verticalAlignment

/**
 *  Aligns the widget at the bottom of the column.
 *
 *  Value: "BOTTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_VerticalAlignment_Bottom;
/**
 *  Aligns the widget in the center of the column. Default value if unspecified.
 *
 *  Value: "CENTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_VerticalAlignment_Center;
/**
 *  Aligns the widget at the top of the column.
 *
 *  Value: "TOP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_VerticalAlignment_Top;
/**
 *  Unspecified.
 *
 *  Value: "VERTICAL_ALIGNMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_VerticalAlignment_VerticalAlignmentUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedContentReportType.systemViolation

/**
 *  "Confidential information"
 *
 *  Value: "CONFIDENTIAL_INFORMATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_ConfidentialInformation;
/**
 *  "Discrimination or harmful stereotypes against anyone, including protected
 *  groups"
 *
 *  Value: "DISCRIMINATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_Discrimination;
/**
 *  "Explicit content that's graphic, violent, or otherwise inappropriate"
 *
 *  Value: "EXPLICIT_CONTENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_ExplicitContent;
/**
 *  Phishing, impersonation/misrepresentation, or deceiving other users into
 *  sharing information under false pretenses.
 *
 *  Value: "FRAUD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_Fraud;
/**
 *  "Harassment, offensive, or rude behavior"
 *
 *  Value: "HARASSMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_Harassment;
/**
 *  Promoting, organizing, or engaging in illegal activities.
 *
 *  Value: "ILLEGAL_ACTIVITIES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_IllegalActivities;
/**
 *  Malware, viruses, Trojan horses, corrupted files, destructive code, etc.
 *
 *  Value: "MALWARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_Malware;
/**
 *  "Something else"
 *
 *  Value: "OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_Other;
/**
 *  "Sensitive information"
 *
 *  Value: "SENSITIVE_INFORMATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_SensitiveInformation;
/**
 *  "Spam"
 *
 *  Value: "SPAM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_Spam;
/**
 *  Default value if unset. Do not use directly. This value should not appear as
 *  a selectable violation during content reporting.
 *
 *  Value: "VIOLATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_ViolationUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedCustomEmoji.state

/**
 *  Emoji is removed everywhere and is not available to end-users.
 *
 *  Value: "EMOJI_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedCustomEmoji_State_EmojiDeleted;
/**
 *  Emoji is visible and available to be used, subject to access control
 *  requirements.
 *
 *  Value: "EMOJI_ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedCustomEmoji_State_EmojiEnabled;
/**
 *  Emoji is hidden from pickers, so new usages are not allowed, but is not
 *  removed from existing embeddings.
 *
 *  Value: "EMOJI_HIDDEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedCustomEmoji_State_EmojiHidden;
/** Value: "EMOJI_STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedCustomEmoji_State_EmojiStateUnspecified;
/**
 *  Emoji can no longer be used (e.g. due to a shortcode conflict), but is not
 *  removed from existing embeddings.
 *
 *  Value: "EMOJI_SYSTEM_DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedCustomEmoji_State_EmojiSystemDisabled;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedDateTimePicker.type

/**
 *  The user can select a date and time.
 *
 *  Value: "DATE_AND_TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedDateTimePicker_Type_DateAndTime;
/**
 *  The user can only select a date.
 *
 *  Value: "DATE_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedDateTimePicker_Type_DateOnly;
/**
 *  The user can only select a time.
 *
 *  Value: "TIME_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedDateTimePicker_Type_TimeOnly;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedDecoratedTextSwitchControl.controlType

/** Value: "CHECK_BOX" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedDecoratedTextSwitchControl_ControlType_CheckBox;
/**
 *  Deprecated in favor of `CHECK_BOX`.
 *
 *  Value: "CHECKBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedDecoratedTextSwitchControl_ControlType_Checkbox;
/** Value: "SWITCH" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedDecoratedTextSwitchControl_ControlType_Switch;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata.dlpStatus

/**
 *  Rule fetch and evaluation are skipped because DLP experiment is not enabled.
 *
 *  Value: "DLP_DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata_DlpStatus_DlpDisabled;
/**
 *  Rule fetch and evaluation are skipped because there is no rule to be fetched
 *  (e.g. message is sent from a consumer, or there is no message.)
 *
 *  Value: "DLP_ENABLED_NO_RULE_FETCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata_DlpStatus_DlpEnabledNoRuleFetch;
/**
 *  Rule fetch and evaluation were performed and completed successfully.
 *
 *  Value: "DLP_ENABLED_RULES_FETCHED_AND_EVALUATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata_DlpStatus_DlpEnabledRulesFetchedAndEvaluated;
/**
 *  Rule fetch happened, but rule evaluation is skipped because none of the
 *  rules are applicable.
 *
 *  Value: "DLP_ENABLED_RULES_FETCHED_NO_APPLICABLE_RULES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata_DlpStatus_DlpEnabledRulesFetchedNoApplicableRules;
/**
 *  Rule fetch happened, but rule evalution is skipped because the fetch
 *  returned no rules.
 *
 *  Value: "DLP_ENABLED_RULES_FETCHED_NO_RULES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata_DlpStatus_DlpEnabledRulesFetchedNoRules;
/**
 *  Generic DLP failure. This case covers any other errors/exceptions in the
 *  Chat backend that caused the DLP scan to fail.
 *
 *  Value: "DLP_ENABLED_SCAN_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata_DlpStatus_DlpEnabledScanFailed;
/**
 *  DLP scan was attempted but timed out.
 *
 *  Value: "DLP_ENABLED_SCAN_TIMEOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata_DlpStatus_DlpEnabledScanTimeout;
/** Value: "DLP_STATUS_UNKNOWN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata_DlpStatus_DlpStatusUnknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedGridGridItem.layout

/**
 *  No layout specified.
 *
 *  Value: "GRID_ITEM_LAYOUT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedGridGridItem_Layout_GridItemLayoutUnspecified;
/**
 *  The title and subtitle are shown above the grid item's image.
 *
 *  Value: "TEXT_ABOVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedGridGridItem_Layout_TextAbove;
/**
 *  The title and subtitle are shown below the grid item's image.
 *
 *  Value: "TEXT_BELOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedGridGridItem_Layout_TextBelow;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedGridGridItem.textAlignment

/**
 *  Alignment to the center position.
 *
 *  Value: "CENTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedGridGridItem_TextAlignment_Center;
/**
 *  Alignment to the end position.
 *
 *  Value: "END"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedGridGridItem_TextAlignment_End;
/**
 *  Unspecified alignment.
 *
 *  Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedGridGridItem_TextAlignment_HorizontalAlignmentUnspecified;
/**
 *  Alignment to the start position.
 *
 *  Value: "START"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedGridGridItem_TextAlignment_Start;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedGroupVisibility.state

/**
 *  Explicitly invited users may join the room.
 *
 *  Value: "PRIVATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedGroupVisibility_State_Private;
/**
 *  Anyone in the domain may join the room.
 *
 *  Value: "PUBLIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedGroupVisibility_State_Public;
/**
 *  Do not use.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedGroupVisibility_State_Unknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedIcon.imageType

/**
 *  Applies a circular mask to the image.
 *
 *  Value: "CIRCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedIcon_ImageType_Circle;
/**
 *  Applies no cropping to the image.
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedIcon_ImageType_Square;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedImageCropStyle.type

/**
 *  Applies a circular crop.
 *
 *  Value: "CIRCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedImageCropStyle_Type_Circle;
/**
 *  No value specified.
 *
 *  Value: "IMAGE_CROP_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedImageCropStyle_Type_ImageCropTypeUnspecified;
/**
 *  Applies a rectangular crop with a 4:3 aspect ratio.
 *
 *  Value: "RECTANGLE_4_3"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedImageCropStyle_Type_Rectangle43;
/**
 *  Applies a rectangular crop with a custom aspect ratio.
 *
 *  Value: "RECTANGLE_CUSTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedImageCropStyle_Type_RectangleCustom;
/**
 *  Applies a square crop.
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedImageCropStyle_Type_Square;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedJustification.actionType

/**
 *  Unspecified action.
 *
 *  Value: "ACTION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_ActionTypeUnspecified;
/**
 *  Commented on document.
 *
 *  Value: "COMMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_Commented;
/**
 *  Resolved comment on document.
 *
 *  Value: "COMMENT_RESOLVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_CommentResolved;
/**
 *  Created document.
 *
 *  Value: "CREATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_Created;
/**
 *  Edited document.
 *
 *  Value: "EDITED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_Edited;
/**
 *  Presented document.
 *
 *  Value: "PRESENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_Presented;
/**
 *  Sent document over chat/email.
 *
 *  Value: "SENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_Sent;
/**
 *  Shared document.
 *
 *  Value: "SHARED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_Shared;
/**
 *  Viewed document.
 *
 *  Value: "VIEWED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_Viewed;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedMessageInfo.messageType

/**
 *  The source chat message is a threaded reply to another message.
 *
 *  Value: "INLINE_REPLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedMessageInfo_MessageType_InlineReply;
/**
 *  Default value where type is not specified.
 *
 *  Value: "MESSAGE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedMessageInfo_MessageType_MessageTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedMessageIntegrationPayload.type

/** Value: "PAYLOAD_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedMessageIntegrationPayload_Type_PayloadTypeUnspecified;
/** Value: "TASKS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedMessageIntegrationPayload_Type_Tasks;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedOpenLink.onClose

/**
 *  Doesn’t reload the card after the child window closes. Reloads the card
 *  after the child window closes. If used in conjunction with
 *  [OpenAs.OVERLAY](/workspace/add-ons/reference/rpc/google.apps.card.v1#openas),
 *  the child window acts as a modal dialog and the main card is blocked until
 *  the child window closes.
 *
 *  Value: "NOTHING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedOpenLink_OnClose_Nothing;
/** Value: "RELOAD" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedOpenLink_OnClose_Reload;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedOpenLink.openAs

/**
 *  The link opens as a full size window (if that's the frame used by the
 *  client.
 *
 *  Value: "FULL_SIZE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedOpenLink_OpenAs_FullSize;
/**
 *  The link opens as an overlay, such as a pop-up.
 *
 *  Value: "OVERLAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedOpenLink_OpenAs_Overlay;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedRetentionSettings.state

/**
 *  The message/topic should be kept with a 24-hour TTL.
 *
 *  Value: "EPHEMERAL_ONE_DAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedRetentionSettings_State_EphemeralOneDay;
/**
 *  The message/topic should be kept permanently.
 *
 *  Value: "PERMANENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedRetentionSettings_State_Permanent;
/** Value: "UNKNOWN_RETENTION_STATE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedRetentionSettings_State_UnknownRetentionState;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount.membershipState

/**
 *  This state should never be stored in Spanner. It is a state for responses to
 *  the clients to indicate that membership mutations have failed and the member
 *  is in its previous state.
 *
 *  Value: "MEMBER_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount_MembershipState_MemberFailed;
/**
 *  An invitation to the space has been sent
 *
 *  Value: "MEMBER_INVITED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount_MembershipState_MemberInvited;
/**
 *  User has joined the space
 *
 *  Value: "MEMBER_JOINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount_MembershipState_MemberJoined;
/**
 *  User is not a member
 *
 *  Value: "MEMBER_NOT_A_MEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount_MembershipState_MemberNotAMember;
/**
 *  Default state, do not use
 *
 *  Value: "MEMBER_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount_MembershipState_MemberUnknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount.memberType

/**
 *  member is a human user
 *
 *  Value: "HUMAN_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount_MemberType_HumanUser;
/**
 *  default value
 *
 *  Value: "MEMBER_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount_MemberType_MemberTypeUnspecified;
/**
 *  member is a roster
 *
 *  Value: "ROSTER_MEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount_MemberType_RosterMember;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedSelectionInput.type

/**
 *  The selection type is a checkbox.
 *
 *  Value: "CHECK_BOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSelectionInput_Type_CheckBox;
/**
 *  The selection type is a dropdown.
 *
 *  Value: "DROPDOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSelectionInput_Type_Dropdown;
/**
 *  The selection type is a radio button.
 *
 *  Value: "RADIO_BUTTON"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSelectionInput_Type_RadioButton;
/**
 *  The selection type is a switch.
 *
 *  Value: "SWITCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSelectionInput_Type_Switch;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedSpaceInfo.userMembershipState

/**
 *  This state should never be stored in Spanner. It is a state for responses to
 *  the clients to indicate that membership mutations have failed and the member
 *  is in its previous state.
 *
 *  Value: "MEMBER_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSpaceInfo_UserMembershipState_MemberFailed;
/**
 *  An invitation to the space has been sent
 *
 *  Value: "MEMBER_INVITED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSpaceInfo_UserMembershipState_MemberInvited;
/**
 *  User has joined the space
 *
 *  Value: "MEMBER_JOINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSpaceInfo_UserMembershipState_MemberJoined;
/**
 *  User is not a member
 *
 *  Value: "MEMBER_NOT_A_MEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSpaceInfo_UserMembershipState_MemberNotAMember;
/**
 *  Default state, do not use
 *
 *  Value: "MEMBER_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedSpaceInfo_UserMembershipState_MemberUnknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedTextInput.type

/**
 *  The text is put into multiple lines.
 *
 *  Value: "MULTIPLE_LINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedTextInput_Type_MultipleLine;
/**
 *  The text is put into a single line.
 *
 *  Value: "SINGLE_LINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedTextInput_Type_SingleLine;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedVideoReference.status

/** Value: "ERROR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedVideoReference_Status_Error;
/** Value: "GO_LIVE_SUCCESS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedVideoReference_Status_GoLiveSuccess;
/** Value: "NOT_APPLICABLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedVideoReference_Status_NotApplicable;
/** Value: "SUCCESS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedVideoReference_Status_Success;
/** Value: "THUMBNAIL_SUCCESS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedVideoReference_Status_ThumbnailSuccess;
/** Value: "UNKNOWN_STATUS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedVideoReference_Status_UnknownStatus;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsDynamiteSharedWidget.horizontalAlignment

/**
 *  Alignment to the center position.
 *
 *  Value: "CENTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedWidget_HorizontalAlignment_Center;
/**
 *  Alignment to the end position.
 *
 *  Value: "END"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedWidget_HorizontalAlignment_End;
/**
 *  Unspecified alignment.
 *
 *  Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedWidget_HorizontalAlignment_HorizontalAlignmentUnspecified;
/**
 *  Alignment to the start position.
 *
 *  Value: "START"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsDynamiteSharedWidget_HorizontalAlignment_Start;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup.features

/**
 *  Applies to `PHONE` entry point. A call to a toll number is charged to the
 *  calling party. A number can't be toll and toll-free at the same time.
 *
 *  Value: "TOLL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup_Features_Toll;
/**
 *  Applies to `PHONE` entry point. For the calling party, a call to a toll-free
 *  number is free of charge. A number can't be toll and toll-free at the same
 *  time.
 *
 *  Value: "TOLL_FREE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup_Features_TollFree;
/**
 *  Unknown feature.
 *
 *  Value: "UNKNOWN_FEATURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup_Features_UnknownFeature;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup.type

/**
 *  Used to provide a link to further conference joining information.
 *
 *  Value: "MORE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup_Type_More;
/**
 *  A phone conference.
 *
 *  Value: "PHONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup_Type_Phone;
/**
 *  A conference using [Session Initiation
 *  Protocol](https://en.wikipedia.org/wiki/Session_Initiation_Protocol)
 *
 *  Value: "SIP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup_Type_Sip;
/**
 *  Unknown conference type.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup_Type_Unknown;
/**
 *  A video conference.
 *
 *  Value: "VIDEO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup_Type_Video;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError.type

/**
 *  An authentication error.
 *
 *  Value: "AUTHENTICATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError_Type_Authentication;
/**
 *  The user isn't allowed to use the selected conference solution (but might be
 *  allowed to use other solutions offered by the add-on).
 *
 *  Value: "CONFERENCE_SOLUTION_FORBIDDEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError_Type_ConferenceSolutionForbidden;
/**
 *  A permanent error.
 *
 *  Value: "PERMANENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError_Type_Permanent;
/**
 *  The user isn't allowed to perform some action in the third-party
 *  conferencing system.
 *
 *  Value: "PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError_Type_PermissionDenied;
/**
 *  A temporary error.
 *
 *  Value: "TEMPORARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError_Type_Temporary;
/**
 *  Unknown error.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError_Type_Unknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_BorderStyle.type

/**
 *  No value specified.
 *
 *  Value: "BORDER_TYPE_NOT_SET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BorderStyle_Type_BorderTypeNotSet;
/**
 *  No border.
 *
 *  Value: "NO_BORDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BorderStyle_Type_NoBorder;
/**
 *  Outline.
 *
 *  Value: "STROKE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BorderStyle_Type_Stroke;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_BotInfo.appAllowlistStatus

/**
 *  For both ALL_APPS_DISABLED_BY_ADMIN and APP_NOT_ALLOWLISTED_BY_ADMIN, the
 *  app should still be visible in the catalog, but usage of the app will be
 *  disabled. Indicates that all apps have been disabled by the dasher admin.
 *
 *  Value: "ALL_APPS_DISABLED_BY_ADMIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotInfo_AppAllowlistStatus_AllAppsDisabledByAdmin;
/** Value: "ALLOWED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotInfo_AppAllowlistStatus_Allowed;
/**
 *  Indicates that the customer is using allowlisting, but that the bot is not
 *  allowlisted.
 *
 *  Value: "APP_NOT_ALLOWLISTED_BY_ADMIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotInfo_AppAllowlistStatus_AppNotAllowlistedByAdmin;
/** Value: "UNSPECIFIED_STATUS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotInfo_AppAllowlistStatus_UnspecifiedStatus;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_BotInfo.status

/**
 *  Bot has been disabled by the bot developer. No one can \@mention or interact
 *  with the bot.
 *
 *  Value: "DISABLED_BY_DEVELOPER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotInfo_Status_DisabledByDeveloper;
/** Value: "ENABLED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotInfo_Status_Enabled;
/** Value: "UNKNOWN_STATUS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotInfo_Status_UnknownStatus;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_BotInfo.supportedUses

/** Value: "CAN_ADD_TO_DM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotInfo_SupportedUses_CanAddToDm;
/** Value: "CAN_ADD_TO_HUMAN_DM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotInfo_SupportedUses_CanAddToHumanDm;
/** Value: "CAN_ADD_TO_ROOM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotInfo_SupportedUses_CanAddToRoom;
/** Value: "UNKNOWN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotInfo_SupportedUses_Unknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_BotResponse.requiredAction

/**
 *  Bot requires authentication.
 *
 *  Value: "AUTHENTICATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotResponse_RequiredAction_Authentication;
/**
 *  Bot requires configuration.
 *
 *  Value: "CONFIGURATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotResponse_RequiredAction_Configuration;
/** Value: "UNKNOWN_SETUP_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotResponse_RequiredAction_UnknownSetupType;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_BotResponse.responseType

/**
 *  A suggestion to promote an app.
 *
 *  Value: "APP_SUGGESTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotResponse_ResponseType_AppSuggestion;
/**
 *  Bot fails to respond because it is disabled by domain admin
 *
 *  Value: "DISABLED_BY_ADMIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotResponse_ResponseType_DisabledByAdmin;
/**
 *  Bot fails to respond because it is disabled by the bot's developer
 *
 *  Value: "DISABLED_BY_DEVELOPER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotResponse_ResponseType_DisabledByDeveloper;
/**
 *  Bot fails to respond because of deadline_exceeded or failing to parse bot
 *  message.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotResponse_ResponseType_Error;
/**
 *  Message to bot should be permanently private.
 *
 *  Value: "PRIVATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotResponse_ResponseType_Private;
/**
 *  Bot requires auth or config
 *
 *  Value: "SETUP_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotResponse_ResponseType_SetupRequired;
/** Value: "UNKNOWN_RESPONSE_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BotResponse_ResponseType_UnknownResponseType;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_BroadcastAccess.accessPolicy

/**
 *  Used only when broadcast is not enabled, or an unknown enum value is used.
 *
 *  Value: "BROADCASTING_ACCESS_POLICY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BroadcastAccess_AccessPolicy_BroadcastingAccessPolicyUnspecified;
/**
 *  Only authenticated Google accounts belonging to the same organization as the
 *  meeting organizer can access the broadcast.
 *
 *  Value: "ORGANIZATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BroadcastAccess_AccessPolicy_Organization;
/**
 *  Anyone with the broadcast view URL can access the broadcast.
 *
 *  Value: "PUBLIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_BroadcastAccess_AccessPolicy_Public;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_CallSettings.accessType

/**
 *  Anyone with meeting join information (url, phone access...) can join, no
 *  knocking required. (Subject to organization policies)
 *
 *  Value: "ACCESS_TYPE_OPEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CallSettings_AccessType_AccessTypeOpen;
/**
 *  Only participants invited by a host can automatically join, everyone else
 *  must knock and be admitted. (Subject to organization policies) Participants
 *  cannot dial out from the meeting. And only hosts can accept knocks.
 *
 *  Value: "ACCESS_TYPE_RESTRICTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CallSettings_AccessType_AccessTypeRestricted;
/**
 *  Members of the Host's organization, invited external users, and dial-in
 *  users can join without knocking, everyone else must knock. (Subject to
 *  organization policies)
 *
 *  Value: "ACCESS_TYPE_TRUSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CallSettings_AccessType_AccessTypeTrusted;
/**
 *  Default value. This value is unused.
 *
 *  Value: "ACCESS_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CallSettings_AccessType_AccessTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Card.displayStyle

/** Value: "DISPLAY_STYLE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Card_DisplayStyle_DisplayStyleUnspecified;
/** Value: "PEEK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Card_DisplayStyle_Peek;
/** Value: "REPLACE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Card_DisplayStyle_Replace;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_CardCapabilityMetadata.requiredCapabilities

/**
 *  NEXT TAG : 2
 *
 *  Value: "SUPPORTS_BASE_CARDS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CardCapabilityMetadata_RequiredCapabilities_SupportsBaseCards;
/** Value: "UNKNOWN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CardCapabilityMetadata_RequiredCapabilities_Unknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_CardHeader.imageStyle

/**
 *  Applies a circular crop.
 *
 *  Value: "CIRCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CardHeader_ImageStyle_Circle;
/**
 *  No value specified.
 *
 *  Value: "CROP_TYPE_NOT_SET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CardHeader_ImageStyle_CropTypeNotSet;
/**
 *  Applies a rectangular crop with a 4:3 aspect ratio.
 *
 *  Value: "RECTANGLE_4_3"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CardHeader_ImageStyle_Rectangle43;
/**
 *  Applies a rectangular crop with a custom aspect ratio.
 *
 *  Value: "RECTANGLE_CUSTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CardHeader_ImageStyle_RectangleCustom;
/**
 *  Applies a square crop.
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CardHeader_ImageStyle_Square;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_ChatConfig.chatType

/**
 *  Chat Type has not been specified.
 *
 *  Value: "CHAT_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ChatConfig_ChatType_ChatTypeUnspecified;
/**
 *  Google Chat.
 *
 *  Value: "GOOGLE_CHAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ChatConfig_ChatType_GoogleChat;
/**
 *  Meets native chat.
 *
 *  Value: "MEET_CHAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ChatConfig_ChatType_MeetChat;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_ChatContentExtension.eventOtrStatus

/**
 *  The conversation is completely off the record.
 *
 *  Value: "OFF_THE_RECORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ChatContentExtension_EventOtrStatus_OffTheRecord;
/**
 *  The conversation is completely on the record.
 *
 *  Value: "ON_THE_RECORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ChatContentExtension_EventOtrStatus_OnTheRecord;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_CoActivity.coActivityApp

/**
 *  GQueues task manager.
 *
 *  Value: "CO_ACTIVITY_APP_GQUEUES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CoActivity_CoActivityApp_CoActivityAppGqueues;
/**
 *  HeadsUp game.
 *
 *  Value: "CO_ACTIVITY_APP_HEADSUP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CoActivity_CoActivityApp_CoActivityAppHeadsup;
/**
 *  Kahoot! educational software.
 *
 *  Value: "CO_ACTIVITY_APP_KAHOOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CoActivity_CoActivityApp_CoActivityAppKahoot;
/**
 *  Spotify music.
 *
 *  Value: "CO_ACTIVITY_APP_SPOTIFY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CoActivity_CoActivityApp_CoActivityAppSpotify;
/**
 *  Uno game.
 *
 *  Value: "CO_ACTIVITY_APP_UNO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CoActivity_CoActivityApp_CoActivityAppUno;
/**
 *  Should never be used.
 *
 *  Value: "CO_ACTIVITY_APP_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CoActivity_CoActivityApp_CoActivityAppUnspecified;
/**
 *  Main YouTube app, for watching videos.
 *
 *  Value: "CO_ACTIVITY_APP_YOU_TUBE_MAIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CoActivity_CoActivityApp_CoActivityAppYouTubeMain;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_CompositeFilter.logicOperator

/**
 *  Logical operators, which can only be applied to sub filters.
 *
 *  Value: "AND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CompositeFilter_LogicOperator_And;
/**
 *  NOT can only be applied on a single sub filter.
 *
 *  Value: "NOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CompositeFilter_LogicOperator_Not;
/** Value: "OR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_CompositeFilter_LogicOperator_Or;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_DateTimePicker.type

/** Value: "DATE_AND_TIME" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DateTimePicker_Type_DateAndTime;
/** Value: "DATE_ONLY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DateTimePicker_Type_DateOnly;
/** Value: "TIME_ONLY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DateTimePicker_Type_TimeOnly;
/** Value: "UNSPECIFIED_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DateTimePicker_Type_UnspecifiedType;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_DeliveryMedium.mediumType

/** Value: "BABEL_MEDIUM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DeliveryMedium_MediumType_BabelMedium;
/** Value: "GOOGLE_VOICE_MEDIUM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DeliveryMedium_MediumType_GoogleVoiceMedium;
/** Value: "LOCAL_SMS_MEDIUM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DeliveryMedium_MediumType_LocalSmsMedium;
/** Value: "UNKNOWN_MEDIUM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DeliveryMedium_MediumType_UnknownMedium;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_DlpScanSummary.scanOutcome

/**
 *  Rule fetch completed and evaluation were attempted, but all of the rules
 *  failed to be evaluated.
 *
 *  Value: "SCAN_FAILURE_ALL_RULES_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanFailureAllRulesFailed;
/**
 *  Rule fetch and evaluation were attempted but an exception occurred.
 *
 *  Value: "SCAN_FAILURE_EXCEPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanFailureException;
/**
 *  An IllegalStateException is thrown when executing DLP on attachments. This
 *  could happen if the space row is missing.
 *
 *  Value: "SCAN_FAILURE_ILLEGAL_STATE_FOR_ATTACHMENTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanFailureIllegalStateForAttachments;
/**
 *  Rule fetch and evaluation were attempted but the scanning timed out.
 *
 *  Value: "SCAN_FAILURE_TIMEOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanFailureTimeout;
/**
 *  Rule fetch happened, but rule evaluation is skipped because Changeling
 *  returned an empty response while converting the attachment to text.
 *
 *  Value: "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_EMPTY_RESPONSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanRuleEvaluationSkippedChangelingEmptyResponse;
/**
 *  Rule fetch happened, but rule evaluation is skipped because Changeling
 *  returned permanent failure while converting the attachment to text.
 *
 *  Value: "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_PERMANENT_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanRuleEvaluationSkippedChangelingPermanentError;
/**
 *  Rule fetch happened, but rule evaluation is skipped because none of the
 *  rules are applicable to the given action params.
 *
 *  Value: "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_ACTION_PARAMS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanRuleEvaluationSkippedNoApplicableRulesForActionParams;
/**
 *  Rule fetch happened, but rule evaluation is skipped because none of the
 *  rules are applicable to the given trigger.
 *
 *  Value: "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_TRIGGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanRuleEvaluationSkippedNoApplicableRulesForTrigger;
/**
 *  Rule fetch happened, but rule evaluation is skipped because no rules were
 *  found.
 *
 *  Value: "SCAN_RULE_EVALUATION_SKIPPED_NO_RULES_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanRuleEvaluationSkippedNoRulesFound;
/**
 *  Rule fetch and evaluation are skipped because the user sending message is
 *  consumer.
 *
 *  Value: "SCAN_SKIPPED_CONSUMER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSkippedConsumer;
/**
 *  Rule fetch and evaluation is skipped because DLP is not enabled for the
 *  user.
 *
 *  Value: "SCAN_SKIPPED_EXPERIMENT_DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSkippedExperimentDisabled;
/**
 *  Scanning was skipped because the message originated from Interop or Babel.
 *
 *  Value: "SCAN_SKIPPED_MESSAGE_FROM_UNSUPPORTED_ORIGIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSkippedMessageFromUnsupportedOrigin;
/**
 *  Rule fetch and evaluation are skipped because there is no message to scan.
 *  Deprecated: this should not happen since there must be message or attachment
 *  for DLP scan.
 *
 *  Value: "SCAN_SKIPPED_NO_MESSAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSkippedNoMessage;
/**
 *  Rule fetch and evaluation are skipped because the user sending message is a
 *  non-human user (i.e. a bot).
 *
 *  Value: "SCAN_SKIPPED_NON_HUMAN_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSkippedNonHumanUser;
/**
 *  Rule fetch and evaluation are skipped because the user has acknowledged the
 *  warning on the message that triggered the Warn violation and sent the
 *  message anyway.
 *
 *  Value: "SCAN_SKIPPED_USER_ACKNOWLEDGED_WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSkippedUserAcknowledgedWarning;
/**
 *  Violation is detected and will be logged to BIP (no user-facing action
 *  performed).
 *
 *  Value: "SCAN_SUCCEEDED_AUDIT_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSucceededAuditOnly;
/**
 *  Violation is detected. The message/attachment will be blocked (or deleted if
 *  this happens in failure recovery), the user will be warned, and the
 *  violation will be logged to BIP.
 *
 *  Value: "SCAN_SUCCEEDED_BLOCK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSucceededBlock;
/**
 *  This means no violation is detected on the given message/attachment.
 *
 *  Value: "SCAN_SUCCEEDED_NO_VIOLATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSucceededNoViolation;
/**
 *  Violation is detected. The user will be warned, and the violation will be
 *  logged to BIP.
 *
 *  Value: "SCAN_SUCCEEDED_WARN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSucceededWarn;
/**
 *  Rules were fetched but some evaluations failed. An audit-only violation was
 *  found in the rules that were successfully evaluated. The violation will be
 *  logged to BIP (no user-facing action performed).
 *
 *  Value: "SCAN_SUCCEEDED_WITH_FAILURES_AUDIT_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSucceededWithFailuresAuditOnly;
/**
 *  Rules were fetched but some evaluations failed. A blocking violation was
 *  found in the rules that were successfully evaluated. The message/attachment
 *  will be blocked, the user will be notified, and the violation will be logged
 *  to BIP. A blocking violation takes precedence over all other violation
 *  types.
 *
 *  Value: "SCAN_SUCCEEDED_WITH_FAILURES_BLOCK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSucceededWithFailuresBlock;
/**
 *  Rules were fetched but some evaluations failed. No violation was found in
 *  the rules that were successfully evaluated.
 *
 *  Value: "SCAN_SUCCEEDED_WITH_FAILURES_NO_VIOLATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSucceededWithFailuresNoViolation;
/**
 *  Rules were fetched but some evaluations failed. A warn violation was found
 *  in the rules that were successfully evaluated. The user will be warned, and
 *  the violation will be logged to BIP.
 *
 *  Value: "SCAN_SUCCEEDED_WITH_FAILURES_WARN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSucceededWithFailuresWarn;
/** Value: "SCAN_UNKNOWN_OUTCOME" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanUnknownOutcome;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_DriveFollowUpRestrict.type

/** Value: "FOLLOWUP_ACTION_ITEMS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveFollowUpRestrict_Type_FollowupActionItems;
/** Value: "FOLLOWUP_SUGGESTIONS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveFollowUpRestrict_Type_FollowupSuggestions;
/** Value: "UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveFollowUpRestrict_Type_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_DriveLocationRestrict.type

/** Value: "STARRED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveLocationRestrict_Type_Starred;
/** Value: "TRASHED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveLocationRestrict_Type_Trashed;
/** Value: "UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveLocationRestrict_Type_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_DriveMetadata.driveAction

/**
 *  Show "Add another shortcut" button, for Drive files the user has already
 *  created a shortcut to.
 *
 *  Value: "ADD_ANOTHER_SHORTCUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMetadata_DriveAction_AddAnotherShortcut;
/**
 *  Show "Add shortcut" button, for adding a shortcut to a Drive file the user
 *  does not have permission to move.
 *
 *  Value: "ADD_SHORTCUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMetadata_DriveAction_AddShortcut;
/**
 *  Show "Add to Drive" button, for adding file that doesn't exist in Drive to
 *  Drive. Note that deleted Drive files that still exist (i.e. in your Trash)
 *  will still be ORGANIZE (this is consistent with Gmail Drive attachments).
 *
 *  Value: "ADD_TO_DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMetadata_DriveAction_AddToDrive;
/**
 *  No organize action should be shown.
 *
 *  Value: "DRIVE_ACTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMetadata_DriveAction_DriveActionUnspecified;
/**
 *  Show "Move" button, for organizing a Drive file the user has permission to
 *  move.
 *
 *  Value: "ORGANIZE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMetadata_DriveAction_Organize;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_DriveMetadata.driveState

/**
 *  Default value
 *
 *  Value: "DRIVE_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMetadata_DriveState_DriveStateUnspecified;
/**
 *  File in My Drive
 *
 *  Value: "IN_MY_DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMetadata_DriveState_InMyDrive;
/**
 *  File in Team Drive
 *
 *  Value: "IN_TEAM_DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMetadata_DriveState_InTeamDrive;
/**
 *  File not in drive
 *
 *  Value: "NOT_IN_DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMetadata_DriveState_NotInDrive;
/**
 *  File in someone else's Drive, but is shared with the current user
 *
 *  Value: "SHARED_IN_DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMetadata_DriveState_SharedInDrive;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_DriveMimeTypeRestrict.type

/** Value: "ARCHIVE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Archive;
/** Value: "AUDIO" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Audio;
/** Value: "DOCUMENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Document;
/** Value: "DRAWING" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Drawing;
/** Value: "FOLDER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Folder;
/** Value: "FORM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Form;
/** Value: "IMAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Image;
/** Value: "MAP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Map;
/** Value: "PDF" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Pdf;
/** Value: "PRESENTATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Presentation;
/** Value: "SCRIPT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Script;
/** Value: "SITE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Site;
/** Value: "SPREADSHEET" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Spreadsheet;
/** Value: "UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Unspecified;
/** Value: "VIDEO" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Video;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_DriveTimeSpanRestrict.type

/**
 *  Not Enabled
 *
 *  Value: "LAST_30_DAYS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Last30Days;
/** Value: "LAST_7_DAYS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Last7Days;
/**
 *  Not Enabled
 *
 *  Value: "LAST_90_DAYS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Last90Days;
/** Value: "TODAY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Today;
/** Value: "UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Unspecified;
/** Value: "YESTERDAY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Yesterday;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_EmbedClientItem.type

/** Value: "ABOUT_PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AboutPage;
/** Value: "ACCOUNTING_SERVICE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AccountingService;
/**
 *  Embeds V2 types
 *
 *  Value: "ACTION_V2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ActionV2;
/** Value: "ADD_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AddActionV2;
/**
 *  PLACE subtypes
 *
 *  Value: "ADMINISTRATIVE_AREA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AdministrativeArea;
/** Value: "ADULT_ENTERTAINMENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AdultEntertainment;
/** Value: "AGGREGATE_RATING" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AggregateRating;
/** Value: "AGGREGATE_RATING_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AggregateRatingV2;
/** Value: "AIRPORT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Airport;
/** Value: "AMUSEMENT_PARK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AmusementPark;
/** Value: "ANIMAL_SHELTER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AnimalShelter;
/** Value: "APARTMENT_COMPLEX" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ApartmentComplex;
/** Value: "APP_INVITE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AppInvite;
/** Value: "AQUARIUM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Aquarium;
/** Value: "ART_GALLERY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ArtGallery;
/**
 *  CREATIVE_WORK subtypes
 *
 *  Value: "ARTICLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Article;
/** Value: "ARTICLE_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ArticleV2;
/** Value: "ASSESS_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AssessActionV2;
/** Value: "ATTORNEY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Attorney;
/** Value: "AUDIO_OBJECT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AudioObject;
/** Value: "AUDIO_OBJECT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AudioObjectV2;
/** Value: "AUTO_BODY_SHOP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AutoBodyShop;
/** Value: "AUTO_DEALER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AutoDealer;
/** Value: "AUTOMATED_TELLER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AutomatedTeller;
/** Value: "AUTOMOTIVE_BUSINESS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AutomotiveBusiness;
/** Value: "AUTO_PARTS_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AutoPartsStore;
/** Value: "AUTO_RENTAL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AutoRental;
/** Value: "AUTO_REPAIR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AutoRepair;
/** Value: "AUTO_WASH" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_AutoWash;
/** Value: "BAKERY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Bakery;
/** Value: "BANK_OR_CREDIT_UNION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BankOrCreditUnion;
/** Value: "BAR_OR_PUB" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BarOrPub;
/** Value: "BASIC_INTERACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BasicInteractionV2;
/** Value: "BEACH" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Beach;
/** Value: "BEAUTY_SALON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BeautySalon;
/** Value: "BED_AND_BREAKFAST" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BedAndBreakfast;
/** Value: "BIKE_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BikeStore;
/** Value: "BLOG" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Blog;
/** Value: "BLOG_POSTING" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BlogPosting;
/** Value: "BLOG_POSTING_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BlogPostingV2;
/** Value: "BLOG_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BlogV2;
/** Value: "BODY_OF_WATER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BodyOfWater;
/** Value: "BOOK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Book;
/** Value: "BOOK_FORMAT_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BookFormatType;
/** Value: "BOOK_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BookStore;
/** Value: "BOOK_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BookV2;
/** Value: "BOWLING_ALLEY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BowlingAlley;
/** Value: "BREWERY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Brewery;
/** Value: "BUDDHIST_TEMPLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BuddhistTemple;
/**
 *  EVENT subtypes
 *
 *  Value: "BUSINESS_EVENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BusinessEvent;
/** Value: "BUS_STATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BusStation;
/** Value: "BUS_STOP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BusStop;
/** Value: "BUY_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_BuyActionV2;
/** Value: "CAFE_OR_COFFEE_SHOP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CafeOrCoffeeShop;
/** Value: "CAMPGROUND" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Campground;
/** Value: "CANAL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Canal;
/**
 *  Single frame for http://goto/carousel.
 *
 *  Value: "CAROUSEL_FRAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CarouselFrame;
/** Value: "CASINO" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Casino;
/** Value: "CATHOLIC_CHURCH" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CatholicChurch;
/** Value: "CEMETERY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Cemetery;
/** Value: "CHECKIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Checkin;
/**
 *  The action of checking in, as opposed to a "check-in".
 *
 *  Value: "CHECK_IN_ACTION_V2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CheckInActionV2;
/** Value: "CHECKIN_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CheckinV2;
/** Value: "CHECKOUT_PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CheckoutPage;
/** Value: "CHILD_CARE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ChildCare;
/** Value: "CHILDRENS_EVENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ChildrensEvent;
/** Value: "CHURCH" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Church;
/** Value: "CITY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_City;
/** Value: "CITY_HALL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CityHall;
/** Value: "CIVIC_STRUCTURE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CivicStructure;
/** Value: "CLOTHING_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ClothingStore;
/** Value: "COLLECTION_PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CollectionPage;
/** Value: "COLLEGE_OR_UNIVERSITY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CollegeOrUniversity;
/** Value: "COLLEXION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CollexionV2;
/** Value: "COMEDY_CLUB" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ComedyClub;
/** Value: "COMEDY_EVENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ComedyEvent;
/** Value: "COMMENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Comment;
/**
 *  The act of commenting, which might result in a comment.
 *
 *  Value: "COMMENT_ACTION_V2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CommentActionV2;
/** Value: "COMMENT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CommentV2;
/** Value: "COMMUNICATE_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CommunicateActionV2;
/** Value: "COMPUTER_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ComputerStore;
/** Value: "CONSUME_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ConsumeActionV2;
/** Value: "CONTACT_PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ContactPage;
/** Value: "CONTACT_POINT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ContactPoint;
/** Value: "CONTINENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Continent;
/** Value: "CONVENIENCE_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ConvenienceStore;
/**
 *  ORGANIZATION subtypes
 *
 *  Value: "CORPORATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Corporation;
/** Value: "COUNTRY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Country;
/** Value: "COURTHOUSE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Courthouse;
/** Value: "CREATE_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CreateActionV2;
/** Value: "CREATIVE_WORK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CreativeWork;
/** Value: "CREATIVE_WORK_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_CreativeWorkV2;
/** Value: "CREMATORIUM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Crematorium;
/** Value: "DANCE_EVENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_DanceEvent;
/**
 *  An http://schema.org/Date unstructured ISO-8859 timestamp string.
 *
 *  Value: "DATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Date;
/** Value: "DAY_SPA" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_DaySpa;
/** Value: "DEFENCE_ESTABLISHMENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_DefenceEstablishment;
/** Value: "DENTIST" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Dentist;
/** Value: "DEPARTMENT_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_DepartmentStore;
/** Value: "DEPRECATED_TOUR_OBJECT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_DeprecatedTourObject;
/** Value: "DEPRECATED_TOUR_OBJECT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_DeprecatedTourObjectV2;
/** Value: "DISCOVER_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_DiscoverActionV2;
/** Value: "DISTANCE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Distance;
/** Value: "DOCUMENT_OBJECT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_DocumentObject;
/** Value: "DOCUMENT_OBJECT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_DocumentObjectV2;
/** Value: "DRAWING_OBJECT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_DrawingObject;
/** Value: "DRAWING_OBJECT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_DrawingObjectV2;
/**
 *  Embed representing a collection of multiple Drive objects.
 *
 *  Value: "DRIVE_OBJECT_COLLECTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_DriveObjectCollection;
/** Value: "DRIVE_OBJECT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_DriveObjectV2;
/** Value: "DRY_CLEANING_OR_LAUNDRY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_DryCleaningOrLaundry;
/** Value: "DURATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Duration;
/**
 *  Deprecated in favor of DYNAMITE_MESSAGE_METADATA
 *
 *  Value: "DYNAMITE_ATTACHMENT_METADATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_DynamiteAttachmentMetadata;
/**
 *  Used for Dynamite message metadata in Hangouts
 *
 *  Value: "DYNAMITE_MESSAGE_METADATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_DynamiteMessageMetadata;
/** Value: "EDUCATIONAL_ORGANIZATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_EducationalOrganization;
/** Value: "EDUCATION_EVENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_EducationEvent;
/** Value: "ELECTRICIAN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Electrician;
/** Value: "ELECTRONICS_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ElectronicsStore;
/** Value: "ELEMENTARY_SCHOOL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ElementarySchool;
/** Value: "EMBASSY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Embassy;
/** Value: "EMERGENCY_SERVICE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_EmergencyService;
/** Value: "EMOTISHARE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Emotishare;
/** Value: "EMOTISHARE_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_EmotishareV2;
/** Value: "EMPLOYMENT_AGENGY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_EmploymentAgengy;
/** Value: "ENERGY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Energy;
/** Value: "ENTERTAINMENT_BUSINESS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_EntertainmentBusiness;
/** Value: "ENTRY_POINT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_EntryPointV2;
/**
 *  Intangibles, primarily used as sub-objects of other types
 *
 *  Value: "ENUMERATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Enumeration;
/** Value: "EVENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Event;
/** Value: "EVENT_TIME_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_EventTimeV2;
/** Value: "EVENT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_EventV2;
/** Value: "EVENT_VENUE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_EventVenue;
/** Value: "EXAMPLE_OBJECT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ExampleObject;
/** Value: "EXERCISE_GYM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ExerciseGym;
/** Value: "FAST_FOOD_RESTAURANT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_FastFoodRestaurant;
/** Value: "FESTIVAL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Festival;
/** Value: "FILE_OBJECT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_FileObject;
/** Value: "FILE_OBJECT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_FileObjectV2;
/** Value: "FINANCIAL_QUOTE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_FinancialQuote;
/** Value: "FINANCIAL_QUOTE_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_FinancialQuoteV2;
/** Value: "FINANCIAL_SERVICE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_FinancialService;
/** Value: "FIND_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_FindActionV2;
/** Value: "FIRE_STATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_FireStation;
/** Value: "FLORIST" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Florist;
/** Value: "FOOD_ESTABLISHMENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_FoodEstablishment;
/** Value: "FOOD_EVENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_FoodEvent;
/** Value: "FORM_OBJECT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_FormObject;
/** Value: "FORM_OBJECT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_FormObjectV2;
/** Value: "FURNITURE_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_FurnitureStore;
/** Value: "GARDEN_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GardenStore;
/** Value: "GAS_STATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GasStation;
/** Value: "GATED_RESIDENCE_COMMUNITY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GatedResidenceCommunity;
/** Value: "GENERAL_CONTRACTOR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GeneralContractor;
/** Value: "GEO_COORDINATES" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GeoCoordinates;
/** Value: "GEO_COORDINATES_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GeoCoordinatesV2;
/** Value: "GEO_SHAPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GeoShape;
/** Value: "GOLF_COURSE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GolfCourse;
/**
 *  Data visualizations. See http://code.google.com/apis/chart/index.html
 *
 *  Value: "GOOGLE_CHART"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GoogleChart;
/** Value: "GOOGLE_OFFER_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GoogleOfferV2;
/**
 *  An embed used to create a single photo in photo service. This type is never
 *  stored but is used to create a GOOGLE_USER_PHOTO_V2 or PLUS_PHOTO_V2 embed.
 *
 *  Value: "GOOGLE_PHOTO_RECIPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GooglePhotoRecipe;
/**
 *  A photo album in photo service owned by a Google account user. This is
 *  distinct from PlusPhotoAlbum as it isn't tied to GPlus, but is instead
 *  intended to be a general photo album tied to a google user.
 *
 *  Value: "GOOGLE_USER_PHOTO_ALBUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GoogleUserPhotoAlbum;
/**
 *  A photo stored in photo service owned by a Google account user. This is
 *  distinct from PlusPhoto as it isn't tied to GPlus, but is instead intended
 *  to be a more general photo tied to a google user.
 *
 *  Value: "GOOGLE_USER_PHOTO_V2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GoogleUserPhotoV2;
/** Value: "GOVERNMENT_BUILDING" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GovernmentBuilding;
/** Value: "GOVERNMENT_OFFICE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GovernmentOffice;
/** Value: "GOVERNMENT_ORGANIZATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GovernmentOrganization;
/** Value: "GROCERY_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_GroceryStore;
/** Value: "HAIR_SALON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HairSalon;
/**
 *  No declared proto. Used only as a base type for now.
 *
 *  Value: "HANGOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Hangout;
/** Value: "HANGOUT_BROADCAST" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HangoutBroadcast;
/** Value: "HANGOUT_CHAT_MESSAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HangoutChatMessage;
/** Value: "HANGOUT_CONSUMER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HangoutConsumer;
/** Value: "HANGOUT_QUOTE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HangoutQuote;
/** Value: "HANGOUT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HangoutV2;
/** Value: "HARDWARE_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HardwareStore;
/** Value: "HEALTH_AND_BEAUTY_BUSINESS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HealthAndBeautyBusiness;
/** Value: "HEALTH_CLUB" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HealthClub;
/** Value: "HIGH_SCHOOL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HighSchool;
/** Value: "HINDU_TEMPLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HinduTemple;
/** Value: "HOA_PLUS_EVENT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HoaPlusEventV2;
/** Value: "HOBBY_SHOP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HobbyShop;
/** Value: "HOME_AND_CONSTRUCTION_BUSINESS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HomeAndConstructionBusiness;
/** Value: "HOME_GOODS_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HomeGoodsStore;
/** Value: "HOSPITAL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Hospital;
/** Value: "HOSTEL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Hostel;
/** Value: "HOTEL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Hotel;
/** Value: "HOUSE_PAINTER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HousePainter;
/** Value: "HVAC_BUSINESS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_HvacBusiness;
/** Value: "ICE_CREAM_SHOP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_IceCreamShop;
/** Value: "IMAGE_GALLERY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ImageGallery;
/** Value: "IMAGE_OBJECT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ImageObject;
/** Value: "IMAGE_OBJECT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ImageObjectV2;
/** Value: "INSURANCE_AGENCY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_InsuranceAgency;
/** Value: "INTANGIBLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Intangible;
/** Value: "INTERACT_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_InteractActionV2;
/** Value: "INTERACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_InteractionV2;
/** Value: "INTERNET_CAFE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_InternetCafe;
/** Value: "ITEM_AVAILABILITY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ItemAvailability;
/** Value: "ITEM_LIST" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ItemList;
/** Value: "ITEM_PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ItemPage;
/** Value: "JEWELRY_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_JewelryStore;
/** Value: "JOB_POSTING" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_JobPosting;
/** Value: "LAKE_BODY_OF_WATER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_LakeBodyOfWater;
/** Value: "LANDFORM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Landform;
/** Value: "LANDMARKS_OR_HISTORICAL_BUILDINGS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_LandmarksOrHistoricalBuildings;
/** Value: "LANGUAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Language;
/** Value: "LEGISLATIVE_BUILDING" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_LegislativeBuilding;
/** Value: "LIBRARY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Library;
/** Value: "LIQUOR_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_LiquorStore;
/** Value: "LISTEN_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ListenActionV2;
/** Value: "LITERARY_EVENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_LiteraryEvent;
/** Value: "LOCAL_BUSINESS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_LocalBusiness;
/** Value: "LOCAL_BUSINESS_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_LocalBusinessV2;
/** Value: "LOCAL_PLUS_PHOTO_ALBUM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_LocalPlusPhotoAlbum;
/** Value: "LOCAL_PLUS_PHOTO_ALBUM_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_LocalPlusPhotoAlbumV2;
/** Value: "LOCKSMITH" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Locksmith;
/** Value: "LODGING_BUSINESS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_LodgingBusiness;
/** Value: "MAGAZINE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Magazine;
/** Value: "MAGAZINE_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MagazineV2;
/** Value: "MAP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Map;
/** Value: "MASS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Mass;
/** Value: "MEDIA_OBJECT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MediaObject;
/** Value: "MEDIA_OBJECT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MediaObjectV2;
/** Value: "MEDICAL_CLINIC" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MedicalClinic;
/** Value: "MEDICAL_ORGANIZATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MedicalOrganization;
/** Value: "MENS_CLOTHING_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MensClothingStore;
/** Value: "MIDDLE_SCHOOL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MiddleSchool;
/** Value: "MOBILE_APPLICATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MobileApplication;
/** Value: "MOBILE_APPLICATION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MobileApplicationV2;
/** Value: "MOBILE_PHONE_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MobilePhoneStore;
/** Value: "MOSQUE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Mosque;
/** Value: "MOTEL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Motel;
/** Value: "MOTORCYCLE_DEALER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MotorcycleDealer;
/** Value: "MOTORCYCLE_REPAIR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MotorcycleRepair;
/** Value: "MOUNTAIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Mountain;
/** Value: "MOVIE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Movie;
/** Value: "MOVIE_RENTAL_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MovieRentalStore;
/** Value: "MOVIE_THEATER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MovieTheater;
/** Value: "MOVIE_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MovieV2;
/** Value: "MOVING_COMPANY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MovingCompany;
/** Value: "MUSEUM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Museum;
/** Value: "MUSIC_ALBUM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MusicAlbum;
/** Value: "MUSIC_ALBUM_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MusicAlbumV2;
/** Value: "MUSIC_EVENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MusicEvent;
/** Value: "MUSIC_GROUP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MusicGroup;
/** Value: "MUSIC_GROUP_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MusicGroupV2;
/** Value: "MUSIC_PLAYLIST" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MusicPlaylist;
/** Value: "MUSIC_PLAYLIST_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MusicPlaylistV2;
/** Value: "MUSIC_RECORDING" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MusicRecording;
/** Value: "MUSIC_RECORDING_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MusicRecordingV2;
/** Value: "MUSIC_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MusicStore;
/** Value: "MUSIC_VENUE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MusicVenue;
/** Value: "MUSIC_VIDEO_OBJECT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_MusicVideoObject;
/** Value: "NAIL_SALON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_NailSalon;
/** Value: "NEWS_ARTICLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_NewsArticle;
/** Value: "NEWS_ARTICLE_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_NewsArticleV2;
/**
 *  https://schema.org/NewsMediaOrganization
 *
 *  Value: "NEWS_MEDIA_ORGANIZATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_NewsMediaOrganization;
/** Value: "NIGHT_CLUB" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_NightClub;
/** Value: "NOTARY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Notary;
/** Value: "NUTRITION_INFORMATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_NutritionInformation;
/** Value: "OCEAN_BODY_OF_WATER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_OceanBodyOfWater;
/** Value: "OFFER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Offer;
/** Value: "OFFER_ITEM_CONDITION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_OfferItemCondition;
/** Value: "OFFER_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_OfferV2;
/** Value: "OFFICE_EQUIPMENT_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_OfficeEquipmentStore;
/** Value: "OPTICIAN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Optician;
/** Value: "ORGANIZATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Organization;
/** Value: "ORGANIZATION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_OrganizationV2;
/** Value: "ORGANIZE_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_OrganizeActionV2;
/** Value: "OUTLET_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_OutletStore;
/** Value: "PAINTING" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Painting;
/** Value: "PARK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Park;
/** Value: "PARKING_FACILITY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ParkingFacility;
/** Value: "PAWN_SHOP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PawnShop;
/** Value: "PERFORMING_ARTS_THEATER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PerformingArtsTheater;
/** Value: "PERFORMING_GROUP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PerformingGroup;
/** Value: "PERSON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Person;
/** Value: "PERSON_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PersonV2;
/** Value: "PET_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PetStore;
/** Value: "PHARMACY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Pharmacy;
/** Value: "PHOTOGRAPH" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Photograph;
/** Value: "PHYSICIAN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Physician;
/** Value: "PLACE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Place;
/** Value: "PLACE_OF_WORSHIP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlaceOfWorship;
/** Value: "PLACE_REVIEW" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlaceReview;
/** Value: "PLACE_REVIEW_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlaceReviewV2;
/** Value: "PLACE_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlaceV2;
/** Value: "PLAN_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlanActionV2;
/** Value: "PLAYGROUND" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Playground;
/** Value: "PLAY_MUSIC_ALBUM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlayMusicAlbum;
/** Value: "PLAY_MUSIC_ALBUM_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlayMusicAlbumV2;
/** Value: "PLAY_MUSIC_TRACK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlayMusicTrack;
/** Value: "PLAY_MUSIC_TRACK_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlayMusicTrackV2;
/** Value: "PLAY_OBJECT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlayObjectV2;
/** Value: "PLUMBER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Plumber;
/** Value: "PLUS_AUDIO_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusAudioV2;
/**
 *  EVENT extensions
 *
 *  Value: "PLUS_EVENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusEvent;
/** Value: "PLUS_EVENT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusEventV2;
/** Value: "PLUS_MEDIA_COLLECTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusMediaCollectionV2;
/** Value: "PLUS_MEDIA_OBJECT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusMediaObjectV2;
/** Value: "PLUS_PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusPage;
/** Value: "PLUS_PAGE_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusPageV2;
/** Value: "PLUS_PHOTO" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusPhoto;
/** Value: "PLUS_PHOTO_ALBUM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusPhotoAlbum;
/** Value: "PLUS_PHOTO_ALBUM_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusPhotoAlbumV2;
/** Value: "PLUS_PHOTO_COLLECTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusPhotoCollectionV2;
/** Value: "PLUS_PHOTOS_ADDED_TO_COLLECTION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusPhotosAddedToCollection;
/** Value: "PLUS_PHOTOS_ADDED_TO_COLLECTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusPhotosAddedToCollectionV2;
/** Value: "PLUS_PHOTO_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusPhotoV2;
/**
 *  A Google+ post.
 *
 *  Value: "PLUS_POST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusPost;
/** Value: "PLUS_POST_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusPostV2;
/** Value: "PLUS_RESHARE_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusReshareV2;
/** Value: "PLUS_SOFTWARE_APPLICATION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PlusSoftwareApplicationV2;
/** Value: "POLICE_STATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PoliceStation;
/** Value: "POLL_OPTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PollOptionV2;
/** Value: "POLL_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PollV2;
/** Value: "POND" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Pond;
/** Value: "POSTAL_ADDRESS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PostalAddress;
/** Value: "POSTAL_ADDRESS_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PostalAddressV2;
/** Value: "POST_OFFICE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PostOffice;
/** Value: "PRESCHOOL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Preschool;
/**
 *  CREATIVE_WORK extensions
 *
 *  Value: "PRESENTATION_OBJECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PresentationObject;
/** Value: "PRESENTATION_OBJECT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PresentationObjectV2;
/** Value: "PRODUCT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Product;
/** Value: "PRODUCT_REVIEW" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ProductReview;
/** Value: "PRODUCT_REVIEW_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ProductReviewV2;
/** Value: "PROFESSIONAL_SERVICE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ProfessionalService;
/** Value: "PROFILE_PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ProfilePage;
/** Value: "PUBLIC_SWIMMING_POOL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_PublicSwimmingPool;
/** Value: "QUANTITY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Quantity;
/** Value: "RADIO_STATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_RadioStation;
/** Value: "RATING" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Rating;
/** Value: "RATING_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_RatingV2;
/** Value: "REACT_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ReactActionV2;
/** Value: "REAL_ESTATE_AGENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_RealEstateAgent;
/** Value: "RECIPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Recipe;
/**
 *  A collection of people that have been recommended to a user.
 *
 *  Value: "RECOMMENDED_PEOPLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_RecommendedPeople;
/** Value: "RECYCLING_CENTER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_RecyclingCenter;
/** Value: "RESERVATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Reservation;
/** Value: "RESERVATION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ReservationV2;
/** Value: "RESERVE_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ReserveActionV2;
/** Value: "RESERVOIR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Reservoir;
/** Value: "RESIDENCE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Residence;
/** Value: "RESTAURANT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Restaurant;
/** Value: "REVIEW" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Review;
/** Value: "REVIEW_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ReviewActionV2;
/** Value: "REVIEW_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ReviewV2;
/** Value: "RIVER_BODY_OF_WATER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_RiverBodyOfWater;
/** Value: "ROOFING_CONTRACTOR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_RoofingContractor;
/** Value: "R_V_PARK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_RVPark;
/** Value: "SALE_EVENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SaleEvent;
/** Value: "SCHOLARLY_ARTICLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ScholarlyArticle;
/** Value: "SCHOOL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_School;
/** Value: "SCULPTURE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Sculpture;
/** Value: "SEA_BODY_OF_WATER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SeaBodyOfWater;
/** Value: "SEARCH_RESULTS_PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SearchResultsPage;
/** Value: "SELF_STORAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SelfStorage;
/** Value: "SHOE_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ShoeStore;
/** Value: "SHOPPING_CENTER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ShoppingCenter;
/** Value: "SINGLE_FAMILY_RESIDENCE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SingleFamilyResidence;
/** Value: "SITE_NAVIGATION_ELEMENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SiteNavigationElement;
/** Value: "SKI_RESORT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SkiResort;
/** Value: "SOCIAL_EVENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SocialEvent;
/** Value: "SOFTWARE_APPLICATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SoftwareApplication;
/** Value: "SOFTWARE_APPLICATION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SoftwareApplicationV2;
/** Value: "SPORTING_GOODS_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SportingGoodsStore;
/** Value: "SPORTS_ACTIVITY_LOCATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SportsActivityLocation;
/** Value: "SPORTS_CLUB" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SportsClub;
/** Value: "SPORTS_EVENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SportsEvent;
/** Value: "SPREADSHEET_OBJECT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SpreadsheetObject;
/** Value: "SPREADSHEET_OBJECT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SpreadsheetObjectV2;
/**
 *  NOTE(melchang): These correspond to http://schema.org/WebPage/Community and
 *  http://schema.org/WebPage/CommunityInvite. See b/7653610 for why these are
 *  "SQUARE" and not "COMMUNITY".
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Square;
/** Value: "SQUARE_INVITE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SquareInvite;
/** Value: "SQUARE_INVITE_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SquareInviteV2;
/** Value: "SQUARE_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SquareV2;
/** Value: "STADIUM_OR_ARENA" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_StadiumOrArena;
/** Value: "STATE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_State;
/** Value: "STICKER_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_StickerV2;
/** Value: "STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Store;
/**
 *  Boswell story (see goto/boswell)
 *
 *  Value: "STORY_V2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_StoryV2;
/** Value: "STRUCTURED_VALUE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_StructuredValue;
/** Value: "SUBWAY_STATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_SubwayStation;
/** Value: "SYNAGOGUE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Synagogue;
/** Value: "TABLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Table;
/** Value: "TATTOO_PARLOR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TattooParlor;
/** Value: "TAXI_STAND" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TaxiStand;
/** Value: "TELEVISION_STATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TelevisionStation;
/** Value: "TENNIS_COMPLEX" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TennisComplex;
/** Value: "THEATER_EVENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TheaterEvent;
/**
 *  Embeds V1 types
 *
 *  Value: "THING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Thing;
/** Value: "THING_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ThingV2;
/** Value: "TIRE_SHOP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TireShop;
/** Value: "TOURIST_ATTRACTION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TouristAttraction;
/** Value: "TOURIST_INFORMATION_CENTER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TouristInformationCenter;
/** Value: "TOY_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ToyStore;
/** Value: "TRADE_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TradeActionV2;
/** Value: "TRAIN_STATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TrainStation;
/** Value: "TRAVEL_AGENCY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TravelAgency;
/** Value: "TRAVEL_EVENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TravelEvent;
/** Value: "TV_EPISODE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TvEpisode;
/** Value: "TV_EPISODE_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TvEpisodeV2;
/** Value: "TV_SEASON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TvSeason;
/** Value: "TV_SERIES" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TvSeries;
/** Value: "TV_SERIES_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_TvSeriesV2;
/**
 *  Largely deprecated, effectively an error condition and should not be in
 *  storage.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Unknown;
/** Value: "UPDATE_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_UpdateActionV2;
/**
 *  NOTE(jpanzer): This is a badly designed hierarchy and we should avoid
 *  depending on Event properties inside UserInteractions as much as possible
 *  IMHO.
 *
 *  Value: "USER_INTERACTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_UserInteraction;
/** Value: "USER_PLUS_ONES" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_UserPlusOnes;
/** Value: "VETERINARY_CARE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_VeterinaryCare;
/** Value: "VIDEO_GALLERY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_VideoGallery;
/** Value: "VIDEO_GALLERY_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_VideoGalleryV2;
/** Value: "VIDEO_OBJECT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_VideoObject;
/** Value: "VIDEO_OBJECT_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_VideoObjectV2;
/** Value: "VIEW_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_ViewActionV2;
/** Value: "VISUAL_ARTS_EVENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_VisualArtsEvent;
/** Value: "VOLCANO" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Volcano;
/** Value: "WANT_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_WantActionV2;
/** Value: "WATERFALL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Waterfall;
/** Value: "WEB_APPLICATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_WebApplication;
/** Value: "WEB_PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_WebPage;
/** Value: "WEB_PAGE_ELEMENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_WebPageElement;
/** Value: "WEB_PAGE_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_WebPageV2;
/** Value: "WHOLESALE_STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_WholesaleStore;
/** Value: "WINERY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Winery;
/** Value: "WP_AD_BLOCK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_WpAdBlock;
/** Value: "WP_FOOTER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_WpFooter;
/** Value: "WP_HEADER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_WpHeader;
/** Value: "WP_SIDEBAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_WpSidebar;
/** Value: "WRITE_ACTION_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_WriteActionV2;
/** Value: "YOUTUBE_CHANNEL_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_YoutubeChannelV2;
/** Value: "ZOO" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EmbedClientItem_Type_Zoo;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_EnumPropertyOptions.orderedRanking

/**
 *  This property is ranked in ascending order. Lower values indicate lower
 *  ranking.
 *
 *  Value: "ASCENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EnumPropertyOptions_OrderedRanking_Ascending;
/**
 *  This property is ranked in descending order. Lower values indicate higher
 *  ranking.
 *
 *  Value: "DESCENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EnumPropertyOptions_OrderedRanking_Descending;
/**
 *  There is no ranking order for the property. Results aren't adjusted by this
 *  property's value.
 *
 *  Value: "NO_ORDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_EnumPropertyOptions_OrderedRanking_NoOrder;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_FormAction.loadIndicator

/** Value: "NONE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_FormAction_LoadIndicator_None;
/** Value: "SPINNER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_FormAction_LoadIndicator_Spinner;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_FormatMetadata.formatType

/** Value: "BOLD" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_FormatMetadata_FormatType_Bold;
/**
 *  Encloses BULLETED_LIST_ITEM annotations.
 *
 *  Value: "BULLETED_LIST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_FormatMetadata_FormatType_BulletedList;
/**
 *  Must cover the whole line including the newline
 *
 *  Value: "BULLETED_LIST_ITEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_FormatMetadata_FormatType_BulletedListItem;
/**
 *  character at the end. Not used anymore.
 *
 *  Value: "CLIENT_HIDDEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_FormatMetadata_FormatType_ClientHidden;
/** Value: "FONT_COLOR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_FormatMetadata_FormatType_FontColor;
/** Value: "HIDDEN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_FormatMetadata_FormatType_Hidden;
/** Value: "ITALIC" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_FormatMetadata_FormatType_Italic;
/**
 *  Inline monospace.
 *
 *  Value: "MONOSPACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_FormatMetadata_FormatType_Monospace;
/**
 *  Multi-line monospace block.
 *
 *  Value: "MONOSPACE_BLOCK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_FormatMetadata_FormatType_MonospaceBlock;
/** Value: "SOURCE_CODE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_FormatMetadata_FormatType_SourceCode;
/** Value: "STRIKE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_FormatMetadata_FormatType_Strike;
/**
 *  Default value for the enum.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_FormatMetadata_FormatType_TypeUnspecified;
/** Value: "UNDERLINE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_FormatMetadata_FormatType_Underline;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Formatting.style

/**
 *  The most important heading to the least important heading.
 *
 *  Value: "HEADING_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Formatting_Style_Heading1;
/** Value: "HEADING_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Formatting_Style_Heading2;
/** Value: "HEADING_3" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Formatting_Style_Heading3;
/** Value: "HEADING_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Formatting_Style_Heading4;
/**
 *  This represents a style that is unknown (e.g. a new style was introduced but
 *  not supported by older mobile app versions) and should generally not be used
 *  as a value in a proto. If the segment does not need to be rendered with a
 *  special style, the 'style' field should simply be left unset. A reasonable
 *  fallback for an unknown style is to render the segment in the default style.
 *
 *  Value: "UNKNOWN_STYLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Formatting_Style_UnknownStyle;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardCardHeader.imageStyle

/**
 *  Circular border.
 *
 *  Value: "AVATAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardCardHeader_ImageStyle_Avatar;
/**
 *  Square border.
 *
 *  Value: "IMAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardCardHeader_ImageStyle_Image;
/** Value: "IMAGE_STYLE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardCardHeader_ImageStyle_ImageStyleUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton.icon

/** Value: "AIRPLANE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Airplane;
/** Value: "BOOKMARK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Bookmark;
/** Value: "BUS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Bus;
/** Value: "CAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Car;
/** Value: "CLOCK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Clock;
/** Value: "CONFIRMATION_NUMBER_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_ConfirmationNumberIcon;
/** Value: "DESCRIPTION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Description;
/** Value: "DOLLAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Dollar;
/** Value: "EMAIL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Email;
/** Value: "EVENT_PERFORMER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_EventPerformer;
/** Value: "EVENT_SEAT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_EventSeat;
/** Value: "FLIGHT_ARRIVAL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_FlightArrival;
/** Value: "FLIGHT_DEPARTURE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_FlightDeparture;
/** Value: "HOTEL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Hotel;
/** Value: "HOTEL_ROOM_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_HotelRoomType;
/** Value: "ICON_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_IconUnspecified;
/** Value: "INVITE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Invite;
/** Value: "MAP_PIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_MapPin;
/** Value: "MEMBERSHIP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Membership;
/** Value: "MULTIPLE_PEOPLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_MultiplePeople;
/** Value: "OFFER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Offer;
/** Value: "PERSON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Person;
/** Value: "PHONE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Phone;
/** Value: "RESTAURANT_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_RestaurantIcon;
/** Value: "SHOPPING_CART" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_ShoppingCart;
/** Value: "STAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Star;
/** Value: "STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Store;
/** Value: "TICKET" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Ticket;
/** Value: "TRAIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Train;
/** Value: "VIDEO_CAMERA" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_VideoCamera;
/** Value: "VIDEO_PLAY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_VideoPlay;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue.icon

/** Value: "AIRPLANE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Airplane;
/** Value: "BOOKMARK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Bookmark;
/** Value: "BUS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Bus;
/** Value: "CAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Car;
/** Value: "CLOCK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Clock;
/** Value: "CONFIRMATION_NUMBER_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_ConfirmationNumberIcon;
/** Value: "DESCRIPTION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Description;
/** Value: "DOLLAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Dollar;
/** Value: "EMAIL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Email;
/** Value: "EVENT_PERFORMER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_EventPerformer;
/** Value: "EVENT_SEAT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_EventSeat;
/** Value: "FLIGHT_ARRIVAL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_FlightArrival;
/** Value: "FLIGHT_DEPARTURE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_FlightDeparture;
/** Value: "HOTEL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Hotel;
/** Value: "HOTEL_ROOM_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_HotelRoomType;
/** Value: "ICON_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_IconUnspecified;
/** Value: "INVITE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Invite;
/** Value: "MAP_PIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_MapPin;
/** Value: "MEMBERSHIP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Membership;
/** Value: "MULTIPLE_PEOPLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_MultiplePeople;
/** Value: "OFFER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Offer;
/** Value: "PERSON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Person;
/** Value: "PHONE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Phone;
/** Value: "RESTAURANT_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_RestaurantIcon;
/** Value: "SHOPPING_CART" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_ShoppingCart;
/** Value: "STAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Star;
/** Value: "STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Store;
/** Value: "TICKET" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Ticket;
/** Value: "TRAIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Train;
/** Value: "VIDEO_CAMERA" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_VideoCamera;
/** Value: "VIDEO_PLAY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_VideoPlay;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_GoogleDocsMetadata.documentType

/**
 *  Fall-back for unknown Gdrive types.
 *
 *  Value: "BINARY_BLOB"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_BinaryBlob;
/**
 *  Writely, Word, etc.
 *
 *  Value: "DOCUMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Document;
/**
 *  For Atari page and site drafts
 *
 *  Value: "DRAFT_SITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_DraftSite;
/** Value: "DRAFT_SITE_PAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_DraftSitePage;
/** Value: "DRAWING" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Drawing;
/** Value: "FOLDER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Folder;
/** Value: "FORM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Form;
/** Value: "FUSION_TABLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_FusionTable;
/** Value: "IMAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Image;
/**
 *  Jamboard Jams (go/jam)
 *
 *  Value: "JAM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Jam;
/**
 *  File types for Gdrive objects are below.
 *
 *  Value: "PDF"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Pdf;
/**
 *  Presently, PowerPoint, etc.
 *
 *  Value: "PRESENTATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Presentation;
/** Value: "SCRIPT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Script;
/**
 *  Drive Shortcuts (go/shortcuts)
 *
 *  Value: "SHORTCUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Shortcut;
/**
 *  Trix, Excel, etc.
 *
 *  Value: "SPREADSHEET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Spreadsheet;
/**
 *  If the type is unknown or not represented in this enum.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Unknown;
/** Value: "VIDEO" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Video;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_GridItem.layout

/** Value: "NOT_SET" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GridItem_Layout_NotSet;
/**
 *  The title and subtitle are shown above the grid item's image.
 *
 *  Value: "TEXT_ABOVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GridItem_Layout_TextAbove;
/**
 *  The title and subtitle are shown below the grid item's image.
 *
 *  Value: "TEXT_BELOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GridItem_Layout_TextBelow;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_GridItem.textAlignment

/** Value: "CENTER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GridItem_TextAlignment_Center;
/** Value: "END" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GridItem_TextAlignment_End;
/** Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GridItem_TextAlignment_HorizontalAlignmentUnspecified;
/** Value: "START" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GridItem_TextAlignment_Start;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_GroupLinkSharingModificationEvent.newStatus

/**
 *  Link sharing is turned off.
 *
 *  Value: "LINK_SHARING_OFF"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GroupLinkSharingModificationEvent_NewStatus_LinkSharingOff;
/**
 *  Link sharing is turned on.
 *
 *  Value: "LINK_SHARING_ON"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GroupLinkSharingModificationEvent_NewStatus_LinkSharingOn;
/**
 *  Link sharing is not available for the conversation.
 *
 *  Value: "NOT_AVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GroupLinkSharingModificationEvent_NewStatus_NotAvailable;
/** Value: "UNKNOWN_LINK_SHARING_STATUS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GroupLinkSharingModificationEvent_NewStatus_UnknownLinkSharingStatus;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_GsuiteIntegrationMetadata.clientType

/** Value: "ACTIVITY_FEED_SERVICE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GsuiteIntegrationMetadata_ClientType_ActivityFeedService;
/** Value: "ASSISTANT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GsuiteIntegrationMetadata_ClientType_Assistant;
/** Value: "CALENDAR_EVENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GsuiteIntegrationMetadata_ClientType_CalendarEvent;
/** Value: "MEET" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GsuiteIntegrationMetadata_ClientType_Meet;
/** Value: "TASKS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GsuiteIntegrationMetadata_ClientType_Tasks;
/** Value: "UNKNOWN_CLIENT_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_GsuiteIntegrationMetadata_ClientType_UnknownClientType;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_HangoutEvent.mediaType

/** Value: "AUDIO_ONLY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_HangoutEvent_MediaType_AudioOnly;
/** Value: "AUDIO_VIDEO" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_HangoutEvent_MediaType_AudioVideo;
/**
 *  A user has started a PTT broadcast. When receiving a notification with this
 *  HangoutMediaType, other users in the conversation will take different
 *  actions depending on their active clients: a) If there is a recent
 *  "reasonable" active client, the user will join hangout and play audio. b) If
 *  there is no "reasonable" active client an invite will be displayed on all
 *  clients.
 *
 *  Value: "PUSH_TO_TALK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_HangoutEvent_MediaType_PushToTalk;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_HangoutEvent.type

/** Value: "END_HANGOUT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_HangoutEvent_Type_EndHangout;
/** Value: "HANGOUT_COMING_SOON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_HangoutEvent_Type_HangoutComingSoon;
/** Value: "JOIN_HANGOUT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_HangoutEvent_Type_JoinHangout;
/** Value: "LEAVE_HANGOUT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_HangoutEvent_Type_LeaveHangout;
/** Value: "ONGOING_HANGOUT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_HangoutEvent_Type_OngoingHangout;
/** Value: "START_HANGOUT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_HangoutEvent_Type_StartHangout;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_HangoutVideoEventMetadata.hangoutVideoType

/** Value: "UNKNOWN_HANGOUT_VIDEO_EVENT_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_HangoutVideoEventMetadata_HangoutVideoType_UnknownHangoutVideoEventType;
/** Value: "VIDEO_END" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_HangoutVideoEventMetadata_HangoutVideoType_VideoEnd;
/** Value: "VIDEO_START" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_HangoutVideoEventMetadata_HangoutVideoType_VideoStart;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_IconImage.icon

/** Value: "AIRPLANE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Airplane;
/** Value: "BOOKMARK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Bookmark;
/** Value: "BUS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Bus;
/** Value: "CAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Car;
/** Value: "CLOCK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Clock;
/** Value: "CONFIRMATION_NUMBER_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_ConfirmationNumberIcon;
/** Value: "DESCRIPTION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Description;
/** Value: "DOLLAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Dollar;
/** Value: "EDIT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Edit;
/** Value: "EDIT_NOTE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_EditNote;
/** Value: "EMAIL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Email;
/** Value: "EVENT_PERFORMER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_EventPerformer;
/** Value: "EVENT_SEAT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_EventSeat;
/** Value: "FLIGHT_ARRIVAL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_FlightArrival;
/** Value: "FLIGHT_DEPARTURE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_FlightDeparture;
/** Value: "HOTEL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Hotel;
/** Value: "HOTEL_ROOM_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_HotelRoomType;
/** Value: "INVITE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Invite;
/** Value: "MAP_PIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_MapPin;
/** Value: "MEMBERSHIP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Membership;
/** Value: "MULTIPLE_PEOPLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_MultiplePeople;
/** Value: "NONE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_None;
/** Value: "OFFER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Offer;
/** Value: "OPEN_IN_NEW" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_OpenInNew;
/** Value: "PERSON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Person;
/** Value: "PHONE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Phone;
/** Value: "RESTAURANT_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_RestaurantIcon;
/** Value: "SHOPPING_CART" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_ShoppingCart;
/** Value: "STAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Star;
/** Value: "STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Store;
/** Value: "TICKET" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Ticket;
/** Value: "TRAIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_Train;
/** Value: "VIDEO_CAMERA" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_VideoCamera;
/**
 *  Add new items in alphabetical order. Next Available ID: 34
 *
 *  Value: "VIDEO_PLAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_Icon_VideoPlay;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_IconImage.imageStyle

/**
 *  Applies a circular crop.
 *
 *  Value: "CIRCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_ImageStyle_Circle;
/**
 *  No value specified.
 *
 *  Value: "CROP_TYPE_NOT_SET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_ImageStyle_CropTypeNotSet;
/**
 *  Applies a rectangular crop with a 4:3 aspect ratio.
 *
 *  Value: "RECTANGLE_4_3"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_ImageStyle_Rectangle43;
/**
 *  Applies a rectangular crop with a custom aspect ratio.
 *
 *  Value: "RECTANGLE_CUSTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_ImageStyle_RectangleCustom;
/**
 *  Applies a square crop.
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IconImage_ImageStyle_Square;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_ImageButton.icon

/** Value: "AIRPLANE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Airplane;
/** Value: "BOOKMARK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Bookmark;
/** Value: "BUS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Bus;
/** Value: "CAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Car;
/** Value: "CLOCK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Clock;
/** Value: "CONFIRMATION_NUMBER_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_ConfirmationNumberIcon;
/** Value: "DESCRIPTION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Description;
/** Value: "DOLLAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Dollar;
/** Value: "EDIT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Edit;
/** Value: "EDIT_NOTE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_EditNote;
/** Value: "EMAIL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Email;
/** Value: "EVENT_PERFORMER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_EventPerformer;
/** Value: "EVENT_SEAT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_EventSeat;
/** Value: "FLIGHT_ARRIVAL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_FlightArrival;
/** Value: "FLIGHT_DEPARTURE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_FlightDeparture;
/** Value: "HOTEL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Hotel;
/** Value: "HOTEL_ROOM_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_HotelRoomType;
/** Value: "INVITE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Invite;
/** Value: "MAP_PIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_MapPin;
/** Value: "MEMBERSHIP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Membership;
/** Value: "MULTIPLE_PEOPLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_MultiplePeople;
/** Value: "NONE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_None;
/** Value: "OFFER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Offer;
/** Value: "OPEN_IN_NEW" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_OpenInNew;
/** Value: "PERSON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Person;
/** Value: "PHONE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Phone;
/** Value: "RESTAURANT_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_RestaurantIcon;
/** Value: "SHOPPING_CART" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_ShoppingCart;
/** Value: "STAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Star;
/** Value: "STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Store;
/** Value: "TICKET" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Ticket;
/** Value: "TRAIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_Train;
/** Value: "VIDEO_CAMERA" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_VideoCamera;
/**
 *  Add new items in alphabetical order. Next Available ID: 34
 *
 *  Value: "VIDEO_PLAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageButton_Icon_VideoPlay;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_ImageCropStyle.type

/**
 *  Applies a circular crop.
 *
 *  Value: "CIRCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageCropStyle_Type_Circle;
/**
 *  No value specified.
 *
 *  Value: "CROP_TYPE_NOT_SET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageCropStyle_Type_CropTypeNotSet;
/**
 *  Applies a rectangular crop with a 4:3 aspect ratio.
 *
 *  Value: "RECTANGLE_4_3"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageCropStyle_Type_Rectangle43;
/**
 *  Applies a rectangular crop with a custom aspect ratio.
 *
 *  Value: "RECTANGLE_CUSTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageCropStyle_Type_RectangleCustom;
/**
 *  Applies a square crop.
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageCropStyle_Type_Square;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_ImageKeyValue.icon

/** Value: "AIRPLANE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Airplane;
/** Value: "BOOKMARK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Bookmark;
/** Value: "BUS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Bus;
/** Value: "CAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Car;
/** Value: "CLOCK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Clock;
/** Value: "CONFIRMATION_NUMBER_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_ConfirmationNumberIcon;
/** Value: "DESCRIPTION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Description;
/** Value: "DOLLAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Dollar;
/** Value: "EDIT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Edit;
/** Value: "EDIT_NOTE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_EditNote;
/** Value: "EMAIL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Email;
/** Value: "EVENT_PERFORMER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_EventPerformer;
/** Value: "EVENT_SEAT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_EventSeat;
/** Value: "FLIGHT_ARRIVAL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_FlightArrival;
/** Value: "FLIGHT_DEPARTURE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_FlightDeparture;
/** Value: "HOTEL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Hotel;
/** Value: "HOTEL_ROOM_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_HotelRoomType;
/** Value: "INVITE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Invite;
/** Value: "MAP_PIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_MapPin;
/** Value: "MEMBERSHIP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Membership;
/** Value: "MULTIPLE_PEOPLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_MultiplePeople;
/** Value: "NONE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_None;
/** Value: "OFFER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Offer;
/** Value: "OPEN_IN_NEW" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_OpenInNew;
/** Value: "PERSON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Person;
/** Value: "PHONE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Phone;
/** Value: "RESTAURANT_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_RestaurantIcon;
/** Value: "SHOPPING_CART" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_ShoppingCart;
/** Value: "STAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Star;
/** Value: "STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Store;
/** Value: "TICKET" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Ticket;
/** Value: "TRAIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_Train;
/** Value: "VIDEO_CAMERA" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_VideoCamera;
/**
 *  Add new items in alphabetical order. Next Available ID: 34
 *
 *  Value: "VIDEO_PLAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ImageKeyValue_Icon_VideoPlay;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_IncomingWebhookChangedMetadata.type

/** Value: "ADDED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IncomingWebhookChangedMetadata_Type_Added;
/** Value: "REMOVED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IncomingWebhookChangedMetadata_Type_Removed;
/** Value: "UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IncomingWebhookChangedMetadata_Type_Unspecified;
/**
 *  TODO (b/154857280): remove UPDATED field.
 *
 *  Value: "UPDATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IncomingWebhookChangedMetadata_Type_Updated;
/** Value: "UPDATED_AVATAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IncomingWebhookChangedMetadata_Type_UpdatedAvatar;
/** Value: "UPDATED_NAME" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IncomingWebhookChangedMetadata_Type_UpdatedName;
/** Value: "UPDATED_NAME_AND_AVATAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IncomingWebhookChangedMetadata_Type_UpdatedNameAndAvatar;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_IndexItemRequest.mode

/**
 *  For changes that are executed after the response is sent back to the caller.
 *
 *  Value: "ASYNCHRONOUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IndexItemRequest_Mode_Asynchronous;
/**
 *  For real-time updates.
 *
 *  Value: "SYNCHRONOUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IndexItemRequest_Mode_Synchronous;
/**
 *  The priority is not specified in the update request. Leaving priority
 *  unspecified results in an update failure.
 *
 *  Value: "UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IndexItemRequest_Mode_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_InsertContent.contentType

/**
 *  Specifies that the content is in HTML and is immutable (cannot be edited).
 *
 *  Value: "IMMUTABLE_HTML"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_InsertContent_ContentType_ImmutableHtml;
/**
 *  Specifies that the content is in HTML and is mutable (can be edited).
 *
 *  Value: "MUTABLE_HTML"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_InsertContent_ContentType_MutableHtml;
/**
 *  Specifies that the content is in plain text.
 *
 *  Value: "TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_InsertContent_ContentType_Text;
/**
 *  Default value when nothing is set for ContentType.
 *
 *  Value: "UNSPECIFIED_CONTENT_TYPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_InsertContent_ContentType_UnspecifiedContentType;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_InsertContent.mimeType

/**
 *  Specifies that the inserted content is in HTML.
 *
 *  Value: "HTML"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_InsertContent_MimeType_Html;
/**
 *  Specifies that the inserted content is in plain text.
 *
 *  Value: "PLAIN_TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_InsertContent_MimeType_PlainText;
/**
 *  Default value when nothing is set for EmailMimeType.
 *
 *  Value: "UNSPECIFIED_EMAIL_MIME_TYPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_InsertContent_MimeType_UnspecifiedEmailMimeType;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_IntegerPropertyOptions.orderedRanking

/**
 *  This property is ranked in ascending order. Lower values indicate lower
 *  ranking.
 *
 *  Value: "ASCENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IntegerPropertyOptions_OrderedRanking_Ascending;
/**
 *  This property is ranked in descending order. Lower values indicate higher
 *  ranking.
 *
 *  Value: "DESCENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IntegerPropertyOptions_OrderedRanking_Descending;
/**
 *  There is no ranking order for the property. Results are not adjusted by this
 *  property's value.
 *
 *  Value: "NO_ORDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_IntegerPropertyOptions_OrderedRanking_NoOrder;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Interaction.type

/**
 *  This interaction indicates the user edited the item.
 *
 *  Value: "EDIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Interaction_Type_Edit;
/**
 *  Invalid value.
 *
 *  Value: "UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Interaction_Type_Unspecified;
/**
 *  This interaction indicates the user viewed the item.
 *
 *  Value: "VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Interaction_Type_View;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Item.itemType

/**
 *  An item that gets indexed and whose purpose is to supply other items with
 *  ACLs and/or contain other items.
 *
 *  Value: "CONTAINER_ITEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Item_ItemType_ContainerItem;
/**
 *  An item that is indexed for the only purpose of serving information. These
 *  items cannot be referred in containerName or inheritAclFrom fields.
 *
 *  Value: "CONTENT_ITEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Item_ItemType_ContentItem;
/** Value: "UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Item_ItemType_Unspecified;
/**
 *  An item that does not get indexed, but otherwise has the same purpose as
 *  CONTAINER_ITEM.
 *
 *  Value: "VIRTUAL_CONTAINER_ITEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Item_ItemType_VirtualContainerItem;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_ItemAcl.aclInheritanceType

/**
 *  Access is granted only if this item and the parent item specified in the
 *  inheritAclFrom field both permit read access.
 *
 *  Value: "BOTH_PERMIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemAcl_AclInheritanceType_BothPermit;
/**
 *  During an authorization conflict, the ACL of the child item determines its
 *  read access.
 *
 *  Value: "CHILD_OVERRIDE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemAcl_AclInheritanceType_ChildOverride;
/**
 *  The default value when this item does not inherit an ACL. Use NOT_APPLICABLE
 *  when inheritAclFrom is empty. An item without ACL inheritance can still have
 *  ACLs supplied by its own readers and deniedReaders fields.
 *
 *  Value: "NOT_APPLICABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemAcl_AclInheritanceType_NotApplicable;
/**
 *  During an authorization conflict, the ACL of the parent item specified in
 *  the inheritAclFrom field determines read access.
 *
 *  Value: "PARENT_OVERRIDE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemAcl_AclInheritanceType_ParentOverride;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_ItemContent.contentFormat

/**
 *  contentFormat is HTML.
 *
 *  Value: "HTML"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemContent_ContentFormat_Html;
/**
 *  contentFormat is raw bytes.
 *
 *  Value: "RAW"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemContent_ContentFormat_Raw;
/**
 *  contentFormat is free text.
 *
 *  Value: "TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemContent_ContentFormat_Text;
/**
 *  Invalid value.
 *
 *  Value: "UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemContent_ContentFormat_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_ItemCountByStatus.statusCode

/**
 *  API has accepted the up-to-date data of this item.
 *
 *  Value: "ACCEPTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemCountByStatus_StatusCode_Accepted;
/**
 *  Input-only value. Used with Items.list to list all items in the queue,
 *  regardless of status.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemCountByStatus_StatusCode_CodeUnspecified;
/**
 *  Error encountered by Cloud Search while processing this item. Details of the
 *  error are in repositoryError.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemCountByStatus_StatusCode_Error;
/**
 *  Item has been modified in the repository, and is out of date with the
 *  version previously accepted into Cloud Search.
 *
 *  Value: "MODIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemCountByStatus_StatusCode_Modified;
/**
 *  Item is known to exist in the repository, but is not yet accepted by Cloud
 *  Search. An item can be in this state when Items.push has been called for an
 *  item of this name that did not exist previously.
 *
 *  Value: "NEW_ITEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemCountByStatus_StatusCode_NewItem;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_ItemStatus.code

/**
 *  API has accepted the up-to-date data of this item.
 *
 *  Value: "ACCEPTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemStatus_Code_Accepted;
/**
 *  Input-only value. Used with Items.list to list all items in the queue,
 *  regardless of status.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemStatus_Code_CodeUnspecified;
/**
 *  Error encountered by Cloud Search while processing this item. Details of the
 *  error are in repositoryError.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemStatus_Code_Error;
/**
 *  Item has been modified in the repository, and is out of date with the
 *  version previously accepted into Cloud Search.
 *
 *  Value: "MODIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemStatus_Code_Modified;
/**
 *  Item is known to exist in the repository, but is not yet accepted by Cloud
 *  Search. An item can be in this state when Items.push has been called for an
 *  item of this name that did not exist previously.
 *
 *  Value: "NEW_ITEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ItemStatus_Code_NewItem;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_KeyValue.icon

/** Value: "AIRPLANE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Airplane;
/** Value: "BOOKMARK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Bookmark;
/** Value: "BUS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Bus;
/** Value: "CAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Car;
/** Value: "CLOCK" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Clock;
/** Value: "CONFIRMATION_NUMBER_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_ConfirmationNumberIcon;
/** Value: "DESCRIPTION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Description;
/** Value: "DOLLAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Dollar;
/** Value: "EDIT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Edit;
/** Value: "EDIT_NOTE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_EditNote;
/** Value: "EMAIL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Email;
/** Value: "EVENT_PERFORMER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_EventPerformer;
/** Value: "EVENT_SEAT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_EventSeat;
/** Value: "FLIGHT_ARRIVAL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_FlightArrival;
/** Value: "FLIGHT_DEPARTURE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_FlightDeparture;
/** Value: "HOTEL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Hotel;
/** Value: "HOTEL_ROOM_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_HotelRoomType;
/** Value: "INVITE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Invite;
/** Value: "MAP_PIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_MapPin;
/** Value: "MEMBERSHIP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Membership;
/** Value: "MULTIPLE_PEOPLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_MultiplePeople;
/** Value: "NONE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_None;
/** Value: "OFFER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Offer;
/** Value: "OPEN_IN_NEW" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_OpenInNew;
/** Value: "PERSON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Person;
/** Value: "PHONE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Phone;
/** Value: "RESTAURANT_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_RestaurantIcon;
/** Value: "SHOPPING_CART" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_ShoppingCart;
/** Value: "STAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Star;
/** Value: "STORE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Store;
/** Value: "TICKET" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Ticket;
/** Value: "TRAIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_Train;
/** Value: "VIDEO_CAMERA" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_VideoCamera;
/**
 *  Add new items in alphabetical order. Next Available ID: 34
 *
 *  Value: "VIDEO_PLAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_Icon_VideoPlay;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_KeyValue.imageStyle

/**
 *  Applies a circular crop.
 *
 *  Value: "CIRCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_ImageStyle_Circle;
/**
 *  No value specified.
 *
 *  Value: "CROP_TYPE_NOT_SET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_ImageStyle_CropTypeNotSet;
/**
 *  Applies a rectangular crop with a 4:3 aspect ratio.
 *
 *  Value: "RECTANGLE_4_3"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_ImageStyle_Rectangle43;
/**
 *  Applies a rectangular crop with a custom aspect ratio.
 *
 *  Value: "RECTANGLE_CUSTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_ImageStyle_RectangleCustom;
/**
 *  Applies a square crop.
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_KeyValue_ImageStyle_Square;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_LinkData.attachmentRenderHint

/**
 *  Render any associated attachment at the end of the block, after all sibling
 *  Segments. Leave the link in place in the text and render it normally as
 *  well.
 *
 *  Value: "ATTACHMENT_RENDER_HINT_AFTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_LinkData_AttachmentRenderHint_AttachmentRenderHintAfter;
/**
 *  Render any associated attachment inline in the text in place of the link
 *  text, forcing a line break before and after the attachment so the text and
 *  the attachment are "interleaved". If this is not possible, render as if
 *  AFTER.
 *
 *  Value: "ATTACHMENT_RENDER_HINT_INTERLEAVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_LinkData_AttachmentRenderHint_AttachmentRenderHintInterleaved;
/**
 *  No rendering hint; should not be used (equivalent to having no hint)
 *
 *  Value: "ATTACHMENT_RENDER_HINT_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_LinkData_AttachmentRenderHint_AttachmentRenderHintUnknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_LinkData.linkType

/**
 *  This indicates that the link target points to the same object related to
 *  this segment. Example: A YouTube link with text="0.07" and link_target:
 *  "https://www.youtube.com/watch?v=leHVmSqd4_w&t=0m07s" points to the same
 *  YouTube video where this segment appears. See
 *  http://go/ignore-badwords-filtering-for-selflink for adding link_type design
 *  document.
 *
 *  Value: "SELF_LINK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_LinkData_LinkType_SelfLink;
/**
 *  No link type specified.
 *
 *  Value: "UNKNOWN_LINK_TYPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_LinkData_LinkType_UnknownLinkType;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_MeetingSpace.acceptedNumberClass

/**
 *  The number has a high cost to receive calls on.
 *
 *  Value: "HIGH_COST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MeetingSpace_AcceptedNumberClass_HighCost;
/**
 *  Class for legacy numbers.
 *
 *  Value: "LEGACY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MeetingSpace_AcceptedNumberClass_Legacy;
/**
 *  The number has a low cost to receive calls on.
 *
 *  Value: "LOW_COST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MeetingSpace_AcceptedNumberClass_LowCost;
/**
 *  No number class has been specified.
 *
 *  Value: "NUMBER_CLASS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MeetingSpace_AcceptedNumberClass_NumberClassUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_MembershipChangedMetadata.initiatorType

/** Value: "INITIATOR_TYPE_ADMIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangedMetadata_InitiatorType_InitiatorTypeAdmin;
/** Value: "INITIATOR_TYPE_END_USER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangedMetadata_InitiatorType_InitiatorTypeEndUser;
/** Value: "INITIATOR_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangedMetadata_InitiatorType_InitiatorTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_MembershipChangedMetadata.type

/**
 *  Non-member -> Member. Multiple users.
 *
 *  Value: "ADDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangedMetadata_Type_Added;
/**
 *  Bot added to the room.
 *
 *  Value: "BOT_ADDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangedMetadata_Type_BotAdded;
/**
 *  Bot removed from the room.
 *
 *  Value: "BOT_REMOVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangedMetadata_Type_BotRemoved;
/**
 *  Non-member -> Can join. Multiple groups and users.
 *
 *  Value: "INVITED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangedMetadata_Type_Invited;
/**
 *  Can join -> Member. One user.
 *
 *  Value: "JOINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangedMetadata_Type_Joined;
/**
 *  This signifies the user is kicked because the user's OTR policy is
 *  conflicted with the room history settings. Joined -> Non-member. One user.
 *
 *  Value: "KICKED_DUE_TO_OTR_CONFLICT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangedMetadata_Type_KickedDueToOtrConflict;
/**
 *  Member -> Can join. One user.
 *
 *  Value: "LEFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangedMetadata_Type_Left;
/**
 *  Can join -> Non-member. One group or user.
 *
 *  Value: "REMOVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangedMetadata_Type_Removed;
/**
 *  The room is now joinable by an
 *
 *  Value: "ROLE_TARGET_AUDIENCE_UPDATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangedMetadata_Type_RoleTargetAudienceUpdated;
/**
 *  MembershipRole changed. Multiple users.
 *
 *  Value: "ROLE_UPDATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangedMetadata_Type_RoleUpdated;
/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangedMetadata_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_MembershipChangeEvent.leaveReason

/** Value: "FORCE_HISTORY_POLICY_CHANGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangeEvent_LeaveReason_ForceHistoryPolicyChange;
/** Value: "LEAVE_REASON_UNKNOWN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangeEvent_LeaveReason_LeaveReasonUnknown;
/** Value: "USER_INITIATED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangeEvent_LeaveReason_UserInitiated;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_MembershipChangeEvent.type

/** Value: "JOIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangeEvent_Type_Join;
/** Value: "LEAVE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MembershipChangeEvent_Type_Leave;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Message.deletableBy

/**
 *  Only the creator of an entity can mutate it.
 *
 *  Value: "PERMISSION_CREATOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DeletableBy_PermissionCreator;
/**
 *  Every human member of a space or the creator can mutate the entity.
 *
 *  Value: "PERMISSION_MEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DeletableBy_PermissionMember;
/**
 *  No one can mutate the entity.
 *
 *  Value: "PERMISSION_NO_ONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DeletableBy_PermissionNoOne;
/**
 *  Default case, should never be used. If this data is encountered in the DB
 *  any request should throw an exception.
 *
 *  Value: "PERMISSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DeletableBy_PermissionUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Message.dlpScanOutcome

/**
 *  Rule fetch completed and evaluation were attempted, but all of the rules
 *  failed to be evaluated.
 *
 *  Value: "SCAN_FAILURE_ALL_RULES_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanFailureAllRulesFailed;
/**
 *  Rule fetch and evaluation were attempted but an exception occurred.
 *
 *  Value: "SCAN_FAILURE_EXCEPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanFailureException;
/**
 *  An IllegalStateException is thrown when executing DLP on attachments. This
 *  could happen if the space row is missing.
 *
 *  Value: "SCAN_FAILURE_ILLEGAL_STATE_FOR_ATTACHMENTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanFailureIllegalStateForAttachments;
/**
 *  Rule fetch and evaluation were attempted but the scanning timed out.
 *
 *  Value: "SCAN_FAILURE_TIMEOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanFailureTimeout;
/**
 *  Rule fetch happened, but rule evaluation is skipped because Changeling
 *  returned an empty response while converting the attachment to text.
 *
 *  Value: "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_EMPTY_RESPONSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanRuleEvaluationSkippedChangelingEmptyResponse;
/**
 *  Rule fetch happened, but rule evaluation is skipped because Changeling
 *  returned permanent failure while converting the attachment to text.
 *
 *  Value: "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_PERMANENT_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanRuleEvaluationSkippedChangelingPermanentError;
/**
 *  Rule fetch happened, but rule evaluation is skipped because none of the
 *  rules are applicable to the given action params.
 *
 *  Value: "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_ACTION_PARAMS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanRuleEvaluationSkippedNoApplicableRulesForActionParams;
/**
 *  Rule fetch happened, but rule evaluation is skipped because none of the
 *  rules are applicable to the given trigger.
 *
 *  Value: "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_TRIGGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanRuleEvaluationSkippedNoApplicableRulesForTrigger;
/**
 *  Rule fetch happened, but rule evaluation is skipped because no rules were
 *  found.
 *
 *  Value: "SCAN_RULE_EVALUATION_SKIPPED_NO_RULES_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanRuleEvaluationSkippedNoRulesFound;
/**
 *  Rule fetch and evaluation are skipped because the user sending message is
 *  consumer.
 *
 *  Value: "SCAN_SKIPPED_CONSUMER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanSkippedConsumer;
/**
 *  Rule fetch and evaluation is skipped because DLP is not enabled for the
 *  user.
 *
 *  Value: "SCAN_SKIPPED_EXPERIMENT_DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanSkippedExperimentDisabled;
/**
 *  Scanning was skipped because the message originated from Interop or Babel.
 *
 *  Value: "SCAN_SKIPPED_MESSAGE_FROM_UNSUPPORTED_ORIGIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanSkippedMessageFromUnsupportedOrigin;
/**
 *  Rule fetch and evaluation are skipped because there is no message to scan.
 *  Deprecated: this should not happen since there must be message or attachment
 *  for DLP scan.
 *
 *  Value: "SCAN_SKIPPED_NO_MESSAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanSkippedNoMessage;
/**
 *  Rule fetch and evaluation are skipped because the user sending message is a
 *  non-human user (i.e. a bot).
 *
 *  Value: "SCAN_SKIPPED_NON_HUMAN_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanSkippedNonHumanUser;
/**
 *  Rule fetch and evaluation are skipped because the user has acknowledged the
 *  warning on the message that triggered the Warn violation and sent the
 *  message anyway.
 *
 *  Value: "SCAN_SKIPPED_USER_ACKNOWLEDGED_WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanSkippedUserAcknowledgedWarning;
/**
 *  Violation is detected and will be logged to BIP (no user-facing action
 *  performed).
 *
 *  Value: "SCAN_SUCCEEDED_AUDIT_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanSucceededAuditOnly;
/**
 *  Violation is detected. The message/attachment will be blocked (or deleted if
 *  this happens in failure recovery), the user will be warned, and the
 *  violation will be logged to BIP.
 *
 *  Value: "SCAN_SUCCEEDED_BLOCK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanSucceededBlock;
/**
 *  This means no violation is detected on the given message/attachment.
 *
 *  Value: "SCAN_SUCCEEDED_NO_VIOLATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanSucceededNoViolation;
/**
 *  Violation is detected. The user will be warned, and the violation will be
 *  logged to BIP.
 *
 *  Value: "SCAN_SUCCEEDED_WARN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanSucceededWarn;
/**
 *  Rules were fetched but some evaluations failed. An audit-only violation was
 *  found in the rules that were successfully evaluated. The violation will be
 *  logged to BIP (no user-facing action performed).
 *
 *  Value: "SCAN_SUCCEEDED_WITH_FAILURES_AUDIT_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanSucceededWithFailuresAuditOnly;
/**
 *  Rules were fetched but some evaluations failed. A blocking violation was
 *  found in the rules that were successfully evaluated. The message/attachment
 *  will be blocked, the user will be notified, and the violation will be logged
 *  to BIP. A blocking violation takes precedence over all other violation
 *  types.
 *
 *  Value: "SCAN_SUCCEEDED_WITH_FAILURES_BLOCK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanSucceededWithFailuresBlock;
/**
 *  Rules were fetched but some evaluations failed. No violation was found in
 *  the rules that were successfully evaluated.
 *
 *  Value: "SCAN_SUCCEEDED_WITH_FAILURES_NO_VIOLATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanSucceededWithFailuresNoViolation;
/**
 *  Rules were fetched but some evaluations failed. A warn violation was found
 *  in the rules that were successfully evaluated. The user will be warned, and
 *  the violation will be logged to BIP.
 *
 *  Value: "SCAN_SUCCEEDED_WITH_FAILURES_WARN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanSucceededWithFailuresWarn;
/** Value: "SCAN_UNKNOWN_OUTCOME" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_DlpScanOutcome_ScanUnknownOutcome;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Message.editableBy

/**
 *  Only the creator of an entity can mutate it.
 *
 *  Value: "PERMISSION_CREATOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_EditableBy_PermissionCreator;
/**
 *  Every human member of a space or the creator can mutate the entity.
 *
 *  Value: "PERMISSION_MEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_EditableBy_PermissionMember;
/**
 *  No one can mutate the entity.
 *
 *  Value: "PERMISSION_NO_ONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_EditableBy_PermissionNoOne;
/**
 *  Default case, should never be used. If this data is encountered in the DB
 *  any request should throw an exception.
 *
 *  Value: "PERMISSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_EditableBy_PermissionUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Message.messageOrigin

/**
 *  The message came directly from Babel as source-of-truth
 *
 *  Value: "ORIGIN_BABEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_MessageOrigin_OriginBabel;
/**
 *  The message came directly from Babel during dual-write
 *
 *  Value: "ORIGIN_BABEL_DUAL_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_MessageOrigin_OriginBabelDualWrite;
/**
 *  The message came directly from Babel Manifold queue during dual write
 *
 *  Value: "ORIGIN_BABEL_DUAL_WRITE_RETRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_MessageOrigin_OriginBabelDualWriteRetry;
/**
 *  The message is from Babel (Hangouts Classic) interop.
 *
 *  Value: "ORIGIN_BABEL_INTEROP_LIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_MessageOrigin_OriginBabelInteropLive;
/**
 *  The message is from Babel interop retries from Manifold queue.
 *
 *  Value: "ORIGIN_BABEL_INTEROP_RETRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_MessageOrigin_OriginBabelInteropRetry;
/** Value: "ORIGIN_BACKFILL_FROM_GMAIL_ARCHIVE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_MessageOrigin_OriginBackfillFromGmailArchive;
/**
 *  The message was backfilled by go/dinnertrain as part of
 *  go/storage-consolidation. The backfill origin corresponds to the
 *  BackfillState in which the message was created.
 *
 *  Value: "ORIGIN_BACKFILL_FROM_PAPYRUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_MessageOrigin_OriginBackfillFromPapyrus;
/** Value: "ORIGIN_DYNAMITE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_MessageOrigin_OriginDynamite;
/** Value: "ORIGIN_NOT_SET" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_MessageOrigin_OriginNotSet;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Message.messageState

/**
 *  Private state - only visible to the message creator, and the
 *  private_message_viewer if set.
 *
 *  Value: "PRIVATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_MessageState_Private;
/**
 *  Default - visible to the room / DM.
 *
 *  Value: "PUBLIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_MessageState_Public;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Message.quotedByState

/**
 *  State to indicate that this message is quoted by another message (excluding
 *  purged message).
 *
 *  Value: "QUOTED_BY_STATE_HAS_BEEN_QUOTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_QuotedByState_QuotedByStateHasBeenQuoted;
/**
 *  State to indicate that this message are not quoted by another message.
 *
 *  Value: "QUOTED_BY_STATE_HAS_NOT_BEEN_QUOTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_QuotedByState_QuotedByStateHasNotBeenQuoted;
/**
 *  Unspecified state for QuotedByState.
 *
 *  Value: "QUOTED_BY_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Message_QuotedByState_QuotedByStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_MessageInfo.searcherMembershipState

/**
 *  This state should never be stored in Spanner. It is a state for responses to
 *  the clients to indicate that membership mutations have failed and the member
 *  is in its previous state.
 *
 *  Value: "MEMBER_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MessageInfo_SearcherMembershipState_MemberFailed;
/**
 *  An invitation to the space has been sent
 *
 *  Value: "MEMBER_INVITED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MessageInfo_SearcherMembershipState_MemberInvited;
/**
 *  User has joined the space
 *
 *  Value: "MEMBER_JOINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MessageInfo_SearcherMembershipState_MemberJoined;
/**
 *  User is not a member
 *
 *  Value: "MEMBER_NOT_A_MEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MessageInfo_SearcherMembershipState_MemberNotAMember;
/**
 *  Default state, do not use
 *
 *  Value: "MEMBER_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_MessageInfo_SearcherMembershipState_MemberUnknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_OpenLink.loadIndicator

/** Value: "NONE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_OpenLink_LoadIndicator_None;
/** Value: "SPINNER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_OpenLink_LoadIndicator_Spinner;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_OpenLink.onClose

/** Value: "NOTHING" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_OpenLink_OnClose_Nothing;
/** Value: "RELOAD_ADD_ON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_OpenLink_OnClose_ReloadAddOn;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_OpenLink.openAs

/** Value: "FULL_SIZE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_OpenLink_OpenAs_FullSize;
/** Value: "OVERLAY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_OpenLink_OpenAs_Overlay;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_OtrChatMessageEvent.messageOtrStatus

/**
 *  The conversation is completely off the record.
 *
 *  Value: "OFF_THE_RECORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_OtrChatMessageEvent_MessageOtrStatus_OffTheRecord;
/**
 *  The conversation is completely on the record.
 *
 *  Value: "ON_THE_RECORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_OtrChatMessageEvent_MessageOtrStatus_OnTheRecord;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_OtrModificationEvent.newOtrStatus

/**
 *  The conversation is completely off the record.
 *
 *  Value: "OFF_THE_RECORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_OtrModificationEvent_NewOtrStatus_OffTheRecord;
/**
 *  The conversation is completely on the record.
 *
 *  Value: "ON_THE_RECORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_OtrModificationEvent_NewOtrStatus_OnTheRecord;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_OtrModificationEvent.newOtrToggle

/**
 *  The conversation cannot be toggled
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_OtrModificationEvent_NewOtrToggle_Disabled;
/**
 *  The conversation can be toggled
 *
 *  Value: "ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_OtrModificationEvent_NewOtrToggle_Enabled;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_OtrModificationEvent.oldOtrStatus

/**
 *  The conversation is completely off the record.
 *
 *  Value: "OFF_THE_RECORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_OtrModificationEvent_OldOtrStatus_OffTheRecord;
/**
 *  The conversation is completely on the record.
 *
 *  Value: "ON_THE_RECORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_OtrModificationEvent_OldOtrStatus_OnTheRecord;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_OtrModificationEvent.oldOtrToggle

/**
 *  The conversation cannot be toggled
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_OtrModificationEvent_OldOtrToggle_Disabled;
/**
 *  The conversation can be toggled
 *
 *  Value: "ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_OtrModificationEvent_OldOtrToggle_Enabled;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_PackagingServiceClient.type

/**
 *  Client for Android app.
 *
 *  Value: "ANDROID"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PackagingServiceClient_Type_Android;
/**
 *  Client for iOS app.
 *
 *  Value: "IOS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PackagingServiceClient_Type_Ios;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_PhoneNumber.type

/** Value: "MOBILE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PhoneNumber_Type_Mobile;
/** Value: "OFFICE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PhoneNumber_Type_Office;
/** Value: "OTHER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PhoneNumber_Type_Other;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_PollItemsRequest.statusCodes

/**
 *  API has accepted the up-to-date data of this item.
 *
 *  Value: "ACCEPTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PollItemsRequest_StatusCodes_Accepted;
/**
 *  Input-only value. Used with Items.list to list all items in the queue,
 *  regardless of status.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PollItemsRequest_StatusCodes_CodeUnspecified;
/**
 *  Error encountered by Cloud Search while processing this item. Details of the
 *  error are in repositoryError.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PollItemsRequest_StatusCodes_Error;
/**
 *  Item has been modified in the repository, and is out of date with the
 *  version previously accepted into Cloud Search.
 *
 *  Value: "MODIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PollItemsRequest_StatusCodes_Modified;
/**
 *  Item is known to exist in the repository, but is not yet accepted by Cloud
 *  Search. An item can be in this state when Items.push has been called for an
 *  item of this name that did not exist previously.
 *
 *  Value: "NEW_ITEM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PollItemsRequest_StatusCodes_NewItem;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_PrincipalProto.scope

/** Value: "ALL_AUTHENTICATED_USERS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_AllAuthenticatedUsers;
/** Value: "CAP_TOKEN_HOLDER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_CapTokenHolder;
/** Value: "CHAT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_Chat;
/** Value: "CIRCLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_Circle;
/**
 *  next tag: 29
 *
 *  Value: "CLOUD_PRINCIPAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_CloudPrincipal;
/** Value: "CONTACT_GROUP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_ContactGroup;
/** Value: "EMAIL_OWNER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_EmailOwner;
/** Value: "EVENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_Event;
/** Value: "GAIA_GROUP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_GaiaGroup;
/** Value: "GAIA_USER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_GaiaUser;
/** Value: "HOST" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_Host;
/** Value: "INVALID" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_Invalid;
/** Value: "LDAP_GROUP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_LdapGroup;
/** Value: "LDAP_USER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_LdapUser;
/** Value: "MDB_GROUP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_MdbGroup;
/** Value: "MDB_USER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_MdbUser;
/** Value: "OAUTH_CONSUMER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_OauthConsumer;
/** Value: "POSTINI_USER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_PostiniUser;
/** Value: "RBAC_ROLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_RbacRole;
/** Value: "RBAC_SUBJECT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_RbacSubject;
/** Value: "RESOURCE_ROLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_ResourceRole;
/** Value: "SIGNING_KEY_POSSESSOR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_SigningKeyPossessor;
/** Value: "SIMPLE_SECRET_HOLDER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_SimpleSecretHolder;
/** Value: "SOCIAL_GRAPH_NODE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_SocialGraphNode;
/** Value: "SQUARE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_Square;
/** Value: "UNUSED_ZWIEBACK_SESSION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_UnusedZwiebackSession;
/** Value: "YOUTUBE_USER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_YoutubeUser;
/** Value: "ZWIEBACK_SESSION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PrincipalProto_Scope_ZwiebackSession;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_ProcessingError.code

/**
 *  ACL inheritance graph formed a cycle.
 *
 *  Value: "ACL_CYCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ProcessingError_Code_AclCycle;
/**
 *  Items with incomplete ACL information due to inheriting other items with
 *  broken ACL or having groups with unmapped descendants.
 *
 *  Value: "INDIRECT_BROKEN_ACL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ProcessingError_Code_IndirectBrokenAcl;
/**
 *  Item's ACL, metadata, or content is malformed or in invalid state.
 *  FieldViolations contains more details on where the problem is.
 *
 *  Value: "MALFORMED_REQUEST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ProcessingError_Code_MalformedRequest;
/**
 *  Input only value. Use this value in Items.
 *
 *  Value: "PROCESSING_ERROR_CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ProcessingError_Code_ProcessingErrorCodeUnspecified;
/**
 *  Countent format is unsupported.
 *
 *  Value: "UNSUPPORTED_CONTENT_FORMAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ProcessingError_Code_UnsupportedContentFormat;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_PushItem.type

/**
 *  Indicates that the repository document has been modified or updated since
 *  the previous update call. This changes status to MODIFIED state for an
 *  existing item. If this is called on a non existing item, the status is
 *  changed to NEW_ITEM.
 *
 *  Value: "MODIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PushItem_Type_Modified;
/**
 *  Item in the repository has not been modified since the last update call.
 *  This push operation will set status to ACCEPTED state.
 *
 *  Value: "NOT_MODIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PushItem_Type_NotModified;
/**
 *  Connector is facing a repository error regarding this item. Change status to
 *  REPOSITORY_ERROR state. Item is unreserved and rescheduled at a future time
 *  determined by exponential backoff.
 *
 *  Value: "REPOSITORY_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PushItem_Type_RepositoryError;
/**
 *  Call push with REQUEUE only for items that have been reserved. This action
 *  unreserves the item and resets its available time to the wall clock time.
 *
 *  Value: "REQUEUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PushItem_Type_Requeue;
/**
 *  Default UNSPECIFIED. Specifies that the push operation should not modify
 *  ItemStatus
 *
 *  Value: "UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_PushItem_Type_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_QueryInterpretation.interpretationType

/**
 *  The results from original query are blended with other results. The reason
 *  for blending these other results with the results from original query is
 *  populated in the 'Reason' field below.
 *
 *  Value: "BLEND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QueryInterpretation_InterpretationType_Blend;
/**
 *  Neither the natural language interpretation, nor a broader version of the
 *  query is used to fetch the search results.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QueryInterpretation_InterpretationType_None;
/**
 *  The results from original query are replaced. The reason for replacing the
 *  results from original query is populated in the 'Reason' field below.
 *
 *  Value: "REPLACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QueryInterpretation_InterpretationType_Replace;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_QueryInterpretation.reason

/**
 *  Query and document terms similarity is used to selectively broaden the query
 *  to retrieve additional search results since enough results were not found
 *  for the user query. Interpreted query will be empty for this case.
 *
 *  Value: "NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QueryInterpretation_Reason_NotEnoughResultsFoundForUserQuery;
/**
 *  Natural language interpretation of the query is used to fetch the search
 *  results.
 *
 *  Value: "QUERY_HAS_NATURAL_LANGUAGE_INTENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QueryInterpretation_Reason_QueryHasNaturalLanguageIntent;
/** Value: "UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QueryInterpretation_Reason_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_QueryOperator.type

/** Value: "BOOLEAN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Boolean;
/** Value: "DATE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Date;
/** Value: "DOUBLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Double;
/** Value: "ENUM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Enum;
/** Value: "HTML" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Html;
/** Value: "INTEGER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Integer;
/** Value: "TEXT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Text;
/** Value: "TIMESTAMP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Timestamp;
/**
 *  Invalid value.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QueryOperator_Type_Unknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_QuotedMessageMetadata.botAttachmentState

/** Value: "BOT_ATTACHMENT_STATE_HAS_BOT_ATTACHMENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QuotedMessageMetadata_BotAttachmentState_BotAttachmentStateHasBotAttachment;
/** Value: "BOT_ATTACHMENT_STATE_NO_BOT_ATTACHMENT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QuotedMessageMetadata_BotAttachmentState_BotAttachmentStateNoBotAttachment;
/** Value: "BOT_ATTACHMENT_STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QuotedMessageMetadata_BotAttachmentState_BotAttachmentStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_QuotedMessageMetadata.messageState

/**
 *  The original message is present in storage and not deleted; the message
 *  contents can be hydrated.
 *
 *  Value: "MESSAGE_STATE_ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QuotedMessageMetadata_MessageState_MessageStateActive;
/**
 *  The original message has been deleted; the message contents cannot be
 *  hydrated.
 *
 *  Value: "MESSAGE_STATE_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QuotedMessageMetadata_MessageState_MessageStateDeleted;
/**
 *  The OTR original message was edited and therefore no longer retrievable from
 *  storage; the message contents cannot be hydrated. See
 *  go/message-quoting-otr-edits for more context.
 *
 *  Value: "MESSAGE_STATE_OTR_EDITED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QuotedMessageMetadata_MessageState_MessageStateOtrEdited;
/** Value: "MESSAGE_STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_QuotedMessageMetadata_MessageState_MessageStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_RecordingEvent.type

/**
 *  Recording is about to be stopped by the server because the recording is
 *  about to reach the maximum duration.
 *
 *  Value: "ACTIVE_ABOUT_TO_STOP_TOO_LONG"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingEvent_Type_ActiveAboutToStopTooLong;
/**
 *  Recording was cancelled by a user.
 *
 *  Value: "CANCELLED_BY_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingEvent_Type_CancelledByUser;
/**
 *  Recording was cancelled by the server because of a failure during recording
 *  initialization.
 *
 *  Value: "CANCELLED_INITIALIZATION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingEvent_Type_CancelledInitializationFailed;
/**
 *  Recording was cancelled by the server because the recording initiator left
 *  the conference during initialization. When the initiator leaves after the
 *  recording is started, no event is triggered.
 *
 *  Value: "CANCELLED_INITIATOR_LEFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingEvent_Type_CancelledInitiatorLeft;
/**
 *  This is never used.
 *
 *  Value: "RECORDING_EVENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingEvent_Type_RecordingEventUnspecified;
/**
 *  Recording was started or is being started by a user.
 *
 *  Value: "STARTED_BY_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingEvent_Type_StartedByUser;
/**
 *  Recording was stopped because there were no devices left in the conference.
 *
 *  Value: "STOPPED_ALL_DEVICES_LEFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingEvent_Type_StoppedAllDevicesLeft;
/**
 *  Recording was stopped by a user.
 *
 *  Value: "STOPPED_BY_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingEvent_Type_StoppedByUser;
/**
 *  Recording was stopped because of an internal error.
 *
 *  Value: "STOPPED_INTERNAL_FAILURES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingEvent_Type_StoppedInternalFailures;
/**
 *  Recording was stopped because the recording reached the maximum duration.
 *
 *  Value: "STOPPED_TOO_LONG"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingEvent_Type_StoppedTooLong;
/**
 *  Deprecated, use detailed user actions instead.
 *
 *  Value: "USER_ACTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingEvent_Type_UserAction;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_RecordingInfo.recordingApplicationType

/**
 *  A meeting broadcast.
 *
 *  Value: "BROADCAST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingInfo_RecordingApplicationType_Broadcast;
/**
 *  A *Google Live* managed stream.
 *
 *  Value: "GLIVE_STREAM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingInfo_RecordingApplicationType_GliveStream;
/**
 *  A meeting recording saved to a video file in Google Drive.
 *
 *  Value: "RECORDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingInfo_RecordingApplicationType_Recording;
/**
 *  This is never used.
 *
 *  Value: "RECORDING_APPLICATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingInfo_RecordingApplicationType_RecordingApplicationTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_RecordingInfo.recordingStatus

/**
 *  The conference is not being recorded. This can mean either that no recording
 *  has been started, or that a previous recording has stopped.
 *
 *  Value: "RECORDING_INACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingInfo_RecordingStatus_RecordingInactive;
/**
 *  The recording is started. Any media sent to the conference may be included
 *  in the resulting recording.
 *
 *  Value: "RECORDING_STARTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingInfo_RecordingStatus_RecordingStarted;
/**
 *  Recording is about to begin. The status will be updated to RECORDING_STARTED
 *  when the recording actually starts, which happens when all the backend
 *  plumbing is set up.
 *
 *  Value: "RECORDING_STARTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingInfo_RecordingStatus_RecordingStarting;
/**
 *  This value is never used.
 *
 *  Value: "RECORDING_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RecordingInfo_RecordingStatus_RecordingUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_RepositoryError.type

/**
 *  Failed authentication due to incorrect credentials.
 *
 *  Value: "AUTHENTICATION_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_AuthenticationError;
/**
 *  Service account is not authorized for the repository.
 *
 *  Value: "AUTHORIZATION_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_AuthorizationError;
/**
 *  Client-related error, such as an invalid request from the connector to the
 *  repository server.
 *
 *  Value: "CLIENT_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_ClientError;
/**
 *  Cannot connect to the repository server.
 *
 *  Value: "CONNECTION_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_ConnectionError;
/**
 *  DNS problem, such as the DNS server is not responding.
 *
 *  Value: "DNS_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_DnsError;
/**
 *  Unknown or unreachable host.
 *
 *  Value: "NETWORK_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_NetworkError;
/**
 *  Quota exceeded.
 *
 *  Value: "QUOTA_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_QuotaExceeded;
/**
 *  Repository server error.
 *
 *  Value: "SERVER_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_ServerError;
/**
 *  Server temporarily unavailable.
 *
 *  Value: "SERVICE_UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_ServiceUnavailable;
/**
 *  Unknown error.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RepositoryError_Type_Unknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_RequiredMessageFeaturesMetadata.requiredFeatures

/** Value: "REQUIRED_FEATURE_MESSAGE_QUOTING" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RequiredMessageFeaturesMetadata_RequiredFeatures_RequiredFeatureMessageQuoting;
/** Value: "REQUIRED_FEATURE_TOMBSTONES_IN_DMS_AND_UFRS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RequiredMessageFeaturesMetadata_RequiredFeatures_RequiredFeatureTombstonesInDmsAndUfrs;
/** Value: "REQUIRED_FEATURE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RequiredMessageFeaturesMetadata_RequiredFeatures_RequiredFeatureUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_RetrievalImportance.importance

/**
 *  Treat the match like a body text match.
 *
 *  Value: "DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RetrievalImportance_Importance_Default;
/**
 *  Treat the match with higher importance than body text.
 *
 *  Value: "HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RetrievalImportance_Importance_High;
/**
 *  Treat the match like a match against title of the item.
 *
 *  Value: "HIGHEST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RetrievalImportance_Importance_Highest;
/**
 *  Treat the match with lower importance than body text.
 *
 *  Value: "LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RetrievalImportance_Importance_Low;
/**
 *  Do not match against this field during retrieval. The property can still be
 *  used for operator matching, faceting, and suggest if desired.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RetrievalImportance_Importance_None;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_RoomUpdatedMetadata.initiatorType

/** Value: "INITIATOR_TYPE_ADMIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RoomUpdatedMetadata_InitiatorType_InitiatorTypeAdmin;
/** Value: "INITIATOR_TYPE_END_USER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RoomUpdatedMetadata_InitiatorType_InitiatorTypeEndUser;
/** Value: "INITIATOR_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_RoomUpdatedMetadata_InitiatorType_InitiatorTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Roster.rosterState

/**
 *  Roster is active
 *
 *  Value: "ROSTER_ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Roster_RosterState_RosterActive;
/**
 *  Roster deleted
 *
 *  Value: "ROSTER_DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Roster_RosterState_RosterDeleted;
/** Value: "ROSTER_STATE_UNKNOWN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Roster_RosterState_RosterStateUnknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Segment.type

/**
 *  An ALL_USER_MENTION segment represents a reference to all users in the
 *  context, that is, the conversation, discussion, or other context containing
 *  the segment. For example, an ALL_USER_MENTION segment ("\@all") can be
 *  useful to ping all participants in a conversation if the notification
 *  setting of the conversation is not set to ping on normal messages. An
 *  ALL_USER_MENTION should be treated as a USER_MENTION for all users who
 *  receives the segment.
 *
 *  Value: "ALL_USER_MENTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Segment_Type_AllUserMention;
/**
 *  A HASHTAG segment represents a structured reference to a topic. The "text"
 *  field should represent display text (e.g. "#Google"), and additional
 *  metadata should be put in the Segment's hashtag_data field.
 *
 *  Value: "HASHTAG"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Segment_Type_Hashtag;
/**
 *  A LINE_BREAK segment is simply a placeholder to represent a line break
 *  between other segments. The "text" variable may be set to a newline as a
 *  fallback, but clients that understand this segment type should simply insert
 *  a line break without needing to reference any fields.
 *
 *  Value: "LINE_BREAK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Segment_Type_LineBreak;
/**
 *  A LINK segment represents a link to a web entity. The "text" field should be
 *  used for anchor text. Additional link data should be put in the link_data
 *  protobuf.
 *
 *  Value: "LINK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Segment_Type_Link;
/**
 *  A TEXT segment represents plain-text subject to particular formatting
 *  constraints (as represented in the "formatting" field of the Segment).
 *
 *  Value: "TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Segment_Type_Text;
/**
 *  A USER_MENTION segment represents a reference to a (possibly non-Gaia,
 *  possibly off-network) user. The "text" field may be populated as a fallback,
 *  but information identifying the user should be contained in the
 *  user_mention_data protobuf. (The set of fields that are populated in
 *  user_mention_data may differ depending on the context in which the segment
 *  is viewed, but the interpretation of the fields is uniform. See comments
 *  over UserMentionData).
 *
 *  Value: "USER_MENTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Segment_Type_UserMention;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_SelectionControl.type

/** Value: "CHECK_BOX" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SelectionControl_Type_CheckBox;
/** Value: "DROPDOWN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SelectionControl_Type_Dropdown;
/** Value: "RADIO_BUTTON" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SelectionControl_Type_RadioButton;
/** Value: "SWITCH" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SelectionControl_Type_Switch;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_SessionEvent.type

/**
 *  Streaming session is about to be stopped by the server because the session
 *  is about to reach the maximum duration.
 *
 *  Value: "ACTIVE_ABOUT_TO_STOP_TOO_LONG"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionEvent_Type_ActiveAboutToStopTooLong;
/**
 *  Streaming session was cancelled by a user.
 *
 *  Value: "CANCELLED_BY_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionEvent_Type_CancelledByUser;
/**
 *  Streaming session was cancelled by the server because of a failure during
 *  session initialization.
 *
 *  Value: "CANCELLED_INITIALIZATION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionEvent_Type_CancelledInitializationFailed;
/**
 *  Streaming session was cancelled by the server because the session initiator
 *  left the conference during initialization. When the initiator leaves after
 *  the session is started, no event is triggered.
 *
 *  Value: "CANCELLED_INITIATOR_LEFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionEvent_Type_CancelledInitiatorLeft;
/**
 *  This is never used.
 *
 *  Value: "EVENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionEvent_Type_EventUnspecified;
/**
 *  Streaming session was started or is being started by a user.
 *
 *  Value: "STARTED_BY_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionEvent_Type_StartedByUser;
/**
 *  Streaming session was stopped because there were no devices left in the
 *  conference.
 *
 *  Value: "STOPPED_ALL_DEVICES_LEFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionEvent_Type_StoppedAllDevicesLeft;
/**
 *  Streaming session was stopped by a user.
 *
 *  Value: "STOPPED_BY_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionEvent_Type_StoppedByUser;
/**
 *  Streaming session was stopped because of an internal error.
 *
 *  Value: "STOPPED_INTERNAL_FAILURES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionEvent_Type_StoppedInternalFailures;
/**
 *  Streaming session was stopped because the session reached the maximum
 *  duration.
 *
 *  Value: "STOPPED_TOO_LONG"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionEvent_Type_StoppedTooLong;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_SessionStateInfo.sessionState

/**
 *  The session is active/ongoing.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionStateInfo_SessionState_Active;
/**
 *  Unspecified session state.
 *
 *  Value: "SESSION_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionStateInfo_SessionState_SessionStateUnspecified;
/**
 *  The session is starting.
 *
 *  Value: "STARTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionStateInfo_SessionState_Starting;
/**
 *  The session has stopped.
 *
 *  Value: "STOPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionStateInfo_SessionState_Stopped;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_SessionStateInfo.sessionStopReason

/**
 *  Session stop reason unspecified.
 *
 *  Value: "SESSION_STOP_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionStateInfo_SessionStopReason_SessionStopReasonUnspecified;
/**
 *  Stopped because there were no devices left in the conference.
 *
 *  Value: "STOPPED_ALL_DEVICES_LEFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionStateInfo_SessionStopReason_StoppedAllDevicesLeft;
/**
 *  Stopped by the server because of an initialization failure.
 *
 *  Value: "STOPPED_INITIALIZATION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionStateInfo_SessionStopReason_StoppedInitializationFailed;
/**
 *  Stopped because of an internal error.
 *
 *  Value: "STOPPED_INTERNAL_FAILURES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionStateInfo_SessionStopReason_StoppedInternalFailures;
/**
 *  Stopped because the session reached the maximum duration.
 *
 *  Value: "STOPPED_TOO_LONG"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionStateInfo_SessionStopReason_StoppedTooLong;
/**
 *  Stopped because the broadcast event ended on YouTube.
 *
 *  Value: "STOPPED_YOU_TUBE_LIVE_EVENT_ENDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionStateInfo_SessionStopReason_StoppedYouTubeLiveEventEnded;
/**
 *  Stopped by user action.
 *
 *  Value: "USER_ACTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SessionStateInfo_SessionStopReason_UserAction;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Settings.accessType

/**
 *  Anyone with meeting join information (url, phone access...) can join, no
 *  knocking required. (Subject to organization policies)
 *
 *  Value: "ACCESS_TYPE_OPEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Settings_AccessType_AccessTypeOpen;
/**
 *  Only participants invited by a host can automatically join, everyone else
 *  must knock and be admitted. (Subject to organization policies) Participants
 *  cannot dial out from the meeting. And only hosts can accept knocks.
 *
 *  Value: "ACCESS_TYPE_RESTRICTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Settings_AccessType_AccessTypeRestricted;
/**
 *  Members of the Host's organization, invited external users, and dial-in
 *  users can join without knocking, everyone else must knock. (Subject to
 *  organization policies)
 *
 *  Value: "ACCESS_TYPE_TRUSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Settings_AccessType_AccessTypeTrusted;
/**
 *  Default value. This value is unused.
 *
 *  Value: "ACCESS_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Settings_AccessType_AccessTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_ShareScope.scope

/** Value: "DASHER_DOMAIN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ShareScope_Scope_DasherDomain;
/**
 *  Viewable by extended circles.
 *
 *  Value: "EXTENDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ShareScope_Scope_Extended;
/**
 *  Viewable only by a set of people.
 *
 *  Value: "LIMITED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ShareScope_Scope_Limited;
/**
 *  Only the author can view the post.
 *
 *  Value: "PRIVATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ShareScope_Scope_Private;
/** Value: "PUBLIC" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ShareScope_Scope_Public;
/** Value: "UNKNOWN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_ShareScope_Scope_Unknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_SimpleSecretLabelProto.type

/**
 *  The singleton auth key for a common-sharing ACL. No other fields of
 *  SimpleSecretLabelProto need to be filled in, since there is only one of
 *  these per ACL. The corresponding secret is the auth key encoded in 64-bit
 *  big-endian.
 *
 *  Value: "AUTH_KEY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SimpleSecretLabelProto_Type_AuthKey;
/**
 *  ***DEPRECATED (3-Oct-2011)*** Use the new CapTokenProto and
 *  CapTokenHolderProto instead. A capability token. The corresponding secret is
 *  an arbitrary-length random byte string (recommended: 128 bits).
 *  |capability_id| may be filled in (see below). See CapTokenMetadata in
 *  acl.proto.
 *
 *  Value: "CAP_TOKEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SimpleSecretLabelProto_Type_CapToken;
/**
 *  A generic secret value. Do not use this if any more specific type is
 *  appropriate.
 *
 *  Value: "GENERIC_SECRET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SimpleSecretLabelProto_Type_GenericSecret;
/**
 *  Used as a default value.
 *
 *  Value: "INVALID"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SimpleSecretLabelProto_Type_Invalid;
/**
 *  A common-sharing invite token. |invite_id| (below) must be set to identify
 *  the invite. The corresponding secret is the SecretMaterial, as defined by
 *  InviteToken.SecretMaterial in acl.proto, encoded in 64-bit big-endian. If
 *  there is no SecretMaterial, the secret should be omitted; in this case the
 *  invite ID itself is the secret, which is less secure.
 *
 *  Value: "INVITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SimpleSecretLabelProto_Type_Invite;
/**
 *  Identifies a principal that can perform a successful REKE handshake. The
 *  holder is not authenticated by presenting a SimpleSecretProto, but rather by
 *  knowing either the REKE resumption ticket secret or the private key
 *  corresponding to a public key specified outside the PrincipalProto. For more
 *  information, see: http://goto.google.com/loas2cert
 *
 *  Value: "REKE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SimpleSecretLabelProto_Type_Reke;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_SlashCommandMetadata.type

/**
 *  If a bot is added by a Slash Command, it means the bot was invoked by the
 *  user but hasn't yet been added to the group. Attaching an ADD annotation
 *  both add and invoke the bot.
 *
 *  Value: "ADD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SlashCommandMetadata_Type_Add;
/**
 *  Server-generated slash command metadata, for clients to strikethrough.
 *
 *  Value: "FAILED_TO_ADD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SlashCommandMetadata_Type_FailedToAdd;
/** Value: "INVOKE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SlashCommandMetadata_Type_Invoke;
/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SlashCommandMetadata_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_SortOptions.sortOrder

/** Value: "ASCENDING" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SortOptions_SortOrder_Ascending;
/** Value: "DESCENDING" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SortOptions_SortOrder_Descending;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_Source.predefinedSource

/** Value: "GOOGLE_CALENDAR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_GoogleCalendar;
/** Value: "GOOGLE_DRIVE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_GoogleDrive;
/** Value: "GOOGLE_GMAIL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_GoogleGmail;
/** Value: "GOOGLE_GROUPS" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_GoogleGroups;
/** Value: "GOOGLE_KEEP" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_GoogleKeep;
/** Value: "GOOGLE_SITES" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_GoogleSites;
/** Value: "NONE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_None;
/**
 *  Suggests people in the organization. Only valid when used with the suggest
 *  API. Results in an error when used in the query API.
 *
 *  Value: "PERSON"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_Person;
/**
 *  Suggests queries issued by the user in the past. Only valid when used with
 *  the suggest API. Ignored when used in the query API.
 *
 *  Value: "QUERY_HISTORY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_Source_PredefinedSource_QueryHistory;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_SourceScoringConfig.sourceImportance

/** Value: "DEFAULT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SourceScoringConfig_SourceImportance_Default;
/** Value: "HIGH" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SourceScoringConfig_SourceImportance_High;
/** Value: "LOW" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SourceScoringConfig_SourceImportance_Low;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_StreamingSessionInfo.applicationType

/**
 *  A meeting broadcast.
 *
 *  Value: "BROADCAST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_StreamingSessionInfo_ApplicationType_Broadcast;
/**
 *  A *Google Live* managed stream.
 *
 *  Value: "GLIVE_STREAM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_StreamingSessionInfo_ApplicationType_GliveStream;
/**
 *  A meeting recording saved to a video file in Google Drive.
 *
 *  Value: "RECORDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_StreamingSessionInfo_ApplicationType_Recording;
/**
 *  This is never used.
 *
 *  Value: "RECORDING_APPLICATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_StreamingSessionInfo_ApplicationType_RecordingApplicationTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_StreamingSessionInfo.status

/**
 *  The streaming session is inactive. This means either it's not started yet or
 *  it's already stopped.
 *
 *  Value: "INACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_StreamingSessionInfo_Status_Inactive;
/**
 *  The streaming session is live. Any media sent to the conference may be
 *  included in the resulting recording/broadcast.
 *
 *  Value: "LIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_StreamingSessionInfo_Status_Live;
/**
 *  The streaming session is about to begin. The status will be updated to LIVE
 *  when the streaming session actually starts, which happens when all the
 *  backend plumbing is set up.
 *
 *  Value: "STARTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_StreamingSessionInfo_Status_Starting;
/**
 *  This value is never used.
 *
 *  Value: "STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_StreamingSessionInfo_Status_StatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_StreamingSessionInfo.viewerAccessPolicy

/**
 *  Used only when broadcast is not enabled, or an unknown enum value is used.
 *
 *  Value: "BROADCASTING_ACCESS_POLICY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_StreamingSessionInfo_ViewerAccessPolicy_BroadcastingAccessPolicyUnspecified;
/**
 *  Only authenticated Google accounts belonging to the same organization as the
 *  meeting organizer can access the broadcast.
 *
 *  Value: "ORGANIZATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_StreamingSessionInfo_ViewerAccessPolicy_Organization;
/**
 *  Anyone with the broadcast view URL can access the broadcast.
 *
 *  Value: "PUBLIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_StreamingSessionInfo_ViewerAccessPolicy_Public;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_SwitchWidget.controlType

/** Value: "CHECKBOX" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SwitchWidget_ControlType_Checkbox;
/** Value: "SWITCH" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SwitchWidget_ControlType_Switch;
/** Value: "UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_SwitchWidget_ControlType_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_TextButton.style

/**
 *  Button with solid background.
 *
 *  Value: "FILLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_TextButton_Style_Filled;
/**
 *  Simple text button with ripple touch feedback.
 *
 *  Value: "TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_TextButton_Style_Text;
/** Value: "UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_TextButton_Style_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_TextField.type

/** Value: "MULTIPLE_LINE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_TextField_Type_MultipleLine;
/** Value: "SINGLE_LINE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_TextField_Type_SingleLine;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_TombstoneMetadata.tombstoneType

/**
 *  The customer admin deleted a message in a space or DM owned by the customer.
 *  (go/chat-customer-owned-data)
 *
 *  Value: "ADMIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_TombstoneMetadata_TombstoneType_Admin;
/**
 *  App scheduled deletion of their own message. See go/bme-dd.
 *
 *  Value: "APP_MESSAGE_EXPIRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_TombstoneMetadata_TombstoneType_AppMessageExpiry;
/**
 *  User deleted their own message.
 *
 *  Value: "CREATOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_TombstoneMetadata_TombstoneType_Creator;
/**
 *  User deleted their own message via an app. See go/chat-api-delete-message.
 *
 *  Value: "CREATOR_VIA_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_TombstoneMetadata_TombstoneType_CreatorViaApp;
/**
 *  The space owner deleted a message in their space.
 *
 *  Value: "ROOM_OWNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_TombstoneMetadata_TombstoneType_RoomOwner;
/**
 *  The space owner deleted a message in their space via an app. See
 *  go/chat-api-delete-message.
 *
 *  Value: "ROOM_OWNER_VIA_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_TombstoneMetadata_TombstoneType_RoomOwnerViaApp;
/**
 *  This should not be used.
 *
 *  Value: "TOMBSTONE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_TombstoneMetadata_TombstoneType_TombstoneUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_UnmappedIdentity.resolutionStatusCode

/**
 *  Input-only value. Used to list all unmapped identities regardless of status.
 *
 *  Value: "CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_CodeUnspecified;
/**
 *  IDaaS does not understand the identity source, probably because the schema
 *  was modified in a non compatible way.
 *
 *  Value: "IDENTITY_SOURCE_MISCONFIGURED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_IdentitySourceMisconfigured;
/**
 *  The identity source associated with the identity was either not found or
 *  deleted.
 *
 *  Value: "IDENTITY_SOURCE_NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_IdentitySourceNotFound;
/**
 *  Internal error.
 *
 *  Value: "INTERNAL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_InternalError;
/**
 *  The unmapped identity was not found in IDaaS, and needs to be provided by
 *  the user.
 *
 *  Value: "NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_NotFound;
/**
 *  The number of users associated with the external identity is too large.
 *
 *  Value: "TOO_MANY_MAPPINGS_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_TooManyMappingsFound;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_UpdateBody.type

/**
 *  Indicates this action is to perform an in-place insertion. By default the
 *  content is inserted at the current cursor position, if there is selected
 *  content, it replaces the selected content.
 *
 *  Value: "IN_PLACE_INSERT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UpdateBody_Type_InPlaceInsert;
/**
 *  Indicates this action is to perform insert at the end of the message body.
 *
 *  Value: "INSERT_AT_END"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UpdateBody_Type_InsertAtEnd;
/**
 *  Indicates this action is to perform insert at the start of the message body.
 *
 *  Value: "INSERT_AT_START"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UpdateBody_Type_InsertAtStart;
/**
 *  Indicates this action is to replace the message body.
 *
 *  Value: "REPLACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UpdateBody_Type_Replace;
/**
 *  Default value when nothing is set for Type.
 *
 *  Value: "UNSPECIFIED_ACTION_TYPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UpdateBody_Type_UnspecifiedActionType;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_UploadMetadata.clonedDriveAction

/**
 *  Show "Add another shortcut" button, for Drive files the user has already
 *  created a shortcut to.
 *
 *  Value: "ADD_ANOTHER_SHORTCUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UploadMetadata_ClonedDriveAction_AddAnotherShortcut;
/**
 *  Show "Add shortcut" button, for adding a shortcut to a Drive file the user
 *  does not have permission to move.
 *
 *  Value: "ADD_SHORTCUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UploadMetadata_ClonedDriveAction_AddShortcut;
/**
 *  Show "Add to Drive" button, for adding file that doesn't exist in Drive to
 *  Drive. Note that deleted Drive files that still exist (i.e. in your Trash)
 *  will still be ORGANIZE (this is consistent with Gmail Drive attachments).
 *
 *  Value: "ADD_TO_DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UploadMetadata_ClonedDriveAction_AddToDrive;
/**
 *  No organize action should be shown.
 *
 *  Value: "DRIVE_ACTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UploadMetadata_ClonedDriveAction_DriveActionUnspecified;
/**
 *  Show "Move" button, for organizing a Drive file the user has permission to
 *  move.
 *
 *  Value: "ORGANIZE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UploadMetadata_ClonedDriveAction_Organize;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_UploadMetadata.virusScanResult

/** Value: "CLEAN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UploadMetadata_VirusScanResult_Clean;
/** Value: "ERROR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UploadMetadata_VirusScanResult_Error;
/** Value: "INFECTED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UploadMetadata_VirusScanResult_Infected;
/**
 *  The document violates Google's policy for executables and archives.
 *
 *  Value: "POLICY_VIOLATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UploadMetadata_VirusScanResult_PolicyViolation;
/** Value: "UNKNOWN_VIRUS_SCAN_RESULT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UploadMetadata_VirusScanResult_UnknownVirusScanResult;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_UrlMetadata.linkType

/**
 *  Set by the server, when it detects a URL in the message text
 *
 *  Value: "AUTO_DETECTED_PLAIN_TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UrlMetadata_LinkType_AutoDetectedPlainText;
/**
 *  Set by the server, when it detects a URL in markdown-syntax in the message
 *  text
 *
 *  Value: "MARKDOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UrlMetadata_LinkType_Markdown;
/**
 *  Set by the server when a URL annotation received from client has 0 length
 *  and 0 start index
 *
 *  Value: "NO_ASSOCIATED_TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UrlMetadata_LinkType_NoAssociatedText;
/**
 *  Set by the client, when the user adds a link via the rich-text editing (RTE)
 *  toolbar
 *
 *  Value: "RICH_TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UrlMetadata_LinkType_RichText;
/** Value: "UNDEFINED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UrlMetadata_LinkType_Undefined;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_UrlMetadata.urlSource

/** Value: "SERVER_SUPPLIED_POLICY_VIOLATION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UrlMetadata_UrlSource_ServerSuppliedPolicyViolation;
/** Value: "URL_SOURCE_UNKNOWN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UrlMetadata_UrlSource_UrlSourceUnknown;
/** Value: "USER_SUPPLIED_URL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UrlMetadata_UrlSource_UserSuppliedUrl;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_User.userAccountState

/**
 *  User account is deleted
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_User_UserAccountState_Deleted;
/**
 *  User doesn't have Dynamite enabled. This includes service disabled by admin,
 *  or user's account is suspended
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_User_UserAccountState_Disabled;
/**
 *  User has Dynamite enabled.
 *
 *  Value: "ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_User_UserAccountState_Enabled;
/**
 *  Failed to retrieve user's info. Will use user's email address as name and
 *  first_name.
 *
 *  Value: "TEMPORARY_UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_User_UserAccountState_TemporaryUnavailable;
/** Value: "UNKNOWN_USER_ACCOUNT_STATE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_User_UserAccountState_UnknownUserAccountState;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_User.userProfileVisibility

/**
 *  Caller can only see the target user as a deleted user. Email is empty. Names
 *  are redacted as "Deleted User".
 *
 *  Value: "DELETED_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_User_UserProfileVisibility_DeletedUser;
/**
 *  Stubby failed. Clients should always retry ASAP
 *
 *  Value: "FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_User_UserProfileVisibility_Failure;
/**
 *  Caller has full visibility.
 *
 *  Value: "FULL_PROFILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_User_UserProfileVisibility_FullProfile;
/**
 *  Caller can only see the email used to invite the target user
 *
 *  Value: "INVITEE_EMAIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_User_UserProfileVisibility_InviteeEmail;
/**
 *  Caller can only see target user's primary email from Gaia
 *
 *  Value: "PRIMARY_MAIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_User_UserProfileVisibility_PrimaryMail;
/**
 *  Caller has no visibility to the target user at all. Email is empty. Names
 *  are redacted as "Unknown User".
 *
 *  Value: "UNKNOWN_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_User_UserProfileVisibility_UnknownUser;
/** Value: "UNKNOWN_USER_PROFILE_VISIBILITY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_User_UserProfileVisibility_UnknownUserProfileVisibility;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_UserId.type

/** Value: "BOT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UserId_Type_Bot;
/**
 *  Notes on HUMAN type: 1) Leaving UserId.UserType field empty will return
 *  HUMAN as default value. This is expected because all the existing UserIds
 *  are without explicitly setting UserType, most of which are HUMAN Ids. For
 *  Bot Ids we will always set BOT in UserType field. 2) DO NOT explicitly set
 *  HUMAN as type. This is a proto2 issue, that a UserId with explicitly set
 *  default value HUMAN as type is NOT equal to an id without setting the field.
 *  aka. UserId id1 = UserId.newBuilder()
 *  .setId("dummy").setType(UserType.HUMAN).build(); UserId id2 =
 *  UserId.newBuilder().setId("dummy").build(); AssertThat(id1).isNotEqual(id2);
 *  AssertThat(id2.getType()).isEqualTo(UserType.HUMAN);
 *
 *  Value: "HUMAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UserId_Type_Human;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_UserInfo.updaterCountDisplayType

/**
 *  A precise updater count is known and the value set in updater_count_to_show
 *  should be used. If set, updater_count_to_show is set to the total number of
 *  updaters minus the one set in updater_to_show. Shows up in clients as
 *  "$USERNAME and $NUM others replied".
 *
 *  Value: "EXACT_COUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UserInfo_UpdaterCountDisplayType_ExactCount;
/**
 *  No additional updaters where involved. Shows up in clients as "$USERNAME
 *  replied".
 *
 *  Value: "NO_DISPLAY_COUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UserInfo_UpdaterCountDisplayType_NoDisplayCount;
/**
 *  A precise updater count could not be calculated, but there is at least one.
 *  Any value set in updater_count_to_show should NOT be used. Shows up in
 *  clients as "$USERNAME and others replied".
 *
 *  Value: "NONZERO_COUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UserInfo_UpdaterCountDisplayType_NonzeroCount;
/** Value: "UPDATER_COUNT_DISPLAY_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UserInfo_UpdaterCountDisplayType_UpdaterCountDisplayTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_UserMentionMetadata.type

/**
 *  Server-generated user mention, for clients to strikethrough.
 *
 *  Value: "FAILED_TO_ADD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UserMentionMetadata_Type_FailedToAdd;
/** Value: "INVITE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UserMentionMetadata_Type_Invite;
/** Value: "MENTION" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UserMentionMetadata_Type_Mention;
/** Value: "MENTION_ALL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UserMentionMetadata_Type_MentionAll;
/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UserMentionMetadata_Type_TypeUnspecified;
/** Value: "UNINVITE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_UserMentionMetadata_Type_Uninvite;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_VoicePhoneNumberI18nData.validationResult

/** Value: "INVALID_COUNTRY_CODE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_VoicePhoneNumberI18nData_ValidationResult_InvalidCountryCode;
/** Value: "INVALID_LENGTH" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_VoicePhoneNumberI18nData_ValidationResult_InvalidLength;
/** Value: "IS_POSSIBLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_VoicePhoneNumberI18nData_ValidationResult_IsPossible;
/** Value: "IS_POSSIBLE_LOCAL_ONLY" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_VoicePhoneNumberI18nData_ValidationResult_IsPossibleLocalOnly;
/** Value: "TOO_LONG" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_VoicePhoneNumberI18nData_ValidationResult_TooLong;
/** Value: "TOO_SHORT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_VoicePhoneNumberI18nData_ValidationResult_TooShort;
/** Value: "UNKNOWN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_VoicePhoneNumberI18nData_ValidationResult_Unknown;

// ----------------------------------------------------------------------------
// GTLRCloudSearch_WidgetMarkup.horizontalAlignment

/** Value: "CENTER" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_WidgetMarkup_HorizontalAlignment_Center;
/** Value: "END" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_WidgetMarkup_HorizontalAlignment_End;
/** Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_WidgetMarkup_HorizontalAlignment_HorizontalAlignmentUnspecified;
/** Value: "START" */
FOUNDATION_EXTERN NSString * const kGTLRCloudSearch_WidgetMarkup_HorizontalAlignment_Start;

/**
 *  Abuse reporting configuration outlining what is supported in this
 *  conference.
 */
@interface GTLRCloudSearch_AbuseReportingConfig : GTLRObject

/**
 *  Whether the current call may include video recordings in its abuse reports.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recordingAllowed;

/**
 *  Whether the current call may include user generated content (chat, polls,
 *  Q&A...) in its abuse reports.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *writtenUgcAllowed;

@end


/**
 *  Information about how devices in a meeting have acked for a
 *  session/operation.
 */
@interface GTLRCloudSearch_AckInfo : GTLRObject

/**
 *  Output only. Number of meeting devices that have not acked yet.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *unackedDeviceCount;

/**
 *  Output only. IDs of meeting devices (at most ten are provided) that have not
 *  acked yet.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unackedDeviceIds;

@end


/**
 *  The request set by clients to instruct Backend how the user intend to fix
 *  the ACL. Technically it's not a request to ACL Fixer, because Backend uses
 *  /DriveService.Share to modify Drive ACLs.
 */
@interface GTLRCloudSearch_AclFixRequest : GTLRObject

/**
 *  For Spaces messages: This field is ignored. For DMs messages: The list of
 *  email addresses that should be added to the Drive item's ACL. In general,
 *  the list should not be empty when the boolean "should_fix" field is set;
 *  otherwise, the list should be empty. During transition - when clients do not
 *  specify this field but the "should_fix" is true, we follow the legacy
 *  behavior: share to all users in the DM regardless of emails. This behavior
 *  is being phased out.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *recipientEmails;

/**
 *  role
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AclFixRequest_Role_Commenter Value "COMMENTER"
 *    @arg @c kGTLRCloudSearch_AclFixRequest_Role_Reader Value "READER"
 *    @arg @c kGTLRCloudSearch_AclFixRequest_Role_Unknown Value "UNKNOWN"
 *    @arg @c kGTLRCloudSearch_AclFixRequest_Role_Writer Value "WRITER"
 */
@property(nonatomic, copy, nullable) NSString *role;

/**
 *  Whether to attempt to fix the ACL by adding the room or DM members to the
 *  Drive file's ACL.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shouldFix;

@end


/**
 *  The message reconstructed based on information in the response of
 *  /PermissionFixOptionsService.Query (or the Apiary API that wraps it).
 *  Indicates the ability of the requester to change the access to the Drive
 *  file for the room roster or the DM members. Used in
 *  GetMessagePreviewMetadataResponse only.
 */
@interface GTLRCloudSearch_AclFixStatus : GTLRObject

/**
 *  fixability
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AclFixStatus_Fixability_AclFixerError Value
 *        "ACL_FIXER_ERROR"
 *    @arg @c kGTLRCloudSearch_AclFixStatus_Fixability_AlreadyAccessible Value
 *        "ALREADY_ACCESSIBLE"
 *    @arg @c kGTLRCloudSearch_AclFixStatus_Fixability_CanFix Value "CAN_FIX"
 *    @arg @c kGTLRCloudSearch_AclFixStatus_Fixability_CannotFix Value
 *        "CANNOT_FIX"
 *    @arg @c kGTLRCloudSearch_AclFixStatus_Fixability_Unknown Value "UNKNOWN"
 */
@property(nonatomic, copy, nullable) NSString *fixability;

/**
 *  List of recipient email addresses for which access can be granted. This
 *  field contains the same email addresses from the GetMessagePreviewMetadata
 *  request if all recipients can be successfully added to the ACL as determined
 *  by Drive ACL Fixer. For now, the field is non-empty if and only if the
 *  "fixability" value is "CAN_FIX".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *fixableEmailAddress;

/**
 *  List of recipient email addresses for which an out-of-domain-sharing warning
 *  must be shown, stating that these email addresses are not in the Google Apps
 *  organization that the requested item belong to. Empty if all recipients are
 *  in the same Google Apps organization.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *outOfDomainWarningEmailAddress;

@end


/**
 *  Next tag: 4
 */
@interface GTLRCloudSearch_AclInfo : GTLRObject

/**
 *  Number of groups which have at least read access to the document.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *groupsCount;

/**
 *  The scope to which the content was shared.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AclInfo_Scope_DasherDomain Now it works only for
 *        google.com. Anybody at the same domain. Now it works only (Value:
 *        "DASHER_DOMAIN")
 *    @arg @c kGTLRCloudSearch_AclInfo_Scope_DasherDomainWithLink Anybody at the
 *        same domain with the link. (Value: "DASHER_DOMAIN_WITH_LINK")
 *    @arg @c kGTLRCloudSearch_AclInfo_Scope_Limited Explicit set of people and
 *        groups. (Value: "LIMITED")
 *    @arg @c kGTLRCloudSearch_AclInfo_Scope_Public Anybody. (Value: "PUBLIC")
 *    @arg @c kGTLRCloudSearch_AclInfo_Scope_PublicWithLink for google.com.
 *        Anybody with the link. (Value: "PUBLIC_WITH_LINK")
 *    @arg @c kGTLRCloudSearch_AclInfo_Scope_TeamDrive Special tag to indicate
 *        TeamDrive scope. (Value: "TEAM_DRIVE")
 */
@property(nonatomic, copy, nullable) NSString *scope;

/**
 *  Number of users which have at least read access to the document.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *usersCount;

@end


/**
 *  List of string parameters that developers can specify when the above action
 *  method (in apps script) is invoked. An example use case is for 3 snooze
 *  buttons: snooze now, snooze 1 day, snooze next week. Developers can have
 *  action method = snooze() and pass the snooze type and snooze time in list of
 *  string parameters.
 */
@interface GTLRCloudSearch_ActionParameter : GTLRObject

@property(nonatomic, copy, nullable) NSString *key;
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRCloudSearch_AddonComposeUiActionMarkup
 */
@interface GTLRCloudSearch_AddonComposeUiActionMarkup : GTLRObject

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AddonComposeUiActionMarkup_Type_Dismiss Dismisses
 *        the add-on compose UI. (Value: "DISMISS")
 *    @arg @c kGTLRCloudSearch_AddonComposeUiActionMarkup_Type_Unspecified
 *        Default. When unspecified, no action is taken. (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Earlier we used to populate just the affected_members list and inferred the
 *  new membership state (roles didn't exist back then) from the Type.
 *  go/dynamite-finra required backend to know the previous membership state to
 *  reconstruct membership history. The proper solution involved cleaning up up
 *  Type enum, but it was used in many, many places. This was added as a
 *  stop-gap solution to unblock FINRA without breaking everything. Later role
 *  update and target audience update started relying on this to communicate
 *  information to clients about what transition happened. So this is now
 *  required to be populated and should be in sync with affected_members for new
 *  messages.
 */
@interface GTLRCloudSearch_AffectedMembership : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_MemberId *affectedMember;

/**
 *  priorMembershipRole
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AffectedMembership_PriorMembershipRole_RoleInvitee
 *        This role is used for two purposes. 1. A group is invited to a room,
 *        making it discoverable for its members. 2. A user was part of a room,
 *        but willingly left the room. (Value: "ROLE_INVITEE")
 *    @arg @c kGTLRCloudSearch_AffectedMembership_PriorMembershipRole_RoleMember
 *        --- Following roles are for joined members of a roster. --- Default
 *        role for any joined user. Has basic capabilities within a room.
 *        (Value: "ROLE_MEMBER")
 *    @arg @c kGTLRCloudSearch_AffectedMembership_PriorMembershipRole_RoleNone
 *        This role is used when a user is forcibly removed from a room by
 *        another user. They will no longer be able to search for the room, but
 *        their history will be retained. (Value: "ROLE_NONE")
 *    @arg @c kGTLRCloudSearch_AffectedMembership_PriorMembershipRole_RoleOwner
 *        Role assigned to room creators and explicitly promoted members. Has
 *        broad powers to manage the room. (Value: "ROLE_OWNER")
 *    @arg @c kGTLRCloudSearch_AffectedMembership_PriorMembershipRole_RoleUnknown
 *        Value "ROLE_UNKNOWN"
 */
@property(nonatomic, copy, nullable) NSString *priorMembershipRole;

/**
 *  priorMembershipState
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AffectedMembership_PriorMembershipState_MemberFailed
 *        This state should never be stored in Spanner. It is a state for
 *        responses to the clients to indicate that membership mutations have
 *        failed and the member is in its previous state. (Value:
 *        "MEMBER_FAILED")
 *    @arg @c kGTLRCloudSearch_AffectedMembership_PriorMembershipState_MemberInvited
 *        An invitation to the space has been sent (Value: "MEMBER_INVITED")
 *    @arg @c kGTLRCloudSearch_AffectedMembership_PriorMembershipState_MemberJoined
 *        User has joined the space (Value: "MEMBER_JOINED")
 *    @arg @c kGTLRCloudSearch_AffectedMembership_PriorMembershipState_MemberNotAMember
 *        User is not a member (Value: "MEMBER_NOT_A_MEMBER")
 *    @arg @c kGTLRCloudSearch_AffectedMembership_PriorMembershipState_MemberUnknown
 *        Default state, do not use (Value: "MEMBER_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *priorMembershipState;

/**
 *  targetMembershipRole
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AffectedMembership_TargetMembershipRole_RoleInvitee
 *        This role is used for two purposes. 1. A group is invited to a room,
 *        making it discoverable for its members. 2. A user was part of a room,
 *        but willingly left the room. (Value: "ROLE_INVITEE")
 *    @arg @c kGTLRCloudSearch_AffectedMembership_TargetMembershipRole_RoleMember
 *        --- Following roles are for joined members of a roster. --- Default
 *        role for any joined user. Has basic capabilities within a room.
 *        (Value: "ROLE_MEMBER")
 *    @arg @c kGTLRCloudSearch_AffectedMembership_TargetMembershipRole_RoleNone
 *        This role is used when a user is forcibly removed from a room by
 *        another user. They will no longer be able to search for the room, but
 *        their history will be retained. (Value: "ROLE_NONE")
 *    @arg @c kGTLRCloudSearch_AffectedMembership_TargetMembershipRole_RoleOwner
 *        Role assigned to room creators and explicitly promoted members. Has
 *        broad powers to manage the room. (Value: "ROLE_OWNER")
 *    @arg @c kGTLRCloudSearch_AffectedMembership_TargetMembershipRole_RoleUnknown
 *        Value "ROLE_UNKNOWN"
 */
@property(nonatomic, copy, nullable) NSString *targetMembershipRole;

@end


/**
 *  Represents a principal who has authenticated as any kind of user which the
 *  application understands. This is typically used for "wiki-like" security,
 *  where anyone is allowed access so long as they can be held accountable for
 *  that access. Since the purpose is knowing whom to blame, it is up to the
 *  application to decide what kinds of users it knows how to blame. For
 *  example, an application might choose to include GAIA users in "all
 *  authenticated users", but not include MDB users. Nothing here.
 */
@interface GTLRCloudSearch_AllAuthenticatedUsersProto : GTLRObject
@end


/**
 *  NOTE WHEN ADDING NEW PROTO FIELDS: Be sure to add datapol annotations to new
 *  fields with potential PII, so they get scrubbed when logging protos for
 *  errors. NEXT TAG: 29
 */
@interface GTLRCloudSearch_Annotation : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_BabelPlaceholderMetadata *babelPlaceholderMetadata;

/**
 *  LINT.ThenChange(//depot/google3/java/com/google/apps/dynamite/v1/backend/action/common/SystemMessageHelper.java)
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_CardCapabilityMetadata *cardCapabilityMetadata;

/**
 *  Whether the annotation should be rendered as a chip. If this is missing or
 *  unspecified, fallback to should_not_render on the metadata.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Annotation_ChipRenderType_ChipRenderTypeUnspecified
 *        Value "CHIP_RENDER_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_Annotation_ChipRenderType_DoNotRender Client
 *        should not render the annotation as a chip. (Value: "DO_NOT_RENDER")
 *    @arg @c kGTLRCloudSearch_Annotation_ChipRenderType_Render Clients must
 *        render the annotation as a chip, and if they cannot render this many
 *        Annotations, show a fallback card. (Value: "RENDER")
 *    @arg @c kGTLRCloudSearch_Annotation_ChipRenderType_RenderIfPossible Client
 *        can render the annotation if it has room to render it. (Value:
 *        "RENDER_IF_POSSIBLE")
 */
@property(nonatomic, copy, nullable) NSString *chipRenderType;

@property(nonatomic, strong, nullable) GTLRCloudSearch_ConsentedAppUnfurlMetadata *consentedAppUnfurlMetadata;
@property(nonatomic, strong, nullable) GTLRCloudSearch_CustomEmojiMetadata *customEmojiMetadata;
@property(nonatomic, strong, nullable) GTLRCloudSearch_DataLossPreventionMetadata *dataLossPreventionMetadata;

/** Chip annotations */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DriveMetadata *driveMetadata;

@property(nonatomic, strong, nullable) GTLRCloudSearch_FormatMetadata *formatMetadata;
@property(nonatomic, strong, nullable) GTLRCloudSearch_GroupRetentionSettingsUpdatedMetaData *groupRetentionSettingsUpdated;

/**
 *  Metadata for 1P integrations like tasks, calendar. These are supported only
 *  through integration server as 1P integrations use the integration API (which
 *  in turn uses backend API with special permissions) to post messages. Clients
 *  should never set this. LINT.IfChange
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GsuiteIntegrationMetadata *gsuiteIntegrationMetadata;

@property(nonatomic, strong, nullable) GTLRCloudSearch_IncomingWebhookChangedMetadata *incomingWebhookChangedMetadata;

/**
 *  LINT.ThenChange(//depot/google3/java/com/google/apps/dynamite/v1/backend/action/common/SystemMessageHelper.java)
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_IntegrationConfigUpdatedMetadata *integrationConfigUpdated;

/**
 *  Length of the text_body substring beginning from start_index the Annotation
 *  corresponds to.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/**
 *  A unique client-assigned ID for this annotation. This is helpful in matching
 *  the back-filled annotations to the original annotations on client side,
 *  without having to re-parse the message.
 */
@property(nonatomic, copy, nullable) NSString *localId;

/**
 *  Metadata for system messages. Clients should never set this. LINT.IfChange
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_MembershipChangedMetadata *membershipChanged;

@property(nonatomic, strong, nullable) GTLRCloudSearch_ReadReceiptsSettingsUpdatedMetadata *readReceiptsSettingsMetadata;

/**
 *  Metadata that defines all of the required features that must be rendered in
 *  the message. Clients can use this to see whether they support the entire
 *  message, or show a fallback chip otherwise. See
 *  go/message-quoting-client-to-server for details. LINT.ThenChange(
 *  //depot/google3/java/com/google/apps/dynamite/v1/allshared/parser/AnnotationSanitizer.java,
 *  //depot/google3/java/com/google/apps/dynamite/v1/backend/action/common/SystemMessageHelper.java,
 *  //depot/google3/java/com/google/caribou/eli/mediation/chat/AnnotationTranslator.java
 *  )
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RequiredMessageFeaturesMetadata *requiredMessageFeaturesMetadata;

@property(nonatomic, strong, nullable) GTLRCloudSearch_RoomUpdatedMetadata *roomUpdated;

/**
 *  Whether or not the annotation is invalidated by the server. Example of
 *  situations for invalidation include: when the URL is malformed, or when
 *  Drive item ID is rejected by Drive Service.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *serverInvalidated;

@property(nonatomic, strong, nullable) GTLRCloudSearch_SlashCommandMetadata *slashCommandMetadata;

/**
 *  Start index (0-indexed) of the Message text the Annotation corresponds to,
 *  inclusive.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startIndex;

/**
 *  Type of the Annotation.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Annotation_Type_BabelPlaceholder Value
 *        "BABEL_PLACEHOLDER"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_CardCapability Card capability
 *        for in-stream widgets. (Value: "CARD_CAPABILITY")
 *    @arg @c kGTLRCloudSearch_Annotation_Type_ConsentedAppUnfurl Value
 *        "CONSENTED_APP_UNFURL"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_CustomEmoji Value "CUSTOM_EMOJI"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_DataLossPrevention Value
 *        "DATA_LOSS_PREVENTION"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_DriveDoc Value "DRIVE_DOC"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_DriveFile Any drive file (Value:
 *        "DRIVE_FILE")
 *    @arg @c kGTLRCloudSearch_Annotation_Type_DriveForm Value "DRIVE_FORM"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_DriveSheet Value "DRIVE_SHEET"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_DriveSlide Value "DRIVE_SLIDE"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_FormatData UI should not be
 *        concerned with FORMAT_DATA (Value: "FORMAT_DATA")
 *    @arg @c kGTLRCloudSearch_Annotation_Type_GroupRetentionSettingsUpdated
 *        Value "GROUP_RETENTION_SETTINGS_UPDATED"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_GsuiteIntegration Generic
 *        annotation for gsuite integrations (Value: "GSUITE_INTEGRATION")
 *    @arg @c kGTLRCloudSearch_Annotation_Type_Image Value "IMAGE"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_IncomingWebhookChanged Value
 *        "INCOMING_WEBHOOK_CHANGED"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_IntegrationConfigUpdated Value
 *        "INTEGRATION_CONFIG_UPDATED"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_Invitation Message-level
 *        annotations. First message of an invite. Should not be set by clients.
 *        (Value: "INVITATION")
 *    @arg @c kGTLRCloudSearch_Annotation_Type_MembershipChanged Annotation
 *        types for system messages. Clients should never set this. (Value:
 *        "MEMBERSHIP_CHANGED")
 *    @arg @c kGTLRCloudSearch_Annotation_Type_Pdf Value "PDF"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_ReadReceiptsSettingsUpdated Value
 *        "READ_RECEIPTS_SETTINGS_UPDATED"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_RequiredMessageFeaturesMetadata
 *        Clients can use this to see whether they support the entire message,
 *        or show a fallback chip otherwise. (Value:
 *        "REQUIRED_MESSAGE_FEATURES_METADATA")
 *    @arg @c kGTLRCloudSearch_Annotation_Type_RoomUpdated Value "ROOM_UPDATED"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_SlashCommand Value
 *        "SLASH_COMMAND"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_TypeUnspecified Default value for
 *        the enum. DO NOT USE. (Value: "TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_Annotation_Type_UploadMetadata Blobstore uploads
 *        (Value: "UPLOAD_METADATA")
 *    @arg @c kGTLRCloudSearch_Annotation_Type_Url These can have overlaps, i.e.
 *        same message can have multiple of these. For example a Drive link to a
 *        PDF can have URL, DRIVE_FILE and PDF all set Links (Value: "URL")
 *    @arg @c kGTLRCloudSearch_Annotation_Type_UserMention Value "USER_MENTION"
 *    @arg @c kGTLRCloudSearch_Annotation_Type_Video Any video, not just
 *        youtube, the url decides how to play (Value: "VIDEO")
 *    @arg @c kGTLRCloudSearch_Annotation_Type_VideoCall For Thor integration
 *        (Value: "VIDEO_CALL")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  A unique server-assigned ID for this annotation. This is helpful in matching
 *  annotation objects when fetched from service.
 */
@property(nonatomic, copy, nullable) NSString *uniqueId;

@property(nonatomic, strong, nullable) GTLRCloudSearch_UploadMetadata *uploadMetadata;
@property(nonatomic, strong, nullable) GTLRCloudSearch_UrlMetadata *urlMetadata;

/**
 *  Metadata that clients can set for annotations. LINT.IfChange In-text
 *  annotations
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserMentionMetadata *userMentionMetadata;

@property(nonatomic, strong, nullable) GTLRCloudSearch_VideoCallMetadata *videoCallMetadata;
@property(nonatomic, strong, nullable) GTLRCloudSearch_YoutubeMetadata *youtubeMetadata;

@end


/**
 *  Identifier of an App.
 */
@interface GTLRCloudSearch_AppId : GTLRObject

/**
 *  Enum indicating the type of App this is.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppId_AppType_App 3P APP eg. external Bots(Asana
 *        Bot), 1P Bots(Drive Bot). (Value: "APP")
 *    @arg @c kGTLRCloudSearch_AppId_AppType_AppTypeUnspecified Value
 *        "APP_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_AppId_AppType_GsuiteApp 1P APP eg. Tasks, Meet,
 *        Docs, Calendar.. (Value: "GSUITE_APP")
 *    @arg @c kGTLRCloudSearch_AppId_AppType_IncomingWebhook Asynchronous
 *        messages via an incoming webhook. (Value: "INCOMING_WEBHOOK")
 */
@property(nonatomic, copy, nullable) NSString *appType;

/**
 *  Enum indicating which 1P App this is when app_type is GSUITE_APP. Determined
 *  & set by the 1P API as a convenience for all users of this identifier(Eg.
 *  clients, chime, backend etc.) to map to 1P properties.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppId_GsuiteAppType_ActivityFeedApp Value
 *        "ACTIVITY_FEED_APP"
 *    @arg @c kGTLRCloudSearch_AppId_GsuiteAppType_AssistiveSuggestionApp
 *        Powered by Bullseye (Value: "ASSISTIVE_SUGGESTION_APP")
 *    @arg @c kGTLRCloudSearch_AppId_GsuiteAppType_CalendarApp Value
 *        "CALENDAR_APP"
 *    @arg @c kGTLRCloudSearch_AppId_GsuiteAppType_ChatInMeetApp Value
 *        "CHAT_IN_MEET_APP"
 *    @arg @c kGTLRCloudSearch_AppId_GsuiteAppType_ContactsApp Value
 *        "CONTACTS_APP"
 *    @arg @c kGTLRCloudSearch_AppId_GsuiteAppType_DocsApp Value "DOCS_APP"
 *    @arg @c kGTLRCloudSearch_AppId_GsuiteAppType_DriveApp Value "DRIVE_APP"
 *    @arg @c kGTLRCloudSearch_AppId_GsuiteAppType_GsuiteAppTypeUnspecified
 *        Value "GSUITE_APP_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_AppId_GsuiteAppType_MeetApp Value "MEET_APP"
 *    @arg @c kGTLRCloudSearch_AppId_GsuiteAppType_SheetsApp Value "SHEETS_APP"
 *    @arg @c kGTLRCloudSearch_AppId_GsuiteAppType_SlidesApp Value "SLIDES_APP"
 *    @arg @c kGTLRCloudSearch_AppId_GsuiteAppType_TasksApp Value "TASKS_APP"
 */
@property(nonatomic, copy, nullable) NSString *gsuiteAppType;

/**
 *  Numeric identifier of the App. Set to Project number for 1/3P Apps. For
 *  Webhook, this is WebhookId. Determined & set by the 1P API from App
 *  credentials on the side channel.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

@end


/**
 *  An action that describes the behavior when the form is submitted. For
 *  example, an Apps Script can be invoked to handle the form.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedAction : GTLRObject

/**
 *  Apps Script function to invoke when the containing element is
 *  clicked/activated.
 */
@property(nonatomic, copy, nullable) NSString *function;

/**
 *  interaction
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAction_Interaction_InteractionUnspecified
 *        Default value if interaction is not specified. (Value:
 *        "INTERACTION_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAction_Interaction_OpenDialog A
 *        dialog opens by clicking the button. (Value: "OPEN_DIALOG")
 */
@property(nonatomic, copy, nullable) NSString *interaction;

/**
 *  loadIndicator
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAction_LoadIndicator_None
 *        Nothing is displayed. (Value: "NONE")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAction_LoadIndicator_Spinner
 *        Displays a spinner to indicate that content is loading. (Value:
 *        "SPINNER")
 */
@property(nonatomic, copy, nullable) NSString *loadIndicator;

/** List of action parameters. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedActionActionParameter *> *parameters;

@end


/**
 *  List of string parameters to supply when the action method is invoked. For
 *  example, consider three snooze buttons: snooze now, snooze 1 day, snooze
 *  next week. You might use action method = snooze(), passing the snooze type
 *  and snooze time in the list of string parameters.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedActionActionParameter : GTLRObject

/** The name of the parameter for the action script. */
@property(nonatomic, copy, nullable) NSString *key;

/** The value of the parameter. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Next Id: 7
 */
@interface GTLRCloudSearch_AppsDynamiteSharedActivityFeedAnnotationData : GTLRObject

/**
 *  Timestamp of when the Activity Feed message that contains this annotation
 *  was created. This is roughly when the activity happened, such as when a
 *  reaction happened, but will have at least some small delay, since the
 *  Activity Feed message is created asynchronously after. This timestamp should
 *  only be used for display when the activity create time is not available in
 *  the Chat UI, like the time of a reaction.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *activityFeedMessageCreateTime;

/**
 *  Unique id of the Activity Feed message used by clients to implement
 *  click-to-source. This is the same messageId as the top-level id field for
 *  the Activity Feed item.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_MessageId *activityFeedMessageId;

@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedChatItem *chatItem;

/** Only populated on read path and should not be persisted in storage. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserInfo *sharedUserInfo;

/** Use shared_user_info instead. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedActivityFeedAnnotationDataUserInfo *userInfo;

@end


/**
 *  UserId of the AF item updater to show and the updater count to show.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedActivityFeedAnnotationDataUserInfo : GTLRObject

/**
 *  Describes how updater_count_to_show should be used.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedActivityFeedAnnotationDataUserInfo_UpdaterCountDisplayType_ExactCount
 *        A precise updater count is known and the value set in
 *        updater_count_to_show should be used. (Value: "EXACT_COUNT")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedActivityFeedAnnotationDataUserInfo_UpdaterCountDisplayType_NonzeroCount
 *        A precise updater count could not be calculated, but there is at least
 *        one. Any value set in updater_count_to_show should NOT be used.
 *        (Value: "NONZERO_COUNT")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedActivityFeedAnnotationDataUserInfo_UpdaterCountDisplayType_UpdaterCountDisplayTypeUnspecified
 *        Value "UPDATER_COUNT_DISPLAY_TYPE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *updaterCountDisplayType;

/**
 *  The number of updaters for clients to show, currently set to the total
 *  number of updaters minus the one set in updater_to_show.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *updaterCountToShow;

/** The updater for clients to show. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *updaterToShow;

@end


/**
 *  Optional field for apps overriding display info
 */
@interface GTLRCloudSearch_AppsDynamiteSharedAppProfile : GTLRObject

/** Displayed user avatar emoji. */
@property(nonatomic, copy, nullable) NSString *avatarEmoji;

/** Displayed user avatar url. */
@property(nonatomic, copy, nullable) NSString *avatarUrl;

/** Displayed user name. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  This is the internal version of the API proto at
 *  google3/google/chat/v1/gsuite_message_integration.proto Data used to render
 *  Assistant suggestions. See go/bullseye-rendering.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedAssistantAnnotationData : GTLRObject

/** The suggestion to render in the card. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedAssistantSuggestion *suggestion;

/**
 *  Set when the initial query was unfulfillable. Only an on-demand
 *  unfulfillable query will result in a response (not a proactive query). 1.
 *  On-demand: user explicitly invokes the bot 2. Proactive: bot makes proactive
 *  suggestion (when available) by listening to all user messages.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedAssistantUnfulfillableRequest *unfulfillable;

@end


/**
 *  Represents info regarding suggestion debug information.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedAssistantDebugContext : GTLRObject

/** The query that triggered the resulting suggestion. */
@property(nonatomic, copy, nullable) NSString *query;

@end


/**
 *  Data needed to render feedback on the Assistant card
 */
@interface GTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContext : GTLRObject

/** Specifies a list of feedback chips to show */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip *> *feedbackChips;

/**
 *  Whether the thumbs feedback is provided
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContext_ThumbsFeedback_Down
 *        Thumbs down selected (Value: "DOWN")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContext_ThumbsFeedback_NoneSelected
 *        Thumbs are not selected (Value: "NONE_SELECTED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContext_ThumbsFeedback_ThumbsFeedbackUnspecified
 *        Unspecified thumbs state (Value: "THUMBS_FEEDBACK_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContext_ThumbsFeedback_Up
 *        Thumbs up selected (Value: "UP")
 */
@property(nonatomic, copy, nullable) NSString *thumbsFeedback;

@end


/**
 *  Suggestion chips for users to indicate positive or negative feedback
 */
@interface GTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip : GTLRObject

/**
 *  What type of chip to display
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_FeedbackChipType_CorrectFile
 *        The correct files were presented (Value: "CORRECT_FILE")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_FeedbackChipType_CorrectTrigger
 *        The Assistant card triggered appropriately (Value: "CORRECT_TRIGGER")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_FeedbackChipType_Disruptive
 *        The feature is disruptive (Value: "DISRUPTIVE")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_FeedbackChipType_FeedbackChipTypeUnspecified
 *        Unspecified type of feedback chip (Value:
 *        "FEEDBACK_CHIP_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_FeedbackChipType_Other
 *        Other reason (Value: "OTHER")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_FeedbackChipType_WrongFile
 *        Incorrect files were presented (Value: "WRONG_FILE")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_FeedbackChipType_WrongTrigger
 *        Bad/noisy triggering (Value: "WRONG_TRIGGER")
 */
@property(nonatomic, copy, nullable) NSString *feedbackChipType;

/**
 *  Whether the chip has been selected
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_State_FeedbackChipStateUnspecified
 *        Unspecified selection state (Value: "FEEDBACK_CHIP_STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_State_Selected
 *        Chip is selected (Value: "SELECTED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContextFeedbackChip_State_Unselected
 *        Chip is not selected (Value: "UNSELECTED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Session context specific for Assistant suggestions.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedAssistantSessionContext : GTLRObject

/**
 *  Unique identifier populated by the contextual request handler for each
 *  vertical (Ex: File Suggestions, Smart Scheduling, etc.) that can be used to
 *  track sessions end-to-end. May span multiple users (sender-specific).
 */
@property(nonatomic, copy, nullable) NSString *contextualSessionId;

@end


/**
 *  Data for an Assistant suggestion.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedAssistantSuggestion : GTLRObject

/** Info regarding suggestion debug information. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedAssistantDebugContext *debugContext;

/** Data for rendering feedback. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedAssistantFeedbackContext *feedbackContext;

/** Suggestion type that suggests documents (docs, slides, sheets). */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedFindDocumentSuggestion *findDocumentSuggestion;

/** String representation of the suggestions provided. */
@property(nonatomic, copy, nullable) NSString *serializedSuggestions;

/** Session context specific to the Assistant suggestion. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedAssistantSessionContext *sessionContext;

@end


/**
 *  Data for a response to an unfulfillable request.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedAssistantUnfulfillableRequest : GTLRObject
@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedAvatarInfo
 */
@interface GTLRCloudSearch_AppsDynamiteSharedAvatarInfo : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedEmoji *emoji;

@end


/**
 *  Metadata used only in Dynamite backend for uploaded attachments.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata : GTLRObject

/** Blobstore path for the uploaded attachment */
@property(nonatomic, copy, nullable) NSString *blobPath;

/** The original file name for the content, not the full path. */
@property(nonatomic, copy, nullable) NSString *contentName;

/**
 *  Scotty reported content size by default.
 *  http://google3/uploader/agent/scotty_agent.proto?l=101&rcl=140889785
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *contentSize;

/**
 *  Type is from Scotty's best_guess by default:
 *  http://google3/uploader/agent/scotty_agent.proto?l=51&rcl=140889785
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  The results of the Data Loss Prevention (DLP) scan of the attachment.
 *  DEPRECATED: use dlp_scan_summary instead.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanFailureAllRulesFailed
 *        Rule fetch completed and evaluation were attempted, but all of the
 *        rules failed to be evaluated. (Value: "SCAN_FAILURE_ALL_RULES_FAILED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanFailureException
 *        Rule fetch and evaluation were attempted but an exception occurred.
 *        (Value: "SCAN_FAILURE_EXCEPTION")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanFailureIllegalStateForAttachments
 *        An IllegalStateException is thrown when executing DLP on attachments.
 *        This could happen if the space row is missing. (Value:
 *        "SCAN_FAILURE_ILLEGAL_STATE_FOR_ATTACHMENTS")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanFailureTimeout
 *        Rule fetch and evaluation were attempted but the scanning timed out.
 *        (Value: "SCAN_FAILURE_TIMEOUT")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanRuleEvaluationSkippedChangelingEmptyResponse
 *        Rule fetch happened, but rule evaluation is skipped because Changeling
 *        returned an empty response while converting the attachment to text.
 *        (Value: "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_EMPTY_RESPONSE")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanRuleEvaluationSkippedChangelingPermanentError
 *        Rule fetch happened, but rule evaluation is skipped because Changeling
 *        returned permanent failure while converting the attachment to text.
 *        (Value: "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_PERMANENT_ERROR")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanRuleEvaluationSkippedNoApplicableRulesForActionParams
 *        Rule fetch happened, but rule evaluation is skipped because none of
 *        the rules are applicable to the given action params. (Value:
 *        "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_ACTION_PARAMS")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanRuleEvaluationSkippedNoApplicableRulesForTrigger
 *        Rule fetch happened, but rule evaluation is skipped because none of
 *        the rules are applicable to the given trigger. (Value:
 *        "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_TRIGGER")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanRuleEvaluationSkippedNoRulesFound
 *        Rule fetch happened, but rule evaluation is skipped because no rules
 *        were found. (Value: "SCAN_RULE_EVALUATION_SKIPPED_NO_RULES_FOUND")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSkippedConsumer
 *        Rule fetch and evaluation are skipped because the user sending message
 *        is consumer. (Value: "SCAN_SKIPPED_CONSUMER")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSkippedExperimentDisabled
 *        Rule fetch and evaluation is skipped because DLP is not enabled for
 *        the user. (Value: "SCAN_SKIPPED_EXPERIMENT_DISABLED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSkippedMessageFromUnsupportedOrigin
 *        Scanning was skipped because the message originated from Interop or
 *        Babel. (Value: "SCAN_SKIPPED_MESSAGE_FROM_UNSUPPORTED_ORIGIN")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSkippedNoMessage
 *        Rule fetch and evaluation are skipped because there is no message to
 *        scan. Deprecated: this should not happen since there must be message
 *        or attachment for DLP scan. (Value: "SCAN_SKIPPED_NO_MESSAGE")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSkippedNonHumanUser
 *        Rule fetch and evaluation are skipped because the user sending message
 *        is a non-human user (i.e. a bot). (Value:
 *        "SCAN_SKIPPED_NON_HUMAN_USER")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSkippedUserAcknowledgedWarning
 *        Rule fetch and evaluation are skipped because the user has
 *        acknowledged the warning on the message that triggered the Warn
 *        violation and sent the message anyway. (Value:
 *        "SCAN_SKIPPED_USER_ACKNOWLEDGED_WARNING")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSucceededAuditOnly
 *        Violation is detected and will be logged to BIP (no user-facing action
 *        performed). (Value: "SCAN_SUCCEEDED_AUDIT_ONLY")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSucceededBlock
 *        Violation is detected. The message/attachment will be blocked (or
 *        deleted if this happens in failure recovery), the user will be warned,
 *        and the violation will be logged to BIP. (Value:
 *        "SCAN_SUCCEEDED_BLOCK")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSucceededNoViolation
 *        This means no violation is detected on the given message/attachment.
 *        (Value: "SCAN_SUCCEEDED_NO_VIOLATION")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSucceededWarn
 *        Violation is detected. The user will be warned, and the violation will
 *        be logged to BIP. (Value: "SCAN_SUCCEEDED_WARN")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSucceededWithFailuresAuditOnly
 *        Rules were fetched but some evaluations failed. An audit-only
 *        violation was found in the rules that were successfully evaluated. The
 *        violation will be logged to BIP (no user-facing action performed).
 *        (Value: "SCAN_SUCCEEDED_WITH_FAILURES_AUDIT_ONLY")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSucceededWithFailuresBlock
 *        Rules were fetched but some evaluations failed. A blocking violation
 *        was found in the rules that were successfully evaluated. The
 *        message/attachment will be blocked, the user will be notified, and the
 *        violation will be logged to BIP. A blocking violation takes precedence
 *        over all other violation types. (Value:
 *        "SCAN_SUCCEEDED_WITH_FAILURES_BLOCK")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSucceededWithFailuresNoViolation
 *        Rules were fetched but some evaluations failed. No violation was found
 *        in the rules that were successfully evaluated. (Value:
 *        "SCAN_SUCCEEDED_WITH_FAILURES_NO_VIOLATION")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanSucceededWithFailuresWarn
 *        Rules were fetched but some evaluations failed. A warn violation was
 *        found in the rules that were successfully evaluated. The user will be
 *        warned, and the violation will be logged to BIP. (Value:
 *        "SCAN_SUCCEEDED_WITH_FAILURES_WARN")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_DlpScanOutcome_ScanUnknownOutcome
 *        Value "SCAN_UNKNOWN_OUTCOME"
 */
@property(nonatomic, copy, nullable) NSString *dlpScanOutcome;

/**
 *  Summary of a Data Loss Prevention (DLP) scan of the attachment. Attachments
 *  are evaluated in the backend when they are uploaded.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DlpScanSummary *dlpScanSummary;

/** GroupId to which this attachment is uploaded. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GroupId *groupId;

/** Original dimension of the content. Only set for image attachments. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedDimension *originalDimension;

/**
 *  The message id of a quote reply referencing this attachment. When present,
 *  this attachment has been quoted in a reply message. Normally, the attachment
 *  is fetched through the message id in the blob_path, but in the case of a
 *  quote reply, the blob_path would contain the quoted message id. Thus this
 *  message id field is needed to fetch the quote reply message instead. This
 *  field is conditionally populated at read time for quotes and never persisted
 *  in storage. See go/message-quoting-attachments for more context.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_MessageId *quoteReplyMessageId;

/**
 *  The SHA256 hash of the attachment bytes.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *sha256;

/**
 *  User IP address at upload time. Ex. "123.1.2.3". Used by Ares abuse
 *  scanning.
 */
@property(nonatomic, copy, nullable) NSString *uploadIp;

/**
 *  Timestamp of when user finished uploading the content.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *uploadTimestampUsec;

/**
 *  VideoID of the video attachments. This ID shall meets the Youtube ID format
 *  of 16 hex characters. For example, '4c14b8825af6059b' is a valid ID.
 */
@property(nonatomic, copy, nullable) NSString *videoId;

/** Full Blobstore ID for the video thumbnail. */
@property(nonatomic, copy, nullable) NSString *videoThumbnailBlobId;

/**
 *  Result for a virus scan.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_VirusScanResult_Clean
 *        Value "CLEAN"
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_VirusScanResult_Error
 *        Value "ERROR"
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_VirusScanResult_Infected
 *        Value "INFECTED"
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_VirusScanResult_PolicyViolation
 *        The document violates Google's policy for executables and archives.
 *        (Value: "POLICY_VIOLATION")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata_VirusScanResult_UnknownVirusScanResult
 *        Value "UNKNOWN_VIRUS_SCAN_RESULT"
 */
@property(nonatomic, copy, nullable) NSString *virusScanResult;

@end


/**
 *  Represents the complete border style applied to widgets.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedBorderStyle : GTLRObject

/**
 *  The corner radius for the border.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cornerRadius;

/** The colors to use when the type is `BORDER_TYPE_STROKE`. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Color *strokeColor;

/**
 *  The border type.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBorderStyle_Type_BorderTypeUnspecified
 *        No value specified. (Value: "BORDER_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBorderStyle_Type_NoBorder No
 *        border. (Value: "NO_BORDER")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedBorderStyle_Type_Stroke
 *        Outline. (Value: "STROKE")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A button. Can be a text button or an image button.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedButton : GTLRObject

/**
 *  The alternative text used for accessibility. Has no effect when an icon is
 *  set; use `icon.alt_text` instead.
 */
@property(nonatomic, copy, nullable) NSString *altText;

/** If set, the button is filled with a solid background. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Color *color;

/**
 *  If true, the button is displayed in a disabled state and doesn't respond to
 *  user actions.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

/** The icon image. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedIcon *icon;

/** The action to perform when the button is clicked. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedOnClick *onClick;

/** The text of the button. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A list of buttons layed out horizontally.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedButtonList : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedButton *> *buttons;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedCalendarEventAnnotationData
 */
@interface GTLRCloudSearch_AppsDynamiteSharedCalendarEventAnnotationData : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedCalendarEventAnnotationDataCalendarEvent *calendarEvent;

/** Notification about the creation of an event. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedCalendarEventAnnotationDataEventCreation *eventCreation;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedCalendarEventAnnotationDataCalendarEvent
 */
@interface GTLRCloudSearch_AppsDynamiteSharedCalendarEventAnnotationDataCalendarEvent : GTLRObject

/** The end time of the event. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedCalendarEventAnnotationDataCalendarEventTime *endTime;

/** ID of the event. */
@property(nonatomic, copy, nullable) NSString *eventId;

/** The start time of the event. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedCalendarEventAnnotationDataCalendarEventTime *startTime;

/** Title of the event (at the time the message was generated). */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedCalendarEventAnnotationDataCalendarEventTime
 */
@interface GTLRCloudSearch_AppsDynamiteSharedCalendarEventAnnotationDataCalendarEventTime : GTLRObject

/** All day event. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Date *allDay;

/** Non all day event. */
@property(nonatomic, strong, nullable) GTLRDateTime *timed;

@end


/**
 *  Creation of an event (no extra data for now).
 */
@interface GTLRCloudSearch_AppsDynamiteSharedCalendarEventAnnotationDataEventCreation : GTLRObject
@end


/**
 *  Data used to render Meet or Google Voice chips in Chat. See
 *  go/dynamite-calling-artifacts-in-chat.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedCallAnnotationData : GTLRObject

/**
 *  Timestamp when the call ended. Used to render the call ended system message.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *callEndedTimestamp;

/**
 *  Required. Call metadata required to create the call artifacts. For now, the
 *  metadata contains only the call id to identify the call. This field allows
 *  additional data (e.g. voice call type) to be added if needed in the future.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedCallMetadata *callMetadata;

/**
 *  Required. Indicates the call status for the space. Used to determine the
 *  chip's state.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedCallAnnotationData_CallStatus_CallEnded
 *        Indicates that the call has ended. (Value: "CALL_ENDED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedCallAnnotationData_CallStatus_CallMissed
 *        Indicates that the call is missed. (Value: "CALL_MISSED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedCallAnnotationData_CallStatus_CallStarted
 *        Indicates that the call has started. (Value: "CALL_STARTED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedCallAnnotationData_CallStatus_CallStatusUnspecified
 *        Default value for the enum. DO NOT USE. (Value:
 *        "CALL_STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *callStatus;

@end


/**
 *  Metadata required to generate call artifacts. This can either be the
 *  metadata for a Meet or, in the future, Google Voice call.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedCallMetadata : GTLRObject

/** Metadata specific for the Meet call. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedMeetMetadata *meetMetadata;

@end


/**
 *  A card is a UI element that can contain UI widgets such as text and images.
 *  For more information, see Cards . For example, the following JSON creates a
 *  card that has a header with the name, position, icons, and link for a
 *  contact, followed by a section with contact information like email and phone
 *  number. ``` { "header": { "title": "Heba Salam", "subtitle": "Software
 *  Engineer", "imageStyle": "ImageStyle.AVATAR", "imageUrl":
 *  "https://example.com/heba_salam.png", "imageAltText": "Avatar for Heba
 *  Salam" }, "sections" : [ { "header": "Contact Info", "widgets": [ {
 *  "decorated_text": { "icon": { "knownIcon": "EMAIL" }, "content":
 *  "heba.salam\@example.com" } }, { "decoratedText": { "icon": { "knownIcon":
 *  "PERSON" }, "content": "Online" } }, { "decoratedText": { "icon": {
 *  "knownIcon": "PHONE" }, "content": "+1 (555) 555-1234" } }, { "buttons": [ {
 *  "textButton": { "text": "Share", }, "onClick": { "openLink": { "url":
 *  "https://example.com/share" } } }, { "textButton": { "text": "Edit", },
 *  "onClick": { "action": { "function": "goToView", "parameters": [ { "key":
 *  "viewType", "value": "EDIT" } ], "loadIndicator": "LoadIndicator.SPINNER" }
 *  } } ] } ], "collapsible": true, "uncollapsibleWidgetsCount": 3 } ],
 *  "cardActions": [ { "actionLabel": "Send Feedback", "onClick": { "openLink":
 *  { "url": "https://example.com/feedback" } } } ], "name":
 *  "contact-card-K3wB6arF2H9L" } ```
 */
@interface GTLRCloudSearch_AppsDynamiteSharedCard : GTLRObject

/**
 *  The actions of this card. They are added to a card's generated toolbar menu.
 *  For example, the following JSON constructs a card action menu with Settings
 *  and Send Feedback options: ``` "card_actions": [ { "actionLabel": "Setting",
 *  "onClick": { "action": { "functionName": "goToView", "parameters": [ {
 *  "key": "viewType", "value": "SETTING" } ], "loadIndicator":
 *  "LoadIndicator.SPINNER" } } }, { "actionLabel": "Send Feedback", "onClick":
 *  { "openLink": { "url": "https://example.com/feedback" } } } ] ```
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedCardCardAction *> *cardActions;

/** The header of the card. A header usually contains a title and an image. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedCardCardHeader *header;

/**
 *  Name of the card, which is used as a identifier for the card in card
 *  navigation.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Sections are separated by a line divider. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedCardSection *> *sections;

@end


/**
 *  A card action is the action associated with the card. For example, an
 *  invoice card might include actions such as delete invoice, email invoice, or
 *  open the invoice in a browser.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedCardCardAction : GTLRObject

/** The label that displays as the action menu item. */
@property(nonatomic, copy, nullable) NSString *actionLabel;

/** The onclick action for this action item. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedOnClick *onClick;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedCardCardHeader
 */
@interface GTLRCloudSearch_AppsDynamiteSharedCardCardHeader : GTLRObject

/** The alternative text of this image which is used for accessibility. */
@property(nonatomic, copy, nullable) NSString *imageAltText;

/**
 *  The image's type.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedCardCardHeader_ImageType_Circle
 *        Applies a circular mask to the image. (Value: "CIRCLE")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedCardCardHeader_ImageType_Square
 *        Applies no cropping to the image. (Value: "SQUARE")
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/** The URL of the image in the card header. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/** The subtitle of the card header. */
@property(nonatomic, copy, nullable) NSString *subtitle;

/**
 *  The title of the card header. The title must be specified. The header has a
 *  fixed height: if both a title and subtitle are specified, each takes up one
 *  line. If only the title is specified, it takes up both lines.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Card click which identifies one suggestion provided by the app/bot.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedCardClickSuggestion : GTLRObject

/**
 *  Identify the button/action that created the suggestion. A simple example
 *  would be a card button within the stream, or the id which can identify a
 *  specific suggestion.
 */
@property(nonatomic, copy, nullable) NSString *actionId;

/** The message_id for the message that was posted by the app/bot. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_MessageId *suggestionMessageId;

@end


/**
 *  A section contains a collection of widgets that are rendered vertically in
 *  the order that they are specified. Across all platforms, cards have a narrow
 *  fixed width, so there is currently no need for layout properties, for
 *  example, float.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedCardSection : GTLRObject

/**
 *  Indicates whether this section is collapsible. If a section is collapsible,
 *  the description must be given.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *collapsible;

/** The header of the section. Formatted text is supported. */
@property(nonatomic, copy, nullable) NSString *header;

/**
 *  The number of uncollapsible widgets. For example, when a section contains
 *  five widgets and the `numUncollapsibleWidget` is set to `2`, the first two
 *  widgets are always shown and the last three are collapsed as default. The
 *  `numUncollapsibleWidget` is taken into account only when collapsible is set
 *  to `true`.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *uncollapsibleWidgetsCount;

/** A section must contain at least 1 widget. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedWidget *> *widgets;

@end


/**
 *  Next Id: 5
 */
@interface GTLRCloudSearch_AppsDynamiteSharedChatItem : GTLRObject

/** Information needed to render the specific type of feed item. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfo *> *activityInfo;

/** Only populated on read path and should not be persisted in storage. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo *groupInfo;

/**
 *  Additional information about the original chat message that isn't captured
 *  in the top-level message proto.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedMessageInfo *messageInfo;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfo
 */
@interface GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfo : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemNudge *feedItemNudge;
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemReactions *feedItemReactions;
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply *feedItemThreadReply;
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention *feedItemUserMention;

@end


/**
 *  Existence of this attribute indicates that the AF item is for a message
 *  nudge item.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemNudge : GTLRObject

/**
 *  Nudge type of the nudge feed item.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemNudge_NudgeType_FollowUp
 *        The message creator is nudged since the message may require a
 *        follow-up. (Value: "FOLLOW_UP")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemNudge_NudgeType_Reply
 *        The message receiver is nudged since the message may require a reply.
 *        (Value: "REPLY")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemNudge_NudgeType_Undefined
 *        Value "UNDEFINED"
 */
@property(nonatomic, copy, nullable) NSString *nudgeType;

@end


/**
 *  Existence of this attribute indicates that the AF item is for message
 *  reactions, but it is intentionally left empty since the list of reactions
 *  can be found in the top-level Message.Reactions.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemReactions : GTLRObject
@end


/**
 *  Existence of this attribute indicates that the AF item is for thread reply.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply : GTLRObject

/**
 *  Reply type of the thread reply feed item. The field is not persisted in
 *  storage. It's populated when constructing Activity Feed payload.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply_ReplyType_Follower
 *        The thread reply feed item is for a thread follower who's not the root
 *        message poster. (Value: "FOLLOWER")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply_ReplyType_Root
 *        The thread reply feed item is for the root message poster. (Value:
 *        "ROOT")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemThreadReply_ReplyType_Unspecified
 *        Value "UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *replyType;

@end


/**
 *  Existence of this attribute indicates that the AF item is for a user mention
 *  item.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention : GTLRObject

/**
 *  User mention type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention_Type_All
 *        Mentioned by \@all. (Value: "ALL")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention_Type_Direct
 *        Mentioned directly by name. (Value: "DIRECT")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemActivityInfoFeedItemUserMention_Type_TypeUnspecified
 *        Mention type not specified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Information about the space that the item originated from. This will be used
 *  to display Activity Feed items from rooms, and only contain the necessary
 *  information, such as the space name and group attributes. NEXT TAG: 6
 */
@interface GTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo : GTLRObject

/**
 *  This is needed to determine what type of group the source message came from
 *  to support click-to-source.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_ActivityFeed
 *        Represents an Activity Feed space. These groups are modeled like flat
 *        rooms and contain items for users to catch up on important things.
 *        Each user should only have one group of this type. See
 *        go/activity-feed.
 *        LINT.ThenChange(//depot/google3/logs/proto/apps_dynamite/dynamite_visual_element_entry.proto:LoggingGroupType,//depot/google3/java/com/google/apps/dynamite/v1/web/ui/group/groups.js:LoggingGroupType)
 *        (Value: "ACTIVITY_FEED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_AttributeCheckerGroupTypeUnspecified
 *        LINT.IfChange (Value: "ATTRIBUTE_CHECKER_GROUP_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_FlatRoom
 *        A flat room that contains a single thread. (Value: "FLAT_ROOM")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_ImmutableMembershipGroupDm
 *        A group DM that has multiple human users with immutable group
 *        membership. Deprecated. Use IMMUTABLE_MEMBERSHIP_HUMAN_DM instead.
 *        (Value: "IMMUTABLE_MEMBERSHIP_GROUP_DM")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_ImmutableMembershipHumanDm
 *        A DM with immutable group membership. It can be a 1:1 DM or a group DM
 *        with multiple human users. (Value: "IMMUTABLE_MEMBERSHIP_HUMAN_DM")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_OneToOneBotDm
 *        A 1:1 DM between a human user and a bot. (Value: "ONE_TO_ONE_BOT_DM")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_OneToOneHumanDm
 *        A 1:1 DM that has two human users. Deprecated. Use
 *        IMMUTABLE_MEMBERSHIP_HUMAN_DM instead. (Value: "ONE_TO_ONE_HUMAN_DM")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_PostRoom
 *        A post room. Topics in this room are organized in a post/reply style.
 *        See the design doc for more details: go/PostRoomsInDynamite.
 *        Deprecated. Post rooms are no longer supported. (Value: "POST_ROOM")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedChatItemGroupInfo_AttributeCheckerGroupType_ThreadedRoom
 *        A threaded room. Topics in this room are threaded, and users can reply
 *        to any topic. (Value: "THREADED_ROOM")
 */
@property(nonatomic, copy, nullable) NSString *attributeCheckerGroupType;

@property(nonatomic, copy, nullable) NSString *groupName;

/**
 *  Timestamp of when the group containing the message has been read by the
 *  user.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *groupReadTimeUsec;

/**
 *  Indicates whether the group has inline replies enabled. If enabled, clients
 *  will render the space with inline replies.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inlineThreadingEnabled;

@end


/**
 *  Represents a Columns widget that displays a single row of columns.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedColumns : GTLRObject

/** Each card supports up to 2 columns. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedColumnsColumn *> *columnItems;

/**
 *  Controls how the column resizes based on screen width.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedColumns_WrapStyle_Nowrap Column
 *        widgets don't wrap. (Value: "NOWRAP")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedColumns_WrapStyle_Wrap Column
 *        Widgets wrap. (Value: "WRAP")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedColumns_WrapStyle_WrapStyleUnspecified
 *        Unspecified. (Value: "WRAP_STYLE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *wrapStyle;

@end


/**
 *  Represents a Column that consists of widgets stacked vertically.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedColumnsColumn : GTLRObject

/**
 *  The horizontal alignment of the column.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_HorizontalAlignment_Center
 *        Alignment to the center position. (Value: "CENTER")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_HorizontalAlignment_End
 *        Alignment to the end position. (Value: "END")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_HorizontalAlignment_HorizontalAlignmentUnspecified
 *        Unspecified alignment. (Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_HorizontalAlignment_Start
 *        Alignment to the start position. (Value: "START")
 */
@property(nonatomic, copy, nullable) NSString *horizontalAlignment;

/**
 *  Specifies how the column content is sized horizontally.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_HorizontalSizeStyle_FillAvailableSpace
 *        Fills up the available horizontal width. Default value if unspecified.
 *        (Value: "FILL_AVAILABLE_SPACE")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_HorizontalSizeStyle_FillMinimumSpace
 *        Fills up the minimum horizontal width. (Value: "FILL_MINIMUM_SPACE")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_HorizontalSizeStyle_HorizontalSizeStyleUnspecified
 *        Unspecified. (Value: "HORIZONTAL_SIZE_STYLE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *horizontalSizeStyle;

/**
 *  The vertical alignment of the column.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_VerticalAlignment_Bottom
 *        Aligns the widget at the bottom of the column. (Value: "BOTTOM")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_VerticalAlignment_Center
 *        Aligns the widget in the center of the column. Default value if
 *        unspecified. (Value: "CENTER")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_VerticalAlignment_Top
 *        Aligns the widget at the top of the column. (Value: "TOP")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedColumnsColumn_VerticalAlignment_VerticalAlignmentUnspecified
 *        Unspecified. (Value: "VERTICAL_ALIGNMENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *verticalAlignment;

/**
 *  LINT.ThenChange(//google/apps/card/v1/card.proto) Array of widgets included
 *  in the column.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedColumnsColumnWidgets *> *widgets;

@end


/**
 *  LINT.IfChange The `column` widget can contain these widgets.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedColumnsColumnWidgets : GTLRObject

/** ButtonList widget. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedButtonList *buttonList;

/** DateTimePicker widget. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedDateTimePicker *dateTimePicker;

/** DecoratedText widget. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedDecoratedText *decoratedText;

/** Image widget. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedImage *image;

/** SelectionInput widget. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedSelectionInput *selectionInput;

/** TextInput widget. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedTextInput *textInput;

/** Text paragraph widget. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedTextParagraph *textParagraph;

@end


/**
 *  Denotes a type of content report a user can send.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedContentReportType : GTLRObject

/**
 *  Required. Google-defined system violation, covering the most common
 *  violations.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_ConfidentialInformation
 *        "Confidential information" (Value: "CONFIDENTIAL_INFORMATION")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_Discrimination
 *        "Discrimination or harmful stereotypes against anyone, including
 *        protected groups" (Value: "DISCRIMINATION")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_ExplicitContent
 *        "Explicit content that's graphic, violent, or otherwise inappropriate"
 *        (Value: "EXPLICIT_CONTENT")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_Fraud
 *        Phishing, impersonation/misrepresentation, or deceiving other users
 *        into sharing information under false pretenses. (Value: "FRAUD")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_Harassment
 *        "Harassment, offensive, or rude behavior" (Value: "HARASSMENT")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_IllegalActivities
 *        Promoting, organizing, or engaging in illegal activities. (Value:
 *        "ILLEGAL_ACTIVITIES")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_Malware
 *        Malware, viruses, Trojan horses, corrupted files, destructive code,
 *        etc. (Value: "MALWARE")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_Other
 *        "Something else" (Value: "OTHER")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_SensitiveInformation
 *        "Sensitive information" (Value: "SENSITIVE_INFORMATION")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_Spam
 *        "Spam" (Value: "SPAM")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedContentReportType_SystemViolation_ViolationUnspecified
 *        Default value if unset. Do not use directly. This value should not
 *        appear as a selectable violation during content reporting. (Value:
 *        "VIOLATION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *systemViolation;

@end


/**
 *  Proto representation of a custom emoji. May be used in both APIs and in
 *  Spanner, but certain fields should be restricted to one or the other. See
 *  the per-field documentation for details. NEXT_TAG: 14
 */
@interface GTLRCloudSearch_AppsDynamiteSharedCustomEmoji : GTLRObject

/**
 *  ID for the underlying image data in Blobstore. This field should *only* be
 *  present in Spanner or within the server, but should not be exposed in public
 *  APIs.
 */
@property(nonatomic, copy, nullable) NSString *blobId;

/**
 *  Content type of the file used to upload the emoji. Used for takeout. Written
 *  to Spanner when the emoji is created.
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  Time when the Emoji was created, in microseconds. This field may be present
 *  in Spanner, within the server, or in public APIs.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *createTimeMicros;

/** This field should *never* be persisted to Spanner. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *creatorUserId;

/**
 *  Time when the emoji was deleted, in microseconds. This field may be present
 *  in Spanner, within the server, or in public APIs. Only present if the emoji
 *  has been deleted.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleteTimeMicros;

/**
 *  Output only. A short-lived URL clients can use for directly accessing a
 *  custom emoji image. This field is intended for API consumption, and should
 *  *never* be persisted to Spanner.
 */
@property(nonatomic, copy, nullable) NSString *ephemeralUrl;

/** This field should *never* be persisted to Spanner. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_CustomerId *ownerCustomerId;

/**
 *  Opaque token that clients use to construct the URL for accessing the custom
 *  emoji’s image data. This field is intended for API consumption, and should
 *  *never* be persisted to Spanner.
 */
@property(nonatomic, copy, nullable) NSString *readToken;

/**
 *  User-provided, human-readable ID for the custom emoji. Users are expected to
 *  observe this field in the UI instead of the UUID. This shortcode should be
 *  unique within an organization, but has no global uniqueness guarantees,
 *  unlike the UUID. This field should *never* be persisted to Spanner.
 */
@property(nonatomic, copy, nullable) NSString *shortcode;

/**
 *  Snapshot of the current state of the emoji, which may differ from the
 *  source-of-truth in the CustomEmojis table. This field should *never* be
 *  persisted to Spanner.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedCustomEmoji_State_EmojiDeleted
 *        Emoji is removed everywhere and is not available to end-users. (Value:
 *        "EMOJI_DELETED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedCustomEmoji_State_EmojiEnabled
 *        Emoji is visible and available to be used, subject to access control
 *        requirements. (Value: "EMOJI_ENABLED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedCustomEmoji_State_EmojiHidden
 *        Emoji is hidden from pickers, so new usages are not allowed, but is
 *        not removed from existing embeddings. (Value: "EMOJI_HIDDEN")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedCustomEmoji_State_EmojiStateUnspecified
 *        Value "EMOJI_STATE_UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedCustomEmoji_State_EmojiSystemDisabled
 *        Emoji can no longer be used (e.g. due to a shortcode conflict), but is
 *        not removed from existing embeddings. (Value: "EMOJI_SYSTEM_DISABLED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  updateTimeMicros
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *updateTimeMicros;

/**
 *  Unique key for a custom emoji resource. Required. This field is *always*
 *  populated.
 */
@property(nonatomic, copy, nullable) NSString *uuid;

@end


/**
 *  The widget that lets users to specify a date and time.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedDateTimePicker : GTLRObject

/** The label for the field that displays to the user. */
@property(nonatomic, copy, nullable) NSString *label;

/**
 *  The name of the text input that's used in formInput, and uniquely identifies
 *  this input.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Triggered when the user clicks Save or Clear from the date/time picker
 *  dialog. This is only triggered if the value changed as a result of the
 *  Save/Clear operation.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedAction *onChangeAction;

/**
 *  The number representing the time zone offset from UTC, in minutes. If set,
 *  the `value_ms_epoch` is displayed in the specified time zone. If not set, it
 *  uses the user's time zone setting on the client side.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timezoneOffsetDate;

/**
 *  The type of the date/time picker.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedDateTimePicker_Type_DateAndTime
 *        The user can select a date and time. (Value: "DATE_AND_TIME")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedDateTimePicker_Type_DateOnly
 *        The user can only select a date. (Value: "DATE_ONLY")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedDateTimePicker_Type_TimeOnly
 *        The user can only select a time. (Value: "TIME_ONLY")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The value to display as the default value before user input or previous user
 *  input. It is represented in milliseconds (Epoch time). For `DATE_AND_TIME`
 *  type, the full epoch value is used. For `DATE_ONLY` type, only date of the
 *  epoch time is used. For `TIME_ONLY` type, only time of the epoch time is
 *  used. For example, you can set epoch time to `3 * 60 * 60 * 1000` to
 *  represent 3am.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valueMsEpoch;

@end


/**
 *  A widget that displays text with optional decorations such as a label above
 *  or below the text, an icon in front of the text, a selection widget or a
 *  button after the text.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedDecoratedText : GTLRObject

/** The formatted text label that shows below the main text. */
@property(nonatomic, copy, nullable) NSString *bottomLabel;

/** A button that can be clicked to trigger an action. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedButton *button;

/** An icon displayed after the text. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedIcon *endIcon;

/** Deprecated in favor of start_icon. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedIcon *icon;

/** Only the top and bottom label and content region are clickable. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedOnClick *onClick;

/** The icon displayed in front of the text. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedIcon *startIcon;

/**
 *  A switch widget can be clicked to change its state or trigger an action.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedDecoratedTextSwitchControl *switchControl;

/**
 *  Required. The main widget formatted text. See Text formatting for details.
 */
@property(nonatomic, copy, nullable) NSString *text;

/** The formatted text label that shows above the main text. */
@property(nonatomic, copy, nullable) NSString *topLabel;

/**
 *  The wrap text setting. If `true`, the text is wrapped and displayed in
 *  multiline. Otherwise, the text is truncated.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wrapText;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedDecoratedTextSwitchControl
 */
@interface GTLRCloudSearch_AppsDynamiteSharedDecoratedTextSwitchControl : GTLRObject

/**
 *  The control type, either switch or checkbox.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedDecoratedTextSwitchControl_ControlType_CheckBox
 *        Value "CHECK_BOX"
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedDecoratedTextSwitchControl_ControlType_Checkbox
 *        Deprecated in favor of `CHECK_BOX`. (Value: "CHECKBOX")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedDecoratedTextSwitchControl_ControlType_Switch
 *        Value "SWITCH"
 */
@property(nonatomic, copy, nullable) NSString *controlType;

/** The name of the switch widget that's used in formInput. */
@property(nonatomic, copy, nullable) NSString *name;

/** The action when the switch state is changed. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedAction *onChangeAction;

/**
 *  If the switch is selected.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *selected;

/** The value is what is passed back in the callback. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Dimension for the uploaded attachments.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedDimension : GTLRObject

/**
 *  height
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *height;

/**
 *  width
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *width;

@end


/**
 *  A divider that appears in between widgets.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedDivider : GTLRObject
@end


/**
 *  LINT.IfChange
 */
@interface GTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata : GTLRObject

/**
 *  [required] Describes the DLP status of message send and attachment upload
 *  events.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata_DlpStatus_DlpDisabled
 *        Rule fetch and evaluation are skipped because DLP experiment is not
 *        enabled. (Value: "DLP_DISABLED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata_DlpStatus_DlpEnabledNoRuleFetch
 *        Rule fetch and evaluation are skipped because there is no rule to be
 *        fetched (e.g. message is sent from a consumer, or there is no
 *        message.) (Value: "DLP_ENABLED_NO_RULE_FETCH")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata_DlpStatus_DlpEnabledRulesFetchedAndEvaluated
 *        Rule fetch and evaluation were performed and completed successfully.
 *        (Value: "DLP_ENABLED_RULES_FETCHED_AND_EVALUATED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata_DlpStatus_DlpEnabledRulesFetchedNoApplicableRules
 *        Rule fetch happened, but rule evaluation is skipped because none of
 *        the rules are applicable. (Value:
 *        "DLP_ENABLED_RULES_FETCHED_NO_APPLICABLE_RULES")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata_DlpStatus_DlpEnabledRulesFetchedNoRules
 *        Rule fetch happened, but rule evalution is skipped because the fetch
 *        returned no rules. (Value: "DLP_ENABLED_RULES_FETCHED_NO_RULES")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata_DlpStatus_DlpEnabledScanFailed
 *        Generic DLP failure. This case covers any other errors/exceptions in
 *        the Chat backend that caused the DLP scan to fail. (Value:
 *        "DLP_ENABLED_SCAN_FAILED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata_DlpStatus_DlpEnabledScanTimeout
 *        DLP scan was attempted but timed out. (Value:
 *        "DLP_ENABLED_SCAN_TIMEOUT")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata_DlpStatus_DlpStatusUnknown
 *        Value "DLP_STATUS_UNKNOWN"
 */
@property(nonatomic, copy, nullable) NSString *dlpStatus;

@end


/**
 *  Data for rendering a document.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedDocument : GTLRObject

/** Unique file ID. */
@property(nonatomic, copy, nullable) NSString *fileId;

/** Justification to explain why this document is being suggested. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedJustification *justification;

/** Time the document was last modified. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastModifiedTime;

/** Used to determine which icon to render (e.g. docs, slides, sheets) */
@property(nonatomic, copy, nullable) NSString *mimeType;

/** Title of the document. */
@property(nonatomic, copy, nullable) NSString *title;

/** URL of the document. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedEmoji
 */
@interface GTLRCloudSearch_AppsDynamiteSharedEmoji : GTLRObject

/** A custom emoji. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedCustomEmoji *customEmoji;

/** A basic emoji represented by a unicode string. */
@property(nonatomic, copy, nullable) NSString *unicode;

@end


/**
 *  Data for a FindDocument suggestion type.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedFindDocumentSuggestion : GTLRObject

/** List of documents to render as suggestions. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedDocument *> *documentSuggestions;

/**
 *  Whether to show the action buttons in the card for the suggestions.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *showActionButtons;

@end


/**
 *  Represents a Grid widget that displays items in a configurable grid layout.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedGrid : GTLRCollectionObject

/** The border style to apply to each grid item. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedBorderStyle *borderStyle;

/**
 *  The number of columns to display in the grid. A default value is used if
 *  this field isn't specified, and that default value is different depending on
 *  where the grid is shown (dialog versus companion).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columnCount;

/**
 *  The items to display in the grid.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedGridGridItem *> *items;

/**
 *  This callback is reused by each individual grid item, but with the item's
 *  identifier and index in the items list added to the callback's parameters.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedOnClick *onClick;

/** The text that displays in the grid header. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Represents a single item in the grid layout.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedGridGridItem : GTLRObject

/**
 *  A user-specified identifier for this grid item. This identifier is returned
 *  in the parent Grid's onClick callback parameters.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The image that displays in the grid item. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedImageComponent *image;

/**
 *  The layout to use for the grid item.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedGridGridItem_Layout_GridItemLayoutUnspecified
 *        No layout specified. (Value: "GRID_ITEM_LAYOUT_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedGridGridItem_Layout_TextAbove
 *        The title and subtitle are shown above the grid item's image. (Value:
 *        "TEXT_ABOVE")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedGridGridItem_Layout_TextBelow
 *        The title and subtitle are shown below the grid item's image. (Value:
 *        "TEXT_BELOW")
 */
@property(nonatomic, copy, nullable) NSString *layout;

/** The grid item's subtitle. */
@property(nonatomic, copy, nullable) NSString *subtitle;

/**
 *  The horizontal alignment of the grid item's text.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedGridGridItem_TextAlignment_Center
 *        Alignment to the center position. (Value: "CENTER")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedGridGridItem_TextAlignment_End
 *        Alignment to the end position. (Value: "END")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedGridGridItem_TextAlignment_HorizontalAlignmentUnspecified
 *        Unspecified alignment. (Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedGridGridItem_TextAlignment_Start
 *        Alignment to the start position. (Value: "START")
 */
@property(nonatomic, copy, nullable) NSString *textAlignment;

/** The grid item's title. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  NEXT TAG: 3 A GroupDetails proto will store the information pertaining to
 *  single Group.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedGroupDetails : GTLRObject

/**
 *  A simple text that describes the purpose of a single Group, the general
 *  theme of the topics to be posted and/or the denominator of the Group
 *  participants.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  A simple text describing the rules and expectations from members when
 *  participating in conversation.
 */
@property(nonatomic, copy, nullable) NSString *guidelines;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedGroupVisibility
 */
@interface GTLRCloudSearch_AppsDynamiteSharedGroupVisibility : GTLRObject

/**
 *  state
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedGroupVisibility_State_Private
 *        Explicitly invited users may join the room. (Value: "PRIVATE")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedGroupVisibility_State_Public
 *        Anyone in the domain may join the room. (Value: "PUBLIC")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedGroupVisibility_State_Unknown
 *        Do not use. (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedIcon
 */
@interface GTLRCloudSearch_AppsDynamiteSharedIcon : GTLRObject

/**
 *  The description of the icon, used for accessibility. The default value is
 *  provided if you don't specify one.
 */
@property(nonatomic, copy, nullable) NSString *altText;

/** The icon specified by a URL. */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The crop style applied to the image. In some cases, applying a `CIRCLE` crop
 *  causes the image to be drawn larger than a standard icon.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedIcon_ImageType_Circle Applies a
 *        circular mask to the image. (Value: "CIRCLE")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedIcon_ImageType_Square Applies
 *        no cropping to the image. (Value: "SQUARE")
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/** The icon specified by the string name of a list of known icons */
@property(nonatomic, copy, nullable) NSString *knownIcon;

@end


/**
 *  An image that is specified by a URL and can have an onClick action.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedImage : GTLRObject

/** The alternative text of this image, used for accessibility. */
@property(nonatomic, copy, nullable) NSString *altText;

/** An image URL. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedOnClick *onClick;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedImageComponent
 */
@interface GTLRCloudSearch_AppsDynamiteSharedImageComponent : GTLRObject

/** The accessibility label for the image. */
@property(nonatomic, copy, nullable) NSString *altText;

/** The border style to apply to the image. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedBorderStyle *borderStyle;

/** The crop style to apply to the image. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedImageCropStyle *cropStyle;

/** The image URL. */
@property(nonatomic, copy, nullable) NSString *imageUri;

@end


/**
 *  Represents the crop style applied to an image.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedImageCropStyle : GTLRObject

/**
 *  The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aspectRatio;

/**
 *  The crop type.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedImageCropStyle_Type_Circle
 *        Applies a circular crop. (Value: "CIRCLE")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedImageCropStyle_Type_ImageCropTypeUnspecified
 *        No value specified. (Value: "IMAGE_CROP_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedImageCropStyle_Type_Rectangle43
 *        Applies a rectangular crop with a 4:3 aspect ratio. (Value:
 *        "RECTANGLE_4_3")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedImageCropStyle_Type_RectangleCustom
 *        Applies a rectangular crop with a custom aspect ratio. (Value:
 *        "RECTANGLE_CUSTOM")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedImageCropStyle_Type_Square
 *        Applies a square crop. (Value: "SQUARE")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Data for rendering a justification for a document.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedJustification : GTLRObject

/** Time the action took place. */
@property(nonatomic, strong, nullable) GTLRDateTime *actionTime;

/**
 *  Type of action performed on the document.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_ActionTypeUnspecified
 *        Unspecified action. (Value: "ACTION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_Commented
 *        Commented on document. (Value: "COMMENTED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_CommentResolved
 *        Resolved comment on document. (Value: "COMMENT_RESOLVED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_Created
 *        Created document. (Value: "CREATED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_Edited
 *        Edited document. (Value: "EDITED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_Presented
 *        Presented document. (Value: "PRESENTED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_Sent
 *        Sent document over chat/email. (Value: "SENT")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_Shared
 *        Shared document. (Value: "SHARED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedJustification_ActionType_Viewed
 *        Viewed document. (Value: "VIEWED")
 */
@property(nonatomic, copy, nullable) NSString *actionType;

/** Owner of the document. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedJustificationPerson *documentOwner;

/**
 *  Words or phrases from the user's query that describes the document content.
 *  (Ex: Users query is "Can you share the document about Bullseye?" the
 *  extracted topic would be "Bullseye").
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *topics;

@end


/**
 *  Data for rendering a person associated with a document.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedJustificationPerson : GTLRObject

/**
 *  Whether the person is the recipient of the suggestions.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isRecipient;

/** Obfuscated user ID. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *user;

@end


/**
 *  Metadata specific for a Meet call that are required to generate call
 *  artifacts.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedMeetMetadata : GTLRObject

/**
 *  Required. A globally unique code (e.g. "cxv-zbgj-wzw") that points to a
 *  meeting space. Note: Meeting codes may be regenerated, which will cause old
 *  meeting codes to become invalid.
 */
@property(nonatomic, copy, nullable) NSString *meetingCode;

/**
 *  Required. A URL, in the format "https://meet.google.com/ *" (e.g.
 *  https://meet.google.com/cxv-zbgj-wzw), to identify and access the meeting
 *  space.
 */
@property(nonatomic, copy, nullable) NSString *meetingUrl;

@end


/**
 *  Information that references a Dynamite chat message. This is only used for
 *  Activity Feed messages.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedMessageInfo : GTLRObject

/**
 *  Id of the source chat message. This is kept here because the top-level
 *  message ID to refers the AF message ID.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_MessageId *messageId;

/**
 *  The type of the source chat message.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedMessageInfo_MessageType_InlineReply
 *        The source chat message is a threaded reply to another message.
 *        (Value: "INLINE_REPLY")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedMessageInfo_MessageType_MessageTypeUnspecified
 *        Default value where type is not specified. (Value:
 *        "MESSAGE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *messageType;

/**
 *  Timestamp of when the topic containing the message has been read by the
 *  user. This is populated if the message references an inline reply, in which
 *  case the space may be marked as read but the topic still has unread
 *  messages.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *topicReadTimeUsec;

@end


/**
 *  The payload(restricted to 1P applications) to be stored with a specific
 *  message.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedMessageIntegrationPayload : GTLRObject

/**
 *  Pantheon project number used to identify the calling app.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *projectNumber;

@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedTasksMessageIntegrationPayload *tasksMessageIntegrationPayload;

/**
 *  An enum indicating which 1P application's payload this is. This field is
 *  required to add 1P payload.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedMessageIntegrationPayload_Type_PayloadTypeUnspecified
 *        Value "PAYLOAD_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedMessageIntegrationPayload_Type_Tasks
 *        Value "TASKS"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedOnClick
 */
@interface GTLRCloudSearch_AppsDynamiteSharedOnClick : GTLRObject

/** If specified, an action is triggered by this onClick. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedAction *action;

/**
 *  Triggers host app action on click directly without invoking form actions.
 *  This is currently not available to end-users and is used internal only.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_HostAppActionMarkup *hostAppAction;

/**
 *  An add-on triggers this action when the action needs to open a link. This
 *  differs from the open_link above in that this needs to talk to server to get
 *  the link. Thus some preparation work is required for web client to do before
 *  the open link action response comes back.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedAction *openDynamicLinkAction;

/** If specified, this onClick triggers an open link action. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedOpenLink *openLink;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedOpenLink
 */
@interface GTLRCloudSearch_AppsDynamiteSharedOpenLink : GTLRObject

/**
 *  Represents the platform specific uri/intent to open on each client. For
 *  example: A companion_url will open in a companion window on the web. An iOS
 *  URL and android intent will open in the corresponding hosting apps. If these
 *  platform specific URLs can't be handled correctly, i.e. if the companion
 *  isn't supported on web and the hosting apps aren't available on the mobile
 *  platforms then the `uri` will open in a new browser window on all the
 *  platforms.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedOpenLinkAppUri *appUri;

/**
 *  onClose
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedOpenLink_OnClose_Nothing
 *        Doesn’t reload the card after the child window closes. Reloads the
 *        card after the child window closes. If used in conjunction with
 *        [OpenAs.OVERLAY](/workspace/add-ons/reference/rpc/google.apps.card.v1#openas),
 *        the child window acts as a modal dialog and the main card is blocked
 *        until the child window closes. (Value: "NOTHING")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedOpenLink_OnClose_Reload Value
 *        "RELOAD"
 */
@property(nonatomic, copy, nullable) NSString *onClose;

/**
 *  openAs
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedOpenLink_OpenAs_FullSize The
 *        link opens as a full size window (if that's the frame used by the
 *        client. (Value: "FULL_SIZE")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedOpenLink_OpenAs_Overlay The
 *        link opens as an overlay, such as a pop-up. (Value: "OVERLAY")
 */
@property(nonatomic, copy, nullable) NSString *openAs;

/** The URL to open. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Represents the platform specific uri/intent to open for each client.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedOpenLinkAppUri : GTLRObject

/** An intent object to be opened in the corresponding android hosting app. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedOpenLinkAppUriIntent *androidIntent;

/**
 *  A companion uri string to be opened in the chat companion window. on the
 *  web.
 */
@property(nonatomic, copy, nullable) NSString *companionUri;

/** A uri string to be opened in the corresponding iOS hosting app. */
@property(nonatomic, copy, nullable) NSString *iosUri;

@end


/**
 *  Android intent.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedOpenLinkAppUriIntent : GTLRObject

/**
 *  A list of extra data for the android intent. For example, for a calendar
 *  event edit intent, the event title information can be passed as extra data.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedOpenLinkAppUriIntentExtraData *> *extraData;

/**
 *  An android intent action string for the {\@link android.content.Intent}
 *  object. For example: for the view intent action type, a valid value will be
 *  android.content.Intent.ACTION_VIEW.
 */
@property(nonatomic, copy, nullable) NSString *intentAction;

@end


/**
 *  Extra data for an android intent. Valid keys are defined in the hosting app
 *  contract.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedOpenLinkAppUriIntentExtraData : GTLRObject

/** A key for the intent extra data. */
@property(nonatomic, copy, nullable) NSString *key;

/** Value for the given extra data key. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Contains info about the entity that something is, or is owned by.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedOrganizationInfo : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedOrganizationInfoConsumerInfo *consumerInfo;
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedOrganizationInfoCustomerInfo *customerInfo;

@end


/**
 *  Intentionally empty. Used to disambiguate consumer and customer use cases in
 *  oneof below.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedOrganizationInfoConsumerInfo : GTLRObject
@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedOrganizationInfoCustomerInfo
 */
@interface GTLRCloudSearch_AppsDynamiteSharedOrganizationInfoCustomerInfo : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_CustomerId *customerId;

@end


/**
 *  Stores the suggestion provided by apps/bots.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedOriginAppSuggestion : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_AppId *appId;
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedCardClickSuggestion *cardClickSuggestion;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedPhoneNumber
 */
@interface GTLRCloudSearch_AppsDynamiteSharedPhoneNumber : GTLRObject

/** The phone number type, e.g., work, mobile, etc. */
@property(nonatomic, copy, nullable) NSString *type;

/** The actual phone number. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedReaction
 */
@interface GTLRCloudSearch_AppsDynamiteSharedReaction : GTLRObject

/**
 *  The total number of users who have reacted.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  When the first emoji of this type was added.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *createTimestamp;

/**
 *  Whether the current user reacted using this emoji. Note: Unlike most
 *  properties of messages, this is different per-user.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentUserParticipated;

@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedEmoji *emoji;

@end


/**
 *  The settings of retention period of a message or topic.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedRetentionSettings : GTLRObject

/**
 *  The timestamp after which the message/topic should be removed, in
 *  microseconds since the epoch, when state == EPHEMERAL_ONE_DAY. The value
 *  should not be set in other cases.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expiryTimestamp;

/**
 *  The retention state.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedRetentionSettings_State_EphemeralOneDay
 *        The message/topic should be kept with a 24-hour TTL. (Value:
 *        "EPHEMERAL_ONE_DAY")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedRetentionSettings_State_Permanent
 *        The message/topic should be kept permanently. (Value: "PERMANENT")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedRetentionSettings_State_UnknownRetentionState
 *        Value "UNKNOWN_RETENTION_STATE"
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Contains info on membership count for member types: HUMAN_USER, APP_USER &
 *  ROSTER_MEMBER different states: INVITED, JOINED
 */
@interface GTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount : GTLRObject

/**
 *  count of members with given type and state
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *membershipCount;

/**
 *  membershipState
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount_MembershipState_MemberFailed
 *        This state should never be stored in Spanner. It is a state for
 *        responses to the clients to indicate that membership mutations have
 *        failed and the member is in its previous state. (Value:
 *        "MEMBER_FAILED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount_MembershipState_MemberInvited
 *        An invitation to the space has been sent (Value: "MEMBER_INVITED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount_MembershipState_MemberJoined
 *        User has joined the space (Value: "MEMBER_JOINED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount_MembershipState_MemberNotAMember
 *        User is not a member (Value: "MEMBER_NOT_A_MEMBER")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount_MembershipState_MemberUnknown
 *        Default state, do not use (Value: "MEMBER_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *membershipState;

/**
 *  memberType
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount_MemberType_HumanUser
 *        member is a human user (Value: "HUMAN_USER")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount_MemberType_MemberTypeUnspecified
 *        default value (Value: "MEMBER_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount_MemberType_RosterMember
 *        member is a roster (Value: "ROSTER_MEMBER")
 */
@property(nonatomic, copy, nullable) NSString *memberType;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCounts
 */
@interface GTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCounts : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCount *> *value;

@end


/**
 *  A widget that creates a UI item (for example, a drop-down list) with options
 *  for users to select.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedSelectionInput : GTLRCollectionObject

/**
 *  items
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedSelectionInputSelectionItem *> *items;

/** The label displayed ahead of the switch control. */
@property(nonatomic, copy, nullable) NSString *label;

/** The name of the text input which is used in formInput. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If specified, the form is submitted when the selection changes. If not
 *  specified, you must specify a separate button.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedAction *onChangeAction;

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSelectionInput_Type_CheckBox
 *        The selection type is a checkbox. (Value: "CHECK_BOX")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSelectionInput_Type_Dropdown
 *        The selection type is a dropdown. (Value: "DROPDOWN")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSelectionInput_Type_RadioButton
 *        The selection type is a radio button. (Value: "RADIO_BUTTON")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSelectionInput_Type_Switch The
 *        selection type is a switch. (Value: "SWITCH")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The item in the switch control. A radio button, at most one of the items is
 *  selected.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedSelectionInputSelectionItem : GTLRObject

/**
 *  If more than one item is selected for `RADIO_BUTTON` and `DROPDOWN`, the
 *  first selected item is treated as selected and the ones after are ignored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *selected;

/** The text to be displayed. */
@property(nonatomic, copy, nullable) NSString *text;

/**
 *  The value associated with this item. The client should use this as a form
 *  input value.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Defines the representation of a single matching space.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedSpaceInfo : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedAvatarInfo *avatarInfo;
@property(nonatomic, copy, nullable) NSString *avatarUrl;

/**
 *  descriptionProperty
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

@property(nonatomic, strong, nullable) GTLRCloudSearch_GroupId *groupId;

/**
 *  The email address of the user that invited the calling user to the room, if
 *  available. This field will only be populated for direct invites, it will be
 *  empty if the user was indirectly invited to the group.
 */
@property(nonatomic, copy, nullable) NSString *inviterEmail;

/**
 *  Whether this is a space that enables guest access
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isExternal;

@property(nonatomic, copy, nullable) NSString *name;

/**
 *  numMembers
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numMembers;

/**
 *  searching user's membership state in this space
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSpaceInfo_UserMembershipState_MemberFailed
 *        This state should never be stored in Spanner. It is a state for
 *        responses to the clients to indicate that membership mutations have
 *        failed and the member is in its previous state. (Value:
 *        "MEMBER_FAILED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSpaceInfo_UserMembershipState_MemberInvited
 *        An invitation to the space has been sent (Value: "MEMBER_INVITED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSpaceInfo_UserMembershipState_MemberJoined
 *        User has joined the space (Value: "MEMBER_JOINED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSpaceInfo_UserMembershipState_MemberNotAMember
 *        User is not a member (Value: "MEMBER_NOT_A_MEMBER")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedSpaceInfo_UserMembershipState_MemberUnknown
 *        Default state, do not use (Value: "MEMBER_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *userMembershipState;

@end


/**
 *  A container wrapping elements necessary for showing suggestion items used in
 *  text input autocomplete.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedSuggestions : GTLRCollectionObject

/**
 *  A list of suggestions items which will be used in are used in autocomplete.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedSuggestionsSuggestionItem *> *items;

@end


/**
 *  A suggestion item. Only supports text for now.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedSuggestionsSuggestionItem : GTLRObject

@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  This is the internal version of the API proto at
 *  google3/google/chat/v1/gsuite_message_integration.proto
 */
@interface GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationData : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataAssigneeChange *assigneeChange;
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataCompletionChange *completionChange;
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataCreation *creation;
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataDeletionChange *deletionChange;

/** ID of task. Will be used to create deep links to Tasks. */
@property(nonatomic, copy, nullable) NSString *taskId;

/** Task properties after the update has been applied. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataTaskProperties *taskProperties;

@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataUserDefinedMessage *userDefinedMessage;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataAssigneeChange
 */
@interface GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataAssigneeChange : GTLRObject

/**
 *  Obfuscated user ID of previous assignee. Not set if the task was originally
 *  not assigned.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *oldAssignee;

@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataCompletionChange
 */
@interface GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataCompletionChange : GTLRObject
@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataCreation
 */
@interface GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataCreation : GTLRObject
@end


/**
 *  GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataDeletionChange
 */
@interface GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataDeletionChange : GTLRObject
@end


/**
 *  All relevant task properties for a Chat message.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataTaskProperties : GTLRObject

/**
 *  Obfuscated user ID of new assignee. Not set if the task doesn't have an
 *  assignee.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *assignee;

/**
 *  Whether the task is marked as completed.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *completed;

/**
 *  Whether the task is marked as deleted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleted;

/**
 *  The description of the task. If Task original description's length is
 *  greater than 1024, then Task BE sends the truncated description to Dynamite
 *  Integration Server.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Set if the task has a date but no time. Source of truth in Tasks BE:
 *  http://shortn/_wyT7eB4Ixv
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Date *startDate;

/**
 *  Set if the task has both a date and a time. Source of truth in Tasks BE:
 *  http://shortn/_u6cr0F5ttE
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/** The title of the task. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Used for task card attachments on custom user messages that should be kept
 *  as is without generating an i18n event message, e.g. the user starts a
 *  conversation from an existing task. IMPORTANT: please don't populate this
 *  field yet as it could break existing flows until it's implemented. See code
 *  at http://shortn/_CM74CdENMx used by http://shortn/_5o85POJY8Q.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationDataUserDefinedMessage : GTLRObject
@end


/**
 *  A payload containing Tasks metadata for rendering a live card. Currently not
 *  used by the Tasks integration.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedTasksMessageIntegrationPayload : GTLRObject
@end


/**
 *  A text input is a UI item where users can input text. A text input can also
 *  have an onChange action and suggestions.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedTextInput : GTLRObject

/**
 *  The refresh function that returns suggestions based on the user's input
 *  text. If the callback is not specified, autocomplete is done in client side
 *  based on the initial suggestion items.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedAction *autoCompleteAction;

/** The hint text. */
@property(nonatomic, copy, nullable) NSString *hintText;

/** The initial suggestions made before any user input. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedSuggestions *initialSuggestions;

/** At least one of label and hintText must be specified. */
@property(nonatomic, copy, nullable) NSString *label;

/** The name of the text input which is used in formInput. */
@property(nonatomic, copy, nullable) NSString *name;

/** The onChange action, for example, invoke a function. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedAction *onChangeAction;

/**
 *  The style of the text, for example, a single line or multiple lines.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedTextInput_Type_MultipleLine The
 *        text is put into multiple lines. (Value: "MULTIPLE_LINE")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedTextInput_Type_SingleLine The
 *        text is put into a single line. (Value: "SINGLE_LINE")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The default value when there is no input from the user. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A paragraph of text that supports formatting. See [Text
 *  formatting](workspace/add-ons/concepts/widgets#text_formatting") for
 *  details.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedTextParagraph : GTLRObject

/** The text that's shown in the widget. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  User-block relationship
 */
@interface GTLRCloudSearch_AppsDynamiteSharedUserBlockRelationship : GTLRObject

/**
 *  hasBlockedRequester
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasBlockedRequester;

/**
 *  isBlockedByRequester
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isBlockedByRequester;

@end


/**
 *  Reference to a transcoded video attachment.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedVideoReference : GTLRObject

/**
 *  Available transcode format. Value is defined in
 *  video/storage/proto/content_header.proto
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *format;

/**
 *  Transcode status
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedVideoReference_Status_Error
 *        Value "ERROR"
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedVideoReference_Status_GoLiveSuccess
 *        Value "GO_LIVE_SUCCESS"
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedVideoReference_Status_NotApplicable
 *        Value "NOT_APPLICABLE"
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedVideoReference_Status_Success
 *        Value "SUCCESS"
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedVideoReference_Status_ThumbnailSuccess
 *        Value "THUMBNAIL_SUCCESS"
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedVideoReference_Status_UnknownStatus
 *        Value "UNKNOWN_STATUS"
 */
@property(nonatomic, copy, nullable) NSString *status;

@end


/**
 *  A widget is a UI element that presents texts, images, etc.
 */
@interface GTLRCloudSearch_AppsDynamiteSharedWidget : GTLRObject

/**
 *  A list of buttons. For example, the following JSON creates two buttons. The
 *  first is a filled text button and the second is an image button that opens a
 *  link: ``` "buttonList": { "buttons": [ "button": { "text": "Edit", "Color":
 *  { "Red": 255 "Green": 255 "Blue": 255 } "disabled": true }, "button": {
 *  "icon": { "knownIcon": "INVITE" "altText": "check calendar" }, "onClick": {
 *  "openLink": { "url": "https://example.com/calendar" } } }, ] } ```
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedButtonList *buttonList;

/**
 *  Displays a single row of columns with widgets stacked vertically in each
 *  column. For example, the following JSON creates a 2 column widget each
 *  containing a single item. ``` "columns": { "wrapStyle": "WRAP",
 *  "columnItems": [ { "horizontalSizeStyle": "FILL_AVAILABLE_SPACE",
 *  "horizontalAlignment": "CENTER", "verticalAlignment" : "CENTER", "widgets":
 *  [ { "textParagraph": { "text": "First column text paragraph", } } ] }, {
 *  "horizontalSizeStyle": "FILL_AVAILABLE_SPACE", "horizontalAlignment":
 *  "CENTER", "verticalAlignment" : "CENTER", "widgets": [ { "textParagraph": {
 *  "text": "Second column text paragraph", } } ] }, ] } } ```
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedColumns *columns;

/**
 *  Displays a selection/input widget for date/time. For example, the following
 *  JSON creates a date/time picker for an appointment time: ```
 *  "date_time_picker": { "name": "appointment_time", "label": "Book your
 *  appointment at:", "type": "DateTimePickerType.DATE_AND_TIME",
 *  "valueMsEpoch": "796435200000" } ```
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedDateTimePicker *dateTimePicker;

/**
 *  Displays a decorated text item in this widget. For example, the following
 *  JSON creates a decorated text widget showing email address: ```
 *  "decoratedText": { "icon": { "knownIcon": "EMAIL" }, "topLabel": "Email
 *  Address", "content": "heba.salam\@example.com", "bottomLabel": "This is a
 *  new Email address!", "switchWidget": { "name":
 *  "has_send_welcome_email_to_heba_salam", "selected": false, "controlType":
 *  "ControlType.CHECKBOX" } } ```
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedDecoratedText *decoratedText;

/**
 *  Displays a divider. For example, the following JSON creates a divider: ```
 *  "divider": { } ```
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedDivider *divider;

/**
 *  Displays a grid with a collection of items. For example, the following JSON
 *  creates a 2 column grid with a single item: ``` "grid": { "title": "A fine
 *  collection of items", "numColumns": 2, "borderStyle": { "type": "STROKE",
 *  "cornerRadius": 4.0 }, "items": [ "image": { "imageUri":
 *  "https://www.example.com/image.png", "cropStyle": { "type": "SQUARE" },
 *  "borderStyle": { "type": "STROKE" } }, "title": "An item", "textAlignment":
 *  "CENTER" ], "onClick": { "openLink": { "url":"https://www.example.com" } } }
 *  ```
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedGrid *grid;

/**
 *  The horizontal alignment of this widget.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedWidget_HorizontalAlignment_Center
 *        Alignment to the center position. (Value: "CENTER")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedWidget_HorizontalAlignment_End
 *        Alignment to the end position. (Value: "END")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedWidget_HorizontalAlignment_HorizontalAlignmentUnspecified
 *        Unspecified alignment. (Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_AppsDynamiteSharedWidget_HorizontalAlignment_Start
 *        Alignment to the start position. (Value: "START")
 */
@property(nonatomic, copy, nullable) NSString *horizontalAlignment;

/**
 *  Displays an image in this widget. For example, the following JSON creates an
 *  image with alternative text: ``` "image": { "imageUrl":
 *  "https://example.com/heba_salam.png" "altText": "Avatar for Heba Salam" }
 *  ```
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedImage *image;

/**
 *  Displays a switch control in this widget. For example, the following JSON
 *  creates a dropdown selection for size: ``` "switchControl": { "name":
 *  "size", "label": "Size" "type": "SelectionType.DROPDOWN", "items": [ {
 *  "text": "S", "value": "small", "selected": false }, { "text": "M", "value":
 *  "medium", "selected": true }, { "text": "L", "value": "large", "selected":
 *  false }, { "text": "XL", "value": "extra_large", "selected": false } ] } ```
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedSelectionInput *selectionInput;

/**
 *  Displays a text input in this widget. For example, the following JSON
 *  creates a text input for mail address: ``` "textInput": { "name":
 *  "mailing_address", "label": "Mailing Address" } ``` As another example, the
 *  following JSON creates a text input for programming language with static
 *  suggestions: ``` "textInput": { "name": "preferred_programing_language",
 *  "label": "Preferred Language", "initialSuggestions": { "items": [ { "text":
 *  "C++" }, { "text": "Java" }, { "text": "JavaScript" }, { "text": "Python" }
 *  ] } } ```
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedTextInput *textInput;

/**
 *  Displays a text paragraph in this widget. For example, the following JSON
 *  creates a bolded text: ``` "textParagraph": { "text": " *bold text*" } ```
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedTextParagraph *textParagraph;

@end


/**
 *  Interactive objects inside a message. Documentation: -
 *  https://api.slack.com/docs/message-buttons
 */
@interface GTLRCloudSearch_AppsDynamiteV1ApiCompatV1Action : GTLRObject

/** Confirmation dialog config. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteV1ApiCompatV1ActionConfirm *confirm;

/** Unique identifier for this action. */
@property(nonatomic, copy, nullable) NSString *name;

/** Button style ("default", "primary", or "danger"). */
@property(nonatomic, copy, nullable) NSString *style;

/** User-facing label for the action. */
@property(nonatomic, copy, nullable) NSString *text;

/** Action type - currently only "button". */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Payload for this action. Will be sent to the action handler along with name.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Confirmation dialog config.
 */
@interface GTLRCloudSearch_AppsDynamiteV1ApiCompatV1ActionConfirm : GTLRObject

/** "Cancel" button label. */
@property(nonatomic, copy, nullable) NSString *dismissText;

/** "OK" button label. */
@property(nonatomic, copy, nullable) NSString *okText;

/** Confirmation dialog body text. */
@property(nonatomic, copy, nullable) NSString *text;

/** Confirmation dialog title. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Richly formatted attachments. Documentation: -
 *  https://api.slack.com/docs/message-attachments
 */
@interface GTLRCloudSearch_AppsDynamiteV1ApiCompatV1Attachment : GTLRObject

/** Array of actions (currently only buttons). */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteV1ApiCompatV1Action *> *actions;

/**
 *  Undocumented - used in interactive button examples. The only valid value
 *  appears to be "default".
 */
@property(nonatomic, copy, nullable) NSString *attachmentType;

/** Avatar URL for the user. */
@property(nonatomic, copy, nullable) NSString *authorIcon;

/** URL that the user name should link to. */
@property(nonatomic, copy, nullable) NSString *authorLink;

/** User name to display as the author of the message. */
@property(nonatomic, copy, nullable) NSString *authorName;

/**
 *  Unique identifier for the collection of buttons within this attachment. Will
 *  be sent back to the action handler URL when a button is clicked.
 */
@property(nonatomic, copy, nullable) NSString *callbackId;

/** A color "bar" to display to the left of the attachment. */
@property(nonatomic, copy, nullable) NSString *color;

/** Fallback plain-text string for clients that don't support attachments. */
@property(nonatomic, copy, nullable) NSString *fallback;

/** Columns of text inside the attachment body. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteV1ApiCompatV1Field *> *fields;

/** A string displayed at the bottom of the attachment. */
@property(nonatomic, copy, nullable) NSString *footer;

/** Avatar URL displayed to the left of the footer. */
@property(nonatomic, copy, nullable) NSString *footerIcon;

/** URL of an image to display in an image chip. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/** List of fields to apply formatting to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *mrkdwnIn;

/** A string to show above the attachment. */
@property(nonatomic, copy, nullable) NSString *pretext;

/** Main text. */
@property(nonatomic, copy, nullable) NSString *text;

/**
 *  URL of a thumbnail image to display to the right of the attachment body.
 */
@property(nonatomic, copy, nullable) NSString *thumbUrl;

/** Title string of this attachment. */
@property(nonatomic, copy, nullable) NSString *title;

/** URL that the title string should link to. */
@property(nonatomic, copy, nullable) NSString *titleLink;

/**
 *  UNIX timestamp of the attachment.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ts;

@end


/**
 *  A column of text in an attachment. Documentation: -
 *  https://api.slack.com/docs/message-attachments
 */
@interface GTLRCloudSearch_AppsDynamiteV1ApiCompatV1Field : GTLRObject

/**
 *  Whether the field can be shown side-by-side with another field.
 *
 *  Remapped to 'shortProperty' to avoid language reserved word 'short'.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shortProperty;

/** The heading text, shown in bold. */
@property(nonatomic, copy, nullable) NSString *title;

/** The text value of the field. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupAddAttachmentsActionMarkup
 */
@interface GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupAddAttachmentsActionMarkup : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupAddAttachmentsActionMarkupAddonAttachment *> *addonAttachments;

@end


/**
 *  GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupAddAttachmentsActionMarkupAddonAttachment
 */
@interface GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupAddAttachmentsActionMarkupAddonAttachment : GTLRObject

/** Link to the resource's icon. */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/** MIME type of the content in resource_url. */
@property(nonatomic, copy, nullable) NSString *mimeType;

@property(nonatomic, copy, nullable) NSString *resourceUrl;

/** Title of the attachment. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Markup that defines conference data associated to a Google Calendar event.
 */
@interface GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkup : GTLRObject

/**
 *  Unique identifier for this conference data. Maximum 512 characters long.
 */
@property(nonatomic, copy, nullable) NSString *conferenceId;

/**
 *  An identifier of the conferencing solution. Must match a value from the
 *  deployment's `calendar.conferenceSolution.id` field.
 */
@property(nonatomic, copy, nullable) NSString *conferenceSolutionId;

/** Entry points to the conference. Maximum 300 entry points are allowed. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup *> *entryPoints;

/** If set, it means an error occurred during conference creation. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError *error;

/**
 *  Additional notes (such as instructions from the administrator, legal
 *  notices) to display to the user. Can contain HTML. Max length 2048
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *note;

/** Additional add-on parameters. Maximum 300 parameters are allowed. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupParameter *> *parameters;

@end


/**
 *  A way to join the conference.
 */
@interface GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup : GTLRObject

/**
 *  An access code for accessing the conference. Maximum 128 characters long.
 */
@property(nonatomic, copy, nullable) NSString *accessCode;

/**
 *  Features of the entry point, such as being toll or toll-free. One entry
 *  point can have multiple features.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *features;

/**
 *  The label of the entry point to display to the user. Maximum 512 characters
 *  long.
 */
@property(nonatomic, copy, nullable) NSString *label;

/**
 *  A meeting code for accessing the conference. Maximum 128 characters long.
 */
@property(nonatomic, copy, nullable) NSString *meetingCode;

/** A passcode for accessing the conference. Maximum 128 characters long. */
@property(nonatomic, copy, nullable) NSString *passcode;

/** A password for accessing the conference. Maximum 128 characters long. */
@property(nonatomic, copy, nullable) NSString *password;

/** A PIN for accessing the conference. Maximum 128 characters long. */
@property(nonatomic, copy, nullable) NSString *pin;

/**
 *  The CLDR/ISO 3166 region code for the country associated with this entry
 *  point. Applicable only to `Type.PHONE`.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  The type of the entry point. Required.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup_Type_More
 *        Used to provide a link to further conference joining information.
 *        (Value: "MORE")
 *    @arg @c kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup_Type_Phone
 *        A phone conference. (Value: "PHONE")
 *    @arg @c kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup_Type_Sip
 *        A conference using [Session Initiation
 *        Protocol](https://en.wikipedia.org/wiki/Session_Initiation_Protocol)
 *        (Value: "SIP")
 *    @arg @c kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup_Type_Unknown
 *        Unknown conference type. (Value: "UNKNOWN")
 *    @arg @c kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupEntryPointMarkup_Type_Video
 *        A video conference. (Value: "VIDEO")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  A URI for joining the conference. Supports tel: and http(s): and should be
 *  at most 1300 characters long. Required.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Represents an error that occurred during conference creation.
 */
@interface GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError : GTLRObject

/**
 *  If the error type is `AUTHENTICATION`, the add-on can provide a URL allowing
 *  users to log in. Maximum 1300 characters long.
 */
@property(nonatomic, copy, nullable) NSString *authenticationUrl;

/**
 *  The type of error. Required.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError_Type_Authentication
 *        An authentication error. (Value: "AUTHENTICATION")
 *    @arg @c kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError_Type_ConferenceSolutionForbidden
 *        The user isn't allowed to use the selected conference solution (but
 *        might be allowed to use other solutions offered by the add-on).
 *        (Value: "CONFERENCE_SOLUTION_FORBIDDEN")
 *    @arg @c kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError_Type_Permanent
 *        A permanent error. (Value: "PERMANENT")
 *    @arg @c kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError_Type_PermissionDenied
 *        The user isn't allowed to perform some action in the third-party
 *        conferencing system. (Value: "PERMISSION_DENIED")
 *    @arg @c kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError_Type_Temporary
 *        A temporary error. (Value: "TEMPORARY")
 *    @arg @c kGTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupError_Type_Unknown
 *        Unknown error. (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Solution-specific parameters that are persisted with the event data and, if
 *  an update or delete is needed, are passed to the add-on. For example:
 *  `[{key: 'sessionKey', value: '123'}, {key: 'meetingId', value: '456'}]`
 */
@interface GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkupParameter : GTLRObject

/** The key of the parameter. Maximum 50 characters long. Required. */
@property(nonatomic, copy, nullable) NSString *key;

/** The value of the parameter. Maximum 1024 characters long. Required. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupEditAttendeesActionMarkup
 */
@interface GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupEditAttendeesActionMarkup : GTLRObject

/** A list of attendees to add to the Google Calendar event. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *addAttendeeEmails;

@end


/**
 *  GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupEditConferenceDataActionMarkup
 */
@interface GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupEditConferenceDataActionMarkup : GTLRObject

/** The conference data to add to the Google Calendar event. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupConferenceDataMarkup *conferenceData;

@end


/**
 *  Attachments that follow the message text.
 */
@interface GTLRCloudSearch_Attachment : GTLRObject

/**
 *  Revised version of Gmail AddOn attachment approved by API design review.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkup *addOnData;

/**
 *  The userId for the bot/app that created this data, to be used for
 *  attribution of attachments when the attachment was not created by the
 *  message sender.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *appId;

/** To identify an attachment within repeated in a message */
@property(nonatomic, copy, nullable) NSString *attachmentId;

/**
 *  Card AddOn attachment with the possibility for specifying editable widgets.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedCard *cardAddOnData;

/** Deprecated version of Gmail AddOn attachment. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ContextualAddOnMarkup *deprecatedAddOnData;

/** Slack attachment. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteV1ApiCompatV1Attachment *slackData;

/**
 *  The height of image url as fetched by fife. This field is asynchronously
 *  filled.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *slackDataImageUrlHeight;

@end


/**
 *  Represents the settings for Cloud audit logging
 */
@interface GTLRCloudSearch_AuditLoggingSettings : GTLRObject

/**
 *  Indicates whether audit logging is on/off for admin activity read APIs i.e.
 *  Get/List DataSources, Get/List SearchApplications etc.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *logAdminReadActions;

/**
 *  Indicates whether audit logging is on/off for data access read APIs i.e.
 *  ListItems, GetItem etc.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *logDataReadActions;

/**
 *  Indicates whether audit logging is on/off for data access write APIs i.e.
 *  IndexItem etc.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *logDataWriteActions;

/**
 *  The resource name of the GCP Project to store audit logs. Cloud audit
 *  logging will be enabled after project_name has been updated through
 *  CustomerService. Format: projects/{project_id}
 */
@property(nonatomic, copy, nullable) NSString *project;

@end


/**
 *  A combination of an identifier for a Drive resource (e.g. file, folder, or
 *  drive) and any secrets needed to access it. The secrets should never be
 *  logged, and this proto annotates those secret fields to ensure that they are
 *  not. Clients are encouraged to use this proto rather than defining their
 *  own, to ensure that secrets are correctly annotated.
 */
@interface GTLRCloudSearch_AuthorizedItemId : GTLRObject

/**
 *  Serialized ID of the Drive resource
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Resource key of the Drive item. This field should be unset if, depending on
 *  the context, the item does not have a resource key, or if none was
 *  specified. This must never be logged.
 */
@property(nonatomic, copy, nullable) NSString *resourceKey;

@end


/**
 *  GTLRCloudSearch_AutoComplete
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRCloudSearch_AutoComplete : GTLRCollectionObject

/**
 *  items
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AutoCompleteItem *> *items;

@end


/**
 *  GTLRCloudSearch_AutoCompleteItem
 */
@interface GTLRCloudSearch_AutoCompleteItem : GTLRObject

@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Container for Babel (Hangouts Classic) only message properties. The
 *  properties here will not be consumed by Dynamite clients. They are relevant
 *  only for Hangouts Classic.
 */
@interface GTLRCloudSearch_BabelMessageProps : GTLRObject

/**
 *  Babel clients locally generate this ID to dedupe against the async fanout.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *clientGeneratedId;

/** Stores additional Babel-specific properties (such as event metadata). */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ChatContentExtension *contentExtension;

/** Stores the delivery source of messages (such as phone number for SMS). */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DeliveryMedium *deliveryMedium;

/** Primary identifier used by Hangouts Classic for its events (messages). */
@property(nonatomic, copy, nullable) NSString *eventId;

/** Stores message segments (text content) and attachments (media URLs). */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ChatConserverMessageContent *messageContent;

/**
 *  Whether or not these message properties were backfilled by go/dinnertrain.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wasUpdatedByBackfill;

@end


/**
 *  Annotation metadata for Babel-only items that signals which type of
 *  placeholder message should be displayed in Babel clients.
 */
@interface GTLRCloudSearch_BabelPlaceholderMetadata : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_DeleteMetadata *deleteMetadata;
@property(nonatomic, strong, nullable) GTLRCloudSearch_EditMetadata *editMetadata;
@property(nonatomic, strong, nullable) GTLRCloudSearch_HangoutVideoEventMetadata *hangoutVideoMetadata;

@end


/**
 *  Used to provide a search operator for boolean properties. This is optional.
 *  Search operators let users restrict the query to specific fields relevant to
 *  the type of item being searched.
 */
@interface GTLRCloudSearch_BooleanOperatorOptions : GTLRObject

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  boolean property. For example, if operatorName is *closed* and the
 *  property's name is *isClosed*, then queries like *closed:<value>* show
 *  results only where the value of the property named *isClosed* matches
 *  *<value>*. By contrast, a search that uses the same *<value>* without an
 *  operator returns all items where *<value>* matches the value of any String
 *  properties or text within the content field for the item. The operator name
 *  can only contain lowercase letters (a-z). The maximum length is 32
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

@end


/**
 *  The options for boolean properties.
 */
@interface GTLRCloudSearch_BooleanPropertyOptions : GTLRObject

/** If set, describes how the boolean should be used as a search operator. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_BooleanOperatorOptions *operatorOptions;

@end


/**
 *  Represents a complete border style that can be applied to widgets.
 */
@interface GTLRCloudSearch_BorderStyle : GTLRObject

/**
 *  The corner radius for the border.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cornerRadius;

/** The colors to use when the type is STROKE. */
@property(nonatomic, copy, nullable) NSString *strokeColor;

/**
 *  The border type.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_BorderStyle_Type_BorderTypeNotSet No value
 *        specified. (Value: "BORDER_TYPE_NOT_SET")
 *    @arg @c kGTLRCloudSearch_BorderStyle_Type_NoBorder No border. (Value:
 *        "NO_BORDER")
 *    @arg @c kGTLRCloudSearch_BorderStyle_Type_Stroke Outline. (Value:
 *        "STROKE")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Bot-specific profile information.
 */
@interface GTLRCloudSearch_BotInfo : GTLRObject

/**
 *  appAllowlistStatus
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_BotInfo_AppAllowlistStatus_AllAppsDisabledByAdmin
 *        For both ALL_APPS_DISABLED_BY_ADMIN and APP_NOT_ALLOWLISTED_BY_ADMIN,
 *        the app should still be visible in the catalog, but usage of the app
 *        will be disabled. Indicates that all apps have been disabled by the
 *        dasher admin. (Value: "ALL_APPS_DISABLED_BY_ADMIN")
 *    @arg @c kGTLRCloudSearch_BotInfo_AppAllowlistStatus_Allowed Value
 *        "ALLOWED"
 *    @arg @c kGTLRCloudSearch_BotInfo_AppAllowlistStatus_AppNotAllowlistedByAdmin
 *        Indicates that the customer is using allowlisting, but that the bot is
 *        not allowlisted. (Value: "APP_NOT_ALLOWLISTED_BY_ADMIN")
 *    @arg @c kGTLRCloudSearch_BotInfo_AppAllowlistStatus_UnspecifiedStatus
 *        Value "UNSPECIFIED_STATUS"
 */
@property(nonatomic, copy, nullable) NSString *appAllowlistStatus;

/** Identifier of the application associated with the bot. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppId *appId;

/**
 *  URL for the avatar picture of the User in dynamite. This field should be
 *  populated if the request is FetchBotCategories/ListBotCatalogEntries
 */
@property(nonatomic, copy, nullable) NSString *botAvatarUrl;

/**
 *  Non-unique, user-defined display name of the Bot. This field should be
 *  populated if the request is FetchBotCategories/ListBotCatalogEntries.
 */
@property(nonatomic, copy, nullable) NSString *botName;

/**
 *  Short description for the bot.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Name of bot developer. */
@property(nonatomic, copy, nullable) NSString *developerName;

/**
 *  URL for the banner image in GSuite Market Place. The banner will be 220x140.
 */
@property(nonatomic, copy, nullable) NSString *marketPlaceBannerUrl;

/**
 *  Indicates whether bot is enabled/disabled.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_BotInfo_Status_DisabledByDeveloper Bot has been
 *        disabled by the bot developer. No one can \@mention or interact with
 *        the bot. (Value: "DISABLED_BY_DEVELOPER")
 *    @arg @c kGTLRCloudSearch_BotInfo_Status_Enabled Value "ENABLED"
 *    @arg @c kGTLRCloudSearch_BotInfo_Status_UnknownStatus Value
 *        "UNKNOWN_STATUS"
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  The supported uses are limited according to the user that made the request.
 *  If the user does not have permission to use the bot, the list will be empty.
 *  This could occur for non whitelisted bots in the catalog.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *supportedUses;

/**
 *  If the app supports a home screen.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *supportHomeScreen;

/**
 *  Urls with additional information related to the bot. This field should
 *  always be set even if all the fields within it are empty, so that it is
 *  convenient for clients to work with this field in javascript.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SupportUrls *supportUrls;

@end


/**
 *  Information about a bot response, branched from shared/bot_response.proto
 *  without frontend User proto as we never store it.
 */
@interface GTLRCloudSearch_BotResponse : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *botId;

/**
 *  requiredAction
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_BotResponse_RequiredAction_Authentication Bot
 *        requires authentication. (Value: "AUTHENTICATION")
 *    @arg @c kGTLRCloudSearch_BotResponse_RequiredAction_Configuration Bot
 *        requires configuration. (Value: "CONFIGURATION")
 *    @arg @c kGTLRCloudSearch_BotResponse_RequiredAction_UnknownSetupType Value
 *        "UNKNOWN_SETUP_TYPE"
 */
@property(nonatomic, copy, nullable) NSString *requiredAction;

/**
 *  responseType
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_BotResponse_ResponseType_AppSuggestion A
 *        suggestion to promote an app. (Value: "APP_SUGGESTION")
 *    @arg @c kGTLRCloudSearch_BotResponse_ResponseType_DisabledByAdmin Bot
 *        fails to respond because it is disabled by domain admin (Value:
 *        "DISABLED_BY_ADMIN")
 *    @arg @c kGTLRCloudSearch_BotResponse_ResponseType_DisabledByDeveloper Bot
 *        fails to respond because it is disabled by the bot's developer (Value:
 *        "DISABLED_BY_DEVELOPER")
 *    @arg @c kGTLRCloudSearch_BotResponse_ResponseType_Error Bot fails to
 *        respond because of deadline_exceeded or failing to parse bot message.
 *        (Value: "ERROR")
 *    @arg @c kGTLRCloudSearch_BotResponse_ResponseType_Private Message to bot
 *        should be permanently private. (Value: "PRIVATE")
 *    @arg @c kGTLRCloudSearch_BotResponse_ResponseType_SetupRequired Bot
 *        requires auth or config (Value: "SETUP_REQUIRED")
 *    @arg @c kGTLRCloudSearch_BotResponse_ResponseType_UnknownResponseType
 *        Value "UNKNOWN_RESPONSE_TYPE"
 */
@property(nonatomic, copy, nullable) NSString *responseType;

/** URL for setting up bot. */
@property(nonatomic, copy, nullable) NSString *setupUrl;

@end


/**
 *  Broadcast access information of a meeting space.
 */
@interface GTLRCloudSearch_BroadcastAccess : GTLRObject

/**
 *  The policy that controls the broadcast's viewer access.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_BroadcastAccess_AccessPolicy_BroadcastingAccessPolicyUnspecified
 *        Used only when broadcast is not enabled, or an unknown enum value is
 *        used. (Value: "BROADCASTING_ACCESS_POLICY_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_BroadcastAccess_AccessPolicy_Organization Only
 *        authenticated Google accounts belonging to the same organization as
 *        the meeting organizer can access the broadcast. (Value:
 *        "ORGANIZATION")
 *    @arg @c kGTLRCloudSearch_BroadcastAccess_AccessPolicy_Public Anyone with
 *        the broadcast view URL can access the broadcast. (Value: "PUBLIC")
 */
@property(nonatomic, copy, nullable) NSString *accessPolicy;

/**
 *  A URL that can be used to access the broadcast of the meeting. This field
 *  will be empty if broadcast is not enabled. It will be populated by the
 *  backend. Clients cannot modify the value.
 */
@property(nonatomic, copy, nullable) NSString *viewUrl;

@end


/**
 *  Information about a broadcast session.
 */
@interface GTLRCloudSearch_BroadcastSessionInfo : GTLRObject

/** A unique server-generated ID for the broadcast session. */
@property(nonatomic, copy, nullable) NSString *broadcastSessionId;

/** Output only. Current broadcast session's statistics. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_BroadcastStats *broadcastStats;

/** Input only. Deprecated field, should not be used. */
@property(nonatomic, copy, nullable) NSString *ingestionId;

/** Broadcast session's state information. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SessionStateInfo *sessionStateInfo;

@end


/**
 *  Statistics of the broadcast session.
 */
@interface GTLRCloudSearch_BroadcastStats : GTLRObject

/**
 *  Estimated concurrent viewer count.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedViewerCount;

@end


/**
 *  GTLRCloudSearch_Button
 */
@interface GTLRCloudSearch_Button : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_ImageButton *imageButton;
@property(nonatomic, strong, nullable) GTLRCloudSearch_TextButton *textButton;

@end


/**
 *  GTLRCloudSearch_CalendarClientActionMarkup
 */
@interface GTLRCloudSearch_CalendarClientActionMarkup : GTLRObject

/** An action that adds attachments to the Google Calendar event. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupAddAttachmentsActionMarkup *addAttachmentsActionMarkup;

/** An action that adds attendees to the Google Calendar event. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupEditAttendeesActionMarkup *editAttendeesActionMarkup;

/** An action that adds conference data to the Google Calendar event. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsExtensionsMarkupCalendarClientActionMarkupEditConferenceDataActionMarkup *editConferenceDataActionMarkup;

@end


/**
 *  Contains information regarding an ongoing conference (aka call) for a
 *  meeting space.
 */
@interface GTLRCloudSearch_CallInfo : GTLRObject

/** Abuse reporting configuration for the ongoing conference. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AbuseReportingConfig *abuseReportingConfig;

/**
 *  Output only. Display name of the owner of artifacts generated in this
 *  conference. The expected use of this in clients is to present info like
 *  "This recording will be sent to John Doe's Drive". This field can be empty
 *  if preferred display name determination fails for any reason.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserDisplayInfo *artifactOwner;

/** Output only. Documents attached to an ongoing conference. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_DocumentInfo *> *attachedDocuments;

/**
 *  Output only. The set of reactions that clients are allowed to send and can
 *  expect to receive. Note that a device in the conference should have the
 *  MAY_SEND_REACTIONS privilege to be able to send reactions.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ReactionInfo *> *availableReactions;

/** Information about active broadcast session in the ongoing conference. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_BroadcastSessionInfo *broadcastSessionInfo;

/**
 *  Output only. The calendar event ID of a Google Calendar event that the
 *  meeting space is associated with. If the meeting space is not associated
 *  with an event in Google Calendar, this field is empty. For recurring events,
 *  it refers to the recurring instance associated with the current call, as
 *  determined by the server.
 */
@property(nonatomic, copy, nullable) NSString *calendarEventId;

/** Configuration for the chat for this conference. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ChatConfig *chatConfig;

/**
 *  The current co-activity session, or unset if there is none in progress. A
 *  co-activity session can be initiated by devices in JOINED state . Initiator
 *  of the co-activity is expected to populate this field to start the session.
 *  Once clients detect that the co-activity has finished, any JOINED device can
 *  clear this field to end the co-activity session. In the case of switching
 *  activities, the initiator of the new activity merely needs to override this
 *  with the new co-activity data, and all connected clients are expected to
 *  handle the transition gracefully.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_CoActivity *coActivity;

/**
 *  The current collaboration session, or unset if no collaboration is in
 *  progress.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Collaboration *collaboration;

/** CSE information for the ongoing conference. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_CseInfo *cseInfo;

/**
 *  Output only. The maximum number of devices that may be in the joined state
 *  simultaneously in this conference. This can be used by clients to guess
 *  whether it will be possible to join, but the only way to know is to try to
 *  join. It can also be used to inform users about the limit that is in effect.
 *  This limit is normally set when the conference is created and not changed
 *  during the lifetime of the conference. But there are some cases where it may
 *  change, so clients should be aware that the information may be stale.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxJoinedDevices;

/**
 *  Output only. Information about the media backend for the currently ongoing
 *  conference in the meeting space. The media backend information will only be
 *  filled in for clients that are supposed to present the information. The
 *  information should be displayed in a debug panel and is only intended for
 *  internal debugging purposes. If the string is empty nothing should be
 *  displayed about the media backend.
 */
@property(nonatomic, copy, nullable) NSString *mediaBackendInfo;

/**
 *  Output only. The name or description of the organization or domain that the
 *  organizer belongs to. The expected use of this in clients is to present
 *  messages like "John Doe (outside of Google.com) is trying to join this
 *  call", where "Google.com" is the organization name. The field will be empty
 *  if the organization name could not be determined, possibly because of a
 *  backend error.
 */
@property(nonatomic, copy, nullable) NSString *organizationName;

/** Paygate information to clients. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_PaygateInfo *paygateInfo;

/**
 *  The current presenter in the call, or unset if there is no current
 *  presenter. Clients can set this to change the presenter.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Presenter *presenter;

/**
 *  Deprecated, use RecordingSessionInfo instead. Info about recording for this
 *  conference. This will always be set in server responses, with a valid
 *  recording status. This is superseded by streaming_sessions field, which
 *  contains the same information about this recording as well as additional
 *  information about other application type at the same time. This will be
 *  deprecated and removed at some point.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RecordingInfo *recordingInfo;

/** Information about active recording session in the ongoing conference. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RecordingSessionInfo *recordingSessionInfo;

/** Settings of the ongoing conference. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_CallSettings *settings;

/**
 *  Output only. Info about streaming sessions (recording or broadcast) for this
 *  conference. This should contain all active sessions. Currently, it's
 *  guaranteed to have at most one recording and at most one broadcast (at most
 *  two sessions in total). For each application type (recording or broadcast),
 *  latest inactive session is included if there's no active one.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_StreamingSessionInfo *> *streamingSessions;

/**
 *  Information about active transcription session in the ongoing conference.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_TranscriptionSessionInfo *transcriptionSessionInfo;

/**
 *  The number of devices viewing the conference - MeetingDevices that are in
 *  VIEWER role and JOINED state in the conference.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *viewerCount;

/**
 *  Information about active YouTube broadcast sessions in the ongoing
 *  conference.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_YouTubeBroadcastSessionInfo *> *youTubeBroadcastSessionInfos;

@end


/**
 *  Effective settings of the ongoing conference.
 */
@interface GTLRCloudSearch_CallSettings : GTLRObject

/**
 *  Indicates whether the access lock is currently on or off.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *accessLock;

/**
 *  The current access type of the conference.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_CallSettings_AccessType_AccessTypeOpen Anyone
 *        with meeting join information (url, phone access...) can join, no
 *        knocking required. (Subject to organization policies) (Value:
 *        "ACCESS_TYPE_OPEN")
 *    @arg @c kGTLRCloudSearch_CallSettings_AccessType_AccessTypeRestricted Only
 *        participants invited by a host can automatically join, everyone else
 *        must knock and be admitted. (Subject to organization policies)
 *        Participants cannot dial out from the meeting. And only hosts can
 *        accept knocks. (Value: "ACCESS_TYPE_RESTRICTED")
 *    @arg @c kGTLRCloudSearch_CallSettings_AccessType_AccessTypeTrusted Members
 *        of the Host's organization, invited external users, and dial-in users
 *        can join without knocking, everyone else must knock. (Subject to
 *        organization policies) (Value: "ACCESS_TYPE_TRUSTED")
 *    @arg @c kGTLRCloudSearch_CallSettings_AccessType_AccessTypeUnspecified
 *        Default value. This value is unused. (Value:
 *        "ACCESS_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *accessType;

/**
 *  Whether users can join this conference before a host (Host or Cohost).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowJoiningBeforeHost;

/**
 *  Indicates whether the attendance report is currently enabled or disabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *attendanceReportEnabled;

/**
 *  Indicates whether the audio lock is currently on or off.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *audioLock;

/**
 *  Indicates whether the chat lock is currently on or off.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *chatLock;

/**
 *  Whether Client-side Encryption is enabled for this conference.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cseEnabled;

/**
 *  Indicates whether moderation is currently on or off.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *moderationEnabled;

/**
 *  Indicates whether the present lock is currently on or off.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *presentLock;

/**
 *  Indicates whether the reactions lock is currently on or off.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reactionsLock;

/**
 *  Indicates whether the video lock is currently on or off.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *videoLock;

@end


/**
 *  Represents a principal which possesses a particular secret string whose
 *  cryptographic hash is specified here. CapTokens ("Capability Tokens") are
 *  used in ACLProto. It's expected that ACLs with CapTokenHolders will strongly
 *  enforce them by Keystore-wrapping crypto keys for the corresponding
 *  CapTokens.
 */
@interface GTLRCloudSearch_CapTokenHolderProto : GTLRObject

/**
 *  The hash of the corresponding capability token. The value is defined to be
 *  identical to the one in acl.proto's CapTokenMetadata: 10-byte prefix of
 *  HMAC-SHA1 of the token. The HMAC key is the following fixed (non-secret)
 *  512-bit value: 79b1c8f4 82baf523 b8a9ab4a e960f438 c45be041 11f1f222
 *  e8a3f64d aeb05e3d c3576acc ec649194 aede422c 4e48e0d1 ff21234a a6ed6b49
 *  a7fa592e efd7bba3
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *tokenHmacSha1Prefix;

@end


/**
 *  GTLRCloudSearch_Card
 */
@interface GTLRCloudSearch_Card : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_CardAction *> *cardActions;

/**
 *  displayStyle
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Card_DisplayStyle_DisplayStyleUnspecified Value
 *        "DISPLAY_STYLE_UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_Card_DisplayStyle_Peek Value "PEEK"
 *    @arg @c kGTLRCloudSearch_Card_DisplayStyle_Replace Value "REPLACE"
 */
@property(nonatomic, copy, nullable) NSString *displayStyle;

@property(nonatomic, strong, nullable) GTLRCloudSearch_FixedFooter *fixedFooter;
@property(nonatomic, strong, nullable) GTLRCloudSearch_CardHeader *header;

/** Name of the card used in CardNavigation.pop_to_card_name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  When displaying contextual content, the peek card header acts as a
 *  placeholder so that the user can navigate forward between the homepage cards
 *  and the contextual cards.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_CardHeader *peekCardHeader;

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Section *> *sections;

@end


/**
 *  When an AddOn Card is shown in detailed view, a card action is the action
 *  associated with the card. For an invoice card, a typical action would be:
 *  delete invoice, email invoice or open the invoice in browser.
 */
@interface GTLRCloudSearch_CardAction : GTLRObject

/** The label used to be displayed in the action menu item. */
@property(nonatomic, copy, nullable) NSString *actionLabel;

@property(nonatomic, strong, nullable) GTLRCloudSearch_OnClick *onClick;

@end


/**
 *  GTLRCloudSearch_CardCapabilityMetadata
 */
@interface GTLRCloudSearch_CardCapabilityMetadata : GTLRObject

/** NEXT TAG : 2 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *requiredCapabilities;

@end


/**
 *  GTLRCloudSearch_CardHeader
 */
@interface GTLRCloudSearch_CardHeader : GTLRObject

/**
 *  The alternative text of this image which will be used for accessibility.
 */
@property(nonatomic, copy, nullable) NSString *imageAltText;

/**
 *  imageStyle
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_CardHeader_ImageStyle_Circle Applies a circular
 *        crop. (Value: "CIRCLE")
 *    @arg @c kGTLRCloudSearch_CardHeader_ImageStyle_CropTypeNotSet No value
 *        specified. (Value: "CROP_TYPE_NOT_SET")
 *    @arg @c kGTLRCloudSearch_CardHeader_ImageStyle_Rectangle43 Applies a
 *        rectangular crop with a 4:3 aspect ratio. (Value: "RECTANGLE_4_3")
 *    @arg @c kGTLRCloudSearch_CardHeader_ImageStyle_RectangleCustom Applies a
 *        rectangular crop with a custom aspect ratio. (Value:
 *        "RECTANGLE_CUSTOM")
 *    @arg @c kGTLRCloudSearch_CardHeader_ImageStyle_Square Applies a square
 *        crop. (Value: "SQUARE")
 */
@property(nonatomic, copy, nullable) NSString *imageStyle;

@property(nonatomic, copy, nullable) NSString *imageUrl;
@property(nonatomic, copy, nullable) NSString *subtitle;

/**
 *  The title must be specified. The header has a fixed height: if both a title
 *  and subtitle is specified, each will take up 1 line. If only the title is
 *  specified, it will take up both lines. The header is rendered in collapsed
 *  and detailed view.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Actions handled by Chat Clients.
 */
@interface GTLRCloudSearch_ChatClientActionMarkup : GTLRObject
@end


/**
 *  Configuration of the in meeting chat.
 */
@interface GTLRCloudSearch_ChatConfig : GTLRObject

/**
 *  The Type of chat this Conference is currently using.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_ChatConfig_ChatType_ChatTypeUnspecified Chat Type
 *        has not been specified. (Value: "CHAT_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_ChatConfig_ChatType_GoogleChat Google Chat.
 *        (Value: "GOOGLE_CHAT")
 *    @arg @c kGTLRCloudSearch_ChatConfig_ChatType_MeetChat Meets native chat.
 *        (Value: "MEET_CHAT")
 */
@property(nonatomic, copy, nullable) NSString *chatType;

/** The configuration of Google Chat when selected. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleChatConfig *googleChatConfig;

@end


/**
 *  Metadata used as inputs to the localization that is performed on
 *  Dynamite-originated messages that are incompatible with Hangouts clients.
 *  See go/localization-of-system-messages for more details.
 */
@interface GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadata : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataAttachmentMetadata *attachmentMetadata;
@property(nonatomic, strong, nullable) GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataBotMessageMetadata *botMessageMetadata;
@property(nonatomic, strong, nullable) GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataCalendarEventMetadata *calendarEventMetadata;
@property(nonatomic, strong, nullable) GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataDeleteMetadata *deleteMetadata;
@property(nonatomic, strong, nullable) GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataEditMetadata *editMetadata;

/** The space URL embedded in the localized string. */
@property(nonatomic, copy, nullable) NSString *spaceUrl;

@property(nonatomic, strong, nullable) GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataTasksMetadata *tasksMetadata;
@property(nonatomic, strong, nullable) GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataVideoCallMetadata *videoCallMetadata;

@end


/**
 *  An attachment uploaded in Dynamite and its filename.
 */
@interface GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataAttachmentMetadata : GTLRObject

@property(nonatomic, copy, nullable) NSString *filename;

@end


/**
 *  A bot sent a message in Dynamite.
 */
@interface GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataBotMessageMetadata : GTLRObject
@end


/**
 *  A Calendar event message in Dynamite.
 */
@interface GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataCalendarEventMetadata : GTLRObject
@end


/**
 *  A message was deleted in Dynamite.
 */
@interface GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataDeleteMetadata : GTLRObject
@end


/**
 *  An edit was made in Dynamite.
 */
@interface GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataEditMetadata : GTLRObject
@end


/**
 *  A Tasks message in Dynamite.
 */
@interface GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataTasksMetadata : GTLRObject
@end


/**
 *  A Meet initiated in Dynamite and its URL.
 */
@interface GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadataVideoCallMetadata : GTLRObject

@property(nonatomic, copy, nullable) NSString *meetingUrl;

@end


/**
 *  The content of a chat message, which includes 0 or more segments along with
 *  0 or more embeds, which represent various attachment types (like photos).
 */
@interface GTLRCloudSearch_ChatConserverMessageContent : GTLRObject

/**
 *  Items attached to this message, such as photos. This should *NOT* be set by
 *  clients. It will be automatically set from media uploaded along with this
 *  request and using the information provided in existing_media.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SocialCommonAttachmentAttachment *> *attachment;

/**
 *  The text part of the message content. Segments are concatenated together to
 *  yield the full message. A message can have zero or more segments.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Segment *> *segment;

@end


/**
 *  NEXT ID: 12
 */
@interface GTLRCloudSearch_ChatContentExtension : GTLRObject

/** Annotations to decorate this event. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_EventAnnotation *> *annotation;

/**
 *  This metadata informs how the placeholder string will be localized
 *  dynamically in Hangouts. See go/localization-of-system-messages. This is
 *  only used as part of REGULAR_CHAT_MESSAGE events.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ChatConserverDynamitePlaceholderMetadata *dynamitePlaceholderMetadata;

/**
 *  Is this event OnTR or OffTR? Since some events can be ON_THE_RECORD and have
 *  an expiration_timestamp (for example enterprise retention users) we need to
 *  store the otr status.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_ChatContentExtension_EventOtrStatus_OffTheRecord
 *        The conversation is completely off the record. (Value:
 *        "OFF_THE_RECORD")
 *    @arg @c kGTLRCloudSearch_ChatContentExtension_EventOtrStatus_OnTheRecord
 *        The conversation is completely on the record. (Value: "ON_THE_RECORD")
 */
@property(nonatomic, copy, nullable) NSString *eventOtrStatus;

/** Group-link sharing toggle event. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GroupLinkSharingModificationEvent *groupLinkSharingModificationEvent;

/** Audio/video Hangout event. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_HangoutEvent *hangoutEvent;

/**
 *  Invite accepted events. Note: this is only used ephemerally to sync to
 *  Gmail. No actual cent is stored in Papyrus.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_InviteAcceptedEvent *inviteAcceptedEvent;

/** Join/leave events. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_MembershipChangeEvent *membershipChangeEvent;

/** Metadata for off-the-record message. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_OtrChatMessageEvent *otrChatMessageEvent;

@property(nonatomic, strong, nullable) GTLRCloudSearch_OtrModificationEvent *otrModificationEvent;
@property(nonatomic, strong, nullable) GTLRCloudSearch_RenameEvent *renameEvent;

@end


/**
 *  Represents the invitees or other users associated with a Babel Chat (see
 *  http://goto/babel). Corresponds to GroupType CHAT in
 *  //social/graph/storage/proto/data.proto.
 */
@interface GTLRCloudSearch_ChatProto : GTLRObject

/**
 *  Chat IDs consist of alphanumeric characters and colons. Currently required.
 */
@property(nonatomic, copy, nullable) NSString *chatId;

/**
 *  The type of Chat members to consider, e.g. "all members" vs. "invitee" These
 *  are defined by legacy_relation_id values in
 *  social.graph.storage.EdgeTypeEnum.EdgeType enum options in
 *  social/graph/storage/proto/id.proto. See chat.pb (defined in
 *  production/config/cdd/socialgraph/mixer_config/prod/node_type_config) for
 *  all valid edge types associated with chat. Currently required.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memberType;

@end


/**
 *  GTLRCloudSearch_CheckAccessResponse
 */
@interface GTLRCloudSearch_CheckAccessResponse : GTLRObject

/**
 *  Returns true if principal has access. Returns false otherwise.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasAccess;

@end


/**
 *  Represents a Google+ Circle. Currently (12/2011), a Circle is identical to
 *  the ContactGroup with matching parameters, but Circle must only be used for
 *  true Circles and not other Focus groups, and should be preferred over
 *  ContactGroup where applicable. Soon it may become more efficient to check
 *  membership in a Circle than in a ContactGroup (see http://go/superglue).
 *  Support for this principal type is currently (12/2011) incomplete -- e.g.,
 *  Keystore does not support it yet (see b/5703421).
 */
@interface GTLRCloudSearch_CircleProto : GTLRObject

/**
 *  Circle ID is unique only relative to the owner's Gaia ID. Currently
 *  required.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *circleId;

/**
 *  The owner of the circle. Currently required.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ownerGaiaId;

/**
 *  If present, then tests for membership in this circle must use data known to
 *  be at least as fresh as the given (FBS-assigned) timestamp. See
 *  http://go/fbs-consistent-read-after-important-write Before using this, be
 *  sure that any service checking authorization against this circle supports
 *  checking consistency timestamps. For example, as of 12/2011, Keystore only
 *  supports this for the Moonshine configuration, and in others authorization
 *  checks will fail if the timestamp is present.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requiredConsistencyTimestampUsec;

@end


/**
 *  Principal associated with a Cloud Principal representing third party user.
 */
@interface GTLRCloudSearch_CloudPrincipalProto : GTLRObject

/**
 *  Format: "{identity-pool}:{subject}#" Details: go/cloud-principal-identifiers
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  Metadata about a co-activity session.
 */
@interface GTLRCloudSearch_CoActivity : GTLRObject

/**
 *  The title of the activity in this co-activity session. For example, this
 *  might be the title of the video being co-watched, or the name of the round
 *  of a game being co-played.
 */
@property(nonatomic, copy, nullable) NSString *activityTitle;

/**
 *  Identifies the app handling this co-activity.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_CoActivity_CoActivityApp_CoActivityAppGqueues
 *        GQueues task manager. (Value: "CO_ACTIVITY_APP_GQUEUES")
 *    @arg @c kGTLRCloudSearch_CoActivity_CoActivityApp_CoActivityAppHeadsup
 *        HeadsUp game. (Value: "CO_ACTIVITY_APP_HEADSUP")
 *    @arg @c kGTLRCloudSearch_CoActivity_CoActivityApp_CoActivityAppKahoot
 *        Kahoot! educational software. (Value: "CO_ACTIVITY_APP_KAHOOT")
 *    @arg @c kGTLRCloudSearch_CoActivity_CoActivityApp_CoActivityAppSpotify
 *        Spotify music. (Value: "CO_ACTIVITY_APP_SPOTIFY")
 *    @arg @c kGTLRCloudSearch_CoActivity_CoActivityApp_CoActivityAppUno Uno
 *        game. (Value: "CO_ACTIVITY_APP_UNO")
 *    @arg @c kGTLRCloudSearch_CoActivity_CoActivityApp_CoActivityAppUnspecified
 *        Should never be used. (Value: "CO_ACTIVITY_APP_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_CoActivity_CoActivityApp_CoActivityAppYouTubeMain
 *        Main YouTube app, for watching videos. (Value:
 *        "CO_ACTIVITY_APP_YOU_TUBE_MAIN")
 */
@property(nonatomic, copy, nullable) NSString *coActivityApp;

@end


/**
 *  Information about a collaboration session.
 */
@interface GTLRCloudSearch_Collaboration : GTLRObject

/** The attachment being collaborated on. */
@property(nonatomic, copy, nullable) NSString *attachmentId;

/** Display info of the user who initiated the collaboration session. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserDisplayInfo *initiator;

/** The uri of the artifact being collaborated on. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Represents a color in the RGBA color space. This representation is designed
 *  for simplicity of conversion to/from color representations in various
 *  languages over compactness. For example, the fields of this representation
 *  can be trivially provided to the constructor of `java.awt.Color` in Java; it
 *  can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha`
 *  method in iOS; and, with just a little work, it can be easily formatted into
 *  a CSS `rgba()` string in JavaScript. This reference page doesn't carry
 *  information about the absolute color space that should be used to interpret
 *  the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default,
 *  applications should assume the sRGB color space. When color equality needs
 *  to be decided, implementations, unless documented otherwise, treat two
 *  colors as equal if all their red, green, blue, and alpha values each differ
 *  by at most 1e-5. Example (Java): import com.google.type.Color; // ... public
 *  static java.awt.Color fromProto(Color protocolor) { float alpha =
 *  protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new
 *  java.awt.Color( protocolor.getRed(), protocolor.getGreen(),
 *  protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color
 *  color) { float red = (float) color.getRed(); float green = (float)
 *  color.getGreen(); float blue = (float) color.getBlue(); float denominator =
 *  255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red /
 *  denominator) .setGreen(green / denominator) .setBlue(blue / denominator);
 *  int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha(
 *  FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build());
 *  } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ...
 *  static UIColor* fromProto(Color* protocolor) { float red = [protocolor red];
 *  float green = [protocolor green]; float blue = [protocolor blue];
 *  FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if
 *  (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor
 *  colorWithRed:red green:green blue:blue alpha:alpha]; } static Color*
 *  toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color
 *  getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color*
 *  result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green];
 *  [result setBlue:blue]; if (alpha <= 0.9999) { [result
 *  setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return
 *  result; } // ... Example (JavaScript): // ... var protoToCssColor =
 *  function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac =
 *  rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red =
 *  Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue
 *  = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return
 *  rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value ||
 *  0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(',
 *  rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor =
 *  function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green
 *  << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6
 *  - hexString.length; var resultBuilder = ['#']; for (var i = 0; i <
 *  missingZeros; i++) { resultBuilder.push('0'); }
 *  resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
 */
@interface GTLRCloudSearch_Color : GTLRObject

/**
 *  The fraction of this color that should be applied to the pixel. That is, the
 *  final pixel color is defined by the equation: `pixel color = alpha * (this
 *  color) + (1.0 - alpha) * (background color)` This means that a value of 1.0
 *  corresponds to a solid color, whereas a value of 0.0 corresponds to a
 *  completely transparent color. This uses a wrapper message rather than a
 *  simple float scalar so that it is possible to distinguish between a default
 *  value and the value being unset. If omitted, this color object is rendered
 *  as a solid color (as if the alpha value had been explicitly given a value of
 *  1.0).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *alpha;

/**
 *  The amount of blue in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blue;

/**
 *  The amount of green in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *green;

/**
 *  The amount of red in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *red;

@end


/**
 *  An individual instance (or "tag") of a label configured as a communal type
 *  that's associated with a message.
 */
@interface GTLRCloudSearch_CommunalLabelTag : GTLRObject

/**
 *  Gaia ID of the user who added the tag, if any. Not present for any tags
 *  automatically created by server-side processing.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creatorUserId;

/**
 *  A string ID representing the label. Possible ID values are documented at
 *  go/chat-labels-howto:ids. Example: "^*t_p" for "Pinned".
 */
@property(nonatomic, copy, nullable) NSString *labelId;

@end


/**
 *  GTLRCloudSearch_CompositeFilter
 */
@interface GTLRCloudSearch_CompositeFilter : GTLRObject

/**
 *  The logic operator of the sub filter.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_CompositeFilter_LogicOperator_And Logical
 *        operators, which can only be applied to sub filters. (Value: "AND")
 *    @arg @c kGTLRCloudSearch_CompositeFilter_LogicOperator_Not NOT can only be
 *        applied on a single sub filter. (Value: "NOT")
 *    @arg @c kGTLRCloudSearch_CompositeFilter_LogicOperator_Or Value "OR"
 */
@property(nonatomic, copy, nullable) NSString *logicOperator;

/** Sub filters. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Filter *> *subFilters;

@end


/**
 *  Annotation metadata app unfurl consent.
 */
@interface GTLRCloudSearch_ConsentedAppUnfurlMetadata : GTLRObject

/** Client specified AppId, which will not be sanitized and is untrusted. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *clientSpecifiedAppId;

@end


/**
 *  A group of contacts for a given user, as described in
 *  http://cs/p#google3/focus/backend/proto/backend.proto Historically (and in
 *  still-existing ACLs), this was used to represent Google+ circles as well as
 *  contact groups, but this use is now deprecated. New code should use the
 *  CIRCLE principal type to represent Google+ circles.
 */
@interface GTLRCloudSearch_ContactGroupProto : GTLRObject

/**
 *  Group ID is unique only relative to the owner's Gaia ID.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *groupId;

/**
 *  ownerGaiaId
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ownerGaiaId;

/**
 *  If present, then tests for membership in this ContactGroup must use data
 *  known to be at least as fresh as the given (FBS-assigned) timestamp. See
 *  http://go/fbs-consistent-read-after-important-write Before using this, be
 *  sure that any service checking authorization against this group supports
 *  checking consistency timestamps. For example, as of 12/2011, Keystore only
 *  supports this for the Moonshine configuration, and in others authorization
 *  checks will fail if the timestamp is present.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requiredConsistencyTimestampUsec;

@end


/**
 *  GTLRCloudSearch_ContentReport
 */
@interface GTLRCloudSearch_ContentReport : GTLRObject

/**
 *  The time at which the report is generated. Always populated when it is in a
 *  response.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *reportCreateTimestamp;

/** User ID of the reporter. Always populated when it is in a response. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *reporterUserId;

/** Additional user-provided justification on the report. Optional. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ContentReportJustification *reportJustification;

/** Type of the report. Always populated when it is in a response. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedContentReportType *reportType;

/**
 *  Create timestamp of the revisions of the message when it's reported. Always
 *  populated when it is in a response.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *revisionCreateTimestamp;

@end


/**
 *  GTLRCloudSearch_ContentReportJustification
 */
@interface GTLRCloudSearch_ContentReportJustification : GTLRObject

/**
 *  Optional. User-generated free-text justification for the content report.
 */
@property(nonatomic, copy, nullable) NSString *userJustification;

@end


/**
 *  Summarized info of content reports. Usually less expensive to fetch than to
 *  fetch all detailed reports. Set only when the request asks for it.
 */
@interface GTLRCloudSearch_ContentReportSummary : GTLRObject

/**
 *  Total number of reports attached to this (revision of) message.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numberReports;

/**
 *  Totoal number of reports attached to all revisions of this message (i.e.
 *  since creation). Set only when the request asks for it.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numberReportsAllRevisions;

@end


/**
 *  A named attribute associated with an item which can be used for influencing
 *  the ranking of the item based on the context in the request.
 */
@interface GTLRCloudSearch_ContextAttribute : GTLRObject

/**
 *  The name of the attribute. It should not be empty. The maximum length is 32
 *  characters. The name must start with a letter and can only contain letters
 *  (A-Z, a-z) or numbers (0-9). The name will be normalized (lower-cased)
 *  before being matched.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Text values of the attribute. The maximum number of elements is 10. The
 *  maximum length of an element in the array is 32 characters. The value will
 *  be normalized (lower-cased) before being matched.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  The markup for developers to specify the contents of a contextual AddOn. A
 *  contextual AddOn is triggered in context of an email. For that email, there
 *  can be N items that are associated with the email (e.g. contacts, sales
 *  lead, meeting information). Each item is represented as a "card". A card has
 *  two views, collapsed and detailed. If there are more than 1 card, the cards
 *  are show as a list of collapsed views. The end user can expand into the
 *  detailed view for each of those cards. In the detailed view, developers have
 *  the freedom to use a variety of "widgets" to construct it. The model here is
 *  to restrict (make consistent for end users) the navigation of the N cards
 *  but providing developers the freedom to build the detailed view that can
 *  best represent their use case/content. Go http://go/aoig-widgets1 to see the
 *  mocks. Post v1, we plan to support new AddOn use cases that will require
 *  different and separate 'templates'. For example, a compose triggered AddOn
 *  which will support a new set of use cases with different user interaction
 *  patterns. As a result, we will likely need a very different template than
 *  this one.
 */
@interface GTLRCloudSearch_ContextualAddOnMarkup : GTLRObject

/** A card must contain a header and at least 1 section. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Card *> *cards;

/** Deprecated. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Toolbar *toolbar;

@end


/**
 *  Information needed for Client-side Encryption.
 */
@interface GTLRCloudSearch_CseInfo : GTLRObject

/**
 *  CSE domain name claimed by the meeting owner's company. This field is
 *  expected to be used for display purposes only, i.e., "Extra encryption added
 *  by $cse_domain". It can differ from the `cse_domain` as defined elsewhere on
 *  the User, in the case of cross-domain meetings.
 */
@property(nonatomic, copy, nullable) NSString *cseDomain;

/**
 *  The wrapped CSE key used by this conference.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *wrappedKey;

@end


/**
 *  GTLRCloudSearch_CustomEmojiMetadata
 */
@interface GTLRCloudSearch_CustomEmojiMetadata : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedCustomEmoji *customEmoji;

@end


/**
 *  Represents a GSuite customer ID. Obfuscated with CustomerIdObfuscator.
 */
@interface GTLRCloudSearch_CustomerId : GTLRObject

@property(nonatomic, copy, nullable) NSString *customerId;

@end


/**
 *  Aggregation of items by status code as of the specified date.
 */
@interface GTLRCloudSearch_CustomerIndexStats : GTLRObject

/** The date for which statistics were calculated. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Date *date;

/** Number of items aggregrated by status code. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ItemCountByStatus *> *itemCountByStatus;

@end


/**
 *  GTLRCloudSearch_CustomerQueryStats
 */
@interface GTLRCloudSearch_CustomerQueryStats : GTLRObject

/**
 *  The date for which query stats were calculated. Stats calculated on the next
 *  day close to midnight are returned.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Date *date;

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_QueryCountByStatus *> *queryCountByStatus;

@end


/**
 *  Search application stats for a customer for the given date.
 */
@interface GTLRCloudSearch_CustomerSearchApplicationStats : GTLRObject

/**
 *  The count of search applications for the date.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/** The date for which search application stats were calculated. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Date *date;

@end


/**
 *  GTLRCloudSearch_CustomerSessionStats
 */
@interface GTLRCloudSearch_CustomerSessionStats : GTLRObject

/**
 *  The date for which session stats were calculated. Stats are calculated on
 *  the following day, close to midnight PST, and then returned.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Date *date;

/**
 *  The count of search sessions on the day
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *searchSessionsCount;

@end


/**
 *  Represents settings at a customer level.
 */
@interface GTLRCloudSearch_CustomerSettings : GTLRObject

/**
 *  Audit Logging settings for the customer. If update_mask is empty then this
 *  field will be updated based on UpdateCustomerSettings request.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AuditLoggingSettings *auditLoggingSettings;

/**
 *  VPC SC settings for the customer. If update_mask is empty then this field
 *  will be updated based on UpdateCustomerSettings request.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_VPCSettings *vpcSettings;

@end


/**
 *  GTLRCloudSearch_CustomerUserStats
 */
@interface GTLRCloudSearch_CustomerUserStats : GTLRObject

/**
 *  The date for which session stats were calculated. Stats calculated on the
 *  next day close to midnight are returned.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Date *date;

/**
 *  The count of unique active users in the past one day
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *oneDayActiveUsersCount;

/**
 *  The count of unique active users in the past seven days
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sevenDaysActiveUsersCount;

/**
 *  The count of unique active users in the past thirty days
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *thirtyDaysActiveUsersCount;

@end


/**
 *  The result of a user running a custom function.
 */
@interface GTLRCloudSearch_CustomFunctionReturnValueMarkup : GTLRObject

/** The error message to show to the user if something went wrong. */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/**
 *  The value that resulted from running the custom function.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id value;

@end


/**
 *  Annotation metadata for Data Loss Prevention that pertains to DLP violation
 *  on message send or edit events. It is used for client -> BE communication
 *  and other downstream process in BE (e.g. storage and audit logging), and it
 *  should never be returned to the client.
 */
@interface GTLRCloudSearch_DataLossPreventionMetadata : GTLRObject

/**
 *  The DLP scan summary that should only be set after the message is scanned in
 *  the Chat backend.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DlpScanSummary *dlpScanSummary;

/**
 *  Flag set by client on message resend to bypass WARN violation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *warnAcknowledged;

@end


/**
 *  Datasource is a logical namespace for items to be indexed. All items must
 *  belong to a datasource. This is the prerequisite before items can be indexed
 *  into Cloud Search.
 */
@interface GTLRCloudSearch_DataSource : GTLRObject

/**
 *  If true, sets the datasource to read-only mode. In read-only mode, the
 *  Indexing API rejects any requests to index or delete items in this source.
 *  Enabling read-only mode does not stop the processing of previously accepted
 *  data.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableModifications;

/**
 *  Disable serving any search or assist results.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableServing;

/**
 *  Required. Display name of the datasource The maximum length is 300
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** List of service accounts that have indexing access. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *indexingServiceAccounts;

/**
 *  This field restricts visibility to items at the datasource level. Items
 *  within the datasource are restricted to the union of users and groups
 *  included in this field. Note that, this does not ensure access to a specific
 *  item, as users need to have ACL permissions on the contained items. This
 *  ensures a high level access on the entire datasource, and that the
 *  individual items are not shared outside this visibility.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_GSuitePrincipal *> *itemsVisibility;

/**
 *  The name of the datasource resource. Format: datasources/{source_id}. The
 *  name is ignored when creating a datasource.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  IDs of the Long Running Operations (LROs) currently running for this schema.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *operationIds;

/**
 *  Can a user request to get thumbnail URI for Items indexed in this data
 *  source.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *returnThumbnailUrls;

/**
 *  A short name or alias for the source. This value will be used to match the
 *  'source' operator. For example, if the short name is *<value>* then queries
 *  like *source:<value>* will only return results for this source. The value
 *  must be unique across all datasources. The value must only contain
 *  alphanumeric characters (a-zA-Z0-9). The value cannot start with 'google'
 *  and cannot be one of the following: mail, gmail, docs, drive, groups, sites,
 *  calendar, hangouts, gplus, keep, people, teams. Its maximum length is 32
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *shortName;

@end


/**
 *  Aggregation of items by status code as of the specified date.
 */
@interface GTLRCloudSearch_DataSourceIndexStats : GTLRObject

/**
 *  The date for which index stats were calculated. If the date of request is
 *  not the current date then stats calculated on the next day are returned.
 *  Stats are calculated close to mid night in this case. If date of request is
 *  current date, then real time stats are returned.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Date *date;

/** Number of items aggregrated by status code. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ItemCountByStatus *> *itemCountByStatus;

@end


/**
 *  Restriction on Datasource.
 */
@interface GTLRCloudSearch_DataSourceRestriction : GTLRObject

/**
 *  Filter options restricting the results. If multiple filters are present,
 *  they are grouped by object type before joining. Filters with the same object
 *  type are joined conjunctively, then the resulting expressions are joined
 *  disjunctively. The maximum number of elements is 20. NOTE: Suggest API
 *  supports only few filters at the moment: "objecttype", "type" and
 *  "mimetype". For now, schema specific filters cannot be used to filter
 *  suggestions.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_FilterOptions *> *filterOptions;

/** The source of restriction. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Source *source;

@end


/**
 *  Represents a whole calendar date, for example a date of birth. The time of
 *  day and time zone are either specified elsewhere or are not significant. The
 *  date is relative to the [Proleptic Gregorian
 *  Calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar). The
 *  date must be a valid calendar date between the year 1 and 9999.
 */
@interface GTLRCloudSearch_Date : GTLRObject

/**
 *  Day of month. Must be from 1 to 31 and valid for the year and month.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of date. Must be from 1 to 12.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of date. Must be from 1 to 9999.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  Optional. Provides a search operator for date properties. Search operators
 *  let users restrict the query to specific fields relevant to the type of item
 *  being searched.
 */
@interface GTLRCloudSearch_DateOperatorOptions : GTLRObject

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  date property using the greater-than operator. For example, if
 *  greaterThanOperatorName is *closedafter* and the property's name is
 *  *closeDate*, then queries like *closedafter:<value>* show results only where
 *  the value of the property named *closeDate* is later than *<value>*. The
 *  operator name can only contain lowercase letters (a-z). The maximum length
 *  is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *greaterThanOperatorName;

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  date property using the less-than operator. For example, if
 *  lessThanOperatorName is *closedbefore* and the property's name is
 *  *closeDate*, then queries like *closedbefore:<value>* show results only
 *  where the value of the property named *closeDate* is earlier than *<value>*.
 *  The operator name can only contain lowercase letters (a-z). The maximum
 *  length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *lessThanOperatorName;

/**
 *  Indicates the actual string required in the query in order to isolate the
 *  date property. For example, suppose an issue tracking schema object has a
 *  property named *closeDate* that specifies an operator with an operatorName
 *  of *closedon*. For searches on that data, queries like *closedon:<value>*
 *  show results only where the value of the *closeDate* property matches
 *  *<value>*. By contrast, a search that uses the same *<value>* without an
 *  operator returns all items where *<value>* matches the value of any String
 *  properties or text within the content field for the indexed datasource. The
 *  operator name can only contain lowercase letters (a-z). The maximum length
 *  is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

@end


/**
 *  The options for date properties.
 */
@interface GTLRCloudSearch_DatePropertyOptions : GTLRObject

/** If set, describes how the date should be used as a search operator. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DateOperatorOptions *operatorOptions;

@end


/**
 *  GTLRCloudSearch_DateTimePicker
 */
@interface GTLRCloudSearch_DateTimePicker : GTLRObject

/** The label for the field, which is displayed to the user. */
@property(nonatomic, copy, nullable) NSString *label;

/**
 *  The name of the text field which is used in FormInput, and uniquely
 *  identifies this input.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Triggered when the user clicks on the Save, or Clear button from the date /
 *  time picker dialog. Will only be triggered if the value changed as a result
 *  of the Save / Clear operation.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_FormAction *onChange;

/**
 *  The number representing the time-zone offset from UTC, in minutes. If set,
 *  the value_ms_epoch will be displayed in the specified time zone. If not set,
 *  it will use the user's timezone setting in client side.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timezoneOffsetDate;

/**
 *  The type of the DateTimePicker.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_DateTimePicker_Type_DateAndTime Value
 *        "DATE_AND_TIME"
 *    @arg @c kGTLRCloudSearch_DateTimePicker_Type_DateOnly Value "DATE_ONLY"
 *    @arg @c kGTLRCloudSearch_DateTimePicker_Type_TimeOnly Value "TIME_ONLY"
 *    @arg @c kGTLRCloudSearch_DateTimePicker_Type_UnspecifiedType Value
 *        "UNSPECIFIED_TYPE"
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The value to display which can be the default value before user input or
 *  previous user input. It is represented in milliseconds (Epoch time). - For
 *  DATE_AND_TIME type, the full epoch value is used. - For DATE_ONLY type, only
 *  date of the epoch time is used. - For TIME_ONLY type, only time of the epoch
 *  time is used. For example, you can set epoch time to 3 * 60 * 60 * 1000 to
 *  represent 3am.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valueMsEpoch;

@end


/**
 *  List of date values.
 */
@interface GTLRCloudSearch_DateValues : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Date *> *values;

@end


/**
 *  Shared request debug options for all cloudsearch RPC methods.
 */
@interface GTLRCloudSearch_DebugOptions : GTLRObject

/**
 *  If you are asked by Google to help with debugging, set this field.
 *  Otherwise, ignore this field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableDebugging;

@end


/**
 *  Deep-linking data is used to construct a deep-link URI for an activity or
 *  frame's embed, such that on click, the user is taken to the right place in a
 *  mobile app. If the app is not installed, the user is taken to the app store.
 *  If not on mobile, an analogous web uri is used.
 */
@interface GTLRCloudSearch_DeepLinkData : GTLRObject

/**
 *  Application ID (or project ID) from Google API Console.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *appId;

/**
 *  The data for a Google API Console client is entered by a developer during
 *  client registration and is stored in PackagingService.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_PackagingServiceClient *> *client;

/**
 *  The ID for non-URL content. Embeds may either have no analogous web presence
 *  or prefer a native mobile experience if supported. In the case of no web
 *  presence, instead of setting the "url" field of an embed, such developers
 *  will set this field and other content fields, e.g. thumbnail, title,
 *  description. If set, this field is used to construct the deep-link URI. Note
 *  that the native experience is preferred over the web link and the web link
 *  is used as a fallback.
 */
@property(nonatomic, copy, nullable) NSString *deepLinkId;

/**
 *  Analogous web presence. Used as desktop fallback or when no native link data
 *  is present.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  A message delete in Dynamite inserts a Babel-only item containing this
 *  field. This is only inserted for messages before the source-of-truth flip.
 *  See go/hsc-message-deletions for more details.
 */
@interface GTLRCloudSearch_DeleteMetadata : GTLRObject
@end


/**
 *  GTLRCloudSearch_DeleteQueueItemsRequest
 */
@interface GTLRCloudSearch_DeleteQueueItemsRequest : GTLRObject

/**
 *  The name of connector making this call. Format:
 *  datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

/** The name of a queue to delete items from. */
@property(nonatomic, copy, nullable) NSString *queue;

@end


/**
 *  GTLRCloudSearch_DeliveryMedium
 */
@interface GTLRCloudSearch_DeliveryMedium : GTLRObject

/**
 *  Describes the medium the cent was sent/received. For example, if I receive
 *  an SMS via GV, the medium_type will be GV.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_DeliveryMedium_MediumType_BabelMedium Value
 *        "BABEL_MEDIUM"
 *    @arg @c kGTLRCloudSearch_DeliveryMedium_MediumType_GoogleVoiceMedium Value
 *        "GOOGLE_VOICE_MEDIUM"
 *    @arg @c kGTLRCloudSearch_DeliveryMedium_MediumType_LocalSmsMedium Value
 *        "LOCAL_SMS_MEDIUM"
 *    @arg @c kGTLRCloudSearch_DeliveryMedium_MediumType_UnknownMedium Value
 *        "UNKNOWN_MEDIUM"
 */
@property(nonatomic, copy, nullable) NSString *mediumType;

/**
 *  In the case of multiple GV/native numbers, this defines the exact number to
 *  send from. It is used to differentiate mediums that have the same type, but
 *  different addresses (e.g. two android phones).
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_VoicePhoneNumber *selfPhone;

@end


/**
 *  A reference to a top-level property within the object that should be
 *  displayed in search results. The values of the chosen properties is
 *  displayed in the search results along with the display label for that
 *  property if one is specified. If a display label is not specified, only the
 *  values is shown.
 */
@interface GTLRCloudSearch_DisplayedProperty : GTLRObject

/**
 *  The name of the top-level property as defined in a property definition for
 *  the object. If the name is not a defined property in the schema, an error is
 *  given when attempting to update the schema.
 */
@property(nonatomic, copy, nullable) NSString *propertyName;

@end


/**
 *  GTLRCloudSearch_Divider
 */
@interface GTLRCloudSearch_Divider : GTLRObject
@end


/**
 *  A summary of a DLP scan event. This is a summary and should contain the
 *  minimum amount of data required to identify and process DLP scans. It is
 *  written to Starcast and encoded & returned to the client on attachment
 *  upload.
 */
@interface GTLRCloudSearch_DlpScanSummary : GTLRObject

/**
 *  The scan ID of the corresponding {\@link DlpViolationScanRecord} in the
 *  {\@link EphemeralDlpScans} Spanner table. This can be used to fetch
 *  additional details about the scan, e.g. for audit logging.
 */
@property(nonatomic, copy, nullable) NSString *scanId;

/**
 *  Indicates that was no attempt to scan a message or attachment because it was
 *  not applicable in the given context (e.g. atomic mutuate). If this is true,
 *  scan_outcome should not be set. This flag is used to identify messages that
 *  DLP did not attempt to scan for monitoring scan coverage. Contents that DLP
 *  attempted to scan but skipped can be identified by
 *  DlpScanOutcome.SCAN_SKIPPED_* reasons.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scanNotApplicableForContext;

/**
 *  The outcome of a DLP Scan. If this is set, scan_not_applicable_for_context
 *  should not be true.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanFailureAllRulesFailed
 *        Rule fetch completed and evaluation were attempted, but all of the
 *        rules failed to be evaluated. (Value: "SCAN_FAILURE_ALL_RULES_FAILED")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanFailureException
 *        Rule fetch and evaluation were attempted but an exception occurred.
 *        (Value: "SCAN_FAILURE_EXCEPTION")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanFailureIllegalStateForAttachments
 *        An IllegalStateException is thrown when executing DLP on attachments.
 *        This could happen if the space row is missing. (Value:
 *        "SCAN_FAILURE_ILLEGAL_STATE_FOR_ATTACHMENTS")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanFailureTimeout
 *        Rule fetch and evaluation were attempted but the scanning timed out.
 *        (Value: "SCAN_FAILURE_TIMEOUT")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanRuleEvaluationSkippedChangelingEmptyResponse
 *        Rule fetch happened, but rule evaluation is skipped because Changeling
 *        returned an empty response while converting the attachment to text.
 *        (Value: "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_EMPTY_RESPONSE")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanRuleEvaluationSkippedChangelingPermanentError
 *        Rule fetch happened, but rule evaluation is skipped because Changeling
 *        returned permanent failure while converting the attachment to text.
 *        (Value: "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_PERMANENT_ERROR")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanRuleEvaluationSkippedNoApplicableRulesForActionParams
 *        Rule fetch happened, but rule evaluation is skipped because none of
 *        the rules are applicable to the given action params. (Value:
 *        "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_ACTION_PARAMS")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanRuleEvaluationSkippedNoApplicableRulesForTrigger
 *        Rule fetch happened, but rule evaluation is skipped because none of
 *        the rules are applicable to the given trigger. (Value:
 *        "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_TRIGGER")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanRuleEvaluationSkippedNoRulesFound
 *        Rule fetch happened, but rule evaluation is skipped because no rules
 *        were found. (Value: "SCAN_RULE_EVALUATION_SKIPPED_NO_RULES_FOUND")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSkippedConsumer
 *        Rule fetch and evaluation are skipped because the user sending message
 *        is consumer. (Value: "SCAN_SKIPPED_CONSUMER")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSkippedExperimentDisabled
 *        Rule fetch and evaluation is skipped because DLP is not enabled for
 *        the user. (Value: "SCAN_SKIPPED_EXPERIMENT_DISABLED")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSkippedMessageFromUnsupportedOrigin
 *        Scanning was skipped because the message originated from Interop or
 *        Babel. (Value: "SCAN_SKIPPED_MESSAGE_FROM_UNSUPPORTED_ORIGIN")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSkippedNoMessage
 *        Rule fetch and evaluation are skipped because there is no message to
 *        scan. Deprecated: this should not happen since there must be message
 *        or attachment for DLP scan. (Value: "SCAN_SKIPPED_NO_MESSAGE")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSkippedNonHumanUser
 *        Rule fetch and evaluation are skipped because the user sending message
 *        is a non-human user (i.e. a bot). (Value:
 *        "SCAN_SKIPPED_NON_HUMAN_USER")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSkippedUserAcknowledgedWarning
 *        Rule fetch and evaluation are skipped because the user has
 *        acknowledged the warning on the message that triggered the Warn
 *        violation and sent the message anyway. (Value:
 *        "SCAN_SKIPPED_USER_ACKNOWLEDGED_WARNING")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSucceededAuditOnly
 *        Violation is detected and will be logged to BIP (no user-facing action
 *        performed). (Value: "SCAN_SUCCEEDED_AUDIT_ONLY")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSucceededBlock
 *        Violation is detected. The message/attachment will be blocked (or
 *        deleted if this happens in failure recovery), the user will be warned,
 *        and the violation will be logged to BIP. (Value:
 *        "SCAN_SUCCEEDED_BLOCK")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSucceededNoViolation
 *        This means no violation is detected on the given message/attachment.
 *        (Value: "SCAN_SUCCEEDED_NO_VIOLATION")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSucceededWarn
 *        Violation is detected. The user will be warned, and the violation will
 *        be logged to BIP. (Value: "SCAN_SUCCEEDED_WARN")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSucceededWithFailuresAuditOnly
 *        Rules were fetched but some evaluations failed. An audit-only
 *        violation was found in the rules that were successfully evaluated. The
 *        violation will be logged to BIP (no user-facing action performed).
 *        (Value: "SCAN_SUCCEEDED_WITH_FAILURES_AUDIT_ONLY")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSucceededWithFailuresBlock
 *        Rules were fetched but some evaluations failed. A blocking violation
 *        was found in the rules that were successfully evaluated. The
 *        message/attachment will be blocked, the user will be notified, and the
 *        violation will be logged to BIP. A blocking violation takes precedence
 *        over all other violation types. (Value:
 *        "SCAN_SUCCEEDED_WITH_FAILURES_BLOCK")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSucceededWithFailuresNoViolation
 *        Rules were fetched but some evaluations failed. No violation was found
 *        in the rules that were successfully evaluated. (Value:
 *        "SCAN_SUCCEEDED_WITH_FAILURES_NO_VIOLATION")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanSucceededWithFailuresWarn
 *        Rules were fetched but some evaluations failed. A warn violation was
 *        found in the rules that were successfully evaluated. The user will be
 *        warned, and the violation will be logged to BIP. (Value:
 *        "SCAN_SUCCEEDED_WITH_FAILURES_WARN")
 *    @arg @c kGTLRCloudSearch_DlpScanSummary_ScanOutcome_ScanUnknownOutcome
 *        Value "SCAN_UNKNOWN_OUTCOME"
 */
@property(nonatomic, copy, nullable) NSString *scanOutcome;

@end


/**
 *  GTLRCloudSearch_DmId
 */
@interface GTLRCloudSearch_DmId : GTLRObject

/** Unique server assigned Id, per Direct Message Space. */
@property(nonatomic, copy, nullable) NSString *dmId;

@end


/**
 *  Information on a document attached to an active conference.
 */
@interface GTLRCloudSearch_DocumentInfo : GTLRObject

/** A whiteboard document. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_WhiteboardInfo *whiteboardInfo;

@end


/**
 *  Used to provide a search operator for double properties. This is optional.
 *  Search operators let users restrict the query to specific fields relevant to
 *  the type of item being searched.
 */
@interface GTLRCloudSearch_DoubleOperatorOptions : GTLRObject

/**
 *  Indicates the operator name required in the query in order to use the double
 *  property in sorting or as a facet. The operator name can only contain
 *  lowercase letters (a-z). The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

@end


/**
 *  The options for double properties.
 */
@interface GTLRCloudSearch_DoublePropertyOptions : GTLRObject

/** If set, describes how the double should be used as a search operator. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DoubleOperatorOptions *operatorOptions;

@end


/**
 *  List of double values.
 */
@interface GTLRCloudSearch_DoubleValues : GTLRObject

/**
 *  values
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *values;

@end


/**
 *  GTLRCloudSearch_DriveClientActionMarkup
 */
@interface GTLRCloudSearch_DriveClientActionMarkup : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_RequestFileScope *requestFileScope;

@end


/**
 *  Drive follow-up search restricts (e.g. "followup:suggestions").
 */
@interface GTLRCloudSearch_DriveFollowUpRestrict : GTLRObject

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_DriveFollowUpRestrict_Type_FollowupActionItems
 *        Value "FOLLOWUP_ACTION_ITEMS"
 *    @arg @c kGTLRCloudSearch_DriveFollowUpRestrict_Type_FollowupSuggestions
 *        Value "FOLLOWUP_SUGGESTIONS"
 *    @arg @c kGTLRCloudSearch_DriveFollowUpRestrict_Type_Unspecified Value
 *        "UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Drive location search restricts (e.g. "is:starred").
 */
@interface GTLRCloudSearch_DriveLocationRestrict : GTLRObject

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_DriveLocationRestrict_Type_Starred Value
 *        "STARRED"
 *    @arg @c kGTLRCloudSearch_DriveLocationRestrict_Type_Trashed Value
 *        "TRASHED"
 *    @arg @c kGTLRCloudSearch_DriveLocationRestrict_Type_Unspecified Value
 *        "UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Annotation metadata for Drive artifacts.
 */
@interface GTLRCloudSearch_DriveMetadata : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_AclFixRequest *aclFixRequest;
@property(nonatomic, strong, nullable) GTLRCloudSearch_AclFixStatus *aclFixStatus;

/**
 *  Can the current user edit this resource
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canEdit;

/**
 *  Can the current user share this resource
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canShare;

/**
 *  Can the current user view this resource
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canView;

/**
 *  DriveAction for organizing this file in Drive. If the user does not have
 *  access to the Drive file, the value will be
 *  DriveAction.DRIVE_ACTION_UNSPECIFIED. This field is only set when part of a
 *  FileResult in a ListFilesResponse.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_DriveMetadata_DriveAction_AddAnotherShortcut Show
 *        "Add another shortcut" button, for Drive files the user has already
 *        created a shortcut to. (Value: "ADD_ANOTHER_SHORTCUT")
 *    @arg @c kGTLRCloudSearch_DriveMetadata_DriveAction_AddShortcut Show "Add
 *        shortcut" button, for adding a shortcut to a Drive file the user does
 *        not have permission to move. (Value: "ADD_SHORTCUT")
 *    @arg @c kGTLRCloudSearch_DriveMetadata_DriveAction_AddToDrive Show "Add to
 *        Drive" button, for adding file that doesn't exist in Drive to Drive.
 *        Note that deleted Drive files that still exist (i.e. in your Trash)
 *        will still be ORGANIZE (this is consistent with Gmail Drive
 *        attachments). (Value: "ADD_TO_DRIVE")
 *    @arg @c kGTLRCloudSearch_DriveMetadata_DriveAction_DriveActionUnspecified
 *        No organize action should be shown. (Value:
 *        "DRIVE_ACTION_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_DriveMetadata_DriveAction_Organize Show "Move"
 *        button, for organizing a Drive file the user has permission to move.
 *        (Value: "ORGANIZE")
 */
@property(nonatomic, copy, nullable) NSString *driveAction;

/**
 *  driveState
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_DriveMetadata_DriveState_DriveStateUnspecified
 *        Default value (Value: "DRIVE_STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_DriveMetadata_DriveState_InMyDrive File in My
 *        Drive (Value: "IN_MY_DRIVE")
 *    @arg @c kGTLRCloudSearch_DriveMetadata_DriveState_InTeamDrive File in Team
 *        Drive (Value: "IN_TEAM_DRIVE")
 *    @arg @c kGTLRCloudSearch_DriveMetadata_DriveState_NotInDrive File not in
 *        drive (Value: "NOT_IN_DRIVE")
 *    @arg @c kGTLRCloudSearch_DriveMetadata_DriveState_SharedInDrive File in
 *        someone else's Drive, but is shared with the current user (Value:
 *        "SHARED_IN_DRIVE")
 */
@property(nonatomic, copy, nullable) NSString *driveState;

/** Output only. Trusted Resource URL for drive file embedding. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_TrustedResourceUrlProto *embedUrl;

/**
 *  Indicates whether the Drive link contains an encrypted doc ID. If true,
 *  Dynamite should not attempt to query the doc ID in Drive Service. See
 *  go/docid-encryption for details.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *encryptedDocId;

/** This is deprecated and unneeded. TODO (b/182479059): Remove this. */
@property(nonatomic, copy, nullable) NSString *encryptedResourceKey;

/**
 *  External mimetype of the Drive Resource (Useful for creating Drive URL) See:
 *  http://b/35219462
 */
@property(nonatomic, copy, nullable) NSString *externalMimetype;

/**
 *  Drive resource ID of the artifact.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Deprecated. Whether the setting to restrict downloads is enabled for this
 *  file. This was previously used to determine whether to hide the download and
 *  print buttons in the UI, but is no longer used by clients, because Projector
 *  now independently queries Drive to ensure that we have the most up-to-date
 *  value.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDownloadRestricted;

/**
 *  If the current user is the Drive file's owner. The field is currently only
 *  set for Annotations for the ListFiles action (as opposed to fetching
 *  Topics/Messages with Drive annotations).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isOwner;

/** Only present if this DriveMetadata is converted from an UploadMetadata. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_LegacyUploadMetadata *legacyUploadMetadata;

/** Mimetype of the Drive Resource */
@property(nonatomic, copy, nullable) NSString *mimetype;

/** The display name of the organization owning the Drive item. */
@property(nonatomic, copy, nullable) NSString *organizationDisplayName;

/**
 *  Shortcut ID of this drive file in the shared drive, which is associated with
 *  a named room this file was shared in. Shortcuts will not be created for DMs
 *  or unnamed rooms. This is populated after the DriveMetadata is migrated to
 *  shared drive. go/chat-shared-drive-uploads.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AuthorizedItemId *shortcutAuthorizedItemId;

/**
 *  If this field is set to true, server should still contact external backends
 *  to get metadata for search but clients should not render this chip.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shouldNotRender;

/**
 *  Thumbnail image of the Drive Resource
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *thumbnailHeight;

/** Thumbnail image of the Drive Resource */
@property(nonatomic, copy, nullable) NSString *thumbnailUrl;

/**
 *  Thumbnail image of the Drive Resource
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *thumbnailWidth;

/** Title of the Drive Resource */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  Url string fragment that generally indicates the specific location in the
 *  linked file. Example: #header=h.123abc456. If the fragment is not present
 *  this will not be present and therefore default to an empty string. The "#"
 *  will not be included.
 */
@property(nonatomic, copy, nullable) NSString *urlFragment;

/** This is considered SPII and should not be logged. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_WrappedResourceKey *wrappedResourceKey;

@end


/**
 *  Drive mime-type search restricts (e.g. "type:pdf").
 */
@interface GTLRCloudSearch_DriveMimeTypeRestrict : GTLRObject

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Archive Value
 *        "ARCHIVE"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Audio Value "AUDIO"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Document Value
 *        "DOCUMENT"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Drawing Value
 *        "DRAWING"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Folder Value "FOLDER"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Form Value "FORM"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Image Value "IMAGE"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Map Value "MAP"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Pdf Value "PDF"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Presentation Value
 *        "PRESENTATION"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Script Value "SCRIPT"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Site Value "SITE"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Spreadsheet Value
 *        "SPREADSHEET"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Unspecified Value
 *        "UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_DriveMimeTypeRestrict_Type_Video Value "VIDEO"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The time span search restrict (e.g. "after:2017-09-11 before:2017-09-12").
 */
@interface GTLRCloudSearch_DriveTimeSpanRestrict : GTLRObject

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Last30Days Not Enabled
 *        (Value: "LAST_30_DAYS")
 *    @arg @c kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Last7Days Value
 *        "LAST_7_DAYS"
 *    @arg @c kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Last90Days Not Enabled
 *        (Value: "LAST_90_DAYS")
 *    @arg @c kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Today Value "TODAY"
 *    @arg @c kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Unspecified Value
 *        "UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_DriveTimeSpanRestrict_Type_Yesterday Value
 *        "YESTERDAY"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  This is the proto for holding space level scoring information. This data is
 *  used for logging in query-api server and for testing purposes.
 */
@interface GTLRCloudSearch_DynamiteSpacesScoringInfo : GTLRObject

/**
 *  affinityScore
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *affinityScore;

/**
 *  commonContactCountAffinityScore
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *commonContactCountAffinityScore;

/**
 *  contactsIntersectionCount
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *contactsIntersectionCount;

/**
 *  finalScore
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *finalScore;

/**
 *  freshnessScore
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *freshnessScore;

/**
 *  joinedSpacesAffinityScore
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *joinedSpacesAffinityScore;

/**
 *  lastMessagePostedTimestampSecs
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastMessagePostedTimestampSecs;

/**
 *  lastReadTimestampSecs
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastReadTimestampSecs;

/**
 *  memberMetadataCount
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memberMetadataCount;

/**
 *  messageScore
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *messageScore;

/**
 *  numAucContacts
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numAucContacts;

/**
 *  smallContactListAffinityScore
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *smallContactListAffinityScore;

/**
 *  smallUnjoinedSpacesAffinityScore
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *smallUnjoinedSpacesAffinityScore;

/**
 *  spaceAgeInDays
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *spaceAgeInDays;

/**
 *  spaceCreationTimestampSecs
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *spaceCreationTimestampSecs;

/**
 *  topicalityScore
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *topicalityScore;

@end


/**
 *  A message edit in Dynamite inserts a Babel-only item containing this field.
 */
@interface GTLRCloudSearch_EditMetadata : GTLRObject
@end


/**
 *  GTLRCloudSearch_EditorClientActionMarkup
 */
@interface GTLRCloudSearch_EditorClientActionMarkup : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_RequestFileScopeForActiveDocument *requestFileScopeForActiveDocument;

@end


/**
 *  A person's email address.
 */
@interface GTLRCloudSearch_EmailAddress : GTLRObject

/**
 *  If the value of type is custom, this property contains the custom type
 *  string.
 */
@property(nonatomic, copy, nullable) NSString *customType;

/** The email address. */
@property(nonatomic, copy, nullable) NSString *emailAddress;

/** The URL to send email. */
@property(nonatomic, copy, nullable) NSString *emailUrl;

/**
 *  Indicates if this is the user's primary email. Only one entry can be marked
 *  as primary.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *primary;

/**
 *  The type of the email account. Acceptable values are: "custom", "home",
 *  "other", "work".
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents a verified owner of the given email address. Note that a single
 *  address may have many owners, and a single user may own many addresses. (All
 *  lower-case, in display form -- see com.google.gaia.client.GaiaEmail)
 */
@interface GTLRCloudSearch_EmailOwnerProto : GTLRObject

@property(nonatomic, copy, nullable) NSString *email;

@end


/**
 *  Represents an embedded object in an update. This is a wrapper class that can
 *  contain a single specific item proto in an extension field. Think of it as a
 *  base class like `Message` in Java. Each item proto must declare that it
 *  extends this proto: message ExampleObject { option (item_type) =
 *  EXAMPLE_OBJECT; extend EmbedClientItem { optional ExampleObject
 *  example_object = ; } } See go/es-embeds for details.
 */
@interface GTLRCloudSearch_EmbedClientItem : GTLRObject

/**
 *  The canonical ID of the embed. If absent, the canonical ID is equal to the
 *  ID; if present, then the canonical ID represents an "equivalence class" of
 *  embeds which really refer to the same object. (For example, the URLs
 *  http://www.foo.com/ and http://foo.com/ refer to the same object) This field
 *  may be updated periodically by background processes.
 */
@property(nonatomic, copy, nullable) NSString *canonicalId;

/**
 *  Deep-linking data to take the user to the right place in a mobile app. This
 *  is only used for preview and attribution. Links that are specific to a given
 *  embed type should live on that specific embed's proto by using Link. See
 *  http://goto.google.com/mariana-design.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DeepLinkData *deepLinkData;

/**
 *  The ID of the embed. This corresponds to the schema.org ID, as represented
 *  in the ItemScope.id field.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The provenance of the embed, populated when the embed originated from a web
 *  fetch. The provenance captures information about the web page the embed had
 *  originated, like the URL that was retrieved and the retrieved URL's
 *  canonical form. This is useful in the case where the URL shared by the URL
 *  redirects (e.g., in the case of a shortened URL).
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Provenance *provenance;

/**
 *  The ID used to identify the embed during rendering. This field will match
 *  ID, if set, otherwise it will be the ID of the parent activity. This field
 *  is only populated on the server for client use and is not persisted to
 *  storage.
 */
@property(nonatomic, copy, nullable) NSString *renderId;

/** Signature of the embed, used for verification. */
@property(nonatomic, copy, nullable) NSString *signature;

/** Transient generic data that will not be saved on the server. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_TransientData *transientData;

/**
 *  The first value in `type` determines which extension field will be set. When
 *  creating an EmbedClientItem, you only need to set the first (primary) type
 *  in this field. When the server receives the item, it will populate the full
 *  type list using the parent annotations in the ItemType enum.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *type;

@end


/**
 *  Used to provide a search operator for enum properties. This is optional.
 *  Search operators let users restrict the query to specific fields relevant to
 *  the type of item being searched. For example, if you provide no operator for
 *  a *priority* enum property with possible values *p0* and *p1*, a query that
 *  contains the term *p0* returns items that have *p0* as the value of the
 *  *priority* property, as well as any items that contain the string *p0* in
 *  other fields. If you provide an operator name for the enum, such as
 *  *priority*, then search users can use that operator to refine results to
 *  only items that have *p0* as this property's value, with the query
 *  *priority:p0*.
 */
@interface GTLRCloudSearch_EnumOperatorOptions : GTLRObject

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  enum property. For example, if operatorName is *priority* and the property's
 *  name is *priorityVal*, then queries like *priority:<value>* show results
 *  only where the value of the property named *priorityVal* matches *<value>*.
 *  By contrast, a search that uses the same *<value>* without an operator
 *  returns all items where *<value>* matches the value of any String properties
 *  or text within the content field for the item. The operator name can only
 *  contain lowercase letters (a-z). The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

@end


/**
 *  The options for enum properties, which allow you to define a restricted set
 *  of strings to match user queries, set rankings for those string values, and
 *  define an operator name to be paired with those strings so that users can
 *  narrow results to only items with a specific value. For example, for items
 *  in a request tracking system with priority information, you could define
 *  *p0* as an allowable enum value and tie this enum to the operator name
 *  *priority* so that search users could add *priority:p0* to their query to
 *  restrict the set of results to only those items indexed with the value *p0*.
 */
@interface GTLRCloudSearch_EnumPropertyOptions : GTLRObject

/** If set, describes how the enum should be used as a search operator. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_EnumOperatorOptions *operatorOptions;

/**
 *  Used to specify the ordered ranking for the enumeration that determines how
 *  the integer values provided in the possible EnumValuePairs are used to rank
 *  results. If specified, integer values must be provided for all possible
 *  EnumValuePair values given for this property. Can only be used if
 *  isRepeatable is false.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_EnumPropertyOptions_OrderedRanking_Ascending This
 *        property is ranked in ascending order. Lower values indicate lower
 *        ranking. (Value: "ASCENDING")
 *    @arg @c kGTLRCloudSearch_EnumPropertyOptions_OrderedRanking_Descending
 *        This property is ranked in descending order. Lower values indicate
 *        higher ranking. (Value: "DESCENDING")
 *    @arg @c kGTLRCloudSearch_EnumPropertyOptions_OrderedRanking_NoOrder There
 *        is no ranking order for the property. Results aren't adjusted by this
 *        property's value. (Value: "NO_ORDER")
 */
@property(nonatomic, copy, nullable) NSString *orderedRanking;

/**
 *  The list of possible values for the enumeration property. All EnumValuePairs
 *  must provide a string value. If you specify an integer value for one
 *  EnumValuePair, then all possible EnumValuePairs must provide an integer
 *  value. Both the string value and integer value must be unique over all
 *  possible values. Once set, possible values cannot be removed or modified. If
 *  you supply an ordered ranking and think you might insert additional enum
 *  values in the future, leave gaps in the initial integer values to allow
 *  adding a value in between previously registered values. The maximum number
 *  of elements is 100.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_EnumValuePair *> *possibleValues;

@end


/**
 *  The enumeration value pair defines two things: a required string value and
 *  an optional integer value. The string value defines the necessary query term
 *  required to retrieve that item, such as *p0* for a priority item. The
 *  integer value determines the ranking of that string value relative to other
 *  enumerated values for the same property. For example, you might associate
 *  *p0* with *0* and define another enum pair such as *p1* and *1*. You must
 *  use the integer value in combination with ordered ranking to set the ranking
 *  of a given value relative to other enumerated values for the same property
 *  name. Here, a ranking order of DESCENDING for *priority* properties results
 *  in a ranking boost for items indexed with a value of *p0* compared to items
 *  indexed with a value of *p1*. Without a specified ranking order, the integer
 *  value has no effect on item ranking.
 */
@interface GTLRCloudSearch_EnumValuePair : GTLRObject

/**
 *  The integer value of the EnumValuePair which must be non-negative. Optional.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *integerValue;

/**
 *  The string value of the EnumValuePair. The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *stringValue;

@end


/**
 *  List of enum values.
 */
@interface GTLRCloudSearch_EnumValues : GTLRObject

/** The maximum allowable length for string values is 32 characters. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  Error information about the response.
 */
@interface GTLRCloudSearch_ErrorInfo : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ErrorMessage *> *errorMessages;

@end


/**
 *  Error message per source response.
 */
@interface GTLRCloudSearch_ErrorMessage : GTLRObject

@property(nonatomic, copy, nullable) NSString *errorMessage;
@property(nonatomic, strong, nullable) GTLRCloudSearch_Source *source;

@end


/**
 *  GTLRCloudSearch_EventAnnotation
 */
@interface GTLRCloudSearch_EventAnnotation : GTLRObject

/**
 *  type
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *type;

@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Represents the invitees or other users associated with a Google+ Event (see
 *  http://goto/events-backend-design).
 */
@interface GTLRCloudSearch_EventProto : GTLRObject

/**
 *  Event IDs consist of alphanumeric characters and colons. Currently required.
 */
@property(nonatomic, copy, nullable) NSString *eventId;

/**
 *  The type of Event members to consider, e.g. "all members" vs. "owners" vs.
 *  "admins". These are defined by legacy_relation_id values in
 *  social.graph.storage.EdgeTypeEnum.EdgeType enum options in
 *  social/graph/storage/proto/id.proto. See event.pb (defined in
 *  production/config/cdd/socialgraph/mixer_config/prod/node_type_config) for
 *  all valid edge types associated with event. Currently required.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memberType;

@end


/**
 *  A bucket in a facet is the basic unit of operation. A bucket can comprise
 *  either a single value OR a contiguous range of values, depending on the type
 *  of the field bucketed. FacetBucket is currently used only for returning the
 *  response object.
 */
@interface GTLRCloudSearch_FacetBucket : GTLRObject

/**
 *  Number of results that match the bucket value. Counts are only returned for
 *  searches when count accuracy is ensured. Cloud Search does not guarantee
 *  facet counts for any query and facet counts might be present only
 *  intermittently, even for identical queries. Do not build dependencies on
 *  facet count existence; instead use facet ount percentages which are always
 *  returned.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  Percent of results that match the bucket value. The returned value is
 *  between (0-100], and is rounded down to an integer if fractional. If the
 *  value is not explicitly returned, it represents a percentage value that
 *  rounds to 0. Percentages are returned for all searches, but are an estimate.
 *  Because percentages are always returned, you should render percentages
 *  instead of counts.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *percentage;

@property(nonatomic, strong, nullable) GTLRCloudSearch_Value *value;

@end


/**
 *  Specifies operators to return facet results for. There will be one
 *  FacetResult for every source_name/object_type/operator_name combination.
 */
@interface GTLRCloudSearch_FacetOptions : GTLRObject

/**
 *  Maximum number of facet buckets that should be returned for this facet.
 *  Defaults to 10. Maximum value is 100.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numFacetBuckets;

/**
 *  If object_type is set, only those objects of that type will be used to
 *  compute facets. If empty, then all objects will be used to compute facets.
 */
@property(nonatomic, copy, nullable) NSString *objectType;

/**
 *  The name of the operator chosen for faceting. \@see
 *  cloudsearch.SchemaPropertyOptions
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

/**
 *  Source name to facet on. Format: datasources/{source_id} If empty, all data
 *  sources will be used.
 */
@property(nonatomic, copy, nullable) NSString *sourceName;

@end


/**
 *  Source specific facet response
 */
@interface GTLRCloudSearch_FacetResult : GTLRObject

/**
 *  FacetBuckets for values in response containing at least a single result with
 *  the corresponding filter.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_FacetBucket *> *buckets;

/** Object type for which facet results are returned. Can be empty. */
@property(nonatomic, copy, nullable) NSString *objectType;

/**
 *  The name of the operator chosen for faceting. \@see
 *  cloudsearch.SchemaPropertyOptions
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

/** Source name for which facet results are returned. Will not be empty. */
@property(nonatomic, copy, nullable) NSString *sourceName;

@end


/**
 *  GTLRCloudSearch_FieldViolation
 */
@interface GTLRCloudSearch_FieldViolation : GTLRObject

/**
 *  The description of the error.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Path of field with violation. */
@property(nonatomic, copy, nullable) NSString *field;

@end


/**
 *  A generic way of expressing filters in a query, which supports two
 *  approaches: **1. Setting a ValueFilter.** The name must match an
 *  operator_name defined in the schema for your data source. **2. Setting a
 *  CompositeFilter.** The filters are evaluated using the logical operator. The
 *  top-level operators can only be either an AND or a NOT. AND can appear only
 *  at the top-most level. OR can appear only under a top-level AND.
 */
@interface GTLRCloudSearch_Filter : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_CompositeFilter *compositeFilter;
@property(nonatomic, strong, nullable) GTLRCloudSearch_ValueFilter *valueFilter;

@end


/**
 *  Filter options to be applied on query.
 */
@interface GTLRCloudSearch_FilterOptions : GTLRObject

/** Generic filter to restrict the search, such as `lang:en`, `site:xyz`. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Filter *filter;

/**
 *  If object_type is set, only objects of that type are returned. This should
 *  correspond to the name of the object that was registered within the
 *  definition of schema. The maximum length is 256 characters.
 */
@property(nonatomic, copy, nullable) NSString *objectType;

@end


/**
 *  A persistent (sticky) footer that is added to the bottom of the card.
 */
@interface GTLRCloudSearch_FixedFooter : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Button *> *buttons;
@property(nonatomic, strong, nullable) GTLRCloudSearch_TextButton *primaryButton;
@property(nonatomic, strong, nullable) GTLRCloudSearch_TextButton *secondaryButton;

@end


/**
 *  GTLRCloudSearch_FormAction
 */
@interface GTLRCloudSearch_FormAction : GTLRObject

/**
 *  Apps script function that should be invoked in the developer's apps script
 *  when the containing element is clicked/activated.
 */
@property(nonatomic, copy, nullable) NSString *actionMethodName;

/**
 *  loadIndicator
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_FormAction_LoadIndicator_None Value "NONE"
 *    @arg @c kGTLRCloudSearch_FormAction_LoadIndicator_Spinner Value "SPINNER"
 */
@property(nonatomic, copy, nullable) NSString *loadIndicator;

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ActionParameter *> *parameters;

/**
 *  Indicates whether form values persist after the action. When false, the Apps
 *  Script is responsible for persisting values, by setting any form field
 *  values using the formInputs in the event. Disabling this behavior can be
 *  used if the add-on needs the ability to clear form fields, for example, as
 *  with persistent values, there is no means for clearing existing values. When
 *  disabling persistent values, it is strongly recommended that the add-on use
 *  LoadIndicator.SPINNER for all events, as this locks the UI to ensure no
 *  changes are made by the user while the action is being processed. When using
 *  LoadIndicator.NONE for any of the actions, persistent values are
 *  recommended, as it ensures that any changes made by the user after form / on
 *  change actions are sent to the server are not overwritten by the response.
 *  Persistent values disabled by default. While we recommend persistent values
 *  be used in the typical use case, we do not enable by default, as doing so
 *  would change the current behavior of existing add-ons in prod.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *persistValues;

@end


/**
 *  Annotation metadata for markup formatting
 */
@interface GTLRCloudSearch_FormatMetadata : GTLRObject

/**
 *  Font color is set if and only if format_type is FONT_COLOR. The components
 *  are stored as (alpha << 24) | (red << 16) | (green << 8) | blue. Clients
 *  should always set the alpha component to 0xFF. NEXT TAG: 3
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fontColor;

/**
 *  LINT.ThenChange(//depot/google3/apps/dynamite/v1/web/datakeys/annotated_span.proto)
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_FormatMetadata_FormatType_Bold Value "BOLD"
 *    @arg @c kGTLRCloudSearch_FormatMetadata_FormatType_BulletedList Encloses
 *        BULLETED_LIST_ITEM annotations. (Value: "BULLETED_LIST")
 *    @arg @c kGTLRCloudSearch_FormatMetadata_FormatType_BulletedListItem Must
 *        cover the whole line including the newline (Value:
 *        "BULLETED_LIST_ITEM")
 *    @arg @c kGTLRCloudSearch_FormatMetadata_FormatType_ClientHidden character
 *        at the end. Not used anymore. (Value: "CLIENT_HIDDEN")
 *    @arg @c kGTLRCloudSearch_FormatMetadata_FormatType_FontColor Value
 *        "FONT_COLOR"
 *    @arg @c kGTLRCloudSearch_FormatMetadata_FormatType_Hidden Value "HIDDEN"
 *    @arg @c kGTLRCloudSearch_FormatMetadata_FormatType_Italic Value "ITALIC"
 *    @arg @c kGTLRCloudSearch_FormatMetadata_FormatType_Monospace Inline
 *        monospace. (Value: "MONOSPACE")
 *    @arg @c kGTLRCloudSearch_FormatMetadata_FormatType_MonospaceBlock
 *        Multi-line monospace block. (Value: "MONOSPACE_BLOCK")
 *    @arg @c kGTLRCloudSearch_FormatMetadata_FormatType_SourceCode Value
 *        "SOURCE_CODE"
 *    @arg @c kGTLRCloudSearch_FormatMetadata_FormatType_Strike Value "STRIKE"
 *    @arg @c kGTLRCloudSearch_FormatMetadata_FormatType_TypeUnspecified Default
 *        value for the enum. (Value: "TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_FormatMetadata_FormatType_Underline Value
 *        "UNDERLINE"
 */
@property(nonatomic, copy, nullable) NSString *formatType;

@end


/**
 *  Formatting information for a segment.
 */
@interface GTLRCloudSearch_Formatting : GTLRObject

/**
 *  bold
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bold;

/**
 *  This indicates that the segment should be rendered as highlighted or
 *  visually emphasized.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *highlight;

/**
 *  italics
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *italics;

/**
 *  strikethrough
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *strikethrough;

/**
 *  If set, this indicates that the segment should be rendered with the
 *  specified style. The absence of an explicit style represents "no style",
 *  i.e. the segment can be rendered with the default style chosen by the
 *  application.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Formatting_Style_Heading1 The most important
 *        heading to the least important heading. (Value: "HEADING_1")
 *    @arg @c kGTLRCloudSearch_Formatting_Style_Heading2 Value "HEADING_2"
 *    @arg @c kGTLRCloudSearch_Formatting_Style_Heading3 Value "HEADING_3"
 *    @arg @c kGTLRCloudSearch_Formatting_Style_Heading4 Value "HEADING_4"
 *    @arg @c kGTLRCloudSearch_Formatting_Style_UnknownStyle This represents a
 *        style that is unknown (e.g. a new style was introduced but not
 *        supported by older mobile app versions) and should generally not be
 *        used as a value in a proto. If the segment does not need to be
 *        rendered with a special style, the 'style' field should simply be left
 *        unset. A reasonable fallback for an unknown style is to render the
 *        segment in the default style. (Value: "UNKNOWN_STYLE")
 */
@property(nonatomic, copy, nullable) NSString *style;

/**
 *  underline
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *underline;

@end


/**
 *  Indicates which freshness property to use when adjusting search ranking for
 *  an item. Fresher, more recent dates indicate higher quality. Use the
 *  freshness option property that best works with your data. For fileshare
 *  documents, last modified time is most relevant. For calendar event data, the
 *  time when the event occurs is a more relevant freshness indicator. In this
 *  way, calendar events that occur closer to the time of the search query are
 *  considered higher quality and ranked accordingly.
 */
@interface GTLRCloudSearch_FreshnessOptions : GTLRObject

/**
 *  The duration after which an object should be considered stale. The default
 *  value is 180 days (in seconds).
 */
@property(nonatomic, strong, nullable) GTLRDuration *freshnessDuration;

/**
 *  This property indicates the freshness level of the object in the index. If
 *  set, this property must be a top-level property within the property
 *  definitions and it must be a timestamp type or date type. Otherwise, the
 *  Indexing API uses updateTime as the freshness indicator. The maximum length
 *  is 256 characters. When a property is used to calculate freshness, the value
 *  defaults to 2 years from the current time.
 */
@property(nonatomic, copy, nullable) NSString *freshnessProperty;

@end


/**
 *  GTLRCloudSearch_GaiaGroupProto
 */
@interface GTLRCloudSearch_GaiaGroupProto : GTLRObject

/**
 *  groupId
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *groupId;

@end


/**
 *  A Gaia account, which may represent a user, device, service account, etc.
 *  For prod (\@prod.google.com) accounts, use MdbUserProto instead.
 */
@interface GTLRCloudSearch_GaiaUserProto : GTLRObject

/**
 *  userId
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *userId;

@end


/**
 *  Details on the third-party interoperability settings for the meeting space.
 */
@interface GTLRCloudSearch_GatewayAccess : GTLRObject

/**
 *  Whether third-party gateway accesses are enabled for this meeting space. If
 *  enabled, the actual access code can be retrieved by calling the
 *  GetGatewayAccess RPC method.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

@end


/**
 *  Details how to join the conference via a SIP gateway.
 */
@interface GTLRCloudSearch_GatewaySipAccess : GTLRObject

/**
 *  Permanent numeric code for manual entry on specially configured devices,
 *  currently the same as the PSTN "Universal pin".
 */
@property(nonatomic, copy, nullable) NSString *sipAccessCode;

/**
 *  The SIP URI the conference can be reached through. The string is on one of
 *  the formats: "sip:\@" "sips:\@" where currently is the 13-digit universal
 *  pin (with the future option to support using a Meet meeting code as well),
 *  and is a valid address to be resolved using a DNS SRV lookup, or a dotted
 *  quad.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  GTLRCloudSearch_GetCustomerIndexStatsResponse
 */
@interface GTLRCloudSearch_GetCustomerIndexStatsResponse : GTLRObject

/**
 *  Average item count for the given date range for which billing is done.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *averageIndexedItemCount;

/**
 *  Summary of indexed item counts, one for each day in the requested range.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_CustomerIndexStats *> *stats;

@end


/**
 *  GTLRCloudSearch_GetCustomerQueryStatsResponse
 */
@interface GTLRCloudSearch_GetCustomerQueryStatsResponse : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_CustomerQueryStats *> *stats;

/**
 *  Total successful query count (status code 200) for the given date range.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalQueryCount;

@end


/**
 *  Response format for search application stats for a customer.
 */
@interface GTLRCloudSearch_GetCustomerSearchApplicationStatsResponse : GTLRObject

/**
 *  Average search application count for the given date range.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *averageSearchApplicationCount;

/** Search application stats by date. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_CustomerSearchApplicationStats *> *stats;

@end


/**
 *  GTLRCloudSearch_GetCustomerSessionStatsResponse
 */
@interface GTLRCloudSearch_GetCustomerSessionStatsResponse : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_CustomerSessionStats *> *stats;

@end


/**
 *  GTLRCloudSearch_GetCustomerUserStatsResponse
 */
@interface GTLRCloudSearch_GetCustomerUserStatsResponse : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_CustomerUserStats *> *stats;

@end


/**
 *  GTLRCloudSearch_GetDataSourceIndexStatsResponse
 */
@interface GTLRCloudSearch_GetDataSourceIndexStatsResponse : GTLRObject

/**
 *  Average item count for the given date range for which billing is done.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *averageIndexedItemCount;

/**
 *  Summary of indexed item counts, one for each day in the requested range.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_DataSourceIndexStats *> *stats;

@end


/**
 *  Response format for getting query stats for a search application between
 *  given dates.
 */
@interface GTLRCloudSearch_GetSearchApplicationQueryStatsResponse : GTLRObject

/** Query stats per date for a search application. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SearchApplicationQueryStats *> *stats;

/**
 *  Total successful query count (status code 200) for the given date range.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalQueryCount;

@end


/**
 *  GTLRCloudSearch_GetSearchApplicationSessionStatsResponse
 */
@interface GTLRCloudSearch_GetSearchApplicationSessionStatsResponse : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SearchApplicationSessionStats *> *stats;

@end


/**
 *  GTLRCloudSearch_GetSearchApplicationUserStatsResponse
 */
@interface GTLRCloudSearch_GetSearchApplicationUserStatsResponse : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SearchApplicationUserStats *> *stats;

@end


/**
 *  GTLRCloudSearch_GmailClientActionMarkup
 */
@interface GTLRCloudSearch_GmailClientActionMarkup : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_AddonComposeUiActionMarkup *addonComposeUiActionMarkup;
@property(nonatomic, strong, nullable) GTLRCloudSearch_OpenCreatedDraftActionMarkup *openCreatedDraftActionMarkup;
@property(nonatomic, strong, nullable) GTLRCloudSearch_TaskActionMarkup *taskAction;
@property(nonatomic, strong, nullable) GTLRCloudSearch_UpdateDraftActionMarkup *updateDraftActionMarkup;

@end


/**
 *  Configuration of the Google Chat in Meet.
 */
@interface GTLRCloudSearch_GoogleChatConfig : GTLRObject

/** ID of the Chat group. */
@property(nonatomic, copy, nullable) NSString *chatGroupId;

@end


/**
 *  The markup for developers to specify the contents of a contextual AddOn.
 */
@interface GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkup : GTLRObject

/** A list of cards. A card must contain a header and at least 1 section. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCard *> *cards;

@end


/**
 *  A card is a UI element that can contain UI widgets such as texts, images.
 */
@interface GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCard : GTLRObject

/** The actions of this card. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardCardAction *> *cardActions;

/** The header of the card. A header usually contains a title and an image. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardCardHeader *header;

/** Name of the card. */
@property(nonatomic, copy, nullable) NSString *name;

/** Sections are separated by a line divider. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardSection *> *sections;

@end


/**
 *  A card action is the action associated with the card. For an invoice card, a
 *  typical action would be: delete invoice, email invoice or open the invoice
 *  in browser. Not supported by Google Chat apps.
 */
@interface GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardCardAction : GTLRObject

/** The label used to be displayed in the action menu item. */
@property(nonatomic, copy, nullable) NSString *actionLabel;

/** The onclick action for this action item. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleChatV1WidgetMarkupOnClick *onClick;

@end


/**
 *  GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardCardHeader
 */
@interface GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardCardHeader : GTLRObject

/**
 *  The image's type (e.g. square border or circular border).
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardCardHeader_ImageStyle_Avatar
 *        Circular border. (Value: "AVATAR")
 *    @arg @c kGTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardCardHeader_ImageStyle_Image
 *        Square border. (Value: "IMAGE")
 *    @arg @c kGTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardCardHeader_ImageStyle_ImageStyleUnspecified
 *        Value "IMAGE_STYLE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *imageStyle;

/** The URL of the image in the card header. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/** The subtitle of the card header. */
@property(nonatomic, copy, nullable) NSString *subtitle;

/**
 *  The title must be specified. The header has a fixed height: if both a title
 *  and subtitle is specified, each will take up 1 line. If only the title is
 *  specified, it will take up both lines.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  A section contains a collection of widgets that are rendered (vertically) in
 *  the order that they are specified. Across all platforms, cards have a narrow
 *  fixed width, so there is currently no need for layout properties (e.g.
 *  float).
 */
@interface GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkupCardSection : GTLRObject

/** The header of the section, text formatted supported. */
@property(nonatomic, copy, nullable) NSString *header;

/** A section must contain at least 1 widget. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_GoogleChatV1WidgetMarkup *> *widgets;

@end


/**
 *  A widget is a UI element that presents texts, images, etc.
 */
@interface GTLRCloudSearch_GoogleChatV1WidgetMarkup : GTLRObject

/**
 *  A list of buttons. Buttons is also oneof data and only one of these fields
 *  should be set.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_GoogleChatV1WidgetMarkupButton *> *buttons;

/** Display an image in this widget. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleChatV1WidgetMarkupImage *image;

/** Display a key value item in this widget. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue *keyValue;

/** Display a text paragraph in this widget. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleChatV1WidgetMarkupTextParagraph *textParagraph;

@end


/**
 *  A button. Can be a text button or an image button.
 */
@interface GTLRCloudSearch_GoogleChatV1WidgetMarkupButton : GTLRObject

/** A button with image and onclick action. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton *imageButton;

/** A button with text and onclick action. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleChatV1WidgetMarkupTextButton *textButton;

@end


/**
 *  A form action describes the behavior when the form is submitted. For
 *  example, an Apps Script can be invoked to handle the form.
 */
@interface GTLRCloudSearch_GoogleChatV1WidgetMarkupFormAction : GTLRObject

/**
 *  The method name is used to identify which part of the form triggered the
 *  form submission. This information is echoed back to the Chat app as part of
 *  the card click event. The same method name can be used for several elements
 *  that trigger a common behavior if desired.
 */
@property(nonatomic, copy, nullable) NSString *actionMethodName;

/** List of action parameters. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_GoogleChatV1WidgetMarkupFormActionActionParameter *> *parameters;

@end


/**
 *  List of string parameters to supply when the action method is invoked. For
 *  example, consider three snooze buttons: snooze now, snooze 1 day, snooze
 *  next week. You might use action method = snooze(), passing the snooze type
 *  and snooze time in the list of string parameters.
 */
@interface GTLRCloudSearch_GoogleChatV1WidgetMarkupFormActionActionParameter : GTLRObject

/** The name of the parameter for the action script. */
@property(nonatomic, copy, nullable) NSString *key;

/** The value of the parameter. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  An image that is specified by a URL and can have an onclick action.
 */
@interface GTLRCloudSearch_GoogleChatV1WidgetMarkupImage : GTLRObject

/**
 *  The aspect ratio of this image (width/height). This field allows clients to
 *  reserve the right height for the image while waiting for it to load. It's
 *  not meant to override the native aspect ratio of the image. If unset, the
 *  server fills it by prefetching the image.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aspectRatio;

/** The URL of the image. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/** The onclick action. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleChatV1WidgetMarkupOnClick *onClick;

@end


/**
 *  An image button with an onclick action.
 */
@interface GTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton : GTLRObject

/**
 *  The icon specified by an enum that indices to an icon provided by Chat API.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Airplane
 *        Value "AIRPLANE"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Bookmark
 *        Value "BOOKMARK"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Bus
 *        Value "BUS"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Car
 *        Value "CAR"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Clock
 *        Value "CLOCK"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_ConfirmationNumberIcon
 *        Value "CONFIRMATION_NUMBER_ICON"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Description
 *        Value "DESCRIPTION"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Dollar
 *        Value "DOLLAR"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Email
 *        Value "EMAIL"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_EventPerformer
 *        Value "EVENT_PERFORMER"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_EventSeat
 *        Value "EVENT_SEAT"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_FlightArrival
 *        Value "FLIGHT_ARRIVAL"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_FlightDeparture
 *        Value "FLIGHT_DEPARTURE"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Hotel
 *        Value "HOTEL"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_HotelRoomType
 *        Value "HOTEL_ROOM_TYPE"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_IconUnspecified
 *        Value "ICON_UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Invite
 *        Value "INVITE"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_MapPin
 *        Value "MAP_PIN"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Membership
 *        Value "MEMBERSHIP"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_MultiplePeople
 *        Value "MULTIPLE_PEOPLE"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Offer
 *        Value "OFFER"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Person
 *        Value "PERSON"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Phone
 *        Value "PHONE"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_RestaurantIcon
 *        Value "RESTAURANT_ICON"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_ShoppingCart
 *        Value "SHOPPING_CART"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Star
 *        Value "STAR"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Store
 *        Value "STORE"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Ticket
 *        Value "TICKET"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_Train
 *        Value "TRAIN"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_VideoCamera
 *        Value "VIDEO_CAMERA"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupImageButton_Icon_VideoPlay
 *        Value "VIDEO_PLAY"
 */
@property(nonatomic, copy, nullable) NSString *icon;

/** The icon specified by a URL. */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The name of this image_button which will be used for accessibility. Default
 *  value will be provided if developers don't specify.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The onclick action. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleChatV1WidgetMarkupOnClick *onClick;

@end


/**
 *  A UI element contains a key (label) and a value (content). And this element
 *  may also contain some actions such as onclick button.
 */
@interface GTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue : GTLRObject

/** The text of the bottom label. Formatted text supported. */
@property(nonatomic, copy, nullable) NSString *bottomLabel;

/** A button that can be clicked to trigger an action. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleChatV1WidgetMarkupButton *button;

/** The text of the content. Formatted text supported and always required. */
@property(nonatomic, copy, nullable) NSString *content;

/**
 *  If the content should be multiline.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *contentMultiline;

/**
 *  An enum value that will be replaced by the Chat API with the corresponding
 *  icon image.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Airplane
 *        Value "AIRPLANE"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Bookmark
 *        Value "BOOKMARK"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Bus Value
 *        "BUS"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Car Value
 *        "CAR"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Clock Value
 *        "CLOCK"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_ConfirmationNumberIcon
 *        Value "CONFIRMATION_NUMBER_ICON"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Description
 *        Value "DESCRIPTION"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Dollar
 *        Value "DOLLAR"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Email Value
 *        "EMAIL"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_EventPerformer
 *        Value "EVENT_PERFORMER"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_EventSeat
 *        Value "EVENT_SEAT"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_FlightArrival
 *        Value "FLIGHT_ARRIVAL"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_FlightDeparture
 *        Value "FLIGHT_DEPARTURE"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Hotel Value
 *        "HOTEL"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_HotelRoomType
 *        Value "HOTEL_ROOM_TYPE"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_IconUnspecified
 *        Value "ICON_UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Invite
 *        Value "INVITE"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_MapPin
 *        Value "MAP_PIN"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Membership
 *        Value "MEMBERSHIP"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_MultiplePeople
 *        Value "MULTIPLE_PEOPLE"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Offer Value
 *        "OFFER"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Person
 *        Value "PERSON"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Phone Value
 *        "PHONE"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_RestaurantIcon
 *        Value "RESTAURANT_ICON"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_ShoppingCart
 *        Value "SHOPPING_CART"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Star Value
 *        "STAR"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Store Value
 *        "STORE"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Ticket
 *        Value "TICKET"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_Train Value
 *        "TRAIN"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_VideoCamera
 *        Value "VIDEO_CAMERA"
 *    @arg @c kGTLRCloudSearch_GoogleChatV1WidgetMarkupKeyValue_Icon_VideoPlay
 *        Value "VIDEO_PLAY"
 */
@property(nonatomic, copy, nullable) NSString *icon;

/** The icon specified by a URL. */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The onclick action. Only the top label, bottom label and content region are
 *  clickable.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleChatV1WidgetMarkupOnClick *onClick;

/** The text of the top label. Formatted text supported. */
@property(nonatomic, copy, nullable) NSString *topLabel;

@end


/**
 *  An onclick action (e.g. open a link).
 */
@interface GTLRCloudSearch_GoogleChatV1WidgetMarkupOnClick : GTLRObject

/** A form action will be triggered by this onclick if specified. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleChatV1WidgetMarkupFormAction *action;

/** This onclick triggers an open link action if specified. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleChatV1WidgetMarkupOpenLink *openLink;

@end


/**
 *  A link that opens a new window.
 */
@interface GTLRCloudSearch_GoogleChatV1WidgetMarkupOpenLink : GTLRObject

/** The URL to open. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  A button with text and onclick action.
 */
@interface GTLRCloudSearch_GoogleChatV1WidgetMarkupTextButton : GTLRObject

/** The onclick action of the button. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleChatV1WidgetMarkupOnClick *onClick;

/** The text of the button. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A paragraph of text. Formatted text supported.
 */
@interface GTLRCloudSearch_GoogleChatV1WidgetMarkupTextParagraph : GTLRObject

@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  The corpus specific metadata for office-type documents, from Google Docs and
 *  other sources. This message is passed to the scorer and beyond. Next tag: 9
 */
@interface GTLRCloudSearch_GoogleDocsMetadata : GTLRObject

/** Contains number of users and groups which can access the document. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AclInfo *aclInfo;

/**
 *  The conceptual type (presentation, document, etc.) of this document.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_BinaryBlob
 *        Fall-back for unknown Gdrive types. (Value: "BINARY_BLOB")
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Document Writely,
 *        Word, etc. (Value: "DOCUMENT")
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_DraftSite For
 *        Atari page and site drafts (Value: "DRAFT_SITE")
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_DraftSitePage
 *        Value "DRAFT_SITE_PAGE"
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Drawing Value
 *        "DRAWING"
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Folder Value
 *        "FOLDER"
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Form Value "FORM"
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_FusionTable Value
 *        "FUSION_TABLE"
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Image Value
 *        "IMAGE"
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Jam Jamboard Jams
 *        (go/jam) (Value: "JAM")
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Pdf File types
 *        for Gdrive objects are below. (Value: "PDF")
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Presentation
 *        Presently, PowerPoint, etc. (Value: "PRESENTATION")
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Script Value
 *        "SCRIPT"
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Shortcut Drive
 *        Shortcuts (go/shortcuts) (Value: "SHORTCUT")
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Spreadsheet Trix,
 *        Excel, etc. (Value: "SPREADSHEET")
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Unknown If the
 *        type is unknown or not represented in this enum. (Value: "UNKNOWN")
 *    @arg @c kGTLRCloudSearch_GoogleDocsMetadata_DocumentType_Video Value
 *        "VIDEO"
 */
@property(nonatomic, copy, nullable) NSString *documentType;

/**
 *  The file extension of the document. NOTE: As of October 2018 this field is
 *  not backfilled for old documents.
 */
@property(nonatomic, copy, nullable) NSString *fileExtension;

/**
 *  The last time this document was modified, in seconds since epoch. Only
 *  counts content modifications.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastContentModifiedTimestamp;

/**
 *  Contains number of subscribers for the document.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numSubscribers;

/**
 *  Size of untruncated viewers list.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numViewers;

/**
 *  Additional per-result information, akin to Gmail's SingleThreadResponse.
 *  Note: GWS no longer seems to use this field, but there's still one reference
 *  to it for Scribe, so we can't remove it.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GoogleDocsResultInfo *resultInfo;

/**
 *  Contains additional information about the document depending on its type.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_TypeInfo *typeInfo;

@end


/**
 *  A message containing information about a specific result. This information
 *  is passed to the scorer and beyond; in particular, GWS relies on it to
 *  format the result in the UI. Split from GoogleDocsMetadata in case we later
 *  want to reuse the message.
 */
@interface GTLRCloudSearch_GoogleDocsResultInfo : GTLRObject

/** The SHA1 hash of the object in Drive, if any. */
@property(nonatomic, copy, nullable) NSString *attachmentSha1;

/**
 *  The storage identifier for the object in Cosmo. This field is intended to
 *  used by Stratus/Moonshine integration only. It should not be exposed
 *  externally (please refer to encrypted_id for that purpose).
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Id *cosmoId;

/**
 *  For Cosmo objects, the Cosmo namespace the object was in. This allows
 *  downstream clients to identify whether a document was created in Writely or
 *  Kix, Presently or Punch, or whether it was uploaded from GDrive. See
 *  storage_cosmo.Id.NAME_SPACE for a list of all Cosmo name spaces.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cosmoNameSpace;

/**
 *  The encrypted (user-visible) id of this object. Knowing the id is sufficient
 *  to create a canonical URL for this document.
 */
@property(nonatomic, copy, nullable) NSString *encryptedId;

/** The mimetype of the document. */
@property(nonatomic, copy, nullable) NSString *mimeType;

/** The visibility indicator in the UI will be based upon this. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ShareScope *shareScope;

@end


/**
 *  GTLRCloudSearch_Grid
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRCloudSearch_Grid : GTLRCollectionObject

/** The border style to apply to each grid item. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_BorderStyle *borderStyle;

/**
 *  The items to display in the grid.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_GridItem *> *items;

/**
 *  The number of columns to display in the grid. Note that a default value will
 *  be used if this field is not specified, and that default value will be
 *  different depending on where the grid is shown (dialog vs companion).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numColumns;

/**
 *  This callback will be reused by each individual GridItem, but with the
 *  item's identifier and index in the items list added to the callback's
 *  parameters.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_OnClick *onClick;

/** The text to display in the grid header. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  GTLRCloudSearch_GridItem
 */
@interface GTLRCloudSearch_GridItem : GTLRObject

/**
 *  A user-specified identifier for this grid item. This identifier will be
 *  returned in the parent Grid's on_click callback's parameters.
 *
 *  identifierProperty property maps to 'identifier' in the JSON ('identifier'
 *  is reserved for remapping 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifierProperty;

@property(nonatomic, strong, nullable) GTLRCloudSearch_ImageComponent *image;

/**
 *  layout
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_GridItem_Layout_NotSet Value "NOT_SET"
 *    @arg @c kGTLRCloudSearch_GridItem_Layout_TextAbove The title and subtitle
 *        are shown above the grid item's image. (Value: "TEXT_ABOVE")
 *    @arg @c kGTLRCloudSearch_GridItem_Layout_TextBelow The title and subtitle
 *        are shown below the grid item's image. (Value: "TEXT_BELOW")
 */
@property(nonatomic, copy, nullable) NSString *layout;

@property(nonatomic, copy, nullable) NSString *subtitle;

/**
 *  textAlignment
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_GridItem_TextAlignment_Center Value "CENTER"
 *    @arg @c kGTLRCloudSearch_GridItem_TextAlignment_End Value "END"
 *    @arg @c kGTLRCloudSearch_GridItem_TextAlignment_HorizontalAlignmentUnspecified
 *        Value "HORIZONTAL_ALIGNMENT_UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_GridItem_TextAlignment_Start Value "START"
 */
@property(nonatomic, copy, nullable) NSString *textAlignment;

/** Text properties. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  GTLRCloudSearch_GroupDetailsUpdatedMetadata
 */
@interface GTLRCloudSearch_GroupDetailsUpdatedMetadata : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedGroupDetails *newGroupDetails NS_RETURNS_NOT_RETAINED;
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedGroupDetails *prevGroupDetails;

@end


/**
 *  Id representing a group that could be a space, a chat, or a direct message
 *  space. Which ID is set here will determine which group
 */
@interface GTLRCloudSearch_GroupId : GTLRObject

/** Unique, immutable ID of the Direct Message Space */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DmId *dmId;

/** Unique, immutable ID of the Space */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SpaceId *spaceId;

@end


/**
 *  GTLRCloudSearch_GroupLinkSharingModificationEvent
 */
@interface GTLRCloudSearch_GroupLinkSharingModificationEvent : GTLRObject

/**
 *  newStatus
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_GroupLinkSharingModificationEvent_NewStatus_LinkSharingOff
 *        Link sharing is turned off. (Value: "LINK_SHARING_OFF")
 *    @arg @c kGTLRCloudSearch_GroupLinkSharingModificationEvent_NewStatus_LinkSharingOn
 *        Link sharing is turned on. (Value: "LINK_SHARING_ON")
 *    @arg @c kGTLRCloudSearch_GroupLinkSharingModificationEvent_NewStatus_NotAvailable
 *        Link sharing is not available for the conversation. (Value:
 *        "NOT_AVAILABLE")
 *    @arg @c kGTLRCloudSearch_GroupLinkSharingModificationEvent_NewStatus_UnknownLinkSharingStatus
 *        Value "UNKNOWN_LINK_SHARING_STATUS"
 */
@property(nonatomic, copy, nullable) NSString *newStatus NS_RETURNS_NOT_RETAINED;

@end


/**
 *  GTLRCloudSearch_GroupRetentionSettingsUpdatedMetaData
 */
@interface GTLRCloudSearch_GroupRetentionSettingsUpdatedMetaData : GTLRObject

/** The user who triggered the retention settings update */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *initiator;

/** The updated space retention settings */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedRetentionSettings *retentionSettings;

@end


/**
 *  Annotation metadata for an GsuiteIntegration artifact.
 */
@interface GTLRCloudSearch_GsuiteIntegrationMetadata : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedActivityFeedAnnotationData *activityFeedData;
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedAssistantAnnotationData *assistantData;
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedCalendarEventAnnotationData *calendarEventData;

/** Data used to render call artifacts. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedCallAnnotationData *callData;

/**
 *  clientType
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_GsuiteIntegrationMetadata_ClientType_ActivityFeedService
 *        Value "ACTIVITY_FEED_SERVICE"
 *    @arg @c kGTLRCloudSearch_GsuiteIntegrationMetadata_ClientType_Assistant
 *        Value "ASSISTANT"
 *    @arg @c kGTLRCloudSearch_GsuiteIntegrationMetadata_ClientType_CalendarEvent
 *        Value "CALENDAR_EVENT"
 *    @arg @c kGTLRCloudSearch_GsuiteIntegrationMetadata_ClientType_Meet Value
 *        "MEET"
 *    @arg @c kGTLRCloudSearch_GsuiteIntegrationMetadata_ClientType_Tasks Value
 *        "TASKS"
 *    @arg @c kGTLRCloudSearch_GsuiteIntegrationMetadata_ClientType_UnknownClientType
 *        Value "UNKNOWN_CLIENT_TYPE"
 */
@property(nonatomic, copy, nullable) NSString *clientType;

/**
 *  A list of all strings that are to be indexed for this 1P chip. Each string
 *  in this list would be the contents of a single string field in the 1P chip.
 *  Eg. For Tasks[title = “hello world”, description = “good bye”]. If we want
 *  to index only the title, this would be set to [“hello world”]. If both title
 *  and description, then this would be [“hello world”, “good bye”]. Please make
 *  sure that the contents of this field is a subset of strings that are
 *  rendered as part of the 1P Chip.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *indexableTexts;

@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedTasksAnnotationData *tasksData;

@end


/**
 *  GTLRCloudSearch_GSuitePrincipal
 */
@interface GTLRCloudSearch_GSuitePrincipal : GTLRObject

/**
 *  This principal represents all users of the Google Workspace domain of the
 *  customer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *gsuiteDomain;

/** This principal references a Google Workspace group name. */
@property(nonatomic, copy, nullable) NSString *gsuiteGroupEmail;

/** This principal references a Google Workspace user account. */
@property(nonatomic, copy, nullable) NSString *gsuiteUserEmail;

@end


/**
 *  GTLRCloudSearch_HangoutEvent
 */
@interface GTLRCloudSearch_HangoutEvent : GTLRObject

/**
 *  hangoutDurationSecs
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hangoutDurationSecs;

/**
 *  mediaType
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_HangoutEvent_MediaType_AudioOnly Value
 *        "AUDIO_ONLY"
 *    @arg @c kGTLRCloudSearch_HangoutEvent_MediaType_AudioVideo Value
 *        "AUDIO_VIDEO"
 *    @arg @c kGTLRCloudSearch_HangoutEvent_MediaType_PushToTalk A user has
 *        started a PTT broadcast. When receiving a notification with this
 *        HangoutMediaType, other users in the conversation will take different
 *        actions depending on their active clients: a) If there is a recent
 *        "reasonable" active client, the user will join hangout and play audio.
 *        b) If there is no "reasonable" active client an invite will be
 *        displayed on all clients. (Value: "PUSH_TO_TALK")
 */
@property(nonatomic, copy, nullable) NSString *mediaType;

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_StoredParticipantId *> *participantId;

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_HangoutEvent_Type_EndHangout Value "END_HANGOUT"
 *    @arg @c kGTLRCloudSearch_HangoutEvent_Type_HangoutComingSoon Value
 *        "HANGOUT_COMING_SOON"
 *    @arg @c kGTLRCloudSearch_HangoutEvent_Type_JoinHangout Value
 *        "JOIN_HANGOUT"
 *    @arg @c kGTLRCloudSearch_HangoutEvent_Type_LeaveHangout Value
 *        "LEAVE_HANGOUT"
 *    @arg @c kGTLRCloudSearch_HangoutEvent_Type_OngoingHangout Value
 *        "ONGOING_HANGOUT"
 *    @arg @c kGTLRCloudSearch_HangoutEvent_Type_StartHangout Value
 *        "START_HANGOUT"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A message representing the Hangout video start/end events in Babel
 */
@interface GTLRCloudSearch_HangoutVideoEventMetadata : GTLRObject

/**
 *  hangoutVideoType
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_HangoutVideoEventMetadata_HangoutVideoType_UnknownHangoutVideoEventType
 *        Value "UNKNOWN_HANGOUT_VIDEO_EVENT_TYPE"
 *    @arg @c kGTLRCloudSearch_HangoutVideoEventMetadata_HangoutVideoType_VideoEnd
 *        Value "VIDEO_END"
 *    @arg @c kGTLRCloudSearch_HangoutVideoEventMetadata_HangoutVideoType_VideoStart
 *        Value "VIDEO_START"
 */
@property(nonatomic, copy, nullable) NSString *hangoutVideoType;

@end


/**
 *  Hashtag metadata, for HASHTAG segments. For a hashtag, the "text" field
 *  should contain the display text, and the search_text field should represent
 *  the topic being referenced, without the hash symbol; for example, we might
 *  have: text = "#Google" hashtag_data.search_text = "Google" Another example:
 *  text = "#pikachu" hashtag_data.search_text = "Pokemon" Both strings should
 *  be considered part of the searchable text. In go/sbe, both are indexed and
 *  searchable.
 */
@interface GTLRCloudSearch_HashtagData : GTLRObject

@property(nonatomic, copy, nullable) NSString *searchText;

@end


/**
 *  Actions handled by individual host apps.
 */
@interface GTLRCloudSearch_HostAppActionMarkup : GTLRObject

/** Actions handled by Calendar. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_CalendarClientActionMarkup *calendarAction;

/** Actions handled by Chat. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ChatClientActionMarkup *chatAction;

/** Actions handled by Drive. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DriveClientActionMarkup *driveAction;

/** Actions handled by Docs, Sheets, or Slides. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_EditorClientActionMarkup *editorAction;

/** Actions handled by Gmail. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GmailClientActionMarkup *gmailAction;

/** Actions handled by Sheets. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SheetsClientActionMarkup *sheetsAction;

@end


/**
 *  Represents a single host. Optionally, the MDB owner of the host can be
 *  specified.
 */
@interface GTLRCloudSearch_HostProto : GTLRObject

/** Lower-case, fully qualified hostname. */
@property(nonatomic, copy, nullable) NSString *hostName;

/**
 *  If present, then any checks that compare this Principal to LOAS peer info
 *  must confirm the peer's machine owner is equal to 'host_owner'. If absent,
 *  then any peer machine owner is acceptable.
 */
@property(nonatomic, copy, nullable) NSString *hostOwner;

@end


/**
 *  Used to provide a search operator for html properties. This is optional.
 *  Search operators let users restrict the query to specific fields relevant to
 *  the type of item being searched.
 */
@interface GTLRCloudSearch_HtmlOperatorOptions : GTLRObject

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  html property. For example, if operatorName is *subject* and the property's
 *  name is *subjectLine*, then queries like *subject:<value>* show results only
 *  where the value of the property named *subjectLine* matches *<value>*. By
 *  contrast, a search that uses the same *<value>* without an operator return
 *  all items where *<value>* matches the value of any html properties or text
 *  within the content field for the item. The operator name can only contain
 *  lowercase letters (a-z). The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

@end


/**
 *  The options for html properties.
 */
@interface GTLRCloudSearch_HtmlPropertyOptions : GTLRObject

/** If set, describes how the property should be used as a search operator. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_HtmlOperatorOptions *operatorOptions;

/**
 *  Indicates the search quality importance of the tokens within the field when
 *  used for retrieval. Can only be set to DEFAULT or NONE.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RetrievalImportance *retrievalImportance;

@end


/**
 *  List of html values.
 */
@interface GTLRCloudSearch_HtmlValues : GTLRObject

/** The maximum allowable length for html values is 2048 characters. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  GTLRCloudSearch_IconImage
 */
@interface GTLRCloudSearch_IconImage : GTLRObject

/**
 *  The alternative text of this icon_url which will be used for accessibility.
 */
@property(nonatomic, copy, nullable) NSString *altText;

/**
 *  icon
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Airplane Value "AIRPLANE"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Bookmark Value "BOOKMARK"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Bus Value "BUS"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Car Value "CAR"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Clock Value "CLOCK"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_ConfirmationNumberIcon Value
 *        "CONFIRMATION_NUMBER_ICON"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Description Value "DESCRIPTION"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Dollar Value "DOLLAR"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Edit Value "EDIT"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_EditNote Value "EDIT_NOTE"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Email Value "EMAIL"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_EventPerformer Value
 *        "EVENT_PERFORMER"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_EventSeat Value "EVENT_SEAT"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_FlightArrival Value
 *        "FLIGHT_ARRIVAL"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_FlightDeparture Value
 *        "FLIGHT_DEPARTURE"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Hotel Value "HOTEL"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_HotelRoomType Value
 *        "HOTEL_ROOM_TYPE"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Invite Value "INVITE"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_MapPin Value "MAP_PIN"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Membership Value "MEMBERSHIP"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_MultiplePeople Value
 *        "MULTIPLE_PEOPLE"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_None Value "NONE"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Offer Value "OFFER"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_OpenInNew Value "OPEN_IN_NEW"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Person Value "PERSON"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Phone Value "PHONE"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_RestaurantIcon Value
 *        "RESTAURANT_ICON"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_ShoppingCart Value "SHOPPING_CART"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Star Value "STAR"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Store Value "STORE"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Ticket Value "TICKET"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_Train Value "TRAIN"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_VideoCamera Value "VIDEO_CAMERA"
 *    @arg @c kGTLRCloudSearch_IconImage_Icon_VideoPlay Add new items in
 *        alphabetical order. Next Available ID: 34 (Value: "VIDEO_PLAY")
 */
@property(nonatomic, copy, nullable) NSString *icon;

@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The image cropping style. Note that icons with a CIRCLE style are rendered
 *  larger than the default icon size.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_IconImage_ImageStyle_Circle Applies a circular
 *        crop. (Value: "CIRCLE")
 *    @arg @c kGTLRCloudSearch_IconImage_ImageStyle_CropTypeNotSet No value
 *        specified. (Value: "CROP_TYPE_NOT_SET")
 *    @arg @c kGTLRCloudSearch_IconImage_ImageStyle_Rectangle43 Applies a
 *        rectangular crop with a 4:3 aspect ratio. (Value: "RECTANGLE_4_3")
 *    @arg @c kGTLRCloudSearch_IconImage_ImageStyle_RectangleCustom Applies a
 *        rectangular crop with a custom aspect ratio. (Value:
 *        "RECTANGLE_CUSTOM")
 *    @arg @c kGTLRCloudSearch_IconImage_ImageStyle_Square Applies a square
 *        crop. (Value: "SQUARE")
 */
@property(nonatomic, copy, nullable) NSString *imageStyle;

@end


/**
 *  Identifies a particular object, including both Users and DirEntries. This Id
 *  is unique across the entire server instance, such as the production or qa
 *  instance.
 */
@interface GTLRCloudSearch_Id : GTLRObject

/**
 *  The User account in which the DirEntry was originally created. If
 *  name_space==GAIA, then it's the gaia_id of the user this id is referring to.
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *creatorUserId;

/**
 *  The local identifier for the DirEntry (local to the creator's account).
 *  local_id + app_name is guaranteed to be unique within the creator account,
 *  but not across all User accounts. The string is case sensitive. Ignore if
 *  name_space==GAIA. NB For name_space==COSMO, all local_id's should be defined
 *  in google3/java/com/google/storage/cosmo/server/api/SpecialObjectIds.java as
 *  they have a special predefined meaning. See
 *  cosmo.client.CosmoIdFactory.createObjectId(long,String) for IMPORTANT
 *  recommendations when generating IDs.
 */
@property(nonatomic, copy, nullable) NSString *localId;

/**
 *  The name space in which this id is unique (typically the application that
 *  created it). Values should be drawn from the above enum, but for
 *  experimentation, use values greater than 1000.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nameSpace;

@end


/**
 *  GTLRCloudSearch_Image
 */
@interface GTLRCloudSearch_Image : GTLRObject

/**
 *  The alternative text of this image which will be used for accessibility.
 */
@property(nonatomic, copy, nullable) NSString *altText;

/**
 *  The aspect ratio of this image (width/height).
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aspectRatio;

/**
 *  Image url specified by developers. Server side, we will wrap with FIFE so
 *  client apps can configure size/cropping/etc.
 */
@property(nonatomic, copy, nullable) NSString *imageUrl;

@property(nonatomic, strong, nullable) GTLRCloudSearch_OnClick *onClick;

@end


/**
 *  GTLRCloudSearch_ImageButton
 */
@interface GTLRCloudSearch_ImageButton : GTLRObject

/**
 *  icon
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Airplane Value "AIRPLANE"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Bookmark Value "BOOKMARK"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Bus Value "BUS"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Car Value "CAR"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Clock Value "CLOCK"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_ConfirmationNumberIcon Value
 *        "CONFIRMATION_NUMBER_ICON"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Description Value "DESCRIPTION"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Dollar Value "DOLLAR"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Edit Value "EDIT"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_EditNote Value "EDIT_NOTE"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Email Value "EMAIL"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_EventPerformer Value
 *        "EVENT_PERFORMER"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_EventSeat Value "EVENT_SEAT"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_FlightArrival Value
 *        "FLIGHT_ARRIVAL"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_FlightDeparture Value
 *        "FLIGHT_DEPARTURE"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Hotel Value "HOTEL"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_HotelRoomType Value
 *        "HOTEL_ROOM_TYPE"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Invite Value "INVITE"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_MapPin Value "MAP_PIN"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Membership Value "MEMBERSHIP"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_MultiplePeople Value
 *        "MULTIPLE_PEOPLE"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_None Value "NONE"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Offer Value "OFFER"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_OpenInNew Value "OPEN_IN_NEW"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Person Value "PERSON"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Phone Value "PHONE"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_RestaurantIcon Value
 *        "RESTAURANT_ICON"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_ShoppingCart Value
 *        "SHOPPING_CART"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Star Value "STAR"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Store Value "STORE"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Ticket Value "TICKET"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_Train Value "TRAIN"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_VideoCamera Value "VIDEO_CAMERA"
 *    @arg @c kGTLRCloudSearch_ImageButton_Icon_VideoPlay Add new items in
 *        alphabetical order. Next Available ID: 34 (Value: "VIDEO_PLAY")
 */
@property(nonatomic, copy, nullable) NSString *icon;

@property(nonatomic, copy, nullable) NSString *iconUrl;
@property(nonatomic, copy, nullable) NSString *name;
@property(nonatomic, strong, nullable) GTLRCloudSearch_OnClick *onClick;

@end


/**
 *  NOTE: Through future refactoring work, this image component will eventually
 *  be used in the Image widget, and will likely replace the Icon proto as well.
 */
@interface GTLRCloudSearch_ImageComponent : GTLRObject

@property(nonatomic, copy, nullable) NSString *altText;
@property(nonatomic, strong, nullable) GTLRCloudSearch_BorderStyle *borderStyle;
@property(nonatomic, strong, nullable) GTLRCloudSearch_ImageCropStyle *cropStyle;
@property(nonatomic, copy, nullable) NSString *imageUrl;

@end


/**
 *  Represents a crop style that can be applied to an image.
 */
@interface GTLRCloudSearch_ImageCropStyle : GTLRObject

/**
 *  The aspect ratio to use if the crop type is RECTANGLE_CUSTOM.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aspectRatio;

/**
 *  The crop type.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_ImageCropStyle_Type_Circle Applies a circular
 *        crop. (Value: "CIRCLE")
 *    @arg @c kGTLRCloudSearch_ImageCropStyle_Type_CropTypeNotSet No value
 *        specified. (Value: "CROP_TYPE_NOT_SET")
 *    @arg @c kGTLRCloudSearch_ImageCropStyle_Type_Rectangle43 Applies a
 *        rectangular crop with a 4:3 aspect ratio. (Value: "RECTANGLE_4_3")
 *    @arg @c kGTLRCloudSearch_ImageCropStyle_Type_RectangleCustom Applies a
 *        rectangular crop with a custom aspect ratio. (Value:
 *        "RECTANGLE_CUSTOM")
 *    @arg @c kGTLRCloudSearch_ImageCropStyle_Type_Square Applies a square crop.
 *        (Value: "SQUARE")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  This is deprecated and please use KeyValue.
 */
@interface GTLRCloudSearch_ImageKeyValue : GTLRObject

/**
 *  icon
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Airplane Value "AIRPLANE"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Bookmark Value "BOOKMARK"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Bus Value "BUS"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Car Value "CAR"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Clock Value "CLOCK"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_ConfirmationNumberIcon Value
 *        "CONFIRMATION_NUMBER_ICON"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Description Value
 *        "DESCRIPTION"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Dollar Value "DOLLAR"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Edit Value "EDIT"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_EditNote Value "EDIT_NOTE"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Email Value "EMAIL"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_EventPerformer Value
 *        "EVENT_PERFORMER"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_EventSeat Value "EVENT_SEAT"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_FlightArrival Value
 *        "FLIGHT_ARRIVAL"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_FlightDeparture Value
 *        "FLIGHT_DEPARTURE"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Hotel Value "HOTEL"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_HotelRoomType Value
 *        "HOTEL_ROOM_TYPE"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Invite Value "INVITE"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_MapPin Value "MAP_PIN"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Membership Value "MEMBERSHIP"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_MultiplePeople Value
 *        "MULTIPLE_PEOPLE"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_None Value "NONE"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Offer Value "OFFER"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_OpenInNew Value "OPEN_IN_NEW"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Person Value "PERSON"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Phone Value "PHONE"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_RestaurantIcon Value
 *        "RESTAURANT_ICON"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_ShoppingCart Value
 *        "SHOPPING_CART"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Star Value "STAR"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Store Value "STORE"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Ticket Value "TICKET"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_Train Value "TRAIN"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_VideoCamera Value
 *        "VIDEO_CAMERA"
 *    @arg @c kGTLRCloudSearch_ImageKeyValue_Icon_VideoPlay Add new items in
 *        alphabetical order. Next Available ID: 34 (Value: "VIDEO_PLAY")
 */
@property(nonatomic, copy, nullable) NSString *icon;

@property(nonatomic, copy, nullable) NSString *iconUrl;
@property(nonatomic, strong, nullable) GTLRCloudSearch_OnClick *onClick;
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Annotation metadata to display system messages for incoming webhook events.
 *  Next Tag: 7
 */
@interface GTLRCloudSearch_IncomingWebhookChangedMetadata : GTLRObject

/**
 *  The webhook name at the time of the change. Used in Spanner storage, BE API
 *  responses and FE API responses.
 */
@property(nonatomic, copy, nullable) NSString *incomingWebhookName;

/**
 *  The user id of the user whose action triggered this system message. Used in
 *  Spanner storage, BE API responses and FE API responses.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *initiatorId;

/**
 *  Complete profile when ListTopicsRequest FetchOptions.USER is set. Otherwise,
 *  only the id will be filled in. Used in FE API responses.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_User *initiatorProfile;

/**
 *  The webhook id of the incoming webhook in question. This field should not be
 *  used to load webhook information dynamically and is only present for
 *  debugging purposes. Used in Spanner storage, BE API responses and FE API
 *  responses.
 */
@property(nonatomic, copy, nullable) NSString *obfuscatedIncomingWebhookId;

/**
 *  Only populated for UPDATED_NAME and UPDATED_NAME_AND_AVATAR events, where
 *  the webhook name was changed. Used in Spanner storage, BE API responses and
 *  FE API responses.
 */
@property(nonatomic, copy, nullable) NSString *oldIncomingWebhookName;

/**
 *  Used in Spanner storage, BE API responses and FE API responses.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_IncomingWebhookChangedMetadata_Type_Added Value
 *        "ADDED"
 *    @arg @c kGTLRCloudSearch_IncomingWebhookChangedMetadata_Type_Removed Value
 *        "REMOVED"
 *    @arg @c kGTLRCloudSearch_IncomingWebhookChangedMetadata_Type_Unspecified
 *        Value "UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_IncomingWebhookChangedMetadata_Type_Updated TODO
 *        (b/154857280): remove UPDATED field. (Value: "UPDATED")
 *    @arg @c kGTLRCloudSearch_IncomingWebhookChangedMetadata_Type_UpdatedAvatar
 *        Value "UPDATED_AVATAR"
 *    @arg @c kGTLRCloudSearch_IncomingWebhookChangedMetadata_Type_UpdatedName
 *        Value "UPDATED_NAME"
 *    @arg @c kGTLRCloudSearch_IncomingWebhookChangedMetadata_Type_UpdatedNameAndAvatar
 *        Value "UPDATED_NAME_AND_AVATAR"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRCloudSearch_IndexItemOptions
 */
@interface GTLRCloudSearch_IndexItemOptions : GTLRObject

/**
 *  Specifies if the index request should allow Google Workspace principals that
 *  do not exist or are deleted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowUnknownGsuitePrincipals;

@end


/**
 *  GTLRCloudSearch_IndexItemRequest
 */
@interface GTLRCloudSearch_IndexItemRequest : GTLRObject

/**
 *  The name of connector making this call. Format:
 *  datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

@property(nonatomic, strong, nullable) GTLRCloudSearch_IndexItemOptions *indexItemOptions;

/** The name of the item. Format: datasources/{source_id}/items/{item_id} */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Item *item;

/**
 *  Required. The RequestMode for this request.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_IndexItemRequest_Mode_Asynchronous For changes
 *        that are executed after the response is sent back to the caller.
 *        (Value: "ASYNCHRONOUS")
 *    @arg @c kGTLRCloudSearch_IndexItemRequest_Mode_Synchronous For real-time
 *        updates. (Value: "SYNCHRONOUS")
 *    @arg @c kGTLRCloudSearch_IndexItemRequest_Mode_Unspecified The priority is
 *        not specified in the update request. Leaving priority unspecified
 *        results in an update failure. (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *mode;

@end


/**
 *  Request message for `InitializeCustomer` method.
 */
@interface GTLRCloudSearch_InitializeCustomerRequest : GTLRObject
@end


/**
 *  GTLRCloudSearch_InsertContent
 */
@interface GTLRCloudSearch_InsertContent : GTLRObject

/** The content to be inserted. */
@property(nonatomic, copy, nullable) NSString *content;

/**
 *  The type of inserted content.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_InsertContent_ContentType_ImmutableHtml Specifies
 *        that the content is in HTML and is immutable (cannot be edited).
 *        (Value: "IMMUTABLE_HTML")
 *    @arg @c kGTLRCloudSearch_InsertContent_ContentType_MutableHtml Specifies
 *        that the content is in HTML and is mutable (can be edited). (Value:
 *        "MUTABLE_HTML")
 *    @arg @c kGTLRCloudSearch_InsertContent_ContentType_Text Specifies that the
 *        content is in plain text. (Value: "TEXT")
 *    @arg @c kGTLRCloudSearch_InsertContent_ContentType_UnspecifiedContentType
 *        Default value when nothing is set for ContentType. (Value:
 *        "UNSPECIFIED_CONTENT_TYPE")
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  mimeType
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_InsertContent_MimeType_Html Specifies that the
 *        inserted content is in HTML. (Value: "HTML")
 *    @arg @c kGTLRCloudSearch_InsertContent_MimeType_PlainText Specifies that
 *        the inserted content is in plain text. (Value: "PLAIN_TEXT")
 *    @arg @c kGTLRCloudSearch_InsertContent_MimeType_UnspecifiedEmailMimeType
 *        Default value when nothing is set for EmailMimeType. (Value:
 *        "UNSPECIFIED_EMAIL_MIME_TYPE")
 */
@property(nonatomic, copy, nullable) NSString *mimeType;

@end


/**
 *  Used to provide a search operator for integer properties. This is optional.
 *  Search operators let users restrict the query to specific fields relevant to
 *  the type of item being searched.
 */
@interface GTLRCloudSearch_IntegerOperatorOptions : GTLRObject

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  integer property using the greater-than operator. For example, if
 *  greaterThanOperatorName is *priorityabove* and the property's name is
 *  *priorityVal*, then queries like *priorityabove:<value>* show results only
 *  where the value of the property named *priorityVal* is greater than
 *  *<value>*. The operator name can only contain lowercase letters (a-z). The
 *  maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *greaterThanOperatorName;

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  integer property using the less-than operator. For example, if
 *  lessThanOperatorName is *prioritybelow* and the property's name is
 *  *priorityVal*, then queries like *prioritybelow:<value>* show results only
 *  where the value of the property named *priorityVal* is less than *<value>*.
 *  The operator name can only contain lowercase letters (a-z). The maximum
 *  length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *lessThanOperatorName;

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  integer property. For example, if operatorName is *priority* and the
 *  property's name is *priorityVal*, then queries like *priority:<value>* show
 *  results only where the value of the property named *priorityVal* matches
 *  *<value>*. By contrast, a search that uses the same *<value>* without an
 *  operator returns all items where *<value>* matches the value of any String
 *  properties or text within the content field for the item. The operator name
 *  can only contain lowercase letters (a-z). The maximum length is 32
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

@end


/**
 *  The options for integer properties.
 */
@interface GTLRCloudSearch_IntegerPropertyOptions : GTLRObject

/**
 *  The maximum value of the property. The minimum and maximum values for the
 *  property are used to rank results according to the ordered ranking. Indexing
 *  requests with values greater than the maximum are accepted and ranked with
 *  the same weight as items indexed with the maximum value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maximumValue;

/**
 *  The minimum value of the property. The minimum and maximum values for the
 *  property are used to rank results according to the ordered ranking. Indexing
 *  requests with values less than the minimum are accepted and ranked with the
 *  same weight as items indexed with the minimum value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minimumValue;

/** If set, describes how the integer should be used as a search operator. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_IntegerOperatorOptions *operatorOptions;

/**
 *  Used to specify the ordered ranking for the integer. Can only be used if
 *  isRepeatable is false.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_IntegerPropertyOptions_OrderedRanking_Ascending
 *        This property is ranked in ascending order. Lower values indicate
 *        lower ranking. (Value: "ASCENDING")
 *    @arg @c kGTLRCloudSearch_IntegerPropertyOptions_OrderedRanking_Descending
 *        This property is ranked in descending order. Lower values indicate
 *        higher ranking. (Value: "DESCENDING")
 *    @arg @c kGTLRCloudSearch_IntegerPropertyOptions_OrderedRanking_NoOrder
 *        There is no ranking order for the property. Results are not adjusted
 *        by this property's value. (Value: "NO_ORDER")
 */
@property(nonatomic, copy, nullable) NSString *orderedRanking;

@end


/**
 *  List of integer values.
 */
@interface GTLRCloudSearch_IntegerValues : GTLRObject

/**
 *  values
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *values;

@end


/**
 *  GTLRCloudSearch_IntegrationConfigMutation
 */
@interface GTLRCloudSearch_IntegrationConfigMutation : GTLRObject

/** Add an app using its identifier. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppId *addApp;

/** Add a pinned tab using its identifier. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_PinnedItemId *addPinnedItem;

/** Remove an active app using its identifier. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppId *removeApp;

/** Remove an active pinned tab using its identifier. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_PinnedItemId *removePinnedItem;

@end


/**
 *  Annotation metadata to display system message for integration config updated
 *  event. This metadata is stored in spanner, and can be dispatched to clients
 *  without any field modification or transformation.
 */
@interface GTLRCloudSearch_IntegrationConfigUpdatedMetadata : GTLRObject

/** The user whose action triggered this system message. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *initiatorId;

/** A list of updates applied on the integration config. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_IntegrationConfigMutation *> *mutations;

@end


/**
 *  Represents an interaction between a user and an item.
 */
@interface GTLRCloudSearch_Interaction : GTLRObject

/**
 *  The time when the user acted on the item. If multiple actions of the same
 *  type exist for a single user, only the most recent action is recorded.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *interactionTime;

/** The user that acted on the item. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Principal *principal;

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Interaction_Type_Edit This interaction indicates
 *        the user edited the item. (Value: "EDIT")
 *    @arg @c kGTLRCloudSearch_Interaction_Type_Unspecified Invalid value.
 *        (Value: "UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_Interaction_Type_View This interaction indicates
 *        the user viewed the item. (Value: "VIEW")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRCloudSearch_InviteAcceptedEvent
 */
@interface GTLRCloudSearch_InviteAcceptedEvent : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_StoredParticipantId *> *participantId;

@end


/**
 *  Invitee information from a Dynamite invitation. See
 *  go/dynamite-invitee-mgmt.
 */
@interface GTLRCloudSearch_InviteeInfo : GTLRObject

/**
 *  Email as typed by the user when invited to Room or DM. This value will be
 *  canonicalized and hashed before retained in storage.
 */
@property(nonatomic, copy, nullable) NSString *email;

/** Unique, immutable ID of the User. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *userId;

@end


/**
 *  Represents a single object that is an item in the search index, such as a
 *  file, folder, or a database record.
 */
@interface GTLRCloudSearch_Item : GTLRObject

/** Access control list for this item. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ItemAcl *acl;

/** Item content to be indexed and made text searchable. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ItemContent *content;

/**
 *  The type for this item.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Item_ItemType_ContainerItem An item that gets
 *        indexed and whose purpose is to supply other items with ACLs and/or
 *        contain other items. (Value: "CONTAINER_ITEM")
 *    @arg @c kGTLRCloudSearch_Item_ItemType_ContentItem An item that is indexed
 *        for the only purpose of serving information. These items cannot be
 *        referred in containerName or inheritAclFrom fields. (Value:
 *        "CONTENT_ITEM")
 *    @arg @c kGTLRCloudSearch_Item_ItemType_Unspecified Value "UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_Item_ItemType_VirtualContainerItem An item that
 *        does not get indexed, but otherwise has the same purpose as
 *        CONTAINER_ITEM. (Value: "VIRTUAL_CONTAINER_ITEM")
 */
@property(nonatomic, copy, nullable) NSString *itemType;

/** The metadata information. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ItemMetadata *metadata;

/**
 *  The name of the Item. Format: datasources/{source_id}/items/{item_id} This
 *  is a required field. The maximum length is 1536 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Additional state connector can store for this item. The maximum length is
 *  10000 bytes.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *payload;

/** Queue this item belongs to. The maximum length is 100 characters. */
@property(nonatomic, copy, nullable) NSString *queue;

/** Status of the item. Output only field. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ItemStatus *status;

/**
 *  The structured data for the item that should conform to a registered object
 *  definition in the schema for the data source.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ItemStructuredData *structuredData;

/**
 *  Required. The indexing system stores the version from the datasource as a
 *  byte string and compares the Item version in the index to the version of the
 *  queued Item using lexical ordering. Cloud Search Indexing won't index or
 *  delete any queued item with a version value that is less than or equal to
 *  the version of the currently indexed item. The maximum length for this field
 *  is 1024 bytes. For information on how item version affects the deletion
 *  process, refer to [Handle revisions after manual
 *  deletes](https://developers.google.com/cloud-search/docs/guides/operations).
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Access control list information for the item. For more information see [Map
 *  ACLs](https://developers.google.com/cloud-search/docs/guides/acls).
 */
@interface GTLRCloudSearch_ItemAcl : GTLRObject

/**
 *  Sets the type of access rules to apply when an item inherits its ACL from a
 *  parent. This should always be set in tandem with the inheritAclFrom field.
 *  Also, when the inheritAclFrom field is set, this field should be set to a
 *  valid AclInheritanceType.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_ItemAcl_AclInheritanceType_BothPermit Access is
 *        granted only if this item and the parent item specified in the
 *        inheritAclFrom field both permit read access. (Value: "BOTH_PERMIT")
 *    @arg @c kGTLRCloudSearch_ItemAcl_AclInheritanceType_ChildOverride During
 *        an authorization conflict, the ACL of the child item determines its
 *        read access. (Value: "CHILD_OVERRIDE")
 *    @arg @c kGTLRCloudSearch_ItemAcl_AclInheritanceType_NotApplicable The
 *        default value when this item does not inherit an ACL. Use
 *        NOT_APPLICABLE when inheritAclFrom is empty. An item without ACL
 *        inheritance can still have ACLs supplied by its own readers and
 *        deniedReaders fields. (Value: "NOT_APPLICABLE")
 *    @arg @c kGTLRCloudSearch_ItemAcl_AclInheritanceType_ParentOverride During
 *        an authorization conflict, the ACL of the parent item specified in the
 *        inheritAclFrom field determines read access. (Value:
 *        "PARENT_OVERRIDE")
 */
@property(nonatomic, copy, nullable) NSString *aclInheritanceType;

/**
 *  List of principals who are explicitly denied access to the item in search
 *  results. While principals are denied access by default, use denied readers
 *  to handle exceptions and override the list allowed readers. The maximum
 *  number of elements is 100.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Principal *> *deniedReaders;

/**
 *  The name of the item to inherit the Access Permission List (ACL) from. Note:
 *  ACL inheritance *only* provides access permissions to child items and does
 *  not define structural relationships, nor does it provide convenient ways to
 *  delete large groups of items. Deleting an ACL parent from the index only
 *  alters the access permissions of child items that reference the parent in
 *  the inheritAclFrom field. The item is still in the index, but may not
 *  visible in search results. By contrast, deletion of a container item also
 *  deletes all items that reference the container via the containerName field.
 *  The maximum length for this field is 1536 characters.
 */
@property(nonatomic, copy, nullable) NSString *inheritAclFrom;

/**
 *  Optional. List of owners for the item. This field has no bearing on document
 *  access permissions. It does, however, offer a slight ranking boosts items
 *  where the querying user is an owner. The maximum number of elements is 5.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Principal *> *owners;

/**
 *  List of principals who are allowed to see the item in search results.
 *  Optional if inheriting permissions from another item or if the item is not
 *  intended to be visible, such as virtual containers. The maximum number of
 *  elements is 1000.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Principal *> *readers;

@end


/**
 *  Content of an item to be indexed and surfaced by Cloud Search. Only UTF-8
 *  encoded strings are allowed as inlineContent. If the content is uploaded and
 *  not binary, it must be UTF-8 encoded.
 */
@interface GTLRCloudSearch_ItemContent : GTLRObject

/** Upload reference ID of a previously uploaded content via write method. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UploadItemRef *contentDataRef;

/**
 *  contentFormat
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_ItemContent_ContentFormat_Html contentFormat is
 *        HTML. (Value: "HTML")
 *    @arg @c kGTLRCloudSearch_ItemContent_ContentFormat_Raw contentFormat is
 *        raw bytes. (Value: "RAW")
 *    @arg @c kGTLRCloudSearch_ItemContent_ContentFormat_Text contentFormat is
 *        free text. (Value: "TEXT")
 *    @arg @c kGTLRCloudSearch_ItemContent_ContentFormat_Unspecified Invalid
 *        value. (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *contentFormat;

/**
 *  Hashing info calculated and provided by the API client for content. Can be
 *  used with the items.push method to calculate modified state. The maximum
 *  length is 2048 characters.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty;

/**
 *  Content that is supplied inlined within the update method. The maximum
 *  length is 102400 bytes (100 KiB).
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *inlineContent;

@end


/**
 *  GTLRCloudSearch_ItemCountByStatus
 */
@interface GTLRCloudSearch_ItemCountByStatus : GTLRObject

/**
 *  Number of items matching the status code.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  Number of items matching the status code for which billing is done. This
 *  excludes virtual container items from the total count. This count would not
 *  be applicable for items with ERROR or NEW_ITEM status code.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *indexedItemsCount;

/**
 *  Status of the items.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_ItemCountByStatus_StatusCode_Accepted API has
 *        accepted the up-to-date data of this item. (Value: "ACCEPTED")
 *    @arg @c kGTLRCloudSearch_ItemCountByStatus_StatusCode_CodeUnspecified
 *        Input-only value. Used with Items.list to list all items in the queue,
 *        regardless of status. (Value: "CODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_ItemCountByStatus_StatusCode_Error Error
 *        encountered by Cloud Search while processing this item. Details of the
 *        error are in repositoryError. (Value: "ERROR")
 *    @arg @c kGTLRCloudSearch_ItemCountByStatus_StatusCode_Modified Item has
 *        been modified in the repository, and is out of date with the version
 *        previously accepted into Cloud Search. (Value: "MODIFIED")
 *    @arg @c kGTLRCloudSearch_ItemCountByStatus_StatusCode_NewItem Item is
 *        known to exist in the repository, but is not yet accepted by Cloud
 *        Search. An item can be in this state when Items.push has been called
 *        for an item of this name that did not exist previously. (Value:
 *        "NEW_ITEM")
 */
@property(nonatomic, copy, nullable) NSString *statusCode;

@end


/**
 *  Available metadata fields for the item.
 */
@interface GTLRCloudSearch_ItemMetadata : GTLRObject

/**
 *  The name of the container for this item. Deletion of the container item
 *  leads to automatic deletion of this item. Note: ACLs are not inherited from
 *  a container item. To provide ACL inheritance for an item, use the
 *  inheritAclFrom field. The maximum length is 1536 characters.
 */
@property(nonatomic, copy, nullable) NSString *containerName;

/**
 *  The BCP-47 language code for the item, such as "en-US" or "sr-Latn". For
 *  more information, see
 *  http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. The maximum
 *  length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *contentLanguage;

/**
 *  A set of named attributes associated with the item. This can be used for
 *  influencing the ranking of the item based on the context in the request. The
 *  maximum number of elements is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ContextAttribute *> *contextAttributes;

/** The time when the item was created in the source repository. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Hashing value provided by the API caller. This can be used with the
 *  items.push method to calculate modified state. The maximum length is 2048
 *  characters.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty;

/**
 *  A list of interactions for the item. Interactions are used to improve Search
 *  quality, but are not exposed to end users. The maximum number of elements is
 *  1000.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Interaction *> *interactions;

/**
 *  Additional keywords or phrases that should match the item. Used internally
 *  for user generated content. The maximum number of elements is 100. The
 *  maximum length is 8192 characters.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *keywords;

/**
 *  The original mime-type of ItemContent.content in the source repository. The
 *  maximum length is 256 characters.
 */
@property(nonatomic, copy, nullable) NSString *mimeType;

/**
 *  The type of the item. This should correspond to the name of an object
 *  definition in the schema registered for the data source. For example, if the
 *  schema for the data source contains an object definition with name
 *  'document', then item indexing requests for objects of that type should set
 *  objectType to 'document'. The maximum length is 256 characters.
 */
@property(nonatomic, copy, nullable) NSString *objectType;

/** Additional search quality metadata of the item */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SearchQualityMetadata *searchQualityMetadata;

/**
 *  Link to the source repository serving the data. Seach results apply this
 *  link to the title. Whitespace or special characters may cause Cloud Seach
 *  result links to trigger a redirect notice; to avoid this, encode the URL.
 *  The maximum length is 2048 characters.
 */
@property(nonatomic, copy, nullable) NSString *sourceRepositoryUrl;

/**
 *  The title of the item. If given, this will be the displayed title of the
 *  Search result. The maximum length is 2048 characters.
 */
@property(nonatomic, copy, nullable) NSString *title;

/** The time when the item was last modified in the source repository. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  This contains item's status and any errors.
 */
@interface GTLRCloudSearch_ItemStatus : GTLRObject

/**
 *  Status code.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_ItemStatus_Code_Accepted API has accepted the
 *        up-to-date data of this item. (Value: "ACCEPTED")
 *    @arg @c kGTLRCloudSearch_ItemStatus_Code_CodeUnspecified Input-only value.
 *        Used with Items.list to list all items in the queue, regardless of
 *        status. (Value: "CODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_ItemStatus_Code_Error Error encountered by Cloud
 *        Search while processing this item. Details of the error are in
 *        repositoryError. (Value: "ERROR")
 *    @arg @c kGTLRCloudSearch_ItemStatus_Code_Modified Item has been modified
 *        in the repository, and is out of date with the version previously
 *        accepted into Cloud Search. (Value: "MODIFIED")
 *    @arg @c kGTLRCloudSearch_ItemStatus_Code_NewItem Item is known to exist in
 *        the repository, but is not yet accepted by Cloud Search. An item can
 *        be in this state when Items.push has been called for an item of this
 *        name that did not exist previously. (Value: "NEW_ITEM")
 */
@property(nonatomic, copy, nullable) NSString *code;

/** Error details in case the item is in ERROR state. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ProcessingError *> *processingErrors;

/** Repository error reported by connector. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_RepositoryError *> *repositoryErrors;

@end


/**
 *  Available structured data fields for the item.
 */
@interface GTLRCloudSearch_ItemStructuredData : GTLRObject

/**
 *  Hashing value provided by the API caller. This can be used with the
 *  items.push method to calculate modified state. The maximum length is 2048
 *  characters.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty;

/**
 *  The structured data object that should conform to a registered object
 *  definition in the schema for the data source.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_StructuredDataObject *object;

@end


/**
 *  GTLRCloudSearch_KeyValue
 */
@interface GTLRCloudSearch_KeyValue : GTLRObject

/** Formatted text supported. */
@property(nonatomic, copy, nullable) NSString *bottomLabel;

@property(nonatomic, strong, nullable) GTLRCloudSearch_Button *button;

/** Formatted text supported and always required. */
@property(nonatomic, copy, nullable) NSString *content;

/**
 *  contentMultiline
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *contentMultiline;

@property(nonatomic, strong, nullable) GTLRCloudSearch_IconImage *endIcon;

/**
 *  icon
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Airplane Value "AIRPLANE"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Bookmark Value "BOOKMARK"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Bus Value "BUS"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Car Value "CAR"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Clock Value "CLOCK"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_ConfirmationNumberIcon Value
 *        "CONFIRMATION_NUMBER_ICON"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Description Value "DESCRIPTION"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Dollar Value "DOLLAR"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Edit Value "EDIT"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_EditNote Value "EDIT_NOTE"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Email Value "EMAIL"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_EventPerformer Value
 *        "EVENT_PERFORMER"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_EventSeat Value "EVENT_SEAT"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_FlightArrival Value
 *        "FLIGHT_ARRIVAL"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_FlightDeparture Value
 *        "FLIGHT_DEPARTURE"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Hotel Value "HOTEL"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_HotelRoomType Value
 *        "HOTEL_ROOM_TYPE"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Invite Value "INVITE"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_MapPin Value "MAP_PIN"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Membership Value "MEMBERSHIP"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_MultiplePeople Value
 *        "MULTIPLE_PEOPLE"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_None Value "NONE"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Offer Value "OFFER"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_OpenInNew Value "OPEN_IN_NEW"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Person Value "PERSON"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Phone Value "PHONE"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_RestaurantIcon Value
 *        "RESTAURANT_ICON"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_ShoppingCart Value "SHOPPING_CART"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Star Value "STAR"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Store Value "STORE"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Ticket Value "TICKET"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_Train Value "TRAIN"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_VideoCamera Value "VIDEO_CAMERA"
 *    @arg @c kGTLRCloudSearch_KeyValue_Icon_VideoPlay Add new items in
 *        alphabetical order. Next Available ID: 34 (Value: "VIDEO_PLAY")
 */
@property(nonatomic, copy, nullable) NSString *icon;

/**
 *  The alternative text of this icon_url which will be used for accessibility.
 */
@property(nonatomic, copy, nullable) NSString *iconAltText;

@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  imageStyle
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_KeyValue_ImageStyle_Circle Applies a circular
 *        crop. (Value: "CIRCLE")
 *    @arg @c kGTLRCloudSearch_KeyValue_ImageStyle_CropTypeNotSet No value
 *        specified. (Value: "CROP_TYPE_NOT_SET")
 *    @arg @c kGTLRCloudSearch_KeyValue_ImageStyle_Rectangle43 Applies a
 *        rectangular crop with a 4:3 aspect ratio. (Value: "RECTANGLE_4_3")
 *    @arg @c kGTLRCloudSearch_KeyValue_ImageStyle_RectangleCustom Applies a
 *        rectangular crop with a custom aspect ratio. (Value:
 *        "RECTANGLE_CUSTOM")
 *    @arg @c kGTLRCloudSearch_KeyValue_ImageStyle_Square Applies a square crop.
 *        (Value: "SQUARE")
 */
@property(nonatomic, copy, nullable) NSString *imageStyle;

/** Only the top/bottom label + content region is clickable. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_OnClick *onClick;

/** The optional icon to display before the text content. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_IconImage *startIcon;

@property(nonatomic, strong, nullable) GTLRCloudSearch_SwitchWidget *switchWidget;

/** Formatted text supported. */
@property(nonatomic, copy, nullable) NSString *topLabel;

@end


/**
 *  The language configuration for the session.
 */
@interface GTLRCloudSearch_LanguageConfig : GTLRObject

/** The spoken language(s) in BCP47 language code. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *spokenLanguages;

@end


/**
 *  GTLRCloudSearch_LdapGroupProto
 */
@interface GTLRCloudSearch_LdapGroupProto : GTLRObject

@property(nonatomic, copy, nullable) NSString *groupName;

@end


/**
 *  GTLRCloudSearch_LdapUserProto
 */
@interface GTLRCloudSearch_LdapUserProto : GTLRObject

@property(nonatomic, copy, nullable) NSString *userName;

@end


/**
 *  The original UploadMetadata that this DriveMetadata was converted from.
 */
@interface GTLRCloudSearch_LegacyUploadMetadata : GTLRObject

/**
 *  A unique ID generated from legacy UploadMetadata. This is used for
 *  interopping URLs after uploading blob to shared drive. Links in Classic
 *  might break without this. go/drive-file-attachment-interop-from-dynamite.
 */
@property(nonatomic, copy, nullable) NSString *legacyUniqueId;

/**
 *  The blob in this UploadMetadata has been uploaded to shared drive. This
 *  UploadMetadata is no longer attached to a message.
 *  go/shared-drive-data-migration.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UploadMetadata *uploadMetadata;

@end


/**
 *  Link metadata, for LINK segments. Anchor text should be stored in the "text"
 *  field of the Segment, which can also serve as a fallback.
 */
@interface GTLRCloudSearch_LinkData : GTLRObject

/**
 *  An Attachment represents the structured entity to which we are linking. It
 *  contains an Embed (apps/tacotown/proto/embeds/embed_client.proto) with
 *  fields specific to the appropriate type of linked entity. For example, if we
 *  are linking to a photo album, the Embed may include the album ID and gaia ID
 *  of the creator. Clients that understand the Embed type within the Attachment
 *  may construct and/or decorate their link appropriately e.g. to make use of
 *  type-specific functionality or first-party integrations. The link_target and
 *  (if appropriate) display_url fields must still be set even when an
 *  Attachment is present, so that clients who do not know how to interpret the
 *  Attachment can fall back to those fields, and render the Segment as an
 *  ordinary web link. N.B. Even when an Attachment is present, the intention of
 *  a "LINK" Segment is for the Segment to be presented inline with the rest of
 *  the text of a post or comment, with a clickable link or other UI suitable
 *  for inlining (though the client may modify the UI based on Attachment data,
 *  e.g. to add appropriate hovers, icons, etc.). When an entity is intended to
 *  be rendered separately from the main body of the post/comment, a separate
 *  Attachment proto can be added outside the set of Segments. N.B. Within the
 *  Attachment, fields of EmbedClientItem have their own visibility annotations,
 *  which should be enforced separately from Segment visibility annotations.
 *  See: apps/tacotown/proto/embeds/embed_annotations.proto
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SocialCommonAttachmentAttachment *attachment;

/**
 *  The hint to use when rendering the associated attachment. Ignored if there
 *  is no associated attachment.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_LinkData_AttachmentRenderHint_AttachmentRenderHintAfter
 *        Render any associated attachment at the end of the block, after all
 *        sibling Segments. Leave the link in place in the text and render it
 *        normally as well. (Value: "ATTACHMENT_RENDER_HINT_AFTER")
 *    @arg @c kGTLRCloudSearch_LinkData_AttachmentRenderHint_AttachmentRenderHintInterleaved
 *        Render any associated attachment inline in the text in place of the
 *        link text, forcing a line break before and after the attachment so the
 *        text and the attachment are "interleaved". If this is not possible,
 *        render as if AFTER. (Value: "ATTACHMENT_RENDER_HINT_INTERLEAVED")
 *    @arg @c kGTLRCloudSearch_LinkData_AttachmentRenderHint_AttachmentRenderHintUnknown
 *        No rendering hint; should not be used (equivalent to having no hint)
 *        (Value: "ATTACHMENT_RENDER_HINT_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *attachmentRenderHint;

/**
 *  If we wish to show the user a different (e.g. shortened) version of the URL
 *  for display purposes, then that version should be set here. If this field
 *  isn't set, link_target will be used for both purposes.
 */
@property(nonatomic, copy, nullable) NSString *displayUrl;

/**
 *  link_target is the URL to navigate to when clicked. This could be the
 *  original URL, or a URL signed by the GWS URL signing service.
 */
@property(nonatomic, copy, nullable) NSString *linkTarget;

/**
 *  LinkType is an optional field that provides additional information regarding
 *  link target. For example, link type can be identified as the SELF_LINK when
 *  the request was executed from the same link as the link target.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_LinkData_LinkType_SelfLink This indicates that
 *        the link target points to the same object related to this segment.
 *        Example: A YouTube link with text="0.07" and link_target:
 *        "https://www.youtube.com/watch?v=leHVmSqd4_w&t=0m07s" points to the
 *        same YouTube video where this segment appears. See
 *        http://go/ignore-badwords-filtering-for-selflink for adding link_type
 *        design document. (Value: "SELF_LINK")
 *    @arg @c kGTLRCloudSearch_LinkData_LinkType_UnknownLinkType No link type
 *        specified. (Value: "UNKNOWN_LINK_TYPE")
 */
@property(nonatomic, copy, nullable) NSString *linkType;

/**
 *  Title is an optional field that provides a short string that describes the
 *  link or its destination. User interfaces often use title as a tooltip or for
 *  accessibility purposes. However, they are of course free to present this
 *  data in any form. This field is plain text.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  GTLRCloudSearch_ListDataSourceResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "sources" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudSearch_ListDataSourceResponse : GTLRCollectionObject

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  sources
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_DataSource *> *sources;

@end


/**
 *  GTLRCloudSearch_ListItemNamesForUnmappedIdentityResponse
 */
@interface GTLRCloudSearch_ListItemNamesForUnmappedIdentityResponse : GTLRObject

@property(nonatomic, strong, nullable) NSArray<NSString *> *itemNames;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRCloudSearch_ListItemsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudSearch_ListItemsResponse : GTLRCollectionObject

/**
 *  items
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Item *> *items;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudSearch_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Operation *> *operations;

@end


/**
 *  List sources response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "sources" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudSearch_ListQuerySourcesResponse : GTLRCollectionObject

@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  sources
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_QuerySource *> *sources;

@end


/**
 *  GTLRCloudSearch_ListSearchApplicationsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "searchApplications" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRCloudSearch_ListSearchApplicationsResponse : GTLRCollectionObject

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  searchApplications
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SearchApplication *> *searchApplications;

@end


/**
 *  GTLRCloudSearch_ListUnmappedIdentitiesResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "unmappedIdentities" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRCloudSearch_ListUnmappedIdentitiesResponse : GTLRCollectionObject

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  unmappedIdentities
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_UnmappedIdentity *> *unmappedIdentities;

@end


/**
 *  Matched range of a snippet [start, end).
 */
@interface GTLRCloudSearch_MatchRange : GTLRObject

/**
 *  End of the match in the snippet.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *end;

/**
 *  Starting position of the match in the snippet.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  An entity from the MDB namespace that is to be interpreted as a group. If
 *  using this for authorization, you should do an exact match of the peer role
 *  against group_name or any of the names in the Chubby expansion of the MDB
 *  group named group_name.
 */
@interface GTLRCloudSearch_MdbGroupProto : GTLRObject

@property(nonatomic, copy, nullable) NSString *groupName;

@end


/**
 *  An entity from the MDB namespace that is to be interpreted as a user. If
 *  using this for authorization, you should only do an exact match on the peer
 *  role against user_name.
 */
@interface GTLRCloudSearch_MdbUserProto : GTLRObject

/**
 *  Do not set this field. Contact credentials-eng\@ if you believe you
 *  absolutely need to use it. This is the \@prod.google.com Gaia ID that
 *  corresponds to the MDB user, see go/authn-merge for details. This field may
 *  always be safely ignored when performing an authorization check.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *gaiaId;

@property(nonatomic, copy, nullable) NSString *userName;

@end


/**
 *  Media resource.
 */
@interface GTLRCloudSearch_Media : GTLRObject

/** Name of the media resource. */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end


/**
 *  A meeting space is a persistent object that is the context for one or more
 *  calls. The meeting space is what makes users find each other when they want
 *  to meet and to find shared resources. With two exceptions, all the fields in
 *  the meeting space resource are visible publicly to any client, even
 *  anonymous users. The exceptions are that * The call_info field is only
 *  visible to clients that have a device (as indicated by the meeting token) in
 *  the JOINED or HIDDEN state. * The meeting_alias field will only be set for
 *  users who are in the same domain as the meeting space. The meeting space
 *  resource (outside call_info) should only contain information necessary to
 *  join a call in the meeting space, and not any other metadata about the
 *  meeting space, such as what organization it belongs to or things related to
 *  ongoing calls.
 */
@interface GTLRCloudSearch_MeetingSpace : GTLRObject

/**
 *  Which number classes are accepted by this meeting at the moment? When there
 *  is no ongoing conference, this field may change independent of the version
 *  number of the MeetingSpace. When a conference starts, this field will be
 *  locked to the value at that time, and then will be unlocked again at the end
 *  of the conference.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *acceptedNumberClass;

/** Broadcast access information for this meeting space. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_BroadcastAccess *broadcastAccess;

/**
 *  Information relevant to an ongoing conference. This field will be set in
 *  responses if the client requesting the meeting space has a device in one of
 *  the JOINED, HIDDEN, or MISSING_PREREQUISITES states. The field will also be
 *  set without a created device if the client requesting the meeting space is
 *  eligible to directly create a device in the JOINED state without knocking,
 *  eg a same-domain joiner. Can also only be updated by clients with a device
 *  in the JOINED state.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_CallInfo *callInfo;

/**
 *  The interop gateway access information for the meeting space. A gateway
 *  access can be used when joining conferences from non-Google equipment
 *  through an interop gateway.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GatewayAccess *gatewayAccess;

/** The SIP based access methods that can be used to join the conference. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_GatewaySipAccess *> *gatewaySipAccess;

/**
 *  An optional alias for the meeting space. The alias can in some cases be
 *  resolved to the meeting space, similar to the meeting code. The limitation
 *  is that the user needs to be in the same meeting domain as the meeting
 *  space.
 */
@property(nonatomic, copy, nullable) NSString *meetingAlias;

/**
 *  A meeting code is a globally unique code which points to a meeting space.
 *  Note: Meeting codes may be regenerated, which will cause old meeting codes
 *  to become invalid.
 */
@property(nonatomic, copy, nullable) NSString *meetingCode;

/**
 *  A unique server-generated ID for the meeting space. This is the resource
 *  name of the meeting space resource and has the form `spaces/`, where is a
 *  sequence of characters in the [base64url
 *  set](https://tools.ietf.org/html/rfc4648#section-5), without any `=`
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *meetingSpaceId;

/** A URL to identify and access the meeting space. Output only. */
@property(nonatomic, copy, nullable) NSString *meetingUrl;

/**
 *  Output only. A URL that clients (e.g. Calendar) can use to show the web page
 *  with all join methods available for this meeting space. This link is also
 *  used in iOS universal links and Android intents, used for opening the "More
 *  ways to join" view in the Meet mobile apps. Example:
 *  https://tel.meet/mee-ting-cod?pin=1234567891011 Here, "pin" is the universal
 *  phone PIN. We include it explicitly to better support the offline case on
 *  the mobile. This is set when the meeting space has either a universal PIN or
 *  an interop PIN and clients who can show a "more ways to join" button should
 *  show it whenever this field is set.
 */
@property(nonatomic, copy, nullable) NSString *moreJoinUrl;

/** All regional phone access methods for this meeting space. Can be empty. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_PhoneAccess *> *phoneAccess;

/** Settings of the meeting space. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Settings *settings;

/** A universal phone access method for this meeting space. Can be unset. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UniversalPhoneAccess *universalPhoneAccess;

@end


/**
 *  GTLRCloudSearch_Member
 */
@interface GTLRCloudSearch_Member : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_Roster *roster;
@property(nonatomic, strong, nullable) GTLRCloudSearch_User *user;

@end


/**
 *  Eventually this can be updated to a oneOf User, Space (for nested spaces),
 *  Bots or Service, as and when these use cases come up.
 */
@interface GTLRCloudSearch_MemberId : GTLRObject

/** Unique, immutable ID of the Roster. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RosterId *rosterId;

/** Unique, immutable ID of the User. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *userId;

@end


/**
 *  Annotation metadata to display system messages for membership changes. Next
 *  Tag: 8
 */
@interface GTLRCloudSearch_MembershipChangedMetadata : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Member *> *affectedMemberProfiles;

/** List of users and rosters whose membership status changed. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_MemberId *> *affectedMembers;

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AffectedMembership *> *affectedMemberships;

/** The user whose action triggered this system message. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *initiator;

/**
 *  Complete member profiles, when ListTopicsRequest FetchOptions.USER is set.
 *  Otherwise, only the id will be filled in.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_User *initiatorProfile;

/**
 *  The type of the user who initiated this membership change.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_MembershipChangedMetadata_InitiatorType_InitiatorTypeAdmin
 *        Value "INITIATOR_TYPE_ADMIN"
 *    @arg @c kGTLRCloudSearch_MembershipChangedMetadata_InitiatorType_InitiatorTypeEndUser
 *        Value "INITIATOR_TYPE_END_USER"
 *    @arg @c kGTLRCloudSearch_MembershipChangedMetadata_InitiatorType_InitiatorTypeUnspecified
 *        Value "INITIATOR_TYPE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *initiatorType;

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_MembershipChangedMetadata_Type_Added Non-member
 *        -> Member. Multiple users. (Value: "ADDED")
 *    @arg @c kGTLRCloudSearch_MembershipChangedMetadata_Type_BotAdded Bot added
 *        to the room. (Value: "BOT_ADDED")
 *    @arg @c kGTLRCloudSearch_MembershipChangedMetadata_Type_BotRemoved Bot
 *        removed from the room. (Value: "BOT_REMOVED")
 *    @arg @c kGTLRCloudSearch_MembershipChangedMetadata_Type_Invited Non-member
 *        -> Can join. Multiple groups and users. (Value: "INVITED")
 *    @arg @c kGTLRCloudSearch_MembershipChangedMetadata_Type_Joined Can join ->
 *        Member. One user. (Value: "JOINED")
 *    @arg @c kGTLRCloudSearch_MembershipChangedMetadata_Type_KickedDueToOtrConflict
 *        This signifies the user is kicked because the user's OTR policy is
 *        conflicted with the room history settings. Joined -> Non-member. One
 *        user. (Value: "KICKED_DUE_TO_OTR_CONFLICT")
 *    @arg @c kGTLRCloudSearch_MembershipChangedMetadata_Type_Left Member -> Can
 *        join. One user. (Value: "LEFT")
 *    @arg @c kGTLRCloudSearch_MembershipChangedMetadata_Type_Removed Can join
 *        -> Non-member. One group or user. (Value: "REMOVED")
 *    @arg @c kGTLRCloudSearch_MembershipChangedMetadata_Type_RoleTargetAudienceUpdated
 *        The room is now joinable by an (Value: "ROLE_TARGET_AUDIENCE_UPDATED")
 *    @arg @c kGTLRCloudSearch_MembershipChangedMetadata_Type_RoleUpdated
 *        MembershipRole changed. Multiple users. (Value: "ROLE_UPDATED")
 *    @arg @c kGTLRCloudSearch_MembershipChangedMetadata_Type_TypeUnspecified
 *        Default value for the enum. DO NOT USE. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRCloudSearch_MembershipChangeEvent
 */
@interface GTLRCloudSearch_MembershipChangeEvent : GTLRObject

/**
 *  This should only be set when MembershipChange type is LEAVE.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_MembershipChangeEvent_LeaveReason_ForceHistoryPolicyChange
 *        Value "FORCE_HISTORY_POLICY_CHANGE"
 *    @arg @c kGTLRCloudSearch_MembershipChangeEvent_LeaveReason_LeaveReasonUnknown
 *        Value "LEAVE_REASON_UNKNOWN"
 *    @arg @c kGTLRCloudSearch_MembershipChangeEvent_LeaveReason_UserInitiated
 *        Value "USER_INITIATED"
 */
@property(nonatomic, copy, nullable) NSString *leaveReason;

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_StoredParticipantId *> *participantId;

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_MembershipChangeEvent_Type_Join Value "JOIN"
 *    @arg @c kGTLRCloudSearch_MembershipChangeEvent_Type_Leave Value "LEAVE"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  This is deprecated and please use SelectionControl by setting type to
 *  DROPDOWN.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRCloudSearch_Menu : GTLRCollectionObject

/**
 *  items
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_MenuItem *> *items;

/** Label used to be displayed ahead of the menu. It is optional. */
@property(nonatomic, copy, nullable) NSString *label;

/** The name of the text field which is will be used in FormInput. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If specified, form is submitted when selection changed. If not specified,
 *  developer will need to specify a separate button.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_FormAction *onChange;

@end


/**
 *  GTLRCloudSearch_MenuItem
 */
@interface GTLRCloudSearch_MenuItem : GTLRObject

/**
 *  selected
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *selected;

/** The text to be displayed. */
@property(nonatomic, copy, nullable) NSString *text;

/**
 *  The value associated with this item which will be sent back to app scripts.
 *  Client should use as a form input value.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Message posted to a Space.
 */
@interface GTLRCloudSearch_Message : GTLRObject

/** Annotations parsed and extracted from the text body. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Annotation *> *annotations;

/**
 *  Custom display profile info for apps. Leave the field empty for real users.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedAppProfile *appProfile;

/** Attachments parsed from incoming webhooks */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Attachment *> *attachments;

/**
 *  Lightweight message attributes which values are calculated and set in the
 *  servers.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_MessageAttributes *attributes;

/** Responses from bots indicating if extra auth/config is needed. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_BotResponse *> *botResponses;

/**
 *  Communal labels associated with a message. These exist on the message itself
 *  regardless of which user fetches them. Order of entries is arbitrary and
 *  will not list duplicates of the same label_id. See go/chat-labels-design for
 *  details.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_CommunalLabelTag *> *communalLabels;

@property(nonatomic, strong, nullable) GTLRCloudSearch_ContentReportSummary *contentReportSummary;

/**
 *  Time when the Message was posted in microseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *createTime;

/**
 *  ID of the User who posted the Message. This includes information to identify
 *  if this was posted by an App on behalf of a user.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *creatorId;

/**
 *  Indicates who can delete the message. This field is set on the read path
 *  (e.g. ListTopics) but doesn’t have any effect on the write path (e.g.
 *  CreateMessageRequest).
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Message_DeletableBy_PermissionCreator Only the
 *        creator of an entity can mutate it. (Value: "PERMISSION_CREATOR")
 *    @arg @c kGTLRCloudSearch_Message_DeletableBy_PermissionMember Every human
 *        member of a space or the creator can mutate the entity. (Value:
 *        "PERMISSION_MEMBER")
 *    @arg @c kGTLRCloudSearch_Message_DeletableBy_PermissionNoOne No one can
 *        mutate the entity. (Value: "PERMISSION_NO_ONE")
 *    @arg @c kGTLRCloudSearch_Message_DeletableBy_PermissionUnspecified Default
 *        case, should never be used. If this data is encountered in the DB any
 *        request should throw an exception. (Value: "PERMISSION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *deletableBy;

/**
 *  Was this message deleted by Vault (Only used for Vault support) This is
 *  false if message is live or message was deleted by user.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deletedByVault;

/**
 *  Time when the Message was deleted in microseconds. This field is set to
 *  nonzero value only for Messages deleted globally.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleteTime;

/**
 *  Time when the Message was per-user deleted by the message requester in
 *  microseconds. This field is set to nonzero value only for Message per-user
 *  deleted by the requester.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleteTimeForRequester;

/**
 *  Data Loss Prevention scan information for this message. Messages are
 *  evaluated in the backend on create message/topic and edit message actions.
 *  DEPRECATED: use dlp_scan_summary instead.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanFailureAllRulesFailed
 *        Rule fetch completed and evaluation were attempted, but all of the
 *        rules failed to be evaluated. (Value: "SCAN_FAILURE_ALL_RULES_FAILED")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanFailureException Rule
 *        fetch and evaluation were attempted but an exception occurred. (Value:
 *        "SCAN_FAILURE_EXCEPTION")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanFailureIllegalStateForAttachments
 *        An IllegalStateException is thrown when executing DLP on attachments.
 *        This could happen if the space row is missing. (Value:
 *        "SCAN_FAILURE_ILLEGAL_STATE_FOR_ATTACHMENTS")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanFailureTimeout Rule
 *        fetch and evaluation were attempted but the scanning timed out.
 *        (Value: "SCAN_FAILURE_TIMEOUT")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanRuleEvaluationSkippedChangelingEmptyResponse
 *        Rule fetch happened, but rule evaluation is skipped because Changeling
 *        returned an empty response while converting the attachment to text.
 *        (Value: "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_EMPTY_RESPONSE")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanRuleEvaluationSkippedChangelingPermanentError
 *        Rule fetch happened, but rule evaluation is skipped because Changeling
 *        returned permanent failure while converting the attachment to text.
 *        (Value: "SCAN_RULE_EVALUATION_SKIPPED_CHANGELING_PERMANENT_ERROR")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanRuleEvaluationSkippedNoApplicableRulesForActionParams
 *        Rule fetch happened, but rule evaluation is skipped because none of
 *        the rules are applicable to the given action params. (Value:
 *        "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_ACTION_PARAMS")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanRuleEvaluationSkippedNoApplicableRulesForTrigger
 *        Rule fetch happened, but rule evaluation is skipped because none of
 *        the rules are applicable to the given trigger. (Value:
 *        "SCAN_RULE_EVALUATION_SKIPPED_NO_APPLICABLE_RULES_FOR_TRIGGER")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanRuleEvaluationSkippedNoRulesFound
 *        Rule fetch happened, but rule evaluation is skipped because no rules
 *        were found. (Value: "SCAN_RULE_EVALUATION_SKIPPED_NO_RULES_FOUND")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanSkippedConsumer Rule
 *        fetch and evaluation are skipped because the user sending message is
 *        consumer. (Value: "SCAN_SKIPPED_CONSUMER")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanSkippedExperimentDisabled
 *        Rule fetch and evaluation is skipped because DLP is not enabled for
 *        the user. (Value: "SCAN_SKIPPED_EXPERIMENT_DISABLED")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanSkippedMessageFromUnsupportedOrigin
 *        Scanning was skipped because the message originated from Interop or
 *        Babel. (Value: "SCAN_SKIPPED_MESSAGE_FROM_UNSUPPORTED_ORIGIN")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanSkippedNoMessage Rule
 *        fetch and evaluation are skipped because there is no message to scan.
 *        Deprecated: this should not happen since there must be message or
 *        attachment for DLP scan. (Value: "SCAN_SKIPPED_NO_MESSAGE")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanSkippedNonHumanUser
 *        Rule fetch and evaluation are skipped because the user sending message
 *        is a non-human user (i.e. a bot). (Value:
 *        "SCAN_SKIPPED_NON_HUMAN_USER")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanSkippedUserAcknowledgedWarning
 *        Rule fetch and evaluation are skipped because the user has
 *        acknowledged the warning on the message that triggered the Warn
 *        violation and sent the message anyway. (Value:
 *        "SCAN_SKIPPED_USER_ACKNOWLEDGED_WARNING")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanSucceededAuditOnly
 *        Violation is detected and will be logged to BIP (no user-facing action
 *        performed). (Value: "SCAN_SUCCEEDED_AUDIT_ONLY")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanSucceededBlock
 *        Violation is detected. The message/attachment will be blocked (or
 *        deleted if this happens in failure recovery), the user will be warned,
 *        and the violation will be logged to BIP. (Value:
 *        "SCAN_SUCCEEDED_BLOCK")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanSucceededNoViolation
 *        This means no violation is detected on the given message/attachment.
 *        (Value: "SCAN_SUCCEEDED_NO_VIOLATION")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanSucceededWarn
 *        Violation is detected. The user will be warned, and the violation will
 *        be logged to BIP. (Value: "SCAN_SUCCEEDED_WARN")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanSucceededWithFailuresAuditOnly
 *        Rules were fetched but some evaluations failed. An audit-only
 *        violation was found in the rules that were successfully evaluated. The
 *        violation will be logged to BIP (no user-facing action performed).
 *        (Value: "SCAN_SUCCEEDED_WITH_FAILURES_AUDIT_ONLY")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanSucceededWithFailuresBlock
 *        Rules were fetched but some evaluations failed. A blocking violation
 *        was found in the rules that were successfully evaluated. The
 *        message/attachment will be blocked, the user will be notified, and the
 *        violation will be logged to BIP. A blocking violation takes precedence
 *        over all other violation types. (Value:
 *        "SCAN_SUCCEEDED_WITH_FAILURES_BLOCK")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanSucceededWithFailuresNoViolation
 *        Rules were fetched but some evaluations failed. No violation was found
 *        in the rules that were successfully evaluated. (Value:
 *        "SCAN_SUCCEEDED_WITH_FAILURES_NO_VIOLATION")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanSucceededWithFailuresWarn
 *        Rules were fetched but some evaluations failed. A warn violation was
 *        found in the rules that were successfully evaluated. The user will be
 *        warned, and the violation will be logged to BIP. (Value:
 *        "SCAN_SUCCEEDED_WITH_FAILURES_WARN")
 *    @arg @c kGTLRCloudSearch_Message_DlpScanOutcome_ScanUnknownOutcome Value
 *        "SCAN_UNKNOWN_OUTCOME"
 */
@property(nonatomic, copy, nullable) NSString *dlpScanOutcome;

/**
 *  Data Loss Prevention scan information for this message. Messages are
 *  evaluated in the backend on create message/topic and edit message actions.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DlpScanSummary *dlpScanSummary;

/**
 *  Indicates who can edit the message. This field is set on the read path (e.g.
 *  ListTopics) but doesn’t have any effect on the write path (e.g.
 *  CreateMessageRequest).
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Message_EditableBy_PermissionCreator Only the
 *        creator of an entity can mutate it. (Value: "PERMISSION_CREATOR")
 *    @arg @c kGTLRCloudSearch_Message_EditableBy_PermissionMember Every human
 *        member of a space or the creator can mutate the entity. (Value:
 *        "PERMISSION_MEMBER")
 *    @arg @c kGTLRCloudSearch_Message_EditableBy_PermissionNoOne No one can
 *        mutate the entity. (Value: "PERMISSION_NO_ONE")
 *    @arg @c kGTLRCloudSearch_Message_EditableBy_PermissionUnspecified Default
 *        case, should never be used. If this data is encountered in the DB any
 *        request should throw an exception. (Value: "PERMISSION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *editableBy;

/**
 *  A plain-text description of the attachment, used when clients cannot display
 *  formatted attachment (e.g. mobile push notifications).
 */
@property(nonatomic, copy, nullable) NSString *fallbackText;

/**
 *  ID of the resource.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_MessageId *identifier;

/**
 *  Whether the message is content purged. Content purged messages contain only
 *  data required for tombstone (see go/chat-infinite-tombstone). This field is
 *  only used by Vault to display tombstone and should only be set to true if
 *  the message is a tombstone.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isContentPurged;

/**
 *  Output only. Indicates if the message is an inline reply. Set to true only
 *  if the message's ParentPath is non-NULL. Currently, only inline replies have
 *  non-NULL ParentPath. See go/chat-be-inline-reply-indicator.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isInlineReply;

/**
 *  If the message was edited by a user, timestamp of the last edit, in
 *  microseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastEditTime;

/**
 *  Time when the Message text was last updated in microseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastUpdateTime;

/** A unique id specified on the client side. */
@property(nonatomic, copy, nullable) NSString *localId;

/**
 *  An optional payload (restricted to 1P applications) that will be stored with
 *  this message. This can only be set by the 1P API and should be used to
 *  deliver additional data such a 1P sync version, 1P entity ID to the client
 *  for more advanced functionality [Eg. inform Group Tasks tab of new version
 *  while linking, fetch & render a live Task/Meet call tile].
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedMessageIntegrationPayload *messageIntegrationPayload;

/**
 *  Where the message was posted from
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Message_MessageOrigin_OriginBabel The message
 *        came directly from Babel as source-of-truth (Value: "ORIGIN_BABEL")
 *    @arg @c kGTLRCloudSearch_Message_MessageOrigin_OriginBabelDualWrite The
 *        message came directly from Babel during dual-write (Value:
 *        "ORIGIN_BABEL_DUAL_WRITE")
 *    @arg @c kGTLRCloudSearch_Message_MessageOrigin_OriginBabelDualWriteRetry
 *        The message came directly from Babel Manifold queue during dual write
 *        (Value: "ORIGIN_BABEL_DUAL_WRITE_RETRY")
 *    @arg @c kGTLRCloudSearch_Message_MessageOrigin_OriginBabelInteropLive The
 *        message is from Babel (Hangouts Classic) interop. (Value:
 *        "ORIGIN_BABEL_INTEROP_LIVE")
 *    @arg @c kGTLRCloudSearch_Message_MessageOrigin_OriginBabelInteropRetry The
 *        message is from Babel interop retries from Manifold queue. (Value:
 *        "ORIGIN_BABEL_INTEROP_RETRY")
 *    @arg @c kGTLRCloudSearch_Message_MessageOrigin_OriginBackfillFromGmailArchive
 *        Value "ORIGIN_BACKFILL_FROM_GMAIL_ARCHIVE"
 *    @arg @c kGTLRCloudSearch_Message_MessageOrigin_OriginBackfillFromPapyrus
 *        The message was backfilled by go/dinnertrain as part of
 *        go/storage-consolidation. The backfill origin corresponds to the
 *        BackfillState in which the message was created. (Value:
 *        "ORIGIN_BACKFILL_FROM_PAPYRUS")
 *    @arg @c kGTLRCloudSearch_Message_MessageOrigin_OriginDynamite Value
 *        "ORIGIN_DYNAMITE"
 *    @arg @c kGTLRCloudSearch_Message_MessageOrigin_OriginNotSet Value
 *        "ORIGIN_NOT_SET"
 */
@property(nonatomic, copy, nullable) NSString *messageOrigin;

/**
 *  State of the message, indicating whether the message is visible to all
 *  members in the group or is only visible to the sender only, or the
 *  private_message_viewer if it is set.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Message_MessageState_Private Private state - only
 *        visible to the message creator, and the private_message_viewer if set.
 *        (Value: "PRIVATE")
 *    @arg @c kGTLRCloudSearch_Message_MessageState_Public Default - visible to
 *        the room / DM. (Value: "PUBLIC")
 */
@property(nonatomic, copy, nullable) NSString *messageState;

/**
 *  Indicates if this message contains any suggestions that were provided by any
 *  Apps.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedOriginAppSuggestion *> *originAppSuggestions;

/**
 *  Personal labels associated with a message for the viewing user. Order of
 *  entries is arbitrary and will not list duplicates of the same label_id. See
 *  go/chat-labels-design for details. NOTE: This will be unpopulated in the
 *  case of SpaceChangelog events.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_PersonalLabelTag *> *personalLabels;

/**
 *  A list of per-user private information. This is deprecated, because we no
 *  longer plan to support partially private messages or private messages for
 *  multiple users. The message_state and private_message_viewer fields should
 *  be sufficient for this infrastructure.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_PrivateMessageInfo *> *privateMessageInfos;

/**
 *  Should only be set if the Message State is PRIVATE. If set, the message
 *  content is only visible to this user (and any apps associated with the
 *  message), as well as the message creator. If unset, a private message is
 *  visible to the message creator only.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *privateMessageViewer;

/**
 *  Contains additional (currently Hangouts Classic only) properties applicable
 *  to this message.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_MessageProps *props;

/**
 *  Output only. Whether this message has been quoted by another message or not.
 *  Used by clients to handle message edit flows for messages that have been
 *  quoted.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Message_QuotedByState_QuotedByStateHasBeenQuoted
 *        State to indicate that this message is quoted by another message
 *        (excluding purged message). (Value: "QUOTED_BY_STATE_HAS_BEEN_QUOTED")
 *    @arg @c kGTLRCloudSearch_Message_QuotedByState_QuotedByStateHasNotBeenQuoted
 *        State to indicate that this message are not quoted by another message.
 *        (Value: "QUOTED_BY_STATE_HAS_NOT_BEEN_QUOTED")
 *    @arg @c kGTLRCloudSearch_Message_QuotedByState_QuotedByStateUnspecified
 *        Unspecified state for QuotedByState. (Value:
 *        "QUOTED_BY_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *quotedByState;

/** Output only. Metadata for a message that is quoted by this message. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_QuotedMessageMetadata *quotedMessageMetadata;

/**
 *  A list of user reactions to this message. Ordered by the timestamp of the
 *  first reaction, ascending (oldest to newest).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedReaction *> *reactions;

/**
 *  Output only. Details of content reports. Set only when the request asks for
 *  it.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ContentReport *> *reports;

/** The retention settings of the message. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedRetentionSettings *retentionSettings;

/**
 *  A client-specified string that can be used to uniquely identify a message in
 *  a space, in lieu of `id.message_id`.
 */
@property(nonatomic, copy, nullable) NSString *secondaryMessageKey;

/** Plaintext body of the Message. */
@property(nonatomic, copy, nullable) NSString *textBody;

/** Information for the stoning of a Message. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_TombstoneMetadata *tombstoneMetadata;

/**
 *  ID of the User who last updated (created/edited/deleted) the Message. This
 *  includes information to identify if this was updated by an App on behalf of
 *  a user.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *updaterId;

/**
 *  UploadMetadata b/36864213 is an ongoing effort to move UploadMetadata out of
 *  annotations field and save it to upload_metadata field only. After the
 *  migration, UploadMetadata will only be saved in this field.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_UploadMetadata *> *uploadMetadata;

@end


/**
 *  Stores tombstone message attributes:
 *  go/tombstone-message-attributes-overview
 */
@interface GTLRCloudSearch_MessageAttributes : GTLRObject

/**
 *  If true: message is a tombstone in the client. Default false.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isTombstone;

@end


/**
 *  Primary key for Message resource.
 */
@interface GTLRCloudSearch_MessageId : GTLRObject

/**
 *  Opaque, server-assigned ID of the Message. While this ID is guaranteed to be
 *  unique within the Space, it's not guaranteed to be globally unique.
 */
@property(nonatomic, copy, nullable) NSString *messageId;

/** ID of the Message's immediate parent. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_MessageParentId *parentId;

@end


/**
 *  GTLRCloudSearch_MessageInfo
 */
@interface GTLRCloudSearch_MessageInfo : GTLRObject

/** The content of a matching message. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Message *message;

/**
 *  Searcher's membership state in the space where the message is posted.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_MessageInfo_SearcherMembershipState_MemberFailed
 *        This state should never be stored in Spanner. It is a state for
 *        responses to the clients to indicate that membership mutations have
 *        failed and the member is in its previous state. (Value:
 *        "MEMBER_FAILED")
 *    @arg @c kGTLRCloudSearch_MessageInfo_SearcherMembershipState_MemberInvited
 *        An invitation to the space has been sent (Value: "MEMBER_INVITED")
 *    @arg @c kGTLRCloudSearch_MessageInfo_SearcherMembershipState_MemberJoined
 *        User has joined the space (Value: "MEMBER_JOINED")
 *    @arg @c kGTLRCloudSearch_MessageInfo_SearcherMembershipState_MemberNotAMember
 *        User is not a member (Value: "MEMBER_NOT_A_MEMBER")
 *    @arg @c kGTLRCloudSearch_MessageInfo_SearcherMembershipState_MemberUnknown
 *        Default state, do not use (Value: "MEMBER_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *searcherMembershipState;

@end


/**
 *  Primary key identifying Message resource's immediate parent. For top-level
 *  Messages, either topic_id or chat_id is populated. For replies, message_id
 *  is populated with the topic Message's ID.
 */
@interface GTLRCloudSearch_MessageParentId : GTLRObject

/** ID of the Topic this Message is posted to. NEXT TAG : 5 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_TopicId *topicId;

@end


/**
 *  Container for storing properties applicable to messages. For now (until
 *  storage consolidation is complete), it will only be used for babel props. In
 *  the future it could be used to house Dynamite properties for
 *  experimenting/rapid prototyping.
 */
@interface GTLRCloudSearch_MessageProps : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_BabelMessageProps *babelProps;

@end


/**
 *  Metadata of a matched search result.
 */
@interface GTLRCloudSearch_Metadata : GTLRObject

/** The creation time for this document or object in the search result. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Options that specify how to display a structured data search result. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ResultDisplayMetadata *displayOptions;

/**
 *  Indexed fields in structured data, returned as a generic named property.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_NamedProperty *> *fields;

/** Mime type of the search result. */
@property(nonatomic, copy, nullable) NSString *mimeType;

/** Object type of the search result. */
@property(nonatomic, copy, nullable) NSString *objectType;

/** Owner (usually creator) of the document or object of the search result. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Person *owner;

/** The named source for the result, such as Gmail. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Source *source;

/** The thumbnail URL of the result. */
@property(nonatomic, copy, nullable) NSString *thumbnailUrl;

/**
 *  The last modified date for the object in the search result. If not set in
 *  the item, the value returned here is empty. When `updateTime` is used for
 *  calculating freshness and is not set, this value defaults to 2 years from
 *  the current time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  A metaline is a list of properties that are displayed along with the search
 *  result to provide context.
 */
@interface GTLRCloudSearch_Metaline : GTLRObject

/**
 *  The list of displayed properties for the metaline. The maximum number of
 *  properties is 5.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_DisplayedProperty *> *properties;

@end


/**
 *  A person's name.
 */
@interface GTLRCloudSearch_Name : GTLRObject

/**
 *  The read-only display name formatted according to the locale specified by
 *  the viewer's account or the `Accept-Language` HTTP header.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

@end


/**
 *  A typed name-value pair for structured data. The type of the value should be
 *  the same as the registered type for the `name` property in the object
 *  definition of `objectType`.
 */
@interface GTLRCloudSearch_NamedProperty : GTLRObject

/**
 *  booleanValue
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *booleanValue;

@property(nonatomic, strong, nullable) GTLRCloudSearch_DateValues *dateValues;
@property(nonatomic, strong, nullable) GTLRCloudSearch_DoubleValues *doubleValues;
@property(nonatomic, strong, nullable) GTLRCloudSearch_EnumValues *enumValues;
@property(nonatomic, strong, nullable) GTLRCloudSearch_HtmlValues *htmlValues;
@property(nonatomic, strong, nullable) GTLRCloudSearch_IntegerValues *integerValues;

/**
 *  The name of the property. This name should correspond to the name of the
 *  property that was registered for object definition in the schema. The
 *  maximum allowable length for this property is 256 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

@property(nonatomic, strong, nullable) GTLRCloudSearch_ObjectValues *objectValues;
@property(nonatomic, strong, nullable) GTLRCloudSearch_TextValues *textValues;
@property(nonatomic, strong, nullable) GTLRCloudSearch_TimestampValues *timestampValues;

@end


/**
 *  Represents an OAuth consumer, a/k/a AuthSub target. These principals are
 *  identified by domain name (e.g., example.com). Historically, Dasher domain
 *  GAIA group IDs have been used instead, but that doesn't work:
 *  http://go/tricky-gaia-ids
 */
@interface GTLRCloudSearch_OAuthConsumerProto : GTLRObject

@property(nonatomic, copy, nullable) NSString *domain;

@end


/**
 *  The definition for an object within a data source.
 */
@interface GTLRCloudSearch_ObjectDefinition : GTLRObject

/**
 *  The name for the object, which then defines its type. Item indexing requests
 *  should set the objectType field equal to this value. For example, if *name*
 *  is *Document*, then indexing requests for items of type Document should set
 *  objectType equal to *Document*. Each object definition must be uniquely
 *  named within a schema. The name must start with a letter and can only
 *  contain letters (A-Z, a-z) or numbers (0-9). The maximum length is 256
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The optional object-specific options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ObjectOptions *options;

/**
 *  The property definitions for the object. The maximum number of elements is
 *  1000.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_PropertyDefinition *> *propertyDefinitions;

@end


/**
 *  The display options for an object.
 */
@interface GTLRCloudSearch_ObjectDisplayOptions : GTLRObject

/**
 *  Defines the properties that are displayed in the metalines of the search
 *  results. The property values are displayed in the order given here. If a
 *  property holds multiple values, all of the values are displayed before the
 *  next properties. For this reason, it is a good practice to specify singular
 *  properties before repeated properties in this list. All of the properties
 *  must set is_returnable to true. The maximum number of metalines is 3.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Metaline *> *metalines;

/**
 *  The user friendly label to display in the search result to indicate the type
 *  of the item. This is OPTIONAL; if not provided, an object label isn't
 *  displayed on the context line of the search results. The maximum length is
 *  64 characters.
 */
@property(nonatomic, copy, nullable) NSString *objectDisplayLabel;

@end


/**
 *  The options for an object.
 */
@interface GTLRCloudSearch_ObjectOptions : GTLRObject

/**
 *  The options that determine how the object is displayed in the Cloud Search
 *  results page.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ObjectDisplayOptions *displayOptions;

/** The freshness options for an object. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_FreshnessOptions *freshnessOptions;

/**
 *  Operators that can be used to filter suggestions. For Suggest API, only
 *  operators mentioned here will be honored in the FilterOptions. Only TEXT and
 *  ENUM operators are supported. NOTE: "objecttype", "type" and "mimetype" are
 *  already supported. This property is to configure schema specific operators.
 *  Even though this is an array, only one operator can be specified. This is an
 *  array for future extensibility. Operators mapping to multiple properties
 *  within the same object are not supported. If the operator spans across
 *  different object types, this option has to be set once for each object
 *  definition.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestionFilteringOperators;

@end


/**
 *  The options for object properties.
 */
@interface GTLRCloudSearch_ObjectPropertyOptions : GTLRObject

/**
 *  The properties of the sub-object. These properties represent a nested
 *  object. For example, if this property represents a postal address, the
 *  subobjectProperties might be named *street*, *city*, and *state*. The
 *  maximum number of elements is 1000.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_PropertyDefinition *> *subobjectProperties;

@end


/**
 *  List of object values.
 */
@interface GTLRCloudSearch_ObjectValues : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_StructuredDataObject *> *values;

@end


/**
 *  GTLRCloudSearch_OnClick
 */
@interface GTLRCloudSearch_OnClick : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_FormAction *action;

/**
 *  This can be used as a short form for OpenLink with the default OpenAs and
 *  OnClose. It may be undeprecated if this proves to be handy for developers.
 */
@property(nonatomic, copy, nullable) NSString *link;

@property(nonatomic, strong, nullable) GTLRCloudSearch_OpenLink *openLink;

/**
 *  An add-on triggers this action when the form action needs to open a link.
 *  This differs from the open_link above in that this needs to talk to server
 *  to get the link. Thus some preparation work is required for web client to do
 *  before the open link action response comes back.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_FormAction *openLinkAction;

@end


/**
 *  GTLRCloudSearch_OpenCreatedDraftActionMarkup
 */
@interface GTLRCloudSearch_OpenCreatedDraftActionMarkup : GTLRObject

/** The ID of the newly created draft in the form "r123". */
@property(nonatomic, copy, nullable) NSString *draftId;

/** The server storage ID in hex format, for example,"15e9fa622ce1029d". */
@property(nonatomic, copy, nullable) NSString *draftStorageId;

/**
 *  The ID of the thread containing the newly created draft, for example,
 *  "15e9fa622ce1029d".
 */
@property(nonatomic, copy, nullable) NSString *draftThreadId;

/**
 *  The server permanent ID for the draft's thread. This field isn't set
 *  anywhere, and it's ignored when processing OpenCreatedDraftActionMarkup.
 *  Supply and use draftThreadStorageId instead.
 */
@property(nonatomic, copy, nullable) NSString *draftThreadServerPermId;

@end


/**
 *  GTLRCloudSearch_OpenLink
 */
@interface GTLRCloudSearch_OpenLink : GTLRObject

/**
 *  Next available ID: 5
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_OpenLink_LoadIndicator_None Value "NONE"
 *    @arg @c kGTLRCloudSearch_OpenLink_LoadIndicator_Spinner Value "SPINNER"
 */
@property(nonatomic, copy, nullable) NSString *loadIndicator;

/**
 *  onClose
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_OpenLink_OnClose_Nothing Value "NOTHING"
 *    @arg @c kGTLRCloudSearch_OpenLink_OnClose_ReloadAddOn Value
 *        "RELOAD_ADD_ON"
 */
@property(nonatomic, copy, nullable) NSString *onClose;

/**
 *  openAs
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_OpenLink_OpenAs_FullSize Value "FULL_SIZE"
 *    @arg @c kGTLRCloudSearch_OpenLink_OpenAs_Overlay Value "OVERLAY"
 */
@property(nonatomic, copy, nullable) NSString *openAs;

@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudSearch_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudSearch_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudSearch_Operation_Response : GTLRObject
@end


/**
 *  GTLRCloudSearch_OtrChatMessageEvent
 */
@interface GTLRCloudSearch_OtrChatMessageEvent : GTLRObject

/**
 *  expirationTimestampUsec
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *expirationTimestampUsec;

@property(nonatomic, copy, nullable) NSString *kansasRowId;
@property(nonatomic, copy, nullable) NSString *kansasVersionInfo;

/**
 *  messageOtrStatus
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_OtrChatMessageEvent_MessageOtrStatus_OffTheRecord
 *        The conversation is completely off the record. (Value:
 *        "OFF_THE_RECORD")
 *    @arg @c kGTLRCloudSearch_OtrChatMessageEvent_MessageOtrStatus_OnTheRecord
 *        The conversation is completely on the record. (Value: "ON_THE_RECORD")
 */
@property(nonatomic, copy, nullable) NSString *messageOtrStatus;

@end


/**
 *  GTLRCloudSearch_OtrModificationEvent
 */
@interface GTLRCloudSearch_OtrModificationEvent : GTLRObject

/**
 *  newOtrStatus
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_OtrModificationEvent_NewOtrStatus_OffTheRecord
 *        The conversation is completely off the record. (Value:
 *        "OFF_THE_RECORD")
 *    @arg @c kGTLRCloudSearch_OtrModificationEvent_NewOtrStatus_OnTheRecord The
 *        conversation is completely on the record. (Value: "ON_THE_RECORD")
 */
@property(nonatomic, copy, nullable) NSString *newOtrStatus NS_RETURNS_NOT_RETAINED;

/**
 *  newOtrToggle
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_OtrModificationEvent_NewOtrToggle_Disabled The
 *        conversation cannot be toggled (Value: "DISABLED")
 *    @arg @c kGTLRCloudSearch_OtrModificationEvent_NewOtrToggle_Enabled The
 *        conversation can be toggled (Value: "ENABLED")
 */
@property(nonatomic, copy, nullable) NSString *newOtrToggle NS_RETURNS_NOT_RETAINED;

/**
 *  oldOtrStatus
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_OtrModificationEvent_OldOtrStatus_OffTheRecord
 *        The conversation is completely off the record. (Value:
 *        "OFF_THE_RECORD")
 *    @arg @c kGTLRCloudSearch_OtrModificationEvent_OldOtrStatus_OnTheRecord The
 *        conversation is completely on the record. (Value: "ON_THE_RECORD")
 */
@property(nonatomic, copy, nullable) NSString *oldOtrStatus;

/**
 *  oldOtrToggle
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_OtrModificationEvent_OldOtrToggle_Disabled The
 *        conversation cannot be toggled (Value: "DISABLED")
 *    @arg @c kGTLRCloudSearch_OtrModificationEvent_OldOtrToggle_Enabled The
 *        conversation can be toggled (Value: "ENABLED")
 */
@property(nonatomic, copy, nullable) NSString *oldOtrToggle;

@end


/**
 *  Developers register a client in Google API Console to get the deep-linking
 *  feature on Google+ posts or frames about their apps. The client data is
 *  stored in this proto.
 */
@interface GTLRCloudSearch_PackagingServiceClient : GTLRObject

/** Android app's package name to generate the deep-link URI. */
@property(nonatomic, copy, nullable) NSString *androidPackageName;

/**
 *  iOS app's App Store ID to generate the App Store URL when app is not
 *  installed on device.
 */
@property(nonatomic, copy, nullable) NSString *iosAppStoreId;

/** iOS app's bundle ID to generate the deep-link URI. */
@property(nonatomic, copy, nullable) NSString *iosBundleId;

/**
 *  Type of Google API Console client.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_PackagingServiceClient_Type_Android Client for
 *        Android app. (Value: "ANDROID")
 *    @arg @c kGTLRCloudSearch_PackagingServiceClient_Type_Ios Client for iOS
 *        app. (Value: "IOS")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Information provided to clients so that they can show upgrade promos and
 *  warnings on call ending early (for non-paying users).
 */
@interface GTLRCloudSearch_PaygateInfo : GTLRObject

/** Time when client should show message that the call is ending soon. */
@property(nonatomic, strong, nullable) GTLRDateTime *callEndingSoonWarningTime;

/**
 *  Time when the call will end if the user does not upgrade (after in-call
 *  upgrade support check has been implemented).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *callEndingTime;

/**
 *  This boolean is used by clients to decide whether the user should be shown
 *  promos to upgrade.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *showUpgradePromos;

@end


/**
 *  This field contains information about the person being suggested.
 */
@interface GTLRCloudSearch_PeopleSuggestion : GTLRObject

/**
 *  Suggested person. All fields of the person object might not be populated.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Person *person;

@end


/**
 *  Object to represent a person.
 */
@interface GTLRCloudSearch_Person : GTLRObject

/** The person's email addresses */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_EmailAddress *> *emailAddresses;

/**
 *  The resource name of the person to provide information about. See
 *  [`People.get`](https://developers.google.com/people/api/rest/v1/people/get)
 *  from the Google People API.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Obfuscated ID of a person. */
@property(nonatomic, copy, nullable) NSString *obfuscatedId;

/** The person's name */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Name *> *personNames;

/** The person's phone numbers */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_PhoneNumber *> *phoneNumbers;

/**
 *  A person's read-only photo. A picture shown next to the person's name to
 *  help others recognize the person in search results.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Photo *> *photos;

@end


/**
 *  An individual instance (or "tag") of a label configured as a personal type
 *  that's associated with a message.
 */
@interface GTLRCloudSearch_PersonalLabelTag : GTLRObject

/**
 *  A string ID representing the label. Possible ID values are documented at
 *  go/chat-labels-howto:ids. Examples: "^t" for "Starred", "^nu" for "Nudged".
 */
@property(nonatomic, copy, nullable) NSString *labelId;

@end


/**
 *  Phone access contains information required to dial into a conference using a
 *  regional phone number and a PIN that is specific to that phone number.
 */
@interface GTLRCloudSearch_PhoneAccess : GTLRObject

/**
 *  The phone number to dial for this meeting space in INTERNATIONAL format.
 *  Full phone number with a leading '+' character and whitespace separations.
 */
@property(nonatomic, copy, nullable) NSString *formattedPhoneNumber;

/**
 *  The BCP 47/LDML language code for the language associated with this phone
 *  access. To be parsed by the i18n LanguageCode utility. Examples: "es-419"
 *  for Latin American Spanish, "fr-CA" for Canadian French.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  The phone number to dial for this meeting space in E.164 format. Full phone
 *  number with a leading '+' character.
 */
@property(nonatomic, copy, nullable) NSString *phoneNumber;

/**
 *  The PIN that users must enter after dialing the given number. The PIN
 *  consists of only decimal digits and the length may vary.
 */
@property(nonatomic, copy, nullable) NSString *pin;

/**
 *  The CLDR/ISO 3166 region code for the country associated with this phone
 *  access. To be parsed by the i18n RegionCode utility. Example: "SE" for
 *  Sweden.
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

@end


/**
 *  A person's Phone Number
 */
@interface GTLRCloudSearch_PhoneNumber : GTLRObject

/** The phone number of the person. */
@property(nonatomic, copy, nullable) NSString *phoneNumber;

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_PhoneNumber_Type_Mobile Value "MOBILE"
 *    @arg @c kGTLRCloudSearch_PhoneNumber_Type_Office Value "OFFICE"
 *    @arg @c kGTLRCloudSearch_PhoneNumber_Type_Other Value "OTHER"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A person's photo.
 */
@interface GTLRCloudSearch_Photo : GTLRObject

/** The URL of the photo. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  GTLRCloudSearch_PinnedItemId
 */
@interface GTLRCloudSearch_PinnedItemId : GTLRObject

/** Identifier for a Drive file (e.g. Docs, Sheets, Slides). */
@property(nonatomic, copy, nullable) NSString *driveId;

@end


/**
 *  GTLRCloudSearch_PollItemsRequest
 */
@interface GTLRCloudSearch_PollItemsRequest : GTLRObject

/**
 *  The name of connector making this call. Format:
 *  datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

/**
 *  Maximum number of items to return. The maximum value is 100 and the default
 *  value is 20.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *limit;

/**
 *  Queue name to fetch items from. If unspecified, PollItems will fetch from
 *  'default' queue. The maximum length is 100 characters.
 */
@property(nonatomic, copy, nullable) NSString *queue;

/** Limit the items polled to the ones with these statuses. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *statusCodes;

@end


/**
 *  GTLRCloudSearch_PollItemsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRCloudSearch_PollItemsResponse : GTLRCollectionObject

/**
 *  Set of items from the queue available for connector to process. These items
 *  have the following subset of fields populated: version metadata.hash
 *  structured_data.hash content.hash payload status queue
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Item *> *items;

@end


/**
 *  See
 *  http://s/?fileprint=//depot/google3/security/authentication/postini/auth_token.proto
 */
@interface GTLRCloudSearch_PostiniUserProto : GTLRObject

/**
 *  postiniUserId
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *postiniUserId;

@end


/**
 *  Presenter contains information about which device is currently presenting as
 *  well as which device requested the presenter to be set.
 */
@interface GTLRCloudSearch_Presenter : GTLRObject

/**
 *  The device resource name of the device which requested the current presenter
 *  to be set. This field can not be modified by clients.
 */
@property(nonatomic, copy, nullable) NSString *byDeviceId;

/**
 *  The device resource names of other devices which can control the current
 *  presentation.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *copresenterDeviceIds;

/** The device resource name of the currently presenting device. */
@property(nonatomic, copy, nullable) NSString *presenterDeviceId;

@end


/**
 *  Reference to a user, group, or domain.
 */
@interface GTLRCloudSearch_Principal : GTLRObject

/**
 *  This principal is a group identified using an external identity. The name
 *  field must specify the group resource name with this format:
 *  identitysources/{source_id}/groups/{ID}
 */
@property(nonatomic, copy, nullable) NSString *groupResourceName;

/** This principal is a Google Workspace user, group or domain. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GSuitePrincipal *gsuitePrincipal;

/**
 *  This principal is a user identified using an external identity. The name
 *  field must specify the user resource name with this format:
 *  identitysources/{source_id}/users/{ID}
 */
@property(nonatomic, copy, nullable) NSString *userResourceName;

@end


/**
 *  A Principal represents something to which permissions are assigned, often
 *  but not always a user or group of some kind. It is most appropriate for use
 *  in ACLs and authorization checks. Callers should prefer to use the wrapper
 *  classes in google3/security/credentials/public/principal.h
 *  google3/java/com/google/security/credentials/Principal.java
 *  google3/security/credentials/go/principal.go unless direct proto access is
 *  essential. If you update this protocol buffer, please update the wrapper
 *  classes as well.
 */
@interface GTLRCloudSearch_PrincipalProto : GTLRObject

/** scope = ALL_AUTHENTICATED_USERS */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AllAuthenticatedUsersProto *allAuthenticatedUsers;

/** scope = CAP_TOKEN_HOLDER */
@property(nonatomic, strong, nullable) GTLRCloudSearch_CapTokenHolderProto *capTokenHolder;

/** scope = CHAT */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ChatProto *chat;

/** scope = CIRCLE */
@property(nonatomic, strong, nullable) GTLRCloudSearch_CircleProto *circle;

/** scope = CLOUD_PRINCIPAL */
@property(nonatomic, strong, nullable) GTLRCloudSearch_CloudPrincipalProto *cloudPrincipal;

/** scope = CONTACT_GROUP */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ContactGroupProto *contactGroup;

/** scope = EMAIL_OWNER */
@property(nonatomic, strong, nullable) GTLRCloudSearch_EmailOwnerProto *emailOwner;

/** scope = EVENT */
@property(nonatomic, strong, nullable) GTLRCloudSearch_EventProto *event;

/** scope = GAIA_GROUP */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GaiaGroupProto *gaiaGroup;

/** scope = GAIA_USER */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GaiaUserProto *gaiaUser;

/** scope = HOST */
@property(nonatomic, strong, nullable) GTLRCloudSearch_HostProto *host;

/** scope = LDAP_GROUP */
@property(nonatomic, strong, nullable) GTLRCloudSearch_LdapGroupProto *ldapGroup;

/** scope = LDAP_USER */
@property(nonatomic, strong, nullable) GTLRCloudSearch_LdapUserProto *ldapUser;

/** scope = MDB_GROUP */
@property(nonatomic, strong, nullable) GTLRCloudSearch_MdbGroupProto *mdbGroup;

/** scope = MDB_USER */
@property(nonatomic, strong, nullable) GTLRCloudSearch_MdbUserProto *mdbUser;

/** scope = OAUTH_CONSUMER; */
@property(nonatomic, strong, nullable) GTLRCloudSearch_OAuthConsumerProto *oauthConsumer;

/** scope = POSTINI_USER */
@property(nonatomic, strong, nullable) GTLRCloudSearch_PostiniUserProto *postiniUser;

/** scope = RBAC_ROLE */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RbacRoleProto *rbacRole;

/** scope = RBAC_SUBJECT */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RbacSubjectProto *rbacSubject;

/** scope = RESOURCE_ROLE */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ResourceRoleProto *resourceRole;

/**
 *  This is only optional because required enums cannot be extended. Currently
 *  required.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_AllAuthenticatedUsers Value
 *        "ALL_AUTHENTICATED_USERS"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_CapTokenHolder Value
 *        "CAP_TOKEN_HOLDER"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_Chat Value "CHAT"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_Circle Value "CIRCLE"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_CloudPrincipal next tag: 29
 *        (Value: "CLOUD_PRINCIPAL")
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_ContactGroup Value
 *        "CONTACT_GROUP"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_EmailOwner Value
 *        "EMAIL_OWNER"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_Event Value "EVENT"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_GaiaGroup Value "GAIA_GROUP"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_GaiaUser Value "GAIA_USER"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_Host Value "HOST"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_Invalid Value "INVALID"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_LdapGroup Value "LDAP_GROUP"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_LdapUser Value "LDAP_USER"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_MdbGroup Value "MDB_GROUP"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_MdbUser Value "MDB_USER"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_OauthConsumer Value
 *        "OAUTH_CONSUMER"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_PostiniUser Value
 *        "POSTINI_USER"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_RbacRole Value "RBAC_ROLE"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_RbacSubject Value
 *        "RBAC_SUBJECT"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_ResourceRole Value
 *        "RESOURCE_ROLE"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_SigningKeyPossessor Value
 *        "SIGNING_KEY_POSSESSOR"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_SimpleSecretHolder Value
 *        "SIMPLE_SECRET_HOLDER"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_SocialGraphNode Value
 *        "SOCIAL_GRAPH_NODE"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_Square Value "SQUARE"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_UnusedZwiebackSession Value
 *        "UNUSED_ZWIEBACK_SESSION"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_YoutubeUser Value
 *        "YOUTUBE_USER"
 *    @arg @c kGTLRCloudSearch_PrincipalProto_Scope_ZwiebackSession Value
 *        "ZWIEBACK_SESSION"
 */
@property(nonatomic, copy, nullable) NSString *scope;

/** scope = SIGNING_KEY_POSSESSOR */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SigningKeyPossessorProto *signingKeyPossessor;

/** scope = SIMPLE_SECRET_HOLDER */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SimpleSecretHolderProto *simpleSecretHolder;

/** scope = SOCIAL_GRAPH_NODE */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SocialGraphNodeProto *socialGraphNode;

/** scope = SQUARE */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SquareProto *square;

/** scope = YOUTUBE_USER */
@property(nonatomic, strong, nullable) GTLRCloudSearch_YoutubeUserProto *youtubeUser;

/** scope = ZWIEBACK_SESSION */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ZwiebackSessionProto *zwiebackSession;

@end


/**
 *  Private message information specific to a given user.
 */
@interface GTLRCloudSearch_PrivateMessageInfo : GTLRObject

/** Annotations private to {\@code userId}. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Annotation *> *annotations;

/** Attachments private to {\@code userId}. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Attachment *> *attachments;

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_GoogleChatV1ContextualAddOnMarkup *> *contextualAddOnMarkup;
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_GsuiteIntegrationMetadata *> *gsuiteIntegrationMetadata;

/**
 *  Text private to {\@code user_id}. Initial restriction: Only one of public
 *  text or private text is rendered on the client. So if public text is set,
 *  private text is ignored.
 */
@property(nonatomic, copy, nullable) NSString *text;

/** Required. The elements in this struct are visible to this user. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *userId;

@end


/**
 *  GTLRCloudSearch_ProcessingError
 */
@interface GTLRCloudSearch_ProcessingError : GTLRObject

/**
 *  Error code indicating the nature of the error.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_ProcessingError_Code_AclCycle ACL inheritance
 *        graph formed a cycle. (Value: "ACL_CYCLE")
 *    @arg @c kGTLRCloudSearch_ProcessingError_Code_IndirectBrokenAcl Items with
 *        incomplete ACL information due to inheriting other items with broken
 *        ACL or having groups with unmapped descendants. (Value:
 *        "INDIRECT_BROKEN_ACL")
 *    @arg @c kGTLRCloudSearch_ProcessingError_Code_MalformedRequest Item's ACL,
 *        metadata, or content is malformed or in invalid state. FieldViolations
 *        contains more details on where the problem is. (Value:
 *        "MALFORMED_REQUEST")
 *    @arg @c kGTLRCloudSearch_ProcessingError_Code_ProcessingErrorCodeUnspecified
 *        Input only value. Use this value in Items. (Value:
 *        "PROCESSING_ERROR_CODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_ProcessingError_Code_UnsupportedContentFormat
 *        Countent format is unsupported. (Value: "UNSUPPORTED_CONTENT_FORMAT")
 */
@property(nonatomic, copy, nullable) NSString *code;

/** The description of the error. */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/**
 *  In case the item fields are invalid, this field contains the details about
 *  the validation errors.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_FieldViolation *> *fieldViolations;

@end


/**
 *  The definition of a property within an object.
 */
@interface GTLRCloudSearch_PropertyDefinition : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_BooleanPropertyOptions *booleanPropertyOptions;
@property(nonatomic, strong, nullable) GTLRCloudSearch_DatePropertyOptions *datePropertyOptions;

/**
 *  The options that determine how the property is displayed in the Cloud Search
 *  results page if it's specified to be displayed in the object's display
 *  options.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_PropertyDisplayOptions *displayOptions;

@property(nonatomic, strong, nullable) GTLRCloudSearch_DoublePropertyOptions *doublePropertyOptions;
@property(nonatomic, strong, nullable) GTLRCloudSearch_EnumPropertyOptions *enumPropertyOptions;
@property(nonatomic, strong, nullable) GTLRCloudSearch_HtmlPropertyOptions *htmlPropertyOptions;
@property(nonatomic, strong, nullable) GTLRCloudSearch_IntegerPropertyOptions *integerPropertyOptions;

/**
 *  Indicates that the property can be used for generating facets. Cannot be
 *  true for properties whose type is object. IsReturnable must be true to set
 *  this option. Only supported for boolean, enum, and text properties.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isFacetable;

/**
 *  Indicates that multiple values are allowed for the property. For example, a
 *  document only has one description but can have multiple comments. Cannot be
 *  true for properties whose type is a boolean. If set to false, properties
 *  that contain more than one value cause the indexing request for that item to
 *  be rejected.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isRepeatable;

/**
 *  Indicates that the property identifies data that should be returned in
 *  search results via the Query API. If set to *true*, indicates that Query API
 *  users can use matching property fields in results. However, storing fields
 *  requires more space allocation and uses more bandwidth for search queries,
 *  which impacts performance over large datasets. Set to *true* here only if
 *  the field is needed for search results. Cannot be true for properties whose
 *  type is an object.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isReturnable;

/**
 *  Indicates that the property can be used for sorting. Cannot be true for
 *  properties that are repeatable. Cannot be true for properties whose type is
 *  object. IsReturnable must be true to set this option. Only supported for
 *  boolean, date, double, integer, and timestamp properties.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isSortable;

/**
 *  Indicates that the property can be used for generating query suggestions.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isSuggestable;

/**
 *  Indicates that users can perform wildcard search for this property. Only
 *  supported for Text properties. IsReturnable must be true to set this option.
 *  In a given datasource maximum of 5 properties can be marked as
 *  is_wildcard_searchable. For more details, see [Define object
 *  properties](https://developers.google.com/cloud-search/docs/guides/schema-guide#properties)
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isWildcardSearchable;

/**
 *  The name of the property. Item indexing requests sent to the Indexing API
 *  should set the property name equal to this value. For example, if name is
 *  *subject_line*, then indexing requests for document items with subject
 *  fields should set the name for that field equal to *subject_line*. Use the
 *  name as the identifier for the object property. Once registered as a
 *  property for an object, you cannot re-use this name for another property
 *  within that object. The name must start with a letter and can only contain
 *  letters (A-Z, a-z) or numbers (0-9). The maximum length is 256 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

@property(nonatomic, strong, nullable) GTLRCloudSearch_ObjectPropertyOptions *objectPropertyOptions;
@property(nonatomic, strong, nullable) GTLRCloudSearch_TextPropertyOptions *textPropertyOptions;
@property(nonatomic, strong, nullable) GTLRCloudSearch_TimestampPropertyOptions *timestampPropertyOptions;

@end


/**
 *  The display options for a property.
 */
@interface GTLRCloudSearch_PropertyDisplayOptions : GTLRObject

/**
 *  The user friendly label for the property that is used if the property is
 *  specified to be displayed in ObjectDisplayOptions. If provided, the display
 *  label is shown in front of the property values when the property is part of
 *  the object display options. For example, if the property value is '1', the
 *  value by itself may not be useful context for the user. If the display name
 *  given was 'priority', then the user sees 'priority : 1' in the search
 *  results which provides clear context to search users. This is OPTIONAL; if
 *  not given, only the property values are displayed. The maximum length is 64
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *displayLabel;

@end


/**
 *  This field records where the ItemScope was retrieved, if it was created via
 *  a web fetch.
 */
@interface GTLRCloudSearch_Provenance : GTLRObject

/**
 *  Annotation blob from Annotation Service.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *annotationBlob;

/**
 *  Canonical url of the retrieved_url, if one was resolved during retrieval,
 *  for example, if a rel="canonical" link tag was provided in the retrieved web
 *  page.
 */
@property(nonatomic, copy, nullable) NSString *canonicalUrl;

/**
 *  The url originally passed in the PRS request, which should be used to
 *  re-discover the content. Note that this URL may be a forwarding service or
 *  link shortener (bit.ly), so it should not be assumed to be canonical, but
 *  should be used for navigation back to the original source of the itemscope.
 */
@property(nonatomic, copy, nullable) NSString *inputUrl;

/**
 *  Contains exact types as parsed, whether or not we recognized that type at
 *  parse time. If an itemscope is created by merging SchemaOrg markup and open
 *  graph markup then the first itemtype would be schemaorg type, the second
 *  would be open graph and so on. example: http://schema.org/VideoObject,
 *  og:video.movie Plain text; usually a URL
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *itemtype;

/**
 *  The server retrieved timestamp (in msec).
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *retrievedTimestampMsec;

/**
 *  The final URL that was the actual source of the itemscope, after any
 *  redirects.
 */
@property(nonatomic, copy, nullable) NSString *retrievedUrl;

@end


/**
 *  Represents an item to be pushed to the indexing queue.
 */
@interface GTLRCloudSearch_PushItem : GTLRObject

/**
 *  Content hash of the item according to the repository. If specified, this is
 *  used to determine how to modify this item's status. Setting this field and
 *  the type field results in argument error. The maximum length is 2048
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *contentHash;

/**
 *  The metadata hash of the item according to the repository. If specified,
 *  this is used to determine how to modify this item's status. Setting this
 *  field and the type field results in argument error. The maximum length is
 *  2048 characters.
 */
@property(nonatomic, copy, nullable) NSString *metadataHash;

/**
 *  Provides additional document state information for the connector, such as an
 *  alternate repository ID and other metadata. The maximum length is 8192
 *  bytes.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *payload;

/**
 *  Queue to which this item belongs. The `default` queue is chosen if this
 *  field is not specified. The maximum length is 512 characters.
 */
@property(nonatomic, copy, nullable) NSString *queue;

/**
 *  Populate this field to store Connector or repository error details. This
 *  information is displayed in the Admin Console. This field may only be
 *  populated when the Type is REPOSITORY_ERROR.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RepositoryError *repositoryError;

/**
 *  Structured data hash of the item according to the repository. If specified,
 *  this is used to determine how to modify this item's status. Setting this
 *  field and the type field results in argument error. The maximum length is
 *  2048 characters.
 */
@property(nonatomic, copy, nullable) NSString *structuredDataHash;

/**
 *  The type of the push operation that defines the push behavior.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_PushItem_Type_Modified Indicates that the
 *        repository document has been modified or updated since the previous
 *        update call. This changes status to MODIFIED state for an existing
 *        item. If this is called on a non existing item, the status is changed
 *        to NEW_ITEM. (Value: "MODIFIED")
 *    @arg @c kGTLRCloudSearch_PushItem_Type_NotModified Item in the repository
 *        has not been modified since the last update call. This push operation
 *        will set status to ACCEPTED state. (Value: "NOT_MODIFIED")
 *    @arg @c kGTLRCloudSearch_PushItem_Type_RepositoryError Connector is facing
 *        a repository error regarding this item. Change status to
 *        REPOSITORY_ERROR state. Item is unreserved and rescheduled at a future
 *        time determined by exponential backoff. (Value: "REPOSITORY_ERROR")
 *    @arg @c kGTLRCloudSearch_PushItem_Type_Requeue Call push with REQUEUE only
 *        for items that have been reserved. This action unreserves the item and
 *        resets its available time to the wall clock time. (Value: "REQUEUE")
 *    @arg @c kGTLRCloudSearch_PushItem_Type_Unspecified Default UNSPECIFIED.
 *        Specifies that the push operation should not modify ItemStatus (Value:
 *        "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRCloudSearch_PushItemRequest
 */
@interface GTLRCloudSearch_PushItemRequest : GTLRObject

/**
 *  The name of connector making this call. Format:
 *  datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

/** Item to push onto the queue. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_PushItem *item;

@end


/**
 *  GTLRCloudSearch_QueryCountByStatus
 */
@interface GTLRCloudSearch_QueryCountByStatus : GTLRObject

/**
 *  count
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  This represents the http status code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *statusCode;

@end


/**
 *  GTLRCloudSearch_QueryInterpretation
 */
@interface GTLRCloudSearch_QueryInterpretation : GTLRObject

/**
 *  interpretationType
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_QueryInterpretation_InterpretationType_Blend The
 *        results from original query are blended with other results. The reason
 *        for blending these other results with the results from original query
 *        is populated in the 'Reason' field below. (Value: "BLEND")
 *    @arg @c kGTLRCloudSearch_QueryInterpretation_InterpretationType_None
 *        Neither the natural language interpretation, nor a broader version of
 *        the query is used to fetch the search results. (Value: "NONE")
 *    @arg @c kGTLRCloudSearch_QueryInterpretation_InterpretationType_Replace
 *        The results from original query are replaced. The reason for replacing
 *        the results from original query is populated in the 'Reason' field
 *        below. (Value: "REPLACE")
 */
@property(nonatomic, copy, nullable) NSString *interpretationType;

/**
 *  The interpretation of the query used in search. For example, queries with
 *  natural language intent like "email from john" will be interpreted as
 *  "from:john source:mail". This field will not be filled when the reason is
 *  NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY.
 */
@property(nonatomic, copy, nullable) NSString *interpretedQuery;

/**
 *  The reason for interpretation of the query. This field will not be
 *  UNSPECIFIED if the interpretation type is not NONE.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_QueryInterpretation_Reason_NotEnoughResultsFoundForUserQuery
 *        Query and document terms similarity is used to selectively broaden the
 *        query to retrieve additional search results since enough results were
 *        not found for the user query. Interpreted query will be empty for this
 *        case. (Value: "NOT_ENOUGH_RESULTS_FOUND_FOR_USER_QUERY")
 *    @arg @c kGTLRCloudSearch_QueryInterpretation_Reason_QueryHasNaturalLanguageIntent
 *        Natural language interpretation of the query is used to fetch the
 *        search results. (Value: "QUERY_HAS_NATURAL_LANGUAGE_INTENT")
 *    @arg @c kGTLRCloudSearch_QueryInterpretation_Reason_Unspecified Value
 *        "UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *reason;

@end


/**
 *  Default options to interpret user query.
 */
@interface GTLRCloudSearch_QueryInterpretationConfig : GTLRObject

/**
 *  Set this flag to disable supplemental results retrieval, setting a flag here
 *  will not retrieve supplemental results for queries associated with a given
 *  search application. If this flag is set to True, it will take precedence
 *  over the option set at Query level. For the default value of False, query
 *  level flag will set the correct interpretation for supplemental results.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *forceDisableSupplementalResults;

/**
 *  Enable this flag to turn off all internal optimizations like natural
 *  language (NL) interpretation of queries, supplemental results retrieval, and
 *  usage of synonyms including custom ones. If this flag is set to True, it
 *  will take precedence over the option set at Query level. For the default
 *  value of False, query level flag will set the correct interpretation for
 *  verbatim mode.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *forceVerbatimMode;

@end


/**
 *  Options to interpret user query.
 */
@interface GTLRCloudSearch_QueryInterpretationOptions : GTLRObject

/**
 *  Flag to disable natural language (NL) interpretation of queries. Default is
 *  false, Set to true to disable natural language interpretation. NL
 *  interpretation only applies to predefined datasources.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableNlInterpretation;

/**
 *  Use this flag to disable supplemental results for a query. Supplemental
 *  results setting chosen at SearchApplication level will take precedence if
 *  set to True.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableSupplementalResults;

/**
 *  Enable this flag to turn off all internal optimizations like natural
 *  language (NL) interpretation of queries, supplemental result retrieval, and
 *  usage of synonyms including custom ones. Nl interpretation will be disabled
 *  if either one of the two flags is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableVerbatimMode;

@end


/**
 *  Information relevant only to a query entry.
 */
@interface GTLRCloudSearch_QueryItem : GTLRObject

/**
 *  True if the text was generated by means other than a previous user search.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isSynthetic;

@end


/**
 *  The definition of a operator that can be used in a Search/Suggest request.
 */
@interface GTLRCloudSearch_QueryOperator : GTLRObject

/** Display name of the operator */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Potential list of values for the opeatror field. This field is only filled
 *  when we can safely enumerate all the possible values of this operator.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *enumValues;

/**
 *  Indicates the operator name that can be used to isolate the property using
 *  the greater-than operator.
 */
@property(nonatomic, copy, nullable) NSString *greaterThanOperatorName;

/**
 *  Can this operator be used to get facets.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isFacetable;

/**
 *  Indicates if multiple values can be set for this property.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isRepeatable;

/**
 *  Will the property associated with this facet be returned as part of search
 *  results.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isReturnable;

/**
 *  Can this operator be used to sort results.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isSortable;

/**
 *  Can get suggestions for this field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isSuggestable;

/**
 *  Indicates the operator name that can be used to isolate the property using
 *  the less-than operator.
 */
@property(nonatomic, copy, nullable) NSString *lessThanOperatorName;

/**
 *  The name of the object corresponding to the operator. This field is only
 *  filled for schema-specific operators, and is unset for common operators.
 */
@property(nonatomic, copy, nullable) NSString *objectType;

/** The name of the operator. */
@property(nonatomic, copy, nullable) NSString *operatorName;

/**
 *  The type of the operator.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Boolean Value "BOOLEAN"
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Date Value "DATE"
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Double Value "DOUBLE"
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Enum Value "ENUM"
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Html Value "HTML"
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Integer Value "INTEGER"
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Text Value "TEXT"
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Timestamp Value "TIMESTAMP"
 *    @arg @c kGTLRCloudSearch_QueryOperator_Type_Unknown Invalid value. (Value:
 *        "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  List of sources that the user can search using the query API.
 */
@interface GTLRCloudSearch_QuerySource : GTLRObject

/** Display name of the data source. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** List of all operators applicable for this source. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_QueryOperator *> *operators;

/**
 *  A short name or alias for the source. This value can be used with the
 *  'source' operator.
 */
@property(nonatomic, copy, nullable) NSString *shortName;

/** The name of the source */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Source *source;

@end


/**
 *  This field does not contain anything as of now and is just used as an
 *  indicator that the suggest result was a phrase completion.
 */
@interface GTLRCloudSearch_QuerySuggestion : GTLRObject
@end


/**
 *  Quote metadata: go/message-quoting-be-dd-v2. This proto is only used on the
 *  read path. For the request proto, refer to `QuotedMessagePayload`. Fields
 *  are either derived from storage directly from the Item this metadata belongs
 *  to, or is hydrated at read time from another Item read. Note:
 *  QuotedMessageMetadata proto is similar to Message proto with less field.
 *  Reasons to differtiate QuotedMessageMetadata from Message are: 1. Not all
 *  fields for original message is applicable for quoted message. (E.g.
 *  reactions, is_inline_reply, etc.), thus separting out for confusion. 2. We
 *  don't support nested message quoting. For more detailed discussion, please
 *  see http://shortn/_VsSXQb2C7P. For future reference: if your new
 *  feature/field will be supported in message quoting feature
 *  (go/chat-quoting-prd), you will need to add that field within
 *  QuotedMessageMetadata
 */
@interface GTLRCloudSearch_QuotedMessageMetadata : GTLRObject

/** Output only. Snapshot of the annotations of the quoted message. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Annotation *> *annotations;

/**
 *  Output only. Custom display profile info for apps. Will be empty for real
 *  users.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedAppProfile *appProfile;

/**
 *  Output only. The bot attachment state of the quoted message. Used by clients
 *  to display a bot attachment indicator in the UI.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_QuotedMessageMetadata_BotAttachmentState_BotAttachmentStateHasBotAttachment
 *        Value "BOT_ATTACHMENT_STATE_HAS_BOT_ATTACHMENT"
 *    @arg @c kGTLRCloudSearch_QuotedMessageMetadata_BotAttachmentState_BotAttachmentStateNoBotAttachment
 *        Value "BOT_ATTACHMENT_STATE_NO_BOT_ATTACHMENT"
 *    @arg @c kGTLRCloudSearch_QuotedMessageMetadata_BotAttachmentState_BotAttachmentStateUnspecified
 *        Value "BOT_ATTACHMENT_STATE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *botAttachmentState;

/**
 *  Output only. Time when the quoted message was posted in microseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *createTimeMicros;

/**
 *  Output only. ID of the User who posted the quoted message. This includes
 *  information to identify if the quoted message was posted by an App on behalf
 *  of a user.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *creatorId;

/**
 *  Output only. Time when the quoted message was last edited by a user at the
 *  time when quoting action happens. Time is in microseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastEditTimeMicros;

/**
 *  The `last_update_time` of the original message when the client initiated the
 *  quote creation. This is derived from the request payload passed from
 *  clients. Used to fetch the quoted message contents at a specific time on the
 *  read path. This field is populated from storage directly.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lastUpdateTimeWhenQuotedMicros;

/**
 *  MessageId of the original message that is being quoted. This is derived from
 *  the request payload passed from clients. This field is populated from
 *  storage directly.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_MessageId *messageId;

/**
 *  Output only. The state of the quoted message. Used by clients to display
 *  tombstones for quotes that reference a deleted message.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_QuotedMessageMetadata_MessageState_MessageStateActive
 *        The original message is present in storage and not deleted; the
 *        message contents can be hydrated. (Value: "MESSAGE_STATE_ACTIVE")
 *    @arg @c kGTLRCloudSearch_QuotedMessageMetadata_MessageState_MessageStateDeleted
 *        The original message has been deleted; the message contents cannot be
 *        hydrated. (Value: "MESSAGE_STATE_DELETED")
 *    @arg @c kGTLRCloudSearch_QuotedMessageMetadata_MessageState_MessageStateOtrEdited
 *        The OTR original message was edited and therefore no longer
 *        retrievable from storage; the message contents cannot be hydrated. See
 *        go/message-quoting-otr-edits for more context. (Value:
 *        "MESSAGE_STATE_OTR_EDITED")
 *    @arg @c kGTLRCloudSearch_QuotedMessageMetadata_MessageState_MessageStateUnspecified
 *        Value "MESSAGE_STATE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *messageState;

/** Output only. The retention (OTR) settings of the quoted message. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedRetentionSettings *retentionSettings;

/** Output only. Snapshot of the text body of the quoted message. */
@property(nonatomic, copy, nullable) NSString *textBody;

/**
 *  Output only. ID of the User who last updated (created/edited/deleted) the
 *  quoted message at the time when quoting action happens. This includes
 *  information to identify if the quoted message was posted by an App on behalf
 *  of a user.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *updaterId;

/** Output only. Upload metadata of the quoted message. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_UploadMetadata *> *uploadMetadata;

@end


/**
 *  Principal associated with a given RBAC role. This principal is used by
 *  Sphinx Provisioning Service for RBAC (go/cedi-auth) provisionable
 *  (go/sphinx-rbacz-design).
 */
@interface GTLRCloudSearch_RbacRoleProto : GTLRObject

@property(nonatomic, copy, nullable) NSString *name;
@property(nonatomic, copy, nullable) NSString *objectId;

/** DEPRECATED as of 01.11.2019 */
@property(nonatomic, copy, nullable) NSString *rbacNamespace;

/**
 *  Format: "RbacNamespaceName.RbacRoleName(/field=value)*", e.g.,
 *  "hr.v1.Reader",
 *  "hr.v1.Reader/language=EN_US/country=USA/room=NYC-9th-11A201".
 */
@property(nonatomic, copy, nullable) NSString *rbacRoleName;

@end


/**
 *  Principal associated with a given RBAC subject. This principal is used by
 *  Sphinx Provisioning Service for RBAC (go/cedi-auth) provisionable
 *  (go/sphinx-rbacz-design).
 */
@interface GTLRCloudSearch_RbacSubjectProto : GTLRObject

/** Format "username" without "\@domain", e.g., "bogdand". */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  Contains information about an emoji reaction.
 */
@interface GTLRCloudSearch_ReactionInfo : GTLRObject

/** Unicode string representing a single emoji. */
@property(nonatomic, copy, nullable) NSString *emoji;

@end


/**
 *  GTLRCloudSearch_ReadReceiptsSettingsUpdatedMetadata
 */
@interface GTLRCloudSearch_ReadReceiptsSettingsUpdatedMetadata : GTLRObject

/**
 *  The new read receipts state.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *readReceiptsEnabled;

@end


/**
 *  GTLRCloudSearch_Recipient
 */
@interface GTLRCloudSearch_Recipient : GTLRObject

@property(nonatomic, copy, nullable) NSString *email;

@end


/**
 *  A recording event is something that happens to the recording in a
 *  conference.
 */
@interface GTLRCloudSearch_RecordingEvent : GTLRObject

/**
 *  The initiator of the latest event of the recording. It will be set for all
 *  user events (`type` is 100-199) and unset for all server events (`type` is
 *  200-299).
 */
@property(nonatomic, copy, nullable) NSString *deviceId;

/**
 *  The type of event.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_RecordingEvent_Type_ActiveAboutToStopTooLong
 *        Recording is about to be stopped by the server because the recording
 *        is about to reach the maximum duration. (Value:
 *        "ACTIVE_ABOUT_TO_STOP_TOO_LONG")
 *    @arg @c kGTLRCloudSearch_RecordingEvent_Type_CancelledByUser Recording was
 *        cancelled by a user. (Value: "CANCELLED_BY_USER")
 *    @arg @c kGTLRCloudSearch_RecordingEvent_Type_CancelledInitializationFailed
 *        Recording was cancelled by the server because of a failure during
 *        recording initialization. (Value: "CANCELLED_INITIALIZATION_FAILED")
 *    @arg @c kGTLRCloudSearch_RecordingEvent_Type_CancelledInitiatorLeft
 *        Recording was cancelled by the server because the recording initiator
 *        left the conference during initialization. When the initiator leaves
 *        after the recording is started, no event is triggered. (Value:
 *        "CANCELLED_INITIATOR_LEFT")
 *    @arg @c kGTLRCloudSearch_RecordingEvent_Type_RecordingEventUnspecified
 *        This is never used. (Value: "RECORDING_EVENT_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_RecordingEvent_Type_StartedByUser Recording was
 *        started or is being started by a user. (Value: "STARTED_BY_USER")
 *    @arg @c kGTLRCloudSearch_RecordingEvent_Type_StoppedAllDevicesLeft
 *        Recording was stopped because there were no devices left in the
 *        conference. (Value: "STOPPED_ALL_DEVICES_LEFT")
 *    @arg @c kGTLRCloudSearch_RecordingEvent_Type_StoppedByUser Recording was
 *        stopped by a user. (Value: "STOPPED_BY_USER")
 *    @arg @c kGTLRCloudSearch_RecordingEvent_Type_StoppedInternalFailures
 *        Recording was stopped because of an internal error. (Value:
 *        "STOPPED_INTERNAL_FAILURES")
 *    @arg @c kGTLRCloudSearch_RecordingEvent_Type_StoppedTooLong Recording was
 *        stopped because the recording reached the maximum duration. (Value:
 *        "STOPPED_TOO_LONG")
 *    @arg @c kGTLRCloudSearch_RecordingEvent_Type_UserAction Deprecated, use
 *        detailed user actions instead. (Value: "USER_ACTION")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  This message is deprecated, please use RecordingSessionInfo instead.
 *  Information about recording in the current conference.
 */
@interface GTLRCloudSearch_RecordingInfo : GTLRObject

/**
 *  The latest recording event. This can be used by clients to help explain what
 *  is going on, why recording stopped, etc. This will always be set if there is
 *  or was an active recording, which means there can be latest event when
 *  recording is INACTIVE.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RecordingEvent *latestRecordingEvent;

/**
 *  The display name of the owner of the recording output. Email notifications
 *  about uploaded recordings will also be sent to this owner.
 */
@property(nonatomic, copy, nullable) NSString *ownerDisplayName;

/**
 *  The device resource name of the producer device for the currently active
 *  recording. Note that, after the producer drops/leaves the conference, this
 *  field will be cleaned up by the server after a delay.
 */
@property(nonatomic, copy, nullable) NSString *producerDeviceId;

/**
 *  The application type of the current active recording.
 *  `RECORDING_APPLICATION_TYPE_UNSPECIFIED` if `recording_status` is inactive.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_RecordingInfo_RecordingApplicationType_Broadcast
 *        A meeting broadcast. (Value: "BROADCAST")
 *    @arg @c kGTLRCloudSearch_RecordingInfo_RecordingApplicationType_GliveStream
 *        A *Google Live* managed stream. (Value: "GLIVE_STREAM")
 *    @arg @c kGTLRCloudSearch_RecordingInfo_RecordingApplicationType_Recording
 *        A meeting recording saved to a video file in Google Drive. (Value:
 *        "RECORDING")
 *    @arg @c kGTLRCloudSearch_RecordingInfo_RecordingApplicationType_RecordingApplicationTypeUnspecified
 *        This is never used. (Value: "RECORDING_APPLICATION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *recordingApplicationType;

/**
 *  An identifier for the current recording, if any. This is returned whenever
 *  recording_status is either `RECORDING_STARTING` or `RECORDING_STARTED`.
 */
@property(nonatomic, copy, nullable) NSString *recordingId;

/**
 *  The current status of the recording. This can be used by clients to show a
 *  recording dot or similar to indicated to the user that a recording is taking
 *  place.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_RecordingInfo_RecordingStatus_RecordingInactive
 *        The conference is not being recorded. This can mean either that no
 *        recording has been started, or that a previous recording has stopped.
 *        (Value: "RECORDING_INACTIVE")
 *    @arg @c kGTLRCloudSearch_RecordingInfo_RecordingStatus_RecordingStarted
 *        The recording is started. Any media sent to the conference may be
 *        included in the resulting recording. (Value: "RECORDING_STARTED")
 *    @arg @c kGTLRCloudSearch_RecordingInfo_RecordingStatus_RecordingStarting
 *        Recording is about to begin. The status will be updated to
 *        RECORDING_STARTED when the recording actually starts, which happens
 *        when all the backend plumbing is set up. (Value: "RECORDING_STARTING")
 *    @arg @c kGTLRCloudSearch_RecordingInfo_RecordingStatus_RecordingUnspecified
 *        This value is never used. (Value: "RECORDING_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *recordingStatus;

@end


/**
 *  Information about a recording session.
 */
@interface GTLRCloudSearch_RecordingSessionInfo : GTLRObject

/** Input only. Deprecated field, should not be used. */
@property(nonatomic, copy, nullable) NSString *ownerEmail;

/** A unique server-generated ID for the recording session. */
@property(nonatomic, copy, nullable) NSString *recordingSessionId;

/** Recording session's state information. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SessionStateInfo *sessionStateInfo;

@end


/**
 *  GTLRCloudSearch_RenameEvent
 */
@interface GTLRCloudSearch_RenameEvent : GTLRObject

@property(nonatomic, copy, nullable) NSString *newName NS_RETURNS_NOT_RETAINED;
@property(nonatomic, copy, nullable) NSString *originalName;

@end


/**
 *  Errors when the connector is communicating to the source repository.
 */
@interface GTLRCloudSearch_RepositoryError : GTLRObject

/**
 *  Message that describes the error. The maximum allowable length of the
 *  message is 8192 characters.
 */
@property(nonatomic, copy, nullable) NSString *errorMessage;

/**
 *  Error codes. Matches the definition of HTTP status codes.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *httpStatusCode;

/**
 *  The type of error.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_AuthenticationError Failed
 *        authentication due to incorrect credentials. (Value:
 *        "AUTHENTICATION_ERROR")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_AuthorizationError Service
 *        account is not authorized for the repository. (Value:
 *        "AUTHORIZATION_ERROR")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_ClientError Client-related
 *        error, such as an invalid request from the connector to the repository
 *        server. (Value: "CLIENT_ERROR")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_ConnectionError Cannot
 *        connect to the repository server. (Value: "CONNECTION_ERROR")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_DnsError DNS problem, such
 *        as the DNS server is not responding. (Value: "DNS_ERROR")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_NetworkError Unknown or
 *        unreachable host. (Value: "NETWORK_ERROR")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_QuotaExceeded Quota
 *        exceeded. (Value: "QUOTA_EXCEEDED")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_ServerError Repository
 *        server error. (Value: "SERVER_ERROR")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_ServiceUnavailable Server
 *        temporarily unavailable. (Value: "SERVICE_UNAVAILABLE")
 *    @arg @c kGTLRCloudSearch_RepositoryError_Type_Unknown Unknown error.
 *        (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRCloudSearch_RequestFileScope
 */
@interface GTLRCloudSearch_RequestFileScope : GTLRObject

@property(nonatomic, copy, nullable) NSString *itemId;

@end


/**
 *  GTLRCloudSearch_RequestFileScopeForActiveDocument
 */
@interface GTLRCloudSearch_RequestFileScopeForActiveDocument : GTLRObject
@end


/**
 *  Shared request options for all RPC methods.
 */
@interface GTLRCloudSearch_RequestOptions : GTLRObject

/** Debug options of the request */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

/**
 *  The BCP-47 language code, such as "en-US" or "sr-Latn". For more
 *  information, see
 *  http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. For
 *  translations. Set this field using the language set in browser or for the
 *  page. In the event that the user's language preference is known, set this
 *  field to the known user language. When specified, the documents in search
 *  results are biased towards the specified language. From Suggest API
 *  perspective, for 3p suggest this is used as a hint while making predictions
 *  to add language boosting.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  The ID generated when you create a search application using the [admin
 *  console](https://support.google.com/a/answer/9043922).
 */
@property(nonatomic, copy, nullable) NSString *searchApplicationId;

/**
 *  Current user's time zone id, such as "America/Los_Angeles" or
 *  "Australia/Sydney". These IDs are defined by [Unicode Common Locale Data
 *  Repository (CLDR)](http://cldr.unicode.org/) project, and currently
 *  available in the file
 *  [timezone.xml](http://unicode.org/repos/cldr/trunk/common/bcp47/timezone.xml).
 *  This field is used to correctly interpret date and time queries. If this
 *  field is not specified, the default time zone (UTC) is used.
 */
@property(nonatomic, copy, nullable) NSString *timeZone;

@end


/**
 *  A list of capabilities that are used in this message.
 */
@interface GTLRCloudSearch_RequiredMessageFeaturesMetadata : GTLRObject

@property(nonatomic, strong, nullable) NSArray<NSString *> *requiredFeatures;

@end


/**
 *  GTLRCloudSearch_ResetSearchApplicationRequest
 */
@interface GTLRCloudSearch_ResetSearchApplicationRequest : GTLRObject

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

@end


/**
 *  A type of sharing target that points to some resource's ACL. Used to refer
 *  to the set of Principals that have the given privilege ('role_id') for the
 *  given resource ('application_id', 'object_id', 'object_part'). The meaning
 *  of 'role_id' is interpreted only by implementations of AclRpcService and is
 *  usually dependent on 'application_id' All fields except object_part are
 *  required. If present, object_part must be non-empty.
 */
@interface GTLRCloudSearch_ResourceRoleProto : GTLRObject

@property(nonatomic, copy, nullable) NSString *applicationId;
@property(nonatomic, copy, nullable) NSString *objectId;
@property(nonatomic, copy, nullable) NSString *objectPart;

/**
 *  roleId
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *roleId;

@end


/**
 *  Debugging information about the response.
 */
@interface GTLRCloudSearch_ResponseDebugInfo : GTLRObject

/** General debug info formatted for display. */
@property(nonatomic, copy, nullable) NSString *formattedDebugInfo;

@end


/**
 *  Information relevant only to a restrict entry. NextId: 12
 */
@interface GTLRCloudSearch_RestrictItem : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_DriveFollowUpRestrict *driveFollowUpRestrict;
@property(nonatomic, strong, nullable) GTLRCloudSearch_DriveLocationRestrict *driveLocationRestrict;

/** Drive Types. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DriveMimeTypeRestrict *driveMimeTypeRestrict;

@property(nonatomic, strong, nullable) GTLRCloudSearch_DriveTimeSpanRestrict *driveTimeSpanRestrict;

/** The search restrict (e.g. "after:2017-09-11 before:2017-09-12"). */
@property(nonatomic, copy, nullable) NSString *searchOperator;

@end


/**
 *  Result count information
 */
@interface GTLRCloudSearch_ResultCounts : GTLRObject

/** Result count information for each source with results. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SourceResultCount *> *sourceResultCounts;

@end


/**
 *  Debugging information about the result.
 */
@interface GTLRCloudSearch_ResultDebugInfo : GTLRObject

/** General debug info formatted for display. */
@property(nonatomic, copy, nullable) NSString *formattedDebugInfo;

@end


/**
 *  Display Fields for Search Results
 */
@interface GTLRCloudSearch_ResultDisplayField : GTLRObject

/** The display label for the property. */
@property(nonatomic, copy, nullable) NSString *label;

/** The operator name of the property. */
@property(nonatomic, copy, nullable) NSString *operatorName;

/** The name value pair for the property. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_NamedProperty *property;

@end


/**
 *  The collection of fields that make up a displayed line
 */
@interface GTLRCloudSearch_ResultDisplayLine : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ResultDisplayField *> *fields;

@end


/**
 *  GTLRCloudSearch_ResultDisplayMetadata
 */
@interface GTLRCloudSearch_ResultDisplayMetadata : GTLRObject

/** The metalines content to be displayed with the result. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ResultDisplayLine *> *metalines;

/** The display label for the object. */
@property(nonatomic, copy, nullable) NSString *objectTypeLabel;

@end


/**
 *  GTLRCloudSearch_RetrievalImportance
 */
@interface GTLRCloudSearch_RetrievalImportance : GTLRObject

/**
 *  Indicates the ranking importance given to property when it is matched during
 *  retrieval. Once set, the token importance of a property cannot be changed.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_RetrievalImportance_Importance_Default Treat the
 *        match like a body text match. (Value: "DEFAULT")
 *    @arg @c kGTLRCloudSearch_RetrievalImportance_Importance_High Treat the
 *        match with higher importance than body text. (Value: "HIGH")
 *    @arg @c kGTLRCloudSearch_RetrievalImportance_Importance_Highest Treat the
 *        match like a match against title of the item. (Value: "HIGHEST")
 *    @arg @c kGTLRCloudSearch_RetrievalImportance_Importance_Low Treat the
 *        match with lower importance than body text. (Value: "LOW")
 *    @arg @c kGTLRCloudSearch_RetrievalImportance_Importance_None Do not match
 *        against this field during retrieval. The property can still be used
 *        for operator matching, faceting, and suggest if desired. (Value:
 *        "NONE")
 */
@property(nonatomic, copy, nullable) NSString *importance;

@end


/**
 *  GTLRCloudSearch_RoomRenameMetadata
 */
@interface GTLRCloudSearch_RoomRenameMetadata : GTLRObject

@property(nonatomic, copy, nullable) NSString *newName NS_RETURNS_NOT_RETAINED;

/** NEXT_TAG: 3 */
@property(nonatomic, copy, nullable) NSString *prevName;

@end


/**
 *  GTLRCloudSearch_RoomUpdatedMetadata
 */
@interface GTLRCloudSearch_RoomUpdatedMetadata : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_GroupDetailsUpdatedMetadata *groupDetailsMetadata;

/**
 *  groupLinkSharingEnabled
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *groupLinkSharingEnabled;

/**
 *  The user who initiated this room update. Complete member profiles, when
 *  ListTopicsRequest FetchOptions.USER is set. Otherwise, only the id will be
 *  filled in.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_User *initiator;

/**
 *  The type of the user who initiated this room update.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_RoomUpdatedMetadata_InitiatorType_InitiatorTypeAdmin
 *        Value "INITIATOR_TYPE_ADMIN"
 *    @arg @c kGTLRCloudSearch_RoomUpdatedMetadata_InitiatorType_InitiatorTypeEndUser
 *        Value "INITIATOR_TYPE_END_USER"
 *    @arg @c kGTLRCloudSearch_RoomUpdatedMetadata_InitiatorType_InitiatorTypeUnspecified
 *        Value "INITIATOR_TYPE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *initiatorType;

/** What was updated in the room. */
@property(nonatomic, copy, nullable) NSString *name;

@property(nonatomic, strong, nullable) GTLRCloudSearch_RoomRenameMetadata *renameMetadata;

/** DEPRECATED: See GroupVisibility proto definition. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedGroupVisibility *visibility;

@end


/**
 *  Roster profile information.
 */
@interface GTLRCloudSearch_Roster : GTLRObject

@property(nonatomic, copy, nullable) NSString *avatarUrl;

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RosterId *identifier;

/**
 *  Whether caller has visibility into members of the roster.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isMembershipVisibleToCaller;

/**
 *  membershipCount
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *membershipCount;

@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Roster gaia key, usually an email address. Set in looking up rosters
 *  response.
 */
@property(nonatomic, copy, nullable) NSString *rosterGaiaKey;

/**
 *  Roster deletion state - considered active unless set to deleted
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Roster_RosterState_RosterActive Roster is active
 *        (Value: "ROSTER_ACTIVE")
 *    @arg @c kGTLRCloudSearch_Roster_RosterState_RosterDeleted Roster deleted
 *        (Value: "ROSTER_DELETED")
 *    @arg @c kGTLRCloudSearch_Roster_RosterState_RosterStateUnknown Value
 *        "ROSTER_STATE_UNKNOWN"
 */
@property(nonatomic, copy, nullable) NSString *rosterState;

/**
 *  Roster membership count. May contain counts based on member type and
 *  membership state.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedSegmentedMembershipCounts *segmentedMembershipCounts;

@end


/**
 *  Primary key for Roster resource.
 */
@interface GTLRCloudSearch_RosterId : GTLRObject

/**
 *  Opaque, server-assigned ID of the Roster.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  Message containing a string that is safe to use in URL contexts in DOM APIs
 *  and HTML documents, where the URL context does not refer to a resource that
 *  loads code.
 */
@interface GTLRCloudSearch_SafeUrlProto : GTLRObject

/**
 *  IMPORTANT: Never set or read this field, even from tests, it is private. See
 *  documentation at the top of .proto file for programming language packages
 *  with which to create or read this message.
 */
@property(nonatomic, copy, nullable) NSString *privateDoNotAccessOrElseSafeUrlWrappedValue;

@end


/**
 *  The schema definition for a data source.
 */
@interface GTLRCloudSearch_Schema : GTLRObject

/**
 *  The list of top-level objects for the data source. The maximum number of
 *  elements is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ObjectDefinition *> *objectDefinitions;

/**
 *  IDs of the Long Running Operations (LROs) currently running for this schema.
 *  After modifying the schema, wait for operations to complete before indexing
 *  additional content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *operationIds;

@end


/**
 *  Scoring configurations for a source while processing a Search or Suggest
 *  request.
 */
@interface GTLRCloudSearch_ScoringConfig : GTLRObject

/**
 *  Whether to use freshness as a ranking signal. By default, freshness is used
 *  as a ranking signal. Note that this setting is not available in the Admin
 *  UI.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disableFreshness;

/**
 *  Whether to personalize the results. By default, personal signals will be
 *  used to boost results.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disablePersonalization;

@end


/**
 *  SearchApplication
 */
@interface GTLRCloudSearch_SearchApplication : GTLRObject

/**
 *  Retrictions applied to the configurations. The maximum number of elements is
 *  10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_DataSourceRestriction *> *dataSourceRestrictions;

/**
 *  The default fields for returning facet results. The sources specified here
 *  also have been included in data_source_restrictions above.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_FacetOptions *> *defaultFacetOptions;

/** The default options for sorting the search results */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SortOptions *defaultSortOptions;

/**
 *  Display name of the Search Application. The maximum length is 300
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Indicates whether audit logging is on/off for requests made for the search
 *  application in query APIs.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableAuditLog;

/**
 *  The name of the Search Application. Format:
 *  searchapplications/{application_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. IDs of the Long Running Operations (LROs) currently running for
 *  this schema. Output only field.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *operationIds;

/** The default options for query interpretation */
@property(nonatomic, strong, nullable) GTLRCloudSearch_QueryInterpretationConfig *queryInterpretationConfig;

/**
 *  With each result we should return the URI for its thumbnail (when
 *  applicable)
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *returnResultThumbnailUrls;

/** Configuration for ranking results. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ScoringConfig *scoringConfig;

/** Configuration for a sources specified in data_source_restrictions. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SourceConfig *> *sourceConfig;

@end


/**
 *  Search application level query stats per date
 */
@interface GTLRCloudSearch_SearchApplicationQueryStats : GTLRObject

/**
 *  The date for which query stats were calculated. Stats calculated on the next
 *  day close to midnight are returned.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Date *date;

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_QueryCountByStatus *> *queryCountByStatus;

@end


/**
 *  GTLRCloudSearch_SearchApplicationSessionStats
 */
@interface GTLRCloudSearch_SearchApplicationSessionStats : GTLRObject

/**
 *  The date for which session stats were calculated. Stats are calculated on
 *  the following day, close to midnight PST, and then returned.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Date *date;

/**
 *  The count of search sessions on the day
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *searchSessionsCount;

@end


/**
 *  GTLRCloudSearch_SearchApplicationUserStats
 */
@interface GTLRCloudSearch_SearchApplicationUserStats : GTLRObject

/**
 *  The date for which session stats were calculated. Stats calculated on the
 *  next day close to midnight are returned.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Date *date;

/**
 *  The count of unique active users in the past one day
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *oneDayActiveUsersCount;

/**
 *  The count of unique active users in the past seven days
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sevenDaysActiveUsersCount;

/**
 *  The count of unique active users in the past thirty days
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *thirtyDaysActiveUsersCount;

@end


/**
 *  GTLRCloudSearch_SearchItemsByViewUrlRequest
 */
@interface GTLRCloudSearch_SearchItemsByViewUrlRequest : GTLRObject

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

/** The next_page_token value returned from a previous request, if any. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Specify the full view URL to find the corresponding item. The maximum length
 *  is 2048 characters.
 */
@property(nonatomic, copy, nullable) NSString *viewUrl;

@end


/**
 *  GTLRCloudSearch_SearchItemsByViewUrlResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudSearch_SearchItemsByViewUrlResponse : GTLRCollectionObject

/**
 *  items
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Item *> *items;

/**
 *  Token to retrieve the next page of results, or empty if there are no more
 *  results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Additional search quality metadata of the item.
 */
@interface GTLRCloudSearch_SearchQualityMetadata : GTLRObject

/**
 *  An indication of the quality of the item, used to influence search quality.
 *  Value should be between 0.0 (lowest quality) and 1.0 (highest quality). The
 *  default value is 0.0.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *quality;

@end


/**
 *  The search API request.
 */
@interface GTLRCloudSearch_SearchRequest : GTLRObject

/**
 *  Context attributes for the request which will be used to adjust ranking of
 *  search results. The maximum number of elements is 10.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_ContextAttribute *> *contextAttributes;

/**
 *  The sources to use for querying. If not specified, all data sources from the
 *  current search application are used.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_DataSourceRestriction *> *dataSourceRestrictions;

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_FacetOptions *> *facetOptions;

/**
 *  Maximum number of search results to return in one page. Valid values are
 *  between 1 and 100, inclusive. Default value is 10. Minimum value is 50 when
 *  results beyond 2000 are requested.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageSize;

/**
 *  The raw query string. See supported search operators in the [Narrow your
 *  search with
 *  operators](https://support.google.com/cloudsearch/answer/6172299)
 */
@property(nonatomic, copy, nullable) NSString *query;

/** Options to interpret the user query. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_QueryInterpretationOptions *queryInterpretationOptions;

/** Request options, such as the search application and user timezone. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RequestOptions *requestOptions;

/** The options for sorting the search results */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SortOptions *sortOptions;

/**
 *  Starting index of the results.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *start;

@end


/**
 *  The search API response.
 */
@interface GTLRCloudSearch_SearchResponse : GTLRObject

/** Debugging information about the response. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ResponseDebugInfo *debugInfo;

/** Error information about the response. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ErrorInfo *errorInfo;

/** Repeated facet results. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_FacetResult *> *facetResults;

/**
 *  Whether there are more search results matching the query.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasMoreResults;

/**
 *  Query interpretation result for user query. Empty if query interpretation is
 *  disabled.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_QueryInterpretation *queryInterpretation;

/**
 *  The estimated result count for this query.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resultCountEstimate;

/**
 *  The exact result count for this query.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resultCountExact;

/** Expanded result count information. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ResultCounts *resultCounts;

/** Results from a search query. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SearchResult *> *results;

/** Suggested spelling for the query. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SpellResult *> *spellResults;

/**
 *  Structured results for the user query. These results are not counted against
 *  the page_size.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_StructuredResult *> *structuredResults;

@end


/**
 *  Results containing indexed information for a document.
 */
@interface GTLRCloudSearch_SearchResult : GTLRObject

/**
 *  If source is clustered, provide list of clustered results. There will only
 *  be one level of clustered results. If current source is not enabled for
 *  clustering, this field will be empty.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SearchResult *> *clusteredResults;

/** Debugging information about this search result. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_ResultDebugInfo *debugInfo;

/** Metadata of the search result. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Metadata *metadata;

/**
 *  The concatenation of all snippets (summaries) available for this result.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Snippet *snippet;

/** Title of the search result. */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  The URL of the search result. The URL contains a Google redirect to the
 *  actual item. This URL is signed and shouldn't be changed.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Sections are separated by a line divider. They contain a collection of
 *  widgets that are rendered (vertically) in the order that they are specified.
 *  Across all platforms, AddOns have a narrow fixed width, so there is
 *  currently no need for layout properties (e.g. float).
 */
@interface GTLRCloudSearch_Section : GTLRObject

/**
 *  Indicating whether this section is collapsable. If a section is collapsable,
 *  the description must be given.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *collapsable;

/**
 *  The header of the section, text formatted supported.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The number of uncollapsable widgets. For example, when a section contains 5
 *  widgets and the num_uncollapsable_widget are set to be 2, The first 2
 *  widgets will always shown and the last 3 is collapsed as default. Only when
 *  collapsable is set to be true, the num_uncollapsable_widget will be taken
 *  into account.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numUncollapsableWidgets;

/** A section must contain at least 1 widget. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_WidgetMarkup *> *widgets;

@end


/**
 *  GTLRCloudSearch_Segment
 */
@interface GTLRCloudSearch_Segment : GTLRObject

/**
 *  Formatting to be applied when rendering the Segment. For all segment types,
 *  this is the standard way of representing that the Segment should be rendered
 *  in bold, italics, etc.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Formatting *formatting;

/** For HASHTAG type: */
@property(nonatomic, strong, nullable) GTLRCloudSearch_HashtagData *hashtagData;

/**
 *  Type-specific metadata. At most one of these should be populated, and the
 *  one that is populated should correspond to the type of the Segment. For LINK
 *  type:
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_LinkData *linkData;

/**
 *  Text content of the Segment. As a general rule, this field should contain
 *  the actual text that should be rendered in the UI. Thus, for a hashtag, it
 *  should be "#Foo", and for a link, it should be the display text. Clients
 *  that do not understand a particular segment type may use this text, along
 *  with the Formatting info below, as a fallback for display. The field is not
 *  required -- if all relevant information is carried in other metadata fields
 *  and there is no need for a fallback, or it is not practical for a fallback
 *  to be provided for any other reason, the field may be left blank. A standard
 *  example would be a user reference being transmitted between server layers,
 *  where a gaia-ID representation may be sufficient and there is no need for a
 *  textual fallback. In such a case, it would be valid and useful - though not
 *  required - for servers to compute and populate a fallback on the serving
 *  path.
 */
@property(nonatomic, copy, nullable) NSString *text;

/**
 *  Type of Segment.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Segment_Type_AllUserMention An ALL_USER_MENTION
 *        segment represents a reference to all users in the context, that is,
 *        the conversation, discussion, or other context containing the segment.
 *        For example, an ALL_USER_MENTION segment ("\@all") can be useful to
 *        ping all participants in a conversation if the notification setting of
 *        the conversation is not set to ping on normal messages. An
 *        ALL_USER_MENTION should be treated as a USER_MENTION for all users who
 *        receives the segment. (Value: "ALL_USER_MENTION")
 *    @arg @c kGTLRCloudSearch_Segment_Type_Hashtag A HASHTAG segment represents
 *        a structured reference to a topic. The "text" field should represent
 *        display text (e.g. "#Google"), and additional metadata should be put
 *        in the Segment's hashtag_data field. (Value: "HASHTAG")
 *    @arg @c kGTLRCloudSearch_Segment_Type_LineBreak A LINE_BREAK segment is
 *        simply a placeholder to represent a line break between other segments.
 *        The "text" variable may be set to a newline as a fallback, but clients
 *        that understand this segment type should simply insert a line break
 *        without needing to reference any fields. (Value: "LINE_BREAK")
 *    @arg @c kGTLRCloudSearch_Segment_Type_Link A LINK segment represents a
 *        link to a web entity. The "text" field should be used for anchor text.
 *        Additional link data should be put in the link_data protobuf. (Value:
 *        "LINK")
 *    @arg @c kGTLRCloudSearch_Segment_Type_Text A TEXT segment represents
 *        plain-text subject to particular formatting constraints (as
 *        represented in the "formatting" field of the Segment). (Value: "TEXT")
 *    @arg @c kGTLRCloudSearch_Segment_Type_UserMention A USER_MENTION segment
 *        represents a reference to a (possibly non-Gaia, possibly off-network)
 *        user. The "text" field may be populated as a fallback, but information
 *        identifying the user should be contained in the user_mention_data
 *        protobuf. (The set of fields that are populated in user_mention_data
 *        may differ depending on the context in which the segment is viewed,
 *        but the interpretation of the fields is uniform. See comments over
 *        UserMentionData). (Value: "USER_MENTION")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** For USER_MENTION type: */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserMentionData *userMentionData;

@end


/**
 *  GTLRCloudSearch_SelectionControl
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRCloudSearch_SelectionControl : GTLRCollectionObject

/**
 *  For radio button, at most one of the items will be selected.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SelectionItem *> *items;

/**
 *  Label used to be displayed ahead of the selection control. It is optional.
 */
@property(nonatomic, copy, nullable) NSString *label;

/** The name of the text field which is will be used in FormInput. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If specified, form is submitted when selection changed. If not specified,
 *  developer will need to specify a separate button.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_FormAction *onChange;

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_SelectionControl_Type_CheckBox Value "CHECK_BOX"
 *    @arg @c kGTLRCloudSearch_SelectionControl_Type_Dropdown Value "DROPDOWN"
 *    @arg @c kGTLRCloudSearch_SelectionControl_Type_RadioButton Value
 *        "RADIO_BUTTON"
 *    @arg @c kGTLRCloudSearch_SelectionControl_Type_Switch Value "SWITCH"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRCloudSearch_SelectionItem
 */
@interface GTLRCloudSearch_SelectionItem : GTLRObject

/**
 *  If more than one items are selected for RADIO_BUTTON and DROPDOWN, the first
 *  selected item is treated as sElected and the after ones are all ignored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *selected;

/** The text to be displayed. */
@property(nonatomic, copy, nullable) NSString *text;

/**
 *  The value associated with this item which will be sent back to app scripts.
 *  Client should use as a form input value.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A session event is something that happens to the streaming session in a
 *  conference.
 */
@interface GTLRCloudSearch_SessionEvent : GTLRObject

/**
 *  The initiator of the latest event of the streaming session. It will be set
 *  for all user events (`type` is 100-199) and unset for all server
 *  events(`type` is 200-299).
 */
@property(nonatomic, copy, nullable) NSString *deviceId;

/**
 *  The type of event.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_SessionEvent_Type_ActiveAboutToStopTooLong
 *        Streaming session is about to be stopped by the server because the
 *        session is about to reach the maximum duration. (Value:
 *        "ACTIVE_ABOUT_TO_STOP_TOO_LONG")
 *    @arg @c kGTLRCloudSearch_SessionEvent_Type_CancelledByUser Streaming
 *        session was cancelled by a user. (Value: "CANCELLED_BY_USER")
 *    @arg @c kGTLRCloudSearch_SessionEvent_Type_CancelledInitializationFailed
 *        Streaming session was cancelled by the server because of a failure
 *        during session initialization. (Value:
 *        "CANCELLED_INITIALIZATION_FAILED")
 *    @arg @c kGTLRCloudSearch_SessionEvent_Type_CancelledInitiatorLeft
 *        Streaming session was cancelled by the server because the session
 *        initiator left the conference during initialization. When the
 *        initiator leaves after the session is started, no event is triggered.
 *        (Value: "CANCELLED_INITIATOR_LEFT")
 *    @arg @c kGTLRCloudSearch_SessionEvent_Type_EventUnspecified This is never
 *        used. (Value: "EVENT_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_SessionEvent_Type_StartedByUser Streaming session
 *        was started or is being started by a user. (Value: "STARTED_BY_USER")
 *    @arg @c kGTLRCloudSearch_SessionEvent_Type_StoppedAllDevicesLeft Streaming
 *        session was stopped because there were no devices left in the
 *        conference. (Value: "STOPPED_ALL_DEVICES_LEFT")
 *    @arg @c kGTLRCloudSearch_SessionEvent_Type_StoppedByUser Streaming session
 *        was stopped by a user. (Value: "STOPPED_BY_USER")
 *    @arg @c kGTLRCloudSearch_SessionEvent_Type_StoppedInternalFailures
 *        Streaming session was stopped because of an internal error. (Value:
 *        "STOPPED_INTERNAL_FAILURES")
 *    @arg @c kGTLRCloudSearch_SessionEvent_Type_StoppedTooLong Streaming
 *        session was stopped because the session reached the maximum duration.
 *        (Value: "STOPPED_TOO_LONG")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Information about the state of a (recording, broadcast, transcription...)
 *  session in a conference.
 */
@interface GTLRCloudSearch_SessionStateInfo : GTLRObject

/** Output only. The ack info of the session. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AckInfo *ackInfo;

/**
 *  Immutable. The language configuration used by this session. When empty,
 *  captions will be disabled. It's a required field for transcription sessions.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_LanguageConfig *languageConfig;

/**
 *  Output only. The device id of the actor is set if the current state is a
 *  result of a user action, is empty otherwise.
 */
@property(nonatomic, copy, nullable) NSString *lastActorDeviceId;

/**
 *  Output only. The max end time of the session, at this time the session will
 *  be force stopped/terminated. Clients are expected to use this timestamp to
 *  warn users about the force stop.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *maxEndTime;

/**
 *  State of the session.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_SessionStateInfo_SessionState_Active The session
 *        is active/ongoing. (Value: "ACTIVE")
 *    @arg @c kGTLRCloudSearch_SessionStateInfo_SessionState_SessionStateUnspecified
 *        Unspecified session state. (Value: "SESSION_STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_SessionStateInfo_SessionState_Starting The
 *        session is starting. (Value: "STARTING")
 *    @arg @c kGTLRCloudSearch_SessionStateInfo_SessionState_Stopped The session
 *        has stopped. (Value: "STOPPED")
 */
@property(nonatomic, copy, nullable) NSString *sessionState;

/**
 *  Output only. The reason the session was transitioned to STOPPED state.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_SessionStateInfo_SessionStopReason_SessionStopReasonUnspecified
 *        Session stop reason unspecified. (Value:
 *        "SESSION_STOP_REASON_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_SessionStateInfo_SessionStopReason_StoppedAllDevicesLeft
 *        Stopped because there were no devices left in the conference. (Value:
 *        "STOPPED_ALL_DEVICES_LEFT")
 *    @arg @c kGTLRCloudSearch_SessionStateInfo_SessionStopReason_StoppedInitializationFailed
 *        Stopped by the server because of an initialization failure. (Value:
 *        "STOPPED_INITIALIZATION_FAILED")
 *    @arg @c kGTLRCloudSearch_SessionStateInfo_SessionStopReason_StoppedInternalFailures
 *        Stopped because of an internal error. (Value:
 *        "STOPPED_INTERNAL_FAILURES")
 *    @arg @c kGTLRCloudSearch_SessionStateInfo_SessionStopReason_StoppedTooLong
 *        Stopped because the session reached the maximum duration. (Value:
 *        "STOPPED_TOO_LONG")
 *    @arg @c kGTLRCloudSearch_SessionStateInfo_SessionStopReason_StoppedYouTubeLiveEventEnded
 *        Stopped because the broadcast event ended on YouTube. (Value:
 *        "STOPPED_YOU_TUBE_LIVE_EVENT_ENDED")
 *    @arg @c kGTLRCloudSearch_SessionStateInfo_SessionStopReason_UserAction
 *        Stopped by user action. (Value: "USER_ACTION")
 */
@property(nonatomic, copy, nullable) NSString *sessionStopReason;

@end


/**
 *  Settings of a meeting space that can be edited by users with corresponding
 *  manage privilege. These settings are always populated in responses.
 */
@interface GTLRCloudSearch_Settings : GTLRObject

/**
 *  The access lock of the meeting space that lets hosts control who can join
 *  the meeting.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *accessLock;

/**
 *  The access type of the meeting space.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Settings_AccessType_AccessTypeOpen Anyone with
 *        meeting join information (url, phone access...) can join, no knocking
 *        required. (Subject to organization policies) (Value:
 *        "ACCESS_TYPE_OPEN")
 *    @arg @c kGTLRCloudSearch_Settings_AccessType_AccessTypeRestricted Only
 *        participants invited by a host can automatically join, everyone else
 *        must knock and be admitted. (Subject to organization policies)
 *        Participants cannot dial out from the meeting. And only hosts can
 *        accept knocks. (Value: "ACCESS_TYPE_RESTRICTED")
 *    @arg @c kGTLRCloudSearch_Settings_AccessType_AccessTypeTrusted Members of
 *        the Host's organization, invited external users, and dial-in users can
 *        join without knocking, everyone else must knock. (Subject to
 *        organization policies) (Value: "ACCESS_TYPE_TRUSTED")
 *    @arg @c kGTLRCloudSearch_Settings_AccessType_AccessTypeUnspecified Default
 *        value. This value is unused. (Value: "ACCESS_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *accessType;

/**
 *  Whether users can join before host in the conferences of this meeting space.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowJoiningBeforeHost;

/**
 *  Whether attendance report is enabled for the meeting space.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *attendanceReportEnabled;

/**
 *  The chat lock of the meeting space that lets owner control whether the
 *  participants can send chat messages.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *chatLock;

/**
 *  Whether meeting artifacts will be shared with cohosts.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cohostArtifactSharingEnabled;

/**
 *  Whether Client-side Encryption is enabled for the meeting space.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cseEnabled;

/**
 *  Whether the default role is viewer or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultAsViewer;

/**
 *  Indicates whether the meeting space is moderated.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *moderationEnabled;

/**
 *  The present lock of the meeting space that lets owner control whether the
 *  participants can present their screen.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *presentLock;

/**
 *  The reactions lock of the meeting space that lets owner control whether the
 *  participants can send reactions.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reactionsLock;

@end


/**
 *  GTLRCloudSearch_ShareScope
 */
@interface GTLRCloudSearch_ShareScope : GTLRObject

/**
 *  If scope is DOMAIN, this field contains the dasher domain, for example
 *  "google.com".
 */
@property(nonatomic, copy, nullable) NSString *domain;

/**
 *  The scope to which the content was shared.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_ShareScope_Scope_DasherDomain Value
 *        "DASHER_DOMAIN"
 *    @arg @c kGTLRCloudSearch_ShareScope_Scope_Extended Viewable by extended
 *        circles. (Value: "EXTENDED")
 *    @arg @c kGTLRCloudSearch_ShareScope_Scope_Limited Viewable only by a set
 *        of people. (Value: "LIMITED")
 *    @arg @c kGTLRCloudSearch_ShareScope_Scope_Private Only the author can view
 *        the post. (Value: "PRIVATE")
 *    @arg @c kGTLRCloudSearch_ShareScope_Scope_Public Value "PUBLIC"
 *    @arg @c kGTLRCloudSearch_ShareScope_Scope_Unknown Value "UNKNOWN"
 */
@property(nonatomic, copy, nullable) NSString *scope;

@end


/**
 *  GTLRCloudSearch_SheetsClientActionMarkup
 */
@interface GTLRCloudSearch_SheetsClientActionMarkup : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudSearch_CustomFunctionReturnValueMarkup *customFunctionReturnValueMarkup;

@end


/**
 *  Represents a principal who possesses a signing key corresponding to the
 *  verification key or keyset described here.
 */
@interface GTLRCloudSearch_SigningKeyPossessorProto : GTLRObject

/**
 *  This value must be from the KeyMetadata.Type enum in keymaster.proto.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *keymasterKeyType;

/**
 *  The actual verification key bytes corresponding to the above type.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *serializedVerificationKey;

/**
 *  The binary serialized Keymaster SerializedReader of a public keyset. The
 *  keyset must contain exactly one key. N.B.: If this field is populated,
 *  serialized_verification_key should be set to the empty string and
 *  keymaster_key_type should be set to zero.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *serializedVerificationKeyset;

@end


/**
 *  Represents a principal which possesses a particular, presumably secret,
 *  string. Useful for things like "auth keys," used for anonymous sharing.
 *  Since representing this principal with the actual secret included reveals
 *  the secret, it's best if the requisite condition is enforced in some other
 *  way, for example via Keystore wrapping attributes (Keystore will unwrap only
 *  if the specified secret, aka "attribute", is presented). All that's stored
 *  here is an identifying label.
 */
@interface GTLRCloudSearch_SimpleSecretHolderProto : GTLRObject

/**
 *  A descriptive label to help identify a relevant ACL entry or otherwise
 *  disambiguate this instance.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SimpleSecretLabelProto *label;

@end


/**
 *  SimpleSecretProto (in authenticator.proto) and SimpleSecretHolderProto
 *  (below) share the notion of a "label", which identifies a particular secret
 *  without (hopefully) revealing the secret. Note that a SimpleSecretLabel only
 *  disambiguates between secrets used to get access to some particular object.
 *  Two different secrets that apply to two different objects could have the
 *  same label. For example, in the common sharing model, each object has no
 *  more than one "auth key". Therefore, the label for an auth key simply has
 *  type = AUTH_KEY with no additional information. In theory, we could add some
 *  sort of resource ID to SimpleSecretLabel to make it more explicit. However,
 *  in practice, this is never really needed. A SimpleSecret for one object is
 *  never used to authorize a request on some other object, so there is no
 *  ambiguity. Also, since SimpleSecrets must obviously be unguessable, there is
 *  no risk that a SimpleSecret intended for one object will accidentally grant
 *  access to another.
 */
@interface GTLRCloudSearch_SimpleSecretLabelProto : GTLRObject

/**
 *  ***DEPRECATED (3-Oct-2011) *** This field should be deleted when code stops
 *  using CAP_TOKEN labels. Used when type = CAP_TOKEN. When a CAP_TOKEN label
 *  appears in a SimpleSecretHolder Principal, |capability_id| must be filled in
 *  to identify one of the capabilities on the ACL. When a CAP_TOKEN label
 *  appears in a SimpleSecret Authenticator, it is NOT necessary to fill in
 *  |capability_id| -- ACL Service will find the ID by searching all
 *  capabilities on the ACL for one associated with the token given by the
 *  SimpleSecret's secret data. If |capability_id| is specified, though, then
 *  the Authenticator will only be accepted if it actually matches that
 *  particular token ID.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *capabilityId;

/**
 *  Used when type = GENERIC_SECRET
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *genericLabel;

/**
 *  Used when type == INVITE.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inviteId;

/**
 *  This is optional because required enums cannot be extended.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_SimpleSecretLabelProto_Type_AuthKey The singleton
 *        auth key for a common-sharing ACL. No other fields of
 *        SimpleSecretLabelProto need to be filled in, since there is only one
 *        of these per ACL. The corresponding secret is the auth key encoded in
 *        64-bit big-endian. (Value: "AUTH_KEY")
 *    @arg @c kGTLRCloudSearch_SimpleSecretLabelProto_Type_CapToken
 *        ***DEPRECATED (3-Oct-2011)*** Use the new CapTokenProto and
 *        CapTokenHolderProto instead. A capability token. The corresponding
 *        secret is an arbitrary-length random byte string (recommended: 128
 *        bits). |capability_id| may be filled in (see below). See
 *        CapTokenMetadata in acl.proto. (Value: "CAP_TOKEN")
 *    @arg @c kGTLRCloudSearch_SimpleSecretLabelProto_Type_GenericSecret A
 *        generic secret value. Do not use this if any more specific type is
 *        appropriate. (Value: "GENERIC_SECRET")
 *    @arg @c kGTLRCloudSearch_SimpleSecretLabelProto_Type_Invalid Used as a
 *        default value. (Value: "INVALID")
 *    @arg @c kGTLRCloudSearch_SimpleSecretLabelProto_Type_Invite A
 *        common-sharing invite token. |invite_id| (below) must be set to
 *        identify the invite. The corresponding secret is the SecretMaterial,
 *        as defined by InviteToken.SecretMaterial in acl.proto, encoded in
 *        64-bit big-endian. If there is no SecretMaterial, the secret should be
 *        omitted; in this case the invite ID itself is the secret, which is
 *        less secure. (Value: "INVITE")
 *    @arg @c kGTLRCloudSearch_SimpleSecretLabelProto_Type_Reke Identifies a
 *        principal that can perform a successful REKE handshake. The holder is
 *        not authenticated by presenting a SimpleSecretProto, but rather by
 *        knowing either the REKE resumption ticket secret or the private key
 *        corresponding to a public key specified outside the PrincipalProto.
 *        For more information, see: http://goto.google.com/loas2cert (Value:
 *        "REKE")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Annotation metadata for slash commands (/).
 */
@interface GTLRCloudSearch_SlashCommandMetadata : GTLRObject

/** Hint string for the arguments expected by the slash command. */
@property(nonatomic, copy, nullable) NSString *argumentsHint;

/**
 *  Unique id for the slash command.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *commandId;

/** Name of the slash command. */
@property(nonatomic, copy, nullable) NSString *commandName;

/**
 *  ID of the bot which owns the slash command.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *identifier;

/**
 *  Whether or not this slash command should trigger a dialog.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *triggersDialog;

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_SlashCommandMetadata_Type_Add If a bot is added
 *        by a Slash Command, it means the bot was invoked by the user but
 *        hasn't yet been added to the group. Attaching an ADD annotation both
 *        add and invoke the bot. (Value: "ADD")
 *    @arg @c kGTLRCloudSearch_SlashCommandMetadata_Type_FailedToAdd
 *        Server-generated slash command metadata, for clients to strikethrough.
 *        (Value: "FAILED_TO_ADD")
 *    @arg @c kGTLRCloudSearch_SlashCommandMetadata_Type_Invoke Value "INVOKE"
 *    @arg @c kGTLRCloudSearch_SlashCommandMetadata_Type_TypeUnspecified Default
 *        value for the enum. DO NOT USE. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Snippet of the search result, which summarizes the content of the resulting
 *  page.
 */
@interface GTLRCloudSearch_Snippet : GTLRObject

/** The matched ranges in the snippet. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_MatchRange *> *matchRanges;

/**
 *  The snippet of the document. The snippet of the document. May contain
 *  escaped HTML character that should be unescaped prior to rendering.
 */
@property(nonatomic, copy, nullable) NSString *snippet;

@end


/**
 *  An Attachment represents a linked entity associated with a piece of social
 *  content. This may be a 1st-party or 3rd-party entity. In the Papyrus
 *  context, an Attachment is part of a Cent, and sits alongside the main
 *  content of the cent, which is represented as a sequence of Segments. Right
 *  now an Attachment is just a wrapper around an Embed, but we provide the
 *  extra layer of abstraction since, as Embeds move to separate storage in
 *  Briefcase, we may want to add additional fields that are not part of the
 *  Embed proper, but that (for example) relate to the usage of the linked
 *  content within the particular post/cent.
 */
@interface GTLRCloudSearch_SocialCommonAttachmentAttachment : GTLRObject

/** An embed represents an external entity. See go/es-embeds. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_EmbedClientItem *embedItem;

/**
 *  An id to uniquely identify an attachment when several attachments are in a
 *  collection.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  Represents a user pseudonym. Pseudonyms are linked accounts on Google and
 *  third-party services (e.g. YouTube or Twitter) and are described by a Social
 *  Graph Node.
 */
@interface GTLRCloudSearch_SocialGraphNodeProto : GTLRObject

/**
 *  The fields from ccc/socialgraph/socialgraphnode.proto:SgnNode that uniquely
 *  identify a social graph node. The 'ident' field is not included here because
 *  its value can be changed.
 */
@property(nonatomic, copy, nullable) NSString *sgnDomain;

@property(nonatomic, copy, nullable) NSString *sgnPk;

@end


/**
 *  GTLRCloudSearch_SortOptions
 */
@interface GTLRCloudSearch_SortOptions : GTLRObject

/**
 *  The name of the operator corresponding to the field to sort on. The
 *  corresponding property must be marked as sortable.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

/**
 *  Ascending is the default sort order
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_SortOptions_SortOrder_Ascending Value "ASCENDING"
 *    @arg @c kGTLRCloudSearch_SortOptions_SortOrder_Descending Value
 *        "DESCENDING"
 */
@property(nonatomic, copy, nullable) NSString *sortOrder;

@end


/**
 *  Defines sources for the suggest/search APIs.
 */
@interface GTLRCloudSearch_Source : GTLRObject

/** Source name for content indexed by the Indexing API. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Predefined content source for Google Apps.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_GoogleCalendar Value
 *        "GOOGLE_CALENDAR"
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_GoogleDrive Value
 *        "GOOGLE_DRIVE"
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_GoogleGmail Value
 *        "GOOGLE_GMAIL"
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_GoogleGroups Value
 *        "GOOGLE_GROUPS"
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_GoogleKeep Value
 *        "GOOGLE_KEEP"
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_GoogleSites Value
 *        "GOOGLE_SITES"
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_None Value "NONE"
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_Person Suggests people in
 *        the organization. Only valid when used with the suggest API. Results
 *        in an error when used in the query API. (Value: "PERSON")
 *    @arg @c kGTLRCloudSearch_Source_PredefinedSource_QueryHistory Suggests
 *        queries issued by the user in the past. Only valid when used with the
 *        suggest API. Ignored when used in the query API. (Value:
 *        "QUERY_HISTORY")
 */
@property(nonatomic, copy, nullable) NSString *predefinedSource;

@end


/**
 *  Configurations for a source while processing a Search or Suggest request.
 */
@interface GTLRCloudSearch_SourceConfig : GTLRObject

/** The crowding configuration for the source. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SourceCrowdingConfig *crowdingConfig;

/** The scoring configuration for the source. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SourceScoringConfig *scoringConfig;

/** The source for which this configuration is to be used. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Source *source;

@end


/**
 *  Set search results crowding limits. Crowding is a situation in which
 *  multiple results from the same source or host "crowd out" other results,
 *  diminishing the quality of search for users. To foster better search quality
 *  and source diversity in search results, you can set a condition to reduce
 *  repetitive results by source.
 */
@interface GTLRCloudSearch_SourceCrowdingConfig : GTLRObject

/**
 *  Maximum number of results allowed from a datasource in a result page as long
 *  as results from other sources are not exhausted. Value specified must not be
 *  negative. A default value is used if this value is equal to 0. To disable
 *  crowding, set the value greater than 100.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numResults;

/**
 *  Maximum number of suggestions allowed from a source. No limits will be set
 *  on results if this value is less than or equal to 0.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numSuggestions;

@end


/**
 *  Per source result count information.
 */
@interface GTLRCloudSearch_SourceResultCount : GTLRObject

/**
 *  Whether there are more search results for this source.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasMoreResults;

/**
 *  The estimated result count for this source.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resultCountEstimate;

/**
 *  The exact result count for this source.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resultCountExact;

/** The source the result count information is associated with. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Source *source;

@end


/**
 *  Set the scoring configuration. This allows modifying the ranking of results
 *  for a source.
 */
@interface GTLRCloudSearch_SourceScoringConfig : GTLRObject

/**
 *  Importance of the source.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_SourceScoringConfig_SourceImportance_Default
 *        Value "DEFAULT"
 *    @arg @c kGTLRCloudSearch_SourceScoringConfig_SourceImportance_High Value
 *        "HIGH"
 *    @arg @c kGTLRCloudSearch_SourceScoringConfig_SourceImportance_Low Value
 *        "LOW"
 */
@property(nonatomic, copy, nullable) NSString *sourceImportance;

@end


/**
 *  Primary key for Space resource.
 */
@interface GTLRCloudSearch_SpaceId : GTLRObject

/** Unique, immutable ID of the Space */
@property(nonatomic, copy, nullable) NSString *spaceId;

@end


/**
 *  GTLRCloudSearch_SpellResult
 */
@interface GTLRCloudSearch_SpellResult : GTLRObject

/** The suggested spelling of the query. */
@property(nonatomic, copy, nullable) NSString *suggestedQuery;

@end


/**
 *  Represents the set of members (of a given type) in a Google+ Square (see
 *  http://go/squares). A Square with default member_type is currently (1/2012)
 *  identical to the GaiaGroup with the same ID, but that is expected to change
 *  soon (see http://go/superglue). Support for this principal type is currently
 *  (1/2012) incomplete -- e.g., Keystore does not support it yet (see
 *  b/5703421).
 */
@interface GTLRCloudSearch_SquareProto : GTLRObject

/**
 *  The type of Square members to consider, e.g. "all members" vs. "owners" vs.
 *  "admins". These are defined by legacy_relation_id values in
 *  social.graph.storage.EdgeTypeEnum.EdgeType enum options in
 *  social/graph/storage/proto/id.proto. See square.pb (defined in
 *  production/config/cdd/socialgraph/mixer_config/prod/node_type_config) for
 *  all valid edge types associated with square. Currently required.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memberType;

/**
 *  Currently required.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *squareId;

@end


/**
 *  Start upload file request.
 */
@interface GTLRCloudSearch_StartUploadItemRequest : GTLRObject

/**
 *  The name of connector making this call. Format:
 *  datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudSearch_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudSearch_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudSearch_Status_Details_Item : GTLRObject
@end


/**
 *  GTLRCloudSearch_StoredParticipantId
 */
@interface GTLRCloudSearch_StoredParticipantId : GTLRObject

/**
 *  gaiaId
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *gaiaId;

@end


/**
 *  Information about a streaming session in conference.
 */
@interface GTLRCloudSearch_StreamingSessionInfo : GTLRObject

/**
 *  The application type of the current streaming session.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_StreamingSessionInfo_ApplicationType_Broadcast A
 *        meeting broadcast. (Value: "BROADCAST")
 *    @arg @c kGTLRCloudSearch_StreamingSessionInfo_ApplicationType_GliveStream
 *        A *Google Live* managed stream. (Value: "GLIVE_STREAM")
 *    @arg @c kGTLRCloudSearch_StreamingSessionInfo_ApplicationType_Recording A
 *        meeting recording saved to a video file in Google Drive. (Value:
 *        "RECORDING")
 *    @arg @c kGTLRCloudSearch_StreamingSessionInfo_ApplicationType_RecordingApplicationTypeUnspecified
 *        This is never used. (Value: "RECORDING_APPLICATION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *applicationType;

/**
 *  The latest streaming session event. This can be used by clients to help
 *  explain what is going on, why recording stopped, etc. This will always be
 *  set to a valid event and consistent with the status. It can be set when
 *  current session is inactive to indicate latest event that makes current
 *  session to become inactive.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SessionEvent *latestSessionEvent;

/**
 *  The display name of the owner of the recording output. It's only set when
 *  there will be uploaded recordings. Currently, it's only set when application
 *  type is RECORDING or GLIVE_STREAM.
 */
@property(nonatomic, copy, nullable) NSString *ownerDisplayName;

/**
 *  This is the REST name and unique identifier of this streaming session and
 *  has the form `spaces//recordings/` This is returned whenever status is
 *  either `STARTING` or `STARTED`.
 */
@property(nonatomic, copy, nullable) NSString *sessionId;

/**
 *  The current status of this streaming session. This can be used by clients to
 *  show session status indicator and/or notification.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_StreamingSessionInfo_Status_Inactive The
 *        streaming session is inactive. This means either it's not started yet
 *        or it's already stopped. (Value: "INACTIVE")
 *    @arg @c kGTLRCloudSearch_StreamingSessionInfo_Status_Live The streaming
 *        session is live. Any media sent to the conference may be included in
 *        the resulting recording/broadcast. (Value: "LIVE")
 *    @arg @c kGTLRCloudSearch_StreamingSessionInfo_Status_Starting The
 *        streaming session is about to begin. The status will be updated to
 *        LIVE when the streaming session actually starts, which happens when
 *        all the backend plumbing is set up. (Value: "STARTING")
 *    @arg @c kGTLRCloudSearch_StreamingSessionInfo_Status_StatusUnspecified
 *        This value is never used. (Value: "STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  When true, this recording may be used for training new transcription models.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainingEnabled;

/**
 *  The policy that controls who can view the broadcast. This setting applies
 *  for broadcast session.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_StreamingSessionInfo_ViewerAccessPolicy_BroadcastingAccessPolicyUnspecified
 *        Used only when broadcast is not enabled, or an unknown enum value is
 *        used. (Value: "BROADCASTING_ACCESS_POLICY_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_StreamingSessionInfo_ViewerAccessPolicy_Organization
 *        Only authenticated Google accounts belonging to the same organization
 *        as the meeting organizer can access the broadcast. (Value:
 *        "ORGANIZATION")
 *    @arg @c kGTLRCloudSearch_StreamingSessionInfo_ViewerAccessPolicy_Public
 *        Anyone with the broadcast view URL can access the broadcast. (Value:
 *        "PUBLIC")
 */
@property(nonatomic, copy, nullable) NSString *viewerAccessPolicy;

/**
 *  Contains information about viewers of the livestream. It is only set when
 *  application type is BROADCAST.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_StreamViewerStats *viewerStats;

@end


/**
 *  Information about viewers of the stream.
 */
@interface GTLRCloudSearch_StreamViewerStats : GTLRObject

/**
 *  The estimate of the current viewer count.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedViewerCount;

@end


/**
 *  A structured data object consisting of named properties.
 */
@interface GTLRCloudSearch_StructuredDataObject : GTLRObject

/** The properties for the object. The maximum number of elements is 1000. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_NamedProperty *> *properties;

@end


/**
 *  Structured results that are returned as part of search request.
 */
@interface GTLRCloudSearch_StructuredResult : GTLRObject

/** Representation of a person */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Person *person;

@end


/**
 *  Request of suggest API.
 */
@interface GTLRCloudSearch_SuggestRequest : GTLRObject

/**
 *  The sources to use for suggestions. If not specified, the data sources are
 *  taken from the current search application. NOTE: Suggestions are only
 *  supported for the following sources: * Third-party data sources *
 *  PredefinedSource.PERSON * PredefinedSource.GOOGLE_DRIVE
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_DataSourceRestriction *> *dataSourceRestrictions;

/**
 *  Partial query for which autocomplete suggestions will be shown. For example,
 *  if the query is "sea", then the server might return "season", "search",
 *  "seagull" and so on.
 */
@property(nonatomic, copy, nullable) NSString *query;

/** Request options, such as the search application and user timezone. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RequestOptions *requestOptions;

@end


/**
 *  Response of the suggest API.
 */
@interface GTLRCloudSearch_SuggestResponse : GTLRObject

/** List of suggestions. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_SuggestResult *> *suggestResults;

@end


/**
 *  One suggestion result.
 */
@interface GTLRCloudSearch_SuggestResult : GTLRObject

/**
 *  This is present when the suggestion indicates a person. It contains more
 *  information about the person - like their email ID, name etc.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_PeopleSuggestion *peopleSuggestion;

/**
 *  This field will be present if the suggested query is a word/phrase
 *  completion.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_QuerySuggestion *querySuggestion;

/** The source of the suggestion. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Source *source;

/**
 *  The suggested query that will be used for search, when the user clicks on
 *  the suggestion
 */
@property(nonatomic, copy, nullable) NSString *suggestedQuery;

@end


/**
 *  Urls with additional bot related information.
 */
@interface GTLRCloudSearch_SupportUrls : GTLRObject

/**
 *  Link to the admin configuration webpage for the bot. Configured by Pantheon,
 *  may be empty.
 */
@property(nonatomic, copy, nullable) NSString *adminConfigUrl;

/**
 *  Link to the deletion policy webpage for the bot. Configured by Pantheon, may
 *  be empty.
 */
@property(nonatomic, copy, nullable) NSString *deletionPolicyUrl;

/** Link to the privacy policy webpage for the bot. May be empty. */
@property(nonatomic, copy, nullable) NSString *privacyPolicyUrl;

/**
 *  Link to the setup webpage for the bot. Configured by Pantheon, may be empty.
 */
@property(nonatomic, copy, nullable) NSString *setupUrl;

/** Link to the support webpage for the developer of the bot. May be empty. */
@property(nonatomic, copy, nullable) NSString *supportUrl;

/** Link to the terms of service webpage for the bot. May be empty. */
@property(nonatomic, copy, nullable) NSString *tosUrl;

@end


/**
 *  GTLRCloudSearch_SwitchWidget
 */
@interface GTLRCloudSearch_SwitchWidget : GTLRObject

/**
 *  controlType
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_SwitchWidget_ControlType_Checkbox Value
 *        "CHECKBOX"
 *    @arg @c kGTLRCloudSearch_SwitchWidget_ControlType_Switch Value "SWITCH"
 *    @arg @c kGTLRCloudSearch_SwitchWidget_ControlType_Unspecified Value
 *        "UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *controlType;

/** The name of the switch widget which is will be used in FormInput. */
@property(nonatomic, copy, nullable) NSString *name;

@property(nonatomic, strong, nullable) GTLRCloudSearch_FormAction *onChange;

/**
 *  selected
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *selected;

/** The value is what is passed back in apps script callback. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  GTLRCloudSearch_TaskActionMarkup
 */
@interface GTLRCloudSearch_TaskActionMarkup : GTLRObject

/**
 *  reloadTasks
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reloadTasks;

@end


/**
 *  GTLRCloudSearch_TextButton
 */
@interface GTLRCloudSearch_TextButton : GTLRObject

/** The alternative text used for accessibility Next field number: 7. */
@property(nonatomic, copy, nullable) NSString *altText;

/**
 *  Optional color of the button's background in RAISE mode. The default is the
 *  secondary color from addon's manifest.
 */
@property(nonatomic, copy, nullable) NSString *backgroundColor;

/**
 *  disabled
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

@property(nonatomic, strong, nullable) GTLRCloudSearch_OnClick *onClick;

/**
 *  style
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_TextButton_Style_Filled Button with solid
 *        background. (Value: "FILLED")
 *    @arg @c kGTLRCloudSearch_TextButton_Style_Text Simple text button with
 *        ripple touch feedback. (Value: "TEXT")
 *    @arg @c kGTLRCloudSearch_TextButton_Style_Unspecified Value "UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *style;

/** Text color can be set via HTML markup. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  GTLRCloudSearch_TextField
 */
@interface GTLRCloudSearch_TextField : GTLRObject

/** The initial set of auto complete items without any user input. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AutoComplete *autoComplete;

/**
 *  The refresh function which returns AutoComplete based on the user's input
 *  text. If the callback is not specified, auto complete will be purely done in
 *  client side based on the auto_complete items.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_FormAction *autoCompleteCallback;

/**
 *  When set to true, a user can input multiple auto-complet items.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoCompleteMultipleSelections;

@property(nonatomic, copy, nullable) NSString *hintText;

/**
 *  One of label or hint_text is required to be specified by the developers.
 */
@property(nonatomic, copy, nullable) NSString *label;

/**
 *  maxLines
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxLines;

/** The name of the text field which is will be used in FormInput. */
@property(nonatomic, copy, nullable) NSString *name;

@property(nonatomic, strong, nullable) GTLRCloudSearch_FormAction *onChange;

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_TextField_Type_MultipleLine Value "MULTIPLE_LINE"
 *    @arg @c kGTLRCloudSearch_TextField_Type_SingleLine Value "SINGLE_LINE"
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The default value when no input from user. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  This is deprecated and please use KeyValue.
 */
@interface GTLRCloudSearch_TextKeyValue : GTLRObject

@property(nonatomic, copy, nullable) NSString *key;
@property(nonatomic, strong, nullable) GTLRCloudSearch_OnClick *onClick;
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Used to provide a search operator for text properties. This is optional.
 *  Search operators let users restrict the query to specific fields relevant to
 *  the type of item being searched.
 */
@interface GTLRCloudSearch_TextOperatorOptions : GTLRObject

/**
 *  If true, the text value is tokenized as one atomic value in operator
 *  searches and facet matches. For example, if the operator name is "genre" and
 *  the value is "science-fiction" the query restrictions "genre:science" and
 *  "genre:fiction" doesn't match the item; "genre:science-fiction" does. Text
 *  value matching is case-sensitive and does not remove special characters. If
 *  false, the text is tokenized. For example, if the value is "science-fiction"
 *  the queries "genre:science" and "genre:fiction" matches the item.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exactMatchWithOperator;

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  text property. For example, if operatorName is *subject* and the property's
 *  name is *subjectLine*, then queries like *subject:<value>* show results only
 *  where the value of the property named *subjectLine* matches *<value>*. By
 *  contrast, a search that uses the same *<value>* without an operator returns
 *  all items where *<value>* matches the value of any text properties or text
 *  within the content field for the item. The operator name can only contain
 *  lowercase letters (a-z). The maximum length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

@end


/**
 *  GTLRCloudSearch_TextParagraph
 */
@interface GTLRCloudSearch_TextParagraph : GTLRObject

@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  The options for text properties.
 */
@interface GTLRCloudSearch_TextPropertyOptions : GTLRObject

/** If set, describes how the property should be used as a search operator. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_TextOperatorOptions *operatorOptions;

/**
 *  Indicates the search quality importance of the tokens within the field when
 *  used for retrieval.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_RetrievalImportance *retrievalImportance;

@end


/**
 *  List of text values.
 */
@interface GTLRCloudSearch_TextValues : GTLRObject

/** The maximum allowable length for text values is 2048 characters. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  Used to provide a search operator for timestamp properties. This is
 *  optional. Search operators let users restrict the query to specific fields
 *  relevant to the type of item being searched.
 */
@interface GTLRCloudSearch_TimestampOperatorOptions : GTLRObject

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  timestamp property using the greater-than operator. For example, if
 *  greaterThanOperatorName is *closedafter* and the property's name is
 *  *closeDate*, then queries like *closedafter:<value>* show results only where
 *  the value of the property named *closeDate* is later than *<value>*. The
 *  operator name can only contain lowercase letters (a-z). The maximum length
 *  is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *greaterThanOperatorName;

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  timestamp property using the less-than operator. For example, if
 *  lessThanOperatorName is *closedbefore* and the property's name is
 *  *closeDate*, then queries like *closedbefore:<value>* show results only
 *  where the value of the property named *closeDate* is earlier than *<value>*.
 *  The operator name can only contain lowercase letters (a-z). The maximum
 *  length is 32 characters.
 */
@property(nonatomic, copy, nullable) NSString *lessThanOperatorName;

/**
 *  Indicates the operator name required in the query in order to isolate the
 *  timestamp property. For example, if operatorName is *closedon* and the
 *  property's name is *closeDate*, then queries like *closedon:<value>* show
 *  results only where the value of the property named *closeDate* matches
 *  *<value>*. By contrast, a search that uses the same *<value>* without an
 *  operator returns all items where *<value>* matches the value of any String
 *  properties or text within the content field for the item. The operator name
 *  can only contain lowercase letters (a-z). The maximum length is 32
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

@end


/**
 *  The options for timestamp properties.
 */
@interface GTLRCloudSearch_TimestampPropertyOptions : GTLRObject

/**
 *  If set, describes how the timestamp should be used as a search operator.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_TimestampOperatorOptions *operatorOptions;

@end


/**
 *  List of timestamp values.
 */
@interface GTLRCloudSearch_TimestampValues : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRDateTime *> *values;

@end


/**
 *  Tombstoning is the act of leaving a contextual trace when deleting a
 *  message. See more: go/tombstone-prd,
 *  go/hub-dynamite-tombstones-server-design-v2.
 */
@interface GTLRCloudSearch_TombstoneMetadata : GTLRObject

/**
 *  Indicates the type of Tombstone.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_TombstoneMetadata_TombstoneType_Admin The
 *        customer admin deleted a message in a space or DM owned by the
 *        customer. (go/chat-customer-owned-data) (Value: "ADMIN")
 *    @arg @c kGTLRCloudSearch_TombstoneMetadata_TombstoneType_AppMessageExpiry
 *        App scheduled deletion of their own message. See go/bme-dd. (Value:
 *        "APP_MESSAGE_EXPIRY")
 *    @arg @c kGTLRCloudSearch_TombstoneMetadata_TombstoneType_Creator User
 *        deleted their own message. (Value: "CREATOR")
 *    @arg @c kGTLRCloudSearch_TombstoneMetadata_TombstoneType_CreatorViaApp
 *        User deleted their own message via an app. See
 *        go/chat-api-delete-message. (Value: "CREATOR_VIA_APP")
 *    @arg @c kGTLRCloudSearch_TombstoneMetadata_TombstoneType_RoomOwner The
 *        space owner deleted a message in their space. (Value: "ROOM_OWNER")
 *    @arg @c kGTLRCloudSearch_TombstoneMetadata_TombstoneType_RoomOwnerViaApp
 *        The space owner deleted a message in their space via an app. See
 *        go/chat-api-delete-message. (Value: "ROOM_OWNER_VIA_APP")
 *    @arg @c kGTLRCloudSearch_TombstoneMetadata_TombstoneType_TombstoneUnspecified
 *        This should not be used. (Value: "TOMBSTONE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *tombstoneType;

@end


/**
 *  The Toolbar markup has been deprecated. The information is now specified in
 *  the manifest.
 */
@interface GTLRCloudSearch_Toolbar : GTLRObject

/** Background color of the toolbar in RBG hex representation. */
@property(nonatomic, copy, nullable) NSString *color;

@property(nonatomic, copy, nullable) NSString *iconUrl;
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  GTLRCloudSearch_TopicId
 */
@interface GTLRCloudSearch_TopicId : GTLRObject

/** The Space or DM that the topic belongs to. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_GroupId *groupId;

/**
 *  Opaque, server-assigned ID of the Topic. While this ID is guaranteed to be
 *  unique within the Space, it's not guaranteed to be globally unique. Internal
 *  usage: this field can be empty in the following cases: 1. To create the
 *  first message in a topic. 2. To list last N messages of a Space (regardless
 *  of topic).
 */
@property(nonatomic, copy, nullable) NSString *topicId;

@end


/**
 *  Information about a transcription session.
 */
@interface GTLRCloudSearch_TranscriptionSessionInfo : GTLRObject

/** Transcription session's state information. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SessionStateInfo *sessionStateInfo;

/** A unique server-generated ID for the transcription session. */
@property(nonatomic, copy, nullable) NSString *transcriptionSessionId;

@end


/**
 *  Transient generic data that will not be saved on the server.
 */
@interface GTLRCloudSearch_TransientData : GTLRObject
@end


/**
 *  Message containing a string that is safe to use in all URL contexts in DOM
 *  APIs and HTML documents; even where the referred-to resource is interpreted
 *  as code, e.g., as the src of a script element.
 */
@interface GTLRCloudSearch_TrustedResourceUrlProto : GTLRObject

/**
 *  IMPORTANT: Never set or read this field, even from tests, it is private. See
 *  documentation at the top of .proto file for programming language packages
 *  with which to create or read this message.
 */
@property(nonatomic, copy, nullable) NSString *privateDoNotAccessOrElseTrustedResourceUrlWrappedValue;

@end


/**
 *  Next tag: 2
 */
@interface GTLRCloudSearch_TypeInfo : GTLRObject

/** Contains additional video information only if document_type is VIDEO. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_VideoInfo *videoInfo;

@end


/**
 *  Universal phone access contains information required to dial into a
 *  conference using one of a static list of phone numbers and a universal PIN.
 *  The phone number list is distributed separately.
 */
@interface GTLRCloudSearch_UniversalPhoneAccess : GTLRObject

/**
 *  The PIN that users must enter after dialing a universal number. The pin
 *  consists of only decimal digits and the length may vary, though it generally
 *  is longer than a PhoneAccess.pin.
 */
@property(nonatomic, copy, nullable) NSString *pin;

/**
 *  This field has the same contents as the MeetingSpace.more_join_url field,
 *  and is included for compatibility reasons. Clients should use the other
 *  field instead. This field is deprecated and will be removed.
 */
@property(nonatomic, copy, nullable) NSString *pstnInfoUrl;

@end


/**
 *  GTLRCloudSearch_UnmappedIdentity
 */
@interface GTLRCloudSearch_UnmappedIdentity : GTLRObject

/** The resource name for an external user. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Principal *externalIdentity;

/**
 *  The resolution status for the external identity.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_CodeUnspecified
 *        Input-only value. Used to list all unmapped identities regardless of
 *        status. (Value: "CODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_IdentitySourceMisconfigured
 *        IDaaS does not understand the identity source, probably because the
 *        schema was modified in a non compatible way. (Value:
 *        "IDENTITY_SOURCE_MISCONFIGURED")
 *    @arg @c kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_IdentitySourceNotFound
 *        The identity source associated with the identity was either not found
 *        or deleted. (Value: "IDENTITY_SOURCE_NOT_FOUND")
 *    @arg @c kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_InternalError
 *        Internal error. (Value: "INTERNAL_ERROR")
 *    @arg @c kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_NotFound
 *        The unmapped identity was not found in IDaaS, and needs to be provided
 *        by the user. (Value: "NOT_FOUND")
 *    @arg @c kGTLRCloudSearch_UnmappedIdentity_ResolutionStatusCode_TooManyMappingsFound
 *        The number of users associated with the external identity is too
 *        large. (Value: "TOO_MANY_MAPPINGS_FOUND")
 */
@property(nonatomic, copy, nullable) NSString *resolutionStatusCode;

@end


/**
 *  GTLRCloudSearch_UnreserveItemsRequest
 */
@interface GTLRCloudSearch_UnreserveItemsRequest : GTLRObject

/**
 *  The name of connector making this call. Format:
 *  datasources/{source_id}/connectors/{ID}
 */
@property(nonatomic, copy, nullable) NSString *connectorName;

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

/** The name of a queue to unreserve items from. */
@property(nonatomic, copy, nullable) NSString *queue;

@end


/**
 *  GTLRCloudSearch_UpdateBccRecipients
 */
@interface GTLRCloudSearch_UpdateBccRecipients : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Recipient *> *bccRecipients;

@end


/**
 *  GTLRCloudSearch_UpdateBody
 */
@interface GTLRCloudSearch_UpdateBody : GTLRObject

/**
 *  A repeated field that contains a series of content to insert into the draft
 *  that the user is currently editing. The content can contain HTML content or
 *  plain text content.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_InsertContent *> *insertContents;

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_UpdateBody_Type_InPlaceInsert Indicates this
 *        action is to perform an in-place insertion. By default the content is
 *        inserted at the current cursor position, if there is selected content,
 *        it replaces the selected content. (Value: "IN_PLACE_INSERT")
 *    @arg @c kGTLRCloudSearch_UpdateBody_Type_InsertAtEnd Indicates this action
 *        is to perform insert at the end of the message body. (Value:
 *        "INSERT_AT_END")
 *    @arg @c kGTLRCloudSearch_UpdateBody_Type_InsertAtStart Indicates this
 *        action is to perform insert at the start of the message body. (Value:
 *        "INSERT_AT_START")
 *    @arg @c kGTLRCloudSearch_UpdateBody_Type_Replace Indicates this action is
 *        to replace the message body. (Value: "REPLACE")
 *    @arg @c kGTLRCloudSearch_UpdateBody_Type_UnspecifiedActionType Default
 *        value when nothing is set for Type. (Value: "UNSPECIFIED_ACTION_TYPE")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRCloudSearch_UpdateCcRecipients
 */
@interface GTLRCloudSearch_UpdateCcRecipients : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Recipient *> *ccRecipients;

@end


/**
 *  GTLRCloudSearch_UpdateDataSourceRequest
 */
@interface GTLRCloudSearch_UpdateDataSourceRequest : GTLRObject

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

@property(nonatomic, strong, nullable) GTLRCloudSearch_DataSource *source;

/**
 *  Only applies to
 *  [`settings.datasources.patch`](https://developers.google.com/cloud-search/docs/reference/rest/v1/settings.datasources/patch).
 *  Update mask to control which fields to update. Example field paths: `name`,
 *  `displayName`. * If `update_mask` is non-empty, then only the fields
 *  specified in the `update_mask` are updated. * If you specify a field in the
 *  `update_mask`, but don't specify its value in the source, that field is
 *  cleared. * If the `update_mask` is not present or empty or has the value
 *  `*`, then all fields are updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  GTLRCloudSearch_UpdateDraftActionMarkup
 */
@interface GTLRCloudSearch_UpdateDraftActionMarkup : GTLRObject

/**
 *  If set, replaces the existing Bcc recipients of the draft the user is
 *  currently editing.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UpdateBccRecipients *updateBccRecipients;

/**
 *  A field that contains a series of update actions to perform on the draft
 *  body that the user is currently editing.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UpdateBody *updateBody;

/**
 *  If set, replaces the existing Cc recipients of the draft the user is
 *  currently editing.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UpdateCcRecipients *updateCcRecipients;

/**
 *  If set, replaces the existing subject of the draft the user is currently
 *  editing.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UpdateSubject *updateSubject;

/**
 *  If set, replaces the existing To recipients of the draft the user is
 *  currently editing.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UpdateToRecipients *updateToRecipients;

@end


/**
 *  GTLRCloudSearch_UpdateSchemaRequest
 */
@interface GTLRCloudSearch_UpdateSchemaRequest : GTLRObject

/** Common debug options. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_DebugOptions *debugOptions;

/** The new schema for the source. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Schema *schema;

/**
 *  If true, the schema will be checked for validity, but will not be registered
 *  with the data source, even if valid.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *validateOnly;

@end


/**
 *  GTLRCloudSearch_UpdateSubject
 */
@interface GTLRCloudSearch_UpdateSubject : GTLRObject

@property(nonatomic, copy, nullable) NSString *subject;

@end


/**
 *  GTLRCloudSearch_UpdateToRecipients
 */
@interface GTLRCloudSearch_UpdateToRecipients : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Recipient *> *toRecipients;

@end


/**
 *  Represents an upload session reference. This reference is created via upload
 *  method. This reference is valid for 30 days after its creation. Updating of
 *  item content may refer to this uploaded content via contentDataRef.
 */
@interface GTLRCloudSearch_UploadItemRef : GTLRObject

/**
 *  The name of the content reference. The maximum length is 2048 characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Annotation metadata for user Upload artifacts.
 */
@interface GTLRCloudSearch_UploadMetadata : GTLRObject

/**
 *  Opaque token. Clients shall simply pass it back to the Backend. This field
 *  will NOT be saved into storage.
 */
@property(nonatomic, copy, nullable) NSString *attachmentToken;

/**
 *  Information about the uploaded attachment that is only used in Backend. This
 *  field will NOT be sent out of Google.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedBackendUploadMetadata *backendUploadMetadata;

/**
 *  The "new" secure identifier for Drive files. Should be used instead of the
 *  deprecated string drive_id field above. This should only be set if the
 *  upload file has been added to Drive. Note that older Drive files that do not
 *  have a ResourceKey should still use this field, with the resource_key field
 *  unset.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AuthorizedItemId *clonedAuthorizedItemId;

/**
 *  DriveAction for organizing the cloned version of this upload in Drive, if
 *  the file has been added to Drive. This field is not set if the file has not
 *  been added to Drive. Additionally, this field is only set when part of a
 *  FileResult in a ListFilesResponse.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_UploadMetadata_ClonedDriveAction_AddAnotherShortcut
 *        Show "Add another shortcut" button, for Drive files the user has
 *        already created a shortcut to. (Value: "ADD_ANOTHER_SHORTCUT")
 *    @arg @c kGTLRCloudSearch_UploadMetadata_ClonedDriveAction_AddShortcut Show
 *        "Add shortcut" button, for adding a shortcut to a Drive file the user
 *        does not have permission to move. (Value: "ADD_SHORTCUT")
 *    @arg @c kGTLRCloudSearch_UploadMetadata_ClonedDriveAction_AddToDrive Show
 *        "Add to Drive" button, for adding file that doesn't exist in Drive to
 *        Drive. Note that deleted Drive files that still exist (i.e. in your
 *        Trash) will still be ORGANIZE (this is consistent with Gmail Drive
 *        attachments). (Value: "ADD_TO_DRIVE")
 *    @arg @c kGTLRCloudSearch_UploadMetadata_ClonedDriveAction_DriveActionUnspecified
 *        No organize action should be shown. (Value:
 *        "DRIVE_ACTION_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_UploadMetadata_ClonedDriveAction_Organize Show
 *        "Move" button, for organizing a Drive file the user has permission to
 *        move. (Value: "ORGANIZE")
 */
@property(nonatomic, copy, nullable) NSString *clonedDriveAction;

/**
 *  Reference to a Drive ID, if this upload file has been previously cloned to
 *  Drive. Note: this is deprecated in favor of the AuthorizedItemId below.
 */
@property(nonatomic, copy, nullable) NSString *clonedDriveId;

/** The original file name for the content, not the full path. */
@property(nonatomic, copy, nullable) NSString *contentName;

/**
 *  Type is from Scotty's best_guess by default:
 *  http://google3/uploader/agent/scotty_agent.proto?l=51&rcl=140889785
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/** The metrics metadata of the Data Loss Prevention attachment scan. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedDlpMetricsMetadata *dlpMetricsMetadata;

/**
 *  A copy of the LocalId in Annotation. This field is supposed to be filled by
 *  server only.
 */
@property(nonatomic, copy, nullable) NSString *localId;

/** Original dimension of the content. Only set for image attachments. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedDimension *originalDimension;

/**
 *  Reference to a transcoded video attachment. Only set for video attachments.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedVideoReference *videoReference;

/**
 *  Result for a virus scan. It's duplicated in the above field
 *  apps.dynamite.shared.BackendUploadMetadata
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_UploadMetadata_VirusScanResult_Clean Value
 *        "CLEAN"
 *    @arg @c kGTLRCloudSearch_UploadMetadata_VirusScanResult_Error Value
 *        "ERROR"
 *    @arg @c kGTLRCloudSearch_UploadMetadata_VirusScanResult_Infected Value
 *        "INFECTED"
 *    @arg @c kGTLRCloudSearch_UploadMetadata_VirusScanResult_PolicyViolation
 *        The document violates Google's policy for executables and archives.
 *        (Value: "POLICY_VIOLATION")
 *    @arg @c kGTLRCloudSearch_UploadMetadata_VirusScanResult_UnknownVirusScanResult
 *        Value "UNKNOWN_VIRUS_SCAN_RESULT"
 */
@property(nonatomic, copy, nullable) NSString *virusScanResult;

@end


/**
 *  Annotation metadata for a Weblink. In case of pasted link it can qualify to
 *  be other types in addition to being a URL - like DRIVE_DOC/DRIVE_SHEET and
 *  so on. The URL metadata will also be present and it's up to the client to
 *  decide which metadata to render it with. These fields are filled in using
 *  page render service.
 */
@interface GTLRCloudSearch_UrlMetadata : GTLRObject

/** Domain for this url. If it's an IP address the address is returned. */
@property(nonatomic, copy, nullable) NSString *domain;

/** The signed GWS URL. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SafeUrlProto *gwsUrl;

/**
 *  The expiration timestamp for GWS URL, only set when gws_url is set.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *gwsUrlExpirationTimestamp;

/**
 *  Dimensions of the image: height. This field is string to match with page
 *  render service response. Deprecated. Use int_image_height instead.
 */
@property(nonatomic, copy, nullable) NSString *imageHeight;

/** Representative image of the website. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/**
 *  Dimensions of the image: width. This field is string to match with page
 *  render service response. Deprecated. Use int_image_height instead.
 */
@property(nonatomic, copy, nullable) NSString *imageWidth;

/**
 *  Dimensions of the image: height.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *intImageHeight;

/**
 *  Dimensions of the image: width.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *intImageWidth;

/**
 *  NEXT TAG : 18
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_UrlMetadata_LinkType_AutoDetectedPlainText Set by
 *        the server, when it detects a URL in the message text (Value:
 *        "AUTO_DETECTED_PLAIN_TEXT")
 *    @arg @c kGTLRCloudSearch_UrlMetadata_LinkType_Markdown Set by the server,
 *        when it detects a URL in markdown-syntax in the message text (Value:
 *        "MARKDOWN")
 *    @arg @c kGTLRCloudSearch_UrlMetadata_LinkType_NoAssociatedText Set by the
 *        server when a URL annotation received from client has 0 length and 0
 *        start index (Value: "NO_ASSOCIATED_TEXT")
 *    @arg @c kGTLRCloudSearch_UrlMetadata_LinkType_RichText Set by the client,
 *        when the user adds a link via the rich-text editing (RTE) toolbar
 *        (Value: "RICH_TEXT")
 *    @arg @c kGTLRCloudSearch_UrlMetadata_LinkType_Undefined Value "UNDEFINED"
 */
@property(nonatomic, copy, nullable) NSString *linkType;

/**
 *  Mime type of the content (Currently mapped from Page Render Service
 *  ItemType) Note that this is not necessarily the mime type of the http
 *  resource. For example a text/html from youtube or vimeo may actually be
 *  classified as a video type. Then we shall mark it as video/ * since we don't
 *  know exactly what type of video it is.
 */
@property(nonatomic, copy, nullable) NSString *mimeType;

/** The stable redirect URL pointing to frontend server. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SafeUrlProto *redirectUrl;

/**
 *  If the UrlMetadata is missing data for rendering a chip. Deprecated. Use
 *  Annotation.ChipRenderType instead.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shouldNotRender;

/** Snippet/small description of the weblink. */
@property(nonatomic, copy, nullable) NSString *snippet;

/** Title of the Weblink. */
@property(nonatomic, copy, nullable) NSString *title;

/** The original URL. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SafeUrlProto *url;

/**
 *  urlSource
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_UrlMetadata_UrlSource_ServerSuppliedPolicyViolation
 *        Value "SERVER_SUPPLIED_POLICY_VIOLATION"
 *    @arg @c kGTLRCloudSearch_UrlMetadata_UrlSource_UrlSourceUnknown Value
 *        "URL_SOURCE_UNKNOWN"
 *    @arg @c kGTLRCloudSearch_UrlMetadata_UrlSource_UserSuppliedUrl Value
 *        "USER_SUPPLIED_URL"
 */
@property(nonatomic, copy, nullable) NSString *urlSource;

@end


/**
 *  User profile information. This user is not necessarily member of a space.
 */
@interface GTLRCloudSearch_User : GTLRObject

/** URL for the avatar picture of the User in dynamite */
@property(nonatomic, copy, nullable) NSString *avatarUrl;

/**
 *  Information about whether the user is blocked by requester and/or has
 *  blocked requester.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedUserBlockRelationship *blockRelationship;

/** Bot-specific profile information. Leave it empty for human users. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_BotInfo *botInfo;

/**
 *  Deleted flag, if true, means User has been soft-deleted/purged Deprecated.
 *  Use user_account_state field instead.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleted;

/** Email ID of the user */
@property(nonatomic, copy, nullable) NSString *email;

/** First or given name of the user */
@property(nonatomic, copy, nullable) NSString *firstName;

/** Gender of the user */
@property(nonatomic, copy, nullable) NSString *gender;

/**
 *  UserId
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *identifier;

/**
 *  Set to true if none of the depending services (Gaia, PeopleApi) returns any
 *  info for this user.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isAnonymous;

/** Last or family name of the user */
@property(nonatomic, copy, nullable) NSString *lastName;

/** Non-unique, user-defined display name of the User */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Information about whether the user is a consumer user, or the GSuite
 *  customer that they belong to.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppsDynamiteSharedOrganizationInfo *organizationInfo;

/** Phone number(s) of the user */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_AppsDynamiteSharedPhoneNumber *> *phoneNumber;

/**
 *  State of user's Gaia Account
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_User_UserAccountState_Deleted User account is
 *        deleted (Value: "DELETED")
 *    @arg @c kGTLRCloudSearch_User_UserAccountState_Disabled User doesn't have
 *        Dynamite enabled. This includes service disabled by admin, or user's
 *        account is suspended (Value: "DISABLED")
 *    @arg @c kGTLRCloudSearch_User_UserAccountState_Enabled User has Dynamite
 *        enabled. (Value: "ENABLED")
 *    @arg @c kGTLRCloudSearch_User_UserAccountState_TemporaryUnavailable Failed
 *        to retrieve user's info. Will use user's email address as name and
 *        first_name. (Value: "TEMPORARY_UNAVAILABLE")
 *    @arg @c kGTLRCloudSearch_User_UserAccountState_UnknownUserAccountState
 *        Value "UNKNOWN_USER_ACCOUNT_STATE"
 */
@property(nonatomic, copy, nullable) NSString *userAccountState;

/**
 *  Visibility of user's Profile
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_User_UserProfileVisibility_DeletedUser Caller can
 *        only see the target user as a deleted user. Email is empty. Names are
 *        redacted as "Deleted User". (Value: "DELETED_USER")
 *    @arg @c kGTLRCloudSearch_User_UserProfileVisibility_Failure Stubby failed.
 *        Clients should always retry ASAP (Value: "FAILURE")
 *    @arg @c kGTLRCloudSearch_User_UserProfileVisibility_FullProfile Caller has
 *        full visibility. (Value: "FULL_PROFILE")
 *    @arg @c kGTLRCloudSearch_User_UserProfileVisibility_InviteeEmail Caller
 *        can only see the email used to invite the target user (Value:
 *        "INVITEE_EMAIL")
 *    @arg @c kGTLRCloudSearch_User_UserProfileVisibility_PrimaryMail Caller can
 *        only see target user's primary email from Gaia (Value: "PRIMARY_MAIL")
 *    @arg @c kGTLRCloudSearch_User_UserProfileVisibility_UnknownUser Caller has
 *        no visibility to the target user at all. Email is empty. Names are
 *        redacted as "Unknown User". (Value: "UNKNOWN_USER")
 *    @arg @c kGTLRCloudSearch_User_UserProfileVisibility_UnknownUserProfileVisibility
 *        Value "UNKNOWN_USER_PROFILE_VISIBILITY"
 */
@property(nonatomic, copy, nullable) NSString *userProfileVisibility;

@end


/**
 *  Resource for displaying user info
 */
@interface GTLRCloudSearch_UserDisplayInfo : GTLRObject

/** The avatar to show for this user */
@property(nonatomic, copy, nullable) NSString *avatarUrl;

/** The name to show for this user */
@property(nonatomic, copy, nullable) NSString *displayName;

@end


/**
 *  Primary key for User resource.
 */
@interface GTLRCloudSearch_UserId : GTLRObject

/**
 *  Optional. Opaque, server-assigned ID of the user profile associated with
 *  App/user acting on behalf of the human user. This is currently only set when
 *  a 3P application is acting on the user's behalf.
 */
@property(nonatomic, copy, nullable) NSString *actingUserId;

/**
 *  Opaque, server-assigned ID of the User.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Optional. Identifier of the App involved (directly or on behalf of a human
 *  creator) in creating this message. This is not set if the user posted a
 *  message directly, but is used in the case of, for example, a message being
 *  generated by a 1P integration based on a user action (creating an event,
 *  creating a task etc). This should only be used on the BE. For clients,
 *  please use the field in the FE message proto instead
 *  (google3/apps/dynamite/v1/frontend/api/message.proto?q=origin_app_id).
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_AppId *originAppId;

/**
 *  Clients do not need to send UserType to Backend, but Backend will always
 *  send this field to clients per the following rule: 1. For HUMAN Ids, the
 *  field is empty but by default .getType() will return HUMAN. 2. For BOT Ids,
 *  the field is ALWAYS set to BOT.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_UserId_Type_Bot Value "BOT"
 *    @arg @c kGTLRCloudSearch_UserId_Type_Human Notes on HUMAN type: 1) Leaving
 *        UserId.UserType field empty will return HUMAN as default value. This
 *        is expected because all the existing UserIds are without explicitly
 *        setting UserType, most of which are HUMAN Ids. For Bot Ids we will
 *        always set BOT in UserType field. 2) DO NOT explicitly set HUMAN as
 *        type. This is a proto2 issue, that a UserId with explicitly set
 *        default value HUMAN as type is NOT equal to an id without setting the
 *        field. aka. UserId id1 = UserId.newBuilder()
 *        .setId("dummy").setType(UserType.HUMAN).build(); UserId id2 =
 *        UserId.newBuilder().setId("dummy").build();
 *        AssertThat(id1).isNotEqual(id2);
 *        AssertThat(id2.getType()).isEqualTo(UserType.HUMAN); (Value: "HUMAN")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Contains info regarding the updater of an Activity Feed item. Next Id: 8
 */
@interface GTLRCloudSearch_UserInfo : GTLRObject

/**
 *  Avatar url of the user who triggered the Drive Notification email. This
 *  field will be populated if we can extract such information from the Drive
 *  Notification email. This should only be used to fetch user avatars when
 *  updater_to_show_email is not populated. This field is not set for non-Drive
 *  Notification items.
 */
@property(nonatomic, copy, nullable) NSString *driveNotificationAvatarUrl;

/**
 *  Describes how updater_count_to_show should be used.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_UserInfo_UpdaterCountDisplayType_ExactCount A
 *        precise updater count is known and the value set in
 *        updater_count_to_show should be used. If set, updater_count_to_show is
 *        set to the total number of updaters minus the one set in
 *        updater_to_show. Shows up in clients as "$USERNAME and $NUM others
 *        replied". (Value: "EXACT_COUNT")
 *    @arg @c kGTLRCloudSearch_UserInfo_UpdaterCountDisplayType_NoDisplayCount
 *        No additional updaters where involved. Shows up in clients as
 *        "$USERNAME replied". (Value: "NO_DISPLAY_COUNT")
 *    @arg @c kGTLRCloudSearch_UserInfo_UpdaterCountDisplayType_NonzeroCount A
 *        precise updater count could not be calculated, but there is at least
 *        one. Any value set in updater_count_to_show should NOT be used. Shows
 *        up in clients as "$USERNAME and others replied". (Value:
 *        "NONZERO_COUNT")
 *    @arg @c kGTLRCloudSearch_UserInfo_UpdaterCountDisplayType_UpdaterCountDisplayTypeUnspecified
 *        Value "UPDATER_COUNT_DISPLAY_TYPE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *updaterCountDisplayType;

/**
 *  The number of updaters for clients to show depending on
 *  UpdaterCountDisplayType.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *updaterCountToShow;

/**
 *  The email of the updater for clients to show used for Gmail items. For Drive
 *  Notifications, this is the email of the user who triggered the Drive
 *  Notification email. This field will be populated if we can extract such
 *  information from the Drive Notification email. This is not the actual sender
 *  of the email, as the sender is always comments-noreply\@docs.google.com.
 */
@property(nonatomic, copy, nullable) NSString *updaterToShowEmail;

/**
 *  The gaia id of the updater for clients to show used for Gmail items. If the
 *  updater is an external user, the email field below should be populated.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *updaterToShowGaiaId;

/**
 *  The display name of the updater for clients to show used for Gmail items.
 *  For non-Drive Notification items, this field will always be populated. If
 *  the display name cannot be found for the user, the fallback string will be
 *  the email address. For Drive Notification items, this is the name of the
 *  user who triggered the Drive notification email. This field will be
 *  populated if we can extract such information from the Drive Notification
 *  email. If the name cannot be extracted, then the email will be the fallback
 *  string, which is used as the display name text in the UI when needed. This
 *  is not the actual sender of the email, as the sender is always
 *  comments-noreply\@docs.google.com.
 */
@property(nonatomic, copy, nullable) NSString *updaterToShowName;

/** The updater for clients to show used for Dynamite Chat items. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *updaterToShowUserId;

@end


/**
 *  Person metadata, for USER_MENTION segments. Should always contain at least
 *  one of user_gaia_id, user_id, email or user. The exact set of populated
 *  fields may differ depending on the context and the level in the serving
 *  stack; for example, emails will be elided on the viewing path. But as a
 *  general rule, a proto having any one of the four is valid, subject to the
 *  standard constraints of the applied annotations -- that is, communication
 *  between servers and clients will ignore jspb.ignore fields, and
 *  communication between servers and other servers (or between servers and
 *  storage) will ignore client_only fields. For more on the annotations, see
 *  the comments in social/common/segment_annotations.proto
 */
@interface GTLRCloudSearch_UserMentionData : GTLRObject

@property(nonatomic, copy, nullable) NSString *email;

/**
 *  If the principal is backed by a gaia id, DO NOT use this field. Use
 *  user_gaia_id/user_id fields instead.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_PrincipalProto *user;

/**
 *  An unobfuscated gaia ID:
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *userGaiaId;

/** An obfuscated gaia ID: */
@property(nonatomic, copy, nullable) NSString *userId;

@end


/**
 *  Annotation metadata for user mentions (+/\@/-).
 */
@interface GTLRCloudSearch_UserMentionMetadata : GTLRObject

/**
 *  Display name of the mentioned user. This field should remain empty when
 *  clients resolve a UserMention annotation. It will be filled in when a
 *  UserMention is generated by the Integration Server.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Gender of the mentioned user. One of "female", "male" or "other". Used for
 *  choosing accurate translations for strings that contain the UserMention,
 *  when these need to be constructed (e.g. task assignment update message).
 *  This field should remain empty when clients resolve a UserMention. It will
 *  be filled in when a UserMention is generated by the Integration Server.
 */
@property(nonatomic, copy, nullable) NSString *gender;

/**
 *  To be deprecated. Use invitee_info field instead. ID of the User mentioned.
 *  This field should remain empty when type == MENTION_ALL.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_UserId *identifier;

/**
 *  Invitee UserId and email used when mentioned. This field should remain empty
 *  when type == MENTION_ALL. Invitee_info.email is only used when a user is
 *  \@-mentioned with an email address, and it will be empty when clients get
 *  messages from Backend.
 */
@property(nonatomic, strong, nullable) GTLRCloudSearch_InviteeInfo *inviteeInfo;

/**
 *  type
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_UserMentionMetadata_Type_FailedToAdd
 *        Server-generated user mention, for clients to strikethrough. (Value:
 *        "FAILED_TO_ADD")
 *    @arg @c kGTLRCloudSearch_UserMentionMetadata_Type_Invite Value "INVITE"
 *    @arg @c kGTLRCloudSearch_UserMentionMetadata_Type_Mention Value "MENTION"
 *    @arg @c kGTLRCloudSearch_UserMentionMetadata_Type_MentionAll Value
 *        "MENTION_ALL"
 *    @arg @c kGTLRCloudSearch_UserMentionMetadata_Type_TypeUnspecified Default
 *        value for the enum. DO NOT USE. (Value: "TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudSearch_UserMentionMetadata_Type_Uninvite Value
 *        "UNINVITE"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Definition of a single value with generic type.
 */
@interface GTLRCloudSearch_Value : GTLRObject

/**
 *  booleanValue
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *booleanValue;

@property(nonatomic, strong, nullable) GTLRCloudSearch_Date *dateValue;

/**
 *  doubleValue
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *doubleValue;

/**
 *  integerValue
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *integerValue;

@property(nonatomic, copy, nullable) NSString *stringValue;
@property(nonatomic, strong, nullable) GTLRDateTime *timestampValue;

@end


/**
 *  GTLRCloudSearch_ValueFilter
 */
@interface GTLRCloudSearch_ValueFilter : GTLRObject

/**
 *  The `operator_name` applied to the query, such as *price_greater_than*. The
 *  filter can work against both types of filters defined in the schema for your
 *  data source: 1. `operator_name`, where the query filters results by the
 *  property that matches the value. 2. `greater_than_operator_name` or
 *  `less_than_operator_name` in your schema. The query filters the results for
 *  the property values that are greater than or less than the supplied value in
 *  the query.
 */
@property(nonatomic, copy, nullable) NSString *operatorName;

/** The value to be compared with. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Value *value;

@end


/**
 *  GTLRCloudSearch_VideoCallMetadata
 */
@interface GTLRCloudSearch_VideoCallMetadata : GTLRObject

/** Thor meeting space. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_MeetingSpace *meetingSpace;

/**
 *  If this field is set to true, server should still contact external backends
 *  to get metadata for search but clients should not render this chip.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shouldNotRender;

/**
 *  Whether this meeting space was created via Dynamite in this Dynamite group.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wasCreatedInCurrentGroup;

@end


/**
 *  Next tag: 2
 */
@interface GTLRCloudSearch_VideoInfo : GTLRObject

/**
 *  Duration of the video in milliseconds. This field can be absent for recently
 *  uploaded video or inaccurate sometimes.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *duration;

@end


/**
 *  Represents both long and short phone number that can be called or texted.
 *  Short telephone numbers are used to reach local services. Short numbers and
 *  their purpose differ from country to country. These numbers in US are in the
 *  form of N11 which is a three-digit abbreviated dialing telephone number.
 */
@interface GTLRCloudSearch_VoicePhoneNumber : GTLRObject

/**
 *  E.164 formatted full phone number with leading +. This field also represents
 *  encoded form of short telephone numbers in E.164 format. e.g. "911" is
 *  encoded as "+1911".
 */
@property(nonatomic, copy, nullable) NSString *e164;

/** Additional data that could be added using the libphonenumber API. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_VoicePhoneNumberI18nData *i18nData;

@end


/**
 *  GTLRCloudSearch_VoicePhoneNumberI18nData
 */
@interface GTLRCloudSearch_VoicePhoneNumberI18nData : GTLRObject

/**
 *  The country calling code for this number, as defined by the ITU. For
 *  example, this would be 1 for NANPA countries, and 33 for France (for more
 *  info see i18n.phonenumbers.PhoneNumber.country_code).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *countryCode;

/** Display number formatted using the INTERNATIONAL format. */
@property(nonatomic, copy, nullable) NSString *internationalNumber;

/**
 *  When present, indicates the number is valid according to the
 *  libphonenumber's isValidNumber API (see
 *  https://code.google.com/p/libphonenumber/).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isValid;

/** Display number formatted using the NATIONAL format. */
@property(nonatomic, copy, nullable) NSString *nationalNumber;

/**
 *  A region (country, territory, continent, etc), as defined by Unicode's
 *  "CLDR", itself based on ISO 3166 (UN country codes). For details, see
 *  https://www.corp.google.com/~engdocs/java/com/google/i18n/identifiers/RegionCode.html
 */
@property(nonatomic, copy, nullable) NSString *regionCode;

/**
 *  When set to a non-default value, indicates the validation reason that is set
 *  when phone number is invalid (is_valid is false).
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_VoicePhoneNumberI18nData_ValidationResult_InvalidCountryCode
 *        Value "INVALID_COUNTRY_CODE"
 *    @arg @c kGTLRCloudSearch_VoicePhoneNumberI18nData_ValidationResult_InvalidLength
 *        Value "INVALID_LENGTH"
 *    @arg @c kGTLRCloudSearch_VoicePhoneNumberI18nData_ValidationResult_IsPossible
 *        Value "IS_POSSIBLE"
 *    @arg @c kGTLRCloudSearch_VoicePhoneNumberI18nData_ValidationResult_IsPossibleLocalOnly
 *        Value "IS_POSSIBLE_LOCAL_ONLY"
 *    @arg @c kGTLRCloudSearch_VoicePhoneNumberI18nData_ValidationResult_TooLong
 *        Value "TOO_LONG"
 *    @arg @c kGTLRCloudSearch_VoicePhoneNumberI18nData_ValidationResult_TooShort
 *        Value "TOO_SHORT"
 *    @arg @c kGTLRCloudSearch_VoicePhoneNumberI18nData_ValidationResult_Unknown
 *        Value "UNKNOWN"
 */
@property(nonatomic, copy, nullable) NSString *validationResult;

@end


/**
 *  GTLRCloudSearch_VPCSettings
 */
@interface GTLRCloudSearch_VPCSettings : GTLRObject

/**
 *  The resource name of the GCP Project to be used for VPC SC policy check. VPC
 *  security settings on this project will be honored for Cloud Search APIs
 *  after project_name has been updated through CustomerService. Format:
 *  projects/{project_id}
 */
@property(nonatomic, copy, nullable) NSString *project;

@end


/**
 *  Information on a whiteboard attached to an active conference. A whiteboard
 *  is a Jam document.
 */
@interface GTLRCloudSearch_WhiteboardInfo : GTLRObject

/**
 *  The Cosmo Id of the whiteboard document (Jam).
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Title of the whiteboard document. */
@property(nonatomic, copy, nullable) NSString *title;

/** The uri for whiteboard document. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  GTLRCloudSearch_WidgetMarkup
 */
@interface GTLRCloudSearch_WidgetMarkup : GTLRObject

/** buttons is also oneof data and only one of these fields should be set. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudSearch_Button *> *buttons;

@property(nonatomic, strong, nullable) GTLRCloudSearch_DateTimePicker *dateTimePicker;
@property(nonatomic, strong, nullable) GTLRCloudSearch_Divider *divider;
@property(nonatomic, strong, nullable) GTLRCloudSearch_Grid *grid;

/**
 *  The horizontal alignment of this widget.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudSearch_WidgetMarkup_HorizontalAlignment_Center Value
 *        "CENTER"
 *    @arg @c kGTLRCloudSearch_WidgetMarkup_HorizontalAlignment_End Value "END"
 *    @arg @c kGTLRCloudSearch_WidgetMarkup_HorizontalAlignment_HorizontalAlignmentUnspecified
 *        Value "HORIZONTAL_ALIGNMENT_UNSPECIFIED"
 *    @arg @c kGTLRCloudSearch_WidgetMarkup_HorizontalAlignment_Start Value
 *        "START"
 */
@property(nonatomic, copy, nullable) NSString *horizontalAlignment;

@property(nonatomic, strong, nullable) GTLRCloudSearch_Image *image;
@property(nonatomic, strong, nullable) GTLRCloudSearch_ImageKeyValue *imageKeyValue;
@property(nonatomic, strong, nullable) GTLRCloudSearch_KeyValue *keyValue;

/** Input Widgets */
@property(nonatomic, strong, nullable) GTLRCloudSearch_Menu *menu;

@property(nonatomic, strong, nullable) GTLRCloudSearch_SelectionControl *selectionControl;
@property(nonatomic, strong, nullable) GTLRCloudSearch_TextField *textField;
@property(nonatomic, strong, nullable) GTLRCloudSearch_TextKeyValue *textKeyValue;

/** Read-only Widgets */
@property(nonatomic, strong, nullable) GTLRCloudSearch_TextParagraph *textParagraph;

@end


/**
 *  A wrapper around a raw resource key. The secret should never be logged, and
 *  this proto annotates those secret fields to ensure that they are not.
 *  Clients are encouraged to use this proto rather than defining their own, to
 *  ensure that secrets are correctly annotated.
 */
@interface GTLRCloudSearch_WrappedResourceKey : GTLRObject

/**
 *  Resource key of the Drive item. This field should be unset if, depending on
 *  the context, the item does not have a resource key, or if none was
 *  specified. This must never be logged.
 */
@property(nonatomic, copy, nullable) NSString *resourceKey;

@end


/**
 *  Information about a YouTube broadcast session.
 */
@interface GTLRCloudSearch_YouTubeBroadcastSessionInfo : GTLRObject

/** Current broadcast session's statistics. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_YouTubeBroadcastStats *broadcastStats;

/** YouTube broadcast session's state information. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_SessionStateInfo *sessionStateInfo;

/** A unique server-generated ID for the broadcast session. */
@property(nonatomic, copy, nullable) NSString *youTubeBroadcastSessionId;

/** The YouTube Live broadcast event that is being streamed to. */
@property(nonatomic, strong, nullable) GTLRCloudSearch_YouTubeLiveBroadcastEvent *youTubeLiveBroadcastEvent;

@end


/**
 *  Statistics of the YouTube broadcast session.
 */
@interface GTLRCloudSearch_YouTubeBroadcastStats : GTLRObject

/**
 *  Estimated concurrent viewer count.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *estimatedViewerCount;

@end


/**
 *  Information about the broadcast to YouTube.
 */
@interface GTLRCloudSearch_YouTubeLiveBroadcastEvent : GTLRObject

/**
 *  Input only. The broadcast id, used to control the lifecycle of the event on
 *  YouTube
 */
@property(nonatomic, copy, nullable) NSString *broadcastId;

/** YouTube channel associated with the broadcast. */
@property(nonatomic, copy, nullable) NSString *channelId;

/**
 *  Output only. A URL that can be used to watch the meeting broadcast. Will be
 *  populated by the backend.
 */
@property(nonatomic, copy, nullable) NSString *viewUrl;

@end


/**
 *  Annotation metadata for YouTube artifact.
 */
@interface GTLRCloudSearch_YoutubeMetadata : GTLRObject

/**
 *  YouTube resource ID of the artifact.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  If this field is set to true, server should still contact external backends
 *  to get metadata for search but clients should not render this chip.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *shouldNotRender;

/**
 *  YouTube query parameter for timestamp. YouTube specific flag that allows
 *  users to embed time token when sharing a link. This property contains parsed
 *  time token in seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startTime;

@end


/**
 *  GTLRCloudSearch_YoutubeUserProto
 */
@interface GTLRCloudSearch_YoutubeUserProto : GTLRObject

/**
 *  youtubeUserId
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *youtubeUserId;

@end


/**
 *  See go/zwieback. New uses of Zwieback sessions must be approved via
 *  go/zwieback-request.
 */
@interface GTLRCloudSearch_ZwiebackSessionProto : GTLRObject

/**
 *  zwiebackSessionId
 *
 *  Uses NSNumber of unsignedLongLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *zwiebackSessionId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
