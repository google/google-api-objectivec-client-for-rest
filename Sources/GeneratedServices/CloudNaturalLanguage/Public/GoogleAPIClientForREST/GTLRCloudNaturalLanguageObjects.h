// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Natural Language API (language/v2)
// Description:
//   Provides natural language understanding technologies, such as sentiment
//   analysis, entity recognition, entity sentiment analysis, and other text
//   annotations, to developers.
// Documentation:
//   https://cloud.google.com/natural-language/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudNaturalLanguage_ClassificationCategory;
@class GTLRCloudNaturalLanguage_Document;
@class GTLRCloudNaturalLanguage_Entity;
@class GTLRCloudNaturalLanguage_Entity_Metadata;
@class GTLRCloudNaturalLanguage_EntityMention;
@class GTLRCloudNaturalLanguage_Features;
@class GTLRCloudNaturalLanguage_Sentence;
@class GTLRCloudNaturalLanguage_Sentiment;
@class GTLRCloudNaturalLanguage_Status_Details_Item;
@class GTLRCloudNaturalLanguage_TextSpan;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_AnalyzeEntitiesRequest.encodingType

/**
 *  If `EncodingType` is not specified, encoding-dependent information (such as
 *  `begin_offset`) will be set at `-1`.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_None;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-16 encoding of the input. Java and JavaScript are examples of
 *  languages that use this encoding natively.
 *
 *  Value: "UTF16"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf16;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-32 encoding of the input. Python is an example of a language that
 *  uses this encoding natively.
 *
 *  Value: "UTF32"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf32;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-8 encoding of the input. C++ and Go are examples of languages
 *  that use this encoding natively.
 *
 *  Value: "UTF8"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf8;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_AnalyzeSentimentRequest.encodingType

/**
 *  If `EncodingType` is not specified, encoding-dependent information (such as
 *  `begin_offset`) will be set at `-1`.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_None;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-16 encoding of the input. Java and JavaScript are examples of
 *  languages that use this encoding natively.
 *
 *  Value: "UTF16"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf16;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-32 encoding of the input. Python is an example of a language that
 *  uses this encoding natively.
 *
 *  Value: "UTF32"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf32;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-8 encoding of the input. C++ and Go are examples of languages
 *  that use this encoding natively.
 *
 *  Value: "UTF8"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf8;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_AnnotateTextRequest.encodingType

/**
 *  If `EncodingType` is not specified, encoding-dependent information (such as
 *  `begin_offset`) will be set at `-1`.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_None;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-16 encoding of the input. Java and JavaScript are examples of
 *  languages that use this encoding natively.
 *
 *  Value: "UTF16"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf16;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-32 encoding of the input. Python is an example of a language that
 *  uses this encoding natively.
 *
 *  Value: "UTF32"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf32;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-8 encoding of the input. C++ and Go are examples of languages
 *  that use this encoding natively.
 *
 *  Value: "UTF8"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf8;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_Document.type

/**
 *  HTML
 *
 *  Value: "HTML"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Document_Type_Html;
/**
 *  Plain text
 *
 *  Value: "PLAIN_TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Document_Type_PlainText;
/**
 *  The content type is not specified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Document_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_Entity.type

/**
 *  Address The metadata identifies the street number and locality plus
 *  whichever additional elements appear in the text: * `street_number` - street
 *  number * `locality` - city or town * `street_name` - street/route name, if
 *  detected * `postal_code` - postal code, if detected * `country` - country,
 *  if detected< * `broad_region` - administrative area, such as the state, if
 *  detected * `narrow_region` - smaller administrative area, such as county, if
 *  detected * `sublocality` - used in Asian addresses to demark a district
 *  within a city, if detected
 *
 *  Value: "ADDRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Address;
/**
 *  Consumer product
 *
 *  Value: "CONSUMER_GOOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_ConsumerGood;
/**
 *  Date The metadata identifies the components of the date: * `year` - four
 *  digit year, if detected * `month` - two digit month number, if detected *
 *  `day` - two digit day number, if detected
 *
 *  Value: "DATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Date;
/**
 *  Event
 *
 *  Value: "EVENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Event;
/**
 *  Location
 *
 *  Value: "LOCATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Location;
/**
 *  Number The metadata is the number itself.
 *
 *  Value: "NUMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Number;
/**
 *  Organization
 *
 *  Value: "ORGANIZATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Organization;
/**
 *  Other types of entities
 *
 *  Value: "OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Other;
/**
 *  Person
 *
 *  Value: "PERSON"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Person;
/**
 *  Phone number The metadata lists the phone number, formatted according to
 *  local convention, plus whichever additional elements appear in the text: *
 *  `number` - the actual number, broken down into sections as per local
 *  convention * `national_prefix` - country code, if detected * `area_code` -
 *  region or area code, if detected * `extension` - phone extension (to be
 *  dialed after connection), if detected
 *
 *  Value: "PHONE_NUMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_PhoneNumber;
/**
 *  Price The metadata identifies the `value` and `currency`.
 *
 *  Value: "PRICE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Price;
/**
 *  Unknown
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Unknown;
/**
 *  Artwork
 *
 *  Value: "WORK_OF_ART"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_WorkOfArt;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_EntityMention.type

/**
 *  Common noun (or noun compound)
 *
 *  Value: "COMMON"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_EntityMention_Type_Common;
/**
 *  Proper name
 *
 *  Value: "PROPER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_EntityMention_Type_Proper;
/**
 *  Unknown
 *
 *  Value: "TYPE_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_EntityMention_Type_TypeUnknown;

/**
 *  The entity analysis request message.
 */
@interface GTLRCloudNaturalLanguage_AnalyzeEntitiesRequest : GTLRObject

/** Required. Input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Document *document;

/**
 *  The encoding type used by the API to calculate offsets.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_None
 *        If `EncodingType` is not specified, encoding-dependent information
 *        (such as `begin_offset`) will be set at `-1`. (Value: "NONE")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf16
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-16 encoding of the input. Java and JavaScript are
 *        examples of languages that use this encoding natively. (Value:
 *        "UTF16")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf32
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-32 encoding of the input. Python is an example of a
 *        language that uses this encoding natively. (Value: "UTF32")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf8
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-8 encoding of the input. C++ and Go are examples of
 *        languages that use this encoding natively. (Value: "UTF8")
 */
@property(nonatomic, copy, nullable) NSString *encodingType;

@end


/**
 *  The entity analysis response message.
 */
@interface GTLRCloudNaturalLanguage_AnalyzeEntitiesResponse : GTLRObject

/** The recognized entities in the input document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Entity *> *entities;

/**
 *  The language of the text, which will be the same as the language specified
 *  in the request or, if not specified, the automatically-detected language.
 *  See Document.language field for more details.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Whether the language is officially supported. The API may still return a
 *  response when the language is not supported, but it is on a best effort
 *  basis.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *languageSupported;

@end


/**
 *  The sentiment analysis request message.
 */
@interface GTLRCloudNaturalLanguage_AnalyzeSentimentRequest : GTLRObject

/** Required. Input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Document *document;

/**
 *  The encoding type used by the API to calculate sentence offsets.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_None
 *        If `EncodingType` is not specified, encoding-dependent information
 *        (such as `begin_offset`) will be set at `-1`. (Value: "NONE")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf16
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-16 encoding of the input. Java and JavaScript are
 *        examples of languages that use this encoding natively. (Value:
 *        "UTF16")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf32
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-32 encoding of the input. Python is an example of a
 *        language that uses this encoding natively. (Value: "UTF32")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf8
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-8 encoding of the input. C++ and Go are examples of
 *        languages that use this encoding natively. (Value: "UTF8")
 */
@property(nonatomic, copy, nullable) NSString *encodingType;

@end


/**
 *  The sentiment analysis response message.
 */
@interface GTLRCloudNaturalLanguage_AnalyzeSentimentResponse : GTLRObject

/** The overall sentiment of the input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Sentiment *documentSentiment;

/**
 *  The language of the text, which will be the same as the language specified
 *  in the request or, if not specified, the automatically-detected language.
 *  See Document.language field for more details.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Whether the language is officially supported. The API may still return a
 *  response when the language is not supported, but it is on a best effort
 *  basis.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *languageSupported;

/** The sentiment for all the sentences in the document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Sentence *> *sentences;

@end


/**
 *  The request message for the text annotation API, which can perform multiple
 *  analysis types in one call.
 */
@interface GTLRCloudNaturalLanguage_AnnotateTextRequest : GTLRObject

/** Required. Input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Document *document;

/**
 *  The encoding type used by the API to calculate offsets.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_None If
 *        `EncodingType` is not specified, encoding-dependent information (such
 *        as `begin_offset`) will be set at `-1`. (Value: "NONE")
 *    @arg @c kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf16
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-16 encoding of the input. Java and JavaScript are
 *        examples of languages that use this encoding natively. (Value:
 *        "UTF16")
 *    @arg @c kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf32
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-32 encoding of the input. Python is an example of a
 *        language that uses this encoding natively. (Value: "UTF32")
 *    @arg @c kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf8
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-8 encoding of the input. C++ and Go are examples of
 *        languages that use this encoding natively. (Value: "UTF8")
 */
@property(nonatomic, copy, nullable) NSString *encodingType;

/** Required. The enabled features. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Features *features;

@end


/**
 *  The text annotations response message.
 */
@interface GTLRCloudNaturalLanguage_AnnotateTextResponse : GTLRObject

/** Categories identified in the input document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_ClassificationCategory *> *categories;

/**
 *  The overall sentiment for the document. Populated if the user enables
 *  AnnotateTextRequest.Features.extract_document_sentiment.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Sentiment *documentSentiment;

/**
 *  Entities, along with their semantic information, in the input document.
 *  Populated if the user enables AnnotateTextRequest.Features.extract_entities
 *  or AnnotateTextRequest.Features.extract_entity_sentiment.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Entity *> *entities;

/**
 *  The language of the text, which will be the same as the language specified
 *  in the request or, if not specified, the automatically-detected language.
 *  See Document.language field for more details.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Whether the language is officially supported by all requested features. The
 *  API may still return a response when the language is not supported, but it
 *  is on a best effort basis.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *languageSupported;

/** Harmful and sensitive categories identified in the input document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_ClassificationCategory *> *moderationCategories;

/**
 *  Sentences in the input document. Populated if the user enables
 *  AnnotateTextRequest.Features.extract_document_sentiment.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Sentence *> *sentences;

@end


/**
 *  Represents a category returned from the text classifier.
 */
@interface GTLRCloudNaturalLanguage_ClassificationCategory : GTLRObject

/**
 *  The classifier's confidence of the category. Number represents how certain
 *  the classifier is that this category represents the given text.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *confidence;

/** The name of the category representing the document. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  The document classification request message.
 */
@interface GTLRCloudNaturalLanguage_ClassifyTextRequest : GTLRObject

/** Required. Input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Document *document;

@end


/**
 *  The document classification response message.
 */
@interface GTLRCloudNaturalLanguage_ClassifyTextResponse : GTLRObject

/** Categories representing the input document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_ClassificationCategory *> *categories;

/**
 *  The language of the text, which will be the same as the language specified
 *  in the request or, if not specified, the automatically-detected language.
 *  See Document.language field for more details.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Whether the language is officially supported. The API may still return a
 *  response when the language is not supported, but it is on a best effort
 *  basis.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *languageSupported;

@end


/**
 *  Represents the input to API methods.
 */
@interface GTLRCloudNaturalLanguage_Document : GTLRObject

/**
 *  The content of the input in string format. Cloud audit logging exempt since
 *  it is based on user data.
 */
@property(nonatomic, copy, nullable) NSString *content;

/**
 *  The Google Cloud Storage URI where the file content is located. This URI
 *  must be of the form: gs://bucket_name/object_name. For more details, see
 *  https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage
 *  object versioning is not supported.
 */
@property(nonatomic, copy, nullable) NSString *gcsContentUri;

/**
 *  Optional. The language of the document (if not specified, the language is
 *  automatically detected). Both ISO and BCP-47 language codes are accepted.
 *  [Language Support](https://cloud.google.com/natural-language/docs/languages)
 *  lists currently supported languages for each API method. If the language
 *  (either specified by the caller or automatically detected) is not supported
 *  by the called API method, an `INVALID_ARGUMENT` error is returned.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an
 *  `INVALID_ARGUMENT` error.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_Document_Type_Html HTML (Value: "HTML")
 *    @arg @c kGTLRCloudNaturalLanguage_Document_Type_PlainText Plain text
 *        (Value: "PLAIN_TEXT")
 *    @arg @c kGTLRCloudNaturalLanguage_Document_Type_TypeUnspecified The
 *        content type is not specified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents a phrase in the text that is a known entity, such as a person, an
 *  organization, or location. The API associates information, such as
 *  probability and mentions, with entities.
 */
@interface GTLRCloudNaturalLanguage_Entity : GTLRObject

/**
 *  The mentions of this entity in the input document. The API currently
 *  supports proper noun mentions.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_EntityMention *> *mentions;

/**
 *  Metadata associated with the entity. For most entity types, the metadata is
 *  a Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`), if they
 *  are available. For the metadata associated with other entity types, see the
 *  Type table below.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Entity_Metadata *metadata;

/** The representative name for the entity. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  For calls to AnalyzeEntitySentiment or if
 *  AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this
 *  field will contain the aggregate sentiment expressed for this entity in the
 *  provided document.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Sentiment *sentiment;

/**
 *  The entity type.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Address Address The metadata
 *        identifies the street number and locality plus whichever additional
 *        elements appear in the text: * `street_number` - street number *
 *        `locality` - city or town * `street_name` - street/route name, if
 *        detected * `postal_code` - postal code, if detected * `country` -
 *        country, if detected< * `broad_region` - administrative area, such as
 *        the state, if detected * `narrow_region` - smaller administrative
 *        area, such as county, if detected * `sublocality` - used in Asian
 *        addresses to demark a district within a city, if detected (Value:
 *        "ADDRESS")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_ConsumerGood Consumer
 *        product (Value: "CONSUMER_GOOD")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Date Date The metadata
 *        identifies the components of the date: * `year` - four digit year, if
 *        detected * `month` - two digit month number, if detected * `day` - two
 *        digit day number, if detected (Value: "DATE")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Event Event (Value: "EVENT")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Location Location (Value:
 *        "LOCATION")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Number Number The metadata
 *        is the number itself. (Value: "NUMBER")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Organization Organization
 *        (Value: "ORGANIZATION")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Other Other types of
 *        entities (Value: "OTHER")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Person Person (Value:
 *        "PERSON")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_PhoneNumber Phone number The
 *        metadata lists the phone number, formatted according to local
 *        convention, plus whichever additional elements appear in the text: *
 *        `number` - the actual number, broken down into sections as per local
 *        convention * `national_prefix` - country code, if detected *
 *        `area_code` - region or area code, if detected * `extension` - phone
 *        extension (to be dialed after connection), if detected (Value:
 *        "PHONE_NUMBER")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Price Price The metadata
 *        identifies the `value` and `currency`. (Value: "PRICE")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Unknown Unknown (Value:
 *        "UNKNOWN")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_WorkOfArt Artwork (Value:
 *        "WORK_OF_ART")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Metadata associated with the entity. For most entity types, the metadata is
 *  a Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`), if they
 *  are available. For the metadata associated with other entity types, see the
 *  Type table below.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_Entity_Metadata : GTLRObject
@end


/**
 *  Represents a mention for an entity in the text. Currently, proper noun
 *  mentions are supported.
 */
@interface GTLRCloudNaturalLanguage_EntityMention : GTLRObject

/**
 *  Probability score associated with the entity. The score shows the
 *  probability of the entity mention being the entity type. The score is in (0,
 *  1] range.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *probability;

/**
 *  For calls to AnalyzeEntitySentiment or if
 *  AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this
 *  field will contain the sentiment expressed for this mention of the entity in
 *  the provided document.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Sentiment *sentiment;

/** The mention text. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_TextSpan *text;

/**
 *  The type of the entity mention.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_EntityMention_Type_Common Common noun
 *        (or noun compound) (Value: "COMMON")
 *    @arg @c kGTLRCloudNaturalLanguage_EntityMention_Type_Proper Proper name
 *        (Value: "PROPER")
 *    @arg @c kGTLRCloudNaturalLanguage_EntityMention_Type_TypeUnknown Unknown
 *        (Value: "TYPE_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  All available features. Setting each one to true will enable that specific
 *  analysis for the input.
 */
@interface GTLRCloudNaturalLanguage_Features : GTLRObject

/**
 *  Optional. Classify the full document into categories.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *classifyText;

/**
 *  Optional. Extract document-level sentiment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *extractDocumentSentiment;

/**
 *  Optional. Extract entities.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *extractEntities;

/**
 *  Optional. Moderate the document for harmful and sensitive categories.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *moderateText;

@end


/**
 *  The document moderation request message.
 */
@interface GTLRCloudNaturalLanguage_ModerateTextRequest : GTLRObject

/** Required. Input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Document *document;

@end


/**
 *  The document moderation response message.
 */
@interface GTLRCloudNaturalLanguage_ModerateTextResponse : GTLRObject

/**
 *  The language of the text, which will be the same as the language specified
 *  in the request or, if not specified, the automatically-detected language.
 *  See Document.language field for more details.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Whether the language is officially supported. The API may still return a
 *  response when the language is not supported, but it is on a best effort
 *  basis.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *languageSupported;

/** Harmful and sensitive categories representing the input document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_ClassificationCategory *> *moderationCategories;

@end


/**
 *  Represents a sentence in the input document.
 */
@interface GTLRCloudNaturalLanguage_Sentence : GTLRObject

/**
 *  For calls to AnalyzeSentiment or if
 *  AnnotateTextRequest.Features.extract_document_sentiment is set to true, this
 *  field will contain the sentiment for the sentence.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Sentiment *sentiment;

/** The sentence text. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_TextSpan *text;

@end


/**
 *  Represents the feeling associated with the entire text or entities in the
 *  text.
 */
@interface GTLRCloudNaturalLanguage_Sentiment : GTLRObject

/**
 *  A non-negative number in the [0, +inf) range, which represents the absolute
 *  magnitude of sentiment regardless of score (positive or negative).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *magnitude;

/**
 *  Sentiment score between -1.0 (negative sentiment) and 1.0 (positive
 *  sentiment).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *score;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudNaturalLanguage_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudNaturalLanguage_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_Status_Details_Item : GTLRObject
@end


/**
 *  Represents a text span in the input document.
 */
@interface GTLRCloudNaturalLanguage_TextSpan : GTLRObject

/**
 *  The API calculates the beginning offset of the content in the original
 *  document according to the EncodingType specified in the API request.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *beginOffset;

/** The content of the text span, which is a substring of the document. */
@property(nonatomic, copy, nullable) NSString *content;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
