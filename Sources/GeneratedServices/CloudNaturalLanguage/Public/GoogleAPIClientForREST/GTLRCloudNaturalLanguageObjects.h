// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Natural Language API (language/v2)
// Description:
//   Provides natural language understanding technologies, such as sentiment
//   analysis, entity recognition, entity sentiment analysis, and other text
//   annotations, to developers.
// Documentation:
//   https://cloud.google.com/natural-language/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudNaturalLanguage_AnnotateTextRequestFeatures;
@class GTLRCloudNaturalLanguage_ClassificationCategory;
@class GTLRCloudNaturalLanguage_Color;
@class GTLRCloudNaturalLanguage_CpuMetric;
@class GTLRCloudNaturalLanguage_CpuMetric_TrackingLabels;
@class GTLRCloudNaturalLanguage_DiskMetric;
@class GTLRCloudNaturalLanguage_Document;
@class GTLRCloudNaturalLanguage_Entity;
@class GTLRCloudNaturalLanguage_Entity_Metadata;
@class GTLRCloudNaturalLanguage_EntityMention;
@class GTLRCloudNaturalLanguage_GpuMetric;
@class GTLRCloudNaturalLanguage_GpuMetric_TrackingLabels;
@class GTLRCloudNaturalLanguage_InfraUsage;
@class GTLRCloudNaturalLanguage_RamMetric;
@class GTLRCloudNaturalLanguage_RamMetric_TrackingLabels;
@class GTLRCloudNaturalLanguage_Sentence;
@class GTLRCloudNaturalLanguage_Sentiment;
@class GTLRCloudNaturalLanguage_Status_Details_Item;
@class GTLRCloudNaturalLanguage_TextSpan;
@class GTLRCloudNaturalLanguage_TpuMetric;
@class GTLRCloudNaturalLanguage_XPSArrayStats;
@class GTLRCloudNaturalLanguage_XPSBoundingBoxMetricsEntry;
@class GTLRCloudNaturalLanguage_XPSBoundingBoxMetricsEntryConfidenceMetricsEntry;
@class GTLRCloudNaturalLanguage_XPSCategoryStats;
@class GTLRCloudNaturalLanguage_XPSCategoryStatsSingleCategoryStats;
@class GTLRCloudNaturalLanguage_XPSClassificationEvaluationMetrics;
@class GTLRCloudNaturalLanguage_XPSColorMap;
@class GTLRCloudNaturalLanguage_XPSColorMapIntColor;
@class GTLRCloudNaturalLanguage_XPSColumnSpec;
@class GTLRCloudNaturalLanguage_XPSColumnSpecCorrelatedColumn;
@class GTLRCloudNaturalLanguage_XPSColumnSpecForecastingMetadata;
@class GTLRCloudNaturalLanguage_XPSCommonStats;
@class GTLRCloudNaturalLanguage_XPSConfidenceMetricsEntry;
@class GTLRCloudNaturalLanguage_XPSConfusionMatrix;
@class GTLRCloudNaturalLanguage_XPSConfusionMatrixRow;
@class GTLRCloudNaturalLanguage_XPSCoreMlFormat;
@class GTLRCloudNaturalLanguage_XPSCorrelationStats;
@class GTLRCloudNaturalLanguage_XPSDataErrors;
@class GTLRCloudNaturalLanguage_XPSDataStats;
@class GTLRCloudNaturalLanguage_XPSDataType;
@class GTLRCloudNaturalLanguage_XPSDockerFormat;
@class GTLRCloudNaturalLanguage_XPSEdgeTpuTfLiteFormat;
@class GTLRCloudNaturalLanguage_XPSEvaluationMetrics;
@class GTLRCloudNaturalLanguage_XPSEvaluationMetricsSet;
@class GTLRCloudNaturalLanguage_XPSExampleSet;
@class GTLRCloudNaturalLanguage_XPSExportModelOutputConfig;
@class GTLRCloudNaturalLanguage_XPSFileSpec;
@class GTLRCloudNaturalLanguage_XPSFloat64Stats;
@class GTLRCloudNaturalLanguage_XPSFloat64StatsHistogramBucket;
@class GTLRCloudNaturalLanguage_XPSImageClassificationTrainResponse;
@class GTLRCloudNaturalLanguage_XPSImageExportModelSpec;
@class GTLRCloudNaturalLanguage_XPSImageModelArtifactSpec;
@class GTLRCloudNaturalLanguage_XPSImageModelServingSpec;
@class GTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation;
@class GTLRCloudNaturalLanguage_XPSImageObjectDetectionEvaluationMetrics;
@class GTLRCloudNaturalLanguage_XPSImageObjectDetectionModelSpec;
@class GTLRCloudNaturalLanguage_XPSImageSegmentationEvaluationMetrics;
@class GTLRCloudNaturalLanguage_XPSImageSegmentationEvaluationMetricsConfidenceMetricsEntry;
@class GTLRCloudNaturalLanguage_XPSImageSegmentationTrainResponse;
@class GTLRCloudNaturalLanguage_XPSIntegratedGradientsAttribution;
@class GTLRCloudNaturalLanguage_XPSMetricEntry;
@class GTLRCloudNaturalLanguage_XPSMetricEntryLabel;
@class GTLRCloudNaturalLanguage_XPSModelArtifactItem;
@class GTLRCloudNaturalLanguage_XPSRegressionEvaluationMetrics;
@class GTLRCloudNaturalLanguage_XPSRegressionMetricsEntry;
@class GTLRCloudNaturalLanguage_XPSReportingMetrics;
@class GTLRCloudNaturalLanguage_XPSResponseExplanationMetadata;
@class GTLRCloudNaturalLanguage_XPSResponseExplanationMetadata_Inputs;
@class GTLRCloudNaturalLanguage_XPSResponseExplanationMetadata_Outputs;
@class GTLRCloudNaturalLanguage_XPSResponseExplanationMetadataInputMetadata;
@class GTLRCloudNaturalLanguage_XPSResponseExplanationMetadataOutputMetadata;
@class GTLRCloudNaturalLanguage_XPSResponseExplanationParameters;
@class GTLRCloudNaturalLanguage_XPSResponseExplanationSpec;
@class GTLRCloudNaturalLanguage_XPSRow;
@class GTLRCloudNaturalLanguage_XPSSpeechEvaluationMetrics;
@class GTLRCloudNaturalLanguage_XPSSpeechEvaluationMetricsSubModelEvaluationMetric;
@class GTLRCloudNaturalLanguage_XPSSpeechModelSpec;
@class GTLRCloudNaturalLanguage_XPSSpeechModelSpecSubModelSpec;
@class GTLRCloudNaturalLanguage_XPSSpeechPreprocessResponse;
@class GTLRCloudNaturalLanguage_XPSSpeechPreprocessStats;
@class GTLRCloudNaturalLanguage_XPSStringStats;
@class GTLRCloudNaturalLanguage_XPSStringStatsUnigramStats;
@class GTLRCloudNaturalLanguage_XPSStructStats;
@class GTLRCloudNaturalLanguage_XPSStructStats_FieldStats;
@class GTLRCloudNaturalLanguage_XPSStructType;
@class GTLRCloudNaturalLanguage_XPSStructType_Fields;
@class GTLRCloudNaturalLanguage_XPSTablesClassificationMetrics;
@class GTLRCloudNaturalLanguage_XPSTablesClassificationMetricsCurveMetrics;
@class GTLRCloudNaturalLanguage_XPSTablesConfidenceMetricsEntry;
@class GTLRCloudNaturalLanguage_XPSTablesDatasetMetadata;
@class GTLRCloudNaturalLanguage_XPSTablesDatasetMetadata_TargetColumnCorrelations;
@class GTLRCloudNaturalLanguage_XPSTablesEvaluationMetrics;
@class GTLRCloudNaturalLanguage_XPSTablesModelColumnInfo;
@class GTLRCloudNaturalLanguage_XPSTablesModelStructure;
@class GTLRCloudNaturalLanguage_XPSTablesModelStructureModelParameters;
@class GTLRCloudNaturalLanguage_XPSTablesModelStructureModelParametersParameter;
@class GTLRCloudNaturalLanguage_XPSTableSpec;
@class GTLRCloudNaturalLanguage_XPSTableSpec_ColumnSpecs;
@class GTLRCloudNaturalLanguage_XPSTablesPreprocessResponse;
@class GTLRCloudNaturalLanguage_XPSTablesRegressionMetrics;
@class GTLRCloudNaturalLanguage_XPSTablesTrainingOperationMetadata;
@class GTLRCloudNaturalLanguage_XPSTablesTrainResponse;
@class GTLRCloudNaturalLanguage_XPSTextComponentModel;
@class GTLRCloudNaturalLanguage_XPSTextExtractionEvaluationMetrics;
@class GTLRCloudNaturalLanguage_XPSTextExtractionEvaluationMetrics_PerLabelConfidenceMetrics;
@class GTLRCloudNaturalLanguage_XPSTextSentimentEvaluationMetrics;
@class GTLRCloudNaturalLanguage_XPSTextToSpeechTrainResponse;
@class GTLRCloudNaturalLanguage_XPSTextTrainResponse;
@class GTLRCloudNaturalLanguage_XPSTfJsFormat;
@class GTLRCloudNaturalLanguage_XPSTfLiteFormat;
@class GTLRCloudNaturalLanguage_XPSTfSavedModelFormat;
@class GTLRCloudNaturalLanguage_XPSTimestampStats;
@class GTLRCloudNaturalLanguage_XPSTimestampStats_GranularStats;
@class GTLRCloudNaturalLanguage_XPSTimestampStatsGranularStats;
@class GTLRCloudNaturalLanguage_XPSTimestampStatsGranularStats_Buckets;
@class GTLRCloudNaturalLanguage_XPSTrackMetricsEntry;
@class GTLRCloudNaturalLanguage_XPSTrackMetricsEntryConfidenceMetricsEntry;
@class GTLRCloudNaturalLanguage_XPSTrainingObjectivePoint;
@class GTLRCloudNaturalLanguage_XPSTranslationEvaluationMetrics;
@class GTLRCloudNaturalLanguage_XPSTranslationPreprocessResponse;
@class GTLRCloudNaturalLanguage_XPSTranslationTrainResponse;
@class GTLRCloudNaturalLanguage_XPSTuningTrial;
@class GTLRCloudNaturalLanguage_XPSVideoActionMetricsEntry;
@class GTLRCloudNaturalLanguage_XPSVideoActionMetricsEntryConfidenceMetricsEntry;
@class GTLRCloudNaturalLanguage_XPSVideoActionRecognitionEvaluationMetrics;
@class GTLRCloudNaturalLanguage_XPSVideoActionRecognitionTrainResponse;
@class GTLRCloudNaturalLanguage_XPSVideoBatchPredictOperationMetadata;
@class GTLRCloudNaturalLanguage_XPSVideoClassificationTrainResponse;
@class GTLRCloudNaturalLanguage_XPSVideoExportModelSpec;
@class GTLRCloudNaturalLanguage_XPSVideoModelArtifactSpec;
@class GTLRCloudNaturalLanguage_XPSVideoObjectTrackingEvaluationMetrics;
@class GTLRCloudNaturalLanguage_XPSVideoObjectTrackingTrainResponse;
@class GTLRCloudNaturalLanguage_XPSVideoTrainingOperationMetadata;
@class GTLRCloudNaturalLanguage_XPSVisionErrorAnalysisConfig;
@class GTLRCloudNaturalLanguage_XPSVisionTrainingOperationMetadata;
@class GTLRCloudNaturalLanguage_XPSVisualization;
@class GTLRCloudNaturalLanguage_XPSXraiAttribution;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_AnalyzeEntitiesRequest.encodingType

/**
 *  If `EncodingType` is not specified, encoding-dependent information (such as
 *  `begin_offset`) will be set at `-1`.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_None;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-16 encoding of the input. Java and JavaScript are examples of
 *  languages that use this encoding natively.
 *
 *  Value: "UTF16"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf16;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-32 encoding of the input. Python is an example of a language that
 *  uses this encoding natively.
 *
 *  Value: "UTF32"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf32;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-8 encoding of the input. C++ and Go are examples of languages
 *  that use this encoding natively.
 *
 *  Value: "UTF8"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf8;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_AnalyzeSentimentRequest.encodingType

/**
 *  If `EncodingType` is not specified, encoding-dependent information (such as
 *  `begin_offset`) will be set at `-1`.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_None;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-16 encoding of the input. Java and JavaScript are examples of
 *  languages that use this encoding natively.
 *
 *  Value: "UTF16"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf16;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-32 encoding of the input. Python is an example of a language that
 *  uses this encoding natively.
 *
 *  Value: "UTF32"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf32;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-8 encoding of the input. C++ and Go are examples of languages
 *  that use this encoding natively.
 *
 *  Value: "UTF8"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf8;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_AnnotateTextRequest.encodingType

/**
 *  If `EncodingType` is not specified, encoding-dependent information (such as
 *  `begin_offset`) will be set at `-1`.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_None;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-16 encoding of the input. Java and JavaScript are examples of
 *  languages that use this encoding natively.
 *
 *  Value: "UTF16"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf16;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-32 encoding of the input. Python is an example of a language that
 *  uses this encoding natively.
 *
 *  Value: "UTF32"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf32;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-8 encoding of the input. C++ and Go are examples of languages
 *  that use this encoding natively.
 *
 *  Value: "UTF8"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf8;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_CpuMetric.cpuType

/**
 *  GPU-based machine, skip quota reporting.
 *
 *  Value: "A2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_CpuType_A2;
/**
 *  GPU-based machine, skip quota reporting.
 *
 *  Value: "A3"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_CpuType_A3;
/**
 *  COMPUTE_OPTIMIZED
 *
 *  Value: "C2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_CpuType_C2;
/** Value: "C2D" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_CpuType_C2d;
/** Value: "C3" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_CpuType_C3;
/** Value: "CUSTOM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_CpuType_Custom;
/** Value: "E2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_CpuType_E2;
/**
 *  GPU-based machine, skip quota reporting.
 *
 *  Value: "G2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_CpuType_G2;
/**
 *  MEMORY_OPTIMIZED
 *
 *  Value: "M1"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_CpuType_M1;
/**
 *  MEMORY_OPTIMIZED_UPGRADE_PREMIUM
 *
 *  Value: "M2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_CpuType_M2;
/** Value: "N1" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_CpuType_N1;
/** Value: "N2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_CpuType_N2;
/** Value: "N2_CUSTOM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_CpuType_N2Custom;
/** Value: "N2D" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_CpuType_N2d;
/** Value: "UNKNOWN_CPU_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_CpuType_UnknownCpuType;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_CpuMetric.machineSpec

/** Value: "A2_HIGHGPU_1G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Highgpu1g;
/** Value: "A2_HIGHGPU_2G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Highgpu2g;
/** Value: "A2_HIGHGPU_4G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Highgpu4g;
/** Value: "A2_HIGHGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Highgpu8g;
/** Value: "A2_MEGAGPU_16G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Megagpu16g;
/** Value: "A2_ULTRAGPU_1G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Ultragpu1g;
/** Value: "A2_ULTRAGPU_2G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Ultragpu2g;
/** Value: "A2_ULTRAGPU_4G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Ultragpu4g;
/** Value: "A2_ULTRAGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Ultragpu8g;
/** Value: "A3_EDGEGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A3Edgegpu8g;
/** Value: "A3_HIGHGPU_1G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A3Highgpu1g;
/** Value: "A3_HIGHGPU_2G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A3Highgpu2g;
/** Value: "A3_HIGHGPU_4G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A3Highgpu4g;
/** Value: "A3_HIGHGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A3Highgpu8g;
/** Value: "A3_MEGAGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A3Megagpu8g;
/** Value: "A3_ULTRAGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A3Ultragpu8g;
/** Value: "C2D_HIGHCPU_112" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighcpu112;
/** Value: "C2D_HIGHCPU_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighcpu16;
/** Value: "C2D_HIGHCPU_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighcpu2;
/** Value: "C2D_HIGHCPU_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighcpu32;
/** Value: "C2D_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighcpu4;
/** Value: "C2D_HIGHCPU_56" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighcpu56;
/** Value: "C2D_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighcpu8;
/** Value: "C2D_HIGHMEM_112" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighmem112;
/** Value: "C2D_HIGHMEM_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighmem16;
/** Value: "C2D_HIGHMEM_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighmem2;
/** Value: "C2D_HIGHMEM_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighmem32;
/** Value: "C2D_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighmem4;
/** Value: "C2D_HIGHMEM_56" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighmem56;
/** Value: "C2D_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighmem8;
/** Value: "C2D_STANDARD_112" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dStandard112;
/** Value: "C2D_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dStandard16;
/** Value: "C2D_STANDARD_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dStandard2;
/** Value: "C2D_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dStandard32;
/** Value: "C2D_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dStandard4;
/** Value: "C2D_STANDARD_56" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dStandard56;
/** Value: "C2D_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dStandard8;
/** Value: "C2_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2Standard16;
/** Value: "C2_STANDARD_30" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2Standard30;
/** Value: "C2_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2Standard4;
/** Value: "C2_STANDARD_60" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2Standard60;
/** Value: "C2_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2Standard8;
/** Value: "C3_HIGHCPU_176" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highcpu176;
/** Value: "C3_HIGHCPU_22" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highcpu22;
/** Value: "C3_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highcpu4;
/** Value: "C3_HIGHCPU_44" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highcpu44;
/** Value: "C3_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highcpu8;
/** Value: "C3_HIGHCPU_88" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highcpu88;
/** Value: "C3_HIGHMEM_176" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highmem176;
/** Value: "C3_HIGHMEM_22" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highmem22;
/** Value: "C3_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highmem4;
/** Value: "C3_HIGHMEM_44" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highmem44;
/** Value: "C3_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highmem8;
/** Value: "C3_HIGHMEM_88" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highmem88;
/** Value: "C3_STANDARD_176" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Standard176;
/** Value: "C3_STANDARD_22" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Standard22;
/** Value: "C3_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Standard4;
/** Value: "C3_STANDARD_44" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Standard44;
/** Value: "C3_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Standard8;
/** Value: "C3_STANDARD_88" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Standard88;
/** Value: "E2_HIGHCPU_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highcpu16;
/** Value: "E2_HIGHCPU_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highcpu2;
/** Value: "E2_HIGHCPU_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highcpu32;
/** Value: "E2_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highcpu4;
/** Value: "E2_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highcpu8;
/** Value: "E2_HIGHMEM_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highmem16;
/** Value: "E2_HIGHMEM_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highmem2;
/** Value: "E2_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highmem4;
/** Value: "E2_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highmem8;
/** Value: "E2_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Standard16;
/** Value: "E2_STANDARD_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Standard2;
/** Value: "E2_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Standard32;
/** Value: "E2_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Standard4;
/** Value: "E2_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Standard8;
/** Value: "G2_STANDARD_12" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_G2Standard12;
/** Value: "G2_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_G2Standard16;
/** Value: "G2_STANDARD_24" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_G2Standard24;
/** Value: "G2_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_G2Standard32;
/** Value: "G2_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_G2Standard4;
/** Value: "G2_STANDARD_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_G2Standard48;
/** Value: "G2_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_G2Standard8;
/** Value: "G2_STANDARD_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_G2Standard96;
/** Value: "N1_HIGHCPU_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highcpu16;
/** Value: "N1_HIGHCPU_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highcpu2;
/** Value: "N1_HIGHCPU_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highcpu32;
/** Value: "N1_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highcpu4;
/** Value: "N1_HIGHCPU_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highcpu64;
/** Value: "N1_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highcpu8;
/** Value: "N1_HIGHCPU_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highcpu96;
/** Value: "N1_HIGHMEM_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highmem16;
/** Value: "N1_HIGHMEM_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highmem2;
/** Value: "N1_HIGHMEM_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highmem32;
/** Value: "N1_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highmem4;
/** Value: "N1_HIGHMEM_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highmem64;
/** Value: "N1_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highmem8;
/** Value: "N1_HIGHMEM_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highmem96;
/** Value: "N1_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Standard16;
/** Value: "N1_STANDARD_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Standard2;
/** Value: "N1_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Standard32;
/** Value: "N1_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Standard4;
/** Value: "N1_STANDARD_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Standard64;
/** Value: "N1_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Standard8;
/** Value: "N1_STANDARD_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Standard96;
/** Value: "N2D_HIGHCPU_128" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu128;
/** Value: "N2D_HIGHCPU_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu16;
/** Value: "N2D_HIGHCPU_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu2;
/** Value: "N2D_HIGHCPU_224" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu224;
/** Value: "N2D_HIGHCPU_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu32;
/** Value: "N2D_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu4;
/** Value: "N2D_HIGHCPU_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu48;
/** Value: "N2D_HIGHCPU_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu64;
/** Value: "N2D_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu8;
/** Value: "N2D_HIGHCPU_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu80;
/** Value: "N2D_HIGHCPU_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu96;
/** Value: "N2D_HIGHMEM_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem16;
/** Value: "N2D_HIGHMEM_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem2;
/** Value: "N2D_HIGHMEM_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem32;
/** Value: "N2D_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem4;
/** Value: "N2D_HIGHMEM_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem48;
/** Value: "N2D_HIGHMEM_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem64;
/** Value: "N2D_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem8;
/** Value: "N2D_HIGHMEM_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem80;
/** Value: "N2D_HIGHMEM_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem96;
/** Value: "N2D_STANDARD_128" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard128;
/** Value: "N2D_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard16;
/** Value: "N2D_STANDARD_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard2;
/** Value: "N2D_STANDARD_224" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard224;
/** Value: "N2D_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard32;
/** Value: "N2D_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard4;
/** Value: "N2D_STANDARD_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard48;
/** Value: "N2D_STANDARD_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard64;
/** Value: "N2D_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard8;
/** Value: "N2D_STANDARD_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard80;
/** Value: "N2D_STANDARD_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard96;
/** Value: "N2_HIGHCPU_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu16;
/** Value: "N2_HIGHCPU_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu2;
/** Value: "N2_HIGHCPU_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu32;
/** Value: "N2_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu4;
/** Value: "N2_HIGHCPU_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu48;
/** Value: "N2_HIGHCPU_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu64;
/** Value: "N2_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu8;
/** Value: "N2_HIGHCPU_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu80;
/** Value: "N2_HIGHCPU_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu96;
/** Value: "N2_HIGHMEM_128" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem128;
/** Value: "N2_HIGHMEM_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem16;
/** Value: "N2_HIGHMEM_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem2;
/** Value: "N2_HIGHMEM_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem32;
/** Value: "N2_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem4;
/** Value: "N2_HIGHMEM_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem48;
/** Value: "N2_HIGHMEM_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem64;
/** Value: "N2_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem8;
/** Value: "N2_HIGHMEM_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem80;
/** Value: "N2_HIGHMEM_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem96;
/** Value: "N2_STANDARD_128" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard128;
/** Value: "N2_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard16;
/** Value: "N2_STANDARD_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard2;
/** Value: "N2_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard32;
/** Value: "N2_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard4;
/** Value: "N2_STANDARD_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard48;
/** Value: "N2_STANDARD_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard64;
/** Value: "N2_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard8;
/** Value: "N2_STANDARD_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard80;
/** Value: "N2_STANDARD_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard96;
/** Value: "UNKNOWN_MACHINE_SPEC" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_UnknownMachineSpec;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_DiskMetric.diskType

/** Value: "PD_SSD" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DiskMetric_DiskType_PdSsd;
/** Value: "PD_STANDARD" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DiskMetric_DiskType_PdStandard;
/** Value: "REGIONAL_SSD" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DiskMetric_DiskType_RegionalSsd;
/** Value: "REGIONAL_STORAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DiskMetric_DiskType_RegionalStorage;
/** Value: "STORAGE_SNAPSHOT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DiskMetric_DiskType_StorageSnapshot;
/** Value: "UNKNOWN_DISK_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DiskMetric_DiskType_UnknownDiskType;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_Document.type

/**
 *  HTML
 *
 *  Value: "HTML"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Document_Type_Html;
/**
 *  Plain text
 *
 *  Value: "PLAIN_TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Document_Type_PlainText;
/**
 *  The content type is not specified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Document_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_Entity.type

/**
 *  Address The metadata identifies the street number and locality plus
 *  whichever additional elements appear in the text: * `street_number` - street
 *  number * `locality` - city or town * `street_name` - street/route name, if
 *  detected * `postal_code` - postal code, if detected * `country` - country,
 *  if detected * `broad_region` - administrative area, such as the state, if
 *  detected * `narrow_region` - smaller administrative area, such as county, if
 *  detected * `sublocality` - used in Asian addresses to demark a district
 *  within a city, if detected
 *
 *  Value: "ADDRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Address;
/**
 *  Consumer product
 *
 *  Value: "CONSUMER_GOOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_ConsumerGood;
/**
 *  Date The metadata identifies the components of the date: * `year` - four
 *  digit year, if detected * `month` - two digit month number, if detected *
 *  `day` - two digit day number, if detected
 *
 *  Value: "DATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Date;
/**
 *  Event
 *
 *  Value: "EVENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Event;
/**
 *  Location
 *
 *  Value: "LOCATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Location;
/**
 *  Number The metadata is the number itself.
 *
 *  Value: "NUMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Number;
/**
 *  Organization
 *
 *  Value: "ORGANIZATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Organization;
/**
 *  Other types of entities
 *
 *  Value: "OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Other;
/**
 *  Person
 *
 *  Value: "PERSON"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Person;
/**
 *  Phone number The metadata lists the phone number, formatted according to
 *  local convention, plus whichever additional elements appear in the text: *
 *  `number` - the actual number, broken down into sections as per local
 *  convention * `national_prefix` - country code, if detected * `area_code` -
 *  region or area code, if detected * `extension` - phone extension (to be
 *  dialed after connection), if detected
 *
 *  Value: "PHONE_NUMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_PhoneNumber;
/**
 *  Price The metadata identifies the `value` and `currency`.
 *
 *  Value: "PRICE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Price;
/**
 *  Unknown
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Unknown;
/**
 *  Artwork
 *
 *  Value: "WORK_OF_ART"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_WorkOfArt;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_EntityMention.type

/**
 *  Common noun (or noun compound)
 *
 *  Value: "COMMON"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_EntityMention_Type_Common;
/**
 *  Proper name
 *
 *  Value: "PROPER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_EntityMention_Type_Proper;
/**
 *  Unknown
 *
 *  Value: "TYPE_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_EntityMention_Type_TypeUnknown;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_GpuMetric.gpuType

/** Value: "NVIDIA_A100_80GB" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaA10080gb;
/** Value: "NVIDIA_H100_80GB" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaH10080gb;
/** Value: "NVIDIA_H200_141GB" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaH200141gb;
/** Value: "NVIDIA_L4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaL4;
/** Value: "NVIDIA_TESLA_A100" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaTeslaA100;
/** Value: "NVIDIA_TESLA_K80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaTeslaK80;
/** Value: "NVIDIA_TESLA_P100" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaTeslaP100;
/** Value: "NVIDIA_TESLA_P4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaTeslaP4;
/** Value: "NVIDIA_TESLA_T4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaTeslaT4;
/** Value: "NVIDIA_TESLA_V100" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaTeslaV100;
/** Value: "UNKNOWN_GPU_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_GpuType_UnknownGpuType;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_GpuMetric.machineSpec

/** Value: "A2_HIGHGPU_1G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Highgpu1g;
/** Value: "A2_HIGHGPU_2G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Highgpu2g;
/** Value: "A2_HIGHGPU_4G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Highgpu4g;
/** Value: "A2_HIGHGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Highgpu8g;
/** Value: "A2_MEGAGPU_16G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Megagpu16g;
/** Value: "A2_ULTRAGPU_1G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Ultragpu1g;
/** Value: "A2_ULTRAGPU_2G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Ultragpu2g;
/** Value: "A2_ULTRAGPU_4G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Ultragpu4g;
/** Value: "A2_ULTRAGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Ultragpu8g;
/** Value: "A3_EDGEGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A3Edgegpu8g;
/** Value: "A3_HIGHGPU_1G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A3Highgpu1g;
/** Value: "A3_HIGHGPU_2G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A3Highgpu2g;
/** Value: "A3_HIGHGPU_4G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A3Highgpu4g;
/** Value: "A3_HIGHGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A3Highgpu8g;
/** Value: "A3_MEGAGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A3Megagpu8g;
/** Value: "A3_ULTRAGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A3Ultragpu8g;
/** Value: "C2D_HIGHCPU_112" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighcpu112;
/** Value: "C2D_HIGHCPU_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighcpu16;
/** Value: "C2D_HIGHCPU_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighcpu2;
/** Value: "C2D_HIGHCPU_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighcpu32;
/** Value: "C2D_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighcpu4;
/** Value: "C2D_HIGHCPU_56" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighcpu56;
/** Value: "C2D_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighcpu8;
/** Value: "C2D_HIGHMEM_112" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighmem112;
/** Value: "C2D_HIGHMEM_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighmem16;
/** Value: "C2D_HIGHMEM_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighmem2;
/** Value: "C2D_HIGHMEM_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighmem32;
/** Value: "C2D_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighmem4;
/** Value: "C2D_HIGHMEM_56" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighmem56;
/** Value: "C2D_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighmem8;
/** Value: "C2D_STANDARD_112" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dStandard112;
/** Value: "C2D_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dStandard16;
/** Value: "C2D_STANDARD_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dStandard2;
/** Value: "C2D_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dStandard32;
/** Value: "C2D_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dStandard4;
/** Value: "C2D_STANDARD_56" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dStandard56;
/** Value: "C2D_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dStandard8;
/** Value: "C2_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2Standard16;
/** Value: "C2_STANDARD_30" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2Standard30;
/** Value: "C2_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2Standard4;
/** Value: "C2_STANDARD_60" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2Standard60;
/** Value: "C2_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2Standard8;
/** Value: "C3_HIGHCPU_176" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highcpu176;
/** Value: "C3_HIGHCPU_22" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highcpu22;
/** Value: "C3_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highcpu4;
/** Value: "C3_HIGHCPU_44" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highcpu44;
/** Value: "C3_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highcpu8;
/** Value: "C3_HIGHCPU_88" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highcpu88;
/** Value: "C3_HIGHMEM_176" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highmem176;
/** Value: "C3_HIGHMEM_22" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highmem22;
/** Value: "C3_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highmem4;
/** Value: "C3_HIGHMEM_44" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highmem44;
/** Value: "C3_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highmem8;
/** Value: "C3_HIGHMEM_88" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highmem88;
/** Value: "C3_STANDARD_176" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Standard176;
/** Value: "C3_STANDARD_22" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Standard22;
/** Value: "C3_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Standard4;
/** Value: "C3_STANDARD_44" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Standard44;
/** Value: "C3_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Standard8;
/** Value: "C3_STANDARD_88" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Standard88;
/** Value: "E2_HIGHCPU_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highcpu16;
/** Value: "E2_HIGHCPU_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highcpu2;
/** Value: "E2_HIGHCPU_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highcpu32;
/** Value: "E2_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highcpu4;
/** Value: "E2_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highcpu8;
/** Value: "E2_HIGHMEM_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highmem16;
/** Value: "E2_HIGHMEM_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highmem2;
/** Value: "E2_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highmem4;
/** Value: "E2_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highmem8;
/** Value: "E2_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Standard16;
/** Value: "E2_STANDARD_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Standard2;
/** Value: "E2_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Standard32;
/** Value: "E2_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Standard4;
/** Value: "E2_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Standard8;
/** Value: "G2_STANDARD_12" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_G2Standard12;
/** Value: "G2_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_G2Standard16;
/** Value: "G2_STANDARD_24" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_G2Standard24;
/** Value: "G2_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_G2Standard32;
/** Value: "G2_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_G2Standard4;
/** Value: "G2_STANDARD_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_G2Standard48;
/** Value: "G2_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_G2Standard8;
/** Value: "G2_STANDARD_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_G2Standard96;
/** Value: "N1_HIGHCPU_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highcpu16;
/** Value: "N1_HIGHCPU_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highcpu2;
/** Value: "N1_HIGHCPU_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highcpu32;
/** Value: "N1_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highcpu4;
/** Value: "N1_HIGHCPU_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highcpu64;
/** Value: "N1_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highcpu8;
/** Value: "N1_HIGHCPU_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highcpu96;
/** Value: "N1_HIGHMEM_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highmem16;
/** Value: "N1_HIGHMEM_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highmem2;
/** Value: "N1_HIGHMEM_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highmem32;
/** Value: "N1_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highmem4;
/** Value: "N1_HIGHMEM_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highmem64;
/** Value: "N1_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highmem8;
/** Value: "N1_HIGHMEM_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highmem96;
/** Value: "N1_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Standard16;
/** Value: "N1_STANDARD_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Standard2;
/** Value: "N1_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Standard32;
/** Value: "N1_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Standard4;
/** Value: "N1_STANDARD_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Standard64;
/** Value: "N1_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Standard8;
/** Value: "N1_STANDARD_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Standard96;
/** Value: "N2D_HIGHCPU_128" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu128;
/** Value: "N2D_HIGHCPU_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu16;
/** Value: "N2D_HIGHCPU_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu2;
/** Value: "N2D_HIGHCPU_224" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu224;
/** Value: "N2D_HIGHCPU_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu32;
/** Value: "N2D_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu4;
/** Value: "N2D_HIGHCPU_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu48;
/** Value: "N2D_HIGHCPU_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu64;
/** Value: "N2D_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu8;
/** Value: "N2D_HIGHCPU_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu80;
/** Value: "N2D_HIGHCPU_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu96;
/** Value: "N2D_HIGHMEM_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem16;
/** Value: "N2D_HIGHMEM_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem2;
/** Value: "N2D_HIGHMEM_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem32;
/** Value: "N2D_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem4;
/** Value: "N2D_HIGHMEM_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem48;
/** Value: "N2D_HIGHMEM_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem64;
/** Value: "N2D_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem8;
/** Value: "N2D_HIGHMEM_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem80;
/** Value: "N2D_HIGHMEM_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem96;
/** Value: "N2D_STANDARD_128" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard128;
/** Value: "N2D_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard16;
/** Value: "N2D_STANDARD_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard2;
/** Value: "N2D_STANDARD_224" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard224;
/** Value: "N2D_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard32;
/** Value: "N2D_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard4;
/** Value: "N2D_STANDARD_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard48;
/** Value: "N2D_STANDARD_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard64;
/** Value: "N2D_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard8;
/** Value: "N2D_STANDARD_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard80;
/** Value: "N2D_STANDARD_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard96;
/** Value: "N2_HIGHCPU_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu16;
/** Value: "N2_HIGHCPU_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu2;
/** Value: "N2_HIGHCPU_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu32;
/** Value: "N2_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu4;
/** Value: "N2_HIGHCPU_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu48;
/** Value: "N2_HIGHCPU_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu64;
/** Value: "N2_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu8;
/** Value: "N2_HIGHCPU_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu80;
/** Value: "N2_HIGHCPU_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu96;
/** Value: "N2_HIGHMEM_128" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem128;
/** Value: "N2_HIGHMEM_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem16;
/** Value: "N2_HIGHMEM_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem2;
/** Value: "N2_HIGHMEM_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem32;
/** Value: "N2_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem4;
/** Value: "N2_HIGHMEM_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem48;
/** Value: "N2_HIGHMEM_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem64;
/** Value: "N2_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem8;
/** Value: "N2_HIGHMEM_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem80;
/** Value: "N2_HIGHMEM_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem96;
/** Value: "N2_STANDARD_128" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard128;
/** Value: "N2_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard16;
/** Value: "N2_STANDARD_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard2;
/** Value: "N2_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard32;
/** Value: "N2_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard4;
/** Value: "N2_STANDARD_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard48;
/** Value: "N2_STANDARD_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard64;
/** Value: "N2_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard8;
/** Value: "N2_STANDARD_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard80;
/** Value: "N2_STANDARD_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard96;
/** Value: "UNKNOWN_MACHINE_SPEC" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_UnknownMachineSpec;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_ModerateTextRequest.modelVersion

/**
 *  Use the v1 model, this model is used by default when not provided. The v1
 *  model only returns probability (confidence) score for each category.
 *
 *  Value: "MODEL_VERSION_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_ModerateTextRequest_ModelVersion_ModelVersion1;
/**
 *  Use the v2 model. The v2 model only returns probability (confidence) score
 *  for each category, and returns severity score for a subset of the
 *  categories.
 *
 *  Value: "MODEL_VERSION_2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_ModerateTextRequest_ModelVersion_ModelVersion2;
/**
 *  The default model version.
 *
 *  Value: "MODEL_VERSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_ModerateTextRequest_ModelVersion_ModelVersionUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_RamMetric.machineSpec

/** Value: "A2_HIGHGPU_1G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Highgpu1g;
/** Value: "A2_HIGHGPU_2G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Highgpu2g;
/** Value: "A2_HIGHGPU_4G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Highgpu4g;
/** Value: "A2_HIGHGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Highgpu8g;
/** Value: "A2_MEGAGPU_16G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Megagpu16g;
/** Value: "A2_ULTRAGPU_1G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Ultragpu1g;
/** Value: "A2_ULTRAGPU_2G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Ultragpu2g;
/** Value: "A2_ULTRAGPU_4G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Ultragpu4g;
/** Value: "A2_ULTRAGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Ultragpu8g;
/** Value: "A3_EDGEGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A3Edgegpu8g;
/** Value: "A3_HIGHGPU_1G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A3Highgpu1g;
/** Value: "A3_HIGHGPU_2G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A3Highgpu2g;
/** Value: "A3_HIGHGPU_4G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A3Highgpu4g;
/** Value: "A3_HIGHGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A3Highgpu8g;
/** Value: "A3_MEGAGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A3Megagpu8g;
/** Value: "A3_ULTRAGPU_8G" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A3Ultragpu8g;
/** Value: "C2D_HIGHCPU_112" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighcpu112;
/** Value: "C2D_HIGHCPU_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighcpu16;
/** Value: "C2D_HIGHCPU_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighcpu2;
/** Value: "C2D_HIGHCPU_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighcpu32;
/** Value: "C2D_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighcpu4;
/** Value: "C2D_HIGHCPU_56" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighcpu56;
/** Value: "C2D_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighcpu8;
/** Value: "C2D_HIGHMEM_112" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighmem112;
/** Value: "C2D_HIGHMEM_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighmem16;
/** Value: "C2D_HIGHMEM_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighmem2;
/** Value: "C2D_HIGHMEM_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighmem32;
/** Value: "C2D_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighmem4;
/** Value: "C2D_HIGHMEM_56" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighmem56;
/** Value: "C2D_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighmem8;
/** Value: "C2D_STANDARD_112" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dStandard112;
/** Value: "C2D_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dStandard16;
/** Value: "C2D_STANDARD_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dStandard2;
/** Value: "C2D_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dStandard32;
/** Value: "C2D_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dStandard4;
/** Value: "C2D_STANDARD_56" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dStandard56;
/** Value: "C2D_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dStandard8;
/** Value: "C2_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2Standard16;
/** Value: "C2_STANDARD_30" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2Standard30;
/** Value: "C2_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2Standard4;
/** Value: "C2_STANDARD_60" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2Standard60;
/** Value: "C2_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2Standard8;
/** Value: "C3_HIGHCPU_176" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highcpu176;
/** Value: "C3_HIGHCPU_22" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highcpu22;
/** Value: "C3_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highcpu4;
/** Value: "C3_HIGHCPU_44" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highcpu44;
/** Value: "C3_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highcpu8;
/** Value: "C3_HIGHCPU_88" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highcpu88;
/** Value: "C3_HIGHMEM_176" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highmem176;
/** Value: "C3_HIGHMEM_22" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highmem22;
/** Value: "C3_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highmem4;
/** Value: "C3_HIGHMEM_44" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highmem44;
/** Value: "C3_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highmem8;
/** Value: "C3_HIGHMEM_88" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highmem88;
/** Value: "C3_STANDARD_176" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Standard176;
/** Value: "C3_STANDARD_22" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Standard22;
/** Value: "C3_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Standard4;
/** Value: "C3_STANDARD_44" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Standard44;
/** Value: "C3_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Standard8;
/** Value: "C3_STANDARD_88" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Standard88;
/** Value: "E2_HIGHCPU_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highcpu16;
/** Value: "E2_HIGHCPU_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highcpu2;
/** Value: "E2_HIGHCPU_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highcpu32;
/** Value: "E2_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highcpu4;
/** Value: "E2_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highcpu8;
/** Value: "E2_HIGHMEM_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highmem16;
/** Value: "E2_HIGHMEM_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highmem2;
/** Value: "E2_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highmem4;
/** Value: "E2_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highmem8;
/** Value: "E2_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Standard16;
/** Value: "E2_STANDARD_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Standard2;
/** Value: "E2_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Standard32;
/** Value: "E2_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Standard4;
/** Value: "E2_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Standard8;
/** Value: "G2_STANDARD_12" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_G2Standard12;
/** Value: "G2_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_G2Standard16;
/** Value: "G2_STANDARD_24" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_G2Standard24;
/** Value: "G2_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_G2Standard32;
/** Value: "G2_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_G2Standard4;
/** Value: "G2_STANDARD_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_G2Standard48;
/** Value: "G2_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_G2Standard8;
/** Value: "G2_STANDARD_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_G2Standard96;
/** Value: "N1_HIGHCPU_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highcpu16;
/** Value: "N1_HIGHCPU_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highcpu2;
/** Value: "N1_HIGHCPU_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highcpu32;
/** Value: "N1_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highcpu4;
/** Value: "N1_HIGHCPU_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highcpu64;
/** Value: "N1_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highcpu8;
/** Value: "N1_HIGHCPU_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highcpu96;
/** Value: "N1_HIGHMEM_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highmem16;
/** Value: "N1_HIGHMEM_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highmem2;
/** Value: "N1_HIGHMEM_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highmem32;
/** Value: "N1_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highmem4;
/** Value: "N1_HIGHMEM_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highmem64;
/** Value: "N1_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highmem8;
/** Value: "N1_HIGHMEM_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highmem96;
/** Value: "N1_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Standard16;
/** Value: "N1_STANDARD_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Standard2;
/** Value: "N1_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Standard32;
/** Value: "N1_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Standard4;
/** Value: "N1_STANDARD_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Standard64;
/** Value: "N1_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Standard8;
/** Value: "N1_STANDARD_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Standard96;
/** Value: "N2D_HIGHCPU_128" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu128;
/** Value: "N2D_HIGHCPU_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu16;
/** Value: "N2D_HIGHCPU_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu2;
/** Value: "N2D_HIGHCPU_224" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu224;
/** Value: "N2D_HIGHCPU_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu32;
/** Value: "N2D_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu4;
/** Value: "N2D_HIGHCPU_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu48;
/** Value: "N2D_HIGHCPU_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu64;
/** Value: "N2D_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu8;
/** Value: "N2D_HIGHCPU_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu80;
/** Value: "N2D_HIGHCPU_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu96;
/** Value: "N2D_HIGHMEM_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem16;
/** Value: "N2D_HIGHMEM_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem2;
/** Value: "N2D_HIGHMEM_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem32;
/** Value: "N2D_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem4;
/** Value: "N2D_HIGHMEM_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem48;
/** Value: "N2D_HIGHMEM_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem64;
/** Value: "N2D_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem8;
/** Value: "N2D_HIGHMEM_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem80;
/** Value: "N2D_HIGHMEM_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem96;
/** Value: "N2D_STANDARD_128" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard128;
/** Value: "N2D_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard16;
/** Value: "N2D_STANDARD_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard2;
/** Value: "N2D_STANDARD_224" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard224;
/** Value: "N2D_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard32;
/** Value: "N2D_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard4;
/** Value: "N2D_STANDARD_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard48;
/** Value: "N2D_STANDARD_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard64;
/** Value: "N2D_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard8;
/** Value: "N2D_STANDARD_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard80;
/** Value: "N2D_STANDARD_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard96;
/** Value: "N2_HIGHCPU_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu16;
/** Value: "N2_HIGHCPU_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu2;
/** Value: "N2_HIGHCPU_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu32;
/** Value: "N2_HIGHCPU_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu4;
/** Value: "N2_HIGHCPU_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu48;
/** Value: "N2_HIGHCPU_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu64;
/** Value: "N2_HIGHCPU_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu8;
/** Value: "N2_HIGHCPU_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu80;
/** Value: "N2_HIGHCPU_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu96;
/** Value: "N2_HIGHMEM_128" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem128;
/** Value: "N2_HIGHMEM_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem16;
/** Value: "N2_HIGHMEM_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem2;
/** Value: "N2_HIGHMEM_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem32;
/** Value: "N2_HIGHMEM_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem4;
/** Value: "N2_HIGHMEM_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem48;
/** Value: "N2_HIGHMEM_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem64;
/** Value: "N2_HIGHMEM_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem8;
/** Value: "N2_HIGHMEM_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem80;
/** Value: "N2_HIGHMEM_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem96;
/** Value: "N2_STANDARD_128" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard128;
/** Value: "N2_STANDARD_16" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard16;
/** Value: "N2_STANDARD_2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard2;
/** Value: "N2_STANDARD_32" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard32;
/** Value: "N2_STANDARD_4" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard4;
/** Value: "N2_STANDARD_48" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard48;
/** Value: "N2_STANDARD_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard64;
/** Value: "N2_STANDARD_8" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard8;
/** Value: "N2_STANDARD_80" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard80;
/** Value: "N2_STANDARD_96" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard96;
/** Value: "UNKNOWN_MACHINE_SPEC" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_UnknownMachineSpec;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_RamMetric.ramType

/** Value: "A2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_RamType_A2;
/** Value: "A3" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_RamType_A3;
/**
 *  COMPUTE_OPTIMIZED
 *
 *  Value: "C2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_RamType_C2;
/** Value: "C2D" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_RamType_C2d;
/** Value: "C3" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_RamType_C3;
/** Value: "CUSTOM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_RamType_Custom;
/** Value: "E2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_RamType_E2;
/** Value: "G2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_RamType_G2;
/**
 *  MEMORY_OPTIMIZED
 *
 *  Value: "M1"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_RamType_M1;
/**
 *  MEMORY_OPTIMIZED_UPGRADE_PREMIUM
 *
 *  Value: "M2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_RamType_M2;
/** Value: "N1" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_RamType_N1;
/** Value: "N2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_RamType_N2;
/** Value: "N2_CUSTOM" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_RamType_N2Custom;
/** Value: "N2D" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_RamType_N2d;
/** Value: "UNKNOWN_RAM_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_RamMetric_RamType_UnknownRamType;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_TpuMetric.tpuType

/** Value: "TPU_V2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_TpuMetric_TpuType_TpuV2;
/** Value: "TPU_V2_POD" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_TpuMetric_TpuType_TpuV2Pod;
/** Value: "TPU_V3" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_TpuMetric_TpuType_TpuV3;
/** Value: "TPU_V3_POD" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_TpuMetric_TpuType_TpuV3Pod;
/** Value: "TPU_V5_LITEPOD" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_TpuMetric_TpuType_TpuV5Litepod;
/** Value: "UNKNOWN_TPU_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_TpuMetric_TpuType_UnknownTpuType;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSColumnSpecForecastingMetadata.columnType

/**
 *  An un-set value of this enum.
 *
 *  Value: "COLUMN_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSColumnSpecForecastingMetadata_ColumnType_ColumnTypeUnspecified;
/**
 *  Key columns are used to identify timeseries.
 *
 *  Value: "KEY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSColumnSpecForecastingMetadata_ColumnType_Key;
/**
 *  This column contains information describing static properties of the
 *  entities identified by the key column(s) (e.g. city's ZIP code).
 *
 *  Value: "KEY_METADATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSColumnSpecForecastingMetadata_ColumnType_KeyMetadata;
/**
 *  This column contains information for the given entity is known both for the
 *  past and the sufficiently far future.
 *
 *  Value: "TIME_SERIES_AVAILABLE_PAST_AND_FUTURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSColumnSpecForecastingMetadata_ColumnType_TimeSeriesAvailablePastAndFuture;
/**
 *  This column contains information for the given entity, at any time poinrt,
 *  they are only available in the time series before.
 *
 *  Value: "TIME_SERIES_AVAILABLE_PAST_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSColumnSpecForecastingMetadata_ColumnType_TimeSeriesAvailablePastOnly;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSDataErrors.errorType

/**
 *  Not specified.
 *
 *  Value: "ERROR_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSDataErrors_ErrorType_ErrorTypeUnspecified;
/**
 *  File format differnt from what is specified in the file name extension.
 *
 *  Value: "FILE_EXTENSION_MISMATCH_WITH_AUDIO_FORMAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSDataErrors_ErrorType_FileExtensionMismatchWithAudioFormat;
/**
 *  File too large. Maximum allowed size is 50 MB.
 *
 *  Value: "FILE_TOO_LARGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSDataErrors_ErrorType_FileTooLarge;
/**
 *  Transcript is missing.
 *
 *  Value: "MISSING_TRANSCRIPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSDataErrors_ErrorType_MissingTranscription;
/**
 *  Audio format not in the formats by cloud-speech AutoML. Currently only wav
 *  and flac file formats are supported.
 *
 *  Value: "UNSUPPORTED_AUDIO_FORMAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSDataErrors_ErrorType_UnsupportedAudioFormat;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSDataType.typeCode

/**
 *  Encoded as `list`, where the list elements are represented according to
 *  list_element_type.
 *
 *  Value: "ARRAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSDataType_TypeCode_Array;
/**
 *  Values of this type are not further understood by AutoML, e.g. AutoML is
 *  unable to tell the order of values (as it could with FLOAT64), or is unable
 *  to say if one value contains another (as it could with STRING). Encoded as
 *  `string` (bytes should be base64-encoded, as described in RFC 4648, section
 *  4).
 *
 *  Value: "CATEGORY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSDataType_TypeCode_Category;
/**
 *  Encoded as `number`, or the strings `"NaN"`, `"Infinity"`, or `"-Infinity"`.
 *
 *  Value: "FLOAT64"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSDataType_TypeCode_Float64;
/**
 *  Encoded as `string`.
 *
 *  Value: "STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSDataType_TypeCode_String;
/**
 *  Encoded as `struct`, where field values are represented according to
 *  struct_type.
 *
 *  Value: "STRUCT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSDataType_TypeCode_Struct;
/**
 *  Must be between 0AD and 9999AD. Encoded as `string` according to
 *  time_format, or, if that format is not set, then in RFC 3339 `date-time`
 *  format, where `time-offset` = `"Z"` (e.g. 1985-04-12T23:20:50.52Z).
 *
 *  Value: "TIMESTAMP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSDataType_TypeCode_Timestamp;
/**
 *  Not specified. Should not be used.
 *
 *  Value: "TYPE_CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSDataType_TypeCode_TypeCodeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSDockerFormat.cpuArchitecture

/** Value: "CPU_ARCHITECTURE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSDockerFormat_CpuArchitecture_CpuArchitectureUnspecified;
/** Value: "CPU_ARCHITECTURE_X86_64" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSDockerFormat_CpuArchitecture_CpuArchitectureX8664;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSDockerFormat.gpuArchitecture

/** Value: "GPU_ARCHITECTURE_NVIDIA" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSDockerFormat_GpuArchitecture_GpuArchitectureNvidia;
/** Value: "GPU_ARCHITECTURE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSDockerFormat_GpuArchitecture_GpuArchitectureUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSFileSpec.fileFormat

/** Value: "FILE_FORMAT_RAW_CAPACITOR" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSFileSpec_FileFormat_FileFormatRawCapacitor;
/**
 *  Only the lexicographically first file described by the file_spec contains
 *  the header line.
 *
 *  Value: "FILE_FORMAT_RAW_CSV"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSFileSpec_FileFormat_FileFormatRawCsv;
/** Value: "FILE_FORMAT_RECORDIO" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSFileSpec_FileFormat_FileFormatRecordio;
/** Value: "FILE_FORMAT_SSTABLE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSFileSpec_FileFormat_FileFormatSstable GTLR_DEPRECATED;
/**
 *  Internal format for parallel text data used by Google Translate.
 *
 *  Value: "FILE_FORMAT_TRANSLATION_RKV"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSFileSpec_FileFormat_FileFormatTranslationRkv;
/** Value: "FILE_FORMAT_UNKNOWN" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSFileSpec_FileFormat_FileFormatUnknown;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSImageClassificationTrainResponse.stopReason

/** Value: "TRAIN_STOP_REASON_BUDGET_REACHED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageClassificationTrainResponse_StopReason_TrainStopReasonBudgetReached;
/**
 *  Model fully converged, can not be resumbed training.
 *
 *  Value: "TRAIN_STOP_REASON_MODEL_CONVERGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageClassificationTrainResponse_StopReason_TrainStopReasonModelConverged;
/**
 *  Model early converged, can be further trained till full convergency.
 *
 *  Value: "TRAIN_STOP_REASON_MODEL_EARLY_STOPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageClassificationTrainResponse_StopReason_TrainStopReasonModelEarlyStopped;
/** Value: "TRAIN_STOP_REASON_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageClassificationTrainResponse_StopReason_TrainStopReasonUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation.computeEngineAcceleratorType

/**
 *  Nvidia A100 80GB GPU.
 *
 *  Value: "NVIDIA_A100_80GB"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaA10080gb;
/**
 *  Nvidia H100 80Gb GPU.
 *
 *  Value: "NVIDIA_H100_80GB"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaH10080gb;
/**
 *  Nvidia H100 80Gb GPU.
 *
 *  Value: "NVIDIA_H100_MEGA_80GB"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaH100Mega80gb;
/**
 *  Nvidia H200 141Gb GPU.
 *
 *  Value: "NVIDIA_H200_141GB"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaH200141gb;
/**
 *  Nvidia L4 GPU.
 *
 *  Value: "NVIDIA_L4"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaL4;
/**
 *  Nvidia Tesla A100 GPU.
 *
 *  Value: "NVIDIA_TESLA_A100"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaTeslaA100;
/**
 *  Nvidia Tesla K80 GPU.
 *
 *  Value: "NVIDIA_TESLA_K80"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaTeslaK80;
/**
 *  Nvidia Tesla P100 GPU.
 *
 *  Value: "NVIDIA_TESLA_P100"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaTeslaP100;
/**
 *  Nvidia Tesla P4 GPU.
 *
 *  Value: "NVIDIA_TESLA_P4"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaTeslaP4;
/**
 *  Nvidia Tesla T4 GPU.
 *
 *  Value: "NVIDIA_TESLA_T4"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaTeslaT4;
/**
 *  Nvidia Tesla V100 GPU.
 *
 *  Value: "NVIDIA_TESLA_V100"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaTeslaV100;
/**
 *  TPU v2 (JellyFish).
 *
 *  Value: "TPU_V2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_TpuV2;
/**
 *  TPU v3 (DragonFish).
 *
 *  Value: "TPU_V3"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_TpuV3;
/**
 *  TPU_v4 (PufferFish).
 *
 *  Value: "TPU_V4_POD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_TpuV4Pod;
/**
 *  TPU v5 Lite Pods.
 *
 *  Value: "TPU_V5_LITEPOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_TpuV5Litepod;
/** Value: "UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_Unspecified;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation.servomaticPartitionType

/**
 *  The partition used by regionalized servomatic cloud regions.
 *
 *  Value: "PARTITION_CPU"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ServomaticPartitionType_PartitionCpu;
/**
 *  The partition used for loading models from custom storage.
 *
 *  Value: "PARTITION_CUSTOM_STORAGE_CPU"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ServomaticPartitionType_PartitionCustomStorageCpu;
/**
 *  To be used by customers with Jellyfish-accelerated ops.
 *
 *  Value: "PARTITION_JELLYFISH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ServomaticPartitionType_PartitionJellyfish;
/**
 *  It has significantly lower replication than partition-0 and is located in
 *  the US only. It also has a larger model size limit and higher default RAM
 *  quota than partition-0. Customers with batch traffic, US-based traffic, or
 *  very large models should use this partition. Capacity in this partition is
 *  significantly cheaper than partition-0.
 *
 *  Value: "PARTITION_REDUCED_HOMING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ServomaticPartitionType_PartitionReducedHoming;
/** Value: "PARTITION_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ServomaticPartitionType_PartitionTypeUnspecified;
/**
 *  The default partition.
 *
 *  Value: "PARTITION_ZERO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ServomaticPartitionType_PartitionZero;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSImageObjectDetectionModelSpec.stopReason

/** Value: "TRAIN_STOP_REASON_BUDGET_REACHED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageObjectDetectionModelSpec_StopReason_TrainStopReasonBudgetReached;
/**
 *  Model fully converged, can not be resumbed training.
 *
 *  Value: "TRAIN_STOP_REASON_MODEL_CONVERGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageObjectDetectionModelSpec_StopReason_TrainStopReasonModelConverged;
/**
 *  Model early converged, can be further trained till full convergency.
 *
 *  Value: "TRAIN_STOP_REASON_MODEL_EARLY_STOPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageObjectDetectionModelSpec_StopReason_TrainStopReasonModelEarlyStopped;
/** Value: "TRAIN_STOP_REASON_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageObjectDetectionModelSpec_StopReason_TrainStopReasonUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSImageSegmentationTrainResponse.stopReason

/** Value: "TRAIN_STOP_REASON_BUDGET_REACHED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageSegmentationTrainResponse_StopReason_TrainStopReasonBudgetReached;
/**
 *  Model fully converged, can not be resumbed training.
 *
 *  Value: "TRAIN_STOP_REASON_MODEL_CONVERGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageSegmentationTrainResponse_StopReason_TrainStopReasonModelConverged;
/**
 *  Model early converged, can be further trained till full convergency.
 *
 *  Value: "TRAIN_STOP_REASON_MODEL_EARLY_STOPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageSegmentationTrainResponse_StopReason_TrainStopReasonModelEarlyStopped;
/** Value: "TRAIN_STOP_REASON_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSImageSegmentationTrainResponse_StopReason_TrainStopReasonUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSModelArtifactItem.artifactFormat

/**
 *  Should not be used.
 *
 *  Value: "ARTIFACT_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSModelArtifactItem_ArtifactFormat_ArtifactFormatUnspecified;
/**
 *  Used for iOS mobile devices in (.mlmodel) format. See
 *  https://developer.apple.com/documentation/coreml
 *
 *  Value: "CORE_ML"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSModelArtifactItem_ArtifactFormat_CoreMl;
/**
 *  Used for [Edge TPU](https://cloud.google.com/edge-tpu/) devices.
 *
 *  Value: "EDGE_TPU_TF_LITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSModelArtifactItem_ArtifactFormat_EdgeTpuTfLite;
/**
 *  The Tensorflow checkpoints. See https://www.tensorflow.org/guide/checkpoint.
 *
 *  Value: "TF_CHECKPOINT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSModelArtifactItem_ArtifactFormat_TfCheckpoint;
/**
 *  A [TensorFlow.js](https://www.tensorflow.org/js) model that can be used in
 *  the browser and in Node.js using JavaScript.
 *
 *  Value: "TF_JS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSModelArtifactItem_ArtifactFormat_TfJs;
/**
 *  Model artifact in generic TensorFlow Lite (.tflite) format. See
 *  https://www.tensorflow.org/lite.
 *
 *  Value: "TF_LITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSModelArtifactItem_ArtifactFormat_TfLite;
/**
 *  The Tensorflow SavedModel binary.
 *
 *  Value: "TF_SAVED_MODEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSModelArtifactItem_ArtifactFormat_TfSavedModel;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSResponseExplanationMetadataInputMetadata.modality

/** Value: "CATEGORICAL" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSResponseExplanationMetadataInputMetadata_Modality_Categorical;
/** Value: "IMAGE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSResponseExplanationMetadataInputMetadata_Modality_Image;
/** Value: "MODALITY_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSResponseExplanationMetadataInputMetadata_Modality_ModalityUnspecified;
/** Value: "NUMERIC" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSResponseExplanationMetadataInputMetadata_Modality_Numeric;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSSpeechEvaluationMetricsSubModelEvaluationMetric.biasingModelType

/** Value: "BIASING_MODEL_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSSpeechEvaluationMetricsSubModelEvaluationMetric_BiasingModelType_BiasingModelTypeUnspecified;
/**
 *  Build biasing model on top of COMMAND_AND_SEARCH model
 *
 *  Value: "COMMAND_AND_SEARCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSSpeechEvaluationMetricsSubModelEvaluationMetric_BiasingModelType_CommandAndSearch;
/**
 *  Build biasing model on top of DEFAULT model
 *
 *  Value: "DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSSpeechEvaluationMetricsSubModelEvaluationMetric_BiasingModelType_Default;
/**
 *  Build biasing model on top of PHONE_CALL model
 *
 *  Value: "PHONE_CALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSSpeechEvaluationMetricsSubModelEvaluationMetric_BiasingModelType_PhoneCall;
/**
 *  Build biasing model on top of VIDEO model
 *
 *  Value: "VIDEO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSSpeechEvaluationMetricsSubModelEvaluationMetric_BiasingModelType_Video;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSSpeechModelSpecSubModelSpec.biasingModelType

/** Value: "BIASING_MODEL_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSSpeechModelSpecSubModelSpec_BiasingModelType_BiasingModelTypeUnspecified;
/**
 *  Build biasing model on top of COMMAND_AND_SEARCH model
 *
 *  Value: "COMMAND_AND_SEARCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSSpeechModelSpecSubModelSpec_BiasingModelType_CommandAndSearch;
/**
 *  Build biasing model on top of DEFAULT model
 *
 *  Value: "DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSSpeechModelSpecSubModelSpec_BiasingModelType_Default;
/**
 *  Build biasing model on top of PHONE_CALL model
 *
 *  Value: "PHONE_CALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSSpeechModelSpecSubModelSpec_BiasingModelType_PhoneCall;
/**
 *  Build biasing model on top of VIDEO model
 *
 *  Value: "VIDEO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSSpeechModelSpecSubModelSpec_BiasingModelType_Video;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSTablesTrainingOperationMetadata.createModelStage

/**
 *  Unspecified stage.
 *
 *  Value: "CREATE_MODEL_STAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTablesTrainingOperationMetadata_CreateModelStage_CreateModelStageUnspecified;
/**
 *  Prepare the model training pipeline and run data processing.
 *
 *  Value: "DATA_PREPROCESSING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTablesTrainingOperationMetadata_CreateModelStage_DataPreprocessing;
/**
 *  Run evaluation.
 *
 *  Value: "EVALUATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTablesTrainingOperationMetadata_CreateModelStage_Evaluating;
/**
 *  Finalizing model training pipeline.
 *
 *  Value: "MODEL_POST_PROCESSING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTablesTrainingOperationMetadata_CreateModelStage_ModelPostProcessing;
/**
 *  Training model.
 *
 *  Value: "TRAINING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTablesTrainingOperationMetadata_CreateModelStage_Training;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSTextComponentModel.partition

/**
 *  The partition used by regionalized servomatic cloud regions.
 *
 *  Value: "PARTITION_CPU"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_Partition_PartitionCpu;
/**
 *  The partition used for loading models from custom storage.
 *
 *  Value: "PARTITION_CUSTOM_STORAGE_CPU"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_Partition_PartitionCustomStorageCpu;
/**
 *  To be used by customers with Jellyfish-accelerated ops.
 *
 *  Value: "PARTITION_JELLYFISH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_Partition_PartitionJellyfish;
/**
 *  It has significantly lower replication than partition-0 and is located in
 *  the US only. It also has a larger model size limit and higher default RAM
 *  quota than partition-0. Customers with batch traffic, US-based traffic, or
 *  very large models should use this partition. Capacity in this partition is
 *  significantly cheaper than partition-0.
 *
 *  Value: "PARTITION_REDUCED_HOMING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_Partition_PartitionReducedHoming;
/** Value: "PARTITION_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_Partition_PartitionTypeUnspecified;
/**
 *  The default partition.
 *
 *  Value: "PARTITION_ZERO"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_Partition_PartitionZero;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSTextComponentModel.submodelType

/**
 *  Model type used to train default, MA, and ATC models in a single batch
 *  worker pipeline.
 *
 *  Value: "TEXT_MODEL_TYPE_ALL_MODELS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeAllModels;
/** Value: "TEXT_MODEL_TYPE_ATC" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeAtc;
/**
 *  BERT pipeline needs a specific model type, since it uses a different TFX
 *  configuration compared with DEFAULT (despite sharing most of the code).
 *
 *  Value: "TEXT_MODEL_TYPE_BERT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeBert;
/** Value: "TEXT_MODEL_TYPE_CHATBASE" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeChatbase;
/** Value: "TEXT_MODEL_TYPE_CLARA2" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeClara2;
/**
 *  A composite model represents a set of component models that have to be used
 *  together for prediction. A composite model appears to be a single model to
 *  the model user. It may contain only one component model.
 *
 *  Value: "TEXT_MODEL_TYPE_COMPOSITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeComposite;
/** Value: "TEXT_MODEL_TYPE_DEFAULT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeDefault;
/**
 *  Model type for EncPaLM.
 *
 *  Value: "TEXT_MODEL_TYPE_ENC_PALM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeEncPalm;
/** Value: "TEXT_MODEL_TYPE_META_ARCHITECT" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeMetaArchitect;
/**
 *  Model type for relationship extraction.
 *
 *  Value: "TEXT_MODEL_TYPE_RELATIONSHIP_EXTRACTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeRelationshipExtraction;
/** Value: "TEXT_MODEL_TYPE_SAFT_SPAN_LABELING" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeSaftSpanLabeling;
/**
 *  Model type for entity extraction.
 *
 *  Value: "TEXT_MODEL_TYPE_TEXT_EXTRACTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeTextExtraction;
/** Value: "TEXT_MODEL_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSTranslationTrainResponse.modelType

/**
 *  Current model.
 *
 *  Value: "CURRENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTranslationTrainResponse_ModelType_Current;
/**
 *  Legacy model. Will be deprecated.
 *
 *  Value: "LEGACY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTranslationTrainResponse_ModelType_Legacy;
/**
 *  Default
 *
 *  Value: "MODEL_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSTranslationTrainResponse_ModelType_ModelTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSVisionErrorAnalysisConfig.queryType

/**
 *  Query similar samples across all classes in the dataset.
 *
 *  Value: "QUERY_TYPE_ALL_SIMILAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisionErrorAnalysisConfig_QueryType_QueryTypeAllSimilar;
/**
 *  Query dissimilar samples from the same class of the input sample.
 *
 *  Value: "QUERY_TYPE_SAME_CLASS_DISSIMILAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisionErrorAnalysisConfig_QueryType_QueryTypeSameClassDissimilar;
/**
 *  Query similar samples from the same class of the input sample.
 *
 *  Value: "QUERY_TYPE_SAME_CLASS_SIMILAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisionErrorAnalysisConfig_QueryType_QueryTypeSameClassSimilar;
/**
 *  Unspecified query type for model error analysis.
 *
 *  Value: "QUERY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisionErrorAnalysisConfig_QueryType_QueryTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSVisualization.colorMap

/**
 *  Should not be used.
 *
 *  Value: "COLOR_MAP_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_ColorMap_ColorMapUnspecified;
/**
 *  Positive: green. Negative: green.
 *
 *  Value: "GREEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_ColorMap_Green;
/**
 *  Positive: green. Negative: pink.
 *
 *  Value: "PINK_GREEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_ColorMap_PinkGreen;
/**
 *  PiYG palette.
 *
 *  Value: "PINK_WHITE_GREEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_ColorMap_PinkWhiteGreen;
/**
 *  Positive: red. Negative: red.
 *
 *  Value: "RED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_ColorMap_Red;
/**
 *  Positive: green. Negative: red.
 *
 *  Value: "RED_GREEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_ColorMap_RedGreen;
/**
 *  Viridis color map: A perceptually uniform color mapping which is easier to
 *  see by those with colorblindness and progresses from yellow to green to
 *  blue. Positive: yellow. Negative: blue.
 *
 *  Value: "VIRIDIS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_ColorMap_Viridis;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSVisualization.overlayType

/**
 *  The attributions are shown on top of grayscaled version of the original
 *  image.
 *
 *  Value: "GRAYSCALE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_OverlayType_Grayscale;
/**
 *  The attributions are used as a mask to reveal predictive parts of the image
 *  and hide the un-predictive parts.
 *
 *  Value: "MASK_BLACK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_OverlayType_MaskBlack;
/**
 *  No overlay.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_OverlayType_None;
/**
 *  The attributions are shown on top of the original image.
 *
 *  Value: "ORIGINAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_OverlayType_Original;
/**
 *  Default value. This is the same as NONE.
 *
 *  Value: "OVERLAY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_OverlayType_OverlayTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSVisualization.polarity

/**
 *  Shows both positive and negative attributions.
 *
 *  Value: "BOTH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_Polarity_Both;
/**
 *  Setting polarity to negative highlights areas that does not lead to the
 *  models's current prediction.
 *
 *  Value: "NEGATIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_Polarity_Negative;
/**
 *  Default value. This is the same as POSITIVE.
 *
 *  Value: "POLARITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_Polarity_PolarityUnspecified;
/**
 *  Highlights the pixels/outlines that were most influential to the model's
 *  prediction.
 *
 *  Value: "POSITIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_Polarity_Positive;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_XPSVisualization.type

/**
 *  Shows which region contributed to the image prediction by outlining the
 *  region.
 *
 *  Value: "OUTLINES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_Type_Outlines;
/**
 *  Shows which pixel contributed to the image prediction.
 *
 *  Value: "PIXELS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_Type_Pixels;
/**
 *  Should not be used.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_XPSVisualization_Type_TypeUnspecified;

/**
 *  The entity analysis request message.
 */
@interface GTLRCloudNaturalLanguage_AnalyzeEntitiesRequest : GTLRObject

/** Required. Input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Document *document;

/**
 *  The encoding type used by the API to calculate offsets.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_None
 *        If `EncodingType` is not specified, encoding-dependent information
 *        (such as `begin_offset`) will be set at `-1`. (Value: "NONE")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf16
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-16 encoding of the input. Java and JavaScript are
 *        examples of languages that use this encoding natively. (Value:
 *        "UTF16")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf32
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-32 encoding of the input. Python is an example of a
 *        language that uses this encoding natively. (Value: "UTF32")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf8
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-8 encoding of the input. C++ and Go are examples of
 *        languages that use this encoding natively. (Value: "UTF8")
 */
@property(nonatomic, copy, nullable) NSString *encodingType;

@end


/**
 *  The entity analysis response message.
 */
@interface GTLRCloudNaturalLanguage_AnalyzeEntitiesResponse : GTLRObject

/** The recognized entities in the input document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Entity *> *entities;

/**
 *  The language of the text, which will be the same as the language specified
 *  in the request or, if not specified, the automatically-detected language.
 *  See Document.language_code field for more details.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Whether the language is officially supported. The API may still return a
 *  response when the language is not supported, but it is on a best effort
 *  basis.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *languageSupported;

@end


/**
 *  The sentiment analysis request message.
 */
@interface GTLRCloudNaturalLanguage_AnalyzeSentimentRequest : GTLRObject

/** Required. Input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Document *document;

/**
 *  The encoding type used by the API to calculate sentence offsets.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_None
 *        If `EncodingType` is not specified, encoding-dependent information
 *        (such as `begin_offset`) will be set at `-1`. (Value: "NONE")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf16
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-16 encoding of the input. Java and JavaScript are
 *        examples of languages that use this encoding natively. (Value:
 *        "UTF16")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf32
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-32 encoding of the input. Python is an example of a
 *        language that uses this encoding natively. (Value: "UTF32")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf8
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-8 encoding of the input. C++ and Go are examples of
 *        languages that use this encoding natively. (Value: "UTF8")
 */
@property(nonatomic, copy, nullable) NSString *encodingType;

@end


/**
 *  The sentiment analysis response message.
 */
@interface GTLRCloudNaturalLanguage_AnalyzeSentimentResponse : GTLRObject

/** The overall sentiment of the input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Sentiment *documentSentiment;

/**
 *  The language of the text, which will be the same as the language specified
 *  in the request or, if not specified, the automatically-detected language.
 *  See Document.language_code field for more details.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Whether the language is officially supported. The API may still return a
 *  response when the language is not supported, but it is on a best effort
 *  basis.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *languageSupported;

/** The sentiment for all the sentences in the document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Sentence *> *sentences;

@end


/**
 *  The request message for the text annotation API, which can perform multiple
 *  analysis types in one call.
 */
@interface GTLRCloudNaturalLanguage_AnnotateTextRequest : GTLRObject

/** Required. Input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Document *document;

/**
 *  The encoding type used by the API to calculate offsets.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_None If
 *        `EncodingType` is not specified, encoding-dependent information (such
 *        as `begin_offset`) will be set at `-1`. (Value: "NONE")
 *    @arg @c kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf16
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-16 encoding of the input. Java and JavaScript are
 *        examples of languages that use this encoding natively. (Value:
 *        "UTF16")
 *    @arg @c kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf32
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-32 encoding of the input. Python is an example of a
 *        language that uses this encoding natively. (Value: "UTF32")
 *    @arg @c kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf8
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-8 encoding of the input. C++ and Go are examples of
 *        languages that use this encoding natively. (Value: "UTF8")
 */
@property(nonatomic, copy, nullable) NSString *encodingType;

/** Required. The enabled features. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_AnnotateTextRequestFeatures *features;

@end


/**
 *  All available features. Setting each one to true will enable that specific
 *  analysis for the input.
 */
@interface GTLRCloudNaturalLanguage_AnnotateTextRequestFeatures : GTLRObject

/**
 *  Optional. Classify the full document into categories.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *classifyText;

/**
 *  Optional. Extract document-level sentiment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *extractDocumentSentiment;

/**
 *  Optional. Extract entities.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *extractEntities;

/**
 *  Optional. Moderate the document for harmful and sensitive categories.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *moderateText;

@end


/**
 *  The text annotations response message.
 */
@interface GTLRCloudNaturalLanguage_AnnotateTextResponse : GTLRObject

/** Categories identified in the input document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_ClassificationCategory *> *categories;

/**
 *  The overall sentiment for the document. Populated if the user enables
 *  AnnotateTextRequest.Features.extract_document_sentiment.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Sentiment *documentSentiment;

/**
 *  Entities, along with their semantic information, in the input document.
 *  Populated if the user enables AnnotateTextRequest.Features.extract_entities
 *  .
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Entity *> *entities;

/**
 *  The language of the text, which will be the same as the language specified
 *  in the request or, if not specified, the automatically-detected language.
 *  See Document.language_code field for more details.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Whether the language is officially supported by all requested features. The
 *  API may still return a response when the language is not supported, but it
 *  is on a best effort basis.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *languageSupported;

/** Harmful and sensitive categories identified in the input document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_ClassificationCategory *> *moderationCategories;

/**
 *  Sentences in the input document. Populated if the user enables
 *  AnnotateTextRequest.Features.extract_document_sentiment.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Sentence *> *sentences;

@end


/**
 *  Represents a category returned from the text classifier.
 */
@interface GTLRCloudNaturalLanguage_ClassificationCategory : GTLRObject

/**
 *  The classifier's confidence of the category. Number represents how certain
 *  the classifier is that this category represents the given text.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *confidence;

/** The name of the category representing the document. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The classifier's severity of the category. This is only present
 *  when the ModerateTextRequest.ModelVersion is set to MODEL_VERSION_2, and the
 *  corresponding category has a severity score.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *severity;

@end


/**
 *  The document classification request message.
 */
@interface GTLRCloudNaturalLanguage_ClassifyTextRequest : GTLRObject

/** Required. Input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Document *document;

@end


/**
 *  The document classification response message.
 */
@interface GTLRCloudNaturalLanguage_ClassifyTextResponse : GTLRObject

/** Categories representing the input document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_ClassificationCategory *> *categories;

/**
 *  The language of the text, which will be the same as the language specified
 *  in the request or, if not specified, the automatically-detected language.
 *  See Document.language_code field for more details.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Whether the language is officially supported. The API may still return a
 *  response when the language is not supported, but it is on a best effort
 *  basis.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *languageSupported;

@end


/**
 *  Represents a color in the RGBA color space. This representation is designed
 *  for simplicity of conversion to and from color representations in various
 *  languages over compactness. For example, the fields of this representation
 *  can be trivially provided to the constructor of `java.awt.Color` in Java; it
 *  can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha`
 *  method in iOS; and, with just a little work, it can be easily formatted into
 *  a CSS `rgba()` string in JavaScript. This reference page doesn't have
 *  information about the absolute color space that should be used to interpret
 *  the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default,
 *  applications should assume the sRGB color space. When color equality needs
 *  to be decided, implementations, unless documented otherwise, treat two
 *  colors as equal if all their red, green, blue, and alpha values each differ
 *  by at most `1e-5`. Example (Java): import com.google.type.Color; // ...
 *  public static java.awt.Color fromProto(Color protocolor) { float alpha =
 *  protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new
 *  java.awt.Color( protocolor.getRed(), protocolor.getGreen(),
 *  protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color
 *  color) { float red = (float) color.getRed(); float green = (float)
 *  color.getGreen(); float blue = (float) color.getBlue(); float denominator =
 *  255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red /
 *  denominator) .setGreen(green / denominator) .setBlue(blue / denominator);
 *  int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha(
 *  FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build());
 *  } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ...
 *  static UIColor* fromProto(Color* protocolor) { float red = [protocolor red];
 *  float green = [protocolor green]; float blue = [protocolor blue];
 *  FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if
 *  (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor
 *  colorWithRed:red green:green blue:blue alpha:alpha]; } static Color*
 *  toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color
 *  getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color*
 *  result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green];
 *  [result setBlue:blue]; if (alpha <= 0.9999) { [result
 *  setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return
 *  result; } // ... Example (JavaScript): // ... var protoToCssColor =
 *  function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac =
 *  rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red =
 *  Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue
 *  = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return
 *  rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value ||
 *  0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(',
 *  rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor =
 *  function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green
 *  << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6
 *  - hexString.length; var resultBuilder = ['#']; for (var i = 0; i <
 *  missingZeros; i++) { resultBuilder.push('0'); }
 *  resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
 */
@interface GTLRCloudNaturalLanguage_Color : GTLRObject

/**
 *  The fraction of this color that should be applied to the pixel. That is, the
 *  final pixel color is defined by the equation: `pixel color = alpha * (this
 *  color) + (1.0 - alpha) * (background color)` This means that a value of 1.0
 *  corresponds to a solid color, whereas a value of 0.0 corresponds to a
 *  completely transparent color. This uses a wrapper message rather than a
 *  simple float scalar so that it is possible to distinguish between a default
 *  value and the value being unset. If omitted, this color object is rendered
 *  as a solid color (as if the alpha value had been explicitly given a value of
 *  1.0).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *alpha;

/**
 *  The amount of blue in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blue;

/**
 *  The amount of green in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *green;

/**
 *  The amount of red in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *red;

@end


/**
 *  Metric for billing reports.
 */
@interface GTLRCloudNaturalLanguage_CpuMetric : GTLRObject

/**
 *  Required. Number of CPU cores.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *coreNumber;

/**
 *  Required. Total seconds of core usage, e.g. 4.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *coreSec;

/**
 *  Required. Type of cpu, e.g. N2.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_CpuType_A2 GPU-based machine,
 *        skip quota reporting. (Value: "A2")
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_CpuType_A3 GPU-based machine,
 *        skip quota reporting. (Value: "A3")
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_CpuType_C2 COMPUTE_OPTIMIZED
 *        (Value: "C2")
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_CpuType_C2d Value "C2D"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_CpuType_C3 Value "C3"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_CpuType_Custom Value "CUSTOM"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_CpuType_E2 Value "E2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_CpuType_G2 GPU-based machine,
 *        skip quota reporting. (Value: "G2")
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_CpuType_M1 MEMORY_OPTIMIZED
 *        (Value: "M1")
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_CpuType_M2
 *        MEMORY_OPTIMIZED_UPGRADE_PREMIUM (Value: "M2")
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_CpuType_N1 Value "N1"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_CpuType_N2 Value "N2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_CpuType_N2Custom Value
 *        "N2_CUSTOM"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_CpuType_N2d Value "N2D"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_CpuType_UnknownCpuType Value
 *        "UNKNOWN_CPU_TYPE"
 */
@property(nonatomic, copy, nullable) NSString *cpuType;

/**
 *  Required. Machine spec, e.g. N1_STANDARD_4.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Highgpu1g Value
 *        "A2_HIGHGPU_1G"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Highgpu2g Value
 *        "A2_HIGHGPU_2G"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Highgpu4g Value
 *        "A2_HIGHGPU_4G"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Highgpu8g Value
 *        "A2_HIGHGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Megagpu16g Value
 *        "A2_MEGAGPU_16G"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Ultragpu1g Value
 *        "A2_ULTRAGPU_1G"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Ultragpu2g Value
 *        "A2_ULTRAGPU_2G"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Ultragpu4g Value
 *        "A2_ULTRAGPU_4G"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A2Ultragpu8g Value
 *        "A2_ULTRAGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A3Edgegpu8g Value
 *        "A3_EDGEGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A3Highgpu1g Value
 *        "A3_HIGHGPU_1G"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A3Highgpu2g Value
 *        "A3_HIGHGPU_2G"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A3Highgpu4g Value
 *        "A3_HIGHGPU_4G"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A3Highgpu8g Value
 *        "A3_HIGHGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A3Megagpu8g Value
 *        "A3_MEGAGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_A3Ultragpu8g Value
 *        "A3_ULTRAGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighcpu112
 *        Value "C2D_HIGHCPU_112"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighcpu16 Value
 *        "C2D_HIGHCPU_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighcpu2 Value
 *        "C2D_HIGHCPU_2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighcpu32 Value
 *        "C2D_HIGHCPU_32"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighcpu4 Value
 *        "C2D_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighcpu56 Value
 *        "C2D_HIGHCPU_56"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighcpu8 Value
 *        "C2D_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighmem112
 *        Value "C2D_HIGHMEM_112"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighmem16 Value
 *        "C2D_HIGHMEM_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighmem2 Value
 *        "C2D_HIGHMEM_2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighmem32 Value
 *        "C2D_HIGHMEM_32"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighmem4 Value
 *        "C2D_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighmem56 Value
 *        "C2D_HIGHMEM_56"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dHighmem8 Value
 *        "C2D_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dStandard112
 *        Value "C2D_STANDARD_112"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dStandard16
 *        Value "C2D_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dStandard2 Value
 *        "C2D_STANDARD_2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dStandard32
 *        Value "C2D_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dStandard4 Value
 *        "C2D_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dStandard56
 *        Value "C2D_STANDARD_56"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2dStandard8 Value
 *        "C2D_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2Standard16 Value
 *        "C2_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2Standard30 Value
 *        "C2_STANDARD_30"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2Standard4 Value
 *        "C2_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2Standard60 Value
 *        "C2_STANDARD_60"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C2Standard8 Value
 *        "C2_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highcpu176 Value
 *        "C3_HIGHCPU_176"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highcpu22 Value
 *        "C3_HIGHCPU_22"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highcpu4 Value
 *        "C3_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highcpu44 Value
 *        "C3_HIGHCPU_44"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highcpu8 Value
 *        "C3_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highcpu88 Value
 *        "C3_HIGHCPU_88"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highmem176 Value
 *        "C3_HIGHMEM_176"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highmem22 Value
 *        "C3_HIGHMEM_22"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highmem4 Value
 *        "C3_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highmem44 Value
 *        "C3_HIGHMEM_44"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highmem8 Value
 *        "C3_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Highmem88 Value
 *        "C3_HIGHMEM_88"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Standard176
 *        Value "C3_STANDARD_176"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Standard22 Value
 *        "C3_STANDARD_22"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Standard4 Value
 *        "C3_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Standard44 Value
 *        "C3_STANDARD_44"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Standard8 Value
 *        "C3_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_C3Standard88 Value
 *        "C3_STANDARD_88"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highcpu16 Value
 *        "E2_HIGHCPU_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highcpu2 Value
 *        "E2_HIGHCPU_2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highcpu32 Value
 *        "E2_HIGHCPU_32"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highcpu4 Value
 *        "E2_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highcpu8 Value
 *        "E2_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highmem16 Value
 *        "E2_HIGHMEM_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highmem2 Value
 *        "E2_HIGHMEM_2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highmem4 Value
 *        "E2_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Highmem8 Value
 *        "E2_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Standard16 Value
 *        "E2_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Standard2 Value
 *        "E2_STANDARD_2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Standard32 Value
 *        "E2_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Standard4 Value
 *        "E2_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_E2Standard8 Value
 *        "E2_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_G2Standard12 Value
 *        "G2_STANDARD_12"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_G2Standard16 Value
 *        "G2_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_G2Standard24 Value
 *        "G2_STANDARD_24"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_G2Standard32 Value
 *        "G2_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_G2Standard4 Value
 *        "G2_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_G2Standard48 Value
 *        "G2_STANDARD_48"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_G2Standard8 Value
 *        "G2_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_G2Standard96 Value
 *        "G2_STANDARD_96"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highcpu16 Value
 *        "N1_HIGHCPU_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highcpu2 Value
 *        "N1_HIGHCPU_2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highcpu32 Value
 *        "N1_HIGHCPU_32"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highcpu4 Value
 *        "N1_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highcpu64 Value
 *        "N1_HIGHCPU_64"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highcpu8 Value
 *        "N1_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highcpu96 Value
 *        "N1_HIGHCPU_96"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highmem16 Value
 *        "N1_HIGHMEM_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highmem2 Value
 *        "N1_HIGHMEM_2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highmem32 Value
 *        "N1_HIGHMEM_32"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highmem4 Value
 *        "N1_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highmem64 Value
 *        "N1_HIGHMEM_64"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highmem8 Value
 *        "N1_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Highmem96 Value
 *        "N1_HIGHMEM_96"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Standard16 Value
 *        "N1_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Standard2 Value
 *        "N1_STANDARD_2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Standard32 Value
 *        "N1_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Standard4 Value
 *        "N1_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Standard64 Value
 *        "N1_STANDARD_64"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Standard8 Value
 *        "N1_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N1Standard96 Value
 *        "N1_STANDARD_96"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu128
 *        Value "N2D_HIGHCPU_128"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu16 Value
 *        "N2D_HIGHCPU_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu2 Value
 *        "N2D_HIGHCPU_2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu224
 *        Value "N2D_HIGHCPU_224"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu32 Value
 *        "N2D_HIGHCPU_32"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu4 Value
 *        "N2D_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu48 Value
 *        "N2D_HIGHCPU_48"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu64 Value
 *        "N2D_HIGHCPU_64"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu8 Value
 *        "N2D_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu80 Value
 *        "N2D_HIGHCPU_80"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighcpu96 Value
 *        "N2D_HIGHCPU_96"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem16 Value
 *        "N2D_HIGHMEM_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem2 Value
 *        "N2D_HIGHMEM_2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem32 Value
 *        "N2D_HIGHMEM_32"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem4 Value
 *        "N2D_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem48 Value
 *        "N2D_HIGHMEM_48"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem64 Value
 *        "N2D_HIGHMEM_64"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem8 Value
 *        "N2D_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem80 Value
 *        "N2D_HIGHMEM_80"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dHighmem96 Value
 *        "N2D_HIGHMEM_96"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard128
 *        Value "N2D_STANDARD_128"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard16
 *        Value "N2D_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard2 Value
 *        "N2D_STANDARD_2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard224
 *        Value "N2D_STANDARD_224"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard32
 *        Value "N2D_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard4 Value
 *        "N2D_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard48
 *        Value "N2D_STANDARD_48"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard64
 *        Value "N2D_STANDARD_64"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard8 Value
 *        "N2D_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard80
 *        Value "N2D_STANDARD_80"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2dStandard96
 *        Value "N2D_STANDARD_96"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu16 Value
 *        "N2_HIGHCPU_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu2 Value
 *        "N2_HIGHCPU_2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu32 Value
 *        "N2_HIGHCPU_32"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu4 Value
 *        "N2_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu48 Value
 *        "N2_HIGHCPU_48"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu64 Value
 *        "N2_HIGHCPU_64"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu8 Value
 *        "N2_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu80 Value
 *        "N2_HIGHCPU_80"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highcpu96 Value
 *        "N2_HIGHCPU_96"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem128 Value
 *        "N2_HIGHMEM_128"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem16 Value
 *        "N2_HIGHMEM_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem2 Value
 *        "N2_HIGHMEM_2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem32 Value
 *        "N2_HIGHMEM_32"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem4 Value
 *        "N2_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem48 Value
 *        "N2_HIGHMEM_48"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem64 Value
 *        "N2_HIGHMEM_64"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem8 Value
 *        "N2_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem80 Value
 *        "N2_HIGHMEM_80"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Highmem96 Value
 *        "N2_HIGHMEM_96"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard128
 *        Value "N2_STANDARD_128"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard16 Value
 *        "N2_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard2 Value
 *        "N2_STANDARD_2"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard32 Value
 *        "N2_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard4 Value
 *        "N2_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard48 Value
 *        "N2_STANDARD_48"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard64 Value
 *        "N2_STANDARD_64"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard8 Value
 *        "N2_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard80 Value
 *        "N2_STANDARD_80"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_N2Standard96 Value
 *        "N2_STANDARD_96"
 *    @arg @c kGTLRCloudNaturalLanguage_CpuMetric_MachineSpec_UnknownMachineSpec
 *        Value "UNKNOWN_MACHINE_SPEC"
 */
@property(nonatomic, copy, nullable) NSString *machineSpec;

/**
 *  Billing tracking labels. They do not contain any user data but only the
 *  labels set by Vertex Core Infra itself. Tracking labels' keys are defined
 *  with special format: goog-[\\p{Ll}\\p{N}]+ E.g. "key":
 *  "goog-k8s-cluster-name","value": "us-east1-b4rk"
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_CpuMetric_TrackingLabels *trackingLabels;

@end


/**
 *  Billing tracking labels. They do not contain any user data but only the
 *  labels set by Vertex Core Infra itself. Tracking labels' keys are defined
 *  with special format: goog-[\\p{Ll}\\p{N}]+ E.g. "key":
 *  "goog-k8s-cluster-name","value": "us-east1-b4rk"
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_CpuMetric_TrackingLabels : GTLRObject
@end


/**
 *  GTLRCloudNaturalLanguage_DiskMetric
 */
@interface GTLRCloudNaturalLanguage_DiskMetric : GTLRObject

/**
 *  Required. Type of Disk, e.g. REGIONAL_SSD.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_DiskMetric_DiskType_PdSsd Value "PD_SSD"
 *    @arg @c kGTLRCloudNaturalLanguage_DiskMetric_DiskType_PdStandard Value
 *        "PD_STANDARD"
 *    @arg @c kGTLRCloudNaturalLanguage_DiskMetric_DiskType_RegionalSsd Value
 *        "REGIONAL_SSD"
 *    @arg @c kGTLRCloudNaturalLanguage_DiskMetric_DiskType_RegionalStorage
 *        Value "REGIONAL_STORAGE"
 *    @arg @c kGTLRCloudNaturalLanguage_DiskMetric_DiskType_StorageSnapshot
 *        Value "STORAGE_SNAPSHOT"
 *    @arg @c kGTLRCloudNaturalLanguage_DiskMetric_DiskType_UnknownDiskType
 *        Value "UNKNOWN_DISK_TYPE"
 */
@property(nonatomic, copy, nullable) NSString *diskType;

/**
 *  Required. Seconds of physical disk usage, e.g. 3600.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *gibSec;

@end


/**
 *  Represents the input to API methods.
 */
@interface GTLRCloudNaturalLanguage_Document : GTLRObject

/**
 *  The content of the input in string format. Cloud audit logging exempt since
 *  it is based on user data.
 */
@property(nonatomic, copy, nullable) NSString *content;

/**
 *  The Google Cloud Storage URI where the file content is located. This URI
 *  must be of the form: gs://bucket_name/object_name. For more details, see
 *  https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage
 *  object versioning is not supported.
 */
@property(nonatomic, copy, nullable) NSString *gcsContentUri;

/**
 *  Optional. The language of the document (if not specified, the language is
 *  automatically detected). Both ISO and BCP-47 language codes are accepted.
 *  [Language Support](https://cloud.google.com/natural-language/docs/languages)
 *  lists currently supported languages for each API method. If the language
 *  (either specified by the caller or automatically detected) is not supported
 *  by the called API method, an `INVALID_ARGUMENT` error is returned.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an
 *  `INVALID_ARGUMENT` error.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_Document_Type_Html HTML (Value: "HTML")
 *    @arg @c kGTLRCloudNaturalLanguage_Document_Type_PlainText Plain text
 *        (Value: "PLAIN_TEXT")
 *    @arg @c kGTLRCloudNaturalLanguage_Document_Type_TypeUnspecified The
 *        content type is not specified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents a phrase in the text that is a known entity, such as a person, an
 *  organization, or location. The API associates information, such as
 *  probability and mentions, with entities.
 */
@interface GTLRCloudNaturalLanguage_Entity : GTLRObject

/**
 *  The mentions of this entity in the input document. The API currently
 *  supports proper noun mentions.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_EntityMention *> *mentions;

/**
 *  Metadata associated with the entity. For the metadata associated with other
 *  entity types, see the Type table below.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Entity_Metadata *metadata;

/** The representative name for the entity. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  For calls to AnalyzeEntitySentiment this field will contain the aggregate
 *  sentiment expressed for this entity in the provided document.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Sentiment *sentiment;

/**
 *  The entity type.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Address Address The metadata
 *        identifies the street number and locality plus whichever additional
 *        elements appear in the text: * `street_number` - street number *
 *        `locality` - city or town * `street_name` - street/route name, if
 *        detected * `postal_code` - postal code, if detected * `country` -
 *        country, if detected * `broad_region` - administrative area, such as
 *        the state, if detected * `narrow_region` - smaller administrative
 *        area, such as county, if detected * `sublocality` - used in Asian
 *        addresses to demark a district within a city, if detected (Value:
 *        "ADDRESS")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_ConsumerGood Consumer
 *        product (Value: "CONSUMER_GOOD")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Date Date The metadata
 *        identifies the components of the date: * `year` - four digit year, if
 *        detected * `month` - two digit month number, if detected * `day` - two
 *        digit day number, if detected (Value: "DATE")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Event Event (Value: "EVENT")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Location Location (Value:
 *        "LOCATION")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Number Number The metadata
 *        is the number itself. (Value: "NUMBER")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Organization Organization
 *        (Value: "ORGANIZATION")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Other Other types of
 *        entities (Value: "OTHER")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Person Person (Value:
 *        "PERSON")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_PhoneNumber Phone number The
 *        metadata lists the phone number, formatted according to local
 *        convention, plus whichever additional elements appear in the text: *
 *        `number` - the actual number, broken down into sections as per local
 *        convention * `national_prefix` - country code, if detected *
 *        `area_code` - region or area code, if detected * `extension` - phone
 *        extension (to be dialed after connection), if detected (Value:
 *        "PHONE_NUMBER")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Price Price The metadata
 *        identifies the `value` and `currency`. (Value: "PRICE")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Unknown Unknown (Value:
 *        "UNKNOWN")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_WorkOfArt Artwork (Value:
 *        "WORK_OF_ART")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Metadata associated with the entity. For the metadata associated with other
 *  entity types, see the Type table below.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_Entity_Metadata : GTLRObject
@end


/**
 *  Represents a mention for an entity in the text. Currently, proper noun
 *  mentions are supported.
 */
@interface GTLRCloudNaturalLanguage_EntityMention : GTLRObject

/**
 *  Probability score associated with the entity. The score shows the
 *  probability of the entity mention being the entity type. The score is in (0,
 *  1] range.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *probability;

/**
 *  For calls to AnalyzeEntitySentiment this field will contain the sentiment
 *  expressed for this mention of the entity in the provided document.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Sentiment *sentiment;

/** The mention text. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_TextSpan *text;

/**
 *  The type of the entity mention.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_EntityMention_Type_Common Common noun
 *        (or noun compound) (Value: "COMMON")
 *    @arg @c kGTLRCloudNaturalLanguage_EntityMention_Type_Proper Proper name
 *        (Value: "PROPER")
 *    @arg @c kGTLRCloudNaturalLanguage_EntityMention_Type_TypeUnknown Unknown
 *        (Value: "TYPE_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRCloudNaturalLanguage_GpuMetric
 */
@interface GTLRCloudNaturalLanguage_GpuMetric : GTLRObject

/**
 *  Required. Seconds of GPU usage, e.g. 3600.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *gpuSec;

/**
 *  Required. Type of GPU, e.g. NVIDIA_TESLA_V100.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaA10080gb Value
 *        "NVIDIA_A100_80GB"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaH10080gb Value
 *        "NVIDIA_H100_80GB"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaH200141gb Value
 *        "NVIDIA_H200_141GB"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaL4 Value
 *        "NVIDIA_L4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaTeslaA100 Value
 *        "NVIDIA_TESLA_A100"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaTeslaK80 Value
 *        "NVIDIA_TESLA_K80"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaTeslaP100 Value
 *        "NVIDIA_TESLA_P100"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaTeslaP4 Value
 *        "NVIDIA_TESLA_P4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaTeslaT4 Value
 *        "NVIDIA_TESLA_T4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_GpuType_NvidiaTeslaV100 Value
 *        "NVIDIA_TESLA_V100"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_GpuType_UnknownGpuType Value
 *        "UNKNOWN_GPU_TYPE"
 */
@property(nonatomic, copy, nullable) NSString *gpuType;

/**
 *  Required. Machine spec, e.g. N1_STANDARD_4.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Highgpu1g Value
 *        "A2_HIGHGPU_1G"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Highgpu2g Value
 *        "A2_HIGHGPU_2G"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Highgpu4g Value
 *        "A2_HIGHGPU_4G"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Highgpu8g Value
 *        "A2_HIGHGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Megagpu16g Value
 *        "A2_MEGAGPU_16G"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Ultragpu1g Value
 *        "A2_ULTRAGPU_1G"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Ultragpu2g Value
 *        "A2_ULTRAGPU_2G"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Ultragpu4g Value
 *        "A2_ULTRAGPU_4G"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A2Ultragpu8g Value
 *        "A2_ULTRAGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A3Edgegpu8g Value
 *        "A3_EDGEGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A3Highgpu1g Value
 *        "A3_HIGHGPU_1G"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A3Highgpu2g Value
 *        "A3_HIGHGPU_2G"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A3Highgpu4g Value
 *        "A3_HIGHGPU_4G"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A3Highgpu8g Value
 *        "A3_HIGHGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A3Megagpu8g Value
 *        "A3_MEGAGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_A3Ultragpu8g Value
 *        "A3_ULTRAGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighcpu112
 *        Value "C2D_HIGHCPU_112"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighcpu16 Value
 *        "C2D_HIGHCPU_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighcpu2 Value
 *        "C2D_HIGHCPU_2"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighcpu32 Value
 *        "C2D_HIGHCPU_32"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighcpu4 Value
 *        "C2D_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighcpu56 Value
 *        "C2D_HIGHCPU_56"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighcpu8 Value
 *        "C2D_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighmem112
 *        Value "C2D_HIGHMEM_112"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighmem16 Value
 *        "C2D_HIGHMEM_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighmem2 Value
 *        "C2D_HIGHMEM_2"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighmem32 Value
 *        "C2D_HIGHMEM_32"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighmem4 Value
 *        "C2D_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighmem56 Value
 *        "C2D_HIGHMEM_56"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dHighmem8 Value
 *        "C2D_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dStandard112
 *        Value "C2D_STANDARD_112"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dStandard16
 *        Value "C2D_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dStandard2 Value
 *        "C2D_STANDARD_2"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dStandard32
 *        Value "C2D_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dStandard4 Value
 *        "C2D_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dStandard56
 *        Value "C2D_STANDARD_56"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2dStandard8 Value
 *        "C2D_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2Standard16 Value
 *        "C2_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2Standard30 Value
 *        "C2_STANDARD_30"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2Standard4 Value
 *        "C2_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2Standard60 Value
 *        "C2_STANDARD_60"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C2Standard8 Value
 *        "C2_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highcpu176 Value
 *        "C3_HIGHCPU_176"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highcpu22 Value
 *        "C3_HIGHCPU_22"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highcpu4 Value
 *        "C3_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highcpu44 Value
 *        "C3_HIGHCPU_44"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highcpu8 Value
 *        "C3_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highcpu88 Value
 *        "C3_HIGHCPU_88"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highmem176 Value
 *        "C3_HIGHMEM_176"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highmem22 Value
 *        "C3_HIGHMEM_22"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highmem4 Value
 *        "C3_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highmem44 Value
 *        "C3_HIGHMEM_44"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highmem8 Value
 *        "C3_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Highmem88 Value
 *        "C3_HIGHMEM_88"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Standard176
 *        Value "C3_STANDARD_176"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Standard22 Value
 *        "C3_STANDARD_22"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Standard4 Value
 *        "C3_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Standard44 Value
 *        "C3_STANDARD_44"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Standard8 Value
 *        "C3_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_C3Standard88 Value
 *        "C3_STANDARD_88"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highcpu16 Value
 *        "E2_HIGHCPU_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highcpu2 Value
 *        "E2_HIGHCPU_2"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highcpu32 Value
 *        "E2_HIGHCPU_32"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highcpu4 Value
 *        "E2_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highcpu8 Value
 *        "E2_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highmem16 Value
 *        "E2_HIGHMEM_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highmem2 Value
 *        "E2_HIGHMEM_2"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highmem4 Value
 *        "E2_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Highmem8 Value
 *        "E2_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Standard16 Value
 *        "E2_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Standard2 Value
 *        "E2_STANDARD_2"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Standard32 Value
 *        "E2_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Standard4 Value
 *        "E2_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_E2Standard8 Value
 *        "E2_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_G2Standard12 Value
 *        "G2_STANDARD_12"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_G2Standard16 Value
 *        "G2_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_G2Standard24 Value
 *        "G2_STANDARD_24"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_G2Standard32 Value
 *        "G2_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_G2Standard4 Value
 *        "G2_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_G2Standard48 Value
 *        "G2_STANDARD_48"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_G2Standard8 Value
 *        "G2_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_G2Standard96 Value
 *        "G2_STANDARD_96"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highcpu16 Value
 *        "N1_HIGHCPU_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highcpu2 Value
 *        "N1_HIGHCPU_2"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highcpu32 Value
 *        "N1_HIGHCPU_32"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highcpu4 Value
 *        "N1_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highcpu64 Value
 *        "N1_HIGHCPU_64"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highcpu8 Value
 *        "N1_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highcpu96 Value
 *        "N1_HIGHCPU_96"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highmem16 Value
 *        "N1_HIGHMEM_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highmem2 Value
 *        "N1_HIGHMEM_2"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highmem32 Value
 *        "N1_HIGHMEM_32"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highmem4 Value
 *        "N1_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highmem64 Value
 *        "N1_HIGHMEM_64"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highmem8 Value
 *        "N1_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Highmem96 Value
 *        "N1_HIGHMEM_96"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Standard16 Value
 *        "N1_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Standard2 Value
 *        "N1_STANDARD_2"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Standard32 Value
 *        "N1_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Standard4 Value
 *        "N1_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Standard64 Value
 *        "N1_STANDARD_64"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Standard8 Value
 *        "N1_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N1Standard96 Value
 *        "N1_STANDARD_96"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu128
 *        Value "N2D_HIGHCPU_128"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu16 Value
 *        "N2D_HIGHCPU_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu2 Value
 *        "N2D_HIGHCPU_2"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu224
 *        Value "N2D_HIGHCPU_224"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu32 Value
 *        "N2D_HIGHCPU_32"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu4 Value
 *        "N2D_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu48 Value
 *        "N2D_HIGHCPU_48"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu64 Value
 *        "N2D_HIGHCPU_64"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu8 Value
 *        "N2D_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu80 Value
 *        "N2D_HIGHCPU_80"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighcpu96 Value
 *        "N2D_HIGHCPU_96"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem16 Value
 *        "N2D_HIGHMEM_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem2 Value
 *        "N2D_HIGHMEM_2"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem32 Value
 *        "N2D_HIGHMEM_32"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem4 Value
 *        "N2D_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem48 Value
 *        "N2D_HIGHMEM_48"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem64 Value
 *        "N2D_HIGHMEM_64"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem8 Value
 *        "N2D_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem80 Value
 *        "N2D_HIGHMEM_80"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dHighmem96 Value
 *        "N2D_HIGHMEM_96"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard128
 *        Value "N2D_STANDARD_128"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard16
 *        Value "N2D_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard2 Value
 *        "N2D_STANDARD_2"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard224
 *        Value "N2D_STANDARD_224"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard32
 *        Value "N2D_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard4 Value
 *        "N2D_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard48
 *        Value "N2D_STANDARD_48"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard64
 *        Value "N2D_STANDARD_64"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard8 Value
 *        "N2D_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard80
 *        Value "N2D_STANDARD_80"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2dStandard96
 *        Value "N2D_STANDARD_96"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu16 Value
 *        "N2_HIGHCPU_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu2 Value
 *        "N2_HIGHCPU_2"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu32 Value
 *        "N2_HIGHCPU_32"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu4 Value
 *        "N2_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu48 Value
 *        "N2_HIGHCPU_48"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu64 Value
 *        "N2_HIGHCPU_64"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu8 Value
 *        "N2_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu80 Value
 *        "N2_HIGHCPU_80"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highcpu96 Value
 *        "N2_HIGHCPU_96"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem128 Value
 *        "N2_HIGHMEM_128"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem16 Value
 *        "N2_HIGHMEM_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem2 Value
 *        "N2_HIGHMEM_2"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem32 Value
 *        "N2_HIGHMEM_32"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem4 Value
 *        "N2_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem48 Value
 *        "N2_HIGHMEM_48"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem64 Value
 *        "N2_HIGHMEM_64"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem8 Value
 *        "N2_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem80 Value
 *        "N2_HIGHMEM_80"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Highmem96 Value
 *        "N2_HIGHMEM_96"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard128
 *        Value "N2_STANDARD_128"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard16 Value
 *        "N2_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard2 Value
 *        "N2_STANDARD_2"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard32 Value
 *        "N2_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard4 Value
 *        "N2_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard48 Value
 *        "N2_STANDARD_48"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard64 Value
 *        "N2_STANDARD_64"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard8 Value
 *        "N2_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard80 Value
 *        "N2_STANDARD_80"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_N2Standard96 Value
 *        "N2_STANDARD_96"
 *    @arg @c kGTLRCloudNaturalLanguage_GpuMetric_MachineSpec_UnknownMachineSpec
 *        Value "UNKNOWN_MACHINE_SPEC"
 */
@property(nonatomic, copy, nullable) NSString *machineSpec;

/**
 *  Billing tracking labels. They do not contain any user data but only the
 *  labels set by Vertex Core Infra itself. Tracking labels' keys are defined
 *  with special format: goog-[\\p{Ll}\\p{N}]+ E.g. "key":
 *  "goog-k8s-cluster-name","value": "us-east1-b4rk"
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_GpuMetric_TrackingLabels *trackingLabels;

@end


/**
 *  Billing tracking labels. They do not contain any user data but only the
 *  labels set by Vertex Core Infra itself. Tracking labels' keys are defined
 *  with special format: goog-[\\p{Ll}\\p{N}]+ E.g. "key":
 *  "goog-k8s-cluster-name","value": "us-east1-b4rk"
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_GpuMetric_TrackingLabels : GTLRObject
@end


/**
 *  LINT: LEGACY_NAMES Infra Usage of billing metrics.
 */
@interface GTLRCloudNaturalLanguage_InfraUsage : GTLRObject

/** Aggregated core metrics since requested start_time. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_CpuMetric *> *cpuMetrics;

/** Aggregated persistent disk metrics since requested start_time. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_DiskMetric *> *diskMetrics;

/** Aggregated gpu metrics since requested start_time. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_GpuMetric *> *gpuMetrics;

/** Aggregated ram metrics since requested start_time. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_RamMetric *> *ramMetrics;

/** Aggregated tpu metrics since requested start_time. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_TpuMetric *> *tpuMetrics;

@end


/**
 *  The document moderation request message.
 */
@interface GTLRCloudNaturalLanguage_ModerateTextRequest : GTLRObject

/** Required. Input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Document *document;

/**
 *  Optional. The model version to use for ModerateText.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_ModerateTextRequest_ModelVersion_ModelVersion1
 *        Use the v1 model, this model is used by default when not provided. The
 *        v1 model only returns probability (confidence) score for each
 *        category. (Value: "MODEL_VERSION_1")
 *    @arg @c kGTLRCloudNaturalLanguage_ModerateTextRequest_ModelVersion_ModelVersion2
 *        Use the v2 model. The v2 model only returns probability (confidence)
 *        score for each category, and returns severity score for a subset of
 *        the categories. (Value: "MODEL_VERSION_2")
 *    @arg @c kGTLRCloudNaturalLanguage_ModerateTextRequest_ModelVersion_ModelVersionUnspecified
 *        The default model version. (Value: "MODEL_VERSION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *modelVersion;

@end


/**
 *  The document moderation response message.
 */
@interface GTLRCloudNaturalLanguage_ModerateTextResponse : GTLRObject

/**
 *  The language of the text, which will be the same as the language specified
 *  in the request or, if not specified, the automatically-detected language.
 *  See Document.language_code field for more details.
 */
@property(nonatomic, copy, nullable) NSString *languageCode;

/**
 *  Whether the language is officially supported. The API may still return a
 *  response when the language is not supported, but it is on a best effort
 *  basis.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *languageSupported;

/** Harmful and sensitive categories representing the input document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_ClassificationCategory *> *moderationCategories;

@end


/**
 *  GTLRCloudNaturalLanguage_RamMetric
 */
@interface GTLRCloudNaturalLanguage_RamMetric : GTLRObject

/**
 *  Required. VM memory in Gigabyte second, e.g. 3600. Using int64 type to match
 *  billing metrics definition.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *gibSec;

/**
 *  Required. Machine spec, e.g. N1_STANDARD_4.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Highgpu1g Value
 *        "A2_HIGHGPU_1G"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Highgpu2g Value
 *        "A2_HIGHGPU_2G"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Highgpu4g Value
 *        "A2_HIGHGPU_4G"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Highgpu8g Value
 *        "A2_HIGHGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Megagpu16g Value
 *        "A2_MEGAGPU_16G"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Ultragpu1g Value
 *        "A2_ULTRAGPU_1G"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Ultragpu2g Value
 *        "A2_ULTRAGPU_2G"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Ultragpu4g Value
 *        "A2_ULTRAGPU_4G"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A2Ultragpu8g Value
 *        "A2_ULTRAGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A3Edgegpu8g Value
 *        "A3_EDGEGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A3Highgpu1g Value
 *        "A3_HIGHGPU_1G"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A3Highgpu2g Value
 *        "A3_HIGHGPU_2G"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A3Highgpu4g Value
 *        "A3_HIGHGPU_4G"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A3Highgpu8g Value
 *        "A3_HIGHGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A3Megagpu8g Value
 *        "A3_MEGAGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_A3Ultragpu8g Value
 *        "A3_ULTRAGPU_8G"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighcpu112
 *        Value "C2D_HIGHCPU_112"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighcpu16 Value
 *        "C2D_HIGHCPU_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighcpu2 Value
 *        "C2D_HIGHCPU_2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighcpu32 Value
 *        "C2D_HIGHCPU_32"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighcpu4 Value
 *        "C2D_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighcpu56 Value
 *        "C2D_HIGHCPU_56"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighcpu8 Value
 *        "C2D_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighmem112
 *        Value "C2D_HIGHMEM_112"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighmem16 Value
 *        "C2D_HIGHMEM_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighmem2 Value
 *        "C2D_HIGHMEM_2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighmem32 Value
 *        "C2D_HIGHMEM_32"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighmem4 Value
 *        "C2D_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighmem56 Value
 *        "C2D_HIGHMEM_56"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dHighmem8 Value
 *        "C2D_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dStandard112
 *        Value "C2D_STANDARD_112"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dStandard16
 *        Value "C2D_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dStandard2 Value
 *        "C2D_STANDARD_2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dStandard32
 *        Value "C2D_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dStandard4 Value
 *        "C2D_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dStandard56
 *        Value "C2D_STANDARD_56"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2dStandard8 Value
 *        "C2D_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2Standard16 Value
 *        "C2_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2Standard30 Value
 *        "C2_STANDARD_30"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2Standard4 Value
 *        "C2_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2Standard60 Value
 *        "C2_STANDARD_60"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C2Standard8 Value
 *        "C2_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highcpu176 Value
 *        "C3_HIGHCPU_176"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highcpu22 Value
 *        "C3_HIGHCPU_22"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highcpu4 Value
 *        "C3_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highcpu44 Value
 *        "C3_HIGHCPU_44"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highcpu8 Value
 *        "C3_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highcpu88 Value
 *        "C3_HIGHCPU_88"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highmem176 Value
 *        "C3_HIGHMEM_176"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highmem22 Value
 *        "C3_HIGHMEM_22"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highmem4 Value
 *        "C3_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highmem44 Value
 *        "C3_HIGHMEM_44"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highmem8 Value
 *        "C3_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Highmem88 Value
 *        "C3_HIGHMEM_88"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Standard176
 *        Value "C3_STANDARD_176"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Standard22 Value
 *        "C3_STANDARD_22"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Standard4 Value
 *        "C3_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Standard44 Value
 *        "C3_STANDARD_44"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Standard8 Value
 *        "C3_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_C3Standard88 Value
 *        "C3_STANDARD_88"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highcpu16 Value
 *        "E2_HIGHCPU_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highcpu2 Value
 *        "E2_HIGHCPU_2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highcpu32 Value
 *        "E2_HIGHCPU_32"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highcpu4 Value
 *        "E2_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highcpu8 Value
 *        "E2_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highmem16 Value
 *        "E2_HIGHMEM_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highmem2 Value
 *        "E2_HIGHMEM_2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highmem4 Value
 *        "E2_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Highmem8 Value
 *        "E2_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Standard16 Value
 *        "E2_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Standard2 Value
 *        "E2_STANDARD_2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Standard32 Value
 *        "E2_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Standard4 Value
 *        "E2_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_E2Standard8 Value
 *        "E2_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_G2Standard12 Value
 *        "G2_STANDARD_12"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_G2Standard16 Value
 *        "G2_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_G2Standard24 Value
 *        "G2_STANDARD_24"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_G2Standard32 Value
 *        "G2_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_G2Standard4 Value
 *        "G2_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_G2Standard48 Value
 *        "G2_STANDARD_48"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_G2Standard8 Value
 *        "G2_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_G2Standard96 Value
 *        "G2_STANDARD_96"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highcpu16 Value
 *        "N1_HIGHCPU_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highcpu2 Value
 *        "N1_HIGHCPU_2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highcpu32 Value
 *        "N1_HIGHCPU_32"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highcpu4 Value
 *        "N1_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highcpu64 Value
 *        "N1_HIGHCPU_64"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highcpu8 Value
 *        "N1_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highcpu96 Value
 *        "N1_HIGHCPU_96"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highmem16 Value
 *        "N1_HIGHMEM_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highmem2 Value
 *        "N1_HIGHMEM_2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highmem32 Value
 *        "N1_HIGHMEM_32"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highmem4 Value
 *        "N1_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highmem64 Value
 *        "N1_HIGHMEM_64"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highmem8 Value
 *        "N1_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Highmem96 Value
 *        "N1_HIGHMEM_96"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Standard16 Value
 *        "N1_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Standard2 Value
 *        "N1_STANDARD_2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Standard32 Value
 *        "N1_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Standard4 Value
 *        "N1_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Standard64 Value
 *        "N1_STANDARD_64"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Standard8 Value
 *        "N1_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N1Standard96 Value
 *        "N1_STANDARD_96"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu128
 *        Value "N2D_HIGHCPU_128"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu16 Value
 *        "N2D_HIGHCPU_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu2 Value
 *        "N2D_HIGHCPU_2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu224
 *        Value "N2D_HIGHCPU_224"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu32 Value
 *        "N2D_HIGHCPU_32"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu4 Value
 *        "N2D_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu48 Value
 *        "N2D_HIGHCPU_48"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu64 Value
 *        "N2D_HIGHCPU_64"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu8 Value
 *        "N2D_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu80 Value
 *        "N2D_HIGHCPU_80"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighcpu96 Value
 *        "N2D_HIGHCPU_96"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem16 Value
 *        "N2D_HIGHMEM_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem2 Value
 *        "N2D_HIGHMEM_2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem32 Value
 *        "N2D_HIGHMEM_32"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem4 Value
 *        "N2D_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem48 Value
 *        "N2D_HIGHMEM_48"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem64 Value
 *        "N2D_HIGHMEM_64"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem8 Value
 *        "N2D_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem80 Value
 *        "N2D_HIGHMEM_80"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dHighmem96 Value
 *        "N2D_HIGHMEM_96"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard128
 *        Value "N2D_STANDARD_128"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard16
 *        Value "N2D_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard2 Value
 *        "N2D_STANDARD_2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard224
 *        Value "N2D_STANDARD_224"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard32
 *        Value "N2D_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard4 Value
 *        "N2D_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard48
 *        Value "N2D_STANDARD_48"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard64
 *        Value "N2D_STANDARD_64"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard8 Value
 *        "N2D_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard80
 *        Value "N2D_STANDARD_80"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2dStandard96
 *        Value "N2D_STANDARD_96"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu16 Value
 *        "N2_HIGHCPU_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu2 Value
 *        "N2_HIGHCPU_2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu32 Value
 *        "N2_HIGHCPU_32"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu4 Value
 *        "N2_HIGHCPU_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu48 Value
 *        "N2_HIGHCPU_48"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu64 Value
 *        "N2_HIGHCPU_64"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu8 Value
 *        "N2_HIGHCPU_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu80 Value
 *        "N2_HIGHCPU_80"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highcpu96 Value
 *        "N2_HIGHCPU_96"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem128 Value
 *        "N2_HIGHMEM_128"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem16 Value
 *        "N2_HIGHMEM_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem2 Value
 *        "N2_HIGHMEM_2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem32 Value
 *        "N2_HIGHMEM_32"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem4 Value
 *        "N2_HIGHMEM_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem48 Value
 *        "N2_HIGHMEM_48"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem64 Value
 *        "N2_HIGHMEM_64"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem8 Value
 *        "N2_HIGHMEM_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem80 Value
 *        "N2_HIGHMEM_80"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Highmem96 Value
 *        "N2_HIGHMEM_96"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard128
 *        Value "N2_STANDARD_128"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard16 Value
 *        "N2_STANDARD_16"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard2 Value
 *        "N2_STANDARD_2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard32 Value
 *        "N2_STANDARD_32"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard4 Value
 *        "N2_STANDARD_4"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard48 Value
 *        "N2_STANDARD_48"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard64 Value
 *        "N2_STANDARD_64"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard8 Value
 *        "N2_STANDARD_8"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard80 Value
 *        "N2_STANDARD_80"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_N2Standard96 Value
 *        "N2_STANDARD_96"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_MachineSpec_UnknownMachineSpec
 *        Value "UNKNOWN_MACHINE_SPEC"
 */
@property(nonatomic, copy, nullable) NSString *machineSpec;

/**
 *  Required. VM memory in gb.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *memories;

/**
 *  Required. Type of ram.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_RamType_A2 Value "A2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_RamType_A3 Value "A3"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_RamType_C2 COMPUTE_OPTIMIZED
 *        (Value: "C2")
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_RamType_C2d Value "C2D"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_RamType_C3 Value "C3"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_RamType_Custom Value "CUSTOM"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_RamType_E2 Value "E2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_RamType_G2 Value "G2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_RamType_M1 MEMORY_OPTIMIZED
 *        (Value: "M1")
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_RamType_M2
 *        MEMORY_OPTIMIZED_UPGRADE_PREMIUM (Value: "M2")
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_RamType_N1 Value "N1"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_RamType_N2 Value "N2"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_RamType_N2Custom Value
 *        "N2_CUSTOM"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_RamType_N2d Value "N2D"
 *    @arg @c kGTLRCloudNaturalLanguage_RamMetric_RamType_UnknownRamType Value
 *        "UNKNOWN_RAM_TYPE"
 */
@property(nonatomic, copy, nullable) NSString *ramType;

/**
 *  Billing tracking labels. They do not contain any user data but only the
 *  labels set by Vertex Core Infra itself. Tracking labels' keys are defined
 *  with special format: goog-[\\p{Ll}\\p{N}]+ E.g. "key":
 *  "goog-k8s-cluster-name","value": "us-east1-b4rk"
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_RamMetric_TrackingLabels *trackingLabels;

@end


/**
 *  Billing tracking labels. They do not contain any user data but only the
 *  labels set by Vertex Core Infra itself. Tracking labels' keys are defined
 *  with special format: goog-[\\p{Ll}\\p{N}]+ E.g. "key":
 *  "goog-k8s-cluster-name","value": "us-east1-b4rk"
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_RamMetric_TrackingLabels : GTLRObject
@end


/**
 *  Represents a sentence in the input document.
 */
@interface GTLRCloudNaturalLanguage_Sentence : GTLRObject

/**
 *  For calls to AnalyzeSentiment or if
 *  AnnotateTextRequest.Features.extract_document_sentiment is set to true, this
 *  field will contain the sentiment for the sentence.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Sentiment *sentiment;

/** The sentence text. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_TextSpan *text;

@end


/**
 *  Represents the feeling associated with the entire text or entities in the
 *  text.
 */
@interface GTLRCloudNaturalLanguage_Sentiment : GTLRObject

/**
 *  A non-negative number in the [0, +inf] range, which represents the absolute
 *  magnitude of sentiment regardless of score (positive or negative).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *magnitude;

/**
 *  Sentiment score between -1.0 (negative sentiment) and 1.0 (positive
 *  sentiment).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *score;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudNaturalLanguage_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudNaturalLanguage_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_Status_Details_Item : GTLRObject
@end


/**
 *  Represents a text span in the input document.
 */
@interface GTLRCloudNaturalLanguage_TextSpan : GTLRObject

/**
 *  The API calculates the beginning offset of the content in the original
 *  document according to the EncodingType specified in the API request.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *beginOffset;

/** The content of the text span, which is a substring of the document. */
@property(nonatomic, copy, nullable) NSString *content;

@end


/**
 *  GTLRCloudNaturalLanguage_TpuMetric
 */
@interface GTLRCloudNaturalLanguage_TpuMetric : GTLRObject

/**
 *  Required. Seconds of TPU usage, e.g. 3600.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *tpuSec;

/**
 *  Required. Type of TPU, e.g. TPU_V2, TPU_V3_POD.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_TpuMetric_TpuType_TpuV2 Value "TPU_V2"
 *    @arg @c kGTLRCloudNaturalLanguage_TpuMetric_TpuType_TpuV2Pod Value
 *        "TPU_V2_POD"
 *    @arg @c kGTLRCloudNaturalLanguage_TpuMetric_TpuType_TpuV3 Value "TPU_V3"
 *    @arg @c kGTLRCloudNaturalLanguage_TpuMetric_TpuType_TpuV3Pod Value
 *        "TPU_V3_POD"
 *    @arg @c kGTLRCloudNaturalLanguage_TpuMetric_TpuType_TpuV5Litepod Value
 *        "TPU_V5_LITEPOD"
 *    @arg @c kGTLRCloudNaturalLanguage_TpuMetric_TpuType_UnknownTpuType Value
 *        "UNKNOWN_TPU_TYPE"
 */
@property(nonatomic, copy, nullable) NSString *tpuType;

@end


/**
 *  The data statistics of a series of ARRAY values.
 */
@interface GTLRCloudNaturalLanguage_XPSArrayStats : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSCommonStats *commonStats;

/**
 *  Stats of all the values of all arrays, as if they were a single long series
 *  of data. The type depends on the element type of the array.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSDataStats *memberStats;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSBatchPredictResponse
 */
@interface GTLRCloudNaturalLanguage_XPSBatchPredictResponse : GTLRObject

/**
 *  Examples for batch prediction result. Under full API implementation, results
 *  are stored in shared RecordIO of AnnotatedExample protobufs, the annotations
 *  field of which is populated by XPS backend.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSExampleSet *exampleSet;

@end


/**
 *  Bounding box matching model metrics for a single intersection-over-union
 *  threshold and multiple label match confidence thresholds.
 */
@interface GTLRCloudNaturalLanguage_XPSBoundingBoxMetricsEntry : GTLRObject

/**
 *  Metrics for each label-match confidence_threshold from
 *  0.05,0.10,...,0.95,0.96,0.97,0.98,0.99.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSBoundingBoxMetricsEntryConfidenceMetricsEntry *> *confidenceMetricsEntries;

/**
 *  The intersection-over-union threshold value used to compute this metrics
 *  entry.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *iouThreshold;

/**
 *  The mean average precision.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanAveragePrecision;

@end


/**
 *  Metrics for a single confidence threshold.
 */
@interface GTLRCloudNaturalLanguage_XPSBoundingBoxMetricsEntryConfidenceMetricsEntry : GTLRObject

/**
 *  The confidence threshold value used to compute the metrics.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *confidenceThreshold;

/**
 *  The harmonic mean of recall and precision.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *f1Score;

/**
 *  Precision for the given confidence threshold.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precision;

/**
 *  Recall for the given confidence threshold.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recall;

@end


/**
 *  The data statistics of a series of CATEGORY values.
 */
@interface GTLRCloudNaturalLanguage_XPSCategoryStats : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSCommonStats *commonStats;

/**
 *  The statistics of the top 20 CATEGORY values, ordered by
 *  CategoryStats.SingleCategoryStats.count.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSCategoryStatsSingleCategoryStats *> *topCategoryStats;

@end


/**
 *  The statistics of a single CATEGORY value.
 */
@interface GTLRCloudNaturalLanguage_XPSCategoryStatsSingleCategoryStats : GTLRObject

/**
 *  The number of occurrences of this value in the series.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/** The CATEGORY value. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Model evaluation metrics for classification problems. It can be used for
 *  image and video classification. Next tag: 9.
 */
@interface GTLRCloudNaturalLanguage_XPSClassificationEvaluationMetrics : GTLRObject

/**
 *  The Area under precision recall curve metric.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *auPrc;

/**
 *  The Area Under Receiver Operating Characteristic curve metric.
 *  Micro-averaged for the overall evaluation.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *auRoc;

/**
 *  The Area under precision recall curve metric based on priors.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *baseAuPrc;

/**
 *  Metrics that have confidence thresholds. Precision-recall curve can be
 *  derived from it.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSConfidenceMetricsEntry *> *confidenceMetricsEntries;

/**
 *  Confusion matrix of the evaluation. Only set for MULTICLASS classification
 *  problems where number of annotation specs is no more than 10. Only set for
 *  model level evaluation, not for evaluation per label.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSConfusionMatrix *confusionMatrix;

/**
 *  The number of examples used for model evaluation.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *evaluatedExamplesCount;

/**
 *  The Log Loss metric.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *logLoss;

@end


/**
 *  Map from color to display name. Will only be used by Image Segmentation for
 *  uCAIP.
 */
@interface GTLRCloudNaturalLanguage_XPSColorMap : GTLRObject

/** Should be used during training. */
@property(nonatomic, copy, nullable) NSString *annotationSpecIdToken;

/**
 *  This type is deprecated in favor of the IntColor below. This is because
 *  google.type.Color represent color has a float which semantically does not
 *  reflect discrete classes/categories concept. Moreover, to handle it well we
 *  need to have some tolerance when converting to a discretized color. As such,
 *  the recommendation is to have API surface still use google.type.Color while
 *  internally IntColor is used.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Color *color GTLR_DEPRECATED;

/** Should be used during preprocessing. */
@property(nonatomic, copy, nullable) NSString *displayName;

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSColorMapIntColor *intColor;

@end


/**
 *  RGB color and each channel is represented by an integer.
 */
@interface GTLRCloudNaturalLanguage_XPSColorMapIntColor : GTLRObject

/**
 *  The value should be in range of [0, 255].
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blue;

/**
 *  The value should be in range of [0, 255].
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *green;

/**
 *  The value should be in range of [0, 255].
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *red;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSColumnSpec
 */
@interface GTLRCloudNaturalLanguage_XPSColumnSpec : GTLRObject

/**
 *  The unique id of the column. When Preprocess, the Tables BE will popuate the
 *  order id of the column, which reflects the order of the column inside the
 *  table, i.e. 0 means the first column in the table, N-1 means the last
 *  column. AutoML BE will persist this order id in Spanner and set the order id
 *  here when calling RefreshTablesStats and Train. Note: it's different than
 *  the column_spec_id that is generated in AutoML BE.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columnId;

/**
 *  The data stats of the column. It's outputed in RefreshTablesStats and a
 *  required input for Train.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSDataStats *dataStats;

/**
 *  The data type of the column. It's outputed in Preprocess rpc and a required
 *  input for RefreshTablesStats and Train.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSDataType *dataType;

/**
 *  The display name of the column. It's outputed in Preprocess and a required
 *  input for RefreshTablesStats and Train.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSColumnSpecForecastingMetadata *forecastingMetadata;

/** It's outputed in RefreshTablesStats, and a required input in Train. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSColumnSpecCorrelatedColumn *> *topCorrelatedColumns;

@end


/**
 *  Identifies a table's column, and its correlation with the column this
 *  ColumnSpec describes.
 */
@interface GTLRCloudNaturalLanguage_XPSColumnSpecCorrelatedColumn : GTLRObject

/**
 *  columnId
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columnId;

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSCorrelationStats *correlationStats;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSColumnSpecForecastingMetadata
 */
@interface GTLRCloudNaturalLanguage_XPSColumnSpecForecastingMetadata : GTLRObject

/**
 *  The type of the column for FORECASTING model training purposes.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSColumnSpecForecastingMetadata_ColumnType_ColumnTypeUnspecified
 *        An un-set value of this enum. (Value: "COLUMN_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSColumnSpecForecastingMetadata_ColumnType_Key
 *        Key columns are used to identify timeseries. (Value: "KEY")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSColumnSpecForecastingMetadata_ColumnType_KeyMetadata
 *        This column contains information describing static properties of the
 *        entities identified by the key column(s) (e.g. city's ZIP code).
 *        (Value: "KEY_METADATA")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSColumnSpecForecastingMetadata_ColumnType_TimeSeriesAvailablePastAndFuture
 *        This column contains information for the given entity is known both
 *        for the past and the sufficiently far future. (Value:
 *        "TIME_SERIES_AVAILABLE_PAST_AND_FUTURE")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSColumnSpecForecastingMetadata_ColumnType_TimeSeriesAvailablePastOnly
 *        This column contains information for the given entity, at any time
 *        poinrt, they are only available in the time series before. (Value:
 *        "TIME_SERIES_AVAILABLE_PAST_ONLY")
 */
@property(nonatomic, copy, nullable) NSString *columnType;

@end


/**
 *  Common statistics for a column with a specified data type.
 */
@interface GTLRCloudNaturalLanguage_XPSCommonStats : GTLRObject

/**
 *  distinctValueCount
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *distinctValueCount;

/**
 *  nullValueCount
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nullValueCount;

/**
 *  validValueCount
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *validValueCount;

@end


/**
 *  ConfidenceMetricsEntry includes generic precision, recall, f1 score etc.
 *  Next tag: 16.
 */
@interface GTLRCloudNaturalLanguage_XPSConfidenceMetricsEntry : GTLRObject

/**
 *  Metrics are computed with an assumption that the model never return
 *  predictions with score lower than this value.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *confidenceThreshold;

/**
 *  The harmonic mean of recall and precision.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *f1Score;

/**
 *  The harmonic mean of recall_at1 and precision_at1.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *f1ScoreAt1;

/**
 *  The number of ground truth labels that are not matched by a model created
 *  label.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *falseNegativeCount;

/**
 *  The number of model created labels that do not match a ground truth label.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *falsePositiveCount;

/**
 *  False Positive Rate for the given confidence threshold.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *falsePositiveRate;

/**
 *  The False Positive Rate when only considering the label that has the highest
 *  prediction score and not below the confidence threshold for each example.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *falsePositiveRateAt1;

/**
 *  Metrics are computed with an assumption that the model always returns at
 *  most this many predictions (ordered by their score, descendingly), but they
 *  all still need to meet the confidence_threshold.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *positionThreshold;

/**
 *  Precision for the given confidence threshold.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precision;

/**
 *  The precision when only considering the label that has the highest
 *  prediction score and not below the confidence threshold for each example.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precisionAt1;

/**
 *  Recall (true positive rate) for the given confidence threshold.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recall;

/**
 *  The recall (true positive rate) when only considering the label that has the
 *  highest prediction score and not below the confidence threshold for each
 *  example.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recallAt1;

/**
 *  The number of labels that were not created by the model, but if they would,
 *  they would not match a ground truth label.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trueNegativeCount;

/**
 *  The number of model created labels that match a ground truth label.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *truePositiveCount;

@end


/**
 *  Confusion matrix of the model running the classification.
 */
@interface GTLRCloudNaturalLanguage_XPSConfusionMatrix : GTLRObject

/**
 *  For the following three repeated fields, only one is intended to be set.
 *  annotation_spec_id_token is preferable to be set. ID tokens of the
 *  annotation specs used in the confusion matrix.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *annotationSpecIdToken;

/**
 *  Category (mainly for segmentation). Set only for image segmentation models.
 *  Note: uCAIP Image Segmentation should use annotation_spec_id_token.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *category;

/**
 *  Rows in the confusion matrix. The number of rows is equal to the size of
 *  `annotation_spec_id_token`. `row[i].value[j]` is the number of examples that
 *  have ground truth of the `annotation_spec_id_token[i]` and are predicted as
 *  `annotation_spec_id_token[j]` by the model being evaluated.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSConfusionMatrixRow *> *row;

/**
 *  Sentiment labels used in the confusion matrix. Set only for text sentiment
 *  models. For AutoML Text Revamp, use `annotation_spec_id_token` instead and
 *  leave this field empty.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *sentimentLabel;

@end


/**
 *  A row in the confusion matrix.
 */
@interface GTLRCloudNaturalLanguage_XPSConfusionMatrixRow : GTLRObject

/**
 *  Same as above except intended to represent other counts (for e.g. for
 *  segmentation this is pixel count). NOTE(params): Only example_count or count
 *  is set (oneoff does not support repeated fields unless they are embedded
 *  inside another message).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *count;

/**
 *  Value of the specific cell in the confusion matrix. The number of values
 *  each row has (i.e. the length of the row) is equal to the length of the
 *  annotation_spec_id_token field.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *exampleCount;

@end


/**
 *  A model format used for iOS mobile devices.
 */
@interface GTLRCloudNaturalLanguage_XPSCoreMlFormat : GTLRObject
@end


/**
 *  A correlation statistics between two series of DataType values. The series
 *  may have differing DataType-s, but within a single series the DataType must
 *  be the same.
 */
@interface GTLRCloudNaturalLanguage_XPSCorrelationStats : GTLRObject

/**
 *  The correlation value using the Cramer's V measure.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cramersV;

@end


/**
 *  Different types of errors and the stats associatesd with each error.
 */
@interface GTLRCloudNaturalLanguage_XPSDataErrors : GTLRObject

/**
 *  Number of records having errors associated with the enum.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  Type of the error.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSDataErrors_ErrorType_ErrorTypeUnspecified
 *        Not specified. (Value: "ERROR_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSDataErrors_ErrorType_FileExtensionMismatchWithAudioFormat
 *        File format differnt from what is specified in the file name
 *        extension. (Value: "FILE_EXTENSION_MISMATCH_WITH_AUDIO_FORMAT")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSDataErrors_ErrorType_FileTooLarge
 *        File too large. Maximum allowed size is 50 MB. (Value:
 *        "FILE_TOO_LARGE")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSDataErrors_ErrorType_MissingTranscription
 *        Transcript is missing. (Value: "MISSING_TRANSCRIPTION")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSDataErrors_ErrorType_UnsupportedAudioFormat
 *        Audio format not in the formats by cloud-speech AutoML. Currently only
 *        wav and flac file formats are supported. (Value:
 *        "UNSUPPORTED_AUDIO_FORMAT")
 */
@property(nonatomic, copy, nullable) NSString *errorType;

@end


/**
 *  The data statistics of a series of values that share the same DataType.
 */
@interface GTLRCloudNaturalLanguage_XPSDataStats : GTLRObject

/** The statistics for ARRAY DataType. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSArrayStats *arrayStats;

/** The statistics for CATEGORY DataType. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSCategoryStats *categoryStats;

/**
 *  The number of distinct values.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *distinctValueCount;

/** The statistics for FLOAT64 DataType. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSFloat64Stats *float64Stats;

/**
 *  The number of values that are null.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nullValueCount;

/** The statistics for STRING DataType. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSStringStats *stringStats;

/** The statistics for STRUCT DataType. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSStructStats *structStats;

/** The statistics for TIMESTAMP DataType. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTimestampStats *timestampStats;

/**
 *  The number of values that are valid.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *validValueCount;

@end


/**
 *  Indicated the type of data that can be stored in a structured data entity
 *  (e.g. a table).
 */
@interface GTLRCloudNaturalLanguage_XPSDataType : GTLRObject

/** The highly compatible data types to this data type. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSDataType *> *compatibleDataTypes;

/**
 *  If type_code == ARRAY, then `list_element_type` is the type of the elements.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSDataType *listElementType;

/**
 *  If true, this DataType can also be `null`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nullable;

/**
 *  If type_code == STRUCT, then `struct_type` provides type information for the
 *  struct's fields.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSStructType *structType;

/**
 *  If type_code == TIMESTAMP then `time_format` provides the format in which
 *  that time field is expressed. The time_format must be written in `strftime`
 *  syntax. If time_format is not set, then the default format as described on
 *  the field is used.
 */
@property(nonatomic, copy, nullable) NSString *timeFormat;

/**
 *  Required. The TypeCode for this type.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSDataType_TypeCode_Array Encoded as
 *        `list`, where the list elements are represented according to
 *        list_element_type. (Value: "ARRAY")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSDataType_TypeCode_Category Values of
 *        this type are not further understood by AutoML, e.g. AutoML is unable
 *        to tell the order of values (as it could with FLOAT64), or is unable
 *        to say if one value contains another (as it could with STRING).
 *        Encoded as `string` (bytes should be base64-encoded, as described in
 *        RFC 4648, section 4). (Value: "CATEGORY")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSDataType_TypeCode_Float64 Encoded as
 *        `number`, or the strings `"NaN"`, `"Infinity"`, or `"-Infinity"`.
 *        (Value: "FLOAT64")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSDataType_TypeCode_String Encoded as
 *        `string`. (Value: "STRING")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSDataType_TypeCode_Struct Encoded as
 *        `struct`, where field values are represented according to struct_type.
 *        (Value: "STRUCT")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSDataType_TypeCode_Timestamp Must be
 *        between 0AD and 9999AD. Encoded as `string` according to time_format,
 *        or, if that format is not set, then in RFC 3339 `date-time` format,
 *        where `time-offset` = `"Z"` (e.g. 1985-04-12T23:20:50.52Z). (Value:
 *        "TIMESTAMP")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSDataType_TypeCode_TypeCodeUnspecified
 *        Not specified. Should not be used. (Value: "TYPE_CODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *typeCode;

@end


/**
 *  A model format used for Docker containers. Use the params field to customize
 *  the container. The container is verified to work correctly on ubuntu 16.04
 *  operating system.
 */
@interface GTLRCloudNaturalLanguage_XPSDockerFormat : GTLRObject

/**
 *  Optional. Additional cpu information describing the requirements for the to
 *  be exported model files.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSDockerFormat_CpuArchitecture_CpuArchitectureUnspecified
 *        Value "CPU_ARCHITECTURE_UNSPECIFIED"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSDockerFormat_CpuArchitecture_CpuArchitectureX8664
 *        Value "CPU_ARCHITECTURE_X86_64"
 */
@property(nonatomic, copy, nullable) NSString *cpuArchitecture;

/**
 *  Optional. Additional gpu information describing the requirements for the to
 *  be exported model files.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSDockerFormat_GpuArchitecture_GpuArchitectureNvidia
 *        Value "GPU_ARCHITECTURE_NVIDIA"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSDockerFormat_GpuArchitecture_GpuArchitectureUnspecified
 *        Value "GPU_ARCHITECTURE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *gpuArchitecture;

@end


/**
 *  A model format used for [Edge TPU](https://cloud.google.com/edge-tpu/)
 *  devices.
 */
@interface GTLRCloudNaturalLanguage_XPSEdgeTpuTfLiteFormat : GTLRObject
@end


/**
 *  Contains xPS-specific model evaluation metrics either for a single
 *  annotation spec (label), or for the model overall. Next tag: 18.
 */
@interface GTLRCloudNaturalLanguage_XPSEvaluationMetrics : GTLRObject

/**
 *  The annotation_spec for which this evaluation metrics instance had been
 *  created. Empty iff this is an overall model evaluation (like Tables
 *  evaluation metrics), i.e. aggregated across all labels. The value comes from
 *  the input annotations in AnnotatedExample. For MVP product or for text
 *  sentiment models where annotation_spec_id_token is not available, set label
 *  instead.
 */
@property(nonatomic, copy, nullable) NSString *annotationSpecIdToken;

/**
 *  The integer category label for which this evaluation metric instance had
 *  been created. Valid categories are 0 or higher. Overall model evaluation
 *  should set this to negative values (rather than implicit zero). Only used
 *  for Image Segmentation (prefer to set annotation_spec_id_token instead).
 *  Note: uCAIP Image Segmentation should use annotation_spec_id_token.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *category;

/**
 *  The number of examples used to create this evaluation metrics instance.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *evaluatedExampleCount;

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSClassificationEvaluationMetrics *imageClassificationEvalMetrics;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSImageObjectDetectionEvaluationMetrics *imageObjectDetectionEvalMetrics;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSImageSegmentationEvaluationMetrics *imageSegmentationEvalMetrics;

/**
 *  The label for which this evaluation metrics instance had been created. Empty
 *  iff this is an overall model evaluation (like Tables evaluation metrics),
 *  i.e. aggregated across all labels. The label maps to
 *  AnnotationSpec.display_name in Public API protos. Only used by MVP
 *  implementation and text sentiment FULL implementation.
 */
@property(nonatomic, copy, nullable) NSString *label;

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSRegressionEvaluationMetrics *regressionEvalMetrics;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSClassificationEvaluationMetrics *tablesClassificationEvalMetrics;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTablesEvaluationMetrics *tablesEvalMetrics;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSClassificationEvaluationMetrics *textClassificationEvalMetrics;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTextExtractionEvaluationMetrics *textExtractionEvalMetrics;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTextSentimentEvaluationMetrics *textSentimentEvalMetrics;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTranslationEvaluationMetrics *translationEvalMetrics;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSVideoActionRecognitionEvaluationMetrics *videoActionRecognitionEvalMetrics;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSClassificationEvaluationMetrics *videoClassificationEvalMetrics;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSVideoObjectTrackingEvaluationMetrics *videoObjectTrackingEvalMetrics;

@end


/**
 *  Specifies location of model evaluation metrics.
 */
@interface GTLRCloudNaturalLanguage_XPSEvaluationMetricsSet : GTLRObject

/**
 *  Inline EvaluationMetrics - should be relatively small. For passing large
 *  quantities of exhaustive metrics, use file_spec.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSEvaluationMetrics *> *evaluationMetrics;

/**
 *  File spec containing evaluation metrics of a model, must point to RecordIO
 *  file(s) of intelligence.cloud.automl.xps.EvaluationMetrics messages.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSFileSpec *fileSpec;

/**
 *  Number of the evaluation metrics (usually one per label plus overall).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numEvaluationMetrics;

@end


/**
 *  Set of examples or input sources.
 */
@interface GTLRCloudNaturalLanguage_XPSExampleSet : GTLRObject

/** File spec of the examples or input sources. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSFileSpec *fileSpec;

/**
 *  Fingerprint of the example set.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fingerprint;

/**
 *  Number of examples.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numExamples;

/**
 *  Number of input sources.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numInputSources;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSExportModelOutputConfig
 */
@interface GTLRCloudNaturalLanguage_XPSExportModelOutputConfig : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSCoreMlFormat *coreMlFormat;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSDockerFormat *dockerFormat;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSEdgeTpuTfLiteFormat *edgeTpuTfLiteFormat;

/**
 *  For any model and format: If true, will additionally export
 *  FirebaseExportedModelInfo in a firebase.txt file.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exportFirebaseAuxiliaryInfo;

/**
 *  The Google Contained Registry path the exported files to be pushed to. This
 *  location is set if the exported format is DOCKDER.
 */
@property(nonatomic, copy, nullable) NSString *outputGcrUri;

/**
 *  The Google Cloud Storage directory where XPS will output the exported models
 *  and related files. Format: gs://bucket/directory
 */
@property(nonatomic, copy, nullable) NSString *outputGcsUri;

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTfJsFormat *tfJsFormat;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTfLiteFormat *tfLiteFormat;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTfSavedModelFormat *tfSavedModelFormat;

@end


/**
 *  Spec of input and output files, on external file systems (for example,
 *  Colossus Namespace System or Google Cloud Storage).
 */
@interface GTLRCloudNaturalLanguage_XPSFileSpec : GTLRObject

/** Deprecated. Use file_spec. */
@property(nonatomic, copy, nullable) NSString *directoryPath GTLR_DEPRECATED;

/**
 *  fileFormat
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSFileSpec_FileFormat_FileFormatRawCapacitor
 *        Value "FILE_FORMAT_RAW_CAPACITOR"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSFileSpec_FileFormat_FileFormatRawCsv
 *        Only the lexicographically first file described by the file_spec
 *        contains the header line. (Value: "FILE_FORMAT_RAW_CSV")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSFileSpec_FileFormat_FileFormatRecordio
 *        Value "FILE_FORMAT_RECORDIO"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSFileSpec_FileFormat_FileFormatSstable
 *        Value "FILE_FORMAT_SSTABLE"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSFileSpec_FileFormat_FileFormatTranslationRkv
 *        Internal format for parallel text data used by Google Translate.
 *        (Value: "FILE_FORMAT_TRANSLATION_RKV")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSFileSpec_FileFormat_FileFormatUnknown
 *        Value "FILE_FORMAT_UNKNOWN"
 */
@property(nonatomic, copy, nullable) NSString *fileFormat;

/**
 *  Single file path, or file pattern of format "/path/to/file\@shard_count".
 *  E.g. /cns/cell-d/somewhere/file\@2 is expanded to two files:
 *  /cns/cell-d/somewhere/file-00000-of-00002 and
 *  /cns/cell-d/somewhere/file-00001-of-00002.
 */
@property(nonatomic, copy, nullable) NSString *fileSpec;

/** Deprecated. Use file_spec. */
@property(nonatomic, copy, nullable) NSString *singleFilePath GTLR_DEPRECATED;

@end


/**
 *  The data statistics of a series of FLOAT64 values.
 */
@interface GTLRCloudNaturalLanguage_XPSFloat64Stats : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSCommonStats *commonStats;

/**
 *  Histogram buckets of the data series. Sorted by the min value of the bucket,
 *  ascendingly, and the number of the buckets is dynamically generated. The
 *  buckets are non-overlapping and completely cover whole FLOAT64 range with
 *  min of first bucket being `"-Infinity"`, and max of the last one being
 *  `"Infinity"`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSFloat64StatsHistogramBucket *> *histogramBuckets;

/**
 *  The mean of the series.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *mean;

/**
 *  Ordered from 0 to k k-quantile values of the data series of n values. The
 *  value at index i is, approximately, the i*n/k-th smallest value in the
 *  series; for i = 0 and i = k these are, respectively, the min and max values.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *quantiles;

/**
 *  The standard deviation of the series.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *standardDeviation;

@end


/**
 *  A bucket of a histogram.
 */
@interface GTLRCloudNaturalLanguage_XPSFloat64StatsHistogramBucket : GTLRObject

/**
 *  The number of data values that are in the bucket, i.e. are between min and
 *  max values.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/**
 *  The maximum value of the bucket, exclusive unless max = `"Infinity"`, in
 *  which case it's inclusive.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *max;

/**
 *  The minimum value of the bucket, inclusive.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *min;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSImageClassificationTrainResponse
 */
@interface GTLRCloudNaturalLanguage_XPSImageClassificationTrainResponse : GTLRObject

/**
 *  Total number of classes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *classCount;

/**
 *  Information of downloadable models that are pre-generated as part of
 *  training flow and will be persisted in AutoMl backend. Populated for AutoMl
 *  requests.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSImageExportModelSpec *exportModelSpec;

/** ## The fields below are only populated under uCAIP request scope. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSImageModelArtifactSpec *modelArtifactSpec;

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSImageModelServingSpec *modelServingSpec;

/**
 *  Stop reason for training job, e.g. 'TRAIN_BUDGET_REACHED',
 *  'MODEL_CONVERGED', 'MODEL_EARLY_STOPPED'.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageClassificationTrainResponse_StopReason_TrainStopReasonBudgetReached
 *        Value "TRAIN_STOP_REASON_BUDGET_REACHED"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageClassificationTrainResponse_StopReason_TrainStopReasonModelConverged
 *        Model fully converged, can not be resumbed training. (Value:
 *        "TRAIN_STOP_REASON_MODEL_CONVERGED")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageClassificationTrainResponse_StopReason_TrainStopReasonModelEarlyStopped
 *        Model early converged, can be further trained till full convergency.
 *        (Value: "TRAIN_STOP_REASON_MODEL_EARLY_STOPPED")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageClassificationTrainResponse_StopReason_TrainStopReasonUnspecified
 *        Value "TRAIN_STOP_REASON_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *stopReason;

/**
 *  The actual cost to create this model. - For edge type model, the cost is
 *  expressed in node hour. - For cloud type model,the cost is expressed in
 *  compute hour. - Populated for models created before GA. To be deprecated
 *  after GA.
 */
@property(nonatomic, strong, nullable) GTLRDuration *trainCostInNodeTime;

/**
 *  The actual training cost, expressed in node seconds. Populated for models
 *  trained in node time.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainCostNodeSeconds;

@end


/**
 *  Information of downloadable models that are pre-generated as part of
 *  training flow and will be persisted in AutoMl backend. Upon receiving
 *  ExportModel request from user, AutoMl backend can serve the pre-generated
 *  models to user if exists (by copying the files from internal path to user
 *  provided location), otherwise, AutoMl backend will call xPS ExportModel API
 *  to generate the model on the fly with the requesting format.
 */
@interface GTLRCloudNaturalLanguage_XPSImageExportModelSpec : GTLRObject

/**
 *  Contains the model format and internal location of the model files to be
 *  exported/downloaded. Use the Google Cloud Storage bucket name which is
 *  provided via TrainRequest.gcs_bucket_name to store the model files.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSExportModelOutputConfig *> *exportModelOutputConfig;

@end


/**
 *  Stores the locations and related metadata of the model artifacts. Populated
 *  for uCAIP requests only.
 */
@interface GTLRCloudNaturalLanguage_XPSImageModelArtifactSpec : GTLRObject

/** The Tensorflow checkpoint files. e.g. Used for resumable training. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSModelArtifactItem *checkpointArtifact;

/** The model binary files in different formats for model export. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSModelArtifactItem *> *exportArtifact;

/**
 *  Google Cloud Storage URI of decoded labels file for model export 'dict.txt'.
 */
@property(nonatomic, copy, nullable) NSString *labelGcsUri;

/**
 *  The default model binary file used for serving (e.g. online predict, batch
 *  predict) via public Cloud AI Platform API.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSModelArtifactItem *servingArtifact;

/**
 *  Google Cloud Storage URI prefix of Tensorflow JavaScript binary files
 *  'groupX-shardXofX.bin'. Deprecated.
 */
@property(nonatomic, copy, nullable) NSString *tfJsBinaryGcsPrefix;

/**
 *  Google Cloud Storage URI of Tensorflow Lite metadata 'tflite_metadata.json'.
 */
@property(nonatomic, copy, nullable) NSString *tfLiteMetadataGcsUri;

@end


/**
 *  Serving specification for image models.
 */
@interface GTLRCloudNaturalLanguage_XPSImageModelServingSpec : GTLRObject

/** Populate under uCAIP request scope. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation *> *modelThroughputEstimation;

/**
 *  An estimated value of how much traffic a node can serve. Populated for
 *  AutoMl request only.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nodeQps;

/**
 *  ## The fields below are only populated under uCAIP request scope.
 *  https://cloud.google.com/ml-engine/docs/runtime-version-list
 */
@property(nonatomic, copy, nullable) NSString *tfRuntimeVersion;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation
 */
@interface GTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation : GTLRObject

/**
 *  computeEngineAcceleratorType
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaA10080gb
 *        Nvidia A100 80GB GPU. (Value: "NVIDIA_A100_80GB")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaH10080gb
 *        Nvidia H100 80Gb GPU. (Value: "NVIDIA_H100_80GB")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaH100Mega80gb
 *        Nvidia H100 80Gb GPU. (Value: "NVIDIA_H100_MEGA_80GB")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaH200141gb
 *        Nvidia H200 141Gb GPU. (Value: "NVIDIA_H200_141GB")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaL4
 *        Nvidia L4 GPU. (Value: "NVIDIA_L4")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaTeslaA100
 *        Nvidia Tesla A100 GPU. (Value: "NVIDIA_TESLA_A100")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaTeslaK80
 *        Nvidia Tesla K80 GPU. (Value: "NVIDIA_TESLA_K80")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaTeslaP100
 *        Nvidia Tesla P100 GPU. (Value: "NVIDIA_TESLA_P100")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaTeslaP4
 *        Nvidia Tesla P4 GPU. (Value: "NVIDIA_TESLA_P4")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaTeslaT4
 *        Nvidia Tesla T4 GPU. (Value: "NVIDIA_TESLA_T4")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_NvidiaTeslaV100
 *        Nvidia Tesla V100 GPU. (Value: "NVIDIA_TESLA_V100")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_TpuV2
 *        TPU v2 (JellyFish). (Value: "TPU_V2")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_TpuV3
 *        TPU v3 (DragonFish). (Value: "TPU_V3")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_TpuV4Pod
 *        TPU_v4 (PufferFish). (Value: "TPU_V4_POD")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_TpuV5Litepod
 *        TPU v5 Lite Pods. (Value: "TPU_V5_LITEPOD")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ComputeEngineAcceleratorType_Unspecified
 *        Value "UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *computeEngineAcceleratorType;

/**
 *  Estimated latency.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *latencyInMilliseconds;

/**
 *  The approximate qps a deployed node can serve.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nodeQps;

/**
 *  servomaticPartitionType
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ServomaticPartitionType_PartitionCpu
 *        The partition used by regionalized servomatic cloud regions. (Value:
 *        "PARTITION_CPU")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ServomaticPartitionType_PartitionCustomStorageCpu
 *        The partition used for loading models from custom storage. (Value:
 *        "PARTITION_CUSTOM_STORAGE_CPU")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ServomaticPartitionType_PartitionJellyfish
 *        To be used by customers with Jellyfish-accelerated ops. (Value:
 *        "PARTITION_JELLYFISH")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ServomaticPartitionType_PartitionReducedHoming
 *        It has significantly lower replication than partition-0 and is located
 *        in the US only. It also has a larger model size limit and higher
 *        default RAM quota than partition-0. Customers with batch traffic,
 *        US-based traffic, or very large models should use this partition.
 *        Capacity in this partition is significantly cheaper than partition-0.
 *        (Value: "PARTITION_REDUCED_HOMING")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ServomaticPartitionType_PartitionTypeUnspecified
 *        Value "PARTITION_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageModelServingSpecModelThroughputEstimation_ServomaticPartitionType_PartitionZero
 *        The default partition. (Value: "PARTITION_ZERO")
 */
@property(nonatomic, copy, nullable) NSString *servomaticPartitionType;

@end


/**
 *  Model evaluation metrics for image object detection problems. Evaluates
 *  prediction quality of labeled bounding boxes.
 */
@interface GTLRCloudNaturalLanguage_XPSImageObjectDetectionEvaluationMetrics : GTLRObject

/**
 *  The single metric for bounding boxes evaluation: the mean_average_precision
 *  averaged over all bounding_box_metrics_entries.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *boundingBoxMeanAveragePrecision;

/**
 *  The bounding boxes match metrics for each Intersection-over-union threshold
 *  0.05,0.10,...,0.95,0.96,0.97,0.98,0.99 and each label confidence threshold
 *  0.05,0.10,...,0.95,0.96,0.97,0.98,0.99 pair.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSBoundingBoxMetricsEntry *> *boundingBoxMetricsEntries;

/**
 *  The total number of bounding boxes (i.e. summed over all images) the ground
 *  truth used to create this evaluation had.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *evaluatedBoundingBoxCount;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSImageObjectDetectionModelSpec
 */
@interface GTLRCloudNaturalLanguage_XPSImageObjectDetectionModelSpec : GTLRObject

/**
 *  Total number of classes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *classCount;

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSImageExportModelSpec *exportModelSpec;

/**
 *  Max number of bounding box.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxBoundingBoxCount;

/** ## The fields below are only populated under uCAIP request scope. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSImageModelArtifactSpec *modelArtifactSpec;

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSImageModelServingSpec *modelServingSpec;

/**
 *  Stop reason for training job, e.g. 'TRAIN_BUDGET_REACHED',
 *  'MODEL_CONVERGED'.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageObjectDetectionModelSpec_StopReason_TrainStopReasonBudgetReached
 *        Value "TRAIN_STOP_REASON_BUDGET_REACHED"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageObjectDetectionModelSpec_StopReason_TrainStopReasonModelConverged
 *        Model fully converged, can not be resumbed training. (Value:
 *        "TRAIN_STOP_REASON_MODEL_CONVERGED")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageObjectDetectionModelSpec_StopReason_TrainStopReasonModelEarlyStopped
 *        Model early converged, can be further trained till full convergency.
 *        (Value: "TRAIN_STOP_REASON_MODEL_EARLY_STOPPED")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageObjectDetectionModelSpec_StopReason_TrainStopReasonUnspecified
 *        Value "TRAIN_STOP_REASON_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *stopReason;

/**
 *  The actual train cost of creating this model, expressed in node seconds,
 *  i.e. 3,600 value in this field means 1 node hour.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainCostNodeSeconds;

@end


/**
 *  Model evaluation metrics for image segmentation problems. Next tag: 4.
 */
@interface GTLRCloudNaturalLanguage_XPSImageSegmentationEvaluationMetrics : GTLRObject

/**
 *  Metrics that have confidence thresholds. Precision-recall curve can be
 *  derived from it.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSImageSegmentationEvaluationMetricsConfidenceMetricsEntry *> *confidenceMetricsEntries;

@end


/**
 *  Metrics for a single confidence threshold.
 */
@interface GTLRCloudNaturalLanguage_XPSImageSegmentationEvaluationMetricsConfidenceMetricsEntry : GTLRObject

/**
 *  The confidence threshold value used to compute the metrics.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *confidenceThreshold;

/**
 *  Confusion matrix of the per confidence_threshold evaluation. Pixel counts
 *  are set here. Only set for model level evaluation, not for evaluation per
 *  label.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSConfusionMatrix *confusionMatrix;

/**
 *  DSC or the F1 score: The harmonic mean of recall and precision.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *diceScoreCoefficient;

/**
 *  IOU score.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *iouScore;

/**
 *  Precision for the given confidence threshold.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precision;

/**
 *  Recall for the given confidence threshold.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recall;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSImageSegmentationTrainResponse
 */
@interface GTLRCloudNaturalLanguage_XPSImageSegmentationTrainResponse : GTLRObject

/** Color map of the model. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSColorMap *> *colorMaps;

/** NOTE: These fields are not used/needed in EAP but will be set later. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSImageExportModelSpec *exportModelSpec;

/**
 *  ## The fields below are only populated under uCAIP request scope. Model
 *  artifact spec stores and model gcs pathes and related metadata
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSImageModelArtifactSpec *modelArtifactSpec;

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSImageModelServingSpec *modelServingSpec;

/**
 *  Stop reason for training job, e.g. 'TRAIN_BUDGET_REACHED',
 *  'MODEL_CONVERGED'.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageSegmentationTrainResponse_StopReason_TrainStopReasonBudgetReached
 *        Value "TRAIN_STOP_REASON_BUDGET_REACHED"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageSegmentationTrainResponse_StopReason_TrainStopReasonModelConverged
 *        Model fully converged, can not be resumbed training. (Value:
 *        "TRAIN_STOP_REASON_MODEL_CONVERGED")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageSegmentationTrainResponse_StopReason_TrainStopReasonModelEarlyStopped
 *        Model early converged, can be further trained till full convergency.
 *        (Value: "TRAIN_STOP_REASON_MODEL_EARLY_STOPPED")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSImageSegmentationTrainResponse_StopReason_TrainStopReasonUnspecified
 *        Value "TRAIN_STOP_REASON_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *stopReason;

/**
 *  The actual train cost of creating this model, expressed in node seconds,
 *  i.e. 3,600 value in this field means 1 node hour.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainCostNodeSeconds;

@end


/**
 *  An attribution method that computes the Aumann-Shapley value taking
 *  advantage of the model's fully differentiable structure. Refer to this paper
 *  for more details: https://arxiv.org/abs/1703.01365
 */
GTLR_DEPRECATED
@interface GTLRCloudNaturalLanguage_XPSIntegratedGradientsAttribution : GTLRObject

/**
 *  The number of steps for approximating the path integral. A good value to
 *  start is 50 and gradually increase until the sum to diff property is within
 *  the desired error range. Valid range of its value is [1, 100], inclusively.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *stepCount;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSMetricEntry
 */
@interface GTLRCloudNaturalLanguage_XPSMetricEntry : GTLRObject

/**
 *  For billing metrics that are using legacy sku's, set the legacy billing
 *  metric id here. This will be sent to Chemist as the
 *  "cloudbilling.googleapis.com/argentum_metric_id" label. Otherwise leave
 *  empty.
 */
@property(nonatomic, copy, nullable) NSString *argentumMetricId;

/**
 *  A double value.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *doubleValue;

/**
 *  A signed 64-bit integer value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *int64Value;

/** The metric name defined in the service configuration. */
@property(nonatomic, copy, nullable) NSString *metricName;

/** Billing system labels for this (metric, value) pair. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSMetricEntryLabel *> *systemLabels;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSMetricEntryLabel
 */
@interface GTLRCloudNaturalLanguage_XPSMetricEntryLabel : GTLRObject

/** The name of the label. */
@property(nonatomic, copy, nullable) NSString *labelName;

/** The value of the label. */
@property(nonatomic, copy, nullable) NSString *labelValue;

@end


/**
 *  A single model artifact item.
 */
@interface GTLRCloudNaturalLanguage_XPSModelArtifactItem : GTLRObject

/**
 *  The model artifact format.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSModelArtifactItem_ArtifactFormat_ArtifactFormatUnspecified
 *        Should not be used. (Value: "ARTIFACT_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSModelArtifactItem_ArtifactFormat_CoreMl
 *        Used for iOS mobile devices in (.mlmodel) format. See
 *        https://developer.apple.com/documentation/coreml (Value: "CORE_ML")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSModelArtifactItem_ArtifactFormat_EdgeTpuTfLite
 *        Used for [Edge TPU](https://cloud.google.com/edge-tpu/) devices.
 *        (Value: "EDGE_TPU_TF_LITE")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSModelArtifactItem_ArtifactFormat_TfCheckpoint
 *        The Tensorflow checkpoints. See
 *        https://www.tensorflow.org/guide/checkpoint. (Value: "TF_CHECKPOINT")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSModelArtifactItem_ArtifactFormat_TfJs
 *        A [TensorFlow.js](https://www.tensorflow.org/js) model that can be
 *        used in the browser and in Node.js using JavaScript. (Value: "TF_JS")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSModelArtifactItem_ArtifactFormat_TfLite
 *        Model artifact in generic TensorFlow Lite (.tflite) format. See
 *        https://www.tensorflow.org/lite. (Value: "TF_LITE")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSModelArtifactItem_ArtifactFormat_TfSavedModel
 *        The Tensorflow SavedModel binary. (Value: "TF_SAVED_MODEL")
 */
@property(nonatomic, copy, nullable) NSString *artifactFormat;

/** The Google Cloud Storage URI that stores the model binary files. */
@property(nonatomic, copy, nullable) NSString *gcsUri;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSPreprocessResponse
 */
@interface GTLRCloudNaturalLanguage_XPSPreprocessResponse : GTLRObject

/**
 *  Preprocessed examples, that are to be imported into AutoML storage. This
 *  should point to RecordIO file(s) of PreprocessedExample messages. The
 *  PreprocessedExample.mvp_training_data-s returned here are later verbatim
 *  passed to Train() call in TrainExample.mvp_training_data.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSExampleSet *outputExampleSet;

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSSpeechPreprocessResponse *speechPreprocessResp;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTablesPreprocessResponse *tablesPreprocessResponse;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTranslationPreprocessResponse *translationPreprocessResp;

@end


/**
 *  Model evaluation metrics for regression problems. It can be used for Tables.
 */
@interface GTLRCloudNaturalLanguage_XPSRegressionEvaluationMetrics : GTLRObject

/**
 *  Mean Absolute Error (MAE).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanAbsoluteError;

/**
 *  Mean absolute percentage error. Only set if all ground truth values are
 *  positive.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanAbsolutePercentageError;

/** A list of actual versus predicted points for the model being evaluated. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSRegressionMetricsEntry *> *regressionMetricsEntries;

/**
 *  Root Mean Squared Error (RMSE).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rootMeanSquaredError;

/**
 *  Root mean squared log error.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rootMeanSquaredLogError;

/**
 *  R squared.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rSquared;

@end


/**
 *  A pair of actual & observed values for the model being evaluated.
 */
@interface GTLRCloudNaturalLanguage_XPSRegressionMetricsEntry : GTLRObject

/**
 *  The observed value for a row in the dataset.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *predictedValue;

/**
 *  The actual target value for a row in the dataset.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trueValue;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSReportingMetrics
 */
@interface GTLRCloudNaturalLanguage_XPSReportingMetrics : GTLRObject

/**
 *  The effective time training used. If set, this is used for quota management
 *  and billing. Deprecated. AutoML BE doesn't use this. Don't set.
 */
@property(nonatomic, strong, nullable) GTLRDuration *effectiveTrainingDuration GTLR_DEPRECATED;

/**
 *  One entry per metric name. The values must be aggregated per metric name.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSMetricEntry *> *metricEntries;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSResponseExplanationMetadata
 */
GTLR_DEPRECATED
@interface GTLRCloudNaturalLanguage_XPSResponseExplanationMetadata : GTLRObject

/** Metadata of the input. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSResponseExplanationMetadata_Inputs *inputs;

/** Metadata of the output. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSResponseExplanationMetadata_Outputs *outputs;

@end


/**
 *  Metadata of the input.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudNaturalLanguage_XPSResponseExplanationMetadataInputMetadata.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_XPSResponseExplanationMetadata_Inputs : GTLRObject
@end


/**
 *  Metadata of the output.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudNaturalLanguage_XPSResponseExplanationMetadataOutputMetadata.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_XPSResponseExplanationMetadata_Outputs : GTLRObject
@end


/**
 *  Metadata of the input of a feature.
 */
@interface GTLRCloudNaturalLanguage_XPSResponseExplanationMetadataInputMetadata : GTLRObject

/** Name of the input tensor for this model. Only needed in train response. */
@property(nonatomic, copy, nullable) NSString *inputTensorName;

/**
 *  Modality of the feature. Valid values are: numeric, image. Defaults to
 *  numeric.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSResponseExplanationMetadataInputMetadata_Modality_Categorical
 *        Value "CATEGORICAL"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSResponseExplanationMetadataInputMetadata_Modality_Image
 *        Value "IMAGE"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSResponseExplanationMetadataInputMetadata_Modality_ModalityUnspecified
 *        Value "MODALITY_UNSPECIFIED"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSResponseExplanationMetadataInputMetadata_Modality_Numeric
 *        Value "NUMERIC"
 */
@property(nonatomic, copy, nullable) NSString *modality;

/** Visualization configurations for image explanation. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSVisualization *visualizationConfig;

@end


/**
 *  Metadata of the prediction output to be explained.
 */
@interface GTLRCloudNaturalLanguage_XPSResponseExplanationMetadataOutputMetadata : GTLRObject

/** Name of the output tensor. Only needed in train response. */
@property(nonatomic, copy, nullable) NSString *outputTensorName;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSResponseExplanationParameters
 */
GTLR_DEPRECATED
@interface GTLRCloudNaturalLanguage_XPSResponseExplanationParameters : GTLRObject

/**
 *  An attribution method that computes Aumann-Shapley values taking advantage
 *  of the model's fully differentiable structure. Refer to this paper for more
 *  details: https://arxiv.org/abs/1703.01365
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSIntegratedGradientsAttribution *integratedGradientsAttribution;

/**
 *  An attribution method that redistributes Integrated Gradients attribution to
 *  segmented regions, taking advantage of the model's fully differentiable
 *  structure. Refer to this paper for more details:
 *  https://arxiv.org/abs/1906.02825 XRAI currently performs better on natural
 *  images, like a picture of a house or an animal. If the images are taken in
 *  artificial environments, like a lab or manufacturing line, or from
 *  diagnostic equipment, like x-rays or quality-control cameras, use Integrated
 *  Gradients instead.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSXraiAttribution *xraiAttribution;

@end


/**
 *  Specification of Model explanation. Feature-based XAI in AutoML Vision ICN
 *  is deprecated.
 */
GTLR_DEPRECATED
@interface GTLRCloudNaturalLanguage_XPSResponseExplanationSpec : GTLRObject

/**
 *  Explanation type. For AutoML Image Classification models, possible values
 *  are: * `image-integrated-gradients` * `image-xrai`
 */
@property(nonatomic, copy, nullable) NSString *explanationType;

/** Metadata describing the Model's input and output for explanation. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSResponseExplanationMetadata *metadata;

/** Parameters that configure explaining of the Model's predictions. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSResponseExplanationParameters *parameters;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSRow
 */
@interface GTLRCloudNaturalLanguage_XPSRow : GTLRObject

/**
 *  The ids of the columns. Note: The below `values` field must match order of
 *  this field, if this field is set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *columnIds;

/**
 *  The values of the row cells, given in the same order as the column_ids. If
 *  column_ids is not set, then in the same order as the
 *  input_feature_column_ids in TablesModelMetadata.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) NSArray *values;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSSpeechEvaluationMetrics
 */
@interface GTLRCloudNaturalLanguage_XPSSpeechEvaluationMetrics : GTLRObject

/** Evaluation metrics for all submodels contained in this model. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSSpeechEvaluationMetricsSubModelEvaluationMetric *> *subModelEvaluationMetrics;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSSpeechEvaluationMetricsSubModelEvaluationMetric
 */
@interface GTLRCloudNaturalLanguage_XPSSpeechEvaluationMetricsSubModelEvaluationMetric : GTLRObject

/**
 *  Type of the biasing model.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSSpeechEvaluationMetricsSubModelEvaluationMetric_BiasingModelType_BiasingModelTypeUnspecified
 *        Value "BIASING_MODEL_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSSpeechEvaluationMetricsSubModelEvaluationMetric_BiasingModelType_CommandAndSearch
 *        Build biasing model on top of COMMAND_AND_SEARCH model (Value:
 *        "COMMAND_AND_SEARCH")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSSpeechEvaluationMetricsSubModelEvaluationMetric_BiasingModelType_Default
 *        Build biasing model on top of DEFAULT model (Value: "DEFAULT")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSSpeechEvaluationMetricsSubModelEvaluationMetric_BiasingModelType_PhoneCall
 *        Build biasing model on top of PHONE_CALL model (Value: "PHONE_CALL")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSSpeechEvaluationMetricsSubModelEvaluationMetric_BiasingModelType_Video
 *        Build biasing model on top of VIDEO model (Value: "VIDEO")
 */
@property(nonatomic, copy, nullable) NSString *biasingModelType;

/**
 *  If true then it means we have an enhanced version of the biasing models.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isEnhancedModel;

/**
 *  numDeletions
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numDeletions;

/**
 *  numInsertions
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numInsertions;

/**
 *  numSubstitutions
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numSubstitutions;

/**
 *  Number of utterances used in the wer computation.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numUtterances;

/**
 *  Number of words over which the word error rate was computed.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numWords;

/**
 *  Below fields are used for debugging purposes
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sentenceAccuracy;

/**
 *  Word error rate (standard error metric used for speech recognition).
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wer;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSSpeechModelSpec
 */
@interface GTLRCloudNaturalLanguage_XPSSpeechModelSpec : GTLRObject

/**
 *  Required for speech xps backend. Speech xps has to use dataset_id and
 *  model_id as the primary key in db so that speech API can query the db
 *  directly.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *datasetId;

@property(nonatomic, copy, nullable) NSString *language;

/** Model specs for all submodels contained in this model. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSSpeechModelSpecSubModelSpec *> *subModelSpecs;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSSpeechModelSpecSubModelSpec
 */
@interface GTLRCloudNaturalLanguage_XPSSpeechModelSpecSubModelSpec : GTLRObject

/**
 *  Type of the biasing model.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSSpeechModelSpecSubModelSpec_BiasingModelType_BiasingModelTypeUnspecified
 *        Value "BIASING_MODEL_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSSpeechModelSpecSubModelSpec_BiasingModelType_CommandAndSearch
 *        Build biasing model on top of COMMAND_AND_SEARCH model (Value:
 *        "COMMAND_AND_SEARCH")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSSpeechModelSpecSubModelSpec_BiasingModelType_Default
 *        Build biasing model on top of DEFAULT model (Value: "DEFAULT")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSSpeechModelSpecSubModelSpec_BiasingModelType_PhoneCall
 *        Build biasing model on top of PHONE_CALL model (Value: "PHONE_CALL")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSSpeechModelSpecSubModelSpec_BiasingModelType_Video
 *        Build biasing model on top of VIDEO model (Value: "VIDEO")
 */
@property(nonatomic, copy, nullable) NSString *biasingModelType;

/** In S3, Recognition ClientContextId.client_id */
@property(nonatomic, copy, nullable) NSString *clientId;

/** In S3, Recognition ClientContextId.context_id */
@property(nonatomic, copy, nullable) NSString *contextId;

/**
 *  If true then it means we have an enhanced version of the biasing models.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isEnhancedModel;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSSpeechPreprocessResponse
 */
@interface GTLRCloudNaturalLanguage_XPSSpeechPreprocessResponse : GTLRObject

/** Location od shards of sstables (test data) of DataUtterance protos. */
@property(nonatomic, copy, nullable) NSString *cnsTestDataPath;

/** Location of shards of sstables (training data) of DataUtterance protos. */
@property(nonatomic, copy, nullable) NSString *cnsTrainDataPath;

/**
 *  The metrics for prebuilt speech models. They are included here because there
 *  is no prebuilt speech models stored in the AutoML.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSSpeechEvaluationMetrics *prebuiltModelEvaluationMetrics;

/** Stats associated with the data. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSSpeechPreprocessStats *speechPreprocessStats;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSSpeechPreprocessStats
 */
@interface GTLRCloudNaturalLanguage_XPSSpeechPreprocessStats : GTLRObject

/** Different types of data errors and the counts associated with them. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSDataErrors *> *dataErrors;

/**
 *  The number of rows marked HUMAN_LABELLED
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numHumanLabeledExamples;

/**
 *  The number of samples found in the previously recorded logs data.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numLogsExamples;

/**
 *  The number of rows marked as MACHINE_TRANSCRIBED
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numMachineTranscribedExamples;

/**
 *  The number of examples labelled as TEST by Speech xps server.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *testExamplesCount;

/**
 *  The number of sentences in the test data set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *testSentencesCount;

/**
 *  The number of words in the test data set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *testWordsCount;

/**
 *  The number of examples labeled as TRAIN by Speech xps server.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainExamplesCount;

/**
 *  The number of sentences in the training data set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainSentencesCount;

/**
 *  The number of words in the training data set.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainWordsCount;

@end


/**
 *  The data statistics of a series of STRING values.
 */
@interface GTLRCloudNaturalLanguage_XPSStringStats : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSCommonStats *commonStats;

/**
 *  The statistics of the top 20 unigrams, ordered by
 *  StringStats.UnigramStats.count.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSStringStatsUnigramStats *> *topUnigramStats;

@end


/**
 *  The statistics of a unigram.
 */
@interface GTLRCloudNaturalLanguage_XPSStringStatsUnigramStats : GTLRObject

/**
 *  The number of occurrences of this unigram in the series.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *count;

/** The unigram. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  The data statistics of a series of STRUCT values.
 */
@interface GTLRCloudNaturalLanguage_XPSStructStats : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSCommonStats *commonStats;

/**
 *  Map from a field name of the struct to data stats aggregated over series of
 *  all data in that field across all the structs.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSStructStats_FieldStats *fieldStats;

@end


/**
 *  Map from a field name of the struct to data stats aggregated over series of
 *  all data in that field across all the structs.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudNaturalLanguage_XPSDataStats. Use @c -additionalJSONKeys and
 *        @c -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_XPSStructStats_FieldStats : GTLRObject
@end


/**
 *  `StructType` defines the DataType-s of a STRUCT type.
 */
@interface GTLRCloudNaturalLanguage_XPSStructType : GTLRObject

/** Unordered map of struct field names to their data types. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSStructType_Fields *fields;

@end


/**
 *  Unordered map of struct field names to their data types.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudNaturalLanguage_XPSDataType. Use @c -additionalJSONKeys and
 *        @c -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_XPSStructType_Fields : GTLRObject
@end


/**
 *  Metrics for Tables classification problems.
 */
@interface GTLRCloudNaturalLanguage_XPSTablesClassificationMetrics : GTLRObject

/** Metrics building a curve. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSTablesClassificationMetricsCurveMetrics *> *curveMetrics;

@end


/**
 *  Metrics curve data point for a single value.
 */
@interface GTLRCloudNaturalLanguage_XPSTablesClassificationMetricsCurveMetrics : GTLRObject

/**
 *  The area under the precision-recall curve.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aucPr;

/**
 *  The area under receiver operating characteristic curve.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aucRoc;

/**
 *  Metrics that have confidence thresholds. Precision-recall curve and ROC
 *  curve can be derived from them.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSTablesConfidenceMetricsEntry *> *confidenceMetricsEntries;

/**
 *  The Log loss metric.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *logLoss;

/**
 *  The position threshold value used to compute the metrics.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *positionThreshold;

/** The CATEGORY row value (for ARRAY unnested) the curve metrics are for. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Metrics for a single confidence threshold.
 */
@interface GTLRCloudNaturalLanguage_XPSTablesConfidenceMetricsEntry : GTLRObject

/**
 *  The confidence threshold value used to compute the metrics.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *confidenceThreshold;

/**
 *  The harmonic mean of recall and precision. (2 * precision * recall) /
 *  (precision + recall)
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *f1Score;

/**
 *  False negative count.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *falseNegativeCount;

/**
 *  False positive count.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *falsePositiveCount;

/**
 *  FPR = #false positives / (#false positives + #true negatives)
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *falsePositiveRate;

/**
 *  Precision = #true positives / (#true positives + #false positives).
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precision;

/**
 *  Recall = #true positives / (#true positives + #false negatives).
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recall;

/**
 *  True negative count.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trueNegativeCount;

/**
 *  True positive count.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *truePositiveCount;

/**
 *  TPR = #true positives / (#true positives + #false negatvies)
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *truePositiveRate;

@end


/**
 *  Metadata for a dataset used for AutoML Tables.
 */
@interface GTLRCloudNaturalLanguage_XPSTablesDatasetMetadata : GTLRObject

/**
 *  Id the column to split the table.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *mlUseColumnId;

/** Primary table. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTableSpec *primaryTableSpec;

/** (the column id : its CorrelationStats with target column). */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTablesDatasetMetadata_TargetColumnCorrelations *targetColumnCorrelations;

/**
 *  Id of the primary table column that should be used as the training label.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetColumnId;

/**
 *  Id of the primary table column that should be used as the weight column.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *weightColumnId;

@end


/**
 *  (the column id : its CorrelationStats with target column).
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudNaturalLanguage_XPSCorrelationStats. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_XPSTablesDatasetMetadata_TargetColumnCorrelations : GTLRObject
@end


/**
 *  GTLRCloudNaturalLanguage_XPSTablesEvaluationMetrics
 */
@interface GTLRCloudNaturalLanguage_XPSTablesEvaluationMetrics : GTLRObject

/** Classification metrics. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTablesClassificationMetrics *classificationMetrics;

/** Regression metrics. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTablesRegressionMetrics *regressionMetrics;

@end


/**
 *  An information specific to given column and Tables Model, in context of the
 *  Model and the predictions created by it.
 */
@interface GTLRCloudNaturalLanguage_XPSTablesModelColumnInfo : GTLRObject

/**
 *  The ID of the column.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columnId;

/**
 *  When given as part of a Model: Measurement of how much model predictions
 *  correctness on the TEST data depend on values in this column. A value
 *  between 0 and 1, higher means higher influence. These values are normalized
 *  - for all input feature columns of a given model they add to 1. When given
 *  back by Predict or Batch Predict: Measurement of how impactful for the
 *  prediction returned for the given row the value in this column was.
 *  Specifically, the feature importance specifies the marginal contribution
 *  that the feature made to the prediction score compared to the baseline
 *  score. These values are computed using the Sampled Shapley method.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *featureImportance;

@end


/**
 *  A description of Tables model structure.
 */
@interface GTLRCloudNaturalLanguage_XPSTablesModelStructure : GTLRObject

/** A list of models. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSTablesModelStructureModelParameters *> *modelParameters;

@end


/**
 *  Model hyper-parameters for a model.
 */
@interface GTLRCloudNaturalLanguage_XPSTablesModelStructureModelParameters : GTLRObject

@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSTablesModelStructureModelParametersParameter *> *hyperparameters;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSTablesModelStructureModelParametersParameter
 */
@interface GTLRCloudNaturalLanguage_XPSTablesModelStructureModelParametersParameter : GTLRObject

/**
 *  Float type parameter value.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *floatValue;

/**
 *  Integer type parameter value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *intValue;

/** Parameter name. */
@property(nonatomic, copy, nullable) NSString *name;

/** String type parameter value. */
@property(nonatomic, copy, nullable) NSString *stringValue;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSTableSpec
 */
@interface GTLRCloudNaturalLanguage_XPSTableSpec : GTLRObject

/** Mapping from column id to column spec. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTableSpec_ColumnSpecs *columnSpecs;

/**
 *  The total size of imported data of the table.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *importedDataSizeInBytes;

/**
 *  The number of rows in the table.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowCount;

/**
 *  The id of the time column.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timeColumnId;

/**
 *  The number of valid rows.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *validRowCount;

@end


/**
 *  Mapping from column id to column spec.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudNaturalLanguage_XPSColumnSpec. Use @c -additionalJSONKeys and
 *        @c -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_XPSTableSpec_ColumnSpecs : GTLRObject
@end


/**
 *  GTLRCloudNaturalLanguage_XPSTablesPreprocessResponse
 */
@interface GTLRCloudNaturalLanguage_XPSTablesPreprocessResponse : GTLRObject

/**
 *  The table/column id, column_name and the DataTypes of the columns will be
 *  populated.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTablesDatasetMetadata *tablesDatasetMetadata;

@end


/**
 *  Metrics for Tables regression problems.
 */
@interface GTLRCloudNaturalLanguage_XPSTablesRegressionMetrics : GTLRObject

/**
 *  Mean absolute error.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanAbsoluteError;

/**
 *  Mean absolute percentage error, only set if all of the target column's
 *  values are positive.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanAbsolutePercentageError;

/** A list of actual versus predicted points for the model being evaluated. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSRegressionMetricsEntry *> *regressionMetricsEntries;

/**
 *  Root mean squared error.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rootMeanSquaredError;

/**
 *  Root mean squared log error.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rootMeanSquaredLogError;

/**
 *  R squared.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rSquared;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSTablesTrainingOperationMetadata
 */
@interface GTLRCloudNaturalLanguage_XPSTablesTrainingOperationMetadata : GTLRObject

/**
 *  Current stage of creating model.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTablesTrainingOperationMetadata_CreateModelStage_CreateModelStageUnspecified
 *        Unspecified stage. (Value: "CREATE_MODEL_STAGE_UNSPECIFIED")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTablesTrainingOperationMetadata_CreateModelStage_DataPreprocessing
 *        Prepare the model training pipeline and run data processing. (Value:
 *        "DATA_PREPROCESSING")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTablesTrainingOperationMetadata_CreateModelStage_Evaluating
 *        Run evaluation. (Value: "EVALUATING")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTablesTrainingOperationMetadata_CreateModelStage_ModelPostProcessing
 *        Finalizing model training pipeline. (Value: "MODEL_POST_PROCESSING")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTablesTrainingOperationMetadata_CreateModelStage_Training
 *        Training model. (Value: "TRAINING")
 */
@property(nonatomic, copy, nullable) NSString *createModelStage;

/** The optimization objective for model. */
@property(nonatomic, copy, nullable) NSString *optimizationObjective;

/**
 *  This field is for training. When the operation is terminated successfully,
 *  AutoML Backend post this field to operation metadata in spanner. If the
 *  metadata has no trials returned, the training operation is supposed to be a
 *  failure.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSTuningTrial *> *topTrials;

/**
 *  Creating model budget.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainBudgetMilliNodeHours;

/**
 *  This field records the training objective value with respect to time, giving
 *  insight into how the model architecture search is performing as training
 *  time elapses.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSTrainingObjectivePoint *> *trainingObjectivePoints;

/** Timestamp when training process starts. */
@property(nonatomic, strong, nullable) GTLRDateTime *trainingStartTime;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSTablesTrainResponse
 */
@interface GTLRCloudNaturalLanguage_XPSTablesTrainResponse : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTablesModelStructure *modelStructure;

/** Sample rows from the dataset this model was trained. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSRow *> *predictionSampleRows;

/**
 *  Output only. Auxiliary information for each of the
 *  input_feature_column_specs, with respect to this particular model.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSTablesModelColumnInfo *> *tablesModelColumnInfo;

/**
 *  The actual training cost of the model, expressed in milli node hours, i.e.
 *  1,000 value in this field means 1 node hour. Guaranteed to not exceed the
 *  train budget.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainCostMilliNodeHours;

@end


/**
 *  Component model.
 */
@interface GTLRCloudNaturalLanguage_XPSTextComponentModel : GTLRObject

/** The Cloud Storage resource path to hold batch prediction model. */
@property(nonatomic, copy, nullable) NSString *batchPredictionModelGcsUri;

/** The Cloud Storage resource path to hold online prediction model. */
@property(nonatomic, copy, nullable) NSString *onlinePredictionModelGcsUri;

/**
 *  The partition where the model is deployed. Populated by uCAIP BE as part of
 *  online PredictRequest.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_Partition_PartitionCpu
 *        The partition used by regionalized servomatic cloud regions. (Value:
 *        "PARTITION_CPU")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_Partition_PartitionCustomStorageCpu
 *        The partition used for loading models from custom storage. (Value:
 *        "PARTITION_CUSTOM_STORAGE_CPU")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_Partition_PartitionJellyfish
 *        To be used by customers with Jellyfish-accelerated ops. (Value:
 *        "PARTITION_JELLYFISH")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_Partition_PartitionReducedHoming
 *        It has significantly lower replication than partition-0 and is located
 *        in the US only. It also has a larger model size limit and higher
 *        default RAM quota than partition-0. Customers with batch traffic,
 *        US-based traffic, or very large models should use this partition.
 *        Capacity in this partition is significantly cheaper than partition-0.
 *        (Value: "PARTITION_REDUCED_HOMING")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_Partition_PartitionTypeUnspecified
 *        Value "PARTITION_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_Partition_PartitionZero
 *        The default partition. (Value: "PARTITION_ZERO")
 */
@property(nonatomic, copy, nullable) NSString *partition;

/**
 *  The default model binary file used for serving (e.g. online predict, batch
 *  predict) via public Cloud Ai Platform API.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSModelArtifactItem *servingArtifact;

/**
 *  The name of servo model. Populated by uCAIP BE as part of online
 *  PredictRequest.
 */
@property(nonatomic, copy, nullable) NSString *servoModelName;

/** The name of the trained NL submodel. */
@property(nonatomic, copy, nullable) NSString *submodelName;

/**
 *  The type of trained NL submodel
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeAllModels
 *        Model type used to train default, MA, and ATC models in a single batch
 *        worker pipeline. (Value: "TEXT_MODEL_TYPE_ALL_MODELS")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeAtc
 *        Value "TEXT_MODEL_TYPE_ATC"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeBert
 *        BERT pipeline needs a specific model type, since it uses a different
 *        TFX configuration compared with DEFAULT (despite sharing most of the
 *        code). (Value: "TEXT_MODEL_TYPE_BERT")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeChatbase
 *        Value "TEXT_MODEL_TYPE_CHATBASE"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeClara2
 *        Value "TEXT_MODEL_TYPE_CLARA2"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeComposite
 *        A composite model represents a set of component models that have to be
 *        used together for prediction. A composite model appears to be a single
 *        model to the model user. It may contain only one component model.
 *        (Value: "TEXT_MODEL_TYPE_COMPOSITE")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeDefault
 *        Value "TEXT_MODEL_TYPE_DEFAULT"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeEncPalm
 *        Model type for EncPaLM. (Value: "TEXT_MODEL_TYPE_ENC_PALM")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeMetaArchitect
 *        Value "TEXT_MODEL_TYPE_META_ARCHITECT"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeRelationshipExtraction
 *        Model type for relationship extraction. (Value:
 *        "TEXT_MODEL_TYPE_RELATIONSHIP_EXTRACTION")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeSaftSpanLabeling
 *        Value "TEXT_MODEL_TYPE_SAFT_SPAN_LABELING"
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeTextExtraction
 *        Model type for entity extraction. (Value:
 *        "TEXT_MODEL_TYPE_TEXT_EXTRACTION")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTextComponentModel_SubmodelType_TextModelTypeUnspecified
 *        Value "TEXT_MODEL_TYPE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *submodelType;

/**
 *  ## The fields below are only populated under uCAIP request scope.
 *  https://cloud.google.com/ml-engine/docs/runtime-version-list
 */
@property(nonatomic, copy, nullable) NSString *tfRuntimeVersion;

/**
 *  The servomatic model version number. Populated by uCAIP BE as part of online
 *  PredictRequest.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *versionNumber;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSTextExtractionEvaluationMetrics
 */
@interface GTLRCloudNaturalLanguage_XPSTextExtractionEvaluationMetrics : GTLRObject

/**
 *  Values are at the highest F1 score on the precision-recall curve. Only
 *  confidence_threshold, recall, precision, and f1_score will be set.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSConfidenceMetricsEntry *bestF1ConfidenceMetrics GTLR_DEPRECATED;

/**
 *  If the enclosing EvaluationMetrics.label is empty,
 *  confidence_metrics_entries is an evaluation of the entire model across all
 *  labels. If the enclosing EvaluationMetrics.label is set,
 *  confidence_metrics_entries applies to that label.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSConfidenceMetricsEntry *> *confidenceMetricsEntries;

/**
 *  Confusion matrix of the model, at the default confidence threshold (0.0).
 *  Only set for whole-model evaluation, not for evaluation per label.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSConfusionMatrix *confusionMatrix;

/** Only recall, precision, and f1_score will be set. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTextExtractionEvaluationMetrics_PerLabelConfidenceMetrics *perLabelConfidenceMetrics GTLR_DEPRECATED;

@end


/**
 *  Only recall, precision, and f1_score will be set.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudNaturalLanguage_XPSConfidenceMetricsEntry. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
GTLR_DEPRECATED
@interface GTLRCloudNaturalLanguage_XPSTextExtractionEvaluationMetrics_PerLabelConfidenceMetrics : GTLRObject
@end


/**
 *  Model evaluation metrics for text sentiment problems.
 */
@interface GTLRCloudNaturalLanguage_XPSTextSentimentEvaluationMetrics : GTLRObject

/**
 *  Output only. Confusion matrix of the evaluation. Only set for the overall
 *  model evaluation, not for evaluation of a single annotation spec.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSConfusionMatrix *confusionMatrix;

/**
 *  Output only. The harmonic mean of recall and precision.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *f1Score;

/**
 *  Output only. Linear weighted kappa. Only set for the overall model
 *  evaluation, not for evaluation of a single annotation spec.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *linearKappa;

/**
 *  Output only. Mean absolute error. Only set for the overall model evaluation,
 *  not for evaluation of a single annotation spec.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanAbsoluteError;

/**
 *  Output only. Mean squared error. Only set for the overall model evaluation,
 *  not for evaluation of a single annotation spec.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanSquaredError;

/**
 *  Output only. Precision.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precision;

/**
 *  Output only. Quadratic weighted kappa. Only set for the overall model
 *  evaluation, not for evaluation of a single annotation spec.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *quadraticKappa;

/**
 *  Output only. Recall.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recall;

@end


/**
 *  TextToSpeech train response
 */
@interface GTLRCloudNaturalLanguage_XPSTextToSpeechTrainResponse : GTLRObject
@end


/**
 *  GTLRCloudNaturalLanguage_XPSTextTrainResponse
 */
@interface GTLRCloudNaturalLanguage_XPSTextTrainResponse : GTLRObject

/** Component submodels. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSTextComponentModel *> *componentModel;

@end


/**
 *  A [TensorFlow.js](https://www.tensorflow.org/js) model that can be used in
 *  the browser and in Node.js using JavaScript.
 */
@interface GTLRCloudNaturalLanguage_XPSTfJsFormat : GTLRObject
@end


/**
 *  LINT.IfChange A model format used for mobile and IoT devices. See
 *  https://www.tensorflow.org/lite.
 */
@interface GTLRCloudNaturalLanguage_XPSTfLiteFormat : GTLRObject
@end


/**
 *  A tensorflow model format in SavedModel format.
 */
@interface GTLRCloudNaturalLanguage_XPSTfSavedModelFormat : GTLRObject
@end


/**
 *  The data statistics of a series of TIMESTAMP values.
 */
@interface GTLRCloudNaturalLanguage_XPSTimestampStats : GTLRObject

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSCommonStats *commonStats;

/**
 *  The string key is the pre-defined granularity. Currently supported:
 *  hour_of_day, day_of_week, month_of_year. Granularities finer that the
 *  granularity of timestamp data are not populated (e.g. if timestamps are at
 *  day granularity, then hour_of_day is not populated).
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTimestampStats_GranularStats *granularStats;

/**
 *  medianTimestampNanos
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *medianTimestampNanos;

@end


/**
 *  The string key is the pre-defined granularity. Currently supported:
 *  hour_of_day, day_of_week, month_of_year. Granularities finer that the
 *  granularity of timestamp data are not populated (e.g. if timestamps are at
 *  day granularity, then hour_of_day is not populated).
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudNaturalLanguage_XPSTimestampStatsGranularStats. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_XPSTimestampStats_GranularStats : GTLRObject
@end


/**
 *  Stats split by a defined in context granularity.
 */
@interface GTLRCloudNaturalLanguage_XPSTimestampStatsGranularStats : GTLRObject

/**
 *  A map from granularity key to example count for that key. E.g. for
 *  hour_of_day `13` means 1pm, or for month_of_year `5` means May).
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTimestampStatsGranularStats_Buckets *buckets;

@end


/**
 *  A map from granularity key to example count for that key. E.g. for
 *  hour_of_day `13` means 1pm, or for month_of_year `5` means May).
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of longLongValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_XPSTimestampStatsGranularStats_Buckets : GTLRObject
@end


/**
 *  Track matching model metrics for a single track match threshold and multiple
 *  label match confidence thresholds. Next tag: 6.
 */
@interface GTLRCloudNaturalLanguage_XPSTrackMetricsEntry : GTLRObject

/**
 *  Output only. Metrics for each label-match confidence_threshold from
 *  0.05,0.10,...,0.95,0.96,0.97,0.98,0.99. Precision-recall curve is derived
 *  from them.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSTrackMetricsEntryConfidenceMetricsEntry *> *confidenceMetricsEntries;

/**
 *  Output only. The intersection-over-union threshold value between bounding
 *  boxes across frames used to compute this metric entry.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *iouThreshold;

/**
 *  Output only. The mean bounding box iou over all confidence thresholds.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanBoundingBoxIou;

/**
 *  Output only. The mean mismatch rate over all confidence thresholds.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanMismatchRate;

/**
 *  Output only. The mean average precision over all confidence thresholds.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanTrackingAveragePrecision;

@end


/**
 *  Metrics for a single confidence threshold. Next tag: 6.
 */
@interface GTLRCloudNaturalLanguage_XPSTrackMetricsEntryConfidenceMetricsEntry : GTLRObject

/**
 *  Output only. Bounding box intersection-over-union precision. Measures how
 *  well the bounding boxes overlap between each other (e.g. complete overlap or
 *  just barely above iou_threshold).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *boundingBoxIou;

/**
 *  Output only. The confidence threshold value used to compute the metrics.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *confidenceThreshold;

/**
 *  Output only. Mismatch rate, which measures the tracking consistency, i.e.
 *  correctness of instance ID continuity.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *mismatchRate;

/**
 *  Output only. Tracking precision.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trackingPrecision;

/**
 *  Output only. Tracking recall.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trackingRecall;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSTrainingObjectivePoint
 */
@interface GTLRCloudNaturalLanguage_XPSTrainingObjectivePoint : GTLRObject

/** The time at which this point was recorded. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The objective value when this point was recorded.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *value;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSTrainResponse
 */
@interface GTLRCloudNaturalLanguage_XPSTrainResponse : GTLRObject

/**
 *  Estimated model size in bytes once deployed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deployedModelSizeBytes;

/**
 *  Optional vision model error analysis configuration. The field is set when
 *  model error analysis is enabled in the training request. The results of
 *  error analysis will be binded together with evaluation results (in the
 *  format of AnnotatedExample).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSVisionErrorAnalysisConfig *> *errorAnalysisConfigs;

/**
 *  Examples used to evaluate the model (usually the test set), with the
 *  predicted annotations. The file_spec should point to recordio file(s) of
 *  AnnotatedExample. For each returned example, the example_id_token and
 *  annotations predicted by the model must be set. The example payload can and
 *  is recommended to be omitted.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSExampleSet *evaluatedExampleSet;

/** The trained model evaluation metrics. This can be optionally returned. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSEvaluationMetricsSet *evaluationMetricsSet;

/**
 *  VisionExplanationConfig for XAI on test set. Optional for when XAI is enable
 *  in training request.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSResponseExplanationSpec *> *explanationConfigs GTLR_DEPRECATED;

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSImageClassificationTrainResponse *imageClassificationTrainResp;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSImageObjectDetectionModelSpec *imageObjectDetectionTrainResp;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSImageSegmentationTrainResponse *imageSegmentationTrainResp;

/**
 *  Token that represents the trained model. This is considered immutable and is
 *  persisted in AutoML. xPS can put their own proto in the byte string, to e.g.
 *  point to the model checkpoints. The token is passed to other xPS APIs to
 *  refer to the model.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *modelToken;

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSSpeechModelSpec *speechTrainResp;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTablesTrainResponse *tablesTrainResp;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTextToSpeechTrainResponse *textToSpeechTrainResp;

/** Will only be needed for uCAIP from Beta. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTextTrainResponse *textTrainResp;

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTranslationTrainResponse *translationTrainResp;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSVideoActionRecognitionTrainResponse *videoActionRecognitionTrainResp;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSVideoClassificationTrainResponse *videoClassificationTrainResp;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSVideoObjectTrackingTrainResponse *videoObjectTrackingTrainResp;

@end


/**
 *  Evaluation metrics for the dataset.
 */
@interface GTLRCloudNaturalLanguage_XPSTranslationEvaluationMetrics : GTLRObject

/**
 *  BLEU score for base model.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *baseBleuScore;

/**
 *  BLEU score.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bleuScore;

@end


/**
 *  Translation preprocess response.
 */
@interface GTLRCloudNaturalLanguage_XPSTranslationPreprocessResponse : GTLRObject

/**
 *  Total example count parsed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *parsedExampleCount;

/**
 *  Total valid example count.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *validExampleCount;

@end


/**
 *  Train response for translation.
 */
@interface GTLRCloudNaturalLanguage_XPSTranslationTrainResponse : GTLRObject

/**
 *  Type of the model.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTranslationTrainResponse_ModelType_Current
 *        Current model. (Value: "CURRENT")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTranslationTrainResponse_ModelType_Legacy
 *        Legacy model. Will be deprecated. (Value: "LEGACY")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSTranslationTrainResponse_ModelType_ModelTypeUnspecified
 *        Default (Value: "MODEL_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *modelType;

@end


/**
 *  Metrics for a tuning job generated, will get forwarded to Stackdriver as
 *  model tuning logs. Setting this as a standalone message out of
 *  CreateModelMetadata to avoid confusion as we expose this message only to
 *  users.
 */
@interface GTLRCloudNaturalLanguage_XPSTuningTrial : GTLRObject

/** Model parameters for the trial. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTablesModelStructure *modelStructure;

/** The optimization objective evaluation of the eval split data. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTrainingObjectivePoint *trainingObjectivePoint;

@end


/**
 *  The Evaluation metrics entry given a specific precision_window_length.
 */
@interface GTLRCloudNaturalLanguage_XPSVideoActionMetricsEntry : GTLRObject

/**
 *  Metrics for each label-match confidence_threshold from
 *  0.05,0.10,...,0.95,0.96,0.97,0.98,0.99.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSVideoActionMetricsEntryConfidenceMetricsEntry *> *confidenceMetricsEntries;

/**
 *  The mean average precision.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *meanAveragePrecision;

/**
 *  This VideoActionMetricsEntry is calculated based on this prediction window
 *  length. If the predicted action's timestamp is inside the time window whose
 *  center is the ground truth action's timestamp with this specific length, the
 *  prediction result is treated as a true positive.
 */
@property(nonatomic, strong, nullable) GTLRDuration *precisionWindowLength;

@end


/**
 *  Metrics for a single confidence threshold.
 */
@interface GTLRCloudNaturalLanguage_XPSVideoActionMetricsEntryConfidenceMetricsEntry : GTLRObject

/**
 *  Output only. The confidence threshold value used to compute the metrics.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *confidenceThreshold;

/**
 *  Output only. The harmonic mean of recall and precision.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *f1Score;

/**
 *  Output only. Precision for the given confidence threshold.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precision;

/**
 *  Output only. Recall for the given confidence threshold.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recall;

@end


/**
 *  Model evaluation metrics for video action recognition.
 */
@interface GTLRCloudNaturalLanguage_XPSVideoActionRecognitionEvaluationMetrics : GTLRObject

/**
 *  Output only. The number of ground truth actions used to create this
 *  evaluation.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *evaluatedActionCount;

/**
 *  Output only. The metric entries for precision window lengths: 1s,2s,3s,4s,
 *  5s.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSVideoActionMetricsEntry *> *videoActionMetricsEntries;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSVideoActionRecognitionTrainResponse
 */
@interface GTLRCloudNaturalLanguage_XPSVideoActionRecognitionTrainResponse : GTLRObject

/** ## The fields below are only populated under uCAIP request scope. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSVideoModelArtifactSpec *modelArtifactSpec;

/**
 *  The actual train cost of creating this model, expressed in node seconds,
 *  i.e. 3,600 value in this field means 1 node hour.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainCostNodeSeconds;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSVideoBatchPredictOperationMetadata
 */
@interface GTLRCloudNaturalLanguage_XPSVideoBatchPredictOperationMetadata : GTLRObject

/**
 *  All the partial batch prediction results that are completed at the moment.
 *  Output examples are sorted by completion time. The order will not be
 *  changed. Each output example should be the path of a single RecordIO file of
 *  AnnotatedExamples.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *outputExamples;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSVideoClassificationTrainResponse
 */
@interface GTLRCloudNaturalLanguage_XPSVideoClassificationTrainResponse : GTLRObject

/** ## The fields below are only populated under uCAIP request scope. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSVideoModelArtifactSpec *modelArtifactSpec;

/**
 *  The actual train cost of creating this model, expressed in node seconds,
 *  i.e. 3,600 value in this field means 1 node hour.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainCostNodeSeconds;

@end


/**
 *  Information of downloadable models that are pre-generated as part of
 *  training flow and will be persisted in AutoMl backend. Upon receiving
 *  ExportModel request from user, AutoMl backend can serve the pre-generated
 *  models to user if exists (by copying the files from internal path to user
 *  provided location), otherwise, AutoMl backend will call xPS ExportModel API
 *  to generate the model on the fly with the requesting format.
 */
@interface GTLRCloudNaturalLanguage_XPSVideoExportModelSpec : GTLRObject

/**
 *  Contains the model format and internal location of the model files to be
 *  exported/downloaded. Use the Google Cloud Storage bucket name which is
 *  provided via TrainRequest.gcs_bucket_name to store the model files.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSExportModelOutputConfig *> *exportModelOutputConfig;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSVideoModelArtifactSpec
 */
@interface GTLRCloudNaturalLanguage_XPSVideoModelArtifactSpec : GTLRObject

/** The model binary files in different formats for model export. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSModelArtifactItem *> *exportArtifact;

/**
 *  The default model binary file used for serving (e.g. batch predict) via
 *  public Cloud AI Platform API.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSModelArtifactItem *servingArtifact;

@end


/**
 *  Model evaluation metrics for ObjectTracking problems. Next tag: 10.
 */
@interface GTLRCloudNaturalLanguage_XPSVideoObjectTrackingEvaluationMetrics : GTLRObject

/**
 *  Output only. The single metric for bounding boxes evaluation: the
 *  mean_average_precision averaged over all bounding_box_metrics_entries.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *boundingBoxMeanAveragePrecision;

/**
 *  Output only. The bounding boxes match metrics for each
 *  Intersection-over-union threshold 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSBoundingBoxMetricsEntry *> *boundingBoxMetricsEntries;

/**
 *  The number of bounding boxes used for model evaluation.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *evaluatedBoundingboxCount;

/**
 *  The number of video frames used for model evaluation.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *evaluatedFrameCount;

/**
 *  The number of tracks used for model evaluation.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *evaluatedTrackCount;

/**
 *  Output only. The single metric for tracks accuracy evaluation: the
 *  mean_average_precision averaged over all track_metrics_entries.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trackMeanAveragePrecision;

/**
 *  Output only. The single metric for tracks bounding box iou evaluation: the
 *  mean_bounding_box_iou averaged over all track_metrics_entries.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trackMeanBoundingBoxIou;

/**
 *  Output only. The single metric for tracking consistency evaluation: the
 *  mean_mismatch_rate averaged over all track_metrics_entries.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trackMeanMismatchRate;

/**
 *  Output only. The tracks match metrics for each Intersection-over-union
 *  threshold 0.05,0.10,...,0.95,0.96,0.97,0.98,0.99.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_XPSTrackMetricsEntry *> *trackMetricsEntries;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSVideoObjectTrackingTrainResponse
 */
@interface GTLRCloudNaturalLanguage_XPSVideoObjectTrackingTrainResponse : GTLRObject

/** Populated for AutoML request only. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSVideoExportModelSpec *exportModelSpec;

/** ## The fields below are only populated under uCAIP request scope. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSVideoModelArtifactSpec *modelArtifactSpec;

/**
 *  The actual train cost of creating this model, expressed in node seconds,
 *  i.e. 3,600 value in this field means 1 node hour.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainCostNodeSeconds;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSVideoTrainingOperationMetadata
 */
@interface GTLRCloudNaturalLanguage_XPSVideoTrainingOperationMetadata : GTLRObject

/**
 *  This is an estimation of the node hours necessary for training a model,
 *  expressed in milli node hours (i.e. 1,000 value in this field means 1 node
 *  hour). A node hour represents the time a virtual machine spends running your
 *  training job. The cost of one node running for one hour is a node hour.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trainCostMilliNodeHour;

@end


/**
 *  The vision model error analysis configuration. Next tag: 3
 */
@interface GTLRCloudNaturalLanguage_XPSVisionErrorAnalysisConfig : GTLRObject

/**
 *  The number of query examples in error analysis.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exampleCount;

/**
 *  The query type used in retrieval. The enum values are frozen in the
 *  foreseeable future.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisionErrorAnalysisConfig_QueryType_QueryTypeAllSimilar
 *        Query similar samples across all classes in the dataset. (Value:
 *        "QUERY_TYPE_ALL_SIMILAR")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisionErrorAnalysisConfig_QueryType_QueryTypeSameClassDissimilar
 *        Query dissimilar samples from the same class of the input sample.
 *        (Value: "QUERY_TYPE_SAME_CLASS_DISSIMILAR")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisionErrorAnalysisConfig_QueryType_QueryTypeSameClassSimilar
 *        Query similar samples from the same class of the input sample. (Value:
 *        "QUERY_TYPE_SAME_CLASS_SIMILAR")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisionErrorAnalysisConfig_QueryType_QueryTypeUnspecified
 *        Unspecified query type for model error analysis. (Value:
 *        "QUERY_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *queryType;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSVisionTrainingOperationMetadata
 */
GTLR_DEPRECATED
@interface GTLRCloudNaturalLanguage_XPSVisionTrainingOperationMetadata : GTLRObject

/**
 *  Aggregated infra usage within certain time period, for billing report
 *  purpose if XAI is enable in training request.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_InfraUsage *explanationUsage;

@end


/**
 *  Visualization configurations for image explanation.
 */
GTLR_DEPRECATED
@interface GTLRCloudNaturalLanguage_XPSVisualization : GTLRObject

/**
 *  Excludes attributions below the specified percentile, from the highlighted
 *  areas. Defaults to 62.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *clipPercentLowerbound;

/**
 *  Excludes attributions above the specified percentile from the highlighted
 *  areas. Using the clip_percent_upperbound and clip_percent_lowerbound
 *  together can be useful for filtering out noise and making it easier to see
 *  areas of strong attribution. Defaults to 99.9.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *clipPercentUpperbound;

/**
 *  The color scheme used for the highlighted areas. Defaults to PINK_GREEN for
 *  Integrated Gradients attribution, which shows positive attributions in green
 *  and negative in pink. Defaults to VIRIDIS for XRAI attribution, which
 *  highlights the most influential regions in yellow and the least influential
 *  in blue.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_ColorMap_ColorMapUnspecified
 *        Should not be used. (Value: "COLOR_MAP_UNSPECIFIED")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_ColorMap_Green
 *        Positive: green. Negative: green. (Value: "GREEN")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_ColorMap_PinkGreen
 *        Positive: green. Negative: pink. (Value: "PINK_GREEN")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_ColorMap_PinkWhiteGreen
 *        PiYG palette. (Value: "PINK_WHITE_GREEN")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_ColorMap_Red Positive:
 *        red. Negative: red. (Value: "RED")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_ColorMap_RedGreen
 *        Positive: green. Negative: red. (Value: "RED_GREEN")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_ColorMap_Viridis
 *        Viridis color map: A perceptually uniform color mapping which is
 *        easier to see by those with colorblindness and progresses from yellow
 *        to green to blue. Positive: yellow. Negative: blue. (Value: "VIRIDIS")
 */
@property(nonatomic, copy, nullable) NSString *colorMap;

/**
 *  How the original image is displayed in the visualization. Adjusting the
 *  overlay can help increase visual clarity if the original image makes it
 *  difficult to view the visualization. Defaults to NONE.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_OverlayType_Grayscale
 *        The attributions are shown on top of grayscaled version of the
 *        original image. (Value: "GRAYSCALE")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_OverlayType_MaskBlack
 *        The attributions are used as a mask to reveal predictive parts of the
 *        image and hide the un-predictive parts. (Value: "MASK_BLACK")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_OverlayType_None No
 *        overlay. (Value: "NONE")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_OverlayType_Original
 *        The attributions are shown on top of the original image. (Value:
 *        "ORIGINAL")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_OverlayType_OverlayTypeUnspecified
 *        Default value. This is the same as NONE. (Value:
 *        "OVERLAY_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *overlayType;

/**
 *  Whether to only highlight pixels with positive contributions, negative or
 *  both. Defaults to POSITIVE.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_Polarity_Both Shows
 *        both positive and negative attributions. (Value: "BOTH")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_Polarity_Negative
 *        Setting polarity to negative highlights areas that does not lead to
 *        the models's current prediction. (Value: "NEGATIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_Polarity_PolarityUnspecified
 *        Default value. This is the same as POSITIVE. (Value:
 *        "POLARITY_UNSPECIFIED")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_Polarity_Positive
 *        Highlights the pixels/outlines that were most influential to the
 *        model's prediction. (Value: "POSITIVE")
 */
@property(nonatomic, copy, nullable) NSString *polarity;

/**
 *  Type of the image visualization. Only applicable to Integrated Gradients
 *  attribution. OUTLINES shows regions of attribution, while PIXELS shows
 *  per-pixel attribution. Defaults to OUTLINES.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_Type_Outlines Shows
 *        which region contributed to the image prediction by outlining the
 *        region. (Value: "OUTLINES")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_Type_Pixels Shows which
 *        pixel contributed to the image prediction. (Value: "PIXELS")
 *    @arg @c kGTLRCloudNaturalLanguage_XPSVisualization_Type_TypeUnspecified
 *        Should not be used. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRCloudNaturalLanguage_XPSXpsOperationMetadata
 */
@interface GTLRCloudNaturalLanguage_XPSXpsOperationMetadata : GTLRObject

/**
 *  Optional. XPS server can opt to provide example count of the long running
 *  operation (e.g. training, data importing, batch prediction).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exampleCount;

/**
 *  Metrics for the operation. By the time the operation is terminated (whether
 *  succeeded or failed) as returned from XPS, AutoML BE assumes the metrics are
 *  finalized. AutoML BE transparently posts the metrics to Chemist if it's not
 *  empty, regardless of the response content or error type. If user is supposed
 *  to be charged in case of cancellation/error, this field should be set. In
 *  the case where the type of LRO doesn't require any billing, this field
 *  should be left unset.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSReportingMetrics *reportingMetrics;

@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSTablesTrainingOperationMetadata *tablesTrainingOperationMetadata;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSVideoBatchPredictOperationMetadata *videoBatchPredictOperationMetadata;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSVideoTrainingOperationMetadata *videoTrainingOperationMetadata;
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_XPSVisionTrainingOperationMetadata *visionTrainingOperationMetadata;

@end


/**
 *  An explanation method that redistributes Integrated Gradients attributions
 *  to segmented regions, taking advantage of the model's fully differentiable
 *  structure. Refer to this paper for more details:
 *  https://arxiv.org/abs/1906.02825 Only supports image Models (modality is
 *  IMAGE).
 */
GTLR_DEPRECATED
@interface GTLRCloudNaturalLanguage_XPSXraiAttribution : GTLRObject

/**
 *  The number of steps for approximating the path integral. A good value to
 *  start is 50 and gradually increase until the sum to diff property is met
 *  within the desired error range. Valid range of its value is [1, 100],
 *  inclusively.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *stepCount;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
