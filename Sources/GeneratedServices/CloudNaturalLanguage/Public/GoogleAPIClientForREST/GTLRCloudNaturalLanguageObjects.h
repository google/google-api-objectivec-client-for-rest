// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Natural Language API (language/v1)
// Description:
//   Provides natural language understanding technologies, such as sentiment
//   analysis, entity recognition, entity sentiment analysis, and other text
//   annotations, to developers.
// Documentation:
//   https://cloud.google.com/natural-language/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudNaturalLanguage_ClassificationCategory;
@class GTLRCloudNaturalLanguage_ClassificationModelOptions;
@class GTLRCloudNaturalLanguage_DependencyEdge;
@class GTLRCloudNaturalLanguage_Document;
@class GTLRCloudNaturalLanguage_Entity;
@class GTLRCloudNaturalLanguage_Entity_Metadata;
@class GTLRCloudNaturalLanguage_EntityMention;
@class GTLRCloudNaturalLanguage_Features;
@class GTLRCloudNaturalLanguage_PartOfSpeech;
@class GTLRCloudNaturalLanguage_Sentence;
@class GTLRCloudNaturalLanguage_Sentiment;
@class GTLRCloudNaturalLanguage_Status_Details_Item;
@class GTLRCloudNaturalLanguage_TextSpan;
@class GTLRCloudNaturalLanguage_Token;
@class GTLRCloudNaturalLanguage_V1Model;
@class GTLRCloudNaturalLanguage_V2Model;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_AnalyzeEntitiesRequest.encodingType

/**
 *  If `EncodingType` is not specified, encoding-dependent information (such as
 *  `begin_offset`) will be set at `-1`.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_None;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-16 encoding of the input. Java and JavaScript are examples of
 *  languages that use this encoding natively.
 *
 *  Value: "UTF16"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf16;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-32 encoding of the input. Python is an example of a language that
 *  uses this encoding natively.
 *
 *  Value: "UTF32"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf32;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-8 encoding of the input. C++ and Go are examples of languages
 *  that use this encoding natively.
 *
 *  Value: "UTF8"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf8;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_AnalyzeEntitySentimentRequest.encodingType

/**
 *  If `EncodingType` is not specified, encoding-dependent information (such as
 *  `begin_offset`) will be set at `-1`.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeEntitySentimentRequest_EncodingType_None;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-16 encoding of the input. Java and JavaScript are examples of
 *  languages that use this encoding natively.
 *
 *  Value: "UTF16"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeEntitySentimentRequest_EncodingType_Utf16;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-32 encoding of the input. Python is an example of a language that
 *  uses this encoding natively.
 *
 *  Value: "UTF32"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeEntitySentimentRequest_EncodingType_Utf32;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-8 encoding of the input. C++ and Go are examples of languages
 *  that use this encoding natively.
 *
 *  Value: "UTF8"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeEntitySentimentRequest_EncodingType_Utf8;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_AnalyzeSentimentRequest.encodingType

/**
 *  If `EncodingType` is not specified, encoding-dependent information (such as
 *  `begin_offset`) will be set at `-1`.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_None;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-16 encoding of the input. Java and JavaScript are examples of
 *  languages that use this encoding natively.
 *
 *  Value: "UTF16"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf16;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-32 encoding of the input. Python is an example of a language that
 *  uses this encoding natively.
 *
 *  Value: "UTF32"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf32;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-8 encoding of the input. C++ and Go are examples of languages
 *  that use this encoding natively.
 *
 *  Value: "UTF8"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf8;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_AnalyzeSyntaxRequest.encodingType

/**
 *  If `EncodingType` is not specified, encoding-dependent information (such as
 *  `begin_offset`) will be set at `-1`.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeSyntaxRequest_EncodingType_None;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-16 encoding of the input. Java and JavaScript are examples of
 *  languages that use this encoding natively.
 *
 *  Value: "UTF16"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeSyntaxRequest_EncodingType_Utf16;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-32 encoding of the input. Python is an example of a language that
 *  uses this encoding natively.
 *
 *  Value: "UTF32"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeSyntaxRequest_EncodingType_Utf32;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-8 encoding of the input. C++ and Go are examples of languages
 *  that use this encoding natively.
 *
 *  Value: "UTF8"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnalyzeSyntaxRequest_EncodingType_Utf8;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_AnnotateTextRequest.encodingType

/**
 *  If `EncodingType` is not specified, encoding-dependent information (such as
 *  `begin_offset`) will be set at `-1`.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_None;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-16 encoding of the input. Java and JavaScript are examples of
 *  languages that use this encoding natively.
 *
 *  Value: "UTF16"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf16;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-32 encoding of the input. Python is an example of a language that
 *  uses this encoding natively.
 *
 *  Value: "UTF32"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf32;
/**
 *  Encoding-dependent information (such as `begin_offset`) is calculated based
 *  on the UTF-8 encoding of the input. C++ and Go are examples of languages
 *  that use this encoding natively.
 *
 *  Value: "UTF8"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf8;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_DependencyEdge.label

/**
 *  Abbreviation modifier
 *
 *  Value: "ABBREV"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Abbrev;
/**
 *  Adjectival complement
 *
 *  Value: "ACOMP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Acomp;
/**
 *  Adverbial clause modifier
 *
 *  Value: "ADVCL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Advcl;
/**
 *  Adverbial modifier
 *
 *  Value: "ADVMOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Advmod;
/**
 *  Adverbial phrase modifier
 *
 *  Value: "ADVPHMOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Advphmod;
/**
 *  Adjectival modifier of an NP
 *
 *  Value: "AMOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Amod;
/**
 *  Appositional modifier of an NP
 *
 *  Value: "APPOS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Appos;
/**
 *  Aspect marker
 *
 *  Value: "ASP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Asp;
/**
 *  Attribute dependent of a copular verb
 *
 *  Value: "ATTR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Attr;
/**
 *  Auxiliary (non-main) verb
 *
 *  Value: "AUX"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Aux;
/**
 *  Causative auxiliary
 *
 *  Value: "AUXCAUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Auxcaus;
/**
 *  Passive auxiliary
 *
 *  Value: "AUXPASS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Auxpass;
/**
 *  Helper auxiliary
 *
 *  Value: "AUXVV"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Auxvv;
/**
 *  Coordinating conjunction
 *
 *  Value: "CC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Cc;
/**
 *  Clausal complement of a verb or adjective
 *
 *  Value: "CCOMP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Ccomp;
/**
 *  Conjunct
 *
 *  Value: "CONJ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Conj;
/**
 *  Copula
 *
 *  Value: "COP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Cop;
/**
 *  Clausal subject
 *
 *  Value: "CSUBJ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Csubj;
/**
 *  Clausal passive subject
 *
 *  Value: "CSUBJPASS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Csubjpass;
/**
 *  Dependency (unable to determine)
 *
 *  Value: "DEP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Dep;
/**
 *  Determiner
 *
 *  Value: "DET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Det;
/**
 *  Discourse
 *
 *  Value: "DISCOURSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Discourse;
/**
 *  Dislocated relation (for fronted/topicalized elements)
 *
 *  Value: "DISLOCATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Dislocated;
/**
 *  Direct object
 *
 *  Value: "DOBJ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Dobj;
/**
 *  Rentaishi (Prenominal modifier)
 *
 *  Value: "DTMOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Dtmod;
/**
 *  Expletive
 *
 *  Value: "EXPL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Expl;
/**
 *  Foreign words
 *
 *  Value: "FOREIGN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Foreign;
/**
 *  Genitive modifier
 *
 *  Value: "GMOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Gmod;
/**
 *  Genitive object
 *
 *  Value: "GOBJ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Gobj;
/**
 *  Goes with (part of a word in a text not well edited)
 *
 *  Value: "GOESWITH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Goeswith;
/**
 *  Infinitival modifier
 *
 *  Value: "INFMOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Infmod;
/**
 *  Indirect object
 *
 *  Value: "IOBJ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Iobj;
/**
 *  Keyword
 *
 *  Value: "KW"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Kw;
/**
 *  List for chains of comparable items
 *
 *  Value: "LIST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_List;
/**
 *  Marker (word introducing a subordinate clause)
 *
 *  Value: "MARK"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Mark;
/**
 *  Measure
 *
 *  Value: "MES"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Mes;
/**
 *  Multi-word expression
 *
 *  Value: "MWE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Mwe;
/**
 *  Multi-word verbal expression
 *
 *  Value: "MWV"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Mwv;
/**
 *  Nominal complement of a noun
 *
 *  Value: "NCOMP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Ncomp;
/**
 *  Negation modifier
 *
 *  Value: "NEG"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Neg;
/**
 *  Noun compound modifier
 *
 *  Value: "NN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Nn;
/**
 *  Nominalized clause
 *
 *  Value: "NOMC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Nomc;
/**
 *  Nominalized clausal subject
 *
 *  Value: "NOMCSUBJ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Nomcsubj;
/**
 *  Nominalized clausal passive
 *
 *  Value: "NOMCSUBJPASS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Nomcsubjpass;
/**
 *  Noun phrase used as an adverbial modifier
 *
 *  Value: "NPADVMOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Npadvmod;
/**
 *  Nominal subject
 *
 *  Value: "NSUBJ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Nsubj;
/**
 *  Passive nominal subject
 *
 *  Value: "NSUBJPASS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Nsubjpass;
/**
 *  Numeric modifier of a noun
 *
 *  Value: "NUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Num;
/**
 *  Element of compound number
 *
 *  Value: "NUMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Number;
/**
 *  Compound of numeric modifier
 *
 *  Value: "NUMC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Numc;
/**
 *  Punctuation mark
 *
 *  Value: "P"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_P;
/**
 *  Parataxis relation
 *
 *  Value: "PARATAXIS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Parataxis;
/**
 *  Participial modifier
 *
 *  Value: "PARTMOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Partmod;
/**
 *  The complement of a preposition is a clause
 *
 *  Value: "PCOMP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Pcomp;
/**
 *  Object of a preposition
 *
 *  Value: "POBJ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Pobj;
/**
 *  Possession modifier
 *
 *  Value: "POSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Poss;
/**
 *  Postverbal negative particle
 *
 *  Value: "POSTNEG"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Postneg;
/**
 *  Predicate complement
 *
 *  Value: "PRECOMP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Precomp;
/**
 *  Preconjunt
 *
 *  Value: "PRECONJ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Preconj;
/**
 *  Predeterminer
 *
 *  Value: "PREDET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Predet;
/**
 *  Prefix
 *
 *  Value: "PREF"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Pref;
/**
 *  Prepositional modifier
 *
 *  Value: "PREP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Prep;
/**
 *  The relationship between a verb and verbal morpheme
 *
 *  Value: "PRONL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Pronl;
/**
 *  Particle
 *
 *  Value: "PRT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Prt;
/**
 *  Associative or possessive marker
 *
 *  Value: "PS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Ps;
/**
 *  Quantifier phrase modifier
 *
 *  Value: "QUANTMOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Quantmod;
/**
 *  Relative clause modifier
 *
 *  Value: "RCMOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Rcmod;
/**
 *  Complementizer in relative clause
 *
 *  Value: "RCMODREL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Rcmodrel;
/**
 *  Ellipsis without a preceding predicate
 *
 *  Value: "RDROP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Rdrop;
/**
 *  Referent
 *
 *  Value: "REF"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Ref;
/**
 *  Remnant
 *
 *  Value: "REMNANT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Remnant;
/**
 *  Reparandum
 *
 *  Value: "REPARANDUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Reparandum;
/**
 *  Root
 *
 *  Value: "ROOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Root;
/**
 *  Suffix specifying a unit of number
 *
 *  Value: "SNUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Snum;
/**
 *  Suffix
 *
 *  Value: "SUFF"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Suff;
/**
 *  Name suffix
 *
 *  Value: "SUFFIX"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Suffix;
/**
 *  Name title
 *
 *  Value: "TITLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Title;
/**
 *  Temporal modifier
 *
 *  Value: "TMOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Tmod;
/**
 *  Topic marker
 *
 *  Value: "TOPIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Topic;
/**
 *  Unknown
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Unknown;
/**
 *  Clause headed by an infinite form of the verb that modifies a noun
 *
 *  Value: "VMOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Vmod;
/**
 *  Vocative
 *
 *  Value: "VOCATIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Vocative;
/**
 *  Open clausal complement
 *
 *  Value: "XCOMP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_DependencyEdge_Label_Xcomp;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_Document.type

/**
 *  HTML
 *
 *  Value: "HTML"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Document_Type_Html;
/**
 *  Plain text
 *
 *  Value: "PLAIN_TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Document_Type_PlainText;
/**
 *  The content type is not specified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Document_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_Entity.type

/**
 *  Address The metadata identifies the street number and locality plus
 *  whichever additional elements appear in the text: * `street_number` - street
 *  number * `locality` - city or town * `street_name` - street/route name, if
 *  detected * `postal_code` - postal code, if detected * `country` - country,
 *  if detected< * `broad_region` - administrative area, such as the state, if
 *  detected * `narrow_region` - smaller administrative area, such as county, if
 *  detected * `sublocality` - used in Asian addresses to demark a district
 *  within a city, if detected
 *
 *  Value: "ADDRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Address;
/**
 *  Consumer product
 *
 *  Value: "CONSUMER_GOOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_ConsumerGood;
/**
 *  Date The metadata identifies the components of the date: * `year` - four
 *  digit year, if detected * `month` - two digit month number, if detected *
 *  `day` - two digit day number, if detected
 *
 *  Value: "DATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Date;
/**
 *  Event
 *
 *  Value: "EVENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Event;
/**
 *  Location
 *
 *  Value: "LOCATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Location;
/**
 *  Number The metadata is the number itself.
 *
 *  Value: "NUMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Number;
/**
 *  Organization
 *
 *  Value: "ORGANIZATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Organization;
/**
 *  Other types of entities
 *
 *  Value: "OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Other;
/**
 *  Person
 *
 *  Value: "PERSON"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Person;
/**
 *  Phone number The metadata lists the phone number, formatted according to
 *  local convention, plus whichever additional elements appear in the text: *
 *  `number` - the actual number, broken down into sections as per local
 *  convention * `national_prefix` - country code, if detected * `area_code` -
 *  region or area code, if detected * `extension` - phone extension (to be
 *  dialed after connection), if detected
 *
 *  Value: "PHONE_NUMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_PhoneNumber;
/**
 *  Price The metadata identifies the `value` and `currency`.
 *
 *  Value: "PRICE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Price;
/**
 *  Unknown
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_Unknown;
/**
 *  Artwork
 *
 *  Value: "WORK_OF_ART"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_Entity_Type_WorkOfArt;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_EntityMention.type

/**
 *  Common noun (or noun compound)
 *
 *  Value: "COMMON"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_EntityMention_Type_Common;
/**
 *  Proper name
 *
 *  Value: "PROPER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_EntityMention_Type_Proper;
/**
 *  Unknown
 *
 *  Value: "TYPE_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_EntityMention_Type_TypeUnknown;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_PartOfSpeech.aspect

/**
 *  Aspect is not applicable in the analyzed language or is not predicted.
 *
 *  Value: "ASPECT_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Aspect_AspectUnknown;
/**
 *  Imperfective
 *
 *  Value: "IMPERFECTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Aspect_Imperfective;
/**
 *  Perfective
 *
 *  Value: "PERFECTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Aspect_Perfective;
/**
 *  Progressive
 *
 *  Value: "PROGRESSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Aspect_Progressive;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_PartOfSpeech.caseProperty

/**
 *  Accusative
 *
 *  Value: "ACCUSATIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Accusative;
/**
 *  Adverbial
 *
 *  Value: "ADVERBIAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Adverbial;
/**
 *  Case is not applicable in the analyzed language or is not predicted.
 *
 *  Value: "CASE_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_CaseUnknown;
/**
 *  Complementive
 *
 *  Value: "COMPLEMENTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Complementive;
/**
 *  Dative
 *
 *  Value: "DATIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Dative;
/**
 *  Genitive
 *
 *  Value: "GENITIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Genitive;
/**
 *  Instrumental
 *
 *  Value: "INSTRUMENTAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Instrumental;
/**
 *  Locative
 *
 *  Value: "LOCATIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Locative;
/**
 *  Nominative
 *
 *  Value: "NOMINATIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Nominative;
/**
 *  Oblique
 *
 *  Value: "OBLIQUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Oblique;
/**
 *  Partitive
 *
 *  Value: "PARTITIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Partitive;
/**
 *  Prepositional
 *
 *  Value: "PREPOSITIONAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Prepositional;
/**
 *  Reflexive
 *
 *  Value: "REFLEXIVE_CASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_ReflexiveCase;
/**
 *  Relative
 *
 *  Value: "RELATIVE_CASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_RelativeCase;
/**
 *  Vocative
 *
 *  Value: "VOCATIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Vocative;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_PartOfSpeech.form

/**
 *  Adnomial
 *
 *  Value: "ADNOMIAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Adnomial;
/**
 *  Auxiliary
 *
 *  Value: "AUXILIARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Auxiliary;
/**
 *  Complementizer
 *
 *  Value: "COMPLEMENTIZER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Complementizer;
/**
 *  Final ending
 *
 *  Value: "FINAL_ENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Form_FinalEnding;
/**
 *  Form is not applicable in the analyzed language or is not predicted.
 *
 *  Value: "FORM_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Form_FormUnknown;
/**
 *  Gerund
 *
 *  Value: "GERUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Gerund;
/**
 *  Irrealis
 *
 *  Value: "IRREALIS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Irrealis;
/**
 *  Long form
 *
 *  Value: "LONG"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Long;
/**
 *  Order form
 *
 *  Value: "ORDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Order;
/**
 *  Realis
 *
 *  Value: "REALIS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Realis;
/**
 *  Short form
 *
 *  Value: "SHORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Short;
/**
 *  Specific form
 *
 *  Value: "SPECIFIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Specific;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_PartOfSpeech.gender

/**
 *  Feminine
 *
 *  Value: "FEMININE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Gender_Feminine;
/**
 *  Gender is not applicable in the analyzed language or is not predicted.
 *
 *  Value: "GENDER_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Gender_GenderUnknown;
/**
 *  Masculine
 *
 *  Value: "MASCULINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Gender_Masculine;
/**
 *  Neuter
 *
 *  Value: "NEUTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Gender_Neuter;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_PartOfSpeech.mood

/**
 *  Conditional
 *
 *  Value: "CONDITIONAL_MOOD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Mood_ConditionalMood;
/**
 *  Imperative
 *
 *  Value: "IMPERATIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Mood_Imperative;
/**
 *  Indicative
 *
 *  Value: "INDICATIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Mood_Indicative;
/**
 *  Interrogative
 *
 *  Value: "INTERROGATIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Mood_Interrogative;
/**
 *  Jussive
 *
 *  Value: "JUSSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Mood_Jussive;
/**
 *  Mood is not applicable in the analyzed language or is not predicted.
 *
 *  Value: "MOOD_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Mood_MoodUnknown;
/**
 *  Subjunctive
 *
 *  Value: "SUBJUNCTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Mood_Subjunctive;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_PartOfSpeech.number

/**
 *  Dual
 *
 *  Value: "DUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Number_Dual;
/**
 *  Number is not applicable in the analyzed language or is not predicted.
 *
 *  Value: "NUMBER_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Number_NumberUnknown;
/**
 *  Plural
 *
 *  Value: "PLURAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Number_Plural;
/**
 *  Singular
 *
 *  Value: "SINGULAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Number_Singular;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_PartOfSpeech.person

/**
 *  First
 *
 *  Value: "FIRST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Person_First;
/**
 *  Person is not applicable in the analyzed language or is not predicted.
 *
 *  Value: "PERSON_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Person_PersonUnknown;
/**
 *  Reflexive
 *
 *  Value: "REFLEXIVE_PERSON"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Person_ReflexivePerson;
/**
 *  Second
 *
 *  Value: "SECOND"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Person_Second;
/**
 *  Third
 *
 *  Value: "THIRD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Person_Third;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_PartOfSpeech.proper

/**
 *  Not proper
 *
 *  Value: "NOT_PROPER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Proper_NotProper;
/**
 *  Proper
 *
 *  Value: "PROPER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Proper_Proper;
/**
 *  Proper is not applicable in the analyzed language or is not predicted.
 *
 *  Value: "PROPER_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Proper_ProperUnknown;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_PartOfSpeech.reciprocity

/**
 *  Non-reciprocal
 *
 *  Value: "NON_RECIPROCAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Reciprocity_NonReciprocal;
/**
 *  Reciprocal
 *
 *  Value: "RECIPROCAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Reciprocity_Reciprocal;
/**
 *  Reciprocity is not applicable in the analyzed language or is not predicted.
 *
 *  Value: "RECIPROCITY_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Reciprocity_ReciprocityUnknown;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_PartOfSpeech.tag

/**
 *  Adjective
 *
 *  Value: "ADJ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Adj;
/**
 *  Adposition (preposition and postposition)
 *
 *  Value: "ADP"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Adp;
/**
 *  Adverb
 *
 *  Value: "ADV"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Adv;
/**
 *  Affix
 *
 *  Value: "AFFIX"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Affix;
/**
 *  Conjunction
 *
 *  Value: "CONJ"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Conj;
/**
 *  Determiner
 *
 *  Value: "DET"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Det;
/**
 *  Noun (common and proper)
 *
 *  Value: "NOUN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Noun;
/**
 *  Cardinal number
 *
 *  Value: "NUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Num;
/**
 *  Pronoun
 *
 *  Value: "PRON"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Pron;
/**
 *  Particle or other function word
 *
 *  Value: "PRT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Prt;
/**
 *  Punctuation
 *
 *  Value: "PUNCT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Punct;
/**
 *  Unknown
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Unknown;
/**
 *  Verb (all tenses and modes)
 *
 *  Value: "VERB"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Verb;
/**
 *  Other: foreign words, typos, abbreviations
 *
 *  Value: "X"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_X;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_PartOfSpeech.tense

/**
 *  Conditional
 *
 *  Value: "CONDITIONAL_TENSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tense_ConditionalTense;
/**
 *  Future
 *
 *  Value: "FUTURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tense_Future;
/**
 *  Imperfect
 *
 *  Value: "IMPERFECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tense_Imperfect;
/**
 *  Past
 *
 *  Value: "PAST"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tense_Past;
/**
 *  Pluperfect
 *
 *  Value: "PLUPERFECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tense_Pluperfect;
/**
 *  Present
 *
 *  Value: "PRESENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tense_Present;
/**
 *  Tense is not applicable in the analyzed language or is not predicted.
 *
 *  Value: "TENSE_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Tense_TenseUnknown;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_PartOfSpeech.voice

/**
 *  Active
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Voice_Active;
/**
 *  Causative
 *
 *  Value: "CAUSATIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Voice_Causative;
/**
 *  Passive
 *
 *  Value: "PASSIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Voice_Passive;
/**
 *  Voice is not applicable in the analyzed language or is not predicted.
 *
 *  Value: "VOICE_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_PartOfSpeech_Voice_VoiceUnknown;

// ----------------------------------------------------------------------------
// GTLRCloudNaturalLanguage_V2Model.contentCategoriesVersion

/**
 *  If `ContentCategoriesVersion` is not specified, this option will default to
 *  `V1`.
 *
 *  Value: "CONTENT_CATEGORIES_VERSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_V2Model_ContentCategoriesVersion_ContentCategoriesVersionUnspecified;
/**
 *  Legacy content categories of our initial launch in 2017.
 *
 *  Value: "V1"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_V2Model_ContentCategoriesVersion_V1;
/**
 *  Updated content categories in 2022.
 *
 *  Value: "V2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudNaturalLanguage_V2Model_ContentCategoriesVersion_V2;

/**
 *  The entity analysis request message.
 */
@interface GTLRCloudNaturalLanguage_AnalyzeEntitiesRequest : GTLRObject

/** Required. Input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Document *document;

/**
 *  The encoding type used by the API to calculate offsets.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_None
 *        If `EncodingType` is not specified, encoding-dependent information
 *        (such as `begin_offset`) will be set at `-1`. (Value: "NONE")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf16
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-16 encoding of the input. Java and JavaScript are
 *        examples of languages that use this encoding natively. (Value:
 *        "UTF16")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf32
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-32 encoding of the input. Python is an example of a
 *        language that uses this encoding natively. (Value: "UTF32")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeEntitiesRequest_EncodingType_Utf8
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-8 encoding of the input. C++ and Go are examples of
 *        languages that use this encoding natively. (Value: "UTF8")
 */
@property(nonatomic, copy, nullable) NSString *encodingType;

@end


/**
 *  The entity analysis response message.
 */
@interface GTLRCloudNaturalLanguage_AnalyzeEntitiesResponse : GTLRObject

/** The recognized entities in the input document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Entity *> *entities;

/**
 *  The language of the text, which will be the same as the language specified
 *  in the request or, if not specified, the automatically-detected language.
 *  See Document.language field for more details.
 */
@property(nonatomic, copy, nullable) NSString *language;

@end


/**
 *  The entity-level sentiment analysis request message.
 */
@interface GTLRCloudNaturalLanguage_AnalyzeEntitySentimentRequest : GTLRObject

/** Required. Input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Document *document;

/**
 *  The encoding type used by the API to calculate offsets.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeEntitySentimentRequest_EncodingType_None
 *        If `EncodingType` is not specified, encoding-dependent information
 *        (such as `begin_offset`) will be set at `-1`. (Value: "NONE")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeEntitySentimentRequest_EncodingType_Utf16
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-16 encoding of the input. Java and JavaScript are
 *        examples of languages that use this encoding natively. (Value:
 *        "UTF16")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeEntitySentimentRequest_EncodingType_Utf32
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-32 encoding of the input. Python is an example of a
 *        language that uses this encoding natively. (Value: "UTF32")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeEntitySentimentRequest_EncodingType_Utf8
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-8 encoding of the input. C++ and Go are examples of
 *        languages that use this encoding natively. (Value: "UTF8")
 */
@property(nonatomic, copy, nullable) NSString *encodingType;

@end


/**
 *  The entity-level sentiment analysis response message.
 */
@interface GTLRCloudNaturalLanguage_AnalyzeEntitySentimentResponse : GTLRObject

/**
 *  The recognized entities in the input document with associated sentiments.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Entity *> *entities;

/**
 *  The language of the text, which will be the same as the language specified
 *  in the request or, if not specified, the automatically-detected language.
 *  See Document.language field for more details.
 */
@property(nonatomic, copy, nullable) NSString *language;

@end


/**
 *  The sentiment analysis request message.
 */
@interface GTLRCloudNaturalLanguage_AnalyzeSentimentRequest : GTLRObject

/** Required. Input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Document *document;

/**
 *  The encoding type used by the API to calculate sentence offsets.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_None
 *        If `EncodingType` is not specified, encoding-dependent information
 *        (such as `begin_offset`) will be set at `-1`. (Value: "NONE")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf16
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-16 encoding of the input. Java and JavaScript are
 *        examples of languages that use this encoding natively. (Value:
 *        "UTF16")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf32
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-32 encoding of the input. Python is an example of a
 *        language that uses this encoding natively. (Value: "UTF32")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeSentimentRequest_EncodingType_Utf8
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-8 encoding of the input. C++ and Go are examples of
 *        languages that use this encoding natively. (Value: "UTF8")
 */
@property(nonatomic, copy, nullable) NSString *encodingType;

@end


/**
 *  The sentiment analysis response message.
 */
@interface GTLRCloudNaturalLanguage_AnalyzeSentimentResponse : GTLRObject

/** The overall sentiment of the input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Sentiment *documentSentiment;

/**
 *  The language of the text, which will be the same as the language specified
 *  in the request or, if not specified, the automatically-detected language.
 *  See Document.language field for more details.
 */
@property(nonatomic, copy, nullable) NSString *language;

/** The sentiment for all the sentences in the document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Sentence *> *sentences;

@end


/**
 *  The syntax analysis request message.
 */
@interface GTLRCloudNaturalLanguage_AnalyzeSyntaxRequest : GTLRObject

/** Required. Input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Document *document;

/**
 *  The encoding type used by the API to calculate offsets.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeSyntaxRequest_EncodingType_None
 *        If `EncodingType` is not specified, encoding-dependent information
 *        (such as `begin_offset`) will be set at `-1`. (Value: "NONE")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeSyntaxRequest_EncodingType_Utf16
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-16 encoding of the input. Java and JavaScript are
 *        examples of languages that use this encoding natively. (Value:
 *        "UTF16")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeSyntaxRequest_EncodingType_Utf32
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-32 encoding of the input. Python is an example of a
 *        language that uses this encoding natively. (Value: "UTF32")
 *    @arg @c kGTLRCloudNaturalLanguage_AnalyzeSyntaxRequest_EncodingType_Utf8
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-8 encoding of the input. C++ and Go are examples of
 *        languages that use this encoding natively. (Value: "UTF8")
 */
@property(nonatomic, copy, nullable) NSString *encodingType;

@end


/**
 *  The syntax analysis response message.
 */
@interface GTLRCloudNaturalLanguage_AnalyzeSyntaxResponse : GTLRObject

/**
 *  The language of the text, which will be the same as the language specified
 *  in the request or, if not specified, the automatically-detected language.
 *  See Document.language field for more details.
 */
@property(nonatomic, copy, nullable) NSString *language;

/** Sentences in the input document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Sentence *> *sentences;

/** Tokens, along with their syntactic information, in the input document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Token *> *tokens;

@end


/**
 *  The request message for the text annotation API, which can perform multiple
 *  analysis types (sentiment, entities, and syntax) in one call.
 */
@interface GTLRCloudNaturalLanguage_AnnotateTextRequest : GTLRObject

/** Required. Input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Document *document;

/**
 *  The encoding type used by the API to calculate offsets.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_None If
 *        `EncodingType` is not specified, encoding-dependent information (such
 *        as `begin_offset`) will be set at `-1`. (Value: "NONE")
 *    @arg @c kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf16
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-16 encoding of the input. Java and JavaScript are
 *        examples of languages that use this encoding natively. (Value:
 *        "UTF16")
 *    @arg @c kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf32
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-32 encoding of the input. Python is an example of a
 *        language that uses this encoding natively. (Value: "UTF32")
 *    @arg @c kGTLRCloudNaturalLanguage_AnnotateTextRequest_EncodingType_Utf8
 *        Encoding-dependent information (such as `begin_offset`) is calculated
 *        based on the UTF-8 encoding of the input. C++ and Go are examples of
 *        languages that use this encoding natively. (Value: "UTF8")
 */
@property(nonatomic, copy, nullable) NSString *encodingType;

/** Required. The enabled features. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Features *features;

@end


/**
 *  The text annotations response message.
 */
@interface GTLRCloudNaturalLanguage_AnnotateTextResponse : GTLRObject

/** Categories identified in the input document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_ClassificationCategory *> *categories;

/**
 *  The overall sentiment for the document. Populated if the user enables
 *  AnnotateTextRequest.Features.extract_document_sentiment.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Sentiment *documentSentiment;

/**
 *  Entities, along with their semantic information, in the input document.
 *  Populated if the user enables AnnotateTextRequest.Features.extract_entities.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Entity *> *entities;

/**
 *  The language of the text, which will be the same as the language specified
 *  in the request or, if not specified, the automatically-detected language.
 *  See Document.language field for more details.
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Sentences in the input document. Populated if the user enables
 *  AnnotateTextRequest.Features.extract_syntax.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Sentence *> *sentences;

/**
 *  Tokens, along with their syntactic information, in the input document.
 *  Populated if the user enables AnnotateTextRequest.Features.extract_syntax.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Token *> *tokens;

@end


/**
 *  Represents a category returned from the text classifier.
 */
@interface GTLRCloudNaturalLanguage_ClassificationCategory : GTLRObject

/**
 *  The classifier's confidence of the category. Number represents how certain
 *  the classifier is that this category represents the given text.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *confidence;

/**
 *  The name of the category representing the document, from the [predefined
 *  taxonomy](https://cloud.google.com/natural-language/docs/categories).
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Model options available for classification requests.
 */
@interface GTLRCloudNaturalLanguage_ClassificationModelOptions : GTLRObject

/**
 *  Setting this field will use the V1 model and V1 content categories version.
 *  The V1 model is a legacy model; support for this will be discontinued in the
 *  future.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_V1Model *v1Model;

/**
 *  Setting this field will use the V2 model with the appropriate content
 *  categories version. The V2 model is a better performing model.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_V2Model *v2Model;

@end


/**
 *  The document classification request message.
 */
@interface GTLRCloudNaturalLanguage_ClassifyTextRequest : GTLRObject

/**
 *  Model options to use for classification. Defaults to v1 options if not
 *  specified.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_ClassificationModelOptions *classificationModelOptions;

/** Required. Input document. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Document *document;

@end


/**
 *  The document classification response message.
 */
@interface GTLRCloudNaturalLanguage_ClassifyTextResponse : GTLRObject

/** Categories representing the input document. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_ClassificationCategory *> *categories;

@end


/**
 *  Represents dependency parse tree information for a token. (For more
 *  information on dependency labels, see
 *  http://www.aclweb.org/anthology/P13-2017
 */
@interface GTLRCloudNaturalLanguage_DependencyEdge : GTLRObject

/**
 *  Represents the head of this token in the dependency tree. This is the index
 *  of the token which has an arc going to this token. The index is the position
 *  of the token in the array of tokens returned by the API method. If this
 *  token is a root token, then the `head_token_index` is its own index.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *headTokenIndex;

/**
 *  The parse label for the token.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Abbrev Abbreviation
 *        modifier (Value: "ABBREV")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Acomp Adjectival
 *        complement (Value: "ACOMP")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Advcl Adverbial
 *        clause modifier (Value: "ADVCL")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Advmod Adverbial
 *        modifier (Value: "ADVMOD")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Advphmod Adverbial
 *        phrase modifier (Value: "ADVPHMOD")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Amod Adjectival
 *        modifier of an NP (Value: "AMOD")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Appos Appositional
 *        modifier of an NP (Value: "APPOS")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Asp Aspect marker
 *        (Value: "ASP")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Attr Attribute
 *        dependent of a copular verb (Value: "ATTR")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Aux Auxiliary
 *        (non-main) verb (Value: "AUX")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Auxcaus Causative
 *        auxiliary (Value: "AUXCAUS")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Auxpass Passive
 *        auxiliary (Value: "AUXPASS")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Auxvv Helper
 *        auxiliary (Value: "AUXVV")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Cc Coordinating
 *        conjunction (Value: "CC")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Ccomp Clausal
 *        complement of a verb or adjective (Value: "CCOMP")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Conj Conjunct
 *        (Value: "CONJ")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Cop Copula (Value:
 *        "COP")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Csubj Clausal
 *        subject (Value: "CSUBJ")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Csubjpass Clausal
 *        passive subject (Value: "CSUBJPASS")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Dep Dependency
 *        (unable to determine) (Value: "DEP")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Det Determiner
 *        (Value: "DET")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Discourse Discourse
 *        (Value: "DISCOURSE")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Dislocated
 *        Dislocated relation (for fronted/topicalized elements) (Value:
 *        "DISLOCATED")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Dobj Direct object
 *        (Value: "DOBJ")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Dtmod Rentaishi
 *        (Prenominal modifier) (Value: "DTMOD")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Expl Expletive
 *        (Value: "EXPL")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Foreign Foreign
 *        words (Value: "FOREIGN")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Gmod Genitive
 *        modifier (Value: "GMOD")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Gobj Genitive
 *        object (Value: "GOBJ")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Goeswith Goes with
 *        (part of a word in a text not well edited) (Value: "GOESWITH")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Infmod Infinitival
 *        modifier (Value: "INFMOD")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Iobj Indirect
 *        object (Value: "IOBJ")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Kw Keyword (Value:
 *        "KW")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_List List for
 *        chains of comparable items (Value: "LIST")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Mark Marker (word
 *        introducing a subordinate clause) (Value: "MARK")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Mes Measure (Value:
 *        "MES")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Mwe Multi-word
 *        expression (Value: "MWE")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Mwv Multi-word
 *        verbal expression (Value: "MWV")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Ncomp Nominal
 *        complement of a noun (Value: "NCOMP")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Neg Negation
 *        modifier (Value: "NEG")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Nn Noun compound
 *        modifier (Value: "NN")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Nomc Nominalized
 *        clause (Value: "NOMC")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Nomcsubj
 *        Nominalized clausal subject (Value: "NOMCSUBJ")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Nomcsubjpass
 *        Nominalized clausal passive (Value: "NOMCSUBJPASS")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Npadvmod Noun
 *        phrase used as an adverbial modifier (Value: "NPADVMOD")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Nsubj Nominal
 *        subject (Value: "NSUBJ")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Nsubjpass Passive
 *        nominal subject (Value: "NSUBJPASS")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Num Numeric
 *        modifier of a noun (Value: "NUM")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Number Element of
 *        compound number (Value: "NUMBER")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Numc Compound of
 *        numeric modifier (Value: "NUMC")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_P Punctuation mark
 *        (Value: "P")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Parataxis Parataxis
 *        relation (Value: "PARATAXIS")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Partmod Participial
 *        modifier (Value: "PARTMOD")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Pcomp The
 *        complement of a preposition is a clause (Value: "PCOMP")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Pobj Object of a
 *        preposition (Value: "POBJ")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Poss Possession
 *        modifier (Value: "POSS")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Postneg Postverbal
 *        negative particle (Value: "POSTNEG")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Precomp Predicate
 *        complement (Value: "PRECOMP")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Preconj Preconjunt
 *        (Value: "PRECONJ")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Predet
 *        Predeterminer (Value: "PREDET")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Pref Prefix (Value:
 *        "PREF")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Prep Prepositional
 *        modifier (Value: "PREP")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Pronl The
 *        relationship between a verb and verbal morpheme (Value: "PRONL")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Prt Particle
 *        (Value: "PRT")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Ps Associative or
 *        possessive marker (Value: "PS")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Quantmod Quantifier
 *        phrase modifier (Value: "QUANTMOD")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Rcmod Relative
 *        clause modifier (Value: "RCMOD")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Rcmodrel
 *        Complementizer in relative clause (Value: "RCMODREL")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Rdrop Ellipsis
 *        without a preceding predicate (Value: "RDROP")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Ref Referent
 *        (Value: "REF")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Remnant Remnant
 *        (Value: "REMNANT")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Reparandum
 *        Reparandum (Value: "REPARANDUM")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Root Root (Value:
 *        "ROOT")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Snum Suffix
 *        specifying a unit of number (Value: "SNUM")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Suff Suffix (Value:
 *        "SUFF")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Suffix Name suffix
 *        (Value: "SUFFIX")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Title Name title
 *        (Value: "TITLE")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Tmod Temporal
 *        modifier (Value: "TMOD")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Topic Topic marker
 *        (Value: "TOPIC")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Unknown Unknown
 *        (Value: "UNKNOWN")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Vmod Clause headed
 *        by an infinite form of the verb that modifies a noun (Value: "VMOD")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Vocative Vocative
 *        (Value: "VOCATIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_DependencyEdge_Label_Xcomp Open clausal
 *        complement (Value: "XCOMP")
 */
@property(nonatomic, copy, nullable) NSString *label;

@end


/**
 *  Represents the input to API methods.
 */
@interface GTLRCloudNaturalLanguage_Document : GTLRObject

/**
 *  The content of the input in string format. Cloud audit logging exempt since
 *  it is based on user data.
 */
@property(nonatomic, copy, nullable) NSString *content;

/**
 *  The Google Cloud Storage URI where the file content is located. This URI
 *  must be of the form: gs://bucket_name/object_name. For more details, see
 *  https://cloud.google.com/storage/docs/reference-uris. NOTE: Cloud Storage
 *  object versioning is not supported.
 */
@property(nonatomic, copy, nullable) NSString *gcsContentUri;

/**
 *  The language of the document (if not specified, the language is
 *  automatically detected). Both ISO and BCP-47 language codes are accepted.
 *  [Language Support](https://cloud.google.com/natural-language/docs/languages)
 *  lists currently supported languages for each API method. If the language
 *  (either specified by the caller or automatically detected) is not supported
 *  by the called API method, an `INVALID_ARGUMENT` error is returned.
 */
@property(nonatomic, copy, nullable) NSString *language;

/**
 *  Required. If the type is not set or is `TYPE_UNSPECIFIED`, returns an
 *  `INVALID_ARGUMENT` error.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_Document_Type_Html HTML (Value: "HTML")
 *    @arg @c kGTLRCloudNaturalLanguage_Document_Type_PlainText Plain text
 *        (Value: "PLAIN_TEXT")
 *    @arg @c kGTLRCloudNaturalLanguage_Document_Type_TypeUnspecified The
 *        content type is not specified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents a phrase in the text that is a known entity, such as a person, an
 *  organization, or location. The API associates information, such as salience
 *  and mentions, with entities.
 */
@interface GTLRCloudNaturalLanguage_Entity : GTLRObject

/**
 *  The mentions of this entity in the input document. The API currently
 *  supports proper noun mentions.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_EntityMention *> *mentions;

/**
 *  Metadata associated with the entity. For most entity types, the metadata is
 *  a Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`), if they
 *  are available. For the metadata associated with other entity types, see the
 *  Type table below.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Entity_Metadata *metadata;

/** The representative name for the entity. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The salience score associated with the entity in the [0, 1.0] range. The
 *  salience score for an entity provides information about the importance or
 *  centrality of that entity to the entire document text. Scores closer to 0
 *  are less salient, while scores closer to 1.0 are highly salient.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *salience;

/**
 *  For calls to AnalyzeEntitySentiment or if
 *  AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this
 *  field will contain the aggregate sentiment expressed for this entity in the
 *  provided document.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Sentiment *sentiment;

/**
 *  The entity type.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Address Address The metadata
 *        identifies the street number and locality plus whichever additional
 *        elements appear in the text: * `street_number` - street number *
 *        `locality` - city or town * `street_name` - street/route name, if
 *        detected * `postal_code` - postal code, if detected * `country` -
 *        country, if detected< * `broad_region` - administrative area, such as
 *        the state, if detected * `narrow_region` - smaller administrative
 *        area, such as county, if detected * `sublocality` - used in Asian
 *        addresses to demark a district within a city, if detected (Value:
 *        "ADDRESS")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_ConsumerGood Consumer
 *        product (Value: "CONSUMER_GOOD")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Date Date The metadata
 *        identifies the components of the date: * `year` - four digit year, if
 *        detected * `month` - two digit month number, if detected * `day` - two
 *        digit day number, if detected (Value: "DATE")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Event Event (Value: "EVENT")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Location Location (Value:
 *        "LOCATION")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Number Number The metadata
 *        is the number itself. (Value: "NUMBER")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Organization Organization
 *        (Value: "ORGANIZATION")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Other Other types of
 *        entities (Value: "OTHER")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Person Person (Value:
 *        "PERSON")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_PhoneNumber Phone number The
 *        metadata lists the phone number, formatted according to local
 *        convention, plus whichever additional elements appear in the text: *
 *        `number` - the actual number, broken down into sections as per local
 *        convention * `national_prefix` - country code, if detected *
 *        `area_code` - region or area code, if detected * `extension` - phone
 *        extension (to be dialed after connection), if detected (Value:
 *        "PHONE_NUMBER")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Price Price The metadata
 *        identifies the `value` and `currency`. (Value: "PRICE")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_Unknown Unknown (Value:
 *        "UNKNOWN")
 *    @arg @c kGTLRCloudNaturalLanguage_Entity_Type_WorkOfArt Artwork (Value:
 *        "WORK_OF_ART")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Metadata associated with the entity. For most entity types, the metadata is
 *  a Wikipedia URL (`wikipedia_url`) and Knowledge Graph MID (`mid`), if they
 *  are available. For the metadata associated with other entity types, see the
 *  Type table below.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_Entity_Metadata : GTLRObject
@end


/**
 *  Represents a mention for an entity in the text. Currently, proper noun
 *  mentions are supported.
 */
@interface GTLRCloudNaturalLanguage_EntityMention : GTLRObject

/**
 *  For calls to AnalyzeEntitySentiment or if
 *  AnnotateTextRequest.Features.extract_entity_sentiment is set to true, this
 *  field will contain the sentiment expressed for this mention of the entity in
 *  the provided document.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Sentiment *sentiment;

/** The mention text. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_TextSpan *text;

/**
 *  The type of the entity mention.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_EntityMention_Type_Common Common noun
 *        (or noun compound) (Value: "COMMON")
 *    @arg @c kGTLRCloudNaturalLanguage_EntityMention_Type_Proper Proper name
 *        (Value: "PROPER")
 *    @arg @c kGTLRCloudNaturalLanguage_EntityMention_Type_TypeUnknown Unknown
 *        (Value: "TYPE_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  All available features for sentiment, syntax, and semantic analysis. Setting
 *  each one to true will enable that specific analysis for the input.
 */
@interface GTLRCloudNaturalLanguage_Features : GTLRObject

/**
 *  The model options to use for classification. Defaults to v1 options if not
 *  specified. Only used if `classify_text` is set to true.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_ClassificationModelOptions *classificationModelOptions;

/**
 *  Classify the full document into categories.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *classifyText;

/**
 *  Extract document-level sentiment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *extractDocumentSentiment;

/**
 *  Extract entities.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *extractEntities;

/**
 *  Extract entities and their associated sentiment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *extractEntitySentiment;

/**
 *  Extract syntax information.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *extractSyntax;

@end


/**
 *  Represents part of speech information for a token. Parts of speech are as
 *  defined in http://www.lrec-conf.org/proceedings/lrec2012/pdf/274_Paper.pdf
 */
@interface GTLRCloudNaturalLanguage_PartOfSpeech : GTLRObject

/**
 *  The grammatical aspect.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Aspect_AspectUnknown Aspect
 *        is not applicable in the analyzed language or is not predicted.
 *        (Value: "ASPECT_UNKNOWN")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Aspect_Imperfective
 *        Imperfective (Value: "IMPERFECTIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Aspect_Perfective
 *        Perfective (Value: "PERFECTIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Aspect_Progressive
 *        Progressive (Value: "PROGRESSIVE")
 */
@property(nonatomic, copy, nullable) NSString *aspect;

/**
 *  The grammatical case.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Accusative
 *        Accusative (Value: "ACCUSATIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Adverbial
 *        Adverbial (Value: "ADVERBIAL")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_CaseUnknown
 *        Case is not applicable in the analyzed language or is not predicted.
 *        (Value: "CASE_UNKNOWN")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Complementive
 *        Complementive (Value: "COMPLEMENTIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Dative Dative
 *        (Value: "DATIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Genitive
 *        Genitive (Value: "GENITIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Instrumental
 *        Instrumental (Value: "INSTRUMENTAL")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Locative
 *        Locative (Value: "LOCATIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Nominative
 *        Nominative (Value: "NOMINATIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Oblique
 *        Oblique (Value: "OBLIQUE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Partitive
 *        Partitive (Value: "PARTITIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Prepositional
 *        Prepositional (Value: "PREPOSITIONAL")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_ReflexiveCase
 *        Reflexive (Value: "REFLEXIVE_CASE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_RelativeCase
 *        Relative (Value: "RELATIVE_CASE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_CaseProperty_Vocative
 *        Vocative (Value: "VOCATIVE")
 *
 *  Remapped to 'caseProperty' to avoid language reserved word 'case'.
 */
@property(nonatomic, copy, nullable) NSString *caseProperty;

/**
 *  The grammatical form.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Adnomial Adnomial
 *        (Value: "ADNOMIAL")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Auxiliary Auxiliary
 *        (Value: "AUXILIARY")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Complementizer
 *        Complementizer (Value: "COMPLEMENTIZER")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Form_FinalEnding Final
 *        ending (Value: "FINAL_ENDING")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Form_FormUnknown Form is
 *        not applicable in the analyzed language or is not predicted. (Value:
 *        "FORM_UNKNOWN")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Gerund Gerund (Value:
 *        "GERUND")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Irrealis Irrealis
 *        (Value: "IRREALIS")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Long Long form (Value:
 *        "LONG")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Order Order form
 *        (Value: "ORDER")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Realis Realis (Value:
 *        "REALIS")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Short Short form
 *        (Value: "SHORT")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Form_Specific Specific form
 *        (Value: "SPECIFIC")
 */
@property(nonatomic, copy, nullable) NSString *form;

/**
 *  The grammatical gender.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Gender_Feminine Feminine
 *        (Value: "FEMININE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Gender_GenderUnknown Gender
 *        is not applicable in the analyzed language or is not predicted.
 *        (Value: "GENDER_UNKNOWN")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Gender_Masculine Masculine
 *        (Value: "MASCULINE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Gender_Neuter Neuter
 *        (Value: "NEUTER")
 */
@property(nonatomic, copy, nullable) NSString *gender;

/**
 *  The grammatical mood.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Mood_ConditionalMood
 *        Conditional (Value: "CONDITIONAL_MOOD")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Mood_Imperative Imperative
 *        (Value: "IMPERATIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Mood_Indicative Indicative
 *        (Value: "INDICATIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Mood_Interrogative
 *        Interrogative (Value: "INTERROGATIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Mood_Jussive Jussive
 *        (Value: "JUSSIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Mood_MoodUnknown Mood is
 *        not applicable in the analyzed language or is not predicted. (Value:
 *        "MOOD_UNKNOWN")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Mood_Subjunctive
 *        Subjunctive (Value: "SUBJUNCTIVE")
 */
@property(nonatomic, copy, nullable) NSString *mood;

/**
 *  The grammatical number.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Number_Dual Dual (Value:
 *        "DUAL")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Number_NumberUnknown Number
 *        is not applicable in the analyzed language or is not predicted.
 *        (Value: "NUMBER_UNKNOWN")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Number_Plural Plural
 *        (Value: "PLURAL")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Number_Singular Singular
 *        (Value: "SINGULAR")
 */
@property(nonatomic, copy, nullable) NSString *number;

/**
 *  The grammatical person.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Person_First First (Value:
 *        "FIRST")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Person_PersonUnknown Person
 *        is not applicable in the analyzed language or is not predicted.
 *        (Value: "PERSON_UNKNOWN")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Person_ReflexivePerson
 *        Reflexive (Value: "REFLEXIVE_PERSON")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Person_Second Second
 *        (Value: "SECOND")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Person_Third Third (Value:
 *        "THIRD")
 */
@property(nonatomic, copy, nullable) NSString *person;

/**
 *  The grammatical properness.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Proper_NotProper Not proper
 *        (Value: "NOT_PROPER")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Proper_Proper Proper
 *        (Value: "PROPER")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Proper_ProperUnknown Proper
 *        is not applicable in the analyzed language or is not predicted.
 *        (Value: "PROPER_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *proper;

/**
 *  The grammatical reciprocity.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Reciprocity_NonReciprocal
 *        Non-reciprocal (Value: "NON_RECIPROCAL")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Reciprocity_Reciprocal
 *        Reciprocal (Value: "RECIPROCAL")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Reciprocity_ReciprocityUnknown
 *        Reciprocity is not applicable in the analyzed language or is not
 *        predicted. (Value: "RECIPROCITY_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *reciprocity;

/**
 *  The part of speech tag.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Adj Adjective (Value:
 *        "ADJ")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Adp Adposition
 *        (preposition and postposition) (Value: "ADP")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Adv Adverb (Value:
 *        "ADV")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Affix Affix (Value:
 *        "AFFIX")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Conj Conjunction
 *        (Value: "CONJ")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Det Determiner (Value:
 *        "DET")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Noun Noun (common and
 *        proper) (Value: "NOUN")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Num Cardinal number
 *        (Value: "NUM")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Pron Pronoun (Value:
 *        "PRON")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Prt Particle or other
 *        function word (Value: "PRT")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Punct Punctuation
 *        (Value: "PUNCT")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Unknown Unknown (Value:
 *        "UNKNOWN")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_Verb Verb (all tenses
 *        and modes) (Value: "VERB")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tag_X Other: foreign words,
 *        typos, abbreviations (Value: "X")
 */
@property(nonatomic, copy, nullable) NSString *tag;

/**
 *  The grammatical tense.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tense_ConditionalTense
 *        Conditional (Value: "CONDITIONAL_TENSE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tense_Future Future (Value:
 *        "FUTURE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tense_Imperfect Imperfect
 *        (Value: "IMPERFECT")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tense_Past Past (Value:
 *        "PAST")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tense_Pluperfect Pluperfect
 *        (Value: "PLUPERFECT")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tense_Present Present
 *        (Value: "PRESENT")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Tense_TenseUnknown Tense is
 *        not applicable in the analyzed language or is not predicted. (Value:
 *        "TENSE_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *tense;

/**
 *  The grammatical voice.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Voice_Active Active (Value:
 *        "ACTIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Voice_Causative Causative
 *        (Value: "CAUSATIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Voice_Passive Passive
 *        (Value: "PASSIVE")
 *    @arg @c kGTLRCloudNaturalLanguage_PartOfSpeech_Voice_VoiceUnknown Voice is
 *        not applicable in the analyzed language or is not predicted. (Value:
 *        "VOICE_UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *voice;

@end


/**
 *  Represents a sentence in the input document.
 */
@interface GTLRCloudNaturalLanguage_Sentence : GTLRObject

/**
 *  For calls to AnalyzeSentiment or if
 *  AnnotateTextRequest.Features.extract_document_sentiment is set to true, this
 *  field will contain the sentiment for the sentence.
 */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_Sentiment *sentiment;

/** The sentence text. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_TextSpan *text;

@end


/**
 *  Represents the feeling associated with the entire text or entities in the
 *  text.
 */
@interface GTLRCloudNaturalLanguage_Sentiment : GTLRObject

/**
 *  A non-negative number in the [0, +inf) range, which represents the absolute
 *  magnitude of sentiment regardless of score (positive or negative).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *magnitude;

/**
 *  Sentiment score between -1.0 (negative sentiment) and 1.0 (positive
 *  sentiment).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *score;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudNaturalLanguage_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudNaturalLanguage_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudNaturalLanguage_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudNaturalLanguage_Status_Details_Item : GTLRObject
@end


/**
 *  Represents an output piece of text.
 */
@interface GTLRCloudNaturalLanguage_TextSpan : GTLRObject

/**
 *  The API calculates the beginning offset of the content in the original
 *  document according to the EncodingType specified in the API request.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *beginOffset;

/** The content of the output text. */
@property(nonatomic, copy, nullable) NSString *content;

@end


/**
 *  Represents the smallest syntactic building block of the text.
 */
@interface GTLRCloudNaturalLanguage_Token : GTLRObject

/** Dependency tree parse for this token. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_DependencyEdge *dependencyEdge;

/**
 *  [Lemma](https://en.wikipedia.org/wiki/Lemma_%28morphology%29) of the token.
 */
@property(nonatomic, copy, nullable) NSString *lemma;

/** Parts of speech tag for this token. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_PartOfSpeech *partOfSpeech;

/** The token text. */
@property(nonatomic, strong, nullable) GTLRCloudNaturalLanguage_TextSpan *text;

@end


/**
 *  Options for the V1 model.
 */
@interface GTLRCloudNaturalLanguage_V1Model : GTLRObject
@end


/**
 *  Options for the V2 model.
 */
@interface GTLRCloudNaturalLanguage_V2Model : GTLRObject

/**
 *  The content categories used for classification.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudNaturalLanguage_V2Model_ContentCategoriesVersion_ContentCategoriesVersionUnspecified
 *        If `ContentCategoriesVersion` is not specified, this option will
 *        default to `V1`. (Value: "CONTENT_CATEGORIES_VERSION_UNSPECIFIED")
 *    @arg @c kGTLRCloudNaturalLanguage_V2Model_ContentCategoriesVersion_V1
 *        Legacy content categories of our initial launch in 2017. (Value: "V1")
 *    @arg @c kGTLRCloudNaturalLanguage_V2Model_ContentCategoriesVersion_V2
 *        Updated content categories in 2022. (Value: "V2")
 */
@property(nonatomic, copy, nullable) NSString *contentCategoriesVersion;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
