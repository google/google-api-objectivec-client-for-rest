// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Docs API (docs/v1)
// Description:
//   Reads and writes Google Docs documents.
// Documentation:
//   https://developers.google.com/docs/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDocs_AutoText;
@class GTLRDocs_AutoText_SuggestedTextStyleChanges;
@class GTLRDocs_Background;
@class GTLRDocs_BackgroundSuggestionState;
@class GTLRDocs_Body;
@class GTLRDocs_Bullet;
@class GTLRDocs_BulletSuggestionState;
@class GTLRDocs_Color;
@class GTLRDocs_ColumnBreak;
@class GTLRDocs_ColumnBreak_SuggestedTextStyleChanges;
@class GTLRDocs_CreateFooterRequest;
@class GTLRDocs_CreateFooterResponse;
@class GTLRDocs_CreateFootnoteRequest;
@class GTLRDocs_CreateFootnoteResponse;
@class GTLRDocs_CreateHeaderRequest;
@class GTLRDocs_CreateHeaderResponse;
@class GTLRDocs_CreateNamedRangeRequest;
@class GTLRDocs_CreateNamedRangeResponse;
@class GTLRDocs_CreateParagraphBulletsRequest;
@class GTLRDocs_CropProperties;
@class GTLRDocs_CropPropertiesSuggestionState;
@class GTLRDocs_DeleteContentRangeRequest;
@class GTLRDocs_DeleteFooterRequest;
@class GTLRDocs_DeleteHeaderRequest;
@class GTLRDocs_DeleteNamedRangeRequest;
@class GTLRDocs_DeleteParagraphBulletsRequest;
@class GTLRDocs_DeletePositionedObjectRequest;
@class GTLRDocs_DeleteTableColumnRequest;
@class GTLRDocs_DeleteTableRowRequest;
@class GTLRDocs_Dimension;
@class GTLRDocs_Document_Footers;
@class GTLRDocs_Document_Footnotes;
@class GTLRDocs_Document_Headers;
@class GTLRDocs_Document_InlineObjects;
@class GTLRDocs_Document_Lists;
@class GTLRDocs_Document_NamedRanges;
@class GTLRDocs_Document_PositionedObjects;
@class GTLRDocs_Document_SuggestedDocumentStyleChanges;
@class GTLRDocs_Document_SuggestedNamedStylesChanges;
@class GTLRDocs_DocumentStyle;
@class GTLRDocs_DocumentStyleSuggestionState;
@class GTLRDocs_EmbeddedDrawingProperties;
@class GTLRDocs_EmbeddedDrawingPropertiesSuggestionState;
@class GTLRDocs_EmbeddedObject;
@class GTLRDocs_EmbeddedObjectBorder;
@class GTLRDocs_EmbeddedObjectBorderSuggestionState;
@class GTLRDocs_EmbeddedObjectSuggestionState;
@class GTLRDocs_EndOfSegmentLocation;
@class GTLRDocs_Equation;
@class GTLRDocs_Footer;
@class GTLRDocs_Footnote;
@class GTLRDocs_FootnoteReference;
@class GTLRDocs_FootnoteReference_SuggestedTextStyleChanges;
@class GTLRDocs_Header;
@class GTLRDocs_HorizontalRule;
@class GTLRDocs_HorizontalRule_SuggestedTextStyleChanges;
@class GTLRDocs_ImageProperties;
@class GTLRDocs_ImagePropertiesSuggestionState;
@class GTLRDocs_InlineObject;
@class GTLRDocs_InlineObject_SuggestedInlineObjectPropertiesChanges;
@class GTLRDocs_InlineObjectElement;
@class GTLRDocs_InlineObjectElement_SuggestedTextStyleChanges;
@class GTLRDocs_InlineObjectProperties;
@class GTLRDocs_InlineObjectPropertiesSuggestionState;
@class GTLRDocs_InsertInlineImageRequest;
@class GTLRDocs_InsertInlineImageResponse;
@class GTLRDocs_InsertInlineSheetsChartResponse;
@class GTLRDocs_InsertPageBreakRequest;
@class GTLRDocs_InsertSectionBreakRequest;
@class GTLRDocs_InsertTableColumnRequest;
@class GTLRDocs_InsertTableRequest;
@class GTLRDocs_InsertTableRowRequest;
@class GTLRDocs_InsertTextRequest;
@class GTLRDocs_Link;
@class GTLRDocs_LinkedContentReference;
@class GTLRDocs_LinkedContentReferenceSuggestionState;
@class GTLRDocs_List;
@class GTLRDocs_List_SuggestedListPropertiesChanges;
@class GTLRDocs_ListProperties;
@class GTLRDocs_ListPropertiesSuggestionState;
@class GTLRDocs_Location;
@class GTLRDocs_MergeTableCellsRequest;
@class GTLRDocs_NamedRange;
@class GTLRDocs_NamedRanges;
@class GTLRDocs_NamedStyle;
@class GTLRDocs_NamedStyles;
@class GTLRDocs_NamedStylesSuggestionState;
@class GTLRDocs_NamedStyleSuggestionState;
@class GTLRDocs_NestingLevel;
@class GTLRDocs_NestingLevelSuggestionState;
@class GTLRDocs_ObjectReferences;
@class GTLRDocs_OptionalColor;
@class GTLRDocs_PageBreak;
@class GTLRDocs_PageBreak_SuggestedTextStyleChanges;
@class GTLRDocs_Paragraph;
@class GTLRDocs_Paragraph_SuggestedBulletChanges;
@class GTLRDocs_Paragraph_SuggestedParagraphStyleChanges;
@class GTLRDocs_Paragraph_SuggestedPositionedObjectIds;
@class GTLRDocs_ParagraphBorder;
@class GTLRDocs_ParagraphElement;
@class GTLRDocs_ParagraphStyle;
@class GTLRDocs_ParagraphStyleSuggestionState;
@class GTLRDocs_Person;
@class GTLRDocs_Person_SuggestedTextStyleChanges;
@class GTLRDocs_PersonProperties;
@class GTLRDocs_PinTableHeaderRowsRequest;
@class GTLRDocs_PositionedObject;
@class GTLRDocs_PositionedObject_SuggestedPositionedObjectPropertiesChanges;
@class GTLRDocs_PositionedObjectPositioning;
@class GTLRDocs_PositionedObjectPositioningSuggestionState;
@class GTLRDocs_PositionedObjectProperties;
@class GTLRDocs_PositionedObjectPropertiesSuggestionState;
@class GTLRDocs_Range;
@class GTLRDocs_ReplaceAllTextRequest;
@class GTLRDocs_ReplaceAllTextResponse;
@class GTLRDocs_ReplaceImageRequest;
@class GTLRDocs_ReplaceNamedRangeContentRequest;
@class GTLRDocs_Request;
@class GTLRDocs_Response;
@class GTLRDocs_RgbColor;
@class GTLRDocs_RichLink;
@class GTLRDocs_RichLink_SuggestedTextStyleChanges;
@class GTLRDocs_RichLinkProperties;
@class GTLRDocs_SectionBreak;
@class GTLRDocs_SectionColumnProperties;
@class GTLRDocs_SectionStyle;
@class GTLRDocs_Shading;
@class GTLRDocs_ShadingSuggestionState;
@class GTLRDocs_SheetsChartReference;
@class GTLRDocs_SheetsChartReferenceSuggestionState;
@class GTLRDocs_Size;
@class GTLRDocs_SizeSuggestionState;
@class GTLRDocs_StructuralElement;
@class GTLRDocs_SubstringMatchCriteria;
@class GTLRDocs_SuggestedBullet;
@class GTLRDocs_SuggestedDocumentStyle;
@class GTLRDocs_SuggestedInlineObjectProperties;
@class GTLRDocs_SuggestedListProperties;
@class GTLRDocs_SuggestedNamedStyles;
@class GTLRDocs_SuggestedParagraphStyle;
@class GTLRDocs_SuggestedPositionedObjectProperties;
@class GTLRDocs_SuggestedTableCellStyle;
@class GTLRDocs_SuggestedTableRowStyle;
@class GTLRDocs_SuggestedTextStyle;
@class GTLRDocs_Table;
@class GTLRDocs_TableCell;
@class GTLRDocs_TableCell_SuggestedTableCellStyleChanges;
@class GTLRDocs_TableCellBorder;
@class GTLRDocs_TableCellLocation;
@class GTLRDocs_TableCellStyle;
@class GTLRDocs_TableCellStyleSuggestionState;
@class GTLRDocs_TableColumnProperties;
@class GTLRDocs_TableOfContents;
@class GTLRDocs_TableRange;
@class GTLRDocs_TableRow;
@class GTLRDocs_TableRow_SuggestedTableRowStyleChanges;
@class GTLRDocs_TableRowStyle;
@class GTLRDocs_TableRowStyleSuggestionState;
@class GTLRDocs_TableStyle;
@class GTLRDocs_TabStop;
@class GTLRDocs_TextRun;
@class GTLRDocs_TextRun_SuggestedTextStyleChanges;
@class GTLRDocs_TextStyle;
@class GTLRDocs_TextStyleSuggestionState;
@class GTLRDocs_UnmergeTableCellsRequest;
@class GTLRDocs_UpdateDocumentStyleRequest;
@class GTLRDocs_UpdateParagraphStyleRequest;
@class GTLRDocs_UpdateSectionStyleRequest;
@class GTLRDocs_UpdateTableCellStyleRequest;
@class GTLRDocs_UpdateTableColumnPropertiesRequest;
@class GTLRDocs_UpdateTableRowStyleRequest;
@class GTLRDocs_UpdateTextStyleRequest;
@class GTLRDocs_WeightedFontFamily;
@class GTLRDocs_WriteControl;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRDocs_AutoText.type

/**
 *  Type for auto text that represents the total number of pages in the
 *  document.
 *
 *  Value: "PAGE_COUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_AutoText_Type_PageCount;
/**
 *  Type for auto text that represents the current page number.
 *
 *  Value: "PAGE_NUMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_AutoText_Type_PageNumber;
/**
 *  An unspecified auto text type.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_AutoText_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDocs_CreateFooterRequest.type

/**
 *  A default header/footer.
 *
 *  Value: "DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateFooterRequest_Type_Default;
/**
 *  The header/footer type is unspecified.
 *
 *  Value: "HEADER_FOOTER_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateFooterRequest_Type_HeaderFooterTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDocs_CreateHeaderRequest.type

/**
 *  A default header/footer.
 *
 *  Value: "DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateHeaderRequest_Type_Default;
/**
 *  The header/footer type is unspecified.
 *
 *  Value: "HEADER_FOOTER_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateHeaderRequest_Type_HeaderFooterTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDocs_CreateParagraphBulletsRequest.bulletPreset

/**
 *  A bulleted list with a `ARROW3D`, `CIRCLE` and `SQUARE` bullet glyph for the
 *  first 3 list nesting levels.
 *
 *  Value: "BULLET_ARROW3D_CIRCLE_SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletArrow3dCircleSquare;
/**
 *  A bulleted list with a `ARROW`, `DIAMOND` and `DISC` bullet glyph for the
 *  first 3 list nesting levels.
 *
 *  Value: "BULLET_ARROW_DIAMOND_DISC"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletArrowDiamondDisc;
/**
 *  A bulleted list with `CHECKBOX` bullet glyphs for all list nesting levels.
 *
 *  Value: "BULLET_CHECKBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletCheckbox;
/**
 *  A bulleted list with a `DIAMOND`, `CIRCLE` and `SQUARE` bullet glyph for the
 *  first 3 list nesting levels.
 *
 *  Value: "BULLET_DIAMOND_CIRCLE_SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletDiamondCircleSquare;
/**
 *  A bulleted list with a `DIAMONDX`, `ARROW3D` and `SQUARE` bullet glyph for
 *  the first 3 list nesting levels.
 *
 *  Value: "BULLET_DIAMONDX_ARROW3D_SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletDiamondxArrow3dSquare;
/**
 *  A bulleted list with a `DIAMONDX`, `HOLLOWDIAMOND` and `SQUARE` bullet glyph
 *  for the first 3 list nesting levels.
 *
 *  Value: "BULLET_DIAMONDX_HOLLOWDIAMOND_SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletDiamondxHollowdiamondSquare;
/**
 *  A bulleted list with a `DISC`, `CIRCLE` and `SQUARE` bullet glyph for the
 *  first 3 list nesting levels.
 *
 *  Value: "BULLET_DISC_CIRCLE_SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletDiscCircleSquare;
/**
 *  The bullet glyph preset is unspecified.
 *
 *  Value: "BULLET_GLYPH_PRESET_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletGlyphPresetUnspecified;
/**
 *  A bulleted list with a `LEFTTRIANGLE`, `DIAMOND` and `DISC` bullet glyph for
 *  the first 3 list nesting levels.
 *
 *  Value: "BULLET_LEFTTRIANGLE_DIAMOND_DISC"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletLefttriangleDiamondDisc;
/**
 *  A bulleted list with a `STAR`, `CIRCLE` and `SQUARE` bullet glyph for the
 *  first 3 list nesting levels.
 *
 *  Value: "BULLET_STAR_CIRCLE_SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletStarCircleSquare;
/**
 *  A numbered list with `DECIMAL`, `ALPHA` and `ROMAN` numeric glyphs for the
 *  first 3 list nesting levels, followed by periods.
 *
 *  Value: "NUMBERED_DECIMAL_ALPHA_ROMAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_NumberedDecimalAlphaRoman;
/**
 *  A numbered list with `DECIMAL`, `ALPHA` and `ROMAN` numeric glyphs for the
 *  first 3 list nesting levels, followed by parenthesis.
 *
 *  Value: "NUMBERED_DECIMAL_ALPHA_ROMAN_PARENS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_NumberedDecimalAlphaRomanParens;
/**
 *  A numbered list with `DECIMAL` numeric glyphs separated by periods, where
 *  each nesting level uses the previous nesting level's glyph as a prefix. For
 *  example: '1.', '1.1.', '2.', '2.2.'.
 *
 *  Value: "NUMBERED_DECIMAL_NESTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_NumberedDecimalNested;
/**
 *  A numbered list with `UPPERALPHA`, `ALPHA` and `ROMAN` numeric glyphs for
 *  the first 3 list nesting levels, followed by periods.
 *
 *  Value: "NUMBERED_UPPERALPHA_ALPHA_ROMAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_NumberedUpperalphaAlphaRoman;
/**
 *  A numbered list with `UPPERROMAN`, `UPPERALPHA` and `DECIMAL` numeric glyphs
 *  for the first 3 list nesting levels, followed by periods.
 *
 *  Value: "NUMBERED_UPPERROMAN_UPPERALPHA_DECIMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_NumberedUpperromanUpperalphaDecimal;
/**
 *  A numbered list with `ZERODECIMAL`, `ALPHA` and `ROMAN` numeric glyphs for
 *  the first 3 list nesting levels, followed by periods.
 *
 *  Value: "NUMBERED_ZERODECIMAL_ALPHA_ROMAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_NumberedZerodecimalAlphaRoman;

// ----------------------------------------------------------------------------
// GTLRDocs_Dimension.unit

/**
 *  A point, 1/72 of an inch.
 *
 *  Value: "PT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_Dimension_Unit_Pt;
/**
 *  The units are unknown.
 *
 *  Value: "UNIT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_Dimension_Unit_UnitUnspecified;

// ----------------------------------------------------------------------------
// GTLRDocs_Document.suggestionsViewMode

/**
 *  The SuggestionsViewMode applied to the returned document depends on the
 *  user's current access level. If the user only has view access,
 *  PREVIEW_WITHOUT_SUGGESTIONS is applied. Otherwise, SUGGESTIONS_INLINE is
 *  applied. This is the default suggestions view mode.
 *
 *  Value: "DEFAULT_FOR_CURRENT_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_Document_SuggestionsViewMode_DefaultForCurrentAccess;
/**
 *  The returned document is a preview with all suggested changes accepted.
 *  Requests to retrieve a document using this mode will return a 403 error if
 *  the user does not have permission to view suggested changes.
 *
 *  Value: "PREVIEW_SUGGESTIONS_ACCEPTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_Document_SuggestionsViewMode_PreviewSuggestionsAccepted;
/**
 *  The returned document is a preview with all suggested changes rejected if
 *  there are any suggestions in the document.
 *
 *  Value: "PREVIEW_WITHOUT_SUGGESTIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_Document_SuggestionsViewMode_PreviewWithoutSuggestions;
/**
 *  The returned document has suggestions inline. Suggested changes will be
 *  differentiated from base content within the document. Requests to retrieve a
 *  document using this mode will return a 403 error if the user does not have
 *  permission to view suggested changes.
 *
 *  Value: "SUGGESTIONS_INLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_Document_SuggestionsViewMode_SuggestionsInline;

// ----------------------------------------------------------------------------
// GTLRDocs_EmbeddedObjectBorder.dashStyle

/**
 *  Dashed line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dash'.
 *
 *  Value: "DASH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_EmbeddedObjectBorder_DashStyle_Dash;
/**
 *  Unspecified dash style.
 *
 *  Value: "DASH_STYLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_EmbeddedObjectBorder_DashStyle_DashStyleUnspecified;
/**
 *  Dotted line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dot'.
 *
 *  Value: "DOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_EmbeddedObjectBorder_DashStyle_Dot;
/**
 *  Solid line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'solid'. This
 *  is the default dash style.
 *
 *  Value: "SOLID"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_EmbeddedObjectBorder_DashStyle_Solid;

// ----------------------------------------------------------------------------
// GTLRDocs_EmbeddedObjectBorder.propertyState

/**
 *  If a property's state is NOT_RENDERED, then the element does not have the
 *  corresponding property when rendered in the document.
 *
 *  Value: "NOT_RENDERED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_EmbeddedObjectBorder_PropertyState_NotRendered;
/**
 *  If a property's state is RENDERED, then the element has the corresponding
 *  property when rendered in the document. This is the default value.
 *
 *  Value: "RENDERED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_EmbeddedObjectBorder_PropertyState_Rendered;

// ----------------------------------------------------------------------------
// GTLRDocs_InsertSectionBreakRequest.sectionType

/**
 *  The section starts immediately after the last paragraph of the previous
 *  section.
 *
 *  Value: "CONTINUOUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_InsertSectionBreakRequest_SectionType_Continuous;
/**
 *  The section starts on the next page.
 *
 *  Value: "NEXT_PAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_InsertSectionBreakRequest_SectionType_NextPage;
/**
 *  The section type is unspecified.
 *
 *  Value: "SECTION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_InsertSectionBreakRequest_SectionType_SectionTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDocs_NamedStyle.namedStyleType

/**
 *  Heading 1.
 *
 *  Value: "HEADING_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyle_NamedStyleType_Heading1;
/**
 *  Heading 2.
 *
 *  Value: "HEADING_2"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyle_NamedStyleType_Heading2;
/**
 *  Heading 3.
 *
 *  Value: "HEADING_3"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyle_NamedStyleType_Heading3;
/**
 *  Heading 4.
 *
 *  Value: "HEADING_4"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyle_NamedStyleType_Heading4;
/**
 *  Heading 5.
 *
 *  Value: "HEADING_5"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyle_NamedStyleType_Heading5;
/**
 *  Heading 6.
 *
 *  Value: "HEADING_6"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyle_NamedStyleType_Heading6;
/**
 *  The type of named style is unspecified.
 *
 *  Value: "NAMED_STYLE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyle_NamedStyleType_NamedStyleTypeUnspecified;
/**
 *  Normal text.
 *
 *  Value: "NORMAL_TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyle_NamedStyleType_NormalText;
/**
 *  Subtitle.
 *
 *  Value: "SUBTITLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyle_NamedStyleType_Subtitle;
/**
 *  Title.
 *
 *  Value: "TITLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyle_NamedStyleType_Title;

// ----------------------------------------------------------------------------
// GTLRDocs_NamedStyleSuggestionState.namedStyleType

/**
 *  Heading 1.
 *
 *  Value: "HEADING_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_Heading1;
/**
 *  Heading 2.
 *
 *  Value: "HEADING_2"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_Heading2;
/**
 *  Heading 3.
 *
 *  Value: "HEADING_3"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_Heading3;
/**
 *  Heading 4.
 *
 *  Value: "HEADING_4"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_Heading4;
/**
 *  Heading 5.
 *
 *  Value: "HEADING_5"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_Heading5;
/**
 *  Heading 6.
 *
 *  Value: "HEADING_6"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_Heading6;
/**
 *  The type of named style is unspecified.
 *
 *  Value: "NAMED_STYLE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_NamedStyleTypeUnspecified;
/**
 *  Normal text.
 *
 *  Value: "NORMAL_TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_NormalText;
/**
 *  Subtitle.
 *
 *  Value: "SUBTITLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_Subtitle;
/**
 *  Title.
 *
 *  Value: "TITLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_Title;

// ----------------------------------------------------------------------------
// GTLRDocs_NestingLevel.bulletAlignment

/**
 *  The bullet alignment is unspecified.
 *
 *  Value: "BULLET_ALIGNMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NestingLevel_BulletAlignment_BulletAlignmentUnspecified;
/**
 *  The bullet is aligned to the center of the space allotted for rendering the
 *  bullet.
 *
 *  Value: "CENTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NestingLevel_BulletAlignment_Center;
/**
 *  The bullet is aligned to the end of the space allotted for rendering the
 *  bullet. Right-aligned for LTR text, left-aligned otherwise.
 *
 *  Value: "END"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NestingLevel_BulletAlignment_End;
/**
 *  The bullet is aligned to the start of the space allotted for rendering the
 *  bullet. Left-aligned for LTR text, right-aligned otherwise.
 *
 *  Value: "START"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NestingLevel_BulletAlignment_Start;

// ----------------------------------------------------------------------------
// GTLRDocs_NestingLevel.glyphType

/**
 *  A lowercase letter, like `a`, `b`, or `c`.
 *
 *  Value: "ALPHA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NestingLevel_GlyphType_Alpha;
/**
 *  A number, like `1`, `2`, or `3`.
 *
 *  Value: "DECIMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NestingLevel_GlyphType_Decimal;
/**
 *  The glyph type is unspecified or unsupported.
 *
 *  Value: "GLYPH_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NestingLevel_GlyphType_GlyphTypeUnspecified;
/**
 *  An empty string.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NestingLevel_GlyphType_None;
/**
 *  A lowercase Roman numeral, like `i`, `ii`, or `iii`.
 *
 *  Value: "ROMAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NestingLevel_GlyphType_Roman;
/**
 *  An uppercase letter, like `A`, `B`, or `C`.
 *
 *  Value: "UPPER_ALPHA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NestingLevel_GlyphType_UpperAlpha;
/**
 *  An uppercase Roman numeral, like `I`, `II`, or `III`.
 *
 *  Value: "UPPER_ROMAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NestingLevel_GlyphType_UpperRoman;
/**
 *  A number where single digit numbers are prefixed with a zero, like `01`,
 *  `02`, or `03`. Numbers with more than one digit are not prefixed with a
 *  zero.
 *
 *  Value: "ZERO_DECIMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_NestingLevel_GlyphType_ZeroDecimal;

// ----------------------------------------------------------------------------
// GTLRDocs_ParagraphBorder.dashStyle

/**
 *  Dashed line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dash'.
 *
 *  Value: "DASH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphBorder_DashStyle_Dash;
/**
 *  Unspecified dash style.
 *
 *  Value: "DASH_STYLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphBorder_DashStyle_DashStyleUnspecified;
/**
 *  Dotted line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dot'.
 *
 *  Value: "DOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphBorder_DashStyle_Dot;
/**
 *  Solid line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'solid'. This
 *  is the default dash style.
 *
 *  Value: "SOLID"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphBorder_DashStyle_Solid;

// ----------------------------------------------------------------------------
// GTLRDocs_ParagraphStyle.alignment

/**
 *  The paragraph alignment is inherited from the parent.
 *
 *  Value: "ALIGNMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_Alignment_AlignmentUnspecified;
/**
 *  The paragraph is centered.
 *
 *  Value: "CENTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_Alignment_Center;
/**
 *  The paragraph is aligned to the end of the line. Right-aligned for LTR text,
 *  left-aligned otherwise.
 *
 *  Value: "END"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_Alignment_End;
/**
 *  The paragraph is justified.
 *
 *  Value: "JUSTIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_Alignment_Justified;
/**
 *  The paragraph is aligned to the start of the line. Left-aligned for LTR
 *  text, right-aligned otherwise.
 *
 *  Value: "START"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_Alignment_Start;

// ----------------------------------------------------------------------------
// GTLRDocs_ParagraphStyle.direction

/**
 *  The content direction is unspecified.
 *
 *  Value: "CONTENT_DIRECTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_Direction_ContentDirectionUnspecified;
/**
 *  The content goes from left to right.
 *
 *  Value: "LEFT_TO_RIGHT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_Direction_LeftToRight;
/**
 *  The content goes from right to left.
 *
 *  Value: "RIGHT_TO_LEFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_Direction_RightToLeft;

// ----------------------------------------------------------------------------
// GTLRDocs_ParagraphStyle.namedStyleType

/**
 *  Heading 1.
 *
 *  Value: "HEADING_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_NamedStyleType_Heading1;
/**
 *  Heading 2.
 *
 *  Value: "HEADING_2"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_NamedStyleType_Heading2;
/**
 *  Heading 3.
 *
 *  Value: "HEADING_3"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_NamedStyleType_Heading3;
/**
 *  Heading 4.
 *
 *  Value: "HEADING_4"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_NamedStyleType_Heading4;
/**
 *  Heading 5.
 *
 *  Value: "HEADING_5"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_NamedStyleType_Heading5;
/**
 *  Heading 6.
 *
 *  Value: "HEADING_6"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_NamedStyleType_Heading6;
/**
 *  The type of named style is unspecified.
 *
 *  Value: "NAMED_STYLE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_NamedStyleType_NamedStyleTypeUnspecified;
/**
 *  Normal text.
 *
 *  Value: "NORMAL_TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_NamedStyleType_NormalText;
/**
 *  Subtitle.
 *
 *  Value: "SUBTITLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_NamedStyleType_Subtitle;
/**
 *  Title.
 *
 *  Value: "TITLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_NamedStyleType_Title;

// ----------------------------------------------------------------------------
// GTLRDocs_ParagraphStyle.spacingMode

/**
 *  Paragraph spacing is skipped between list elements.
 *
 *  Value: "COLLAPSE_LISTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_SpacingMode_CollapseLists;
/**
 *  Paragraph spacing is always rendered.
 *
 *  Value: "NEVER_COLLAPSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_SpacingMode_NeverCollapse;
/**
 *  The spacing mode is inherited from the parent.
 *
 *  Value: "SPACING_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ParagraphStyle_SpacingMode_SpacingModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDocs_PositionedObjectPositioning.layout

/**
 *  The positioned object is behind the text.
 *
 *  Value: "BEHIND_TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_PositionedObjectPositioning_Layout_BehindText;
/**
 *  Breaks text such that the positioned object is on the left and text is on
 *  the right.
 *
 *  Value: "BREAK_LEFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_PositionedObjectPositioning_Layout_BreakLeft;
/**
 *  Breaks text such that there's no text on the left or right of the positioned
 *  object.
 *
 *  Value: "BREAK_LEFT_RIGHT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_PositionedObjectPositioning_Layout_BreakLeftRight;
/**
 *  Breaks text such that the positioned object is on the right and text is on
 *  the left.
 *
 *  Value: "BREAK_RIGHT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_PositionedObjectPositioning_Layout_BreakRight;
/**
 *  The positioned object is in front of the text.
 *
 *  Value: "IN_FRONT_OF_TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_PositionedObjectPositioning_Layout_InFrontOfText;
/**
 *  The layout is unspecified.
 *
 *  Value: "POSITIONED_OBJECT_LAYOUT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_PositionedObjectPositioning_Layout_PositionedObjectLayoutUnspecified;
/**
 *  The text wraps around the positioned object.
 *
 *  Value: "WRAP_TEXT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_PositionedObjectPositioning_Layout_WrapText;

// ----------------------------------------------------------------------------
// GTLRDocs_ReplaceImageRequest.imageReplaceMethod

/**
 *  Scales and centers the image to fill the bounds of the original image. The
 *  image may be cropped in order to fill the original image's bounds. The
 *  rendered size of the image will be the same as the original image.
 *
 *  Value: "CENTER_CROP"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ReplaceImageRequest_ImageReplaceMethod_CenterCrop;
/**
 *  Unspecified image replace method. This value must not be used.
 *
 *  Value: "IMAGE_REPLACE_METHOD_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_ReplaceImageRequest_ImageReplaceMethod_ImageReplaceMethodUnspecified;

// ----------------------------------------------------------------------------
// GTLRDocs_SectionStyle.columnSeparatorStyle

/**
 *  Renders a column separator line between each column.
 *
 *  Value: "BETWEEN_EACH_COLUMN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_SectionStyle_ColumnSeparatorStyle_BetweenEachColumn;
/**
 *  An unspecified column separator style.
 *
 *  Value: "COLUMN_SEPARATOR_STYLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_SectionStyle_ColumnSeparatorStyle_ColumnSeparatorStyleUnspecified;
/**
 *  No column separator lines between columns.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_SectionStyle_ColumnSeparatorStyle_None;

// ----------------------------------------------------------------------------
// GTLRDocs_SectionStyle.contentDirection

/**
 *  The content direction is unspecified.
 *
 *  Value: "CONTENT_DIRECTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_SectionStyle_ContentDirection_ContentDirectionUnspecified;
/**
 *  The content goes from left to right.
 *
 *  Value: "LEFT_TO_RIGHT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_SectionStyle_ContentDirection_LeftToRight;
/**
 *  The content goes from right to left.
 *
 *  Value: "RIGHT_TO_LEFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_SectionStyle_ContentDirection_RightToLeft;

// ----------------------------------------------------------------------------
// GTLRDocs_SectionStyle.sectionType

/**
 *  The section starts immediately after the last paragraph of the previous
 *  section.
 *
 *  Value: "CONTINUOUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_SectionStyle_SectionType_Continuous;
/**
 *  The section starts on the next page.
 *
 *  Value: "NEXT_PAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_SectionStyle_SectionType_NextPage;
/**
 *  The section type is unspecified.
 *
 *  Value: "SECTION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_SectionStyle_SectionType_SectionTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDocs_TableCellBorder.dashStyle

/**
 *  Dashed line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dash'.
 *
 *  Value: "DASH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TableCellBorder_DashStyle_Dash;
/**
 *  Unspecified dash style.
 *
 *  Value: "DASH_STYLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TableCellBorder_DashStyle_DashStyleUnspecified;
/**
 *  Dotted line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'dot'.
 *
 *  Value: "DOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TableCellBorder_DashStyle_Dot;
/**
 *  Solid line. Corresponds to ECMA-376 ST_PresetLineDashVal value 'solid'. This
 *  is the default dash style.
 *
 *  Value: "SOLID"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TableCellBorder_DashStyle_Solid;

// ----------------------------------------------------------------------------
// GTLRDocs_TableCellStyle.contentAlignment

/**
 *  An alignment that aligns the content to the bottom of the content holder.
 *  Corresponds to ECMA-376 ST_TextAnchoringType 'b'.
 *
 *  Value: "BOTTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TableCellStyle_ContentAlignment_Bottom;
/**
 *  An unspecified content alignment. The content alignment is inherited from
 *  the parent if one exists.
 *
 *  Value: "CONTENT_ALIGNMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TableCellStyle_ContentAlignment_ContentAlignmentUnspecified;
/**
 *  An unsupported content alignment.
 *
 *  Value: "CONTENT_ALIGNMENT_UNSUPPORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TableCellStyle_ContentAlignment_ContentAlignmentUnsupported;
/**
 *  An alignment that aligns the content to the middle of the content holder.
 *  Corresponds to ECMA-376 ST_TextAnchoringType 'ctr'.
 *
 *  Value: "MIDDLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TableCellStyle_ContentAlignment_Middle;
/**
 *  An alignment that aligns the content to the top of the content holder.
 *  Corresponds to ECMA-376 ST_TextAnchoringType 't'.
 *
 *  Value: "TOP"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TableCellStyle_ContentAlignment_Top;

// ----------------------------------------------------------------------------
// GTLRDocs_TableColumnProperties.widthType

/**
 *  The column width is evenly distributed among the other evenly distributed
 *  columns. The width of the column is automatically determined and will have
 *  an equal portion of the width remaining for the table after accounting for
 *  all columns with specified widths.
 *
 *  Value: "EVENLY_DISTRIBUTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TableColumnProperties_WidthType_EvenlyDistributed;
/**
 *  A fixed column width. The width property contains the column's width.
 *
 *  Value: "FIXED_WIDTH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TableColumnProperties_WidthType_FixedWidth;
/**
 *  The column width type is unspecified.
 *
 *  Value: "WIDTH_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TableColumnProperties_WidthType_WidthTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDocs_TabStop.alignment

/**
 *  The tab stop is aligned to the center of the line.
 *
 *  Value: "CENTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TabStop_Alignment_Center;
/**
 *  The tab stop is aligned to the end of the line.
 *
 *  Value: "END"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TabStop_Alignment_End;
/**
 *  The tab stop is aligned to the start of the line. This is the default.
 *
 *  Value: "START"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TabStop_Alignment_Start;
/**
 *  The tab stop alignment is unspecified.
 *
 *  Value: "TAB_STOP_ALIGNMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TabStop_Alignment_TabStopAlignmentUnspecified;

// ----------------------------------------------------------------------------
// GTLRDocs_TextStyle.baselineOffset

/**
 *  The text's baseline offset is inherited from the parent.
 *
 *  Value: "BASELINE_OFFSET_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TextStyle_BaselineOffset_BaselineOffsetUnspecified;
/**
 *  The text is not vertically offset.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TextStyle_BaselineOffset_None;
/**
 *  The text is vertically offset downwards (subscript).
 *
 *  Value: "SUBSCRIPT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TextStyle_BaselineOffset_Subscript;
/**
 *  The text is vertically offset upwards (superscript).
 *
 *  Value: "SUPERSCRIPT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDocs_TextStyle_BaselineOffset_Superscript;

/**
 *  A ParagraphElement representing a spot in the text that's dynamically
 *  replaced with content that can change over time, like a page number.
 */
@interface GTLRDocs_AutoText : GTLRObject

/**
 *  The suggested deletion IDs. If empty, then there are no suggested deletions
 *  of this content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  The suggested insertion IDs. An AutoText may have multiple insertion IDs if
 *  it's a nested suggested change. If empty, then this is not a suggested
 *  insertion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedInsertionIds;

/**
 *  The suggested text style changes to this AutoText, keyed by suggestion ID.
 */
@property(nonatomic, strong, nullable) GTLRDocs_AutoText_SuggestedTextStyleChanges *suggestedTextStyleChanges;

/** The text style of this AutoText. */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyle *textStyle;

/**
 *  The type of this auto text.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_AutoText_Type_PageCount Type for auto text that
 *        represents the total number of pages in the document. (Value:
 *        "PAGE_COUNT")
 *    @arg @c kGTLRDocs_AutoText_Type_PageNumber Type for auto text that
 *        represents the current page number. (Value: "PAGE_NUMBER")
 *    @arg @c kGTLRDocs_AutoText_Type_TypeUnspecified An unspecified auto text
 *        type. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The suggested text style changes to this AutoText, keyed by suggestion ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedTextStyle. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_AutoText_SuggestedTextStyleChanges : GTLRObject
@end


/**
 *  Represents the background of a document.
 */
@interface GTLRDocs_Background : GTLRObject

/** The background color. */
@property(nonatomic, strong, nullable) GTLRDocs_OptionalColor *color;

@end


/**
 *  A mask that indicates which of the fields on the base Background have been
 *  changed in this suggestion. For any field set to true, the Backgound has a
 *  new suggested value.
 */
@interface GTLRDocs_BackgroundSuggestionState : GTLRObject

/**
 *  Indicates whether the current background color has been modified in this
 *  suggestion.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *backgroundColorSuggested;

@end


/**
 *  Request message for BatchUpdateDocument.
 */
@interface GTLRDocs_BatchUpdateDocumentRequest : GTLRObject

/** A list of updates to apply to the document. */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_Request *> *requests;

/** Provides control over how write requests are executed. */
@property(nonatomic, strong, nullable) GTLRDocs_WriteControl *writeControl;

@end


/**
 *  Response message from a BatchUpdateDocument request.
 */
@interface GTLRDocs_BatchUpdateDocumentResponse : GTLRObject

/** The ID of the document to which the updates were applied to. */
@property(nonatomic, copy, nullable) NSString *documentId;

/**
 *  The reply of the updates. This maps 1:1 with the updates, although replies
 *  to some requests may be empty.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_Response *> *replies;

/** The updated write control after applying the request. */
@property(nonatomic, strong, nullable) GTLRDocs_WriteControl *writeControl;

@end


/**
 *  The document body. The body typically contains the full document contents
 *  except for headers, footers, and footnotes.
 */
@interface GTLRDocs_Body : GTLRObject

/**
 *  The contents of the body. The indexes for the body's content begin at zero.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_StructuralElement *> *content;

@end


/**
 *  Describes the bullet of a paragraph.
 */
@interface GTLRDocs_Bullet : GTLRObject

/** The ID of the list this paragraph belongs to. */
@property(nonatomic, copy, nullable) NSString *listId;

/**
 *  The nesting level of this paragraph in the list.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nestingLevel;

/** The paragraph-specific text style applied to this bullet. */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyle *textStyle;

@end


/**
 *  A mask that indicates which of the fields on the base Bullet have been
 *  changed in this suggestion. For any field set to true, there's a new
 *  suggested value.
 */
@interface GTLRDocs_BulletSuggestionState : GTLRObject

/**
 *  Indicates if there was a suggested change to the list_id.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *listIdSuggested;

/**
 *  Indicates if there was a suggested change to the nesting_level.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nestingLevelSuggested;

/**
 *  A mask that indicates which of the fields in text style have been changed in
 *  this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyleSuggestionState *textStyleSuggestionState;

@end


/**
 *  A solid color.
 */
@interface GTLRDocs_Color : GTLRObject

/** The RGB color value. */
@property(nonatomic, strong, nullable) GTLRDocs_RgbColor *rgbColor;

@end


/**
 *  A ParagraphElement representing a column break. A column break makes the
 *  subsequent text start at the top of the next column.
 */
@interface GTLRDocs_ColumnBreak : GTLRObject

/**
 *  The suggested deletion IDs. If empty, then there are no suggested deletions
 *  of this content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  The suggested insertion IDs. A ColumnBreak may have multiple insertion IDs
 *  if it's a nested suggested change. If empty, then this is not a suggested
 *  insertion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedInsertionIds;

/**
 *  The suggested text style changes to this ColumnBreak, keyed by suggestion
 *  ID.
 */
@property(nonatomic, strong, nullable) GTLRDocs_ColumnBreak_SuggestedTextStyleChanges *suggestedTextStyleChanges;

/**
 *  The text style of this ColumnBreak. Similar to text content, like text runs
 *  and footnote references, the text style of a column break can affect content
 *  layout as well as the styling of text inserted next to it.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyle *textStyle;

@end


/**
 *  The suggested text style changes to this ColumnBreak, keyed by suggestion
 *  ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedTextStyle. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_ColumnBreak_SuggestedTextStyleChanges : GTLRObject
@end


/**
 *  Creates a Footer. The new footer is applied to the SectionStyle at the
 *  location of the SectionBreak if specified, otherwise it is applied to the
 *  DocumentStyle. If a footer of the specified type already exists, a 400 bad
 *  request error is returned.
 */
@interface GTLRDocs_CreateFooterRequest : GTLRObject

/**
 *  The location of the SectionBreak immediately preceding the section whose
 *  SectionStyle this footer should belong to. If this is unset or refers to the
 *  first section break in the document, the footer applies to the document
 *  style.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Location *sectionBreakLocation;

/**
 *  The type of footer to create.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_CreateFooterRequest_Type_Default A default
 *        header/footer. (Value: "DEFAULT")
 *    @arg @c kGTLRDocs_CreateFooterRequest_Type_HeaderFooterTypeUnspecified The
 *        header/footer type is unspecified. (Value:
 *        "HEADER_FOOTER_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The result of creating a footer.
 */
@interface GTLRDocs_CreateFooterResponse : GTLRObject

/** The ID of the created footer. */
@property(nonatomic, copy, nullable) NSString *footerId;

@end


/**
 *  Creates a Footnote segment and inserts a new FootnoteReference to it at the
 *  given location. The new Footnote segment will contain a space followed by a
 *  newline character.
 */
@interface GTLRDocs_CreateFootnoteRequest : GTLRObject

/**
 *  Inserts the footnote reference at the end of the document body. Footnote
 *  references cannot be inserted inside a header, footer or footnote. Since
 *  footnote references can only be inserted in the body, the segment ID field
 *  must be empty.
 */
@property(nonatomic, strong, nullable) GTLRDocs_EndOfSegmentLocation *endOfSegmentLocation;

/**
 *  Inserts the footnote reference at a specific index in the document. The
 *  footnote reference must be inserted inside the bounds of an existing
 *  Paragraph. For instance, it cannot be inserted at a table's start index
 *  (i.e. between the table and its preceding paragraph). Footnote references
 *  cannot be inserted inside an equation, header, footer or footnote. Since
 *  footnote references can only be inserted in the body, the segment ID field
 *  must be empty.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Location *location;

@end


/**
 *  The result of creating a footnote.
 */
@interface GTLRDocs_CreateFootnoteResponse : GTLRObject

/** The ID of the created footnote. */
@property(nonatomic, copy, nullable) NSString *footnoteId;

@end


/**
 *  Creates a Header. The new header is applied to the SectionStyle at the
 *  location of the SectionBreak if specified, otherwise it is applied to the
 *  DocumentStyle. If a header of the specified type already exists, a 400 bad
 *  request error is returned.
 */
@interface GTLRDocs_CreateHeaderRequest : GTLRObject

/**
 *  The location of the SectionBreak which begins the section this header should
 *  belong to. If `section_break_location' is unset or if it refers to the first
 *  section break in the document body, the header applies to the DocumentStyle
 */
@property(nonatomic, strong, nullable) GTLRDocs_Location *sectionBreakLocation;

/**
 *  The type of header to create.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_CreateHeaderRequest_Type_Default A default
 *        header/footer. (Value: "DEFAULT")
 *    @arg @c kGTLRDocs_CreateHeaderRequest_Type_HeaderFooterTypeUnspecified The
 *        header/footer type is unspecified. (Value:
 *        "HEADER_FOOTER_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  The result of creating a header.
 */
@interface GTLRDocs_CreateHeaderResponse : GTLRObject

/** The ID of the created header. */
@property(nonatomic, copy, nullable) NSString *headerId;

@end


/**
 *  Creates a NamedRange referencing the given range.
 */
@interface GTLRDocs_CreateNamedRangeRequest : GTLRObject

/**
 *  The name of the NamedRange. Names do not need to be unique. Names must be at
 *  least 1 character and no more than 256 characters, measured in UTF-16 code
 *  units.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The range to apply the name to. */
@property(nonatomic, strong, nullable) GTLRDocs_Range *range;

@end


/**
 *  The result of creating a named range.
 */
@interface GTLRDocs_CreateNamedRangeResponse : GTLRObject

/** The ID of the created named range. */
@property(nonatomic, copy, nullable) NSString *namedRangeId;

@end


/**
 *  Creates bullets for all of the paragraphs that overlap with the given range.
 *  The nesting level of each paragraph will be determined by counting leading
 *  tabs in front of each paragraph. To avoid excess space between the bullet
 *  and the corresponding paragraph, these leading tabs are removed by this
 *  request. This may change the indices of parts of the text. If the paragraph
 *  immediately before paragraphs being updated is in a list with a matching
 *  preset, the paragraphs being updated are added to that preceding list.
 */
@interface GTLRDocs_CreateParagraphBulletsRequest : GTLRObject

/**
 *  The kinds of bullet glyphs to be used.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletArrow3dCircleSquare
 *        A bulleted list with a `ARROW3D`, `CIRCLE` and `SQUARE` bullet glyph
 *        for the first 3 list nesting levels. (Value:
 *        "BULLET_ARROW3D_CIRCLE_SQUARE")
 *    @arg @c kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletArrowDiamondDisc
 *        A bulleted list with a `ARROW`, `DIAMOND` and `DISC` bullet glyph for
 *        the first 3 list nesting levels. (Value: "BULLET_ARROW_DIAMOND_DISC")
 *    @arg @c kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletCheckbox
 *        A bulleted list with `CHECKBOX` bullet glyphs for all list nesting
 *        levels. (Value: "BULLET_CHECKBOX")
 *    @arg @c kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletDiamondCircleSquare
 *        A bulleted list with a `DIAMOND`, `CIRCLE` and `SQUARE` bullet glyph
 *        for the first 3 list nesting levels. (Value:
 *        "BULLET_DIAMOND_CIRCLE_SQUARE")
 *    @arg @c kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletDiamondxArrow3dSquare
 *        A bulleted list with a `DIAMONDX`, `ARROW3D` and `SQUARE` bullet glyph
 *        for the first 3 list nesting levels. (Value:
 *        "BULLET_DIAMONDX_ARROW3D_SQUARE")
 *    @arg @c kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletDiamondxHollowdiamondSquare
 *        A bulleted list with a `DIAMONDX`, `HOLLOWDIAMOND` and `SQUARE` bullet
 *        glyph for the first 3 list nesting levels. (Value:
 *        "BULLET_DIAMONDX_HOLLOWDIAMOND_SQUARE")
 *    @arg @c kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletDiscCircleSquare
 *        A bulleted list with a `DISC`, `CIRCLE` and `SQUARE` bullet glyph for
 *        the first 3 list nesting levels. (Value: "BULLET_DISC_CIRCLE_SQUARE")
 *    @arg @c kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletGlyphPresetUnspecified
 *        The bullet glyph preset is unspecified. (Value:
 *        "BULLET_GLYPH_PRESET_UNSPECIFIED")
 *    @arg @c kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletLefttriangleDiamondDisc
 *        A bulleted list with a `LEFTTRIANGLE`, `DIAMOND` and `DISC` bullet
 *        glyph for the first 3 list nesting levels. (Value:
 *        "BULLET_LEFTTRIANGLE_DIAMOND_DISC")
 *    @arg @c kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_BulletStarCircleSquare
 *        A bulleted list with a `STAR`, `CIRCLE` and `SQUARE` bullet glyph for
 *        the first 3 list nesting levels. (Value: "BULLET_STAR_CIRCLE_SQUARE")
 *    @arg @c kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_NumberedDecimalAlphaRoman
 *        A numbered list with `DECIMAL`, `ALPHA` and `ROMAN` numeric glyphs for
 *        the first 3 list nesting levels, followed by periods. (Value:
 *        "NUMBERED_DECIMAL_ALPHA_ROMAN")
 *    @arg @c kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_NumberedDecimalAlphaRomanParens
 *        A numbered list with `DECIMAL`, `ALPHA` and `ROMAN` numeric glyphs for
 *        the first 3 list nesting levels, followed by parenthesis. (Value:
 *        "NUMBERED_DECIMAL_ALPHA_ROMAN_PARENS")
 *    @arg @c kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_NumberedDecimalNested
 *        A numbered list with `DECIMAL` numeric glyphs separated by periods,
 *        where each nesting level uses the previous nesting level's glyph as a
 *        prefix. For example: '1.', '1.1.', '2.', '2.2.'. (Value:
 *        "NUMBERED_DECIMAL_NESTED")
 *    @arg @c kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_NumberedUpperalphaAlphaRoman
 *        A numbered list with `UPPERALPHA`, `ALPHA` and `ROMAN` numeric glyphs
 *        for the first 3 list nesting levels, followed by periods. (Value:
 *        "NUMBERED_UPPERALPHA_ALPHA_ROMAN")
 *    @arg @c kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_NumberedUpperromanUpperalphaDecimal
 *        A numbered list with `UPPERROMAN`, `UPPERALPHA` and `DECIMAL` numeric
 *        glyphs for the first 3 list nesting levels, followed by periods.
 *        (Value: "NUMBERED_UPPERROMAN_UPPERALPHA_DECIMAL")
 *    @arg @c kGTLRDocs_CreateParagraphBulletsRequest_BulletPreset_NumberedZerodecimalAlphaRoman
 *        A numbered list with `ZERODECIMAL`, `ALPHA` and `ROMAN` numeric glyphs
 *        for the first 3 list nesting levels, followed by periods. (Value:
 *        "NUMBERED_ZERODECIMAL_ALPHA_ROMAN")
 */
@property(nonatomic, copy, nullable) NSString *bulletPreset;

/** The range to apply the bullet preset to. */
@property(nonatomic, strong, nullable) GTLRDocs_Range *range;

@end


/**
 *  The crop properties of an image. The crop rectangle is represented using
 *  fractional offsets from the original content's 4 edges. - If the offset is
 *  in the interval (0, 1), the corresponding edge of crop rectangle is
 *  positioned inside of the image's original bounding rectangle. - If the
 *  offset is negative or greater than 1, the corresponding edge of crop
 *  rectangle is positioned outside of the image's original bounding rectangle.
 *  - If all offsets and rotation angle are 0, the image is not cropped.
 */
@interface GTLRDocs_CropProperties : GTLRObject

/**
 *  The clockwise rotation angle of the crop rectangle around its center, in
 *  radians. Rotation is applied after the offsets.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *angle;

/**
 *  The offset specifies how far inwards the bottom edge of the crop rectangle
 *  is from the bottom edge of the original content as a fraction of the
 *  original content's height.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offsetBottom;

/**
 *  The offset specifies how far inwards the left edge of the crop rectangle is
 *  from the left edge of the original content as a fraction of the original
 *  content's width.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offsetLeft;

/**
 *  The offset specifies how far inwards the right edge of the crop rectangle is
 *  from the right edge of the original content as a fraction of the original
 *  content's width.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offsetRight;

/**
 *  The offset specifies how far inwards the top edge of the crop rectangle is
 *  from the top edge of the original content as a fraction of the original
 *  content's height.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offsetTop;

@end


/**
 *  A mask that indicates which of the fields on the base CropProperties have
 *  been changed in this suggestion. For any field set to true, there's a new
 *  suggested value.
 */
@interface GTLRDocs_CropPropertiesSuggestionState : GTLRObject

/**
 *  Indicates if there was a suggested change to angle.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *angleSuggested;

/**
 *  Indicates if there was a suggested change to offset_bottom.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offsetBottomSuggested;

/**
 *  Indicates if there was a suggested change to offset_left.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offsetLeftSuggested;

/**
 *  Indicates if there was a suggested change to offset_right.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offsetRightSuggested;

/**
 *  Indicates if there was a suggested change to offset_top.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offsetTopSuggested;

@end


/**
 *  Deletes content from the document.
 */
@interface GTLRDocs_DeleteContentRangeRequest : GTLRObject

/**
 *  The range of content to delete. Deleting text that crosses a paragraph
 *  boundary may result in changes to paragraph styles, lists, positioned
 *  objects and bookmarks as the two paragraphs are merged. Attempting to delete
 *  certain ranges can result in an invalid document structure in which case a
 *  400 bad request error is returned. Some examples of invalid delete requests
 *  include: * Deleting one code unit of a surrogate pair. * Deleting the last
 *  newline character of a Body, Header, Footer, Footnote, TableCell or
 *  TableOfContents. * Deleting the start or end of a Table, TableOfContents or
 *  Equation without deleting the entire element. * Deleting the newline
 *  character before a Table, TableOfContents or SectionBreak without deleting
 *  the element. * Deleting individual rows or cells of a table. Deleting the
 *  content within a table cell is allowed.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Range *range;

@end


/**
 *  Deletes a Footer from the document.
 */
@interface GTLRDocs_DeleteFooterRequest : GTLRObject

/**
 *  The id of the footer to delete. If this footer is defined on DocumentStyle,
 *  the reference to this footer is removed, resulting in no footer of that type
 *  for the first section of the document. If this footer is defined on a
 *  SectionStyle, the reference to this footer is removed and the footer of that
 *  type is now continued from the previous section.
 */
@property(nonatomic, copy, nullable) NSString *footerId;

@end


/**
 *  Deletes a Header from the document.
 */
@interface GTLRDocs_DeleteHeaderRequest : GTLRObject

/**
 *  The id of the header to delete. If this header is defined on DocumentStyle,
 *  the reference to this header is removed, resulting in no header of that type
 *  for the first section of the document. If this header is defined on a
 *  SectionStyle, the reference to this header is removed and the header of that
 *  type is now continued from the previous section.
 */
@property(nonatomic, copy, nullable) NSString *headerId;

@end


/**
 *  Deletes a NamedRange.
 */
@interface GTLRDocs_DeleteNamedRangeRequest : GTLRObject

/**
 *  The name of the range(s) to delete. All named ranges with the given name
 *  will be deleted.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The ID of the named range to delete. */
@property(nonatomic, copy, nullable) NSString *namedRangeId;

@end


/**
 *  Deletes bullets from all of the paragraphs that overlap with the given
 *  range. The nesting level of each paragraph will be visually preserved by
 *  adding indent to the start of the corresponding paragraph.
 */
@interface GTLRDocs_DeleteParagraphBulletsRequest : GTLRObject

/** The range to delete bullets from. */
@property(nonatomic, strong, nullable) GTLRDocs_Range *range;

@end


/**
 *  Deletes a PositionedObject from the document.
 */
@interface GTLRDocs_DeletePositionedObjectRequest : GTLRObject

/** The ID of the positioned object to delete. */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  Deletes a column from a table.
 */
@interface GTLRDocs_DeleteTableColumnRequest : GTLRObject

/**
 *  The reference table cell location from which the column will be deleted. The
 *  column this cell spans will be deleted. If this is a merged cell that spans
 *  multiple columns, all columns that the cell spans will be deleted. If no
 *  columns remain in the table after this deletion, the whole table is deleted.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TableCellLocation *tableCellLocation;

@end


/**
 *  Deletes a row from a table.
 */
@interface GTLRDocs_DeleteTableRowRequest : GTLRObject

/**
 *  The reference table cell location from which the row will be deleted. The
 *  row this cell spans will be deleted. If this is a merged cell that spans
 *  multiple rows, all rows that the cell spans will be deleted. If no rows
 *  remain in the table after this deletion, the whole table is deleted.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TableCellLocation *tableCellLocation;

@end


/**
 *  A magnitude in a single direction in the specified units.
 */
@interface GTLRDocs_Dimension : GTLRObject

/**
 *  The magnitude.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *magnitude;

/**
 *  The units for magnitude.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_Dimension_Unit_Pt A point, 1/72 of an inch. (Value:
 *        "PT")
 *    @arg @c kGTLRDocs_Dimension_Unit_UnitUnspecified The units are unknown.
 *        (Value: "UNIT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *unit;

@end


/**
 *  A Google Docs document.
 */
@interface GTLRDocs_Document : GTLRObject

/** Output only. The main body of the document. */
@property(nonatomic, strong, nullable) GTLRDocs_Body *body;

/** Output only. The ID of the document. */
@property(nonatomic, copy, nullable) NSString *documentId;

/** Output only. The style of the document. */
@property(nonatomic, strong, nullable) GTLRDocs_DocumentStyle *documentStyle;

/** Output only. The footers in the document, keyed by footer ID. */
@property(nonatomic, strong, nullable) GTLRDocs_Document_Footers *footers;

/** Output only. The footnotes in the document, keyed by footnote ID. */
@property(nonatomic, strong, nullable) GTLRDocs_Document_Footnotes *footnotes;

/** Output only. The headers in the document, keyed by header ID. */
@property(nonatomic, strong, nullable) GTLRDocs_Document_Headers *headers;

/** Output only. The inline objects in the document, keyed by object ID. */
@property(nonatomic, strong, nullable) GTLRDocs_Document_InlineObjects *inlineObjects;

/** Output only. The lists in the document, keyed by list ID. */
@property(nonatomic, strong, nullable) GTLRDocs_Document_Lists *lists;

/** Output only. The named ranges in the document, keyed by name. */
@property(nonatomic, strong, nullable) GTLRDocs_Document_NamedRanges *namedRanges;

/** Output only. The named styles of the document. */
@property(nonatomic, strong, nullable) GTLRDocs_NamedStyles *namedStyles;

/**
 *  Output only. The positioned objects in the document, keyed by object ID.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Document_PositionedObjects *positionedObjects;

/**
 *  Output only. The revision ID of the document. Can be used in update requests
 *  to specify which revision of a document to apply updates to and how the
 *  request should behave if the document has been edited since that revision.
 *  Only populated if the user has edit access to the document. The revision ID
 *  is not a sequential number but an opaque string. The format of the revision
 *  ID might change over time. A returned revision ID is only guaranteed to be
 *  valid for 24 hours after it has been returned and cannot be shared across
 *  users. If the revision ID is unchanged between calls, then the document has
 *  not changed. Conversely, a changed ID (for the same document and user)
 *  usually means the document has been updated. However, a changed ID can also
 *  be due to internal factors such as ID format changes.
 */
@property(nonatomic, copy, nullable) NSString *revisionId;

/**
 *  Output only. The suggested changes to the style of the document, keyed by
 *  suggestion ID.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Document_SuggestedDocumentStyleChanges *suggestedDocumentStyleChanges;

/**
 *  Output only. The suggested changes to the named styles of the document,
 *  keyed by suggestion ID.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Document_SuggestedNamedStylesChanges *suggestedNamedStylesChanges;

/**
 *  Output only. The suggestions view mode applied to the document. Note: When
 *  editing a document, changes must be based on a document with
 *  SUGGESTIONS_INLINE.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_Document_SuggestionsViewMode_DefaultForCurrentAccess The
 *        SuggestionsViewMode applied to the returned document depends on the
 *        user's current access level. If the user only has view access,
 *        PREVIEW_WITHOUT_SUGGESTIONS is applied. Otherwise, SUGGESTIONS_INLINE
 *        is applied. This is the default suggestions view mode. (Value:
 *        "DEFAULT_FOR_CURRENT_ACCESS")
 *    @arg @c kGTLRDocs_Document_SuggestionsViewMode_PreviewSuggestionsAccepted
 *        The returned document is a preview with all suggested changes
 *        accepted. Requests to retrieve a document using this mode will return
 *        a 403 error if the user does not have permission to view suggested
 *        changes. (Value: "PREVIEW_SUGGESTIONS_ACCEPTED")
 *    @arg @c kGTLRDocs_Document_SuggestionsViewMode_PreviewWithoutSuggestions
 *        The returned document is a preview with all suggested changes rejected
 *        if there are any suggestions in the document. (Value:
 *        "PREVIEW_WITHOUT_SUGGESTIONS")
 *    @arg @c kGTLRDocs_Document_SuggestionsViewMode_SuggestionsInline The
 *        returned document has suggestions inline. Suggested changes will be
 *        differentiated from base content within the document. Requests to
 *        retrieve a document using this mode will return a 403 error if the
 *        user does not have permission to view suggested changes. (Value:
 *        "SUGGESTIONS_INLINE")
 */
@property(nonatomic, copy, nullable) NSString *suggestionsViewMode;

/** The title of the document. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Output only. The footers in the document, keyed by footer ID.
 *
 *  @note This class is documented as having more properties of GTLRDocs_Footer.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_Document_Footers : GTLRObject
@end


/**
 *  Output only. The footnotes in the document, keyed by footnote ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_Footnote. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_Document_Footnotes : GTLRObject
@end


/**
 *  Output only. The headers in the document, keyed by header ID.
 *
 *  @note This class is documented as having more properties of GTLRDocs_Header.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_Document_Headers : GTLRObject
@end


/**
 *  Output only. The inline objects in the document, keyed by object ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_InlineObject. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_Document_InlineObjects : GTLRObject
@end


/**
 *  Output only. The lists in the document, keyed by list ID.
 *
 *  @note This class is documented as having more properties of GTLRDocs_List.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_Document_Lists : GTLRObject
@end


/**
 *  Output only. The named ranges in the document, keyed by name.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_NamedRanges. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_Document_NamedRanges : GTLRObject
@end


/**
 *  Output only. The positioned objects in the document, keyed by object ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_PositionedObject. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_Document_PositionedObjects : GTLRObject
@end


/**
 *  Output only. The suggested changes to the style of the document, keyed by
 *  suggestion ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedDocumentStyle. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_Document_SuggestedDocumentStyleChanges : GTLRObject
@end


/**
 *  Output only. The suggested changes to the named styles of the document,
 *  keyed by suggestion ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedNamedStyles. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_Document_SuggestedNamedStylesChanges : GTLRObject
@end


/**
 *  The style of the document.
 */
@interface GTLRDocs_DocumentStyle : GTLRObject

/**
 *  The background of the document. Documents cannot have a transparent
 *  background color.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Background *background;

/**
 *  The ID of the default footer. If not set, there's no default footer. This
 *  property is read-only.
 */
@property(nonatomic, copy, nullable) NSString *defaultFooterId;

/**
 *  The ID of the default header. If not set, there's no default header. This
 *  property is read-only.
 */
@property(nonatomic, copy, nullable) NSString *defaultHeaderId;

/**
 *  The ID of the footer used only for even pages. The value of
 *  use_even_page_header_footer determines whether to use the default_footer_id
 *  or this value for the footer on even pages. If not set, there's no even page
 *  footer. This property is read-only.
 */
@property(nonatomic, copy, nullable) NSString *evenPageFooterId;

/**
 *  The ID of the header used only for even pages. The value of
 *  use_even_page_header_footer determines whether to use the default_header_id
 *  or this value for the header on even pages. If not set, there's no even page
 *  header. This property is read-only.
 */
@property(nonatomic, copy, nullable) NSString *evenPageHeaderId;

/**
 *  The ID of the footer used only for the first page. If not set then a unique
 *  footer for the first page does not exist. The value of
 *  use_first_page_header_footer determines whether to use the default_footer_id
 *  or this value for the footer on the first page. If not set, there's no first
 *  page footer. This property is read-only.
 */
@property(nonatomic, copy, nullable) NSString *firstPageFooterId;

/**
 *  The ID of the header used only for the first page. If not set then a unique
 *  header for the first page does not exist. The value of
 *  use_first_page_header_footer determines whether to use the default_header_id
 *  or this value for the header on the first page. If not set, there's no first
 *  page header. This property is read-only.
 */
@property(nonatomic, copy, nullable) NSString *firstPageHeaderId;

/**
 *  The bottom page margin. Updating the bottom page margin on the document
 *  style clears the bottom page margin on all section styles.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *marginBottom;

/**
 *  The amount of space between the bottom of the page and the contents of the
 *  footer.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *marginFooter;

/**
 *  The amount of space between the top of the page and the contents of the
 *  header.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *marginHeader;

/**
 *  The left page margin. Updating the left page margin on the document style
 *  clears the left page margin on all section styles. It may also cause columns
 *  to resize in all sections.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *marginLeft;

/**
 *  The right page margin. Updating the right page margin on the document style
 *  clears the right page margin on all section styles. It may also cause
 *  columns to resize in all sections.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *marginRight;

/**
 *  The top page margin. Updating the top page margin on the document style
 *  clears the top page margin on all section styles.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *marginTop;

/**
 *  The page number from which to start counting the number of pages.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageNumberStart;

/** The size of a page in the document. */
@property(nonatomic, strong, nullable) GTLRDocs_Size *pageSize;

/**
 *  Indicates whether DocumentStyle margin_header, SectionStyle margin_header
 *  and DocumentStyle margin_footer, SectionStyle margin_footer are respected.
 *  When false, the default values in the Docs editor for header and footer
 *  margin are used. This property is read-only.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useCustomHeaderFooterMargins;

/**
 *  Indicates whether to use the even page header / footer IDs for the even
 *  pages.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useEvenPageHeaderFooter;

/**
 *  Indicates whether to use the first page header / footer IDs for the first
 *  page.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useFirstPageHeaderFooter;

@end


/**
 *  A mask that indicates which of the fields on the base DocumentStyle have
 *  been changed in this suggestion. For any field set to true, there's a new
 *  suggested value.
 */
@interface GTLRDocs_DocumentStyleSuggestionState : GTLRObject

/**
 *  A mask that indicates which of the fields in background have been changed in
 *  this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_BackgroundSuggestionState *backgroundSuggestionState;

/**
 *  Indicates if there was a suggested change to default_footer_id.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultFooterIdSuggested;

/**
 *  Indicates if there was a suggested change to default_header_id.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultHeaderIdSuggested;

/**
 *  Indicates if there was a suggested change to even_page_footer_id.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *evenPageFooterIdSuggested;

/**
 *  Indicates if there was a suggested change to even_page_header_id.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *evenPageHeaderIdSuggested;

/**
 *  Indicates if there was a suggested change to first_page_footer_id.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *firstPageFooterIdSuggested;

/**
 *  Indicates if there was a suggested change to first_page_header_id.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *firstPageHeaderIdSuggested;

/**
 *  Indicates if there was a suggested change to margin_bottom.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *marginBottomSuggested;

/**
 *  Indicates if there was a suggested change to margin_footer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *marginFooterSuggested;

/**
 *  Indicates if there was a suggested change to margin_header.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *marginHeaderSuggested;

/**
 *  Indicates if there was a suggested change to margin_left.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *marginLeftSuggested;

/**
 *  Indicates if there was a suggested change to margin_right.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *marginRightSuggested;

/**
 *  Indicates if there was a suggested change to margin_top.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *marginTopSuggested;

/**
 *  Indicates if there was a suggested change to page_number_start.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageNumberStartSuggested;

/**
 *  A mask that indicates which of the fields in size have been changed in this
 *  suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_SizeSuggestionState *pageSizeSuggestionState;

/**
 *  Indicates if there was a suggested change to
 *  use_custom_header_footer_margins.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useCustomHeaderFooterMarginsSuggested;

/**
 *  Indicates if there was a suggested change to use_even_page_header_footer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useEvenPageHeaderFooterSuggested;

/**
 *  Indicates if there was a suggested change to use_first_page_header_footer.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useFirstPageHeaderFooterSuggested;

@end


/**
 *  The properties of an embedded drawing and used to differentiate the object
 *  type. An embedded drawing is one that's created and edited within a
 *  document. Note that extensive details are not supported.
 */
@interface GTLRDocs_EmbeddedDrawingProperties : GTLRObject
@end


/**
 *  A mask that indicates which of the fields on the base
 *  EmbeddedDrawingProperties have been changed in this suggestion. For any
 *  field set to true, there's a new suggested value.
 */
@interface GTLRDocs_EmbeddedDrawingPropertiesSuggestionState : GTLRObject
@end


/**
 *  An embedded object in the document.
 */
@interface GTLRDocs_EmbeddedObject : GTLRObject

/**
 *  The description of the embedded object. The `title` and `description` are
 *  both combined to display alt text.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** The properties of an embedded drawing. */
@property(nonatomic, strong, nullable) GTLRDocs_EmbeddedDrawingProperties *embeddedDrawingProperties;

/** The border of the embedded object. */
@property(nonatomic, strong, nullable) GTLRDocs_EmbeddedObjectBorder *embeddedObjectBorder;

/** The properties of an image. */
@property(nonatomic, strong, nullable) GTLRDocs_ImageProperties *imageProperties;

/**
 *  A reference to the external linked source content. For example, it contains
 *  a reference to the source Google Sheets chart when the embedded object is a
 *  linked chart. If unset, then the embedded object is not linked.
 */
@property(nonatomic, strong, nullable) GTLRDocs_LinkedContentReference *linkedContentReference;

/** The bottom margin of the embedded object. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *marginBottom;

/** The left margin of the embedded object. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *marginLeft;

/** The right margin of the embedded object. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *marginRight;

/** The top margin of the embedded object. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *marginTop;

/** The visible size of the image after cropping. */
@property(nonatomic, strong, nullable) GTLRDocs_Size *size;

/**
 *  The title of the embedded object. The `title` and `description` are both
 *  combined to display alt text.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  A border around an EmbeddedObject.
 */
@interface GTLRDocs_EmbeddedObjectBorder : GTLRObject

/** The color of the border. */
@property(nonatomic, strong, nullable) GTLRDocs_OptionalColor *color;

/**
 *  The dash style of the border.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_EmbeddedObjectBorder_DashStyle_Dash Dashed line.
 *        Corresponds to ECMA-376 ST_PresetLineDashVal value 'dash'. (Value:
 *        "DASH")
 *    @arg @c kGTLRDocs_EmbeddedObjectBorder_DashStyle_DashStyleUnspecified
 *        Unspecified dash style. (Value: "DASH_STYLE_UNSPECIFIED")
 *    @arg @c kGTLRDocs_EmbeddedObjectBorder_DashStyle_Dot Dotted line.
 *        Corresponds to ECMA-376 ST_PresetLineDashVal value 'dot'. (Value:
 *        "DOT")
 *    @arg @c kGTLRDocs_EmbeddedObjectBorder_DashStyle_Solid Solid line.
 *        Corresponds to ECMA-376 ST_PresetLineDashVal value 'solid'. This is
 *        the default dash style. (Value: "SOLID")
 */
@property(nonatomic, copy, nullable) NSString *dashStyle;

/**
 *  The property state of the border property.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_EmbeddedObjectBorder_PropertyState_NotRendered If a
 *        property's state is NOT_RENDERED, then the element does not have the
 *        corresponding property when rendered in the document. (Value:
 *        "NOT_RENDERED")
 *    @arg @c kGTLRDocs_EmbeddedObjectBorder_PropertyState_Rendered If a
 *        property's state is RENDERED, then the element has the corresponding
 *        property when rendered in the document. This is the default value.
 *        (Value: "RENDERED")
 */
@property(nonatomic, copy, nullable) NSString *propertyState;

/** The width of the border. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *width;

@end


/**
 *  A mask that indicates which of the fields on the base EmbeddedObjectBorder
 *  have been changed in this suggestion. For any field set to true, there's a
 *  new suggested value.
 */
@interface GTLRDocs_EmbeddedObjectBorderSuggestionState : GTLRObject

/**
 *  Indicates if there was a suggested change to color.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *colorSuggested;

/**
 *  Indicates if there was a suggested change to dash_style.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dashStyleSuggested;

/**
 *  Indicates if there was a suggested change to property_state.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *propertyStateSuggested;

/**
 *  Indicates if there was a suggested change to width.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *widthSuggested;

@end


/**
 *  A mask that indicates which of the fields on the base EmbeddedObject have
 *  been changed in this suggestion. For any field set to true, there's a new
 *  suggested value.
 */
@interface GTLRDocs_EmbeddedObjectSuggestionState : GTLRObject

/**
 *  Indicates if there was a suggested change to description.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *descriptionSuggested;

/**
 *  A mask that indicates which of the fields in embedded_drawing_properties
 *  have been changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_EmbeddedDrawingPropertiesSuggestionState *embeddedDrawingPropertiesSuggestionState;

/**
 *  A mask that indicates which of the fields in embedded_object_border have
 *  been changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_EmbeddedObjectBorderSuggestionState *embeddedObjectBorderSuggestionState;

/**
 *  A mask that indicates which of the fields in image_properties have been
 *  changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_ImagePropertiesSuggestionState *imagePropertiesSuggestionState;

/**
 *  A mask that indicates which of the fields in linked_content_reference have
 *  been changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_LinkedContentReferenceSuggestionState *linkedContentReferenceSuggestionState;

/**
 *  Indicates if there was a suggested change to margin_bottom.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *marginBottomSuggested;

/**
 *  Indicates if there was a suggested change to margin_left.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *marginLeftSuggested;

/**
 *  Indicates if there was a suggested change to margin_right.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *marginRightSuggested;

/**
 *  Indicates if there was a suggested change to margin_top.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *marginTopSuggested;

/**
 *  A mask that indicates which of the fields in size have been changed in this
 *  suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_SizeSuggestionState *sizeSuggestionState;

/**
 *  Indicates if there was a suggested change to title.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *titleSuggested;

@end


/**
 *  Location at the end of a body, header, footer or footnote. The location is
 *  immediately before the last newline in the document segment.
 */
@interface GTLRDocs_EndOfSegmentLocation : GTLRObject

/**
 *  The ID of the header, footer or footnote the location is in. An empty
 *  segment ID signifies the document's body.
 */
@property(nonatomic, copy, nullable) NSString *segmentId;

@end


/**
 *  A ParagraphElement representing an equation.
 */
@interface GTLRDocs_Equation : GTLRObject

/**
 *  The suggested deletion IDs. If empty, then there are no suggested deletions
 *  of this content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  The suggested insertion IDs. An Equation may have multiple insertion IDs if
 *  it's a nested suggested change. If empty, then this is not a suggested
 *  insertion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedInsertionIds;

@end


/**
 *  A document footer.
 */
@interface GTLRDocs_Footer : GTLRObject

/**
 *  The contents of the footer. The indexes for a footer's content begin at
 *  zero.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_StructuralElement *> *content;

/** The ID of the footer. */
@property(nonatomic, copy, nullable) NSString *footerId;

@end


/**
 *  A document footnote.
 */
@interface GTLRDocs_Footnote : GTLRObject

/**
 *  The contents of the footnote. The indexes for a footnote's content begin at
 *  zero.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_StructuralElement *> *content;

/** The ID of the footnote. */
@property(nonatomic, copy, nullable) NSString *footnoteId;

@end


/**
 *  A ParagraphElement representing a footnote reference. A footnote reference
 *  is the inline content rendered with a number and is used to identify the
 *  footnote.
 */
@interface GTLRDocs_FootnoteReference : GTLRObject

/**
 *  The ID of the footnote that contains the content of this footnote reference.
 */
@property(nonatomic, copy, nullable) NSString *footnoteId;

/** The rendered number of this footnote. */
@property(nonatomic, copy, nullable) NSString *footnoteNumber;

/**
 *  The suggested deletion IDs. If empty, then there are no suggested deletions
 *  of this content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  The suggested insertion IDs. A FootnoteReference may have multiple insertion
 *  IDs if it's a nested suggested change. If empty, then this is not a
 *  suggested insertion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedInsertionIds;

/**
 *  The suggested text style changes to this FootnoteReference, keyed by
 *  suggestion ID.
 */
@property(nonatomic, strong, nullable) GTLRDocs_FootnoteReference_SuggestedTextStyleChanges *suggestedTextStyleChanges;

/** The text style of this FootnoteReference. */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyle *textStyle;

@end


/**
 *  The suggested text style changes to this FootnoteReference, keyed by
 *  suggestion ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedTextStyle. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_FootnoteReference_SuggestedTextStyleChanges : GTLRObject
@end


/**
 *  A document header.
 */
@interface GTLRDocs_Header : GTLRObject

/**
 *  The contents of the header. The indexes for a header's content begin at
 *  zero.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_StructuralElement *> *content;

/** The ID of the header. */
@property(nonatomic, copy, nullable) NSString *headerId;

@end


/**
 *  A ParagraphElement representing a horizontal line.
 */
@interface GTLRDocs_HorizontalRule : GTLRObject

/**
 *  The suggested deletion IDs. If empty, then there are no suggested deletions
 *  of this content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  The suggested insertion IDs. A HorizontalRule may have multiple insertion
 *  IDs if it is a nested suggested change. If empty, then this is not a
 *  suggested insertion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedInsertionIds;

/**
 *  The suggested text style changes to this HorizontalRule, keyed by suggestion
 *  ID.
 */
@property(nonatomic, strong, nullable) GTLRDocs_HorizontalRule_SuggestedTextStyleChanges *suggestedTextStyleChanges;

/**
 *  The text style of this HorizontalRule. Similar to text content, like text
 *  runs and footnote references, the text style of a horizontal rule can affect
 *  content layout as well as the styling of text inserted next to it.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyle *textStyle;

@end


/**
 *  The suggested text style changes to this HorizontalRule, keyed by suggestion
 *  ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedTextStyle. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_HorizontalRule_SuggestedTextStyleChanges : GTLRObject
@end


/**
 *  The properties of an image.
 */
@interface GTLRDocs_ImageProperties : GTLRObject

/**
 *  The clockwise rotation angle of the image, in radians.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *angle;

/**
 *  The brightness effect of the image. The value should be in the interval
 *  [-1.0, 1.0], where 0 means no effect.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *brightness;

/**
 *  A URI to the image with a default lifetime of 30 minutes. This URI is tagged
 *  with the account of the requester. Anyone with the URI effectively accesses
 *  the image as the original requester. Access to the image may be lost if the
 *  document's sharing settings change.
 */
@property(nonatomic, copy, nullable) NSString *contentUri;

/**
 *  The contrast effect of the image. The value should be in the interval [-1.0,
 *  1.0], where 0 means no effect.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *contrast;

/** The crop properties of the image. */
@property(nonatomic, strong, nullable) GTLRDocs_CropProperties *cropProperties;

/**
 *  The source URI is the URI used to insert the image. The source URI can be
 *  empty.
 */
@property(nonatomic, copy, nullable) NSString *sourceUri;

/**
 *  The transparency effect of the image. The value should be in the interval
 *  [0.0, 1.0], where 0 means no effect and 1 means transparent.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *transparency;

@end


/**
 *  A mask that indicates which of the fields on the base ImageProperties have
 *  been changed in this suggestion. For any field set to true, there's a new
 *  suggested value.
 */
@interface GTLRDocs_ImagePropertiesSuggestionState : GTLRObject

/**
 *  Indicates if there was a suggested change to angle.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *angleSuggested;

/**
 *  Indicates if there was a suggested change to brightness.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *brightnessSuggested;

/**
 *  Indicates if there was a suggested change to content_uri.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *contentUriSuggested;

/**
 *  Indicates if there was a suggested change to contrast.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *contrastSuggested;

/**
 *  A mask that indicates which of the fields in crop_properties have been
 *  changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_CropPropertiesSuggestionState *cropPropertiesSuggestionState;

/**
 *  Indicates if there was a suggested change to source_uri.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sourceUriSuggested;

/**
 *  Indicates if there was a suggested change to transparency.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *transparencySuggested;

@end


/**
 *  An object that appears inline with text. An InlineObject contains an
 *  EmbeddedObject such as an image.
 */
@interface GTLRDocs_InlineObject : GTLRObject

/** The properties of this inline object. */
@property(nonatomic, strong, nullable) GTLRDocs_InlineObjectProperties *inlineObjectProperties;

/**
 *  The ID of this inline object. Can be used to update an object’s properties.
 */
@property(nonatomic, copy, nullable) NSString *objectId;

/**
 *  The suggested deletion IDs. If empty, then there are no suggested deletions
 *  of this content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  The suggested changes to the inline object properties, keyed by suggestion
 *  ID.
 */
@property(nonatomic, strong, nullable) GTLRDocs_InlineObject_SuggestedInlineObjectPropertiesChanges *suggestedInlineObjectPropertiesChanges;

/**
 *  The suggested insertion ID. If empty, then this is not a suggested
 *  insertion.
 */
@property(nonatomic, copy, nullable) NSString *suggestedInsertionId;

@end


/**
 *  The suggested changes to the inline object properties, keyed by suggestion
 *  ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedInlineObjectProperties. Use @c -additionalJSONKeys
 *        and @c -additionalPropertyForName: to get the list of properties and
 *        then fetch them; or @c -additionalProperties to fetch them all at
 *        once.
 */
@interface GTLRDocs_InlineObject_SuggestedInlineObjectPropertiesChanges : GTLRObject
@end


/**
 *  A ParagraphElement that contains an InlineObject.
 */
@interface GTLRDocs_InlineObjectElement : GTLRObject

/** The ID of the InlineObject this element contains. */
@property(nonatomic, copy, nullable) NSString *inlineObjectId;

/**
 *  The suggested deletion IDs. If empty, then there are no suggested deletions
 *  of this content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  The suggested insertion IDs. An InlineObjectElement may have multiple
 *  insertion IDs if it's a nested suggested change. If empty, then this is not
 *  a suggested insertion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedInsertionIds;

/**
 *  The suggested text style changes to this InlineObject, keyed by suggestion
 *  ID.
 */
@property(nonatomic, strong, nullable) GTLRDocs_InlineObjectElement_SuggestedTextStyleChanges *suggestedTextStyleChanges;

/**
 *  The text style of this InlineObjectElement. Similar to text content, like
 *  text runs and footnote references, the text style of an inline object
 *  element can affect content layout as well as the styling of text inserted
 *  next to it.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyle *textStyle;

@end


/**
 *  The suggested text style changes to this InlineObject, keyed by suggestion
 *  ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedTextStyle. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_InlineObjectElement_SuggestedTextStyleChanges : GTLRObject
@end


/**
 *  Properties of an InlineObject.
 */
@interface GTLRDocs_InlineObjectProperties : GTLRObject

/** The embedded object of this inline object. */
@property(nonatomic, strong, nullable) GTLRDocs_EmbeddedObject *embeddedObject;

@end


/**
 *  A mask that indicates which of the fields on the base InlineObjectProperties
 *  have been changed in this suggestion. For any field set to true, there's a
 *  new suggested value.
 */
@interface GTLRDocs_InlineObjectPropertiesSuggestionState : GTLRObject

/**
 *  A mask that indicates which of the fields in embedded_object have been
 *  changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_EmbeddedObjectSuggestionState *embeddedObjectSuggestionState;

@end


/**
 *  Inserts an InlineObject containing an image at the given location.
 */
@interface GTLRDocs_InsertInlineImageRequest : GTLRObject

/**
 *  Inserts the text at the end of a header, footer or the document body. Inline
 *  images cannot be inserted inside a footnote.
 */
@property(nonatomic, strong, nullable) GTLRDocs_EndOfSegmentLocation *endOfSegmentLocation;

/**
 *  Inserts the image at a specific index in the document. The image must be
 *  inserted inside the bounds of an existing Paragraph. For instance, it cannot
 *  be inserted at a table's start index (i.e. between the table and its
 *  preceding paragraph). Inline images cannot be inserted inside a footnote or
 *  equation.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Location *location;

/**
 *  The size that the image should appear as in the document. This property is
 *  optional and the final size of the image in the document is determined by
 *  the following rules: * If neither width nor height is specified, then a
 *  default size of the image is calculated based on its resolution. * If one
 *  dimension is specified then the other dimension is calculated to preserve
 *  the aspect ratio of the image. * If both width and height are specified, the
 *  image is scaled to fit within the provided dimensions while maintaining its
 *  aspect ratio.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Size *objectSize;

/**
 *  The image URI. The image is fetched once at insertion time and a copy is
 *  stored for display inside the document. Images must be less than 50MB in
 *  size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF
 *  format. The provided URI can be at most 2 kB in length. The URI itself is
 *  saved with the image, and exposed via the ImageProperties.content_uri field.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  The result of inserting an inline image.
 */
@interface GTLRDocs_InsertInlineImageResponse : GTLRObject

/** The ID of the created InlineObject. */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  The result of inserting an embedded Google Sheets chart.
 */
@interface GTLRDocs_InsertInlineSheetsChartResponse : GTLRObject

/** The object ID of the inserted chart. */
@property(nonatomic, copy, nullable) NSString *objectId;

@end


/**
 *  Inserts a page break followed by a newline at the specified location.
 */
@interface GTLRDocs_InsertPageBreakRequest : GTLRObject

/**
 *  Inserts the page break at the end of the document body. Page breaks cannot
 *  be inserted inside a footnote, header or footer. Since page breaks can only
 *  be inserted inside the body, the segment ID field must be empty.
 */
@property(nonatomic, strong, nullable) GTLRDocs_EndOfSegmentLocation *endOfSegmentLocation;

/**
 *  Inserts the page break at a specific index in the document. The page break
 *  must be inserted inside the bounds of an existing Paragraph. For instance,
 *  it cannot be inserted at a table's start index (i.e. between the table and
 *  its preceding paragraph). Page breaks cannot be inserted inside a table,
 *  equation, footnote, header or footer. Since page breaks can only be inserted
 *  inside the body, the segment ID field must be empty.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Location *location;

@end


/**
 *  Inserts a section break at the given location. A newline character will be
 *  inserted before the section break.
 */
@interface GTLRDocs_InsertSectionBreakRequest : GTLRObject

/**
 *  Inserts a newline and a section break at the end of the document body.
 *  Section breaks cannot be inserted inside a footnote, header or footer.
 *  Because section breaks can only be inserted inside the body, the segment ID
 *  field must be empty.
 */
@property(nonatomic, strong, nullable) GTLRDocs_EndOfSegmentLocation *endOfSegmentLocation;

/**
 *  Inserts a newline and a section break at a specific index in the document.
 *  The section break must be inserted inside the bounds of an existing
 *  Paragraph. For instance, it cannot be inserted at a table's start index
 *  (i.e. between the table and its preceding paragraph). Section breaks cannot
 *  be inserted inside a table, equation, footnote, header, or footer. Since
 *  section breaks can only be inserted inside the body, the segment ID field
 *  must be empty.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Location *location;

/**
 *  The type of section to insert.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_InsertSectionBreakRequest_SectionType_Continuous The
 *        section starts immediately after the last paragraph of the previous
 *        section. (Value: "CONTINUOUS")
 *    @arg @c kGTLRDocs_InsertSectionBreakRequest_SectionType_NextPage The
 *        section starts on the next page. (Value: "NEXT_PAGE")
 *    @arg @c kGTLRDocs_InsertSectionBreakRequest_SectionType_SectionTypeUnspecified
 *        The section type is unspecified. (Value: "SECTION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *sectionType;

@end


/**
 *  Inserts an empty column into a table.
 */
@interface GTLRDocs_InsertTableColumnRequest : GTLRObject

/**
 *  Whether to insert new column to the right of the reference cell location. -
 *  `True`: insert to the right. - `False`: insert to the left.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *insertRight;

/**
 *  The reference table cell location from which columns will be inserted. A new
 *  column will be inserted to the left (or right) of the column where the
 *  reference cell is. If the reference cell is a merged cell, a new column will
 *  be inserted to the left (or right) of the merged cell.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TableCellLocation *tableCellLocation;

@end


/**
 *  Inserts a table at the specified location. A newline character will be
 *  inserted before the inserted table.
 */
@interface GTLRDocs_InsertTableRequest : GTLRObject

/**
 *  The number of columns in the table.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columns;

/**
 *  Inserts the table at the end of the given header, footer or document body. A
 *  newline character will be inserted before the inserted table. Tables cannot
 *  be inserted inside a footnote.
 */
@property(nonatomic, strong, nullable) GTLRDocs_EndOfSegmentLocation *endOfSegmentLocation;

/**
 *  Inserts the table at a specific model index. A newline character will be
 *  inserted before the inserted table, therefore the table start index will be
 *  at the specified location index + 1. The table must be inserted inside the
 *  bounds of an existing Paragraph. For instance, it cannot be inserted at a
 *  table's start index (i.e. between an existing table and its preceding
 *  paragraph). Tables cannot be inserted inside a footnote or equation.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Location *location;

/**
 *  The number of rows in the table.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rows;

@end


/**
 *  Inserts an empty row into a table.
 */
@interface GTLRDocs_InsertTableRowRequest : GTLRObject

/**
 *  Whether to insert new row below the reference cell location. - `True`:
 *  insert below the cell. - `False`: insert above the cell.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *insertBelow;

/**
 *  The reference table cell location from which rows will be inserted. A new
 *  row will be inserted above (or below) the row where the reference cell is.
 *  If the reference cell is a merged cell, a new row will be inserted above (or
 *  below) the merged cell.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TableCellLocation *tableCellLocation;

@end


/**
 *  Inserts text at the specified location.
 */
@interface GTLRDocs_InsertTextRequest : GTLRObject

/**
 *  Inserts the text at the end of a header, footer, footnote or the document
 *  body.
 */
@property(nonatomic, strong, nullable) GTLRDocs_EndOfSegmentLocation *endOfSegmentLocation;

/**
 *  Inserts the text at a specific index in the document. Text must be inserted
 *  inside the bounds of an existing Paragraph. For instance, text cannot be
 *  inserted at a table's start index (i.e. between the table and its preceding
 *  paragraph). The text must be inserted in the preceding paragraph.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Location *location;

/**
 *  The text to be inserted. Inserting a newline character will implicitly
 *  create a new Paragraph at that index. The paragraph style of the new
 *  paragraph will be copied from the paragraph at the current insertion index,
 *  including lists and bullets. Text styles for inserted text will be
 *  determined automatically, generally preserving the styling of neighboring
 *  text. In most cases, the text style for the inserted text will match the
 *  text immediately before the insertion index. Some control characters
 *  (U+0000-U+0008, U+000C-U+001F) and characters from the Unicode Basic
 *  Multilingual Plane Private Use Area (U+E000-U+F8FF) will be stripped out of
 *  the inserted text.
 */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A reference to another portion of a document or an external URL resource.
 */
@interface GTLRDocs_Link : GTLRObject

/** The ID of a bookmark in this document. */
@property(nonatomic, copy, nullable) NSString *bookmarkId;

/** The ID of a heading in this document. */
@property(nonatomic, copy, nullable) NSString *headingId;

/** An external URL. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  A reference to the external linked source content.
 */
@interface GTLRDocs_LinkedContentReference : GTLRObject

/** A reference to the linked chart. */
@property(nonatomic, strong, nullable) GTLRDocs_SheetsChartReference *sheetsChartReference;

@end


/**
 *  A mask that indicates which of the fields on the base LinkedContentReference
 *  have been changed in this suggestion. For any field set to true, there's a
 *  new suggested value.
 */
@interface GTLRDocs_LinkedContentReferenceSuggestionState : GTLRObject

/**
 *  A mask that indicates which of the fields in sheets_chart_reference have
 *  been changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_SheetsChartReferenceSuggestionState *sheetsChartReferenceSuggestionState;

@end


/**
 *  A List represents the list attributes for a group of paragraphs that all
 *  belong to the same list. A paragraph that's part of a list has a reference
 *  to the list's ID in its bullet.
 */
@interface GTLRDocs_List : GTLRObject

/** The properties of the list. */
@property(nonatomic, strong, nullable) GTLRDocs_ListProperties *listProperties;

/**
 *  The suggested deletion IDs. If empty, then there are no suggested deletions
 *  of this list.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  The suggested insertion ID. If empty, then this is not a suggested
 *  insertion.
 */
@property(nonatomic, copy, nullable) NSString *suggestedInsertionId;

/** The suggested changes to the list properties, keyed by suggestion ID. */
@property(nonatomic, strong, nullable) GTLRDocs_List_SuggestedListPropertiesChanges *suggestedListPropertiesChanges;

@end


/**
 *  The suggested changes to the list properties, keyed by suggestion ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedListProperties. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_List_SuggestedListPropertiesChanges : GTLRObject
@end


/**
 *  The properties of a list that describe the look and feel of bullets
 *  belonging to paragraphs associated with a list.
 */
@interface GTLRDocs_ListProperties : GTLRObject

/**
 *  Describes the properties of the bullets at the associated level. A list has
 *  at most 9 levels of nesting with nesting level 0 corresponding to the
 *  top-most level and nesting level 8 corresponding to the most nested level.
 *  The nesting levels are returned in ascending order with the least nested
 *  returned first.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_NestingLevel *> *nestingLevels;

@end


/**
 *  A mask that indicates which of the fields on the base ListProperties have
 *  been changed in this suggestion. For any field set to true, there's a new
 *  suggested value.
 */
@interface GTLRDocs_ListPropertiesSuggestionState : GTLRObject

/**
 *  A mask that indicates which of the fields on the corresponding NestingLevel
 *  in nesting_levels have been changed in this suggestion. The nesting level
 *  suggestion states are returned in ascending order of the nesting level with
 *  the least nested returned first.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_NestingLevelSuggestionState *> *nestingLevelsSuggestionStates;

@end


/**
 *  A particular location in the document.
 */
@interface GTLRDocs_Location : GTLRObject

/**
 *  The zero-based index, in UTF-16 code units. The index is relative to the
 *  beginning of the segment specified by segment_id.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *index;

/**
 *  The ID of the header, footer or footnote the location is in. An empty
 *  segment ID signifies the document's body.
 */
@property(nonatomic, copy, nullable) NSString *segmentId;

@end


/**
 *  Merges cells in a Table.
 */
@interface GTLRDocs_MergeTableCellsRequest : GTLRObject

/**
 *  The table range specifying which cells of the table to merge. Any text in
 *  the cells being merged will be concatenated and stored in the "head" cell of
 *  the range. This is the upper-left cell of the range when the content
 *  direction is left to right, and the upper-right cell of the range otherwise.
 *  If the range is non-rectangular (which can occur in some cases where the
 *  range covers cells that are already merged or where the table is
 *  non-rectangular), a 400 bad request error is returned.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TableRange *tableRange;

@end


/**
 *  A collection of Ranges with the same named range ID. Named ranges allow
 *  developers to associate parts of a document with an arbitrary user-defined
 *  label so their contents can be programmatically read or edited later. A
 *  document can contain multiple named ranges with the same name, but every
 *  named range has a unique ID. A named range is created with a single Range,
 *  and content inserted inside a named range generally expands that range.
 *  However, certain document changes can cause the range to be split into
 *  multiple ranges. Named ranges are not private. All applications and
 *  collaborators that have access to the document can see its named ranges.
 */
@interface GTLRDocs_NamedRange : GTLRObject

/** The name of the named range. */
@property(nonatomic, copy, nullable) NSString *name;

/** The ID of the named range. */
@property(nonatomic, copy, nullable) NSString *namedRangeId;

/** The ranges that belong to this named range. */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_Range *> *ranges;

@end


/**
 *  A collection of all the NamedRanges in the document that share a given name.
 */
@interface GTLRDocs_NamedRanges : GTLRObject

/** The name that all the named ranges share. */
@property(nonatomic, copy, nullable) NSString *name;

/** The NamedRanges that share the same name. */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_NamedRange *> *namedRanges;

@end


/**
 *  A named style. Paragraphs in the document can inherit their TextStyle and
 *  ParagraphStyle from this named style when they have the same named style
 *  type.
 */
@interface GTLRDocs_NamedStyle : GTLRObject

/**
 *  The type of this named style.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_NamedStyle_NamedStyleType_Heading1 Heading 1. (Value:
 *        "HEADING_1")
 *    @arg @c kGTLRDocs_NamedStyle_NamedStyleType_Heading2 Heading 2. (Value:
 *        "HEADING_2")
 *    @arg @c kGTLRDocs_NamedStyle_NamedStyleType_Heading3 Heading 3. (Value:
 *        "HEADING_3")
 *    @arg @c kGTLRDocs_NamedStyle_NamedStyleType_Heading4 Heading 4. (Value:
 *        "HEADING_4")
 *    @arg @c kGTLRDocs_NamedStyle_NamedStyleType_Heading5 Heading 5. (Value:
 *        "HEADING_5")
 *    @arg @c kGTLRDocs_NamedStyle_NamedStyleType_Heading6 Heading 6. (Value:
 *        "HEADING_6")
 *    @arg @c kGTLRDocs_NamedStyle_NamedStyleType_NamedStyleTypeUnspecified The
 *        type of named style is unspecified. (Value:
 *        "NAMED_STYLE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDocs_NamedStyle_NamedStyleType_NormalText Normal text.
 *        (Value: "NORMAL_TEXT")
 *    @arg @c kGTLRDocs_NamedStyle_NamedStyleType_Subtitle Subtitle. (Value:
 *        "SUBTITLE")
 *    @arg @c kGTLRDocs_NamedStyle_NamedStyleType_Title Title. (Value: "TITLE")
 */
@property(nonatomic, copy, nullable) NSString *namedStyleType;

/** The paragraph style of this named style. */
@property(nonatomic, strong, nullable) GTLRDocs_ParagraphStyle *paragraphStyle;

/** The text style of this named style. */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyle *textStyle;

@end


/**
 *  The named styles. Paragraphs in the document can inherit their TextStyle and
 *  ParagraphStyle from these named styles.
 */
@interface GTLRDocs_NamedStyles : GTLRObject

/**
 *  The named styles. There's an entry for each of the possible named style
 *  types.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_NamedStyle *> *styles;

@end


/**
 *  The suggestion state of a NamedStyles message.
 */
@interface GTLRDocs_NamedStylesSuggestionState : GTLRObject

/**
 *  A mask that indicates which of the fields on the corresponding NamedStyle in
 *  styles have been changed in this suggestion. The order of these named style
 *  suggestion states matches the order of the corresponding named style within
 *  the named styles suggestion.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_NamedStyleSuggestionState *> *stylesSuggestionStates;

@end


/**
 *  A suggestion state of a NamedStyle message.
 */
@interface GTLRDocs_NamedStyleSuggestionState : GTLRObject

/**
 *  The named style type that this suggestion state corresponds to. This field
 *  is provided as a convenience for matching the NamedStyleSuggestionState with
 *  its corresponding NamedStyle.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_Heading1
 *        Heading 1. (Value: "HEADING_1")
 *    @arg @c kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_Heading2
 *        Heading 2. (Value: "HEADING_2")
 *    @arg @c kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_Heading3
 *        Heading 3. (Value: "HEADING_3")
 *    @arg @c kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_Heading4
 *        Heading 4. (Value: "HEADING_4")
 *    @arg @c kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_Heading5
 *        Heading 5. (Value: "HEADING_5")
 *    @arg @c kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_Heading6
 *        Heading 6. (Value: "HEADING_6")
 *    @arg @c kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_NamedStyleTypeUnspecified
 *        The type of named style is unspecified. (Value:
 *        "NAMED_STYLE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_NormalText
 *        Normal text. (Value: "NORMAL_TEXT")
 *    @arg @c kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_Subtitle
 *        Subtitle. (Value: "SUBTITLE")
 *    @arg @c kGTLRDocs_NamedStyleSuggestionState_NamedStyleType_Title Title.
 *        (Value: "TITLE")
 */
@property(nonatomic, copy, nullable) NSString *namedStyleType;

/**
 *  A mask that indicates which of the fields in paragraph style have been
 *  changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_ParagraphStyleSuggestionState *paragraphStyleSuggestionState;

/**
 *  A mask that indicates which of the fields in text style have been changed in
 *  this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyleSuggestionState *textStyleSuggestionState;

@end


/**
 *  Contains properties describing the look and feel of a list bullet at a given
 *  level of nesting.
 */
@interface GTLRDocs_NestingLevel : GTLRObject

/**
 *  The alignment of the bullet within the space allotted for rendering the
 *  bullet.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_NestingLevel_BulletAlignment_BulletAlignmentUnspecified
 *        The bullet alignment is unspecified. (Value:
 *        "BULLET_ALIGNMENT_UNSPECIFIED")
 *    @arg @c kGTLRDocs_NestingLevel_BulletAlignment_Center The bullet is
 *        aligned to the center of the space allotted for rendering the bullet.
 *        (Value: "CENTER")
 *    @arg @c kGTLRDocs_NestingLevel_BulletAlignment_End The bullet is aligned
 *        to the end of the space allotted for rendering the bullet.
 *        Right-aligned for LTR text, left-aligned otherwise. (Value: "END")
 *    @arg @c kGTLRDocs_NestingLevel_BulletAlignment_Start The bullet is aligned
 *        to the start of the space allotted for rendering the bullet.
 *        Left-aligned for LTR text, right-aligned otherwise. (Value: "START")
 */
@property(nonatomic, copy, nullable) NSString *bulletAlignment;

/**
 *  The format string used by bullets at this level of nesting. The glyph format
 *  contains one or more placeholders, and these placeholders are replaced with
 *  the appropriate values depending on the glyph_type or glyph_symbol. The
 *  placeholders follow the pattern `%[nesting_level]`. Furthermore,
 *  placeholders can have prefixes and suffixes. Thus, the glyph format follows
 *  the pattern `%[nesting_level]`. Note that the prefix and suffix are optional
 *  and can be arbitrary strings. For example, the glyph format `%0.` indicates
 *  that the rendered glyph will replace the placeholder with the corresponding
 *  glyph for nesting level 0 followed by a period as the suffix. So a list with
 *  a glyph type of UPPER_ALPHA and glyph format `%0.` at nesting level 0 will
 *  result in a list with rendered glyphs `A.` `B.` `C.` The glyph format can
 *  contain placeholders for the current nesting level as well as placeholders
 *  for parent nesting levels. For example, a list can have a glyph format of
 *  `%0.` at nesting level 0 and a glyph format of `%0.%1.` at nesting level 1.
 *  Assuming both nesting levels have DECIMAL glyph types, this would result in
 *  a list with rendered glyphs `1.` `2.` ` 2.1.` ` 2.2.` `3.` For nesting
 *  levels that are ordered, the string that replaces a placeholder in the glyph
 *  format for a particular paragraph depends on the paragraph's order within
 *  the list.
 */
@property(nonatomic, copy, nullable) NSString *glyphFormat;

/**
 *  A custom glyph symbol used by bullets when paragraphs at this level of
 *  nesting are unordered. The glyph symbol replaces placeholders within the
 *  glyph_format. For example, if the glyph_symbol is the solid circle
 *  corresponding to Unicode U+25cf code point and the glyph_format is `%0`, the
 *  rendered glyph would be the solid circle.
 */
@property(nonatomic, copy, nullable) NSString *glyphSymbol;

/**
 *  The type of glyph used by bullets when paragraphs at this level of nesting
 *  are ordered. The glyph type determines the type of glyph used to replace
 *  placeholders within the glyph_format when paragraphs at this level of
 *  nesting are ordered. For example, if the nesting level is 0, the
 *  glyph_format is `%0.` and the glyph type is DECIMAL, then the rendered glyph
 *  would replace the placeholder `%0` in the glyph format with a number
 *  corresponding to list item's order within the list.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_NestingLevel_GlyphType_Alpha A lowercase letter, like
 *        `a`, `b`, or `c`. (Value: "ALPHA")
 *    @arg @c kGTLRDocs_NestingLevel_GlyphType_Decimal A number, like `1`, `2`,
 *        or `3`. (Value: "DECIMAL")
 *    @arg @c kGTLRDocs_NestingLevel_GlyphType_GlyphTypeUnspecified The glyph
 *        type is unspecified or unsupported. (Value: "GLYPH_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDocs_NestingLevel_GlyphType_None An empty string. (Value:
 *        "NONE")
 *    @arg @c kGTLRDocs_NestingLevel_GlyphType_Roman A lowercase Roman numeral,
 *        like `i`, `ii`, or `iii`. (Value: "ROMAN")
 *    @arg @c kGTLRDocs_NestingLevel_GlyphType_UpperAlpha An uppercase letter,
 *        like `A`, `B`, or `C`. (Value: "UPPER_ALPHA")
 *    @arg @c kGTLRDocs_NestingLevel_GlyphType_UpperRoman An uppercase Roman
 *        numeral, like `I`, `II`, or `III`. (Value: "UPPER_ROMAN")
 *    @arg @c kGTLRDocs_NestingLevel_GlyphType_ZeroDecimal A number where single
 *        digit numbers are prefixed with a zero, like `01`, `02`, or `03`.
 *        Numbers with more than one digit are not prefixed with a zero. (Value:
 *        "ZERO_DECIMAL")
 */
@property(nonatomic, copy, nullable) NSString *glyphType;

/**
 *  The amount of indentation for the first line of paragraphs at this level of
 *  nesting.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *indentFirstLine;

/**
 *  The amount of indentation for paragraphs at this level of nesting. Applied
 *  to the side that corresponds to the start of the text, based on the
 *  paragraph's content direction.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *indentStart;

/**
 *  The number of the first list item at this nesting level. A value of 0 is
 *  treated as a value of 1 for lettered lists and Roman numeral lists. For
 *  values of both 0 and 1, lettered and Roman numeral lists will begin at `a`
 *  and `i` respectively. This value is ignored for nesting levels with
 *  unordered glyphs.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startNumber;

/** The text style of bullets at this level of nesting. */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyle *textStyle;

@end


/**
 *  A mask that indicates which of the fields on the base NestingLevel have been
 *  changed in this suggestion. For any field set to true, there's a new
 *  suggested value.
 */
@interface GTLRDocs_NestingLevelSuggestionState : GTLRObject

/**
 *  Indicates if there was a suggested change to bullet_alignment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bulletAlignmentSuggested;

/**
 *  Indicates if there was a suggested change to glyph_format.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *glyphFormatSuggested;

/**
 *  Indicates if there was a suggested change to glyph_symbol.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *glyphSymbolSuggested;

/**
 *  Indicates if there was a suggested change to glyph_type.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *glyphTypeSuggested;

/**
 *  Indicates if there was a suggested change to indent_first_line.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *indentFirstLineSuggested;

/**
 *  Indicates if there was a suggested change to indent_start.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *indentStartSuggested;

/**
 *  Indicates if there was a suggested change to start_number.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startNumberSuggested;

/**
 *  A mask that indicates which of the fields in text style have been changed in
 *  this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyleSuggestionState *textStyleSuggestionState;

@end


/**
 *  A collection of object IDs.
 */
@interface GTLRDocs_ObjectReferences : GTLRObject

/** The object IDs. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *objectIds;

@end


/**
 *  A color that can either be fully opaque or fully transparent.
 */
@interface GTLRDocs_OptionalColor : GTLRObject

/**
 *  If set, this will be used as an opaque color. If unset, this represents a
 *  transparent color.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Color *color;

@end


/**
 *  A ParagraphElement representing a page break. A page break makes the
 *  subsequent text start at the top of the next page.
 */
@interface GTLRDocs_PageBreak : GTLRObject

/**
 *  The suggested deletion IDs. If empty, then there are no suggested deletions
 *  of this content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  The suggested insertion IDs. A PageBreak may have multiple insertion IDs if
 *  it's a nested suggested change. If empty, then this is not a suggested
 *  insertion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedInsertionIds;

/**
 *  The suggested text style changes to this PageBreak, keyed by suggestion ID.
 */
@property(nonatomic, strong, nullable) GTLRDocs_PageBreak_SuggestedTextStyleChanges *suggestedTextStyleChanges;

/**
 *  The text style of this PageBreak. Similar to text content, like text runs
 *  and footnote references, the text style of a page break can affect content
 *  layout as well as the styling of text inserted next to it.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyle *textStyle;

@end


/**
 *  The suggested text style changes to this PageBreak, keyed by suggestion ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedTextStyle. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_PageBreak_SuggestedTextStyleChanges : GTLRObject
@end


/**
 *  A StructuralElement representing a paragraph. A paragraph is a range of
 *  content that's terminated with a newline character.
 */
@interface GTLRDocs_Paragraph : GTLRObject

/**
 *  The bullet for this paragraph. If not present, the paragraph does not belong
 *  to a list.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Bullet *bullet;

/** The content of the paragraph, broken down into its component parts. */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_ParagraphElement *> *elements;

/** The style of this paragraph. */
@property(nonatomic, strong, nullable) GTLRDocs_ParagraphStyle *paragraphStyle;

/** The IDs of the positioned objects tethered to this paragraph. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *positionedObjectIds;

/** The suggested changes to this paragraph's bullet. */
@property(nonatomic, strong, nullable) GTLRDocs_Paragraph_SuggestedBulletChanges *suggestedBulletChanges;

/**
 *  The suggested paragraph style changes to this paragraph, keyed by suggestion
 *  ID.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Paragraph_SuggestedParagraphStyleChanges *suggestedParagraphStyleChanges;

/**
 *  The IDs of the positioned objects suggested to be attached to this
 *  paragraph, keyed by suggestion ID.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Paragraph_SuggestedPositionedObjectIds *suggestedPositionedObjectIds;

@end


/**
 *  The suggested changes to this paragraph's bullet.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedBullet. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_Paragraph_SuggestedBulletChanges : GTLRObject
@end


/**
 *  The suggested paragraph style changes to this paragraph, keyed by suggestion
 *  ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedParagraphStyle. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_Paragraph_SuggestedParagraphStyleChanges : GTLRObject
@end


/**
 *  The IDs of the positioned objects suggested to be attached to this
 *  paragraph, keyed by suggestion ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_ObjectReferences. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_Paragraph_SuggestedPositionedObjectIds : GTLRObject
@end


/**
 *  A border around a paragraph.
 */
@interface GTLRDocs_ParagraphBorder : GTLRObject

/** The color of the border. */
@property(nonatomic, strong, nullable) GTLRDocs_OptionalColor *color;

/**
 *  The dash style of the border.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_ParagraphBorder_DashStyle_Dash Dashed line. Corresponds
 *        to ECMA-376 ST_PresetLineDashVal value 'dash'. (Value: "DASH")
 *    @arg @c kGTLRDocs_ParagraphBorder_DashStyle_DashStyleUnspecified
 *        Unspecified dash style. (Value: "DASH_STYLE_UNSPECIFIED")
 *    @arg @c kGTLRDocs_ParagraphBorder_DashStyle_Dot Dotted line. Corresponds
 *        to ECMA-376 ST_PresetLineDashVal value 'dot'. (Value: "DOT")
 *    @arg @c kGTLRDocs_ParagraphBorder_DashStyle_Solid Solid line. Corresponds
 *        to ECMA-376 ST_PresetLineDashVal value 'solid'. This is the default
 *        dash style. (Value: "SOLID")
 */
@property(nonatomic, copy, nullable) NSString *dashStyle;

/** The padding of the border. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *padding;

/** The width of the border. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *width;

@end


/**
 *  A ParagraphElement describes content within a Paragraph.
 */
@interface GTLRDocs_ParagraphElement : GTLRObject

/** An auto text paragraph element. */
@property(nonatomic, strong, nullable) GTLRDocs_AutoText *autoText;

/** A column break paragraph element. */
@property(nonatomic, strong, nullable) GTLRDocs_ColumnBreak *columnBreak;

/**
 *  The zero-base end index of this paragraph element, exclusive, in UTF-16 code
 *  units.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endIndex;

/** An equation paragraph element. */
@property(nonatomic, strong, nullable) GTLRDocs_Equation *equation;

/** A footnote reference paragraph element. */
@property(nonatomic, strong, nullable) GTLRDocs_FootnoteReference *footnoteReference;

/** A horizontal rule paragraph element. */
@property(nonatomic, strong, nullable) GTLRDocs_HorizontalRule *horizontalRule;

/** An inline object paragraph element. */
@property(nonatomic, strong, nullable) GTLRDocs_InlineObjectElement *inlineObjectElement;

/** A page break paragraph element. */
@property(nonatomic, strong, nullable) GTLRDocs_PageBreak *pageBreak;

/** A paragraph element that links to a person or email address. */
@property(nonatomic, strong, nullable) GTLRDocs_Person *person;

/**
 *  A paragraph element that links to a Google resource (such as a file in
 *  Google Drive, a YouTube video, or a Calendar event.)
 */
@property(nonatomic, strong, nullable) GTLRDocs_RichLink *richLink;

/**
 *  The zero-based start index of this paragraph element, in UTF-16 code units.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startIndex;

/** A text run paragraph element. */
@property(nonatomic, strong, nullable) GTLRDocs_TextRun *textRun;

@end


/**
 *  Styles that apply to a whole paragraph. Inherited paragraph styles are
 *  represented as unset fields in this message. A paragraph style's parent
 *  depends on where the paragraph style is defined: * The ParagraphStyle on a
 *  Paragraph inherits from the paragraph's corresponding named style type. *
 *  The ParagraphStyle on a named style inherits from the normal text named
 *  style. * The ParagraphStyle of the normal text named style inherits from the
 *  default paragraph style in the Docs editor. * The ParagraphStyle on a
 *  Paragraph element that's contained in a table may inherit its paragraph
 *  style from the table style. If the paragraph style does not inherit from a
 *  parent, unsetting fields will revert the style to a value matching the
 *  defaults in the Docs editor.
 */
@interface GTLRDocs_ParagraphStyle : GTLRObject

/**
 *  The text alignment for this paragraph.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_ParagraphStyle_Alignment_AlignmentUnspecified The
 *        paragraph alignment is inherited from the parent. (Value:
 *        "ALIGNMENT_UNSPECIFIED")
 *    @arg @c kGTLRDocs_ParagraphStyle_Alignment_Center The paragraph is
 *        centered. (Value: "CENTER")
 *    @arg @c kGTLRDocs_ParagraphStyle_Alignment_End The paragraph is aligned to
 *        the end of the line. Right-aligned for LTR text, left-aligned
 *        otherwise. (Value: "END")
 *    @arg @c kGTLRDocs_ParagraphStyle_Alignment_Justified The paragraph is
 *        justified. (Value: "JUSTIFIED")
 *    @arg @c kGTLRDocs_ParagraphStyle_Alignment_Start The paragraph is aligned
 *        to the start of the line. Left-aligned for LTR text, right-aligned
 *        otherwise. (Value: "START")
 */
@property(nonatomic, copy, nullable) NSString *alignment;

/**
 *  Whether to avoid widows and orphans for the paragraph. If unset, the value
 *  is inherited from the parent.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *avoidWidowAndOrphan;

/**
 *  The border between this paragraph and the next and previous paragraphs. If
 *  unset, the value is inherited from the parent. The between border is
 *  rendered when the adjacent paragraph has the same border and indent
 *  properties. Paragraph borders cannot be partially updated. When changing a
 *  paragraph border, the new border must be specified in its entirety.
 */
@property(nonatomic, strong, nullable) GTLRDocs_ParagraphBorder *borderBetween;

/**
 *  The border at the bottom of this paragraph. If unset, the value is inherited
 *  from the parent. The bottom border is rendered when the paragraph below has
 *  different border and indent properties. Paragraph borders cannot be
 *  partially updated. When changing a paragraph border, the new border must be
 *  specified in its entirety.
 */
@property(nonatomic, strong, nullable) GTLRDocs_ParagraphBorder *borderBottom;

/**
 *  The border to the left of this paragraph. If unset, the value is inherited
 *  from the parent. Paragraph borders cannot be partially updated. When
 *  changing a paragraph border, the new border must be specified in its
 *  entirety.
 */
@property(nonatomic, strong, nullable) GTLRDocs_ParagraphBorder *borderLeft;

/**
 *  The border to the right of this paragraph. If unset, the value is inherited
 *  from the parent. Paragraph borders cannot be partially updated. When
 *  changing a paragraph border, the new border must be specified in its
 *  entirety.
 */
@property(nonatomic, strong, nullable) GTLRDocs_ParagraphBorder *borderRight;

/**
 *  The border at the top of this paragraph. If unset, the value is inherited
 *  from the parent. The top border is rendered when the paragraph above has
 *  different border and indent properties. Paragraph borders cannot be
 *  partially updated. When changing a paragraph border, the new border must be
 *  specified in its entirety.
 */
@property(nonatomic, strong, nullable) GTLRDocs_ParagraphBorder *borderTop;

/**
 *  The text direction of this paragraph. If unset, the value defaults to
 *  LEFT_TO_RIGHT since paragraph direction is not inherited.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_ParagraphStyle_Direction_ContentDirectionUnspecified The
 *        content direction is unspecified. (Value:
 *        "CONTENT_DIRECTION_UNSPECIFIED")
 *    @arg @c kGTLRDocs_ParagraphStyle_Direction_LeftToRight The content goes
 *        from left to right. (Value: "LEFT_TO_RIGHT")
 *    @arg @c kGTLRDocs_ParagraphStyle_Direction_RightToLeft The content goes
 *        from right to left. (Value: "RIGHT_TO_LEFT")
 */
@property(nonatomic, copy, nullable) NSString *direction;

/**
 *  The heading ID of the paragraph. If empty, then this paragraph is not a
 *  heading. This property is read-only.
 */
@property(nonatomic, copy, nullable) NSString *headingId;

/**
 *  The amount of indentation for the paragraph on the side that corresponds to
 *  the end of the text, based on the current paragraph direction. If unset, the
 *  value is inherited from the parent.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *indentEnd;

/**
 *  The amount of indentation for the first line of the paragraph. If unset, the
 *  value is inherited from the parent.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *indentFirstLine;

/**
 *  The amount of indentation for the paragraph on the side that corresponds to
 *  the start of the text, based on the current paragraph direction. If unset,
 *  the value is inherited from the parent.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *indentStart;

/**
 *  Whether all lines of the paragraph should be laid out on the same page or
 *  column if possible. If unset, the value is inherited from the parent.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *keepLinesTogether;

/**
 *  Whether at least a part of this paragraph should be laid out on the same
 *  page or column as the next paragraph if possible. If unset, the value is
 *  inherited from the parent.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *keepWithNext;

/**
 *  The amount of space between lines, as a percentage of normal, where normal
 *  is represented as 100.0. If unset, the value is inherited from the parent.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lineSpacing;

/**
 *  The named style type of the paragraph. Since updating the named style type
 *  affects other properties within ParagraphStyle, the named style type is
 *  applied before the other properties are updated.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_ParagraphStyle_NamedStyleType_Heading1 Heading 1.
 *        (Value: "HEADING_1")
 *    @arg @c kGTLRDocs_ParagraphStyle_NamedStyleType_Heading2 Heading 2.
 *        (Value: "HEADING_2")
 *    @arg @c kGTLRDocs_ParagraphStyle_NamedStyleType_Heading3 Heading 3.
 *        (Value: "HEADING_3")
 *    @arg @c kGTLRDocs_ParagraphStyle_NamedStyleType_Heading4 Heading 4.
 *        (Value: "HEADING_4")
 *    @arg @c kGTLRDocs_ParagraphStyle_NamedStyleType_Heading5 Heading 5.
 *        (Value: "HEADING_5")
 *    @arg @c kGTLRDocs_ParagraphStyle_NamedStyleType_Heading6 Heading 6.
 *        (Value: "HEADING_6")
 *    @arg @c kGTLRDocs_ParagraphStyle_NamedStyleType_NamedStyleTypeUnspecified
 *        The type of named style is unspecified. (Value:
 *        "NAMED_STYLE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDocs_ParagraphStyle_NamedStyleType_NormalText Normal text.
 *        (Value: "NORMAL_TEXT")
 *    @arg @c kGTLRDocs_ParagraphStyle_NamedStyleType_Subtitle Subtitle. (Value:
 *        "SUBTITLE")
 *    @arg @c kGTLRDocs_ParagraphStyle_NamedStyleType_Title Title. (Value:
 *        "TITLE")
 */
@property(nonatomic, copy, nullable) NSString *namedStyleType;

/**
 *  Whether the current paragraph should always start at the beginning of a
 *  page. If unset, the value is inherited from the parent. Attempting to update
 *  page_break_before for paragraphs in unsupported regions, including Table,
 *  Header, Footer and Footnote, can result in an invalid document state that
 *  returns a 400 bad request error.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageBreakBefore;

/**
 *  The shading of the paragraph. If unset, the value is inherited from the
 *  parent.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Shading *shading;

/**
 *  The amount of extra space above the paragraph. If unset, the value is
 *  inherited from the parent.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *spaceAbove;

/**
 *  The amount of extra space below the paragraph. If unset, the value is
 *  inherited from the parent.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *spaceBelow;

/**
 *  The spacing mode for the paragraph.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_ParagraphStyle_SpacingMode_CollapseLists Paragraph
 *        spacing is skipped between list elements. (Value: "COLLAPSE_LISTS")
 *    @arg @c kGTLRDocs_ParagraphStyle_SpacingMode_NeverCollapse Paragraph
 *        spacing is always rendered. (Value: "NEVER_COLLAPSE")
 *    @arg @c kGTLRDocs_ParagraphStyle_SpacingMode_SpacingModeUnspecified The
 *        spacing mode is inherited from the parent. (Value:
 *        "SPACING_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *spacingMode;

/**
 *  A list of the tab stops for this paragraph. The list of tab stops is not
 *  inherited. This property is read-only.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_TabStop *> *tabStops;

@end


/**
 *  A mask that indicates which of the fields on the base ParagraphStyle have
 *  been changed in this suggestion. For any field set to true, there's a new
 *  suggested value.
 */
@interface GTLRDocs_ParagraphStyleSuggestionState : GTLRObject

/**
 *  Indicates if there was a suggested change to alignment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *alignmentSuggested;

/**
 *  Indicates if there was a suggested change to avoid_widow_and_orphan.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *avoidWidowAndOrphanSuggested;

/**
 *  Indicates if there was a suggested change to border_between.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *borderBetweenSuggested;

/**
 *  Indicates if there was a suggested change to border_bottom.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *borderBottomSuggested;

/**
 *  Indicates if there was a suggested change to border_left.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *borderLeftSuggested;

/**
 *  Indicates if there was a suggested change to border_right.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *borderRightSuggested;

/**
 *  Indicates if there was a suggested change to border_top.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *borderTopSuggested;

/**
 *  Indicates if there was a suggested change to direction.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *directionSuggested;

/**
 *  Indicates if there was a suggested change to heading_id.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *headingIdSuggested;

/**
 *  Indicates if there was a suggested change to indent_end.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *indentEndSuggested;

/**
 *  Indicates if there was a suggested change to indent_first_line.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *indentFirstLineSuggested;

/**
 *  Indicates if there was a suggested change to indent_start.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *indentStartSuggested;

/**
 *  Indicates if there was a suggested change to keep_lines_together.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *keepLinesTogetherSuggested;

/**
 *  Indicates if there was a suggested change to keep_with_next.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *keepWithNextSuggested;

/**
 *  Indicates if there was a suggested change to line_spacing.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lineSpacingSuggested;

/**
 *  Indicates if there was a suggested change to named_style_type.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *namedStyleTypeSuggested;

/**
 *  Indicates if there was a suggested change to page_break_before.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageBreakBeforeSuggested;

/**
 *  A mask that indicates which of the fields in shading have been changed in
 *  this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_ShadingSuggestionState *shadingSuggestionState;

/**
 *  Indicates if there was a suggested change to space_above.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *spaceAboveSuggested;

/**
 *  Indicates if there was a suggested change to space_below.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *spaceBelowSuggested;

/**
 *  Indicates if there was a suggested change to spacing_mode.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *spacingModeSuggested;

@end


/**
 *  A person or email address mentioned in a document. These mentions behave as
 *  a single, immutable element containing the person's name or email address.
 */
@interface GTLRDocs_Person : GTLRObject

/** Output only. The unique ID of this link. */
@property(nonatomic, copy, nullable) NSString *personId;

/**
 *  Output only. The properties of this Person. This field is always present.
 */
@property(nonatomic, strong, nullable) GTLRDocs_PersonProperties *personProperties;

/**
 *  IDs for suggestions that remove this person link from the document. A Person
 *  might have multiple deletion IDs if, for example, multiple users suggest
 *  deleting it. If empty, then this person link isn't suggested for deletion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  IDs for suggestions that insert this person link into the document. A Person
 *  might have multiple insertion IDs if it's a nested suggested change (a
 *  suggestion within a suggestion made by a different user, for example). If
 *  empty, then this person link isn't a suggested insertion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedInsertionIds;

/**
 *  The suggested text style changes to this Person, keyed by suggestion ID.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Person_SuggestedTextStyleChanges *suggestedTextStyleChanges;

/** The text style of this Person. */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyle *textStyle;

@end


/**
 *  The suggested text style changes to this Person, keyed by suggestion ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedTextStyle. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_Person_SuggestedTextStyleChanges : GTLRObject
@end


/**
 *  Properties specific to a linked Person.
 */
@interface GTLRDocs_PersonProperties : GTLRObject

/**
 *  Output only. The email address linked to this Person. This field is always
 *  present.
 */
@property(nonatomic, copy, nullable) NSString *email;

/**
 *  Output only. The name of the person if it's displayed in the link text
 *  instead of the person's email address.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Updates the number of pinned table header rows in a table.
 */
@interface GTLRDocs_PinTableHeaderRowsRequest : GTLRObject

/**
 *  The number of table rows to pin, where 0 implies that all rows are unpinned.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pinnedHeaderRowsCount;

/** The location where the table starts in the document. */
@property(nonatomic, strong, nullable) GTLRDocs_Location *tableStartLocation;

@end


/**
 *  An object that's tethered to a Paragraph and positioned relative to the
 *  beginning of the paragraph. A PositionedObject contains an EmbeddedObject
 *  such as an image.
 */
@interface GTLRDocs_PositionedObject : GTLRObject

/** The ID of this positioned object. */
@property(nonatomic, copy, nullable) NSString *objectId;

/** The properties of this positioned object. */
@property(nonatomic, strong, nullable) GTLRDocs_PositionedObjectProperties *positionedObjectProperties;

/**
 *  The suggested deletion IDs. If empty, then there are no suggested deletions
 *  of this content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  The suggested insertion ID. If empty, then this is not a suggested
 *  insertion.
 */
@property(nonatomic, copy, nullable) NSString *suggestedInsertionId;

/**
 *  The suggested changes to the positioned object properties, keyed by
 *  suggestion ID.
 */
@property(nonatomic, strong, nullable) GTLRDocs_PositionedObject_SuggestedPositionedObjectPropertiesChanges *suggestedPositionedObjectPropertiesChanges;

@end


/**
 *  The suggested changes to the positioned object properties, keyed by
 *  suggestion ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedPositionedObjectProperties. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDocs_PositionedObject_SuggestedPositionedObjectPropertiesChanges : GTLRObject
@end


/**
 *  The positioning of a PositionedObject. The positioned object is positioned
 *  relative to the beginning of the Paragraph it's tethered to.
 */
@interface GTLRDocs_PositionedObjectPositioning : GTLRObject

/**
 *  The layout of this positioned object.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_PositionedObjectPositioning_Layout_BehindText The
 *        positioned object is behind the text. (Value: "BEHIND_TEXT")
 *    @arg @c kGTLRDocs_PositionedObjectPositioning_Layout_BreakLeft Breaks text
 *        such that the positioned object is on the left and text is on the
 *        right. (Value: "BREAK_LEFT")
 *    @arg @c kGTLRDocs_PositionedObjectPositioning_Layout_BreakLeftRight Breaks
 *        text such that there's no text on the left or right of the positioned
 *        object. (Value: "BREAK_LEFT_RIGHT")
 *    @arg @c kGTLRDocs_PositionedObjectPositioning_Layout_BreakRight Breaks
 *        text such that the positioned object is on the right and text is on
 *        the left. (Value: "BREAK_RIGHT")
 *    @arg @c kGTLRDocs_PositionedObjectPositioning_Layout_InFrontOfText The
 *        positioned object is in front of the text. (Value: "IN_FRONT_OF_TEXT")
 *    @arg @c kGTLRDocs_PositionedObjectPositioning_Layout_PositionedObjectLayoutUnspecified
 *        The layout is unspecified. (Value:
 *        "POSITIONED_OBJECT_LAYOUT_UNSPECIFIED")
 *    @arg @c kGTLRDocs_PositionedObjectPositioning_Layout_WrapText The text
 *        wraps around the positioned object. (Value: "WRAP_TEXT")
 */
@property(nonatomic, copy, nullable) NSString *layout;

/**
 *  The offset of the left edge of the positioned object relative to the
 *  beginning of the Paragraph it's tethered to. The exact positioning of the
 *  object can depend on other content in the document and the document's
 *  styling.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *leftOffset;

/**
 *  The offset of the top edge of the positioned object relative to the
 *  beginning of the Paragraph it's tethered to. The exact positioning of the
 *  object can depend on other content in the document and the document's
 *  styling.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *topOffset;

@end


/**
 *  A mask that indicates which of the fields on the base
 *  PositionedObjectPositioning have been changed in this suggestion. For any
 *  field set to true, there's a new suggested value.
 */
@interface GTLRDocs_PositionedObjectPositioningSuggestionState : GTLRObject

/**
 *  Indicates if there was a suggested change to layout.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *layoutSuggested;

/**
 *  Indicates if there was a suggested change to left_offset.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *leftOffsetSuggested;

/**
 *  Indicates if there was a suggested change to top_offset.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *topOffsetSuggested;

@end


/**
 *  Properties of a PositionedObject.
 */
@interface GTLRDocs_PositionedObjectProperties : GTLRObject

/** The embedded object of this positioned object. */
@property(nonatomic, strong, nullable) GTLRDocs_EmbeddedObject *embeddedObject;

/**
 *  The positioning of this positioned object relative to the newline of the
 *  Paragraph that references this positioned object.
 */
@property(nonatomic, strong, nullable) GTLRDocs_PositionedObjectPositioning *positioning;

@end


/**
 *  A mask that indicates which of the fields on the base
 *  PositionedObjectProperties have been changed in this suggestion. For any
 *  field set to true, there's a new suggested value.
 */
@interface GTLRDocs_PositionedObjectPropertiesSuggestionState : GTLRObject

/**
 *  A mask that indicates which of the fields in embedded_object have been
 *  changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_EmbeddedObjectSuggestionState *embeddedObjectSuggestionState;

/**
 *  A mask that indicates which of the fields in positioning have been changed
 *  in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_PositionedObjectPositioningSuggestionState *positioningSuggestionState;

@end


/**
 *  Specifies a contiguous range of text.
 */
@interface GTLRDocs_Range : GTLRObject

/**
 *  The zero-based end index of this range, exclusive, in UTF-16 code units. In
 *  all current uses, an end index must be provided. This field is an Int32Value
 *  in order to accommodate future use cases with open-ended ranges.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endIndex;

/**
 *  The ID of the header, footer, or footnote that this range is contained in.
 *  An empty segment ID signifies the document's body.
 */
@property(nonatomic, copy, nullable) NSString *segmentId;

/**
 *  The zero-based start index of this range, in UTF-16 code units. In all
 *  current uses, a start index must be provided. This field is an Int32Value in
 *  order to accommodate future use cases with open-ended ranges.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startIndex;

@end


/**
 *  Replaces all instances of text matching a criteria with replace text.
 */
@interface GTLRDocs_ReplaceAllTextRequest : GTLRObject

/** Finds text in the document matching this substring. */
@property(nonatomic, strong, nullable) GTLRDocs_SubstringMatchCriteria *containsText;

/** The text that will replace the matched text. */
@property(nonatomic, copy, nullable) NSString *replaceText;

@end


/**
 *  The result of replacing text.
 */
@interface GTLRDocs_ReplaceAllTextResponse : GTLRObject

/**
 *  The number of occurrences changed by replacing all text.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *occurrencesChanged;

@end


/**
 *  Replaces an existing image with a new image. Replacing an image removes some
 *  image effects from the existing image in order to mirror the behavior of the
 *  Docs editor.
 */
@interface GTLRDocs_ReplaceImageRequest : GTLRObject

/**
 *  The ID of the existing image that will be replaced. The ID can be retrieved
 *  from the response of a get request.
 */
@property(nonatomic, copy, nullable) NSString *imageObjectId;

/**
 *  The replacement method.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_ReplaceImageRequest_ImageReplaceMethod_CenterCrop Scales
 *        and centers the image to fill the bounds of the original image. The
 *        image may be cropped in order to fill the original image's bounds. The
 *        rendered size of the image will be the same as the original image.
 *        (Value: "CENTER_CROP")
 *    @arg @c kGTLRDocs_ReplaceImageRequest_ImageReplaceMethod_ImageReplaceMethodUnspecified
 *        Unspecified image replace method. This value must not be used. (Value:
 *        "IMAGE_REPLACE_METHOD_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *imageReplaceMethod;

/**
 *  The URI of the new image. The image is fetched once at insertion time and a
 *  copy is stored for display inside the document. Images must be less than
 *  50MB, cannot exceed 25 megapixels, and must be in PNG, JPEG, or GIF format.
 *  The provided URI can't surpass 2 KB in length. The URI is saved with the
 *  image, and exposed through the ImageProperties.source_uri field.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Replaces the contents of the specified NamedRange or NamedRanges with the
 *  given replacement content. Note that an individual NamedRange may consist of
 *  multiple discontinuous ranges. In this case, only the content in the first
 *  range will be replaced. The other ranges and their content will be deleted.
 *  In cases where replacing or deleting any ranges would result in an invalid
 *  document structure, a 400 bad request error is returned.
 */
@interface GTLRDocs_ReplaceNamedRangeContentRequest : GTLRObject

/**
 *  The ID of the named range whose content will be replaced. If there is no
 *  named range with the given ID a 400 bad request error is returned.
 */
@property(nonatomic, copy, nullable) NSString *namedRangeId;

/**
 *  The name of the NamedRanges whose content will be replaced. If there are
 *  multiple named ranges with the given name, then the content of each one will
 *  be replaced. If there are no named ranges with the given name, then the
 *  request will be a no-op.
 */
@property(nonatomic, copy, nullable) NSString *namedRangeName;

/**
 *  Replaces the content of the specified named range(s) with the given text.
 */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A single update to apply to a document.
 */
@interface GTLRDocs_Request : GTLRObject

/** Creates a footer. */
@property(nonatomic, strong, nullable) GTLRDocs_CreateFooterRequest *createFooter;

/** Creates a footnote. */
@property(nonatomic, strong, nullable) GTLRDocs_CreateFootnoteRequest *createFootnote;

/** Creates a header. */
@property(nonatomic, strong, nullable) GTLRDocs_CreateHeaderRequest *createHeader;

/** Creates a named range. */
@property(nonatomic, strong, nullable) GTLRDocs_CreateNamedRangeRequest *createNamedRange;

/** Creates bullets for paragraphs. */
@property(nonatomic, strong, nullable) GTLRDocs_CreateParagraphBulletsRequest *createParagraphBullets;

/** Deletes content from the document. */
@property(nonatomic, strong, nullable) GTLRDocs_DeleteContentRangeRequest *deleteContentRange;

/** Deletes a footer from the document. */
@property(nonatomic, strong, nullable) GTLRDocs_DeleteFooterRequest *deleteFooter;

/** Deletes a header from the document. */
@property(nonatomic, strong, nullable) GTLRDocs_DeleteHeaderRequest *deleteHeader;

/** Deletes a named range. */
@property(nonatomic, strong, nullable) GTLRDocs_DeleteNamedRangeRequest *deleteNamedRange;

/** Deletes bullets from paragraphs. */
@property(nonatomic, strong, nullable) GTLRDocs_DeleteParagraphBulletsRequest *deleteParagraphBullets;

/** Deletes a positioned object from the document. */
@property(nonatomic, strong, nullable) GTLRDocs_DeletePositionedObjectRequest *deletePositionedObject;

/** Deletes a column from a table. */
@property(nonatomic, strong, nullable) GTLRDocs_DeleteTableColumnRequest *deleteTableColumn;

/** Deletes a row from a table. */
@property(nonatomic, strong, nullable) GTLRDocs_DeleteTableRowRequest *deleteTableRow;

/** Inserts an inline image at the specified location. */
@property(nonatomic, strong, nullable) GTLRDocs_InsertInlineImageRequest *insertInlineImage;

/** Inserts a page break at the specified location. */
@property(nonatomic, strong, nullable) GTLRDocs_InsertPageBreakRequest *insertPageBreak;

/** Inserts a section break at the specified location. */
@property(nonatomic, strong, nullable) GTLRDocs_InsertSectionBreakRequest *insertSectionBreak;

/** Inserts a table at the specified location. */
@property(nonatomic, strong, nullable) GTLRDocs_InsertTableRequest *insertTable;

/** Inserts an empty column into a table. */
@property(nonatomic, strong, nullable) GTLRDocs_InsertTableColumnRequest *insertTableColumn;

/** Inserts an empty row into a table. */
@property(nonatomic, strong, nullable) GTLRDocs_InsertTableRowRequest *insertTableRow;

/** Inserts text at the specified location. */
@property(nonatomic, strong, nullable) GTLRDocs_InsertTextRequest *insertText;

/** Merges cells in a table. */
@property(nonatomic, strong, nullable) GTLRDocs_MergeTableCellsRequest *mergeTableCells;

/** Updates the number of pinned header rows in a table. */
@property(nonatomic, strong, nullable) GTLRDocs_PinTableHeaderRowsRequest *pinTableHeaderRows;

/** Replaces all instances of the specified text. */
@property(nonatomic, strong, nullable) GTLRDocs_ReplaceAllTextRequest *replaceAllText;

/** Replaces an image in the document. */
@property(nonatomic, strong, nullable) GTLRDocs_ReplaceImageRequest *replaceImage;

/** Replaces the content in a named range. */
@property(nonatomic, strong, nullable) GTLRDocs_ReplaceNamedRangeContentRequest *replaceNamedRangeContent;

/** Unmerges cells in a table. */
@property(nonatomic, strong, nullable) GTLRDocs_UnmergeTableCellsRequest *unmergeTableCells;

/** Updates the style of the document. */
@property(nonatomic, strong, nullable) GTLRDocs_UpdateDocumentStyleRequest *updateDocumentStyle;

/** Updates the paragraph style at the specified range. */
@property(nonatomic, strong, nullable) GTLRDocs_UpdateParagraphStyleRequest *updateParagraphStyle;

/** Updates the section style of the specified range. */
@property(nonatomic, strong, nullable) GTLRDocs_UpdateSectionStyleRequest *updateSectionStyle;

/** Updates the style of table cells. */
@property(nonatomic, strong, nullable) GTLRDocs_UpdateTableCellStyleRequest *updateTableCellStyle;

/** Updates the properties of columns in a table. */
@property(nonatomic, strong, nullable) GTLRDocs_UpdateTableColumnPropertiesRequest *updateTableColumnProperties;

/** Updates the row style in a table. */
@property(nonatomic, strong, nullable) GTLRDocs_UpdateTableRowStyleRequest *updateTableRowStyle;

/** Updates the text style at the specified range. */
@property(nonatomic, strong, nullable) GTLRDocs_UpdateTextStyleRequest *updateTextStyle;

@end


/**
 *  A single response from an update.
 */
@interface GTLRDocs_Response : GTLRObject

/** The result of creating a footer. */
@property(nonatomic, strong, nullable) GTLRDocs_CreateFooterResponse *createFooter;

/** The result of creating a footnote. */
@property(nonatomic, strong, nullable) GTLRDocs_CreateFootnoteResponse *createFootnote;

/** The result of creating a header. */
@property(nonatomic, strong, nullable) GTLRDocs_CreateHeaderResponse *createHeader;

/** The result of creating a named range. */
@property(nonatomic, strong, nullable) GTLRDocs_CreateNamedRangeResponse *createNamedRange;

/** The result of inserting an inline image. */
@property(nonatomic, strong, nullable) GTLRDocs_InsertInlineImageResponse *insertInlineImage;

/** The result of inserting an inline Google Sheets chart. */
@property(nonatomic, strong, nullable) GTLRDocs_InsertInlineSheetsChartResponse *insertInlineSheetsChart;

/** The result of replacing text. */
@property(nonatomic, strong, nullable) GTLRDocs_ReplaceAllTextResponse *replaceAllText;

@end


/**
 *  An RGB color.
 */
@interface GTLRDocs_RgbColor : GTLRObject

/**
 *  The blue component of the color, from 0.0 to 1.0.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blue;

/**
 *  The green component of the color, from 0.0 to 1.0.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *green;

/**
 *  The red component of the color, from 0.0 to 1.0.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *red;

@end


/**
 *  A link to a Google resource (such as a file in Drive, a YouTube video, or a
 *  Calendar event).
 */
@interface GTLRDocs_RichLink : GTLRObject

/** Output only. The ID of this link. */
@property(nonatomic, copy, nullable) NSString *richLinkId;

/**
 *  Output only. The properties of this RichLink. This field is always present.
 */
@property(nonatomic, strong, nullable) GTLRDocs_RichLinkProperties *richLinkProperties;

/**
 *  IDs for suggestions that remove this link from the document. A RichLink
 *  might have multiple deletion IDs if, for example, multiple users suggest
 *  deleting it. If empty, then this person link isn't suggested for deletion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  IDs for suggestions that insert this link into the document. A RichLink
 *  might have multiple insertion IDs if it's a nested suggested change (a
 *  suggestion within a suggestion made by a different user, for example). If
 *  empty, then this person link isn't a suggested insertion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedInsertionIds;

/**
 *  The suggested text style changes to this RichLink, keyed by suggestion ID.
 */
@property(nonatomic, strong, nullable) GTLRDocs_RichLink_SuggestedTextStyleChanges *suggestedTextStyleChanges;

/** The text style of this RichLink. */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyle *textStyle;

@end


/**
 *  The suggested text style changes to this RichLink, keyed by suggestion ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedTextStyle. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_RichLink_SuggestedTextStyleChanges : GTLRObject
@end


/**
 *  Properties specific to a RichLink.
 */
@interface GTLRDocs_RichLinkProperties : GTLRObject

/**
 *  Output only. The [MIME
 *  type](https://developers.google.com/drive/api/v3/mime-types) of the
 *  RichLink, if there's one (for example, when it's a file in Drive).
 */
@property(nonatomic, copy, nullable) NSString *mimeType;

/**
 *  Output only. The title of the RichLink as displayed in the link. This title
 *  matches the title of the linked resource at the time of the insertion or
 *  last update of the link. This field is always present.
 */
@property(nonatomic, copy, nullable) NSString *title;

/** Output only. The URI to the RichLink. This is always present. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  A StructuralElement representing a section break. A section is a range of
 *  content that has the same SectionStyle. A section break represents the start
 *  of a new section, and the section style applies to the section after the
 *  section break. The document body always begins with a section break.
 */
@interface GTLRDocs_SectionBreak : GTLRObject

/** The style of the section after this section break. */
@property(nonatomic, strong, nullable) GTLRDocs_SectionStyle *sectionStyle;

/**
 *  The suggested deletion IDs. If empty, then there are no suggested deletions
 *  of this content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  The suggested insertion IDs. A SectionBreak may have multiple insertion IDs
 *  if it's a nested suggested change. If empty, then this is not a suggested
 *  insertion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedInsertionIds;

@end


/**
 *  Properties that apply to a section's column.
 */
@interface GTLRDocs_SectionColumnProperties : GTLRObject

/** The padding at the end of the column. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *paddingEnd;

/** Output only. The width of the column. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *width;

@end


/**
 *  The styling that applies to a section.
 */
@interface GTLRDocs_SectionStyle : GTLRObject

/**
 *  The section's columns properties. If empty, the section contains one column
 *  with the default properties in the Docs editor. A section can be updated to
 *  have no more than 3 columns. When updating this property, setting a concrete
 *  value is required. Unsetting this property will result in a 400 bad request
 *  error.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_SectionColumnProperties *> *columnProperties;

/**
 *  The style of column separators. This style can be set even when there's one
 *  column in the section. When updating this property, setting a concrete value
 *  is required. Unsetting this property results in a 400 bad request error.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_SectionStyle_ColumnSeparatorStyle_BetweenEachColumn
 *        Renders a column separator line between each column. (Value:
 *        "BETWEEN_EACH_COLUMN")
 *    @arg @c kGTLRDocs_SectionStyle_ColumnSeparatorStyle_ColumnSeparatorStyleUnspecified
 *        An unspecified column separator style. (Value:
 *        "COLUMN_SEPARATOR_STYLE_UNSPECIFIED")
 *    @arg @c kGTLRDocs_SectionStyle_ColumnSeparatorStyle_None No column
 *        separator lines between columns. (Value: "NONE")
 */
@property(nonatomic, copy, nullable) NSString *columnSeparatorStyle;

/**
 *  The content direction of this section. If unset, the value defaults to
 *  LEFT_TO_RIGHT. When updating this property, setting a concrete value is
 *  required. Unsetting this property results in a 400 bad request error.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_SectionStyle_ContentDirection_ContentDirectionUnspecified
 *        The content direction is unspecified. (Value:
 *        "CONTENT_DIRECTION_UNSPECIFIED")
 *    @arg @c kGTLRDocs_SectionStyle_ContentDirection_LeftToRight The content
 *        goes from left to right. (Value: "LEFT_TO_RIGHT")
 *    @arg @c kGTLRDocs_SectionStyle_ContentDirection_RightToLeft The content
 *        goes from right to left. (Value: "RIGHT_TO_LEFT")
 */
@property(nonatomic, copy, nullable) NSString *contentDirection;

/**
 *  The ID of the default footer. If unset, the value inherits from the previous
 *  SectionBreak's SectionStyle. If the value is unset in the first
 *  SectionBreak, it inherits from DocumentStyle's default_footer_id. This
 *  property is read-only.
 */
@property(nonatomic, copy, nullable) NSString *defaultFooterId;

/**
 *  The ID of the default header. If unset, the value inherits from the previous
 *  SectionBreak's SectionStyle. If the value is unset in the first
 *  SectionBreak, it inherits from DocumentStyle's default_header_id. This
 *  property is read-only.
 */
@property(nonatomic, copy, nullable) NSString *defaultHeaderId;

/**
 *  The ID of the footer used only for even pages. If the value of
 *  DocumentStyle's use_even_page_header_footer is true, this value is used for
 *  the footers on even pages in the section. If it is false, the footers on
 *  even pages use the default_footer_id. If unset, the value inherits from the
 *  previous SectionBreak's SectionStyle. If the value is unset in the first
 *  SectionBreak, it inherits from DocumentStyle's even_page_footer_id. This
 *  property is read-only.
 */
@property(nonatomic, copy, nullable) NSString *evenPageFooterId;

/**
 *  The ID of the header used only for even pages. If the value of
 *  DocumentStyle's use_even_page_header_footer is true, this value is used for
 *  the headers on even pages in the section. If it is false, the headers on
 *  even pages use the default_header_id. If unset, the value inherits from the
 *  previous SectionBreak's SectionStyle. If the value is unset in the first
 *  SectionBreak, it inherits from DocumentStyle's even_page_header_id. This
 *  property is read-only.
 */
@property(nonatomic, copy, nullable) NSString *evenPageHeaderId;

/**
 *  The ID of the footer used only for the first page of the section. If
 *  use_first_page_header_footer is true, this value is used for the footer on
 *  the first page of the section. If it's false, the footer on the first page
 *  of the section uses the default_footer_id. If unset, the value inherits from
 *  the previous SectionBreak's SectionStyle. If the value is unset in the first
 *  SectionBreak, it inherits from DocumentStyle's first_page_footer_id. This
 *  property is read-only.
 */
@property(nonatomic, copy, nullable) NSString *firstPageFooterId;

/**
 *  The ID of the header used only for the first page of the section. If
 *  use_first_page_header_footer is true, this value is used for the header on
 *  the first page of the section. If it's false, the header on the first page
 *  of the section uses the default_header_id. If unset, the value inherits from
 *  the previous SectionBreak's SectionStyle. If the value is unset in the first
 *  SectionBreak, it inherits from DocumentStyle's first_page_header_id. This
 *  property is read-only.
 */
@property(nonatomic, copy, nullable) NSString *firstPageHeaderId;

/**
 *  The bottom page margin of the section. If unset, the value defaults to
 *  margin_bottom from DocumentStyle. When updating this property, setting a
 *  concrete value is required. Unsetting this property results in a 400 bad
 *  request error.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *marginBottom;

/**
 *  The footer margin of the section. If unset, the value defaults to
 *  margin_footer from DocumentStyle. If updated,
 *  use_custom_header_footer_margins is set to true on DocumentStyle. The value
 *  of use_custom_header_footer_margins on DocumentStyle indicates if a footer
 *  margin is being respected for this section When updating this property,
 *  setting a concrete value is required. Unsetting this property results in a
 *  400 bad request error.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *marginFooter;

/**
 *  The header margin of the section. If unset, the value defaults to
 *  margin_header from DocumentStyle. If updated,
 *  use_custom_header_footer_margins is set to true on DocumentStyle. The value
 *  of use_custom_header_footer_margins on DocumentStyle indicates if a header
 *  margin is being respected for this section. When updating this property,
 *  setting a concrete value is required. Unsetting this property results in a
 *  400 bad request error.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *marginHeader;

/**
 *  The left page margin of the section. If unset, the value defaults to
 *  margin_left from DocumentStyle. Updating the left margin causes columns in
 *  this section to resize. Since the margin affects column width, it's applied
 *  before column properties. When updating this property, setting a concrete
 *  value is required. Unsetting this property results in a 400 bad request
 *  error.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *marginLeft;

/**
 *  The right page margin of the section. If unset, the value defaults to
 *  margin_right from DocumentStyle. Updating the right margin causes columns in
 *  this section to resize. Since the margin affects column width, it's applied
 *  before column properties. When updating this property, setting a concrete
 *  value is required. Unsetting this property results in a 400 bad request
 *  error.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *marginRight;

/**
 *  The top page margin of the section. If unset, the value defaults to
 *  margin_top from DocumentStyle. When updating this property, setting a
 *  concrete value is required. Unsetting this property results in a 400 bad
 *  request error.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *marginTop;

/**
 *  The page number from which to start counting the number of pages for this
 *  section. If unset, page numbering continues from the previous section. If
 *  the value is unset in the first SectionBreak, refer to DocumentStyle's
 *  page_number_start. When updating this property, setting a concrete value is
 *  required. Unsetting this property results in a 400 bad request error.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pageNumberStart;

/**
 *  Output only. The type of section.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_SectionStyle_SectionType_Continuous The section starts
 *        immediately after the last paragraph of the previous section. (Value:
 *        "CONTINUOUS")
 *    @arg @c kGTLRDocs_SectionStyle_SectionType_NextPage The section starts on
 *        the next page. (Value: "NEXT_PAGE")
 *    @arg @c kGTLRDocs_SectionStyle_SectionType_SectionTypeUnspecified The
 *        section type is unspecified. (Value: "SECTION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *sectionType;

/**
 *  Indicates whether to use the first page header / footer IDs for the first
 *  page of the section. If unset, it inherits from DocumentStyle's
 *  use_first_page_header_footer for the first section. If the value is unset
 *  for subsequent sectors, it should be interpreted as false. When updating
 *  this property, setting a concrete value is required. Unsetting this property
 *  results in a 400 bad request error.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useFirstPageHeaderFooter;

@end


/**
 *  The shading of a paragraph.
 */
@interface GTLRDocs_Shading : GTLRObject

/** The background color of this paragraph shading. */
@property(nonatomic, strong, nullable) GTLRDocs_OptionalColor *backgroundColor;

@end


/**
 *  A mask that indicates which of the fields on the base Shading have been
 *  changed in this suggested change. For any field set to true, there's a new
 *  suggested value.
 */
@interface GTLRDocs_ShadingSuggestionState : GTLRObject

/**
 *  Indicates if there was a suggested change to the Shading.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *backgroundColorSuggested;

@end


/**
 *  A reference to a linked chart embedded from Google Sheets.
 */
@interface GTLRDocs_SheetsChartReference : GTLRObject

/**
 *  The ID of the specific chart in the Google Sheets spreadsheet that's
 *  embedded.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *chartId;

/** The ID of the Google Sheets spreadsheet that contains the source chart. */
@property(nonatomic, copy, nullable) NSString *spreadsheetId;

@end


/**
 *  A mask that indicates which of the fields on the base SheetsChartReference
 *  have been changed in this suggestion. For any field set to true, there's a
 *  new suggested value.
 */
@interface GTLRDocs_SheetsChartReferenceSuggestionState : GTLRObject

/**
 *  Indicates if there was a suggested change to chart_id.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *chartIdSuggested;

/**
 *  Indicates if there was a suggested change to spreadsheet_id.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *spreadsheetIdSuggested;

@end


/**
 *  A width and height.
 */
@interface GTLRDocs_Size : GTLRObject

/** The height of the object. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *height;

/** The width of the object. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *width;

@end


/**
 *  A mask that indicates which of the fields on the base Size have been changed
 *  in this suggestion. For any field set to true, the Size has a new suggested
 *  value.
 */
@interface GTLRDocs_SizeSuggestionState : GTLRObject

/**
 *  Indicates if there was a suggested change to height.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *heightSuggested;

/**
 *  Indicates if there was a suggested change to width.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *widthSuggested;

@end


/**
 *  A StructuralElement describes content that provides structure to the
 *  document.
 */
@interface GTLRDocs_StructuralElement : GTLRObject

/**
 *  The zero-based end index of this structural element, exclusive, in UTF-16
 *  code units.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endIndex;

/** A paragraph type of structural element. */
@property(nonatomic, strong, nullable) GTLRDocs_Paragraph *paragraph;

/** A section break type of structural element. */
@property(nonatomic, strong, nullable) GTLRDocs_SectionBreak *sectionBreak;

/**
 *  The zero-based start index of this structural element, in UTF-16 code units.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startIndex;

/** A table type of structural element. */
@property(nonatomic, strong, nullable) GTLRDocs_Table *table;

/** A table of contents type of structural element. */
@property(nonatomic, strong, nullable) GTLRDocs_TableOfContents *tableOfContents;

@end


/**
 *  A criteria that matches a specific string of text in the document.
 */
@interface GTLRDocs_SubstringMatchCriteria : GTLRObject

/**
 *  Indicates whether the search should respect case: - `True`: the search is
 *  case sensitive. - `False`: the search is case insensitive.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *matchCase;

/** The text to search for in the document. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A suggested change to a Bullet.
 */
@interface GTLRDocs_SuggestedBullet : GTLRObject

/**
 *  A Bullet that only includes the changes made in this suggestion. This can be
 *  used along with the bullet_suggestion_state to see which fields have changed
 *  and their new values.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Bullet *bullet;

/**
 *  A mask that indicates which of the fields on the base Bullet have been
 *  changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_BulletSuggestionState *bulletSuggestionState;

@end


/**
 *  A suggested change to the DocumentStyle.
 */
@interface GTLRDocs_SuggestedDocumentStyle : GTLRObject

/**
 *  A DocumentStyle that only includes the changes made in this suggestion. This
 *  can be used along with the document_style_suggestion_state to see which
 *  fields have changed and their new values.
 */
@property(nonatomic, strong, nullable) GTLRDocs_DocumentStyle *documentStyle;

/**
 *  A mask that indicates which of the fields on the base DocumentStyle have
 *  been changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_DocumentStyleSuggestionState *documentStyleSuggestionState;

@end


/**
 *  A suggested change to InlineObjectProperties.
 */
@interface GTLRDocs_SuggestedInlineObjectProperties : GTLRObject

/**
 *  An InlineObjectProperties that only includes the changes made in this
 *  suggestion. This can be used along with the
 *  inline_object_properties_suggestion_state to see which fields have changed
 *  and their new values.
 */
@property(nonatomic, strong, nullable) GTLRDocs_InlineObjectProperties *inlineObjectProperties;

/**
 *  A mask that indicates which of the fields on the base InlineObjectProperties
 *  have been changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_InlineObjectPropertiesSuggestionState *inlineObjectPropertiesSuggestionState;

@end


/**
 *  A suggested change to ListProperties.
 */
@interface GTLRDocs_SuggestedListProperties : GTLRObject

/**
 *  A ListProperties that only includes the changes made in this suggestion.
 *  This can be used along with the list_properties_suggestion_state to see
 *  which fields have changed and their new values.
 */
@property(nonatomic, strong, nullable) GTLRDocs_ListProperties *listProperties;

/**
 *  A mask that indicates which of the fields on the base ListProperties have
 *  been changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_ListPropertiesSuggestionState *listPropertiesSuggestionState;

@end


/**
 *  A suggested change to the NamedStyles.
 */
@interface GTLRDocs_SuggestedNamedStyles : GTLRObject

/**
 *  A NamedStyles that only includes the changes made in this suggestion. This
 *  can be used along with the named_styles_suggestion_state to see which fields
 *  have changed and their new values.
 */
@property(nonatomic, strong, nullable) GTLRDocs_NamedStyles *namedStyles;

/**
 *  A mask that indicates which of the fields on the base NamedStyles have been
 *  changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_NamedStylesSuggestionState *namedStylesSuggestionState;

@end


/**
 *  A suggested change to a ParagraphStyle.
 */
@interface GTLRDocs_SuggestedParagraphStyle : GTLRObject

/**
 *  A ParagraphStyle that only includes the changes made in this suggestion.
 *  This can be used along with the paragraph_style_suggestion_state to see
 *  which fields have changed and their new values.
 */
@property(nonatomic, strong, nullable) GTLRDocs_ParagraphStyle *paragraphStyle;

/**
 *  A mask that indicates which of the fields on the base ParagraphStyle have
 *  been changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_ParagraphStyleSuggestionState *paragraphStyleSuggestionState;

@end


/**
 *  A suggested change to PositionedObjectProperties.
 */
@interface GTLRDocs_SuggestedPositionedObjectProperties : GTLRObject

/**
 *  A PositionedObjectProperties that only includes the changes made in this
 *  suggestion. This can be used along with the
 *  positioned_object_properties_suggestion_state to see which fields have
 *  changed and their new values.
 */
@property(nonatomic, strong, nullable) GTLRDocs_PositionedObjectProperties *positionedObjectProperties;

/**
 *  A mask that indicates which of the fields on the base
 *  PositionedObjectProperties have been changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_PositionedObjectPropertiesSuggestionState *positionedObjectPropertiesSuggestionState;

@end


/**
 *  A suggested change to a TableCellStyle.
 */
@interface GTLRDocs_SuggestedTableCellStyle : GTLRObject

/**
 *  A TableCellStyle that only includes the changes made in this suggestion.
 *  This can be used along with the table_cell_style_suggestion_state to see
 *  which fields have changed and their new values.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TableCellStyle *tableCellStyle;

/**
 *  A mask that indicates which of the fields on the base TableCellStyle have
 *  been changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TableCellStyleSuggestionState *tableCellStyleSuggestionState;

@end


/**
 *  A suggested change to a TableRowStyle.
 */
@interface GTLRDocs_SuggestedTableRowStyle : GTLRObject

/**
 *  A TableRowStyle that only includes the changes made in this suggestion. This
 *  can be used along with the table_row_style_suggestion_state to see which
 *  fields have changed and their new values.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TableRowStyle *tableRowStyle;

/**
 *  A mask that indicates which of the fields on the base TableRowStyle have
 *  been changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TableRowStyleSuggestionState *tableRowStyleSuggestionState;

@end


/**
 *  A suggested change to a TextStyle.
 */
@interface GTLRDocs_SuggestedTextStyle : GTLRObject

/**
 *  A TextStyle that only includes the changes made in this suggestion. This can
 *  be used along with the text_style_suggestion_state to see which fields have
 *  changed and their new values.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyle *textStyle;

/**
 *  A mask that indicates which of the fields on the base TextStyle have been
 *  changed in this suggestion.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyleSuggestionState *textStyleSuggestionState;

@end


/**
 *  A StructuralElement representing a table.
 */
@interface GTLRDocs_Table : GTLRObject

/**
 *  Number of columns in the table. It's possible for a table to be
 *  non-rectangular, so some rows may have a different number of cells.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columns;

/**
 *  Number of rows in the table.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rows;

/**
 *  The suggested deletion IDs. If empty, then there are no suggested deletions
 *  of this content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  The suggested insertion IDs. A Table may have multiple insertion IDs if it's
 *  a nested suggested change. If empty, then this is not a suggested insertion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedInsertionIds;

/** The contents and style of each row. */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_TableRow *> *tableRows;

/** The style of the table. */
@property(nonatomic, strong, nullable) GTLRDocs_TableStyle *tableStyle;

@end


/**
 *  The contents and style of a cell in a Table.
 */
@interface GTLRDocs_TableCell : GTLRObject

/** The content of the cell. */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_StructuralElement *> *content;

/**
 *  The zero-based end index of this cell, exclusive, in UTF-16 code units.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endIndex;

/**
 *  The zero-based start index of this cell, in UTF-16 code units.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startIndex;

/**
 *  The suggested deletion IDs. If empty, then there are no suggested deletions
 *  of this content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  The suggested insertion IDs. A TableCell may have multiple insertion IDs if
 *  it's a nested suggested change. If empty, then this is not a suggested
 *  insertion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedInsertionIds;

/** The suggested changes to the table cell style, keyed by suggestion ID. */
@property(nonatomic, strong, nullable) GTLRDocs_TableCell_SuggestedTableCellStyleChanges *suggestedTableCellStyleChanges;

/** The style of the cell. */
@property(nonatomic, strong, nullable) GTLRDocs_TableCellStyle *tableCellStyle;

@end


/**
 *  The suggested changes to the table cell style, keyed by suggestion ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedTableCellStyle. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_TableCell_SuggestedTableCellStyleChanges : GTLRObject
@end


/**
 *  A border around a table cell. Table cell borders cannot be transparent. To
 *  hide a table cell border, make its width 0.
 */
@interface GTLRDocs_TableCellBorder : GTLRObject

/** The color of the border. This color cannot be transparent. */
@property(nonatomic, strong, nullable) GTLRDocs_OptionalColor *color;

/**
 *  The dash style of the border.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_TableCellBorder_DashStyle_Dash Dashed line. Corresponds
 *        to ECMA-376 ST_PresetLineDashVal value 'dash'. (Value: "DASH")
 *    @arg @c kGTLRDocs_TableCellBorder_DashStyle_DashStyleUnspecified
 *        Unspecified dash style. (Value: "DASH_STYLE_UNSPECIFIED")
 *    @arg @c kGTLRDocs_TableCellBorder_DashStyle_Dot Dotted line. Corresponds
 *        to ECMA-376 ST_PresetLineDashVal value 'dot'. (Value: "DOT")
 *    @arg @c kGTLRDocs_TableCellBorder_DashStyle_Solid Solid line. Corresponds
 *        to ECMA-376 ST_PresetLineDashVal value 'solid'. This is the default
 *        dash style. (Value: "SOLID")
 */
@property(nonatomic, copy, nullable) NSString *dashStyle;

/** The width of the border. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *width;

@end


/**
 *  Location of a single cell within a table.
 */
@interface GTLRDocs_TableCellLocation : GTLRObject

/**
 *  The zero-based column index. For example, the second column in the table has
 *  a column index of 1.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columnIndex;

/**
 *  The zero-based row index. For example, the second row in the table has a row
 *  index of 1.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowIndex;

/** The location where the table starts in the document. */
@property(nonatomic, strong, nullable) GTLRDocs_Location *tableStartLocation;

@end


/**
 *  The style of a TableCell. Inherited table cell styles are represented as
 *  unset fields in this message. A table cell style can inherit from the
 *  table's style.
 */
@interface GTLRDocs_TableCellStyle : GTLRObject

/** The background color of the cell. */
@property(nonatomic, strong, nullable) GTLRDocs_OptionalColor *backgroundColor;

/** The bottom border of the cell. */
@property(nonatomic, strong, nullable) GTLRDocs_TableCellBorder *borderBottom;

/** The left border of the cell. */
@property(nonatomic, strong, nullable) GTLRDocs_TableCellBorder *borderLeft;

/** The right border of the cell. */
@property(nonatomic, strong, nullable) GTLRDocs_TableCellBorder *borderRight;

/** The top border of the cell. */
@property(nonatomic, strong, nullable) GTLRDocs_TableCellBorder *borderTop;

/**
 *  The column span of the cell. This property is read-only.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columnSpan;

/**
 *  The alignment of the content in the table cell. The default alignment
 *  matches the alignment for newly created table cells in the Docs editor.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_TableCellStyle_ContentAlignment_Bottom An alignment that
 *        aligns the content to the bottom of the content holder. Corresponds to
 *        ECMA-376 ST_TextAnchoringType 'b'. (Value: "BOTTOM")
 *    @arg @c kGTLRDocs_TableCellStyle_ContentAlignment_ContentAlignmentUnspecified
 *        An unspecified content alignment. The content alignment is inherited
 *        from the parent if one exists. (Value:
 *        "CONTENT_ALIGNMENT_UNSPECIFIED")
 *    @arg @c kGTLRDocs_TableCellStyle_ContentAlignment_ContentAlignmentUnsupported
 *        An unsupported content alignment. (Value:
 *        "CONTENT_ALIGNMENT_UNSUPPORTED")
 *    @arg @c kGTLRDocs_TableCellStyle_ContentAlignment_Middle An alignment that
 *        aligns the content to the middle of the content holder. Corresponds to
 *        ECMA-376 ST_TextAnchoringType 'ctr'. (Value: "MIDDLE")
 *    @arg @c kGTLRDocs_TableCellStyle_ContentAlignment_Top An alignment that
 *        aligns the content to the top of the content holder. Corresponds to
 *        ECMA-376 ST_TextAnchoringType 't'. (Value: "TOP")
 */
@property(nonatomic, copy, nullable) NSString *contentAlignment;

/** The bottom padding of the cell. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *paddingBottom;

/** The left padding of the cell. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *paddingLeft;

/** The right padding of the cell. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *paddingRight;

/** The top padding of the cell. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *paddingTop;

/**
 *  The row span of the cell. This property is read-only.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowSpan;

@end


/**
 *  A mask that indicates which of the fields on the base TableCellStyle have
 *  been changed in this suggestion. For any field set to true, there's a new
 *  suggested value.
 */
@interface GTLRDocs_TableCellStyleSuggestionState : GTLRObject

/**
 *  Indicates if there was a suggested change to background_color.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *backgroundColorSuggested;

/**
 *  Indicates if there was a suggested change to border_bottom.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *borderBottomSuggested;

/**
 *  Indicates if there was a suggested change to border_left.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *borderLeftSuggested;

/**
 *  Indicates if there was a suggested change to border_right.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *borderRightSuggested;

/**
 *  Indicates if there was a suggested change to border_top.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *borderTopSuggested;

/**
 *  Indicates if there was a suggested change to column_span.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columnSpanSuggested;

/**
 *  Indicates if there was a suggested change to content_alignment.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *contentAlignmentSuggested;

/**
 *  Indicates if there was a suggested change to padding_bottom.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *paddingBottomSuggested;

/**
 *  Indicates if there was a suggested change to padding_left.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *paddingLeftSuggested;

/**
 *  Indicates if there was a suggested change to padding_right.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *paddingRightSuggested;

/**
 *  Indicates if there was a suggested change to padding_top.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *paddingTopSuggested;

/**
 *  Indicates if there was a suggested change to row_span.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowSpanSuggested;

@end


/**
 *  The properties of a column in a table.
 */
@interface GTLRDocs_TableColumnProperties : GTLRObject

/**
 *  The width of the column. Set when the column's `width_type` is FIXED_WIDTH.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *width;

/**
 *  The width type of the column.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_TableColumnProperties_WidthType_EvenlyDistributed The
 *        column width is evenly distributed among the other evenly distributed
 *        columns. The width of the column is automatically determined and will
 *        have an equal portion of the width remaining for the table after
 *        accounting for all columns with specified widths. (Value:
 *        "EVENLY_DISTRIBUTED")
 *    @arg @c kGTLRDocs_TableColumnProperties_WidthType_FixedWidth A fixed
 *        column width. The width property contains the column's width. (Value:
 *        "FIXED_WIDTH")
 *    @arg @c kGTLRDocs_TableColumnProperties_WidthType_WidthTypeUnspecified The
 *        column width type is unspecified. (Value: "WIDTH_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *widthType;

@end


/**
 *  A StructuralElement representing a table of contents.
 */
@interface GTLRDocs_TableOfContents : GTLRObject

/** The content of the table of contents. */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_StructuralElement *> *content;

/**
 *  The suggested deletion IDs. If empty, then there are no suggested deletions
 *  of this content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  The suggested insertion IDs. A TableOfContents may have multiple insertion
 *  IDs if it is a nested suggested change. If empty, then this is not a
 *  suggested insertion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedInsertionIds;

@end


/**
 *  A table range represents a reference to a subset of a table. It's important
 *  to note that the cells specified by a table range do not necessarily form a
 *  rectangle. For example, let's say we have a 3 x 3 table where all the cells
 *  of the last row are merged together. The table looks like this: [ ] A table
 *  range with table cell location = (table_start_location, row = 0, column =
 *  0), row span = 3 and column span = 2 specifies the following cells: x x [ x
 *  x x ]
 */
@interface GTLRDocs_TableRange : GTLRObject

/**
 *  The column span of the table range.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columnSpan;

/**
 *  The row span of the table range.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rowSpan;

/** The cell location where the table range starts. */
@property(nonatomic, strong, nullable) GTLRDocs_TableCellLocation *tableCellLocation;

@end


/**
 *  The contents and style of a row in a Table.
 */
@interface GTLRDocs_TableRow : GTLRObject

/**
 *  The zero-based end index of this row, exclusive, in UTF-16 code units.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *endIndex;

/**
 *  The zero-based start index of this row, in UTF-16 code units.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startIndex;

/**
 *  The suggested deletion IDs. If empty, then there are no suggested deletions
 *  of this content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  The suggested insertion IDs. A TableRow may have multiple insertion IDs if
 *  it's a nested suggested change. If empty, then this is not a suggested
 *  insertion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedInsertionIds;

/** The suggested style changes to this row, keyed by suggestion ID. */
@property(nonatomic, strong, nullable) GTLRDocs_TableRow_SuggestedTableRowStyleChanges *suggestedTableRowStyleChanges;

/**
 *  The contents and style of each cell in this row. It's possible for a table
 *  to be non-rectangular, so some rows may have a different number of cells
 *  than other rows in the same table.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_TableCell *> *tableCells;

/** The style of the table row. */
@property(nonatomic, strong, nullable) GTLRDocs_TableRowStyle *tableRowStyle;

@end


/**
 *  The suggested style changes to this row, keyed by suggestion ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedTableRowStyle. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_TableRow_SuggestedTableRowStyleChanges : GTLRObject
@end


/**
 *  Styles that apply to a table row.
 */
@interface GTLRDocs_TableRowStyle : GTLRObject

/**
 *  The minimum height of the row. The row will be rendered in the Docs editor
 *  at a height equal to or greater than this value in order to show all the
 *  content in the row's cells.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *minRowHeight;

/**
 *  Whether the row cannot overflow across page or column boundaries.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *preventOverflow;

/**
 *  Whether the row is a table header.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *tableHeader;

@end


/**
 *  A mask that indicates which of the fields on the base TableRowStyle have
 *  been changed in this suggestion. For any field set to true, there's a new
 *  suggested value.
 */
@interface GTLRDocs_TableRowStyleSuggestionState : GTLRObject

/**
 *  Indicates if there was a suggested change to min_row_height.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minRowHeightSuggested;

@end


/**
 *  Styles that apply to a table.
 */
@interface GTLRDocs_TableStyle : GTLRObject

/**
 *  The properties of each column. Note that in Docs, tables contain rows and
 *  rows contain cells, similar to HTML. So the properties for a row can be
 *  found on the row's table_row_style.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDocs_TableColumnProperties *> *tableColumnProperties;

@end


/**
 *  A tab stop within a paragraph.
 */
@interface GTLRDocs_TabStop : GTLRObject

/**
 *  The alignment of this tab stop. If unset, the value defaults to START.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_TabStop_Alignment_Center The tab stop is aligned to the
 *        center of the line. (Value: "CENTER")
 *    @arg @c kGTLRDocs_TabStop_Alignment_End The tab stop is aligned to the end
 *        of the line. (Value: "END")
 *    @arg @c kGTLRDocs_TabStop_Alignment_Start The tab stop is aligned to the
 *        start of the line. This is the default. (Value: "START")
 *    @arg @c kGTLRDocs_TabStop_Alignment_TabStopAlignmentUnspecified The tab
 *        stop alignment is unspecified. (Value:
 *        "TAB_STOP_ALIGNMENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *alignment;

/** The offset between this tab stop and the start margin. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *offset;

@end


/**
 *  A ParagraphElement that represents a run of text that all has the same
 *  styling.
 */
@interface GTLRDocs_TextRun : GTLRObject

/**
 *  The text of this run. Any non-text elements in the run are replaced with the
 *  Unicode character U+E907.
 */
@property(nonatomic, copy, nullable) NSString *content;

/**
 *  The suggested deletion IDs. If empty, then there are no suggested deletions
 *  of this content.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedDeletionIds;

/**
 *  The suggested insertion IDs. A TextRun may have multiple insertion IDs if
 *  it's a nested suggested change. If empty, then this is not a suggested
 *  insertion.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suggestedInsertionIds;

/** The suggested text style changes to this run, keyed by suggestion ID. */
@property(nonatomic, strong, nullable) GTLRDocs_TextRun_SuggestedTextStyleChanges *suggestedTextStyleChanges;

/** The text style of this run. */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyle *textStyle;

@end


/**
 *  The suggested text style changes to this run, keyed by suggestion ID.
 *
 *  @note This class is documented as having more properties of
 *        GTLRDocs_SuggestedTextStyle. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRDocs_TextRun_SuggestedTextStyleChanges : GTLRObject
@end


/**
 *  Represents the styling that can be applied to text. Inherited text styles
 *  are represented as unset fields in this message. A text style's parent
 *  depends on where the text style is defined: * The TextStyle of text in a
 *  Paragraph inherits from the paragraph's corresponding named style type. *
 *  The TextStyle on a named style inherits from the normal text named style. *
 *  The TextStyle of the normal text named style inherits from the default text
 *  style in the Docs editor. * The TextStyle on a Paragraph element that's
 *  contained in a table may inherit its text style from the table style. If the
 *  text style does not inherit from a parent, unsetting fields will revert the
 *  style to a value matching the defaults in the Docs editor.
 */
@interface GTLRDocs_TextStyle : GTLRObject

/**
 *  The background color of the text. If set, the color is either an RGB color
 *  or transparent, depending on the `color` field.
 */
@property(nonatomic, strong, nullable) GTLRDocs_OptionalColor *backgroundColor;

/**
 *  The text's vertical offset from its normal position. Text with `SUPERSCRIPT`
 *  or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font
 *  size, computed based on the `font_size` field. Changes in this field don't
 *  affect the `font_size`.
 *
 *  Likely values:
 *    @arg @c kGTLRDocs_TextStyle_BaselineOffset_BaselineOffsetUnspecified The
 *        text's baseline offset is inherited from the parent. (Value:
 *        "BASELINE_OFFSET_UNSPECIFIED")
 *    @arg @c kGTLRDocs_TextStyle_BaselineOffset_None The text is not vertically
 *        offset. (Value: "NONE")
 *    @arg @c kGTLRDocs_TextStyle_BaselineOffset_Subscript The text is
 *        vertically offset downwards (subscript). (Value: "SUBSCRIPT")
 *    @arg @c kGTLRDocs_TextStyle_BaselineOffset_Superscript The text is
 *        vertically offset upwards (superscript). (Value: "SUPERSCRIPT")
 */
@property(nonatomic, copy, nullable) NSString *baselineOffset;

/**
 *  Whether or not the text is rendered as bold.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *bold;

/** The size of the text's font. */
@property(nonatomic, strong, nullable) GTLRDocs_Dimension *fontSize;

/**
 *  The foreground color of the text. If set, the color is either an RGB color
 *  or transparent, depending on the `color` field.
 */
@property(nonatomic, strong, nullable) GTLRDocs_OptionalColor *foregroundColor;

/**
 *  Whether or not the text is italicized.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *italic;

/**
 *  The hyperlink destination of the text. If unset, there's no link. Links are
 *  not inherited from parent text. Changing the link in an update request
 *  causes some other changes to the text style of the range: * When setting a
 *  link, the text foreground color will be updated to the default link color
 *  and the text will be underlined. If these fields are modified in the same
 *  request, those values will be used instead of the link defaults. * Setting a
 *  link on a text range that overlaps with an existing link will also update
 *  the existing link to point to the new URL. * Links are not settable on
 *  newline characters. As a result, setting a link on a text range that crosses
 *  a paragraph boundary, such as `"ABC\\n123"`, will separate the newline
 *  character(s) into their own text runs. The link will be applied separately
 *  to the runs before and after the newline. * Removing a link will update the
 *  text style of the range to match the style of the preceding text (or the
 *  default text styles if the preceding text is another link) unless different
 *  styles are being set in the same request.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Link *link;

/**
 *  Whether or not the text is in small capital letters.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *smallCaps;

/**
 *  Whether or not the text is struck through.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *strikethrough;

/**
 *  Whether or not the text is underlined.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *underline;

/**
 *  The font family and rendered weight of the text. If an update request
 *  specifies values for both `weighted_font_family` and `bold`, the
 *  `weighted_font_family` is applied first, then `bold`. If
 *  `weighted_font_family#weight` is not set, it defaults to `400`. If
 *  `weighted_font_family` is set, then `weighted_font_family#font_family` must
 *  also be set with a non-empty value. Otherwise, a 400 bad request error is
 *  returned.
 */
@property(nonatomic, strong, nullable) GTLRDocs_WeightedFontFamily *weightedFontFamily;

@end


/**
 *  A mask that indicates which of the fields on the base TextStyle have been
 *  changed in this suggestion. For any field set to true, there's a new
 *  suggested value.
 */
@interface GTLRDocs_TextStyleSuggestionState : GTLRObject

/**
 *  Indicates if there was a suggested change to background_color.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *backgroundColorSuggested;

/**
 *  Indicates if there was a suggested change to baseline_offset.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *baselineOffsetSuggested;

/**
 *  Indicates if there was a suggested change to bold.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *boldSuggested;

/**
 *  Indicates if there was a suggested change to font_size.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fontSizeSuggested;

/**
 *  Indicates if there was a suggested change to foreground_color.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *foregroundColorSuggested;

/**
 *  Indicates if there was a suggested change to italic.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *italicSuggested;

/**
 *  Indicates if there was a suggested change to link.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *linkSuggested;

/**
 *  Indicates if there was a suggested change to small_caps.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *smallCapsSuggested;

/**
 *  Indicates if there was a suggested change to strikethrough.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *strikethroughSuggested;

/**
 *  Indicates if there was a suggested change to underline.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *underlineSuggested;

/**
 *  Indicates if there was a suggested change to weighted_font_family.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *weightedFontFamilySuggested;

@end


/**
 *  Unmerges cells in a Table.
 */
@interface GTLRDocs_UnmergeTableCellsRequest : GTLRObject

/**
 *  The table range specifying which cells of the table to unmerge. All merged
 *  cells in this range will be unmerged, and cells that are already unmerged
 *  will not be affected. If the range has no merged cells, the request will do
 *  nothing. If there is text in any of the merged cells, the text will remain
 *  in the "head" cell of the resulting block of unmerged cells. The "head" cell
 *  is the upper-left cell when the content direction is from left to right, and
 *  the upper-right otherwise.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TableRange *tableRange;

@end


/**
 *  Updates the DocumentStyle.
 */
@interface GTLRDocs_UpdateDocumentStyleRequest : GTLRObject

/**
 *  The styles to set on the document. Certain document style changes may cause
 *  other changes in order to mirror the behavior of the Docs editor. See the
 *  documentation of DocumentStyle for more information.
 */
@property(nonatomic, strong, nullable) GTLRDocs_DocumentStyle *documentStyle;

/**
 *  The fields that should be updated. At least one field must be specified. The
 *  root `document_style` is implied and should not be specified. A single `"*"`
 *  can be used as short-hand for listing every field. For example to update the
 *  background, set `fields` to `"background"`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

@end


/**
 *  Update the styling of all paragraphs that overlap with the given range.
 */
@interface GTLRDocs_UpdateParagraphStyleRequest : GTLRObject

/**
 *  The fields that should be updated. At least one field must be specified. The
 *  root `paragraph_style` is implied and should not be specified. A single
 *  `"*"` can be used as short-hand for listing every field. For example, to
 *  update the paragraph style's alignment property, set `fields` to
 *  `"alignment"`. To reset a property to its default value, include its field
 *  name in the field mask but leave the field itself unset.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/**
 *  The styles to set on the paragraphs. Certain paragraph style changes may
 *  cause other changes in order to mirror the behavior of the Docs editor. See
 *  the documentation of ParagraphStyle for more information.
 */
@property(nonatomic, strong, nullable) GTLRDocs_ParagraphStyle *paragraphStyle;

/** The range overlapping the paragraphs to style. */
@property(nonatomic, strong, nullable) GTLRDocs_Range *range;

@end


/**
 *  Updates the SectionStyle.
 */
@interface GTLRDocs_UpdateSectionStyleRequest : GTLRObject

/**
 *  The fields that should be updated. At least one field must be specified. The
 *  root `section_style` is implied and must not be specified. A single `"*"`
 *  can be used as short-hand for listing every field. For example to update the
 *  left margin, set `fields` to `"margin_left"`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/**
 *  The range overlapping the sections to style. Because section breaks can only
 *  be inserted inside the body, the segment ID field must be empty.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Range *range;

/**
 *  The styles to be set on the section. Certain section style changes may cause
 *  other changes in order to mirror the behavior of the Docs editor. See the
 *  documentation of SectionStyle for more information.
 */
@property(nonatomic, strong, nullable) GTLRDocs_SectionStyle *sectionStyle;

@end


/**
 *  Updates the style of a range of table cells.
 */
@interface GTLRDocs_UpdateTableCellStyleRequest : GTLRObject

/**
 *  The fields that should be updated. At least one field must be specified. The
 *  root `tableCellStyle` is implied and should not be specified. A single `"*"`
 *  can be used as short-hand for listing every field. For example to update the
 *  table cell background color, set `fields` to `"backgroundColor"`. To reset a
 *  property to its default value, include its field name in the field mask but
 *  leave the field itself unset.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/**
 *  The style to set on the table cells. When updating borders, if a cell shares
 *  a border with an adjacent cell, the corresponding border property of the
 *  adjacent cell is updated as well. Borders that are merged and invisible are
 *  not updated. Since updating a border shared by adjacent cells in the same
 *  request can cause conflicting border updates, border updates are applied in
 *  the following order: - `border_right` - `border_left` - `border_bottom` -
 *  `border_top`
 */
@property(nonatomic, strong, nullable) GTLRDocs_TableCellStyle *tableCellStyle;

/**
 *  The table range representing the subset of the table to which the updates
 *  are applied.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TableRange *tableRange;

/**
 *  The location where the table starts in the document. When specified, the
 *  updates are applied to all the cells in the table.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Location *tableStartLocation;

@end


/**
 *  Updates the TableColumnProperties of columns in a table.
 */
@interface GTLRDocs_UpdateTableColumnPropertiesRequest : GTLRObject

/**
 *  The list of zero-based column indices whose property should be updated. If
 *  no indices are specified, all columns will be updated.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *columnIndices;

/**
 *  The fields that should be updated. At least one field must be specified. The
 *  root `tableColumnProperties` is implied and should not be specified. A
 *  single `"*"` can be used as short-hand for listing every field. For example
 *  to update the column width, set `fields` to `"width"`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/**
 *  The table column properties to update. If the value of
 *  `table_column_properties#width` is less than 5 points (5/72 inch), a 400 bad
 *  request error is returned.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TableColumnProperties *tableColumnProperties;

/** The location where the table starts in the document. */
@property(nonatomic, strong, nullable) GTLRDocs_Location *tableStartLocation;

@end


/**
 *  Updates the TableRowStyle of rows in a table.
 */
@interface GTLRDocs_UpdateTableRowStyleRequest : GTLRObject

/**
 *  The fields that should be updated. At least one field must be specified. The
 *  root `tableRowStyle` is implied and should not be specified. A single `"*"`
 *  can be used as short-hand for listing every field. For example to update the
 *  minimum row height, set `fields` to `"min_row_height"`.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/**
 *  The list of zero-based row indices whose style should be updated. If no
 *  indices are specified, all rows will be updated.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *rowIndices;

/** The styles to be set on the rows. */
@property(nonatomic, strong, nullable) GTLRDocs_TableRowStyle *tableRowStyle;

/** The location where the table starts in the document. */
@property(nonatomic, strong, nullable) GTLRDocs_Location *tableStartLocation;

@end


/**
 *  Update the styling of text.
 */
@interface GTLRDocs_UpdateTextStyleRequest : GTLRObject

/**
 *  The fields that should be updated. At least one field must be specified. The
 *  root `text_style` is implied and should not be specified. A single `"*"` can
 *  be used as short-hand for listing every field. For example, to update the
 *  text style to bold, set `fields` to `"bold"`. To reset a property to its
 *  default value, include its field name in the field mask but leave the field
 *  itself unset.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *fields;

/**
 *  The range of text to style. The range may be extended to include adjacent
 *  newlines. If the range fully contains a paragraph belonging to a list, the
 *  paragraph's bullet is also updated with the matching text style. Ranges
 *  cannot be inserted inside a relative UpdateTextStyleRequest.
 */
@property(nonatomic, strong, nullable) GTLRDocs_Range *range;

/**
 *  The styles to set on the text. If the value for a particular style matches
 *  that of the parent, that style will be set to inherit. Certain text style
 *  changes may cause other changes in order to to mirror the behavior of the
 *  Docs editor. See the documentation of TextStyle for more information.
 */
@property(nonatomic, strong, nullable) GTLRDocs_TextStyle *textStyle;

@end


/**
 *  Represents a font family and weight of text.
 */
@interface GTLRDocs_WeightedFontFamily : GTLRObject

/**
 *  The font family of the text. The font family can be any font from the Font
 *  menu in Docs or from [Google Fonts] (https://fonts.google.com/). If the font
 *  name is unrecognized, the text is rendered in `Arial`.
 */
@property(nonatomic, copy, nullable) NSString *fontFamily;

/**
 *  The weight of the font. This field can have any value that's a multiple of
 *  `100` between `100` and `900`, inclusive. This range corresponds to the
 *  numerical values described in the CSS 2.1 Specification, [section
 *  15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness), with
 *  non-numerical values disallowed. The default value is `400` ("normal"). The
 *  font weight makes up just one component of the rendered font weight. A
 *  combination of the `weight` and the text style's resolved `bold` value
 *  determine the rendered weight, after accounting for inheritance: * If the
 *  text is bold and the weight is less than `400`, the rendered weight is 400.
 *  * If the text is bold and the weight is greater than or equal to `400` but
 *  is less than `700`, the rendered weight is `700`. * If the weight is greater
 *  than or equal to `700`, the rendered weight is equal to the weight. * If the
 *  text is not bold, the rendered weight is equal to the weight.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *weight;

@end


/**
 *  Provides control over how write requests are executed.
 */
@interface GTLRDocs_WriteControl : GTLRObject

/**
 *  The optional revision ID of the document the write request is applied to. If
 *  this is not the latest revision of the document, the request is not
 *  processed and returns a 400 bad request error. When a required revision ID
 *  is returned in a response, it indicates the revision ID of the document
 *  after the request was applied.
 */
@property(nonatomic, copy, nullable) NSString *requiredRevisionId;

/**
 *  The optional target revision ID of the document the write request is applied
 *  to. If collaborator changes have occurred after the document was read using
 *  the API, the changes produced by this write request are applied against the
 *  collaborator changes. This results in a new revision of the document that
 *  incorporates both the collaborator changes and the changes in the request,
 *  with the Docs server resolving conflicting changes. When using target
 *  revision ID, the API client can be thought of as another collaborator of the
 *  document. The target revision ID can only be used to write to recent
 *  versions of a document. If the target revision is too far behind the latest
 *  revision, the request is not processed and returns a 400 bad request error.
 *  The request should be tried again after retrieving the latest version of the
 *  document. Usually a revision ID remains valid for use as a target revision
 *  for several minutes after it's read, but for frequently edited documents
 *  this window might be shorter.
 */
@property(nonatomic, copy, nullable) NSString *targetRevisionId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
