// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Filestore API (file/v1)
// Description:
//   The Cloud Filestore API is used for creating and managing cloud file
//   servers.
// Documentation:
//   https://cloud.google.com/filestore/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCloudFilestore_Backup;
@class GTLRCloudFilestore_Backup_Labels;
@class GTLRCloudFilestore_DailyCycle;
@class GTLRCloudFilestore_Date;
@class GTLRCloudFilestore_DenyMaintenancePeriod;
@class GTLRCloudFilestore_FileShareConfig;
@class GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_Labels;
@class GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenancePolicyNames;
@class GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenanceSchedules;
@class GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_NotificationParameters;
@class GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_ProducerMetadata;
@class GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_SoftwareVersions;
@class GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule;
@class GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings;
@class GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings_MaintenancePolicies;
@class GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata;
@class GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter;
@class GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility;
@class GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility_Eligibilities;
@class GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource;
@class GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility;
@class GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata;
@class GTLRCloudFilestore_Instance;
@class GTLRCloudFilestore_Instance_Labels;
@class GTLRCloudFilestore_Location;
@class GTLRCloudFilestore_Location_Labels;
@class GTLRCloudFilestore_Location_Metadata;
@class GTLRCloudFilestore_MaintenancePolicy;
@class GTLRCloudFilestore_MaintenancePolicy_Labels;
@class GTLRCloudFilestore_MaintenanceWindow;
@class GTLRCloudFilestore_NetworkConfig;
@class GTLRCloudFilestore_NfsExportOptions;
@class GTLRCloudFilestore_Operation;
@class GTLRCloudFilestore_Operation_Metadata;
@class GTLRCloudFilestore_Operation_Response;
@class GTLRCloudFilestore_Schedule;
@class GTLRCloudFilestore_Snapshot;
@class GTLRCloudFilestore_Snapshot_Labels;
@class GTLRCloudFilestore_Status;
@class GTLRCloudFilestore_Status_Details_Item;
@class GTLRCloudFilestore_TimeOfDay;
@class GTLRCloudFilestore_UpdatePolicy;
@class GTLRCloudFilestore_WeeklyCycle;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCloudFilestore_Backup.sourceInstanceTier

/**
 *  BASIC instances offer a maximum capacity of 63.9 TB. BASIC_HDD is an alias
 *  for STANDARD Tier, offering economical performance backed by HDD.
 *
 *  Value: "BASIC_HDD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Backup_SourceInstanceTier_BasicHdd;
/**
 *  BASIC instances offer a maximum capacity of 63.9 TB. BASIC_SSD is an alias
 *  for PREMIUM Tier, and offers improved performance backed by SSD.
 *
 *  Value: "BASIC_SSD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Backup_SourceInstanceTier_BasicSsd;
/**
 *  ENTERPRISE instances offer the features and availability needed for
 *  mission-critical workloads.
 *
 *  Value: "ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Backup_SourceInstanceTier_Enterprise;
/**
 *  HIGH_SCALE instances offer expanded capacity and performance scaling
 *  capabilities.
 *
 *  Value: "HIGH_SCALE_SSD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Backup_SourceInstanceTier_HighScaleSsd;
/**
 *  PREMIUM tier. BASIC_SSD is the preferred term for this tier.
 *
 *  Value: "PREMIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Backup_SourceInstanceTier_Premium;
/**
 *  STANDARD tier. BASIC_HDD is the preferred term for this tier.
 *
 *  Value: "STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Backup_SourceInstanceTier_Standard;
/**
 *  Not set.
 *
 *  Value: "TIER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Backup_SourceInstanceTier_TierUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudFilestore_Backup.state

/**
 *  Backup is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Backup_State_Creating;
/**
 *  Backup is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Backup_State_Deleting;
/**
 *  Backup has been taken and the operation is being finalized. At this point,
 *  changes to the file share will not be reflected in the backup.
 *
 *  Value: "FINALIZING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Backup_State_Finalizing;
/**
 *  Backup is available for use.
 *
 *  Value: "READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Backup_State_Ready;
/**
 *  State not set.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Backup_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance.state

/**
 *  Instance is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Creating;
/**
 *  Instance is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Deleting;
/**
 *  Instance encountered an error and is in indeterministic state.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Error;
/**
 *  Instance has been created and is ready to use.
 *
 *  Value: "READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Ready;
/**
 *  Instance is unheathy and under repair.
 *
 *  Value: "REPAIRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Repairing;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_StateUnspecified;
/**
 *  Instance is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Updating;

// ----------------------------------------------------------------------------
// GTLRCloudFilestore_Instance.state

/**
 *  The instance is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_State_Creating;
/**
 *  The instance is shutting down.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_State_Deleting;
/**
 *  The instance is experiencing an issue and might be unusable. You can get
 *  further details from the `statusMessage` field of the `Instance` resource.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_State_Error;
/**
 *  The instance is available for use.
 *
 *  Value: "READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_State_Ready;
/**
 *  Work is being done on the instance. You can get further details from the
 *  `statusMessage` field of the `Instance` resource.
 *
 *  Value: "REPAIRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_State_Repairing;
/**
 *  The instance is restoring a backup to an existing file share and may be
 *  unusable during this time.
 *
 *  Value: "RESTORING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_State_Restoring;
/**
 *  The instance is in the process of becoming active.
 *
 *  Value: "RESUMING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_State_Resuming;
/**
 *  State not set.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_State_StateUnspecified;
/**
 *  The instance is suspended. You can get further details from the
 *  `suspension_reasons` field of the `Instance` resource.
 *
 *  Value: "SUSPENDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_State_Suspended;
/**
 *  The instance is in the process of becoming suspended.
 *
 *  Value: "SUSPENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_State_Suspending;

// ----------------------------------------------------------------------------
// GTLRCloudFilestore_Instance.suspensionReasons

/**
 *  The KMS key used by the instance is either revoked or denied access to.
 *
 *  Value: "KMS_KEY_ISSUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_SuspensionReasons_KmsKeyIssue;
/**
 *  Not set.
 *
 *  Value: "SUSPENSION_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_SuspensionReasons_SuspensionReasonUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudFilestore_Instance.tier

/**
 *  BASIC instances offer a maximum capacity of 63.9 TB. BASIC_HDD is an alias
 *  for STANDARD Tier, offering economical performance backed by HDD.
 *
 *  Value: "BASIC_HDD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_Tier_BasicHdd;
/**
 *  BASIC instances offer a maximum capacity of 63.9 TB. BASIC_SSD is an alias
 *  for PREMIUM Tier, and offers improved performance backed by SSD.
 *
 *  Value: "BASIC_SSD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_Tier_BasicSsd;
/**
 *  ENTERPRISE instances offer the features and availability needed for
 *  mission-critical workloads.
 *
 *  Value: "ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_Tier_Enterprise;
/**
 *  HIGH_SCALE instances offer expanded capacity and performance scaling
 *  capabilities.
 *
 *  Value: "HIGH_SCALE_SSD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_Tier_HighScaleSsd;
/**
 *  PREMIUM tier. BASIC_SSD is the preferred term for this tier.
 *
 *  Value: "PREMIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_Tier_Premium;
/**
 *  STANDARD tier. BASIC_HDD is the preferred term for this tier.
 *
 *  Value: "STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_Tier_Standard;
/**
 *  Not set.
 *
 *  Value: "TIER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Instance_Tier_TierUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudFilestore_MaintenancePolicy.state

/**
 *  Resource is being deleted. It can no longer be attached to instances.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_MaintenancePolicy_State_Deleting;
/**
 *  Resource is ready to be used.
 *
 *  Value: "READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_MaintenancePolicy_State_Ready;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_MaintenancePolicy_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudFilestore_NetworkConfig.connectMode

/**
 *  Not set.
 *
 *  Value: "CONNECT_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_NetworkConfig_ConnectMode_ConnectModeUnspecified;
/**
 *  Connect via direct peering to the Filestore service.
 *
 *  Value: "DIRECT_PEERING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_NetworkConfig_ConnectMode_DirectPeering;
/**
 *  Connect to your Filestore instance using Private Service Access. Private
 *  services access provides an IP address range for multiple Google Cloud
 *  services, including Filestore.
 *
 *  Value: "PRIVATE_SERVICE_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_NetworkConfig_ConnectMode_PrivateServiceAccess;

// ----------------------------------------------------------------------------
// GTLRCloudFilestore_NetworkConfig.modes

/**
 *  Internet protocol not set.
 *
 *  Value: "ADDRESS_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_NetworkConfig_Modes_AddressModeUnspecified;
/**
 *  Use the IPv4 internet protocol.
 *
 *  Value: "MODE_IPV4"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_NetworkConfig_Modes_ModeIpv4;

// ----------------------------------------------------------------------------
// GTLRCloudFilestore_NfsExportOptions.accessMode

/**
 *  AccessMode not set.
 *
 *  Value: "ACCESS_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_NfsExportOptions_AccessMode_AccessModeUnspecified;
/**
 *  The client can only read the file share.
 *
 *  Value: "READ_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_NfsExportOptions_AccessMode_ReadOnly;
/**
 *  The client can read and write the file share (default).
 *
 *  Value: "READ_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_NfsExportOptions_AccessMode_ReadWrite;

// ----------------------------------------------------------------------------
// GTLRCloudFilestore_NfsExportOptions.squashMode

/**
 *  The Root user has root access to the file share (default).
 *
 *  Value: "NO_ROOT_SQUASH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_NfsExportOptions_SquashMode_NoRootSquash;
/**
 *  The Root user has squashed access to the anonymous uid/gid.
 *
 *  Value: "ROOT_SQUASH"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_NfsExportOptions_SquashMode_RootSquash;
/**
 *  SquashMode not set.
 *
 *  Value: "SQUASH_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_NfsExportOptions_SquashMode_SquashModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudFilestore_Schedule.day

/**
 *  The day of the week is unspecified.
 *
 *  Value: "DAY_OF_WEEK_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Schedule_Day_DayOfWeekUnspecified;
/**
 *  Friday
 *
 *  Value: "FRIDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Schedule_Day_Friday;
/**
 *  Monday
 *
 *  Value: "MONDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Schedule_Day_Monday;
/**
 *  Saturday
 *
 *  Value: "SATURDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Schedule_Day_Saturday;
/**
 *  Sunday
 *
 *  Value: "SUNDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Schedule_Day_Sunday;
/**
 *  Thursday
 *
 *  Value: "THURSDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Schedule_Day_Thursday;
/**
 *  Tuesday
 *
 *  Value: "TUESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Schedule_Day_Tuesday;
/**
 *  Wednesday
 *
 *  Value: "WEDNESDAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Schedule_Day_Wednesday;

// ----------------------------------------------------------------------------
// GTLRCloudFilestore_Snapshot.state

/**
 *  Snapshot is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Snapshot_State_Creating;
/**
 *  Snapshot is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Snapshot_State_Deleting;
/**
 *  Snapshot is available for use.
 *
 *  Value: "READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Snapshot_State_Ready;
/**
 *  State not set.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_Snapshot_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCloudFilestore_UpdatePolicy.channel

/**
 *  Early channel within a customer project.
 *
 *  Value: "EARLIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_UpdatePolicy_Channel_Earlier;
/**
 *  Later channel within a customer project.
 *
 *  Value: "LATER"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_UpdatePolicy_Channel_Later;
/**
 *  Unspecified channel.
 *
 *  Value: "UPDATE_CHANNEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_UpdatePolicy_Channel_UpdateChannelUnspecified;
/**
 *  ! ! The follow channels can ONLY be used if you adopt the new MW system! ! !
 *  NOTE: all WEEK channels are assumed to be under a weekly window. ! There is
 *  currently no dedicated channel definitions for Daily windows. ! If you use
 *  Daily window, the system will assume a 1d (24Hours) advanced ! notification
 *  period b/w EARLY and LATER. ! We may consider support more flexible daily
 *  channel specifications in ! the future. WEEK1 == EARLIER with minimum 7d
 *  advanced notification. {7d, 14d} The system will treat them equally and will
 *  use WEEK1 whenever it can. New customers are encouraged to use this channel
 *  annotation.
 *
 *  Value: "WEEK1"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_UpdatePolicy_Channel_Week1;
/**
 *  WEEK2 == LATER with minimum 14d advanced notification {14d, 21d}.
 *
 *  Value: "WEEK2"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_UpdatePolicy_Channel_Week2;
/**
 *  WEEK5 == 40d support. minimum 35d advanced notification {35d, 42d}.
 *
 *  Value: "WEEK5"
 */
FOUNDATION_EXTERN NSString * const kGTLRCloudFilestore_UpdatePolicy_Channel_Week5;

/**
 *  A Filestore backup.
 */
@interface GTLRCloudFilestore_Backup : GTLRObject

/**
 *  Output only. Capacity of the source file share when the backup was created.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *capacityGb;

/** Output only. The time when the backup was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  A description of the backup with 2048 characters or less. Requests with
 *  longer descriptions will be rejected.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. Amount of bytes that will be downloaded if the backup is
 *  restored. This may be different than storage bytes, since sequential backups
 *  of the same disk will share storage.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *downloadBytes;

/** Resource labels to represent user provided metadata. */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_Backup_Labels *labels;

/**
 *  Output only. The resource name of the backup, in the format
 *  `projects/{project_number}/locations/{location_id}/backups/{backup_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzs;

/**
 *  Name of the file share in the source Filestore instance that the backup is
 *  created from.
 */
@property(nonatomic, copy, nullable) NSString *sourceFileShare;

/**
 *  The resource name of the source Filestore instance, in the format
 *  `projects/{project_number}/locations/{location_id}/instances/{instance_id}`,
 *  used to create this backup.
 */
@property(nonatomic, copy, nullable) NSString *sourceInstance;

/**
 *  Output only. The service tier of the source Filestore instance that this
 *  backup is created from.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudFilestore_Backup_SourceInstanceTier_BasicHdd BASIC
 *        instances offer a maximum capacity of 63.9 TB. BASIC_HDD is an alias
 *        for STANDARD Tier, offering economical performance backed by HDD.
 *        (Value: "BASIC_HDD")
 *    @arg @c kGTLRCloudFilestore_Backup_SourceInstanceTier_BasicSsd BASIC
 *        instances offer a maximum capacity of 63.9 TB. BASIC_SSD is an alias
 *        for PREMIUM Tier, and offers improved performance backed by SSD.
 *        (Value: "BASIC_SSD")
 *    @arg @c kGTLRCloudFilestore_Backup_SourceInstanceTier_Enterprise
 *        ENTERPRISE instances offer the features and availability needed for
 *        mission-critical workloads. (Value: "ENTERPRISE")
 *    @arg @c kGTLRCloudFilestore_Backup_SourceInstanceTier_HighScaleSsd
 *        HIGH_SCALE instances offer expanded capacity and performance scaling
 *        capabilities. (Value: "HIGH_SCALE_SSD")
 *    @arg @c kGTLRCloudFilestore_Backup_SourceInstanceTier_Premium PREMIUM
 *        tier. BASIC_SSD is the preferred term for this tier. (Value:
 *        "PREMIUM")
 *    @arg @c kGTLRCloudFilestore_Backup_SourceInstanceTier_Standard STANDARD
 *        tier. BASIC_HDD is the preferred term for this tier. (Value:
 *        "STANDARD")
 *    @arg @c kGTLRCloudFilestore_Backup_SourceInstanceTier_TierUnspecified Not
 *        set. (Value: "TIER_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *sourceInstanceTier;

/**
 *  Output only. The backup state.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudFilestore_Backup_State_Creating Backup is being created.
 *        (Value: "CREATING")
 *    @arg @c kGTLRCloudFilestore_Backup_State_Deleting Backup is being deleted.
 *        (Value: "DELETING")
 *    @arg @c kGTLRCloudFilestore_Backup_State_Finalizing Backup has been taken
 *        and the operation is being finalized. At this point, changes to the
 *        file share will not be reflected in the backup. (Value: "FINALIZING")
 *    @arg @c kGTLRCloudFilestore_Backup_State_Ready Backup is available for
 *        use. (Value: "READY")
 *    @arg @c kGTLRCloudFilestore_Backup_State_StateUnspecified State not set.
 *        (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. The size of the storage used by the backup. As backups share
 *  storage, this number is expected to change with backup creation/deletion.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *storageBytes;

@end


/**
 *  Resource labels to represent user provided metadata.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudFilestore_Backup_Labels : GTLRObject
@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRCloudFilestore_CancelOperationRequest : GTLRObject
@end


/**
 *  Time window specified for daily operations.
 */
@interface GTLRCloudFilestore_DailyCycle : GTLRObject

/** Output only. Duration of the time window, set by service producer. */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/** Time within the day to start the operations. */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_TimeOfDay *startTime;

@end


/**
 *  Represents a whole or partial calendar date, such as a birthday. The time of
 *  day and time zone are either specified elsewhere or are insignificant. The
 *  date is relative to the Gregorian Calendar. This can represent one of the
 *  following: * A full date, with non-zero year, month, and day values. * A
 *  month and day, with a zero year (for example, an anniversary). * A year on
 *  its own, with a zero month and a zero day. * A year and month, with a zero
 *  day (for example, a credit card expiration date). Related types: *
 *  google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
 */
@interface GTLRCloudFilestore_Date : GTLRObject

/**
 *  Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
 *  to specify a year by itself or a year and month where the day isn't
 *  significant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Month of a year. Must be from 1 to 12, or 0 to specify a year without a
 *  month and day.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *month;

/**
 *  Year of the date. Must be from 1 to 9999, or 0 to specify a date without a
 *  year.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *year;

@end


/**
 *  DenyMaintenancePeriod definition. Maintenance is forbidden within the deny
 *  period. The start_date must be less than the end_date.
 */
@interface GTLRCloudFilestore_DenyMaintenancePeriod : GTLRObject

/**
 *  Deny period end date. This can be: * A full date, with non-zero year, month
 *  and day values. * A month and day value, with a zero year. Allows recurring
 *  deny periods each year. Date matching this period will have to be before the
 *  end.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_Date *endDate;

/**
 *  Deny period start date. This can be: * A full date, with non-zero year,
 *  month and day values. * A month and day value, with a zero year. Allows
 *  recurring deny periods each year. Date matching this period will have to be
 *  the same or after the start.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_Date *startDate;

/**
 *  Time in UTC when the Blackout period starts on start_date and ends on
 *  end_date. This can be: * Full time. * All zeros for 00:00:00 UTC
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_TimeOfDay *time;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRCloudFilestore_Empty : GTLRObject
@end


/**
 *  File share configuration for the instance.
 */
@interface GTLRCloudFilestore_FileShareConfig : GTLRObject

/**
 *  File share capacity in gigabytes (GB). Filestore defines 1 GB as 1024^3
 *  bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *capacityGb;

/** The name of the file share (must be 16 characters or less). */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Nfs Export Options. There is a limit of 10 export options per file share.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFilestore_NfsExportOptions *> *nfsExportOptions;

/**
 *  The resource name of the backup, in the format
 *  `projects/{project_number}/locations/{location_id}/backups/{backup_id}`,
 *  that this file share has been restored from.
 */
@property(nonatomic, copy, nullable) NSString *sourceBackup;

@end


/**
 *  GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance : GTLRObject

/**
 *  consumer_defined_name is the name that is set by the consumer. On the other
 *  hand Name field represents system-assigned id of an instance so consumers
 *  are not necessarily aware of it. consumer_defined_name is used for
 *  notification/UI purposes for consumer to recognize their instances.
 */
@property(nonatomic, copy, nullable) NSString *consumerDefinedName;

/** Output only. Timestamp when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. The instance_type of this instance of format:
 *  projects/{project_number}/locations/{location_id}/instanceTypes/{instance_type_id}.
 *  Instance Type represents a high-level tier or SKU of the service that this
 *  instance belong to. When enabled(eg: Maintenance Rollout), Rollout uses
 *  'instance_type' along with 'software_versions' to determine whether instance
 *  needs an update or not.
 */
@property(nonatomic, copy, nullable) NSString *instanceType;

/**
 *  Optional. Resource labels to represent user provided metadata. Each label is
 *  a key-value pair, where both the key and the value are arbitrary strings
 *  provided by the user.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_Labels *labels;

/**
 *  Optional. Deprecated. The MaintenancePolicies that have been attached to the
 *  instance. The key must be of the type name of the oneof policy name defined
 *  in MaintenancePolicy, and the referenced policy must define the same policy
 *  type. For complete details of MaintenancePolicy, please refer to
 *  go/cloud-saas-mw-ug.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenancePolicyNames *maintenancePolicyNames;

/**
 *  The MaintenanceSchedule contains the scheduling information of published
 *  maintenance schedule with same key as software_versions.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenanceSchedules *maintenanceSchedules;

/** Optional. The MaintenanceSettings associated with instance. */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings *maintenanceSettings;

/**
 *  Unique name of the resource. It uses the form:
 *  `projects/{project_number}/locations/{location_id}/instances/{instance_id}`
 *  Note: This name is passed, stored and logged across the rollout system. So
 *  use of consumer project_id or any other consumer PII in the name is strongly
 *  discouraged for wipeout (go/wipeout) compliance. See
 *  go/elysium/project_ids#storage-guidance for more details.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. notification_parameter are information that service producers may
 *  like to include that is not relevant to Rollout. This parameter will only be
 *  passed to Gamma and Cloud Logging for notification/logging purpose.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_NotificationParameters *notificationParameters;

/**
 *  Output only. Custom string attributes used primarily to expose
 *  producer-specific information in monitoring dashboards. See
 *  go/get-instance-metadata.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_ProducerMetadata *producerMetadata;

/**
 *  Output only. The list of data plane resources provisioned for this instance,
 *  e.g. compute VMs. See go/get-instance-metadata.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource *> *provisionedResources;

/**
 *  Link to the SLM instance template. Only populated when updating SLM
 *  instances via SSA's Actuation service adaptor. Service producers with custom
 *  control plane (e.g. Cloud SQL) doesn't need to populate this field. Instead
 *  they should use software_versions.
 */
@property(nonatomic, copy, nullable) NSString *slmInstanceTemplate;

/**
 *  Output only. SLO metadata for instance classification in the Standardized
 *  dataplane SLO platform. See go/cloud-ssa-standard-slo for feature
 *  description.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata *sloMetadata;

/**
 *  Software versions that are used to deploy this instance. This can be mutated
 *  by rollout services.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_SoftwareVersions *softwareVersions;

/**
 *  Output only. Current lifecycle state of the resource (e.g. if it's being
 *  created or ready to use).
 *
 *  Likely values:
 *    @arg @c kGTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Creating
 *        Instance is being created. (Value: "CREATING")
 *    @arg @c kGTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Deleting
 *        Instance is being deleted. (Value: "DELETING")
 *    @arg @c kGTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Error
 *        Instance encountered an error and is in indeterministic state. (Value:
 *        "ERROR")
 *    @arg @c kGTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Ready
 *        Instance has been created and is ready to use. (Value: "READY")
 *    @arg @c kGTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Repairing
 *        Instance is unheathy and under repair. (Value: "REPAIRING")
 *    @arg @c kGTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_StateUnspecified
 *        Unspecified state. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_State_Updating
 *        Instance is being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. ID of the associated GCP tenant project. See
 *  go/get-instance-metadata.
 */
@property(nonatomic, copy, nullable) NSString *tenantProjectId;

/** Output only. Timestamp when the resource was last modified. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Resource labels to represent user provided metadata. Each label is
 *  a key-value pair, where both the key and the value are arbitrary strings
 *  provided by the user.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_Labels : GTLRObject
@end


/**
 *  Optional. Deprecated. The MaintenancePolicies that have been attached to the
 *  instance. The key must be of the type name of the oneof policy name defined
 *  in MaintenancePolicy, and the referenced policy must define the same policy
 *  type. For complete details of MaintenancePolicy, please refer to
 *  go/cloud-saas-mw-ug.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenancePolicyNames : GTLRObject
@end


/**
 *  The MaintenanceSchedule contains the scheduling information of published
 *  maintenance schedule with same key as software_versions.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_MaintenanceSchedules : GTLRObject
@end


/**
 *  Optional. notification_parameter are information that service producers may
 *  like to include that is not relevant to Rollout. This parameter will only be
 *  passed to Gamma and Cloud Logging for notification/logging purpose.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_NotificationParameters : GTLRObject
@end


/**
 *  Output only. Custom string attributes used primarily to expose
 *  producer-specific information in monitoring dashboards. See
 *  go/get-instance-metadata.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_ProducerMetadata : GTLRObject
@end


/**
 *  Software versions that are used to deploy this instance. This can be mutated
 *  by rollout services.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1Instance_SoftwareVersions : GTLRObject
@end


/**
 *  Maintenance schedule which is exposed to customer and potentially end user,
 *  indicating published upcoming future maintenance schedule
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSchedule : GTLRObject

/**
 *  This field is deprecated, and will be always set to true since reschedule
 *  can happen multiple times now. This field should not be removed until all
 *  service producers remove this for their customers.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canReschedule;

/** The scheduled end time for the maintenance. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The rollout management policy this maintenance schedule is associated with.
 *  When doing reschedule update request, the reschedule should be against this
 *  given policy.
 */
@property(nonatomic, copy, nullable) NSString *rolloutManagementPolicy;

/**
 *  schedule_deadline_time is the time deadline any schedule start time cannot
 *  go beyond, including reschedule. It's normally the initial schedule start
 *  time plus maintenance window length (1 day or 1 week). Maintenance cannot be
 *  scheduled to start beyond this deadline.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleDeadlineTime;

/** The scheduled start time for the maintenance. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  Maintenance settings associated with instance. Allows service producers and
 *  end users to assign settings that controls maintenance on this instance.
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings : GTLRObject

/**
 *  Optional. Exclude instance from maintenance. When true, rollout service will
 *  not attempt maintenance on the instance. Rollout service will include the
 *  instance in reported rollout progress as not attempted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exclude;

/**
 *  Optional. If the update call is triggered from rollback, set the value as
 *  true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isRollback;

/**
 *  Optional. The MaintenancePolicies that have been attached to the instance.
 *  The key must be of the type name of the oneof policy name defined in
 *  MaintenancePolicy, and the embedded policy must define the same policy type.
 *  For complete details of MaintenancePolicy, please refer to
 *  go/cloud-saas-mw-ug. If only the name is needed, then only populate
 *  MaintenancePolicy.name.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings_MaintenancePolicies *maintenancePolicies;

@end


/**
 *  Optional. The MaintenancePolicies that have been attached to the instance.
 *  The key must be of the type name of the oneof policy name defined in
 *  MaintenancePolicy, and the embedded policy must define the same policy type.
 *  For complete details of MaintenancePolicy, please refer to
 *  go/cloud-saas-mw-ug. If only the name is needed, then only populate
 *  MaintenancePolicy.name.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudFilestore_MaintenancePolicy. Use @c -additionalJSONKeys and
 *        @c -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1MaintenanceSettings_MaintenancePolicies : GTLRObject
@end


/**
 *  Node information for custom per-node SLO implementations. SSA does not
 *  support per-node SLO, but producers can populate per-node information in
 *  SloMetadata for custom precomputations. SSA Eligibility Exporter will emit
 *  per-node metric based on this information.
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata : GTLRObject

/** The location of the node, if different from instance location. */
@property(nonatomic, copy, nullable) NSString *location;

/** The id of the node. This should be equal to SaasInstanceNode.node_id. */
@property(nonatomic, copy, nullable) NSString *nodeId;

/**
 *  If present, this will override eligibility for the node coming from instance
 *  or exclusions for specified SLIs.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility *perSliEligibility;

@end


/**
 *  Contains notification related data.
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1NotificationParameter : GTLRObject

/** Optional. Array of string values. e.g. instance's replica information. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  PerSliSloEligibility is a mapping from an SLI name to eligibility.
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility : GTLRObject

/**
 *  An entry in the eligibilities map specifies an eligibility for a particular
 *  SLI for the given instance. The SLI key in the name must be a valid SLI name
 *  specified in the Eligibility Exporter binary flags otherwise an error will
 *  be emitted by Eligibility Exporter and the oncaller will be alerted. If an
 *  SLI has been defined in the binary flags but the eligibilities map does not
 *  contain it, the corresponding SLI time series will not be emitted by the
 *  Eligibility Exporter. This ensures a smooth rollout and compatibility
 *  between the data produced by different versions of the Eligibility
 *  Exporters. If eligibilities map contains a key for an SLI which has not been
 *  declared in the binary flags, there will be an error message emitted in the
 *  Eligibility Exporter log and the metric for the SLI in question will not be
 *  emitted.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility_Eligibilities *eligibilities;

@end


/**
 *  An entry in the eligibilities map specifies an eligibility for a particular
 *  SLI for the given instance. The SLI key in the name must be a valid SLI name
 *  specified in the Eligibility Exporter binary flags otherwise an error will
 *  be emitted by Eligibility Exporter and the oncaller will be alerted. If an
 *  SLI has been defined in the binary flags but the eligibilities map does not
 *  contain it, the corresponding SLI time series will not be emitted by the
 *  Eligibility Exporter. This ensures a smooth rollout and compatibility
 *  between the data produced by different versions of the Eligibility
 *  Exporters. If eligibilities map contains a key for an SLI which has not been
 *  declared in the binary flags, there will be an error message emitted in the
 *  Eligibility Exporter log and the metric for the SLI in question will not be
 *  emitted.
 *
 *  @note This class is documented as having more properties of
 *        GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility.
 *        Use @c -additionalJSONKeys and @c -additionalPropertyForName: to get
 *        the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility_Eligibilities : GTLRObject
@end


/**
 *  Describes provisioned dataplane resources.
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1ProvisionedResource : GTLRObject

/**
 *  Type of the resource. This can be either a GCP resource or a custom one
 *  (e.g. another cloud provider's VM). For GCP compute resources use singular
 *  form of the names listed in GCP compute API documentation
 *  (https://cloud.google.com/compute/docs/reference/rest/v1/), prefixed with
 *  'compute-', for example: 'compute-instance', 'compute-disk',
 *  'compute-autoscaler'.
 */
@property(nonatomic, copy, nullable) NSString *resourceType;

/**
 *  URL identifying the resource, e.g.
 *  "https://www.googleapis.com/compute/v1/projects/...)".
 */
@property(nonatomic, copy, nullable) NSString *resourceUrl;

@end


/**
 *  SloEligibility is a tuple containing eligibility value: true if an instance
 *  is eligible for SLO calculation or false if it should be excluded from all
 *  SLO-related calculations along with a user-defined reason.
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1SloEligibility : GTLRObject

/**
 *  Whether an instance is eligible or ineligible.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *eligible;

/**
 *  User-defined reason for the current value of instance eligibility. Usually,
 *  this can be directly mapped to the internal state. An empty reason is
 *  allowed.
 */
@property(nonatomic, copy, nullable) NSString *reason;

@end


/**
 *  SloMetadata contains resources required for proper SLO classification of the
 *  instance.
 */
@interface GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1SloMetadata : GTLRObject

/**
 *  Optional. List of nodes. Some producers need to use per-node metadata to
 *  calculate SLO. This field allows such producers to publish per-node SLO meta
 *  data, which will be consumed by SSA Eligibility Exporter and published in
 *  the form of per node metric to Monarch.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1NodeSloMetadata *> *nodes;

/**
 *  Optional. Multiple per-instance SLI eligibilities which apply for individual
 *  SLIs.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_GoogleCloudSaasacceleratorManagementProvidersV1PerSliSloEligibility *perSliEligibility;

/**
 *  Name of the SLO tier the Instance belongs to. This name will be expected to
 *  match the tiers specified in the service SLO configuration. Field is
 *  mandatory and must not be empty.
 */
@property(nonatomic, copy, nullable) NSString *tier;

@end


/**
 *  A Filestore instance.
 */
@interface GTLRCloudFilestore_Instance : GTLRObject

/** Output only. The time when the instance was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The description of the instance (2048 characters or less).
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Server-specified ETag for the instance resource to prevent simultaneous
 *  updates from overwriting each other.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  File system shares on the instance. For this version, only a single file
 *  share is supported.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFilestore_FileShareConfig *> *fileShares;

/** KMS key name used for data encryption. */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

/** Resource labels to represent user provided metadata. */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_Instance_Labels *labels;

/**
 *  Output only. The resource name of the instance, in the format
 *  `projects/{project}/locations/{location}/instances/{instance}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  VPC networks to which the instance is connected. For this version, only a
 *  single network is supported.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFilestore_NetworkConfig *> *networks;

/**
 *  Output only. Reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzs;

/**
 *  Output only. The instance state.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudFilestore_Instance_State_Creating The instance is being
 *        created. (Value: "CREATING")
 *    @arg @c kGTLRCloudFilestore_Instance_State_Deleting The instance is
 *        shutting down. (Value: "DELETING")
 *    @arg @c kGTLRCloudFilestore_Instance_State_Error The instance is
 *        experiencing an issue and might be unusable. You can get further
 *        details from the `statusMessage` field of the `Instance` resource.
 *        (Value: "ERROR")
 *    @arg @c kGTLRCloudFilestore_Instance_State_Ready The instance is available
 *        for use. (Value: "READY")
 *    @arg @c kGTLRCloudFilestore_Instance_State_Repairing Work is being done on
 *        the instance. You can get further details from the `statusMessage`
 *        field of the `Instance` resource. (Value: "REPAIRING")
 *    @arg @c kGTLRCloudFilestore_Instance_State_Restoring The instance is
 *        restoring a backup to an existing file share and may be unusable
 *        during this time. (Value: "RESTORING")
 *    @arg @c kGTLRCloudFilestore_Instance_State_Resuming The instance is in the
 *        process of becoming active. (Value: "RESUMING")
 *    @arg @c kGTLRCloudFilestore_Instance_State_StateUnspecified State not set.
 *        (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRCloudFilestore_Instance_State_Suspended The instance is
 *        suspended. You can get further details from the `suspension_reasons`
 *        field of the `Instance` resource. (Value: "SUSPENDED")
 *    @arg @c kGTLRCloudFilestore_Instance_State_Suspending The instance is in
 *        the process of becoming suspended. (Value: "SUSPENDING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Additional information about the instance state, if available.
 */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Field indicates all the reasons the instance is in "SUSPENDED"
 *  state.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suspensionReasons;

/**
 *  The service tier of the instance.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudFilestore_Instance_Tier_BasicHdd BASIC instances offer a
 *        maximum capacity of 63.9 TB. BASIC_HDD is an alias for STANDARD Tier,
 *        offering economical performance backed by HDD. (Value: "BASIC_HDD")
 *    @arg @c kGTLRCloudFilestore_Instance_Tier_BasicSsd BASIC instances offer a
 *        maximum capacity of 63.9 TB. BASIC_SSD is an alias for PREMIUM Tier,
 *        and offers improved performance backed by SSD. (Value: "BASIC_SSD")
 *    @arg @c kGTLRCloudFilestore_Instance_Tier_Enterprise ENTERPRISE instances
 *        offer the features and availability needed for mission-critical
 *        workloads. (Value: "ENTERPRISE")
 *    @arg @c kGTLRCloudFilestore_Instance_Tier_HighScaleSsd HIGH_SCALE
 *        instances offer expanded capacity and performance scaling
 *        capabilities. (Value: "HIGH_SCALE_SSD")
 *    @arg @c kGTLRCloudFilestore_Instance_Tier_Premium PREMIUM tier. BASIC_SSD
 *        is the preferred term for this tier. (Value: "PREMIUM")
 *    @arg @c kGTLRCloudFilestore_Instance_Tier_Standard STANDARD tier.
 *        BASIC_HDD is the preferred term for this tier. (Value: "STANDARD")
 *    @arg @c kGTLRCloudFilestore_Instance_Tier_TierUnspecified Not set. (Value:
 *        "TIER_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *tier;

@end


/**
 *  Resource labels to represent user provided metadata.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudFilestore_Instance_Labels : GTLRObject
@end


/**
 *  ListBackupsResponse is the result of ListBackupsRequest.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "backups" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudFilestore_ListBackupsResponse : GTLRCollectionObject

/**
 *  A list of backups in the project for the specified location. If the
 *  `{location}` value in the request is "-", the response contains a list of
 *  backups from all locations. If any location is unreachable, the response
 *  will only return backups in reachable locations and the "unreachable" field
 *  will be populated with a list of unreachable locations.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFilestore_Backup *> *backups;

/**
 *  The token you can use to retrieve the next page of results. Not returned if
 *  there are no more results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  ListInstancesResponse is the result of ListInstancesRequest.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "instances" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudFilestore_ListInstancesResponse : GTLRCollectionObject

/**
 *  A list of instances in the project for the specified location. If the
 *  `{location}` value in the request is "-", the response contains a list of
 *  instances from all locations. If any location is unreachable, the response
 *  will only return instances in reachable locations and the "unreachable"
 *  field will be populated with a list of unreachable locations.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFilestore_Instance *> *instances;

/**
 *  The token you can use to retrieve the next page of results. Not returned if
 *  there are no more results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudFilestore_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFilestore_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudFilestore_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFilestore_Operation *> *operations;

@end


/**
 *  ListSnapshotsResponse is the result of ListSnapshotsRequest.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "snapshots" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCloudFilestore_ListSnapshotsResponse : GTLRCollectionObject

/**
 *  The token you can use to retrieve the next page of results. Not returned if
 *  there are no more results in the list.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of snapshots in the project for the specified instance.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFilestore_Snapshot *> *snapshots;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRCloudFilestore_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudFilestore_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudFilestore_Location_Metadata : GTLRObject
@end


/**
 *  Defines policies to service maintenance events.
 */
@interface GTLRCloudFilestore_MaintenancePolicy : GTLRObject

/** Output only. The time when the resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. Description of what this policy is for. Create/Update methods
 *  return INVALID_ARGUMENT if the length is greater than 512.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. Resource labels to represent user provided metadata. Each label is
 *  a key-value pair, where both the key and the value are arbitrary strings
 *  provided by the user.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_MaintenancePolicy_Labels *labels;

/**
 *  Required. MaintenancePolicy name using the form:
 *  `projects/{project_id}/locations/{location_id}/maintenancePolicies/{maintenance_policy_id}`
 *  where {project_id} refers to a GCP consumer project ID, {location_id} refers
 *  to a GCP region/zone, {maintenance_policy_id} must be 1-63 characters long
 *  and match the regular expression `[a-z0-9]([-a-z0-9]*[a-z0-9])?`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. The state of the policy.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudFilestore_MaintenancePolicy_State_Deleting Resource is
 *        being deleted. It can no longer be attached to instances. (Value:
 *        "DELETING")
 *    @arg @c kGTLRCloudFilestore_MaintenancePolicy_State_Ready Resource is
 *        ready to be used. (Value: "READY")
 *    @arg @c kGTLRCloudFilestore_MaintenancePolicy_State_StateUnspecified
 *        Unspecified state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Maintenance policy applicable to instance update. */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_UpdatePolicy *updatePolicy;

/** Output only. The time when the resource was updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Resource labels to represent user provided metadata. Each label is
 *  a key-value pair, where both the key and the value are arbitrary strings
 *  provided by the user.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudFilestore_MaintenancePolicy_Labels : GTLRObject
@end


/**
 *  MaintenanceWindow definition.
 */
@interface GTLRCloudFilestore_MaintenanceWindow : GTLRObject

/** Daily cycle. */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_DailyCycle *dailyCycle;

/** Weekly cycle. */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_WeeklyCycle *weeklyCycle;

@end


/**
 *  Network configuration for the instance.
 */
@interface GTLRCloudFilestore_NetworkConfig : GTLRObject

/**
 *  The network connect mode of the Filestore instance. If not provided, the
 *  connect mode defaults to DIRECT_PEERING.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudFilestore_NetworkConfig_ConnectMode_ConnectModeUnspecified
 *        Not set. (Value: "CONNECT_MODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudFilestore_NetworkConfig_ConnectMode_DirectPeering
 *        Connect via direct peering to the Filestore service. (Value:
 *        "DIRECT_PEERING")
 *    @arg @c kGTLRCloudFilestore_NetworkConfig_ConnectMode_PrivateServiceAccess
 *        Connect to your Filestore instance using Private Service Access.
 *        Private services access provides an IP address range for multiple
 *        Google Cloud services, including Filestore. (Value:
 *        "PRIVATE_SERVICE_ACCESS")
 */
@property(nonatomic, copy, nullable) NSString *connectMode;

/**
 *  Output only. IPv4 addresses in the format
 *  `{octet1}.{octet2}.{octet3}.{octet4}` or IPv6 addresses in the format
 *  `{block1}:{block2}:{block3}:{block4}:{block5}:{block6}:{block7}:{block8}`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ipAddresses;

/**
 *  Internet protocol versions for which the instance has IP addresses assigned.
 *  For this version, only MODE_IPV4 is supported.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *modes;

/**
 *  The name of the Google Compute Engine [VPC
 *  network](https://cloud.google.com/vpc/docs/vpc) to which the instance is
 *  connected.
 */
@property(nonatomic, copy, nullable) NSString *network;

/**
 *  Optional, reserved_ip_range can have one of the following two types of
 *  values. * CIDR range value when using DIRECT_PEERING connect mode. *
 *  [Allocated IP address
 *  range](https://cloud.google.com/compute/docs/ip-addresses/reserve-static-internal-ip-address)
 *  when using PRIVATE_SERVICE_ACCESS connect mode. When the name of an
 *  allocated IP address range is specified, it must be one of the ranges
 *  associated with the private service access connection. When specified as a
 *  direct CIDR value, it must be a /29 CIDR block for Basic tier, a /24 CIDR
 *  block for High Scale tier, or a /26 CIDR block for Enterprise tier in one of
 *  the [internal IP address
 *  ranges](https://www.arin.net/reference/research/statistics/address_filters/)
 *  that identifies the range of IP addresses reserved for this instance. For
 *  example, 10.0.0.0/29, 192.168.0.0/24 or 192.168.0.0/26, respectively. The
 *  range you specify can't overlap with either existing subnets or assigned IP
 *  address ranges for other Filestore instances in the selected VPC network.
 */
@property(nonatomic, copy, nullable) NSString *reservedIpRange;

@end


/**
 *  NFS export options specifications.
 */
@interface GTLRCloudFilestore_NfsExportOptions : GTLRObject

/**
 *  Either READ_ONLY, for allowing only read requests on the exported directory,
 *  or READ_WRITE, for allowing both read and write requests. The default is
 *  READ_WRITE.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudFilestore_NfsExportOptions_AccessMode_AccessModeUnspecified
 *        AccessMode not set. (Value: "ACCESS_MODE_UNSPECIFIED")
 *    @arg @c kGTLRCloudFilestore_NfsExportOptions_AccessMode_ReadOnly The
 *        client can only read the file share. (Value: "READ_ONLY")
 *    @arg @c kGTLRCloudFilestore_NfsExportOptions_AccessMode_ReadWrite The
 *        client can read and write the file share (default). (Value:
 *        "READ_WRITE")
 */
@property(nonatomic, copy, nullable) NSString *accessMode;

/**
 *  An integer representing the anonymous group id with a default value of
 *  65534. Anon_gid may only be set with squash_mode of ROOT_SQUASH. An error
 *  will be returned if this field is specified for other squash_mode settings.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *anonGid;

/**
 *  An integer representing the anonymous user id with a default value of 65534.
 *  Anon_uid may only be set with squash_mode of ROOT_SQUASH. An error will be
 *  returned if this field is specified for other squash_mode settings.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *anonUid;

/**
 *  List of either an IPv4 addresses in the format
 *  `{octet1}.{octet2}.{octet3}.{octet4}` or CIDR ranges in the format
 *  `{octet1}.{octet2}.{octet3}.{octet4}/{mask size}` which may mount the file
 *  share. Overlapping IP ranges are not allowed, both within and across
 *  NfsExportOptions. An error will be returned. The limit is 64 IP
 *  ranges/addresses for each FileShareConfig among all NfsExportOptions.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *ipRanges;

/**
 *  Either NO_ROOT_SQUASH, for allowing root access on the exported directory,
 *  or ROOT_SQUASH, for not allowing root access. The default is NO_ROOT_SQUASH.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudFilestore_NfsExportOptions_SquashMode_NoRootSquash The
 *        Root user has root access to the file share (default). (Value:
 *        "NO_ROOT_SQUASH")
 *    @arg @c kGTLRCloudFilestore_NfsExportOptions_SquashMode_RootSquash The
 *        Root user has squashed access to the anonymous uid/gid. (Value:
 *        "ROOT_SQUASH")
 *    @arg @c kGTLRCloudFilestore_NfsExportOptions_SquashMode_SquashModeUnspecified
 *        SquashMode not set. (Value: "SQUASH_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *squashMode;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCloudFilestore_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudFilestore_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudFilestore_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRCloudFilestore_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have been cancelled successfully have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cancelRequested;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusDetail;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  RestoreInstanceRequest restores an existing instance's file share from a
 *  backup.
 */
@interface GTLRCloudFilestore_RestoreInstanceRequest : GTLRObject

/**
 *  Required. Name of the file share in the Filestore instance that the backup
 *  is being restored to.
 */
@property(nonatomic, copy, nullable) NSString *fileShare;

/**
 *  The resource name of the backup, in the format
 *  `projects/{project_number}/locations/{location_id}/backups/{backup_id}`.
 */
@property(nonatomic, copy, nullable) NSString *sourceBackup;

@end


/**
 *  Configure the schedule.
 */
@interface GTLRCloudFilestore_Schedule : GTLRObject

/**
 *  Allows to define schedule that runs specified day of the week.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudFilestore_Schedule_Day_DayOfWeekUnspecified The day of
 *        the week is unspecified. (Value: "DAY_OF_WEEK_UNSPECIFIED")
 *    @arg @c kGTLRCloudFilestore_Schedule_Day_Friday Friday (Value: "FRIDAY")
 *    @arg @c kGTLRCloudFilestore_Schedule_Day_Monday Monday (Value: "MONDAY")
 *    @arg @c kGTLRCloudFilestore_Schedule_Day_Saturday Saturday (Value:
 *        "SATURDAY")
 *    @arg @c kGTLRCloudFilestore_Schedule_Day_Sunday Sunday (Value: "SUNDAY")
 *    @arg @c kGTLRCloudFilestore_Schedule_Day_Thursday Thursday (Value:
 *        "THURSDAY")
 *    @arg @c kGTLRCloudFilestore_Schedule_Day_Tuesday Tuesday (Value:
 *        "TUESDAY")
 *    @arg @c kGTLRCloudFilestore_Schedule_Day_Wednesday Wednesday (Value:
 *        "WEDNESDAY")
 */
@property(nonatomic, copy, nullable) NSString *day;

/** Output only. Duration of the time window, set by service producer. */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/** Time within the window to start the operations. */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_TimeOfDay *startTime;

@end


/**
 *  A Filestore snapshot.
 */
@interface GTLRCloudFilestore_Snapshot : GTLRObject

/** Output only. The time when the snapshot was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  A description of the snapshot with 2048 characters or less. Requests with
 *  longer descriptions will be rejected.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. The amount of bytes needed to allocate a full copy of the
 *  snapshot content
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *filesystemUsedBytes;

/** Resource labels to represent user provided metadata. */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_Snapshot_Labels *labels;

/**
 *  Output only. The resource name of the snapshot, in the format
 *  `projects/{project_id}/locations/{location_id}/instances/{instance_id}/snapshots/{snapshot_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The snapshot state.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudFilestore_Snapshot_State_Creating Snapshot is being
 *        created. (Value: "CREATING")
 *    @arg @c kGTLRCloudFilestore_Snapshot_State_Deleting Snapshot is being
 *        deleted. (Value: "DELETING")
 *    @arg @c kGTLRCloudFilestore_Snapshot_State_Ready Snapshot is available for
 *        use. (Value: "READY")
 *    @arg @c kGTLRCloudFilestore_Snapshot_State_StateUnspecified State not set.
 *        (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Resource labels to represent user provided metadata.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCloudFilestore_Snapshot_Labels : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCloudFilestore_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFilestore_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCloudFilestore_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCloudFilestore_Status_Details_Item : GTLRObject
@end


/**
 *  Represents a time of day. The date and time zone are either not significant
 *  or are specified elsewhere. An API may choose to allow leap seconds. Related
 *  types are google.type.Date and `google.protobuf.Timestamp`.
 */
@interface GTLRCloudFilestore_TimeOfDay : GTLRObject

/**
 *  Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to
 *  allow the value "24:00:00" for scenarios like business closing time.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hours;

/**
 *  Minutes of hour of day. Must be from 0 to 59.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minutes;

/**
 *  Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nanos;

/**
 *  Seconds of minutes of the time. Must normally be from 0 to 59. An API may
 *  allow the value 60 if it allows leap-seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *seconds;

@end


/**
 *  Maintenance policy applicable to instance updates.
 */
@interface GTLRCloudFilestore_UpdatePolicy : GTLRObject

/**
 *  Optional. Relative scheduling channel applied to resource.
 *
 *  Likely values:
 *    @arg @c kGTLRCloudFilestore_UpdatePolicy_Channel_Earlier Early channel
 *        within a customer project. (Value: "EARLIER")
 *    @arg @c kGTLRCloudFilestore_UpdatePolicy_Channel_Later Later channel
 *        within a customer project. (Value: "LATER")
 *    @arg @c kGTLRCloudFilestore_UpdatePolicy_Channel_UpdateChannelUnspecified
 *        Unspecified channel. (Value: "UPDATE_CHANNEL_UNSPECIFIED")
 *    @arg @c kGTLRCloudFilestore_UpdatePolicy_Channel_Week1 ! ! The follow
 *        channels can ONLY be used if you adopt the new MW system! ! ! NOTE:
 *        all WEEK channels are assumed to be under a weekly window. ! There is
 *        currently no dedicated channel definitions for Daily windows. ! If you
 *        use Daily window, the system will assume a 1d (24Hours) advanced !
 *        notification period b/w EARLY and LATER. ! We may consider support
 *        more flexible daily channel specifications in ! the future. WEEK1 ==
 *        EARLIER with minimum 7d advanced notification. {7d, 14d} The system
 *        will treat them equally and will use WEEK1 whenever it can. New
 *        customers are encouraged to use this channel annotation. (Value:
 *        "WEEK1")
 *    @arg @c kGTLRCloudFilestore_UpdatePolicy_Channel_Week2 WEEK2 == LATER with
 *        minimum 14d advanced notification {14d, 21d}. (Value: "WEEK2")
 *    @arg @c kGTLRCloudFilestore_UpdatePolicy_Channel_Week5 WEEK5 == 40d
 *        support. minimum 35d advanced notification {35d, 42d}. (Value:
 *        "WEEK5")
 */
@property(nonatomic, copy, nullable) NSString *channel;

/**
 *  Deny Maintenance Period that is applied to resource to indicate when
 *  maintenance is forbidden. User can specify zero or more non-overlapping deny
 *  periods. Maximum number of deny_maintenance_periods expected is one.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFilestore_DenyMaintenancePeriod *> *denyMaintenancePeriods;

/**
 *  Optional. Maintenance window that is applied to resources covered by this
 *  policy.
 */
@property(nonatomic, strong, nullable) GTLRCloudFilestore_MaintenanceWindow *window;

@end


/**
 *  Time window specified for weekly operations.
 */
@interface GTLRCloudFilestore_WeeklyCycle : GTLRObject

/** User can specify multiple windows in a week. Minimum of 1 window. */
@property(nonatomic, strong, nullable) NSArray<GTLRCloudFilestore_Schedule *> *schedule;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
