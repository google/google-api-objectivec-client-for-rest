// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Chat API (chat/v1)
// Description:
//   The Google Chat API lets you build Chat apps to integrate your services
//   with Google Chat and manage Chat resources such as spaces, members, and
//   messages.
// Documentation:
//   https://developers.google.com/hangouts/chat

#import <GoogleAPIClientForREST/GTLRHangoutsChatQuery.h>

// ----------------------------------------------------------------------------
// Constants

// messageReplyOption
NSString * const kGTLRHangoutsChatMessageReplyOptionMessageReplyOptionUnspecified = @"MESSAGE_REPLY_OPTION_UNSPECIFIED";
NSString * const kGTLRHangoutsChatMessageReplyOptionReplyMessageFallbackToNewThread = @"REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD";
NSString * const kGTLRHangoutsChatMessageReplyOptionReplyMessageOrFail = @"REPLY_MESSAGE_OR_FAIL";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRHangoutsChatQuery

@dynamic fields;

@end

@implementation GTLRHangoutsChatQuery_MediaDownload

@dynamic resourceName;

+ (instancetype)queryWithResourceName:(NSString *)resourceName {
  NSArray *pathParams = @[ @"resourceName" ];
  NSString *pathURITemplate = @"v1/media/{+resourceName}";
  GTLRHangoutsChatQuery_MediaDownload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resourceName = resourceName;
  query.expectedObjectClass = [GTLRHangoutsChat_Media class];
  query.loggingName = @"chat.media.download";
  return query;
}

+ (instancetype)queryForMediaWithResourceName:(NSString *)resourceName {
  GTLRHangoutsChatQuery_MediaDownload *query =
    [self queryWithResourceName:resourceName];
  query.downloadAsDataObjectType = @"media";
  query.loggingName = @"Download chat.media.download";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_MediaUpload

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRHangoutsChat_UploadAttachmentRequest *)object
                         parent:(NSString *)parent
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/attachments:upload";
  GTLRHangoutsChatQuery_MediaUpload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRHangoutsChat_UploadAttachmentResponse class];
  query.loggingName = @"chat.media.upload";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesCompleteImport

@dynamic name;

+ (instancetype)queryWithObject:(GTLRHangoutsChat_CompleteImportSpaceRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:completeImport";
  GTLRHangoutsChatQuery_SpacesCompleteImport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_CompleteImportSpaceResponse class];
  query.loggingName = @"chat.spaces.completeImport";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesCreate

@dynamic requestId;

+ (instancetype)queryWithObject:(GTLRHangoutsChat_Space *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v1/spaces";
  GTLRHangoutsChatQuery_SpacesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRHangoutsChat_Space class];
  query.loggingName = @"chat.spaces.create";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesDelete

@dynamic name, useAdminAccess;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRHangoutsChatQuery_SpacesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_Empty class];
  query.loggingName = @"chat.spaces.delete";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesFindDirectMessage

@dynamic name;

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/spaces:findDirectMessage";
  GTLRHangoutsChatQuery_SpacesFindDirectMessage *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRHangoutsChat_Space class];
  query.loggingName = @"chat.spaces.findDirectMessage";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesGet

@dynamic name, useAdminAccess;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRHangoutsChatQuery_SpacesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_Space class];
  query.loggingName = @"chat.spaces.get";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesList

@dynamic filter, pageSize, pageToken;

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/spaces";
  GTLRHangoutsChatQuery_SpacesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRHangoutsChat_ListSpacesResponse class];
  query.loggingName = @"chat.spaces.list";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesMembersCreate

@dynamic parent, useAdminAccess;

+ (instancetype)queryWithObject:(GTLRHangoutsChat_Membership *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/members";
  GTLRHangoutsChatQuery_SpacesMembersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRHangoutsChat_Membership class];
  query.loggingName = @"chat.spaces.members.create";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesMembersDelete

@dynamic name, useAdminAccess;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRHangoutsChatQuery_SpacesMembersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_Membership class];
  query.loggingName = @"chat.spaces.members.delete";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesMembersGet

@dynamic name, useAdminAccess;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRHangoutsChatQuery_SpacesMembersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_Membership class];
  query.loggingName = @"chat.spaces.members.get";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesMembersList

@dynamic filter, pageSize, pageToken, parent, showGroups, showInvited,
         useAdminAccess;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/members";
  GTLRHangoutsChatQuery_SpacesMembersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRHangoutsChat_ListMembershipsResponse class];
  query.loggingName = @"chat.spaces.members.list";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesMembersPatch

@dynamic name, updateMask, useAdminAccess;

+ (instancetype)queryWithObject:(GTLRHangoutsChat_Membership *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRHangoutsChatQuery_SpacesMembersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_Membership class];
  query.loggingName = @"chat.spaces.members.patch";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesMessagesAttachmentsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRHangoutsChatQuery_SpacesMessagesAttachmentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_Attachment class];
  query.loggingName = @"chat.spaces.messages.attachments.get";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesMessagesCreate

@dynamic messageId, messageReplyOption, parent, requestId, threadKey;

+ (instancetype)queryWithObject:(GTLRHangoutsChat_Message *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/messages";
  GTLRHangoutsChatQuery_SpacesMessagesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRHangoutsChat_Message class];
  query.loggingName = @"chat.spaces.messages.create";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesMessagesDelete

@dynamic force, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRHangoutsChatQuery_SpacesMessagesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_Empty class];
  query.loggingName = @"chat.spaces.messages.delete";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesMessagesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRHangoutsChatQuery_SpacesMessagesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_Message class];
  query.loggingName = @"chat.spaces.messages.get";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesMessagesList

@dynamic filter, orderBy, pageSize, pageToken, parent, showDeleted;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/messages";
  GTLRHangoutsChatQuery_SpacesMessagesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRHangoutsChat_ListMessagesResponse class];
  query.loggingName = @"chat.spaces.messages.list";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesMessagesPatch

@dynamic allowMissing, name, updateMask;

+ (instancetype)queryWithObject:(GTLRHangoutsChat_Message *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRHangoutsChatQuery_SpacesMessagesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_Message class];
  query.loggingName = @"chat.spaces.messages.patch";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesMessagesReactionsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRHangoutsChat_Reaction *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/reactions";
  GTLRHangoutsChatQuery_SpacesMessagesReactionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRHangoutsChat_Reaction class];
  query.loggingName = @"chat.spaces.messages.reactions.create";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesMessagesReactionsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRHangoutsChatQuery_SpacesMessagesReactionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_Empty class];
  query.loggingName = @"chat.spaces.messages.reactions.delete";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesMessagesReactionsList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/reactions";
  GTLRHangoutsChatQuery_SpacesMessagesReactionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRHangoutsChat_ListReactionsResponse class];
  query.loggingName = @"chat.spaces.messages.reactions.list";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesMessagesUpdate

@dynamic allowMissing, name, updateMask;

+ (instancetype)queryWithObject:(GTLRHangoutsChat_Message *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRHangoutsChatQuery_SpacesMessagesUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_Message class];
  query.loggingName = @"chat.spaces.messages.update";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesPatch

@dynamic name, updateMask, useAdminAccess;

+ (instancetype)queryWithObject:(GTLRHangoutsChat_Space *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRHangoutsChatQuery_SpacesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_Space class];
  query.loggingName = @"chat.spaces.patch";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesSearch

@dynamic orderBy, pageSize, pageToken, query, useAdminAccess;

+ (instancetype)query {
  NSString *pathURITemplate = @"v1/spaces:search";
  GTLRHangoutsChatQuery_SpacesSearch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:nil];
  query.expectedObjectClass = [GTLRHangoutsChat_SearchSpacesResponse class];
  query.loggingName = @"chat.spaces.search";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesSetup

+ (instancetype)queryWithObject:(GTLRHangoutsChat_SetUpSpaceRequest *)object {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSString *pathURITemplate = @"v1/spaces:setup";
  GTLRHangoutsChatQuery_SpacesSetup *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:nil];
  query.bodyObject = object;
  query.expectedObjectClass = [GTLRHangoutsChat_Space class];
  query.loggingName = @"chat.spaces.setup";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesSpaceEventsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRHangoutsChatQuery_SpacesSpaceEventsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_SpaceEvent class];
  query.loggingName = @"chat.spaces.spaceEvents.get";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_SpacesSpaceEventsList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/spaceEvents";
  GTLRHangoutsChatQuery_SpacesSpaceEventsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRHangoutsChat_ListSpaceEventsResponse class];
  query.loggingName = @"chat.spaces.spaceEvents.list";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_UsersSpacesGetSpaceReadState

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRHangoutsChatQuery_UsersSpacesGetSpaceReadState *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_SpaceReadState class];
  query.loggingName = @"chat.users.spaces.getSpaceReadState";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_UsersSpacesThreadsGetThreadReadState

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRHangoutsChatQuery_UsersSpacesThreadsGetThreadReadState *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_ThreadReadState class];
  query.loggingName = @"chat.users.spaces.threads.getThreadReadState";
  return query;
}

@end

@implementation GTLRHangoutsChatQuery_UsersSpacesUpdateSpaceReadState

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRHangoutsChat_SpaceReadState *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRHangoutsChatQuery_UsersSpacesUpdateSpaceReadState *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRHangoutsChat_SpaceReadState class];
  query.loggingName = @"chat.users.spaces.updateSpaceReadState";
  return query;
}

@end
