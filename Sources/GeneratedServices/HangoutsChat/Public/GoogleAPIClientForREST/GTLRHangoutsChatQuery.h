// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Chat API (chat/v1)
// Description:
//   The Google Chat API lets you build Chat apps to integrate your services
//   with Google Chat and manage Chat resources such as spaces, members, and
//   messages.
// Documentation:
//   https://developers.google.com/hangouts/chat

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRHangoutsChatObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// messageReplyOption

/**
 *  Default. Starts a new thread. Using this option ignores any thread ID or
 *  `thread_key` that's included.
 *
 *  Value: "MESSAGE_REPLY_OPTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChatMessageReplyOptionMessageReplyOptionUnspecified;
/**
 *  Creates the message as a reply to the thread specified by thread ID or
 *  `thread_key`. If it fails, the message starts a new thread instead.
 *
 *  Value: "REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChatMessageReplyOptionReplyMessageFallbackToNewThread;
/**
 *  Creates the message as a reply to the thread specified by thread ID or
 *  `thread_key`. If a new `thread_key` is used, a new thread is created. If the
 *  message creation fails, a `NOT_FOUND` error is returned instead.
 *
 *  Value: "REPLY_MESSAGE_OR_FAIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChatMessageReplyOptionReplyMessageOrFail;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Hangouts Chat query classes.
 */
@interface GTLRHangoutsChatQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Downloads media. Download is supported on the URI
 *  `/v1/media/{+name}?alt=media`.
 *
 *  Method: chat.media.download
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatBot
 *    @c kGTLRAuthScopeHangoutsChatMessages
 *    @c kGTLRAuthScopeHangoutsChatMessagesReadonly
 */
@interface GTLRHangoutsChatQuery_MediaDownload : GTLRHangoutsChatQuery

/**
 *  Name of the media that is being downloaded. See ReadRequest.resource_name.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

/**
 *  Fetches a @c GTLRHangoutsChat_Media.
 *
 *  Downloads media. Download is supported on the URI
 *  `/v1/media/{+name}?alt=media`.
 *
 *  @param resourceName Name of the media that is being downloaded. See
 *    ReadRequest.resource_name.
 *
 *  @return GTLRHangoutsChatQuery_MediaDownload
 */
+ (instancetype)queryWithResourceName:(NSString *)resourceName;

/**
 *  Fetches the requested resource data as a @c GTLRDataObject.
 *
 *  Downloads media. Download is supported on the URI
 *  `/v1/media/{+name}?alt=media`.
 *
 *  @param resourceName Name of the media that is being downloaded. See
 *    ReadRequest.resource_name.
 *
 *  @return GTLRHangoutsChatQuery_MediaDownload
 */
+ (instancetype)queryForMediaWithResourceName:(NSString *)resourceName;

@end

/**
 *  Uploads an attachment. For an example, see [Upload media as a file
 *  attachment](https://developers.google.com/workspace/chat/upload-media-attachments).
 *  Requires user
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  You can upload attachments up to 200 MB. Certain file types aren't
 *  supported. For details, see [File types blocked by Google
 *  Chat](https://support.google.com/chat/answer/7651457?&co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
 *
 *  Method: chat.media.upload
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatImport
 *    @c kGTLRAuthScopeHangoutsChatMessages
 *    @c kGTLRAuthScopeHangoutsChatMessagesCreate
 */
@interface GTLRHangoutsChatQuery_MediaUpload : GTLRHangoutsChatQuery

/**
 *  Required. Resource name of the Chat space in which the attachment is
 *  uploaded. Format "spaces/{space}".
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRHangoutsChat_UploadAttachmentResponse.
 *
 *  Uploads an attachment. For an example, see [Upload media as a file
 *  attachment](https://developers.google.com/workspace/chat/upload-media-attachments).
 *  Requires user
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  You can upload attachments up to 200 MB. Certain file types aren't
 *  supported. For details, see [File types blocked by Google
 *  Chat](https://support.google.com/chat/answer/7651457?&co=GENIE.Platform%3DDesktop#File%20types%20blocked%20in%20Google%20Chat).
 *
 *  @param object The @c GTLRHangoutsChat_UploadAttachmentRequest to include in
 *    the query.
 *  @param parent Required. Resource name of the Chat space in which the
 *    attachment is uploaded. Format "spaces/{space}".
 *  @param uploadParameters The media to include in this query. Maximum size
 *    209715200. Accepted MIME type: * / *
 *
 *  @return GTLRHangoutsChatQuery_MediaUpload
 */
+ (instancetype)queryWithObject:(GTLRHangoutsChat_UploadAttachmentRequest *)object
                         parent:(NSString *)parent
               uploadParameters:(nullable GTLRUploadParameters *)uploadParameters;

@end

/**
 *  Completes the [import
 *  process](https://developers.google.com/workspace/chat/import-data) for the
 *  specified space and makes it visible to users. Requires app authentication
 *  and domain-wide delegation. For more information, see [Authorize Google Chat
 *  apps to import
 *  data](https://developers.google.com/workspace/chat/authorize-import).
 *
 *  Method: chat.spaces.completeImport
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatImport
 */
@interface GTLRHangoutsChatQuery_SpacesCompleteImport : GTLRHangoutsChatQuery

/**
 *  Required. Resource name of the import mode space. Format: `spaces/{space}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRHangoutsChat_CompleteImportSpaceResponse.
 *
 *  Completes the [import
 *  process](https://developers.google.com/workspace/chat/import-data) for the
 *  specified space and makes it visible to users. Requires app authentication
 *  and domain-wide delegation. For more information, see [Authorize Google Chat
 *  apps to import
 *  data](https://developers.google.com/workspace/chat/authorize-import).
 *
 *  @param object The @c GTLRHangoutsChat_CompleteImportSpaceRequest to include
 *    in the query.
 *  @param name Required. Resource name of the import mode space. Format:
 *    `spaces/{space}`
 *
 *  @return GTLRHangoutsChatQuery_SpacesCompleteImport
 */
+ (instancetype)queryWithObject:(GTLRHangoutsChat_CompleteImportSpaceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a space with no members. Can be used to create a named space. Spaces
 *  grouped by topics aren't supported. For an example, see [Create a
 *  space](https://developers.google.com/workspace/chat/create-spaces). If you
 *  receive the error message `ALREADY_EXISTS` when creating a space, try a
 *  different `displayName`. An existing space within the Google Workspace
 *  organization might already use this display name. If you're a member of the
 *  [Developer Preview
 *  program](https://developers.google.com/workspace/preview), you can create a
 *  group chat in import mode using `spaceType.GROUP_CHAT`. Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  Method: chat.spaces.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatAppSpaces
 *    @c kGTLRAuthScopeHangoutsChatAppSpacesCreate
 *    @c kGTLRAuthScopeHangoutsChatImport
 *    @c kGTLRAuthScopeHangoutsChatSpaces
 *    @c kGTLRAuthScopeHangoutsChatSpacesCreate
 */
@interface GTLRHangoutsChatQuery_SpacesCreate : GTLRHangoutsChatQuery

/**
 *  Optional. A unique identifier for this request. A random UUID is
 *  recommended. Specifying an existing request ID returns the space created
 *  with that ID instead of creating a new space. Specifying an existing request
 *  ID from the same Chat app with a different authenticated user returns an
 *  error.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRHangoutsChat_Space.
 *
 *  Creates a space with no members. Can be used to create a named space. Spaces
 *  grouped by topics aren't supported. For an example, see [Create a
 *  space](https://developers.google.com/workspace/chat/create-spaces). If you
 *  receive the error message `ALREADY_EXISTS` when creating a space, try a
 *  different `displayName`. An existing space within the Google Workspace
 *  organization might already use this display name. If you're a member of the
 *  [Developer Preview
 *  program](https://developers.google.com/workspace/preview), you can create a
 *  group chat in import mode using `spaceType.GROUP_CHAT`. Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  @param object The @c GTLRHangoutsChat_Space to include in the query.
 *
 *  @return GTLRHangoutsChatQuery_SpacesCreate
 */
+ (instancetype)queryWithObject:(GTLRHangoutsChat_Space *)object;

@end

/**
 *  Deletes a named space. Always performs a cascading delete, which means that
 *  the space's child resources—like messages posted in the space and
 *  memberships in the space—are also deleted. For an example, see [Delete a
 *  space](https://developers.google.com/workspace/chat/delete-spaces). Requires
 *  [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
 *  from a user who has permission to delete the space.
 *
 *  Method: chat.spaces.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatAdminDelete
 *    @c kGTLRAuthScopeHangoutsChatAppDelete
 *    @c kGTLRAuthScopeHangoutsChatDelete
 *    @c kGTLRAuthScopeHangoutsChatImport
 */
@interface GTLRHangoutsChatQuery_SpacesDelete : GTLRHangoutsChatQuery

/**
 *  Required. Resource name of the space to delete. Format: `spaces/{space}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  When `true`, the method runs using the user's Google Workspace administrator
 *  privileges. The calling user must be a Google Workspace administrator with
 *  the [manage chat and spaces conversations
 *  privilege](https://support.google.com/a/answer/13369245). Requires the
 *  `chat.admin.delete` [OAuth 2.0
 *  scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c GTLRHangoutsChat_Empty.
 *
 *  Deletes a named space. Always performs a cascading delete, which means that
 *  the space's child resources—like messages posted in the space and
 *  memberships in the space—are also deleted. For an example, see [Delete a
 *  space](https://developers.google.com/workspace/chat/delete-spaces). Requires
 *  [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
 *  from a user who has permission to delete the space.
 *
 *  @param name Required. Resource name of the space to delete. Format:
 *    `spaces/{space}`
 *
 *  @return GTLRHangoutsChatQuery_SpacesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns the existing direct message with the specified user. If no direct
 *  message space is found, returns a `404 NOT_FOUND` error. For an example, see
 *  [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message).
 *  With [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
 *  returns the direct message space between the specified user and the
 *  authenticated user. With [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app),
 *  returns the direct message space between the specified user and the calling
 *  Chat app. Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
 *  or [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
 *
 *  Method: chat.spaces.findDirectMessage
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatBot
 *    @c kGTLRAuthScopeHangoutsChatSpaces
 *    @c kGTLRAuthScopeHangoutsChatSpacesReadonly
 */
@interface GTLRHangoutsChatQuery_SpacesFindDirectMessage : GTLRHangoutsChatQuery

/**
 *  Required. Resource name of the user to find direct message with. Format:
 *  `users/{user}`, where `{user}` is either the `id` for the
 *  [person](https://developers.google.com/people/api/rest/v1/people) from the
 *  People API, or the `id` for the
 *  [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users)
 *  in the Directory API. For example, if the People API profile ID is
 *  `123456789`, you can find a direct message with that person by using
 *  `users/123456789` as the `name`. When [authenticated as a
 *  user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
 *  you can use the email as an alias for `{user}`. For example,
 *  `users/example\@gmail.com` where `example\@gmail.com` is the email of the
 *  Google Chat user.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRHangoutsChat_Space.
 *
 *  Returns the existing direct message with the specified user. If no direct
 *  message space is found, returns a `404 NOT_FOUND` error. For an example, see
 *  [Find a direct message](/chat/api/guides/v1/spaces/find-direct-message).
 *  With [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
 *  returns the direct message space between the specified user and the
 *  authenticated user. With [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app),
 *  returns the direct message space between the specified user and the calling
 *  Chat app. Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
 *  or [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
 *
 *  @return GTLRHangoutsChatQuery_SpacesFindDirectMessage
 */
+ (instancetype)query;

@end

/**
 *  Returns details about a space. For an example, see [Get details about a
 *  space](https://developers.google.com/workspace/chat/get-spaces). Requires
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
 *  Supports [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  Method: chat.spaces.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatAdminSpaces
 *    @c kGTLRAuthScopeHangoutsChatAdminSpacesReadonly
 *    @c kGTLRAuthScopeHangoutsChatAppSpaces
 *    @c kGTLRAuthScopeHangoutsChatBot
 *    @c kGTLRAuthScopeHangoutsChatSpaces
 *    @c kGTLRAuthScopeHangoutsChatSpacesReadonly
 */
@interface GTLRHangoutsChatQuery_SpacesGet : GTLRHangoutsChatQuery

/**
 *  Required. Resource name of the space, in the form `spaces/{space}`. Format:
 *  `spaces/{space}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  When `true`, the method runs using the user's Google Workspace administrator
 *  privileges. The calling user must be a Google Workspace administrator with
 *  the [manage chat and spaces conversations
 *  privilege](https://support.google.com/a/answer/13369245). Requires the
 *  `chat.admin.spaces` or `chat.admin.spaces.readonly` [OAuth 2.0
 *  scopes](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c GTLRHangoutsChat_Space.
 *
 *  Returns details about a space. For an example, see [Get details about a
 *  space](https://developers.google.com/workspace/chat/get-spaces). Requires
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
 *  Supports [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  @param name Required. Resource name of the space, in the form
 *    `spaces/{space}`. Format: `spaces/{space}`
 *
 *  @return GTLRHangoutsChatQuery_SpacesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists spaces the caller is a member of. Group chats and DMs aren't listed
 *  until the first message is sent. For an example, see [List
 *  spaces](https://developers.google.com/workspace/chat/list-spaces). Requires
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
 *  Supports [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  Lists spaces visible to the caller or authenticated user. Group chats and
 *  DMs aren't listed until the first message is sent. To list all named spaces
 *  by Google Workspace organization, use the
 *  [`spaces.search()`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/search)
 *  method using Workspace administrator privileges instead.
 *
 *  Method: chat.spaces.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatBot
 *    @c kGTLRAuthScopeHangoutsChatSpaces
 *    @c kGTLRAuthScopeHangoutsChatSpacesReadonly
 */
@interface GTLRHangoutsChatQuery_SpacesList : GTLRHangoutsChatQuery

/**
 *  Optional. A query filter. You can filter spaces by the space type
 *  ([`space_type`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces#spacetype)).
 *  To filter by space type, you must specify valid enum value, such as `SPACE`
 *  or `GROUP_CHAT` (the `space_type` can't be `SPACE_TYPE_UNSPECIFIED`). To
 *  query for multiple space types, use the `OR` operator. For example, the
 *  following queries are valid: ``` space_type = "SPACE" spaceType =
 *  "GROUP_CHAT" OR spaceType = "DIRECT_MESSAGE" ``` Invalid queries are
 *  rejected by the server with an `INVALID_ARGUMENT` error.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The maximum number of spaces to return. The service might return
 *  fewer than this value. If unspecified, at most 100 spaces are returned. The
 *  maximum value is 1000. If you use a value more than 1000, it's automatically
 *  changed to 1000. Negative values return an `INVALID_ARGUMENT` error.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous list spaces call. Provide
 *  this parameter to retrieve the subsequent page. When paginating, the filter
 *  value should match the call that provided the page token. Passing a
 *  different value may lead to unexpected results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRHangoutsChat_ListSpacesResponse.
 *
 *  Lists spaces the caller is a member of. Group chats and DMs aren't listed
 *  until the first message is sent. For an example, see [List
 *  spaces](https://developers.google.com/workspace/chat/list-spaces). Requires
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
 *  Supports [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  Lists spaces visible to the caller or authenticated user. Group chats and
 *  DMs aren't listed until the first message is sent. To list all named spaces
 *  by Google Workspace organization, use the
 *  [`spaces.search()`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/search)
 *  method using Workspace administrator privileges instead.
 *
 *  @return GTLRHangoutsChatQuery_SpacesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Creates a membership for the calling Chat app, a user, or a Google Group.
 *  Creating memberships for other Chat apps isn't supported. When creating a
 *  membership, if the specified member has their auto-accept policy turned off,
 *  then they're invited, and must accept the space invitation before joining.
 *  Otherwise, creating a membership adds the member directly to the specified
 *  space. Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  For example usage, see: - [Invite or add a user to a
 *  space](https://developers.google.com/workspace/chat/create-members#create-user-membership).
 *  - [Invite or add a Google Group to a
 *  space](https://developers.google.com/workspace/chat/create-members#create-group-membership).
 *  - [Add the Chat app to a
 *  space](https://developers.google.com/workspace/chat/create-members#create-membership-calling-api).
 *
 *  Method: chat.spaces.members.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatAdminMemberships
 *    @c kGTLRAuthScopeHangoutsChatAppMemberships
 *    @c kGTLRAuthScopeHangoutsChatImport
 *    @c kGTLRAuthScopeHangoutsChatMemberships
 *    @c kGTLRAuthScopeHangoutsChatMembershipsApp
 */
@interface GTLRHangoutsChatQuery_SpacesMembersCreate : GTLRHangoutsChatQuery

/**
 *  Required. The resource name of the space for which to create the membership.
 *  Format: spaces/{space}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  When `true`, the method runs using the user's Google Workspace administrator
 *  privileges. The calling user must be a Google Workspace administrator with
 *  the [manage chat and spaces conversations
 *  privilege](https://support.google.com/a/answer/13369245). Requires the
 *  `chat.admin.memberships` [OAuth 2.0
 *  scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
 *  Creating app memberships or creating memberships for users outside the
 *  administrator's Google Workspace organization isn't supported using admin
 *  access.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c GTLRHangoutsChat_Membership.
 *
 *  Creates a membership for the calling Chat app, a user, or a Google Group.
 *  Creating memberships for other Chat apps isn't supported. When creating a
 *  membership, if the specified member has their auto-accept policy turned off,
 *  then they're invited, and must accept the space invitation before joining.
 *  Otherwise, creating a membership adds the member directly to the specified
 *  space. Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  For example usage, see: - [Invite or add a user to a
 *  space](https://developers.google.com/workspace/chat/create-members#create-user-membership).
 *  - [Invite or add a Google Group to a
 *  space](https://developers.google.com/workspace/chat/create-members#create-group-membership).
 *  - [Add the Chat app to a
 *  space](https://developers.google.com/workspace/chat/create-members#create-membership-calling-api).
 *
 *  @param object The @c GTLRHangoutsChat_Membership to include in the query.
 *  @param parent Required. The resource name of the space for which to create
 *    the membership. Format: spaces/{space}
 *
 *  @return GTLRHangoutsChatQuery_SpacesMembersCreate
 */
+ (instancetype)queryWithObject:(GTLRHangoutsChat_Membership *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a membership. For an example, see [Remove a user or a Google Chat
 *  app from a
 *  space](https://developers.google.com/workspace/chat/delete-members).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  Method: chat.spaces.members.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatAdminMemberships
 *    @c kGTLRAuthScopeHangoutsChatAppMemberships
 *    @c kGTLRAuthScopeHangoutsChatImport
 *    @c kGTLRAuthScopeHangoutsChatMemberships
 *    @c kGTLRAuthScopeHangoutsChatMembershipsApp
 */
@interface GTLRHangoutsChatQuery_SpacesMembersDelete : GTLRHangoutsChatQuery

/**
 *  Required. Resource name of the membership to delete. Chat apps can delete
 *  human users' or their own memberships. Chat apps can't delete other apps'
 *  memberships. When deleting a human membership, requires the
 *  `chat.memberships` scope and `spaces/{space}/members/{member}` format. You
 *  can use the email as an alias for `{member}`. For example,
 *  `spaces/{space}/members/example\@gmail.com` where `example\@gmail.com` is
 *  the email of the Google Chat user. When deleting an app membership, requires
 *  the `chat.memberships.app` scope and `spaces/{space}/members/app` format.
 *  Format: `spaces/{space}/members/{member}` or `spaces/{space}/members/app`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  When `true`, the method runs using the user's Google Workspace administrator
 *  privileges. The calling user must be a Google Workspace administrator with
 *  the [manage chat and spaces conversations
 *  privilege](https://support.google.com/a/answer/13369245). Requires the
 *  `chat.admin.memberships` [OAuth 2.0
 *  scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
 *  Deleting app memberships in a space isn't supported using admin access.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c GTLRHangoutsChat_Membership.
 *
 *  Deletes a membership. For an example, see [Remove a user or a Google Chat
 *  app from a
 *  space](https://developers.google.com/workspace/chat/delete-members).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  @param name Required. Resource name of the membership to delete. Chat apps
 *    can delete human users' or their own memberships. Chat apps can't delete
 *    other apps' memberships. When deleting a human membership, requires the
 *    `chat.memberships` scope and `spaces/{space}/members/{member}` format. You
 *    can use the email as an alias for `{member}`. For example,
 *    `spaces/{space}/members/example\@gmail.com` where `example\@gmail.com` is
 *    the email of the Google Chat user. When deleting an app membership,
 *    requires the `chat.memberships.app` scope and `spaces/{space}/members/app`
 *    format. Format: `spaces/{space}/members/{member}` or
 *    `spaces/{space}/members/app`.
 *
 *  @return GTLRHangoutsChatQuery_SpacesMembersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns details about a membership. For an example, see [Get details about a
 *  user's or Google Chat app's
 *  membership](https://developers.google.com/workspace/chat/get-members).
 *  Requires
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
 *  Supports [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  Method: chat.spaces.members.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatAdminMemberships
 *    @c kGTLRAuthScopeHangoutsChatAdminMembershipsReadonly
 *    @c kGTLRAuthScopeHangoutsChatBot
 *    @c kGTLRAuthScopeHangoutsChatMemberships
 *    @c kGTLRAuthScopeHangoutsChatMembershipsReadonly
 */
@interface GTLRHangoutsChatQuery_SpacesMembersGet : GTLRHangoutsChatQuery

/**
 *  Required. Resource name of the membership to retrieve. To get the app's own
 *  membership [by using user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
 *  you can optionally use `spaces/{space}/members/app`. Format:
 *  `spaces/{space}/members/{member}` or `spaces/{space}/members/app` When
 *  [authenticated as a
 *  user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
 *  you can use the user's email as an alias for `{member}`. For example,
 *  `spaces/{space}/members/example\@gmail.com` where `example\@gmail.com` is
 *  the email of the Google Chat user.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  When `true`, the method runs using the user's Google Workspace administrator
 *  privileges. The calling user must be a Google Workspace administrator with
 *  the [manage chat and spaces conversations
 *  privilege](https://support.google.com/a/answer/13369245). Requires the
 *  `chat.admin.memberships` or `chat.admin.memberships.readonly` [OAuth 2.0
 *  scopes](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
 *  Getting app memberships in a space isn't supported when using admin access.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c GTLRHangoutsChat_Membership.
 *
 *  Returns details about a membership. For an example, see [Get details about a
 *  user's or Google Chat app's
 *  membership](https://developers.google.com/workspace/chat/get-members).
 *  Requires
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
 *  Supports [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  @param name Required. Resource name of the membership to retrieve. To get
 *    the app's own membership [by using user
 *    authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
 *    you can optionally use `spaces/{space}/members/app`. Format:
 *    `spaces/{space}/members/{member}` or `spaces/{space}/members/app` When
 *    [authenticated as a
 *    user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
 *    you can use the user's email as an alias for `{member}`. For example,
 *    `spaces/{space}/members/example\@gmail.com` where `example\@gmail.com` is
 *    the email of the Google Chat user.
 *
 *  @return GTLRHangoutsChatQuery_SpacesMembersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists memberships in a space. For an example, see [List users and Google
 *  Chat apps in a
 *  space](https://developers.google.com/workspace/chat/list-members). Listing
 *  memberships with [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  lists memberships in spaces that the Chat app has access to, but excludes
 *  Chat app memberships, including its own. Listing memberships with [User
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
 *  lists memberships in spaces that the authenticated user has access to.
 *  Requires
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
 *  Supports [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  Method: chat.spaces.members.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatAdminMemberships
 *    @c kGTLRAuthScopeHangoutsChatAdminMembershipsReadonly
 *    @c kGTLRAuthScopeHangoutsChatBot
 *    @c kGTLRAuthScopeHangoutsChatImport
 *    @c kGTLRAuthScopeHangoutsChatMemberships
 *    @c kGTLRAuthScopeHangoutsChatMembershipsReadonly
 */
@interface GTLRHangoutsChatQuery_SpacesMembersList : GTLRHangoutsChatQuery

/**
 *  Optional. A query filter. You can filter memberships by a member's role
 *  ([`role`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.members#membershiprole))
 *  and type
 *  ([`member.type`](https://developers.google.com/workspace/chat/api/reference/rest/v1/User#type)).
 *  To filter by role, set `role` to `ROLE_MEMBER` or `ROLE_MANAGER`. To filter
 *  by type, set `member.type` to `HUMAN` or `BOT`. You can also filter for
 *  `member.type` using the `!=` operator. To filter by both role and type, use
 *  the `AND` operator. To filter by either role or type, use the `OR` operator.
 *  Either `member.type = "HUMAN"` or `member.type != "BOT"` is required when
 *  `use_admin_access` is set to true. Other member type filters will be
 *  rejected. For example, the following queries are valid: ``` role =
 *  "ROLE_MANAGER" OR role = "ROLE_MEMBER" member.type = "HUMAN" AND role =
 *  "ROLE_MANAGER" member.type != "BOT" ``` The following queries are invalid:
 *  ``` member.type = "HUMAN" AND member.type = "BOT" role = "ROLE_MANAGER" AND
 *  role = "ROLE_MEMBER" ``` Invalid queries are rejected by the server with an
 *  `INVALID_ARGUMENT` error.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The maximum number of memberships to return. The service might
 *  return fewer than this value. If unspecified, at most 100 memberships are
 *  returned. The maximum value is 1000. If you use a value more than 1000, it's
 *  automatically changed to 1000. Negative values return an `INVALID_ARGUMENT`
 *  error.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous call to list memberships.
 *  Provide this parameter to retrieve the subsequent page. When paginating, all
 *  other parameters provided should match the call that provided the page
 *  token. Passing different values to the other parameters might lead to
 *  unexpected results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name of the space for which to fetch a membership
 *  list. Format: spaces/{space}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. When `true`, also returns memberships associated with a Google
 *  Group, in addition to other types of memberships. If a filter is set, Google
 *  Group memberships that don't match the filter criteria aren't returned.
 */
@property(nonatomic, assign) BOOL showGroups;

/**
 *  Optional. When `true`, also returns memberships associated with invited
 *  members, in addition to other types of memberships. If a filter is set,
 *  invited memberships that don't match the filter criteria aren't returned.
 *  Currently requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 */
@property(nonatomic, assign) BOOL showInvited;

/**
 *  When `true`, the method runs using the user's Google Workspace administrator
 *  privileges. The calling user must be a Google Workspace administrator with
 *  the [manage chat and spaces conversations
 *  privilege](https://support.google.com/a/answer/13369245). Requires either
 *  the `chat.admin.memberships.readonly` or `chat.admin.memberships` [OAuth 2.0
 *  scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
 *  Listing app memberships in a space isn't supported when using admin access.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c GTLRHangoutsChat_ListMembershipsResponse.
 *
 *  Lists memberships in a space. For an example, see [List users and Google
 *  Chat apps in a
 *  space](https://developers.google.com/workspace/chat/list-members). Listing
 *  memberships with [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  lists memberships in spaces that the Chat app has access to, but excludes
 *  Chat app memberships, including its own. Listing memberships with [User
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user)
 *  lists memberships in spaces that the authenticated user has access to.
 *  Requires
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
 *  Supports [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  @param parent Required. The resource name of the space for which to fetch a
 *    membership list. Format: spaces/{space}
 *
 *  @return GTLRHangoutsChatQuery_SpacesMembersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a membership. For an example, see [Update a user's membership in a
 *  space](https://developers.google.com/workspace/chat/update-members).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  Method: chat.spaces.members.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatAdminMemberships
 *    @c kGTLRAuthScopeHangoutsChatAppMemberships
 *    @c kGTLRAuthScopeHangoutsChatImport
 *    @c kGTLRAuthScopeHangoutsChatMemberships
 */
@interface GTLRHangoutsChatQuery_SpacesMembersPatch : GTLRHangoutsChatQuery

/**
 *  Resource name of the membership, assigned by the server. Format:
 *  `spaces/{space}/members/{member}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The field paths to update. Separate multiple values with commas or
 *  use `*` to update all field paths. Currently supported field paths: - `role`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  When `true`, the method runs using the user's Google Workspace administrator
 *  privileges. The calling user must be a Google Workspace administrator with
 *  the [manage chat and spaces conversations
 *  privilege](https://support.google.com/a/answer/13369245). Requires the
 *  `chat.admin.memberships` [OAuth 2.0
 *  scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c GTLRHangoutsChat_Membership.
 *
 *  Updates a membership. For an example, see [Update a user's membership in a
 *  space](https://developers.google.com/workspace/chat/update-members).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  @param object The @c GTLRHangoutsChat_Membership to include in the query.
 *  @param name Resource name of the membership, assigned by the server. Format:
 *    `spaces/{space}/members/{member}`
 *
 *  @return GTLRHangoutsChatQuery_SpacesMembersPatch
 */
+ (instancetype)queryWithObject:(GTLRHangoutsChat_Membership *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the metadata of a message attachment. The attachment data is fetched
 *  using the [media
 *  API](https://developers.google.com/workspace/chat/api/reference/rest/v1/media/download).
 *  For an example, see [Get metadata about a message
 *  attachment](https://developers.google.com/workspace/chat/get-media-attachments).
 *  Requires [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
 *
 *  Method: chat.spaces.messages.attachments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatBot
 */
@interface GTLRHangoutsChatQuery_SpacesMessagesAttachmentsGet : GTLRHangoutsChatQuery

/**
 *  Required. Resource name of the attachment, in the form
 *  `spaces/{space}/messages/{message}/attachments/{attachment}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRHangoutsChat_Attachment.
 *
 *  Gets the metadata of a message attachment. The attachment data is fetched
 *  using the [media
 *  API](https://developers.google.com/workspace/chat/api/reference/rest/v1/media/download).
 *  For an example, see [Get metadata about a message
 *  attachment](https://developers.google.com/workspace/chat/get-media-attachments).
 *  Requires [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
 *
 *  @param name Required. Resource name of the attachment, in the form
 *    `spaces/{space}/messages/{message}/attachments/{attachment}`.
 *
 *  @return GTLRHangoutsChatQuery_SpacesMessagesAttachmentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a message in a Google Chat space. For an example, see [Send a
 *  message](https://developers.google.com/workspace/chat/create-messages). The
 *  `create()` method requires either user or app authentication. Chat
 *  attributes the message sender differently depending on the type of
 *  authentication that you use in your request. The following image shows how
 *  Chat attributes a message when you use app authentication. Chat displays the
 *  Chat app as the message sender. The content of the message can contain text
 *  (`text`), cards (`cardsV2`), and accessory widgets (`accessoryWidgets`).
 *  ![Message sent with app
 *  authentication](https://developers.google.com/workspace/chat/images/message-app-auth.svg)
 *  The following image shows how Chat attributes a message when you use user
 *  authentication. Chat displays the user as the message sender and attributes
 *  the Chat app to the message by displaying its name. The content of message
 *  can only contain text (`text`). ![Message sent with user
 *  authentication](https://developers.google.com/workspace/chat/images/message-user-auth.svg)
 *  The maximum message size, including the message contents, is 32,000 bytes.
 *
 *  Method: chat.spaces.messages.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatBot
 *    @c kGTLRAuthScopeHangoutsChatImport
 *    @c kGTLRAuthScopeHangoutsChatMessages
 *    @c kGTLRAuthScopeHangoutsChatMessagesCreate
 */
@interface GTLRHangoutsChatQuery_SpacesMessagesCreate : GTLRHangoutsChatQuery

/**
 *  Optional. A custom ID for a message. Lets Chat apps get, update, or delete a
 *  message without needing to store the system-assigned ID in the message's
 *  resource name (represented in the message `name` field). The value for this
 *  field must meet the following requirements: * Begins with `client-`. For
 *  example, `client-custom-name` is a valid custom ID, but `custom-name` is
 *  not. * Contains up to 63 characters and only lowercase letters, numbers, and
 *  hyphens. * Is unique within a space. A Chat app can't use the same custom ID
 *  for different messages. For details, see [Name a
 *  message](https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
 */
@property(nonatomic, copy, nullable) NSString *messageId;

/**
 *  Optional. Specifies whether a message starts a thread or replies to one.
 *  Only supported in named spaces.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChatMessageReplyOptionMessageReplyOptionUnspecified
 *        Default. Starts a new thread. Using this option ignores any thread ID
 *        or `thread_key` that's included. (Value:
 *        "MESSAGE_REPLY_OPTION_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChatMessageReplyOptionReplyMessageFallbackToNewThread
 *        Creates the message as a reply to the thread specified by thread ID or
 *        `thread_key`. If it fails, the message starts a new thread instead.
 *        (Value: "REPLY_MESSAGE_FALLBACK_TO_NEW_THREAD")
 *    @arg @c kGTLRHangoutsChatMessageReplyOptionReplyMessageOrFail Creates the
 *        message as a reply to the thread specified by thread ID or
 *        `thread_key`. If a new `thread_key` is used, a new thread is created.
 *        If the message creation fails, a `NOT_FOUND` error is returned
 *        instead. (Value: "REPLY_MESSAGE_OR_FAIL")
 */
@property(nonatomic, copy, nullable) NSString *messageReplyOption;

/**
 *  Required. The resource name of the space in which to create a message.
 *  Format: `spaces/{space}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. A unique request ID for this message. Specifying an existing
 *  request ID returns the message created with that ID instead of creating a
 *  new message.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Deprecated: Use thread.thread_key instead. ID for the thread.
 *  Supports up to 4000 characters. To start or add to a thread, create a
 *  message and specify a `threadKey` or the thread.name. For example usage, see
 *  [Start or reply to a message
 *  thread](https://developers.google.com/workspace/chat/create-messages#create-message-thread).
 */
@property(nonatomic, copy, nullable) NSString *threadKey GTLR_DEPRECATED;

/**
 *  Fetches a @c GTLRHangoutsChat_Message.
 *
 *  Creates a message in a Google Chat space. For an example, see [Send a
 *  message](https://developers.google.com/workspace/chat/create-messages). The
 *  `create()` method requires either user or app authentication. Chat
 *  attributes the message sender differently depending on the type of
 *  authentication that you use in your request. The following image shows how
 *  Chat attributes a message when you use app authentication. Chat displays the
 *  Chat app as the message sender. The content of the message can contain text
 *  (`text`), cards (`cardsV2`), and accessory widgets (`accessoryWidgets`).
 *  ![Message sent with app
 *  authentication](https://developers.google.com/workspace/chat/images/message-app-auth.svg)
 *  The following image shows how Chat attributes a message when you use user
 *  authentication. Chat displays the user as the message sender and attributes
 *  the Chat app to the message by displaying its name. The content of message
 *  can only contain text (`text`). ![Message sent with user
 *  authentication](https://developers.google.com/workspace/chat/images/message-user-auth.svg)
 *  The maximum message size, including the message contents, is 32,000 bytes.
 *
 *  @param object The @c GTLRHangoutsChat_Message to include in the query.
 *  @param parent Required. The resource name of the space in which to create a
 *    message. Format: `spaces/{space}`
 *
 *  @return GTLRHangoutsChatQuery_SpacesMessagesCreate
 */
+ (instancetype)queryWithObject:(GTLRHangoutsChat_Message *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a message. For an example, see [Delete a
 *  message](https://developers.google.com/workspace/chat/delete-messages).
 *  Requires
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
 *  Supports [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  When using app authentication, requests can only delete messages created by
 *  the calling Chat app.
 *
 *  Method: chat.spaces.messages.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatBot
 *    @c kGTLRAuthScopeHangoutsChatImport
 *    @c kGTLRAuthScopeHangoutsChatMessages
 */
@interface GTLRHangoutsChatQuery_SpacesMessagesDelete : GTLRHangoutsChatQuery

/**
 *  When `true`, deleting a message also deletes its threaded replies. When
 *  `false`, if a message has threaded replies, deletion fails. Only applies
 *  when [authenticating as a
 *  user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  Has no effect when [authenticating as a Chat app]
 *  (https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
 */
@property(nonatomic, assign) BOOL force;

/**
 *  Required. Resource name of the message. Format:
 *  `spaces/{space}/messages/{message}` If you've set a custom ID for your
 *  message, you can use the value from the `clientAssignedMessageId` field for
 *  `{message}`. For details, see [Name a message]
 *  (https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRHangoutsChat_Empty.
 *
 *  Deletes a message. For an example, see [Delete a
 *  message](https://developers.google.com/workspace/chat/delete-messages).
 *  Requires
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
 *  Supports [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  When using app authentication, requests can only delete messages created by
 *  the calling Chat app.
 *
 *  @param name Required. Resource name of the message. Format:
 *    `spaces/{space}/messages/{message}` If you've set a custom ID for your
 *    message, you can use the value from the `clientAssignedMessageId` field
 *    for `{message}`. For details, see [Name a message]
 *    (https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
 *
 *  @return GTLRHangoutsChatQuery_SpacesMessagesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns details about a message. For an example, see [Get details about a
 *  message](https://developers.google.com/workspace/chat/get-messages).
 *  Requires
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
 *  Supports [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  Note: Might return a message from a blocked member or space.
 *
 *  Method: chat.spaces.messages.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatBot
 *    @c kGTLRAuthScopeHangoutsChatMessages
 *    @c kGTLRAuthScopeHangoutsChatMessagesReadonly
 */
@interface GTLRHangoutsChatQuery_SpacesMessagesGet : GTLRHangoutsChatQuery

/**
 *  Required. Resource name of the message. Format:
 *  `spaces/{space}/messages/{message}` If you've set a custom ID for your
 *  message, you can use the value from the `clientAssignedMessageId` field for
 *  `{message}`. For details, see [Name a message]
 *  (https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRHangoutsChat_Message.
 *
 *  Returns details about a message. For an example, see [Get details about a
 *  message](https://developers.google.com/workspace/chat/get-messages).
 *  Requires
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
 *  Supports [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  Note: Might return a message from a blocked member or space.
 *
 *  @param name Required. Resource name of the message. Format:
 *    `spaces/{space}/messages/{message}` If you've set a custom ID for your
 *    message, you can use the value from the `clientAssignedMessageId` field
 *    for `{message}`. For details, see [Name a message]
 *    (https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
 *
 *  @return GTLRHangoutsChatQuery_SpacesMessagesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists messages in a space that the caller is a member of, including messages
 *  from blocked members and spaces. If you list messages from a space with no
 *  messages, the response is an empty object. When using a REST/HTTP interface,
 *  the response contains an empty JSON object, `{}`. For an example, see [List
 *  messages](https://developers.google.com/workspace/chat/api/guides/v1/messages/list).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  Method: chat.spaces.messages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatImport
 *    @c kGTLRAuthScopeHangoutsChatMessages
 *    @c kGTLRAuthScopeHangoutsChatMessagesReadonly
 */
@interface GTLRHangoutsChatQuery_SpacesMessagesList : GTLRHangoutsChatQuery

/**
 *  A query filter. You can filter messages by date (`create_time`) and thread
 *  (`thread.name`). To filter messages by the date they were created, specify
 *  the `create_time` with a timestamp in
 *  [RFC-3339](https://www.rfc-editor.org/rfc/rfc3339) format and double
 *  quotation marks. For example, `"2023-04-21T11:30:00-04:00"`. You can use the
 *  greater than operator `>` to list messages that were created after a
 *  timestamp, or the less than operator `<` to list messages that were created
 *  before a timestamp. To filter messages within a time interval, use the `AND`
 *  operator between two timestamps. To filter by thread, specify the
 *  `thread.name`, formatted as `spaces/{space}/threads/{thread}`. You can only
 *  specify one `thread.name` per query. To filter by both thread and date, use
 *  the `AND` operator in your query. For example, the following queries are
 *  valid: ``` create_time > "2012-04-21T11:30:00-04:00" create_time >
 *  "2012-04-21T11:30:00-04:00" AND thread.name = spaces/AAAAAAAAAAA/threads/123
 *  create_time > "2012-04-21T11:30:00+00:00" AND create_time <
 *  "2013-01-01T00:00:00+00:00" AND thread.name = spaces/AAAAAAAAAAA/threads/123
 *  thread.name = spaces/AAAAAAAAAAA/threads/123 ``` Invalid queries are
 *  rejected by the server with an `INVALID_ARGUMENT` error.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional, if resuming from a previous query. How the list of messages is
 *  ordered. Specify a value to order by an ordering operation. Valid ordering
 *  operation values are as follows: - `ASC` for ascending. - `DESC` for
 *  descending. The default ordering is `create_time ASC`.
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of messages returned. The service might return fewer
 *  messages than this value. If unspecified, at most 25 are returned. The
 *  maximum value is 1000. If you use a value more than 1000, it's automatically
 *  changed to 1000. Negative values return an `INVALID_ARGUMENT` error.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional, if resuming from a previous query. A page token received from a
 *  previous list messages call. Provide this parameter to retrieve the
 *  subsequent page. When paginating, all other parameters provided should match
 *  the call that provided the page token. Passing different values to the other
 *  parameters might lead to unexpected results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The resource name of the space to list messages from. Format:
 *  `spaces/{space}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Whether to include deleted messages. Deleted messages include deleted time
 *  and metadata about their deletion, but message content is unavailable.
 */
@property(nonatomic, assign) BOOL showDeleted;

/**
 *  Fetches a @c GTLRHangoutsChat_ListMessagesResponse.
 *
 *  Lists messages in a space that the caller is a member of, including messages
 *  from blocked members and spaces. If you list messages from a space with no
 *  messages, the response is an empty object. When using a REST/HTTP interface,
 *  the response contains an empty JSON object, `{}`. For an example, see [List
 *  messages](https://developers.google.com/workspace/chat/api/guides/v1/messages/list).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  @param parent Required. The resource name of the space to list messages
 *    from. Format: `spaces/{space}`
 *
 *  @return GTLRHangoutsChatQuery_SpacesMessagesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a message. There's a difference between the `patch` and `update`
 *  methods. The `patch` method uses a `patch` request while the `update` method
 *  uses a `put` request. We recommend using the `patch` method. For an example,
 *  see [Update a
 *  message](https://developers.google.com/workspace/chat/update-messages).
 *  Requires
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
 *  Supports [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  When using app authentication, requests can only update messages created by
 *  the calling Chat app.
 *
 *  Method: chat.spaces.messages.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatBot
 *    @c kGTLRAuthScopeHangoutsChatImport
 *    @c kGTLRAuthScopeHangoutsChatMessages
 */
@interface GTLRHangoutsChatQuery_SpacesMessagesPatch : GTLRHangoutsChatQuery

/**
 *  Optional. If `true` and the message isn't found, a new message is created
 *  and `updateMask` is ignored. The specified message ID must be
 *  [client-assigned](https://developers.google.com/workspace/chat/create-messages#name_a_created_message)
 *  or the request fails.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  Resource name of the message. Format: `spaces/{space}/messages/{message}`
 *  Where `{space}` is the ID of the space where the message is posted and
 *  `{message}` is a system-assigned ID for the message. For example,
 *  `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`. If you set a custom
 *  ID when you create a message, you can use this ID to specify the message in
 *  a request by replacing `{message}` with the value from the
 *  `clientAssignedMessageId` field. For example,
 *  `spaces/AAAAAAAAAAA/messages/client-custom-name`. For details, see [Name a
 *  message](https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The field paths to update. Separate multiple values with commas or
 *  use `*` to update all field paths. Currently supported field paths: - `text`
 *  - `attachment` - `cards` (Requires [app
 *  authentication](/chat/api/guides/auth/service-accounts).) - `cards_v2`
 *  (Requires [app authentication](/chat/api/guides/auth/service-accounts).) -
 *  `accessory_widgets` (Requires [app
 *  authentication](/chat/api/guides/auth/service-accounts).)
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRHangoutsChat_Message.
 *
 *  Updates a message. There's a difference between the `patch` and `update`
 *  methods. The `patch` method uses a `patch` request while the `update` method
 *  uses a `put` request. We recommend using the `patch` method. For an example,
 *  see [Update a
 *  message](https://developers.google.com/workspace/chat/update-messages).
 *  Requires
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
 *  Supports [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  When using app authentication, requests can only update messages created by
 *  the calling Chat app.
 *
 *  @param object The @c GTLRHangoutsChat_Message to include in the query.
 *  @param name Resource name of the message. Format:
 *    `spaces/{space}/messages/{message}` Where `{space}` is the ID of the space
 *    where the message is posted and `{message}` is a system-assigned ID for
 *    the message. For example,
 *    `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`. If you set a custom
 *    ID when you create a message, you can use this ID to specify the message
 *    in a request by replacing `{message}` with the value from the
 *    `clientAssignedMessageId` field. For example,
 *    `spaces/AAAAAAAAAAA/messages/client-custom-name`. For details, see [Name a
 *    message](https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
 *
 *  @return GTLRHangoutsChatQuery_SpacesMessagesPatch
 */
+ (instancetype)queryWithObject:(GTLRHangoutsChat_Message *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a reaction and adds it to a message. Only unicode emojis are
 *  supported. For an example, see [Add a reaction to a
 *  message](https://developers.google.com/workspace/chat/create-reactions).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  Method: chat.spaces.messages.reactions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatImport
 *    @c kGTLRAuthScopeHangoutsChatMessages
 *    @c kGTLRAuthScopeHangoutsChatMessagesReactions
 *    @c kGTLRAuthScopeHangoutsChatMessagesReactionsCreate
 */
@interface GTLRHangoutsChatQuery_SpacesMessagesReactionsCreate : GTLRHangoutsChatQuery

/**
 *  Required. The message where the reaction is created. Format:
 *  `spaces/{space}/messages/{message}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRHangoutsChat_Reaction.
 *
 *  Creates a reaction and adds it to a message. Only unicode emojis are
 *  supported. For an example, see [Add a reaction to a
 *  message](https://developers.google.com/workspace/chat/create-reactions).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  @param object The @c GTLRHangoutsChat_Reaction to include in the query.
 *  @param parent Required. The message where the reaction is created. Format:
 *    `spaces/{space}/messages/{message}`
 *
 *  @return GTLRHangoutsChatQuery_SpacesMessagesReactionsCreate
 */
+ (instancetype)queryWithObject:(GTLRHangoutsChat_Reaction *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a reaction to a message. Only unicode emojis are supported. For an
 *  example, see [Delete a
 *  reaction](https://developers.google.com/workspace/chat/delete-reactions).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  Method: chat.spaces.messages.reactions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatImport
 *    @c kGTLRAuthScopeHangoutsChatMessages
 *    @c kGTLRAuthScopeHangoutsChatMessagesReactions
 */
@interface GTLRHangoutsChatQuery_SpacesMessagesReactionsDelete : GTLRHangoutsChatQuery

/**
 *  Required. Name of the reaction to delete. Format:
 *  `spaces/{space}/messages/{message}/reactions/{reaction}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRHangoutsChat_Empty.
 *
 *  Deletes a reaction to a message. Only unicode emojis are supported. For an
 *  example, see [Delete a
 *  reaction](https://developers.google.com/workspace/chat/delete-reactions).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  @param name Required. Name of the reaction to delete. Format:
 *    `spaces/{space}/messages/{message}/reactions/{reaction}`
 *
 *  @return GTLRHangoutsChatQuery_SpacesMessagesReactionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists reactions to a message. For an example, see [List reactions for a
 *  message](https://developers.google.com/workspace/chat/list-reactions).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  Method: chat.spaces.messages.reactions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatMessages
 *    @c kGTLRAuthScopeHangoutsChatMessagesReactions
 *    @c kGTLRAuthScopeHangoutsChatMessagesReactionsReadonly
 *    @c kGTLRAuthScopeHangoutsChatMessagesReadonly
 */
@interface GTLRHangoutsChatQuery_SpacesMessagesReactionsList : GTLRHangoutsChatQuery

/**
 *  Optional. A query filter. You can filter reactions by
 *  [emoji](https://developers.google.com/workspace/chat/api/reference/rest/v1/Emoji)
 *  (either `emoji.unicode` or `emoji.custom_emoji.uid`) and
 *  [user](https://developers.google.com/workspace/chat/api/reference/rest/v1/User)
 *  (`user.name`). To filter reactions for multiple emojis or users, join
 *  similar fields with the `OR` operator, such as `emoji.unicode = "🙂" OR
 *  emoji.unicode = "👍"` and `user.name = "users/AAAAAA" OR user.name =
 *  "users/BBBBBB"`. To filter reactions by emoji and user, use the `AND`
 *  operator, such as `emoji.unicode = "🙂" AND user.name = "users/AAAAAA"`. If
 *  your query uses both `AND` and `OR`, group them with parentheses. For
 *  example, the following queries are valid: ``` user.name = "users/{user}"
 *  emoji.unicode = "🙂" emoji.custom_emoji.uid = "{uid}" emoji.unicode = "🙂"
 *  OR emoji.unicode = "👍" emoji.unicode = "🙂" OR emoji.custom_emoji.uid =
 *  "{uid}" emoji.unicode = "🙂" AND user.name = "users/{user}" (emoji.unicode =
 *  "🙂" OR emoji.custom_emoji.uid = "{uid}") AND user.name = "users/{user}" ```
 *  The following queries are invalid: ``` emoji.unicode = "🙂" AND
 *  emoji.unicode = "👍" emoji.unicode = "🙂" AND emoji.custom_emoji.uid =
 *  "{uid}" emoji.unicode = "🙂" OR user.name = "users/{user}" emoji.unicode =
 *  "🙂" OR emoji.custom_emoji.uid = "{uid}" OR user.name = "users/{user}"
 *  emoji.unicode = "🙂" OR emoji.custom_emoji.uid = "{uid}" AND user.name =
 *  "users/{user}" ``` Invalid queries are rejected by the server with an
 *  `INVALID_ARGUMENT` error.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The maximum number of reactions returned. The service can return
 *  fewer reactions than this value. If unspecified, the default value is 25.
 *  The maximum value is 200; values above 200 are changed to 200.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. (If resuming from a previous query.) A page token received from a
 *  previous list reactions call. Provide this to retrieve the subsequent page.
 *  When paginating, the filter value should match the call that provided the
 *  page token. Passing a different value might lead to unexpected results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The message users reacted to. Format:
 *  `spaces/{space}/messages/{message}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRHangoutsChat_ListReactionsResponse.
 *
 *  Lists reactions to a message. For an example, see [List reactions for a
 *  message](https://developers.google.com/workspace/chat/list-reactions).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  @param parent Required. The message users reacted to. Format:
 *    `spaces/{space}/messages/{message}`
 *
 *  @return GTLRHangoutsChatQuery_SpacesMessagesReactionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a message. There's a difference between the `patch` and `update`
 *  methods. The `patch` method uses a `patch` request while the `update` method
 *  uses a `put` request. We recommend using the `patch` method. For an example,
 *  see [Update a
 *  message](https://developers.google.com/workspace/chat/update-messages).
 *  Requires
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
 *  Supports [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  When using app authentication, requests can only update messages created by
 *  the calling Chat app.
 *
 *  Method: chat.spaces.messages.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatBot
 *    @c kGTLRAuthScopeHangoutsChatImport
 *    @c kGTLRAuthScopeHangoutsChatMessages
 */
@interface GTLRHangoutsChatQuery_SpacesMessagesUpdate : GTLRHangoutsChatQuery

/**
 *  Optional. If `true` and the message isn't found, a new message is created
 *  and `updateMask` is ignored. The specified message ID must be
 *  [client-assigned](https://developers.google.com/workspace/chat/create-messages#name_a_created_message)
 *  or the request fails.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  Resource name of the message. Format: `spaces/{space}/messages/{message}`
 *  Where `{space}` is the ID of the space where the message is posted and
 *  `{message}` is a system-assigned ID for the message. For example,
 *  `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`. If you set a custom
 *  ID when you create a message, you can use this ID to specify the message in
 *  a request by replacing `{message}` with the value from the
 *  `clientAssignedMessageId` field. For example,
 *  `spaces/AAAAAAAAAAA/messages/client-custom-name`. For details, see [Name a
 *  message](https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The field paths to update. Separate multiple values with commas or
 *  use `*` to update all field paths. Currently supported field paths: - `text`
 *  - `attachment` - `cards` (Requires [app
 *  authentication](/chat/api/guides/auth/service-accounts).) - `cards_v2`
 *  (Requires [app authentication](/chat/api/guides/auth/service-accounts).) -
 *  `accessory_widgets` (Requires [app
 *  authentication](/chat/api/guides/auth/service-accounts).)
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRHangoutsChat_Message.
 *
 *  Updates a message. There's a difference between the `patch` and `update`
 *  methods. The `patch` method uses a `patch` request while the `update` method
 *  uses a `put` request. We recommend using the `patch` method. For an example,
 *  see [Update a
 *  message](https://developers.google.com/workspace/chat/update-messages).
 *  Requires
 *  [authentication](https://developers.google.com/workspace/chat/authenticate-authorize).
 *  Supports [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  When using app authentication, requests can only update messages created by
 *  the calling Chat app.
 *
 *  @param object The @c GTLRHangoutsChat_Message to include in the query.
 *  @param name Resource name of the message. Format:
 *    `spaces/{space}/messages/{message}` Where `{space}` is the ID of the space
 *    where the message is posted and `{message}` is a system-assigned ID for
 *    the message. For example,
 *    `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`. If you set a custom
 *    ID when you create a message, you can use this ID to specify the message
 *    in a request by replacing `{message}` with the value from the
 *    `clientAssignedMessageId` field. For example,
 *    `spaces/AAAAAAAAAAA/messages/client-custom-name`. For details, see [Name a
 *    message](https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
 *
 *  @return GTLRHangoutsChatQuery_SpacesMessagesUpdate
 */
+ (instancetype)queryWithObject:(GTLRHangoutsChat_Message *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a space. For an example, see [Update a
 *  space](https://developers.google.com/workspace/chat/update-spaces). If
 *  you're updating the `displayName` field and receive the error message
 *  `ALREADY_EXISTS`, try a different display name.. An existing space within
 *  the Google Workspace organization might already use this display name.
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  Method: chat.spaces.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatAdminSpaces
 *    @c kGTLRAuthScopeHangoutsChatAppSpaces
 *    @c kGTLRAuthScopeHangoutsChatImport
 *    @c kGTLRAuthScopeHangoutsChatSpaces
 */
@interface GTLRHangoutsChatQuery_SpacesPatch : GTLRHangoutsChatQuery

/**
 *  Resource name of the space. Format: `spaces/{space}` Where `{space}`
 *  represents the system-assigned ID for the space. You can obtain the space ID
 *  by calling the
 *  [`spaces.list()`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/list)
 *  method or from the space URL. For example, if the space URL is
 *  `https://mail.google.com/mail/u/0/#chat/space/AAAAAAAAA`, the space ID is
 *  `AAAAAAAAA`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The updated field paths, comma separated if there are multiple.
 *  You can update the following fields for a space: - `space_details` -
 *  `display_name`: Only supports updating the display name for spaces where
 *  `spaceType` field is `SPACE`. If you receive the error message
 *  `ALREADY_EXISTS`, try a different value. An existing space within the Google
 *  Workspace organization might already use this display name. - `space_type`:
 *  Only supports changing a `GROUP_CHAT` space type to `SPACE`. Include
 *  `display_name` together with `space_type` in the update mask and ensure that
 *  the specified space has a non-empty display name and the `SPACE` space type.
 *  Including the `space_type` mask and the `SPACE` type in the specified space
 *  when updating the display name is optional if the existing space already has
 *  the `SPACE` type. Trying to update the space type in other ways results in
 *  an invalid argument error. `space_type` is not supported with admin access.
 *  - `space_history_state`: Updates [space history
 *  settings](https://support.google.com/chat/answer/7664687) by turning history
 *  on or off for the space. Only supported if history settings are enabled for
 *  the Google Workspace organization. To update the space history state, you
 *  must omit all other field masks in your request. `space_history_state` is
 *  not supported with admin access. - `access_settings.audience`: Updates the
 *  [access setting](https://support.google.com/chat/answer/11971020) of who can
 *  discover the space, join the space, and preview the messages in named space
 *  where `spaceType` field is `SPACE`. If the existing space has a target
 *  audience, you can remove the audience and restrict space access by omitting
 *  a value for this field mask. To update access settings for a space, the
 *  authenticating user must be a space manager and omit all other field masks
 *  in your request. You can't update this field if the space is in [import
 *  mode](https://developers.google.com/workspace/chat/import-data-overview). To
 *  learn more, see [Make a space discoverable to specific
 *  users](https://developers.google.com/workspace/chat/space-target-audience).
 *  `access_settings.audience` is not supported with admin access. - Developer
 *  Preview: Supports changing the [permission
 *  settings](https://support.google.com/chat/answer/13340792) of a space,
 *  supported field paths include:
 *  `permission_settings.manage_members_and_groups`,
 *  `permission_settings.modify_space_details`,
 *  `permission_settings.toggle_history`,
 *  `permission_settings.use_at_mention_all`, `permission_settings.manage_apps`,
 *  `permission_settings.manage_webhooks`, `permission_settings.reply_messages`
 *  (Warning: mutually exclusive with all other non-permission settings field
 *  paths). `permission_settings` is not supported with admin access.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  When `true`, the method runs using the user's Google Workspace administrator
 *  privileges. The calling user must be a Google Workspace administrator with
 *  the [manage chat and spaces conversations
 *  privilege](https://support.google.com/a/answer/13369245). Requires the
 *  `chat.admin.spaces` [OAuth 2.0
 *  scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
 *  Some `FieldMask` values are not supported using admin access. For details,
 *  see the description of `update_mask`.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c GTLRHangoutsChat_Space.
 *
 *  Updates a space. For an example, see [Update a
 *  space](https://developers.google.com/workspace/chat/update-spaces). If
 *  you're updating the `displayName` field and receive the error message
 *  `ALREADY_EXISTS`, try a different display name.. An existing space within
 *  the Google Workspace organization might already use this display name.
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  @param object The @c GTLRHangoutsChat_Space to include in the query.
 *  @param name Resource name of the space. Format: `spaces/{space}` Where
 *    `{space}` represents the system-assigned ID for the space. You can obtain
 *    the space ID by calling the
 *    [`spaces.list()`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/list)
 *    method or from the space URL. For example, if the space URL is
 *    `https://mail.google.com/mail/u/0/#chat/space/AAAAAAAAA`, the space ID is
 *    `AAAAAAAAA`.
 *
 *  @return GTLRHangoutsChatQuery_SpacesPatch
 */
+ (instancetype)queryWithObject:(GTLRHangoutsChat_Space *)object
                           name:(NSString *)name;

@end

/**
 *  Returns a list of spaces in a Google Workspace organization based on an
 *  administrator's search. Requires [user authentication with administrator
 *  privileges](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user#admin-privileges).
 *  In the request, set `use_admin_access` to `true`.
 *
 *  Method: chat.spaces.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatAdminSpaces
 *    @c kGTLRAuthScopeHangoutsChatAdminSpacesReadonly
 */
@interface GTLRHangoutsChatQuery_SpacesSearch : GTLRHangoutsChatQuery

/**
 *  Optional. How the list of spaces is ordered. Supported attributes to order
 *  by are: - `membership_count.joined_direct_human_user_count` — Denotes the
 *  count of human users that have directly joined a space. - `last_active_time`
 *  — Denotes the time when last eligible item is added to any topic of this
 *  space. - `create_time` — Denotes the time of the space creation. Valid
 *  ordering operation values are: - `ASC` for ascending. Default value. -
 *  `DESC` for descending. The supported syntax are: -
 *  `membership_count.joined_direct_human_user_count DESC` -
 *  `membership_count.joined_direct_human_user_count ASC` - `last_active_time
 *  DESC` - `last_active_time ASC` - `create_time DESC` - `create_time ASC`
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of spaces to return. The service may return fewer than
 *  this value. If unspecified, at most 100 spaces are returned. The maximum
 *  value is 1000. If you use a value more than 1000, it's automatically changed
 *  to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token, received from the previous search spaces call. Provide this
 *  parameter to retrieve the subsequent page. When paginating, all other
 *  parameters provided should match the call that provided the page token.
 *  Passing different values to the other parameters might lead to unexpected
 *  results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. A search query. You can search by using the following parameters:
 *  - `create_time` - `customer` - `display_name` - `external_user_allowed` -
 *  `last_active_time` - `space_history_state` - `space_type` `create_time` and
 *  `last_active_time` accept a timestamp in
 *  [RFC-3339](https://www.rfc-editor.org/rfc/rfc3339) format and the supported
 *  comparison operators are: `=`, `<`, `>`, `<=`, `>=`. `customer` is required
 *  and is used to indicate which customer to fetch spaces from.
 *  `customers/my_customer` is the only supported value. `display_name` only
 *  accepts the `HAS` (`:`) operator. The text to match is first tokenized into
 *  tokens and each token is prefix-matched case-insensitively and independently
 *  as a substring anywhere in the space's `display_name`. For example, `Fun
 *  Eve` matches `Fun event` or `The evening was fun`, but not `notFun event` or
 *  `even`. `external_user_allowed` accepts either `true` or `false`.
 *  `space_history_state` only accepts values from the [`historyState`]
 *  (https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces#Space.HistoryState)
 *  field of a `space` resource. `space_type` is required and the only valid
 *  value is `SPACE`. Across different fields, only `AND` operators are
 *  supported. A valid example is `space_type = "SPACE" AND
 *  display_name:"Hello"` and an invalid example is `space_type = "SPACE" OR
 *  display_name:"Hello"`. Among the same field, `space_type` doesn't support
 *  `AND` or `OR` operators. `display_name`, 'space_history_state', and
 *  'external_user_allowed' only support `OR` operators. `last_active_time` and
 *  `create_time` support both `AND` and `OR` operators. `AND` can only be used
 *  to represent an interval, such as `last_active_time <
 *  "2022-01-01T00:00:00+00:00" AND last_active_time >
 *  "2023-01-01T00:00:00+00:00"`. The following example queries are valid: ```
 *  customer = "customers/my_customer" AND space_type = "SPACE" customer =
 *  "customers/my_customer" AND space_type = "SPACE" AND display_name:"Hello
 *  World" customer = "customers/my_customer" AND space_type = "SPACE" AND
 *  (last_active_time < "2020-01-01T00:00:00+00:00" OR last_active_time >
 *  "2022-01-01T00:00:00+00:00") customer = "customers/my_customer" AND
 *  space_type = "SPACE" AND (display_name:"Hello World" OR display_name:"Fun
 *  event") AND (last_active_time > "2020-01-01T00:00:00+00:00" AND
 *  last_active_time < "2022-01-01T00:00:00+00:00") customer =
 *  "customers/my_customer" AND space_type = "SPACE" AND (create_time >
 *  "2019-01-01T00:00:00+00:00" AND create_time < "2020-01-01T00:00:00+00:00")
 *  AND (external_user_allowed = "true") AND (space_history_state = "HISTORY_ON"
 *  OR space_history_state = "HISTORY_OFF") ```
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  When `true`, the method runs using the user's Google Workspace administrator
 *  privileges. The calling user must be a Google Workspace administrator with
 *  the [manage chat and spaces conversations
 *  privilege](https://support.google.com/a/answer/13369245). Requires either
 *  the `chat.admin.spaces.readonly` or `chat.admin.spaces` [OAuth 2.0
 *  scope](https://developers.google.com/workspace/chat/authenticate-authorize#chat-api-scopes).
 *  This method currently only supports admin access, thus only `true` is
 *  accepted for this field.
 */
@property(nonatomic, assign) BOOL useAdminAccess;

/**
 *  Fetches a @c GTLRHangoutsChat_SearchSpacesResponse.
 *
 *  Returns a list of spaces in a Google Workspace organization based on an
 *  administrator's search. Requires [user authentication with administrator
 *  privileges](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user#admin-privileges).
 *  In the request, set `use_admin_access` to `true`.
 *
 *  @return GTLRHangoutsChatQuery_SpacesSearch
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Creates a space and adds specified users to it. The calling user is
 *  automatically added to the space, and shouldn't be specified as a membership
 *  in the request. For an example, see [Set up a space with initial
 *  members](https://developers.google.com/workspace/chat/set-up-spaces). To
 *  specify the human members to add, add memberships with the appropriate
 *  `membership.member.name`. To add a human user, use `users/{user}`, where
 *  `{user}` can be the email address for the user. For users in the same
 *  Workspace organization `{user}` can also be the `id` for the person from the
 *  People API, or the `id` for the user in the Directory API. For example, if
 *  the People API Person profile ID for `user\@example.com` is `123456789`, you
 *  can add the user to the space by setting the `membership.member.name` to
 *  `users/user\@example.com` or `users/123456789`. To specify the Google groups
 *  to add, add memberships with the appropriate `membership.group_member.name`.
 *  To add or invite a Google group, use `groups/{group}`, where `{group}` is
 *  the `id` for the group from the Cloud Identity Groups API. For example, you
 *  can use [Cloud Identity Groups lookup
 *  API](https://cloud.google.com/identity/docs/reference/rest/v1/groups/lookup)
 *  to retrieve the ID `123456789` for group email `group\@example.com`, then
 *  you can add the group to the space by setting the
 *  `membership.group_member.name` to `groups/123456789`. Group email is not
 *  supported, and Google groups can only be added as members in named spaces.
 *  For a named space or group chat, if the caller blocks, or is blocked by some
 *  members, or doesn't have permission to add some members, then those members
 *  aren't added to the created space. To create a direct message (DM) between
 *  the calling user and another human user, specify exactly one membership to
 *  represent the human user. If one user blocks the other, the request fails
 *  and the DM isn't created. To create a DM between the calling user and the
 *  calling app, set `Space.singleUserBotDm` to `true` and don't specify any
 *  memberships. You can only use this method to set up a DM with the calling
 *  app. To add the calling app as a member of a space or an existing DM between
 *  two human users, see [Invite or add a user or app to a
 *  space](https://developers.google.com/workspace/chat/create-members). If a DM
 *  already exists between two users, even when one user blocks the other at the
 *  time a request is made, then the existing DM is returned. Spaces with
 *  threaded replies aren't supported. If you receive the error message
 *  `ALREADY_EXISTS` when setting up a space, try a different `displayName`. An
 *  existing space within the Google Workspace organization might already use
 *  this display name. Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  Method: chat.spaces.setup
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatSpaces
 *    @c kGTLRAuthScopeHangoutsChatSpacesCreate
 */
@interface GTLRHangoutsChatQuery_SpacesSetup : GTLRHangoutsChatQuery

/**
 *  Fetches a @c GTLRHangoutsChat_Space.
 *
 *  Creates a space and adds specified users to it. The calling user is
 *  automatically added to the space, and shouldn't be specified as a membership
 *  in the request. For an example, see [Set up a space with initial
 *  members](https://developers.google.com/workspace/chat/set-up-spaces). To
 *  specify the human members to add, add memberships with the appropriate
 *  `membership.member.name`. To add a human user, use `users/{user}`, where
 *  `{user}` can be the email address for the user. For users in the same
 *  Workspace organization `{user}` can also be the `id` for the person from the
 *  People API, or the `id` for the user in the Directory API. For example, if
 *  the People API Person profile ID for `user\@example.com` is `123456789`, you
 *  can add the user to the space by setting the `membership.member.name` to
 *  `users/user\@example.com` or `users/123456789`. To specify the Google groups
 *  to add, add memberships with the appropriate `membership.group_member.name`.
 *  To add or invite a Google group, use `groups/{group}`, where `{group}` is
 *  the `id` for the group from the Cloud Identity Groups API. For example, you
 *  can use [Cloud Identity Groups lookup
 *  API](https://cloud.google.com/identity/docs/reference/rest/v1/groups/lookup)
 *  to retrieve the ID `123456789` for group email `group\@example.com`, then
 *  you can add the group to the space by setting the
 *  `membership.group_member.name` to `groups/123456789`. Group email is not
 *  supported, and Google groups can only be added as members in named spaces.
 *  For a named space or group chat, if the caller blocks, or is blocked by some
 *  members, or doesn't have permission to add some members, then those members
 *  aren't added to the created space. To create a direct message (DM) between
 *  the calling user and another human user, specify exactly one membership to
 *  represent the human user. If one user blocks the other, the request fails
 *  and the DM isn't created. To create a DM between the calling user and the
 *  calling app, set `Space.singleUserBotDm` to `true` and don't specify any
 *  memberships. You can only use this method to set up a DM with the calling
 *  app. To add the calling app as a member of a space or an existing DM between
 *  two human users, see [Invite or add a user or app to a
 *  space](https://developers.google.com/workspace/chat/create-members). If a DM
 *  already exists between two users, even when one user blocks the other at the
 *  time a request is made, then the existing DM is returned. Spaces with
 *  threaded replies aren't supported. If you receive the error message
 *  `ALREADY_EXISTS` when setting up a space, try a different `displayName`. An
 *  existing space within the Google Workspace organization might already use
 *  this display name. Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  @param object The @c GTLRHangoutsChat_SetUpSpaceRequest to include in the
 *    query.
 *
 *  @return GTLRHangoutsChatQuery_SpacesSetup
 */
+ (instancetype)queryWithObject:(GTLRHangoutsChat_SetUpSpaceRequest *)object;

@end

/**
 *  Returns an event from a Google Chat space. The [event
 *  payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
 *  contains the most recent version of the resource that changed. For example,
 *  if you request an event about a new message but the message was later
 *  updated, the server returns the updated `Message` resource in the event
 *  payload. Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  To get an event, the authenticated user must be a member of the space. For
 *  an example, see [Get details about an event from a Google Chat
 *  space](https://developers.google.com/workspace/chat/get-space-event).
 *
 *  Method: chat.spaces.spaceEvents.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatMemberships
 *    @c kGTLRAuthScopeHangoutsChatMembershipsReadonly
 *    @c kGTLRAuthScopeHangoutsChatMessages
 *    @c kGTLRAuthScopeHangoutsChatMessagesReactions
 *    @c kGTLRAuthScopeHangoutsChatMessagesReactionsReadonly
 *    @c kGTLRAuthScopeHangoutsChatMessagesReadonly
 *    @c kGTLRAuthScopeHangoutsChatSpaces
 *    @c kGTLRAuthScopeHangoutsChatSpacesReadonly
 */
@interface GTLRHangoutsChatQuery_SpacesSpaceEventsGet : GTLRHangoutsChatQuery

/**
 *  Required. The resource name of the space event. Format:
 *  `spaces/{space}/spaceEvents/{spaceEvent}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRHangoutsChat_SpaceEvent.
 *
 *  Returns an event from a Google Chat space. The [event
 *  payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
 *  contains the most recent version of the resource that changed. For example,
 *  if you request an event about a new message but the message was later
 *  updated, the server returns the updated `Message` resource in the event
 *  payload. Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  To get an event, the authenticated user must be a member of the space. For
 *  an example, see [Get details about an event from a Google Chat
 *  space](https://developers.google.com/workspace/chat/get-space-event).
 *
 *  @param name Required. The resource name of the space event. Format:
 *    `spaces/{space}/spaceEvents/{spaceEvent}`
 *
 *  @return GTLRHangoutsChatQuery_SpacesSpaceEventsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists events from a Google Chat space. For each event, the
 *  [payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
 *  contains the most recent version of the Chat resource. For example, if you
 *  list events about new space members, the server returns `Membership`
 *  resources that contain the latest membership details. If new members were
 *  removed during the requested period, the event payload contains an empty
 *  `Membership` resource. Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  To list events, the authenticated user must be a member of the space. For an
 *  example, see [List events from a Google Chat
 *  space](https://developers.google.com/workspace/chat/list-space-events).
 *
 *  Method: chat.spaces.spaceEvents.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatMemberships
 *    @c kGTLRAuthScopeHangoutsChatMembershipsReadonly
 *    @c kGTLRAuthScopeHangoutsChatMessages
 *    @c kGTLRAuthScopeHangoutsChatMessagesReactions
 *    @c kGTLRAuthScopeHangoutsChatMessagesReactionsReadonly
 *    @c kGTLRAuthScopeHangoutsChatMessagesReadonly
 *    @c kGTLRAuthScopeHangoutsChatSpaces
 *    @c kGTLRAuthScopeHangoutsChatSpacesReadonly
 */
@interface GTLRHangoutsChatQuery_SpacesSpaceEventsList : GTLRHangoutsChatQuery

/**
 *  Required. A query filter. You must specify at least one event type
 *  (`event_type`) using the has `:` operator. To filter by multiple event
 *  types, use the `OR` operator. Omit batch event types in your filter. The
 *  request automatically returns any related batch events. For example, if you
 *  filter by new reactions (`google.workspace.chat.reaction.v1.created`), the
 *  server also returns batch new reactions events
 *  (`google.workspace.chat.reaction.v1.batchCreated`). For a list of supported
 *  event types, see the [`SpaceEvents` reference
 *  documentation](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.event_type).
 *  Optionally, you can also filter by start time (`start_time`) and end time
 *  (`end_time`): * `start_time`: Exclusive timestamp from which to start
 *  listing space events. You can list events that occurred up to 28 days ago.
 *  If unspecified, lists space events from the past 28 days. * `end_time`:
 *  Inclusive timestamp until which space events are listed. If unspecified,
 *  lists events up to the time of the request. To specify a start or end time,
 *  use the equals `=` operator and format in
 *  [RFC-3339](https://www.rfc-editor.org/rfc/rfc3339). To filter by both
 *  `start_time` and `end_time`, use the `AND` operator. For example, the
 *  following queries are valid: ``` start_time="2023-08-23T19:20:33+00:00" AND
 *  end_time="2023-08-23T19:21:54+00:00" ``` ```
 *  start_time="2023-08-23T19:20:33+00:00" AND
 *  (event_types:"google.workspace.chat.space.v1.updated" OR
 *  event_types:"google.workspace.chat.message.v1.created") ``` The following
 *  queries are invalid: ``` start_time="2023-08-23T19:20:33+00:00" OR
 *  end_time="2023-08-23T19:21:54+00:00" ``` ```
 *  event_types:"google.workspace.chat.space.v1.updated" AND
 *  event_types:"google.workspace.chat.message.v1.created" ``` Invalid queries
 *  are rejected by the server with an `INVALID_ARGUMENT` error.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. The maximum number of space events returned. The service might
 *  return fewer than this value. Negative values return an `INVALID_ARGUMENT`
 *  error.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous list space events call. Provide this
 *  to retrieve the subsequent page. When paginating, all other parameters
 *  provided to list space events must match the call that provided the page
 *  token. Passing different values to the other parameters might lead to
 *  unexpected results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Resource name of the [Google Chat
 *  space](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces)
 *  where the events occurred. Format: `spaces/{space}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRHangoutsChat_ListSpaceEventsResponse.
 *
 *  Lists events from a Google Chat space. For each event, the
 *  [payload](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.spaceEvents#SpaceEvent.FIELDS.oneof_payload)
 *  contains the most recent version of the Chat resource. For example, if you
 *  list events about new space members, the server returns `Membership`
 *  resources that contain the latest membership details. If new members were
 *  removed during the requested period, the event payload contains an empty
 *  `Membership` resource. Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *  To list events, the authenticated user must be a member of the space. For an
 *  example, see [List events from a Google Chat
 *  space](https://developers.google.com/workspace/chat/list-space-events).
 *
 *  @param parent Required. Resource name of the [Google Chat
 *    space](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces)
 *    where the events occurred. Format: `spaces/{space}`.
 *
 *  @return GTLRHangoutsChatQuery_SpacesSpaceEventsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Returns details about a user's read state within a space, used to identify
 *  read and unread messages. For an example, see [Get details about a user's
 *  space read
 *  state](https://developers.google.com/workspace/chat/get-space-read-state).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  Method: chat.users.spaces.getSpaceReadState
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatUsersReadstate
 *    @c kGTLRAuthScopeHangoutsChatUsersReadstateReadonly
 */
@interface GTLRHangoutsChatQuery_UsersSpacesGetSpaceReadState : GTLRHangoutsChatQuery

/**
 *  Required. Resource name of the space read state to retrieve. Only supports
 *  getting read state for the calling user. To refer to the calling user, set
 *  one of the following: - The `me` alias. For example,
 *  `users/me/spaces/{space}/spaceReadState`. - Their Workspace email address.
 *  For example, `users/user\@example.com/spaces/{space}/spaceReadState`. -
 *  Their user id. For example, `users/123456789/spaces/{space}/spaceReadState`.
 *  Format: users/{user}/spaces/{space}/spaceReadState
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRHangoutsChat_SpaceReadState.
 *
 *  Returns details about a user's read state within a space, used to identify
 *  read and unread messages. For an example, see [Get details about a user's
 *  space read
 *  state](https://developers.google.com/workspace/chat/get-space-read-state).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  @param name Required. Resource name of the space read state to retrieve.
 *    Only supports getting read state for the calling user. To refer to the
 *    calling user, set one of the following: - The `me` alias. For example,
 *    `users/me/spaces/{space}/spaceReadState`. - Their Workspace email address.
 *    For example, `users/user\@example.com/spaces/{space}/spaceReadState`. -
 *    Their user id. For example,
 *    `users/123456789/spaces/{space}/spaceReadState`. Format:
 *    users/{user}/spaces/{space}/spaceReadState
 *
 *  @return GTLRHangoutsChatQuery_UsersSpacesGetSpaceReadState
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns details about a user's read state within a thread, used to identify
 *  read and unread messages. For an example, see [Get details about a user's
 *  thread read
 *  state](https://developers.google.com/workspace/chat/get-thread-read-state).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  Method: chat.users.spaces.threads.getThreadReadState
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatUsersReadstate
 *    @c kGTLRAuthScopeHangoutsChatUsersReadstateReadonly
 */
@interface GTLRHangoutsChatQuery_UsersSpacesThreadsGetThreadReadState : GTLRHangoutsChatQuery

/**
 *  Required. Resource name of the thread read state to retrieve. Only supports
 *  getting read state for the calling user. To refer to the calling user, set
 *  one of the following: - The `me` alias. For example,
 *  `users/me/spaces/{space}/threads/{thread}/threadReadState`. - Their
 *  Workspace email address. For example,
 *  `users/user\@example.com/spaces/{space}/threads/{thread}/threadReadState`. -
 *  Their user id. For example,
 *  `users/123456789/spaces/{space}/threads/{thread}/threadReadState`. Format:
 *  users/{user}/spaces/{space}/threads/{thread}/threadReadState
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRHangoutsChat_ThreadReadState.
 *
 *  Returns details about a user's read state within a thread, used to identify
 *  read and unread messages. For an example, see [Get details about a user's
 *  thread read
 *  state](https://developers.google.com/workspace/chat/get-thread-read-state).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  @param name Required. Resource name of the thread read state to retrieve.
 *    Only supports getting read state for the calling user. To refer to the
 *    calling user, set one of the following: - The `me` alias. For example,
 *    `users/me/spaces/{space}/threads/{thread}/threadReadState`. - Their
 *    Workspace email address. For example,
 *    `users/user\@example.com/spaces/{space}/threads/{thread}/threadReadState`.
 *    - Their user id. For example,
 *    `users/123456789/spaces/{space}/threads/{thread}/threadReadState`. Format:
 *    users/{user}/spaces/{space}/threads/{thread}/threadReadState
 *
 *  @return GTLRHangoutsChatQuery_UsersSpacesThreadsGetThreadReadState
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates a user's read state within a space, used to identify read and unread
 *  messages. For an example, see [Update a user's space read
 *  state](https://developers.google.com/workspace/chat/update-space-read-state).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  Method: chat.users.spaces.updateSpaceReadState
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeHangoutsChatUsersReadstate
 */
@interface GTLRHangoutsChatQuery_UsersSpacesUpdateSpaceReadState : GTLRHangoutsChatQuery

/**
 *  Resource name of the space read state. Format:
 *  `users/{user}/spaces/{space}/spaceReadState`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The field paths to update. Currently supported field paths: -
 *  `last_read_time` When the `last_read_time` is before the latest message
 *  create time, the space appears as unread in the UI. To mark the space as
 *  read, set `last_read_time` to any value later (larger) than the latest
 *  message create time. The `last_read_time` is coerced to match the latest
 *  message create time. Note that the space read state only affects the read
 *  state of messages that are visible in the space's top-level conversation.
 *  Replies in threads are unaffected by this timestamp, and instead rely on the
 *  thread read state.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRHangoutsChat_SpaceReadState.
 *
 *  Updates a user's read state within a space, used to identify read and unread
 *  messages. For an example, see [Update a user's space read
 *  state](https://developers.google.com/workspace/chat/update-space-read-state).
 *  Requires [user
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user).
 *
 *  @param object The @c GTLRHangoutsChat_SpaceReadState to include in the
 *    query.
 *  @param name Resource name of the space read state. Format:
 *    `users/{user}/spaces/{space}/spaceReadState`
 *
 *  @return GTLRHangoutsChatQuery_UsersSpacesUpdateSpaceReadState
 */
+ (instancetype)queryWithObject:(GTLRHangoutsChat_SpaceReadState *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
