// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Chat API (chat/v1)
// Description:
//   The Google Chat API lets you build Chat apps to integrate your services
//   with Google Chat and manage Chat resources such as spaces, members, and
//   messages.
// Documentation:
//   https://developers.google.com/hangouts/chat

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRHangoutsChat_AccessoryWidget;
@class GTLRHangoutsChat_AccessSettings;
@class GTLRHangoutsChat_ActionParameter;
@class GTLRHangoutsChat_ActionResponse;
@class GTLRHangoutsChat_ActionStatus;
@class GTLRHangoutsChat_Annotation;
@class GTLRHangoutsChat_AttachedGif;
@class GTLRHangoutsChat_Attachment;
@class GTLRHangoutsChat_AttachmentDataRef;
@class GTLRHangoutsChat_Button;
@class GTLRHangoutsChat_Card;
@class GTLRHangoutsChat_CardAction;
@class GTLRHangoutsChat_CardHeader;
@class GTLRHangoutsChat_CardWithId;
@class GTLRHangoutsChat_ChatClientDataSourceMarkup;
@class GTLRHangoutsChat_ChatSpaceLinkData;
@class GTLRHangoutsChat_Color;
@class GTLRHangoutsChat_CommonEventObject;
@class GTLRHangoutsChat_CommonEventObject_FormInputs;
@class GTLRHangoutsChat_CommonEventObject_Parameters;
@class GTLRHangoutsChat_CustomEmoji;
@class GTLRHangoutsChat_DateInput;
@class GTLRHangoutsChat_DateTimeInput;
@class GTLRHangoutsChat_DeletionMetadata;
@class GTLRHangoutsChat_Dialog;
@class GTLRHangoutsChat_DialogAction;
@class GTLRHangoutsChat_DriveDataRef;
@class GTLRHangoutsChat_DriveLinkData;
@class GTLRHangoutsChat_Emoji;
@class GTLRHangoutsChat_EmojiReactionSummary;
@class GTLRHangoutsChat_FormAction;
@class GTLRHangoutsChat_GoogleAppsCardV1Action;
@class GTLRHangoutsChat_GoogleAppsCardV1ActionParameter;
@class GTLRHangoutsChat_GoogleAppsCardV1BorderStyle;
@class GTLRHangoutsChat_GoogleAppsCardV1Button;
@class GTLRHangoutsChat_GoogleAppsCardV1ButtonList;
@class GTLRHangoutsChat_GoogleAppsCardV1Card;
@class GTLRHangoutsChat_GoogleAppsCardV1CardAction;
@class GTLRHangoutsChat_GoogleAppsCardV1CardFixedFooter;
@class GTLRHangoutsChat_GoogleAppsCardV1CardHeader;
@class GTLRHangoutsChat_GoogleAppsCardV1Column;
@class GTLRHangoutsChat_GoogleAppsCardV1Columns;
@class GTLRHangoutsChat_GoogleAppsCardV1DateTimePicker;
@class GTLRHangoutsChat_GoogleAppsCardV1DecoratedText;
@class GTLRHangoutsChat_GoogleAppsCardV1Divider;
@class GTLRHangoutsChat_GoogleAppsCardV1Grid;
@class GTLRHangoutsChat_GoogleAppsCardV1GridItem;
@class GTLRHangoutsChat_GoogleAppsCardV1Icon;
@class GTLRHangoutsChat_GoogleAppsCardV1Image;
@class GTLRHangoutsChat_GoogleAppsCardV1ImageComponent;
@class GTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle;
@class GTLRHangoutsChat_GoogleAppsCardV1MaterialIcon;
@class GTLRHangoutsChat_GoogleAppsCardV1OnClick;
@class GTLRHangoutsChat_GoogleAppsCardV1OpenLink;
@class GTLRHangoutsChat_GoogleAppsCardV1PlatformDataSource;
@class GTLRHangoutsChat_GoogleAppsCardV1Section;
@class GTLRHangoutsChat_GoogleAppsCardV1SelectionInput;
@class GTLRHangoutsChat_GoogleAppsCardV1SelectionItem;
@class GTLRHangoutsChat_GoogleAppsCardV1SuggestionItem;
@class GTLRHangoutsChat_GoogleAppsCardV1Suggestions;
@class GTLRHangoutsChat_GoogleAppsCardV1SwitchControl;
@class GTLRHangoutsChat_GoogleAppsCardV1TextInput;
@class GTLRHangoutsChat_GoogleAppsCardV1TextParagraph;
@class GTLRHangoutsChat_GoogleAppsCardV1Widget;
@class GTLRHangoutsChat_GoogleAppsCardV1Widgets;
@class GTLRHangoutsChat_Group;
@class GTLRHangoutsChat_HostAppDataSourceMarkup;
@class GTLRHangoutsChat_Image;
@class GTLRHangoutsChat_ImageButton;
@class GTLRHangoutsChat_Inputs;
@class GTLRHangoutsChat_KeyValue;
@class GTLRHangoutsChat_MatchedUrl;
@class GTLRHangoutsChat_Membership;
@class GTLRHangoutsChat_MembershipBatchCreatedEventData;
@class GTLRHangoutsChat_MembershipBatchDeletedEventData;
@class GTLRHangoutsChat_MembershipBatchUpdatedEventData;
@class GTLRHangoutsChat_MembershipCount;
@class GTLRHangoutsChat_MembershipCreatedEventData;
@class GTLRHangoutsChat_MembershipDeletedEventData;
@class GTLRHangoutsChat_MembershipUpdatedEventData;
@class GTLRHangoutsChat_Message;
@class GTLRHangoutsChat_MessageBatchCreatedEventData;
@class GTLRHangoutsChat_MessageBatchDeletedEventData;
@class GTLRHangoutsChat_MessageBatchUpdatedEventData;
@class GTLRHangoutsChat_MessageCreatedEventData;
@class GTLRHangoutsChat_MessageDeletedEventData;
@class GTLRHangoutsChat_MessageUpdatedEventData;
@class GTLRHangoutsChat_OnClick;
@class GTLRHangoutsChat_OpenLink;
@class GTLRHangoutsChat_QuotedMessageMetadata;
@class GTLRHangoutsChat_Reaction;
@class GTLRHangoutsChat_ReactionBatchCreatedEventData;
@class GTLRHangoutsChat_ReactionBatchDeletedEventData;
@class GTLRHangoutsChat_ReactionCreatedEventData;
@class GTLRHangoutsChat_ReactionDeletedEventData;
@class GTLRHangoutsChat_RichLinkMetadata;
@class GTLRHangoutsChat_Section;
@class GTLRHangoutsChat_SelectionItems;
@class GTLRHangoutsChat_SlashCommand;
@class GTLRHangoutsChat_SlashCommandMetadata;
@class GTLRHangoutsChat_Space;
@class GTLRHangoutsChat_SpaceBatchUpdatedEventData;
@class GTLRHangoutsChat_SpaceDataSource;
@class GTLRHangoutsChat_SpaceDetails;
@class GTLRHangoutsChat_SpaceEvent;
@class GTLRHangoutsChat_SpaceUpdatedEventData;
@class GTLRHangoutsChat_Status;
@class GTLRHangoutsChat_Status_Details_Item;
@class GTLRHangoutsChat_StringInputs;
@class GTLRHangoutsChat_TextButton;
@class GTLRHangoutsChat_TextParagraph;
@class GTLRHangoutsChat_Thread;
@class GTLRHangoutsChat_TimeInput;
@class GTLRHangoutsChat_TimeZone;
@class GTLRHangoutsChat_UpdatedWidget;
@class GTLRHangoutsChat_User;
@class GTLRHangoutsChat_UserMentionMetadata;
@class GTLRHangoutsChat_WidgetMarkup;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_AccessSettings.accessState

/**
 *  Access state is unknown or not supported in this API.
 *
 *  Value: "ACCESS_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_AccessSettings_AccessState_AccessStateUnspecified;
/**
 *  A space manager has granted a target audience access to the space. Users or
 *  Google Groups that have been individually added or invited to the space can
 *  also discover and access the space. To learn more, see [Make a space
 *  discoverable to specific
 *  users](https://developers.google.com/workspace/chat/space-target-audience).
 *
 *  Value: "DISCOVERABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_AccessSettings_AccessState_Discoverable;
/**
 *  Only users or Google Groups that have been individually added or invited by
 *  other users or Google Workspace administrators can discover and access the
 *  space.
 *
 *  Value: "PRIVATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_AccessSettings_AccessState_Private;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_ActionResponse.type

/**
 *  Presents a [dialog](https://developers.google.com/workspace/chat/dialogs).
 *
 *  Value: "DIALOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_Dialog;
/**
 *  Post as a new message in the topic.
 *
 *  Value: "NEW_MESSAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_NewMessage;
/**
 *  Privately ask the user for additional authentication or configuration.
 *
 *  Value: "REQUEST_CONFIG"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_RequestConfig;
/**
 *  Default type that's handled as `NEW_MESSAGE`.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_TypeUnspecified;
/**
 *  Update the Chat app's message. This is only permitted on a `CARD_CLICKED`
 *  event where the message sender type is `BOT`.
 *
 *  Value: "UPDATE_MESSAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_UpdateMessage;
/**
 *  Update the cards on a user's message. This is only permitted as a response
 *  to a `MESSAGE` event with a matched url, or a `CARD_CLICKED` event where the
 *  message sender type is `HUMAN`. Text is ignored.
 *
 *  Value: "UPDATE_USER_MESSAGE_CARDS"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_UpdateUserMessageCards;
/**
 *  Widget text autocomplete options query.
 *
 *  Value: "UPDATE_WIDGET"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_UpdateWidget;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_ActionStatus.statusCode

/**
 *  The operation was aborted, typically due to a concurrency issue such as a
 *  sequencer check failure or transaction abort. See the guidelines above for
 *  deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP
 *  Mapping: 409 Conflict
 *
 *  Value: "ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_Aborted;
/**
 *  The entity that a client attempted to create (e.g., file or directory)
 *  already exists. HTTP Mapping: 409 Conflict
 *
 *  Value: "ALREADY_EXISTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_AlreadyExists;
/**
 *  The operation was cancelled, typically by the caller. HTTP Mapping: 499
 *  Client Closed Request
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_Cancelled;
/**
 *  Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server
 *  Error
 *
 *  Value: "DATA_LOSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_DataLoss;
/**
 *  The deadline expired before the operation could complete. For operations
 *  that change the state of the system, this error may be returned even if the
 *  operation has completed successfully. For example, a successful response
 *  from a server could have been delayed long enough for the deadline to
 *  expire. HTTP Mapping: 504 Gateway Timeout
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_DeadlineExceeded;
/**
 *  The operation was rejected because the system is not in a state required for
 *  the operation's execution. For example, the directory to be deleted is
 *  non-empty, an rmdir operation is applied to a non-directory, etc. Service
 *  implementors can use the following guidelines to decide between
 *  `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE`
 *  if the client can retry just the failing call. (b) Use `ABORTED` if the
 *  client should retry at a higher level. For example, when a client-specified
 *  test-and-set fails, indicating the client should restart a read-modify-write
 *  sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until
 *  the system state has been explicitly fixed. For example, if an "rmdir" fails
 *  because the directory is non-empty, `FAILED_PRECONDITION` should be returned
 *  since the client should not retry unless the files are deleted from the
 *  directory. HTTP Mapping: 400 Bad Request
 *
 *  Value: "FAILED_PRECONDITION"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_FailedPrecondition;
/**
 *  Internal errors. This means that some invariants expected by the underlying
 *  system have been broken. This error code is reserved for serious errors.
 *  HTTP Mapping: 500 Internal Server Error
 *
 *  Value: "INTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_Internal;
/**
 *  The client specified an invalid argument. Note that this differs from
 *  `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are
 *  problematic regardless of the state of the system (e.g., a malformed file
 *  name). HTTP Mapping: 400 Bad Request
 *
 *  Value: "INVALID_ARGUMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_InvalidArgument;
/**
 *  Some requested entity (e.g., file or directory) was not found. Note to
 *  server developers: if a request is denied for an entire class of users, such
 *  as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be
 *  used. If a request is denied for some users within a class of users, such as
 *  user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping:
 *  404 Not Found
 *
 *  Value: "NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_NotFound;
/**
 *  Not an error; returned on success. HTTP Mapping: 200 OK
 *
 *  Value: "OK"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_Ok;
/**
 *  The operation was attempted past the valid range. E.g., seeking or reading
 *  past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem
 *  that may be fixed if the system state changes. For example, a 32-bit file
 *  system will generate `INVALID_ARGUMENT` if asked to read at an offset that
 *  is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked
 *  to read from an offset past the current file size. There is a fair bit of
 *  overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using
 *  `OUT_OF_RANGE` (the more specific error) when it applies so that callers who
 *  are iterating through a space can easily look for an `OUT_OF_RANGE` error to
 *  detect when they are done. HTTP Mapping: 400 Bad Request
 *
 *  Value: "OUT_OF_RANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_OutOfRange;
/**
 *  The caller does not have permission to execute the specified operation.
 *  `PERMISSION_DENIED` must not be used for rejections caused by exhausting
 *  some resource (use `RESOURCE_EXHAUSTED` instead for those errors).
 *  `PERMISSION_DENIED` must not be used if the caller can not be identified
 *  (use `UNAUTHENTICATED` instead for those errors). This error code does not
 *  imply the request is valid or the requested entity exists or satisfies other
 *  pre-conditions. HTTP Mapping: 403 Forbidden
 *
 *  Value: "PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_PermissionDenied;
/**
 *  Some resource has been exhausted, perhaps a per-user quota, or perhaps the
 *  entire file system is out of space. HTTP Mapping: 429 Too Many Requests
 *
 *  Value: "RESOURCE_EXHAUSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_ResourceExhausted;
/**
 *  The request does not have valid authentication credentials for the
 *  operation. HTTP Mapping: 401 Unauthorized
 *
 *  Value: "UNAUTHENTICATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_Unauthenticated;
/**
 *  The service is currently unavailable. This is most likely a transient
 *  condition, which can be corrected by retrying with a backoff. Note that it
 *  is not always safe to retry non-idempotent operations. See the guidelines
 *  above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and
 *  `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable
 *
 *  Value: "UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_Unavailable;
/**
 *  The operation is not implemented or is not supported/enabled in this
 *  service. HTTP Mapping: 501 Not Implemented
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_Unimplemented;
/**
 *  Unknown error. For example, this error may be returned when a `Status` value
 *  received from another address space belongs to an error space that is not
 *  known in this address space. Also errors raised by APIs that do not return
 *  enough error information may be converted to this error. HTTP Mapping: 500
 *  Internal Server Error
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_Unknown;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Annotation.type

/**
 *  Default value for the enum. Don't use.
 *
 *  Value: "ANNOTATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Annotation_Type_AnnotationTypeUnspecified;
/**
 *  A rich link annotation.
 *
 *  Value: "RICH_LINK"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Annotation_Type_RichLink;
/**
 *  A slash command is invoked.
 *
 *  Value: "SLASH_COMMAND"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Annotation_Type_SlashCommand;
/**
 *  A user is mentioned.
 *
 *  Value: "USER_MENTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Annotation_Type_UserMention;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Attachment.source

/**
 *  The file is a Google Drive file.
 *
 *  Value: "DRIVE_FILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Attachment_Source_DriveFile;
/**
 *  Reserved.
 *
 *  Value: "SOURCE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Attachment_Source_SourceUnspecified;
/**
 *  The file is uploaded to Chat.
 *
 *  Value: "UPLOADED_CONTENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Attachment_Source_UploadedContent;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_CardHeader.imageStyle

/**
 *  Circular border.
 *
 *  Value: "AVATAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CardHeader_ImageStyle_Avatar;
/**
 *  Square border.
 *
 *  Value: "IMAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CardHeader_ImageStyle_Image;
/** Value: "IMAGE_STYLE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CardHeader_ImageStyle_ImageStyleUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_CommonEventObject.hostApp

/**
 *  The add-on launches from Google Calendar.
 *
 *  Value: "CALENDAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Calendar;
/**
 *  A Google Chat app. Not used for Google Workspace Add-ons.
 *
 *  Value: "CHAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Chat;
/**
 *  Not used.
 *
 *  Value: "DEMO"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Demo;
/**
 *  The add-on launches from Google Docs.
 *
 *  Value: "DOCS"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Docs;
/**
 *  The add-on launches from Google Drawings.
 *
 *  Value: "DRAWINGS"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Drawings;
/**
 *  The add-on launches from Google Drive.
 *
 *  Value: "DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Drive;
/**
 *  The add-on launches from Gmail.
 *
 *  Value: "GMAIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Gmail;
/**
 *  The add-on launches from Google Meet.
 *
 *  Value: "MEET"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Meet;
/**
 *  The add-on launches from Google Sheets.
 *
 *  Value: "SHEETS"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Sheets;
/**
 *  The add-on launches from Google Slides.
 *
 *  Value: "SLIDES"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Slides;
/**
 *  Google can't identify a host app.
 *
 *  Value: "UNSPECIFIED_HOST_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_UnspecifiedHostApp;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_CommonEventObject.platform

/** Value: "ANDROID" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_Platform_Android;
/** Value: "IOS" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_Platform_Ios;
/** Value: "UNKNOWN_PLATFORM" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_Platform_UnknownPlatform;
/** Value: "WEB" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_Platform_Web;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_DeletionMetadata.deletionType

/**
 *  A Google Workspace admin deleted the message.
 *
 *  Value: "ADMIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeletionMetadata_DeletionType_Admin;
/**
 *  A Chat app deleted its own message when it expired.
 *
 *  Value: "APP_MESSAGE_EXPIRY"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeletionMetadata_DeletionType_AppMessageExpiry;
/**
 *  User deleted their own message.
 *
 *  Value: "CREATOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeletionMetadata_DeletionType_Creator;
/**
 *  A Chat app deleted the message on behalf of the user.
 *
 *  Value: "CREATOR_VIA_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeletionMetadata_DeletionType_CreatorViaApp;
/**
 *  This value is unused.
 *
 *  Value: "DELETION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeletionMetadata_DeletionType_DeletionTypeUnspecified;
/**
 *  The space owner deleted the message.
 *
 *  Value: "SPACE_OWNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeletionMetadata_DeletionType_SpaceOwner;
/**
 *  A Chat app deleted the message on behalf of the space owner.
 *
 *  Value: "SPACE_OWNER_VIA_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeletionMetadata_DeletionType_SpaceOwnerViaApp;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_DeprecatedEvent.dialogEventType

/**
 *  A user closes a dialog without submitting information, or the dialog is
 *  canceled.
 *
 *  Value: "CANCEL_DIALOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_DialogEventType_CancelDialog;
/**
 *  A user opens a dialog.
 *
 *  Value: "REQUEST_DIALOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_DialogEventType_RequestDialog;
/**
 *  A user clicks an interactive element of a dialog. For example, a user fills
 *  out information in a dialog and clicks a button to submit the information.
 *
 *  Value: "SUBMIT_DIALOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_DialogEventType_SubmitDialog;
/**
 *  Default value. Unspecified.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_DialogEventType_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_DeprecatedEvent.type

/**
 *  A user adds the Chat app to a space, or a Google Workspace administrator
 *  installs the Chat app in direct message spaces for users in their
 *  organization. Chat apps typically respond to this interaction event by
 *  posting a welcome message in the space. When administrators install Chat
 *  apps, the `space.adminInstalled` field is set to `true` and users can't
 *  uninstall them. To learn about Chat apps installed by administrators, see
 *  Google Workspace Admin Help's documentation, [Install Marketplace apps in
 *  your domain](https://support.google.com/a/answer/172482).
 *
 *  Value: "ADDED_TO_SPACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_Type_AddedToSpace;
/**
 *  A user clicks an interactive element of a card or dialog from a Chat app,
 *  such as a button. To receive an interaction event, the button must trigger
 *  another interaction with the Chat app. For example, a Chat app doesn't
 *  receive a `CARD_CLICKED` interaction event if a user clicks a button that
 *  opens a link to a website, but receives interaction events in the following
 *  examples: * The user clicks a `Send feedback` button on a card, which opens
 *  a dialog for the user to input information. * The user clicks a `Submit`
 *  button after inputting information into a card or dialog. If a user clicks a
 *  button to open, submit, or cancel a dialog, the `CARD_CLICKED` interaction
 *  event's `isDialogEvent` field is set to `true` and includes a
 *  [`DialogEventType`](https://developers.google.com/workspace/chat/api/reference/rest/v1/DialogEventType).
 *
 *  Value: "CARD_CLICKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_Type_CardClicked;
/**
 *  A user sends the Chat app a message, or invokes the Chat app in a space,
 *  such as any of the following examples: * Any message in a direct message
 *  (DM) space with the Chat app. * A message in a multi-person space where a
 *  person \@mentions the Chat app, or uses one of its slash commands. * If
 *  you've configured link previews for your Chat app, a user posts a message
 *  that contains a link that matches the configured URL pattern.
 *
 *  Value: "MESSAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_Type_Message;
/**
 *  A user removes the Chat app from a space, or a Google Workspace
 *  administrator uninstalls the Chat app for a user in their organization. Chat
 *  apps can't respond with messages to this event, because they have already
 *  been removed. When administrators uninstall Chat apps, the
 *  `space.adminInstalled` field is set to `false`. If a user installed the Chat
 *  app before the administrator, the Chat app remains installed for the user
 *  and the Chat app doesn't receive a `REMOVED_FROM_SPACE` interaction event.
 *
 *  Value: "REMOVED_FROM_SPACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_Type_RemovedFromSpace;
/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_Type_Unspecified;
/**
 *  A user updates a widget in a card message or dialog.
 *
 *  Value: "WIDGET_UPDATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_Type_WidgetUpdated;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Action.interaction

/**
 *  Default value. The `action` executes as normal.
 *
 *  Value: "INTERACTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Action_Interaction_InteractionUnspecified;
/**
 *  Opens a [dialog](https://developers.google.com/workspace/chat/dialogs), a
 *  windowed, card-based interface that Chat apps use to interact with users.
 *  Only supported by Chat apps in response to button-clicks on card messages.
 *  If specified for an add-on, the entire card is stripped and nothing is shown
 *  in the client. [Google Chat
 *  apps](https://developers.google.com/workspace/chat):
 *
 *  Value: "OPEN_DIALOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Action_Interaction_OpenDialog;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Action.loadIndicator

/**
 *  Nothing is displayed.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Action_LoadIndicator_None;
/**
 *  Displays a spinner to indicate that content is loading.
 *
 *  Value: "SPINNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Action_LoadIndicator_Spinner;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1BorderStyle.type

/**
 *  Don't use. Unspecified.
 *
 *  Value: "BORDER_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_BorderTypeUnspecified;
/**
 *  Default value. No border.
 *
 *  Value: "NO_BORDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_NoBorder;
/**
 *  Outline.
 *
 *  Value: "STROKE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_Stroke;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Card.displayStyle

/**
 *  Don't use. Unspecified.
 *
 *  Value: "DISPLAY_STYLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_DisplayStyleUnspecified;
/**
 *  The header of the card appears at the bottom of the sidebar, partially
 *  covering the current top card of the stack. Clicking the header pops the
 *  card into the card stack. If the card has no header, a generated header is
 *  used instead.
 *
 *  Value: "PEEK"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_Peek;
/**
 *  Default value. The card is shown by replacing the view of the top card in
 *  the card stack.
 *
 *  Value: "REPLACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_Replace;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Card.sectionDividerStyle

/**
 *  Don't use. Unspecified.
 *
 *  Value: "DIVIDER_STYLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Card_SectionDividerStyle_DividerStyleUnspecified;
/**
 *  If set, no divider is rendered. This style completely removes the divider
 *  from the layout. The result is equivalent to not adding a divider at all.
 *
 *  Value: "NO_DIVIDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Card_SectionDividerStyle_NoDivider;
/**
 *  Default option. Render a solid divider.
 *
 *  Value: "SOLID_DIVIDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Card_SectionDividerStyle_SolidDivider;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1CardHeader.imageType

/**
 *  Applies a circular mask to the image. For example, a 4x3 image becomes a
 *  circle with a diameter of 3.
 *
 *  Value: "CIRCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1CardHeader_ImageType_Circle;
/**
 *  Default value. Applies a square mask to the image. For example, a 4x3 image
 *  becomes 3x3.
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1CardHeader_ImageType_Square;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Column.horizontalAlignment

/**
 *  Aligns widgets to the center of the column.
 *
 *  Value: "CENTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Column_HorizontalAlignment_Center;
/**
 *  Aligns widgets to the end position of the column. For left-to-right layouts,
 *  aligns widgets to the right. For right-to-left layouts, aligns widgets to
 *  the left.
 *
 *  Value: "END"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Column_HorizontalAlignment_End;
/**
 *  Don't use. Unspecified.
 *
 *  Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Column_HorizontalAlignment_HorizontalAlignmentUnspecified;
/**
 *  Default value. Aligns widgets to the start position of the column. For
 *  left-to-right layouts, aligns to the left. For right-to-left layouts, aligns
 *  to the right.
 *
 *  Value: "START"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Column_HorizontalAlignment_Start;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Column.horizontalSizeStyle

/**
 *  Default value. Column fills the available space, up to 70% of the card's
 *  width. If both columns are set to `FILL_AVAILABLE_SPACE`, each column fills
 *  50% of the space.
 *
 *  Value: "FILL_AVAILABLE_SPACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Column_HorizontalSizeStyle_FillAvailableSpace;
/**
 *  Column fills the least amount of space possible and no more than 30% of the
 *  card's width.
 *
 *  Value: "FILL_MINIMUM_SPACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Column_HorizontalSizeStyle_FillMinimumSpace;
/**
 *  Don't use. Unspecified.
 *
 *  Value: "HORIZONTAL_SIZE_STYLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Column_HorizontalSizeStyle_HorizontalSizeStyleUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Column.verticalAlignment

/**
 *  Aligns widgets to the bottom of a column.
 *
 *  Value: "BOTTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Column_VerticalAlignment_Bottom;
/**
 *  Default value. Aligns widgets to the center of a column.
 *
 *  Value: "CENTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Column_VerticalAlignment_Center;
/**
 *  Aligns widgets to the top of a column.
 *
 *  Value: "TOP"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Column_VerticalAlignment_Top;
/**
 *  Don't use. Unspecified.
 *
 *  Value: "VERTICAL_ALIGNMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Column_VerticalAlignment_VerticalAlignmentUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1DateTimePicker.type

/**
 *  Users input a date and time.
 *
 *  Value: "DATE_AND_TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_DateAndTime;
/**
 *  Users input a date.
 *
 *  Value: "DATE_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_DateOnly;
/**
 *  Users input a time.
 *
 *  Value: "TIME_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_TimeOnly;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1GridItem.layout

/**
 *  Don't use. Unspecified.
 *
 *  Value: "GRID_ITEM_LAYOUT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_GridItemLayoutUnspecified;
/**
 *  The title and subtitle are shown above the grid item's image.
 *
 *  Value: "TEXT_ABOVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_TextAbove;
/**
 *  The title and subtitle are shown below the grid item's image.
 *
 *  Value: "TEXT_BELOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_TextBelow;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Icon.imageType

/**
 *  Applies a circular mask to the image. For example, a 4x3 image becomes a
 *  circle with a diameter of 3.
 *
 *  Value: "CIRCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Icon_ImageType_Circle;
/**
 *  Default value. Applies a square mask to the image. For example, a 4x3 image
 *  becomes 3x3.
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Icon_ImageType_Square;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle.type

/**
 *  Applies a circular crop.
 *
 *  Value: "CIRCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Circle;
/**
 *  Don't use. Unspecified.
 *
 *  Value: "IMAGE_CROP_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_ImageCropTypeUnspecified;
/**
 *  Applies a rectangular crop with a 4:3 aspect ratio.
 *
 *  Value: "RECTANGLE_4_3"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Rectangle43;
/**
 *  Applies a rectangular crop with a custom aspect ratio. Set the custom aspect
 *  ratio with `aspectRatio`.
 *
 *  Value: "RECTANGLE_CUSTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_RectangleCustom;
/**
 *  Default value. Applies a square crop.
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Square;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1OpenLink.onClose

/**
 *  Default value. The card doesn't reload; nothing happens.
 *
 *  Value: "NOTHING"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OnClose_Nothing;
/**
 *  Reloads the card after the child window closes. If used in conjunction with
 *  [`OpenAs.OVERLAY`](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#openas),
 *  the child window acts as a modal dialog and the parent card is blocked until
 *  the child window closes.
 *
 *  Value: "RELOAD"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OnClose_Reload;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1OpenLink.openAs

/**
 *  The link opens as a full-size window (if that's the frame used by the
 *  client).
 *
 *  Value: "FULL_SIZE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OpenAs_FullSize;
/**
 *  The link opens as an overlay, such as a pop-up.
 *
 *  Value: "OVERLAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OpenAs_Overlay;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1PlatformDataSource.commonDataSource

/**
 *  Default value. Don't use.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1PlatformDataSource_CommonDataSource_Unknown;
/**
 *  Google Workspace users. The user can only view and select users from their
 *  Google Workspace organization.
 *
 *  Value: "USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1PlatformDataSource_CommonDataSource_User;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1SelectionInput.type

/**
 *  A set of checkboxes. Users can select one or more checkboxes.
 *
 *  Value: "CHECK_BOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_CheckBox;
/**
 *  A dropdown menu. Users can select one item from the menu.
 *
 *  Value: "DROPDOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_Dropdown;
/**
 *  A multiselect menu for static or dynamic data. From the menu bar, users
 *  select one or more items. Users can also input values to populate dynamic
 *  data. For example, users can start typing the name of a Google Chat space
 *  and the widget autosuggests the space. To populate items for a multiselect
 *  menu, you can use one of the following types of data sources: * Static data:
 *  Items are specified as `SelectionItem` objects in the widget. Up to 100
 *  items. * Google Workspace data: Items are populated using data from Google
 *  Workspace, such as Google Workspace users or Google Chat spaces. * External
 *  data: Items are populated from an external data source outside of Google
 *  Workspace. For examples of how to implement multiselect menus, see [Add a
 *  multiselect
 *  menu](https://developers.google.com/workspace/chat/design-interactive-card-dialog#multiselect-menu).
 *  [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 *
 *  Value: "MULTI_SELECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_MultiSelect;
/**
 *  A set of radio buttons. Users can select one radio button.
 *
 *  Value: "RADIO_BUTTON"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_RadioButton;
/**
 *  A set of switches. Users can turn on one or more switches.
 *
 *  Value: "SWITCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_Switch;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1SwitchControl.controlType

/**
 *  Deprecated in favor of `CHECK_BOX`.
 *
 *  Value: "CHECKBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_Checkbox;
/**
 *  A checkbox.
 *
 *  Value: "CHECK_BOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_CheckBox;
/**
 *  A toggle-style switch.
 *
 *  Value: "SWITCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_Switch;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1TextInput.type

/**
 *  The text input field has a fixed height of multiple lines.
 *
 *  Value: "MULTIPLE_LINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1TextInput_Type_MultipleLine;
/**
 *  The text input field has a fixed height of one line.
 *
 *  Value: "SINGLE_LINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1TextInput_Type_SingleLine;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Widget.horizontalAlignment

/**
 *  Aligns widgets to the center of the column.
 *
 *  Value: "CENTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_Center;
/**
 *  Aligns widgets to the end position of the column. For left-to-right layouts,
 *  aligns widgets to the right. For right-to-left layouts, aligns widgets to
 *  the left.
 *
 *  Value: "END"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_End;
/**
 *  Don't use. Unspecified.
 *
 *  Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_HorizontalAlignmentUnspecified;
/**
 *  Default value. Aligns widgets to the start position of the column. For
 *  left-to-right layouts, aligns to the left. For right-to-left layouts, aligns
 *  to the right.
 *
 *  Value: "START"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_Start;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_ImageButton.icon

/** Value: "AIRPLANE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Airplane;
/** Value: "BOOKMARK" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Bookmark;
/** Value: "BUS" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Bus;
/** Value: "CAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Car;
/** Value: "CLOCK" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Clock;
/** Value: "CONFIRMATION_NUMBER_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_ConfirmationNumberIcon;
/** Value: "DESCRIPTION" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Description;
/** Value: "DOLLAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Dollar;
/** Value: "EMAIL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Email;
/** Value: "EVENT_PERFORMER" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_EventPerformer;
/** Value: "EVENT_SEAT" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_EventSeat;
/** Value: "FLIGHT_ARRIVAL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_FlightArrival;
/** Value: "FLIGHT_DEPARTURE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_FlightDeparture;
/** Value: "HOTEL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Hotel;
/** Value: "HOTEL_ROOM_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_HotelRoomType;
/** Value: "ICON_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_IconUnspecified;
/** Value: "INVITE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Invite;
/** Value: "MAP_PIN" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_MapPin;
/** Value: "MEMBERSHIP" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Membership;
/** Value: "MULTIPLE_PEOPLE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_MultiplePeople;
/** Value: "OFFER" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Offer;
/** Value: "PERSON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Person;
/** Value: "PHONE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Phone;
/** Value: "RESTAURANT_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_RestaurantIcon;
/** Value: "SHOPPING_CART" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_ShoppingCart;
/** Value: "STAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Star;
/** Value: "STORE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Store;
/** Value: "TICKET" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Ticket;
/** Value: "TRAIN" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Train;
/** Value: "VIDEO_CAMERA" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_VideoCamera;
/** Value: "VIDEO_PLAY" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_VideoPlay;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_KeyValue.icon

/** Value: "AIRPLANE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Airplane;
/** Value: "BOOKMARK" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Bookmark;
/** Value: "BUS" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Bus;
/** Value: "CAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Car;
/** Value: "CLOCK" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Clock;
/** Value: "CONFIRMATION_NUMBER_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_ConfirmationNumberIcon;
/** Value: "DESCRIPTION" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Description;
/** Value: "DOLLAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Dollar;
/** Value: "EMAIL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Email;
/** Value: "EVENT_PERFORMER" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_EventPerformer;
/** Value: "EVENT_SEAT" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_EventSeat;
/** Value: "FLIGHT_ARRIVAL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_FlightArrival;
/** Value: "FLIGHT_DEPARTURE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_FlightDeparture;
/** Value: "HOTEL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Hotel;
/** Value: "HOTEL_ROOM_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_HotelRoomType;
/** Value: "ICON_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_IconUnspecified;
/** Value: "INVITE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Invite;
/** Value: "MAP_PIN" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_MapPin;
/** Value: "MEMBERSHIP" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Membership;
/** Value: "MULTIPLE_PEOPLE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_MultiplePeople;
/** Value: "OFFER" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Offer;
/** Value: "PERSON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Person;
/** Value: "PHONE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Phone;
/** Value: "RESTAURANT_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_RestaurantIcon;
/** Value: "SHOPPING_CART" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_ShoppingCart;
/** Value: "STAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Star;
/** Value: "STORE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Store;
/** Value: "TICKET" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Ticket;
/** Value: "TRAIN" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Train;
/** Value: "VIDEO_CAMERA" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_VideoCamera;
/** Value: "VIDEO_PLAY" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_VideoPlay;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Membership.role

/**
 *  Default value. For users: they aren't a member of the space, but can be
 *  invited. For Google Groups: they're always assigned this role (other enum
 *  values might be used in the future).
 *
 *  Value: "MEMBERSHIP_ROLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_Role_MembershipRoleUnspecified;
/**
 *  A space manager. The user has all basic permissions plus administrative
 *  permissions that let them manage the space, like adding or removing members.
 *  Only supported in SpaceType.SPACE.
 *
 *  Value: "ROLE_MANAGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_Role_RoleManager;
/**
 *  A member of the space. The user has basic permissions, like sending messages
 *  to the space. In 1:1 and unnamed group conversations, everyone has this
 *  role.
 *
 *  Value: "ROLE_MEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_Role_RoleMember;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Membership.state

/**
 *  The user is invited to join the space, but hasn't joined it.
 *
 *  Value: "INVITED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_State_Invited;
/**
 *  The user is added to the space, and can participate in the space.
 *
 *  Value: "JOINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_State_Joined;
/**
 *  Default value. Don't use.
 *
 *  Value: "MEMBERSHIP_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_State_MembershipStateUnspecified;
/**
 *  The user doesn't belong to the space and doesn't have a pending invitation
 *  to join the space.
 *
 *  Value: "NOT_A_MEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_State_NotAMember;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_RichLinkMetadata.richLinkType

/**
 *  A Chat space rich link type. For example, a space smart chip.
 *
 *  Value: "CHAT_SPACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_RichLinkMetadata_RichLinkType_ChatSpace;
/**
 *  A Google Drive rich link type.
 *
 *  Value: "DRIVE_FILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_RichLinkMetadata_RichLinkType_DriveFile;
/**
 *  Default value for the enum. Don't use.
 *
 *  Value: "RICH_LINK_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_RichLinkMetadata_RichLinkType_RichLinkTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_SlashCommandMetadata.type

/**
 *  Add Chat app to space.
 *
 *  Value: "ADD"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_SlashCommandMetadata_Type_Add;
/**
 *  Invoke slash command in space.
 *
 *  Value: "INVOKE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_SlashCommandMetadata_Type_Invoke;
/**
 *  Default value for the enum. Don't use.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_SlashCommandMetadata_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Space.spaceHistoryState

/**
 *  History off. [Messages and threads are kept for 24
 *  hours](https://support.google.com/chat/answer/7664687).
 *
 *  Value: "HISTORY_OFF"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_SpaceHistoryState_HistoryOff;
/**
 *  History on. The organization's [Vault retention
 *  rules](https://support.google.com/vault/answer/7657597) specify for how long
 *  messages and threads are kept.
 *
 *  Value: "HISTORY_ON"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_SpaceHistoryState_HistoryOn;
/**
 *  Default value. Do not use.
 *
 *  Value: "HISTORY_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_SpaceHistoryState_HistoryStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Space.spaceThreadingState

/**
 *  Named spaces where the conversation is organized by topic. Topics and their
 *  replies are grouped together.
 *
 *  Value: "GROUPED_MESSAGES"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_SpaceThreadingState_GroupedMessages;
/**
 *  Reserved.
 *
 *  Value: "SPACE_THREADING_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_SpaceThreadingState_SpaceThreadingStateUnspecified;
/**
 *  Named spaces that support message threads. When users respond to a message,
 *  they can reply in-thread, which keeps their response in the context of the
 *  original message.
 *
 *  Value: "THREADED_MESSAGES"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_SpaceThreadingState_ThreadedMessages;
/**
 *  Direct messages (DMs) between two people and group conversations between 3
 *  or more people.
 *
 *  Value: "UNTHREADED_MESSAGES"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_SpaceThreadingState_UnthreadedMessages;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Space.spaceType

/**
 *  1:1 messages between two humans or a human and a Chat app.
 *
 *  Value: "DIRECT_MESSAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_SpaceType_DirectMessage;
/**
 *  Group conversations between 3 or more people. A `GROUP_CHAT` can include
 *  Chat apps.
 *
 *  Value: "GROUP_CHAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_SpaceType_GroupChat;
/**
 *  A place where people send messages, share files, and collaborate. A `SPACE`
 *  can include Chat apps.
 *
 *  Value: "SPACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_SpaceType_Space;
/**
 *  Reserved.
 *
 *  Value: "SPACE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_SpaceType_SpaceTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Space.type

/**
 *  1:1 Direct Message between a human and a Chat app, where all messages are
 *  flat. Note that this doesn't include direct messages between two humans.
 *
 *  Value: "DM"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_Type_Dm;
/**
 *  Conversations between two or more humans.
 *
 *  Value: "ROOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_Type_Room;
/**
 *  Reserved.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_User.type

/**
 *  Chat app user.
 *
 *  Value: "BOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_User_Type_Bot;
/**
 *  Human user.
 *
 *  Value: "HUMAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_User_Type_Human;
/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_User_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_UserMentionMetadata.type

/**
 *  Add user to space.
 *
 *  Value: "ADD"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_UserMentionMetadata_Type_Add;
/**
 *  Mention user in space.
 *
 *  Value: "MENTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_UserMentionMetadata_Type_Mention;
/**
 *  Default value for the enum. Don't use.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_UserMentionMetadata_Type_TypeUnspecified;

/**
 *  One or more interactive widgets that appear at the bottom of a message. For
 *  details, see [Add interactive widgets at the bottom of a
 *  message](https://developers.google.com/workspace/chat/create-messages#add-accessory-widgets).
 */
@interface GTLRHangoutsChat_AccessoryWidget : GTLRObject

/** A list of buttons. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1ButtonList *buttonList;

@end


/**
 *  Represents the [access
 *  setting](https://support.google.com/chat/answer/11971020) of the space.
 */
@interface GTLRHangoutsChat_AccessSettings : GTLRObject

/**
 *  Output only. Indicates the access state of the space.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_AccessSettings_AccessState_AccessStateUnspecified
 *        Access state is unknown or not supported in this API. (Value:
 *        "ACCESS_STATE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_AccessSettings_AccessState_Discoverable A space
 *        manager has granted a target audience access to the space. Users or
 *        Google Groups that have been individually added or invited to the
 *        space can also discover and access the space. To learn more, see [Make
 *        a space discoverable to specific
 *        users](https://developers.google.com/workspace/chat/space-target-audience).
 *        (Value: "DISCOVERABLE")
 *    @arg @c kGTLRHangoutsChat_AccessSettings_AccessState_Private Only users or
 *        Google Groups that have been individually added or invited by other
 *        users or Google Workspace administrators can discover and access the
 *        space. (Value: "PRIVATE")
 */
@property(nonatomic, copy, nullable) NSString *accessState;

/**
 *  Optional. The resource name of the [target
 *  audience](https://support.google.com/a/answer/9934697) who can discover the
 *  space, join the space, and preview the messages in the space. If unset, only
 *  users or Google Groups who have been individually invited or added to the
 *  space can access it. For details, see [Make a space discoverable to a target
 *  audience](https://developers.google.com/workspace/chat/space-target-audience).
 *  Format: `audiences/{audience}` To use the default target audience for the
 *  Google Workspace organization, set to `audiences/default`. This field is not
 *  populated when using the `chat.bot` scope with [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
 */
@property(nonatomic, copy, nullable) NSString *audience;

@end


/**
 *  List of string parameters to supply when the action method is invoked. For
 *  example, consider three snooze buttons: snooze now, snooze one day, snooze
 *  next week. You might use `action method = snooze()`, passing the snooze type
 *  and snooze time in the list of string parameters.
 */
@interface GTLRHangoutsChat_ActionParameter : GTLRObject

/** The name of the parameter for the action script. */
@property(nonatomic, copy, nullable) NSString *key;

/** The value of the parameter. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Parameters that a Chat app can use to configure how its response is posted.
 */
@interface GTLRHangoutsChat_ActionResponse : GTLRObject

/**
 *  Input only. A response to an interaction event related to a
 *  [dialog](https://developers.google.com/workspace/chat/dialogs). Must be
 *  accompanied by `ResponseType.Dialog`.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_DialogAction *dialogAction;

/**
 *  Input only. The type of Chat app response.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_Dialog Presents a
 *        [dialog](https://developers.google.com/workspace/chat/dialogs).
 *        (Value: "DIALOG")
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_NewMessage Post as a new
 *        message in the topic. (Value: "NEW_MESSAGE")
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_RequestConfig Privately ask
 *        the user for additional authentication or configuration. (Value:
 *        "REQUEST_CONFIG")
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_TypeUnspecified Default type
 *        that's handled as `NEW_MESSAGE`. (Value: "TYPE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_UpdateMessage Update the
 *        Chat app's message. This is only permitted on a `CARD_CLICKED` event
 *        where the message sender type is `BOT`. (Value: "UPDATE_MESSAGE")
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_UpdateUserMessageCards
 *        Update the cards on a user's message. This is only permitted as a
 *        response to a `MESSAGE` event with a matched url, or a `CARD_CLICKED`
 *        event where the message sender type is `HUMAN`. Text is ignored.
 *        (Value: "UPDATE_USER_MESSAGE_CARDS")
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_UpdateWidget Widget text
 *        autocomplete options query. (Value: "UPDATE_WIDGET")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** Input only. The response of the updated widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_UpdatedWidget *updatedWidget;

/**
 *  Input only. URL for users to authenticate or configure. (Only for
 *  `REQUEST_CONFIG` response types.)
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Represents the status for a request to either invoke or submit a
 *  [dialog](https://developers.google.com/workspace/chat/dialogs).
 */
@interface GTLRHangoutsChat_ActionStatus : GTLRObject

/**
 *  The status code.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_Aborted The operation
 *        was aborted, typically due to a concurrency issue such as a sequencer
 *        check failure or transaction abort. See the guidelines above for
 *        deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`.
 *        HTTP Mapping: 409 Conflict (Value: "ABORTED")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_AlreadyExists The entity
 *        that a client attempted to create (e.g., file or directory) already
 *        exists. HTTP Mapping: 409 Conflict (Value: "ALREADY_EXISTS")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_Cancelled The operation
 *        was cancelled, typically by the caller. HTTP Mapping: 499 Client
 *        Closed Request (Value: "CANCELLED")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_DataLoss Unrecoverable
 *        data loss or corruption. HTTP Mapping: 500 Internal Server Error
 *        (Value: "DATA_LOSS")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_DeadlineExceeded The
 *        deadline expired before the operation could complete. For operations
 *        that change the state of the system, this error may be returned even
 *        if the operation has completed successfully. For example, a successful
 *        response from a server could have been delayed long enough for the
 *        deadline to expire. HTTP Mapping: 504 Gateway Timeout (Value:
 *        "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_FailedPrecondition The
 *        operation was rejected because the system is not in a state required
 *        for the operation's execution. For example, the directory to be
 *        deleted is non-empty, an rmdir operation is applied to a
 *        non-directory, etc. Service implementors can use the following
 *        guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and
 *        `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the
 *        failing call. (b) Use `ABORTED` if the client should retry at a higher
 *        level. For example, when a client-specified test-and-set fails,
 *        indicating the client should restart a read-modify-write sequence. (c)
 *        Use `FAILED_PRECONDITION` if the client should not retry until the
 *        system state has been explicitly fixed. For example, if an "rmdir"
 *        fails because the directory is non-empty, `FAILED_PRECONDITION` should
 *        be returned since the client should not retry unless the files are
 *        deleted from the directory. HTTP Mapping: 400 Bad Request (Value:
 *        "FAILED_PRECONDITION")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_Internal Internal
 *        errors. This means that some invariants expected by the underlying
 *        system have been broken. This error code is reserved for serious
 *        errors. HTTP Mapping: 500 Internal Server Error (Value: "INTERNAL")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_InvalidArgument The
 *        client specified an invalid argument. Note that this differs from
 *        `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are
 *        problematic regardless of the state of the system (e.g., a malformed
 *        file name). HTTP Mapping: 400 Bad Request (Value: "INVALID_ARGUMENT")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_NotFound Some requested
 *        entity (e.g., file or directory) was not found. Note to server
 *        developers: if a request is denied for an entire class of users, such
 *        as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may
 *        be used. If a request is denied for some users within a class of
 *        users, such as user-based access control, `PERMISSION_DENIED` must be
 *        used. HTTP Mapping: 404 Not Found (Value: "NOT_FOUND")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_Ok Not an error;
 *        returned on success. HTTP Mapping: 200 OK (Value: "OK")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_OutOfRange The operation
 *        was attempted past the valid range. E.g., seeking or reading past
 *        end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem
 *        that may be fixed if the system state changes. For example, a 32-bit
 *        file system will generate `INVALID_ARGUMENT` if asked to read at an
 *        offset that is not in the range [0,2^32-1], but it will generate
 *        `OUT_OF_RANGE` if asked to read from an offset past the current file
 *        size. There is a fair bit of overlap between `FAILED_PRECONDITION` and
 *        `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific
 *        error) when it applies so that callers who are iterating through a
 *        space can easily look for an `OUT_OF_RANGE` error to detect when they
 *        are done. HTTP Mapping: 400 Bad Request (Value: "OUT_OF_RANGE")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_PermissionDenied The
 *        caller does not have permission to execute the specified operation.
 *        `PERMISSION_DENIED` must not be used for rejections caused by
 *        exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those
 *        errors). `PERMISSION_DENIED` must not be used if the caller can not be
 *        identified (use `UNAUTHENTICATED` instead for those errors). This
 *        error code does not imply the request is valid or the requested entity
 *        exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden
 *        (Value: "PERMISSION_DENIED")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_ResourceExhausted Some
 *        resource has been exhausted, perhaps a per-user quota, or perhaps the
 *        entire file system is out of space. HTTP Mapping: 429 Too Many
 *        Requests (Value: "RESOURCE_EXHAUSTED")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_Unauthenticated The
 *        request does not have valid authentication credentials for the
 *        operation. HTTP Mapping: 401 Unauthorized (Value: "UNAUTHENTICATED")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_Unavailable The service
 *        is currently unavailable. This is most likely a transient condition,
 *        which can be corrected by retrying with a backoff. Note that it is not
 *        always safe to retry non-idempotent operations. See the guidelines
 *        above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and
 *        `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable (Value:
 *        "UNAVAILABLE")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_Unimplemented The
 *        operation is not implemented or is not supported/enabled in this
 *        service. HTTP Mapping: 501 Not Implemented (Value: "UNIMPLEMENTED")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_Unknown Unknown error.
 *        For example, this error may be returned when a `Status` value received
 *        from another address space belongs to an error space that is not known
 *        in this address space. Also errors raised by APIs that do not return
 *        enough error information may be converted to this error. HTTP Mapping:
 *        500 Internal Server Error (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *statusCode;

/**
 *  The message to send users about the status of their request. If unset, a
 *  generic message based on the `status_code` is sent.
 */
@property(nonatomic, copy, nullable) NSString *userFacingMessage;

@end


/**
 *  Output only. Annotations associated with the plain-text body of the message.
 *  To add basic formatting to a text message, see [Format text
 *  messages](https://developers.google.com/workspace/chat/format-messages).
 *  Example plain-text message body: ``` Hello \@FooBot how are you!" ``` The
 *  corresponding annotations metadata: ``` "annotations":[{
 *  "type":"USER_MENTION", "startIndex":6, "length":7, "userMention": { "user":
 *  { "name":"users/{user}", "displayName":"FooBot",
 *  "avatarUrl":"https://goo.gl/aeDtrS", "type":"BOT" }, "type":"MENTION" } }]
 *  ```
 */
@interface GTLRHangoutsChat_Annotation : GTLRObject

/**
 *  Length of the substring in the plain-text message body this annotation
 *  corresponds to.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/** The metadata for a rich link. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_RichLinkMetadata *richLinkMetadata;

/** The metadata for a slash command. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_SlashCommandMetadata *slashCommand;

/**
 *  Start index (0-based, inclusive) in the plain-text message body this
 *  annotation corresponds to.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startIndex;

/**
 *  The type of this annotation.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Annotation_Type_AnnotationTypeUnspecified
 *        Default value for the enum. Don't use. (Value:
 *        "ANNOTATION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_Annotation_Type_RichLink A rich link annotation.
 *        (Value: "RICH_LINK")
 *    @arg @c kGTLRHangoutsChat_Annotation_Type_SlashCommand A slash command is
 *        invoked. (Value: "SLASH_COMMAND")
 *    @arg @c kGTLRHangoutsChat_Annotation_Type_UserMention A user is mentioned.
 *        (Value: "USER_MENTION")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The metadata of user mention. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_UserMentionMetadata *userMention;

@end


/**
 *  A GIF image that's specified by a URL.
 */
@interface GTLRHangoutsChat_AttachedGif : GTLRObject

/** Output only. The URL that hosts the GIF image. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  An attachment in Google Chat.
 */
@interface GTLRHangoutsChat_Attachment : GTLRObject

/**
 *  A reference to the attachment data. This field is used with the media API to
 *  download the attachment data.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_AttachmentDataRef *attachmentDataRef;

/** Output only. The original file name for the content, not the full path. */
@property(nonatomic, copy, nullable) NSString *contentName;

/** Output only. The content type (MIME type) of the file. */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  Output only. The download URL which should be used to allow a human user to
 *  download the attachment. Chat apps shouldn't use this URL to download
 *  attachment content.
 */
@property(nonatomic, copy, nullable) NSString *downloadUri;

/**
 *  Output only. A reference to the Google Drive attachment. This field is used
 *  with the Google Drive API.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_DriveDataRef *driveDataRef;

/**
 *  Resource name of the attachment, in the form
 *  `spaces/{space}/messages/{message}/attachments/{attachment}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The source of the attachment.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Attachment_Source_DriveFile The file is a Google
 *        Drive file. (Value: "DRIVE_FILE")
 *    @arg @c kGTLRHangoutsChat_Attachment_Source_SourceUnspecified Reserved.
 *        (Value: "SOURCE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_Attachment_Source_UploadedContent The file is
 *        uploaded to Chat. (Value: "UPLOADED_CONTENT")
 */
@property(nonatomic, copy, nullable) NSString *source;

/**
 *  Output only. The thumbnail URL which should be used to preview the
 *  attachment to a human user. Chat apps shouldn't use this URL to download
 *  attachment content.
 */
@property(nonatomic, copy, nullable) NSString *thumbnailUri;

@end


/**
 *  A reference to the attachment data.
 */
@interface GTLRHangoutsChat_AttachmentDataRef : GTLRObject

/**
 *  Opaque token containing a reference to an uploaded attachment. Treated by
 *  clients as an opaque string and used to create or update Chat messages with
 *  attachments.
 */
@property(nonatomic, copy, nullable) NSString *attachmentUploadToken;

/**
 *  The resource name of the attachment data. This field is used with the media
 *  API to download the attachment data.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end


/**
 *  A button. Can be a text button or an image button.
 */
@interface GTLRHangoutsChat_Button : GTLRObject

/** A button with image and `onclick` action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_ImageButton *imageButton;

/** A button with text and `onclick` action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_TextButton *textButton;

@end


/**
 *  A card is a UI element that can contain UI widgets such as text and images.
 */
@interface GTLRHangoutsChat_Card : GTLRObject

/** The actions of this card. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_CardAction *> *cardActions;

/** The header of the card. A header usually contains a title and an image. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_CardHeader *header;

/** Name of the card. */
@property(nonatomic, copy, nullable) NSString *name;

/** Sections are separated by a line divider. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Section *> *sections;

@end


/**
 *  A card action is the action associated with the card. For an invoice card, a
 *  typical action would be: delete invoice, email invoice or open the invoice
 *  in browser. Not supported by Google Chat apps.
 */
@interface GTLRHangoutsChat_CardAction : GTLRObject

/** The label used to be displayed in the action menu item. */
@property(nonatomic, copy, nullable) NSString *actionLabel;

/** The onclick action for this action item. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OnClick *onClick;

@end


/**
 *  GTLRHangoutsChat_CardHeader
 */
@interface GTLRHangoutsChat_CardHeader : GTLRObject

/**
 *  The image's type (for example, square border or circular border).
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_CardHeader_ImageStyle_Avatar Circular border.
 *        (Value: "AVATAR")
 *    @arg @c kGTLRHangoutsChat_CardHeader_ImageStyle_Image Square border.
 *        (Value: "IMAGE")
 *    @arg @c kGTLRHangoutsChat_CardHeader_ImageStyle_ImageStyleUnspecified
 *        Value "IMAGE_STYLE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *imageStyle;

/** The URL of the image in the card header. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/** The subtitle of the card header. */
@property(nonatomic, copy, nullable) NSString *subtitle;

/**
 *  The title must be specified. The header has a fixed height: if both a title
 *  and subtitle is specified, each takes up one line. If only the title is
 *  specified, it takes up both lines.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  A
 *  [card](https://developers.google.com/workspace/chat/api/reference/rest/v1/cards)
 *  in a Google Chat message. Only Chat apps can create cards. If your Chat app
 *  [authenticates as a
 *  user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
 *  the message can't contain cards. [Card
 *  builder](https://addons.gsuite.google.com/uikit/builder)
 */
@interface GTLRHangoutsChat_CardWithId : GTLRObject

/** A card. Maximum size is 32 KB. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Card *card;

/**
 *  Required if the message contains multiple cards. A unique identifier for a
 *  card in a message.
 */
@property(nonatomic, copy, nullable) NSString *cardId;

@end


/**
 *  JSON payload of error messages. If the Cloud Logging API is enabled, these
 *  error messages are logged to [Google Cloud
 *  Logging](https://cloud.google.com/logging/docs).
 */
@interface GTLRHangoutsChat_ChatAppLogEntry : GTLRObject

/**
 *  The deployment that caused the error. For Chat apps built in Apps Script,
 *  this is the deployment ID defined by Apps Script.
 */
@property(nonatomic, copy, nullable) NSString *deployment;

/**
 *  The unencrypted `callback_method` name that was running when the error was
 *  encountered.
 */
@property(nonatomic, copy, nullable) NSString *deploymentFunction;

/** The error code and message. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Status *error;

@end


/**
 *  For a `SelectionInput` widget that uses a multiselect menu, a data source
 *  from Google Chat. The data source populates selection items for the
 *  multiselect menu. For example, a user can select Google Chat spaces that
 *  they're a member of. [Google Chat
 *  apps](https://developers.google.com/workspace/chat):
 */
@interface GTLRHangoutsChat_ChatClientDataSourceMarkup : GTLRObject

/** Google Chat spaces that the user is a member of. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_SpaceDataSource *spaceDataSource;

@end


/**
 *  Data for Chat space links.
 */
@interface GTLRHangoutsChat_ChatSpaceLinkData : GTLRObject

/**
 *  The message of the linked Chat space resource. Format:
 *  `spaces/{space}/messages/{message}`
 */
@property(nonatomic, copy, nullable) NSString *message;

/** The space of the linked Chat space resource. Format: `spaces/{space}` */
@property(nonatomic, copy, nullable) NSString *space;

/**
 *  The thread of the linked Chat space resource. Format:
 *  `spaces/{space}/threads/{thread}`
 */
@property(nonatomic, copy, nullable) NSString *thread;

@end


/**
 *  Represents a color in the RGBA color space. This representation is designed
 *  for simplicity of conversion to and from color representations in various
 *  languages over compactness. For example, the fields of this representation
 *  can be trivially provided to the constructor of `java.awt.Color` in Java; it
 *  can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha`
 *  method in iOS; and, with just a little work, it can be easily formatted into
 *  a CSS `rgba()` string in JavaScript. This reference page doesn't have
 *  information about the absolute color space that should be used to interpret
 *  the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default,
 *  applications should assume the sRGB color space. When color equality needs
 *  to be decided, implementations, unless documented otherwise, treat two
 *  colors as equal if all their red, green, blue, and alpha values each differ
 *  by at most `1e-5`. Example (Java): import com.google.type.Color; // ...
 *  public static java.awt.Color fromProto(Color protocolor) { float alpha =
 *  protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new
 *  java.awt.Color( protocolor.getRed(), protocolor.getGreen(),
 *  protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color
 *  color) { float red = (float) color.getRed(); float green = (float)
 *  color.getGreen(); float blue = (float) color.getBlue(); float denominator =
 *  255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red /
 *  denominator) .setGreen(green / denominator) .setBlue(blue / denominator);
 *  int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha(
 *  FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build());
 *  } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ...
 *  static UIColor* fromProto(Color* protocolor) { float red = [protocolor red];
 *  float green = [protocolor green]; float blue = [protocolor blue];
 *  FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if
 *  (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor
 *  colorWithRed:red green:green blue:blue alpha:alpha]; } static Color*
 *  toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color
 *  getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color*
 *  result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green];
 *  [result setBlue:blue]; if (alpha <= 0.9999) { [result
 *  setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return
 *  result; } // ... Example (JavaScript): // ... var protoToCssColor =
 *  function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac =
 *  rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red =
 *  Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue
 *  = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return
 *  rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value ||
 *  0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(',
 *  rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor =
 *  function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green
 *  << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6
 *  - hexString.length; var resultBuilder = ['#']; for (var i = 0; i <
 *  missingZeros; i++) { resultBuilder.push('0'); }
 *  resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
 */
@interface GTLRHangoutsChat_Color : GTLRObject

/**
 *  The fraction of this color that should be applied to the pixel. That is, the
 *  final pixel color is defined by the equation: `pixel color = alpha * (this
 *  color) + (1.0 - alpha) * (background color)` This means that a value of 1.0
 *  corresponds to a solid color, whereas a value of 0.0 corresponds to a
 *  completely transparent color. This uses a wrapper message rather than a
 *  simple float scalar so that it is possible to distinguish between a default
 *  value and the value being unset. If omitted, this color object is rendered
 *  as a solid color (as if the alpha value had been explicitly given a value of
 *  1.0).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *alpha;

/**
 *  The amount of blue in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blue;

/**
 *  The amount of green in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *green;

/**
 *  The amount of red in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *red;

@end


/**
 *  Represents information about the user's client, such as locale, host app,
 *  and platform. For Chat apps, `CommonEventObject` includes data submitted by
 *  users interacting with cards, like data entered in
 *  [dialogs](https://developers.google.com/chat/how-tos/dialogs).
 */
@interface GTLRHangoutsChat_CommonEventObject : GTLRObject

/**
 *  A map containing the values that a user inputs in a widget from a card or
 *  dialog. The map keys are the string IDs assigned to each widget, and the
 *  values represent inputs to the widget. For details, see [Process information
 *  inputted by users](https://developers.google.com/chat/ui/read-form-data).
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_CommonEventObject_FormInputs *formInputs;

/**
 *  The hostApp enum which indicates the app the add-on is invoked from. Always
 *  `CHAT` for Chat apps.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Calendar The add-on
 *        launches from Google Calendar. (Value: "CALENDAR")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Chat A Google Chat
 *        app. Not used for Google Workspace Add-ons. (Value: "CHAT")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Demo Not used. (Value:
 *        "DEMO")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Docs The add-on
 *        launches from Google Docs. (Value: "DOCS")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Drawings The add-on
 *        launches from Google Drawings. (Value: "DRAWINGS")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Drive The add-on
 *        launches from Google Drive. (Value: "DRIVE")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Gmail The add-on
 *        launches from Gmail. (Value: "GMAIL")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Meet The add-on
 *        launches from Google Meet. (Value: "MEET")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Sheets The add-on
 *        launches from Google Sheets. (Value: "SHEETS")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Slides The add-on
 *        launches from Google Slides. (Value: "SLIDES")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_UnspecifiedHostApp
 *        Google can't identify a host app. (Value: "UNSPECIFIED_HOST_APP")
 */
@property(nonatomic, copy, nullable) NSString *hostApp;

/**
 *  Name of the invoked function associated with the widget. Only set for Chat
 *  apps.
 */
@property(nonatomic, copy, nullable) NSString *invokedFunction;

/**
 *  Custom [parameters](/chat/api/reference/rest/v1/cards#ActionParameter)
 *  passed to the invoked function. Both keys and values must be strings.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_CommonEventObject_Parameters *parameters;

/**
 *  The platform enum which indicates the platform where the event originates
 *  (`WEB`, `IOS`, or `ANDROID`). Not supported by Chat apps.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_Platform_Android Value
 *        "ANDROID"
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_Platform_Ios Value "IOS"
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_Platform_UnknownPlatform Value
 *        "UNKNOWN_PLATFORM"
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_Platform_Web Value "WEB"
 */
@property(nonatomic, copy, nullable) NSString *platform;

/**
 *  The timezone ID and offset from Coordinated Universal Time (UTC). Only
 *  supported for the event types
 *  [`CARD_CLICKED`](https://developers.google.com/chat/api/reference/rest/v1/EventType#ENUM_VALUES.CARD_CLICKED)
 *  and
 *  [`SUBMIT_DIALOG`](https://developers.google.com/chat/api/reference/rest/v1/DialogEventType#ENUM_VALUES.SUBMIT_DIALOG).
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_TimeZone *timeZone;

/**
 *  The full `locale.displayName` in the format of [ISO 639 language code]-[ISO
 *  3166 country/region code] such as "en-US".
 */
@property(nonatomic, copy, nullable) NSString *userLocale;

@end


/**
 *  A map containing the values that a user inputs in a widget from a card or
 *  dialog. The map keys are the string IDs assigned to each widget, and the
 *  values represent inputs to the widget. For details, see [Process information
 *  inputted by users](https://developers.google.com/chat/ui/read-form-data).
 *
 *  @note This class is documented as having more properties of
 *        GTLRHangoutsChat_Inputs. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRHangoutsChat_CommonEventObject_FormInputs : GTLRObject
@end


/**
 *  Custom [parameters](/chat/api/reference/rest/v1/cards#ActionParameter)
 *  passed to the invoked function. Both keys and values must be strings.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRHangoutsChat_CommonEventObject_Parameters : GTLRObject
@end


/**
 *  Request message for completing the import process for a space.
 */
@interface GTLRHangoutsChat_CompleteImportSpaceRequest : GTLRObject
@end


/**
 *  Response message for completing the import process for a space.
 */
@interface GTLRHangoutsChat_CompleteImportSpaceResponse : GTLRObject

/** The import mode space. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Space *space;

@end


/**
 *  Represents a custom emoji.
 */
@interface GTLRHangoutsChat_CustomEmoji : GTLRObject

/** Output only. Unique key for the custom emoji resource. */
@property(nonatomic, copy, nullable) NSString *uid;

@end


/**
 *  Date input values.
 */
@interface GTLRHangoutsChat_DateInput : GTLRObject

/**
 *  Time since epoch time, in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *msSinceEpoch;

@end


/**
 *  Date and time input values.
 */
@interface GTLRHangoutsChat_DateTimeInput : GTLRObject

/**
 *  Whether the `datetime` input includes a calendar date.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasDate;

/**
 *  Whether the `datetime` input includes a timestamp.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasTime;

/**
 *  Time since epoch time, in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *msSinceEpoch;

@end


/**
 *  Information about a deleted message. A message is deleted when `delete_time`
 *  is set.
 */
@interface GTLRHangoutsChat_DeletionMetadata : GTLRObject

/**
 *  Indicates who deleted the message.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_DeletionMetadata_DeletionType_Admin A Google
 *        Workspace admin deleted the message. (Value: "ADMIN")
 *    @arg @c kGTLRHangoutsChat_DeletionMetadata_DeletionType_AppMessageExpiry A
 *        Chat app deleted its own message when it expired. (Value:
 *        "APP_MESSAGE_EXPIRY")
 *    @arg @c kGTLRHangoutsChat_DeletionMetadata_DeletionType_Creator User
 *        deleted their own message. (Value: "CREATOR")
 *    @arg @c kGTLRHangoutsChat_DeletionMetadata_DeletionType_CreatorViaApp A
 *        Chat app deleted the message on behalf of the user. (Value:
 *        "CREATOR_VIA_APP")
 *    @arg @c kGTLRHangoutsChat_DeletionMetadata_DeletionType_DeletionTypeUnspecified
 *        This value is unused. (Value: "DELETION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_DeletionMetadata_DeletionType_SpaceOwner The
 *        space owner deleted the message. (Value: "SPACE_OWNER")
 *    @arg @c kGTLRHangoutsChat_DeletionMetadata_DeletionType_SpaceOwnerViaApp A
 *        Chat app deleted the message on behalf of the space owner. (Value:
 *        "SPACE_OWNER_VIA_APP")
 */
@property(nonatomic, copy, nullable) NSString *deletionType;

@end


/**
 *  A Google Chat app interaction event that represents and contains data about
 *  a user's interaction with a Chat app. To configure your Chat app to receive
 *  interaction events, see [Receive and respond to user
 *  interactions](https://developers.google.com/workspace/chat/receive-respond-interactions).
 *  In addition to receiving events from user interactions, Chat apps can
 *  receive events about changes to spaces, such as when a new member is added
 *  to a space. To learn about space events, see [Work with events from Google
 *  Chat](https://developers.google.com/workspace/chat/events-overview).
 */
@interface GTLRHangoutsChat_DeprecatedEvent : GTLRObject

/**
 *  For `CARD_CLICKED` interaction events, the form action data associated when
 *  a user clicks a card or dialog. To learn more, see [Read form data input by
 *  users on
 *  cards](https://developers.google.com/workspace/chat/read-form-data).
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_FormAction *action;

/**
 *  Represents information about the user's client, such as locale, host app,
 *  and platform. For Chat apps, `CommonEventObject` includes information
 *  submitted by users interacting with
 *  [dialogs](https://developers.google.com/workspace/chat/dialogs), like data
 *  entered on a card.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_CommonEventObject *common;

/**
 *  For `MESSAGE` interaction events, the URL that users must be redirected to
 *  after they complete an authorization or configuration flow outside of Google
 *  Chat. For more information, see [Connect a Chat app with other services and
 *  tools](https://developers.google.com/workspace/chat/connect-web-services-tools).
 */
@property(nonatomic, copy, nullable) NSString *configCompleteRedirectUrl;

/**
 *  The type of [dialog](https://developers.google.com/workspace/chat/dialogs)
 *  interaction event received.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_DialogEventType_CancelDialog A
 *        user closes a dialog without submitting information, or the dialog is
 *        canceled. (Value: "CANCEL_DIALOG")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_DialogEventType_RequestDialog A
 *        user opens a dialog. (Value: "REQUEST_DIALOG")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_DialogEventType_SubmitDialog A
 *        user clicks an interactive element of a dialog. For example, a user
 *        fills out information in a dialog and clicks a button to submit the
 *        information. (Value: "SUBMIT_DIALOG")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_DialogEventType_TypeUnspecified
 *        Default value. Unspecified. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *dialogEventType;

/** The timestamp indicating when the interaction event occurred. */
@property(nonatomic, strong, nullable) GTLRDateTime *eventTime;

/**
 *  For `CARD_CLICKED` and `MESSAGE` interaction events, whether the user is
 *  interacting with or about to interact with a
 *  [dialog](https://developers.google.com/workspace/chat/dialogs).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDialogEvent;

/**
 *  For `ADDED_TO_SPACE`, `CARD_CLICKED`, and `MESSAGE` interaction events, the
 *  message that triggered the interaction event, if applicable.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Message *message;

/** The space in which the user interacted with the Chat app. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Space *space;

/**
 *  The Chat app-defined key for the thread related to the interaction event.
 *  See
 *  [`spaces.messages.thread.threadKey`](/chat/api/reference/rest/v1/spaces.messages#Thread.FIELDS.thread_key)
 *  for more information.
 */
@property(nonatomic, copy, nullable) NSString *threadKey;

/**
 *  A secret value that legacy Chat apps can use to verify if a request is from
 *  Google. Google randomly generates the token, and its value remains static.
 *  You can obtain, revoke, or regenerate the token from the [Chat API
 *  configuration
 *  page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat)
 *  in the Google Cloud Console. Modern Chat apps don't use this field. It is
 *  absent from API responses and the [Chat API configuration
 *  page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat).
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  The [type](/workspace/chat/api/reference/rest/v1/EventType) of user
 *  interaction with the Chat app, such as `MESSAGE` or `ADDED_TO_SPACE`.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_Type_AddedToSpace A user adds
 *        the Chat app to a space, or a Google Workspace administrator installs
 *        the Chat app in direct message spaces for users in their organization.
 *        Chat apps typically respond to this interaction event by posting a
 *        welcome message in the space. When administrators install Chat apps,
 *        the `space.adminInstalled` field is set to `true` and users can't
 *        uninstall them. To learn about Chat apps installed by administrators,
 *        see Google Workspace Admin Help's documentation, [Install Marketplace
 *        apps in your domain](https://support.google.com/a/answer/172482).
 *        (Value: "ADDED_TO_SPACE")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_Type_CardClicked A user clicks
 *        an interactive element of a card or dialog from a Chat app, such as a
 *        button. To receive an interaction event, the button must trigger
 *        another interaction with the Chat app. For example, a Chat app doesn't
 *        receive a `CARD_CLICKED` interaction event if a user clicks a button
 *        that opens a link to a website, but receives interaction events in the
 *        following examples: * The user clicks a `Send feedback` button on a
 *        card, which opens a dialog for the user to input information. * The
 *        user clicks a `Submit` button after inputting information into a card
 *        or dialog. If a user clicks a button to open, submit, or cancel a
 *        dialog, the `CARD_CLICKED` interaction event's `isDialogEvent` field
 *        is set to `true` and includes a
 *        [`DialogEventType`](https://developers.google.com/workspace/chat/api/reference/rest/v1/DialogEventType).
 *        (Value: "CARD_CLICKED")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_Type_Message A user sends the
 *        Chat app a message, or invokes the Chat app in a space, such as any of
 *        the following examples: * Any message in a direct message (DM) space
 *        with the Chat app. * A message in a multi-person space where a person
 *        \@mentions the Chat app, or uses one of its slash commands. * If
 *        you've configured link previews for your Chat app, a user posts a
 *        message that contains a link that matches the configured URL pattern.
 *        (Value: "MESSAGE")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_Type_RemovedFromSpace A user
 *        removes the Chat app from a space, or a Google Workspace administrator
 *        uninstalls the Chat app for a user in their organization. Chat apps
 *        can't respond with messages to this event, because they have already
 *        been removed. When administrators uninstall Chat apps, the
 *        `space.adminInstalled` field is set to `false`. If a user installed
 *        the Chat app before the administrator, the Chat app remains installed
 *        for the user and the Chat app doesn't receive a `REMOVED_FROM_SPACE`
 *        interaction event. (Value: "REMOVED_FROM_SPACE")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_Type_Unspecified Default value
 *        for the enum. DO NOT USE. (Value: "UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_Type_WidgetUpdated A user
 *        updates a widget in a card message or dialog. (Value:
 *        "WIDGET_UPDATED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The user that interacted with the Chat app. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *user;

@end


/**
 *  Wrapper around the card body of the dialog.
 */
@interface GTLRHangoutsChat_Dialog : GTLRObject

/**
 *  Input only. Body of the dialog, which is rendered in a modal. Google Chat
 *  apps don't support the following card entities: `DateTimePicker`,
 *  `OnChangeAction`.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Card *body;

@end


/**
 *  Contains a [dialog](https://developers.google.com/workspace/chat/dialogs)
 *  and request status code.
 */
@interface GTLRHangoutsChat_DialogAction : GTLRObject

/**
 *  Input only. Status for a request to either invoke or submit a
 *  [dialog](https://developers.google.com/workspace/chat/dialogs). Displays a
 *  status and message to users, if necessary. For example, in case of an error
 *  or success.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_ActionStatus *actionStatus;

/**
 *  Input only. [Dialog](https://developers.google.com/workspace/chat/dialogs)
 *  for the request.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Dialog *dialog;

@end


/**
 *  A reference to the data of a drive attachment.
 */
@interface GTLRHangoutsChat_DriveDataRef : GTLRObject

/** The ID for the drive file. Use with the Drive API. */
@property(nonatomic, copy, nullable) NSString *driveFileId;

@end


/**
 *  Data for Google Drive links.
 */
@interface GTLRHangoutsChat_DriveLinkData : GTLRObject

/**
 *  A
 *  [DriveDataRef](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages.attachments#drivedataref)
 *  which references a Google Drive file.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_DriveDataRef *driveDataRef;

/** The mime type of the linked Google Drive resource. */
@property(nonatomic, copy, nullable) NSString *mimeType;

@end


/**
 *  An emoji that is used as a reaction to a message.
 */
@interface GTLRHangoutsChat_Emoji : GTLRObject

/** Output only. A custom emoji. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_CustomEmoji *customEmoji;

/** A basic emoji represented by a unicode string. */
@property(nonatomic, copy, nullable) NSString *unicode;

@end


/**
 *  The number of people who reacted to a message with a specific emoji.
 */
@interface GTLRHangoutsChat_EmojiReactionSummary : GTLRObject

/** Emoji associated with the reactions. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Emoji *emoji;

/**
 *  The total number of reactions using the associated emoji.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reactionCount;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRHangoutsChat_Empty : GTLRObject
@end


/**
 *  A form action describes the behavior when the form is submitted. For
 *  example, you can invoke Apps Script to handle the form.
 */
@interface GTLRHangoutsChat_FormAction : GTLRObject

/**
 *  The method name is used to identify which part of the form triggered the
 *  form submission. This information is echoed back to the Chat app as part of
 *  the card click event. You can use the same method name for several elements
 *  that trigger a common behavior.
 */
@property(nonatomic, copy, nullable) NSString *actionMethodName;

/** List of action parameters. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_ActionParameter *> *parameters;

@end


/**
 *  An action that describes the behavior when the form is submitted. For
 *  example, you can invoke an Apps Script script to handle the form. If the
 *  action is triggered, the form values are sent to the server. [Google
 *  Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Action : GTLRObject

/**
 *  A custom function to invoke when the containing element is clicked or
 *  otherwise activated. For example usage, see [Read form
 *  data](https://developers.google.com/workspace/chat/read-form-data).
 */
@property(nonatomic, copy, nullable) NSString *function;

/**
 *  Optional. Required when opening a
 *  [dialog](https://developers.google.com/workspace/chat/dialogs). What to do
 *  in response to an interaction with a user, such as a user clicking a button
 *  in a card message. If unspecified, the app responds by executing an
 *  `action`—like opening a link or running a function—as normal. By specifying
 *  an `interaction`, the app can respond in special interactive ways. For
 *  example, by setting `interaction` to `OPEN_DIALOG`, the app can open a
 *  [dialog](https://developers.google.com/workspace/chat/dialogs). When
 *  specified, a loading indicator isn't shown. If specified for an add-on, the
 *  entire card is stripped and nothing is shown in the client. [Google Chat
 *  apps](https://developers.google.com/workspace/chat):
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Action_Interaction_InteractionUnspecified
 *        Default value. The `action` executes as normal. (Value:
 *        "INTERACTION_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Action_Interaction_OpenDialog
 *        Opens a
 *        [dialog](https://developers.google.com/workspace/chat/dialogs), a
 *        windowed, card-based interface that Chat apps use to interact with
 *        users. Only supported by Chat apps in response to button-clicks on
 *        card messages. If specified for an add-on, the entire card is stripped
 *        and nothing is shown in the client. [Google Chat
 *        apps](https://developers.google.com/workspace/chat): (Value:
 *        "OPEN_DIALOG")
 */
@property(nonatomic, copy, nullable) NSString *interaction;

/**
 *  Specifies the loading indicator that the action displays while making the
 *  call to the action.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Action_LoadIndicator_None
 *        Nothing is displayed. (Value: "NONE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Action_LoadIndicator_Spinner
 *        Displays a spinner to indicate that content is loading. (Value:
 *        "SPINNER")
 */
@property(nonatomic, copy, nullable) NSString *loadIndicator;

/** List of action parameters. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1ActionParameter *> *parameters;

/**
 *  Indicates whether form values persist after the action. The default value is
 *  `false`. If `true`, form values remain after the action is triggered. To let
 *  the user make changes while the action is being processed, set
 *  [`LoadIndicator`](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator)
 *  to `NONE`. For [card
 *  messages](https://developers.google.com/workspace/chat/api/guides/v1/messages/create#create)
 *  in Chat apps, you must also set the action's
 *  [`ResponseType`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages#responsetype)
 *  to `UPDATE_MESSAGE` and use the same
 *  [`card_id`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages#CardWithId)
 *  from the card that contained the action. If `false`, the form values are
 *  cleared when the action is triggered. To prevent the user from making
 *  changes while the action is being processed, set
 *  [`LoadIndicator`](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator)
 *  to `SPINNER`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *persistValues;

@end


/**
 *  List of string parameters to supply when the action method is invoked. For
 *  example, consider three snooze buttons: snooze now, snooze one day, or
 *  snooze next week. You might use `action method = snooze()`, passing the
 *  snooze type and snooze time in the list of string parameters. To learn more,
 *  see
 *  [`CommonEventObject`](https://developers.google.com/workspace/chat/api/reference/rest/v1/Event#commoneventobject).
 *  [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1ActionParameter : GTLRObject

/** The name of the parameter for the action script. */
@property(nonatomic, copy, nullable) NSString *key;

/** The value of the parameter. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  The style options for the border of a card or widget, including the border
 *  type and color. [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1BorderStyle : GTLRObject

/**
 *  The corner radius for the border.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cornerRadius;

/**
 *  The colors to use when the type is `BORDER_TYPE_STROKE`. To set the stroke
 *  color, specify a value for the `red`, `green`, and `blue` fields. The value
 *  must be a float number between 0 and 1 based on the RGB color value, where
 *  `0` (0/255) represents the absence of color and `1` (255/255) represents the
 *  maximum intensity of the color. For example, the following sets the color to
 *  red at its maximum intensity: ``` "color": { "red": 1, "green": 0, "blue":
 *  0, } ``` The `alpha` field is unavailable for stroke color. If specified,
 *  this field is ignored.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Color *strokeColor;

/**
 *  The border type.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_BorderTypeUnspecified
 *        Don't use. Unspecified. (Value: "BORDER_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_NoBorder
 *        Default value. No border. (Value: "NO_BORDER")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_Stroke Outline.
 *        (Value: "STROKE")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A text, icon, or text and icon button that users can click. For an example
 *  in Google Chat apps, see [Add a
 *  button](https://developers.google.com/workspace/chat/design-interactive-card-dialog#add_a_button).
 *  To make an image a clickable button, specify an `Image` (not an
 *  `ImageComponent`) and set an `onClick` action. [Google Workspace Add-ons and
 *  Chat apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Button : GTLRObject

/**
 *  The alternative text that's used for accessibility. Set descriptive text
 *  that lets users know what the button does. For example, if a button opens a
 *  hyperlink, you might write: "Opens a new browser tab and navigates to the
 *  Google Chat developer documentation at
 *  https://developers.google.com/workspace/chat".
 */
@property(nonatomic, copy, nullable) NSString *altText;

/**
 *  Optional. The color of the button. If set, the button `type` is set to
 *  `FILLED` and the color of `text` and `icon` fields are set to a contrasting
 *  color for readability. For example, if the button color is set to blue, any
 *  text or icons in the button are set to white. To set the button color,
 *  specify a value for the `red`, `green`, and `blue` fields. The value must be
 *  a float number between 0 and 1 based on the RGB color value, where `0`
 *  (0/255) represents the absence of color and `1` (255/255) represents the
 *  maximum intensity of the color. For example, the following sets the color to
 *  red at its maximum intensity: ``` "color": { "red": 1, "green": 0, "blue":
 *  0, } ``` The `alpha` field is unavailable for button color. If specified,
 *  this field is ignored.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Color *color;

/**
 *  If `true`, the button is displayed in an inactive state and doesn't respond
 *  to user actions.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

/**
 *  An icon displayed inside the button. If both `icon` and `text` are set, then
 *  the icon appears before the text.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Icon *icon;

/**
 *  Required. The action to perform when a user clicks the button, such as
 *  opening a hyperlink or running a custom function.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OnClick *onClick;

/** The text displayed inside the button. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A list of buttons layed out horizontally. For an example in Google Chat
 *  apps, see [Add a
 *  button](https://developers.google.com/workspace/chat/design-interactive-card-dialog#add_a_button).
 *  [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1ButtonList : GTLRObject

/** An array of buttons. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1Button *> *buttons;

@end


/**
 *  A card interface displayed in a Google Chat message or Google Workspace
 *  Add-on. Cards support a defined layout, interactive UI elements like
 *  buttons, and rich media like images. Use cards to present detailed
 *  information, gather information from users, and guide users to take a next
 *  step. [Card builder](https://addons.gsuite.google.com/uikit/builder) To
 *  learn how to build cards, see the following documentation: * For Google Chat
 *  apps, see [Design the components of a card or
 *  dialog](https://developers.google.com/workspace/chat/design-components-card-dialog).
 *  * For Google Workspace Add-ons, see [Card-based
 *  interfaces](https://developers.google.com/apps-script/add-ons/concepts/cards).
 *  **Example: Card message for a Google Chat app** ![Example contact
 *  card](https://developers.google.com/workspace/chat/images/card_api_reference.png)
 *  To create the sample card message in Google Chat, use the following JSON:
 *  ``` { "cardsV2": [ { "cardId": "unique-card-id", "card": { "header": {
 *  "title": "Sasha", "subtitle": "Software Engineer", "imageUrl":
 *  "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png",
 *  "imageType": "CIRCLE", "imageAltText": "Avatar for Sasha" }, "sections": [ {
 *  "header": "Contact Info", "collapsible": true, "uncollapsibleWidgetsCount":
 *  1, "widgets": [ { "decoratedText": { "startIcon": { "knownIcon": "EMAIL" },
 *  "text": "sasha\@example.com" } }, { "decoratedText": { "startIcon": {
 *  "knownIcon": "PERSON" }, "text": "Online" } }, { "decoratedText": {
 *  "startIcon": { "knownIcon": "PHONE" }, "text": "+1 (555) 555-1234" } }, {
 *  "buttonList": { "buttons": [ { "text": "Share", "onClick": { "openLink": {
 *  "url": "https://example.com/share" } } }, { "text": "Edit", "onClick": {
 *  "action": { "function": "goToView", "parameters": [ { "key": "viewType",
 *  "value": "EDIT" } ] } } } ] } } ] } ] } } ] } ```
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Card : GTLRObject

/**
 *  The card's actions. Actions are added to the card's toolbar menu. [Google
 *  Workspace Add-ons](https://developers.google.com/workspace/add-ons): For
 *  example, the following JSON constructs a card action menu with `Settings`
 *  and `Send Feedback` options: ``` "card_actions": [ { "actionLabel":
 *  "Settings", "onClick": { "action": { "functionName": "goToView",
 *  "parameters": [ { "key": "viewType", "value": "SETTING" } ],
 *  "loadIndicator": "LoadIndicator.SPINNER" } } }, { "actionLabel": "Send
 *  Feedback", "onClick": { "openLink": { "url": "https://example.com/feedback"
 *  } } } ] ```
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1CardAction *> *cardActions;

/**
 *  In Google Workspace Add-ons, sets the display properties of the
 *  `peekCardHeader`. [Google Workspace
 *  Add-ons](https://developers.google.com/workspace/add-ons):
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_DisplayStyleUnspecified
 *        Don't use. Unspecified. (Value: "DISPLAY_STYLE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_Peek The
 *        header of the card appears at the bottom of the sidebar, partially
 *        covering the current top card of the stack. Clicking the header pops
 *        the card into the card stack. If the card has no header, a generated
 *        header is used instead. (Value: "PEEK")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_Replace
 *        Default value. The card is shown by replacing the view of the top card
 *        in the card stack. (Value: "REPLACE")
 */
@property(nonatomic, copy, nullable) NSString *displayStyle;

/**
 *  The fixed footer shown at the bottom of this card. Setting `fixedFooter`
 *  without specifying a `primaryButton` or a `secondaryButton` causes an error.
 *  For Chat apps, you can use fixed footers in
 *  [dialogs](https://developers.google.com/workspace/chat/dialogs), but not
 *  [card
 *  messages](https://developers.google.com/workspace/chat/create-messages#create).
 *  [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1CardFixedFooter *fixedFooter;

/**
 *  The header of the card. A header usually contains a leading image and a
 *  title. Headers always appear at the top of a card.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1CardHeader *header;

/**
 *  Name of the card. Used as a card identifier in card navigation. [Google
 *  Workspace Add-ons](https://developers.google.com/workspace/add-ons):
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  When displaying contextual content, the peek card header acts as a
 *  placeholder so that the user can navigate forward between the homepage cards
 *  and the contextual cards. [Google Workspace
 *  Add-ons](https://developers.google.com/workspace/add-ons):
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1CardHeader *peekCardHeader;

/**
 *  The divider style between the header, sections and footer.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Card_SectionDividerStyle_DividerStyleUnspecified
 *        Don't use. Unspecified. (Value: "DIVIDER_STYLE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Card_SectionDividerStyle_NoDivider
 *        If set, no divider is rendered. This style completely removes the
 *        divider from the layout. The result is equivalent to not adding a
 *        divider at all. (Value: "NO_DIVIDER")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Card_SectionDividerStyle_SolidDivider
 *        Default option. Render a solid divider. (Value: "SOLID_DIVIDER")
 */
@property(nonatomic, copy, nullable) NSString *sectionDividerStyle;

/**
 *  Contains a collection of widgets. Each section has its own, optional header.
 *  Sections are visually separated by a line divider. For an example in Google
 *  Chat apps, see [Define a section of a
 *  card](https://developers.google.com/workspace/chat/design-components-card-dialog#define_a_section_of_a_card).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1Section *> *sections;

@end


/**
 *  A card action is the action associated with the card. For example, an
 *  invoice card might include actions such as delete invoice, email invoice, or
 *  open the invoice in a browser. [Google Workspace
 *  Add-ons](https://developers.google.com/workspace/add-ons):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1CardAction : GTLRObject

/** The label that displays as the action menu item. */
@property(nonatomic, copy, nullable) NSString *actionLabel;

/** The `onClick` action for this action item. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OnClick *onClick;

@end


/**
 *  A persistent (sticky) footer that that appears at the bottom of the card.
 *  Setting `fixedFooter` without specifying a `primaryButton` or a
 *  `secondaryButton` causes an error. For Chat apps, you can use fixed footers
 *  in [dialogs](https://developers.google.com/workspace/chat/dialogs), but not
 *  [card
 *  messages](https://developers.google.com/workspace/chat/create-messages#create).
 *  For an example in Google Chat apps, see [Add a persistent
 *  footer](https://developers.google.com/workspace/chat/design-components-card-dialog#add_a_persistent_footer).
 *  [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1CardFixedFooter : GTLRObject

/**
 *  The primary button of the fixed footer. The button must be a text button
 *  with text and color set.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Button *primaryButton;

/**
 *  The secondary button of the fixed footer. The button must be a text button
 *  with text and color set. If `secondaryButton` is set, you must also set
 *  `primaryButton`.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Button *secondaryButton;

@end


/**
 *  Represents a card header. For an example in Google Chat apps, see [Add a
 *  header](https://developers.google.com/workspace/chat/design-components-card-dialog#add_a_header).
 *  [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1CardHeader : GTLRObject

/** The alternative text of this image that's used for accessibility. */
@property(nonatomic, copy, nullable) NSString *imageAltText;

/**
 *  The shape used to crop the image. [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1CardHeader_ImageType_Circle
 *        Applies a circular mask to the image. For example, a 4x3 image becomes
 *        a circle with a diameter of 3. (Value: "CIRCLE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1CardHeader_ImageType_Square
 *        Default value. Applies a square mask to the image. For example, a 4x3
 *        image becomes 3x3. (Value: "SQUARE")
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/** The HTTPS URL of the image in the card header. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/**
 *  The subtitle of the card header. If specified, appears on its own line below
 *  the `title`.
 */
@property(nonatomic, copy, nullable) NSString *subtitle;

/**
 *  Required. The title of the card header. The header has a fixed height: if
 *  both a title and subtitle are specified, each takes up one line. If only the
 *  title is specified, it takes up both lines.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  A column. [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend)
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Column : GTLRObject

/**
 *  Specifies whether widgets align to the left, right, or center of a column.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Column_HorizontalAlignment_Center
 *        Aligns widgets to the center of the column. (Value: "CENTER")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Column_HorizontalAlignment_End
 *        Aligns widgets to the end position of the column. For left-to-right
 *        layouts, aligns widgets to the right. For right-to-left layouts,
 *        aligns widgets to the left. (Value: "END")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Column_HorizontalAlignment_HorizontalAlignmentUnspecified
 *        Don't use. Unspecified. (Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Column_HorizontalAlignment_Start
 *        Default value. Aligns widgets to the start position of the column. For
 *        left-to-right layouts, aligns to the left. For right-to-left layouts,
 *        aligns to the right. (Value: "START")
 */
@property(nonatomic, copy, nullable) NSString *horizontalAlignment;

/**
 *  Specifies how a column fills the width of the card.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Column_HorizontalSizeStyle_FillAvailableSpace
 *        Default value. Column fills the available space, up to 70% of the
 *        card's width. If both columns are set to `FILL_AVAILABLE_SPACE`, each
 *        column fills 50% of the space. (Value: "FILL_AVAILABLE_SPACE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Column_HorizontalSizeStyle_FillMinimumSpace
 *        Column fills the least amount of space possible and no more than 30%
 *        of the card's width. (Value: "FILL_MINIMUM_SPACE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Column_HorizontalSizeStyle_HorizontalSizeStyleUnspecified
 *        Don't use. Unspecified. (Value: "HORIZONTAL_SIZE_STYLE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *horizontalSizeStyle;

/**
 *  Specifies whether widgets align to the top, bottom, or center of a column.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Column_VerticalAlignment_Bottom
 *        Aligns widgets to the bottom of a column. (Value: "BOTTOM")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Column_VerticalAlignment_Center
 *        Default value. Aligns widgets to the center of a column. (Value:
 *        "CENTER")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Column_VerticalAlignment_Top
 *        Aligns widgets to the top of a column. (Value: "TOP")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Column_VerticalAlignment_VerticalAlignmentUnspecified
 *        Don't use. Unspecified. (Value: "VERTICAL_ALIGNMENT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *verticalAlignment;

/**
 *  An array of widgets included in a column. Widgets appear in the order that
 *  they are specified.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1Widgets *> *widgets;

@end


/**
 *  The `Columns` widget displays up to 2 columns in a card or dialog. You can
 *  add widgets to each column; the widgets appear in the order that they are
 *  specified. For an example in Google Chat apps, see [Display cards and
 *  dialogs in
 *  columns](https://developers.google.com/workspace/chat/format-structure-card-dialog#display_cards_and_dialogs_in_columns).
 *  The height of each column is determined by the taller column. For example,
 *  if the first column is taller than the second column, both columns have the
 *  height of the first column. Because each column can contain a different
 *  number of widgets, you can't define rows or align widgets between the
 *  columns. Columns are displayed side-by-side. You can customize the width of
 *  each column using the `HorizontalSizeStyle` field. If the user's screen
 *  width is too narrow, the second column wraps below the first: * On web, the
 *  second column wraps if the screen width is less than or equal to 480 pixels.
 *  * On iOS devices, the second column wraps if the screen width is less than
 *  or equal to 300 pt. * On Android devices, the second column wraps if the
 *  screen width is less than or equal to 320 dp. To include more than two
 *  columns, or to use rows, use the `Grid` widget. [Google Workspace Add-ons
 *  and Chat apps](https://developers.google.com/workspace/extend): The add-on
 *  UIs that support columns include: * The dialog displayed when users open the
 *  add-on from an email draft. * The dialog displayed when users open the
 *  add-on from the **Add attachment** menu in a Google Calendar event.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Columns : GTLRObject

/**
 *  An array of columns. You can include up to 2 columns in a card or dialog.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1Column *> *columnItems;

@end


/**
 *  Lets users input a date, a time, or both a date and a time. For an example
 *  in Google Chat apps, see [Let a user pick a date and
 *  time](https://developers.google.com/workspace/chat/design-interactive-card-dialog#let_a_user_pick_a_date_and_time).
 *  Users can input text or use the picker to select dates and times. If users
 *  input an invalid date or time, the picker shows an error that prompts users
 *  to input the information correctly. [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1DateTimePicker : GTLRObject

/**
 *  The text that prompts users to input a date, a time, or a date and time. For
 *  example, if users are scheduling an appointment, use a label such as
 *  `Appointment date` or `Appointment date and time`.
 */
@property(nonatomic, copy, nullable) NSString *label;

/**
 *  The name by which the `DateTimePicker` is identified in a form input event.
 *  For details about working with form inputs, see [Receive form
 *  data](https://developers.google.com/workspace/chat/read-form-data).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Triggered when the user clicks **Save** or **Clear** from the
 *  `DateTimePicker` interface.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *onChangeAction;

/**
 *  The number representing the time zone offset from UTC, in minutes. If set,
 *  the `value_ms_epoch` is displayed in the specified time zone. If unset, the
 *  value defaults to the user's time zone setting.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timezoneOffsetDate;

/**
 *  Whether the widget supports inputting a date, a time, or the date and time.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_DateAndTime
 *        Users input a date and time. (Value: "DATE_AND_TIME")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_DateOnly
 *        Users input a date. (Value: "DATE_ONLY")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_TimeOnly
 *        Users input a time. (Value: "TIME_ONLY")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The default value displayed in the widget, in milliseconds since [Unix epoch
 *  time](https://en.wikipedia.org/wiki/Unix_time). Specify the value based on
 *  the type of picker (`DateTimePickerType`): * `DATE_AND_TIME`: a calendar
 *  date and time in UTC. For example, to represent January 1, 2023 at 12:00 PM
 *  UTC, use `1672574400000`. * `DATE_ONLY`: a calendar date at 00:00:00 UTC.
 *  For example, to represent January 1, 2023, use `1672531200000`. *
 *  `TIME_ONLY`: a time in UTC. For example, to represent 12:00 PM, use
 *  `43200000` (or `12 * 60 * 60 * 1000`).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valueMsEpoch;

@end


/**
 *  A widget that displays text with optional decorations such as a label above
 *  or below the text, an icon in front of the text, a selection widget, or a
 *  button after the text. For an example in Google Chat apps, see [Display text
 *  with decorative
 *  text](https://developers.google.com/workspace/chat/add-text-image-card-dialog#display_text_with_decorative_elements).
 *  [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1DecoratedText : GTLRObject

/** The text that appears below `text`. Always wraps. */
@property(nonatomic, copy, nullable) NSString *bottomLabel;

/** A button that a user can click to trigger an action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Button *button;

/**
 *  An icon displayed after the text. Supports
 *  [built-in](https://developers.google.com/workspace/chat/format-messages#builtinicons)
 *  and
 *  [custom](https://developers.google.com/workspace/chat/format-messages#customicons)
 *  icons.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Icon *endIcon;

/** Deprecated in favor of `startIcon`. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Icon *icon GTLR_DEPRECATED;

/** This action is triggered when users click `topLabel` or `bottomLabel`. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OnClick *onClick;

/** The icon displayed in front of the text. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Icon *startIcon;

/**
 *  A switch widget that a user can click to change its state and trigger an
 *  action.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1SwitchControl *switchControl;

/**
 *  Required. The primary text. Supports simple formatting. For more information
 *  about formatting text, see [Formatting text in Google Chat
 *  apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
 *  and [Formatting text in Google Workspace
 *  Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
 */
@property(nonatomic, copy, nullable) NSString *text;

/** The text that appears above `text`. Always truncates. */
@property(nonatomic, copy, nullable) NSString *topLabel;

/**
 *  The wrap text setting. If `true`, the text wraps and displays on multiple
 *  lines. Otherwise, the text is truncated. Only applies to `text`, not
 *  `topLabel` and `bottomLabel`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wrapText;

@end


/**
 *  Displays a divider between widgets as a horizontal line. For an example in
 *  Google Chat apps, see [Add a horizontal divider between
 *  widgets](https://developers.google.com/workspace/chat/format-structure-card-dialog#add_a_horizontal_divider_between_widgets).
 *  [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend): For example, the
 *  following JSON creates a divider: ``` "divider": {} ```
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Divider : GTLRObject
@end


/**
 *  Displays a grid with a collection of items. Items can only include text or
 *  images. For responsive columns, or to include more than text or images, use
 *  `Columns`. For an example in Google Chat apps, see [Display a Grid with a
 *  collection of
 *  items](https://developers.google.com/workspace/chat/format-structure-card-dialog#display_a_grid_with_a_collection_of_items).
 *  A grid supports any number of columns and items. The number of rows is
 *  determined by items divided by columns. A grid with 10 items and 2 columns
 *  has 5 rows. A grid with 11 items and 2 columns has 6 rows. [Google Workspace
 *  Add-ons and Chat apps](https://developers.google.com/workspace/extend): For
 *  example, the following JSON creates a 2 column grid with a single item: ```
 *  "grid": { "title": "A fine collection of items", "columnCount": 2,
 *  "borderStyle": { "type": "STROKE", "cornerRadius": 4 }, "items": [ {
 *  "image": { "imageUri": "https://www.example.com/image.png", "cropStyle": {
 *  "type": "SQUARE" }, "borderStyle": { "type": "STROKE" } }, "title": "An
 *  item", "textAlignment": "CENTER" } ], "onClick": { "openLink": { "url":
 *  "https://www.example.com" } } } ```
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Grid : GTLRCollectionObject

/** The border style to apply to each grid item. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1BorderStyle *borderStyle;

/**
 *  The number of columns to display in the grid. A default value is used if
 *  this field isn't specified, and that default value is different depending on
 *  where the grid is shown (dialog versus companion).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columnCount;

/**
 *  The items to display in the grid.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1GridItem *> *items;

/**
 *  This callback is reused by each individual grid item, but with the item's
 *  identifier and index in the items list added to the callback's parameters.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OnClick *onClick;

/** The text that displays in the grid header. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Represents an item in a grid layout. Items can contain text, an image, or
 *  both text and an image. [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1GridItem : GTLRObject

/**
 *  A user-specified identifier for this grid item. This identifier is returned
 *  in the parent grid's `onClick` callback parameters.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The image that displays in the grid item. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1ImageComponent *image;

/**
 *  The layout to use for the grid item.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_GridItemLayoutUnspecified
 *        Don't use. Unspecified. (Value: "GRID_ITEM_LAYOUT_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_TextAbove The
 *        title and subtitle are shown above the grid item's image. (Value:
 *        "TEXT_ABOVE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_TextBelow The
 *        title and subtitle are shown below the grid item's image. (Value:
 *        "TEXT_BELOW")
 */
@property(nonatomic, copy, nullable) NSString *layout;

/** The grid item's subtitle. */
@property(nonatomic, copy, nullable) NSString *subtitle;

/** The grid item's title. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  An icon displayed in a widget on a card. For an example in Google Chat apps,
 *  see [Add an
 *  icon](https://developers.google.com/workspace/chat/add-text-image-card-dialog#add_an_icon).
 *  Supports
 *  [built-in](https://developers.google.com/workspace/chat/format-messages#builtinicons)
 *  and
 *  [custom](https://developers.google.com/workspace/chat/format-messages#customicons)
 *  icons. [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Icon : GTLRObject

/**
 *  Optional. A description of the icon used for accessibility. If unspecified,
 *  the default value `Button` is provided. As a best practice, you should set a
 *  helpful description for what the icon displays, and if applicable, what it
 *  does. For example, `A user's account portrait`, or `Opens a new browser tab
 *  and navigates to the Google Chat developer documentation at
 *  https://developers.google.com/workspace/chat`. If the icon is set in a
 *  `Button`, the `altText` appears as helper text when the user hovers over the
 *  button. However, if the button also sets `text`, the icon's `altText` is
 *  ignored.
 */
@property(nonatomic, copy, nullable) NSString *altText;

/**
 *  Display a custom icon hosted at an HTTPS URL. For example: ``` "iconUrl":
 *  "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png"
 *  ``` Supported file types include `.png` and `.jpg`.
 */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The crop style applied to the image. In some cases, applying a `CIRCLE` crop
 *  causes the image to be drawn larger than a built-in icon.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Icon_ImageType_Circle Applies a
 *        circular mask to the image. For example, a 4x3 image becomes a circle
 *        with a diameter of 3. (Value: "CIRCLE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Icon_ImageType_Square Default
 *        value. Applies a square mask to the image. For example, a 4x3 image
 *        becomes 3x3. (Value: "SQUARE")
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/**
 *  Display one of the built-in icons provided by Google Workspace. For example,
 *  to display an airplane icon, specify `AIRPLANE`. For a bus, specify `BUS`.
 *  For a full list of supported icons, see [built-in
 *  icons](https://developers.google.com/workspace/chat/format-messages#builtinicons).
 */
@property(nonatomic, copy, nullable) NSString *knownIcon;

/**
 *  Display one of the [Google Material Icons](https://fonts.google.com/icons).
 *  For example, to display a [checkbox
 *  icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048),
 *  use ``` "material_icon": { "name": "check_box" } ``` [Google Chat
 *  apps](https://developers.google.com/workspace/chat):
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1MaterialIcon *materialIcon;

@end


/**
 *  An image that is specified by a URL and can have an `onClick` action. For an
 *  example, see [Add an
 *  image](https://developers.google.com/workspace/chat/add-text-image-card-dialog#add_an_image).
 *  [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Image : GTLRObject

/** The alternative text of this image that's used for accessibility. */
@property(nonatomic, copy, nullable) NSString *altText;

/**
 *  The HTTPS URL that hosts the image. For example: ```
 *  https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png
 *  ```
 */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/** When a user clicks the image, the click triggers this action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OnClick *onClick;

@end


/**
 *  Represents an image. [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1ImageComponent : GTLRObject

/** The accessibility label for the image. */
@property(nonatomic, copy, nullable) NSString *altText;

/** The border style to apply to the image. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1BorderStyle *borderStyle;

/** The crop style to apply to the image. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle *cropStyle;

/** The image URL. */
@property(nonatomic, copy, nullable) NSString *imageUri;

@end


/**
 *  Represents the crop style applied to an image. [Google Workspace Add-ons and
 *  Chat apps](https://developers.google.com/workspace/extend): For example,
 *  here's how to apply a 16:9 aspect ratio: ``` cropStyle { "type":
 *  "RECTANGLE_CUSTOM", "aspectRatio": 16/9 } ```
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle : GTLRObject

/**
 *  The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`. For example,
 *  here's how to apply a 16:9 aspect ratio: ``` cropStyle { "type":
 *  "RECTANGLE_CUSTOM", "aspectRatio": 16/9 } ```
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aspectRatio;

/**
 *  The crop type.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Circle
 *        Applies a circular crop. (Value: "CIRCLE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_ImageCropTypeUnspecified
 *        Don't use. Unspecified. (Value: "IMAGE_CROP_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Rectangle43
 *        Applies a rectangular crop with a 4:3 aspect ratio. (Value:
 *        "RECTANGLE_4_3")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_RectangleCustom
 *        Applies a rectangular crop with a custom aspect ratio. Set the custom
 *        aspect ratio with `aspectRatio`. (Value: "RECTANGLE_CUSTOM")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Square
 *        Default value. Applies a square crop. (Value: "SQUARE")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A [Google Material Icon](https://fonts.google.com/icons), which includes
 *  over 2500+ options. For example, to display a [checkbox
 *  icon](https://fonts.google.com/icons?selected=Material%20Symbols%20Outlined%3Acheck_box%3AFILL%400%3Bwght%40400%3BGRAD%400%3Bopsz%4048)
 *  with customized weight and grade, write the following: ``` { "name":
 *  "check_box", "fill": true, "weight": 300, "grade": -25 } ``` [Google Chat
 *  apps](https://developers.google.com/workspace/chat):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1MaterialIcon : GTLRObject

/**
 *  Whether the icon renders as filled. Default value is false. To preview
 *  different icon settings, go to [Google Font
 *  Icons](https://fonts.google.com/icons) and adjust the settings under
 *  **Customize**.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fill;

/**
 *  Weight and grade affect a symbol’s thickness. Adjustments to grade are more
 *  granular than adjustments to weight and have a small impact on the size of
 *  the symbol. Choose from {-25, 0, 200}. If absent, default value is 0. If any
 *  other value is specified, the default value is used. To preview different
 *  icon settings, go to [Google Font Icons](https://fonts.google.com/icons) and
 *  adjust the settings under **Customize**.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *grade;

/**
 *  The icon name defined in the [Google Material
 *  Icon](https://fonts.google.com/icons), for example, `check_box`. Any invalid
 *  names are abandoned and replaced with empty string and results in the icon
 *  failing to render.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The stroke weight of the icon. Choose from {100, 200, 300, 400, 500, 600,
 *  700}. If absent, default value is 400. If any other value is specified, the
 *  default value is used. To preview different icon settings, go to [Google
 *  Font Icons](https://fonts.google.com/icons) and adjust the settings under
 *  **Customize**.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *weight;

@end


/**
 *  Represents how to respond when users click an interactive element on a card,
 *  such as a button. [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1OnClick : GTLRObject

/** If specified, an action is triggered by this `onClick`. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *action;

/**
 *  A new card is pushed to the card stack after clicking if specified. [Google
 *  Workspace Add-ons](https://developers.google.com/workspace/add-ons):
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Card *card;

/**
 *  An add-on triggers this action when the action needs to open a link. This
 *  differs from the `open_link` above in that this needs to talk to server to
 *  get the link. Thus some preparation work is required for web client to do
 *  before the open link action response comes back. [Google Workspace
 *  Add-ons](https://developers.google.com/workspace/add-ons):
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *openDynamicLinkAction;

/** If specified, this `onClick` triggers an open link action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OpenLink *openLink;

@end


/**
 *  Represents an `onClick` event that opens a hyperlink. [Google Workspace
 *  Add-ons and Chat apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1OpenLink : GTLRObject

/**
 *  Whether the client forgets about a link after opening it, or observes it
 *  until the window closes. [Google Workspace
 *  Add-ons](https://developers.google.com/workspace/add-ons):
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OnClose_Nothing Default
 *        value. The card doesn't reload; nothing happens. (Value: "NOTHING")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OnClose_Reload Reloads
 *        the card after the child window closes. If used in conjunction with
 *        [`OpenAs.OVERLAY`](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#openas),
 *        the child window acts as a modal dialog and the parent card is blocked
 *        until the child window closes. (Value: "RELOAD")
 */
@property(nonatomic, copy, nullable) NSString *onClose;

/**
 *  How to open a link. [Google Workspace
 *  Add-ons](https://developers.google.com/workspace/add-ons):
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OpenAs_FullSize The
 *        link opens as a full-size window (if that's the frame used by the
 *        client). (Value: "FULL_SIZE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OpenAs_Overlay The link
 *        opens as an overlay, such as a pop-up. (Value: "OVERLAY")
 */
@property(nonatomic, copy, nullable) NSString *openAs;

/** The URL to open. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  For a `SelectionInput` widget that uses a multiselect menu, a data source
 *  from Google Workspace. Used to populate items in a multiselect menu. [Google
 *  Chat apps](https://developers.google.com/workspace/chat):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1PlatformDataSource : GTLRObject

/**
 *  A data source shared by all Google Workspace applications, such as users in
 *  a Google Workspace organization.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1PlatformDataSource_CommonDataSource_Unknown
 *        Default value. Don't use. (Value: "UNKNOWN")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1PlatformDataSource_CommonDataSource_User
 *        Google Workspace users. The user can only view and select users from
 *        their Google Workspace organization. (Value: "USER")
 */
@property(nonatomic, copy, nullable) NSString *commonDataSource;

/**
 *  A data source that's unique to a Google Workspace host application, such
 *  spaces in Google Chat. This field supports the Google API Client Libraries
 *  but isn't available in the Cloud Client Libraries. To learn more, see
 *  [Install the client
 *  libraries](https://developers.google.com/workspace/chat/libraries).
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_HostAppDataSourceMarkup *hostAppDataSource;

@end


/**
 *  A section contains a collection of widgets that are rendered vertically in
 *  the order that they're specified. [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Section : GTLRObject

/**
 *  Indicates whether this section is collapsible. Collapsible sections hide
 *  some or all widgets, but users can expand the section to reveal the hidden
 *  widgets by clicking **Show more**. Users can hide the widgets again by
 *  clicking **Show less**. To determine which widgets are hidden, specify
 *  `uncollapsibleWidgetsCount`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *collapsible;

/**
 *  Text that appears at the top of a section. Supports simple HTML formatted
 *  text. For more information about formatting text, see [Formatting text in
 *  Google Chat
 *  apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
 *  and [Formatting text in Google Workspace
 *  Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
 */
@property(nonatomic, copy, nullable) NSString *header;

/**
 *  The number of uncollapsible widgets which remain visible even when a section
 *  is collapsed. For example, when a section contains five widgets and the
 *  `uncollapsibleWidgetsCount` is set to `2`, the first two widgets are always
 *  shown and the last three are collapsed by default. The
 *  `uncollapsibleWidgetsCount` is taken into account only when `collapsible` is
 *  `true`.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *uncollapsibleWidgetsCount;

/** All the widgets in the section. Must contain at least one widget. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1Widget *> *widgets;

@end


/**
 *  A widget that creates one or more UI items that users can select. For
 *  example, a dropdown menu or checkboxes. You can use this widget to collect
 *  data that can be predicted or enumerated. For an example in Google Chat
 *  apps, see [Add selectable UI
 *  elements](/workspace/chat/design-interactive-card-dialog#add_selectable_ui_elements).
 *  Chat apps can process the value of items that users select or input. For
 *  details about working with form inputs, see [Receive form
 *  data](https://developers.google.com/workspace/chat/read-form-data). To
 *  collect undefined or abstract data from users, use the TextInput widget.
 *  [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1SelectionInput : GTLRCollectionObject

/** An external data source, such as a relational data base. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *externalDataSource;

/**
 *  An array of selectable items. For example, an array of radio buttons or
 *  checkboxes. Supports up to 100 items.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1SelectionItem *> *items;

/**
 *  The text that appears above the selection input field in the user interface.
 *  Specify text that helps the user enter the information your app needs. For
 *  example, if users are selecting the urgency of a work ticket from a
 *  drop-down menu, the label might be "Urgency" or "Select urgency".
 */
@property(nonatomic, copy, nullable) NSString *label;

/**
 *  For multiselect menus, the maximum number of items that a user can select.
 *  Minimum value is 1 item. If unspecified, defaults to 3 items.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *multiSelectMaxSelectedItems;

/**
 *  For multiselect menus, the number of text characters that a user inputs
 *  before the app queries autocomplete and displays suggested items in the
 *  menu. If unspecified, defaults to 0 characters for static data sources and 3
 *  characters for external data sources.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *multiSelectMinQueryLength;

/**
 *  Required. The name that identifies the selection input in a form input
 *  event. For details about working with form inputs, see [Receive form
 *  data](https://developers.google.com/workspace/chat/read-form-data).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If specified, the form is submitted when the selection changes. If not
 *  specified, you must specify a separate button that submits the form. For
 *  details about working with form inputs, see [Receive form
 *  data](https://developers.google.com/workspace/chat/read-form-data).
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *onChangeAction;

/** A data source from Google Workspace. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1PlatformDataSource *platformDataSource;

/**
 *  The type of items that are displayed to users in a `SelectionInput` widget.
 *  Selection types support different types of interactions. For example, users
 *  can select one or more checkboxes, but they can only select one value from a
 *  dropdown menu.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_CheckBox A
 *        set of checkboxes. Users can select one or more checkboxes. (Value:
 *        "CHECK_BOX")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_Dropdown A
 *        dropdown menu. Users can select one item from the menu. (Value:
 *        "DROPDOWN")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_MultiSelect
 *        A multiselect menu for static or dynamic data. From the menu bar,
 *        users select one or more items. Users can also input values to
 *        populate dynamic data. For example, users can start typing the name of
 *        a Google Chat space and the widget autosuggests the space. To populate
 *        items for a multiselect menu, you can use one of the following types
 *        of data sources: * Static data: Items are specified as `SelectionItem`
 *        objects in the widget. Up to 100 items. * Google Workspace data: Items
 *        are populated using data from Google Workspace, such as Google
 *        Workspace users or Google Chat spaces. * External data: Items are
 *        populated from an external data source outside of Google Workspace.
 *        For examples of how to implement multiselect menus, see [Add a
 *        multiselect
 *        menu](https://developers.google.com/workspace/chat/design-interactive-card-dialog#multiselect-menu).
 *        [Google Workspace Add-ons and Chat
 *        apps](https://developers.google.com/workspace/extend): (Value:
 *        "MULTI_SELECT")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_RadioButton
 *        A set of radio buttons. Users can select one radio button. (Value:
 *        "RADIO_BUTTON")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_Switch A set
 *        of switches. Users can turn on one or more switches. (Value: "SWITCH")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  An item that users can select in a selection input, such as a checkbox or
 *  switch. [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1SelectionItem : GTLRObject

/**
 *  For multiselect menus, a text description or label that's displayed below
 *  the item's `text` field.
 */
@property(nonatomic, copy, nullable) NSString *bottomText;

/**
 *  Whether the item is selected by default. If the selection input only accepts
 *  one value (such as for radio buttons or a dropdown menu), only set this
 *  field for one item.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *selected;

/**
 *  For multiselect menus, the URL for the icon displayed next to the item's
 *  `text` field. Supports PNG and JPEG files. Must be an `HTTPS` URL. For
 *  example,
 *  `https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png`.
 */
@property(nonatomic, copy, nullable) NSString *startIconUri;

/** The text that identifies or describes the item to users. */
@property(nonatomic, copy, nullable) NSString *text;

/**
 *  The value associated with this item. The client should use this as a form
 *  input value. For details about working with form inputs, see [Receive form
 *  data](https://developers.google.com/workspace/chat/read-form-data).
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  One suggested value that users can enter in a text input field. [Google
 *  Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1SuggestionItem : GTLRObject

/**
 *  The value of a suggested input to a text input field. This is equivalent to
 *  what users enter themselves.
 */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Suggested values that users can enter. These values appear when users click
 *  inside the text input field. As users type, the suggested values dynamically
 *  filter to match what the users have typed. For example, a text input field
 *  for programming language might suggest Java, JavaScript, Python, and C++.
 *  When users start typing `Jav`, the list of suggestions filters to show
 *  `Java` and `JavaScript`. Suggested values help guide users to enter values
 *  that your app can make sense of. When referring to JavaScript, some users
 *  might enter `javascript` and others `java script`. Suggesting `JavaScript`
 *  can standardize how users interact with your app. When specified,
 *  `TextInput.type` is always `SINGLE_LINE`, even if it's set to
 *  `MULTIPLE_LINE`. [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Suggestions : GTLRCollectionObject

/**
 *  A list of suggestions used for autocomplete recommendations in text input
 *  fields.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1SuggestionItem *> *items;

@end


/**
 *  Either a toggle-style switch or a checkbox inside a `decoratedText` widget.
 *  [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend): Only supported in the
 *  `decoratedText` widget.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1SwitchControl : GTLRObject

/**
 *  How the switch appears in the user interface. [Google Workspace Add-ons and
 *  Chat apps](https://developers.google.com/workspace/extend):
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_Checkbox
 *        Deprecated in favor of `CHECK_BOX`. (Value: "CHECKBOX")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_CheckBox
 *        A checkbox. (Value: "CHECK_BOX")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_Switch
 *        A toggle-style switch. (Value: "SWITCH")
 */
@property(nonatomic, copy, nullable) NSString *controlType;

/**
 *  The name by which the switch widget is identified in a form input event. For
 *  details about working with form inputs, see [Receive form
 *  data](https://developers.google.com/workspace/chat/read-form-data).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The action to perform when the switch state is changed, such as what
 *  function to run.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *onChangeAction;

/**
 *  When `true`, the switch is selected.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *selected;

/**
 *  The value entered by a user, returned as part of a form input event. For
 *  details about working with form inputs, see [Receive form
 *  data](https://developers.google.com/workspace/chat/read-form-data).
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A field in which users can enter text. Supports suggestions and on-change
 *  actions. For an example in Google Chat apps, see [Add a field in which a
 *  user can enter
 *  text](https://developers.google.com/workspace/chat/design-interactive-card-dialog#add_a_field_in_which_a_user_can_enter_text).
 *  Chat apps receive and can process the value of entered text during form
 *  input events. For details about working with form inputs, see [Receive form
 *  data](https://developers.google.com/workspace/chat/read-form-data). When you
 *  need to collect undefined or abstract data from users, use a text input. To
 *  collect defined or enumerated data from users, use the SelectionInput
 *  widget. [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1TextInput : GTLRObject

/**
 *  Optional. Specify what action to take when the text input field provides
 *  suggestions to users who interact with it. If unspecified, the suggestions
 *  are set by `initialSuggestions` and are processed by the client. If
 *  specified, the app takes the action specified here, such as running a custom
 *  function. [Google Workspace
 *  Add-ons](https://developers.google.com/workspace/add-ons):
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *autoCompleteAction;

/**
 *  Text that appears below the text input field meant to assist users by
 *  prompting them to enter a certain value. This text is always visible.
 *  Required if `label` is unspecified. Otherwise, optional.
 */
@property(nonatomic, copy, nullable) NSString *hintText;

/**
 *  Suggested values that users can enter. These values appear when users click
 *  inside the text input field. As users type, the suggested values dynamically
 *  filter to match what the users have typed. For example, a text input field
 *  for programming language might suggest Java, JavaScript, Python, and C++.
 *  When users start typing `Jav`, the list of suggestions filters to show just
 *  `Java` and `JavaScript`. Suggested values help guide users to enter values
 *  that your app can make sense of. When referring to JavaScript, some users
 *  might enter `javascript` and others `java script`. Suggesting `JavaScript`
 *  can standardize how users interact with your app. When specified,
 *  `TextInput.type` is always `SINGLE_LINE`, even if it's set to
 *  `MULTIPLE_LINE`. [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Suggestions *initialSuggestions;

/**
 *  The text that appears above the text input field in the user interface.
 *  Specify text that helps the user enter the information your app needs. For
 *  example, if you are asking someone's name, but specifically need their
 *  surname, write `surname` instead of `name`. Required if `hintText` is
 *  unspecified. Otherwise, optional.
 */
@property(nonatomic, copy, nullable) NSString *label;

/**
 *  The name by which the text input is identified in a form input event. For
 *  details about working with form inputs, see [Receive form
 *  data](https://developers.google.com/workspace/chat/read-form-data).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  What to do when a change occurs in the text input field. For example, a user
 *  adding to the field or deleting text. Examples of actions to take include
 *  running a custom function or opening a
 *  [dialog](https://developers.google.com/workspace/chat/dialogs) in Google
 *  Chat.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *onChangeAction;

/**
 *  Text that appears in the text input field when the field is empty. Use this
 *  text to prompt users to enter a value. For example, `Enter a number from 0
 *  to 100`. [Google Chat apps](https://developers.google.com/workspace/chat):
 */
@property(nonatomic, copy, nullable) NSString *placeholderText;

/**
 *  How a text input field appears in the user interface. For example, whether
 *  the field is single or multi-line.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1TextInput_Type_MultipleLine The
 *        text input field has a fixed height of multiple lines. (Value:
 *        "MULTIPLE_LINE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1TextInput_Type_SingleLine The
 *        text input field has a fixed height of one line. (Value:
 *        "SINGLE_LINE")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The value entered by a user, returned as part of a form input event. For
 *  details about working with form inputs, see [Receive form
 *  data](https://developers.google.com/workspace/chat/read-form-data).
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A paragraph of text that supports formatting. For an example in Google Chat
 *  apps, see [Add a paragraph of formatted
 *  text](https://developers.google.com/workspace/chat/add-text-image-card-dialog#add_a_paragraph_of_formatted_text).
 *  For more information about formatting text, see [Formatting text in Google
 *  Chat
 *  apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
 *  and [Formatting text in Google Workspace
 *  Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
 *  [Google Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend):
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1TextParagraph : GTLRObject

/** The text that's shown in the widget. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Each card is made up of widgets. A widget is a composite object that can
 *  represent one of text, images, buttons, and other object types.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Widget : GTLRObject

/**
 *  A list of buttons. For example, the following JSON creates two buttons. The
 *  first is a blue text button and the second is an image button that opens a
 *  link: ``` "buttonList": { "buttons": [ { "text": "Edit", "color": { "red":
 *  0, "green": 0, "blue": 1, }, "disabled": true, }, { "icon": { "knownIcon":
 *  "INVITE", "altText": "check calendar" }, "onClick": { "openLink": { "url":
 *  "https://example.com/calendar" } } } ] } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1ButtonList *buttonList;

/**
 *  Displays up to 2 columns. To include more than 2 columns, or to use rows,
 *  use the `Grid` widget. For example, the following JSON creates 2 columns
 *  that each contain text paragraphs: ``` "columns": { "columnItems": [ {
 *  "horizontalSizeStyle": "FILL_AVAILABLE_SPACE", "horizontalAlignment":
 *  "CENTER", "verticalAlignment": "CENTER", "widgets": [ { "textParagraph": {
 *  "text": "First column text paragraph" } } ] }, { "horizontalSizeStyle":
 *  "FILL_AVAILABLE_SPACE", "horizontalAlignment": "CENTER",
 *  "verticalAlignment": "CENTER", "widgets": [ { "textParagraph": { "text":
 *  "Second column text paragraph" } } ] } ] } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Columns *columns;

/**
 *  Displays a widget that lets users input a date, time, or date and time. For
 *  example, the following JSON creates a date time picker to schedule an
 *  appointment: ``` "dateTimePicker": { "name": "appointment_time", "label":
 *  "Book your appointment at:", "type": "DATE_AND_TIME", "valueMsEpoch":
 *  "796435200000" } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1DateTimePicker *dateTimePicker;

/**
 *  Displays a decorated text item. For example, the following JSON creates a
 *  decorated text widget showing email address: ``` "decoratedText": { "icon":
 *  { "knownIcon": "EMAIL" }, "topLabel": "Email Address", "text":
 *  "sasha\@example.com", "bottomLabel": "This is a new Email address!",
 *  "switchControl": { "name": "has_send_welcome_email_to_sasha", "selected":
 *  false, "controlType": "CHECKBOX" } } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1DecoratedText *decoratedText;

/**
 *  Displays a horizontal line divider between widgets. For example, the
 *  following JSON creates a divider: ``` "divider": { } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Divider *divider;

/**
 *  Displays a grid with a collection of items. A grid supports any number of
 *  columns and items. The number of rows is determined by the upper bounds of
 *  the number items divided by the number of columns. A grid with 10 items and
 *  2 columns has 5 rows. A grid with 11 items and 2 columns has 6 rows. [Google
 *  Workspace Add-ons and Chat
 *  apps](https://developers.google.com/workspace/extend): For example, the
 *  following JSON creates a 2 column grid with a single item: ``` "grid": {
 *  "title": "A fine collection of items", "columnCount": 2, "borderStyle": {
 *  "type": "STROKE", "cornerRadius": 4 }, "items": [ { "image": { "imageUri":
 *  "https://www.example.com/image.png", "cropStyle": { "type": "SQUARE" },
 *  "borderStyle": { "type": "STROKE" } }, "title": "An item", "textAlignment":
 *  "CENTER" } ], "onClick": { "openLink": { "url": "https://www.example.com" }
 *  } } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Grid *grid;

/**
 *  Specifies whether widgets align to the left, right, or center of a column.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_Center
 *        Aligns widgets to the center of the column. (Value: "CENTER")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_End
 *        Aligns widgets to the end position of the column. For left-to-right
 *        layouts, aligns widgets to the right. For right-to-left layouts,
 *        aligns widgets to the left. (Value: "END")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_HorizontalAlignmentUnspecified
 *        Don't use. Unspecified. (Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_Start
 *        Default value. Aligns widgets to the start position of the column. For
 *        left-to-right layouts, aligns to the left. For right-to-left layouts,
 *        aligns to the right. (Value: "START")
 */
@property(nonatomic, copy, nullable) NSString *horizontalAlignment;

/**
 *  Displays an image. For example, the following JSON creates an image with
 *  alternative text: ``` "image": { "imageUrl":
 *  "https://developers.google.com/workspace/chat/images/quickstart-app-avatar.png",
 *  "altText": "Chat app avatar" } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Image *image;

/**
 *  Displays a selection control that lets users select items. Selection
 *  controls can be checkboxes, radio buttons, switches, or dropdown menus. For
 *  example, the following JSON creates a dropdown menu that lets users choose a
 *  size: ``` "selectionInput": { "name": "size", "label": "Size" "type":
 *  "DROPDOWN", "items": [ { "text": "S", "value": "small", "selected": false },
 *  { "text": "M", "value": "medium", "selected": true }, { "text": "L",
 *  "value": "large", "selected": false }, { "text": "XL", "value":
 *  "extra_large", "selected": false } ] } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1SelectionInput *selectionInput;

/**
 *  Displays a text box that users can type into. For example, the following
 *  JSON creates a text input for an email address: ``` "textInput": { "name":
 *  "mailing_address", "label": "Mailing Address" } ``` As another example, the
 *  following JSON creates a text input for a programming language with static
 *  suggestions: ``` "textInput": { "name": "preferred_programing_language",
 *  "label": "Preferred Language", "initialSuggestions": { "items": [ { "text":
 *  "C++" }, { "text": "Java" }, { "text": "JavaScript" }, { "text": "Python" }
 *  ] } } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1TextInput *textInput;

/**
 *  Displays a text paragraph. Supports simple HTML formatted text. For more
 *  information about formatting text, see [Formatting text in Google Chat
 *  apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
 *  and [Formatting text in Google Workspace
 *  Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
 *  For example, the following JSON creates a bolded text: ``` "textParagraph":
 *  { "text": " *bold text*" } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1TextParagraph *textParagraph;

@end


/**
 *  The supported widgets that you can include in a column. [Google Workspace
 *  Add-ons and Chat apps](https://developers.google.com/workspace/extend)
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Widgets : GTLRObject

/** ButtonList widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1ButtonList *buttonList;

/** DateTimePicker widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1DateTimePicker *dateTimePicker;

/** DecoratedText widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1DecoratedText *decoratedText;

/** Image widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Image *image;

/** SelectionInput widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1SelectionInput *selectionInput;

/** TextInput widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1TextInput *textInput;

/** TextParagraph widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1TextParagraph *textParagraph;

@end


/**
 *  A Google Group in Google Chat.
 */
@interface GTLRHangoutsChat_Group : GTLRObject

/**
 *  Resource name for a Google Group. Represents a
 *  [group](https://cloud.google.com/identity/docs/reference/rest/v1/groups) in
 *  Cloud Identity Groups API. Format: groups/{group}
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  For a `SelectionInput` widget that uses a multiselect menu, a data source
 *  from a Google Workspace application. The data source populates selection
 *  items for the multiselect menu. [Google Chat
 *  apps](https://developers.google.com/workspace/chat):
 */
@interface GTLRHangoutsChat_HostAppDataSourceMarkup : GTLRObject

/** A data source from Google Chat. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_ChatClientDataSourceMarkup *chatDataSource;

@end


/**
 *  An image that's specified by a URL and can have an `onclick` action.
 */
@interface GTLRHangoutsChat_Image : GTLRObject

/**
 *  The aspect ratio of this image (width and height). This field lets you
 *  reserve the right height for the image while waiting for it to load. It's
 *  not meant to override the built-in aspect ratio of the image. If unset, the
 *  server fills it by prefetching the image.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aspectRatio;

/** The URL of the image. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/** The `onclick` action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OnClick *onClick;

@end


/**
 *  An image button with an `onclick` action.
 */
@interface GTLRHangoutsChat_ImageButton : GTLRObject

/**
 *  The icon specified by an `enum` that indices to an icon provided by Chat
 *  API.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Airplane Value "AIRPLANE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Bookmark Value "BOOKMARK"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Bus Value "BUS"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Car Value "CAR"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Clock Value "CLOCK"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_ConfirmationNumberIcon Value
 *        "CONFIRMATION_NUMBER_ICON"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Description Value "DESCRIPTION"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Dollar Value "DOLLAR"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Email Value "EMAIL"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_EventPerformer Value
 *        "EVENT_PERFORMER"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_EventSeat Value "EVENT_SEAT"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_FlightArrival Value
 *        "FLIGHT_ARRIVAL"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_FlightDeparture Value
 *        "FLIGHT_DEPARTURE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Hotel Value "HOTEL"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_HotelRoomType Value
 *        "HOTEL_ROOM_TYPE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_IconUnspecified Value
 *        "ICON_UNSPECIFIED"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Invite Value "INVITE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_MapPin Value "MAP_PIN"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Membership Value "MEMBERSHIP"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_MultiplePeople Value
 *        "MULTIPLE_PEOPLE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Offer Value "OFFER"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Person Value "PERSON"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Phone Value "PHONE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_RestaurantIcon Value
 *        "RESTAURANT_ICON"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_ShoppingCart Value
 *        "SHOPPING_CART"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Star Value "STAR"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Store Value "STORE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Ticket Value "TICKET"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Train Value "TRAIN"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_VideoCamera Value
 *        "VIDEO_CAMERA"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_VideoPlay Value "VIDEO_PLAY"
 */
@property(nonatomic, copy, nullable) NSString *icon;

/** The icon specified by a URL. */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The name of this `image_button` that's used for accessibility. Default value
 *  is provided if this name isn't specified.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The `onclick` action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OnClick *onClick;

@end


/**
 *  Types of data that users can [input on cards or
 *  dialogs](https://developers.google.com/chat/ui/read-form-data). The input
 *  type depends on the type of values that the widget accepts.
 */
@interface GTLRHangoutsChat_Inputs : GTLRObject

/**
 *  Date input values from a
 *  [`DateTimePicker`](https://developers.google.com/chat/api/reference/rest/v1/cards#DateTimePicker)
 *  widget that only accepts date values.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_DateInput *dateInput;

/**
 *  Date and time input values from a
 *  [`DateTimePicker`](https://developers.google.com/chat/api/reference/rest/v1/cards#DateTimePicker)
 *  widget that accepts both a date and time.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_DateTimeInput *dateTimeInput;

/**
 *  A list of strings that represent the values that the user inputs in a
 *  widget. If the widget only accepts one value, such as a
 *  [`TextInput`](https://developers.google.com/chat/api/reference/rest/v1/cards#TextInput)
 *  widget, the list contains one string object. If the widget accepts multiple
 *  values, such as a
 *  [`SelectionInput`](https://developers.google.com/chat/api/reference/rest/v1/cards#selectioninput)
 *  widget of checkboxes, the list contains a string object for each value that
 *  the user inputs or selects.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_StringInputs *stringInputs;

/**
 *  Time input values from a
 *  [`DateTimePicker`](https://developers.google.com/chat/api/reference/rest/v1/cards#DateTimePicker)
 *  widget that only accepts time values.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_TimeInput *timeInput;

@end


/**
 *  A UI element contains a key (label) and a value (content). This element can
 *  also contain some actions such as `onclick` button.
 */
@interface GTLRHangoutsChat_KeyValue : GTLRObject

/**
 *  The text of the bottom label. Formatted text supported. For more information
 *  about formatting text, see [Formatting text in Google Chat
 *  apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
 *  and [Formatting text in Google Workspace
 *  Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
 */
@property(nonatomic, copy, nullable) NSString *bottomLabel;

/** A button that can be clicked to trigger an action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Button *button;

/**
 *  The text of the content. Formatted text supported and always required. For
 *  more information about formatting text, see [Formatting text in Google Chat
 *  apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
 *  and [Formatting text in Google Workspace
 *  Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
 */
@property(nonatomic, copy, nullable) NSString *content;

/**
 *  If the content should be multiline.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *contentMultiline;

/**
 *  An enum value that's replaced by the Chat API with the corresponding icon
 *  image.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Airplane Value "AIRPLANE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Bookmark Value "BOOKMARK"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Bus Value "BUS"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Car Value "CAR"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Clock Value "CLOCK"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_ConfirmationNumberIcon Value
 *        "CONFIRMATION_NUMBER_ICON"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Description Value "DESCRIPTION"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Dollar Value "DOLLAR"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Email Value "EMAIL"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_EventPerformer Value
 *        "EVENT_PERFORMER"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_EventSeat Value "EVENT_SEAT"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_FlightArrival Value
 *        "FLIGHT_ARRIVAL"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_FlightDeparture Value
 *        "FLIGHT_DEPARTURE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Hotel Value "HOTEL"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_HotelRoomType Value
 *        "HOTEL_ROOM_TYPE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_IconUnspecified Value
 *        "ICON_UNSPECIFIED"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Invite Value "INVITE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_MapPin Value "MAP_PIN"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Membership Value "MEMBERSHIP"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_MultiplePeople Value
 *        "MULTIPLE_PEOPLE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Offer Value "OFFER"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Person Value "PERSON"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Phone Value "PHONE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_RestaurantIcon Value
 *        "RESTAURANT_ICON"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_ShoppingCart Value "SHOPPING_CART"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Star Value "STAR"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Store Value "STORE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Ticket Value "TICKET"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Train Value "TRAIN"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_VideoCamera Value "VIDEO_CAMERA"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_VideoPlay Value "VIDEO_PLAY"
 */
@property(nonatomic, copy, nullable) NSString *icon;

/** The icon specified by a URL. */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The `onclick` action. Only the top label, bottom label, and content region
 *  are clickable.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OnClick *onClick;

/**
 *  The text of the top label. Formatted text supported. For more information
 *  about formatting text, see [Formatting text in Google Chat
 *  apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
 *  and [Formatting text in Google Workspace
 *  Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
 */
@property(nonatomic, copy, nullable) NSString *topLabel;

@end


/**
 *  Response to list memberships of the space.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "memberships" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRHangoutsChat_ListMembershipsResponse : GTLRCollectionObject

/**
 *  Unordered list. List of memberships in the requested (or first) page.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Membership *> *memberships;

/**
 *  A token that you can send as `pageToken` to retrieve the next page of
 *  results. If empty, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for listing messages.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "messages" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRHangoutsChat_ListMessagesResponse : GTLRCollectionObject

/**
 *  List of messages.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Message *> *messages;

/**
 *  You can send a token as `pageToken` to retrieve the next page of results. If
 *  empty, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response to a list reactions request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "reactions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRHangoutsChat_ListReactionsResponse : GTLRCollectionObject

/**
 *  Continuation token to retrieve the next page of results. It's empty for the
 *  last page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of reactions in the requested (or first) page.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Reaction *> *reactions;

@end


/**
 *  Response message for listing space events.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "spaceEvents" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRHangoutsChat_ListSpaceEventsResponse : GTLRCollectionObject

/**
 *  Continuation token used to fetch more events. If this field is omitted,
 *  there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Results are returned in chronological order (oldest event first).
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_SpaceEvent *> *spaceEvents;

@end


/**
 *  The response for a list spaces request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "spaces" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRHangoutsChat_ListSpacesResponse : GTLRCollectionObject

/**
 *  You can send a token as `pageToken` to retrieve the next page of results. If
 *  empty, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of spaces in the requested (or first) page.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Space *> *spaces;

@end


/**
 *  A matched URL in a Chat message. Chat apps can preview matched URLs. For
 *  more information, see [Preview
 *  links](https://developers.google.com/chat/how-tos/preview-links).
 */
@interface GTLRHangoutsChat_MatchedUrl : GTLRObject

/** Output only. The URL that was matched. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Media resource.
 */
@interface GTLRHangoutsChat_Media : GTLRObject

/** Name of the media resource. */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end


/**
 *  Represents a membership relation in Google Chat, such as whether a user or
 *  Chat app is invited to, part of, or absent from a space.
 */
@interface GTLRHangoutsChat_Membership : GTLRObject

/**
 *  Optional. Immutable. The creation time of the membership, such as when a
 *  member joined or was invited to join a space. This field is output only,
 *  except when used to import historical memberships in import mode spaces.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. Immutable. The deletion time of the membership, such as when a
 *  member left or was removed from a space. This field is output only, except
 *  when used to import historical memberships in import mode spaces.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/** The Google Group the membership corresponds to. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Group *groupMember;

/**
 *  The Google Chat user or app the membership corresponds to. If your Chat app
 *  [authenticates as a
 *  user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
 *  the output populates the
 *  [user](https://developers.google.com/workspace/chat/api/reference/rest/v1/User)
 *  `name` and `type`.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *member;

/**
 *  Resource name of the membership, assigned by the server. Format:
 *  `spaces/{space}/members/{member}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. User's role within a Chat space, which determines their permitted
 *  actions in the space. This field can only be used as input in
 *  `UpdateMembership`.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Membership_Role_MembershipRoleUnspecified
 *        Default value. For users: they aren't a member of the space, but can
 *        be invited. For Google Groups: they're always assigned this role
 *        (other enum values might be used in the future). (Value:
 *        "MEMBERSHIP_ROLE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_Membership_Role_RoleManager A space manager. The
 *        user has all basic permissions plus administrative permissions that
 *        let them manage the space, like adding or removing members. Only
 *        supported in SpaceType.SPACE. (Value: "ROLE_MANAGER")
 *    @arg @c kGTLRHangoutsChat_Membership_Role_RoleMember A member of the
 *        space. The user has basic permissions, like sending messages to the
 *        space. In 1:1 and unnamed group conversations, everyone has this role.
 *        (Value: "ROLE_MEMBER")
 */
@property(nonatomic, copy, nullable) NSString *role;

/**
 *  Output only. State of the membership.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Membership_State_Invited The user is invited to
 *        join the space, but hasn't joined it. (Value: "INVITED")
 *    @arg @c kGTLRHangoutsChat_Membership_State_Joined The user is added to the
 *        space, and can participate in the space. (Value: "JOINED")
 *    @arg @c kGTLRHangoutsChat_Membership_State_MembershipStateUnspecified
 *        Default value. Don't use. (Value: "MEMBERSHIP_STATE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_Membership_State_NotAMember The user doesn't
 *        belong to the space and doesn't have a pending invitation to join the
 *        space. (Value: "NOT_A_MEMBER")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Event payload for multiple new memberships. Event type:
 *  `google.workspace.chat.membership.v1.batchCreated`
 */
@interface GTLRHangoutsChat_MembershipBatchCreatedEventData : GTLRObject

/** A list of new memberships. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_MembershipCreatedEventData *> *memberships;

@end


/**
 *  Event payload for multiple deleted memberships. Event type:
 *  `google.workspace.chat.membership.v1.batchDeleted`
 */
@interface GTLRHangoutsChat_MembershipBatchDeletedEventData : GTLRObject

/** A list of deleted memberships. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_MembershipDeletedEventData *> *memberships;

@end


/**
 *  Event payload for multiple updated memberships. Event type:
 *  `google.workspace.chat.membership.v1.batchUpdated`
 */
@interface GTLRHangoutsChat_MembershipBatchUpdatedEventData : GTLRObject

/** A list of updated memberships. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_MembershipUpdatedEventData *> *memberships;

@end


/**
 *  Represents the count of memberships of a space, grouped into categories.
 */
@interface GTLRHangoutsChat_MembershipCount : GTLRObject

/**
 *  Count of human users that have directly joined the space, not counting users
 *  joined by having membership in a joined group.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *joinedDirectHumanUserCount;

/**
 *  Count of all groups that have directly joined the space.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *joinedGroupCount;

@end


/**
 *  Event payload for a new membership. Event type:
 *  `google.workspace.chat.membership.v1.created`.
 */
@interface GTLRHangoutsChat_MembershipCreatedEventData : GTLRObject

/** The new membership. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Membership *membership;

@end


/**
 *  Event payload for a deleted membership. Event type:
 *  `google.workspace.chat.membership.v1.deleted`
 */
@interface GTLRHangoutsChat_MembershipDeletedEventData : GTLRObject

/**
 *  The deleted membership. Only the `name` and `state` fields are populated.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Membership *membership;

@end


/**
 *  Event payload for an updated membership. Event type:
 *  `google.workspace.chat.membership.v1.updated`
 */
@interface GTLRHangoutsChat_MembershipUpdatedEventData : GTLRObject

/** The updated membership. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Membership *membership;

@end


/**
 *  A message in a Google Chat space.
 */
@interface GTLRHangoutsChat_Message : GTLRObject

/**
 *  One or more interactive widgets that appear at the bottom of a message. You
 *  can add accessory widgets to messages that contain text, cards, or both text
 *  and cards. Not supported for messages that contain dialogs. For details, see
 *  [Add interactive widgets at the bottom of a
 *  message](https://developers.google.com/workspace/chat/create-messages#add-accessory-widgets).
 *  Creating a message with accessory widgets requires [app authentication]
 *  (https://developers.google.com/workspace/chat/authenticate-authorize-chat-app).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_AccessoryWidget *> *accessoryWidgets;

/**
 *  Input only. Parameters that a Chat app can use to configure how its response
 *  is posted.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_ActionResponse *actionResponse;

/** Output only. Annotations associated with the `text` in this message. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Annotation *> *annotations;

/**
 *  Output only. Plain-text body of the message with all Chat app mentions
 *  stripped out.
 */
@property(nonatomic, copy, nullable) NSString *argumentText;

/** Output only. GIF images that are attached to the message. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_AttachedGif *> *attachedGifs;

/** User-uploaded attachment. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Attachment *> *attachment;

/**
 *  Deprecated: Use `cards_v2` instead. Rich, formatted, and interactive cards
 *  that you can use to display UI elements such as: formatted texts, buttons,
 *  and clickable images. Cards are normally displayed below the plain-text body
 *  of the message. `cards` and `cards_v2` can have a maximum size of 32 KB.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Card *> *cards GTLR_DEPRECATED;

/**
 *  An array of
 *  [cards](https://developers.google.com/workspace/chat/api/reference/rest/v1/cards).
 *  Only Chat apps can create cards. If your Chat app [authenticates as a
 *  user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
 *  the messages can't contain cards. To learn how to create a message that
 *  contains cards, see [Send a
 *  message](https://developers.google.com/workspace/chat/create-messages).
 *  [Card builder](https://addons.gsuite.google.com/uikit/builder)
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_CardWithId *> *cardsV2;

/**
 *  Optional. A custom ID for the message. You can use field to identify a
 *  message, or to get, delete, or update a message. To set a custom ID, specify
 *  the
 *  [`messageId`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages/create#body.QUERY_PARAMETERS.message_id)
 *  field when you create the message. For details, see [Name a
 *  message](https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
 */
@property(nonatomic, copy, nullable) NSString *clientAssignedMessageId;

/**
 *  Optional. Immutable. For spaces created in Chat, the time at which the
 *  message was created. This field is output only, except when used in import
 *  mode spaces. For import mode spaces, set this field to the historical
 *  timestamp at which the message was created in the source in order to
 *  preserve the original creation time.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The time at which the message was deleted in Google Chat. If
 *  the message is never deleted, this field is empty.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/**
 *  Output only. Information about a deleted message. A message is deleted when
 *  `delete_time` is set.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_DeletionMetadata *deletionMetadata;

/** Output only. The list of emoji reaction summaries on the message. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_EmojiReactionSummary *> *emojiReactionSummaries;

/**
 *  A plain-text description of the message's cards, used when the actual cards
 *  can't be displayed—for example, mobile notifications.
 */
@property(nonatomic, copy, nullable) NSString *fallbackText;

/**
 *  Output only. Contains the message `text` with markups added to communicate
 *  formatting. This field might not capture all formatting visible in the UI,
 *  but includes the following: * [Markup
 *  syntax](https://developers.google.com/workspace/chat/format-messages) for
 *  bold, italic, strikethrough, monospace, monospace block, and bulleted list.
 *  * [User
 *  mentions](https://developers.google.com/workspace/chat/format-messages#messages-\@mention)
 *  using the format ``. * Custom hyperlinks using the format
 *  `<{url}|{rendered_text}>` where the first string is the URL and the second
 *  is the rendered text—for example, ``. * Custom emoji using the format
 *  `:{emoji_name}:`—for example, `:smile:`. This doesn't apply to Unicode
 *  emoji, such as `U+1F600` for a grinning face emoji. For more information,
 *  see [View text formatting sent in a
 *  message](https://developers.google.com/workspace/chat/format-messages#view_text_formatting_sent_in_a_message)
 */
@property(nonatomic, copy, nullable) NSString *formattedText;

/**
 *  Output only. The time at which the message was last edited by a user. If the
 *  message has never been edited, this field is empty.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastUpdateTime;

/**
 *  Output only. A URL in `spaces.messages.text` that matches a link preview
 *  pattern. For more information, see [Preview
 *  links](https://developers.google.com/workspace/chat/preview-links).
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_MatchedUrl *matchedUrl;

/**
 *  Resource name of the message. Format: `spaces/{space}/messages/{message}`
 *  Where `{space}` is the ID of the space where the message is posted and
 *  `{message}` is a system-assigned ID for the message. For example,
 *  `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`. If you set a custom
 *  ID when you create a message, you can use this ID to specify the message in
 *  a request by replacing `{message}` with the value from the
 *  `clientAssignedMessageId` field. For example,
 *  `spaces/AAAAAAAAAAA/messages/client-custom-name`. For details, see [Name a
 *  message](https://developers.google.com/workspace/chat/create-messages#name_a_created_message).
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Immutable. Input for creating a message, otherwise output only. The user
 *  that can view the message. When set, the message is private and only visible
 *  to the specified user and the Chat app. To include this field in your
 *  request, you must call the Chat API using [app
 *  authentication](https://developers.google.com/workspace/chat/authenticate-authorize-chat-app)
 *  and omit the following: *
 *  [Attachments](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages.attachments)
 *  * [Accessory
 *  widgets](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages#Message.AccessoryWidget)
 *  For details, see [Send a message
 *  privately](https://developers.google.com/workspace/chat/create-messages#private).
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *privateMessageViewer;

/**
 *  Output only. Information about a message that's quoted by a Google Chat user
 *  in a space. Google Chat users can quote a message to reply to it.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_QuotedMessageMetadata *quotedMessageMetadata;

/**
 *  Output only. The user who created the message. If your Chat app
 *  [authenticates as a
 *  user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
 *  the output populates the
 *  [user](https://developers.google.com/workspace/chat/api/reference/rest/v1/User)
 *  `name` and `type`.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *sender;

/** Output only. Slash command information, if applicable. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_SlashCommand *slashCommand;

/**
 *  If your Chat app [authenticates as a
 *  user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
 *  the output populates the
 *  [space](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces)
 *  `name`.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Space *space;

/**
 *  Plain-text body of the message. The first link to an image, video, or web
 *  page generates a [preview
 *  chip](https://developers.google.com/workspace/chat/preview-links). You can
 *  also [\@mention a Google Chat
 *  user](https://developers.google.com/workspace/chat/format-messages#messages-\@mention),
 *  or everyone in the space. To learn about creating text messages, see [Send a
 *  message](https://developers.google.com/workspace/chat/create-messages).
 */
@property(nonatomic, copy, nullable) NSString *text;

/**
 *  The thread the message belongs to. For example usage, see [Start or reply to
 *  a message
 *  thread](https://developers.google.com/workspace/chat/create-messages#create-message-thread).
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Thread *thread;

/**
 *  Output only. When `true`, the message is a response in a reply thread. When
 *  `false`, the message is visible in the space's top-level conversation as
 *  either the first message of a thread or a message with no threaded replies.
 *  If the space doesn't support reply in threads, this field is always `false`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *threadReply;

@end


/**
 *  Event payload for multiple new messages. Event type:
 *  `google.workspace.chat.message.v1.batchCreated`
 */
@interface GTLRHangoutsChat_MessageBatchCreatedEventData : GTLRObject

/** A list of new messages. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_MessageCreatedEventData *> *messages;

@end


/**
 *  Event payload for multiple deleted messages. Event type:
 *  `google.workspace.chat.message.v1.batchDeleted`
 */
@interface GTLRHangoutsChat_MessageBatchDeletedEventData : GTLRObject

/** A list of deleted messages. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_MessageDeletedEventData *> *messages;

@end


/**
 *  Event payload for multiple updated messages. Event type:
 *  `google.workspace.chat.message.v1.batchUpdated`
 */
@interface GTLRHangoutsChat_MessageBatchUpdatedEventData : GTLRObject

/** A list of updated messages. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_MessageUpdatedEventData *> *messages;

@end


/**
 *  Event payload for a new message. Event type:
 *  `google.workspace.chat.message.v1.created`
 */
@interface GTLRHangoutsChat_MessageCreatedEventData : GTLRObject

/** The new message. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Message *message;

@end


/**
 *  Event payload for a deleted message. Event type:
 *  `google.workspace.chat.message.v1.deleted`
 */
@interface GTLRHangoutsChat_MessageDeletedEventData : GTLRObject

/**
 *  The deleted message. Only the `name`, `createTime`, `deleteTime`, and
 *  `deletionMetadata` fields are populated.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Message *message;

@end


/**
 *  Event payload for an updated message. Event type:
 *  `google.workspace.chat.message.v1.updated`
 */
@interface GTLRHangoutsChat_MessageUpdatedEventData : GTLRObject

/** The updated message. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Message *message;

@end


/**
 *  An `onclick` action (for example, open a link).
 */
@interface GTLRHangoutsChat_OnClick : GTLRObject

/** A form action is triggered by this `onclick` action if specified. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_FormAction *action;

/** This `onclick` action triggers an open link action if specified. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OpenLink *openLink;

@end


/**
 *  A link that opens a new window.
 */
@interface GTLRHangoutsChat_OpenLink : GTLRObject

/** The URL to open. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Information about a quoted message.
 */
@interface GTLRHangoutsChat_QuotedMessageMetadata : GTLRObject

/**
 *  Output only. The timestamp when the quoted message was created or when the
 *  quoted message was last updated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastUpdateTime;

/**
 *  Output only. Resource name of the quoted message. Format:
 *  `spaces/{space}/messages/{message}`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A reaction to a message.
 */
@interface GTLRHangoutsChat_Reaction : GTLRObject

/** The emoji used in the reaction. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Emoji *emoji;

/**
 *  The resource name of the reaction. Format:
 *  `spaces/{space}/messages/{message}/reactions/{reaction}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The user who created the reaction. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *user;

@end


/**
 *  Event payload for multiple new reactions. Event type:
 *  `google.workspace.chat.reaction.v1.batchCreated`
 */
@interface GTLRHangoutsChat_ReactionBatchCreatedEventData : GTLRObject

/** A list of new reactions. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_ReactionCreatedEventData *> *reactions;

@end


/**
 *  Event payload for multiple deleted reactions. Event type:
 *  `google.workspace.chat.reaction.v1.batchDeleted`
 */
@interface GTLRHangoutsChat_ReactionBatchDeletedEventData : GTLRObject

/** A list of deleted reactions. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_ReactionDeletedEventData *> *reactions;

@end


/**
 *  Event payload for a new reaction. Event type:
 *  `google.workspace.chat.reaction.v1.created`
 */
@interface GTLRHangoutsChat_ReactionCreatedEventData : GTLRObject

/** The new reaction. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Reaction *reaction;

@end


/**
 *  Event payload for a deleted reaction. Type:
 *  `google.workspace.chat.reaction.v1.deleted`
 */
@interface GTLRHangoutsChat_ReactionDeletedEventData : GTLRObject

/** The deleted reaction. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Reaction *reaction;

@end


/**
 *  A rich link to a resource.
 */
@interface GTLRHangoutsChat_RichLinkMetadata : GTLRObject

/** Data for a chat space link. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_ChatSpaceLinkData *chatSpaceLinkData;

/** Data for a drive link. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_DriveLinkData *driveLinkData;

/**
 *  The rich link type.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_RichLinkMetadata_RichLinkType_ChatSpace A Chat
 *        space rich link type. For example, a space smart chip. (Value:
 *        "CHAT_SPACE")
 *    @arg @c kGTLRHangoutsChat_RichLinkMetadata_RichLinkType_DriveFile A Google
 *        Drive rich link type. (Value: "DRIVE_FILE")
 *    @arg @c kGTLRHangoutsChat_RichLinkMetadata_RichLinkType_RichLinkTypeUnspecified
 *        Default value for the enum. Don't use. (Value:
 *        "RICH_LINK_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *richLinkType;

/** The URI of this link. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Response with a list of spaces corresponding to the search spaces request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "spaces" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRHangoutsChat_SearchSpacesResponse : GTLRCollectionObject

/**
 *  A token that can be used to retrieve the next page. If this field is empty,
 *  there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A page of the requested spaces.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Space *> *spaces;

/**
 *  The total number of spaces that match the query, across all pages. If the
 *  result is over 10,000 spaces, this value is an estimate.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalSize;

@end


/**
 *  A section contains a collection of widgets that are rendered (vertically) in
 *  the order that they are specified. Across all platforms, cards have a narrow
 *  fixed width, so there's currently no need for layout properties (for
 *  example, float).
 */
@interface GTLRHangoutsChat_Section : GTLRObject

/**
 *  The header of the section. Formatted text is supported. For more information
 *  about formatting text, see [Formatting text in Google Chat
 *  apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
 *  and [Formatting text in Google Workspace
 *  Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
 */
@property(nonatomic, copy, nullable) NSString *header;

/** A section must contain at least one widget. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_WidgetMarkup *> *widgets;

@end


/**
 *  List of widget autocomplete results.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRHangoutsChat_SelectionItems : GTLRCollectionObject

/**
 *  An array of the SelectionItem objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1SelectionItem *> *items;

@end


/**
 *  Request to create a space and add specified users to it.
 */
@interface GTLRHangoutsChat_SetUpSpaceRequest : GTLRObject

/**
 *  Optional. The Google Chat users or groups to invite to join the space. Omit
 *  the calling user, as they are added automatically. The set currently allows
 *  up to 20 memberships (in addition to the caller). For human membership, the
 *  `Membership.member` field must contain a `user` with `name` populated
 *  (format: `users/{user}`) and `type` set to `User.Type.HUMAN`. You can only
 *  add human users when setting up a space (adding Chat apps is only supported
 *  for direct message setup with the calling app). You can also add members
 *  using the user's email as an alias for {user}. For example, the `user.name`
 *  can be `users/example\@gmail.com`. To invite Gmail users or users from
 *  external Google Workspace domains, user's email must be used for `{user}`.
 *  For Google group membership, the `Membership.group_member` field must
 *  contain a `group` with `name` populated (format `groups/{group}`). You can
 *  only add Google groups when setting `Space.spaceType` to `SPACE`. Optional
 *  when setting `Space.spaceType` to `SPACE`. Required when setting
 *  `Space.spaceType` to `GROUP_CHAT`, along with at least two memberships.
 *  Required when setting `Space.spaceType` to `DIRECT_MESSAGE` with a human
 *  user, along with exactly one membership. Must be empty when creating a 1:1
 *  conversation between a human and the calling Chat app (when setting
 *  `Space.spaceType` to `DIRECT_MESSAGE` and `Space.singleUserBotDm` to
 *  `true`).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Membership *> *memberships;

/**
 *  Optional. A unique identifier for this request. A random UUID is
 *  recommended. Specifying an existing request ID returns the space created
 *  with that ID instead of creating a new space. Specifying an existing request
 *  ID from the same Chat app with a different authenticated user returns an
 *  error.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. The `Space.spaceType` field is required. To create a space, set
 *  `Space.spaceType` to `SPACE` and set `Space.displayName`. If you receive the
 *  error message `ALREADY_EXISTS` when setting up a space, try a different
 *  `displayName`. An existing space within the Google Workspace organization
 *  might already use this display name. To create a group chat, set
 *  `Space.spaceType` to `GROUP_CHAT`. Don't set `Space.displayName`. To create
 *  a 1:1 conversation between humans, set `Space.spaceType` to `DIRECT_MESSAGE`
 *  and set `Space.singleUserBotDm` to `false`. Don't set `Space.displayName` or
 *  `Space.spaceDetails`. To create an 1:1 conversation between a human and the
 *  calling Chat app, set `Space.spaceType` to `DIRECT_MESSAGE` and
 *  `Space.singleUserBotDm` to `true`. Don't set `Space.displayName` or
 *  `Space.spaceDetails`. If a `DIRECT_MESSAGE` space already exists, that space
 *  is returned instead of creating a new space.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Space *space;

@end


/**
 *  A [slash
 *  command](https://developers.google.com/workspace/chat/slash-commands) in
 *  Google Chat.
 */
@interface GTLRHangoutsChat_SlashCommand : GTLRObject

/**
 *  The ID of the slash command invoked.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *commandId;

@end


/**
 *  Annotation metadata for slash commands (/).
 */
@interface GTLRHangoutsChat_SlashCommandMetadata : GTLRObject

/** The Chat app whose command was invoked. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *bot;

/**
 *  The command ID of the invoked slash command.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *commandId;

/** The name of the invoked slash command. */
@property(nonatomic, copy, nullable) NSString *commandName;

/**
 *  Indicates whether the slash command is for a dialog.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *triggersDialog;

/**
 *  The type of slash command.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_SlashCommandMetadata_Type_Add Add Chat app to
 *        space. (Value: "ADD")
 *    @arg @c kGTLRHangoutsChat_SlashCommandMetadata_Type_Invoke Invoke slash
 *        command in space. (Value: "INVOKE")
 *    @arg @c kGTLRHangoutsChat_SlashCommandMetadata_Type_TypeUnspecified
 *        Default value for the enum. Don't use. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A space in Google Chat. Spaces are conversations between two or more users
 *  or 1:1 messages between a user and a Chat app.
 */
@interface GTLRHangoutsChat_Space : GTLRObject

/**
 *  Optional. Specifies the [access
 *  setting](https://support.google.com/chat/answer/11971020) of the space. Only
 *  populated when the `space_type` is `SPACE`.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_AccessSettings *accessSettings;

/**
 *  Output only. For direct message (DM) spaces with a Chat app, whether the
 *  space was created by a Google Workspace administrator. Administrators can
 *  install and set up a direct message with a Chat app on behalf of users in
 *  their organization. To support admin install, your Chat app must feature
 *  direct messaging.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *adminInstalled;

/**
 *  Optional. Immutable. For spaces created in Chat, the time the space was
 *  created. This field is output only, except when used in import mode spaces.
 *  For import mode spaces, set this field to the historical timestamp at which
 *  the space was created in the source in order to preserve the original
 *  creation time. Only populated in the output when `spaceType` is `GROUP_CHAT`
 *  or `SPACE`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The space's display name. Required when [creating a
 *  space](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/create)
 *  with a `spaceType` of `SPACE`. If you receive the error message
 *  `ALREADY_EXISTS` when creating a space or updating the `displayName`, try a
 *  different `displayName`. An existing space within the Google Workspace
 *  organization might already use this display name. For direct messages, this
 *  field might be empty. Supports up to 128 characters.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Immutable. Whether this space permits any Google Chat user as a member.
 *  Input when creating a space in a Google Workspace organization. Omit this
 *  field when creating spaces in the following conditions: * The authenticated
 *  user uses a consumer account (unmanaged user account). By default, a space
 *  created by a consumer account permits any Google Chat user. For existing
 *  spaces, this field is output only.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *externalUserAllowed;

/**
 *  Optional. Whether this space is created in `Import Mode` as part of a data
 *  migration into Google Workspace. While spaces are being imported, they
 *  aren't visible to users until the import is complete.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *importMode;

/** Output only. Timestamp of the last message in the space. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastActiveTime;

/**
 *  Output only. The count of joined memberships grouped by member type.
 *  Populated when the `space_type` is `SPACE`, `DIRECT_MESSAGE` or
 *  `GROUP_CHAT`.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_MembershipCount *membershipCount;

/**
 *  Resource name of the space. Format: `spaces/{space}` Where `{space}`
 *  represents the system-assigned ID for the space. You can obtain the space ID
 *  by calling the
 *  [`spaces.list()`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces/list)
 *  method or from the space URL. For example, if the space URL is
 *  `https://mail.google.com/mail/u/0/#chat/space/AAAAAAAAA`, the space ID is
 *  `AAAAAAAAA`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Whether the space is a DM between a Chat app and a single human.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *singleUserBotDm;

/** Details about the space including description and rules. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_SpaceDetails *spaceDetails;

/**
 *  The message history state for messages and threads in this space.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Space_SpaceHistoryState_HistoryOff History off.
 *        [Messages and threads are kept for 24
 *        hours](https://support.google.com/chat/answer/7664687). (Value:
 *        "HISTORY_OFF")
 *    @arg @c kGTLRHangoutsChat_Space_SpaceHistoryState_HistoryOn History on.
 *        The organization's [Vault retention
 *        rules](https://support.google.com/vault/answer/7657597) specify for
 *        how long messages and threads are kept. (Value: "HISTORY_ON")
 *    @arg @c kGTLRHangoutsChat_Space_SpaceHistoryState_HistoryStateUnspecified
 *        Default value. Do not use. (Value: "HISTORY_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *spaceHistoryState;

/**
 *  Output only. The threading state in the Chat space.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Space_SpaceThreadingState_GroupedMessages Named
 *        spaces where the conversation is organized by topic. Topics and their
 *        replies are grouped together. (Value: "GROUPED_MESSAGES")
 *    @arg @c kGTLRHangoutsChat_Space_SpaceThreadingState_SpaceThreadingStateUnspecified
 *        Reserved. (Value: "SPACE_THREADING_STATE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_Space_SpaceThreadingState_ThreadedMessages Named
 *        spaces that support message threads. When users respond to a message,
 *        they can reply in-thread, which keeps their response in the context of
 *        the original message. (Value: "THREADED_MESSAGES")
 *    @arg @c kGTLRHangoutsChat_Space_SpaceThreadingState_UnthreadedMessages
 *        Direct messages (DMs) between two people and group conversations
 *        between 3 or more people. (Value: "UNTHREADED_MESSAGES")
 */
@property(nonatomic, copy, nullable) NSString *spaceThreadingState;

/**
 *  The type of space. Required when creating a space or updating the space type
 *  of a space. Output only for other usage.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Space_SpaceType_DirectMessage 1:1 messages
 *        between two humans or a human and a Chat app. (Value:
 *        "DIRECT_MESSAGE")
 *    @arg @c kGTLRHangoutsChat_Space_SpaceType_GroupChat Group conversations
 *        between 3 or more people. A `GROUP_CHAT` can include Chat apps.
 *        (Value: "GROUP_CHAT")
 *    @arg @c kGTLRHangoutsChat_Space_SpaceType_Space A place where people send
 *        messages, share files, and collaborate. A `SPACE` can include Chat
 *        apps. (Value: "SPACE")
 *    @arg @c kGTLRHangoutsChat_Space_SpaceType_SpaceTypeUnspecified Reserved.
 *        (Value: "SPACE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *spaceType;

/** Output only. The URI for a user to access the space. */
@property(nonatomic, copy, nullable) NSString *spaceUri;

/**
 *  Output only. Deprecated: Use `spaceThreadingState` instead. Whether messages
 *  are threaded in this space.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *threaded GTLR_DEPRECATED;

/**
 *  Output only. Deprecated: Use `space_type` instead. The type of a space.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Space_Type_Dm 1:1 Direct Message between a human
 *        and a Chat app, where all messages are flat. Note that this doesn't
 *        include direct messages between two humans. (Value: "DM")
 *    @arg @c kGTLRHangoutsChat_Space_Type_Room Conversations between two or
 *        more humans. (Value: "ROOM")
 *    @arg @c kGTLRHangoutsChat_Space_Type_TypeUnspecified Reserved. (Value:
 *        "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type GTLR_DEPRECATED;

@end


/**
 *  Event payload for multiple updates to a space. Event type:
 *  `google.workspace.chat.space.v1.batchUpdated`
 */
@interface GTLRHangoutsChat_SpaceBatchUpdatedEventData : GTLRObject

/** A list of updated spaces. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_SpaceUpdatedEventData *> *spaces;

@end


/**
 *  A data source that populates Google Chat spaces as selection items for a
 *  multiselect menu. Only populates spaces that the user is a member of.
 *  [Google Chat apps](https://developers.google.com/workspace/chat):
 */
@interface GTLRHangoutsChat_SpaceDataSource : GTLRObject

/**
 *  If set to `true`, the multiselect menu selects the current Google Chat space
 *  as an item by default.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *defaultToCurrentSpace;

@end


/**
 *  Details about the space including description and rules.
 */
@interface GTLRHangoutsChat_SpaceDetails : GTLRObject

/**
 *  Optional. A description of the space. For example, describe the space's
 *  discussion topic, functional purpose, or participants. Supports up to 150
 *  characters.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Optional. The space's rules, expectations, and etiquette. Supports up to
 *  5,000 characters.
 */
@property(nonatomic, copy, nullable) NSString *guidelines;

@end


/**
 *  An event that represents a change or activity in a Google Chat space. To
 *  learn more, see [Work with events from Google
 *  Chat](https://developers.google.com/workspace/chat/events-overview).
 */
@interface GTLRHangoutsChat_SpaceEvent : GTLRObject

/** Time when the event occurred. */
@property(nonatomic, strong, nullable) GTLRDateTime *eventTime;

/**
 *  Type of space event. Each event type has a batch version, which represents
 *  multiple instances of the event type that occur in a short period of time.
 *  For `spaceEvents.list()` requests, omit batch event types in your query
 *  filter. By default, the server returns both event type and its batch
 *  version. Supported event types for
 *  [messages](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages):
 *  * New message: `google.workspace.chat.message.v1.created` * Updated message:
 *  `google.workspace.chat.message.v1.updated` * Deleted message:
 *  `google.workspace.chat.message.v1.deleted` * Multiple new messages:
 *  `google.workspace.chat.message.v1.batchCreated` * Multiple updated messages:
 *  `google.workspace.chat.message.v1.batchUpdated` * Multiple deleted messages:
 *  `google.workspace.chat.message.v1.batchDeleted` Supported event types for
 *  [memberships](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.members):
 *  * New membership: `google.workspace.chat.membership.v1.created` * Updated
 *  membership: `google.workspace.chat.membership.v1.updated` * Deleted
 *  membership: `google.workspace.chat.membership.v1.deleted` * Multiple new
 *  memberships: `google.workspace.chat.membership.v1.batchCreated` * Multiple
 *  updated memberships: `google.workspace.chat.membership.v1.batchUpdated` *
 *  Multiple deleted memberships:
 *  `google.workspace.chat.membership.v1.batchDeleted` Supported event types for
 *  [reactions](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages.reactions):
 *  * New reaction: `google.workspace.chat.reaction.v1.created` * Deleted
 *  reaction: `google.workspace.chat.reaction.v1.deleted` * Multiple new
 *  reactions: `google.workspace.chat.reaction.v1.batchCreated` * Multiple
 *  deleted reactions: `google.workspace.chat.reaction.v1.batchDeleted`
 *  Supported event types about the
 *  [space](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces):
 *  * Updated space: `google.workspace.chat.space.v1.updated` * Multiple space
 *  updates: `google.workspace.chat.space.v1.batchUpdated`
 */
@property(nonatomic, copy, nullable) NSString *eventType;

/**
 *  Event payload for multiple new memberships. Event type:
 *  `google.workspace.chat.membership.v1.batchCreated`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_MembershipBatchCreatedEventData *membershipBatchCreatedEventData;

/**
 *  Event payload for multiple deleted memberships. Event type:
 *  `google.workspace.chat.membership.v1.batchDeleted`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_MembershipBatchDeletedEventData *membershipBatchDeletedEventData;

/**
 *  Event payload for multiple updated memberships. Event type:
 *  `google.workspace.chat.membership.v1.batchUpdated`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_MembershipBatchUpdatedEventData *membershipBatchUpdatedEventData;

/**
 *  Event payload for a new membership. Event type:
 *  `google.workspace.chat.membership.v1.created`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_MembershipCreatedEventData *membershipCreatedEventData;

/**
 *  Event payload for a deleted membership. Event type:
 *  `google.workspace.chat.membership.v1.deleted`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_MembershipDeletedEventData *membershipDeletedEventData;

/**
 *  Event payload for an updated membership. Event type:
 *  `google.workspace.chat.membership.v1.updated`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_MembershipUpdatedEventData *membershipUpdatedEventData;

/**
 *  Event payload for multiple new messages. Event type:
 *  `google.workspace.chat.message.v1.batchCreated`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_MessageBatchCreatedEventData *messageBatchCreatedEventData;

/**
 *  Event payload for multiple deleted messages. Event type:
 *  `google.workspace.chat.message.v1.batchDeleted`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_MessageBatchDeletedEventData *messageBatchDeletedEventData;

/**
 *  Event payload for multiple updated messages. Event type:
 *  `google.workspace.chat.message.v1.batchUpdated`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_MessageBatchUpdatedEventData *messageBatchUpdatedEventData;

/**
 *  Event payload for a new message. Event type:
 *  `google.workspace.chat.message.v1.created`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_MessageCreatedEventData *messageCreatedEventData;

/**
 *  Event payload for a deleted message. Event type:
 *  `google.workspace.chat.message.v1.deleted`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_MessageDeletedEventData *messageDeletedEventData;

/**
 *  Event payload for an updated message. Event type:
 *  `google.workspace.chat.message.v1.updated`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_MessageUpdatedEventData *messageUpdatedEventData;

/**
 *  Resource name of the space event. Format:
 *  `spaces/{space}/spaceEvents/{spaceEvent}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Event payload for multiple new reactions. Event type:
 *  `google.workspace.chat.reaction.v1.batchCreated`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_ReactionBatchCreatedEventData *reactionBatchCreatedEventData;

/**
 *  Event payload for multiple deleted reactions. Event type:
 *  `google.workspace.chat.reaction.v1.batchDeleted`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_ReactionBatchDeletedEventData *reactionBatchDeletedEventData;

/**
 *  Event payload for a new reaction. Event type:
 *  `google.workspace.chat.reaction.v1.created`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_ReactionCreatedEventData *reactionCreatedEventData;

/**
 *  Event payload for a deleted reaction. Event type:
 *  `google.workspace.chat.reaction.v1.deleted`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_ReactionDeletedEventData *reactionDeletedEventData;

/**
 *  Event payload for multiple updates to a space. Event type:
 *  `google.workspace.chat.space.v1.batchUpdated`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_SpaceBatchUpdatedEventData *spaceBatchUpdatedEventData;

/**
 *  Event payload for a space update. Event type:
 *  `google.workspace.chat.space.v1.updated`
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_SpaceUpdatedEventData *spaceUpdatedEventData;

@end


/**
 *  A user's read state within a space, used to identify read and unread
 *  messages.
 */
@interface GTLRHangoutsChat_SpaceReadState : GTLRObject

/**
 *  Optional. The time when the user's space read state was updated. Usually
 *  this corresponds with either the timestamp of the last read message, or a
 *  timestamp specified by the user to mark the last read position in a space.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastReadTime;

/**
 *  Resource name of the space read state. Format:
 *  `users/{user}/spaces/{space}/spaceReadState`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Event payload for an updated space. Event type:
 *  `google.workspace.chat.space.v1.updated`
 */
@interface GTLRHangoutsChat_SpaceUpdatedEventData : GTLRObject

/** The updated space. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Space *space;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRHangoutsChat_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRHangoutsChat_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRHangoutsChat_Status_Details_Item : GTLRObject
@end


/**
 *  Input parameter for regular widgets. For single-valued widgets, it is a
 *  single value list. For multi-valued widgets, such as checkbox, all the
 *  values are presented.
 */
@interface GTLRHangoutsChat_StringInputs : GTLRObject

/** An list of strings entered by the user. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *value;

@end


/**
 *  A button with text and `onclick` action.
 */
@interface GTLRHangoutsChat_TextButton : GTLRObject

/** The `onclick` action of the button. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OnClick *onClick;

/** The text of the button. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A paragraph of text. Formatted text supported. For more information about
 *  formatting text, see [Formatting text in Google Chat
 *  apps](https://developers.google.com/workspace/chat/format-messages#card-formatting)
 *  and [Formatting text in Google Workspace
 *  Add-ons](https://developers.google.com/apps-script/add-ons/concepts/widgets#text_formatting).
 */
@interface GTLRHangoutsChat_TextParagraph : GTLRObject

@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A thread in a Google Chat space. For example usage, see [Start or reply to a
 *  message
 *  thread](https://developers.google.com/workspace/chat/create-messages#create-message-thread).
 *  If you specify a thread when creating a message, you can set the
 *  [`messageReplyOption`](https://developers.google.com/workspace/chat/api/reference/rest/v1/spaces.messages/create#messagereplyoption)
 *  field to determine what happens if no matching thread is found.
 */
@interface GTLRHangoutsChat_Thread : GTLRObject

/** Resource name of the thread. Example: `spaces/{space}/threads/{thread}` */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Input for creating or updating a thread. Otherwise, output only.
 *  ID for the thread. Supports up to 4000 characters. This ID is unique to the
 *  Chat app that sets it. For example, if multiple Chat apps create a message
 *  using the same thread key, the messages are posted in different threads. To
 *  reply in a thread created by a person or another Chat app, specify the
 *  thread `name` field instead.
 */
@property(nonatomic, copy, nullable) NSString *threadKey;

@end


/**
 *  A user's read state within a thread, used to identify read and unread
 *  messages.
 */
@interface GTLRHangoutsChat_ThreadReadState : GTLRObject

/**
 *  The time when the user's thread read state was updated. Usually this
 *  corresponds with the timestamp of the last read message in a thread.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastReadTime;

/**
 *  Resource name of the thread read state. Format:
 *  `users/{user}/spaces/{space}/threads/{thread}/threadReadState`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Time input values.
 */
@interface GTLRHangoutsChat_TimeInput : GTLRObject

/**
 *  The hour on a 24-hour clock.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hours;

/**
 *  The number of minutes past the hour. Valid values are 0 to 59.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minutes;

@end


/**
 *  The timezone ID and offset from Coordinated Universal Time (UTC). Only
 *  supported for the event types
 *  [`CARD_CLICKED`](https://developers.google.com/chat/api/reference/rest/v1/EventType#ENUM_VALUES.CARD_CLICKED)
 *  and
 *  [`SUBMIT_DIALOG`](https://developers.google.com/chat/api/reference/rest/v1/DialogEventType#ENUM_VALUES.SUBMIT_DIALOG).
 */
@interface GTLRHangoutsChat_TimeZone : GTLRObject

/**
 *  The [IANA TZ](https://www.iana.org/time-zones) time zone database code, such
 *  as "America/Toronto".
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user timezone offset, in milliseconds, from Coordinated Universal Time
 *  (UTC).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offset;

@end


/**
 *  The response of the updated widget. Used to provide autocomplete options for
 *  a widget.
 */
@interface GTLRHangoutsChat_UpdatedWidget : GTLRObject

/** List of widget autocomplete results */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_SelectionItems *suggestions;

/**
 *  The ID of the updated widget. The ID must match the one for the widget that
 *  triggered the update request.
 */
@property(nonatomic, copy, nullable) NSString *widget;

@end


/**
 *  Request to upload an attachment.
 */
@interface GTLRHangoutsChat_UploadAttachmentRequest : GTLRObject

/** Required. The filename of the attachment, including the file extension. */
@property(nonatomic, copy, nullable) NSString *filename;

@end


/**
 *  Response of uploading an attachment.
 */
@interface GTLRHangoutsChat_UploadAttachmentResponse : GTLRObject

/** Reference to the uploaded attachment. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_AttachmentDataRef *attachmentDataRef;

@end


/**
 *  A user in Google Chat. When returned as an output from a request, if your
 *  Chat app [authenticates as a
 *  user](https://developers.google.com/workspace/chat/authenticate-authorize-chat-user),
 *  the output for a `User` resource only populates the user's `name` and
 *  `type`.
 */
@interface GTLRHangoutsChat_User : GTLRObject

/** Output only. The user's display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Unique identifier of the user's Google Workspace domain. */
@property(nonatomic, copy, nullable) NSString *domainId;

/**
 *  Output only. When `true`, the user is deleted or their profile is not
 *  visible.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isAnonymous;

/**
 *  Resource name for a Google Chat user. Format: `users/{user}`. `users/app`
 *  can be used as an alias for the calling app bot user. For human users,
 *  `{user}` is the same user identifier as: - the `id` for the
 *  [Person](https://developers.google.com/people/api/rest/v1/people) in the
 *  People API. For example, `users/123456789` in Chat API represents the same
 *  person as the `123456789` Person profile ID in People API. - the `id` for a
 *  [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users)
 *  in the Admin SDK Directory API. - the user's email address can be used as an
 *  alias for `{user}` in API requests. For example, if the People API Person
 *  profile ID for `user\@example.com` is `123456789`, you can use
 *  `users/user\@example.com` as an alias to reference `users/123456789`. Only
 *  the canonical resource name (for example `users/123456789`) will be returned
 *  from the API.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  User type.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_User_Type_Bot Chat app user. (Value: "BOT")
 *    @arg @c kGTLRHangoutsChat_User_Type_Human Human user. (Value: "HUMAN")
 *    @arg @c kGTLRHangoutsChat_User_Type_TypeUnspecified Default value for the
 *        enum. DO NOT USE. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Annotation metadata for user mentions (\@).
 */
@interface GTLRHangoutsChat_UserMentionMetadata : GTLRObject

/**
 *  The type of user mention.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_UserMentionMetadata_Type_Add Add user to space.
 *        (Value: "ADD")
 *    @arg @c kGTLRHangoutsChat_UserMentionMetadata_Type_Mention Mention user in
 *        space. (Value: "MENTION")
 *    @arg @c kGTLRHangoutsChat_UserMentionMetadata_Type_TypeUnspecified Default
 *        value for the enum. Don't use. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The user mentioned. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *user;

@end


/**
 *  A widget is a UI element that presents text and images.
 */
@interface GTLRHangoutsChat_WidgetMarkup : GTLRObject

/**
 *  A list of buttons. Buttons is also `oneof data` and only one of these fields
 *  should be set.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Button *> *buttons;

/** Display an image in this widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Image *image;

/** Display a key value item in this widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_KeyValue *keyValue;

/** Display a text paragraph in this widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_TextParagraph *textParagraph;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
