// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Chat API (chat/v1)
// Description:
//   Enables apps to fetch information and perform actions in Google Chat.
//   Authentication is a prerequisite for using the Google Chat REST API.
// Documentation:
//   https://developers.google.com/hangouts/chat

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRHangoutsChat_ActionParameter;
@class GTLRHangoutsChat_ActionResponse;
@class GTLRHangoutsChat_ActionStatus;
@class GTLRHangoutsChat_Annotation;
@class GTLRHangoutsChat_Attachment;
@class GTLRHangoutsChat_AttachmentDataRef;
@class GTLRHangoutsChat_Button;
@class GTLRHangoutsChat_Card;
@class GTLRHangoutsChat_CardAction;
@class GTLRHangoutsChat_CardHeader;
@class GTLRHangoutsChat_CardWithId;
@class GTLRHangoutsChat_Color;
@class GTLRHangoutsChat_CommonEventObject;
@class GTLRHangoutsChat_CommonEventObject_FormInputs;
@class GTLRHangoutsChat_CommonEventObject_Parameters;
@class GTLRHangoutsChat_DateInput;
@class GTLRHangoutsChat_DateTimeInput;
@class GTLRHangoutsChat_Dialog;
@class GTLRHangoutsChat_DialogAction;
@class GTLRHangoutsChat_DriveDataRef;
@class GTLRHangoutsChat_FormAction;
@class GTLRHangoutsChat_GoogleAppsCardV1Action;
@class GTLRHangoutsChat_GoogleAppsCardV1ActionParameter;
@class GTLRHangoutsChat_GoogleAppsCardV1BorderStyle;
@class GTLRHangoutsChat_GoogleAppsCardV1Button;
@class GTLRHangoutsChat_GoogleAppsCardV1ButtonList;
@class GTLRHangoutsChat_GoogleAppsCardV1Card;
@class GTLRHangoutsChat_GoogleAppsCardV1CardAction;
@class GTLRHangoutsChat_GoogleAppsCardV1CardFixedFooter;
@class GTLRHangoutsChat_GoogleAppsCardV1CardHeader;
@class GTLRHangoutsChat_GoogleAppsCardV1DateTimePicker;
@class GTLRHangoutsChat_GoogleAppsCardV1DecoratedText;
@class GTLRHangoutsChat_GoogleAppsCardV1Divider;
@class GTLRHangoutsChat_GoogleAppsCardV1Grid;
@class GTLRHangoutsChat_GoogleAppsCardV1GridItem;
@class GTLRHangoutsChat_GoogleAppsCardV1Icon;
@class GTLRHangoutsChat_GoogleAppsCardV1Image;
@class GTLRHangoutsChat_GoogleAppsCardV1ImageComponent;
@class GTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle;
@class GTLRHangoutsChat_GoogleAppsCardV1OnClick;
@class GTLRHangoutsChat_GoogleAppsCardV1OpenLink;
@class GTLRHangoutsChat_GoogleAppsCardV1Section;
@class GTLRHangoutsChat_GoogleAppsCardV1SelectionInput;
@class GTLRHangoutsChat_GoogleAppsCardV1SelectionItem;
@class GTLRHangoutsChat_GoogleAppsCardV1SuggestionItem;
@class GTLRHangoutsChat_GoogleAppsCardV1Suggestions;
@class GTLRHangoutsChat_GoogleAppsCardV1SwitchControl;
@class GTLRHangoutsChat_GoogleAppsCardV1TextInput;
@class GTLRHangoutsChat_GoogleAppsCardV1TextParagraph;
@class GTLRHangoutsChat_GoogleAppsCardV1Widget;
@class GTLRHangoutsChat_Image;
@class GTLRHangoutsChat_ImageButton;
@class GTLRHangoutsChat_Inputs;
@class GTLRHangoutsChat_KeyValue;
@class GTLRHangoutsChat_MatchedUrl;
@class GTLRHangoutsChat_Membership;
@class GTLRHangoutsChat_Message;
@class GTLRHangoutsChat_OnClick;
@class GTLRHangoutsChat_OpenLink;
@class GTLRHangoutsChat_Section;
@class GTLRHangoutsChat_SlashCommand;
@class GTLRHangoutsChat_SlashCommandMetadata;
@class GTLRHangoutsChat_Space;
@class GTLRHangoutsChat_SpaceDetails;
@class GTLRHangoutsChat_Status;
@class GTLRHangoutsChat_Status_Details_Item;
@class GTLRHangoutsChat_StringInputs;
@class GTLRHangoutsChat_TextButton;
@class GTLRHangoutsChat_TextParagraph;
@class GTLRHangoutsChat_Thread;
@class GTLRHangoutsChat_TimeInput;
@class GTLRHangoutsChat_TimeZone;
@class GTLRHangoutsChat_User;
@class GTLRHangoutsChat_UserMentionMetadata;
@class GTLRHangoutsChat_WidgetMarkup;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_ActionResponse.type

/**
 *  Presents a [dialog](https://developers.google.com/chat/how-tos/dialogs).
 *
 *  Value: "DIALOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_Dialog;
/**
 *  Post as a new message in the topic.
 *
 *  Value: "NEW_MESSAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_NewMessage;
/**
 *  Privately ask the user for additional auth or config.
 *
 *  Value: "REQUEST_CONFIG"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_RequestConfig;
/**
 *  Default type; will be handled as NEW_MESSAGE.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_TypeUnspecified;
/**
 *  Update the Chat app's message. This is only permitted on a CARD_CLICKED
 *  event where the message sender type is BOT.
 *
 *  Value: "UPDATE_MESSAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_UpdateMessage;
/**
 *  Update the cards on a user's message. This is only permitted as a response
 *  to a MESSAGE event with a matched url, or a CARD_CLICKED event where the
 *  message sender type is HUMAN. Text will be ignored.
 *
 *  Value: "UPDATE_USER_MESSAGE_CARDS"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionResponse_Type_UpdateUserMessageCards;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_ActionStatus.statusCode

/**
 *  The operation was aborted, typically due to a concurrency issue such as a
 *  sequencer check failure or transaction abort. See the guidelines above for
 *  deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP
 *  Mapping: 409 Conflict
 *
 *  Value: "ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_Aborted;
/**
 *  The entity that a client attempted to create (e.g., file or directory)
 *  already exists. HTTP Mapping: 409 Conflict
 *
 *  Value: "ALREADY_EXISTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_AlreadyExists;
/**
 *  The operation was cancelled, typically by the caller. HTTP Mapping: 499
 *  Client Closed Request
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_Cancelled;
/**
 *  Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server
 *  Error
 *
 *  Value: "DATA_LOSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_DataLoss;
/**
 *  The deadline expired before the operation could complete. For operations
 *  that change the state of the system, this error may be returned even if the
 *  operation has completed successfully. For example, a successful response
 *  from a server could have been delayed long enough for the deadline to
 *  expire. HTTP Mapping: 504 Gateway Timeout
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_DeadlineExceeded;
/**
 *  The operation was rejected because the system is not in a state required for
 *  the operation's execution. For example, the directory to be deleted is
 *  non-empty, an rmdir operation is applied to a non-directory, etc. Service
 *  implementors can use the following guidelines to decide between
 *  `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE`
 *  if the client can retry just the failing call. (b) Use `ABORTED` if the
 *  client should retry at a higher level. For example, when a client-specified
 *  test-and-set fails, indicating the client should restart a read-modify-write
 *  sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until
 *  the system state has been explicitly fixed. For example, if an "rmdir" fails
 *  because the directory is non-empty, `FAILED_PRECONDITION` should be returned
 *  since the client should not retry unless the files are deleted from the
 *  directory. HTTP Mapping: 400 Bad Request
 *
 *  Value: "FAILED_PRECONDITION"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_FailedPrecondition;
/**
 *  Internal errors. This means that some invariants expected by the underlying
 *  system have been broken. This error code is reserved for serious errors.
 *  HTTP Mapping: 500 Internal Server Error
 *
 *  Value: "INTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_Internal;
/**
 *  The client specified an invalid argument. Note that this differs from
 *  `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are
 *  problematic regardless of the state of the system (e.g., a malformed file
 *  name). HTTP Mapping: 400 Bad Request
 *
 *  Value: "INVALID_ARGUMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_InvalidArgument;
/**
 *  Some requested entity (e.g., file or directory) was not found. Note to
 *  server developers: if a request is denied for an entire class of users, such
 *  as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be
 *  used. If a request is denied for some users within a class of users, such as
 *  user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping:
 *  404 Not Found
 *
 *  Value: "NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_NotFound;
/**
 *  Not an error; returned on success. HTTP Mapping: 200 OK
 *
 *  Value: "OK"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_Ok;
/**
 *  The operation was attempted past the valid range. E.g., seeking or reading
 *  past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem
 *  that may be fixed if the system state changes. For example, a 32-bit file
 *  system will generate `INVALID_ARGUMENT` if asked to read at an offset that
 *  is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked
 *  to read from an offset past the current file size. There is a fair bit of
 *  overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using
 *  `OUT_OF_RANGE` (the more specific error) when it applies so that callers who
 *  are iterating through a space can easily look for an `OUT_OF_RANGE` error to
 *  detect when they are done. HTTP Mapping: 400 Bad Request
 *
 *  Value: "OUT_OF_RANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_OutOfRange;
/**
 *  The caller does not have permission to execute the specified operation.
 *  `PERMISSION_DENIED` must not be used for rejections caused by exhausting
 *  some resource (use `RESOURCE_EXHAUSTED` instead for those errors).
 *  `PERMISSION_DENIED` must not be used if the caller can not be identified
 *  (use `UNAUTHENTICATED` instead for those errors). This error code does not
 *  imply the request is valid or the requested entity exists or satisfies other
 *  pre-conditions. HTTP Mapping: 403 Forbidden
 *
 *  Value: "PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_PermissionDenied;
/**
 *  Some resource has been exhausted, perhaps a per-user quota, or perhaps the
 *  entire file system is out of space. HTTP Mapping: 429 Too Many Requests
 *
 *  Value: "RESOURCE_EXHAUSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_ResourceExhausted;
/**
 *  The request does not have valid authentication credentials for the
 *  operation. HTTP Mapping: 401 Unauthorized
 *
 *  Value: "UNAUTHENTICATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_Unauthenticated;
/**
 *  The service is currently unavailable. This is most likely a transient
 *  condition, which can be corrected by retrying with a backoff. Note that it
 *  is not always safe to retry non-idempotent operations. See the guidelines
 *  above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and
 *  `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable
 *
 *  Value: "UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_Unavailable;
/**
 *  The operation is not implemented or is not supported/enabled in this
 *  service. HTTP Mapping: 501 Not Implemented
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_Unimplemented;
/**
 *  Unknown error. For example, this error may be returned when a `Status` value
 *  received from another address space belongs to an error space that is not
 *  known in this address space. Also errors raised by APIs that do not return
 *  enough error information may be converted to this error. HTTP Mapping: 500
 *  Internal Server Error
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ActionStatus_StatusCode_Unknown;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Annotation.type

/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "ANNOTATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Annotation_Type_AnnotationTypeUnspecified;
/**
 *  A slash command is invoked.
 *
 *  Value: "SLASH_COMMAND"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Annotation_Type_SlashCommand;
/**
 *  A user is mentioned.
 *
 *  Value: "USER_MENTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Annotation_Type_UserMention;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Attachment.source

/** Value: "DRIVE_FILE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Attachment_Source_DriveFile;
/** Value: "SOURCE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Attachment_Source_SourceUnspecified;
/** Value: "UPLOADED_CONTENT" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Attachment_Source_UploadedContent;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_CardHeader.imageStyle

/**
 *  Circular border.
 *
 *  Value: "AVATAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CardHeader_ImageStyle_Avatar;
/**
 *  Square border.
 *
 *  Value: "IMAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CardHeader_ImageStyle_Image;
/** Value: "IMAGE_STYLE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CardHeader_ImageStyle_ImageStyleUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_CommonEventObject.hostApp

/**
 *  The add-on launches from Google Calendar.
 *
 *  Value: "CALENDAR"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Calendar;
/**
 *  A Google Chat app. Not used for Google Workspace Add-ons.
 *
 *  Value: "CHAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Chat;
/**
 *  Not used.
 *
 *  Value: "DEMO"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Demo;
/**
 *  The add-on launches from Google Docs.
 *
 *  Value: "DOCS"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Docs;
/**
 *  The add-on launches from Google Drawings.
 *
 *  Value: "DRAWINGS"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Drawings;
/**
 *  The add-on launches from Google Drive.
 *
 *  Value: "DRIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Drive;
/**
 *  The add-on launches from Gmail.
 *
 *  Value: "GMAIL"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Gmail;
/**
 *  The add-on launches from Google Meet.
 *
 *  Value: "MEET"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Meet;
/**
 *  The add-on launches from Google Sheets.
 *
 *  Value: "SHEETS"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Sheets;
/**
 *  The add-on launches from Google Slides.
 *
 *  Value: "SLIDES"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_Slides;
/**
 *  Google can't identify a host app.
 *
 *  Value: "UNSPECIFIED_HOST_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_HostApp_UnspecifiedHostApp;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_CommonEventObject.platform

/** Value: "ANDROID" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_Platform_Android;
/** Value: "IOS" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_Platform_Ios;
/** Value: "UNKNOWN_PLATFORM" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_Platform_UnknownPlatform;
/** Value: "WEB" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_CommonEventObject_Platform_Web;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_DeprecatedEvent.dialogEventType

/**
 *  The [dialog](https://developers.google.com/chat/how-tos/dialogs) was
 *  cancelled.
 *
 *  Value: "CANCEL_DIALOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_DialogEventType_CancelDialog;
/**
 *  Any user action that opens a
 *  [dialog](https://developers.google.com/chat/how-tos/dialogs).
 *
 *  Value: "REQUEST_DIALOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_DialogEventType_RequestDialog;
/**
 *  A card click event from a
 *  [dialog](https://developers.google.com/chat/how-tos/dialogs).
 *
 *  Value: "SUBMIT_DIALOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_DialogEventType_SubmitDialog;
/**
 *  This could be used when the corresponding event is not dialog related. For
 *  example an \@mention.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_DialogEventType_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_DeprecatedEvent.type

/**
 *  The Chat app was added to a space.
 *
 *  Value: "ADDED_TO_SPACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_Type_AddedToSpace;
/**
 *  The Chat app's interactive card was clicked.
 *
 *  Value: "CARD_CLICKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_Type_CardClicked;
/**
 *  A message was sent in a space.
 *
 *  Value: "MESSAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_Type_Message;
/**
 *  The Chat app was removed from a space.
 *
 *  Value: "REMOVED_FROM_SPACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_Type_RemovedFromSpace;
/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_DeprecatedEvent_Type_Unspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Action.interaction

/**
 *  Default value. The `action` executes as normal.
 *
 *  Value: "INTERACTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Action_Interaction_InteractionUnspecified;
/**
 *  Opens a [dialog](https://developers.google.com/chat/how-tos/dialogs), a
 *  windowed, card-based interface that Chat apps use to interact with users.
 *  Only supported by Chat apps in response to button-clicks on card messages.
 *  Not supported by Google Workspace Add-ons. If specified for an add-on, the
 *  entire card is stripped and nothing is shown in the client.
 *
 *  Value: "OPEN_DIALOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Action_Interaction_OpenDialog;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Action.loadIndicator

/**
 *  Nothing is displayed.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Action_LoadIndicator_None;
/**
 *  Displays a spinner to indicate that content is loading.
 *
 *  Value: "SPINNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Action_LoadIndicator_Spinner;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1BorderStyle.type

/**
 *  No value specified.
 *
 *  Value: "BORDER_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_BorderTypeUnspecified;
/**
 *  No border.
 *
 *  Value: "NO_BORDER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_NoBorder;
/**
 *  Outline.
 *
 *  Value: "STROKE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_Stroke;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Card.displayStyle

/**
 *  Do not use.
 *
 *  Value: "DISPLAY_STYLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_DisplayStyleUnspecified;
/**
 *  The header of the card appears at the bottom of the sidebar, partially
 *  covering the current top card of the stack. Clicking the header pops the
 *  card into the card stack. If the card has no header, a generated header is
 *  used instead.
 *
 *  Value: "PEEK"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_Peek;
/**
 *  Default value. The card is shown by replacing the view of the top card in
 *  the card stack.
 *
 *  Value: "REPLACE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_Replace;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1CardHeader.imageType

/**
 *  Applies a circular mask to the image.
 *
 *  Value: "CIRCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1CardHeader_ImageType_Circle;
/**
 *  Applies no cropping to the image.
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1CardHeader_ImageType_Square;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1DateTimePicker.type

/**
 *  The user can select a date and time.
 *
 *  Value: "DATE_AND_TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_DateAndTime;
/**
 *  The user can only select a date.
 *
 *  Value: "DATE_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_DateOnly;
/**
 *  The user can only select a time.
 *
 *  Value: "TIME_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_TimeOnly;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1GridItem.layout

/**
 *  No layout specified.
 *
 *  Value: "GRID_ITEM_LAYOUT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_GridItemLayoutUnspecified;
/**
 *  The title and subtitle are shown above the grid item's image.
 *
 *  Value: "TEXT_ABOVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_TextAbove;
/**
 *  The title and subtitle are shown below the grid item's image.
 *
 *  Value: "TEXT_BELOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_TextBelow;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1GridItem.textAlignment

/**
 *  Alignment to the center position.
 *
 *  Value: "CENTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_TextAlignment_Center;
/**
 *  Alignment to the end position.
 *
 *  Value: "END"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_TextAlignment_End;
/**
 *  Unspecified alignment.
 *
 *  Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_TextAlignment_HorizontalAlignmentUnspecified;
/**
 *  Alignment to the start position.
 *
 *  Value: "START"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1GridItem_TextAlignment_Start;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Icon.imageType

/**
 *  Applies a circular mask to the image.
 *
 *  Value: "CIRCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Icon_ImageType_Circle;
/**
 *  Applies no cropping to the image.
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Icon_ImageType_Square;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle.type

/**
 *  Applies a circular crop.
 *
 *  Value: "CIRCLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Circle;
/**
 *  No value specified.
 *
 *  Value: "IMAGE_CROP_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_ImageCropTypeUnspecified;
/**
 *  Applies a rectangular crop with a 4:3 aspect ratio.
 *
 *  Value: "RECTANGLE_4_3"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Rectangle43;
/**
 *  Applies a rectangular crop with a custom aspect ratio.
 *
 *  Value: "RECTANGLE_CUSTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_RectangleCustom;
/**
 *  Applies a square crop.
 *
 *  Value: "SQUARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Square;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1OpenLink.onClose

/**
 *  Default value. The card does not reload; nothing happens.
 *
 *  Value: "NOTHING"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OnClose_Nothing;
/**
 *  Reloads the card after the child window closes. If used in conjunction with
 *  [OpenAs.OVERLAY](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#openas),
 *  the child window acts as a modal dialog and the parent card is blocked until
 *  the child window closes.
 *
 *  Value: "RELOAD"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OnClose_Reload;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1OpenLink.openAs

/**
 *  The link opens as a full size window (if that's the frame used by the
 *  client.
 *
 *  Value: "FULL_SIZE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OpenAs_FullSize;
/**
 *  The link opens as an overlay, such as a pop-up.
 *
 *  Value: "OVERLAY"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OpenAs_Overlay;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1SelectionInput.type

/**
 *  A checkbox.
 *
 *  Value: "CHECK_BOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_CheckBox;
/**
 *  A dropdown menu.
 *
 *  Value: "DROPDOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_Dropdown;
/**
 *  A radio button.
 *
 *  Value: "RADIO_BUTTON"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_RadioButton;
/**
 *  A switch.
 *
 *  Value: "SWITCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_Switch;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1SwitchControl.controlType

/**
 *  Deprecated in favor of `CHECK_BOX`.
 *
 *  Value: "CHECKBOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_Checkbox;
/**
 *  A checkbox.
 *
 *  Value: "CHECK_BOX"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_CheckBox;
/**
 *  A toggle-style switch.
 *
 *  Value: "SWITCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_Switch;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1TextInput.type

/**
 *  The text is put into multiple lines.
 *
 *  Value: "MULTIPLE_LINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1TextInput_Type_MultipleLine;
/**
 *  The text is put into a single line.
 *
 *  Value: "SINGLE_LINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1TextInput_Type_SingleLine;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_GoogleAppsCardV1Widget.horizontalAlignment

/**
 *  Alignment to the center position.
 *
 *  Value: "CENTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_Center;
/**
 *  Alignment to the end position.
 *
 *  Value: "END"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_End;
/**
 *  Unspecified alignment.
 *
 *  Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_HorizontalAlignmentUnspecified;
/**
 *  Alignment to the start position.
 *
 *  Value: "START"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_Start;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_ImageButton.icon

/** Value: "AIRPLANE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Airplane;
/** Value: "BOOKMARK" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Bookmark;
/** Value: "BUS" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Bus;
/** Value: "CAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Car;
/** Value: "CLOCK" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Clock;
/** Value: "CONFIRMATION_NUMBER_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_ConfirmationNumberIcon;
/** Value: "DESCRIPTION" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Description;
/** Value: "DOLLAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Dollar;
/** Value: "EMAIL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Email;
/** Value: "EVENT_PERFORMER" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_EventPerformer;
/** Value: "EVENT_SEAT" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_EventSeat;
/** Value: "FLIGHT_ARRIVAL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_FlightArrival;
/** Value: "FLIGHT_DEPARTURE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_FlightDeparture;
/** Value: "HOTEL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Hotel;
/** Value: "HOTEL_ROOM_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_HotelRoomType;
/** Value: "ICON_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_IconUnspecified;
/** Value: "INVITE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Invite;
/** Value: "MAP_PIN" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_MapPin;
/** Value: "MEMBERSHIP" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Membership;
/** Value: "MULTIPLE_PEOPLE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_MultiplePeople;
/** Value: "OFFER" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Offer;
/** Value: "PERSON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Person;
/** Value: "PHONE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Phone;
/** Value: "RESTAURANT_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_RestaurantIcon;
/** Value: "SHOPPING_CART" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_ShoppingCart;
/** Value: "STAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Star;
/** Value: "STORE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Store;
/** Value: "TICKET" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Ticket;
/** Value: "TRAIN" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_Train;
/** Value: "VIDEO_CAMERA" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_VideoCamera;
/** Value: "VIDEO_PLAY" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_ImageButton_Icon_VideoPlay;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_KeyValue.icon

/** Value: "AIRPLANE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Airplane;
/** Value: "BOOKMARK" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Bookmark;
/** Value: "BUS" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Bus;
/** Value: "CAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Car;
/** Value: "CLOCK" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Clock;
/** Value: "CONFIRMATION_NUMBER_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_ConfirmationNumberIcon;
/** Value: "DESCRIPTION" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Description;
/** Value: "DOLLAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Dollar;
/** Value: "EMAIL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Email;
/** Value: "EVENT_PERFORMER" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_EventPerformer;
/** Value: "EVENT_SEAT" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_EventSeat;
/** Value: "FLIGHT_ARRIVAL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_FlightArrival;
/** Value: "FLIGHT_DEPARTURE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_FlightDeparture;
/** Value: "HOTEL" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Hotel;
/** Value: "HOTEL_ROOM_TYPE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_HotelRoomType;
/** Value: "ICON_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_IconUnspecified;
/** Value: "INVITE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Invite;
/** Value: "MAP_PIN" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_MapPin;
/** Value: "MEMBERSHIP" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Membership;
/** Value: "MULTIPLE_PEOPLE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_MultiplePeople;
/** Value: "OFFER" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Offer;
/** Value: "PERSON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Person;
/** Value: "PHONE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Phone;
/** Value: "RESTAURANT_ICON" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_RestaurantIcon;
/** Value: "SHOPPING_CART" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_ShoppingCart;
/** Value: "STAR" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Star;
/** Value: "STORE" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Store;
/** Value: "TICKET" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Ticket;
/** Value: "TRAIN" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_Train;
/** Value: "VIDEO_CAMERA" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_VideoCamera;
/** Value: "VIDEO_PLAY" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_KeyValue_Icon_VideoPlay;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Membership.role

/**
 *  Default value. The user isn't a member of the space, but might be invited.
 *
 *  Value: "MEMBERSHIP_ROLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_Role_MembershipRoleUnspecified;
/**
 *  A space manager. The user has all basic permissions plus administrative
 *  permissions that allow them to manage the space, like adding or removing
 *  members. Only supports SpaceType.SPACE.
 *
 *  Value: "ROLE_MANAGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_Role_RoleManager;
/**
 *  A member of the space. The user has basic permissions, like sending messages
 *  to the space. In 1:1 and unnamed group conversations, everyone has this
 *  role.
 *
 *  Value: "ROLE_MEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_Role_RoleMember;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Membership.state

/**
 *  The user has been invited, is able to join the space, but currently has not
 *  joined.
 *
 *  Value: "INVITED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_State_Invited;
/**
 *  The user has joined the space.
 *
 *  Value: "JOINED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_State_Joined;
/**
 *  Default, do not use.
 *
 *  Value: "MEMBERSHIP_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_State_MembershipStateUnspecified;
/**
 *  The user is not a member of the space, has not been invited and is not able
 *  to join the space.
 *
 *  Value: "NOT_A_MEMBER"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Membership_State_NotAMember;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_SlashCommandMetadata.type

/**
 *  Add Chat app to space.
 *
 *  Value: "ADD"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_SlashCommandMetadata_Type_Add;
/**
 *  Invoke slash command in space.
 *
 *  Value: "INVOKE"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_SlashCommandMetadata_Type_Invoke;
/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_SlashCommandMetadata_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Space.spaceThreadingState

/**
 *  Named spaces where the conversation is organized by topic. Topics and their
 *  replies are grouped together.
 *
 *  Value: "GROUPED_MESSAGES"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_SpaceThreadingState_GroupedMessages;
/**
 *  Reserved.
 *
 *  Value: "SPACE_THREADING_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_SpaceThreadingState_SpaceThreadingStateUnspecified;
/**
 *  Named spaces that support message threads. When users respond to a message,
 *  they can reply in-thread, which keeps their response in the context of the
 *  original message.
 *
 *  Value: "THREADED_MESSAGES"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_SpaceThreadingState_ThreadedMessages;
/**
 *  Direct messages (DMs) between two people and group conversations between 3
 *  or more people.
 *
 *  Value: "UNTHREADED_MESSAGES"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_SpaceThreadingState_UnthreadedMessages;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_Space.type

/**
 *  1:1 Direct Message between a human and a Chat app, where all messages are
 *  flat. Note that this does not include direct messages between two humans.
 *
 *  Value: "DM"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_Type_Dm;
/**
 *  Conversations between two or more humans.
 *
 *  Value: "ROOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_Type_Room;
/** Value: "TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_Space_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_User.type

/**
 *  Chat app user.
 *
 *  Value: "BOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_User_Type_Bot;
/**
 *  Human user.
 *
 *  Value: "HUMAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_User_Type_Human;
/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_User_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRHangoutsChat_UserMentionMetadata.type

/**
 *  Add user to space.
 *
 *  Value: "ADD"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_UserMentionMetadata_Type_Add;
/**
 *  Mention user in space.
 *
 *  Value: "MENTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_UserMentionMetadata_Type_Mention;
/**
 *  Default value for the enum. DO NOT USE.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRHangoutsChat_UserMentionMetadata_Type_TypeUnspecified;

/**
 *  List of string parameters to supply when the action method is invoked. For
 *  example, consider three snooze buttons: snooze now, snooze 1 day, snooze
 *  next week. You might use action method = snooze(), passing the snooze type
 *  and snooze time in the list of string parameters.
 */
@interface GTLRHangoutsChat_ActionParameter : GTLRObject

/** The name of the parameter for the action script. */
@property(nonatomic, copy, nullable) NSString *key;

/** The value of the parameter. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Parameters that a Chat app can use to configure how it's response is posted.
 */
@interface GTLRHangoutsChat_ActionResponse : GTLRObject

/**
 *  Input only. A response to an event related to a
 *  [dialog](https://developers.google.com/chat/how-tos/dialogs). Must be
 *  accompanied by `ResponseType.Dialog`.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_DialogAction *dialogAction;

/**
 *  Input only. The type of Chat app response.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_Dialog Presents a
 *        [dialog](https://developers.google.com/chat/how-tos/dialogs). (Value:
 *        "DIALOG")
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_NewMessage Post as a new
 *        message in the topic. (Value: "NEW_MESSAGE")
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_RequestConfig Privately ask
 *        the user for additional auth or config. (Value: "REQUEST_CONFIG")
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_TypeUnspecified Default
 *        type; will be handled as NEW_MESSAGE. (Value: "TYPE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_UpdateMessage Update the
 *        Chat app's message. This is only permitted on a CARD_CLICKED event
 *        where the message sender type is BOT. (Value: "UPDATE_MESSAGE")
 *    @arg @c kGTLRHangoutsChat_ActionResponse_Type_UpdateUserMessageCards
 *        Update the cards on a user's message. This is only permitted as a
 *        response to a MESSAGE event with a matched url, or a CARD_CLICKED
 *        event where the message sender type is HUMAN. Text will be ignored.
 *        (Value: "UPDATE_USER_MESSAGE_CARDS")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Input only. URL for users to auth or config. (Only for REQUEST_CONFIG
 *  response types.)
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Represents the status for a request to either invoke or submit a
 *  [dialog](https://developers.google.com/chat/how-tos/dialogs).
 */
@interface GTLRHangoutsChat_ActionStatus : GTLRObject

/**
 *  The status code.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_Aborted The operation
 *        was aborted, typically due to a concurrency issue such as a sequencer
 *        check failure or transaction abort. See the guidelines above for
 *        deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`.
 *        HTTP Mapping: 409 Conflict (Value: "ABORTED")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_AlreadyExists The entity
 *        that a client attempted to create (e.g., file or directory) already
 *        exists. HTTP Mapping: 409 Conflict (Value: "ALREADY_EXISTS")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_Cancelled The operation
 *        was cancelled, typically by the caller. HTTP Mapping: 499 Client
 *        Closed Request (Value: "CANCELLED")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_DataLoss Unrecoverable
 *        data loss or corruption. HTTP Mapping: 500 Internal Server Error
 *        (Value: "DATA_LOSS")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_DeadlineExceeded The
 *        deadline expired before the operation could complete. For operations
 *        that change the state of the system, this error may be returned even
 *        if the operation has completed successfully. For example, a successful
 *        response from a server could have been delayed long enough for the
 *        deadline to expire. HTTP Mapping: 504 Gateway Timeout (Value:
 *        "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_FailedPrecondition The
 *        operation was rejected because the system is not in a state required
 *        for the operation's execution. For example, the directory to be
 *        deleted is non-empty, an rmdir operation is applied to a
 *        non-directory, etc. Service implementors can use the following
 *        guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and
 *        `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the
 *        failing call. (b) Use `ABORTED` if the client should retry at a higher
 *        level. For example, when a client-specified test-and-set fails,
 *        indicating the client should restart a read-modify-write sequence. (c)
 *        Use `FAILED_PRECONDITION` if the client should not retry until the
 *        system state has been explicitly fixed. For example, if an "rmdir"
 *        fails because the directory is non-empty, `FAILED_PRECONDITION` should
 *        be returned since the client should not retry unless the files are
 *        deleted from the directory. HTTP Mapping: 400 Bad Request (Value:
 *        "FAILED_PRECONDITION")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_Internal Internal
 *        errors. This means that some invariants expected by the underlying
 *        system have been broken. This error code is reserved for serious
 *        errors. HTTP Mapping: 500 Internal Server Error (Value: "INTERNAL")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_InvalidArgument The
 *        client specified an invalid argument. Note that this differs from
 *        `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are
 *        problematic regardless of the state of the system (e.g., a malformed
 *        file name). HTTP Mapping: 400 Bad Request (Value: "INVALID_ARGUMENT")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_NotFound Some requested
 *        entity (e.g., file or directory) was not found. Note to server
 *        developers: if a request is denied for an entire class of users, such
 *        as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may
 *        be used. If a request is denied for some users within a class of
 *        users, such as user-based access control, `PERMISSION_DENIED` must be
 *        used. HTTP Mapping: 404 Not Found (Value: "NOT_FOUND")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_Ok Not an error;
 *        returned on success. HTTP Mapping: 200 OK (Value: "OK")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_OutOfRange The operation
 *        was attempted past the valid range. E.g., seeking or reading past
 *        end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem
 *        that may be fixed if the system state changes. For example, a 32-bit
 *        file system will generate `INVALID_ARGUMENT` if asked to read at an
 *        offset that is not in the range [0,2^32-1], but it will generate
 *        `OUT_OF_RANGE` if asked to read from an offset past the current file
 *        size. There is a fair bit of overlap between `FAILED_PRECONDITION` and
 *        `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific
 *        error) when it applies so that callers who are iterating through a
 *        space can easily look for an `OUT_OF_RANGE` error to detect when they
 *        are done. HTTP Mapping: 400 Bad Request (Value: "OUT_OF_RANGE")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_PermissionDenied The
 *        caller does not have permission to execute the specified operation.
 *        `PERMISSION_DENIED` must not be used for rejections caused by
 *        exhausting some resource (use `RESOURCE_EXHAUSTED` instead for those
 *        errors). `PERMISSION_DENIED` must not be used if the caller can not be
 *        identified (use `UNAUTHENTICATED` instead for those errors). This
 *        error code does not imply the request is valid or the requested entity
 *        exists or satisfies other pre-conditions. HTTP Mapping: 403 Forbidden
 *        (Value: "PERMISSION_DENIED")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_ResourceExhausted Some
 *        resource has been exhausted, perhaps a per-user quota, or perhaps the
 *        entire file system is out of space. HTTP Mapping: 429 Too Many
 *        Requests (Value: "RESOURCE_EXHAUSTED")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_Unauthenticated The
 *        request does not have valid authentication credentials for the
 *        operation. HTTP Mapping: 401 Unauthorized (Value: "UNAUTHENTICATED")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_Unavailable The service
 *        is currently unavailable. This is most likely a transient condition,
 *        which can be corrected by retrying with a backoff. Note that it is not
 *        always safe to retry non-idempotent operations. See the guidelines
 *        above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and
 *        `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable (Value:
 *        "UNAVAILABLE")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_Unimplemented The
 *        operation is not implemented or is not supported/enabled in this
 *        service. HTTP Mapping: 501 Not Implemented (Value: "UNIMPLEMENTED")
 *    @arg @c kGTLRHangoutsChat_ActionStatus_StatusCode_Unknown Unknown error.
 *        For example, this error may be returned when a `Status` value received
 *        from another address space belongs to an error space that is not known
 *        in this address space. Also errors raised by APIs that do not return
 *        enough error information may be converted to this error. HTTP Mapping:
 *        500 Internal Server Error (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *statusCode;

/**
 *  The message to send users about the status of their request. If unset, a
 *  generic message based on the `status_code` is sent.
 */
@property(nonatomic, copy, nullable) NSString *userFacingMessage;

@end


/**
 *  Annotations associated with the plain-text body of the message. Example
 *  plain-text message body: ``` Hello \@FooBot how are you!" ``` The
 *  corresponding annotations metadata: ``` "annotations":[{
 *  "type":"USER_MENTION", "startIndex":6, "length":7, "userMention": { "user":
 *  { "name":"users/107946847022116401880", "displayName":"FooBot",
 *  "avatarUrl":"https://goo.gl/aeDtrS", "type":"BOT" }, "type":"MENTION" } }]
 *  ```
 */
@interface GTLRHangoutsChat_Annotation : GTLRObject

/**
 *  Length of the substring in the plain-text message body this annotation
 *  corresponds to.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/** The metadata for a slash command. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_SlashCommandMetadata *slashCommand;

/**
 *  Start index (0-based, inclusive) in the plain-text message body this
 *  annotation corresponds to.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *startIndex;

/**
 *  The type of this annotation.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Annotation_Type_AnnotationTypeUnspecified
 *        Default value for the enum. DO NOT USE. (Value:
 *        "ANNOTATION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_Annotation_Type_SlashCommand A slash command is
 *        invoked. (Value: "SLASH_COMMAND")
 *    @arg @c kGTLRHangoutsChat_Annotation_Type_UserMention A user is mentioned.
 *        (Value: "USER_MENTION")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The metadata of user mention. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_UserMentionMetadata *userMention;

@end


/**
 *  An attachment in Google Chat.
 */
@interface GTLRHangoutsChat_Attachment : GTLRObject

/**
 *  A reference to the attachment data. This is used with the media API to
 *  download the attachment data.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_AttachmentDataRef *attachmentDataRef;

/** The original file name for the content, not the full path. */
@property(nonatomic, copy, nullable) NSString *contentName;

/** The content type (MIME type) of the file. */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  Output only. The download URL which should be used to allow a human user to
 *  download the attachment. Chat apps should not use this URL to download
 *  attachment content.
 */
@property(nonatomic, copy, nullable) NSString *downloadUri;

/** A reference to the drive attachment. This is used with the Drive API. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_DriveDataRef *driveDataRef;

/**
 *  Resource name of the attachment, in the form "spaces/ * /messages/ *
 *  /attachments/ *".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The source of the attachment.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Attachment_Source_DriveFile Value "DRIVE_FILE"
 *    @arg @c kGTLRHangoutsChat_Attachment_Source_SourceUnspecified Value
 *        "SOURCE_UNSPECIFIED"
 *    @arg @c kGTLRHangoutsChat_Attachment_Source_UploadedContent Value
 *        "UPLOADED_CONTENT"
 */
@property(nonatomic, copy, nullable) NSString *source;

/**
 *  Output only. The thumbnail URL which should be used to preview the
 *  attachment to a human user. Chat apps should not use this URL to download
 *  attachment content.
 */
@property(nonatomic, copy, nullable) NSString *thumbnailUri;

@end


/**
 *  A reference to the data of an attachment.
 */
@interface GTLRHangoutsChat_AttachmentDataRef : GTLRObject

/**
 *  The resource name of the attachment data. This is used with the media API to
 *  download the attachment data.
 */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end


/**
 *  A button. Can be a text button or an image button.
 */
@interface GTLRHangoutsChat_Button : GTLRObject

/** A button with image and onclick action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_ImageButton *imageButton;

/** A button with text and onclick action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_TextButton *textButton;

@end


/**
 *  A card is a UI element that can contain UI widgets such as texts, images.
 */
@interface GTLRHangoutsChat_Card : GTLRObject

/** The actions of this card. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_CardAction *> *cardActions;

/** The header of the card. A header usually contains a title and an image. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_CardHeader *header;

/** Name of the card. */
@property(nonatomic, copy, nullable) NSString *name;

/** Sections are separated by a line divider. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Section *> *sections;

@end


/**
 *  A card action is the action associated with the card. For an invoice card, a
 *  typical action would be: delete invoice, email invoice or open the invoice
 *  in browser. Not supported by Google Chat apps.
 */
@interface GTLRHangoutsChat_CardAction : GTLRObject

/** The label used to be displayed in the action menu item. */
@property(nonatomic, copy, nullable) NSString *actionLabel;

/** The onclick action for this action item. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OnClick *onClick;

@end


/**
 *  GTLRHangoutsChat_CardHeader
 */
@interface GTLRHangoutsChat_CardHeader : GTLRObject

/**
 *  The image's type (e.g. square border or circular border).
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_CardHeader_ImageStyle_Avatar Circular border.
 *        (Value: "AVATAR")
 *    @arg @c kGTLRHangoutsChat_CardHeader_ImageStyle_Image Square border.
 *        (Value: "IMAGE")
 *    @arg @c kGTLRHangoutsChat_CardHeader_ImageStyle_ImageStyleUnspecified
 *        Value "IMAGE_STYLE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *imageStyle;

/** The URL of the image in the card header. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/** The subtitle of the card header. */
@property(nonatomic, copy, nullable) NSString *subtitle;

/**
 *  The title must be specified. The header has a fixed height: if both a title
 *  and subtitle is specified, each will take up 1 line. If only the title is
 *  specified, it will take up both lines.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Widgets for Chat apps to specify.
 */
@interface GTLRHangoutsChat_CardWithId : GTLRObject

/**
 *  Card proto that allows Chat apps to specify UI elements and editable
 *  widgets.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Card *card;

/**
 *  Required for `cardsV2` messages. Chat app-specified identifier for this
 *  widget. Scoped within a message.
 */
@property(nonatomic, copy, nullable) NSString *cardId;

@end


/**
 *  JSON payload of error messages. If the Cloud Logging API is enabled, these
 *  error messages are logged to [Google Cloud
 *  Logging](https://cloud.google.com/logging/docs).
 */
@interface GTLRHangoutsChat_ChatAppLogEntry : GTLRObject

/**
 *  The deployment that caused the error. For Chat apps built in Apps Script,
 *  this is the deployment ID defined by Apps Script.
 */
@property(nonatomic, copy, nullable) NSString *deployment;

/**
 *  The unencrypted `callback_method` name that was running when the error was
 *  encountered.
 */
@property(nonatomic, copy, nullable) NSString *deploymentFunction;

/** The error code and message. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Status *error;

@end


/**
 *  Represents a color in the RGBA color space. This representation is designed
 *  for simplicity of conversion to/from color representations in various
 *  languages over compactness. For example, the fields of this representation
 *  can be trivially provided to the constructor of `java.awt.Color` in Java; it
 *  can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha`
 *  method in iOS; and, with just a little work, it can be easily formatted into
 *  a CSS `rgba()` string in JavaScript. This reference page doesn't carry
 *  information about the absolute color space that should be used to interpret
 *  the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default,
 *  applications should assume the sRGB color space. When color equality needs
 *  to be decided, implementations, unless documented otherwise, treat two
 *  colors as equal if all their red, green, blue, and alpha values each differ
 *  by at most 1e-5. Example (Java): import com.google.type.Color; // ... public
 *  static java.awt.Color fromProto(Color protocolor) { float alpha =
 *  protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new
 *  java.awt.Color( protocolor.getRed(), protocolor.getGreen(),
 *  protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color
 *  color) { float red = (float) color.getRed(); float green = (float)
 *  color.getGreen(); float blue = (float) color.getBlue(); float denominator =
 *  255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red /
 *  denominator) .setGreen(green / denominator) .setBlue(blue / denominator);
 *  int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha(
 *  FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build());
 *  } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ...
 *  static UIColor* fromProto(Color* protocolor) { float red = [protocolor red];
 *  float green = [protocolor green]; float blue = [protocolor blue];
 *  FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if
 *  (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor
 *  colorWithRed:red green:green blue:blue alpha:alpha]; } static Color*
 *  toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color
 *  getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color*
 *  result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green];
 *  [result setBlue:blue]; if (alpha <= 0.9999) { [result
 *  setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return
 *  result; } // ... Example (JavaScript): // ... var protoToCssColor =
 *  function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac =
 *  rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red =
 *  Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue
 *  = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return
 *  rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value ||
 *  0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(',
 *  rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor =
 *  function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green
 *  << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6
 *  - hexString.length; var resultBuilder = ['#']; for (var i = 0; i <
 *  missingZeros; i++) { resultBuilder.push('0'); }
 *  resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
 */
@interface GTLRHangoutsChat_Color : GTLRObject

/**
 *  The fraction of this color that should be applied to the pixel. That is, the
 *  final pixel color is defined by the equation: `pixel color = alpha * (this
 *  color) + (1.0 - alpha) * (background color)` This means that a value of 1.0
 *  corresponds to a solid color, whereas a value of 0.0 corresponds to a
 *  completely transparent color. This uses a wrapper message rather than a
 *  simple float scalar so that it is possible to distinguish between a default
 *  value and the value being unset. If omitted, this color object is rendered
 *  as a solid color (as if the alpha value had been explicitly given a value of
 *  1.0).
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *alpha;

/**
 *  The amount of blue in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *blue;

/**
 *  The amount of green in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *green;

/**
 *  The amount of red in the color as a value in the interval [0, 1].
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *red;

@end


/**
 *  Represents information about the user's client, such as locale, host app,
 *  and platform. For Chat apps, `CommonEventObject` includes data submitted by
 *  users interacting with cards, like data entered in
 *  [dialogs](https://developers.google.com/chat/how-tos/dialogs).
 */
@interface GTLRHangoutsChat_CommonEventObject : GTLRObject

/**
 *  A map containing the current values of the widgets in a card. The map keys
 *  are the string IDs assigned to each widget, and the values represent inputs
 *  to the widget. Depending on the input data type, a different object
 *  represents each input: For single-value widgets, `StringInput`. For
 *  multi-value widgets, an array of `StringInput` objects. For a date-time
 *  picker, a `DateTimeInput`. For a date-only picker, a `DateInput`. For a
 *  time-only picker, a `TimeInput`. Corresponds with the data entered by a user
 *  on a card in a [dialog](https://developers.google.com/chat/how-tos/dialogs).
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_CommonEventObject_FormInputs *formInputs;

/**
 *  The hostApp enum which indicates the app the add-on is invoked from. Always
 *  `CHAT` for Chat apps.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Calendar The add-on
 *        launches from Google Calendar. (Value: "CALENDAR")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Chat A Google Chat
 *        app. Not used for Google Workspace Add-ons. (Value: "CHAT")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Demo Not used. (Value:
 *        "DEMO")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Docs The add-on
 *        launches from Google Docs. (Value: "DOCS")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Drawings The add-on
 *        launches from Google Drawings. (Value: "DRAWINGS")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Drive The add-on
 *        launches from Google Drive. (Value: "DRIVE")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Gmail The add-on
 *        launches from Gmail. (Value: "GMAIL")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Meet The add-on
 *        launches from Google Meet. (Value: "MEET")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Sheets The add-on
 *        launches from Google Sheets. (Value: "SHEETS")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_Slides The add-on
 *        launches from Google Slides. (Value: "SLIDES")
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_HostApp_UnspecifiedHostApp
 *        Google can't identify a host app. (Value: "UNSPECIFIED_HOST_APP")
 */
@property(nonatomic, copy, nullable) NSString *hostApp;

/**
 *  Name of the invoked function associated with the widget. Only set for Chat
 *  apps.
 */
@property(nonatomic, copy, nullable) NSString *invokedFunction;

/**
 *  Custom [parameters](/chat/api/reference/rest/v1/cards#ActionParameter)
 *  passed to the invoked function. Both keys and values must be strings.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_CommonEventObject_Parameters *parameters;

/**
 *  The platform enum which indicates the platform where the event originates
 *  (`WEB`, `IOS`, or `ANDROID`). Not supported by Chat apps.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_Platform_Android Value
 *        "ANDROID"
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_Platform_Ios Value "IOS"
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_Platform_UnknownPlatform Value
 *        "UNKNOWN_PLATFORM"
 *    @arg @c kGTLRHangoutsChat_CommonEventObject_Platform_Web Value "WEB"
 */
@property(nonatomic, copy, nullable) NSString *platform;

/** The timezone ID and offset from Coordinated Universal Time (UTC). */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_TimeZone *timeZone;

/**
 *  The full `locale.displayName` in the format of [ISO 639 language code]-[ISO
 *  3166 country/region code] such as "en-US". Not supported by Chat apps.
 */
@property(nonatomic, copy, nullable) NSString *userLocale;

@end


/**
 *  A map containing the current values of the widgets in a card. The map keys
 *  are the string IDs assigned to each widget, and the values represent inputs
 *  to the widget. Depending on the input data type, a different object
 *  represents each input: For single-value widgets, `StringInput`. For
 *  multi-value widgets, an array of `StringInput` objects. For a date-time
 *  picker, a `DateTimeInput`. For a date-only picker, a `DateInput`. For a
 *  time-only picker, a `TimeInput`. Corresponds with the data entered by a user
 *  on a card in a [dialog](https://developers.google.com/chat/how-tos/dialogs).
 *
 *  @note This class is documented as having more properties of
 *        GTLRHangoutsChat_Inputs. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRHangoutsChat_CommonEventObject_FormInputs : GTLRObject
@end


/**
 *  Custom [parameters](/chat/api/reference/rest/v1/cards#ActionParameter)
 *  passed to the invoked function. Both keys and values must be strings.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRHangoutsChat_CommonEventObject_Parameters : GTLRObject
@end


/**
 *  Date input values. Not supported by Chat apps.
 */
@interface GTLRHangoutsChat_DateInput : GTLRObject

/**
 *  Time since epoch time, in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *msSinceEpoch;

@end


/**
 *  Date and time input values. Not supported by Chat apps.
 */
@interface GTLRHangoutsChat_DateTimeInput : GTLRObject

/**
 *  Whether the `datetime` input includes a calendar date.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasDate;

/**
 *  Whether the `datetime` input includes a timestamp.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasTime;

/**
 *  Time since epoch time, in milliseconds.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *msSinceEpoch;

@end


/**
 *  Google Chat events.
 */
@interface GTLRHangoutsChat_DeprecatedEvent : GTLRObject

/**
 *  The form action data associated with an interactive card that was clicked.
 *  Only populated for CARD_CLICKED events. See the [Interactive Cards
 *  guide](/chat/how-tos/cards-onclick) for more information.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_FormAction *action;

/**
 *  Represents information about the user's client, such as locale, host app,
 *  and platform. For Chat apps, `CommonEventObject` includes information
 *  submitted by users interacting with
 *  [dialogs](https://developers.google.com/chat/how-tos/dialogs), like data
 *  entered on a card.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_CommonEventObject *common;

/**
 *  The URL the Chat app should redirect the user to after they have completed
 *  an authorization or configuration flow outside of Google Chat. See the
 *  [Authorizing access to 3p services guide](/chat/how-tos/auth-3p) for more
 *  information.
 */
@property(nonatomic, copy, nullable) NSString *configCompleteRedirectUrl;

/**
 *  The type of [dialog](https://developers.google.com/chat/how-tos/dialogs)
 *  event received.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_DialogEventType_CancelDialog The
 *        [dialog](https://developers.google.com/chat/how-tos/dialogs) was
 *        cancelled. (Value: "CANCEL_DIALOG")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_DialogEventType_RequestDialog
 *        Any user action that opens a
 *        [dialog](https://developers.google.com/chat/how-tos/dialogs). (Value:
 *        "REQUEST_DIALOG")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_DialogEventType_SubmitDialog A
 *        card click event from a
 *        [dialog](https://developers.google.com/chat/how-tos/dialogs). (Value:
 *        "SUBMIT_DIALOG")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_DialogEventType_TypeUnspecified
 *        This could be used when the corresponding event is not dialog related.
 *        For example an \@mention. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *dialogEventType;

/** The timestamp indicating when the event occurred. */
@property(nonatomic, strong, nullable) GTLRDateTime *eventTime;

/**
 *  True when the event is related to
 *  [dialogs](https://developers.google.com/chat/how-tos/dialogs).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isDialogEvent;

/** The message that triggered the event, if applicable. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Message *message;

/** The space in which the event occurred. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Space *space;

/**
 *  The Chat app-defined key for the thread related to the event. See the
 *  thread_key field of the `spaces.message.create` request for more
 *  information.
 */
@property(nonatomic, copy, nullable) NSString *threadKey;

/**
 *  A secret value that legacy Chat apps can use to verify if a request is from
 *  Google. Google randomly generates the token, and its value remains static.
 *  You can obtain, revoke, or regenerate the token from the [Chat API
 *  configuration
 *  page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat)
 *  in the Google Cloud Console. Modern Chat apps don't use this field. It is
 *  absent from API responses and the [Chat API configuration
 *  page](https://console.cloud.google.com/apis/api/chat.googleapis.com/hangouts-chat).
 */
@property(nonatomic, copy, nullable) NSString *token;

/**
 *  The type of the event.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_Type_AddedToSpace The Chat app
 *        was added to a space. (Value: "ADDED_TO_SPACE")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_Type_CardClicked The Chat app's
 *        interactive card was clicked. (Value: "CARD_CLICKED")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_Type_Message A message was sent
 *        in a space. (Value: "MESSAGE")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_Type_RemovedFromSpace The Chat
 *        app was removed from a space. (Value: "REMOVED_FROM_SPACE")
 *    @arg @c kGTLRHangoutsChat_DeprecatedEvent_Type_Unspecified Default value
 *        for the enum. DO NOT USE. (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The user that triggered the event. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *user;

@end


/**
 *  Wrapper around the card body of the dialog.
 */
@interface GTLRHangoutsChat_Dialog : GTLRObject

/**
 *  Input only. Body of the dialog, which is rendered in a modal. Google Chat
 *  apps do not support the following card entities: `DateTimePicker`,
 *  `OnChangeAction`.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Card *body;

@end


/**
 *  Contains a [dialog](https://developers.google.com/chat/how-tos/dialogs) and
 *  request status code.
 */
@interface GTLRHangoutsChat_DialogAction : GTLRObject

/**
 *  Input only. Status for a request to either invoke or submit a
 *  [dialog](https://developers.google.com/chat/how-tos/dialogs). Displays a
 *  status and message to users, if necessary. For example, in case of an error
 *  or success.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_ActionStatus *actionStatus;

/**
 *  Input only. [Dialog](https://developers.google.com/chat/how-tos/dialogs) for
 *  the request.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Dialog *dialog;

@end


/**
 *  A reference to the data of a drive attachment.
 */
@interface GTLRHangoutsChat_DriveDataRef : GTLRObject

/** The id for the drive file, for use with the Drive API. */
@property(nonatomic, copy, nullable) NSString *driveFileId;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRHangoutsChat_Empty : GTLRObject
@end


/**
 *  A form action describes the behavior when the form is submitted. For
 *  example, an Apps Script can be invoked to handle the form.
 */
@interface GTLRHangoutsChat_FormAction : GTLRObject

/**
 *  The method name is used to identify which part of the form triggered the
 *  form submission. This information is echoed back to the Chat app as part of
 *  the card click event. The same method name can be used for several elements
 *  that trigger a common behavior if desired.
 */
@property(nonatomic, copy, nullable) NSString *actionMethodName;

/** List of action parameters. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_ActionParameter *> *parameters;

@end


/**
 *  An action that describes the behavior when the form is submitted. For
 *  example, an Apps Script can be invoked to handle the form.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Action : GTLRObject

/**
 *  Apps Script function to invoke when the containing element is
 *  clicked/activated.
 */
@property(nonatomic, copy, nullable) NSString *function;

/**
 *  Optional. Required when opening a
 *  [dialog](https://developers.google.com/chat/how-tos/dialogs). What to do in
 *  response to an interaction with a user, such as a user clicking button on a
 *  card message. If unspecified, the app responds by executing an `action` -
 *  like opening a link or running a function - as normal. By specifying an
 *  `interaction`, the app can respond in special interactive ways. For example,
 *  by setting `interaction` to `OPEN_DIALOG`, the app can open a
 *  [dialog](https://developers.google.com/chat/how-tos/dialogs). When
 *  specified, a loading indicator is not shown. Supported by Chat apps, but not
 *  Google Workspace Add-ons. If specified for an add-on, the entire card is
 *  stripped and nothing is shown in the client.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Action_Interaction_InteractionUnspecified
 *        Default value. The `action` executes as normal. (Value:
 *        "INTERACTION_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Action_Interaction_OpenDialog
 *        Opens a [dialog](https://developers.google.com/chat/how-tos/dialogs),
 *        a windowed, card-based interface that Chat apps use to interact with
 *        users. Only supported by Chat apps in response to button-clicks on
 *        card messages. Not supported by Google Workspace Add-ons. If specified
 *        for an add-on, the entire card is stripped and nothing is shown in the
 *        client. (Value: "OPEN_DIALOG")
 */
@property(nonatomic, copy, nullable) NSString *interaction;

/**
 *  Specifies the loading indicator that the action displays while making the
 *  call to the action.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Action_LoadIndicator_None
 *        Nothing is displayed. (Value: "NONE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Action_LoadIndicator_Spinner
 *        Displays a spinner to indicate that content is loading. (Value:
 *        "SPINNER")
 */
@property(nonatomic, copy, nullable) NSString *loadIndicator;

/** List of action parameters. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1ActionParameter *> *parameters;

/**
 *  Indicates whether form values persist after the action. The default value is
 *  `false`. If `true`, form values remain after the action is triggered. When
 *  using
 *  [LoadIndicator.NONE](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator)
 *  for actions, `persist_values` = `true`is recommended, as it ensures that any
 *  changes made by the user after form or on change actions are sent to the
 *  server are not overwritten by the response. If `false`, the form values are
 *  cleared when the action is triggered. When `persist_values` is set to
 *  `false`, it is strongly recommended that the card use
 *  [LoadIndicator.SPINNER](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#loadindicator)
 *  for all actions, as this locks the UI to ensure no changes are made by the
 *  user while the action is being processed. Not supported by Google Chat apps.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *persistValues;

@end


/**
 *  List of string parameters to supply when the action method is invoked. For
 *  example, consider three snooze buttons: snooze now, snooze 1 day, snooze
 *  next week. You might use action method = snooze(), passing the snooze type
 *  and snooze time in the list of string parameters.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1ActionParameter : GTLRObject

/** The name of the parameter for the action script. */
@property(nonatomic, copy, nullable) NSString *key;

/** The value of the parameter. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Represents the complete border style applied to widgets.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1BorderStyle : GTLRObject

/**
 *  The corner radius for the border.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cornerRadius;

/** The colors to use when the type is `BORDER_TYPE_STROKE`. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Color *strokeColor;

/**
 *  The border type.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_BorderTypeUnspecified
 *        No value specified. (Value: "BORDER_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_NoBorder No
 *        border. (Value: "NO_BORDER")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1BorderStyle_Type_Stroke Outline.
 *        (Value: "STROKE")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A button. Can be a text button or an image button.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Button : GTLRObject

/**
 *  The alternative text used for accessibility. Has no effect when an icon is
 *  set; use `icon.alt_text` instead.
 */
@property(nonatomic, copy, nullable) NSString *altText;

/** If set, the button is filled with a solid background. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Color *color;

/**
 *  If `true`, the button is displayed in a disabled state and doesn't respond
 *  to user actions.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

/** The icon image. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Icon *icon;

/** The action to perform when the button is clicked. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OnClick *onClick;

/** The text of the button. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A list of buttons layed out horizontally.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1ButtonList : GTLRObject

/** An array of buttons. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1Button *> *buttons;

@end


/**
 *  Cards support a defined layout, interactive UI elements like buttons, and
 *  rich media like images. Use cards to present detailed information, gather
 *  information from users, and guide users to take a next step. In Google Chat,
 *  cards appear in several places: - As stand-alone messages. - Accompanying a
 *  text message, just beneath the text message. - As a
 *  [dialog](https://developers.google.com/chat/how-tos/dialogs). The following
 *  example JSON creates a "contact card" that features: - A header with the
 *  contact's name, job title, avatar picture. - A section with the contact
 *  information, including formatted text. - Buttons that users can click to
 *  share the contact or see more or less info. ![Example contact
 *  card](/chat/images/card_api_reference.png) ``` { "cardsV2": [ { "cardId":
 *  "unique-card-id", "card": { "header": { "title": "Sasha", "subtitle":
 *  "Software Engineer", "imageUrl":
 *  "https://developers.google.com/chat/images/quickstart-app-avatar.png",
 *  "imageType": "CIRCLE", "imageAltText": "Avatar for Sasha", }, "sections": [
 *  { "header": "Contact Info", "collapsible": true,
 *  "uncollapsibleWidgetsCount": 1, "widgets": [ { "decoratedText": {
 *  "startIcon": { "knownIcon": "EMAIL", }, "text": "sasha\@example.com", } }, {
 *  "decoratedText": { "startIcon": { "knownIcon": "PERSON", }, "text":
 *  "Online", }, }, { "decoratedText": { "startIcon": { "knownIcon": "PHONE", },
 *  "text": "+1 (555) 555-1234", } }, { "buttonList": { "buttons": [ { "text":
 *  "Share", "onClick": { "openLink": { "url": "https://example.com/share", } }
 *  }, { "text": "Edit", "onClick": { "action": { "function": "goToView",
 *  "parameters": [ { "key": "viewType", "value": "EDIT", } ], } } }, ], } }, ],
 *  }, ], }, } ], } ```
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Card : GTLRObject

/**
 *  The card's actions. Actions are added to the card's generated toolbar menu.
 *  Not supported by Google Chat apps. For example, the following JSON
 *  constructs a card action menu with Settings and Send Feedback options: ```
 *  "card_actions": [ { "actionLabel": "Settings", "onClick": { "action": {
 *  "functionName": "goToView", "parameters": [ { "key": "viewType", "value":
 *  "SETTING" } ], "loadIndicator": "LoadIndicator.SPINNER" } } }, {
 *  "actionLabel": "Send Feedback", "onClick": { "openLink": { "url":
 *  "https://example.com/feedback" } } } ] ```
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1CardAction *> *cardActions;

/**
 *  The `peekCardHeader` display style for. Not supported by Google Chat apps.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_DisplayStyleUnspecified
 *        Do not use. (Value: "DISPLAY_STYLE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_Peek The
 *        header of the card appears at the bottom of the sidebar, partially
 *        covering the current top card of the stack. Clicking the header pops
 *        the card into the card stack. If the card has no header, a generated
 *        header is used instead. (Value: "PEEK")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Card_DisplayStyle_Replace
 *        Default value. The card is shown by replacing the view of the top card
 *        in the card stack. (Value: "REPLACE")
 */
@property(nonatomic, copy, nullable) NSString *displayStyle;

/** The fixed footer shown at the bottom of this card. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1CardFixedFooter *fixedFooter;

/** The header of the card. A header usually contains a title and an image. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1CardHeader *header;

/** Name of the card. Used as a card identifier in card navigation. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  When displaying contextual content, the peek card header acts as a
 *  placeholder so that the user can navigate forward between the homepage cards
 *  and the contextual cards. Not supported by Google Chat apps.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1CardHeader *peekCardHeader;

/** Sections are separated by a line divider. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1Section *> *sections;

@end


/**
 *  A card action is the action associated with the card. For example, an
 *  invoice card might include actions such as delete invoice, email invoice, or
 *  open the invoice in a browser. Not supported by Google Chat apps.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1CardAction : GTLRObject

/** The label that displays as the action menu item. */
@property(nonatomic, copy, nullable) NSString *actionLabel;

/** The `onClick` action for this action item. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OnClick *onClick;

@end


/**
 *  A persistent (sticky) footer that is added to the bottom of the card.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1CardFixedFooter : GTLRObject

/**
 *  The primary button of the fixed footer. The button must be a text button
 *  with text and color set.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Button *primaryButton;

/**
 *  The secondary button of the fixed footer. The button must be a text button
 *  with text and color set. `primaryButton` must be set if `secondaryButton` is
 *  set.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Button *secondaryButton;

@end


/**
 *  Represents a card header.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1CardHeader : GTLRObject

/** The alternative text of this image which is used for accessibility. */
@property(nonatomic, copy, nullable) NSString *imageAltText;

/**
 *  The image's type.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1CardHeader_ImageType_Circle
 *        Applies a circular mask to the image. (Value: "CIRCLE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1CardHeader_ImageType_Square
 *        Applies no cropping to the image. (Value: "SQUARE")
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/** The URL of the image in the card header. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/** The subtitle of the card header. */
@property(nonatomic, copy, nullable) NSString *subtitle;

/**
 *  Required. The title of the card header. The header has a fixed height: if
 *  both a title and subtitle are specified, each takes up one line. If only the
 *  title is specified, it takes up both lines.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  The widget that lets users to specify a date and time. Not supported by
 *  Google Chat apps.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1DateTimePicker : GTLRObject

/** The label for the field that displays to the user. */
@property(nonatomic, copy, nullable) NSString *label;

/**
 *  The name of the text input that's used in `formInput`, and uniquely
 *  identifies this input.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Triggered when the user clicks Save or Clear from the date/time picker
 *  dialog. This is only triggered if the value changed as a result of the
 *  Save/Clear operation.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *onChangeAction;

/**
 *  The number representing the time zone offset from UTC, in minutes. If set,
 *  the `value_ms_epoch` is displayed in the specified time zone. If not set, it
 *  uses the user's time zone setting on the client side.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *timezoneOffsetDate;

/**
 *  The type of the date/time picker.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_DateAndTime
 *        The user can select a date and time. (Value: "DATE_AND_TIME")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_DateOnly The
 *        user can only select a date. (Value: "DATE_ONLY")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1DateTimePicker_Type_TimeOnly The
 *        user can only select a time. (Value: "TIME_ONLY")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The value to display as the default value before user input or previous user
 *  input. It is represented in milliseconds (Epoch time). For `DATE_AND_TIME`
 *  type, the full epoch value is used. For `DATE_ONLY` type, only date of the
 *  epoch time is used. For `TIME_ONLY` type, only time of the epoch time is
 *  used. For example, you can set epoch time to `3 * 60 * 60 * 1000` to
 *  represent 3am.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *valueMsEpoch;

@end


/**
 *  A widget that displays text with optional decorations such as a label above
 *  or below the text, an icon in front of the text, a selection widget or a
 *  button after the text.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1DecoratedText : GTLRObject

/** The formatted text label that shows below the main text. */
@property(nonatomic, copy, nullable) NSString *bottomLabel;

/** A button that can be clicked to trigger an action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Button *button;

/** An icon displayed after the text. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Icon *endIcon;

/** Deprecated in favor of start_icon. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Icon *icon;

/** Only the top and bottom label and content region are clickable. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OnClick *onClick;

/** The icon displayed in front of the text. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Icon *startIcon;

/**
 *  A switch widget can be clicked to change its state or trigger an action.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1SwitchControl *switchControl;

/**
 *  Required. The main widget formatted text. See Text formatting for details.
 */
@property(nonatomic, copy, nullable) NSString *text;

/** The formatted text label that shows above the main text. */
@property(nonatomic, copy, nullable) NSString *topLabel;

/**
 *  The wrap text setting. If `true`, the text is wrapped and displayed in
 *  multiline. Otherwise, the text is truncated.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *wrapText;

@end


/**
 *  A divider that appears in between widgets.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Divider : GTLRObject
@end


/**
 *  Represents a Grid widget that displays items in a configurable grid layout.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Grid : GTLRCollectionObject

/** The border style to apply to each grid item. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1BorderStyle *borderStyle;

/**
 *  The number of columns to display in the grid. A default value is used if
 *  this field isn't specified, and that default value is different depending on
 *  where the grid is shown (dialog versus companion).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *columnCount;

/**
 *  The items to display in the grid.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1GridItem *> *items;

/**
 *  This callback is reused by each individual grid item, but with the item's
 *  identifier and index in the items list added to the callback's parameters.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OnClick *onClick;

/** The text that displays in the grid header. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Represents a single item in the grid layout.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1GridItem : GTLRObject

/**
 *  A user-specified identifier for this grid item. This identifier is returned
 *  in the parent Grid's onClick callback parameters.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** The image that displays in the grid item. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1ImageComponent *image;

/**
 *  The layout to use for the grid item.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_GridItemLayoutUnspecified
 *        No layout specified. (Value: "GRID_ITEM_LAYOUT_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_TextAbove The
 *        title and subtitle are shown above the grid item's image. (Value:
 *        "TEXT_ABOVE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_Layout_TextBelow The
 *        title and subtitle are shown below the grid item's image. (Value:
 *        "TEXT_BELOW")
 */
@property(nonatomic, copy, nullable) NSString *layout;

/** The grid item's subtitle. */
@property(nonatomic, copy, nullable) NSString *subtitle;

/**
 *  The horizontal alignment of the grid item's text.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_TextAlignment_Center
 *        Alignment to the center position. (Value: "CENTER")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_TextAlignment_End
 *        Alignment to the end position. (Value: "END")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_TextAlignment_HorizontalAlignmentUnspecified
 *        Unspecified alignment. (Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1GridItem_TextAlignment_Start
 *        Alignment to the start position. (Value: "START")
 */
@property(nonatomic, copy, nullable) NSString *textAlignment;

/** The grid item's title. */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  GTLRHangoutsChat_GoogleAppsCardV1Icon
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Icon : GTLRObject

/**
 *  The description of the icon, used for accessibility. The default value is
 *  provided if you don't specify one.
 */
@property(nonatomic, copy, nullable) NSString *altText;

/** The icon specified by a URL. */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The crop style applied to the image. In some cases, applying a `CIRCLE` crop
 *  causes the image to be drawn larger than a standard icon.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Icon_ImageType_Circle Applies a
 *        circular mask to the image. (Value: "CIRCLE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Icon_ImageType_Square Applies no
 *        cropping to the image. (Value: "SQUARE")
 */
@property(nonatomic, copy, nullable) NSString *imageType;

/** The icon specified by the string name of a list of known icons. */
@property(nonatomic, copy, nullable) NSString *knownIcon;

@end


/**
 *  An image that is specified by a URL and can have an `onClick` action.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Image : GTLRObject

/** The alternative text of this image, used for accessibility. */
@property(nonatomic, copy, nullable) NSString *altText;

/** An image URL. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/** The action triggered by an `onClick` event. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OnClick *onClick;

@end


/**
 *  Represents an image.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1ImageComponent : GTLRObject

/** The accessibility label for the image. */
@property(nonatomic, copy, nullable) NSString *altText;

/** The border style to apply to the image. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1BorderStyle *borderStyle;

/** The crop style to apply to the image. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle *cropStyle;

/** The image URL. */
@property(nonatomic, copy, nullable) NSString *imageUri;

@end


/**
 *  Represents the crop style applied to an image.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle : GTLRObject

/**
 *  The aspect ratio to use if the crop type is `RECTANGLE_CUSTOM`.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aspectRatio;

/**
 *  The crop type.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Circle
 *        Applies a circular crop. (Value: "CIRCLE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_ImageCropTypeUnspecified
 *        No value specified. (Value: "IMAGE_CROP_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Rectangle43
 *        Applies a rectangular crop with a 4:3 aspect ratio. (Value:
 *        "RECTANGLE_4_3")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_RectangleCustom
 *        Applies a rectangular crop with a custom aspect ratio. (Value:
 *        "RECTANGLE_CUSTOM")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1ImageCropStyle_Type_Square
 *        Applies a square crop. (Value: "SQUARE")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Represents the response to an `onClick` event.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1OnClick : GTLRObject

/** If specified, an action is triggered by this `onClick`. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *action;

/** A new card is pushed to the card stack after clicking if specified. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Card *card;

/**
 *  An add-on triggers this action when the action needs to open a link. This
 *  differs from the `open_link` above in that this needs to talk to server to
 *  get the link. Thus some preparation work is required for web client to do
 *  before the open link action response comes back.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *openDynamicLinkAction;

/** If specified, this `onClick` triggers an open link action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1OpenLink *openLink;

@end


/**
 *  Represents an `onClick` event that opens a hyperlink.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1OpenLink : GTLRObject

/**
 *  Whether the client forgets about a link after opening it, or observes it
 *  until the window closes. Not supported by Chat apps.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OnClose_Nothing Default
 *        value. The card does not reload; nothing happens. (Value: "NOTHING")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OnClose_Reload Reloads
 *        the card after the child window closes. If used in conjunction with
 *        [OpenAs.OVERLAY](https://developers.google.com/workspace/add-ons/reference/rpc/google.apps.card.v1#openas),
 *        the child window acts as a modal dialog and the parent card is blocked
 *        until the child window closes. (Value: "RELOAD")
 */
@property(nonatomic, copy, nullable) NSString *onClose;

/**
 *  How to open a link. Not supported by Chat apps.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OpenAs_FullSize The
 *        link opens as a full size window (if that's the frame used by the
 *        client. (Value: "FULL_SIZE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1OpenLink_OpenAs_Overlay The link
 *        opens as an overlay, such as a pop-up. (Value: "OVERLAY")
 */
@property(nonatomic, copy, nullable) NSString *openAs;

/** The URL to open. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  A section contains a collection of widgets that are rendered vertically in
 *  the order that they are specified. Across all platforms, cards have a narrow
 *  fixed width, so there is currently no need for layout properties, for
 *  example, float.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Section : GTLRObject

/**
 *  Indicates whether this section is collapsible. If a section is collapsible,
 *  the description must be given.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *collapsible;

/** The header of the section. Formatted text is supported. */
@property(nonatomic, copy, nullable) NSString *header;

/**
 *  The number of uncollapsible widgets. For example, when a section contains
 *  five widgets and the `uncollapsibleWidgetsCount` is set to `2`, the first
 *  two widgets are always shown and the last three are collapsed as default.
 *  The `uncollapsibleWidgetsCount` is taken into account only when
 *  `collapsible` is `true`.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *uncollapsibleWidgetsCount;

/** A section must contain at least 1 widget. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1Widget *> *widgets;

@end


/**
 *  A widget that creates a UI item with options for users to select. For
 *  example, a dropdown menu.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1SelectionInput : GTLRCollectionObject

/**
 *  An array of the selected items.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1SelectionItem *> *items;

/** The label displayed ahead of the switch control. */
@property(nonatomic, copy, nullable) NSString *label;

/** The name of the text input which is used in `formInput`. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  If specified, the form is submitted when the selection changes. If not
 *  specified, you must specify a separate button.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *onChangeAction;

/**
 *  The type of the selection.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_CheckBox A
 *        checkbox. (Value: "CHECK_BOX")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_Dropdown A
 *        dropdown menu. (Value: "DROPDOWN")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_RadioButton
 *        A radio button. (Value: "RADIO_BUTTON")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SelectionInput_Type_Switch A
 *        switch. (Value: "SWITCH")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A selectable item in the switch control.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1SelectionItem : GTLRObject

/**
 *  If more than one item is selected for `RADIO_BUTTON` and `DROPDOWN`, the
 *  first selected item is treated as selected and the ones after are ignored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *selected;

/** The text to be displayed. */
@property(nonatomic, copy, nullable) NSString *text;

/**
 *  The value associated with this item. The client should use this as a form
 *  input value.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A suggestion item.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1SuggestionItem : GTLRObject

/** The suggested autocomplete result. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A container wrapping elements necessary for showing suggestion items used in
 *  text input autocomplete.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Suggestions : GTLRCollectionObject

/**
 *  A list of suggestions used for autocomplete recommendations.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_GoogleAppsCardV1SuggestionItem *> *items;

@end


/**
 *  Either a toggle-style switch or a checkbox.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1SwitchControl : GTLRObject

/**
 *  The control type, either switch or checkbox.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_Checkbox
 *        Deprecated in favor of `CHECK_BOX`. (Value: "CHECKBOX")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_CheckBox
 *        A checkbox. (Value: "CHECK_BOX")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1SwitchControl_ControlType_Switch
 *        A toggle-style switch. (Value: "SWITCH")
 */
@property(nonatomic, copy, nullable) NSString *controlType;

/** The name of the switch widget that's used in `formInput`. */
@property(nonatomic, copy, nullable) NSString *name;

/** The action when the switch state is changed. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *onChangeAction;

/**
 *  If the switch is selected.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *selected;

/** The value is what is passed back in the callback. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A text input is a UI item where users can input text. A text input can also
 *  have an onChange action and suggestions.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1TextInput : GTLRObject

/**
 *  The refresh function that returns suggestions based on the user's input
 *  text. If the callback is not specified, autocomplete is done in client side
 *  based on the initial suggestion items.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *autoCompleteAction;

/** The hint text. */
@property(nonatomic, copy, nullable) NSString *hintText;

/** The initial suggestions made before any user input. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Suggestions *initialSuggestions;

/** At least one of label and hintText must be specified. */
@property(nonatomic, copy, nullable) NSString *label;

/** The name of the text input which is used in `formInput`. */
@property(nonatomic, copy, nullable) NSString *name;

/** The onChange action, for example, invoke a function. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Action *onChangeAction;

/**
 *  The style of the text, for example, a single line or multiple lines.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1TextInput_Type_MultipleLine The
 *        text is put into multiple lines. (Value: "MULTIPLE_LINE")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1TextInput_Type_SingleLine The
 *        text is put into a single line. (Value: "SINGLE_LINE")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The default value when there is no input from the user. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A paragraph of text that supports formatting. See [Text
 *  formatting](https://developers.google.com/workspace/add-ons/concepts/widgets#text_formatting)
 *  for details.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1TextParagraph : GTLRObject

/** The text that's shown in the widget. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A widget is a UI element that presents texts, images, etc.
 */
@interface GTLRHangoutsChat_GoogleAppsCardV1Widget : GTLRObject

/**
 *  A list of buttons. For example, the following JSON creates two buttons. The
 *  first is a filled text button and the second is an image button that opens a
 *  link: ``` "buttonList": { "buttons": [ "button": { "text": "Edit", "Color":
 *  { "Red": 255 "Green": 255 "Blue": 255 } "disabled": true }, "button": {
 *  "icon": { "knownIcon": "INVITE" "altText": "check calendar" }, "onClick": {
 *  "openLink": { "url": "https://example.com/calendar" } } }, ] } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1ButtonList *buttonList;

/**
 *  Displays a selection/input widget for date/time. For example, the following
 *  JSON creates a date/time picker for an appointment time: ```
 *  "date_time_picker": { "name": "appointment_time", "label": "Book your
 *  appointment at:", "type": "DateTimePickerType.DATE_AND_TIME",
 *  "valueMsEpoch": "796435200000" } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1DateTimePicker *dateTimePicker;

/**
 *  Displays a decorated text item in this widget. For example, the following
 *  JSON creates a decorated text widget showing email address: ```
 *  "decoratedText": { "icon": { "knownIcon": "EMAIL" }, "topLabel": "Email
 *  Address", "content": "sasha\@example.com", "bottomLabel": "This is a new
 *  Email address!", "switchWidget": { "name":
 *  "has_send_welcome_email_to_sasha", "selected": false, "controlType":
 *  "ControlType.CHECKBOX" } } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1DecoratedText *decoratedText;

/**
 *  Displays a divider. For example, the following JSON creates a divider: ```
 *  "divider": { } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Divider *divider;

/**
 *  Displays a grid with a collection of items. For example, the following JSON
 *  creates a 2 column grid with a single item: ``` "grid": { "title": "A fine
 *  collection of items", "numColumns": 2, "borderStyle": { "type": "STROKE",
 *  "cornerRadius": 4.0 }, "items": [ "image": { "imageUri":
 *  "https://www.example.com/image.png", "cropStyle": { "type": "SQUARE" },
 *  "borderStyle": { "type": "STROKE" } }, "title": "An item", "textAlignment":
 *  "CENTER" ], "onClick": { "openLink": { "url":"https://www.example.com" } } }
 *  ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Grid *grid;

/**
 *  The horizontal alignment of this widget.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_Center
 *        Alignment to the center position. (Value: "CENTER")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_End
 *        Alignment to the end position. (Value: "END")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_HorizontalAlignmentUnspecified
 *        Unspecified alignment. (Value: "HORIZONTAL_ALIGNMENT_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_GoogleAppsCardV1Widget_HorizontalAlignment_Start
 *        Alignment to the start position. (Value: "START")
 */
@property(nonatomic, copy, nullable) NSString *horizontalAlignment;

/**
 *  Displays an image in this widget. For example, the following JSON creates an
 *  image with alternative text: ``` "image": { "imageUrl":
 *  "https://example.com/sasha.png" "altText": "Avatar for Sasha" } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1Image *image;

/**
 *  Displays a switch control in this widget. For example, the following JSON
 *  creates a dropdown selection for size: ``` "switchControl": { "name":
 *  "size", "label": "Size" "type": "SelectionType.DROPDOWN", "items": [ {
 *  "text": "S", "value": "small", "selected": false }, { "text": "M", "value":
 *  "medium", "selected": true }, { "text": "L", "value": "large", "selected":
 *  false }, { "text": "XL", "value": "extra_large", "selected": false } ] } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1SelectionInput *selectionInput;

/**
 *  Displays a text input in this widget. For example, the following JSON
 *  creates a text input for mail address: ``` "textInput": { "name":
 *  "mailing_address", "label": "Mailing Address" } ``` As another example, the
 *  following JSON creates a text input for programming language with static
 *  suggestions: ``` "textInput": { "name": "preferred_programing_language",
 *  "label": "Preferred Language", "initialSuggestions": { "items": [ { "text":
 *  "C++" }, { "text": "Java" }, { "text": "JavaScript" }, { "text": "Python" }
 *  ] } } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1TextInput *textInput;

/**
 *  Displays a text paragraph in this widget. For example, the following JSON
 *  creates a bolded text: ``` "textParagraph": { "text": " *bold text*" } ```
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_GoogleAppsCardV1TextParagraph *textParagraph;

@end


/**
 *  An image that is specified by a URL and can have an onclick action.
 */
@interface GTLRHangoutsChat_Image : GTLRObject

/**
 *  The aspect ratio of this image (width/height). This field allows clients to
 *  reserve the right height for the image while waiting for it to load. It's
 *  not meant to override the native aspect ratio of the image. If unset, the
 *  server fills it by prefetching the image.
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *aspectRatio;

/** The URL of the image. */
@property(nonatomic, copy, nullable) NSString *imageUrl;

/** The onclick action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OnClick *onClick;

@end


/**
 *  An image button with an onclick action.
 */
@interface GTLRHangoutsChat_ImageButton : GTLRObject

/**
 *  The icon specified by an enum that indices to an icon provided by Chat API.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Airplane Value "AIRPLANE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Bookmark Value "BOOKMARK"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Bus Value "BUS"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Car Value "CAR"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Clock Value "CLOCK"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_ConfirmationNumberIcon Value
 *        "CONFIRMATION_NUMBER_ICON"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Description Value "DESCRIPTION"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Dollar Value "DOLLAR"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Email Value "EMAIL"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_EventPerformer Value
 *        "EVENT_PERFORMER"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_EventSeat Value "EVENT_SEAT"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_FlightArrival Value
 *        "FLIGHT_ARRIVAL"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_FlightDeparture Value
 *        "FLIGHT_DEPARTURE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Hotel Value "HOTEL"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_HotelRoomType Value
 *        "HOTEL_ROOM_TYPE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_IconUnspecified Value
 *        "ICON_UNSPECIFIED"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Invite Value "INVITE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_MapPin Value "MAP_PIN"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Membership Value "MEMBERSHIP"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_MultiplePeople Value
 *        "MULTIPLE_PEOPLE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Offer Value "OFFER"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Person Value "PERSON"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Phone Value "PHONE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_RestaurantIcon Value
 *        "RESTAURANT_ICON"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_ShoppingCart Value
 *        "SHOPPING_CART"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Star Value "STAR"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Store Value "STORE"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Ticket Value "TICKET"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_Train Value "TRAIN"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_VideoCamera Value
 *        "VIDEO_CAMERA"
 *    @arg @c kGTLRHangoutsChat_ImageButton_Icon_VideoPlay Value "VIDEO_PLAY"
 */
@property(nonatomic, copy, nullable) NSString *icon;

/** The icon specified by a URL. */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The name of this image_button which will be used for accessibility. Default
 *  value will be provided if developers don't specify.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The onclick action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OnClick *onClick;

@end


/**
 *  Types of data inputs for widgets. Users enter data with these inputs.
 */
@interface GTLRHangoutsChat_Inputs : GTLRObject

/** Date input values. Not supported by Chat apps. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_DateInput *dateInput;

/** Date and time input values. Not supported by Chat apps. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_DateTimeInput *dateTimeInput;

/**
 *  Input parameter for regular widgets. For single-valued widgets, it is a
 *  single value list. For multi-valued widgets, such as checkbox, all the
 *  values are presented.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_StringInputs *stringInputs;

/** Time input values. Not supported by Chat apps. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_TimeInput *timeInput;

@end


/**
 *  A UI element contains a key (label) and a value (content). And this element
 *  may also contain some actions such as onclick button.
 */
@interface GTLRHangoutsChat_KeyValue : GTLRObject

/** The text of the bottom label. Formatted text supported. */
@property(nonatomic, copy, nullable) NSString *bottomLabel;

/** A button that can be clicked to trigger an action. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Button *button;

/** The text of the content. Formatted text supported and always required. */
@property(nonatomic, copy, nullable) NSString *content;

/**
 *  If the content should be multiline.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *contentMultiline;

/**
 *  An enum value that will be replaced by the Chat API with the corresponding
 *  icon image.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Airplane Value "AIRPLANE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Bookmark Value "BOOKMARK"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Bus Value "BUS"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Car Value "CAR"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Clock Value "CLOCK"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_ConfirmationNumberIcon Value
 *        "CONFIRMATION_NUMBER_ICON"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Description Value "DESCRIPTION"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Dollar Value "DOLLAR"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Email Value "EMAIL"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_EventPerformer Value
 *        "EVENT_PERFORMER"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_EventSeat Value "EVENT_SEAT"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_FlightArrival Value
 *        "FLIGHT_ARRIVAL"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_FlightDeparture Value
 *        "FLIGHT_DEPARTURE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Hotel Value "HOTEL"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_HotelRoomType Value
 *        "HOTEL_ROOM_TYPE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_IconUnspecified Value
 *        "ICON_UNSPECIFIED"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Invite Value "INVITE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_MapPin Value "MAP_PIN"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Membership Value "MEMBERSHIP"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_MultiplePeople Value
 *        "MULTIPLE_PEOPLE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Offer Value "OFFER"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Person Value "PERSON"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Phone Value "PHONE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_RestaurantIcon Value
 *        "RESTAURANT_ICON"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_ShoppingCart Value "SHOPPING_CART"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Star Value "STAR"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Store Value "STORE"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Ticket Value "TICKET"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_Train Value "TRAIN"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_VideoCamera Value "VIDEO_CAMERA"
 *    @arg @c kGTLRHangoutsChat_KeyValue_Icon_VideoPlay Value "VIDEO_PLAY"
 */
@property(nonatomic, copy, nullable) NSString *icon;

/** The icon specified by a URL. */
@property(nonatomic, copy, nullable) NSString *iconUrl;

/**
 *  The onclick action. Only the top label, bottom label and content region are
 *  clickable.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OnClick *onClick;

/** The text of the top label. Formatted text supported. */
@property(nonatomic, copy, nullable) NSString *topLabel;

@end


/**
 *  GTLRHangoutsChat_ListMembershipsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "memberships" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRHangoutsChat_ListMembershipsResponse : GTLRCollectionObject

/**
 *  List of memberships in the requested (or first) page.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Membership *> *memberships;

/**
 *  A token that can be sent as `pageToken` to retrieve the next page of
 *  results. If empty, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  GTLRHangoutsChat_ListSpacesResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "spaces" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRHangoutsChat_ListSpacesResponse : GTLRCollectionObject

/**
 *  A token that can be sent as `pageToken` to retrieve the next page of
 *  results. If empty, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of spaces in the requested (or first) page.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Space *> *spaces;

@end


/**
 *  A matched url in a Chat message. Chat apps can preview matched URLs. For
 *  more information, refer to [Preview
 *  links](https://developers.google.com/chat/how-tos/preview-links).
 */
@interface GTLRHangoutsChat_MatchedUrl : GTLRObject

/** Output only. The url that was matched. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Media resource.
 */
@interface GTLRHangoutsChat_Media : GTLRObject

/** Name of the media resource. */
@property(nonatomic, copy, nullable) NSString *resourceName;

@end


/**
 *  Represents a membership relation in Google Chat, such as whether a user or
 *  Chat app is invited to, part of, or absent from a space.
 */
@interface GTLRHangoutsChat_Membership : GTLRObject

/**
 *  Output only. The creation time of the membership, such as when a member
 *  joined or was invited to join a space.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  A Google Chat user or app. Format: `users/{user}` or `users/app` When
 *  `users/{user}`, represents a
 *  [person](https://developers.google.com/people/api/rest/v1/people) in the
 *  People API or a
 *  [user](https://developers.google.com/admin-sdk/directory/reference/rest/v1/users)
 *  in the Admin SDK Directory API. When `users/app`, represents a Chat app
 *  creating membership for itself.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *member;

/**
 *  Resource name of the membership. Format: spaces/{space}/members/{member}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. User's role within a Chat space, which determines their
 *  permitted actions in the space.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Membership_Role_MembershipRoleUnspecified
 *        Default value. The user isn't a member of the space, but might be
 *        invited. (Value: "MEMBERSHIP_ROLE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_Membership_Role_RoleManager A space manager. The
 *        user has all basic permissions plus administrative permissions that
 *        allow them to manage the space, like adding or removing members. Only
 *        supports SpaceType.SPACE. (Value: "ROLE_MANAGER")
 *    @arg @c kGTLRHangoutsChat_Membership_Role_RoleMember A member of the
 *        space. The user has basic permissions, like sending messages to the
 *        space. In 1:1 and unnamed group conversations, everyone has this role.
 *        (Value: "ROLE_MEMBER")
 */
@property(nonatomic, copy, nullable) NSString *role;

/**
 *  Output only. State of the membership.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Membership_State_Invited The user has been
 *        invited, is able to join the space, but currently has not joined.
 *        (Value: "INVITED")
 *    @arg @c kGTLRHangoutsChat_Membership_State_Joined The user has joined the
 *        space. (Value: "JOINED")
 *    @arg @c kGTLRHangoutsChat_Membership_State_MembershipStateUnspecified
 *        Default, do not use. (Value: "MEMBERSHIP_STATE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_Membership_State_NotAMember The user is not a
 *        member of the space, has not been invited and is not able to join the
 *        space. (Value: "NOT_A_MEMBER")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  A message in Google Chat.
 */
@interface GTLRHangoutsChat_Message : GTLRObject

/**
 *  Input only. Parameters that a Chat app can use to configure how its response
 *  is posted.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_ActionResponse *actionResponse;

/** Output only. Annotations associated with the text in this message. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Annotation *> *annotations;

/** Plain-text body of the message with all Chat app mentions stripped out. */
@property(nonatomic, copy, nullable) NSString *argumentText;

/** User uploaded attachment. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Attachment *> *attachment;

/**
 *  Deprecated: Use `cards_v2` instead. Rich, formatted and interactive cards
 *  that can be used to display UI elements such as: formatted texts, buttons,
 *  clickable images. Cards are normally displayed below the plain-text body of
 *  the message.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Card *> *cards;

/**
 *  Richly formatted and interactive cards that display UI elements and editable
 *  widgets, such as: - Formatted text - Buttons - Clickable images - Checkboxes
 *  - Radio buttons - Input widgets. Cards are usually displayed below the
 *  text-body of a Chat message, but can situationally appear other places, such
 *  as [dialogs](https://developers.google.com/chat/how-tos/dialogs). The
 *  `cardId` is a unique identifier among cards in the same message and for
 *  identifying user input values. Currently supported widgets include: -
 *  `TextParagraph` - `DecoratedText` - `Image` - `ButtonList` - `Divider`
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_CardWithId *> *cardsV2;

/**
 *  A custom name for a Chat message assigned at creation. Must start with
 *  `client-` and contain only lowercase letters, numbers, and hyphens up to 63
 *  characters in length. Specify this field to get, update, or delete the
 *  message with the specified value. For example usage, see [Name a created
 *  message](https://developers.google.com/chat/api/guides/crudl/messages#name_a_created_message).
 */
@property(nonatomic, copy, nullable) NSString *clientAssignedMessageId;

/**
 *  Output only. The time at which the message was created in Google Chat
 *  server.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  A plain-text description of the message's cards, used when the actual cards
 *  cannot be displayed (e.g. mobile notifications).
 */
@property(nonatomic, copy, nullable) NSString *fallbackText;

/**
 *  Output only. The time at which the message was last edited by a user. If the
 *  message has never been edited, this field is empty.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *lastUpdateTime;

/**
 *  Output only. A URL in `spaces.messages.text` that matches a link preview
 *  pattern. For more information, refer to [Preview
 *  links](https://developers.google.com/chat/how-tos/preview-links).
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_MatchedUrl *matchedUrl;

/**
 *  Resource name in the form `spaces/ * /messages/ *`. Example:
 *  `spaces/AAAAAAAAAAA/messages/BBBBBBBBBBB.BBBBBBBBBBB`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The user who created the message. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *sender;

/** Output only. Slash command information, if applicable. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_SlashCommand *slashCommand;

/**
 *  The space the message belongs to. When accessed with [user
 *  authentication](https://developers.google.com/chat/api/guides/auth/users),
 *  only the name of the Space is populated.
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Space *space;

/**
 *  Plain-text body of the message. The first link to an image, video, web page,
 *  or other preview-able item generates a preview chip.
 */
@property(nonatomic, copy, nullable) NSString *text;

/**
 *  The thread the message belongs to. For example usage, see [Start or reply to
 *  a message
 *  thread](/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread).
 */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Thread *thread;

/**
 *  Output only. When `true`, the message is a response in a reply thread. When
 *  `false`, the message is visible in the space's top-level conversation as
 *  either the first message of a thread or a message with no threaded replies.
 *  If the space doesn't support reply in threads, this field is always `false`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *threadReply;

@end


/**
 *  An onclick action (e.g. open a link).
 */
@interface GTLRHangoutsChat_OnClick : GTLRObject

/** A form action will be triggered by this onclick if specified. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_FormAction *action;

/** This onclick triggers an open link action if specified. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OpenLink *openLink;

@end


/**
 *  A link that opens a new window.
 */
@interface GTLRHangoutsChat_OpenLink : GTLRObject

/** The URL to open. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  A section contains a collection of widgets that are rendered (vertically) in
 *  the order that they are specified. Across all platforms, cards have a narrow
 *  fixed width, so there is currently no need for layout properties (e.g.
 *  float).
 */
@interface GTLRHangoutsChat_Section : GTLRObject

/** The header of the section, text formatted supported. */
@property(nonatomic, copy, nullable) NSString *header;

/** A section must contain at least 1 widget. */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_WidgetMarkup *> *widgets;

@end


/**
 *  A [slash command](https://developers.google.com/chat/how-tos/slash-commands)
 *  in Google Chat.
 */
@interface GTLRHangoutsChat_SlashCommand : GTLRObject

/**
 *  The id of the slash command invoked.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *commandId;

@end


/**
 *  Annotation metadata for slash commands (/).
 */
@interface GTLRHangoutsChat_SlashCommandMetadata : GTLRObject

/** The Chat app whose command was invoked. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *bot;

/**
 *  The command id of the invoked slash command.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *commandId;

/** The name of the invoked slash command. */
@property(nonatomic, copy, nullable) NSString *commandName;

/**
 *  Indicating whether the slash command is for a dialog.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *triggersDialog;

/**
 *  The type of slash command.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_SlashCommandMetadata_Type_Add Add Chat app to
 *        space. (Value: "ADD")
 *    @arg @c kGTLRHangoutsChat_SlashCommandMetadata_Type_Invoke Invoke slash
 *        command in space. (Value: "INVOKE")
 *    @arg @c kGTLRHangoutsChat_SlashCommandMetadata_Type_TypeUnspecified
 *        Default value for the enum. DO NOT USE. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A space in Google Chat. Spaces are conversations between two or more users
 *  or 1:1 messages between a user and a Chat app.
 */
@interface GTLRHangoutsChat_Space : GTLRObject

/**
 *  The space's display name. For direct messages between humans, this field
 *  might be empty.
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Resource name of the space. Format: spaces/{space} */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Whether the space is a DM between a Chat app and a single human.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *singleUserBotDm;

/** Details about the space including description and rules. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_SpaceDetails *spaceDetails;

/**
 *  Output only. The threading state in the Chat space.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Space_SpaceThreadingState_GroupedMessages Named
 *        spaces where the conversation is organized by topic. Topics and their
 *        replies are grouped together. (Value: "GROUPED_MESSAGES")
 *    @arg @c kGTLRHangoutsChat_Space_SpaceThreadingState_SpaceThreadingStateUnspecified
 *        Reserved. (Value: "SPACE_THREADING_STATE_UNSPECIFIED")
 *    @arg @c kGTLRHangoutsChat_Space_SpaceThreadingState_ThreadedMessages Named
 *        spaces that support message threads. When users respond to a message,
 *        they can reply in-thread, which keeps their response in the context of
 *        the original message. (Value: "THREADED_MESSAGES")
 *    @arg @c kGTLRHangoutsChat_Space_SpaceThreadingState_UnthreadedMessages
 *        Direct messages (DMs) between two people and group conversations
 *        between 3 or more people. (Value: "UNTHREADED_MESSAGES")
 */
@property(nonatomic, copy, nullable) NSString *spaceThreadingState;

/**
 *  Output only. Deprecated: Use `spaceThreadingState` instead. Whether messages
 *  are threaded in this space.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *threaded;

/**
 *  Output only. Deprecated: Use `singleUserBotDm` or `spaceType` (developer
 *  preview) instead. The type of a space.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_Space_Type_Dm 1:1 Direct Message between a human
 *        and a Chat app, where all messages are flat. Note that this does not
 *        include direct messages between two humans. (Value: "DM")
 *    @arg @c kGTLRHangoutsChat_Space_Type_Room Conversations between two or
 *        more humans. (Value: "ROOM")
 *    @arg @c kGTLRHangoutsChat_Space_Type_TypeUnspecified Value
 *        "TYPE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Details about the space including description and rules.
 */
@interface GTLRHangoutsChat_SpaceDetails : GTLRObject

/**
 *  Optional. A description of the space. It could describe the space's
 *  discussion topic, functional purpose, or participants.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Optional. The space's rules, expectations, and etiquette. */
@property(nonatomic, copy, nullable) NSString *guidelines;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRHangoutsChat_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRHangoutsChat_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRHangoutsChat_Status_Details_Item : GTLRObject
@end


/**
 *  Input parameter for regular widgets. For single-valued widgets, it is a
 *  single value list. For multi-valued widgets, such as checkbox, all the
 *  values are presented.
 */
@interface GTLRHangoutsChat_StringInputs : GTLRObject

/** An array of strings entered by the user. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *value;

@end


/**
 *  A button with text and onclick action.
 */
@interface GTLRHangoutsChat_TextButton : GTLRObject

/** The onclick action of the button. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_OnClick *onClick;

/** The text of the button. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A paragraph of text. Formatted text supported.
 */
@interface GTLRHangoutsChat_TextParagraph : GTLRObject

@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  A thread in Google Chat.
 */
@interface GTLRHangoutsChat_Thread : GTLRObject

/** Resource name of the thread. Example: spaces/{space}/threads/{thread} */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Opaque thread identifier. To start or add to a thread, create a
 *  message and specify a `threadKey` or the thread.name. For example usage, see
 *  [Start or reply to a message
 *  thread](/chat/api/guides/crudl/messages#start_or_reply_to_a_message_thread).
 *  For other requests, this is an output only field.
 */
@property(nonatomic, copy, nullable) NSString *threadKey;

@end


/**
 *  Time input values. Not supported by Chat apps.
 */
@interface GTLRHangoutsChat_TimeInput : GTLRObject

/**
 *  The hour on a 24-hour clock.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hours;

/**
 *  The number of minutes past the hour. Valid values are 0 to 59.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minutes;

@end


/**
 *  The timezone ID and offset from Coordinated Universal Time (UTC). Not
 *  supported by Chat apps.
 */
@interface GTLRHangoutsChat_TimeZone : GTLRObject

/**
 *  The [IANA TZ](https://www.iana.org/time-zones) time zone database code, such
 *  as "America/Toronto".
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  The user timezone offset, in milliseconds, from Coordinated Universal Time
 *  (UTC).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offset;

@end


/**
 *  A user in Google Chat.
 */
@interface GTLRHangoutsChat_User : GTLRObject

/** Output only. The user's display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Unique identifier of the user's Google Workspace domain. */
@property(nonatomic, copy, nullable) NSString *domainId;

/**
 *  Output only. When `true`, the user is deleted or their profile is not
 *  visible.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isAnonymous;

/**
 *  Resource name for a Google Chat user. For human users, represents a person
 *  in the People API or a user in the Admin SDK Directory API. Format:
 *  `users/{user}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  User type.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_User_Type_Bot Chat app user. (Value: "BOT")
 *    @arg @c kGTLRHangoutsChat_User_Type_Human Human user. (Value: "HUMAN")
 *    @arg @c kGTLRHangoutsChat_User_Type_TypeUnspecified Default value for the
 *        enum. DO NOT USE. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Annotation metadata for user mentions (\@).
 */
@interface GTLRHangoutsChat_UserMentionMetadata : GTLRObject

/**
 *  The type of user mention.
 *
 *  Likely values:
 *    @arg @c kGTLRHangoutsChat_UserMentionMetadata_Type_Add Add user to space.
 *        (Value: "ADD")
 *    @arg @c kGTLRHangoutsChat_UserMentionMetadata_Type_Mention Mention user in
 *        space. (Value: "MENTION")
 *    @arg @c kGTLRHangoutsChat_UserMentionMetadata_Type_TypeUnspecified Default
 *        value for the enum. DO NOT USE. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/** The user mentioned. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_User *user;

@end


/**
 *  A widget is a UI element that presents texts, images, etc.
 */
@interface GTLRHangoutsChat_WidgetMarkup : GTLRObject

/**
 *  A list of buttons. Buttons is also oneof data and only one of these fields
 *  should be set.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRHangoutsChat_Button *> *buttons;

/** Display an image in this widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_Image *image;

/** Display a key value item in this widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_KeyValue *keyValue;

/** Display a text paragraph in this widget. */
@property(nonatomic, strong, nullable) GTLRHangoutsChat_TextParagraph *textParagraph;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
