// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Chrome Policy API (chromepolicy/v1)
// Description:
//   The Chrome Policy API is a suite of services that allows Chrome
//   administrators to control the policies applied to their managed Chrome OS
//   devices and Chrome browsers.
// Documentation:
//   http://developers.google.com/chrome/policy

#import <GoogleAPIClientForREST/GTLRChromePolicyQuery.h>

@implementation GTLRChromePolicyQuery

@dynamic fields;

@end

@implementation GTLRChromePolicyQuery_CustomersPoliciesGroupsBatchDelete

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRChromePolicy_GoogleChromePolicyVersionsV1BatchDeleteGroupPoliciesRequest *)object
                       customer:(NSString *)customer {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"v1/{+customer}/policies/groups:batchDelete";
  GTLRChromePolicyQuery_CustomersPoliciesGroupsBatchDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRChromePolicy_GoogleProtobufEmpty class];
  query.loggingName = @"chromepolicy.customers.policies.groups.batchDelete";
  return query;
}

@end

@implementation GTLRChromePolicyQuery_CustomersPoliciesGroupsBatchModify

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRChromePolicy_GoogleChromePolicyVersionsV1BatchModifyGroupPoliciesRequest *)object
                       customer:(NSString *)customer {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"v1/{+customer}/policies/groups:batchModify";
  GTLRChromePolicyQuery_CustomersPoliciesGroupsBatchModify *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRChromePolicy_GoogleProtobufEmpty class];
  query.loggingName = @"chromepolicy.customers.policies.groups.batchModify";
  return query;
}

@end

@implementation GTLRChromePolicyQuery_CustomersPoliciesGroupsListGroupPriorityOrdering

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRChromePolicy_GoogleChromePolicyVersionsV1ListGroupPriorityOrderingRequest *)object
                       customer:(NSString *)customer {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"v1/{+customer}/policies/groups:listGroupPriorityOrdering";
  GTLRChromePolicyQuery_CustomersPoliciesGroupsListGroupPriorityOrdering *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRChromePolicy_GoogleChromePolicyVersionsV1ListGroupPriorityOrderingResponse class];
  query.loggingName = @"chromepolicy.customers.policies.groups.listGroupPriorityOrdering";
  return query;
}

@end

@implementation GTLRChromePolicyQuery_CustomersPoliciesGroupsUpdateGroupPriorityOrdering

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRChromePolicy_GoogleChromePolicyVersionsV1UpdateGroupPriorityOrderingRequest *)object
                       customer:(NSString *)customer {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"v1/{+customer}/policies/groups:updateGroupPriorityOrdering";
  GTLRChromePolicyQuery_CustomersPoliciesGroupsUpdateGroupPriorityOrdering *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRChromePolicy_GoogleProtobufEmpty class];
  query.loggingName = @"chromepolicy.customers.policies.groups.updateGroupPriorityOrdering";
  return query;
}

@end

@implementation GTLRChromePolicyQuery_CustomersPoliciesNetworksDefineCertificate

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRChromePolicy_GoogleChromePolicyVersionsV1DefineCertificateRequest *)object
                       customer:(NSString *)customer {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"v1/{+customer}/policies/networks:defineCertificate";
  GTLRChromePolicyQuery_CustomersPoliciesNetworksDefineCertificate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRChromePolicy_GoogleChromePolicyVersionsV1DefineCertificateResponse class];
  query.loggingName = @"chromepolicy.customers.policies.networks.defineCertificate";
  return query;
}

@end

@implementation GTLRChromePolicyQuery_CustomersPoliciesNetworksDefineNetwork

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRChromePolicy_GoogleChromePolicyVersionsV1DefineNetworkRequest *)object
                       customer:(NSString *)customer {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"v1/{+customer}/policies/networks:defineNetwork";
  GTLRChromePolicyQuery_CustomersPoliciesNetworksDefineNetwork *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRChromePolicy_GoogleChromePolicyVersionsV1DefineNetworkResponse class];
  query.loggingName = @"chromepolicy.customers.policies.networks.defineNetwork";
  return query;
}

@end

@implementation GTLRChromePolicyQuery_CustomersPoliciesNetworksRemoveCertificate

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRChromePolicy_GoogleChromePolicyVersionsV1RemoveCertificateRequest *)object
                       customer:(NSString *)customer {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"v1/{+customer}/policies/networks:removeCertificate";
  GTLRChromePolicyQuery_CustomersPoliciesNetworksRemoveCertificate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRChromePolicy_GoogleChromePolicyVersionsV1RemoveCertificateResponse class];
  query.loggingName = @"chromepolicy.customers.policies.networks.removeCertificate";
  return query;
}

@end

@implementation GTLRChromePolicyQuery_CustomersPoliciesNetworksRemoveNetwork

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRChromePolicy_GoogleChromePolicyVersionsV1RemoveNetworkRequest *)object
                       customer:(NSString *)customer {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"v1/{+customer}/policies/networks:removeNetwork";
  GTLRChromePolicyQuery_CustomersPoliciesNetworksRemoveNetwork *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRChromePolicy_GoogleChromePolicyVersionsV1RemoveNetworkResponse class];
  query.loggingName = @"chromepolicy.customers.policies.networks.removeNetwork";
  return query;
}

@end

@implementation GTLRChromePolicyQuery_CustomersPoliciesOrgunitsBatchInherit

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRChromePolicy_GoogleChromePolicyVersionsV1BatchInheritOrgUnitPoliciesRequest *)object
                       customer:(NSString *)customer {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"v1/{+customer}/policies/orgunits:batchInherit";
  GTLRChromePolicyQuery_CustomersPoliciesOrgunitsBatchInherit *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRChromePolicy_GoogleProtobufEmpty class];
  query.loggingName = @"chromepolicy.customers.policies.orgunits.batchInherit";
  return query;
}

@end

@implementation GTLRChromePolicyQuery_CustomersPoliciesOrgunitsBatchModify

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRChromePolicy_GoogleChromePolicyVersionsV1BatchModifyOrgUnitPoliciesRequest *)object
                       customer:(NSString *)customer {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"v1/{+customer}/policies/orgunits:batchModify";
  GTLRChromePolicyQuery_CustomersPoliciesOrgunitsBatchModify *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRChromePolicy_GoogleProtobufEmpty class];
  query.loggingName = @"chromepolicy.customers.policies.orgunits.batchModify";
  return query;
}

@end

@implementation GTLRChromePolicyQuery_CustomersPoliciesResolve

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRChromePolicy_GoogleChromePolicyVersionsV1ResolveRequest *)object
                       customer:(NSString *)customer {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"v1/{+customer}/policies:resolve";
  GTLRChromePolicyQuery_CustomersPoliciesResolve *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.expectedObjectClass = [GTLRChromePolicy_GoogleChromePolicyVersionsV1ResolveResponse class];
  query.loggingName = @"chromepolicy.customers.policies.resolve";
  return query;
}

@end

@implementation GTLRChromePolicyQuery_CustomersPolicySchemasGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRChromePolicyQuery_CustomersPolicySchemasGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRChromePolicy_GoogleChromePolicyVersionsV1PolicySchema class];
  query.loggingName = @"chromepolicy.customers.policySchemas.get";
  return query;
}

@end

@implementation GTLRChromePolicyQuery_CustomersPolicySchemasList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/policySchemas";
  GTLRChromePolicyQuery_CustomersPolicySchemasList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRChromePolicy_GoogleChromePolicyVersionsV1ListPolicySchemasResponse class];
  query.loggingName = @"chromepolicy.customers.policySchemas.list";
  return query;
}

@end

@implementation GTLRChromePolicyQuery_MediaUpload

@dynamic customer;

+ (instancetype)queryWithObject:(GTLRChromePolicy_GoogleChromePolicyVersionsV1UploadPolicyFileRequest *)object
                       customer:(NSString *)customer
               uploadParameters:(GTLRUploadParameters *)uploadParameters {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"customer" ];
  NSString *pathURITemplate = @"v1/{+customer}/policies/files:uploadPolicyFile";
  GTLRChromePolicyQuery_MediaUpload *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.customer = customer;
  query.uploadParameters = uploadParameters;
  query.expectedObjectClass = [GTLRChromePolicy_GoogleChromePolicyVersionsV1UploadPolicyFileResponse class];
  query.loggingName = @"chromepolicy.media.upload";
  return query;
}

@end
