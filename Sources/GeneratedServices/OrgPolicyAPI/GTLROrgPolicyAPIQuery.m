// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Organization Policy API (orgpolicy/v2)
// Description:
//   The Org Policy API allows users to configure governance rules on their GCP
//   resources across the Cloud Resource Hierarchy.
// Documentation:
//   https://cloud.google.com/orgpolicy/docs/reference/rest/index.html

#import <GoogleAPIClientForREST/GTLROrgPolicyAPIQuery.h>

@implementation GTLROrgPolicyAPIQuery

@dynamic fields;

@end

@implementation GTLROrgPolicyAPIQuery_FoldersConstraintsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/constraints";
  GTLROrgPolicyAPIQuery_FoldersConstraintsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2ListConstraintsResponse class];
  query.loggingName = @"orgpolicy.folders.constraints.list";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_FoldersPoliciesCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/policies";
  GTLROrgPolicyAPIQuery_FoldersPoliciesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy class];
  query.loggingName = @"orgpolicy.folders.policies.create";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_FoldersPoliciesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLROrgPolicyAPIQuery_FoldersPoliciesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleProtobufEmpty class];
  query.loggingName = @"orgpolicy.folders.policies.delete";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_FoldersPoliciesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLROrgPolicyAPIQuery_FoldersPoliciesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy class];
  query.loggingName = @"orgpolicy.folders.policies.get";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_FoldersPoliciesGetEffectivePolicy

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:getEffectivePolicy";
  GTLROrgPolicyAPIQuery_FoldersPoliciesGetEffectivePolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy class];
  query.loggingName = @"orgpolicy.folders.policies.getEffectivePolicy";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_FoldersPoliciesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/policies";
  GTLROrgPolicyAPIQuery_FoldersPoliciesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2ListPoliciesResponse class];
  query.loggingName = @"orgpolicy.folders.policies.list";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_FoldersPoliciesPatch

@dynamic name;

+ (instancetype)queryWithObject:(GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLROrgPolicyAPIQuery_FoldersPoliciesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy class];
  query.loggingName = @"orgpolicy.folders.policies.patch";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_OrganizationsConstraintsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/constraints";
  GTLROrgPolicyAPIQuery_OrganizationsConstraintsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2ListConstraintsResponse class];
  query.loggingName = @"orgpolicy.organizations.constraints.list";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_OrganizationsCustomConstraintsCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2CustomConstraint *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/customConstraints";
  GTLROrgPolicyAPIQuery_OrganizationsCustomConstraintsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2CustomConstraint class];
  query.loggingName = @"orgpolicy.organizations.customConstraints.create";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_OrganizationsCustomConstraintsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLROrgPolicyAPIQuery_OrganizationsCustomConstraintsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleProtobufEmpty class];
  query.loggingName = @"orgpolicy.organizations.customConstraints.delete";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_OrganizationsCustomConstraintsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLROrgPolicyAPIQuery_OrganizationsCustomConstraintsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2CustomConstraint class];
  query.loggingName = @"orgpolicy.organizations.customConstraints.get";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_OrganizationsCustomConstraintsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/customConstraints";
  GTLROrgPolicyAPIQuery_OrganizationsCustomConstraintsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2ListCustomConstraintsResponse class];
  query.loggingName = @"orgpolicy.organizations.customConstraints.list";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_OrganizationsCustomConstraintsPatch

@dynamic name;

+ (instancetype)queryWithObject:(GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2CustomConstraint *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLROrgPolicyAPIQuery_OrganizationsCustomConstraintsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2CustomConstraint class];
  query.loggingName = @"orgpolicy.organizations.customConstraints.patch";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_OrganizationsPoliciesCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/policies";
  GTLROrgPolicyAPIQuery_OrganizationsPoliciesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy class];
  query.loggingName = @"orgpolicy.organizations.policies.create";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_OrganizationsPoliciesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLROrgPolicyAPIQuery_OrganizationsPoliciesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleProtobufEmpty class];
  query.loggingName = @"orgpolicy.organizations.policies.delete";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_OrganizationsPoliciesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLROrgPolicyAPIQuery_OrganizationsPoliciesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy class];
  query.loggingName = @"orgpolicy.organizations.policies.get";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_OrganizationsPoliciesGetEffectivePolicy

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:getEffectivePolicy";
  GTLROrgPolicyAPIQuery_OrganizationsPoliciesGetEffectivePolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy class];
  query.loggingName = @"orgpolicy.organizations.policies.getEffectivePolicy";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_OrganizationsPoliciesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/policies";
  GTLROrgPolicyAPIQuery_OrganizationsPoliciesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2ListPoliciesResponse class];
  query.loggingName = @"orgpolicy.organizations.policies.list";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_OrganizationsPoliciesPatch

@dynamic name;

+ (instancetype)queryWithObject:(GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLROrgPolicyAPIQuery_OrganizationsPoliciesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy class];
  query.loggingName = @"orgpolicy.organizations.policies.patch";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_ProjectsConstraintsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/constraints";
  GTLROrgPolicyAPIQuery_ProjectsConstraintsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2ListConstraintsResponse class];
  query.loggingName = @"orgpolicy.projects.constraints.list";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_ProjectsPoliciesCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/policies";
  GTLROrgPolicyAPIQuery_ProjectsPoliciesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy class];
  query.loggingName = @"orgpolicy.projects.policies.create";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_ProjectsPoliciesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLROrgPolicyAPIQuery_ProjectsPoliciesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleProtobufEmpty class];
  query.loggingName = @"orgpolicy.projects.policies.delete";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_ProjectsPoliciesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLROrgPolicyAPIQuery_ProjectsPoliciesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy class];
  query.loggingName = @"orgpolicy.projects.policies.get";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_ProjectsPoliciesGetEffectivePolicy

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:getEffectivePolicy";
  GTLROrgPolicyAPIQuery_ProjectsPoliciesGetEffectivePolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy class];
  query.loggingName = @"orgpolicy.projects.policies.getEffectivePolicy";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_ProjectsPoliciesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/policies";
  GTLROrgPolicyAPIQuery_ProjectsPoliciesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2ListPoliciesResponse class];
  query.loggingName = @"orgpolicy.projects.policies.list";
  return query;
}

@end

@implementation GTLROrgPolicyAPIQuery_ProjectsPoliciesPatch

@dynamic name;

+ (instancetype)queryWithObject:(GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLROrgPolicyAPIQuery_ProjectsPoliciesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROrgPolicyAPI_GoogleCloudOrgpolicyV2Policy class];
  query.loggingName = @"orgpolicy.projects.policies.patch";
  return query;
}

@end
