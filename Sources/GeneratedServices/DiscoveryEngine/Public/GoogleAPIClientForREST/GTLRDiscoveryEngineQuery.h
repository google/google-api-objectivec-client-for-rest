// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Discovery Engine API (discoveryengine/v1)
// Description:
//   Discovery Engine API.
// Documentation:
//   https://cloud.google.com/generative-ai-app-builder/docs/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRDiscoveryEngineObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Discovery Engine query classes.
 */
@interface GTLRDiscoveryEngineQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: discoveryengine.projects.locations.collections.dataConnector.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataConnectorOperationsGet : GTLRDiscoveryEngineQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataConnectorOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: discoveryengine.projects.locations.collections.dataConnector.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataConnectorOperationsList : GTLRDiscoveryEngineQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataConnectorOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets index freshness metadata for Documents. Supported for website search
 *  only.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.branches.batchGetDocumentsMetadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesBatchGetDocumentsMetadata : GTLRDiscoveryEngineQuery

/**
 *  Required. The FHIR resources to match by. Format:
 *  projects/{project}/locations/{location}/datasets/{dataset}/fhirStores/{fhir_store}/fhir/{resource_type}/{fhir_resource_id}
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *matcherFhirMatcherFhirResources;

/** The exact URIs to match by. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *matcherUrisMatcherUris;

/**
 *  Required. The parent branch resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1BatchGetDocumentsMetadataResponse.
 *
 *  Gets index freshness metadata for Documents. Supported for website search
 *  only.
 *
 *  @param parent Required. The parent branch resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesBatchGetDocumentsMetadata
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a Document.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.branches.documents.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesDocumentsCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. The ID to use for the Document, which becomes the final component
 *  of the Document.name. If the caller does not have permission to create the
 *  Document, regardless of whether or not it exists, a `PERMISSION_DENIED`
 *  error is returned. This field must be unique among all Documents with the
 *  same parent. Otherwise, an `ALREADY_EXISTS` error is returned. This field
 *  must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard
 *  with a length limit of 63 characters. Otherwise, an `INVALID_ARGUMENT` error
 *  is returned.
 */
@property(nonatomic, copy, nullable) NSString *documentId;

/**
 *  Required. The parent resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Document.
 *
 *  Creates a Document.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Document to include in the
 *    query.
 *  @param parent Required. The parent resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesDocumentsCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Document *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Document.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.branches.documents.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesDocumentsDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of Document, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}`.
 *  If the caller does not have permission to delete the Document, regardless of
 *  whether or not it exists, a `PERMISSION_DENIED` error is returned. If the
 *  Document to delete does not exist, a `NOT_FOUND` error is returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleProtobufEmpty.
 *
 *  Deletes a Document.
 *
 *  @param name Required. Full resource name of Document, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}`.
 *    If the caller does not have permission to delete the Document, regardless
 *    of whether or not it exists, a `PERMISSION_DENIED` error is returned. If
 *    the Document to delete does not exist, a `NOT_FOUND` error is returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesDocumentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Document.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.branches.documents.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesDocumentsGet : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of Document, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}`.
 *  If the caller does not have permission to access the Document, regardless of
 *  whether or not it exists, a `PERMISSION_DENIED` error is returned. If the
 *  requested Document does not exist, a `NOT_FOUND` error is returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Document.
 *
 *  Gets a Document.
 *
 *  @param name Required. Full resource name of Document, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}`.
 *    If the caller does not have permission to access the Document, regardless
 *    of whether or not it exists, a `PERMISSION_DENIED` error is returned. If
 *    the requested Document does not exist, a `NOT_FOUND` error is returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesDocumentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Bulk import of multiple Documents. Request processing may be synchronous.
 *  Non-existing items are created. Note: It is possible for a subset of the
 *  Documents to be successfully updated.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.branches.documents.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesDocumentsImport : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent branch resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 *  Requires create/update permission.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Bulk import of multiple Documents. Request processing may be synchronous.
 *  Non-existing items are created. Note: It is possible for a subset of the
 *  Documents to be successfully updated.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ImportDocumentsRequest to
 *    include in the query.
 *  @param parent Required. The parent branch resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 *    Requires create/update permission.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesDocumentsImport
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ImportDocumentsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets a list of Documents.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.branches.documents.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesDocumentsList : GTLRDiscoveryEngineQuery

/**
 *  Maximum number of Documents to return. If unspecified, defaults to 100. The
 *  maximum allowed value is 1000. Values above 1000 are set to 1000. If this
 *  field is negative, an `INVALID_ARGUMENT` error is returned.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token ListDocumentsResponse.next_page_token, received from a previous
 *  DocumentService.ListDocuments call. Provide this to retrieve the subsequent
 *  page. When paginating, all other parameters provided to
 *  DocumentService.ListDocuments must match the call that provided the page
 *  token. Otherwise, an `INVALID_ARGUMENT` error is returned.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent branch resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 *  Use `default_branch` as the branch ID, to list documents under the default
 *  branch. If the caller does not have permission to list Documents under this
 *  branch, regardless of whether or not this branch exists, a
 *  `PERMISSION_DENIED` error is returned.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListDocumentsResponse.
 *
 *  Gets a list of Documents.
 *
 *  @param parent Required. The parent branch resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 *    Use `default_branch` as the branch ID, to list documents under the default
 *    branch. If the caller does not have permission to list Documents under
 *    this branch, regardless of whether or not this branch exists, a
 *    `PERMISSION_DENIED` error is returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesDocumentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a Document.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.branches.documents.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesDocumentsPatch : GTLRDiscoveryEngineQuery

/**
 *  If set to `true` and the Document is not found, a new Document is be
 *  created.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  Immutable. The full resource name of the document. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document_id}`.
 *  This field must be a UTF-8 encoded string with a length limit of 1024
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Indicates which fields in the provided imported 'document' to update. If not
 *  set, by default updates all fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Document.
 *
 *  Updates a Document.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Document to include in the
 *    query.
 *  @param name Immutable. The full resource name of the document. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document_id}`.
 *    This field must be a UTF-8 encoded string with a length limit of 1024
 *    characters.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesDocumentsPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Document *)object
                           name:(NSString *)name;

@end

/**
 *  Permanently deletes all selected Documents in a branch. This process is
 *  asynchronous. Depending on the number of Documents to be deleted, this
 *  operation can take hours to complete. Before the delete operation completes,
 *  some Documents might still be returned by DocumentService.GetDocument or
 *  DocumentService.ListDocuments. To get a list of the Documents to be deleted,
 *  set PurgeDocumentsRequest.force to false.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.branches.documents.purge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesDocumentsPurge : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Permanently deletes all selected Documents in a branch. This process is
 *  asynchronous. Depending on the number of Documents to be deleted, this
 *  operation can take hours to complete. Before the delete operation completes,
 *  some Documents might still be returned by DocumentService.GetDocument or
 *  DocumentService.ListDocuments. To get a list of the Documents to be deleted,
 *  set PurgeDocumentsRequest.force to false.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1PurgeDocumentsRequest to
 *    include in the query.
 *  @param parent Required. The parent resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesDocumentsPurge
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1PurgeDocumentsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.branches.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesOperationsCancel : GTLRDiscoveryEngineQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleProtobufEmpty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleLongrunningCancelOperationRequest to include in
 *    the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleLongrunningCancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.branches.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesOperationsGet : GTLRDiscoveryEngineQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.branches.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesOperationsList : GTLRDiscoveryEngineQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresBranchesOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Completes the specified user input with keyword suggestions.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.completeQuery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresCompleteQuery : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent data store resource name for which the completion is
 *  performed, such as `projects/ *
 *  /locations/global/collections/default_collection/dataStores/default_data_store`.
 */
@property(nonatomic, copy, nullable) NSString *dataStore;

/**
 *  Indicates if tail suggestions should be returned if there are no suggestions
 *  that match the full query. Even if set to true, if there are suggestions
 *  that match the full query, those are returned and no tail suggestions are
 *  returned.
 */
@property(nonatomic, assign) BOOL includeTailSuggestions;

/**
 *  Required. The typeahead input used to fetch suggestions. Maximum length is
 *  128 characters.
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Specifies the autocomplete data model. This overrides any model specified in
 *  the Configuration > Autocomplete section of the Cloud console. Currently
 *  supported values: * `document` - Using suggestions generated from
 *  user-imported documents. * `search-history` - Using suggestions generated
 *  from the past history of SearchService.Search API calls. Do not use it when
 *  there is no traffic for Search API. * `user-event` - Using suggestions
 *  generated from user-imported search events. * `document-completable` - Using
 *  suggestions taken directly from user-imported document fields marked as
 *  completable. Default values: * `document` is the default model for regular
 *  dataStores. * `search-history` is the default model for site search
 *  dataStores.
 */
@property(nonatomic, copy, nullable) NSString *queryModel;

/**
 *  A unique identifier for tracking visitors. For example, this could be
 *  implemented with an HTTP cookie, which should be able to uniquely identify a
 *  visitor on a single device. This unique identifier should not change if the
 *  visitor logs in or out of the website. This field should NOT have a fixed
 *  value such as `unknown_visitor`. This should be the same identifier as
 *  UserEvent.user_pseudo_id and SearchRequest.user_pseudo_id. The field must be
 *  a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an
 *  `INVALID_ARGUMENT` error is returned.
 */
@property(nonatomic, copy, nullable) NSString *userPseudoId;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1CompleteQueryResponse.
 *
 *  Completes the specified user input with keyword suggestions.
 *
 *  @param dataStore Required. The parent data store resource name for which the
 *    completion is performed, such as `projects/ *
 *    /locations/global/collections/default_collection/dataStores/default_data_store`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresCompleteQuery
 */
+ (instancetype)queryWithDataStore:(NSString *)dataStore;

@end

/**
 *  Imports CompletionSuggestions for a DataStore.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.completionSuggestions.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresCompletionSuggestionsImport : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent data store resource name for which to import customer
 *  autocomplete suggestions. Follows pattern `projects/ * /locations/ *
 *  /collections/ * /dataStores/ *`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Imports CompletionSuggestions for a DataStore.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ImportCompletionSuggestionsRequest
 *    to include in the query.
 *  @param parent Required. The parent data store resource name for which to
 *    import customer autocomplete suggestions. Follows pattern `projects/ *
 *    /locations/ * /collections/ * /dataStores/ *`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresCompletionSuggestionsImport
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ImportCompletionSuggestionsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Permanently deletes all CompletionSuggestions for a DataStore.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.completionSuggestions.purge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresCompletionSuggestionsPurge : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent data store resource name for which to purge completion
 *  suggestions. Follows pattern projects/ * /locations/ * /collections/ *
 *  /dataStores/ *.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Permanently deletes all CompletionSuggestions for a DataStore.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1PurgeCompletionSuggestionsRequest
 *    to include in the query.
 *  @param parent Required. The parent data store resource name for which to
 *    purge completion suggestions. Follows pattern projects/ * /locations/ *
 *    /collections/ * /dataStores/ *.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresCompletionSuggestionsPurge
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1PurgeCompletionSuggestionsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a Control. By default 1000 controls are allowed for a data store. A
 *  request can be submitted to adjust this limit. If the Control to create
 *  already exists, an ALREADY_EXISTS error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.controls.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresControlsCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. The ID to use for the Control, which will become the final
 *  component of the Control's resource name. This value must be within 1-63
 *  characters. Valid characters are /a-z-_/.
 */
@property(nonatomic, copy, nullable) NSString *controlId;

/**
 *  Required. Full resource name of parent data store. Format:
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`
 *  or
 *  `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control.
 *
 *  Creates a Control. By default 1000 controls are allowed for a data store. A
 *  request can be submitted to adjust this limit. If the Control to create
 *  already exists, an ALREADY_EXISTS error is returned.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control
 *    to include in the query.
 *  @param parent Required. Full resource name of parent data store. Format:
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`
 *    or
 *    `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresControlsCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Control. If the Control to delete does not exist, a NOT_FOUND
 *  error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.controls.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresControlsDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Control to delete. Format:
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/controls/{control_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleProtobufEmpty.
 *
 *  Deletes a Control. If the Control to delete does not exist, a NOT_FOUND
 *  error is returned.
 *
 *  @param name Required. The resource name of the Control to delete. Format:
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/controls/{control_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresControlsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Control.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.controls.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresControlsGet : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Control to get. Format:
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/controls/{control_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control.
 *
 *  Gets a Control.
 *
 *  @param name Required. The resource name of the Control to get. Format:
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/controls/{control_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresControlsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all Controls by their parent DataStore.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.controls.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresControlsList : GTLRDiscoveryEngineQuery

/**
 *  Optional. A filter to apply on the list results. Supported features: * List
 *  all the products under the parent branch if filter is unset. Currently this
 *  field is unsupported.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Maximum number of results to return. If unspecified, defaults to
 *  50. Max allowed value is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListControls` call.
 *  Provide this to retrieve the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The data store resource name. Format:
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`
 *  or
 *  `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListControlsResponse.
 *
 *  Lists all Controls by their parent DataStore.
 *
 *  @param parent Required. The data store resource name. Format:
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`
 *    or
 *    `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresControlsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a Control. Control action type cannot be changed. If the Control to
 *  update does not exist, a NOT_FOUND error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.controls.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresControlsPatch : GTLRDiscoveryEngineQuery

/**
 *  Immutable. Fully qualified name `projects/ * /locations/global/dataStore/ *
 *  /controls/ *`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Indicates which fields in the provided Control to update. The
 *  following are NOT supported: * Control.name * Control.solution_type If not
 *  set or empty, all supported fields are updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control.
 *
 *  Updates a Control. Control action type cannot be changed. If the Control to
 *  update does not exist, a NOT_FOUND error is returned.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control
 *    to include in the query.
 *  @param name Immutable. Fully qualified name `projects/ *
 *    /locations/global/dataStore/ * /controls/ *`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresControlsPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control *)object
                           name:(NSString *)name;

@end

/**
 *  Converses a conversation.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.conversations.converse
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresConversationsConverse : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Conversation to get. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`.
 *  Use
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/-`
 *  to activate auto session mode, which automatically creates a new
 *  conversation inside a ConverseConversation session.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ConverseConversationResponse.
 *
 *  Converses a conversation.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ConverseConversationRequest
 *    to include in the query.
 *  @param name Required. The resource name of the Conversation to get. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`.
 *    Use
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/-`
 *    to activate auto session mode, which automatically creates a new
 *    conversation inside a ConverseConversation session.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresConversationsConverse
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ConverseConversationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a Conversation. If the Conversation to create already exists, an
 *  ALREADY_EXISTS error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.conversations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresConversationsCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of parent data store. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation.
 *
 *  Creates a Conversation. If the Conversation to create already exists, an
 *  ALREADY_EXISTS error is returned.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation to include in
 *    the query.
 *  @param parent Required. Full resource name of parent data store. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresConversationsCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Conversation. If the Conversation to delete does not exist, a
 *  NOT_FOUND error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.conversations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresConversationsDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Conversation to delete. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleProtobufEmpty.
 *
 *  Deletes a Conversation. If the Conversation to delete does not exist, a
 *  NOT_FOUND error is returned.
 *
 *  @param name Required. The resource name of the Conversation to delete.
 *    Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresConversationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Conversation.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.conversations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresConversationsGet : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Conversation to get. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation.
 *
 *  Gets a Conversation.
 *
 *  @param name Required. The resource name of the Conversation to get. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresConversationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all Conversations by their parent DataStore.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.conversations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresConversationsList : GTLRDiscoveryEngineQuery

/**
 *  A filter to apply on the list results. The supported features are:
 *  user_pseudo_id, state. Example: "user_pseudo_id = some_id"
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  A comma-separated list of fields to order by, sorted in ascending order. Use
 *  "desc" after a field name for descending. Supported fields: * `update_time`
 *  * `create_time` * `conversation_name` Example: "update_time desc"
 *  "create_time"
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Maximum number of results to return. If unspecified, defaults to 50. Max
 *  allowed value is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListConversations` call. Provide
 *  this to retrieve the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The data store resource name. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListConversationsResponse.
 *
 *  Lists all Conversations by their parent DataStore.
 *
 *  @param parent Required. The data store resource name. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresConversationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a Conversation. Conversation action type cannot be changed. If the
 *  Conversation to update does not exist, a NOT_FOUND error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.conversations.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresConversationsPatch : GTLRDiscoveryEngineQuery

/**
 *  Immutable. Fully qualified name
 *  `projects/{project}/locations/global/collections/{collection}/dataStore/ *
 *  /conversations/ *` or
 *  `projects/{project}/locations/global/collections/{collection}/engines/ *
 *  /conversations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Indicates which fields in the provided Conversation to update. The following
 *  are NOT supported: * Conversation.name If not set or empty, all supported
 *  fields are updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation.
 *
 *  Updates a Conversation. Conversation action type cannot be changed. If the
 *  Conversation to update does not exist, a NOT_FOUND error is returned.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation to include in
 *    the query.
 *  @param name Immutable. Fully qualified name
 *    `projects/{project}/locations/global/collections/{collection}/dataStore/ *
 *    /conversations/ *` or
 *    `projects/{project}/locations/global/collections/{collection}/engines/ *
 *    /conversations/ *`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresConversationsPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a DataStore. DataStore is for storing Documents. To serve these
 *  documents for Search, or Recommendation use case, an Engine needs to be
 *  created separately.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresCreate : GTLRDiscoveryEngineQuery

/**
 *  A boolean flag indicating whether user want to directly create an advanced
 *  data store for site search. If the data store is not configured as site
 *  search (GENERIC vertical and PUBLIC_WEBSITE content_config), this flag will
 *  be ignored.
 */
@property(nonatomic, assign) BOOL createAdvancedSiteSearch;

/**
 *  Required. The ID to use for the DataStore, which will become the final
 *  component of the DataStore's resource name. This field must conform to
 *  [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit
 *  of 63 characters. Otherwise, an INVALID_ARGUMENT error is returned.
 */
@property(nonatomic, copy, nullable) NSString *dataStoreId;

/**
 *  Required. The parent resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  A boolean flag indicating whether to skip the default schema creation for
 *  the data store. Only enable this flag if you are certain that the default
 *  schema is incompatible with your use case. If set to true, you must manually
 *  create a schema for the data store before any documents can be ingested.
 *  This flag cannot be specified if `data_store.starting_schema` is specified.
 */
@property(nonatomic, assign) BOOL skipDefaultSchemaCreation;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Creates a DataStore. DataStore is for storing Documents. To serve these
 *  documents for Search, or Recommendation use case, an Engine needs to be
 *  created separately.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1DataStore to include in
 *    the query.
 *  @param parent Required. The parent resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1DataStore *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets a list of all the custom models.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.customModels.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresCustomModelsList : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the parent Data Store, such as `projects/ *
 *  /locations/global/collections/default_collection/dataStores/default_data_store`.
 *  This field is used to identify the data store where to fetch the models
 *  from.
 */
@property(nonatomic, copy, nullable) NSString *dataStore;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListCustomModelsResponse.
 *
 *  Gets a list of all the custom models.
 *
 *  @param dataStore Required. The resource name of the parent Data Store, such
 *    as `projects/ *
 *    /locations/global/collections/default_collection/dataStores/default_data_store`.
 *    This field is used to identify the data store where to fetch the models
 *    from.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresCustomModelsList
 */
+ (instancetype)queryWithDataStore:(NSString *)dataStore;

@end

/**
 *  Deletes a DataStore.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of DataStore, such as
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
 *  If the caller does not have permission to delete the DataStore, regardless
 *  of whether or not it exists, a PERMISSION_DENIED error is returned. If the
 *  DataStore to delete does not exist, a NOT_FOUND error is returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Deletes a DataStore.
 *
 *  @param name Required. Full resource name of DataStore, such as
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
 *    If the caller does not have permission to delete the DataStore, regardless
 *    of whether or not it exists, a PERMISSION_DENIED error is returned. If the
 *    DataStore to delete does not exist, a NOT_FOUND error is returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a DataStore.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresGet : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of DataStore, such as
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
 *  If the caller does not have permission to access the DataStore, regardless
 *  of whether or not it exists, a PERMISSION_DENIED error is returned. If the
 *  requested DataStore does not exist, a NOT_FOUND error is returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1DataStore.
 *
 *  Gets a DataStore.
 *
 *  @param name Required. Full resource name of DataStore, such as
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
 *    If the caller does not have permission to access the DataStore, regardless
 *    of whether or not it exists, a PERMISSION_DENIED error is returned. If the
 *    requested DataStore does not exist, a NOT_FOUND error is returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the SiteSearchEngine.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.getSiteSearchEngine
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresGetSiteSearchEngine : GTLRDiscoveryEngineQuery

/**
 *  Required. Resource name of SiteSearchEngine, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 *  If the caller does not have permission to access the [SiteSearchEngine],
 *  regardless of whether or not it exists, a PERMISSION_DENIED error is
 *  returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1SiteSearchEngine.
 *
 *  Gets the SiteSearchEngine.
 *
 *  @param name Required. Resource name of SiteSearchEngine, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 *    If the caller does not have permission to access the [SiteSearchEngine],
 *    regardless of whether or not it exists, a PERMISSION_DENIED error is
 *    returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresGetSiteSearchEngine
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all the DataStores associated with the project.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresList : GTLRDiscoveryEngineQuery

/**
 *  Filter by solution type . For example: `filter =
 *  'solution_type:SOLUTION_TYPE_SEARCH'`
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Maximum number of DataStores to return. If unspecified, defaults to 10. The
 *  maximum allowed value is 50. Values above 50 will be coerced to 50. If this
 *  field is negative, an INVALID_ARGUMENT is returned.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token ListDataStoresResponse.next_page_token, received from a
 *  previous DataStoreService.ListDataStores call. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to
 *  DataStoreService.ListDataStores must match the call that provided the page
 *  token. Otherwise, an INVALID_ARGUMENT error is returned.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent branch resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection_id}`. If
 *  the caller does not have permission to list DataStores under this location,
 *  regardless of whether or not this data store exists, a PERMISSION_DENIED
 *  error is returned.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListDataStoresResponse.
 *
 *  Lists all the DataStores associated with the project.
 *
 *  @param parent Required. The parent branch resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection_id}`. If
 *    the caller does not have permission to list DataStores under this
 *    location, regardless of whether or not this data store exists, a
 *    PERMISSION_DENIED error is returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.models.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresModelsOperationsGet : GTLRDiscoveryEngineQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresModelsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.models.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresModelsOperationsList : GTLRDiscoveryEngineQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresModelsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresOperationsGet : GTLRDiscoveryEngineQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresOperationsList : GTLRDiscoveryEngineQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates a DataStore
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresPatch : GTLRDiscoveryEngineQuery

/**
 *  Immutable. The full resource name of the data store. Format:
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
 *  This field must be a UTF-8 encoded string with a length limit of 1024
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Indicates which fields in the provided DataStore to update. If an
 *  unsupported or unknown field is provided, an INVALID_ARGUMENT error is
 *  returned.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1DataStore.
 *
 *  Updates a DataStore
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1DataStore to include in
 *    the query.
 *  @param name Immutable. The full resource name of the data store. Format:
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
 *    This field must be a UTF-8 encoded string with a length limit of 1024
 *    characters.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1DataStore *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a Schema.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.schemas.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSchemasCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent data store resource name, in the format of
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. The ID to use for the Schema, which becomes the final component of
 *  the Schema.name. This field should conform to
 *  [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit
 *  of 63 characters.
 */
@property(nonatomic, copy, nullable) NSString *schemaId;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Creates a Schema.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Schema
 *    to include in the query.
 *  @param parent Required. The parent data store resource name, in the format
 *    of
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSchemasCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Schema *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Schema.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.schemas.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSchemasDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. The full resource name of the schema, in the format of
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Deletes a Schema.
 *
 *  @param name Required. The full resource name of the schema, in the format of
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSchemasDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Schema.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.schemas.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSchemasGet : GTLRDiscoveryEngineQuery

/**
 *  Required. The full resource name of the schema, in the format of
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Schema.
 *
 *  Gets a Schema.
 *
 *  @param name Required. The full resource name of the schema, in the format of
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSchemasGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a list of Schemas.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.schemas.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSchemasList : GTLRDiscoveryEngineQuery

/**
 *  The maximum number of Schemas to return. The service may return fewer than
 *  this value. If unspecified, at most 100 Schemas are returned. The maximum
 *  value is 1000; values above 1000 are set to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous SchemaService.ListSchemas call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to SchemaService.ListSchemas must match the call that
 *  provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent data store resource name, in the format of
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListSchemasResponse.
 *
 *  Gets a list of Schemas.
 *
 *  @param parent Required. The parent data store resource name, in the format
 *    of
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSchemasList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.schemas.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSchemasOperationsGet : GTLRDiscoveryEngineQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSchemasOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.schemas.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSchemasOperationsList : GTLRDiscoveryEngineQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSchemasOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates a Schema.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.schemas.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSchemasPatch : GTLRDiscoveryEngineQuery

/**
 *  If set to true, and the Schema is not found, a new Schema is created. In
 *  this situation, `update_mask` is ignored.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  Immutable. The full resource name of the schema, in the format of
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`.
 *  This field must be a UTF-8 encoded string with a length limit of 1024
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Updates a Schema.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Schema
 *    to include in the query.
 *  @param name Immutable. The full resource name of the schema, in the format
 *    of
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`.
 *    This field must be a UTF-8 encoded string with a length limit of 1024
 *    characters.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSchemasPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Schema *)object
                           name:(NSString *)name;

@end

/**
 *  Answer query method.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.servingConfigs.answer
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresServingConfigsAnswer : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Search serving config, such as `projects/
 *  * /locations/global/collections/default_collection/engines/ *
 *  /servingConfigs/default_serving_config`, or `projects/ *
 *  /locations/global/collections/default_collection/dataStores/ *
 *  /servingConfigs/default_serving_config`. This field is used to identify the
 *  serving configuration name, set of models used to make the search.
 */
@property(nonatomic, copy, nullable) NSString *servingConfig;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1AnswerQueryResponse.
 *
 *  Answer query method.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1AnswerQueryRequest to
 *    include in the query.
 *  @param servingConfig Required. The resource name of the Search serving
 *    config, such as `projects/ *
 *    /locations/global/collections/default_collection/engines/ *
 *    /servingConfigs/default_serving_config`, or `projects/ *
 *    /locations/global/collections/default_collection/dataStores/ *
 *    /servingConfigs/default_serving_config`. This field is used to identify
 *    the serving configuration name, set of models used to make the search.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresServingConfigsAnswer
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1AnswerQueryRequest *)object
                  servingConfig:(NSString *)servingConfig;

@end

/**
 *  Makes a recommendation, which requires a contextual user event.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.servingConfigs.recommend
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresServingConfigsRecommend : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of a ServingConfig: `projects/ *
 *  /locations/global/collections/ * /engines/ * /servingConfigs/ *`, or
 *  `projects/ * /locations/global/collections/ * /dataStores/ *
 *  /servingConfigs/ *` One default serving config is created along with your
 *  recommendation engine creation. The engine ID is used as the ID of the
 *  default serving config. For example, for Engine `projects/ *
 *  /locations/global/collections/ * /engines/my-engine`, you can use `projects/
 *  * /locations/global/collections/ *
 *  /engines/my-engine/servingConfigs/my-engine` for your
 *  RecommendationService.Recommend requests.
 */
@property(nonatomic, copy, nullable) NSString *servingConfig;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1RecommendResponse.
 *
 *  Makes a recommendation, which requires a contextual user event.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1RecommendRequest to
 *    include in the query.
 *  @param servingConfig Required. Full resource name of a ServingConfig:
 *    `projects/ * /locations/global/collections/ * /engines/ * /servingConfigs/
 *    *`, or `projects/ * /locations/global/collections/ * /dataStores/ *
 *    /servingConfigs/ *` One default serving config is created along with your
 *    recommendation engine creation. The engine ID is used as the ID of the
 *    default serving config. For example, for Engine `projects/ *
 *    /locations/global/collections/ * /engines/my-engine`, you can use
 *    `projects/ * /locations/global/collections/ *
 *    /engines/my-engine/servingConfigs/my-engine` for your
 *    RecommendationService.Recommend requests.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresServingConfigsRecommend
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1RecommendRequest *)object
                  servingConfig:(NSString *)servingConfig;

@end

/**
 *  Performs a search.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.servingConfigs.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresServingConfigsSearch : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Search serving config, such as `projects/
 *  * /locations/global/collections/default_collection/engines/ *
 *  /servingConfigs/default_serving_config`, or `projects/ *
 *  /locations/global/collections/default_collection/dataStores/default_data_store/servingConfigs/default_serving_config`.
 *  This field is used to identify the serving configuration name, set of models
 *  used to make the search.
 */
@property(nonatomic, copy, nullable) NSString *servingConfig;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1SearchResponse.
 *
 *  Performs a search.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1SearchRequest to include
 *    in the query.
 *  @param servingConfig Required. The resource name of the Search serving
 *    config, such as `projects/ *
 *    /locations/global/collections/default_collection/engines/ *
 *    /servingConfigs/default_serving_config`, or `projects/ *
 *    /locations/global/collections/default_collection/dataStores/default_data_store/servingConfigs/default_serving_config`.
 *    This field is used to identify the serving configuration name, set of
 *    models used to make the search.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresServingConfigsSearch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1SearchRequest *)object
                  servingConfig:(NSString *)servingConfig;

@end

/**
 *  Gets a Answer.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.sessions.answers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSessionsAnswersGet : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Answer to get. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/engines/{engine_id}/sessions/{session_id}/answers/{answer_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Answer.
 *
 *  Gets a Answer.
 *
 *  @param name Required. The resource name of the Answer to get. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/engines/{engine_id}/sessions/{session_id}/answers/{answer_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSessionsAnswersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a Session. If the Session to create already exists, an
 *  ALREADY_EXISTS error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.sessions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSessionsCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of parent data store. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session.
 *
 *  Creates a Session. If the Session to create already exists, an
 *  ALREADY_EXISTS error is returned.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session
 *    to include in the query.
 *  @param parent Required. Full resource name of parent data store. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSessionsCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Session. If the Session to delete does not exist, a NOT_FOUND
 *  error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.sessions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSessionsDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Session to delete. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleProtobufEmpty.
 *
 *  Deletes a Session. If the Session to delete does not exist, a NOT_FOUND
 *  error is returned.
 *
 *  @param name Required. The resource name of the Session to delete. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSessionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Session.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.sessions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSessionsGet : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Session to get. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session.
 *
 *  Gets a Session.
 *
 *  @param name Required. The resource name of the Session to get. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSessionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all Sessions by their parent DataStore.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.sessions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSessionsList : GTLRDiscoveryEngineQuery

/**
 *  A filter to apply on the list results. The supported features are:
 *  user_pseudo_id, state. Example: "user_pseudo_id = some_id"
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  A comma-separated list of fields to order by, sorted in ascending order. Use
 *  "desc" after a field name for descending. Supported fields: * `update_time`
 *  * `create_time` * `session_name` Example: "update_time desc" "create_time"
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Maximum number of results to return. If unspecified, defaults to 50. Max
 *  allowed value is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListSessions` call. Provide this to
 *  retrieve the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The data store resource name. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListSessionsResponse.
 *
 *  Lists all Sessions by their parent DataStore.
 *
 *  @param parent Required. The data store resource name. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSessionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a Session. Session action type cannot be changed. If the Session to
 *  update does not exist, a NOT_FOUND error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.sessions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSessionsPatch : GTLRDiscoveryEngineQuery

/**
 *  Immutable. Fully qualified name
 *  `projects/{project}/locations/global/collections/{collection}/engines/{engine}/sessions/
 *  *`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Indicates which fields in the provided Session to update. The following are
 *  NOT supported: * Session.name If not set or empty, all supported fields are
 *  updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session.
 *
 *  Updates a Session. Session action type cannot be changed. If the Session to
 *  update does not exist, a NOT_FOUND error is returned.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session
 *    to include in the query.
 *  @param name Immutable. Fully qualified name
 *    `projects/{project}/locations/global/collections/{collection}/engines/{engine}/sessions/
 *    *`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSessionsPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session *)object
                           name:(NSString *)name;

@end

/**
 *  Verify target sites' ownership and validity. This API sends all the target
 *  sites under site search engine for verification.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.batchVerifyTargetSites
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineBatchVerifyTargetSites : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent resource shared by all TargetSites being verified.
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Verify target sites' ownership and validity. This API sends all the target
 *  sites under site search engine for verification.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1BatchVerifyTargetSitesRequest
 *    to include in the query.
 *  @param parent Required. The parent resource shared by all TargetSites being
 *    verified.
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineBatchVerifyTargetSites
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1BatchVerifyTargetSitesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Downgrade from advanced site search to basic site search.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.disableAdvancedSiteSearch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineDisableAdvancedSiteSearch : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of the SiteSearchEngine, such as
 *  `projects/{project}/locations/{location}/dataStores/{data_store_id}/siteSearchEngine`.
 */
@property(nonatomic, copy, nullable) NSString *siteSearchEngine;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Downgrade from advanced site search to basic site search.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1DisableAdvancedSiteSearchRequest
 *    to include in the query.
 *  @param siteSearchEngine Required. Full resource name of the
 *    SiteSearchEngine, such as
 *    `projects/{project}/locations/{location}/dataStores/{data_store_id}/siteSearchEngine`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineDisableAdvancedSiteSearch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1DisableAdvancedSiteSearchRequest *)object
               siteSearchEngine:(NSString *)siteSearchEngine;

@end

/**
 *  Upgrade from basic site search to advanced site search.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.enableAdvancedSiteSearch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineEnableAdvancedSiteSearch : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of the SiteSearchEngine, such as
 *  `projects/{project}/locations/{location}/dataStores/{data_store_id}/siteSearchEngine`.
 */
@property(nonatomic, copy, nullable) NSString *siteSearchEngine;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Upgrade from basic site search to advanced site search.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1EnableAdvancedSiteSearchRequest
 *    to include in the query.
 *  @param siteSearchEngine Required. Full resource name of the
 *    SiteSearchEngine, such as
 *    `projects/{project}/locations/{location}/dataStores/{data_store_id}/siteSearchEngine`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineEnableAdvancedSiteSearch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1EnableAdvancedSiteSearchRequest *)object
               siteSearchEngine:(NSString *)siteSearchEngine;

@end

/**
 *  Returns list of target sites with its domain verification status. This
 *  method can only be called under data store with BASIC_SITE_SEARCH state at
 *  the moment.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.fetchDomainVerificationStatus
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineFetchDomainVerificationStatus : GTLRDiscoveryEngineQuery

/**
 *  Requested page size. Server may return fewer items than requested. If
 *  unspecified, server will pick an appropriate default. The maximum value is
 *  1000; values above 1000 will be coerced to 1000. If this field is negative,
 *  an INVALID_ARGUMENT error is returned.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `FetchDomainVerificationStatus` call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to `FetchDomainVerificationStatus` must match the call
 *  that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The site search engine resource under which we fetch all the
 *  domain verification status.
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 */
@property(nonatomic, copy, nullable) NSString *siteSearchEngine;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1FetchDomainVerificationStatusResponse.
 *
 *  Returns list of target sites with its domain verification status. This
 *  method can only be called under data store with BASIC_SITE_SEARCH state at
 *  the moment.
 *
 *  @param siteSearchEngine Required. The site search engine resource under
 *    which we fetch all the domain verification status.
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineFetchDomainVerificationStatus
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithSiteSearchEngine:(NSString *)siteSearchEngine;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineOperationsGet : GTLRDiscoveryEngineQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineOperationsList : GTLRDiscoveryEngineQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Request on-demand recrawl for a list of URIs.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.recrawlUris
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineRecrawlUris : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of the SiteSearchEngine, such as `projects/ *
 *  /locations/ * /collections/ * /dataStores/ * /siteSearchEngine`.
 */
@property(nonatomic, copy, nullable) NSString *siteSearchEngine;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Request on-demand recrawl for a list of URIs.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1RecrawlUrisRequest to
 *    include in the query.
 *  @param siteSearchEngine Required. Full resource name of the
 *    SiteSearchEngine, such as `projects/ * /locations/ * /collections/ *
 *    /dataStores/ * /siteSearchEngine`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineRecrawlUris
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1RecrawlUrisRequest *)object
               siteSearchEngine:(NSString *)siteSearchEngine;

@end

/**
 *  Creates TargetSite in a batch.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.batchCreate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineTargetSitesBatchCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent resource shared by all TargetSites being created.
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 *  The parent field in the CreateBookRequest messages must either be empty or
 *  match this field.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Creates TargetSite in a batch.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1BatchCreateTargetSitesRequest
 *    to include in the query.
 *  @param parent Required. The parent resource shared by all TargetSites being
 *    created.
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 *    The parent field in the CreateBookRequest messages must either be empty or
 *    match this field.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineTargetSitesBatchCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1BatchCreateTargetSitesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a TargetSite.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineTargetSitesCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. Parent resource name of TargetSite, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Creates a TargetSite.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1TargetSite to include in
 *    the query.
 *  @param parent Required. Parent resource name of TargetSite, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineTargetSitesCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1TargetSite *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a TargetSite.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineTargetSitesDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of TargetSite, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`.
 *  If the caller does not have permission to access the TargetSite, regardless
 *  of whether or not it exists, a PERMISSION_DENIED error is returned. If the
 *  requested TargetSite does not exist, a NOT_FOUND error is returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Deletes a TargetSite.
 *
 *  @param name Required. Full resource name of TargetSite, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`.
 *    If the caller does not have permission to access the TargetSite,
 *    regardless of whether or not it exists, a PERMISSION_DENIED error is
 *    returned. If the requested TargetSite does not exist, a NOT_FOUND error is
 *    returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineTargetSitesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a TargetSite.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineTargetSitesGet : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of TargetSite, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`.
 *  If the caller does not have permission to access the TargetSite, regardless
 *  of whether or not it exists, a PERMISSION_DENIED error is returned. If the
 *  requested TargetSite does not exist, a NOT_FOUND error is returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1TargetSite.
 *
 *  Gets a TargetSite.
 *
 *  @param name Required. Full resource name of TargetSite, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`.
 *    If the caller does not have permission to access the TargetSite,
 *    regardless of whether or not it exists, a PERMISSION_DENIED error is
 *    returned. If the requested TargetSite does not exist, a NOT_FOUND error is
 *    returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineTargetSitesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a list of TargetSites.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineTargetSitesList : GTLRDiscoveryEngineQuery

/**
 *  Requested page size. Server may return fewer items than requested. If
 *  unspecified, server will pick an appropriate default. The maximum value is
 *  1000; values above 1000 will be coerced to 1000. If this field is negative,
 *  an INVALID_ARGUMENT error is returned.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListTargetSites` call. Provide this
 *  to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListTargetSites` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent site search engine resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 *  If the caller does not have permission to list TargetSites under this site
 *  search engine, regardless of whether or not this branch exists, a
 *  PERMISSION_DENIED error is returned.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListTargetSitesResponse.
 *
 *  Gets a list of TargetSites.
 *
 *  @param parent Required. The parent site search engine resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 *    If the caller does not have permission to list TargetSites under this site
 *    search engine, regardless of whether or not this branch exists, a
 *    PERMISSION_DENIED error is returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineTargetSitesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineTargetSitesOperationsGet : GTLRDiscoveryEngineQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineTargetSitesOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineTargetSitesOperationsList : GTLRDiscoveryEngineQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineTargetSitesOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates a TargetSite.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.siteSearchEngine.targetSites.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineTargetSitesPatch : GTLRDiscoveryEngineQuery

/**
 *  Output only. The fully qualified resource name of the target site.
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`
 *  The `target_site_id` is system-generated.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Updates a TargetSite.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1TargetSite to include in
 *    the query.
 *  @param name Output only. The fully qualified resource name of the target
 *    site.
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`
 *    The `target_site_id` is system-generated.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSiteSearchEngineTargetSitesPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1TargetSite *)object
                           name:(NSString *)name;

@end

/**
 *  Imports all SuggestionDenyListEntry for a DataStore.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.suggestionDenyListEntries.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSuggestionDenyListEntriesImport : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent data store resource name for which to import denylist
 *  entries. Follows pattern projects/ * /locations/ * /collections/ *
 *  /dataStores/ *.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Imports all SuggestionDenyListEntry for a DataStore.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ImportSuggestionDenyListEntriesRequest
 *    to include in the query.
 *  @param parent Required. The parent data store resource name for which to
 *    import denylist entries. Follows pattern projects/ * /locations/ *
 *    /collections/ * /dataStores/ *.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSuggestionDenyListEntriesImport
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ImportSuggestionDenyListEntriesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Permanently deletes all SuggestionDenyListEntry for a DataStore.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.suggestionDenyListEntries.purge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSuggestionDenyListEntriesPurge : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent data store resource name for which to import denylist
 *  entries. Follows pattern projects/ * /locations/ * /collections/ *
 *  /dataStores/ *.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Permanently deletes all SuggestionDenyListEntry for a DataStore.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1PurgeSuggestionDenyListEntriesRequest
 *    to include in the query.
 *  @param parent Required. The parent data store resource name for which to
 *    import denylist entries. Follows pattern projects/ * /locations/ *
 *    /collections/ * /dataStores/ *.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresSuggestionDenyListEntriesPurge
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1PurgeSuggestionDenyListEntriesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Trains a custom model.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.trainCustomModel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresTrainCustomModel : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Data Store, such as `projects/ *
 *  /locations/global/collections/default_collection/dataStores/default_data_store`.
 *  This field is used to identify the data store where to train the models.
 */
@property(nonatomic, copy, nullable) NSString *dataStore;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Trains a custom model.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1TrainCustomModelRequest to
 *    include in the query.
 *  @param dataStore Required. The resource name of the Data Store, such as
 *    `projects/ *
 *    /locations/global/collections/default_collection/dataStores/default_data_store`.
 *    This field is used to identify the data store where to train the models.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresTrainCustomModel
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1TrainCustomModelRequest *)object
                      dataStore:(NSString *)dataStore;

@end

/**
 *  Writes a single user event from the browser. This uses a GET request to due
 *  to browser restriction of POST-ing to a third-party domain. This method is
 *  used only by the Discovery Engine API JavaScript pixel and Google Tag
 *  Manager. Users should not call this method directly.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.userEvents.collect
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresUserEventsCollect : GTLRDiscoveryEngineQuery

/**
 *  The event timestamp in milliseconds. This prevents browser caching of
 *  otherwise identical get requests. The name is abbreviated to reduce the
 *  payload bytes.
 */
@property(nonatomic, assign) long long ets;

/**
 *  Required. The parent DataStore resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The URL including cgi-parameters but excluding the hash fragment with a
 *  length limit of 5,000 characters. This is often more useful than the referer
 *  URL, because many browsers only send the domain for third-party requests.
 */
@property(nonatomic, copy, nullable) NSString *uri;

/**
 *  Required. URL encoded UserEvent proto with a length limit of 2,000,000
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *userEvent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleApiHttpBody.
 *
 *  Writes a single user event from the browser. This uses a GET request to due
 *  to browser restriction of POST-ing to a third-party domain. This method is
 *  used only by the Discovery Engine API JavaScript pixel and Google Tag
 *  Manager. Users should not call this method directly.
 *
 *  @param parent Required. The parent DataStore resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresUserEventsCollect
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Bulk import of user events. Request processing might be synchronous. Events
 *  that already exist are skipped. Use this method for backfilling historical
 *  user events. Operation.response is of type ImportResponse. Note that it is
 *  possible for a subset of the items to be successfully inserted.
 *  Operation.metadata is of type ImportMetadata.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.userEvents.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresUserEventsImport : GTLRDiscoveryEngineQuery

/**
 *  Required. Parent DataStore resource name, of the form
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Bulk import of user events. Request processing might be synchronous. Events
 *  that already exist are skipped. Use this method for backfilling historical
 *  user events. Operation.response is of type ImportResponse. Note that it is
 *  possible for a subset of the items to be successfully inserted.
 *  Operation.metadata is of type ImportMetadata.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ImportUserEventsRequest to
 *    include in the query.
 *  @param parent Required. Parent DataStore resource name, of the form
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresUserEventsImport
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ImportUserEventsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes permanently all user events specified by the filter provided.
 *  Depending on the number of events specified by the filter, this operation
 *  could take hours or days to complete. To test a filter, use the list command
 *  first.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.userEvents.purge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresUserEventsPurge : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the catalog under which the events are
 *  created. The format is
 *  `projects/{project}/locations/global/collections/{collection}/dataStores/{dataStore}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Deletes permanently all user events specified by the filter provided.
 *  Depending on the number of events specified by the filter, this operation
 *  could take hours or days to complete. To test a filter, use the list command
 *  first.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1PurgeUserEventsRequest to
 *    include in the query.
 *  @param parent Required. The resource name of the catalog under which the
 *    events are created. The format is
 *    `projects/{project}/locations/global/collections/{collection}/dataStores/{dataStore}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresUserEventsPurge
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1PurgeUserEventsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Writes a single user event.
 *
 *  Method: discoveryengine.projects.locations.collections.dataStores.userEvents.write
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresUserEventsWrite : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent resource name. If the write user event action is
 *  applied in DataStore level, the format is:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 *  If the write user event action is applied in Location level, for example,
 *  the event with Document across multiple DataStore, the format is:
 *  `projects/{project}/locations/{location}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  If set to true, the user event is written asynchronously after validation,
 *  and the API responds without waiting for the write.
 */
@property(nonatomic, assign) BOOL writeAsync;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1UserEvent.
 *
 *  Writes a single user event.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1UserEvent to include in
 *    the query.
 *  @param parent Required. The parent resource name. If the write user event
 *    action is applied in DataStore level, the format is:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 *    If the write user event action is applied in Location level, for example,
 *    the event with Document across multiple DataStore, the format is:
 *    `projects/{project}/locations/{location}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsDataStoresUserEventsWrite
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1UserEvent *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a Control. By default 1000 controls are allowed for a data store. A
 *  request can be submitted to adjust this limit. If the Control to create
 *  already exists, an ALREADY_EXISTS error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.controls.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesControlsCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. The ID to use for the Control, which will become the final
 *  component of the Control's resource name. This value must be within 1-63
 *  characters. Valid characters are /a-z-_/.
 */
@property(nonatomic, copy, nullable) NSString *controlId;

/**
 *  Required. Full resource name of parent data store. Format:
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`
 *  or
 *  `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control.
 *
 *  Creates a Control. By default 1000 controls are allowed for a data store. A
 *  request can be submitted to adjust this limit. If the Control to create
 *  already exists, an ALREADY_EXISTS error is returned.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control
 *    to include in the query.
 *  @param parent Required. Full resource name of parent data store. Format:
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`
 *    or
 *    `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesControlsCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Control. If the Control to delete does not exist, a NOT_FOUND
 *  error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.controls.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesControlsDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Control to delete. Format:
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/controls/{control_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleProtobufEmpty.
 *
 *  Deletes a Control. If the Control to delete does not exist, a NOT_FOUND
 *  error is returned.
 *
 *  @param name Required. The resource name of the Control to delete. Format:
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/controls/{control_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesControlsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Control.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.controls.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesControlsGet : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Control to get. Format:
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/controls/{control_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control.
 *
 *  Gets a Control.
 *
 *  @param name Required. The resource name of the Control to get. Format:
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/controls/{control_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesControlsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all Controls by their parent DataStore.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.controls.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesControlsList : GTLRDiscoveryEngineQuery

/**
 *  Optional. A filter to apply on the list results. Supported features: * List
 *  all the products under the parent branch if filter is unset. Currently this
 *  field is unsupported.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Maximum number of results to return. If unspecified, defaults to
 *  50. Max allowed value is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListControls` call.
 *  Provide this to retrieve the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The data store resource name. Format:
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`
 *  or
 *  `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListControlsResponse.
 *
 *  Lists all Controls by their parent DataStore.
 *
 *  @param parent Required. The data store resource name. Format:
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`
 *    or
 *    `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesControlsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a Control. Control action type cannot be changed. If the Control to
 *  update does not exist, a NOT_FOUND error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.controls.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesControlsPatch : GTLRDiscoveryEngineQuery

/**
 *  Immutable. Fully qualified name `projects/ * /locations/global/dataStore/ *
 *  /controls/ *`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Indicates which fields in the provided Control to update. The
 *  following are NOT supported: * Control.name * Control.solution_type If not
 *  set or empty, all supported fields are updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control.
 *
 *  Updates a Control. Control action type cannot be changed. If the Control to
 *  update does not exist, a NOT_FOUND error is returned.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control
 *    to include in the query.
 *  @param name Immutable. Fully qualified name `projects/ *
 *    /locations/global/dataStore/ * /controls/ *`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesControlsPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control *)object
                           name:(NSString *)name;

@end

/**
 *  Converses a conversation.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.conversations.converse
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesConversationsConverse : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Conversation to get. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`.
 *  Use
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/-`
 *  to activate auto session mode, which automatically creates a new
 *  conversation inside a ConverseConversation session.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ConverseConversationResponse.
 *
 *  Converses a conversation.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ConverseConversationRequest
 *    to include in the query.
 *  @param name Required. The resource name of the Conversation to get. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`.
 *    Use
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/-`
 *    to activate auto session mode, which automatically creates a new
 *    conversation inside a ConverseConversation session.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesConversationsConverse
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ConverseConversationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a Conversation. If the Conversation to create already exists, an
 *  ALREADY_EXISTS error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.conversations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesConversationsCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of parent data store. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation.
 *
 *  Creates a Conversation. If the Conversation to create already exists, an
 *  ALREADY_EXISTS error is returned.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation to include in
 *    the query.
 *  @param parent Required. Full resource name of parent data store. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesConversationsCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Conversation. If the Conversation to delete does not exist, a
 *  NOT_FOUND error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.conversations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesConversationsDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Conversation to delete. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleProtobufEmpty.
 *
 *  Deletes a Conversation. If the Conversation to delete does not exist, a
 *  NOT_FOUND error is returned.
 *
 *  @param name Required. The resource name of the Conversation to delete.
 *    Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesConversationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Conversation.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.conversations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesConversationsGet : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Conversation to get. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation.
 *
 *  Gets a Conversation.
 *
 *  @param name Required. The resource name of the Conversation to get. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesConversationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all Conversations by their parent DataStore.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.conversations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesConversationsList : GTLRDiscoveryEngineQuery

/**
 *  A filter to apply on the list results. The supported features are:
 *  user_pseudo_id, state. Example: "user_pseudo_id = some_id"
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  A comma-separated list of fields to order by, sorted in ascending order. Use
 *  "desc" after a field name for descending. Supported fields: * `update_time`
 *  * `create_time` * `conversation_name` Example: "update_time desc"
 *  "create_time"
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Maximum number of results to return. If unspecified, defaults to 50. Max
 *  allowed value is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListConversations` call. Provide
 *  this to retrieve the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The data store resource name. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListConversationsResponse.
 *
 *  Lists all Conversations by their parent DataStore.
 *
 *  @param parent Required. The data store resource name. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesConversationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a Conversation. Conversation action type cannot be changed. If the
 *  Conversation to update does not exist, a NOT_FOUND error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.conversations.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesConversationsPatch : GTLRDiscoveryEngineQuery

/**
 *  Immutable. Fully qualified name
 *  `projects/{project}/locations/global/collections/{collection}/dataStore/ *
 *  /conversations/ *` or
 *  `projects/{project}/locations/global/collections/{collection}/engines/ *
 *  /conversations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Indicates which fields in the provided Conversation to update. The following
 *  are NOT supported: * Conversation.name If not set or empty, all supported
 *  fields are updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation.
 *
 *  Updates a Conversation. Conversation action type cannot be changed. If the
 *  Conversation to update does not exist, a NOT_FOUND error is returned.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation to include in
 *    the query.
 *  @param name Immutable. Fully qualified name
 *    `projects/{project}/locations/global/collections/{collection}/dataStore/ *
 *    /conversations/ *` or
 *    `projects/{project}/locations/global/collections/{collection}/engines/ *
 *    /conversations/ *`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesConversationsPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a Engine.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. The ID to use for the Engine, which will become the final
 *  component of the Engine's resource name. This field must conform to
 *  [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit
 *  of 63 characters. Otherwise, an INVALID_ARGUMENT error is returned.
 */
@property(nonatomic, copy, nullable) NSString *engineId;

/**
 *  Required. The parent resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Creates a Engine.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Engine
 *    to include in the query.
 *  @param parent Required. The parent resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Engine *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Engine.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of Engine, such as
 *  `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
 *  If the caller does not have permission to delete the Engine, regardless of
 *  whether or not it exists, a PERMISSION_DENIED error is returned. If the
 *  Engine to delete does not exist, a NOT_FOUND error is returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Deletes a Engine.
 *
 *  @param name Required. Full resource name of Engine, such as
 *    `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
 *    If the caller does not have permission to delete the Engine, regardless of
 *    whether or not it exists, a PERMISSION_DENIED error is returned. If the
 *    Engine to delete does not exist, a NOT_FOUND error is returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Engine.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesGet : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of Engine, such as
 *  `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Engine.
 *
 *  Gets a Engine.
 *
 *  @param name Required. Full resource name of Engine, such as
 *    `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all the Engines associated with the project.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesList : GTLRDiscoveryEngineQuery

/**
 *  Optional. Filter by solution type. For example:
 *  solution_type=SOLUTION_TYPE_SEARCH
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Not supported. */
@property(nonatomic, assign) NSInteger pageSize;

/** Optional. Not supported. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListEnginesResponse.
 *
 *  Lists all the Engines associated with the project.
 *
 *  @param parent Required. The parent resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection_id}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesOperationsGet : GTLRDiscoveryEngineQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesOperationsList : GTLRDiscoveryEngineQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates an Engine
 *
 *  Method: discoveryengine.projects.locations.collections.engines.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesPatch : GTLRDiscoveryEngineQuery

/**
 *  Immutable. The fully qualified resource name of the engine. This field must
 *  be a UTF-8 encoded string with a length limit of 1024 characters. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/engines/{engine}`
 *  engine should be 1-63 characters, and valid characters are /a-z0-9* /.
 *  Otherwise, an INVALID_ARGUMENT error is returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Indicates which fields in the provided Engine to update. If an unsupported
 *  or unknown field is provided, an INVALID_ARGUMENT error is returned.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Engine.
 *
 *  Updates an Engine
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Engine
 *    to include in the query.
 *  @param name Immutable. The fully qualified resource name of the engine. This
 *    field must be a UTF-8 encoded string with a length limit of 1024
 *    characters. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/engines/{engine}`
 *    engine should be 1-63 characters, and valid characters are /a-z0-9* /.
 *    Otherwise, an INVALID_ARGUMENT error is returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Engine *)object
                           name:(NSString *)name;

@end

/**
 *  Answer query method.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.servingConfigs.answer
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesServingConfigsAnswer : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Search serving config, such as `projects/
 *  * /locations/global/collections/default_collection/engines/ *
 *  /servingConfigs/default_serving_config`, or `projects/ *
 *  /locations/global/collections/default_collection/dataStores/ *
 *  /servingConfigs/default_serving_config`. This field is used to identify the
 *  serving configuration name, set of models used to make the search.
 */
@property(nonatomic, copy, nullable) NSString *servingConfig;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1AnswerQueryResponse.
 *
 *  Answer query method.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1AnswerQueryRequest to
 *    include in the query.
 *  @param servingConfig Required. The resource name of the Search serving
 *    config, such as `projects/ *
 *    /locations/global/collections/default_collection/engines/ *
 *    /servingConfigs/default_serving_config`, or `projects/ *
 *    /locations/global/collections/default_collection/dataStores/ *
 *    /servingConfigs/default_serving_config`. This field is used to identify
 *    the serving configuration name, set of models used to make the search.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesServingConfigsAnswer
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1AnswerQueryRequest *)object
                  servingConfig:(NSString *)servingConfig;

@end

/**
 *  Makes a recommendation, which requires a contextual user event.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.servingConfigs.recommend
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesServingConfigsRecommend : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of a ServingConfig: `projects/ *
 *  /locations/global/collections/ * /engines/ * /servingConfigs/ *`, or
 *  `projects/ * /locations/global/collections/ * /dataStores/ *
 *  /servingConfigs/ *` One default serving config is created along with your
 *  recommendation engine creation. The engine ID is used as the ID of the
 *  default serving config. For example, for Engine `projects/ *
 *  /locations/global/collections/ * /engines/my-engine`, you can use `projects/
 *  * /locations/global/collections/ *
 *  /engines/my-engine/servingConfigs/my-engine` for your
 *  RecommendationService.Recommend requests.
 */
@property(nonatomic, copy, nullable) NSString *servingConfig;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1RecommendResponse.
 *
 *  Makes a recommendation, which requires a contextual user event.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1RecommendRequest to
 *    include in the query.
 *  @param servingConfig Required. Full resource name of a ServingConfig:
 *    `projects/ * /locations/global/collections/ * /engines/ * /servingConfigs/
 *    *`, or `projects/ * /locations/global/collections/ * /dataStores/ *
 *    /servingConfigs/ *` One default serving config is created along with your
 *    recommendation engine creation. The engine ID is used as the ID of the
 *    default serving config. For example, for Engine `projects/ *
 *    /locations/global/collections/ * /engines/my-engine`, you can use
 *    `projects/ * /locations/global/collections/ *
 *    /engines/my-engine/servingConfigs/my-engine` for your
 *    RecommendationService.Recommend requests.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesServingConfigsRecommend
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1RecommendRequest *)object
                  servingConfig:(NSString *)servingConfig;

@end

/**
 *  Performs a search.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.servingConfigs.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesServingConfigsSearch : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Search serving config, such as `projects/
 *  * /locations/global/collections/default_collection/engines/ *
 *  /servingConfigs/default_serving_config`, or `projects/ *
 *  /locations/global/collections/default_collection/dataStores/default_data_store/servingConfigs/default_serving_config`.
 *  This field is used to identify the serving configuration name, set of models
 *  used to make the search.
 */
@property(nonatomic, copy, nullable) NSString *servingConfig;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1SearchResponse.
 *
 *  Performs a search.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1SearchRequest to include
 *    in the query.
 *  @param servingConfig Required. The resource name of the Search serving
 *    config, such as `projects/ *
 *    /locations/global/collections/default_collection/engines/ *
 *    /servingConfigs/default_serving_config`, or `projects/ *
 *    /locations/global/collections/default_collection/dataStores/default_data_store/servingConfigs/default_serving_config`.
 *    This field is used to identify the serving configuration name, set of
 *    models used to make the search.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesServingConfigsSearch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1SearchRequest *)object
                  servingConfig:(NSString *)servingConfig;

@end

/**
 *  Gets a Answer.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.sessions.answers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesSessionsAnswersGet : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Answer to get. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/engines/{engine_id}/sessions/{session_id}/answers/{answer_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Answer.
 *
 *  Gets a Answer.
 *
 *  @param name Required. The resource name of the Answer to get. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/engines/{engine_id}/sessions/{session_id}/answers/{answer_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesSessionsAnswersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a Session. If the Session to create already exists, an
 *  ALREADY_EXISTS error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.sessions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesSessionsCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of parent data store. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session.
 *
 *  Creates a Session. If the Session to create already exists, an
 *  ALREADY_EXISTS error is returned.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session
 *    to include in the query.
 *  @param parent Required. Full resource name of parent data store. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesSessionsCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Session. If the Session to delete does not exist, a NOT_FOUND
 *  error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.sessions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesSessionsDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Session to delete. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleProtobufEmpty.
 *
 *  Deletes a Session. If the Session to delete does not exist, a NOT_FOUND
 *  error is returned.
 *
 *  @param name Required. The resource name of the Session to delete. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesSessionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Session.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.sessions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesSessionsGet : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Session to get. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session.
 *
 *  Gets a Session.
 *
 *  @param name Required. The resource name of the Session to get. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesSessionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all Sessions by their parent DataStore.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.sessions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesSessionsList : GTLRDiscoveryEngineQuery

/**
 *  A filter to apply on the list results. The supported features are:
 *  user_pseudo_id, state. Example: "user_pseudo_id = some_id"
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  A comma-separated list of fields to order by, sorted in ascending order. Use
 *  "desc" after a field name for descending. Supported fields: * `update_time`
 *  * `create_time` * `session_name` Example: "update_time desc" "create_time"
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Maximum number of results to return. If unspecified, defaults to 50. Max
 *  allowed value is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListSessions` call. Provide this to
 *  retrieve the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The data store resource name. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListSessionsResponse.
 *
 *  Lists all Sessions by their parent DataStore.
 *
 *  @param parent Required. The data store resource name. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesSessionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a Session. Session action type cannot be changed. If the Session to
 *  update does not exist, a NOT_FOUND error is returned.
 *
 *  Method: discoveryengine.projects.locations.collections.engines.sessions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesSessionsPatch : GTLRDiscoveryEngineQuery

/**
 *  Immutable. Fully qualified name
 *  `projects/{project}/locations/global/collections/{collection}/engines/{engine}/sessions/
 *  *`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Indicates which fields in the provided Session to update. The following are
 *  NOT supported: * Session.name If not set or empty, all supported fields are
 *  updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session.
 *
 *  Updates a Session. Session action type cannot be changed. If the Session to
 *  update does not exist, a NOT_FOUND error is returned.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session
 *    to include in the query.
 *  @param name Immutable. Fully qualified name
 *    `projects/{project}/locations/global/collections/{collection}/engines/{engine}/sessions/
 *    *`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsEnginesSessionsPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: discoveryengine.projects.locations.collections.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsOperationsGet : GTLRDiscoveryEngineQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: discoveryengine.projects.locations.collections.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsOperationsList : GTLRDiscoveryEngineQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsCollectionsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets index freshness metadata for Documents. Supported for website search
 *  only.
 *
 *  Method: discoveryengine.projects.locations.dataStores.branches.batchGetDocumentsMetadata
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesBatchGetDocumentsMetadata : GTLRDiscoveryEngineQuery

/**
 *  Required. The FHIR resources to match by. Format:
 *  projects/{project}/locations/{location}/datasets/{dataset}/fhirStores/{fhir_store}/fhir/{resource_type}/{fhir_resource_id}
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *matcherFhirMatcherFhirResources;

/** The exact URIs to match by. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *matcherUrisMatcherUris;

/**
 *  Required. The parent branch resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1BatchGetDocumentsMetadataResponse.
 *
 *  Gets index freshness metadata for Documents. Supported for website search
 *  only.
 *
 *  @param parent Required. The parent branch resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesBatchGetDocumentsMetadata
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a Document.
 *
 *  Method: discoveryengine.projects.locations.dataStores.branches.documents.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesDocumentsCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. The ID to use for the Document, which becomes the final component
 *  of the Document.name. If the caller does not have permission to create the
 *  Document, regardless of whether or not it exists, a `PERMISSION_DENIED`
 *  error is returned. This field must be unique among all Documents with the
 *  same parent. Otherwise, an `ALREADY_EXISTS` error is returned. This field
 *  must conform to [RFC-1034](https://tools.ietf.org/html/rfc1034) standard
 *  with a length limit of 63 characters. Otherwise, an `INVALID_ARGUMENT` error
 *  is returned.
 */
@property(nonatomic, copy, nullable) NSString *documentId;

/**
 *  Required. The parent resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Document.
 *
 *  Creates a Document.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Document to include in the
 *    query.
 *  @param parent Required. The parent resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesDocumentsCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Document *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Document.
 *
 *  Method: discoveryengine.projects.locations.dataStores.branches.documents.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesDocumentsDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of Document, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}`.
 *  If the caller does not have permission to delete the Document, regardless of
 *  whether or not it exists, a `PERMISSION_DENIED` error is returned. If the
 *  Document to delete does not exist, a `NOT_FOUND` error is returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleProtobufEmpty.
 *
 *  Deletes a Document.
 *
 *  @param name Required. Full resource name of Document, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}`.
 *    If the caller does not have permission to delete the Document, regardless
 *    of whether or not it exists, a `PERMISSION_DENIED` error is returned. If
 *    the Document to delete does not exist, a `NOT_FOUND` error is returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesDocumentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Document.
 *
 *  Method: discoveryengine.projects.locations.dataStores.branches.documents.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesDocumentsGet : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of Document, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}`.
 *  If the caller does not have permission to access the Document, regardless of
 *  whether or not it exists, a `PERMISSION_DENIED` error is returned. If the
 *  requested Document does not exist, a `NOT_FOUND` error is returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Document.
 *
 *  Gets a Document.
 *
 *  @param name Required. Full resource name of Document, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document}`.
 *    If the caller does not have permission to access the Document, regardless
 *    of whether or not it exists, a `PERMISSION_DENIED` error is returned. If
 *    the requested Document does not exist, a `NOT_FOUND` error is returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesDocumentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Bulk import of multiple Documents. Request processing may be synchronous.
 *  Non-existing items are created. Note: It is possible for a subset of the
 *  Documents to be successfully updated.
 *
 *  Method: discoveryengine.projects.locations.dataStores.branches.documents.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesDocumentsImport : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent branch resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 *  Requires create/update permission.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Bulk import of multiple Documents. Request processing may be synchronous.
 *  Non-existing items are created. Note: It is possible for a subset of the
 *  Documents to be successfully updated.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ImportDocumentsRequest to
 *    include in the query.
 *  @param parent Required. The parent branch resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 *    Requires create/update permission.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesDocumentsImport
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ImportDocumentsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets a list of Documents.
 *
 *  Method: discoveryengine.projects.locations.dataStores.branches.documents.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesDocumentsList : GTLRDiscoveryEngineQuery

/**
 *  Maximum number of Documents to return. If unspecified, defaults to 100. The
 *  maximum allowed value is 1000. Values above 1000 are set to 1000. If this
 *  field is negative, an `INVALID_ARGUMENT` error is returned.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token ListDocumentsResponse.next_page_token, received from a previous
 *  DocumentService.ListDocuments call. Provide this to retrieve the subsequent
 *  page. When paginating, all other parameters provided to
 *  DocumentService.ListDocuments must match the call that provided the page
 *  token. Otherwise, an `INVALID_ARGUMENT` error is returned.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent branch resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 *  Use `default_branch` as the branch ID, to list documents under the default
 *  branch. If the caller does not have permission to list Documents under this
 *  branch, regardless of whether or not this branch exists, a
 *  `PERMISSION_DENIED` error is returned.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListDocumentsResponse.
 *
 *  Gets a list of Documents.
 *
 *  @param parent Required. The parent branch resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 *    Use `default_branch` as the branch ID, to list documents under the default
 *    branch. If the caller does not have permission to list Documents under
 *    this branch, regardless of whether or not this branch exists, a
 *    `PERMISSION_DENIED` error is returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesDocumentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a Document.
 *
 *  Method: discoveryengine.projects.locations.dataStores.branches.documents.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesDocumentsPatch : GTLRDiscoveryEngineQuery

/**
 *  If set to `true` and the Document is not found, a new Document is be
 *  created.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  Immutable. The full resource name of the document. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document_id}`.
 *  This field must be a UTF-8 encoded string with a length limit of 1024
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Indicates which fields in the provided imported 'document' to update. If not
 *  set, by default updates all fields.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Document.
 *
 *  Updates a Document.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Document to include in the
 *    query.
 *  @param name Immutable. The full resource name of the document. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}/documents/{document_id}`.
 *    This field must be a UTF-8 encoded string with a length limit of 1024
 *    characters.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesDocumentsPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Document *)object
                           name:(NSString *)name;

@end

/**
 *  Permanently deletes all selected Documents in a branch. This process is
 *  asynchronous. Depending on the number of Documents to be deleted, this
 *  operation can take hours to complete. Before the delete operation completes,
 *  some Documents might still be returned by DocumentService.GetDocument or
 *  DocumentService.ListDocuments. To get a list of the Documents to be deleted,
 *  set PurgeDocumentsRequest.force to false.
 *
 *  Method: discoveryengine.projects.locations.dataStores.branches.documents.purge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesDocumentsPurge : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Permanently deletes all selected Documents in a branch. This process is
 *  asynchronous. Depending on the number of Documents to be deleted, this
 *  operation can take hours to complete. Before the delete operation completes,
 *  some Documents might still be returned by DocumentService.GetDocument or
 *  DocumentService.ListDocuments. To get a list of the Documents to be deleted,
 *  set PurgeDocumentsRequest.force to false.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1PurgeDocumentsRequest to
 *    include in the query.
 *  @param parent Required. The parent resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/branches/{branch}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesDocumentsPurge
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1PurgeDocumentsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: discoveryengine.projects.locations.dataStores.branches.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesOperationsCancel : GTLRDiscoveryEngineQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleProtobufEmpty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleLongrunningCancelOperationRequest to include in
 *    the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleLongrunningCancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: discoveryengine.projects.locations.dataStores.branches.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesOperationsGet : GTLRDiscoveryEngineQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: discoveryengine.projects.locations.dataStores.branches.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesOperationsList : GTLRDiscoveryEngineQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresBranchesOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Completes the specified user input with keyword suggestions.
 *
 *  Method: discoveryengine.projects.locations.dataStores.completeQuery
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresCompleteQuery : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent data store resource name for which the completion is
 *  performed, such as `projects/ *
 *  /locations/global/collections/default_collection/dataStores/default_data_store`.
 */
@property(nonatomic, copy, nullable) NSString *dataStore;

/**
 *  Indicates if tail suggestions should be returned if there are no suggestions
 *  that match the full query. Even if set to true, if there are suggestions
 *  that match the full query, those are returned and no tail suggestions are
 *  returned.
 */
@property(nonatomic, assign) BOOL includeTailSuggestions;

/**
 *  Required. The typeahead input used to fetch suggestions. Maximum length is
 *  128 characters.
 */
@property(nonatomic, copy, nullable) NSString *query;

/**
 *  Specifies the autocomplete data model. This overrides any model specified in
 *  the Configuration > Autocomplete section of the Cloud console. Currently
 *  supported values: * `document` - Using suggestions generated from
 *  user-imported documents. * `search-history` - Using suggestions generated
 *  from the past history of SearchService.Search API calls. Do not use it when
 *  there is no traffic for Search API. * `user-event` - Using suggestions
 *  generated from user-imported search events. * `document-completable` - Using
 *  suggestions taken directly from user-imported document fields marked as
 *  completable. Default values: * `document` is the default model for regular
 *  dataStores. * `search-history` is the default model for site search
 *  dataStores.
 */
@property(nonatomic, copy, nullable) NSString *queryModel;

/**
 *  A unique identifier for tracking visitors. For example, this could be
 *  implemented with an HTTP cookie, which should be able to uniquely identify a
 *  visitor on a single device. This unique identifier should not change if the
 *  visitor logs in or out of the website. This field should NOT have a fixed
 *  value such as `unknown_visitor`. This should be the same identifier as
 *  UserEvent.user_pseudo_id and SearchRequest.user_pseudo_id. The field must be
 *  a UTF-8 encoded string with a length limit of 128 characters. Otherwise, an
 *  `INVALID_ARGUMENT` error is returned.
 */
@property(nonatomic, copy, nullable) NSString *userPseudoId;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1CompleteQueryResponse.
 *
 *  Completes the specified user input with keyword suggestions.
 *
 *  @param dataStore Required. The parent data store resource name for which the
 *    completion is performed, such as `projects/ *
 *    /locations/global/collections/default_collection/dataStores/default_data_store`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresCompleteQuery
 */
+ (instancetype)queryWithDataStore:(NSString *)dataStore;

@end

/**
 *  Imports CompletionSuggestions for a DataStore.
 *
 *  Method: discoveryengine.projects.locations.dataStores.completionSuggestions.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresCompletionSuggestionsImport : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent data store resource name for which to import customer
 *  autocomplete suggestions. Follows pattern `projects/ * /locations/ *
 *  /collections/ * /dataStores/ *`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Imports CompletionSuggestions for a DataStore.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ImportCompletionSuggestionsRequest
 *    to include in the query.
 *  @param parent Required. The parent data store resource name for which to
 *    import customer autocomplete suggestions. Follows pattern `projects/ *
 *    /locations/ * /collections/ * /dataStores/ *`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresCompletionSuggestionsImport
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ImportCompletionSuggestionsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Permanently deletes all CompletionSuggestions for a DataStore.
 *
 *  Method: discoveryengine.projects.locations.dataStores.completionSuggestions.purge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresCompletionSuggestionsPurge : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent data store resource name for which to purge completion
 *  suggestions. Follows pattern projects/ * /locations/ * /collections/ *
 *  /dataStores/ *.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Permanently deletes all CompletionSuggestions for a DataStore.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1PurgeCompletionSuggestionsRequest
 *    to include in the query.
 *  @param parent Required. The parent data store resource name for which to
 *    purge completion suggestions. Follows pattern projects/ * /locations/ *
 *    /collections/ * /dataStores/ *.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresCompletionSuggestionsPurge
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1PurgeCompletionSuggestionsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a Control. By default 1000 controls are allowed for a data store. A
 *  request can be submitted to adjust this limit. If the Control to create
 *  already exists, an ALREADY_EXISTS error is returned.
 *
 *  Method: discoveryengine.projects.locations.dataStores.controls.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresControlsCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. The ID to use for the Control, which will become the final
 *  component of the Control's resource name. This value must be within 1-63
 *  characters. Valid characters are /a-z-_/.
 */
@property(nonatomic, copy, nullable) NSString *controlId;

/**
 *  Required. Full resource name of parent data store. Format:
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`
 *  or
 *  `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control.
 *
 *  Creates a Control. By default 1000 controls are allowed for a data store. A
 *  request can be submitted to adjust this limit. If the Control to create
 *  already exists, an ALREADY_EXISTS error is returned.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control
 *    to include in the query.
 *  @param parent Required. Full resource name of parent data store. Format:
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`
 *    or
 *    `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresControlsCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Control. If the Control to delete does not exist, a NOT_FOUND
 *  error is returned.
 *
 *  Method: discoveryengine.projects.locations.dataStores.controls.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresControlsDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Control to delete. Format:
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/controls/{control_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleProtobufEmpty.
 *
 *  Deletes a Control. If the Control to delete does not exist, a NOT_FOUND
 *  error is returned.
 *
 *  @param name Required. The resource name of the Control to delete. Format:
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/controls/{control_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresControlsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Control.
 *
 *  Method: discoveryengine.projects.locations.dataStores.controls.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresControlsGet : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Control to get. Format:
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/controls/{control_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control.
 *
 *  Gets a Control.
 *
 *  @param name Required. The resource name of the Control to get. Format:
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}/controls/{control_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresControlsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all Controls by their parent DataStore.
 *
 *  Method: discoveryengine.projects.locations.dataStores.controls.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresControlsList : GTLRDiscoveryEngineQuery

/**
 *  Optional. A filter to apply on the list results. Supported features: * List
 *  all the products under the parent branch if filter is unset. Currently this
 *  field is unsupported.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Optional. Maximum number of results to return. If unspecified, defaults to
 *  50. Max allowed value is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. A page token, received from a previous `ListControls` call.
 *  Provide this to retrieve the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The data store resource name. Format:
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`
 *  or
 *  `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListControlsResponse.
 *
 *  Lists all Controls by their parent DataStore.
 *
 *  @param parent Required. The data store resource name. Format:
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`
 *    or
 *    `projects/{project}/locations/{location}/collections/{collection_id}/engines/{engine_id}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresControlsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a Control. Control action type cannot be changed. If the Control to
 *  update does not exist, a NOT_FOUND error is returned.
 *
 *  Method: discoveryengine.projects.locations.dataStores.controls.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresControlsPatch : GTLRDiscoveryEngineQuery

/**
 *  Immutable. Fully qualified name `projects/ * /locations/global/dataStore/ *
 *  /controls/ *`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Indicates which fields in the provided Control to update. The
 *  following are NOT supported: * Control.name * Control.solution_type If not
 *  set or empty, all supported fields are updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control.
 *
 *  Updates a Control. Control action type cannot be changed. If the Control to
 *  update does not exist, a NOT_FOUND error is returned.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control
 *    to include in the query.
 *  @param name Immutable. Fully qualified name `projects/ *
 *    /locations/global/dataStore/ * /controls/ *`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresControlsPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Control *)object
                           name:(NSString *)name;

@end

/**
 *  Converses a conversation.
 *
 *  Method: discoveryengine.projects.locations.dataStores.conversations.converse
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresConversationsConverse : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Conversation to get. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`.
 *  Use
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/-`
 *  to activate auto session mode, which automatically creates a new
 *  conversation inside a ConverseConversation session.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ConverseConversationResponse.
 *
 *  Converses a conversation.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ConverseConversationRequest
 *    to include in the query.
 *  @param name Required. The resource name of the Conversation to get. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`.
 *    Use
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/-`
 *    to activate auto session mode, which automatically creates a new
 *    conversation inside a ConverseConversation session.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresConversationsConverse
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ConverseConversationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a Conversation. If the Conversation to create already exists, an
 *  ALREADY_EXISTS error is returned.
 *
 *  Method: discoveryengine.projects.locations.dataStores.conversations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresConversationsCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of parent data store. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation.
 *
 *  Creates a Conversation. If the Conversation to create already exists, an
 *  ALREADY_EXISTS error is returned.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation to include in
 *    the query.
 *  @param parent Required. Full resource name of parent data store. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresConversationsCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Conversation. If the Conversation to delete does not exist, a
 *  NOT_FOUND error is returned.
 *
 *  Method: discoveryengine.projects.locations.dataStores.conversations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresConversationsDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Conversation to delete. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleProtobufEmpty.
 *
 *  Deletes a Conversation. If the Conversation to delete does not exist, a
 *  NOT_FOUND error is returned.
 *
 *  @param name Required. The resource name of the Conversation to delete.
 *    Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresConversationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Conversation.
 *
 *  Method: discoveryengine.projects.locations.dataStores.conversations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresConversationsGet : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Conversation to get. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation.
 *
 *  Gets a Conversation.
 *
 *  @param name Required. The resource name of the Conversation to get. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/conversations/{conversation_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresConversationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all Conversations by their parent DataStore.
 *
 *  Method: discoveryengine.projects.locations.dataStores.conversations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresConversationsList : GTLRDiscoveryEngineQuery

/**
 *  A filter to apply on the list results. The supported features are:
 *  user_pseudo_id, state. Example: "user_pseudo_id = some_id"
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  A comma-separated list of fields to order by, sorted in ascending order. Use
 *  "desc" after a field name for descending. Supported fields: * `update_time`
 *  * `create_time` * `conversation_name` Example: "update_time desc"
 *  "create_time"
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Maximum number of results to return. If unspecified, defaults to 50. Max
 *  allowed value is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListConversations` call. Provide
 *  this to retrieve the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The data store resource name. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListConversationsResponse.
 *
 *  Lists all Conversations by their parent DataStore.
 *
 *  @param parent Required. The data store resource name. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresConversationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a Conversation. Conversation action type cannot be changed. If the
 *  Conversation to update does not exist, a NOT_FOUND error is returned.
 *
 *  Method: discoveryengine.projects.locations.dataStores.conversations.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresConversationsPatch : GTLRDiscoveryEngineQuery

/**
 *  Immutable. Fully qualified name
 *  `projects/{project}/locations/global/collections/{collection}/dataStore/ *
 *  /conversations/ *` or
 *  `projects/{project}/locations/global/collections/{collection}/engines/ *
 *  /conversations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Indicates which fields in the provided Conversation to update. The following
 *  are NOT supported: * Conversation.name If not set or empty, all supported
 *  fields are updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation.
 *
 *  Updates a Conversation. Conversation action type cannot be changed. If the
 *  Conversation to update does not exist, a NOT_FOUND error is returned.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation to include in
 *    the query.
 *  @param name Immutable. Fully qualified name
 *    `projects/{project}/locations/global/collections/{collection}/dataStore/ *
 *    /conversations/ *` or
 *    `projects/{project}/locations/global/collections/{collection}/engines/ *
 *    /conversations/ *`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresConversationsPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Conversation *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a DataStore. DataStore is for storing Documents. To serve these
 *  documents for Search, or Recommendation use case, an Engine needs to be
 *  created separately.
 *
 *  Method: discoveryengine.projects.locations.dataStores.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresCreate : GTLRDiscoveryEngineQuery

/**
 *  A boolean flag indicating whether user want to directly create an advanced
 *  data store for site search. If the data store is not configured as site
 *  search (GENERIC vertical and PUBLIC_WEBSITE content_config), this flag will
 *  be ignored.
 */
@property(nonatomic, assign) BOOL createAdvancedSiteSearch;

/**
 *  Required. The ID to use for the DataStore, which will become the final
 *  component of the DataStore's resource name. This field must conform to
 *  [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit
 *  of 63 characters. Otherwise, an INVALID_ARGUMENT error is returned.
 */
@property(nonatomic, copy, nullable) NSString *dataStoreId;

/**
 *  Required. The parent resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  A boolean flag indicating whether to skip the default schema creation for
 *  the data store. Only enable this flag if you are certain that the default
 *  schema is incompatible with your use case. If set to true, you must manually
 *  create a schema for the data store before any documents can be ingested.
 *  This flag cannot be specified if `data_store.starting_schema` is specified.
 */
@property(nonatomic, assign) BOOL skipDefaultSchemaCreation;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Creates a DataStore. DataStore is for storing Documents. To serve these
 *  documents for Search, or Recommendation use case, an Engine needs to be
 *  created separately.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1DataStore to include in
 *    the query.
 *  @param parent Required. The parent resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1DataStore *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a DataStore.
 *
 *  Method: discoveryengine.projects.locations.dataStores.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of DataStore, such as
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
 *  If the caller does not have permission to delete the DataStore, regardless
 *  of whether or not it exists, a PERMISSION_DENIED error is returned. If the
 *  DataStore to delete does not exist, a NOT_FOUND error is returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Deletes a DataStore.
 *
 *  @param name Required. Full resource name of DataStore, such as
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
 *    If the caller does not have permission to delete the DataStore, regardless
 *    of whether or not it exists, a PERMISSION_DENIED error is returned. If the
 *    DataStore to delete does not exist, a NOT_FOUND error is returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a DataStore.
 *
 *  Method: discoveryengine.projects.locations.dataStores.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresGet : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of DataStore, such as
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
 *  If the caller does not have permission to access the DataStore, regardless
 *  of whether or not it exists, a PERMISSION_DENIED error is returned. If the
 *  requested DataStore does not exist, a NOT_FOUND error is returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1DataStore.
 *
 *  Gets a DataStore.
 *
 *  @param name Required. Full resource name of DataStore, such as
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
 *    If the caller does not have permission to access the DataStore, regardless
 *    of whether or not it exists, a PERMISSION_DENIED error is returned. If the
 *    requested DataStore does not exist, a NOT_FOUND error is returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the SiteSearchEngine.
 *
 *  Method: discoveryengine.projects.locations.dataStores.getSiteSearchEngine
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresGetSiteSearchEngine : GTLRDiscoveryEngineQuery

/**
 *  Required. Resource name of SiteSearchEngine, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 *  If the caller does not have permission to access the [SiteSearchEngine],
 *  regardless of whether or not it exists, a PERMISSION_DENIED error is
 *  returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1SiteSearchEngine.
 *
 *  Gets the SiteSearchEngine.
 *
 *  @param name Required. Resource name of SiteSearchEngine, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 *    If the caller does not have permission to access the [SiteSearchEngine],
 *    regardless of whether or not it exists, a PERMISSION_DENIED error is
 *    returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresGetSiteSearchEngine
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all the DataStores associated with the project.
 *
 *  Method: discoveryengine.projects.locations.dataStores.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresList : GTLRDiscoveryEngineQuery

/**
 *  Filter by solution type . For example: `filter =
 *  'solution_type:SOLUTION_TYPE_SEARCH'`
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Maximum number of DataStores to return. If unspecified, defaults to 10. The
 *  maximum allowed value is 50. Values above 50 will be coerced to 50. If this
 *  field is negative, an INVALID_ARGUMENT is returned.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token ListDataStoresResponse.next_page_token, received from a
 *  previous DataStoreService.ListDataStores call. Provide this to retrieve the
 *  subsequent page. When paginating, all other parameters provided to
 *  DataStoreService.ListDataStores must match the call that provided the page
 *  token. Otherwise, an INVALID_ARGUMENT error is returned.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent branch resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection_id}`. If
 *  the caller does not have permission to list DataStores under this location,
 *  regardless of whether or not this data store exists, a PERMISSION_DENIED
 *  error is returned.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListDataStoresResponse.
 *
 *  Lists all the DataStores associated with the project.
 *
 *  @param parent Required. The parent branch resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection_id}`. If
 *    the caller does not have permission to list DataStores under this
 *    location, regardless of whether or not this data store exists, a
 *    PERMISSION_DENIED error is returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: discoveryengine.projects.locations.dataStores.models.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresModelsOperationsGet : GTLRDiscoveryEngineQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresModelsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: discoveryengine.projects.locations.dataStores.models.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresModelsOperationsList : GTLRDiscoveryEngineQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresModelsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: discoveryengine.projects.locations.dataStores.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresOperationsGet : GTLRDiscoveryEngineQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: discoveryengine.projects.locations.dataStores.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresOperationsList : GTLRDiscoveryEngineQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Updates a DataStore
 *
 *  Method: discoveryengine.projects.locations.dataStores.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresPatch : GTLRDiscoveryEngineQuery

/**
 *  Immutable. The full resource name of the data store. Format:
 *  `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
 *  This field must be a UTF-8 encoded string with a length limit of 1024
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Indicates which fields in the provided DataStore to update. If an
 *  unsupported or unknown field is provided, an INVALID_ARGUMENT error is
 *  returned.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1DataStore.
 *
 *  Updates a DataStore
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1DataStore to include in
 *    the query.
 *  @param name Immutable. The full resource name of the data store. Format:
 *    `projects/{project}/locations/{location}/collections/{collection_id}/dataStores/{data_store_id}`.
 *    This field must be a UTF-8 encoded string with a length limit of 1024
 *    characters.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1DataStore *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a Schema.
 *
 *  Method: discoveryengine.projects.locations.dataStores.schemas.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSchemasCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent data store resource name, in the format of
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. The ID to use for the Schema, which becomes the final component of
 *  the Schema.name. This field should conform to
 *  [RFC-1034](https://tools.ietf.org/html/rfc1034) standard with a length limit
 *  of 63 characters.
 */
@property(nonatomic, copy, nullable) NSString *schemaId;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Creates a Schema.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Schema
 *    to include in the query.
 *  @param parent Required. The parent data store resource name, in the format
 *    of
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSchemasCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Schema *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Schema.
 *
 *  Method: discoveryengine.projects.locations.dataStores.schemas.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSchemasDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. The full resource name of the schema, in the format of
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Deletes a Schema.
 *
 *  @param name Required. The full resource name of the schema, in the format of
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSchemasDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Schema.
 *
 *  Method: discoveryengine.projects.locations.dataStores.schemas.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSchemasGet : GTLRDiscoveryEngineQuery

/**
 *  Required. The full resource name of the schema, in the format of
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Schema.
 *
 *  Gets a Schema.
 *
 *  @param name Required. The full resource name of the schema, in the format of
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSchemasGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a list of Schemas.
 *
 *  Method: discoveryengine.projects.locations.dataStores.schemas.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSchemasList : GTLRDiscoveryEngineQuery

/**
 *  The maximum number of Schemas to return. The service may return fewer than
 *  this value. If unspecified, at most 100 Schemas are returned. The maximum
 *  value is 1000; values above 1000 are set to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous SchemaService.ListSchemas call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to SchemaService.ListSchemas must match the call that
 *  provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent data store resource name, in the format of
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListSchemasResponse.
 *
 *  Gets a list of Schemas.
 *
 *  @param parent Required. The parent data store resource name, in the format
 *    of
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSchemasList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a Schema.
 *
 *  Method: discoveryengine.projects.locations.dataStores.schemas.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSchemasPatch : GTLRDiscoveryEngineQuery

/**
 *  If set to true, and the Schema is not found, a new Schema is created. In
 *  this situation, `update_mask` is ignored.
 */
@property(nonatomic, assign) BOOL allowMissing;

/**
 *  Immutable. The full resource name of the schema, in the format of
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`.
 *  This field must be a UTF-8 encoded string with a length limit of 1024
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Updates a Schema.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Schema
 *    to include in the query.
 *  @param name Immutable. The full resource name of the schema, in the format
 *    of
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/schemas/{schema}`.
 *    This field must be a UTF-8 encoded string with a length limit of 1024
 *    characters.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSchemasPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Schema *)object
                           name:(NSString *)name;

@end

/**
 *  Answer query method.
 *
 *  Method: discoveryengine.projects.locations.dataStores.servingConfigs.answer
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresServingConfigsAnswer : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Search serving config, such as `projects/
 *  * /locations/global/collections/default_collection/engines/ *
 *  /servingConfigs/default_serving_config`, or `projects/ *
 *  /locations/global/collections/default_collection/dataStores/ *
 *  /servingConfigs/default_serving_config`. This field is used to identify the
 *  serving configuration name, set of models used to make the search.
 */
@property(nonatomic, copy, nullable) NSString *servingConfig;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1AnswerQueryResponse.
 *
 *  Answer query method.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1AnswerQueryRequest to
 *    include in the query.
 *  @param servingConfig Required. The resource name of the Search serving
 *    config, such as `projects/ *
 *    /locations/global/collections/default_collection/engines/ *
 *    /servingConfigs/default_serving_config`, or `projects/ *
 *    /locations/global/collections/default_collection/dataStores/ *
 *    /servingConfigs/default_serving_config`. This field is used to identify
 *    the serving configuration name, set of models used to make the search.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresServingConfigsAnswer
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1AnswerQueryRequest *)object
                  servingConfig:(NSString *)servingConfig;

@end

/**
 *  Makes a recommendation, which requires a contextual user event.
 *
 *  Method: discoveryengine.projects.locations.dataStores.servingConfigs.recommend
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresServingConfigsRecommend : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of a ServingConfig: `projects/ *
 *  /locations/global/collections/ * /engines/ * /servingConfigs/ *`, or
 *  `projects/ * /locations/global/collections/ * /dataStores/ *
 *  /servingConfigs/ *` One default serving config is created along with your
 *  recommendation engine creation. The engine ID is used as the ID of the
 *  default serving config. For example, for Engine `projects/ *
 *  /locations/global/collections/ * /engines/my-engine`, you can use `projects/
 *  * /locations/global/collections/ *
 *  /engines/my-engine/servingConfigs/my-engine` for your
 *  RecommendationService.Recommend requests.
 */
@property(nonatomic, copy, nullable) NSString *servingConfig;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1RecommendResponse.
 *
 *  Makes a recommendation, which requires a contextual user event.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1RecommendRequest to
 *    include in the query.
 *  @param servingConfig Required. Full resource name of a ServingConfig:
 *    `projects/ * /locations/global/collections/ * /engines/ * /servingConfigs/
 *    *`, or `projects/ * /locations/global/collections/ * /dataStores/ *
 *    /servingConfigs/ *` One default serving config is created along with your
 *    recommendation engine creation. The engine ID is used as the ID of the
 *    default serving config. For example, for Engine `projects/ *
 *    /locations/global/collections/ * /engines/my-engine`, you can use
 *    `projects/ * /locations/global/collections/ *
 *    /engines/my-engine/servingConfigs/my-engine` for your
 *    RecommendationService.Recommend requests.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresServingConfigsRecommend
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1RecommendRequest *)object
                  servingConfig:(NSString *)servingConfig;

@end

/**
 *  Performs a search.
 *
 *  Method: discoveryengine.projects.locations.dataStores.servingConfigs.search
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresServingConfigsSearch : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Search serving config, such as `projects/
 *  * /locations/global/collections/default_collection/engines/ *
 *  /servingConfigs/default_serving_config`, or `projects/ *
 *  /locations/global/collections/default_collection/dataStores/default_data_store/servingConfigs/default_serving_config`.
 *  This field is used to identify the serving configuration name, set of models
 *  used to make the search.
 */
@property(nonatomic, copy, nullable) NSString *servingConfig;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1SearchResponse.
 *
 *  Performs a search.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1SearchRequest to include
 *    in the query.
 *  @param servingConfig Required. The resource name of the Search serving
 *    config, such as `projects/ *
 *    /locations/global/collections/default_collection/engines/ *
 *    /servingConfigs/default_serving_config`, or `projects/ *
 *    /locations/global/collections/default_collection/dataStores/default_data_store/servingConfigs/default_serving_config`.
 *    This field is used to identify the serving configuration name, set of
 *    models used to make the search.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresServingConfigsSearch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1SearchRequest *)object
                  servingConfig:(NSString *)servingConfig;

@end

/**
 *  Gets a Answer.
 *
 *  Method: discoveryengine.projects.locations.dataStores.sessions.answers.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSessionsAnswersGet : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Answer to get. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/engines/{engine_id}/sessions/{session_id}/answers/{answer_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Answer.
 *
 *  Gets a Answer.
 *
 *  @param name Required. The resource name of the Answer to get. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/engines/{engine_id}/sessions/{session_id}/answers/{answer_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSessionsAnswersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a Session. If the Session to create already exists, an
 *  ALREADY_EXISTS error is returned.
 *
 *  Method: discoveryengine.projects.locations.dataStores.sessions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSessionsCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of parent data store. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session.
 *
 *  Creates a Session. If the Session to create already exists, an
 *  ALREADY_EXISTS error is returned.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session
 *    to include in the query.
 *  @param parent Required. Full resource name of parent data store. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSessionsCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Session. If the Session to delete does not exist, a NOT_FOUND
 *  error is returned.
 *
 *  Method: discoveryengine.projects.locations.dataStores.sessions.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSessionsDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Session to delete. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleProtobufEmpty.
 *
 *  Deletes a Session. If the Session to delete does not exist, a NOT_FOUND
 *  error is returned.
 *
 *  @param name Required. The resource name of the Session to delete. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSessionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a Session.
 *
 *  Method: discoveryengine.projects.locations.dataStores.sessions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSessionsGet : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the Session to get. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session.
 *
 *  Gets a Session.
 *
 *  @param name Required. The resource name of the Session to get. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}/sessions/{session_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSessionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all Sessions by their parent DataStore.
 *
 *  Method: discoveryengine.projects.locations.dataStores.sessions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSessionsList : GTLRDiscoveryEngineQuery

/**
 *  A filter to apply on the list results. The supported features are:
 *  user_pseudo_id, state. Example: "user_pseudo_id = some_id"
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  A comma-separated list of fields to order by, sorted in ascending order. Use
 *  "desc" after a field name for descending. Supported fields: * `update_time`
 *  * `create_time` * `session_name` Example: "update_time desc" "create_time"
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Maximum number of results to return. If unspecified, defaults to 50. Max
 *  allowed value is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListSessions` call. Provide this to
 *  retrieve the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The data store resource name. Format:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListSessionsResponse.
 *
 *  Lists all Sessions by their parent DataStore.
 *
 *  @param parent Required. The data store resource name. Format:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store_id}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSessionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a Session. Session action type cannot be changed. If the Session to
 *  update does not exist, a NOT_FOUND error is returned.
 *
 *  Method: discoveryengine.projects.locations.dataStores.sessions.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSessionsPatch : GTLRDiscoveryEngineQuery

/**
 *  Immutable. Fully qualified name
 *  `projects/{project}/locations/global/collections/{collection}/engines/{engine}/sessions/
 *  *`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Indicates which fields in the provided Session to update. The following are
 *  NOT supported: * Session.name If not set or empty, all supported fields are
 *  updated.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session.
 *
 *  Updates a Session. Session action type cannot be changed. If the Session to
 *  update does not exist, a NOT_FOUND error is returned.
 *
 *  @param object The @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session
 *    to include in the query.
 *  @param name Immutable. Fully qualified name
 *    `projects/{project}/locations/global/collections/{collection}/engines/{engine}/sessions/
 *    *`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSessionsPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1Session *)object
                           name:(NSString *)name;

@end

/**
 *  Downgrade from advanced site search to basic site search.
 *
 *  Method: discoveryengine.projects.locations.dataStores.siteSearchEngine.disableAdvancedSiteSearch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineDisableAdvancedSiteSearch : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of the SiteSearchEngine, such as
 *  `projects/{project}/locations/{location}/dataStores/{data_store_id}/siteSearchEngine`.
 */
@property(nonatomic, copy, nullable) NSString *siteSearchEngine;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Downgrade from advanced site search to basic site search.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1DisableAdvancedSiteSearchRequest
 *    to include in the query.
 *  @param siteSearchEngine Required. Full resource name of the
 *    SiteSearchEngine, such as
 *    `projects/{project}/locations/{location}/dataStores/{data_store_id}/siteSearchEngine`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineDisableAdvancedSiteSearch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1DisableAdvancedSiteSearchRequest *)object
               siteSearchEngine:(NSString *)siteSearchEngine;

@end

/**
 *  Upgrade from basic site search to advanced site search.
 *
 *  Method: discoveryengine.projects.locations.dataStores.siteSearchEngine.enableAdvancedSiteSearch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineEnableAdvancedSiteSearch : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of the SiteSearchEngine, such as
 *  `projects/{project}/locations/{location}/dataStores/{data_store_id}/siteSearchEngine`.
 */
@property(nonatomic, copy, nullable) NSString *siteSearchEngine;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Upgrade from basic site search to advanced site search.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1EnableAdvancedSiteSearchRequest
 *    to include in the query.
 *  @param siteSearchEngine Required. Full resource name of the
 *    SiteSearchEngine, such as
 *    `projects/{project}/locations/{location}/dataStores/{data_store_id}/siteSearchEngine`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineEnableAdvancedSiteSearch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1EnableAdvancedSiteSearchRequest *)object
               siteSearchEngine:(NSString *)siteSearchEngine;

@end

/**
 *  Request on-demand recrawl for a list of URIs.
 *
 *  Method: discoveryengine.projects.locations.dataStores.siteSearchEngine.recrawlUris
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineRecrawlUris : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of the SiteSearchEngine, such as `projects/ *
 *  /locations/ * /collections/ * /dataStores/ * /siteSearchEngine`.
 */
@property(nonatomic, copy, nullable) NSString *siteSearchEngine;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Request on-demand recrawl for a list of URIs.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1RecrawlUrisRequest to
 *    include in the query.
 *  @param siteSearchEngine Required. Full resource name of the
 *    SiteSearchEngine, such as `projects/ * /locations/ * /collections/ *
 *    /dataStores/ * /siteSearchEngine`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineRecrawlUris
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1RecrawlUrisRequest *)object
               siteSearchEngine:(NSString *)siteSearchEngine;

@end

/**
 *  Creates TargetSite in a batch.
 *
 *  Method: discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.batchCreate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineTargetSitesBatchCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent resource shared by all TargetSites being created.
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 *  The parent field in the CreateBookRequest messages must either be empty or
 *  match this field.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Creates TargetSite in a batch.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1BatchCreateTargetSitesRequest
 *    to include in the query.
 *  @param parent Required. The parent resource shared by all TargetSites being
 *    created.
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 *    The parent field in the CreateBookRequest messages must either be empty or
 *    match this field.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineTargetSitesBatchCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1BatchCreateTargetSitesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a TargetSite.
 *
 *  Method: discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineTargetSitesCreate : GTLRDiscoveryEngineQuery

/**
 *  Required. Parent resource name of TargetSite, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Creates a TargetSite.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1TargetSite to include in
 *    the query.
 *  @param parent Required. Parent resource name of TargetSite, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineTargetSitesCreate
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1TargetSite *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a TargetSite.
 *
 *  Method: discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineTargetSitesDelete : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of TargetSite, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`.
 *  If the caller does not have permission to access the TargetSite, regardless
 *  of whether or not it exists, a PERMISSION_DENIED error is returned. If the
 *  requested TargetSite does not exist, a NOT_FOUND error is returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Deletes a TargetSite.
 *
 *  @param name Required. Full resource name of TargetSite, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`.
 *    If the caller does not have permission to access the TargetSite,
 *    regardless of whether or not it exists, a PERMISSION_DENIED error is
 *    returned. If the requested TargetSite does not exist, a NOT_FOUND error is
 *    returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineTargetSitesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a TargetSite.
 *
 *  Method: discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineTargetSitesGet : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of TargetSite, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`.
 *  If the caller does not have permission to access the TargetSite, regardless
 *  of whether or not it exists, a PERMISSION_DENIED error is returned. If the
 *  requested TargetSite does not exist, a NOT_FOUND error is returned.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1TargetSite.
 *
 *  Gets a TargetSite.
 *
 *  @param name Required. Full resource name of TargetSite, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`.
 *    If the caller does not have permission to access the TargetSite,
 *    regardless of whether or not it exists, a PERMISSION_DENIED error is
 *    returned. If the requested TargetSite does not exist, a NOT_FOUND error is
 *    returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineTargetSitesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a list of TargetSites.
 *
 *  Method: discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineTargetSitesList : GTLRDiscoveryEngineQuery

/**
 *  Requested page size. Server may return fewer items than requested. If
 *  unspecified, server will pick an appropriate default. The maximum value is
 *  1000; values above 1000 will be coerced to 1000. If this field is negative,
 *  an INVALID_ARGUMENT error is returned.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListTargetSites` call. Provide this
 *  to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListTargetSites` must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent site search engine resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 *  If the caller does not have permission to list TargetSites under this site
 *  search engine, regardless of whether or not this branch exists, a
 *  PERMISSION_DENIED error is returned.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ListTargetSitesResponse.
 *
 *  Gets a list of TargetSites.
 *
 *  @param parent Required. The parent site search engine resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine`.
 *    If the caller does not have permission to list TargetSites under this site
 *    search engine, regardless of whether or not this branch exists, a
 *    PERMISSION_DENIED error is returned.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineTargetSitesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a TargetSite.
 *
 *  Method: discoveryengine.projects.locations.dataStores.siteSearchEngine.targetSites.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineTargetSitesPatch : GTLRDiscoveryEngineQuery

/**
 *  Output only. The fully qualified resource name of the target site.
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`
 *  The `target_site_id` is system-generated.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Updates a TargetSite.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1TargetSite to include in
 *    the query.
 *  @param name Output only. The fully qualified resource name of the target
 *    site.
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}/siteSearchEngine/targetSites/{target_site}`
 *    The `target_site_id` is system-generated.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSiteSearchEngineTargetSitesPatch
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1TargetSite *)object
                           name:(NSString *)name;

@end

/**
 *  Imports all SuggestionDenyListEntry for a DataStore.
 *
 *  Method: discoveryengine.projects.locations.dataStores.suggestionDenyListEntries.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSuggestionDenyListEntriesImport : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent data store resource name for which to import denylist
 *  entries. Follows pattern projects/ * /locations/ * /collections/ *
 *  /dataStores/ *.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Imports all SuggestionDenyListEntry for a DataStore.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ImportSuggestionDenyListEntriesRequest
 *    to include in the query.
 *  @param parent Required. The parent data store resource name for which to
 *    import denylist entries. Follows pattern projects/ * /locations/ *
 *    /collections/ * /dataStores/ *.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSuggestionDenyListEntriesImport
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ImportSuggestionDenyListEntriesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Permanently deletes all SuggestionDenyListEntry for a DataStore.
 *
 *  Method: discoveryengine.projects.locations.dataStores.suggestionDenyListEntries.purge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSuggestionDenyListEntriesPurge : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent data store resource name for which to import denylist
 *  entries. Follows pattern projects/ * /locations/ * /collections/ *
 *  /dataStores/ *.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Permanently deletes all SuggestionDenyListEntry for a DataStore.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1PurgeSuggestionDenyListEntriesRequest
 *    to include in the query.
 *  @param parent Required. The parent data store resource name for which to
 *    import denylist entries. Follows pattern projects/ * /locations/ *
 *    /collections/ * /dataStores/ *.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresSuggestionDenyListEntriesPurge
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1PurgeSuggestionDenyListEntriesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Writes a single user event from the browser. This uses a GET request to due
 *  to browser restriction of POST-ing to a third-party domain. This method is
 *  used only by the Discovery Engine API JavaScript pixel and Google Tag
 *  Manager. Users should not call this method directly.
 *
 *  Method: discoveryengine.projects.locations.dataStores.userEvents.collect
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresUserEventsCollect : GTLRDiscoveryEngineQuery

/**
 *  The event timestamp in milliseconds. This prevents browser caching of
 *  otherwise identical get requests. The name is abbreviated to reduce the
 *  payload bytes.
 */
@property(nonatomic, assign) long long ets;

/**
 *  Required. The parent DataStore resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The URL including cgi-parameters but excluding the hash fragment with a
 *  length limit of 5,000 characters. This is often more useful than the referer
 *  URL, because many browsers only send the domain for third-party requests.
 */
@property(nonatomic, copy, nullable) NSString *uri;

/**
 *  Required. URL encoded UserEvent proto with a length limit of 2,000,000
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *userEvent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleApiHttpBody.
 *
 *  Writes a single user event from the browser. This uses a GET request to due
 *  to browser restriction of POST-ing to a third-party domain. This method is
 *  used only by the Discovery Engine API JavaScript pixel and Google Tag
 *  Manager. Users should not call this method directly.
 *
 *  @param parent Required. The parent DataStore resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresUserEventsCollect
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Bulk import of user events. Request processing might be synchronous. Events
 *  that already exist are skipped. Use this method for backfilling historical
 *  user events. Operation.response is of type ImportResponse. Note that it is
 *  possible for a subset of the items to be successfully inserted.
 *  Operation.metadata is of type ImportMetadata.
 *
 *  Method: discoveryengine.projects.locations.dataStores.userEvents.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresUserEventsImport : GTLRDiscoveryEngineQuery

/**
 *  Required. Parent DataStore resource name, of the form
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Bulk import of user events. Request processing might be synchronous. Events
 *  that already exist are skipped. Use this method for backfilling historical
 *  user events. Operation.response is of type ImportResponse. Note that it is
 *  possible for a subset of the items to be successfully inserted.
 *  Operation.metadata is of type ImportMetadata.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ImportUserEventsRequest to
 *    include in the query.
 *  @param parent Required. Parent DataStore resource name, of the form
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresUserEventsImport
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ImportUserEventsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes permanently all user events specified by the filter provided.
 *  Depending on the number of events specified by the filter, this operation
 *  could take hours or days to complete. To test a filter, use the list command
 *  first.
 *
 *  Method: discoveryengine.projects.locations.dataStores.userEvents.purge
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresUserEventsPurge : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the catalog under which the events are
 *  created. The format is
 *  `projects/{project}/locations/global/collections/{collection}/dataStores/{dataStore}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Deletes permanently all user events specified by the filter provided.
 *  Depending on the number of events specified by the filter, this operation
 *  could take hours or days to complete. To test a filter, use the list command
 *  first.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1PurgeUserEventsRequest to
 *    include in the query.
 *  @param parent Required. The resource name of the catalog under which the
 *    events are created. The format is
 *    `projects/{project}/locations/global/collections/{collection}/dataStores/{dataStore}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresUserEventsPurge
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1PurgeUserEventsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Writes a single user event.
 *
 *  Method: discoveryengine.projects.locations.dataStores.userEvents.write
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresUserEventsWrite : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent resource name. If the write user event action is
 *  applied in DataStore level, the format is:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 *  If the write user event action is applied in Location level, for example,
 *  the event with Document across multiple DataStore, the format is:
 *  `projects/{project}/locations/{location}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  If set to true, the user event is written asynchronously after validation,
 *  and the API responds without waiting for the write.
 */
@property(nonatomic, assign) BOOL writeAsync;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1UserEvent.
 *
 *  Writes a single user event.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1UserEvent to include in
 *    the query.
 *  @param parent Required. The parent resource name. If the write user event
 *    action is applied in DataStore level, the format is:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 *    If the write user event action is applied in Location level, for example,
 *    the event with Document across multiple DataStore, the format is:
 *    `projects/{project}/locations/{location}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsDataStoresUserEventsWrite
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1UserEvent *)object
                         parent:(NSString *)parent;

@end

/**
 *  Performs a grounding check.
 *
 *  Method: discoveryengine.projects.locations.groundingConfigs.check
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsGroundingConfigsCheck : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the grounding config, such as `projects/ *
 *  /locations/global/groundingConfigs/default_grounding_config`.
 */
@property(nonatomic, copy, nullable) NSString *groundingConfig;

/**
 *  Fetches a @c
 *  GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1CheckGroundingResponse.
 *
 *  Performs a grounding check.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1CheckGroundingRequest to
 *    include in the query.
 *  @param groundingConfig Required. The resource name of the grounding config,
 *    such as `projects/ *
 *    /locations/global/groundingConfigs/default_grounding_config`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsGroundingConfigsCheck
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1CheckGroundingRequest *)object
                groundingConfig:(NSString *)groundingConfig;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: discoveryengine.projects.locations.identity_mapping_stores.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsIdentityMappingStoresOperationsGet : GTLRDiscoveryEngineQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsIdentityMappingStoresOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: discoveryengine.projects.locations.identity_mapping_stores.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsIdentityMappingStoresOperationsList : GTLRDiscoveryEngineQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsIdentityMappingStoresOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: discoveryengine.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsOperationsGet : GTLRDiscoveryEngineQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: discoveryengine.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsOperationsList : GTLRDiscoveryEngineQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Ranks a list of text records based on the given input query.
 *
 *  Method: discoveryengine.projects.locations.rankingConfigs.rank
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsRankingConfigsRank : GTLRDiscoveryEngineQuery

/**
 *  Required. The resource name of the rank service config, such as
 *  `projects/{project_num}/locations/{location}/rankingConfigs/default_ranking_config`.
 */
@property(nonatomic, copy, nullable) NSString *rankingConfig;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1RankResponse.
 *
 *  Ranks a list of text records based on the given input query.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1RankRequest to include in
 *    the query.
 *  @param rankingConfig Required. The resource name of the rank service config,
 *    such as
 *    `projects/{project_num}/locations/{location}/rankingConfigs/default_ranking_config`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsRankingConfigsRank
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1RankRequest *)object
                  rankingConfig:(NSString *)rankingConfig;

@end

/**
 *  Writes a single user event from the browser. This uses a GET request to due
 *  to browser restriction of POST-ing to a third-party domain. This method is
 *  used only by the Discovery Engine API JavaScript pixel and Google Tag
 *  Manager. Users should not call this method directly.
 *
 *  Method: discoveryengine.projects.locations.userEvents.collect
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsUserEventsCollect : GTLRDiscoveryEngineQuery

/**
 *  The event timestamp in milliseconds. This prevents browser caching of
 *  otherwise identical get requests. The name is abbreviated to reduce the
 *  payload bytes.
 */
@property(nonatomic, assign) long long ets;

/**
 *  Required. The parent DataStore resource name, such as
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  The URL including cgi-parameters but excluding the hash fragment with a
 *  length limit of 5,000 characters. This is often more useful than the referer
 *  URL, because many browsers only send the domain for third-party requests.
 */
@property(nonatomic, copy, nullable) NSString *uri;

/**
 *  Required. URL encoded UserEvent proto with a length limit of 2,000,000
 *  characters.
 */
@property(nonatomic, copy, nullable) NSString *userEvent;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleApiHttpBody.
 *
 *  Writes a single user event from the browser. This uses a GET request to due
 *  to browser restriction of POST-ing to a third-party domain. This method is
 *  used only by the Discovery Engine API JavaScript pixel and Google Tag
 *  Manager. Users should not call this method directly.
 *
 *  @param parent Required. The parent DataStore resource name, such as
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsUserEventsCollect
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Writes a single user event.
 *
 *  Method: discoveryengine.projects.locations.userEvents.write
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsLocationsUserEventsWrite : GTLRDiscoveryEngineQuery

/**
 *  Required. The parent resource name. If the write user event action is
 *  applied in DataStore level, the format is:
 *  `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 *  If the write user event action is applied in Location level, for example,
 *  the event with Document across multiple DataStore, the format is:
 *  `projects/{project}/locations/{location}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  If set to true, the user event is written asynchronously after validation,
 *  and the API responds without waiting for the write.
 */
@property(nonatomic, assign) BOOL writeAsync;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1UserEvent.
 *
 *  Writes a single user event.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1UserEvent to include in
 *    the query.
 *  @param parent Required. The parent resource name. If the write user event
 *    action is applied in DataStore level, the format is:
 *    `projects/{project}/locations/{location}/collections/{collection}/dataStores/{data_store}`.
 *    If the write user event action is applied in Location level, for example,
 *    the event with Document across multiple DataStore, the format is:
 *    `projects/{project}/locations/{location}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsLocationsUserEventsWrite
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1UserEvent *)object
                         parent:(NSString *)parent;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: discoveryengine.projects.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsOperationsCancel : GTLRDiscoveryEngineQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleProtobufEmpty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleLongrunningCancelOperationRequest to include in
 *    the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleLongrunningCancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: discoveryengine.projects.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsOperationsGet : GTLRDiscoveryEngineQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: discoveryengine.projects.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsOperationsList : GTLRDiscoveryEngineQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Provisions the project resource. During the process, related systems will
 *  get prepared and initialized. Caller must read the [Terms for data
 *  use](https://cloud.google.com/retail/data-use-terms), and optionally specify
 *  in request to provide consent to that service terms.
 *
 *  Method: discoveryengine.projects.provision
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDiscoveryEngineCloudPlatform
 */
@interface GTLRDiscoveryEngineQuery_ProjectsProvision : GTLRDiscoveryEngineQuery

/**
 *  Required. Full resource name of a Project, such as
 *  `projects/{project_id_or_number}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDiscoveryEngine_GoogleLongrunningOperation.
 *
 *  Provisions the project resource. During the process, related systems will
 *  get prepared and initialized. Caller must read the [Terms for data
 *  use](https://cloud.google.com/retail/data-use-terms), and optionally specify
 *  in request to provide consent to that service terms.
 *
 *  @param object The @c
 *    GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ProvisionProjectRequest to
 *    include in the query.
 *  @param name Required. Full resource name of a Project, such as
 *    `projects/{project_id_or_number}`.
 *
 *  @return GTLRDiscoveryEngineQuery_ProjectsProvision
 */
+ (instancetype)queryWithObject:(GTLRDiscoveryEngine_GoogleCloudDiscoveryengineV1ProvisionProjectRequest *)object
                           name:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
