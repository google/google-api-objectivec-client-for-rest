// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Apigee Registry API (apigeeregistry/v1)
// Documentation:
//   https://cloud.google.com/apigee/docs/api-hub/what-is-api-hub

#import <GoogleAPIClientForREST/GTLRApigeeRegistryQuery.h>

@implementation GTLRApigeeRegistryQuery

@dynamic fields;

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsCreate

@dynamic artifactId, parent;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_Artifact *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/artifacts";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_Artifact class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.artifacts.create";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Empty class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.artifacts.delete";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Artifact class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.artifacts.get";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsGetContents

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:getContents";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsGetContents *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_HttpBody class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.artifacts.getContents";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.artifacts.getIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/artifacts";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_ListArtifactsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.artifacts.list";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsReplaceArtifact

@dynamic name;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_Artifact *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsReplaceArtifact *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Artifact class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.artifacts.replaceArtifact";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.artifacts.setIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisArtifactsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_TestIamPermissionsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.artifacts.testIamPermissions";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisCreate

@dynamic apiId, parent;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_Api *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/apis";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_Api class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.create";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDelete

@dynamic force, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Empty class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.delete";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsArtifactsCreate

@dynamic artifactId, parent;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_Artifact *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/artifacts";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsArtifactsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_Artifact class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.artifacts.create";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsArtifactsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsArtifactsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Empty class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.artifacts.delete";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsArtifactsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsArtifactsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Artifact class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.artifacts.get";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsArtifactsGetContents

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:getContents";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsArtifactsGetContents *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_HttpBody class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.artifacts.getContents";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsArtifactsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/artifacts";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsArtifactsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_ListArtifactsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.artifacts.list";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsArtifactsReplaceArtifact

@dynamic name;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_Artifact *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsArtifactsReplaceArtifact *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Artifact class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.artifacts.replaceArtifact";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsCreate

@dynamic apiDeploymentId, parent;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_ApiDeployment *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/deployments";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_ApiDeployment class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.create";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsDelete

@dynamic force, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Empty class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.delete";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsDeleteRevision

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:deleteRevision";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsDeleteRevision *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_ApiDeployment class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.deleteRevision";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_ApiDeployment class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.get";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.getIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/deployments";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_ListApiDeploymentsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.list";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsListRevisions

@dynamic name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:listRevisions";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsListRevisions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_ListApiDeploymentRevisionsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.listRevisions";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsPatch

@dynamic allowMissing, name, updateMask;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_ApiDeployment *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_ApiDeployment class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.patch";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsRollback

@dynamic name;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_RollbackApiDeploymentRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:rollback";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsRollback *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_ApiDeployment class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.rollback";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.setIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsTagRevision

@dynamic name;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_TagApiDeploymentRevisionRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:tagRevision";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsTagRevision *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_ApiDeployment class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.tagRevision";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisDeploymentsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_TestIamPermissionsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.deployments.testIamPermissions";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Api class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.get";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.getIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/apis";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_ListApisResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.list";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisPatch

@dynamic allowMissing, name, updateMask;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_Api *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Api class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.patch";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.setIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_TestIamPermissionsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.testIamPermissions";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsCreate

@dynamic artifactId, parent;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_Artifact *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/artifacts";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_Artifact class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.artifacts.create";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Empty class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.artifacts.delete";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Artifact class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.artifacts.get";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsGetContents

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:getContents";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsGetContents *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_HttpBody class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.artifacts.getContents";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.artifacts.getIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/artifacts";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_ListArtifactsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.artifacts.list";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsReplaceArtifact

@dynamic name;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_Artifact *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsReplaceArtifact *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Artifact class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.artifacts.replaceArtifact";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.artifacts.setIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsArtifactsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_TestIamPermissionsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.artifacts.testIamPermissions";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsCreate

@dynamic apiVersionId, parent;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_ApiVersion *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/versions";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_ApiVersion class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.create";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsDelete

@dynamic force, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Empty class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.delete";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_ApiVersion class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.get";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.getIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/versions";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_ListApiVersionsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.list";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsPatch

@dynamic allowMissing, name, updateMask;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_ApiVersion *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_ApiVersion class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.patch";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.setIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsCreate

@dynamic artifactId, parent;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_Artifact *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/artifacts";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_Artifact class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.artifacts.create";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Empty class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.artifacts.delete";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Artifact class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.artifacts.get";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsGetContents

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:getContents";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsGetContents *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_HttpBody class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.artifacts.getContents";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.artifacts.getIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/artifacts";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_ListArtifactsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.artifacts.list";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsReplaceArtifact

@dynamic name;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_Artifact *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsReplaceArtifact *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Artifact class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.artifacts.replaceArtifact";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.artifacts.setIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsArtifactsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_TestIamPermissionsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.artifacts.testIamPermissions";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsCreate

@dynamic apiSpecId, parent;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_ApiSpec *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/specs";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_ApiSpec class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.create";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsDelete

@dynamic force, name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Empty class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.delete";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsDeleteRevision

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:deleteRevision";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsDeleteRevision *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_ApiSpec class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.deleteRevision";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_ApiSpec class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.get";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsGetContents

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:getContents";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsGetContents *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_HttpBody class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.getContents";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.getIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/specs";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_ListApiSpecsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.list";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsListRevisions

@dynamic name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:listRevisions";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsListRevisions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_ListApiSpecRevisionsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.listRevisions";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsPatch

@dynamic allowMissing, name, updateMask;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_ApiSpec *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_ApiSpec class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.patch";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsRollback

@dynamic name;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_RollbackApiSpecRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:rollback";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsRollback *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_ApiSpec class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.rollback";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.setIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsTagRevision

@dynamic name;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_TagApiSpecRevisionRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:tagRevision";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsTagRevision *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_ApiSpec class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.tagRevision";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsSpecsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_TestIamPermissionsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.specs.testIamPermissions";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRApigeeRegistryQuery_ProjectsLocationsApisVersionsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_TestIamPermissionsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.apis.versions.testIamPermissions";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsCreate

@dynamic artifactId, parent;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_Artifact *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/artifacts";
  GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_Artifact class];
  query.loggingName = @"apigeeregistry.projects.locations.artifacts.create";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Empty class];
  query.loggingName = @"apigeeregistry.projects.locations.artifacts.delete";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Artifact class];
  query.loggingName = @"apigeeregistry.projects.locations.artifacts.get";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsGetContents

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:getContents";
  GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsGetContents *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_HttpBody class];
  query.loggingName = @"apigeeregistry.projects.locations.artifacts.getContents";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.artifacts.getIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/artifacts";
  GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_ListArtifactsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.artifacts.list";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsReplaceArtifact

@dynamic name;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_Artifact *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsReplaceArtifact *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Artifact class];
  query.loggingName = @"apigeeregistry.projects.locations.artifacts.replaceArtifact";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.artifacts.setIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRApigeeRegistryQuery_ProjectsLocationsArtifactsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_TestIamPermissionsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.artifacts.testIamPermissions";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Location class];
  query.loggingName = @"apigeeregistry.projects.locations.get";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsInstancesCreate

@dynamic instanceId, parent;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_Instance *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/instances";
  GTLRApigeeRegistryQuery_ProjectsLocationsInstancesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRApigeeRegistry_Operation class];
  query.loggingName = @"apigeeregistry.projects.locations.instances.create";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsInstancesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsInstancesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Operation class];
  query.loggingName = @"apigeeregistry.projects.locations.instances.delete";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsInstancesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsInstancesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Instance class];
  query.loggingName = @"apigeeregistry.projects.locations.instances.get";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsInstancesGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsInstancesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.instances.getIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsInstancesSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsInstancesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.instances.setIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsInstancesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRApigeeRegistryQuery_ProjectsLocationsInstancesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_TestIamPermissionsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.instances.testIamPermissions";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRApigeeRegistryQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_ListLocationsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.list";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRApigeeRegistryQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Empty class];
  query.loggingName = @"apigeeregistry.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Empty class];
  query.loggingName = @"apigeeregistry.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRApigeeRegistryQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_Operation class];
  query.loggingName = @"apigeeregistry.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRApigeeRegistryQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRApigeeRegistry_ListOperationsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsRuntimeGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsRuntimeGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.runtime.getIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsRuntimeSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRApigeeRegistryQuery_ProjectsLocationsRuntimeSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_Policy class];
  query.loggingName = @"apigeeregistry.projects.locations.runtime.setIamPolicy";
  return query;
}

@end

@implementation GTLRApigeeRegistryQuery_ProjectsLocationsRuntimeTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRApigeeRegistry_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRApigeeRegistryQuery_ProjectsLocationsRuntimeTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRApigeeRegistry_TestIamPermissionsResponse class];
  query.loggingName = @"apigeeregistry.projects.locations.runtime.testIamPermissions";
  return query;
}

@end
