// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Apigee Registry API (apigeeregistry/v1)
// Documentation:
//   https://cloud.google.com/apigee/docs/api-hub/what-is-api-hub

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRApigeeRegistry_Api;
@class GTLRApigeeRegistry_Api_Annotations;
@class GTLRApigeeRegistry_Api_Labels;
@class GTLRApigeeRegistry_ApiDeployment;
@class GTLRApigeeRegistry_ApiDeployment_Annotations;
@class GTLRApigeeRegistry_ApiDeployment_Labels;
@class GTLRApigeeRegistry_ApiSpec;
@class GTLRApigeeRegistry_ApiSpec_Annotations;
@class GTLRApigeeRegistry_ApiSpec_Labels;
@class GTLRApigeeRegistry_ApiVersion;
@class GTLRApigeeRegistry_ApiVersion_Annotations;
@class GTLRApigeeRegistry_ApiVersion_Labels;
@class GTLRApigeeRegistry_Artifact;
@class GTLRApigeeRegistry_Binding;
@class GTLRApigeeRegistry_Config;
@class GTLRApigeeRegistry_Expr;
@class GTLRApigeeRegistry_HttpBody_Extensions_Item;
@class GTLRApigeeRegistry_Location;
@class GTLRApigeeRegistry_Location_Labels;
@class GTLRApigeeRegistry_Location_Metadata;
@class GTLRApigeeRegistry_Operation;
@class GTLRApigeeRegistry_Operation_Metadata;
@class GTLRApigeeRegistry_Operation_Response;
@class GTLRApigeeRegistry_Policy;
@class GTLRApigeeRegistry_Status;
@class GTLRApigeeRegistry_Status_Details_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRApigeeRegistry_Instance.state

/**
 *  The Instance has been created and is ready for use.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRApigeeRegistry_Instance_State_Active;
/**
 *  The Instance is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRApigeeRegistry_Instance_State_Creating;
/**
 *  The Instance is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRApigeeRegistry_Instance_State_Deleting;
/**
 *  The Instance encountered an error during a state change.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRApigeeRegistry_Instance_State_Failed;
/**
 *  The Instance has not been initialized or has been deleted.
 *
 *  Value: "INACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRApigeeRegistry_Instance_State_Inactive;
/**
 *  The default value. This value is used if the state is omitted.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRApigeeRegistry_Instance_State_StateUnspecified;
/**
 *  The Instance is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRApigeeRegistry_Instance_State_Updating;

/**
 *  A top-level description of an API. Produced by producers and are commitments
 *  to provide services.
 */
@interface GTLRApigeeRegistry_Api : GTLRObject

/**
 *  Annotations attach non-identifying metadata to resources. Annotation keys
 *  and values are less restricted than those of labels, but should be generally
 *  used for small values of broad interest. Larger, topic- specific metadata
 *  should be stored in Artifacts.
 */
@property(nonatomic, strong, nullable) GTLRApigeeRegistry_Api_Annotations *annotations;

/**
 *  A user-definable description of the availability of this service. Format:
 *  free-form, but we expect single words that describe availability, e.g.,
 *  "NONE", "TESTING", "PREVIEW", "GENERAL", "DEPRECATED", "SHUTDOWN".
 */
@property(nonatomic, copy, nullable) NSString *availability;

/** Output only. Creation timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  A detailed description.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Human-meaningful name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Labels attach identifying metadata to resources. Identifying metadata can be
 *  used to filter list operations. Label keys and values can be no longer than
 *  64 characters (Unicode codepoints), can only contain lowercase letters,
 *  numeric characters, underscores, and dashes. International characters are
 *  allowed. No more than 64 user labels can be associated with one resource
 *  (System labels are excluded). See https://goo.gl/xmQnxf for more information
 *  and examples of labels. System reserved label keys are prefixed with
 *  `apigeeregistry.googleapis.com/` and cannot be changed.
 */
@property(nonatomic, strong, nullable) GTLRApigeeRegistry_Api_Labels *labels;

/** Resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The recommended deployment of the API. Format:
 *  `projects/{project}/locations/{location}/apis/{api}/deployments/{deployment}`
 */
@property(nonatomic, copy, nullable) NSString *recommendedDeployment;

/**
 *  The recommended version of the API. Format:
 *  `projects/{project}/locations/{location}/apis/{api}/versions/{version}`
 */
@property(nonatomic, copy, nullable) NSString *recommendedVersion;

/** Output only. Last update timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Annotations attach non-identifying metadata to resources. Annotation keys
 *  and values are less restricted than those of labels, but should be generally
 *  used for small values of broad interest. Larger, topic- specific metadata
 *  should be stored in Artifacts.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRApigeeRegistry_Api_Annotations : GTLRObject
@end


/**
 *  Labels attach identifying metadata to resources. Identifying metadata can be
 *  used to filter list operations. Label keys and values can be no longer than
 *  64 characters (Unicode codepoints), can only contain lowercase letters,
 *  numeric characters, underscores, and dashes. International characters are
 *  allowed. No more than 64 user labels can be associated with one resource
 *  (System labels are excluded). See https://goo.gl/xmQnxf for more information
 *  and examples of labels. System reserved label keys are prefixed with
 *  `apigeeregistry.googleapis.com/` and cannot be changed.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRApigeeRegistry_Api_Labels : GTLRObject
@end


/**
 *  Describes a service running at particular address that provides a particular
 *  version of an API. ApiDeployments have revisions which correspond to
 *  different configurations of a single deployment in time. Revision
 *  identifiers should be updated whenever the served API spec or endpoint
 *  address changes.
 */
@interface GTLRApigeeRegistry_ApiDeployment : GTLRObject

/**
 *  Text briefly describing how to access the endpoint. Changes to this value
 *  will not affect the revision.
 */
@property(nonatomic, copy, nullable) NSString *accessGuidance;

/**
 *  Annotations attach non-identifying metadata to resources. Annotation keys
 *  and values are less restricted than those of labels, but should be generally
 *  used for small values of broad interest. Larger, topic- specific metadata
 *  should be stored in Artifacts.
 */
@property(nonatomic, strong, nullable) GTLRApigeeRegistry_ApiDeployment_Annotations *annotations;

/**
 *  The full resource name (including revision ID) of the spec of the API being
 *  served by the deployment. Changes to this value will update the revision.
 *  Format: `apis/{api}/deployments/{deployment}`
 */
@property(nonatomic, copy, nullable) NSString *apiSpecRevision;

/**
 *  Output only. Creation timestamp; when the deployment resource was created.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  A detailed description.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Human-meaningful name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The address where the deployment is serving. Changes to this value will
 *  update the revision.
 */
@property(nonatomic, copy, nullable) NSString *endpointUri;

/**
 *  The address of the external channel of the API (e.g., the Developer Portal).
 *  Changes to this value will not affect the revision.
 */
@property(nonatomic, copy, nullable) NSString *externalChannelUri;

/**
 *  Text briefly identifying the intended audience of the API. Changes to this
 *  value will not affect the revision.
 */
@property(nonatomic, copy, nullable) NSString *intendedAudience;

/**
 *  Labels attach identifying metadata to resources. Identifying metadata can be
 *  used to filter list operations. Label keys and values can be no longer than
 *  64 characters (Unicode codepoints), can only contain lowercase letters,
 *  numeric characters, underscores and dashes. International characters are
 *  allowed. No more than 64 user labels can be associated with one resource
 *  (System labels are excluded). See https://goo.gl/xmQnxf for more information
 *  and examples of labels. System reserved label keys are prefixed with
 *  `apigeeregistry.googleapis.com/` and cannot be changed.
 */
@property(nonatomic, strong, nullable) GTLRApigeeRegistry_ApiDeployment_Labels *labels;

/** Resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Revision creation timestamp; when the represented revision was
 *  created.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *revisionCreateTime;

/**
 *  Output only. Immutable. The revision ID of the deployment. A new revision is
 *  committed whenever the deployment contents are changed. The format is an
 *  8-character hexadecimal string.
 */
@property(nonatomic, copy, nullable) NSString *revisionId;

/**
 *  Output only. Last update timestamp: when the represented revision was last
 *  modified.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *revisionUpdateTime;

@end


/**
 *  Annotations attach non-identifying metadata to resources. Annotation keys
 *  and values are less restricted than those of labels, but should be generally
 *  used for small values of broad interest. Larger, topic- specific metadata
 *  should be stored in Artifacts.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRApigeeRegistry_ApiDeployment_Annotations : GTLRObject
@end


/**
 *  Labels attach identifying metadata to resources. Identifying metadata can be
 *  used to filter list operations. Label keys and values can be no longer than
 *  64 characters (Unicode codepoints), can only contain lowercase letters,
 *  numeric characters, underscores and dashes. International characters are
 *  allowed. No more than 64 user labels can be associated with one resource
 *  (System labels are excluded). See https://goo.gl/xmQnxf for more information
 *  and examples of labels. System reserved label keys are prefixed with
 *  `apigeeregistry.googleapis.com/` and cannot be changed.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRApigeeRegistry_ApiDeployment_Labels : GTLRObject
@end


/**
 *  Describes a version of an API in a structured way. ApiSpecs provide formal
 *  descriptions that consumers can use to use a version. ApiSpec resources are
 *  intended to be fully-resolved descriptions of an ApiVersion. When specs
 *  consist of multiple files, these should be bundled together (e.g., in a zip
 *  archive) and stored as a unit. Multiple specs can exist to provide
 *  representations in different API description formats. Synchronization of
 *  these representations would be provided by tooling and background services.
 */
@interface GTLRApigeeRegistry_ApiSpec : GTLRObject

/**
 *  Annotations attach non-identifying metadata to resources. Annotation keys
 *  and values are less restricted than those of labels, but should be generally
 *  used for small values of broad interest. Larger, topic- specific metadata
 *  should be stored in Artifacts.
 */
@property(nonatomic, strong, nullable) GTLRApigeeRegistry_ApiSpec_Annotations *annotations;

/**
 *  Input only. The contents of the spec. Provided by API callers when specs are
 *  created or updated. To access the contents of a spec, use
 *  GetApiSpecContents.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *contents;

/** Output only. Creation timestamp; when the spec resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  A detailed description.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  A possibly-hierarchical name used to refer to the spec from other specs.
 */
@property(nonatomic, copy, nullable) NSString *filename;

/**
 *  Output only. A SHA-256 hash of the spec's contents. If the spec is gzipped,
 *  this is the hash of the uncompressed spec.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty;

/**
 *  Labels attach identifying metadata to resources. Identifying metadata can be
 *  used to filter list operations. Label keys and values can be no longer than
 *  64 characters (Unicode codepoints), can only contain lowercase letters,
 *  numeric characters, underscores and dashes. International characters are
 *  allowed. No more than 64 user labels can be associated with one resource
 *  (System labels are excluded). See https://goo.gl/xmQnxf for more information
 *  and examples of labels. System reserved label keys are prefixed with
 *  `apigeeregistry.googleapis.com/` and cannot be changed.
 */
@property(nonatomic, strong, nullable) GTLRApigeeRegistry_ApiSpec_Labels *labels;

/**
 *  A style (format) descriptor for this spec that is specified as a Media Type
 *  (https://en.wikipedia.org/wiki/Media_type). Possible values include
 *  `application/vnd.apigee.proto`, `application/vnd.apigee.openapi`, and
 *  `application/vnd.apigee.graphql`, with possible suffixes representing
 *  compression types. These hypothetical names are defined in the vendor tree
 *  defined in RFC6838 (https://tools.ietf.org/html/rfc6838) and are not final.
 *  Content types can specify compression. Currently only GZip compression is
 *  supported (indicated with "+gzip").
 */
@property(nonatomic, copy, nullable) NSString *mimeType;

/** Resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Revision creation timestamp; when the represented revision was
 *  created.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *revisionCreateTime;

/**
 *  Output only. Immutable. The revision ID of the spec. A new revision is
 *  committed whenever the spec contents are changed. The format is an
 *  8-character hexadecimal string.
 */
@property(nonatomic, copy, nullable) NSString *revisionId;

/**
 *  Output only. Last update timestamp: when the represented revision was last
 *  modified.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *revisionUpdateTime;

/**
 *  Output only. The size of the spec file in bytes. If the spec is gzipped,
 *  this is the size of the uncompressed spec.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sizeBytes;

/**
 *  The original source URI of the spec (if one exists). This is an external
 *  location that can be used for reference purposes but which may not be
 *  authoritative since this external resource may change after the spec is
 *  retrieved.
 */
@property(nonatomic, copy, nullable) NSString *sourceUri;

@end


/**
 *  Annotations attach non-identifying metadata to resources. Annotation keys
 *  and values are less restricted than those of labels, but should be generally
 *  used for small values of broad interest. Larger, topic- specific metadata
 *  should be stored in Artifacts.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRApigeeRegistry_ApiSpec_Annotations : GTLRObject
@end


/**
 *  Labels attach identifying metadata to resources. Identifying metadata can be
 *  used to filter list operations. Label keys and values can be no longer than
 *  64 characters (Unicode codepoints), can only contain lowercase letters,
 *  numeric characters, underscores and dashes. International characters are
 *  allowed. No more than 64 user labels can be associated with one resource
 *  (System labels are excluded). See https://goo.gl/xmQnxf for more information
 *  and examples of labels. System reserved label keys are prefixed with
 *  `apigeeregistry.googleapis.com/` and cannot be changed.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRApigeeRegistry_ApiSpec_Labels : GTLRObject
@end


/**
 *  Describes a particular version of an API. ApiVersions are what consumers
 *  actually use.
 */
@interface GTLRApigeeRegistry_ApiVersion : GTLRObject

/**
 *  Annotations attach non-identifying metadata to resources. Annotation keys
 *  and values are less restricted than those of labels, but should be generally
 *  used for small values of broad interest. Larger, topic- specific metadata
 *  should be stored in Artifacts.
 */
@property(nonatomic, strong, nullable) GTLRApigeeRegistry_ApiVersion_Annotations *annotations;

/** Output only. Creation timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  A detailed description.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Human-meaningful name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Labels attach identifying metadata to resources. Identifying metadata can be
 *  used to filter list operations. Label keys and values can be no longer than
 *  64 characters (Unicode codepoints), can only contain lowercase letters,
 *  numeric characters, underscores and dashes. International characters are
 *  allowed. No more than 64 user labels can be associated with one resource
 *  (System labels are excluded). See https://goo.gl/xmQnxf for more information
 *  and examples of labels. System reserved label keys are prefixed with
 *  `apigeeregistry.googleapis.com/` and cannot be changed.
 */
@property(nonatomic, strong, nullable) GTLRApigeeRegistry_ApiVersion_Labels *labels;

/** Resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A user-definable description of the lifecycle phase of this API version.
 *  Format: free-form, but we expect single words that describe API maturity,
 *  e.g., "CONCEPT", "DESIGN", "DEVELOPMENT", "STAGING", "PRODUCTION",
 *  "DEPRECATED", "RETIRED".
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. Last update timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Annotations attach non-identifying metadata to resources. Annotation keys
 *  and values are less restricted than those of labels, but should be generally
 *  used for small values of broad interest. Larger, topic- specific metadata
 *  should be stored in Artifacts.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRApigeeRegistry_ApiVersion_Annotations : GTLRObject
@end


/**
 *  Labels attach identifying metadata to resources. Identifying metadata can be
 *  used to filter list operations. Label keys and values can be no longer than
 *  64 characters (Unicode codepoints), can only contain lowercase letters,
 *  numeric characters, underscores and dashes. International characters are
 *  allowed. No more than 64 user labels can be associated with one resource
 *  (System labels are excluded). See https://goo.gl/xmQnxf for more information
 *  and examples of labels. System reserved label keys are prefixed with
 *  `apigeeregistry.googleapis.com/` and cannot be changed.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRApigeeRegistry_ApiVersion_Labels : GTLRObject
@end


/**
 *  Artifacts of resources. Artifacts are unique (single-value) per resource and
 *  are used to store metadata that is too large or numerous to be stored
 *  directly on the resource. Since artifacts are stored separately from parent
 *  resources, they should generally be used for metadata that is needed
 *  infrequently, i.e., not for display in primary views of the resource but
 *  perhaps displayed or downloaded upon request. The `ListArtifacts` method
 *  allows artifacts to be quickly enumerated and checked for presence without
 *  downloading their (potentially-large) contents.
 */
@interface GTLRApigeeRegistry_Artifact : GTLRObject

/**
 *  Input only. The contents of the artifact. Provided by API callers when
 *  artifacts are created or replaced. To access the contents of an artifact,
 *  use GetArtifactContents.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *contents;

/** Output only. Creation timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. A SHA-256 hash of the artifact's contents. If the artifact is
 *  gzipped, this is the hash of the uncompressed artifact.
 *
 *  Remapped to 'hashProperty' to avoid NSObject's 'hash'.
 */
@property(nonatomic, copy, nullable) NSString *hashProperty;

/**
 *  A content type specifier for the artifact. Content type specifiers are Media
 *  Types (https://en.wikipedia.org/wiki/Media_type) with a possible "schema"
 *  parameter that specifies a schema for the stored information. Content types
 *  can specify compression. Currently only GZip compression is supported
 *  (indicated with "+gzip").
 */
@property(nonatomic, copy, nullable) NSString *mimeType;

/** Resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The size of the artifact in bytes. If the artifact is gzipped,
 *  this is the size of the uncompressed artifact.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sizeBytes;

/** Output only. Last update timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRApigeeRegistry_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRApigeeRegistry_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`:
 *  An email address (plus unique identifier) representing a user that has been
 *  recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. * `domain:{domain}`: The G Suite domain (primary) that
 *  represents all the users of that domain. For example, `google.com` or
 *  `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRApigeeRegistry_CancelOperationRequest : GTLRObject
@end


/**
 *  Available configurations to provision an Instance.
 */
@interface GTLRApigeeRegistry_Config : GTLRObject

/**
 *  Required. The Customer Managed Encryption Key (CMEK) used for data
 *  encryption. The CMEK name should follow the format of
 *  `projects/([^/]+)/locations/([^/]+)/keyRings/([^/]+)/cryptoKeys/([^/]+)`,
 *  where the `location` must match InstanceConfig.location.
 */
@property(nonatomic, copy, nullable) NSString *cmekKeyName;

/** Output only. The GCP location where the Instance resides. */
@property(nonatomic, copy, nullable) NSString *location;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRApigeeRegistry_Empty : GTLRObject
@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRApigeeRegistry_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Message that represents an arbitrary HTTP body. It should only be used for
 *  payload formats that can't be represented as JSON, such as raw binary or an
 *  HTML page. This message can be used both in streaming and non-streaming API
 *  methods in the request as well as the response. It can be used as a
 *  top-level request field, which is convenient if one wants to extract
 *  parameters from either the URL or HTTP template into the request fields and
 *  also want access to the raw HTTP body. Example: message GetResourceRequest {
 *  // A unique request id. string request_id = 1; // The raw HTTP body is bound
 *  to this field. google.api.HttpBody http_body = 2; } service ResourceService
 *  { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc
 *  UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); }
 *  Example with streaming methods: service CaldavService { rpc
 *  GetCalendar(stream google.api.HttpBody) returns (stream
 *  google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns
 *  (stream google.api.HttpBody); } Use of this type only changes how the
 *  request and response bodies are handled, all other features will continue to
 *  work unchanged.
 */
@interface GTLRApigeeRegistry_HttpBody : GTLRObject

/**
 *  The HTTP Content-Type header value specifying the content type of the body.
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  The HTTP request/response body as raw binary.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  Application specific response metadata. Must be set in the first response
 *  for streaming APIs.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRApigeeRegistry_HttpBody_Extensions_Item *> *extensions;

@end


/**
 *  GTLRApigeeRegistry_HttpBody_Extensions_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRApigeeRegistry_HttpBody_Extensions_Item : GTLRObject
@end


/**
 *  An Instance represents the instance resources of the Registry. Currently,
 *  only one instance is allowed for each project.
 */
@interface GTLRApigeeRegistry_Instance : GTLRObject

/** Required. Config of the Instance. */
@property(nonatomic, strong, nullable) GTLRApigeeRegistry_Config *config;

/** Output only. Creation timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Format: `projects/ * /locations/ * /instance`. Currently only
 *  `locations/global` is supported.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The current state of the Instance.
 *
 *  Likely values:
 *    @arg @c kGTLRApigeeRegistry_Instance_State_Active The Instance has been
 *        created and is ready for use. (Value: "ACTIVE")
 *    @arg @c kGTLRApigeeRegistry_Instance_State_Creating The Instance is being
 *        created. (Value: "CREATING")
 *    @arg @c kGTLRApigeeRegistry_Instance_State_Deleting The Instance is being
 *        deleted. (Value: "DELETING")
 *    @arg @c kGTLRApigeeRegistry_Instance_State_Failed The Instance encountered
 *        an error during a state change. (Value: "FAILED")
 *    @arg @c kGTLRApigeeRegistry_Instance_State_Inactive The Instance has not
 *        been initialized or has been deleted. (Value: "INACTIVE")
 *    @arg @c kGTLRApigeeRegistry_Instance_State_StateUnspecified The default
 *        value. This value is used if the state is omitted. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRApigeeRegistry_Instance_State_Updating The Instance is being
 *        updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Extra information of Instance.State if the state is `FAILED`.
 */
@property(nonatomic, copy, nullable) NSString *stateMessage;

/** Output only. Last update timestamp. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Response message for ListApiDeploymentRevisionsResponse.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "apiDeployments" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRApigeeRegistry_ListApiDeploymentRevisionsResponse : GTLRCollectionObject

/**
 *  The revisions of the deployment.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRApigeeRegistry_ApiDeployment *> *apiDeployments;

/**
 *  A token that can be sent as `page_token` to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for ListApiDeployments.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "apiDeployments" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRApigeeRegistry_ListApiDeploymentsResponse : GTLRCollectionObject

/**
 *  The deployments from the specified publisher.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRApigeeRegistry_ApiDeployment *> *apiDeployments;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for ListApiSpecRevisionsResponse.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "apiSpecs" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRApigeeRegistry_ListApiSpecRevisionsResponse : GTLRCollectionObject

/**
 *  The revisions of the spec.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRApigeeRegistry_ApiSpec *> *apiSpecs;

/**
 *  A token that can be sent as `page_token` to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for ListApiSpecs.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "apiSpecs" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRApigeeRegistry_ListApiSpecsResponse : GTLRCollectionObject

/**
 *  The specs from the specified publisher.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRApigeeRegistry_ApiSpec *> *apiSpecs;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for ListApis.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "apis" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRApigeeRegistry_ListApisResponse : GTLRCollectionObject

/**
 *  The APIs from the specified publisher.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRApigeeRegistry_Api *> *apis;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for ListApiVersions.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "apiVersions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRApigeeRegistry_ListApiVersionsResponse : GTLRCollectionObject

/**
 *  The versions from the specified publisher.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRApigeeRegistry_ApiVersion *> *apiVersions;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for ListArtifacts.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "artifacts" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRApigeeRegistry_ListArtifactsResponse : GTLRCollectionObject

/**
 *  The artifacts from the specified publisher.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRApigeeRegistry_Artifact *> *artifacts;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRApigeeRegistry_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRApigeeRegistry_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRApigeeRegistry_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRApigeeRegistry_Operation *> *operations;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRApigeeRegistry_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRApigeeRegistry_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRApigeeRegistry_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRApigeeRegistry_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRApigeeRegistry_Location_Metadata : GTLRObject
@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRApigeeRegistry_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRApigeeRegistry_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRApigeeRegistry_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRApigeeRegistry_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRApigeeRegistry_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRApigeeRegistry_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRApigeeRegistry_OperationMetadata : GTLRObject

/** API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Identifies whether the user has requested cancellation of the operation.
 *  Operations that have successfully been cancelled have Operation.error value
 *  with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cancellationRequested;

/** The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/** Server-defined resource path for the target of the operation. */
@property(nonatomic, copy, nullable) NSString *target;

/** Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRApigeeRegistry_Policy : GTLRObject

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRApigeeRegistry_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Request message for RollbackApiDeployment.
 */
@interface GTLRApigeeRegistry_RollbackApiDeploymentRequest : GTLRObject

/**
 *  Required. The revision ID to roll back to. It must be a revision of the same
 *  deployment. Example: `c7cfa2a8`
 */
@property(nonatomic, copy, nullable) NSString *revisionId;

@end


/**
 *  Request message for RollbackApiSpec.
 */
@interface GTLRApigeeRegistry_RollbackApiSpecRequest : GTLRObject

/**
 *  Required. The revision ID to roll back to. It must be a revision of the same
 *  spec. Example: `c7cfa2a8`
 */
@property(nonatomic, copy, nullable) NSString *revisionId;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRApigeeRegistry_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRApigeeRegistry_Policy *policy;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRApigeeRegistry_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRApigeeRegistry_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRApigeeRegistry_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRApigeeRegistry_Status_Details_Item : GTLRObject
@end


/**
 *  Request message for TagApiDeploymentRevision.
 */
@interface GTLRApigeeRegistry_TagApiDeploymentRevisionRequest : GTLRObject

/**
 *  Required. The tag to apply. The tag should be at most 40 characters, and
 *  match `a-z{3,39}`.
 */
@property(nonatomic, copy, nullable) NSString *tag;

@end


/**
 *  Request message for TagApiSpecRevision.
 */
@interface GTLRApigeeRegistry_TagApiSpecRevisionRequest : GTLRObject

/**
 *  Required. The tag to apply. The tag should be at most 40 characters, and
 *  match `a-z{3,39}`.
 */
@property(nonatomic, copy, nullable) NSString *tag;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRApigeeRegistry_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRApigeeRegistry_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
