// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud SQL Admin API (sqladmin/v1)
// Description:
//   API for Cloud SQL database instance management
// Documentation:
//   https://developers.google.com/cloud-sql/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRSQLAdmin_AclEntry;
@class GTLRSQLAdmin_AcquireSsrsLeaseContext;
@class GTLRSQLAdmin_AdvancedMachineFeatures;
@class GTLRSQLAdmin_ApiWarning;
@class GTLRSQLAdmin_AvailableDatabaseVersion;
@class GTLRSQLAdmin_BackupConfiguration;
@class GTLRSQLAdmin_BackupContext;
@class GTLRSQLAdmin_BackupReencryptionConfig;
@class GTLRSQLAdmin_BackupRetentionSettings;
@class GTLRSQLAdmin_BackupRun;
@class GTLRSQLAdmin_BinLogCoordinates;
@class GTLRSQLAdmin_CloneContext;
@class GTLRSQLAdmin_Database;
@class GTLRSQLAdmin_DatabaseFlags;
@class GTLRSQLAdmin_DatabaseInstance;
@class GTLRSQLAdmin_DatabaseInstance_FailoverReplica;
@class GTLRSQLAdmin_DataCacheConfig;
@class GTLRSQLAdmin_DemoteContext;
@class GTLRSQLAdmin_DemoteMasterConfiguration;
@class GTLRSQLAdmin_DemoteMasterContext;
@class GTLRSQLAdmin_DemoteMasterMySqlReplicaConfiguration;
@class GTLRSQLAdmin_DenyMaintenancePeriod;
@class GTLRSQLAdmin_DiskEncryptionConfiguration;
@class GTLRSQLAdmin_DiskEncryptionStatus;
@class GTLRSQLAdmin_ExportContext;
@class GTLRSQLAdmin_ExportContext_BakExportOptions;
@class GTLRSQLAdmin_ExportContext_CsvExportOptions;
@class GTLRSQLAdmin_ExportContext_SqlExportOptions;
@class GTLRSQLAdmin_ExportContext_SqlExportOptions_MysqlExportOptions;
@class GTLRSQLAdmin_ExportContext_SqlExportOptions_PostgresExportOptions;
@class GTLRSQLAdmin_FailoverContext;
@class GTLRSQLAdmin_Flag;
@class GTLRSQLAdmin_GeminiInstanceConfig;
@class GTLRSQLAdmin_ImportContext;
@class GTLRSQLAdmin_ImportContext_BakImportOptions;
@class GTLRSQLAdmin_ImportContext_BakImportOptions_EncryptionOptions;
@class GTLRSQLAdmin_ImportContext_CsvImportOptions;
@class GTLRSQLAdmin_ImportContext_SqlImportOptions;
@class GTLRSQLAdmin_ImportContext_SqlImportOptions_PostgresImportOptions;
@class GTLRSQLAdmin_InsightsConfig;
@class GTLRSQLAdmin_InstanceReference;
@class GTLRSQLAdmin_IpConfiguration;
@class GTLRSQLAdmin_IpMapping;
@class GTLRSQLAdmin_LocationPreference;
@class GTLRSQLAdmin_MaintenanceWindow;
@class GTLRSQLAdmin_MySqlReplicaConfiguration;
@class GTLRSQLAdmin_MySqlSyncConfig;
@class GTLRSQLAdmin_OnPremisesConfiguration;
@class GTLRSQLAdmin_Operation;
@class GTLRSQLAdmin_OperationError;
@class GTLRSQLAdmin_OperationErrors;
@class GTLRSQLAdmin_PasswordStatus;
@class GTLRSQLAdmin_PasswordValidationPolicy;
@class GTLRSQLAdmin_PscConfig;
@class GTLRSQLAdmin_ReplicaConfiguration;
@class GTLRSQLAdmin_ReplicationCluster;
@class GTLRSQLAdmin_Reschedule;
@class GTLRSQLAdmin_RestoreBackupContext;
@class GTLRSQLAdmin_RotateServerCaContext;
@class GTLRSQLAdmin_RotateServerCertificateContext;
@class GTLRSQLAdmin_Settings;
@class GTLRSQLAdmin_Settings_UserLabels;
@class GTLRSQLAdmin_SqlActiveDirectoryConfig;
@class GTLRSQLAdmin_SqlExternalSyncSettingError;
@class GTLRSQLAdmin_SqlOutOfDiskReport;
@class GTLRSQLAdmin_SqlScheduledMaintenance;
@class GTLRSQLAdmin_SqlServerAuditConfig;
@class GTLRSQLAdmin_SqlServerDatabaseDetails;
@class GTLRSQLAdmin_SqlServerUserDetails;
@class GTLRSQLAdmin_SslCert;
@class GTLRSQLAdmin_SslCertDetail;
@class GTLRSQLAdmin_SyncFlags;
@class GTLRSQLAdmin_Tier;
@class GTLRSQLAdmin_TruncateLogContext;
@class GTLRSQLAdmin_User;
@class GTLRSQLAdmin_UserPasswordValidationPolicy;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_ApiWarning.code

/**
 *  Warning when user tries to create/update a user with credentials that have
 *  previously been compromised by a public data breach.
 *
 *  Value: "COMPROMISED_CREDENTIALS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ApiWarning_Code_CompromisedCredentials;
/**
 *  Warning when the operation succeeds but some non-critical workflow state
 *  failed.
 *
 *  Value: "INTERNAL_STATE_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ApiWarning_Code_InternalStateFailure;
/**
 *  Warning when user provided maxResults parameter exceeds the limit. The
 *  returned result set may be incomplete.
 *
 *  Value: "MAX_RESULTS_EXCEEDS_LIMIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ApiWarning_Code_MaxResultsExceedsLimit;
/**
 *  Warning when one or more regions are not reachable. The returned result set
 *  may be incomplete.
 *
 *  Value: "REGION_UNREACHABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ApiWarning_Code_RegionUnreachable;
/**
 *  An unknown or unset warning type from Cloud SQL API.
 *
 *  Value: "SQL_API_WARNING_CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ApiWarning_Code_SqlApiWarningCodeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_BackupConfiguration.transactionalLogStorageState

/**
 *  The transaction logs used for PITR for the instance are stored in Cloud
 *  Storage. Only applicable to MySQL and PostgreSQL.
 *
 *  Value: "CLOUD_STORAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupConfiguration_TransactionalLogStorageState_CloudStorage;
/**
 *  The transaction logs used for PITR for the instance are stored on a data
 *  disk.
 *
 *  Value: "DISK"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupConfiguration_TransactionalLogStorageState_Disk;
/**
 *  The transaction logs used for PITR for the instance are now stored in Cloud
 *  Storage. Previously, they were stored on a data disk. Only applicable to
 *  MySQL.
 *
 *  Value: "SWITCHED_TO_CLOUD_STORAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupConfiguration_TransactionalLogStorageState_SwitchedToCloudStorage;
/**
 *  The transaction logs used for PITR for the instance are switching from being
 *  stored on a data disk to being stored in Cloud Storage. Only applicable to
 *  MySQL.
 *
 *  Value: "SWITCHING_TO_CLOUD_STORAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupConfiguration_TransactionalLogStorageState_SwitchingToCloudStorage;
/**
 *  Unspecified.
 *
 *  Value: "TRANSACTIONAL_LOG_STORAGE_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupConfiguration_TransactionalLogStorageState_TransactionalLogStorageStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_BackupReencryptionConfig.backupType

/**
 *  Reencrypt automatic backups
 *
 *  Value: "AUTOMATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupReencryptionConfig_BackupType_Automated;
/**
 *  Unknown backup type, will be defaulted to AUTOMATIC backup type
 *
 *  Value: "BACKUP_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupReencryptionConfig_BackupType_BackupTypeUnspecified;
/**
 *  Reencrypt on-demand backups
 *
 *  Value: "ON_DEMAND"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupReencryptionConfig_BackupType_OnDemand;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_BackupRetentionSettings.retentionUnit

/**
 *  Retention will be by count, eg. "retain the most recent 7 backups".
 *
 *  Value: "COUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRetentionSettings_RetentionUnit_Count;
/**
 *  Backup retention unit is unspecified, will be treated as COUNT.
 *
 *  Value: "RETENTION_UNIT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRetentionSettings_RetentionUnit_RetentionUnitUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_BackupRun.backupKind

/**
 *  Physical backups
 *
 *  Value: "PHYSICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRun_BackupKind_Physical;
/**
 *  The snapshot based backups
 *
 *  Value: "SNAPSHOT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRun_BackupKind_Snapshot;
/**
 *  This is an unknown BackupKind.
 *
 *  Value: "SQL_BACKUP_KIND_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRun_BackupKind_SqlBackupKindUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_BackupRun.status

/**
 *  The backup has been deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRun_Status_Deleted;
/**
 *  The backup deletion failed.
 *
 *  Value: "DELETION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRun_Status_DeletionFailed;
/**
 *  The backup is about to be deleted.
 *
 *  Value: "DELETION_PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRun_Status_DeletionPending;
/**
 *  The backup operation was enqueued.
 *
 *  Value: "ENQUEUED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRun_Status_Enqueued;
/**
 *  The backup failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRun_Status_Failed;
/**
 *  The backup is overdue across a given backup window. Indicates a problem.
 *  Example: Long-running operation in progress during the whole window.
 *
 *  Value: "OVERDUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRun_Status_Overdue;
/**
 *  The backup is in progress.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRun_Status_Running;
/**
 *  The backup was skipped (without problems) for a given backup window.
 *  Example: Instance was idle.
 *
 *  Value: "SKIPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRun_Status_Skipped;
/**
 *  The status of the run is unknown.
 *
 *  Value: "SQL_BACKUP_RUN_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRun_Status_SqlBackupRunStatusUnspecified;
/**
 *  The backup was successful.
 *
 *  Value: "SUCCESSFUL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRun_Status_Successful;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_BackupRun.type

/**
 *  The backup schedule automatically triggers a backup.
 *
 *  Value: "AUTOMATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRun_Type_Automated;
/**
 *  The user manually triggers a backup.
 *
 *  Value: "ON_DEMAND"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRun_Type_OnDemand;
/**
 *  This is an unknown BackupRun type.
 *
 *  Value: "SQL_BACKUP_RUN_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_BackupRun_Type_SqlBackupRunTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_ConnectSettings.backendType

/**
 *  On premises instance.
 *
 *  Value: "EXTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_BackendType_External;
/**
 *  V1 speckle instance.
 *
 *  Value: "FIRST_GEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_BackendType_FirstGen GTLR_DEPRECATED;
/**
 *  V2 speckle instance.
 *
 *  Value: "SECOND_GEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_BackendType_SecondGen;
/**
 *  This is an unknown backend type for instance.
 *
 *  Value: "SQL_BACKEND_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_BackendType_SqlBackendTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_ConnectSettings.databaseVersion

/**
 *  The database version is MySQL 5.1.
 *
 *  Value: "MYSQL_5_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql51 GTLR_DEPRECATED;
/**
 *  The database version is MySQL 5.5.
 *
 *  Value: "MYSQL_5_5"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql55 GTLR_DEPRECATED;
/**
 *  The database version is MySQL 5.6.
 *
 *  Value: "MYSQL_5_6"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql56;
/**
 *  The database version is MySQL 5.7.
 *
 *  Value: "MYSQL_5_7"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql57;
/**
 *  The database version is MySQL 8.
 *
 *  Value: "MYSQL_8_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql80;
/**
 *  The database major version is MySQL 8.0 and the minor version is 18.
 *
 *  Value: "MYSQL_8_0_18"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8018;
/**
 *  The database major version is MySQL 8.0 and the minor version is 26.
 *
 *  Value: "MYSQL_8_0_26"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8026;
/**
 *  The database major version is MySQL 8.0 and the minor version is 27.
 *
 *  Value: "MYSQL_8_0_27"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8027;
/**
 *  The database major version is MySQL 8.0 and the minor version is 28.
 *
 *  Value: "MYSQL_8_0_28"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8028;
/**
 *  The database major version is MySQL 8.0 and the minor version is 29.
 *
 *  Value: "MYSQL_8_0_29"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8029 GTLR_DEPRECATED;
/**
 *  The database major version is MySQL 8.0 and the minor version is 30.
 *
 *  Value: "MYSQL_8_0_30"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8030;
/**
 *  The database major version is MySQL 8.0 and the minor version is 31.
 *
 *  Value: "MYSQL_8_0_31"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8031;
/**
 *  The database major version is MySQL 8.0 and the minor version is 32.
 *
 *  Value: "MYSQL_8_0_32"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8032;
/**
 *  The database major version is MySQL 8.0 and the minor version is 33.
 *
 *  Value: "MYSQL_8_0_33"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8033;
/**
 *  The database major version is MySQL 8.0 and the minor version is 34.
 *
 *  Value: "MYSQL_8_0_34"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8034;
/**
 *  The database major version is MySQL 8.0 and the minor version is 35.
 *
 *  Value: "MYSQL_8_0_35"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8035;
/**
 *  The database major version is MySQL 8.0 and the minor version is 36.
 *
 *  Value: "MYSQL_8_0_36"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8036;
/**
 *  The database major version is MySQL 8.0 and the minor version is 37.
 *
 *  Value: "MYSQL_8_0_37"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8037;
/**
 *  The database major version is MySQL 8.0 and the minor version is 38.
 *
 *  Value: "MYSQL_8_0_38"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8038;
/**
 *  The database major version is MySQL 8.0 and the minor version is 39.
 *
 *  Value: "MYSQL_8_0_39"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8039;
/**
 *  The database major version is MySQL 8.0 and the minor version is 40.
 *
 *  Value: "MYSQL_8_0_40"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8040;
/**
 *  The database version is MySQL 8.4.
 *
 *  Value: "MYSQL_8_4"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql84;
/**
 *  The database version is PostgreSQL 10.
 *
 *  Value: "POSTGRES_10"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres10;
/**
 *  The database version is PostgreSQL 11.
 *
 *  Value: "POSTGRES_11"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres11;
/**
 *  The database version is PostgreSQL 12.
 *
 *  Value: "POSTGRES_12"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres12;
/**
 *  The database version is PostgreSQL 13.
 *
 *  Value: "POSTGRES_13"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres13;
/**
 *  The database version is PostgreSQL 14.
 *
 *  Value: "POSTGRES_14"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres14;
/**
 *  The database version is PostgreSQL 15.
 *
 *  Value: "POSTGRES_15"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres15;
/**
 *  The database version is PostgreSQL 16.
 *
 *  Value: "POSTGRES_16"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres16;
/**
 *  The database version is PostgreSQL 17.
 *
 *  Value: "POSTGRES_17"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres17;
/**
 *  The database version is PostgreSQL 9.6.
 *
 *  Value: "POSTGRES_9_6"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres96;
/**
 *  This is an unknown database version.
 *
 *  Value: "SQL_DATABASE_VERSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_SqlDatabaseVersionUnspecified;
/**
 *  The database version is SQL Server 2017 Enterprise.
 *
 *  Value: "SQLSERVER_2017_ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2017Enterprise;
/**
 *  The database version is SQL Server 2017 Express.
 *
 *  Value: "SQLSERVER_2017_EXPRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2017Express;
/**
 *  The database version is SQL Server 2017 Standard.
 *
 *  Value: "SQLSERVER_2017_STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2017Standard;
/**
 *  The database version is SQL Server 2017 Web.
 *
 *  Value: "SQLSERVER_2017_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2017Web;
/**
 *  The database version is SQL Server 2019 Enterprise.
 *
 *  Value: "SQLSERVER_2019_ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2019Enterprise;
/**
 *  The database version is SQL Server 2019 Express.
 *
 *  Value: "SQLSERVER_2019_EXPRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2019Express;
/**
 *  The database version is SQL Server 2019 Standard.
 *
 *  Value: "SQLSERVER_2019_STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2019Standard;
/**
 *  The database version is SQL Server 2019 Web.
 *
 *  Value: "SQLSERVER_2019_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2019Web;
/**
 *  The database version is SQL Server 2022 Enterprise.
 *
 *  Value: "SQLSERVER_2022_ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2022Enterprise;
/**
 *  The database version is SQL Server 2022 Express.
 *
 *  Value: "SQLSERVER_2022_EXPRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2022Express;
/**
 *  The database version is SQL Server 2022 Standard.
 *
 *  Value: "SQLSERVER_2022_STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2022Standard;
/**
 *  The database version is SQL Server 2022 Web.
 *
 *  Value: "SQLSERVER_2022_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2022Web;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_ConnectSettings.serverCaMode

/**
 *  CA mode is unknown.
 *
 *  Value: "CA_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_ServerCaMode_CaModeUnspecified;
/**
 *  Google-managed regional CA part of root CA hierarchy hosted on Google
 *  Cloud's Certificate Authority Service (CAS).
 *
 *  Value: "GOOGLE_MANAGED_CAS_CA"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_ServerCaMode_GoogleManagedCasCa;
/**
 *  Google-managed self-signed internal CA.
 *
 *  Value: "GOOGLE_MANAGED_INTERNAL_CA"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ConnectSettings_ServerCaMode_GoogleManagedInternalCa;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_DatabaseInstance.backendType

/**
 *  On premises instance.
 *
 *  Value: "EXTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_BackendType_External;
/**
 *  V1 speckle instance.
 *
 *  Value: "FIRST_GEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_BackendType_FirstGen GTLR_DEPRECATED;
/**
 *  V2 speckle instance.
 *
 *  Value: "SECOND_GEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_BackendType_SecondGen;
/**
 *  This is an unknown backend type for instance.
 *
 *  Value: "SQL_BACKEND_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_BackendType_SqlBackendTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_DatabaseInstance.databaseVersion

/**
 *  The database version is MySQL 5.1.
 *
 *  Value: "MYSQL_5_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql51 GTLR_DEPRECATED;
/**
 *  The database version is MySQL 5.5.
 *
 *  Value: "MYSQL_5_5"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql55 GTLR_DEPRECATED;
/**
 *  The database version is MySQL 5.6.
 *
 *  Value: "MYSQL_5_6"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql56;
/**
 *  The database version is MySQL 5.7.
 *
 *  Value: "MYSQL_5_7"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql57;
/**
 *  The database version is MySQL 8.
 *
 *  Value: "MYSQL_8_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql80;
/**
 *  The database major version is MySQL 8.0 and the minor version is 18.
 *
 *  Value: "MYSQL_8_0_18"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8018;
/**
 *  The database major version is MySQL 8.0 and the minor version is 26.
 *
 *  Value: "MYSQL_8_0_26"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8026;
/**
 *  The database major version is MySQL 8.0 and the minor version is 27.
 *
 *  Value: "MYSQL_8_0_27"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8027;
/**
 *  The database major version is MySQL 8.0 and the minor version is 28.
 *
 *  Value: "MYSQL_8_0_28"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8028;
/**
 *  The database major version is MySQL 8.0 and the minor version is 29.
 *
 *  Value: "MYSQL_8_0_29"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8029 GTLR_DEPRECATED;
/**
 *  The database major version is MySQL 8.0 and the minor version is 30.
 *
 *  Value: "MYSQL_8_0_30"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8030;
/**
 *  The database major version is MySQL 8.0 and the minor version is 31.
 *
 *  Value: "MYSQL_8_0_31"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8031;
/**
 *  The database major version is MySQL 8.0 and the minor version is 32.
 *
 *  Value: "MYSQL_8_0_32"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8032;
/**
 *  The database major version is MySQL 8.0 and the minor version is 33.
 *
 *  Value: "MYSQL_8_0_33"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8033;
/**
 *  The database major version is MySQL 8.0 and the minor version is 34.
 *
 *  Value: "MYSQL_8_0_34"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8034;
/**
 *  The database major version is MySQL 8.0 and the minor version is 35.
 *
 *  Value: "MYSQL_8_0_35"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8035;
/**
 *  The database major version is MySQL 8.0 and the minor version is 36.
 *
 *  Value: "MYSQL_8_0_36"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8036;
/**
 *  The database major version is MySQL 8.0 and the minor version is 37.
 *
 *  Value: "MYSQL_8_0_37"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8037;
/**
 *  The database major version is MySQL 8.0 and the minor version is 38.
 *
 *  Value: "MYSQL_8_0_38"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8038;
/**
 *  The database major version is MySQL 8.0 and the minor version is 39.
 *
 *  Value: "MYSQL_8_0_39"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8039;
/**
 *  The database major version is MySQL 8.0 and the minor version is 40.
 *
 *  Value: "MYSQL_8_0_40"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8040;
/**
 *  The database version is MySQL 8.4.
 *
 *  Value: "MYSQL_8_4"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql84;
/**
 *  The database version is PostgreSQL 10.
 *
 *  Value: "POSTGRES_10"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres10;
/**
 *  The database version is PostgreSQL 11.
 *
 *  Value: "POSTGRES_11"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres11;
/**
 *  The database version is PostgreSQL 12.
 *
 *  Value: "POSTGRES_12"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres12;
/**
 *  The database version is PostgreSQL 13.
 *
 *  Value: "POSTGRES_13"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres13;
/**
 *  The database version is PostgreSQL 14.
 *
 *  Value: "POSTGRES_14"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres14;
/**
 *  The database version is PostgreSQL 15.
 *
 *  Value: "POSTGRES_15"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres15;
/**
 *  The database version is PostgreSQL 16.
 *
 *  Value: "POSTGRES_16"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres16;
/**
 *  The database version is PostgreSQL 17.
 *
 *  Value: "POSTGRES_17"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres17;
/**
 *  The database version is PostgreSQL 9.6.
 *
 *  Value: "POSTGRES_9_6"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres96;
/**
 *  This is an unknown database version.
 *
 *  Value: "SQL_DATABASE_VERSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_SqlDatabaseVersionUnspecified;
/**
 *  The database version is SQL Server 2017 Enterprise.
 *
 *  Value: "SQLSERVER_2017_ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2017Enterprise;
/**
 *  The database version is SQL Server 2017 Express.
 *
 *  Value: "SQLSERVER_2017_EXPRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2017Express;
/**
 *  The database version is SQL Server 2017 Standard.
 *
 *  Value: "SQLSERVER_2017_STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2017Standard;
/**
 *  The database version is SQL Server 2017 Web.
 *
 *  Value: "SQLSERVER_2017_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2017Web;
/**
 *  The database version is SQL Server 2019 Enterprise.
 *
 *  Value: "SQLSERVER_2019_ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2019Enterprise;
/**
 *  The database version is SQL Server 2019 Express.
 *
 *  Value: "SQLSERVER_2019_EXPRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2019Express;
/**
 *  The database version is SQL Server 2019 Standard.
 *
 *  Value: "SQLSERVER_2019_STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2019Standard;
/**
 *  The database version is SQL Server 2019 Web.
 *
 *  Value: "SQLSERVER_2019_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2019Web;
/**
 *  The database version is SQL Server 2022 Enterprise.
 *
 *  Value: "SQLSERVER_2022_ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2022Enterprise;
/**
 *  The database version is SQL Server 2022 Express.
 *
 *  Value: "SQLSERVER_2022_EXPRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2022Express;
/**
 *  The database version is SQL Server 2022 Standard.
 *
 *  Value: "SQLSERVER_2022_STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2022Standard;
/**
 *  The database version is SQL Server 2022 Web.
 *
 *  Value: "SQLSERVER_2022_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2022Web;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_DatabaseInstance.instanceType

/**
 *  A regular Cloud SQL instance that is not replicating from a primary
 *  instance.
 *
 *  Value: "CLOUD_SQL_INSTANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_InstanceType_CloudSqlInstance;
/**
 *  An instance running on the customer's premises that is not managed by Cloud
 *  SQL.
 *
 *  Value: "ON_PREMISES_INSTANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_InstanceType_OnPremisesInstance;
/**
 *  A Cloud SQL instance acting as a read-replica.
 *
 *  Value: "READ_REPLICA_INSTANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_InstanceType_ReadReplicaInstance;
/**
 *  This is an unknown Cloud SQL instance type.
 *
 *  Value: "SQL_INSTANCE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_InstanceType_SqlInstanceTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_DatabaseInstance.sqlNetworkArchitecture

/**
 *  The instance uses the new network architecture.
 *
 *  Value: "NEW_NETWORK_ARCHITECTURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_SqlNetworkArchitecture_NewNetworkArchitecture;
/**
 *  The instance uses the old network architecture.
 *
 *  Value: "OLD_NETWORK_ARCHITECTURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_SqlNetworkArchitecture_OldNetworkArchitecture;
/** Value: "SQL_NETWORK_ARCHITECTURE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_SqlNetworkArchitecture_SqlNetworkArchitectureUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_DatabaseInstance.state

/**
 *  The creation of the instance failed or a fatal error occurred during
 *  maintenance.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_State_Failed;
/**
 *  The instance is down for maintenance.
 *
 *  Value: "MAINTENANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_State_Maintenance;
/**
 *  Deprecated
 *
 *  Value: "ONLINE_MAINTENANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_State_OnlineMaintenance GTLR_DEPRECATED;
/**
 *  The instance is being created.
 *
 *  Value: "PENDING_CREATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_State_PendingCreate;
/**
 *  The instance is being deleted.
 *
 *  Value: "PENDING_DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_State_PendingDelete;
/**
 *  The instance is running, or has been stopped by owner.
 *
 *  Value: "RUNNABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_State_Runnable;
/**
 *  The state of the instance is unknown.
 *
 *  Value: "SQL_INSTANCE_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_State_SqlInstanceStateUnspecified;
/**
 *  The instance is not available, for example due to problems with billing.
 *
 *  Value: "SUSPENDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_State_Suspended;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_DatabaseInstance.suspensionReason

/**
 *  The instance is suspended due to billing issues (for example:, GCP account
 *  issue)
 *
 *  Value: "BILLING_ISSUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_SuspensionReason_BillingIssue;
/**
 *  The KMS key used by the instance is either revoked or denied access to
 *
 *  Value: "KMS_KEY_ISSUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_SuspensionReason_KmsKeyIssue;
/**
 *  The instance is suspended due to illegal content (for example:, child
 *  pornography, copyrighted material, etc.).
 *
 *  Value: "LEGAL_ISSUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_SuspensionReason_LegalIssue;
/**
 *  The instance is causing operational issues (for example:, causing the
 *  database to crash).
 *
 *  Value: "OPERATIONAL_ISSUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_SuspensionReason_OperationalIssue;
/**
 *  This is an unknown suspension reason.
 *
 *  Value: "SQL_SUSPENSION_REASON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_DatabaseInstance_SuspensionReason_SqlSuspensionReasonUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_ExportContext.fileType

/** Value: "BAK" */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ExportContext_FileType_Bak;
/**
 *  File in CSV format.
 *
 *  Value: "CSV"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ExportContext_FileType_Csv;
/**
 *  File containing SQL statements.
 *
 *  Value: "SQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ExportContext_FileType_Sql;
/**
 *  Unknown file type.
 *
 *  Value: "SQL_FILE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ExportContext_FileType_SqlFileTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_ExportContext_BakExportOptions.bakType

/**
 *  Default type.
 *
 *  Value: "BAK_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ExportContext_BakExportOptions_BakType_BakTypeUnspecified;
/**
 *  Differential backup.
 *
 *  Value: "DIFF"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ExportContext_BakExportOptions_BakType_Diff;
/**
 *  Full backup.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ExportContext_BakExportOptions_BakType_Full;
/**
 *  Transaction Log backup
 *
 *  Value: "TLOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ExportContext_BakExportOptions_BakType_Tlog;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_Flag.appliesTo

/**
 *  The database version is MySQL 5.1.
 *
 *  Value: "MYSQL_5_1"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql51 GTLR_DEPRECATED;
/**
 *  The database version is MySQL 5.5.
 *
 *  Value: "MYSQL_5_5"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql55 GTLR_DEPRECATED;
/**
 *  The database version is MySQL 5.6.
 *
 *  Value: "MYSQL_5_6"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql56;
/**
 *  The database version is MySQL 5.7.
 *
 *  Value: "MYSQL_5_7"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql57;
/**
 *  The database version is MySQL 8.
 *
 *  Value: "MYSQL_8_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql80;
/**
 *  The database major version is MySQL 8.0 and the minor version is 18.
 *
 *  Value: "MYSQL_8_0_18"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8018;
/**
 *  The database major version is MySQL 8.0 and the minor version is 26.
 *
 *  Value: "MYSQL_8_0_26"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8026;
/**
 *  The database major version is MySQL 8.0 and the minor version is 27.
 *
 *  Value: "MYSQL_8_0_27"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8027;
/**
 *  The database major version is MySQL 8.0 and the minor version is 28.
 *
 *  Value: "MYSQL_8_0_28"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8028;
/**
 *  The database major version is MySQL 8.0 and the minor version is 29.
 *
 *  Value: "MYSQL_8_0_29"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8029 GTLR_DEPRECATED;
/**
 *  The database major version is MySQL 8.0 and the minor version is 30.
 *
 *  Value: "MYSQL_8_0_30"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8030;
/**
 *  The database major version is MySQL 8.0 and the minor version is 31.
 *
 *  Value: "MYSQL_8_0_31"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8031;
/**
 *  The database major version is MySQL 8.0 and the minor version is 32.
 *
 *  Value: "MYSQL_8_0_32"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8032;
/**
 *  The database major version is MySQL 8.0 and the minor version is 33.
 *
 *  Value: "MYSQL_8_0_33"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8033;
/**
 *  The database major version is MySQL 8.0 and the minor version is 34.
 *
 *  Value: "MYSQL_8_0_34"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8034;
/**
 *  The database major version is MySQL 8.0 and the minor version is 35.
 *
 *  Value: "MYSQL_8_0_35"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8035;
/**
 *  The database major version is MySQL 8.0 and the minor version is 36.
 *
 *  Value: "MYSQL_8_0_36"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8036;
/**
 *  The database major version is MySQL 8.0 and the minor version is 37.
 *
 *  Value: "MYSQL_8_0_37"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8037;
/**
 *  The database major version is MySQL 8.0 and the minor version is 38.
 *
 *  Value: "MYSQL_8_0_38"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8038;
/**
 *  The database major version is MySQL 8.0 and the minor version is 39.
 *
 *  Value: "MYSQL_8_0_39"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8039;
/**
 *  The database major version is MySQL 8.0 and the minor version is 40.
 *
 *  Value: "MYSQL_8_0_40"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8040;
/**
 *  The database version is MySQL 8.4.
 *
 *  Value: "MYSQL_8_4"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql84;
/**
 *  The database version is PostgreSQL 10.
 *
 *  Value: "POSTGRES_10"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Postgres10;
/**
 *  The database version is PostgreSQL 11.
 *
 *  Value: "POSTGRES_11"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Postgres11;
/**
 *  The database version is PostgreSQL 12.
 *
 *  Value: "POSTGRES_12"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Postgres12;
/**
 *  The database version is PostgreSQL 13.
 *
 *  Value: "POSTGRES_13"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Postgres13;
/**
 *  The database version is PostgreSQL 14.
 *
 *  Value: "POSTGRES_14"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Postgres14;
/**
 *  The database version is PostgreSQL 15.
 *
 *  Value: "POSTGRES_15"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Postgres15;
/**
 *  The database version is PostgreSQL 16.
 *
 *  Value: "POSTGRES_16"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Postgres16;
/**
 *  The database version is PostgreSQL 17.
 *
 *  Value: "POSTGRES_17"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Postgres17;
/**
 *  The database version is PostgreSQL 9.6.
 *
 *  Value: "POSTGRES_9_6"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Postgres96;
/**
 *  This is an unknown database version.
 *
 *  Value: "SQL_DATABASE_VERSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_SqlDatabaseVersionUnspecified;
/**
 *  The database version is SQL Server 2017 Enterprise.
 *
 *  Value: "SQLSERVER_2017_ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2017Enterprise;
/**
 *  The database version is SQL Server 2017 Express.
 *
 *  Value: "SQLSERVER_2017_EXPRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2017Express;
/**
 *  The database version is SQL Server 2017 Standard.
 *
 *  Value: "SQLSERVER_2017_STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2017Standard;
/**
 *  The database version is SQL Server 2017 Web.
 *
 *  Value: "SQLSERVER_2017_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2017Web;
/**
 *  The database version is SQL Server 2019 Enterprise.
 *
 *  Value: "SQLSERVER_2019_ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2019Enterprise;
/**
 *  The database version is SQL Server 2019 Express.
 *
 *  Value: "SQLSERVER_2019_EXPRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2019Express;
/**
 *  The database version is SQL Server 2019 Standard.
 *
 *  Value: "SQLSERVER_2019_STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2019Standard;
/**
 *  The database version is SQL Server 2019 Web.
 *
 *  Value: "SQLSERVER_2019_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2019Web;
/**
 *  The database version is SQL Server 2022 Enterprise.
 *
 *  Value: "SQLSERVER_2022_ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2022Enterprise;
/**
 *  The database version is SQL Server 2022 Express.
 *
 *  Value: "SQLSERVER_2022_EXPRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2022Express;
/**
 *  The database version is SQL Server 2022 Standard.
 *
 *  Value: "SQLSERVER_2022_STANDARD"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2022Standard;
/**
 *  The database version is SQL Server 2022 Web.
 *
 *  Value: "SQLSERVER_2022_WEB"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2022Web;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_Flag.type

/**
 *  Boolean type flag.
 *
 *  Value: "BOOLEAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_Type_Boolean;
/**
 *  Float type flag.
 *
 *  Value: "FLOAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_Type_Float;
/**
 *  Integer type flag.
 *
 *  Value: "INTEGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_Type_Integer;
/**
 *  Type introduced specially for MySQL TimeZone offset. Accept a string value
 *  with the format [-12:59, 13:00].
 *
 *  Value: "MYSQL_TIMEZONE_OFFSET"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_Type_MysqlTimezoneOffset;
/**
 *  Flag type used for a server startup option.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_Type_None;
/**
 *  Comma-separated list of the strings in a SqlFlagType enum.
 *
 *  Value: "REPEATED_STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_Type_RepeatedString;
/**
 *  This is an unknown flag type.
 *
 *  Value: "SQL_FLAG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_Type_SqlFlagTypeUnspecified;
/**
 *  String type flag.
 *
 *  Value: "STRING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Flag_Type_String;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_ImportContext.fileType

/** Value: "BAK" */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ImportContext_FileType_Bak;
/**
 *  File in CSV format.
 *
 *  Value: "CSV"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ImportContext_FileType_Csv;
/**
 *  File containing SQL statements.
 *
 *  Value: "SQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ImportContext_FileType_Sql;
/**
 *  Unknown file type.
 *
 *  Value: "SQL_FILE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ImportContext_FileType_SqlFileTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_ImportContext_BakImportOptions.bakType

/**
 *  Default type.
 *
 *  Value: "BAK_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ImportContext_BakImportOptions_BakType_BakTypeUnspecified;
/**
 *  Differential backup.
 *
 *  Value: "DIFF"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ImportContext_BakImportOptions_BakType_Diff;
/**
 *  Full backup.
 *
 *  Value: "FULL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ImportContext_BakImportOptions_BakType_Full;
/**
 *  Transaction Log backup
 *
 *  Value: "TLOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_ImportContext_BakImportOptions_BakType_Tlog;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_IpConfiguration.serverCaMode

/**
 *  CA mode is unknown.
 *
 *  Value: "CA_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_IpConfiguration_ServerCaMode_CaModeUnspecified;
/**
 *  Google-managed regional CA part of root CA hierarchy hosted on Google
 *  Cloud's Certificate Authority Service (CAS).
 *
 *  Value: "GOOGLE_MANAGED_CAS_CA"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_IpConfiguration_ServerCaMode_GoogleManagedCasCa;
/**
 *  Google-managed self-signed internal CA.
 *
 *  Value: "GOOGLE_MANAGED_INTERNAL_CA"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_IpConfiguration_ServerCaMode_GoogleManagedInternalCa;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_IpConfiguration.sslMode

/**
 *  Allow non-SSL/non-TLS and SSL/TLS connections. For SSL connections to MySQL
 *  and PostgreSQL, the client certificate isn't verified. When this value is
 *  used, the legacy `require_ssl` flag must be false or cleared to avoid a
 *  conflict between the values of the two flags.
 *
 *  Value: "ALLOW_UNENCRYPTED_AND_ENCRYPTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_IpConfiguration_SslMode_AllowUnencryptedAndEncrypted;
/**
 *  Only allow connections encrypted with SSL/TLS. For SSL connections to MySQL
 *  and PostgreSQL, the client certificate isn't verified. When this value is
 *  used, the legacy `require_ssl` flag must be false or cleared to avoid a
 *  conflict between the values of the two flags.
 *
 *  Value: "ENCRYPTED_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_IpConfiguration_SslMode_EncryptedOnly;
/**
 *  The SSL mode is unknown.
 *
 *  Value: "SSL_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_IpConfiguration_SslMode_SslModeUnspecified;
/**
 *  Only allow connections encrypted with SSL/TLS and with valid client
 *  certificates. When this value is used, the legacy `require_ssl` flag must be
 *  true or cleared to avoid the conflict between values of two flags.
 *  PostgreSQL clients or users that connect using IAM database authentication
 *  must use either the [Cloud SQL Auth
 *  Proxy](https://cloud.google.com/sql/docs/postgres/connect-auth-proxy) or
 *  [Cloud SQL
 *  Connectors](https://cloud.google.com/sql/docs/postgres/connect-connectors)
 *  to enforce client identity verification. Only applicable to MySQL and
 *  PostgreSQL. Not applicable to SQL Server.
 *
 *  Value: "TRUSTED_CLIENT_CERTIFICATE_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_IpConfiguration_SslMode_TrustedClientCertificateRequired;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_IpMapping.type

/**
 *  V1 IP of a migrated instance. We want the user to decommission this IP as
 *  soon as the migration is complete. Note: V1 instances with V1 ip addresses
 *  will be counted as PRIMARY.
 *
 *  Value: "MIGRATED_1ST_GEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_IpMapping_Type_Migrated1stGen;
/**
 *  Source IP address of the connection a read replica establishes to its
 *  external primary instance. This IP address can be allowlisted by the
 *  customer in case it has a firewall that filters incoming connection to its
 *  on premises primary instance.
 *
 *  Value: "OUTGOING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_IpMapping_Type_Outgoing;
/**
 *  IP address the customer is supposed to connect to. Usually this is the load
 *  balancer's IP address
 *
 *  Value: "PRIMARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_IpMapping_Type_Primary;
/**
 *  Private IP used when using private IPs and network peering.
 *
 *  Value: "PRIVATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_IpMapping_Type_Private;
/**
 *  This is an unknown IP address type.
 *
 *  Value: "SQL_IP_ADDRESS_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_IpMapping_Type_SqlIpAddressTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_MaintenanceWindow.updateTrack

/**
 *  For an instance with a scheduled maintenance window, this maintenance timing
 *  indicates that the maintenance update is scheduled 7 to 14 days after the
 *  notification is sent out. Also referred to as `Week 1` (Console) and
 *  `preview` (gcloud CLI).
 *
 *  Value: "canary"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_MaintenanceWindow_UpdateTrack_Canary;
/**
 *  This is an unknown maintenance timing preference.
 *
 *  Value: "SQL_UPDATE_TRACK_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_MaintenanceWindow_UpdateTrack_SqlUpdateTrackUnspecified;
/**
 *  For an instance with a scheduled maintenance window, this maintenance timing
 *  indicates that the maintenance update is scheduled 15 to 21 days after the
 *  notification is sent out. Also referred to as `Week 2` (Console) and
 *  `production` (gcloud CLI).
 *
 *  Value: "stable"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_MaintenanceWindow_UpdateTrack_Stable;
/**
 *  For instance with a scheduled maintenance window, this maintenance timing
 *  indicates that the maintenance update is scheduled 35 to 42 days after the
 *  notification is sent out.
 *
 *  Value: "week5"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_MaintenanceWindow_UpdateTrack_Week5;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_Operation.operationType

/**
 *  Acquire a lease for the setup of SQL Server Reporting Services (SSRS).
 *
 *  Value: "ACQUIRE_SSRS_LEASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_AcquireSsrsLease;
/**
 *  Performs auto-restart of an HA-enabled Cloud SQL database for auto recovery.
 *
 *  Value: "AUTO_RESTART"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_AutoRestart;
/** Value: "BACKUP" */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_Backup GTLR_DEPRECATED;
/**
 *  Performs instance backup.
 *
 *  Value: "BACKUP_VOLUME"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_BackupVolume;
/**
 *  Clones a Cloud SQL instance.
 *
 *  Value: "CLONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_Clone;
/**
 *  Indicates that the instance, its read replicas, and its cascading replicas
 *  are in maintenance. Maintenance typically gets initiated on groups of
 *  replicas first, followed by the primary instance. For each instance,
 *  maintenance typically causes the instance to be unavailable for 1-3 minutes.
 *
 *  Value: "CLUSTER_MAINTENANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_ClusterMaintenance GTLR_DEPRECATED;
/**
 *  Creates a new Cloud SQL instance.
 *
 *  Value: "CREATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_Create;
/**
 *  Creates clone instance.
 *
 *  Value: "CREATE_CLONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_CreateClone GTLR_DEPRECATED;
/**
 *  Creates a database in the Cloud SQL instance.
 *
 *  Value: "CREATE_DATABASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_CreateDatabase;
/**
 *  Creates a Cloud SQL replica instance.
 *
 *  Value: "CREATE_REPLICA"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_CreateReplica;
/**
 *  Creates a new user in a Cloud SQL instance.
 *
 *  Value: "CREATE_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_CreateUser;
/** Value: "DEFER_MAINTENANCE" */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_DeferMaintenance GTLR_DEPRECATED;
/**
 *  Deletes a Cloud SQL instance.
 *
 *  Value: "DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_Delete;
/**
 *  Deletes the backup taken by a backup run.
 *
 *  Value: "DELETE_BACKUP"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_DeleteBackup;
/**
 *  Deletes a database in the Cloud SQL instance.
 *
 *  Value: "DELETE_DATABASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_DeleteDatabase;
/**
 *  Deletes a user from a Cloud SQL instance.
 *
 *  Value: "DELETE_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_DeleteUser;
/**
 *  Deletes an instance backup.
 *
 *  Value: "DELETE_VOLUME"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_DeleteVolume;
/**
 *  Demotes the stand-alone instance to be a Cloud SQL read replica for an
 *  external database server.
 *
 *  Value: "DEMOTE_MASTER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_DemoteMaster;
/**
 *  This field is deprecated, and will be removed in future version of API.
 *
 *  Value: "ENABLE_PRIVATE_IP"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_EnablePrivateIp GTLR_DEPRECATED;
/**
 *  Exports data from a Cloud SQL instance to a Cloud Storage bucket.
 *
 *  Value: "EXPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_Export;
/**
 *  Performs failover of an HA-enabled Cloud SQL failover replica.
 *
 *  Value: "FAILOVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_Failover;
/**
 *  Imports data into a Cloud SQL instance.
 *
 *  Value: "IMPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_Import;
/**
 *  Injects a privileged user in mysql for MOB instances.
 *
 *  Value: "INJECT_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_InjectUser;
/**
 *  Recovers logs from an instance's old data disk.
 *
 *  Value: "LOG_CLEANUP"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_LogCleanup;
/**
 *  Indicates that the instance is currently in maintenance. Maintenance
 *  typically causes the instance to be unavailable for 1-3 minutes.
 *
 *  Value: "MAINTENANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_Maintenance;
/**
 *  Updates the major version of a Cloud SQL instance.
 *
 *  Value: "MAJOR_VERSION_UPGRADE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_MajorVersionUpgrade;
/**
 *  Promotes a Cloud SQL replica instance.
 *
 *  Value: "PROMOTE_REPLICA"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_PromoteReplica;
/**
 *  Reconfigures old primary after a promote replica operation. Effect of a
 *  promote operation to the old primary is executed in this operation,
 *  asynchronously from the promote replica operation executed to the replica.
 *
 *  Value: "RECONFIGURE_OLD_PRIMARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_ReconfigureOldPrimary;
/** Value: "RECREATE_REPLICA" */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_RecreateReplica;
/**
 *  Re-encrypts CMEK instances with latest key version.
 *
 *  Value: "REENCRYPT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_Reencrypt;
/**
 *  Release a lease for the setup of SQL Server Reporting Services (SSRS).
 *
 *  Value: "RELEASE_SSRS_LEASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_ReleaseSsrsLease;
/**
 *  Reschedule maintenance to another time.
 *
 *  Value: "RESCHEDULE_MAINTENANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_RescheduleMaintenance;
/**
 *  Restarts the Cloud SQL instance.
 *
 *  Value: "RESTART"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_Restart;
/**
 *  Restores an instance backup.
 *
 *  Value: "RESTORE_VOLUME"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_RestoreVolume;
/**
 *  Indicates that the instance (and any of its replicas) are currently in
 *  maintenance. This is initiated as a self-service request by using SSM.
 *  Maintenance typically causes the instance to be unavailable for 1-3 minutes.
 *
 *  Value: "SELF_SERVICE_MAINTENANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_SelfServiceMaintenance GTLR_DEPRECATED;
/** Value: "SNAPSHOT" */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_Snapshot GTLR_DEPRECATED;
/**
 *  Unknown operation type.
 *
 *  Value: "SQL_OPERATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_SqlOperationTypeUnspecified;
/**
 *  Starts external sync of a Cloud SQL EM replica to an external primary
 *  instance.
 *
 *  Value: "START_EXTERNAL_SYNC"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_StartExternalSync;
/**
 *  Starts replication on a Cloud SQL read replica instance.
 *
 *  Value: "START_REPLICA"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_StartReplica;
/**
 *  Stops replication on a Cloud SQL read replica instance.
 *
 *  Value: "STOP_REPLICA"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_StopReplica;
/**
 *  Switches the roles of the primary and replica pair. The target instance
 *  should be the replica.
 *
 *  Value: "SWITCHOVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_Switchover;
/**
 *  Switches a primary instance to a replica. This operation runs as part of a
 *  switchover operation to the original primary instance.
 *
 *  Value: "SWITCHOVER_TO_REPLICA"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_SwitchoverToReplica;
/**
 *  Truncates a general or slow log table in MySQL.
 *
 *  Value: "TRUNCATE_LOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_TruncateLog;
/**
 *  Updates the settings of a Cloud SQL instance.
 *
 *  Value: "UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_Update;
/**
 *  Updates a database in the Cloud SQL instance.
 *
 *  Value: "UPDATE_DATABASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_UpdateDatabase;
/**
 *  Updates an existing user in a Cloud SQL instance.
 *
 *  Value: "UPDATE_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_OperationType_UpdateUser;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_Operation.status

/**
 *  The operation completed.
 *
 *  Value: "DONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_Status_Done;
/**
 *  The operation has been queued, but has not started yet.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_Status_Pending;
/**
 *  The operation is running.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_Status_Running;
/**
 *  The state of the operation is unknown.
 *
 *  Value: "SQL_OPERATION_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Operation_Status_SqlOperationStatusUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_PasswordValidationPolicy.complexity

/**
 *  A combination of lowercase, uppercase, numeric, and non-alphanumeric
 *  characters.
 *
 *  Value: "COMPLEXITY_DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_PasswordValidationPolicy_Complexity_ComplexityDefault;
/**
 *  Complexity check is not specified.
 *
 *  Value: "COMPLEXITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_PasswordValidationPolicy_Complexity_ComplexityUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_Reschedule.rescheduleType

/**
 *  Reschedules maintenance to happen now (within 5 minutes).
 *
 *  Value: "IMMEDIATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Reschedule_RescheduleType_Immediate;
/**
 *  Reschedules maintenance to occur within one week from the originally
 *  scheduled day and time.
 *
 *  Value: "NEXT_AVAILABLE_WINDOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Reschedule_RescheduleType_NextAvailableWindow;
/** Value: "RESCHEDULE_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Reschedule_RescheduleType_RescheduleTypeUnspecified;
/**
 *  Reschedules maintenance to a specific time and day.
 *
 *  Value: "SPECIFIC_TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Reschedule_RescheduleType_SpecificTime;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_Settings.activationPolicy

/**
 *  The instance is always up and running.
 *
 *  Value: "ALWAYS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_ActivationPolicy_Always;
/**
 *  The instance never starts.
 *
 *  Value: "NEVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_ActivationPolicy_Never;
/**
 *  The instance starts upon receiving requests.
 *
 *  Value: "ON_DEMAND"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_ActivationPolicy_OnDemand GTLR_DEPRECATED;
/**
 *  Unknown activation plan.
 *
 *  Value: "SQL_ACTIVATION_POLICY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_ActivationPolicy_SqlActivationPolicyUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_Settings.availabilityType

/**
 *  Regional available instance.
 *
 *  Value: "REGIONAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_AvailabilityType_Regional;
/**
 *  This is an unknown Availability type.
 *
 *  Value: "SQL_AVAILABILITY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_AvailabilityType_SqlAvailabilityTypeUnspecified;
/**
 *  Zonal available instance.
 *
 *  Value: "ZONAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_AvailabilityType_Zonal;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_Settings.connectorEnforcement

/**
 *  The requirement for Cloud SQL connectors is unknown.
 *
 *  Value: "CONNECTOR_ENFORCEMENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_ConnectorEnforcement_ConnectorEnforcementUnspecified;
/**
 *  Do not require Cloud SQL connectors.
 *
 *  Value: "NOT_REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_ConnectorEnforcement_NotRequired;
/**
 *  Require all connections to use Cloud SQL connectors, including the Cloud SQL
 *  Auth Proxy and Cloud SQL Java, Python, and Go connectors. Note: This
 *  disables all existing authorized networks.
 *
 *  Value: "REQUIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_ConnectorEnforcement_Required;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_Settings.dataDiskType

/**
 *  This field is deprecated and will be removed from a future version of the
 *  API.
 *
 *  Value: "OBSOLETE_LOCAL_SSD"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_DataDiskType_ObsoleteLocalSsd GTLR_DEPRECATED;
/**
 *  An HDD data disk.
 *
 *  Value: "PD_HDD"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_DataDiskType_PdHdd;
/**
 *  An SSD data disk.
 *
 *  Value: "PD_SSD"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_DataDiskType_PdSsd;
/**
 *  This is an unknown data disk type.
 *
 *  Value: "SQL_DATA_DISK_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_DataDiskType_SqlDataDiskTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_Settings.edition

/**
 *  The instance did not specify the edition.
 *
 *  Value: "EDITION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_Edition_EditionUnspecified;
/**
 *  The instance is an enterprise edition.
 *
 *  Value: "ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_Edition_Enterprise;
/**
 *  The instance is an Enterprise Plus edition.
 *
 *  Value: "ENTERPRISE_PLUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_Edition_EnterprisePlus;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_Settings.pricingPlan

/**
 *  The instance is billed at a monthly flat rate.
 *
 *  Value: "PACKAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_PricingPlan_Package;
/**
 *  The instance is billed per usage.
 *
 *  Value: "PER_USE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_PricingPlan_PerUse;
/**
 *  This is an unknown pricing plan for this instance.
 *
 *  Value: "SQL_PRICING_PLAN_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_PricingPlan_SqlPricingPlanUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_Settings.replicationType

/**
 *  The asynchronous replication mode for First Generation instances. It
 *  provides a slight performance gain, but if an outage occurs while this
 *  option is set to asynchronous, you can lose up to a few seconds of updates
 *  to your data.
 *
 *  Value: "ASYNCHRONOUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_ReplicationType_Asynchronous;
/**
 *  This is an unknown replication type for a Cloud SQL instance.
 *
 *  Value: "SQL_REPLICATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_ReplicationType_SqlReplicationTypeUnspecified;
/**
 *  The synchronous replication mode for First Generation instances. It is the
 *  default value.
 *
 *  Value: "SYNCHRONOUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_Settings_ReplicationType_Synchronous;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_SqlExternalSyncSettingError.type

/** Value: "BINLOG_NOT_ENABLED" */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_BinlogNotEnabled;
/**
 *  The primary instance's binary log retention setting.
 *
 *  Value: "BINLOG_RETENTION_SETTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_BinlogRetentionSetting;
/** Value: "CONNECTION_FAILURE" */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_ConnectionFailure;
/**
 *  The replica instance contains existing data.
 *
 *  Value: "EXISTING_DATA_IN_REPLICA"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_ExistingDataInReplica;
/**
 *  This error message indicates that the specified extensions are not enabled
 *  on destination instance. For example, before you can migrate data to the
 *  destination instance, you must enable the PGAudit extension on the instance.
 *
 *  Value: "EXTENSIONS_NOT_ENABLED_IN_REPLICA"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_ExtensionsNotEnabledInReplica;
/**
 *  The warning message indicates the pg_cron extension and settings will not be
 *  migrated to the destination.
 *
 *  Value: "EXTENSIONS_NOT_MIGRATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_ExtensionsNotMigrated;
/**
 *  The minor version of replica database is incompatible with the source.
 *
 *  Value: "INCOMPATIBLE_DATABASE_MINOR_VERSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_IncompatibleDatabaseMinorVersion;
/** Value: "INCOMPATIBLE_DATABASE_VERSION" */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_IncompatibleDatabaseVersion;
/**
 *  The disk size of the replica instance is smaller than the data size of the
 *  source instance.
 *
 *  Value: "INSUFFICIENT_DISK_SIZE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientDiskSize;
/**
 *  The Cloud Storage bucket is missing necessary permissions.
 *
 *  Value: "INSUFFICIENT_GCS_PERMISSIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientGcsPermissions;
/**
 *  The data size of the source instance is greater than 1 TB, the number of
 *  cores of the replica instance is less than 8, and the memory of the replica
 *  is less than 32 GB.
 *
 *  Value: "INSUFFICIENT_MACHINE_TIER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientMachineTier;
/**
 *  The value of parameter max_replication_slots is not sufficient.
 *
 *  Value: "INSUFFICIENT_MAX_REPLICATION_SLOTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientMaxReplicationSlots;
/**
 *  The value of parameter max_wal_senders is not sufficient.
 *
 *  Value: "INSUFFICIENT_MAX_WAL_SENDERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientMaxWalSenders;
/**
 *  The value of parameter max_worker_processes is not sufficient.
 *
 *  Value: "INSUFFICIENT_MAX_WORKER_PROCESSES"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientMaxWorkerProcesses;
/**
 *  The replication user is missing privileges that are required.
 *
 *  Value: "INSUFFICIENT_PRIVILEGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientPrivilege;
/**
 *  The primary instance database parameter setup doesn't allow EM sync.
 *
 *  Value: "INVALID_DB_PARAM"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidDbParam;
/**
 *  The Cloud Storage bucket has an error in the file or contains invalid file
 *  information.
 *
 *  Value: "INVALID_FILE_INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidFileInfo;
/**
 *  The primary instance logging setup doesn't allow EM sync.
 *
 *  Value: "INVALID_LOGGING_SETUP"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidLoggingSetup;
/**
 *  The value of parameter rds.logical_replication is not set to 1.
 *
 *  Value: "INVALID_RDS_LOGICAL_REPLICATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidRdsLogicalReplication;
/**
 *  The value of parameter shared_preload_libraries does not include pglogical.
 *
 *  Value: "INVALID_SHARED_PRELOAD_LIBRARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidSharedPreloadLibrary;
/**
 *  The value of parameter wal_level is not set to logical.
 *
 *  Value: "INVALID_WAL_LEVEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidWalLevel;
/**
 *  Source has tables with limited support eg: PostgreSQL tables without primary
 *  keys.
 *
 *  Value: "LIMITED_SUPPORT_TABLES"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_LimitedSupportTables;
/**
 *  The global variable local_infile is off on external server replica.
 *
 *  Value: "LOCAL_INFILE_OFF"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_LocalInfileOff;
/**
 *  The replication user is missing privileges that are optional.
 *
 *  Value: "MISSING_OPTIONAL_PRIVILEGES"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_MissingOptionalPrivileges;
/**
 *  The replication user is missing parallel import specific privileges. (e.g.
 *  LOCK TABLES) for MySQL.
 *
 *  Value: "MYSQL_PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_MysqlParallelImportInsufficientPrivilege;
/**
 *  No pglogical extension installed on databases, applicable for postgres.
 *
 *  Value: "NO_PGLOGICAL_INSTALLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_NoPglogicalInstalled;
/**
 *  The error message indicates that pg_cron flags are enabled on the
 *  destination which is not supported during the migration.
 *
 *  Value: "PG_CRON_FLAG_ENABLED_IN_REPLICA"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_PgCronFlagEnabledInReplica;
/**
 *  pglogical node already exists on databases, applicable for postgres.
 *
 *  Value: "PGLOGICAL_NODE_ALREADY_EXISTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_PglogicalNodeAlreadyExists;
/**
 *  Count of subscriptions needed to sync source data for PostgreSQL database.
 *
 *  Value: "PG_SUBSCRIPTION_COUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_PgSubscriptionCount;
/**
 *  Final parallel level that is used to do migration.
 *
 *  Value: "PG_SYNC_PARALLEL_LEVEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_PgSyncParallelLevel;
/**
 *  The primary instance has been setup and will fail the setup.
 *
 *  Value: "PRIMARY_ALREADY_SETUP"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_PrimaryAlreadySetup;
/** Value: "REPLICA_ALREADY_SETUP" */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_ReplicaAlreadySetup;
/**
 *  Additional BACKUP_ADMIN privilege is granted to the replication user which
 *  may lock source MySQL 8 instance for DDLs during initial sync.
 *
 *  Value: "RISKY_BACKUP_ADMIN_PRIVILEGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_RiskyBackupAdminPrivilege;
/**
 *  This warning message indicates that Cloud SQL uses the maximum number of
 *  subscriptions to migrate data from the source to the destination.
 *
 *  Value: "SOURCE_MAX_SUBSCRIPTIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_SourceMaxSubscriptions;
/** Value: "SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_SqlExternalSyncSettingErrorTypeUnspecified;
/**
 *  SQL Server Agent is not running.
 *
 *  Value: "SQLSERVER_AGENT_NOT_RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_SqlserverAgentNotRunning;
/**
 *  SQL Server \@\@SERVERNAME does not match actual host name.
 *
 *  Value: "SQLSERVER_SERVERNAME_MISMATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_SqlserverServernameMismatch;
/**
 *  If a time out occurs while the subscription counts are calculated, then this
 *  value is set to 1. Otherwise, this value is set to 2.
 *
 *  Value: "SUBSCRIPTION_CALCULATION_STATUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_SubscriptionCalculationStatus;
/**
 *  This code instructs customers to turn on point-in-time recovery manually for
 *  the instance after promoting the Cloud SQL for PostgreSQL instance.
 *
 *  Value: "TURN_ON_PITR_AFTER_PROMOTE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_TurnOnPitrAfterPromote;
/**
 *  Unable to verify definers on the source for MySQL.
 *
 *  Value: "UNABLE_TO_VERIFY_DEFINERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnableToVerifyDefiners;
/**
 *  The primary instance has unsupported binary log format.
 *
 *  Value: "UNSUPPORTED_BINLOG_FORMAT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedBinlogFormat;
/**
 *  The source database has generated columns that can't be migrated. Please
 *  change them to regular columns before migration.
 *
 *  Value: "UNSUPPORTED_COLUMNS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedColumns;
/**
 *  The source instance has unsupported database settings for migration.
 *
 *  Value: "UNSUPPORTED_DATABASE_SETTINGS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedDatabaseSettings;
/**
 *  The customer has a definer that will break EM setup.
 *
 *  Value: "UNSUPPORTED_DEFINER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedDefiner;
/**
 *  Extensions installed are either not supported or having unsupported
 *  versions.
 *
 *  Value: "UNSUPPORTED_EXTENSIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedExtensions;
/**
 *  The warning message indicates the unsupported extensions will not be
 *  migrated to the destination.
 *
 *  Value: "UNSUPPORTED_EXTENSIONS_NOT_MIGRATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedExtensionsNotMigrated;
/**
 *  The gtid_mode is not supported, applicable for MySQL.
 *
 *  Value: "UNSUPPORTED_GTID_MODE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedGtidMode;
/**
 *  Unsupported migration type.
 *
 *  Value: "UNSUPPORTED_MIGRATION_TYPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedMigrationType;
/**
 *  The primary instance has tables with unsupported storage engine.
 *
 *  Value: "UNSUPPORTED_STORAGE_ENGINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedStorageEngine;
/**
 *  The selected objects include system objects that aren't supported for
 *  migration.
 *
 *  Value: "UNSUPPORTED_SYSTEM_OBJECTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedSystemObjects;
/**
 *  The table definition is not support due to missing primary key or replica
 *  identity, applicable for postgres. Note that this is a warning and won't
 *  block the migration.
 *
 *  Value: "UNSUPPORTED_TABLE_DEFINITION"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedTableDefinition;
/**
 *  The source database has tables with the FULL or NOTHING replica identity.
 *  Before starting your migration, either remove the identity or change it to
 *  DEFAULT. Note that this is an error and will block the migration.
 *
 *  Value: "UNSUPPORTED_TABLES_WITH_REPLICA_IDENTITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedTablesWithReplicaIdentity;
/**
 *  The source database has users that aren't created in the replica. First,
 *  create all users, which are in the pg_user_mappings table of the source
 *  database, in the destination instance. Then, perform the migration.
 *
 *  Value: "USERS_NOT_CREATED_IN_REPLICA"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UsersNotCreatedInReplica;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_SqlInstancesStartExternalSyncRequest.migrationType

/**
 *  Logical dump file-based migration
 *
 *  Value: "LOGICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_MigrationType_Logical;
/**
 *  Default value is a logical dump file-based migration
 *
 *  Value: "MIGRATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_MigrationType_MigrationTypeUnspecified;
/**
 *  Physical file-based migration
 *
 *  Value: "PHYSICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_MigrationType_Physical;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_SqlInstancesStartExternalSyncRequest.syncMode

/**
 *  Unknown external sync mode, will be defaulted to ONLINE mode
 *
 *  Value: "EXTERNAL_SYNC_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncMode_ExternalSyncModeUnspecified;
/**
 *  Offline external sync only dumps and loads a one-time snapshot of the
 *  primary instance's data
 *
 *  Value: "OFFLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncMode_Offline;
/**
 *  Online external sync will set up replication after initial data external
 *  sync
 *
 *  Value: "ONLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncMode_Online;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_SqlInstancesStartExternalSyncRequest.syncParallelLevel

/**
 *  Unknown sync parallel level. Will be defaulted to OPTIMAL.
 *
 *  Value: "EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncParallelLevel_ExternalSyncParallelLevelUnspecified;
/**
 *  Maximum parallel level.
 *
 *  Value: "MAX"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncParallelLevel_Max;
/**
 *  Minimal parallel level.
 *
 *  Value: "MIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncParallelLevel_Min;
/**
 *  Optimal parallel level.
 *
 *  Value: "OPTIMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncParallelLevel_Optimal;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest.migrationType

/**
 *  Logical dump file-based migration
 *
 *  Value: "LOGICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType_Logical;
/**
 *  Default value is a logical dump file-based migration
 *
 *  Value: "MIGRATION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType_MigrationTypeUnspecified;
/**
 *  Physical file-based migration
 *
 *  Value: "PHYSICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType_Physical;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest.syncMode

/**
 *  Unknown external sync mode, will be defaulted to ONLINE mode
 *
 *  Value: "EXTERNAL_SYNC_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncMode_ExternalSyncModeUnspecified;
/**
 *  Offline external sync only dumps and loads a one-time snapshot of the
 *  primary instance's data
 *
 *  Value: "OFFLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncMode_Offline;
/**
 *  Online external sync will set up replication after initial data external
 *  sync
 *
 *  Value: "ONLINE"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncMode_Online;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest.syncParallelLevel

/**
 *  Unknown sync parallel level. Will be defaulted to OPTIMAL.
 *
 *  Value: "EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncParallelLevel_ExternalSyncParallelLevelUnspecified;
/**
 *  Maximum parallel level.
 *
 *  Value: "MAX"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncParallelLevel_Max;
/**
 *  Minimal parallel level.
 *
 *  Value: "MIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncParallelLevel_Min;
/**
 *  Optimal parallel level.
 *
 *  Value: "OPTIMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncParallelLevel_Optimal;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_SqlOutOfDiskReport.sqlOutOfDiskState

/**
 *  The instance has plenty space on data disk
 *
 *  Value: "NORMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlOutOfDiskReport_SqlOutOfDiskState_Normal;
/**
 *  Data disk is almost used up. It is shutdown to prevent data corruption.
 *
 *  Value: "SOFT_SHUTDOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlOutOfDiskReport_SqlOutOfDiskState_SoftShutdown;
/**
 *  Unspecified state
 *
 *  Value: "SQL_OUT_OF_DISK_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_SqlOutOfDiskReport_SqlOutOfDiskState_SqlOutOfDiskStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_User.dualPasswordType

/**
 *  Dual password usable for connecting using this user.
 *
 *  Value: "DUAL_PASSWORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_User_DualPasswordType_DualPassword;
/**
 *  The default value.
 *
 *  Value: "DUAL_PASSWORD_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_User_DualPasswordType_DualPasswordTypeUnspecified;
/**
 *  No dual password usable for connecting using this user.
 *
 *  Value: "NO_DUAL_PASSWORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_User_DualPasswordType_NoDualPassword;
/**
 *  Do not update the user's dual password status.
 *
 *  Value: "NO_MODIFY_DUAL_PASSWORD"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_User_DualPasswordType_NoModifyDualPassword;

// ----------------------------------------------------------------------------
// GTLRSQLAdmin_User.type

/**
 *  The database's built-in user type.
 *
 *  Value: "BUILT_IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_User_Type_BuiltIn;
/**
 *  Cloud IAM group. Not used for login.
 *
 *  Value: "CLOUD_IAM_GROUP"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_User_Type_CloudIamGroup;
/**
 *  Read-only. Login for a service account that belongs to the Cloud IAM group.
 *
 *  Value: "CLOUD_IAM_GROUP_SERVICE_ACCOUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_User_Type_CloudIamGroupServiceAccount;
/**
 *  Read-only. Login for a user that belongs to the Cloud IAM group.
 *
 *  Value: "CLOUD_IAM_GROUP_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_User_Type_CloudIamGroupUser;
/**
 *  Cloud IAM service account.
 *
 *  Value: "CLOUD_IAM_SERVICE_ACCOUNT"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_User_Type_CloudIamServiceAccount;
/**
 *  Cloud IAM user.
 *
 *  Value: "CLOUD_IAM_USER"
 */
FOUNDATION_EXTERN NSString * const kGTLRSQLAdmin_User_Type_CloudIamUser;

/**
 *  An entry for an Access Control list.
 */
@interface GTLRSQLAdmin_AclEntry : GTLRObject

/**
 *  The time when this access control entry expires in [RFC
 *  3339](https://tools.ietf.org/html/rfc3339) format, for example
 *  `2012-11-15T16:19:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expirationTime;

/** This is always `sql#aclEntry`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Optional. A label to identify this entry. */
@property(nonatomic, copy, nullable) NSString *name;

/** The allowlisted value for the access control list. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Acquire SSRS lease context.
 */
@interface GTLRSQLAdmin_AcquireSsrsLeaseContext : GTLRObject

/** Lease duration needed for SSRS setup. */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/** The report database to be used for SSRS setup. */
@property(nonatomic, copy, nullable) NSString *reportDatabase;

/**
 *  The username to be used as the service login to connect to the report
 *  database for SSRS setup.
 */
@property(nonatomic, copy, nullable) NSString *serviceLogin;

/**
 *  The username to be used as the setup login to connect to the database server
 *  for SSRS setup.
 */
@property(nonatomic, copy, nullable) NSString *setupLogin;

@end


/**
 *  Specifies options for controlling advanced machine features.
 */
@interface GTLRSQLAdmin_AdvancedMachineFeatures : GTLRObject

/**
 *  The number of threads per physical core.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *threadsPerCore;

@end


/**
 *  An Admin API warning message.
 */
@interface GTLRSQLAdmin_ApiWarning : GTLRObject

/**
 *  Code to uniquely identify the warning type.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_ApiWarning_Code_CompromisedCredentials Warning when
 *        user tries to create/update a user with credentials that have
 *        previously been compromised by a public data breach. (Value:
 *        "COMPROMISED_CREDENTIALS")
 *    @arg @c kGTLRSQLAdmin_ApiWarning_Code_InternalStateFailure Warning when
 *        the operation succeeds but some non-critical workflow state failed.
 *        (Value: "INTERNAL_STATE_FAILURE")
 *    @arg @c kGTLRSQLAdmin_ApiWarning_Code_MaxResultsExceedsLimit Warning when
 *        user provided maxResults parameter exceeds the limit. The returned
 *        result set may be incomplete. (Value: "MAX_RESULTS_EXCEEDS_LIMIT")
 *    @arg @c kGTLRSQLAdmin_ApiWarning_Code_RegionUnreachable Warning when one
 *        or more regions are not reachable. The returned result set may be
 *        incomplete. (Value: "REGION_UNREACHABLE")
 *    @arg @c kGTLRSQLAdmin_ApiWarning_Code_SqlApiWarningCodeUnspecified An
 *        unknown or unset warning type from Cloud SQL API. (Value:
 *        "SQL_API_WARNING_CODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *code;

/** The warning message. */
@property(nonatomic, copy, nullable) NSString *message;

/** The region name for REGION_UNREACHABLE warning. */
@property(nonatomic, copy, nullable) NSString *region;

@end


/**
 *  An available database version. It can be a major or a minor version.
 */
@interface GTLRSQLAdmin_AvailableDatabaseVersion : GTLRObject

/** The database version's display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** The version's major version name. */
@property(nonatomic, copy, nullable) NSString *majorVersion;

/**
 *  The database version name. For MySQL 8.0, this string provides the database
 *  major and minor version.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Database instance backup configuration.
 */
@interface GTLRSQLAdmin_BackupConfiguration : GTLRObject

/** Backup retention settings. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_BackupRetentionSettings *backupRetentionSettings;

/**
 *  (MySQL only) Whether binary log is enabled. If backup configuration is
 *  disabled, binarylog must be disabled as well.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *binaryLogEnabled;

/**
 *  Whether this configuration is enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enabled;

/** This is always `sql#backupConfiguration`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Location of the backup */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Whether point in time recovery is enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pointInTimeRecoveryEnabled;

/**
 *  Reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *replicationLogArchivingEnabled;

/**
 *  Start time for the daily backup configuration in UTC timezone in the 24 hour
 *  format - `HH:MM`.
 */
@property(nonatomic, copy, nullable) NSString *startTime;

/**
 *  Output only. This value contains the storage location of transactional logs
 *  used to perform point-in-time recovery (PITR) for the database.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_BackupConfiguration_TransactionalLogStorageState_CloudStorage
 *        The transaction logs used for PITR for the instance are stored in
 *        Cloud Storage. Only applicable to MySQL and PostgreSQL. (Value:
 *        "CLOUD_STORAGE")
 *    @arg @c kGTLRSQLAdmin_BackupConfiguration_TransactionalLogStorageState_Disk
 *        The transaction logs used for PITR for the instance are stored on a
 *        data disk. (Value: "DISK")
 *    @arg @c kGTLRSQLAdmin_BackupConfiguration_TransactionalLogStorageState_SwitchedToCloudStorage
 *        The transaction logs used for PITR for the instance are now stored in
 *        Cloud Storage. Previously, they were stored on a data disk. Only
 *        applicable to MySQL. (Value: "SWITCHED_TO_CLOUD_STORAGE")
 *    @arg @c kGTLRSQLAdmin_BackupConfiguration_TransactionalLogStorageState_SwitchingToCloudStorage
 *        The transaction logs used for PITR for the instance are switching from
 *        being stored on a data disk to being stored in Cloud Storage. Only
 *        applicable to MySQL. (Value: "SWITCHING_TO_CLOUD_STORAGE")
 *    @arg @c kGTLRSQLAdmin_BackupConfiguration_TransactionalLogStorageState_TransactionalLogStorageStateUnspecified
 *        Unspecified. (Value: "TRANSACTIONAL_LOG_STORAGE_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *transactionalLogStorageState;

/**
 *  The number of days of transaction logs we retain for point in time restore,
 *  from 1-7.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *transactionLogRetentionDays;

@end


/**
 *  Backup context.
 */
@interface GTLRSQLAdmin_BackupContext : GTLRObject

/**
 *  The identifier of the backup.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *backupId;

/** This is always `sql#backupContext`. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Backup Reencryption Config
 */
@interface GTLRSQLAdmin_BackupReencryptionConfig : GTLRObject

/**
 *  Backup re-encryption limit
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *backupLimit;

/**
 *  Type of backups users want to re-encrypt.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_BackupReencryptionConfig_BackupType_Automated
 *        Reencrypt automatic backups (Value: "AUTOMATED")
 *    @arg @c kGTLRSQLAdmin_BackupReencryptionConfig_BackupType_BackupTypeUnspecified
 *        Unknown backup type, will be defaulted to AUTOMATIC backup type
 *        (Value: "BACKUP_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_BackupReencryptionConfig_BackupType_OnDemand
 *        Reencrypt on-demand backups (Value: "ON_DEMAND")
 */
@property(nonatomic, copy, nullable) NSString *backupType;

@end


/**
 *  We currently only support backup retention by specifying the number of
 *  backups we will retain.
 */
@interface GTLRSQLAdmin_BackupRetentionSettings : GTLRObject

/**
 *  Depending on the value of retention_unit, this is used to determine if a
 *  backup needs to be deleted. If retention_unit is 'COUNT', we will retain
 *  this many backups.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *retainedBackups;

/**
 *  The unit that 'retained_backups' represents.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_BackupRetentionSettings_RetentionUnit_Count
 *        Retention will be by count, eg. "retain the most recent 7 backups".
 *        (Value: "COUNT")
 *    @arg @c kGTLRSQLAdmin_BackupRetentionSettings_RetentionUnit_RetentionUnitUnspecified
 *        Backup retention unit is unspecified, will be treated as COUNT.
 *        (Value: "RETENTION_UNIT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *retentionUnit;

@end


/**
 *  A BackupRun resource.
 */
@interface GTLRSQLAdmin_BackupRun : GTLRObject

/**
 *  Specifies the kind of backup, PHYSICAL or DEFAULT_SNAPSHOT.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_BackupRun_BackupKind_Physical Physical backups
 *        (Value: "PHYSICAL")
 *    @arg @c kGTLRSQLAdmin_BackupRun_BackupKind_Snapshot The snapshot based
 *        backups (Value: "SNAPSHOT")
 *    @arg @c kGTLRSQLAdmin_BackupRun_BackupKind_SqlBackupKindUnspecified This
 *        is an unknown BackupKind. (Value: "SQL_BACKUP_KIND_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *backupKind;

/**
 *  The description of this run, only applicable to on-demand backups.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Encryption configuration specific to a backup. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_DiskEncryptionConfiguration *diskEncryptionConfiguration;

/** Encryption status specific to a backup. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_DiskEncryptionStatus *diskEncryptionStatus;

/**
 *  The time the backup operation completed in UTC timezone in [RFC
 *  3339](https://tools.ietf.org/html/rfc3339) format, for example
 *  `2012-11-15T16:19:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  The time the run was enqueued in UTC timezone in [RFC
 *  3339](https://tools.ietf.org/html/rfc3339) format, for example
 *  `2012-11-15T16:19:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *enqueuedTime;

/**
 *  Information about why the backup operation failed. This is only present if
 *  the run has the FAILED status.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_OperationError *error;

/**
 *  The identifier for this backup run. Unique only for a specific Cloud SQL
 *  instance.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

/** Name of the database instance. */
@property(nonatomic, copy, nullable) NSString *instance;

/** This is always `sql#backupRun`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Location of the backups. */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Output only. The maximum chargeable bytes for the backup.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxChargeableBytes;

/** The URI of this resource. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  The time the backup operation actually started in UTC timezone in [RFC
 *  3339](https://tools.ietf.org/html/rfc3339) format, for example
 *  `2012-11-15T16:19:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The status of this run.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_BackupRun_Status_Deleted The backup has been
 *        deleted. (Value: "DELETED")
 *    @arg @c kGTLRSQLAdmin_BackupRun_Status_DeletionFailed The backup deletion
 *        failed. (Value: "DELETION_FAILED")
 *    @arg @c kGTLRSQLAdmin_BackupRun_Status_DeletionPending The backup is about
 *        to be deleted. (Value: "DELETION_PENDING")
 *    @arg @c kGTLRSQLAdmin_BackupRun_Status_Enqueued The backup operation was
 *        enqueued. (Value: "ENQUEUED")
 *    @arg @c kGTLRSQLAdmin_BackupRun_Status_Failed The backup failed. (Value:
 *        "FAILED")
 *    @arg @c kGTLRSQLAdmin_BackupRun_Status_Overdue The backup is overdue
 *        across a given backup window. Indicates a problem. Example:
 *        Long-running operation in progress during the whole window. (Value:
 *        "OVERDUE")
 *    @arg @c kGTLRSQLAdmin_BackupRun_Status_Running The backup is in progress.
 *        (Value: "RUNNING")
 *    @arg @c kGTLRSQLAdmin_BackupRun_Status_Skipped The backup was skipped
 *        (without problems) for a given backup window. Example: Instance was
 *        idle. (Value: "SKIPPED")
 *    @arg @c kGTLRSQLAdmin_BackupRun_Status_SqlBackupRunStatusUnspecified The
 *        status of the run is unknown. (Value:
 *        "SQL_BACKUP_RUN_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_BackupRun_Status_Successful The backup was
 *        successful. (Value: "SUCCESSFUL")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Backup time zone to prevent restores to an instance with a different time
 *  zone. Now relevant only for SQL Server.
 */
@property(nonatomic, copy, nullable) NSString *timeZone;

/**
 *  The type of this run; can be either "AUTOMATED" or "ON_DEMAND" or "FINAL".
 *  This field defaults to "ON_DEMAND" and is ignored, when specified for insert
 *  requests.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_BackupRun_Type_Automated The backup schedule
 *        automatically triggers a backup. (Value: "AUTOMATED")
 *    @arg @c kGTLRSQLAdmin_BackupRun_Type_OnDemand The user manually triggers a
 *        backup. (Value: "ON_DEMAND")
 *    @arg @c kGTLRSQLAdmin_BackupRun_Type_SqlBackupRunTypeUnspecified This is
 *        an unknown BackupRun type. (Value: "SQL_BACKUP_RUN_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The start time of the backup window during which this the backup was
 *  attempted in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for
 *  example `2012-11-15T16:19:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *windowStartTime;

@end


/**
 *  Backup run list results.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSQLAdmin_BackupRunsListResponse : GTLRCollectionObject

/**
 *  A list of backup runs in reverse chronological order of the enqueued time.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_BackupRun *> *items;

/** This is always `sql#backupRunsList`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The continuation token, used to page through large result sets. Provide this
 *  value in a subsequent request to return the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Binary log coordinates.
 */
@interface GTLRSQLAdmin_BinLogCoordinates : GTLRObject

/** Name of the binary log file for a Cloud SQL instance. */
@property(nonatomic, copy, nullable) NSString *binLogFileName;

/**
 *  Position (offset) within the binary log file.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *binLogPosition;

/** This is always `sql#binLogCoordinates`. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Database instance clone context.
 */
@interface GTLRSQLAdmin_CloneContext : GTLRObject

/**
 *  The name of the allocated ip range for the private ip Cloud SQL instance.
 *  For example: "google-managed-services-default". If set, the cloned instance
 *  ip will be created in the allocated range. The range name must comply with
 *  [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must
 *  be 1-63 characters long and match the regular expression
 *  [a-z]([-a-z0-9]*[a-z0-9])?. Reserved for future use.
 */
@property(nonatomic, copy, nullable) NSString *allocatedIpRange;

/**
 *  Binary log coordinates, if specified, identify the position up to which the
 *  source instance is cloned. If not specified, the source instance is cloned
 *  up to the most recent binary log coordinates.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_BinLogCoordinates *binLogCoordinates;

/**
 *  (SQL Server only) Clone only the specified databases from the source
 *  instance. Clone all databases if empty.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *databaseNames;

/** Name of the Cloud SQL instance to be created as a clone. */
@property(nonatomic, copy, nullable) NSString *destinationInstanceName;

/** This is always `sql#cloneContext`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Reserved for future use.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pitrTimestampMs;

/**
 *  Timestamp, if specified, identifies the time to which the source instance is
 *  cloned.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *pointInTime;

/**
 *  Optional. Copy clone and point-in-time recovery clone of a regional instance
 *  in the specified zones. If not specified, clone to the same secondary zone
 *  as the source instance. This value cannot be the same as the preferred_zone
 *  field. This field applies to all DB types.
 */
@property(nonatomic, copy, nullable) NSString *preferredSecondaryZone;

/**
 *  Optional. Copy clone and point-in-time recovery clone of an instance to the
 *  specified zone. If no zone is specified, clone to the same primary zone as
 *  the source instance. This field applies to all DB types.
 */
@property(nonatomic, copy, nullable) NSString *preferredZone;

@end


/**
 *  Connect settings retrieval response.
 */
@interface GTLRSQLAdmin_ConnectSettings : GTLRObject

/**
 *  `SECOND_GEN`: Cloud SQL database instance. `EXTERNAL`: A database server
 *  that is not managed by Google. This property is read-only; use the `tier`
 *  property in the `settings` object to determine the database type.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_BackendType_External On premises
 *        instance. (Value: "EXTERNAL")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_BackendType_FirstGen V1 speckle
 *        instance. (Value: "FIRST_GEN")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_BackendType_SecondGen V2 speckle
 *        instance. (Value: "SECOND_GEN")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_BackendType_SqlBackendTypeUnspecified
 *        This is an unknown backend type for instance. (Value:
 *        "SQL_BACKEND_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *backendType;

/**
 *  The database engine type and version. The `databaseVersion` field cannot be
 *  changed after instance creation. MySQL instances: `MYSQL_8_0`, `MYSQL_5_7`
 *  (default), or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`,
 *  `POSTGRES_10`, `POSTGRES_11`, `POSTGRES_12` (default), `POSTGRES_13`, or
 *  `POSTGRES_14`. SQL Server instances: `SQLSERVER_2017_STANDARD` (default),
 *  `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`,
 *  `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`,
 *  `SQLSERVER_2019_EXPRESS`, or `SQLSERVER_2019_WEB`.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql51 The database
 *        version is MySQL 5.1. (Value: "MYSQL_5_1")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql55 The database
 *        version is MySQL 5.5. (Value: "MYSQL_5_5")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql56 The database
 *        version is MySQL 5.6. (Value: "MYSQL_5_6")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql57 The database
 *        version is MySQL 5.7. (Value: "MYSQL_5_7")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql80 The database
 *        version is MySQL 8. (Value: "MYSQL_8_0")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8018 The
 *        database major version is MySQL 8.0 and the minor version is 18.
 *        (Value: "MYSQL_8_0_18")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8026 The
 *        database major version is MySQL 8.0 and the minor version is 26.
 *        (Value: "MYSQL_8_0_26")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8027 The
 *        database major version is MySQL 8.0 and the minor version is 27.
 *        (Value: "MYSQL_8_0_27")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8028 The
 *        database major version is MySQL 8.0 and the minor version is 28.
 *        (Value: "MYSQL_8_0_28")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8029 The
 *        database major version is MySQL 8.0 and the minor version is 29.
 *        (Value: "MYSQL_8_0_29")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8030 The
 *        database major version is MySQL 8.0 and the minor version is 30.
 *        (Value: "MYSQL_8_0_30")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8031 The
 *        database major version is MySQL 8.0 and the minor version is 31.
 *        (Value: "MYSQL_8_0_31")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8032 The
 *        database major version is MySQL 8.0 and the minor version is 32.
 *        (Value: "MYSQL_8_0_32")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8033 The
 *        database major version is MySQL 8.0 and the minor version is 33.
 *        (Value: "MYSQL_8_0_33")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8034 The
 *        database major version is MySQL 8.0 and the minor version is 34.
 *        (Value: "MYSQL_8_0_34")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8035 The
 *        database major version is MySQL 8.0 and the minor version is 35.
 *        (Value: "MYSQL_8_0_35")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8036 The
 *        database major version is MySQL 8.0 and the minor version is 36.
 *        (Value: "MYSQL_8_0_36")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8037 The
 *        database major version is MySQL 8.0 and the minor version is 37.
 *        (Value: "MYSQL_8_0_37")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8038 The
 *        database major version is MySQL 8.0 and the minor version is 38.
 *        (Value: "MYSQL_8_0_38")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8039 The
 *        database major version is MySQL 8.0 and the minor version is 39.
 *        (Value: "MYSQL_8_0_39")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8040 The
 *        database major version is MySQL 8.0 and the minor version is 40.
 *        (Value: "MYSQL_8_0_40")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql84 The database
 *        version is MySQL 8.4. (Value: "MYSQL_8_4")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres10 The
 *        database version is PostgreSQL 10. (Value: "POSTGRES_10")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres11 The
 *        database version is PostgreSQL 11. (Value: "POSTGRES_11")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres12 The
 *        database version is PostgreSQL 12. (Value: "POSTGRES_12")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres13 The
 *        database version is PostgreSQL 13. (Value: "POSTGRES_13")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres14 The
 *        database version is PostgreSQL 14. (Value: "POSTGRES_14")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres15 The
 *        database version is PostgreSQL 15. (Value: "POSTGRES_15")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres16 The
 *        database version is PostgreSQL 16. (Value: "POSTGRES_16")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres17 The
 *        database version is PostgreSQL 17. (Value: "POSTGRES_17")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres96 The
 *        database version is PostgreSQL 9.6. (Value: "POSTGRES_9_6")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_SqlDatabaseVersionUnspecified
 *        This is an unknown database version. (Value:
 *        "SQL_DATABASE_VERSION_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2017Enterprise
 *        The database version is SQL Server 2017 Enterprise. (Value:
 *        "SQLSERVER_2017_ENTERPRISE")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2017Express
 *        The database version is SQL Server 2017 Express. (Value:
 *        "SQLSERVER_2017_EXPRESS")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2017Standard
 *        The database version is SQL Server 2017 Standard. (Value:
 *        "SQLSERVER_2017_STANDARD")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2017Web The
 *        database version is SQL Server 2017 Web. (Value: "SQLSERVER_2017_WEB")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2019Enterprise
 *        The database version is SQL Server 2019 Enterprise. (Value:
 *        "SQLSERVER_2019_ENTERPRISE")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2019Express
 *        The database version is SQL Server 2019 Express. (Value:
 *        "SQLSERVER_2019_EXPRESS")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2019Standard
 *        The database version is SQL Server 2019 Standard. (Value:
 *        "SQLSERVER_2019_STANDARD")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2019Web The
 *        database version is SQL Server 2019 Web. (Value: "SQLSERVER_2019_WEB")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2022Enterprise
 *        The database version is SQL Server 2022 Enterprise. (Value:
 *        "SQLSERVER_2022_ENTERPRISE")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2022Express
 *        The database version is SQL Server 2022 Express. (Value:
 *        "SQLSERVER_2022_EXPRESS")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2022Standard
 *        The database version is SQL Server 2022 Standard. (Value:
 *        "SQLSERVER_2022_STANDARD")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2022Web The
 *        database version is SQL Server 2022 Web. (Value: "SQLSERVER_2022_WEB")
 */
@property(nonatomic, copy, nullable) NSString *databaseVersion;

/** The dns name of the instance. */
@property(nonatomic, copy, nullable) NSString *dnsName;

/** The assigned IP addresses for the instance. */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_IpMapping *> *ipAddresses;

/** This is always `sql#connectSettings`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Whether PSC connectivity is enabled for this instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pscEnabled;

/**
 *  The cloud region for the instance. For example, `us-central1`,
 *  `europe-west1`. The region cannot be changed after instance creation.
 */
@property(nonatomic, copy, nullable) NSString *region;

/** SSL configuration. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_SslCert *serverCaCert;

/**
 *  Specify what type of CA is used for the server certificate.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_ServerCaMode_CaModeUnspecified CA
 *        mode is unknown. (Value: "CA_MODE_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_ServerCaMode_GoogleManagedCasCa
 *        Google-managed regional CA part of root CA hierarchy hosted on Google
 *        Cloud's Certificate Authority Service (CAS). (Value:
 *        "GOOGLE_MANAGED_CAS_CA")
 *    @arg @c kGTLRSQLAdmin_ConnectSettings_ServerCaMode_GoogleManagedInternalCa
 *        Google-managed self-signed internal CA. (Value:
 *        "GOOGLE_MANAGED_INTERNAL_CA")
 */
@property(nonatomic, copy, nullable) NSString *serverCaMode;

@end


/**
 *  Represents a SQL database on the Cloud SQL instance.
 */
@interface GTLRSQLAdmin_Database : GTLRObject

/** The Cloud SQL charset value. */
@property(nonatomic, copy, nullable) NSString *charset;

/** The Cloud SQL collation value. */
@property(nonatomic, copy, nullable) NSString *collation;

/**
 *  This field is deprecated and will be removed from a future version of the
 *  API.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  The name of the Cloud SQL instance. This does not include the project ID.
 */
@property(nonatomic, copy, nullable) NSString *instance;

/** This is always `sql#database`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the database in the Cloud SQL instance. This does not include
 *  the project ID or instance name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The project ID of the project containing the Cloud SQL database. The Google
 *  apps domain is prefixed if applicable.
 */
@property(nonatomic, copy, nullable) NSString *project;

/** The URI of this resource. */
@property(nonatomic, copy, nullable) NSString *selfLink;

@property(nonatomic, strong, nullable) GTLRSQLAdmin_SqlServerDatabaseDetails *sqlserverDatabaseDetails;

@end


/**
 *  Database flags for Cloud SQL instances.
 */
@interface GTLRSQLAdmin_DatabaseFlags : GTLRObject

/**
 *  The name of the flag. These flags are passed at instance startup, so include
 *  both server options and system variables. Flags are specified with
 *  underscores, not hyphens. For more information, see [Configuring Database
 *  Flags](https://cloud.google.com/sql/docs/mysql/flags) in the Cloud SQL
 *  documentation.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The value of the flag. Boolean flags are set to `on` for true and `off` for
 *  false. This field must be omitted if the flag doesn't take a value.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A Cloud SQL instance resource.
 */
@interface GTLRSQLAdmin_DatabaseInstance : GTLRObject

/** Output only. List all maintenance versions applicable on the instance */
@property(nonatomic, strong, nullable) NSArray<NSString *> *availableMaintenanceVersions;

/**
 *  The backend type. `SECOND_GEN`: Cloud SQL database instance. `EXTERNAL`: A
 *  database server that is not managed by Google. This property is read-only;
 *  use the `tier` property in the `settings` object to determine the database
 *  type.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_BackendType_External On premises
 *        instance. (Value: "EXTERNAL")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_BackendType_FirstGen V1 speckle
 *        instance. (Value: "FIRST_GEN")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_BackendType_SecondGen V2 speckle
 *        instance. (Value: "SECOND_GEN")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_BackendType_SqlBackendTypeUnspecified
 *        This is an unknown backend type for instance. (Value:
 *        "SQL_BACKEND_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *backendType;

/** Connection name of the Cloud SQL instance used in connection strings. */
@property(nonatomic, copy, nullable) NSString *connectionName;

/**
 *  Output only. The time when the instance was created in [RFC
 *  3339](https://tools.ietf.org/html/rfc3339) format, for example
 *  `2012-11-15T16:19:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The current disk usage of the instance in bytes. This property has been
 *  deprecated. Use the "cloudsql.googleapis.com/database/disk/bytes_used"
 *  metric in Cloud Monitoring API instead. Please see [this
 *  announcement](https://groups.google.com/d/msg/google-cloud-sql-announce/I_7-F9EBhT0/BtvFtdFeAgAJ)
 *  for details.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *currentDiskSize GTLR_DEPRECATED;

/**
 *  Output only. Stores the current database version running on the instance
 *  including minor version such as `MYSQL_8_0_18`.
 */
@property(nonatomic, copy, nullable) NSString *databaseInstalledVersion;

/**
 *  The database engine type and version. The `databaseVersion` field cannot be
 *  changed after instance creation.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql51 The
 *        database version is MySQL 5.1. (Value: "MYSQL_5_1")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql55 The
 *        database version is MySQL 5.5. (Value: "MYSQL_5_5")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql56 The
 *        database version is MySQL 5.6. (Value: "MYSQL_5_6")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql57 The
 *        database version is MySQL 5.7. (Value: "MYSQL_5_7")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql80 The
 *        database version is MySQL 8. (Value: "MYSQL_8_0")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8018 The
 *        database major version is MySQL 8.0 and the minor version is 18.
 *        (Value: "MYSQL_8_0_18")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8026 The
 *        database major version is MySQL 8.0 and the minor version is 26.
 *        (Value: "MYSQL_8_0_26")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8027 The
 *        database major version is MySQL 8.0 and the minor version is 27.
 *        (Value: "MYSQL_8_0_27")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8028 The
 *        database major version is MySQL 8.0 and the minor version is 28.
 *        (Value: "MYSQL_8_0_28")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8029 The
 *        database major version is MySQL 8.0 and the minor version is 29.
 *        (Value: "MYSQL_8_0_29")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8030 The
 *        database major version is MySQL 8.0 and the minor version is 30.
 *        (Value: "MYSQL_8_0_30")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8031 The
 *        database major version is MySQL 8.0 and the minor version is 31.
 *        (Value: "MYSQL_8_0_31")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8032 The
 *        database major version is MySQL 8.0 and the minor version is 32.
 *        (Value: "MYSQL_8_0_32")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8033 The
 *        database major version is MySQL 8.0 and the minor version is 33.
 *        (Value: "MYSQL_8_0_33")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8034 The
 *        database major version is MySQL 8.0 and the minor version is 34.
 *        (Value: "MYSQL_8_0_34")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8035 The
 *        database major version is MySQL 8.0 and the minor version is 35.
 *        (Value: "MYSQL_8_0_35")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8036 The
 *        database major version is MySQL 8.0 and the minor version is 36.
 *        (Value: "MYSQL_8_0_36")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8037 The
 *        database major version is MySQL 8.0 and the minor version is 37.
 *        (Value: "MYSQL_8_0_37")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8038 The
 *        database major version is MySQL 8.0 and the minor version is 38.
 *        (Value: "MYSQL_8_0_38")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8039 The
 *        database major version is MySQL 8.0 and the minor version is 39.
 *        (Value: "MYSQL_8_0_39")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8040 The
 *        database major version is MySQL 8.0 and the minor version is 40.
 *        (Value: "MYSQL_8_0_40")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql84 The
 *        database version is MySQL 8.4. (Value: "MYSQL_8_4")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres10 The
 *        database version is PostgreSQL 10. (Value: "POSTGRES_10")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres11 The
 *        database version is PostgreSQL 11. (Value: "POSTGRES_11")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres12 The
 *        database version is PostgreSQL 12. (Value: "POSTGRES_12")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres13 The
 *        database version is PostgreSQL 13. (Value: "POSTGRES_13")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres14 The
 *        database version is PostgreSQL 14. (Value: "POSTGRES_14")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres15 The
 *        database version is PostgreSQL 15. (Value: "POSTGRES_15")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres16 The
 *        database version is PostgreSQL 16. (Value: "POSTGRES_16")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres17 The
 *        database version is PostgreSQL 17. (Value: "POSTGRES_17")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres96 The
 *        database version is PostgreSQL 9.6. (Value: "POSTGRES_9_6")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_SqlDatabaseVersionUnspecified
 *        This is an unknown database version. (Value:
 *        "SQL_DATABASE_VERSION_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2017Enterprise
 *        The database version is SQL Server 2017 Enterprise. (Value:
 *        "SQLSERVER_2017_ENTERPRISE")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2017Express
 *        The database version is SQL Server 2017 Express. (Value:
 *        "SQLSERVER_2017_EXPRESS")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2017Standard
 *        The database version is SQL Server 2017 Standard. (Value:
 *        "SQLSERVER_2017_STANDARD")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2017Web
 *        The database version is SQL Server 2017 Web. (Value:
 *        "SQLSERVER_2017_WEB")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2019Enterprise
 *        The database version is SQL Server 2019 Enterprise. (Value:
 *        "SQLSERVER_2019_ENTERPRISE")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2019Express
 *        The database version is SQL Server 2019 Express. (Value:
 *        "SQLSERVER_2019_EXPRESS")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2019Standard
 *        The database version is SQL Server 2019 Standard. (Value:
 *        "SQLSERVER_2019_STANDARD")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2019Web
 *        The database version is SQL Server 2019 Web. (Value:
 *        "SQLSERVER_2019_WEB")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2022Enterprise
 *        The database version is SQL Server 2022 Enterprise. (Value:
 *        "SQLSERVER_2022_ENTERPRISE")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2022Express
 *        The database version is SQL Server 2022 Express. (Value:
 *        "SQLSERVER_2022_EXPRESS")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2022Standard
 *        The database version is SQL Server 2022 Standard. (Value:
 *        "SQLSERVER_2022_STANDARD")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2022Web
 *        The database version is SQL Server 2022 Web. (Value:
 *        "SQLSERVER_2022_WEB")
 */
@property(nonatomic, copy, nullable) NSString *databaseVersion;

/** Disk encryption configuration specific to an instance. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_DiskEncryptionConfiguration *diskEncryptionConfiguration;

/** Disk encryption status specific to an instance. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_DiskEncryptionStatus *diskEncryptionStatus;

/** Output only. The dns name of the instance. */
@property(nonatomic, copy, nullable) NSString *dnsName;

/**
 *  This field is deprecated and will be removed from a future version of the
 *  API. Use the `settings.settingsVersion` field instead.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** The name and status of the failover replica. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_DatabaseInstance_FailoverReplica *failoverReplica;

/**
 *  The Compute Engine zone that the instance is currently serving from. This
 *  value could be different from the zone that was specified when the instance
 *  was created if the instance has failed over to its secondary zone. WARNING:
 *  Changing this might restart the instance.
 */
@property(nonatomic, copy, nullable) NSString *gceZone;

/** Gemini instance configuration. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_GeminiInstanceConfig *geminiConfig;

/**
 *  The instance type.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_InstanceType_CloudSqlInstance A
 *        regular Cloud SQL instance that is not replicating from a primary
 *        instance. (Value: "CLOUD_SQL_INSTANCE")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_InstanceType_OnPremisesInstance An
 *        instance running on the customer's premises that is not managed by
 *        Cloud SQL. (Value: "ON_PREMISES_INSTANCE")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_InstanceType_ReadReplicaInstance A
 *        Cloud SQL instance acting as a read-replica. (Value:
 *        "READ_REPLICA_INSTANCE")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_InstanceType_SqlInstanceTypeUnspecified
 *        This is an unknown Cloud SQL instance type. (Value:
 *        "SQL_INSTANCE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *instanceType;

/** The assigned IP addresses for the instance. */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_IpMapping *> *ipAddresses;

/**
 *  The IPv6 address assigned to the instance. (Deprecated) This property was
 *  applicable only to First Generation instances.
 */
@property(nonatomic, copy, nullable) NSString *ipv6Address GTLR_DEPRECATED;

/** This is always `sql#instance`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The current software version on the instance. */
@property(nonatomic, copy, nullable) NSString *maintenanceVersion;

/**
 *  The name of the instance which will act as primary in the replication setup.
 */
@property(nonatomic, copy, nullable) NSString *masterInstanceName;

/**
 *  The maximum disk size of the instance in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxDiskSize GTLR_DEPRECATED;

/** Name of the Cloud SQL instance. This does not include the project ID. */
@property(nonatomic, copy, nullable) NSString *name;

/** Configuration specific to on-premises instances. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_OnPremisesConfiguration *onPremisesConfiguration;

/**
 *  This field represents the report generated by the proactive database
 *  wellness job for OutOfDisk issues. * Writers: * the proactive database
 *  wellness job for OOD. * Readers: * the proactive database wellness job
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_SqlOutOfDiskReport *outOfDiskReport;

/** Output only. DEPRECATED: please use write_endpoint instead. */
@property(nonatomic, copy, nullable) NSString *primaryDnsName GTLR_DEPRECATED;

/**
 *  The project ID of the project containing the Cloud SQL instance. The Google
 *  apps domain is prefixed if applicable.
 */
@property(nonatomic, copy, nullable) NSString *project;

/** Output only. The link to service attachment of PSC instance. */
@property(nonatomic, copy, nullable) NSString *pscServiceAttachmentLink;

/**
 *  The geographical region of the Cloud SQL instance. It can be one of the
 *  [regions](https://cloud.google.com/sql/docs/mysql/locations#location-r)
 *  where Cloud SQL operates: For example, `asia-east1`, `europe-west1`, and
 *  `us-central1`. The default value is `us-central1`.
 */
@property(nonatomic, copy, nullable) NSString *region;

/** Configuration specific to failover replicas and read replicas. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ReplicaConfiguration *replicaConfiguration;

/** The replicas of the instance. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *replicaNames;

/**
 *  Optional. A primary instance and disaster recovery (DR) replica pair. A DR
 *  replica is a cross-region replica that you designate for failover in the
 *  event that the primary instance experiences regional failure. Only
 *  applicable to MySQL.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ReplicationCluster *replicationCluster;

/**
 *  Initial root password. Use only on creation. You must set root passwords
 *  before you can connect to PostgreSQL instances.
 */
@property(nonatomic, copy, nullable) NSString *rootPassword;

/**
 *  Output only. This status indicates whether the instance satisfies PZI. The
 *  status is reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzi;

/**
 *  This status indicates whether the instance satisfies PZS. The status is
 *  reserved for future use.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *satisfiesPzs;

/** The start time of any upcoming scheduled maintenance for this instance. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_SqlScheduledMaintenance *scheduledMaintenance;

/**
 *  The Compute Engine zone that the failover instance is currently serving from
 *  for a regional instance. This value could be different from the zone that
 *  was specified when the instance was created if the instance has failed over
 *  to its secondary/failover zone.
 */
@property(nonatomic, copy, nullable) NSString *secondaryGceZone;

/** The URI of this resource. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/** SSL configuration. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_SslCert *serverCaCert;

/**
 *  The service account email address assigned to the instance.\\This property
 *  is read-only.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccountEmailAddress;

/** The user settings. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_Settings *settings;

/**
 *  sqlNetworkArchitecture
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_SqlNetworkArchitecture_NewNetworkArchitecture
 *        The instance uses the new network architecture. (Value:
 *        "NEW_NETWORK_ARCHITECTURE")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_SqlNetworkArchitecture_OldNetworkArchitecture
 *        The instance uses the old network architecture. (Value:
 *        "OLD_NETWORK_ARCHITECTURE")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_SqlNetworkArchitecture_SqlNetworkArchitectureUnspecified
 *        Value "SQL_NETWORK_ARCHITECTURE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *sqlNetworkArchitecture;

/**
 *  The current serving state of the Cloud SQL instance.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_State_Failed The creation of the
 *        instance failed or a fatal error occurred during maintenance. (Value:
 *        "FAILED")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_State_Maintenance The instance is
 *        down for maintenance. (Value: "MAINTENANCE")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_State_OnlineMaintenance Deprecated
 *        (Value: "ONLINE_MAINTENANCE")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_State_PendingCreate The instance is
 *        being created. (Value: "PENDING_CREATE")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_State_PendingDelete The instance is
 *        being deleted. (Value: "PENDING_DELETE")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_State_Runnable The instance is
 *        running, or has been stopped by owner. (Value: "RUNNABLE")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_State_SqlInstanceStateUnspecified
 *        The state of the instance is unknown. (Value:
 *        "SQL_INSTANCE_STATE_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_DatabaseInstance_State_Suspended The instance is not
 *        available, for example due to problems with billing. (Value:
 *        "SUSPENDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** If the instance state is SUSPENDED, the reason for the suspension. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *suspensionReason;

/**
 *  Input only. Whether Cloud SQL is enabled to switch storing point-in-time
 *  recovery log files from a data disk to Cloud Storage.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *switchTransactionLogsToCloudStorageEnabled;

/** Output only. All database versions that are available for upgrade. */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_AvailableDatabaseVersion *> *upgradableDatabaseVersions;

/**
 *  Output only. The dns name of the primary instance in a replication group.
 */
@property(nonatomic, copy, nullable) NSString *writeEndpoint;

@end


/**
 *  The name and status of the failover replica.
 */
@interface GTLRSQLAdmin_DatabaseInstance_FailoverReplica : GTLRObject

/**
 *  The availability status of the failover replica. A false status indicates
 *  that the failover replica is out of sync. The primary instance can only
 *  failover to the failover replica when the status is true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *available;

/**
 *  The name of the failover replica. If specified at instance creation, a
 *  failover replica is created for the instance. The name doesn't include the
 *  project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Database list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRSQLAdmin_DatabasesListResponse : GTLRCollectionObject

/**
 *  List of database resources in the instance.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_Database *> *items;

/** This is always `sql#databasesList`. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Data cache configurations.
 */
@interface GTLRSQLAdmin_DataCacheConfig : GTLRObject

/**
 *  Whether data cache is enabled for the instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dataCacheEnabled;

@end


/**
 *  This context is used to demote an existing standalone instance to be a Cloud
 *  SQL read replica for an external database server.
 */
@interface GTLRSQLAdmin_DemoteContext : GTLRObject

/** This is always `sql#demoteContext`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Required. The name of the instance which acts as the on-premises primary
 *  instance in the replication setup.
 */
@property(nonatomic, copy, nullable) NSString *sourceRepresentativeInstanceName;

@end


/**
 *  Read-replica configuration for connecting to the on-premises primary
 *  instance.
 */
@interface GTLRSQLAdmin_DemoteMasterConfiguration : GTLRObject

/** This is always `sql#demoteMasterConfiguration`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  MySQL specific configuration when replicating from a MySQL on-premises
 *  primary instance. Replication configuration information such as the
 *  username, password, certificates, and keys are not stored in the instance
 *  metadata. The configuration information is used only to set up the
 *  replication connection and is stored by MySQL in a file named `master.info`
 *  in the data directory.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_DemoteMasterMySqlReplicaConfiguration *mysqlReplicaConfiguration;

@end


/**
 *  Database instance demote primary instance context.
 */
@interface GTLRSQLAdmin_DemoteMasterContext : GTLRObject

/** This is always `sql#demoteMasterContext`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the instance which will act as on-premises primary instance in
 *  the replication setup.
 */
@property(nonatomic, copy, nullable) NSString *masterInstanceName;

/**
 *  Configuration specific to read-replicas replicating from the on-premises
 *  primary instance.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_DemoteMasterConfiguration *replicaConfiguration;

/**
 *  Flag to skip replication setup on the instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipReplicationSetup;

/**
 *  Verify the GTID consistency for demote operation. Default value: `True`.
 *  Setting this flag to `false` enables you to bypass the GTID consistency
 *  check between on-premises primary instance and Cloud SQL instance during the
 *  demotion operation but also exposes you to the risk of future replication
 *  failures. Change the value only if you know the reason for the GTID
 *  divergence and are confident that doing so will not cause any replication
 *  issues.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verifyGtidConsistency;

@end


/**
 *  Read-replica configuration specific to MySQL databases.
 */
@interface GTLRSQLAdmin_DemoteMasterMySqlReplicaConfiguration : GTLRObject

/** PEM representation of the trusted CA's x509 certificate. */
@property(nonatomic, copy, nullable) NSString *caCertificate;

/** PEM representation of the replica's x509 certificate. */
@property(nonatomic, copy, nullable) NSString *clientCertificate;

/**
 *  PEM representation of the replica's private key. The corresponsing public
 *  key is encoded in the client's certificate. The format of the replica's
 *  private key can be either PKCS #1 or PKCS #8.
 */
@property(nonatomic, copy, nullable) NSString *clientKey;

/** This is always `sql#demoteMasterMysqlReplicaConfiguration`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The password for the replication connection. */
@property(nonatomic, copy, nullable) NSString *password;

/** The username for the replication connection. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  Deny maintenance Periods. This specifies a date range during when all CSA
 *  rollout will be denied.
 */
@interface GTLRSQLAdmin_DenyMaintenancePeriod : GTLRObject

/**
 *  "deny maintenance period" end date. If the year of the end date is empty,
 *  the year of the start date also must be empty. In this case, it means the no
 *  maintenance interval recurs every year. The date is in format yyyy-mm-dd
 *  i.e., 2020-11-01, or mm-dd, i.e., 11-01
 */
@property(nonatomic, copy, nullable) NSString *endDate;

/**
 *  "deny maintenance period" start date. If the year of the start date is
 *  empty, the year of the end date also must be empty. In this case, it means
 *  the deny maintenance period recurs every year. The date is in format
 *  yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01
 */
@property(nonatomic, copy, nullable) NSString *startDate;

/**
 *  Time in UTC when the "deny maintenance period" starts on start_date and ends
 *  on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00
 */
@property(nonatomic, copy, nullable) NSString *time;

@end


/**
 *  Disk encryption configuration for an instance.
 */
@interface GTLRSQLAdmin_DiskEncryptionConfiguration : GTLRObject

/** This is always `sql#diskEncryptionConfiguration`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Resource name of KMS key for disk encryption */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

@end


/**
 *  Disk encryption status for an instance.
 */
@interface GTLRSQLAdmin_DiskEncryptionStatus : GTLRObject

/** This is always `sql#diskEncryptionStatus`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** KMS key version used to encrypt the Cloud SQL instance resource */
@property(nonatomic, copy, nullable) NSString *kmsKeyVersionName;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRSQLAdmin_Empty : GTLRObject
@end


/**
 *  Database instance export context.
 */
@interface GTLRSQLAdmin_ExportContext : GTLRObject

/** Options for exporting BAK files (SQL Server-only) */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ExportContext_BakExportOptions *bakExportOptions;

/**
 *  Options for exporting data as CSV. `MySQL` and `PostgreSQL` instances only.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ExportContext_CsvExportOptions *csvExportOptions;

/**
 *  Databases to be exported. `MySQL instances:` If `fileType` is `SQL` and no
 *  database is specified, all databases are exported, except for the `mysql`
 *  system database. If `fileType` is `CSV`, you can specify one database,
 *  either by using this property or by using the `csvExportOptions.selectQuery`
 *  property, which takes precedence over this property. `PostgreSQL instances:`
 *  You must specify one database to be exported. If `fileType` is `CSV`, this
 *  database must match the one specified in the `csvExportOptions.selectQuery`
 *  property. `SQL Server instances:` You must specify one database to be
 *  exported, and the `fileType` must be `BAK`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *databases;

/**
 *  The file type for the specified uri.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_ExportContext_FileType_Bak Value "BAK"
 *    @arg @c kGTLRSQLAdmin_ExportContext_FileType_Csv File in CSV format.
 *        (Value: "CSV")
 *    @arg @c kGTLRSQLAdmin_ExportContext_FileType_Sql File containing SQL
 *        statements. (Value: "SQL")
 *    @arg @c kGTLRSQLAdmin_ExportContext_FileType_SqlFileTypeUnspecified
 *        Unknown file type. (Value: "SQL_FILE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *fileType;

/** This is always `sql#exportContext`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Option for export offload.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offload;

/** Options for exporting data as SQL statements. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ExportContext_SqlExportOptions *sqlExportOptions;

/**
 *  The path to the file in Google Cloud Storage where the export will be
 *  stored. The URI is in the form `gs://bucketName/fileName`. If the file
 *  already exists, the request succeeds, but the operation fails. If `fileType`
 *  is `SQL` and the filename ends with .gz, the contents are compressed.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Options for exporting BAK files (SQL Server-only)
 */
@interface GTLRSQLAdmin_ExportContext_BakExportOptions : GTLRObject

/**
 *  Type of this bak file will be export, FULL or DIFF, SQL Server only
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_ExportContext_BakExportOptions_BakType_BakTypeUnspecified
 *        Default type. (Value: "BAK_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_ExportContext_BakExportOptions_BakType_Diff
 *        Differential backup. (Value: "DIFF")
 *    @arg @c kGTLRSQLAdmin_ExportContext_BakExportOptions_BakType_Full Full
 *        backup. (Value: "FULL")
 *    @arg @c kGTLRSQLAdmin_ExportContext_BakExportOptions_BakType_Tlog
 *        Transaction Log backup (Value: "TLOG")
 */
@property(nonatomic, copy, nullable) NSString *bakType;

/**
 *  Deprecated: copy_only is deprecated. Use differential_base instead
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *copyOnly GTLR_DEPRECATED NS_RETURNS_NOT_RETAINED;

/**
 *  Whether or not the backup can be used as a differential base copy_only
 *  backup can not be served as differential base
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *differentialBase;

/**
 *  Optional. The end timestamp when transaction log will be included in the
 *  export operation. [RFC 3339](https://tools.ietf.org/html/rfc3339) format
 *  (for example, `2023-10-01T16:19:00.094`) in UTC. When omitted, all available
 *  logs until current time will be included. Only applied to Cloud SQL for SQL
 *  Server.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *exportLogEndTime;

/**
 *  Optional. The begin timestamp when transaction log will be included in the
 *  export operation. [RFC 3339](https://tools.ietf.org/html/rfc3339) format
 *  (for example, `2023-10-01T16:19:00.094`) in UTC. When omitted, all available
 *  logs from the beginning of retention period will be included. Only applied
 *  to Cloud SQL for SQL Server.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *exportLogStartTime;

/**
 *  Option for specifying how many stripes to use for the export. If blank, and
 *  the value of the striped field is true, the number of stripes is
 *  automatically chosen.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *stripeCount;

/**
 *  Whether or not the export should be striped.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *striped;

@end


/**
 *  Options for exporting data as CSV. `MySQL` and `PostgreSQL` instances only.
 */
@interface GTLRSQLAdmin_ExportContext_CsvExportOptions : GTLRObject

/**
 *  Specifies the character that should appear before a data character that
 *  needs to be escaped.
 */
@property(nonatomic, copy, nullable) NSString *escapeCharacter;

/**
 *  Specifies the character that separates columns within each row (line) of the
 *  file.
 */
@property(nonatomic, copy, nullable) NSString *fieldsTerminatedBy;

/**
 *  This is used to separate lines. If a line does not contain all fields, the
 *  rest of the columns are set to their default values.
 */
@property(nonatomic, copy, nullable) NSString *linesTerminatedBy;

/** Specifies the quoting character to be used when a data value is quoted. */
@property(nonatomic, copy, nullable) NSString *quoteCharacter;

/** The select query used to extract the data. */
@property(nonatomic, copy, nullable) NSString *selectQuery;

@end


/**
 *  Options for exporting data as SQL statements.
 */
@interface GTLRSQLAdmin_ExportContext_SqlExportOptions : GTLRObject

/** Options for exporting from MySQL. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ExportContext_SqlExportOptions_MysqlExportOptions *mysqlExportOptions;

/**
 *  Optional. Whether or not the export should be parallel.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *parallel;

/** Options for exporting from a Cloud SQL for PostgreSQL instance. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ExportContext_SqlExportOptions_PostgresExportOptions *postgresExportOptions;

/**
 *  Export only schemas.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *schemaOnly;

/**
 *  Tables to export, or that were exported, from the specified database. If you
 *  specify tables, specify one and only one database. For PostgreSQL instances,
 *  you can specify only one table.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tables;

/**
 *  Optional. The number of threads to use for parallel export.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *threads;

@end


/**
 *  Options for exporting from MySQL.
 */
@interface GTLRSQLAdmin_ExportContext_SqlExportOptions_MysqlExportOptions : GTLRObject

/**
 *  Option to include SQL statement required to set up replication. If set to
 *  `1`, the dump file includes a CHANGE MASTER TO statement with the binary log
 *  coordinates, and --set-gtid-purged is set to ON. If set to `2`, the CHANGE
 *  MASTER TO statement is written as a SQL comment and has no effect. If set to
 *  any value other than `1`, --set-gtid-purged is set to OFF.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *masterData;

@end


/**
 *  Options for exporting from a Cloud SQL for PostgreSQL instance.
 */
@interface GTLRSQLAdmin_ExportContext_SqlExportOptions_PostgresExportOptions : GTLRObject

/**
 *  Optional. Use this option to include DROP SQL statements. These statements
 *  are used to delete database objects before running the import operation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *clean;

/**
 *  Optional. Option to include an IF EXISTS SQL statement with each DROP
 *  statement produced by clean.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ifExists;

@end


/**
 *  Database instance failover context.
 */
@interface GTLRSQLAdmin_FailoverContext : GTLRObject

/** This is always `sql#failoverContext`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The current settings version of this instance. Request will be rejected if
 *  this version doesn't match the current settings version.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *settingsVersion;

@end


/**
 *  A flag resource.
 */
@interface GTLRSQLAdmin_Flag : GTLRObject

/**
 *  Use this field if only certain integers are accepted. Can be combined with
 *  min_value and max_value to add additional values.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *allowedIntValues;

/** For `STRING` flags, a list of strings that the value can be set to. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedStringValues;

/**
 *  The database version this flag applies to. Can be MySQL instances:
 *  `MYSQL_8_0`, `MYSQL_8_0_18`, `MYSQL_8_0_26`, `MYSQL_5_7`, or `MYSQL_5_6`.
 *  PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11` or
 *  `POSTGRES_12`. SQL Server instances: `SQLSERVER_2017_STANDARD`,
 *  `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`,
 *  `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`,
 *  `SQLSERVER_2019_EXPRESS`, or `SQLSERVER_2019_WEB`. See [the complete
 *  list](/sql/docs/mysql/admin-api/rest/v1/SqlDatabaseVersion).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *appliesTo;

/**
 *  Whether or not the flag is considered in beta.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inBeta;

/** This is always `sql#flag`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  For `INTEGER` flags, the maximum allowed value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxValue;

/**
 *  For `INTEGER` flags, the minimum allowed value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minValue;

/**
 *  This is the name of the flag. Flag names always use underscores, not
 *  hyphens, for example: `max_allowed_packet`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Indicates whether changing this flag will trigger a database restart. Only
 *  applicable to Second Generation instances.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requiresRestart;

/**
 *  The type of the flag. Flags are typed to being `BOOLEAN`, `STRING`,
 *  `INTEGER` or `NONE`. `NONE` is used for flags that do not take a value, such
 *  as `skip_grant_tables`.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_Flag_Type_Boolean Boolean type flag. (Value:
 *        "BOOLEAN")
 *    @arg @c kGTLRSQLAdmin_Flag_Type_Float Float type flag. (Value: "FLOAT")
 *    @arg @c kGTLRSQLAdmin_Flag_Type_Integer Integer type flag. (Value:
 *        "INTEGER")
 *    @arg @c kGTLRSQLAdmin_Flag_Type_MysqlTimezoneOffset Type introduced
 *        specially for MySQL TimeZone offset. Accept a string value with the
 *        format [-12:59, 13:00]. (Value: "MYSQL_TIMEZONE_OFFSET")
 *    @arg @c kGTLRSQLAdmin_Flag_Type_None Flag type used for a server startup
 *        option. (Value: "NONE")
 *    @arg @c kGTLRSQLAdmin_Flag_Type_RepeatedString Comma-separated list of the
 *        strings in a SqlFlagType enum. (Value: "REPEATED_STRING")
 *    @arg @c kGTLRSQLAdmin_Flag_Type_SqlFlagTypeUnspecified This is an unknown
 *        flag type. (Value: "SQL_FLAG_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_Flag_Type_String String type flag. (Value: "STRING")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Flags list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRSQLAdmin_FlagsListResponse : GTLRCollectionObject

/**
 *  List of flags.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_Flag *> *items;

/** This is always `sql#flagsList`. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Gemini instance configuration.
 */
@interface GTLRSQLAdmin_GeminiInstanceConfig : GTLRObject

/**
 *  Output only. Whether the active query is enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *activeQueryEnabled;

/**
 *  Output only. Whether Gemini is enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *entitled;

/**
 *  Output only. Whether the flag recommender is enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *flagRecommenderEnabled;

/**
 *  Output only. Whether the vacuum management is enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *googleVacuumMgmtEnabled;

/**
 *  Output only. Whether the index advisor is enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *indexAdvisorEnabled;

/**
 *  Output only. Whether canceling the out-of-memory (OOM) session is enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *oomSessionCancelEnabled;

@end


/**
 *  Ephemeral certificate creation request.
 */
@interface GTLRSQLAdmin_GenerateEphemeralCertRequest : GTLRObject

/** Optional. Access token to include in the signed certificate. */
@property(nonatomic, copy, nullable) NSString *accessToken;

/** PEM encoded public key to include in the signed certificate. */
@property(nonatomic, copy, nullable) NSString *publicKey;

/**
 *  Optional. Optional snapshot read timestamp to trade freshness for
 *  performance.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *readTime;

/** Optional. If set, it will contain the cert valid duration. */
@property(nonatomic, strong, nullable) GTLRDuration *validDuration;

@end


/**
 *  Ephemeral certificate creation request.
 */
@interface GTLRSQLAdmin_GenerateEphemeralCertResponse : GTLRObject

/** Generated cert */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_SslCert *ephemeralCert;

@end


/**
 *  Database instance import context.
 */
@interface GTLRSQLAdmin_ImportContext : GTLRObject

/** Import parameters specific to SQL Server .BAK files */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ImportContext_BakImportOptions *bakImportOptions;

/** Options for importing data as CSV. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ImportContext_CsvImportOptions *csvImportOptions;

/**
 *  The target database for the import. If `fileType` is `SQL`, this field is
 *  required only if the import file does not specify a database, and is
 *  overridden by any database specification in the import file. If `fileType`
 *  is `CSV`, one database must be specified.
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  The file type for the specified uri.\\`SQL`: The file contains SQL
 *  statements. \\`CSV`: The file contains CSV data.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_ImportContext_FileType_Bak Value "BAK"
 *    @arg @c kGTLRSQLAdmin_ImportContext_FileType_Csv File in CSV format.
 *        (Value: "CSV")
 *    @arg @c kGTLRSQLAdmin_ImportContext_FileType_Sql File containing SQL
 *        statements. (Value: "SQL")
 *    @arg @c kGTLRSQLAdmin_ImportContext_FileType_SqlFileTypeUnspecified
 *        Unknown file type. (Value: "SQL_FILE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *fileType;

/**
 *  The PostgreSQL user for this import operation. PostgreSQL instances only.
 */
@property(nonatomic, copy, nullable) NSString *importUser;

/** This is always `sql#importContext`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Optional. Options for importing data from SQL statements. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ImportContext_SqlImportOptions *sqlImportOptions;

/**
 *  Path to the import file in Cloud Storage, in the form
 *  `gs://bucketName/fileName`. Compressed gzip files (.gz) are supported when
 *  `fileType` is `SQL`. The instance must have write permissions to the bucket
 *  and read access to the file.
 */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Import parameters specific to SQL Server .BAK files
 */
@interface GTLRSQLAdmin_ImportContext_BakImportOptions : GTLRObject

/**
 *  Type of the bak content, FULL or DIFF
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_ImportContext_BakImportOptions_BakType_BakTypeUnspecified
 *        Default type. (Value: "BAK_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_ImportContext_BakImportOptions_BakType_Diff
 *        Differential backup. (Value: "DIFF")
 *    @arg @c kGTLRSQLAdmin_ImportContext_BakImportOptions_BakType_Full Full
 *        backup. (Value: "FULL")
 *    @arg @c kGTLRSQLAdmin_ImportContext_BakImportOptions_BakType_Tlog
 *        Transaction Log backup (Value: "TLOG")
 */
@property(nonatomic, copy, nullable) NSString *bakType;

@property(nonatomic, strong, nullable) GTLRSQLAdmin_ImportContext_BakImportOptions_EncryptionOptions *encryptionOptions;

/**
 *  Whether or not the backup importing will restore database with NORECOVERY
 *  option Applies only to Cloud SQL for SQL Server.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *noRecovery;

/**
 *  Whether or not the backup importing request will just bring database online
 *  without downloading Bak content only one of "no_recovery" and
 *  "recovery_only" can be true otherwise error will return. Applies only to
 *  Cloud SQL for SQL Server.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recoveryOnly;

/**
 *  Optional. The timestamp when the import should stop. This timestamp is in
 *  the [RFC 3339](https://tools.ietf.org/html/rfc3339) format (for example,
 *  `2023-10-01T16:19:00.094`). This field is equivalent to the STOPAT keyword
 *  and applies to Cloud SQL for SQL Server only.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *stopAt;

/**
 *  Optional. The marked transaction where the import should stop. This field is
 *  equivalent to the STOPATMARK keyword and applies to Cloud SQL for SQL Server
 *  only.
 */
@property(nonatomic, copy, nullable) NSString *stopAtMark;

/**
 *  Whether or not the backup set being restored is striped. Applies only to
 *  Cloud SQL for SQL Server.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *striped;

@end


/**
 *  Options for importing data as CSV.
 */
@interface GTLRSQLAdmin_ImportContext_CsvImportOptions : GTLRObject

/**
 *  The columns to which CSV data is imported. If not specified, all columns of
 *  the database table are loaded with CSV data.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *columns;

/**
 *  Specifies the character that should appear before a data character that
 *  needs to be escaped.
 */
@property(nonatomic, copy, nullable) NSString *escapeCharacter;

/**
 *  Specifies the character that separates columns within each row (line) of the
 *  file.
 */
@property(nonatomic, copy, nullable) NSString *fieldsTerminatedBy;

/**
 *  This is used to separate lines. If a line does not contain all fields, the
 *  rest of the columns are set to their default values.
 */
@property(nonatomic, copy, nullable) NSString *linesTerminatedBy;

/** Specifies the quoting character to be used when a data value is quoted. */
@property(nonatomic, copy, nullable) NSString *quoteCharacter;

/** The table to which CSV data is imported. */
@property(nonatomic, copy, nullable) NSString *table;

@end


/**
 *  Optional. Options for importing data from SQL statements.
 */
@interface GTLRSQLAdmin_ImportContext_SqlImportOptions : GTLRObject

/**
 *  Optional. Whether or not the import should be parallel.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *parallel;

/**
 *  Optional. Options for importing from a Cloud SQL for PostgreSQL instance.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ImportContext_SqlImportOptions_PostgresImportOptions *postgresImportOptions;

/**
 *  Optional. The number of threads to use for parallel import.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *threads;

@end


/**
 *  GTLRSQLAdmin_ImportContext_BakImportOptions_EncryptionOptions
 */
@interface GTLRSQLAdmin_ImportContext_BakImportOptions_EncryptionOptions : GTLRObject

/**
 *  Path to the Certificate (.cer) in Cloud Storage, in the form
 *  `gs://bucketName/fileName`. The instance must have write permissions to the
 *  bucket and read access to the file.
 */
@property(nonatomic, copy, nullable) NSString *certPath;

/** Password that encrypts the private key */
@property(nonatomic, copy, nullable) NSString *pvkPassword;

/**
 *  Path to the Certificate Private Key (.pvk) in Cloud Storage, in the form
 *  `gs://bucketName/fileName`. The instance must have write permissions to the
 *  bucket and read access to the file.
 */
@property(nonatomic, copy, nullable) NSString *pvkPath;

@end


/**
 *  Optional. Options for importing from a Cloud SQL for PostgreSQL instance.
 */
@interface GTLRSQLAdmin_ImportContext_SqlImportOptions_PostgresImportOptions : GTLRObject

/**
 *  Optional. The --clean flag for the pg_restore utility. This flag applies
 *  only if you enabled Cloud SQL to import files in parallel.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *clean;

/**
 *  Optional. The --if-exists flag for the pg_restore utility. This flag applies
 *  only if you enabled Cloud SQL to import files in parallel.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ifExists;

@end


/**
 *  Insights configuration. This specifies when Cloud SQL Insights feature is
 *  enabled and optional configuration.
 */
@interface GTLRSQLAdmin_InsightsConfig : GTLRObject

/**
 *  Whether Query Insights feature is enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *queryInsightsEnabled;

/**
 *  Number of query execution plans captured by Insights per minute for all
 *  queries combined. Default is 5.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *queryPlansPerMinute;

/**
 *  Maximum query length stored in bytes. Default value: 1024 bytes. Range:
 *  256-4500 bytes. Query length more than this field value will be truncated to
 *  this value. When unset, query length will be the default value. Changing
 *  query length will restart the database.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *queryStringLength;

/**
 *  Whether Query Insights will record application tags from query when enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recordApplicationTags;

/**
 *  Whether Query Insights will record client address when enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *recordClientAddress;

@end


/**
 *  Reference to another Cloud SQL instance.
 */
@interface GTLRSQLAdmin_InstanceReference : GTLRObject

/**
 *  The name of the Cloud SQL instance being referenced. This does not include
 *  the project ID.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The project ID of the Cloud SQL instance being referenced. The default is
 *  the same project ID as the instance references it.
 */
@property(nonatomic, copy, nullable) NSString *project;

/** The region of the Cloud SQL instance being referenced. */
@property(nonatomic, copy, nullable) NSString *region;

@end


/**
 *  Request to acquire a lease for SSRS.
 */
@interface GTLRSQLAdmin_InstancesAcquireSsrsLeaseRequest : GTLRObject

/** Contains details about the acquire SSRS lease operation. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_AcquireSsrsLeaseContext *acquireSsrsLeaseContext;

@end


/**
 *  Database instance clone request.
 */
@interface GTLRSQLAdmin_InstancesCloneRequest : GTLRObject

/** Contains details about the clone operation. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_CloneContext *cloneContext;

@end


/**
 *  Database demote primary instance request.
 */
@interface GTLRSQLAdmin_InstancesDemoteMasterRequest : GTLRObject

/** Contains details about the demoteMaster operation. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_DemoteMasterContext *demoteMasterContext;

@end


/**
 *  This request is used to demote an existing standalone instance to be a Cloud
 *  SQL read replica for an external database server.
 */
@interface GTLRSQLAdmin_InstancesDemoteRequest : GTLRObject

/** Required. Contains details about the demote operation. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_DemoteContext *demoteContext;

@end


/**
 *  Database instance export request.
 */
@interface GTLRSQLAdmin_InstancesExportRequest : GTLRObject

/** Contains details about the export operation. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ExportContext *exportContext;

@end


/**
 *  Instance failover request.
 */
@interface GTLRSQLAdmin_InstancesFailoverRequest : GTLRObject

/** Failover Context. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_FailoverContext *failoverContext;

@end


/**
 *  Database instance import request.
 */
@interface GTLRSQLAdmin_InstancesImportRequest : GTLRObject

/** Contains details about the import operation. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ImportContext *importContext;

@end


/**
 *  Database instances list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSQLAdmin_InstancesListResponse : GTLRCollectionObject

/**
 *  List of database instance resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_DatabaseInstance *> *items;

/** This is always `sql#instancesList`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The continuation token, used to page through large result sets. Provide this
 *  value in a subsequent request to return the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** List of warnings that occurred while handling the request. */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_ApiWarning *> *warnings;

@end


/**
 *  Instances ListServerCas response.
 */
@interface GTLRSQLAdmin_InstancesListServerCasResponse : GTLRObject

@property(nonatomic, copy, nullable) NSString *activeVersion;

/** List of server CA certificates for the instance. */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_SslCert *> *certs;

/** This is always `sql#instancesListServerCas`. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Instances ListServerCertificates response.
 */
@interface GTLRSQLAdmin_InstancesListServerCertificatesResponse : GTLRObject

/** The `sha1_fingerprint` of the active certificate from `server_certs`. */
@property(nonatomic, copy, nullable) NSString *activeVersion;

/** List of server CA certificates for the instance. */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_SslCert *> *caCerts;

/** This is always `sql#instancesListServerCertificates`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  List of server certificates for the instance, signed by the corresponding CA
 *  from the `ca_certs` list.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_SslCert *> *serverCerts;

@end


/**
 *  Database Instance reencrypt request.
 */
@interface GTLRSQLAdmin_InstancesReencryptRequest : GTLRObject

/** Configuration specific to backup re-encryption */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_BackupReencryptionConfig *backupReencryptionConfig;

@end


/**
 *  Database instance restore backup request.
 */
@interface GTLRSQLAdmin_InstancesRestoreBackupRequest : GTLRObject

/** Parameters required to perform the restore backup operation. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_RestoreBackupContext *restoreBackupContext;

@end


/**
 *  Rotate server CA request.
 */
@interface GTLRSQLAdmin_InstancesRotateServerCaRequest : GTLRObject

/** Contains details about the rotate server CA operation. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_RotateServerCaContext *rotateServerCaContext;

@end


/**
 *  Rotate server certificate request.
 */
@interface GTLRSQLAdmin_InstancesRotateServerCertificateRequest : GTLRObject

/**
 *  Optional. Contains details about the rotate server certificate operation.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_RotateServerCertificateContext *rotateServerCertificateContext;

@end


/**
 *  Instance truncate log request.
 */
@interface GTLRSQLAdmin_InstancesTruncateLogRequest : GTLRObject

/** Contains details about the truncate log operation. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_TruncateLogContext *truncateLogContext;

@end


/**
 *  IP Management configuration.
 */
@interface GTLRSQLAdmin_IpConfiguration : GTLRObject

/**
 *  The name of the allocated ip range for the private ip Cloud SQL instance.
 *  For example: "google-managed-services-default". If set, the instance ip will
 *  be created in the allocated range. The range name must comply with [RFC
 *  1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be
 *  1-63 characters long and match the regular expression
 *  `[a-z]([-a-z0-9]*[a-z0-9])?.`
 */
@property(nonatomic, copy, nullable) NSString *allocatedIpRange;

/**
 *  The list of external networks that are allowed to connect to the instance
 *  using the IP. In 'CIDR' notation, also known as 'slash' notation (for
 *  example: `157.197.200.0/24`).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_AclEntry *> *authorizedNetworks;

/**
 *  Controls connectivity to private IP instances from Google services, such as
 *  BigQuery.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enablePrivatePathForGoogleCloudServices;

/**
 *  Whether the instance is assigned a public IP address or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ipv4Enabled;

/**
 *  The resource link for the VPC network from which the Cloud SQL instance is
 *  accessible for private IP. For example,
 *  `/projects/myProject/global/networks/default`. This setting can be updated,
 *  but it cannot be removed after it is set.
 */
@property(nonatomic, copy, nullable) NSString *privateNetwork;

/** PSC settings for this instance. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_PscConfig *pscConfig;

/**
 *  Use `ssl_mode` instead. Whether SSL/TLS connections over IP are enforced. If
 *  set to false, then allow both non-SSL/non-TLS and SSL/TLS connections. For
 *  SSL/TLS connections, the client certificate won't be verified. If set to
 *  true, then only allow connections encrypted with SSL/TLS and with valid
 *  client certificates. If you want to enforce SSL/TLS without enforcing the
 *  requirement for valid client certificates, then use the `ssl_mode` flag
 *  instead of the `require_ssl` flag.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requireSsl;

/**
 *  Specify what type of CA is used for the server certificate.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_IpConfiguration_ServerCaMode_CaModeUnspecified CA
 *        mode is unknown. (Value: "CA_MODE_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_IpConfiguration_ServerCaMode_GoogleManagedCasCa
 *        Google-managed regional CA part of root CA hierarchy hosted on Google
 *        Cloud's Certificate Authority Service (CAS). (Value:
 *        "GOOGLE_MANAGED_CAS_CA")
 *    @arg @c kGTLRSQLAdmin_IpConfiguration_ServerCaMode_GoogleManagedInternalCa
 *        Google-managed self-signed internal CA. (Value:
 *        "GOOGLE_MANAGED_INTERNAL_CA")
 */
@property(nonatomic, copy, nullable) NSString *serverCaMode;

/**
 *  Specify how SSL/TLS is enforced in database connections. If you must use the
 *  `require_ssl` flag for backward compatibility, then only the following value
 *  pairs are valid: For PostgreSQL and MySQL: *
 *  `ssl_mode=ALLOW_UNENCRYPTED_AND_ENCRYPTED` and `require_ssl=false` *
 *  `ssl_mode=ENCRYPTED_ONLY` and `require_ssl=false` *
 *  `ssl_mode=TRUSTED_CLIENT_CERTIFICATE_REQUIRED` and `require_ssl=true` For
 *  SQL Server: * `ssl_mode=ALLOW_UNENCRYPTED_AND_ENCRYPTED` and
 *  `require_ssl=false` * `ssl_mode=ENCRYPTED_ONLY` and `require_ssl=true` The
 *  value of `ssl_mode` has priority over the value of `require_ssl`. For
 *  example, for the pair `ssl_mode=ENCRYPTED_ONLY` and `require_ssl=false`,
 *  `ssl_mode=ENCRYPTED_ONLY` means accept only SSL connections, while
 *  `require_ssl=false` means accept both non-SSL and SSL connections. In this
 *  case, MySQL and PostgreSQL databases respect `ssl_mode` and accepts only SSL
 *  connections.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_IpConfiguration_SslMode_AllowUnencryptedAndEncrypted
 *        Allow non-SSL/non-TLS and SSL/TLS connections. For SSL connections to
 *        MySQL and PostgreSQL, the client certificate isn't verified. When this
 *        value is used, the legacy `require_ssl` flag must be false or cleared
 *        to avoid a conflict between the values of the two flags. (Value:
 *        "ALLOW_UNENCRYPTED_AND_ENCRYPTED")
 *    @arg @c kGTLRSQLAdmin_IpConfiguration_SslMode_EncryptedOnly Only allow
 *        connections encrypted with SSL/TLS. For SSL connections to MySQL and
 *        PostgreSQL, the client certificate isn't verified. When this value is
 *        used, the legacy `require_ssl` flag must be false or cleared to avoid
 *        a conflict between the values of the two flags. (Value:
 *        "ENCRYPTED_ONLY")
 *    @arg @c kGTLRSQLAdmin_IpConfiguration_SslMode_SslModeUnspecified The SSL
 *        mode is unknown. (Value: "SSL_MODE_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_IpConfiguration_SslMode_TrustedClientCertificateRequired
 *        Only allow connections encrypted with SSL/TLS and with valid client
 *        certificates. When this value is used, the legacy `require_ssl` flag
 *        must be true or cleared to avoid the conflict between values of two
 *        flags. PostgreSQL clients or users that connect using IAM database
 *        authentication must use either the [Cloud SQL Auth
 *        Proxy](https://cloud.google.com/sql/docs/postgres/connect-auth-proxy)
 *        or [Cloud SQL
 *        Connectors](https://cloud.google.com/sql/docs/postgres/connect-connectors)
 *        to enforce client identity verification. Only applicable to MySQL and
 *        PostgreSQL. Not applicable to SQL Server. (Value:
 *        "TRUSTED_CLIENT_CERTIFICATE_REQUIRED")
 */
@property(nonatomic, copy, nullable) NSString *sslMode;

@end


/**
 *  Database instance IP mapping
 */
@interface GTLRSQLAdmin_IpMapping : GTLRObject

/** The IP address assigned. */
@property(nonatomic, copy, nullable) NSString *ipAddress;

/**
 *  The due time for this IP to be retired in [RFC
 *  3339](https://tools.ietf.org/html/rfc3339) format, for example
 *  `2012-11-15T16:19:00.094Z`. This field is only available when the IP is
 *  scheduled to be retired.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *timeToRetire;

/**
 *  The type of this IP address. A `PRIMARY` address is a public address that
 *  can accept incoming connections. A `PRIVATE` address is a private address
 *  that can accept incoming connections. An `OUTGOING` address is the source
 *  address of connections originating from the instance, if supported.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_IpMapping_Type_Migrated1stGen V1 IP of a migrated
 *        instance. We want the user to decommission this IP as soon as the
 *        migration is complete. Note: V1 instances with V1 ip addresses will be
 *        counted as PRIMARY. (Value: "MIGRATED_1ST_GEN")
 *    @arg @c kGTLRSQLAdmin_IpMapping_Type_Outgoing Source IP address of the
 *        connection a read replica establishes to its external primary
 *        instance. This IP address can be allowlisted by the customer in case
 *        it has a firewall that filters incoming connection to its on premises
 *        primary instance. (Value: "OUTGOING")
 *    @arg @c kGTLRSQLAdmin_IpMapping_Type_Primary IP address the customer is
 *        supposed to connect to. Usually this is the load balancer's IP address
 *        (Value: "PRIMARY")
 *    @arg @c kGTLRSQLAdmin_IpMapping_Type_Private Private IP used when using
 *        private IPs and network peering. (Value: "PRIVATE")
 *    @arg @c kGTLRSQLAdmin_IpMapping_Type_SqlIpAddressTypeUnspecified This is
 *        an unknown IP address type. (Value: "SQL_IP_ADDRESS_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Preferred location. This specifies where a Cloud SQL instance is located.
 *  Note that if the preferred location is not available, the instance will be
 *  located as close as possible within the region. Only one location may be
 *  specified.
 */
@interface GTLRSQLAdmin_LocationPreference : GTLRObject

/**
 *  The App Engine application to follow, it must be in the same region as the
 *  Cloud SQL instance. WARNING: Changing this might restart the instance.
 */
@property(nonatomic, copy, nullable) NSString *followGaeApplication GTLR_DEPRECATED;

/** This is always `sql#locationPreference`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The preferred Compute Engine zone for the secondary/failover (for example:
 *  us-central1-a, us-central1-b, etc.). To disable this field, set it to
 *  'no_secondary_zone'.
 */
@property(nonatomic, copy, nullable) NSString *secondaryZone;

/**
 *  The preferred Compute Engine zone (for example: us-central1-a,
 *  us-central1-b, etc.). WARNING: Changing this might restart the instance.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  Maintenance window. This specifies when a Cloud SQL instance is restarted
 *  for system maintenance purposes.
 */
@interface GTLRSQLAdmin_MaintenanceWindow : GTLRObject

/**
 *  Day of week - `MONDAY`, `TUESDAY`, `WEDNESDAY`, `THURSDAY`, `FRIDAY`,
 *  `SATURDAY`, or `SUNDAY`. Specify in the UTC time zone. Returned in output as
 *  an integer, 1 to 7, where `1` equals Monday.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *day;

/**
 *  Hour of day - 0 to 23. Specify in the UTC time zone.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hour;

/** This is always `sql#maintenanceWindow`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Maintenance timing settings: `canary`, `stable`, or `week5`. For more
 *  information, see [About maintenance on Cloud SQL
 *  instances](https://cloud.google.com/sql/docs/mysql/maintenance).
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_MaintenanceWindow_UpdateTrack_Canary For an instance
 *        with a scheduled maintenance window, this maintenance timing indicates
 *        that the maintenance update is scheduled 7 to 14 days after the
 *        notification is sent out. Also referred to as `Week 1` (Console) and
 *        `preview` (gcloud CLI). (Value: "canary")
 *    @arg @c kGTLRSQLAdmin_MaintenanceWindow_UpdateTrack_SqlUpdateTrackUnspecified
 *        This is an unknown maintenance timing preference. (Value:
 *        "SQL_UPDATE_TRACK_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_MaintenanceWindow_UpdateTrack_Stable For an instance
 *        with a scheduled maintenance window, this maintenance timing indicates
 *        that the maintenance update is scheduled 15 to 21 days after the
 *        notification is sent out. Also referred to as `Week 2` (Console) and
 *        `production` (gcloud CLI). (Value: "stable")
 *    @arg @c kGTLRSQLAdmin_MaintenanceWindow_UpdateTrack_Week5 For instance
 *        with a scheduled maintenance window, this maintenance timing indicates
 *        that the maintenance update is scheduled 35 to 42 days after the
 *        notification is sent out. (Value: "week5")
 */
@property(nonatomic, copy, nullable) NSString *updateTrack;

@end


/**
 *  Read-replica configuration specific to MySQL databases.
 */
@interface GTLRSQLAdmin_MySqlReplicaConfiguration : GTLRObject

/** PEM representation of the trusted CA's x509 certificate. */
@property(nonatomic, copy, nullable) NSString *caCertificate;

/** PEM representation of the replica's x509 certificate. */
@property(nonatomic, copy, nullable) NSString *clientCertificate;

/**
 *  PEM representation of the replica's private key. The corresponsing public
 *  key is encoded in the client's certificate.
 */
@property(nonatomic, copy, nullable) NSString *clientKey;

/**
 *  Seconds to wait between connect retries. MySQL's default is 60 seconds.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *connectRetryInterval;

/**
 *  Path to a SQL dump file in Google Cloud Storage from which the replica
 *  instance is to be created. The URI is in the form gs://bucketName/fileName.
 *  Compressed gzip files (.gz) are also supported. Dumps have the binlog
 *  co-ordinates from which replication begins. This can be accomplished by
 *  setting --master-data to 1 when using mysqldump.
 */
@property(nonatomic, copy, nullable) NSString *dumpFilePath;

/** This is always `sql#mysqlReplicaConfiguration`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Interval in milliseconds between replication heartbeats.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *masterHeartbeatPeriod;

/** The password for the replication connection. */
@property(nonatomic, copy, nullable) NSString *password;

/** A list of permissible ciphers to use for SSL encryption. */
@property(nonatomic, copy, nullable) NSString *sslCipher;

/** The username for the replication connection. */
@property(nonatomic, copy, nullable) NSString *username;

/**
 *  Whether or not to check the primary instance's Common Name value in the
 *  certificate that it sends during the SSL handshake.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verifyServerCertificate;

@end


/**
 *  MySQL-specific external server sync settings.
 */
@interface GTLRSQLAdmin_MySqlSyncConfig : GTLRObject

/** Flags to use for the initial dump. */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_SyncFlags *> *initialSyncFlags;

@end


/**
 *  On-premises instance configuration.
 */
@interface GTLRSQLAdmin_OnPremisesConfiguration : GTLRObject

/** PEM representation of the trusted CA's x509 certificate. */
@property(nonatomic, copy, nullable) NSString *caCertificate;

/** PEM representation of the replica's x509 certificate. */
@property(nonatomic, copy, nullable) NSString *clientCertificate;

/**
 *  PEM representation of the replica's private key. The corresponsing public
 *  key is encoded in the client's certificate.
 */
@property(nonatomic, copy, nullable) NSString *clientKey;

/** The dump file to create the Cloud SQL replica. */
@property(nonatomic, copy, nullable) NSString *dumpFilePath;

/** The host and port of the on-premises instance in host:port format */
@property(nonatomic, copy, nullable) NSString *hostPort;

/** This is always `sql#onPremisesConfiguration`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The password for connecting to on-premises instance. */
@property(nonatomic, copy, nullable) NSString *password;

/** The reference to Cloud SQL instance if the source is Cloud SQL. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_InstanceReference *sourceInstance;

/** The username for connecting to on-premises instance. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  An Operation resource. For successful operations that return an Operation
 *  resource, only the fields relevant to the operation are populated in the
 *  resource.
 */
@interface GTLRSQLAdmin_Operation : GTLRObject

/** The context for acquire SSRS lease operation, if applicable. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_AcquireSsrsLeaseContext *acquireSsrsLeaseContext;

/** An Admin API warning message. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ApiWarning *apiWarning;

/** The context for backup operation, if applicable. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_BackupContext *backupContext;

/**
 *  The time this operation finished in UTC timezone in [RFC
 *  3339](https://tools.ietf.org/html/rfc3339) format, for example
 *  `2012-11-15T16:19:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  If errors occurred during processing of this operation, this field will be
 *  populated.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_OperationErrors *error;

/** The context for export operation, if applicable. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ExportContext *exportContext;

/** The context for import operation, if applicable. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_ImportContext *importContext;

/**
 *  The time this operation was enqueued in UTC timezone in [RFC
 *  3339](https://tools.ietf.org/html/rfc3339) format, for example
 *  `2012-11-15T16:19:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *insertTime;

/** This is always `sql#operation`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  An identifier that uniquely identifies the operation. You can use this
 *  identifier to retrieve the Operations resource that has information about
 *  the operation.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The type of the operation. Valid values are: * `CREATE` * `DELETE` *
 *  `UPDATE` * `RESTART` * `IMPORT` * `EXPORT` * `BACKUP_VOLUME` *
 *  `RESTORE_VOLUME` * `CREATE_USER` * `DELETE_USER` * `CREATE_DATABASE` *
 *  `DELETE_DATABASE`
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_AcquireSsrsLease Acquire a
 *        lease for the setup of SQL Server Reporting Services (SSRS). (Value:
 *        "ACQUIRE_SSRS_LEASE")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_AutoRestart Performs
 *        auto-restart of an HA-enabled Cloud SQL database for auto recovery.
 *        (Value: "AUTO_RESTART")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_Backup Value "BACKUP"
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_BackupVolume Performs
 *        instance backup. (Value: "BACKUP_VOLUME")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_Clone Clones a Cloud SQL
 *        instance. (Value: "CLONE")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_ClusterMaintenance Indicates
 *        that the instance, its read replicas, and its cascading replicas are
 *        in maintenance. Maintenance typically gets initiated on groups of
 *        replicas first, followed by the primary instance. For each instance,
 *        maintenance typically causes the instance to be unavailable for 1-3
 *        minutes. (Value: "CLUSTER_MAINTENANCE")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_Create Creates a new Cloud
 *        SQL instance. (Value: "CREATE")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_CreateClone Creates clone
 *        instance. (Value: "CREATE_CLONE")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_CreateDatabase Creates a
 *        database in the Cloud SQL instance. (Value: "CREATE_DATABASE")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_CreateReplica Creates a
 *        Cloud SQL replica instance. (Value: "CREATE_REPLICA")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_CreateUser Creates a new
 *        user in a Cloud SQL instance. (Value: "CREATE_USER")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_DeferMaintenance Value
 *        "DEFER_MAINTENANCE"
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_Delete Deletes a Cloud SQL
 *        instance. (Value: "DELETE")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_DeleteBackup Deletes the
 *        backup taken by a backup run. (Value: "DELETE_BACKUP")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_DeleteDatabase Deletes a
 *        database in the Cloud SQL instance. (Value: "DELETE_DATABASE")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_DeleteUser Deletes a user
 *        from a Cloud SQL instance. (Value: "DELETE_USER")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_DeleteVolume Deletes an
 *        instance backup. (Value: "DELETE_VOLUME")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_DemoteMaster Demotes the
 *        stand-alone instance to be a Cloud SQL read replica for an external
 *        database server. (Value: "DEMOTE_MASTER")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_EnablePrivateIp This field
 *        is deprecated, and will be removed in future version of API. (Value:
 *        "ENABLE_PRIVATE_IP")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_Export Exports data from a
 *        Cloud SQL instance to a Cloud Storage bucket. (Value: "EXPORT")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_Failover Performs failover
 *        of an HA-enabled Cloud SQL failover replica. (Value: "FAILOVER")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_Import Imports data into a
 *        Cloud SQL instance. (Value: "IMPORT")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_InjectUser Injects a
 *        privileged user in mysql for MOB instances. (Value: "INJECT_USER")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_LogCleanup Recovers logs
 *        from an instance's old data disk. (Value: "LOG_CLEANUP")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_Maintenance Indicates that
 *        the instance is currently in maintenance. Maintenance typically causes
 *        the instance to be unavailable for 1-3 minutes. (Value: "MAINTENANCE")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_MajorVersionUpgrade Updates
 *        the major version of a Cloud SQL instance. (Value:
 *        "MAJOR_VERSION_UPGRADE")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_PromoteReplica Promotes a
 *        Cloud SQL replica instance. (Value: "PROMOTE_REPLICA")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_ReconfigureOldPrimary
 *        Reconfigures old primary after a promote replica operation. Effect of
 *        a promote operation to the old primary is executed in this operation,
 *        asynchronously from the promote replica operation executed to the
 *        replica. (Value: "RECONFIGURE_OLD_PRIMARY")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_RecreateReplica Value
 *        "RECREATE_REPLICA"
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_Reencrypt Re-encrypts CMEK
 *        instances with latest key version. (Value: "REENCRYPT")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_ReleaseSsrsLease Release a
 *        lease for the setup of SQL Server Reporting Services (SSRS). (Value:
 *        "RELEASE_SSRS_LEASE")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_RescheduleMaintenance
 *        Reschedule maintenance to another time. (Value:
 *        "RESCHEDULE_MAINTENANCE")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_Restart Restarts the Cloud
 *        SQL instance. (Value: "RESTART")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_RestoreVolume Restores an
 *        instance backup. (Value: "RESTORE_VOLUME")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_SelfServiceMaintenance
 *        Indicates that the instance (and any of its replicas) are currently in
 *        maintenance. This is initiated as a self-service request by using SSM.
 *        Maintenance typically causes the instance to be unavailable for 1-3
 *        minutes. (Value: "SELF_SERVICE_MAINTENANCE")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_Snapshot Value "SNAPSHOT"
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_SqlOperationTypeUnspecified
 *        Unknown operation type. (Value: "SQL_OPERATION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_StartExternalSync Starts
 *        external sync of a Cloud SQL EM replica to an external primary
 *        instance. (Value: "START_EXTERNAL_SYNC")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_StartReplica Starts
 *        replication on a Cloud SQL read replica instance. (Value:
 *        "START_REPLICA")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_StopReplica Stops
 *        replication on a Cloud SQL read replica instance. (Value:
 *        "STOP_REPLICA")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_Switchover Switches the
 *        roles of the primary and replica pair. The target instance should be
 *        the replica. (Value: "SWITCHOVER")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_SwitchoverToReplica Switches
 *        a primary instance to a replica. This operation runs as part of a
 *        switchover operation to the original primary instance. (Value:
 *        "SWITCHOVER_TO_REPLICA")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_TruncateLog Truncates a
 *        general or slow log table in MySQL. (Value: "TRUNCATE_LOG")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_Update Updates the settings
 *        of a Cloud SQL instance. (Value: "UPDATE")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_UpdateDatabase Updates a
 *        database in the Cloud SQL instance. (Value: "UPDATE_DATABASE")
 *    @arg @c kGTLRSQLAdmin_Operation_OperationType_UpdateUser Updates an
 *        existing user in a Cloud SQL instance. (Value: "UPDATE_USER")
 */
@property(nonatomic, copy, nullable) NSString *operationType;

/** The URI of this resource. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/**
 *  The time this operation actually started in UTC timezone in [RFC
 *  3339](https://tools.ietf.org/html/rfc3339) format, for example
 *  `2012-11-15T16:19:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  The status of an operation.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_Operation_Status_Done The operation completed.
 *        (Value: "DONE")
 *    @arg @c kGTLRSQLAdmin_Operation_Status_Pending The operation has been
 *        queued, but has not started yet. (Value: "PENDING")
 *    @arg @c kGTLRSQLAdmin_Operation_Status_Running The operation is running.
 *        (Value: "RUNNING")
 *    @arg @c kGTLRSQLAdmin_Operation_Status_SqlOperationStatusUnspecified The
 *        state of the operation is unknown. (Value:
 *        "SQL_OPERATION_STATUS_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *status;

/** Name of the database instance related to this operation. */
@property(nonatomic, copy, nullable) NSString *targetId;

@property(nonatomic, copy, nullable) NSString *targetLink;

/** The project ID of the target instance related to this operation. */
@property(nonatomic, copy, nullable) NSString *targetProject;

/** The email address of the user who initiated this operation. */
@property(nonatomic, copy, nullable) NSString *user;

@end


/**
 *  Database instance operation error.
 */
@interface GTLRSQLAdmin_OperationError : GTLRObject

/** Identifies the specific error that occurred. */
@property(nonatomic, copy, nullable) NSString *code;

/** This is always `sql#operationError`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Additional information about the error encountered. */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  Database instance operation errors list wrapper.
 */
@interface GTLRSQLAdmin_OperationErrors : GTLRObject

/** The list of errors encountered while processing this operation. */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_OperationError *> *errors;

/** This is always `sql#operationErrors`. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRSQLAdmin_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have been cancelled successfully have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cancelRequested;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusDetail;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Operations list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSQLAdmin_OperationsListResponse : GTLRCollectionObject

/**
 *  List of operation resources.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_Operation *> *items;

/** This is always `sql#operationsList`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The continuation token, used to page through large result sets. Provide this
 *  value in a subsequent request to return the next page of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Read-only password status.
 */
@interface GTLRSQLAdmin_PasswordStatus : GTLRObject

/**
 *  If true, user does not have login privileges.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *locked;

/** The expiration time of the current password. */
@property(nonatomic, strong, nullable) GTLRDateTime *passwordExpirationTime;

@end


/**
 *  Database instance local user password validation policy
 */
@interface GTLRSQLAdmin_PasswordValidationPolicy : GTLRObject

/**
 *  The complexity of the password.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_PasswordValidationPolicy_Complexity_ComplexityDefault
 *        A combination of lowercase, uppercase, numeric, and non-alphanumeric
 *        characters. (Value: "COMPLEXITY_DEFAULT")
 *    @arg @c kGTLRSQLAdmin_PasswordValidationPolicy_Complexity_ComplexityUnspecified
 *        Complexity check is not specified. (Value: "COMPLEXITY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *complexity;

/**
 *  This field is deprecated and will be removed in a future version of the API.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disallowCompromisedCredentials GTLR_DEPRECATED;

/**
 *  Disallow username as a part of the password.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disallowUsernameSubstring;

/**
 *  Whether the password policy is enabled or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enablePasswordPolicy;

/**
 *  Minimum number of characters allowed.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minLength;

/**
 *  Minimum interval after which the password can be changed. This flag is only
 *  supported for PostgreSQL.
 */
@property(nonatomic, strong, nullable) GTLRDuration *passwordChangeInterval;

/**
 *  Number of previous passwords that cannot be reused.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reuseInterval;

@end


/**
 *  Perform disk shrink context.
 */
@interface GTLRSQLAdmin_PerformDiskShrinkContext : GTLRObject

/**
 *  The target disk shrink size in GigaBytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *targetSizeGb;

@end


/**
 *  PSC settings for a Cloud SQL instance.
 */
@interface GTLRSQLAdmin_PscConfig : GTLRObject

/**
 *  Optional. The list of consumer projects that are allow-listed for PSC
 *  connections to this instance. This instance can be connected to with PSC
 *  from any network in these projects. Each consumer project in this list may
 *  be represented by a project number (numeric) or by a project id
 *  (alphanumeric).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *allowedConsumerProjects;

/**
 *  Whether PSC connectivity is enabled for this instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *pscEnabled;

@end


/**
 *  Read-replica configuration for connecting to the primary instance.
 */
@interface GTLRSQLAdmin_ReplicaConfiguration : GTLRObject

/**
 *  Optional. Specifies if a SQL Server replica is a cascadable replica. A
 *  cascadable replica is a SQL Server cross region replica that supports
 *  replica(s) under it.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cascadableReplica;

/**
 *  Specifies if the replica is the failover target. If the field is set to
 *  `true`, the replica will be designated as a failover replica. In case the
 *  primary instance fails, the replica instance will be promoted as the new
 *  primary instance. Only one replica can be specified as failover target, and
 *  the replica has to be in different zone with the primary instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failoverTarget;

/** This is always `sql#replicaConfiguration`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  MySQL specific configuration when replicating from a MySQL on-premises
 *  primary instance. Replication configuration information such as the
 *  username, password, certificates, and keys are not stored in the instance
 *  metadata. The configuration information is used only to set up the
 *  replication connection and is stored by MySQL in a file named `master.info`
 *  in the data directory.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_MySqlReplicaConfiguration *mysqlReplicaConfiguration;

@end


/**
 *  A primary instance and disaster recovery (DR) replica pair. A DR replica is
 *  a cross-region replica that you designate for failover in the event that the
 *  primary instance experiences regional failure. Only applicable to MySQL.
 */
@interface GTLRSQLAdmin_ReplicationCluster : GTLRObject

/**
 *  Output only. Read-only field that indicates whether the replica is a DR
 *  replica. This field is not set if the instance is a primary instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *drReplica;

/**
 *  Optional. If the instance is a primary instance, then this field identifies
 *  the disaster recovery (DR) replica. A DR replica is an optional
 *  configuration for Enterprise Plus edition instances. If the instance is a
 *  read replica, then the field is not set. Set this field to a replica name to
 *  designate a DR replica for a primary instance. Remove the replica name to
 *  remove the DR replica designation.
 */
@property(nonatomic, copy, nullable) NSString *failoverDrReplicaName;

/**
 *  Output only. If set, it indicates this instance has a private service access
 *  (PSA) dns endpoint that is pointing to the primary instance of the cluster.
 *  If this instance is the primary, the dns should be pointing to this
 *  instance. After Switchover or Replica failover, this DNS endpoint points to
 *  the promoted instance. This is a read-only field, returned to the user as
 *  information. This field can exist even if a standalone instance does not yet
 *  have a replica, or had a DR replica that was deleted.
 */
@property(nonatomic, copy, nullable) NSString *psaWriteEndpoint;

@end


/**
 *  GTLRSQLAdmin_Reschedule
 */
@interface GTLRSQLAdmin_Reschedule : GTLRObject

/**
 *  Required. The type of the reschedule.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_Reschedule_RescheduleType_Immediate Reschedules
 *        maintenance to happen now (within 5 minutes). (Value: "IMMEDIATE")
 *    @arg @c kGTLRSQLAdmin_Reschedule_RescheduleType_NextAvailableWindow
 *        Reschedules maintenance to occur within one week from the originally
 *        scheduled day and time. (Value: "NEXT_AVAILABLE_WINDOW")
 *    @arg @c kGTLRSQLAdmin_Reschedule_RescheduleType_RescheduleTypeUnspecified
 *        Value "RESCHEDULE_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRSQLAdmin_Reschedule_RescheduleType_SpecificTime Reschedules
 *        maintenance to a specific time and day. (Value: "SPECIFIC_TIME")
 */
@property(nonatomic, copy, nullable) NSString *rescheduleType;

/**
 *  Optional. Timestamp when the maintenance shall be rescheduled to if
 *  reschedule_type=SPECIFIC_TIME, in [RFC
 *  3339](https://tools.ietf.org/html/rfc3339) format, for example
 *  `2012-11-15T16:19:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleTime;

@end


/**
 *  Database instance restore from backup context. Backup context contains
 *  source instance id and project id.
 */
@interface GTLRSQLAdmin_RestoreBackupContext : GTLRObject

/**
 *  The ID of the backup run to restore from.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *backupRunId;

/** The ID of the instance that the backup was taken from. */
@property(nonatomic, copy, nullable) NSString *instanceId;

/** This is always `sql#restoreBackupContext`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The full project ID of the source instance. */
@property(nonatomic, copy, nullable) NSString *project;

@end


/**
 *  Instance rotate server CA context.
 */
@interface GTLRSQLAdmin_RotateServerCaContext : GTLRObject

/** This is always `sql#rotateServerCaContext`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The fingerprint of the next version to be rotated to. If left unspecified,
 *  will be rotated to the most recently added server CA version.
 */
@property(nonatomic, copy, nullable) NSString *nextVersion;

@end


/**
 *  Instance rotate server certificate context.
 */
@interface GTLRSQLAdmin_RotateServerCertificateContext : GTLRObject

/** Optional. This is always `sql#rotateServerCertificateContext`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The fingerprint of the next version to be rotated to. If left unspecified,
 *  will be rotated to the most recently added server certificate version.
 */
@property(nonatomic, copy, nullable) NSString *nextVersion;

@end


/**
 *  Database instance settings.
 */
@interface GTLRSQLAdmin_Settings : GTLRObject

/**
 *  The activation policy specifies when the instance is activated; it is
 *  applicable only when the instance state is RUNNABLE. Valid values: *
 *  `ALWAYS`: The instance is on, and remains so even in the absence of
 *  connection requests. * `NEVER`: The instance is off; it is not activated,
 *  even if a connection request arrives.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_Settings_ActivationPolicy_Always The instance is
 *        always up and running. (Value: "ALWAYS")
 *    @arg @c kGTLRSQLAdmin_Settings_ActivationPolicy_Never The instance never
 *        starts. (Value: "NEVER")
 *    @arg @c kGTLRSQLAdmin_Settings_ActivationPolicy_OnDemand The instance
 *        starts upon receiving requests. (Value: "ON_DEMAND")
 *    @arg @c kGTLRSQLAdmin_Settings_ActivationPolicy_SqlActivationPolicyUnspecified
 *        Unknown activation plan. (Value: "SQL_ACTIVATION_POLICY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *activationPolicy;

/**
 *  Active Directory configuration, relevant only for Cloud SQL for SQL Server.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_SqlActiveDirectoryConfig *activeDirectoryConfig;

/**
 *  Specifies advanced machine configuration for the instances relevant only for
 *  SQL Server.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_AdvancedMachineFeatures *advancedMachineFeatures;

/**
 *  The App Engine app IDs that can access this instance. (Deprecated) Applied
 *  to First Generation instances only.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *authorizedGaeApplications GTLR_DEPRECATED;

/**
 *  Availability type. Potential values: * `ZONAL`: The instance serves data
 *  from only one zone. Outages in that zone affect data accessibility. *
 *  `REGIONAL`: The instance can serve data from more than one zone in a region
 *  (it is highly available)./ For more information, see [Overview of the High
 *  Availability
 *  Configuration](https://cloud.google.com/sql/docs/mysql/high-availability).
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_Settings_AvailabilityType_Regional Regional
 *        available instance. (Value: "REGIONAL")
 *    @arg @c kGTLRSQLAdmin_Settings_AvailabilityType_SqlAvailabilityTypeUnspecified
 *        This is an unknown Availability type. (Value:
 *        "SQL_AVAILABILITY_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_Settings_AvailabilityType_Zonal Zonal available
 *        instance. (Value: "ZONAL")
 */
@property(nonatomic, copy, nullable) NSString *availabilityType;

/** The daily backup configuration for the instance. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_BackupConfiguration *backupConfiguration;

/** The name of server Instance collation. */
@property(nonatomic, copy, nullable) NSString *collation;

/**
 *  Specifies if connections must use Cloud SQL connectors. Option values
 *  include the following: `NOT_REQUIRED` (Cloud SQL instances can be connected
 *  without Cloud SQL Connectors) and `REQUIRED` (Only allow connections that
 *  use Cloud SQL Connectors). Note that using REQUIRED disables all existing
 *  authorized networks. If this field is not specified when creating a new
 *  instance, NOT_REQUIRED is used. If this field is not specified when patching
 *  or updating an existing instance, it is left unchanged in the instance.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_Settings_ConnectorEnforcement_ConnectorEnforcementUnspecified
 *        The requirement for Cloud SQL connectors is unknown. (Value:
 *        "CONNECTOR_ENFORCEMENT_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_Settings_ConnectorEnforcement_NotRequired Do not
 *        require Cloud SQL connectors. (Value: "NOT_REQUIRED")
 *    @arg @c kGTLRSQLAdmin_Settings_ConnectorEnforcement_Required Require all
 *        connections to use Cloud SQL connectors, including the Cloud SQL Auth
 *        Proxy and Cloud SQL Java, Python, and Go connectors. Note: This
 *        disables all existing authorized networks. (Value: "REQUIRED")
 */
@property(nonatomic, copy, nullable) NSString *connectorEnforcement;

/**
 *  Configuration specific to read replica instances. Indicates whether database
 *  flags for crash-safe replication are enabled. This property was only
 *  applicable to First Generation instances.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *crashSafeReplicationEnabled GTLR_DEPRECATED;

/** The database flags passed to the instance at startup. */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_DatabaseFlags *> *databaseFlags;

/**
 *  Configuration specific to read replica instances. Indicates whether
 *  replication is enabled or not. WARNING: Changing this restarts the instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *databaseReplicationEnabled;

/** Configuration for data cache. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_DataCacheConfig *dataCacheConfig;

/**
 *  The size of data disk, in GB. The data disk size minimum is 10GB.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dataDiskSizeGb;

/**
 *  The type of data disk: `PD_SSD` (default) or `PD_HDD`. Not used for First
 *  Generation instances.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_Settings_DataDiskType_ObsoleteLocalSsd This field is
 *        deprecated and will be removed from a future version of the API.
 *        (Value: "OBSOLETE_LOCAL_SSD")
 *    @arg @c kGTLRSQLAdmin_Settings_DataDiskType_PdHdd An HDD data disk.
 *        (Value: "PD_HDD")
 *    @arg @c kGTLRSQLAdmin_Settings_DataDiskType_PdSsd An SSD data disk.
 *        (Value: "PD_SSD")
 *    @arg @c kGTLRSQLAdmin_Settings_DataDiskType_SqlDataDiskTypeUnspecified
 *        This is an unknown data disk type. (Value:
 *        "SQL_DATA_DISK_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *dataDiskType;

/**
 *  Configuration to protect against accidental instance deletion.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deletionProtectionEnabled;

/** Deny maintenance periods */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_DenyMaintenancePeriod *> *denyMaintenancePeriods;

/**
 *  Optional. The edition of the instance.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_Settings_Edition_EditionUnspecified The instance did
 *        not specify the edition. (Value: "EDITION_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_Settings_Edition_Enterprise The instance is an
 *        enterprise edition. (Value: "ENTERPRISE")
 *    @arg @c kGTLRSQLAdmin_Settings_Edition_EnterprisePlus The instance is an
 *        Enterprise Plus edition. (Value: "ENTERPRISE_PLUS")
 */
@property(nonatomic, copy, nullable) NSString *edition;

/**
 *  Optional. By default, Cloud SQL instances have schema extraction disabled
 *  for Dataplex. When this parameter is set to true, schema extraction for
 *  Dataplex on Cloud SQL instances is activated.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableDataplexIntegration;

/**
 *  Optional. When this parameter is set to true, Cloud SQL instances can
 *  connect to Vertex AI to pass requests for real-time predictions and insights
 *  to the AI. The default value is false. This applies only to Cloud SQL for
 *  PostgreSQL instances.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableGoogleMlIntegration;

/** Insights configuration, for now relevant only for Postgres. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_InsightsConfig *insightsConfig;

/**
 *  The settings for IP Management. This allows to enable or disable the
 *  instance IP and manage which external networks can connect to the instance.
 *  The IPv4 address cannot be disabled for Second Generation instances.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_IpConfiguration *ipConfiguration;

/** This is always `sql#settings`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The location preference settings. This allows the instance to be located as
 *  near as possible to either an App Engine app or Compute Engine zone for
 *  better performance. App Engine co-location was only applicable to First
 *  Generation instances.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_LocationPreference *locationPreference;

/**
 *  The maintenance window for this instance. This specifies when the instance
 *  can be restarted for maintenance purposes.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_MaintenanceWindow *maintenanceWindow;

/** The local user password validation policy of the instance. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_PasswordValidationPolicy *passwordValidationPolicy;

/**
 *  The pricing plan for this instance. This can be either `PER_USE` or
 *  `PACKAGE`. Only `PER_USE` is supported for Second Generation instances.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_Settings_PricingPlan_Package The instance is billed
 *        at a monthly flat rate. (Value: "PACKAGE")
 *    @arg @c kGTLRSQLAdmin_Settings_PricingPlan_PerUse The instance is billed
 *        per usage. (Value: "PER_USE")
 *    @arg @c kGTLRSQLAdmin_Settings_PricingPlan_SqlPricingPlanUnspecified This
 *        is an unknown pricing plan for this instance. (Value:
 *        "SQL_PRICING_PLAN_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *pricingPlan;

/**
 *  The type of replication this instance uses. This can be either
 *  `ASYNCHRONOUS` or `SYNCHRONOUS`. (Deprecated) This property was only
 *  applicable to First Generation instances.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_Settings_ReplicationType_Asynchronous The
 *        asynchronous replication mode for First Generation instances. It
 *        provides a slight performance gain, but if an outage occurs while this
 *        option is set to asynchronous, you can lose up to a few seconds of
 *        updates to your data. (Value: "ASYNCHRONOUS")
 *    @arg @c kGTLRSQLAdmin_Settings_ReplicationType_SqlReplicationTypeUnspecified
 *        This is an unknown replication type for a Cloud SQL instance. (Value:
 *        "SQL_REPLICATION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_Settings_ReplicationType_Synchronous The synchronous
 *        replication mode for First Generation instances. It is the default
 *        value. (Value: "SYNCHRONOUS")
 */
@property(nonatomic, copy, nullable) NSString *replicationType GTLR_DEPRECATED;

/**
 *  The version of instance settings. This is a required field for update method
 *  to make sure concurrent updates are handled properly. During update, use the
 *  most recent settingsVersion value for this instance and do not try to update
 *  this value.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *settingsVersion;

/** SQL Server specific audit configuration. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_SqlServerAuditConfig *sqlServerAuditConfig;

/**
 *  Configuration to increase storage size automatically. The default value is
 *  true.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *storageAutoResize;

/**
 *  The maximum size to which storage capacity can be automatically increased.
 *  The default value is 0, which specifies that there is no limit.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *storageAutoResizeLimit;

/**
 *  The tier (or machine type) for this instance, for example
 *  `db-custom-1-3840`. WARNING: Changing this restarts the instance.
 */
@property(nonatomic, copy, nullable) NSString *tier;

/** Server timezone, relevant only for Cloud SQL for SQL Server. */
@property(nonatomic, copy, nullable) NSString *timeZone;

/**
 *  User-provided labels, represented as a dictionary where each label is a
 *  single key value pair.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_Settings_UserLabels *userLabels;

@end


/**
 *  User-provided labels, represented as a dictionary where each label is a
 *  single key value pair.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRSQLAdmin_Settings_UserLabels : GTLRObject
@end


/**
 *  Active Directory configuration, relevant only for Cloud SQL for SQL Server.
 */
@interface GTLRSQLAdmin_SqlActiveDirectoryConfig : GTLRObject

/** The name of the domain (e.g., mydomain.com). */
@property(nonatomic, copy, nullable) NSString *domain;

/** This is always sql#activeDirectoryConfig. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  External primary instance migration setting error/warning.
 */
@interface GTLRSQLAdmin_SqlExternalSyncSettingError : GTLRObject

/** Additional information about the error encountered. */
@property(nonatomic, copy, nullable) NSString *detail;

/**
 *  Can be `sql#externalSyncSettingError` or `sql#externalSyncSettingWarning`.
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Identifies the specific error that occurred.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_BinlogNotEnabled
 *        Value "BINLOG_NOT_ENABLED"
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_BinlogRetentionSetting
 *        The primary instance's binary log retention setting. (Value:
 *        "BINLOG_RETENTION_SETTING")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_ConnectionFailure
 *        Value "CONNECTION_FAILURE"
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_ExistingDataInReplica
 *        The replica instance contains existing data. (Value:
 *        "EXISTING_DATA_IN_REPLICA")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_ExtensionsNotEnabledInReplica
 *        This error message indicates that the specified extensions are not
 *        enabled on destination instance. For example, before you can migrate
 *        data to the destination instance, you must enable the PGAudit
 *        extension on the instance. (Value:
 *        "EXTENSIONS_NOT_ENABLED_IN_REPLICA")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_ExtensionsNotMigrated
 *        The warning message indicates the pg_cron extension and settings will
 *        not be migrated to the destination. (Value: "EXTENSIONS_NOT_MIGRATED")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_IncompatibleDatabaseMinorVersion
 *        The minor version of replica database is incompatible with the source.
 *        (Value: "INCOMPATIBLE_DATABASE_MINOR_VERSION")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_IncompatibleDatabaseVersion
 *        Value "INCOMPATIBLE_DATABASE_VERSION"
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientDiskSize
 *        The disk size of the replica instance is smaller than the data size of
 *        the source instance. (Value: "INSUFFICIENT_DISK_SIZE")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientGcsPermissions
 *        The Cloud Storage bucket is missing necessary permissions. (Value:
 *        "INSUFFICIENT_GCS_PERMISSIONS")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientMachineTier
 *        The data size of the source instance is greater than 1 TB, the number
 *        of cores of the replica instance is less than 8, and the memory of the
 *        replica is less than 32 GB. (Value: "INSUFFICIENT_MACHINE_TIER")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientMaxReplicationSlots
 *        The value of parameter max_replication_slots is not sufficient.
 *        (Value: "INSUFFICIENT_MAX_REPLICATION_SLOTS")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientMaxWalSenders
 *        The value of parameter max_wal_senders is not sufficient. (Value:
 *        "INSUFFICIENT_MAX_WAL_SENDERS")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientMaxWorkerProcesses
 *        The value of parameter max_worker_processes is not sufficient. (Value:
 *        "INSUFFICIENT_MAX_WORKER_PROCESSES")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientPrivilege
 *        The replication user is missing privileges that are required. (Value:
 *        "INSUFFICIENT_PRIVILEGE")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidDbParam The
 *        primary instance database parameter setup doesn't allow EM sync.
 *        (Value: "INVALID_DB_PARAM")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidFileInfo The
 *        Cloud Storage bucket has an error in the file or contains invalid file
 *        information. (Value: "INVALID_FILE_INFO")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidLoggingSetup
 *        The primary instance logging setup doesn't allow EM sync. (Value:
 *        "INVALID_LOGGING_SETUP")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidRdsLogicalReplication
 *        The value of parameter rds.logical_replication is not set to 1.
 *        (Value: "INVALID_RDS_LOGICAL_REPLICATION")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidSharedPreloadLibrary
 *        The value of parameter shared_preload_libraries does not include
 *        pglogical. (Value: "INVALID_SHARED_PRELOAD_LIBRARY")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidWalLevel The
 *        value of parameter wal_level is not set to logical. (Value:
 *        "INVALID_WAL_LEVEL")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_LimitedSupportTables
 *        Source has tables with limited support eg: PostgreSQL tables without
 *        primary keys. (Value: "LIMITED_SUPPORT_TABLES")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_LocalInfileOff The
 *        global variable local_infile is off on external server replica.
 *        (Value: "LOCAL_INFILE_OFF")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_MissingOptionalPrivileges
 *        The replication user is missing privileges that are optional. (Value:
 *        "MISSING_OPTIONAL_PRIVILEGES")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_MysqlParallelImportInsufficientPrivilege
 *        The replication user is missing parallel import specific privileges.
 *        (e.g. LOCK TABLES) for MySQL. (Value:
 *        "MYSQL_PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_NoPglogicalInstalled
 *        No pglogical extension installed on databases, applicable for
 *        postgres. (Value: "NO_PGLOGICAL_INSTALLED")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_PgCronFlagEnabledInReplica
 *        The error message indicates that pg_cron flags are enabled on the
 *        destination which is not supported during the migration. (Value:
 *        "PG_CRON_FLAG_ENABLED_IN_REPLICA")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_PglogicalNodeAlreadyExists
 *        pglogical node already exists on databases, applicable for postgres.
 *        (Value: "PGLOGICAL_NODE_ALREADY_EXISTS")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_PgSubscriptionCount
 *        Count of subscriptions needed to sync source data for PostgreSQL
 *        database. (Value: "PG_SUBSCRIPTION_COUNT")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_PgSyncParallelLevel
 *        Final parallel level that is used to do migration. (Value:
 *        "PG_SYNC_PARALLEL_LEVEL")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_PrimaryAlreadySetup
 *        The primary instance has been setup and will fail the setup. (Value:
 *        "PRIMARY_ALREADY_SETUP")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_ReplicaAlreadySetup
 *        Value "REPLICA_ALREADY_SETUP"
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_RiskyBackupAdminPrivilege
 *        Additional BACKUP_ADMIN privilege is granted to the replication user
 *        which may lock source MySQL 8 instance for DDLs during initial sync.
 *        (Value: "RISKY_BACKUP_ADMIN_PRIVILEGE")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_SourceMaxSubscriptions
 *        This warning message indicates that Cloud SQL uses the maximum number
 *        of subscriptions to migrate data from the source to the destination.
 *        (Value: "SOURCE_MAX_SUBSCRIPTIONS")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_SqlExternalSyncSettingErrorTypeUnspecified
 *        Value "SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED"
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_SqlserverAgentNotRunning
 *        SQL Server Agent is not running. (Value:
 *        "SQLSERVER_AGENT_NOT_RUNNING")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_SqlserverServernameMismatch
 *        SQL Server \@\@SERVERNAME does not match actual host name. (Value:
 *        "SQLSERVER_SERVERNAME_MISMATCH")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_SubscriptionCalculationStatus
 *        If a time out occurs while the subscription counts are calculated,
 *        then this value is set to 1. Otherwise, this value is set to 2.
 *        (Value: "SUBSCRIPTION_CALCULATION_STATUS")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_TurnOnPitrAfterPromote
 *        This code instructs customers to turn on point-in-time recovery
 *        manually for the instance after promoting the Cloud SQL for PostgreSQL
 *        instance. (Value: "TURN_ON_PITR_AFTER_PROMOTE")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnableToVerifyDefiners
 *        Unable to verify definers on the source for MySQL. (Value:
 *        "UNABLE_TO_VERIFY_DEFINERS")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedBinlogFormat
 *        The primary instance has unsupported binary log format. (Value:
 *        "UNSUPPORTED_BINLOG_FORMAT")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedColumns
 *        The source database has generated columns that can't be migrated.
 *        Please change them to regular columns before migration. (Value:
 *        "UNSUPPORTED_COLUMNS")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedDatabaseSettings
 *        The source instance has unsupported database settings for migration.
 *        (Value: "UNSUPPORTED_DATABASE_SETTINGS")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedDefiner
 *        The customer has a definer that will break EM setup. (Value:
 *        "UNSUPPORTED_DEFINER")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedExtensions
 *        Extensions installed are either not supported or having unsupported
 *        versions. (Value: "UNSUPPORTED_EXTENSIONS")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedExtensionsNotMigrated
 *        The warning message indicates the unsupported extensions will not be
 *        migrated to the destination. (Value:
 *        "UNSUPPORTED_EXTENSIONS_NOT_MIGRATED")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedGtidMode
 *        The gtid_mode is not supported, applicable for MySQL. (Value:
 *        "UNSUPPORTED_GTID_MODE")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedMigrationType
 *        Unsupported migration type. (Value: "UNSUPPORTED_MIGRATION_TYPE")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedStorageEngine
 *        The primary instance has tables with unsupported storage engine.
 *        (Value: "UNSUPPORTED_STORAGE_ENGINE")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedSystemObjects
 *        The selected objects include system objects that aren't supported for
 *        migration. (Value: "UNSUPPORTED_SYSTEM_OBJECTS")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedTableDefinition
 *        The table definition is not support due to missing primary key or
 *        replica identity, applicable for postgres. Note that this is a warning
 *        and won't block the migration. (Value: "UNSUPPORTED_TABLE_DEFINITION")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedTablesWithReplicaIdentity
 *        The source database has tables with the FULL or NOTHING replica
 *        identity. Before starting your migration, either remove the identity
 *        or change it to DEFAULT. Note that this is an error and will block the
 *        migration. (Value: "UNSUPPORTED_TABLES_WITH_REPLICA_IDENTITY")
 *    @arg @c kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UsersNotCreatedInReplica
 *        The source database has users that aren't created in the replica.
 *        First, create all users, which are in the pg_user_mappings table of
 *        the source database, in the destination instance. Then, perform the
 *        migration. (Value: "USERS_NOT_CREATED_IN_REPLICA")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Response for the acquire SSRS lease request.
 */
@interface GTLRSQLAdmin_SqlInstancesAcquireSsrsLeaseResponse : GTLRObject

/** The unique identifier for this operation. */
@property(nonatomic, copy, nullable) NSString *operationId;

@end


/**
 *  Instance get disk shrink config response.
 */
@interface GTLRSQLAdmin_SqlInstancesGetDiskShrinkConfigResponse : GTLRObject

/** This is always `sql#getDiskShrinkConfig`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Additional message to customers. */
@property(nonatomic, copy, nullable) NSString *message;

/**
 *  The minimum size to which a disk can be shrunk in GigaBytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *minimalTargetSizeGb;

@end


/**
 *  Instance get latest recovery time response.
 */
@interface GTLRSQLAdmin_SqlInstancesGetLatestRecoveryTimeResponse : GTLRObject

/** This is always `sql#getLatestRecoveryTime`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Timestamp, identifies the latest recovery time of the source instance. */
@property(nonatomic, strong, nullable) GTLRDateTime *latestRecoveryTime;

@end


/**
 *  Response for the release SSRS lease request.
 */
@interface GTLRSQLAdmin_SqlInstancesReleaseSsrsLeaseResponse : GTLRObject

/** The unique identifier for this operation. */
@property(nonatomic, copy, nullable) NSString *operationId;

@end


/**
 *  Reschedule options for maintenance windows.
 */
@interface GTLRSQLAdmin_SqlInstancesRescheduleMaintenanceRequestBody : GTLRObject

/** Required. The type of the reschedule the user wants. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_Reschedule *reschedule;

@end


/**
 *  Instance reset replica size request.
 */
@interface GTLRSQLAdmin_SqlInstancesResetReplicaSizeRequest : GTLRObject
@end


/**
 *  Instance start external sync request.
 */
@interface GTLRSQLAdmin_SqlInstancesStartExternalSyncRequest : GTLRObject

/**
 *  Optional. MigrationType configures the migration to use physical files or
 *  logical dump files. If not set, then the logical dump file configuration is
 *  used. Valid values are `LOGICAL` or `PHYSICAL`. Only applicable to MySQL.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_MigrationType_Logical
 *        Logical dump file-based migration (Value: "LOGICAL")
 *    @arg @c kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_MigrationType_MigrationTypeUnspecified
 *        Default value is a logical dump file-based migration (Value:
 *        "MIGRATION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_MigrationType_Physical
 *        Physical file-based migration (Value: "PHYSICAL")
 */
@property(nonatomic, copy, nullable) NSString *migrationType;

/** MySQL-specific settings for start external sync. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_MySqlSyncConfig *mysqlSyncConfig;

/**
 *  Whether to skip the verification step (VESS).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipVerification;

/**
 *  External sync mode.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncMode_ExternalSyncModeUnspecified
 *        Unknown external sync mode, will be defaulted to ONLINE mode (Value:
 *        "EXTERNAL_SYNC_MODE_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncMode_Offline
 *        Offline external sync only dumps and loads a one-time snapshot of the
 *        primary instance's data (Value: "OFFLINE")
 *    @arg @c kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncMode_Online
 *        Online external sync will set up replication after initial data
 *        external sync (Value: "ONLINE")
 */
@property(nonatomic, copy, nullable) NSString *syncMode;

/**
 *  Optional. Parallel level for initial data sync. Currently only applicable
 *  for MySQL.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncParallelLevel_ExternalSyncParallelLevelUnspecified
 *        Unknown sync parallel level. Will be defaulted to OPTIMAL. (Value:
 *        "EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncParallelLevel_Max
 *        Maximum parallel level. (Value: "MAX")
 *    @arg @c kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncParallelLevel_Min
 *        Minimal parallel level. (Value: "MIN")
 *    @arg @c kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncParallelLevel_Optimal
 *        Optimal parallel level. (Value: "OPTIMAL")
 */
@property(nonatomic, copy, nullable) NSString *syncParallelLevel;

@end


/**
 *  Instance verify external sync settings request.
 */
@interface GTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest : GTLRObject

/**
 *  Optional. MigrationType configures the migration to use physical files or
 *  logical dump files. If not set, then the logical dump file configuration is
 *  used. Valid values are `LOGICAL` or `PHYSICAL`. Only applicable to MySQL.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType_Logical
 *        Logical dump file-based migration (Value: "LOGICAL")
 *    @arg @c kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType_MigrationTypeUnspecified
 *        Default value is a logical dump file-based migration (Value:
 *        "MIGRATION_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_MigrationType_Physical
 *        Physical file-based migration (Value: "PHYSICAL")
 */
@property(nonatomic, copy, nullable) NSString *migrationType;

/** Optional. MySQL-specific settings for start external sync. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_MySqlSyncConfig *mysqlSyncConfig;

/**
 *  External sync mode
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncMode_ExternalSyncModeUnspecified
 *        Unknown external sync mode, will be defaulted to ONLINE mode (Value:
 *        "EXTERNAL_SYNC_MODE_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncMode_Offline
 *        Offline external sync only dumps and loads a one-time snapshot of the
 *        primary instance's data (Value: "OFFLINE")
 *    @arg @c kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncMode_Online
 *        Online external sync will set up replication after initial data
 *        external sync (Value: "ONLINE")
 */
@property(nonatomic, copy, nullable) NSString *syncMode;

/**
 *  Optional. Parallel level for initial data sync. Only applicable for
 *  PostgreSQL.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncParallelLevel_ExternalSyncParallelLevelUnspecified
 *        Unknown sync parallel level. Will be defaulted to OPTIMAL. (Value:
 *        "EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncParallelLevel_Max
 *        Maximum parallel level. (Value: "MAX")
 *    @arg @c kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncParallelLevel_Min
 *        Minimal parallel level. (Value: "MIN")
 *    @arg @c kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncParallelLevel_Optimal
 *        Optimal parallel level. (Value: "OPTIMAL")
 */
@property(nonatomic, copy, nullable) NSString *syncParallelLevel;

/**
 *  Flag to enable verifying connection only
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verifyConnectionOnly;

/**
 *  Optional. Flag to verify settings required by replication setup only
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *verifyReplicationOnly;

@end


/**
 *  Instance verify external sync settings response.
 */
@interface GTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsResponse : GTLRObject

/** List of migration violations. */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_SqlExternalSyncSettingError *> *errors;

/** This is always `sql#migrationSettingErrorList`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** List of migration warnings. */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_SqlExternalSyncSettingError *> *warnings;

@end


/**
 *  This message wraps up the information written by out-of-disk detection job.
 */
@interface GTLRSQLAdmin_SqlOutOfDiskReport : GTLRObject

/**
 *  The minimum recommended increase size in GigaBytes This field is consumed by
 *  the frontend * Writers: * the proactive database wellness job for OOD. *
 *  Readers:
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sqlMinRecommendedIncreaseSizeGb;

/**
 *  This field represents the state generated by the proactive database wellness
 *  job for OutOfDisk issues. * Writers: * the proactive database wellness job
 *  for OOD. * Readers: * the proactive database wellness job
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_SqlOutOfDiskReport_SqlOutOfDiskState_Normal The
 *        instance has plenty space on data disk (Value: "NORMAL")
 *    @arg @c kGTLRSQLAdmin_SqlOutOfDiskReport_SqlOutOfDiskState_SoftShutdown
 *        Data disk is almost used up. It is shutdown to prevent data
 *        corruption. (Value: "SOFT_SHUTDOWN")
 *    @arg @c kGTLRSQLAdmin_SqlOutOfDiskReport_SqlOutOfDiskState_SqlOutOfDiskStateUnspecified
 *        Unspecified state (Value: "SQL_OUT_OF_DISK_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *sqlOutOfDiskState;

@end


/**
 *  Any scheduled maintenance for this instance.
 */
@interface GTLRSQLAdmin_SqlScheduledMaintenance : GTLRObject

/**
 *  canDefer
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canDefer GTLR_DEPRECATED;

/**
 *  If the scheduled maintenance can be rescheduled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *canReschedule;

/** Maintenance cannot be rescheduled to start beyond this deadline. */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleDeadlineTime;

/** The start time of any upcoming scheduled maintenance for this instance. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  SQL Server specific audit configuration.
 */
@interface GTLRSQLAdmin_SqlServerAuditConfig : GTLRObject

/** The name of the destination bucket (e.g., gs://mybucket). */
@property(nonatomic, copy, nullable) NSString *bucket;

/** This is always sql#sqlServerAuditConfig */
@property(nonatomic, copy, nullable) NSString *kind;

/** How long to keep generated audit files. */
@property(nonatomic, strong, nullable) GTLRDuration *retentionInterval;

/** How often to upload generated audit files. */
@property(nonatomic, strong, nullable) GTLRDuration *uploadInterval;

@end


/**
 *  Represents a Sql Server database on the Cloud SQL instance.
 */
@interface GTLRSQLAdmin_SqlServerDatabaseDetails : GTLRObject

/**
 *  The version of SQL Server with which the database is to be made compatible
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *compatibilityLevel;

/** The recovery model of a SQL Server database */
@property(nonatomic, copy, nullable) NSString *recoveryModel;

@end


/**
 *  Represents a Sql Server user on the Cloud SQL instance.
 */
@interface GTLRSQLAdmin_SqlServerUserDetails : GTLRObject

/**
 *  If the user has been disabled
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

/** The server roles for this user */
@property(nonatomic, strong, nullable) NSArray<NSString *> *serverRoles;

@end


/**
 *  SslCerts Resource
 */
@interface GTLRSQLAdmin_SslCert : GTLRObject

/** PEM representation. */
@property(nonatomic, copy, nullable) NSString *cert;

/** Serial number, as extracted from the certificate. */
@property(nonatomic, copy, nullable) NSString *certSerialNumber;

/** User supplied name. Constrained to [a-zA-Z.-_ ]+. */
@property(nonatomic, copy, nullable) NSString *commonName;

/**
 *  The time when the certificate was created in [RFC
 *  3339](https://tools.ietf.org/html/rfc3339) format, for example
 *  `2012-11-15T16:19:00.094Z`
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The time when the certificate expires in [RFC
 *  3339](https://tools.ietf.org/html/rfc3339) format, for example
 *  `2012-11-15T16:19:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expirationTime;

/** Name of the database instance. */
@property(nonatomic, copy, nullable) NSString *instance;

/** This is always `sql#sslCert`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The URI of this resource. */
@property(nonatomic, copy, nullable) NSString *selfLink;

/** Sha1 Fingerprint. */
@property(nonatomic, copy, nullable) NSString *sha1Fingerprint;

@end


/**
 *  SslCertDetail.
 */
@interface GTLRSQLAdmin_SslCertDetail : GTLRObject

/** The public information about the cert. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_SslCert *certInfo;

/**
 *  The private key for the client cert, in pem format. Keep private in order to
 *  protect your security.
 */
@property(nonatomic, copy, nullable) NSString *certPrivateKey;

@end


/**
 *  SslCerts create ephemeral certificate request.
 */
@interface GTLRSQLAdmin_SslCertsCreateEphemeralRequest : GTLRObject

/** Access token to include in the signed certificate. */
@property(nonatomic, copy, nullable) NSString *accessToken;

/** PEM encoded public key to include in the signed certificate. */
@property(nonatomic, copy, nullable) NSString *publicKey;

@end


/**
 *  SslCerts insert request.
 */
@interface GTLRSQLAdmin_SslCertsInsertRequest : GTLRObject

/**
 *  User supplied name. Must be a distinct name from the other certificates for
 *  this instance.
 */
@property(nonatomic, copy, nullable) NSString *commonName;

@end


/**
 *  SslCert insert response.
 */
@interface GTLRSQLAdmin_SslCertsInsertResponse : GTLRObject

/** The new client certificate and private key. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_SslCertDetail *clientCert;

/** This is always `sql#sslCertsInsert`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** The operation to track the ssl certs insert request. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_Operation *operation;

/**
 *  The server Certificate Authority's certificate. If this is missing you can
 *  force a new one to be generated by calling resetSslConfig method on
 *  instances resource.
 */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_SslCert *serverCaCert;

@end


/**
 *  SslCerts list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRSQLAdmin_SslCertsListResponse : GTLRCollectionObject

/**
 *  List of client certificates for the instance.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_SslCert *> *items;

/** This is always `sql#sslCertsList`. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Initial sync flags for certain Cloud SQL APIs. Currently used for the MySQL
 *  external server initial dump.
 */
@interface GTLRSQLAdmin_SyncFlags : GTLRObject

/** The name of the flag. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The value of the flag. This field must be omitted if the flag doesn't take a
 *  value.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  A Google Cloud SQL service tier resource.
 */
@interface GTLRSQLAdmin_Tier : GTLRObject

/**
 *  The maximum disk size of this tier in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *DiskQuota;

/** This is always `sql#tier`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The maximum RAM usage of this tier in bytes.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *RAM;

/** The applicable regions for this tier. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *region;

/**
 *  An identifier for the machine type, for example, `db-custom-1-3840`. For
 *  related information, see [Pricing](/sql/pricing).
 */
@property(nonatomic, copy, nullable) NSString *tier;

@end


/**
 *  Tiers list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property.
 */
@interface GTLRSQLAdmin_TiersListResponse : GTLRCollectionObject

/**
 *  List of tiers.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_Tier *> *items;

/** This is always `sql#tiersList`. */
@property(nonatomic, copy, nullable) NSString *kind;

@end


/**
 *  Database Instance truncate log context.
 */
@interface GTLRSQLAdmin_TruncateLogContext : GTLRObject

/** This is always `sql#truncateLogContext`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The type of log to truncate. Valid values are `MYSQL_GENERAL_TABLE` and
 *  `MYSQL_SLOW_TABLE`.
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  A Cloud SQL user resource.
 */
@interface GTLRSQLAdmin_User : GTLRObject

/**
 *  Dual password status for the user.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_User_DualPasswordType_DualPassword Dual password
 *        usable for connecting using this user. (Value: "DUAL_PASSWORD")
 *    @arg @c kGTLRSQLAdmin_User_DualPasswordType_DualPasswordTypeUnspecified
 *        The default value. (Value: "DUAL_PASSWORD_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRSQLAdmin_User_DualPasswordType_NoDualPassword No dual
 *        password usable for connecting using this user. (Value:
 *        "NO_DUAL_PASSWORD")
 *    @arg @c kGTLRSQLAdmin_User_DualPasswordType_NoModifyDualPassword Do not
 *        update the user's dual password status. (Value:
 *        "NO_MODIFY_DUAL_PASSWORD")
 */
@property(nonatomic, copy, nullable) NSString *dualPasswordType;

/**
 *  This field is deprecated and will be removed from a future version of the
 *  API.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Optional. The host from which the user can connect. For `insert` operations,
 *  host defaults to an empty string. For `update` operations, host is specified
 *  as part of the request URL. The host name cannot be updated after insertion.
 *  For a MySQL instance, it's required; for a PostgreSQL or SQL Server
 *  instance, it's optional.
 */
@property(nonatomic, copy, nullable) NSString *host;

/**
 *  The name of the Cloud SQL instance. This does not include the project ID.
 *  Can be omitted for `update` because it is already specified on the URL.
 */
@property(nonatomic, copy, nullable) NSString *instance;

/** This is always `sql#user`. */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  The name of the user in the Cloud SQL instance. Can be omitted for `update`
 *  because it is already specified in the URL.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The password for the user. */
@property(nonatomic, copy, nullable) NSString *password;

/** User level password validation policy. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_UserPasswordValidationPolicy *passwordPolicy;

/**
 *  The project ID of the project containing the Cloud SQL database. The Google
 *  apps domain is prefixed if applicable. Can be omitted for `update` because
 *  it is already specified on the URL.
 */
@property(nonatomic, copy, nullable) NSString *project;

@property(nonatomic, strong, nullable) GTLRSQLAdmin_SqlServerUserDetails *sqlserverUserDetails;

/**
 *  The user type. It determines the method to authenticate the user during
 *  login. The default is the database's built-in user type.
 *
 *  Likely values:
 *    @arg @c kGTLRSQLAdmin_User_Type_BuiltIn The database's built-in user type.
 *        (Value: "BUILT_IN")
 *    @arg @c kGTLRSQLAdmin_User_Type_CloudIamGroup Cloud IAM group. Not used
 *        for login. (Value: "CLOUD_IAM_GROUP")
 *    @arg @c kGTLRSQLAdmin_User_Type_CloudIamGroupServiceAccount Read-only.
 *        Login for a service account that belongs to the Cloud IAM group.
 *        (Value: "CLOUD_IAM_GROUP_SERVICE_ACCOUNT")
 *    @arg @c kGTLRSQLAdmin_User_Type_CloudIamGroupUser Read-only. Login for a
 *        user that belongs to the Cloud IAM group. (Value:
 *        "CLOUD_IAM_GROUP_USER")
 *    @arg @c kGTLRSQLAdmin_User_Type_CloudIamServiceAccount Cloud IAM service
 *        account. (Value: "CLOUD_IAM_SERVICE_ACCOUNT")
 *    @arg @c kGTLRSQLAdmin_User_Type_CloudIamUser Cloud IAM user. (Value:
 *        "CLOUD_IAM_USER")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  User level password validation policy.
 */
@interface GTLRSQLAdmin_UserPasswordValidationPolicy : GTLRObject

/**
 *  Number of failed login attempts allowed before user get locked.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowedFailedAttempts;

/**
 *  If true, failed login attempts check will be enabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableFailedAttemptsCheck;

/**
 *  If true, the user must specify the current password before changing the
 *  password. This flag is supported only for MySQL.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enablePasswordVerification;

/** Expiration duration after password is updated. */
@property(nonatomic, strong, nullable) GTLRDuration *passwordExpirationDuration;

/** Output only. Read-only password status. */
@property(nonatomic, strong, nullable) GTLRSQLAdmin_PasswordStatus *status;

@end


/**
 *  User list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "items" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRSQLAdmin_UsersListResponse : GTLRCollectionObject

/**
 *  List of user resources in the instance.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRSQLAdmin_User *> *items;

/** This is always `sql#usersList`. */
@property(nonatomic, copy, nullable) NSString *kind;

/** Unused. */
@property(nonatomic, copy, nullable) NSString *nextPageToken GTLR_DEPRECATED;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
