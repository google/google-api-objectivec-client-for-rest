// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud SQL Admin API (sqladmin/v1)
// Description:
//   API for Cloud SQL database instance management
// Documentation:
//   https://developers.google.com/cloud-sql/

#import <GoogleAPIClientForREST/GTLRSQLAdminObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRSQLAdmin_ApiWarning.code
NSString * const kGTLRSQLAdmin_ApiWarning_Code_MaxResultsExceedsLimit = @"MAX_RESULTS_EXCEEDS_LIMIT";
NSString * const kGTLRSQLAdmin_ApiWarning_Code_RegionUnreachable = @"REGION_UNREACHABLE";
NSString * const kGTLRSQLAdmin_ApiWarning_Code_SqlApiWarningCodeUnspecified = @"SQL_API_WARNING_CODE_UNSPECIFIED";

// GTLRSQLAdmin_BackupRetentionSettings.retentionUnit
NSString * const kGTLRSQLAdmin_BackupRetentionSettings_RetentionUnit_Count = @"COUNT";
NSString * const kGTLRSQLAdmin_BackupRetentionSettings_RetentionUnit_RetentionUnitUnspecified = @"RETENTION_UNIT_UNSPECIFIED";

// GTLRSQLAdmin_BackupRun.backupKind
NSString * const kGTLRSQLAdmin_BackupRun_BackupKind_Physical   = @"PHYSICAL";
NSString * const kGTLRSQLAdmin_BackupRun_BackupKind_Snapshot   = @"SNAPSHOT";
NSString * const kGTLRSQLAdmin_BackupRun_BackupKind_SqlBackupKindUnspecified = @"SQL_BACKUP_KIND_UNSPECIFIED";

// GTLRSQLAdmin_BackupRun.status
NSString * const kGTLRSQLAdmin_BackupRun_Status_Deleted        = @"DELETED";
NSString * const kGTLRSQLAdmin_BackupRun_Status_DeletionFailed = @"DELETION_FAILED";
NSString * const kGTLRSQLAdmin_BackupRun_Status_DeletionPending = @"DELETION_PENDING";
NSString * const kGTLRSQLAdmin_BackupRun_Status_Enqueued       = @"ENQUEUED";
NSString * const kGTLRSQLAdmin_BackupRun_Status_Failed         = @"FAILED";
NSString * const kGTLRSQLAdmin_BackupRun_Status_Overdue        = @"OVERDUE";
NSString * const kGTLRSQLAdmin_BackupRun_Status_Running        = @"RUNNING";
NSString * const kGTLRSQLAdmin_BackupRun_Status_Skipped        = @"SKIPPED";
NSString * const kGTLRSQLAdmin_BackupRun_Status_SqlBackupRunStatusUnspecified = @"SQL_BACKUP_RUN_STATUS_UNSPECIFIED";
NSString * const kGTLRSQLAdmin_BackupRun_Status_Successful     = @"SUCCESSFUL";

// GTLRSQLAdmin_BackupRun.type
NSString * const kGTLRSQLAdmin_BackupRun_Type_Automated        = @"AUTOMATED";
NSString * const kGTLRSQLAdmin_BackupRun_Type_OnDemand         = @"ON_DEMAND";
NSString * const kGTLRSQLAdmin_BackupRun_Type_SqlBackupRunTypeUnspecified = @"SQL_BACKUP_RUN_TYPE_UNSPECIFIED";

// GTLRSQLAdmin_ConnectSettings.backendType
NSString * const kGTLRSQLAdmin_ConnectSettings_BackendType_External = @"EXTERNAL";
NSString * const kGTLRSQLAdmin_ConnectSettings_BackendType_FirstGen = @"FIRST_GEN";
NSString * const kGTLRSQLAdmin_ConnectSettings_BackendType_SecondGen = @"SECOND_GEN";
NSString * const kGTLRSQLAdmin_ConnectSettings_BackendType_SqlBackendTypeUnspecified = @"SQL_BACKEND_TYPE_UNSPECIFIED";

// GTLRSQLAdmin_ConnectSettings.databaseVersion
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql51 = @"MYSQL_5_1";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql55 = @"MYSQL_5_5";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql56 = @"MYSQL_5_6";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql57 = @"MYSQL_5_7";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql80 = @"MYSQL_8_0";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8018 = @"MYSQL_8_0_18";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8026 = @"MYSQL_8_0_26";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8027 = @"MYSQL_8_0_27";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8028 = @"MYSQL_8_0_28";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8029 = @"MYSQL_8_0_29";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Mysql8030 = @"MYSQL_8_0_30";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres10 = @"POSTGRES_10";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres11 = @"POSTGRES_11";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres12 = @"POSTGRES_12";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres13 = @"POSTGRES_13";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres14 = @"POSTGRES_14";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Postgres96 = @"POSTGRES_9_6";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_SqlDatabaseVersionUnspecified = @"SQL_DATABASE_VERSION_UNSPECIFIED";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2017Enterprise = @"SQLSERVER_2017_ENTERPRISE";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2017Express = @"SQLSERVER_2017_EXPRESS";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2017Standard = @"SQLSERVER_2017_STANDARD";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2017Web = @"SQLSERVER_2017_WEB";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2019Enterprise = @"SQLSERVER_2019_ENTERPRISE";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2019Express = @"SQLSERVER_2019_EXPRESS";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2019Standard = @"SQLSERVER_2019_STANDARD";
NSString * const kGTLRSQLAdmin_ConnectSettings_DatabaseVersion_Sqlserver2019Web = @"SQLSERVER_2019_WEB";

// GTLRSQLAdmin_DatabaseInstance.backendType
NSString * const kGTLRSQLAdmin_DatabaseInstance_BackendType_External = @"EXTERNAL";
NSString * const kGTLRSQLAdmin_DatabaseInstance_BackendType_FirstGen = @"FIRST_GEN";
NSString * const kGTLRSQLAdmin_DatabaseInstance_BackendType_SecondGen = @"SECOND_GEN";
NSString * const kGTLRSQLAdmin_DatabaseInstance_BackendType_SqlBackendTypeUnspecified = @"SQL_BACKEND_TYPE_UNSPECIFIED";

// GTLRSQLAdmin_DatabaseInstance.databaseVersion
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql51 = @"MYSQL_5_1";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql55 = @"MYSQL_5_5";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql56 = @"MYSQL_5_6";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql57 = @"MYSQL_5_7";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql80 = @"MYSQL_8_0";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8018 = @"MYSQL_8_0_18";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8026 = @"MYSQL_8_0_26";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8027 = @"MYSQL_8_0_27";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8028 = @"MYSQL_8_0_28";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8029 = @"MYSQL_8_0_29";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Mysql8030 = @"MYSQL_8_0_30";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres10 = @"POSTGRES_10";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres11 = @"POSTGRES_11";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres12 = @"POSTGRES_12";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres13 = @"POSTGRES_13";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres14 = @"POSTGRES_14";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Postgres96 = @"POSTGRES_9_6";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_SqlDatabaseVersionUnspecified = @"SQL_DATABASE_VERSION_UNSPECIFIED";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2017Enterprise = @"SQLSERVER_2017_ENTERPRISE";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2017Express = @"SQLSERVER_2017_EXPRESS";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2017Standard = @"SQLSERVER_2017_STANDARD";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2017Web = @"SQLSERVER_2017_WEB";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2019Enterprise = @"SQLSERVER_2019_ENTERPRISE";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2019Express = @"SQLSERVER_2019_EXPRESS";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2019Standard = @"SQLSERVER_2019_STANDARD";
NSString * const kGTLRSQLAdmin_DatabaseInstance_DatabaseVersion_Sqlserver2019Web = @"SQLSERVER_2019_WEB";

// GTLRSQLAdmin_DatabaseInstance.instanceType
NSString * const kGTLRSQLAdmin_DatabaseInstance_InstanceType_CloudSqlInstance = @"CLOUD_SQL_INSTANCE";
NSString * const kGTLRSQLAdmin_DatabaseInstance_InstanceType_OnPremisesInstance = @"ON_PREMISES_INSTANCE";
NSString * const kGTLRSQLAdmin_DatabaseInstance_InstanceType_ReadReplicaInstance = @"READ_REPLICA_INSTANCE";
NSString * const kGTLRSQLAdmin_DatabaseInstance_InstanceType_SqlInstanceTypeUnspecified = @"SQL_INSTANCE_TYPE_UNSPECIFIED";

// GTLRSQLAdmin_DatabaseInstance.state
NSString * const kGTLRSQLAdmin_DatabaseInstance_State_Failed   = @"FAILED";
NSString * const kGTLRSQLAdmin_DatabaseInstance_State_Maintenance = @"MAINTENANCE";
NSString * const kGTLRSQLAdmin_DatabaseInstance_State_OnlineMaintenance = @"ONLINE_MAINTENANCE";
NSString * const kGTLRSQLAdmin_DatabaseInstance_State_PendingCreate = @"PENDING_CREATE";
NSString * const kGTLRSQLAdmin_DatabaseInstance_State_PendingDelete = @"PENDING_DELETE";
NSString * const kGTLRSQLAdmin_DatabaseInstance_State_Runnable = @"RUNNABLE";
NSString * const kGTLRSQLAdmin_DatabaseInstance_State_SqlInstanceStateUnspecified = @"SQL_INSTANCE_STATE_UNSPECIFIED";
NSString * const kGTLRSQLAdmin_DatabaseInstance_State_Suspended = @"SUSPENDED";

// GTLRSQLAdmin_DatabaseInstance.suspensionReason
NSString * const kGTLRSQLAdmin_DatabaseInstance_SuspensionReason_BillingIssue = @"BILLING_ISSUE";
NSString * const kGTLRSQLAdmin_DatabaseInstance_SuspensionReason_KmsKeyIssue = @"KMS_KEY_ISSUE";
NSString * const kGTLRSQLAdmin_DatabaseInstance_SuspensionReason_LegalIssue = @"LEGAL_ISSUE";
NSString * const kGTLRSQLAdmin_DatabaseInstance_SuspensionReason_OperationalIssue = @"OPERATIONAL_ISSUE";
NSString * const kGTLRSQLAdmin_DatabaseInstance_SuspensionReason_SqlSuspensionReasonUnspecified = @"SQL_SUSPENSION_REASON_UNSPECIFIED";

// GTLRSQLAdmin_ExportContext.fileType
NSString * const kGTLRSQLAdmin_ExportContext_FileType_Bak      = @"BAK";
NSString * const kGTLRSQLAdmin_ExportContext_FileType_Csv      = @"CSV";
NSString * const kGTLRSQLAdmin_ExportContext_FileType_Sql      = @"SQL";
NSString * const kGTLRSQLAdmin_ExportContext_FileType_SqlFileTypeUnspecified = @"SQL_FILE_TYPE_UNSPECIFIED";

// GTLRSQLAdmin_Flag.appliesTo
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql51          = @"MYSQL_5_1";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql55          = @"MYSQL_5_5";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql56          = @"MYSQL_5_6";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql57          = @"MYSQL_5_7";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql80          = @"MYSQL_8_0";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8018        = @"MYSQL_8_0_18";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8026        = @"MYSQL_8_0_26";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8027        = @"MYSQL_8_0_27";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8028        = @"MYSQL_8_0_28";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8029        = @"MYSQL_8_0_29";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Mysql8030        = @"MYSQL_8_0_30";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Postgres10       = @"POSTGRES_10";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Postgres11       = @"POSTGRES_11";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Postgres12       = @"POSTGRES_12";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Postgres13       = @"POSTGRES_13";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Postgres14       = @"POSTGRES_14";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Postgres96       = @"POSTGRES_9_6";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_SqlDatabaseVersionUnspecified = @"SQL_DATABASE_VERSION_UNSPECIFIED";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2017Enterprise = @"SQLSERVER_2017_ENTERPRISE";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2017Express = @"SQLSERVER_2017_EXPRESS";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2017Standard = @"SQLSERVER_2017_STANDARD";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2017Web = @"SQLSERVER_2017_WEB";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2019Enterprise = @"SQLSERVER_2019_ENTERPRISE";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2019Express = @"SQLSERVER_2019_EXPRESS";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2019Standard = @"SQLSERVER_2019_STANDARD";
NSString * const kGTLRSQLAdmin_Flag_AppliesTo_Sqlserver2019Web = @"SQLSERVER_2019_WEB";

// GTLRSQLAdmin_Flag.type
NSString * const kGTLRSQLAdmin_Flag_Type_Boolean               = @"BOOLEAN";
NSString * const kGTLRSQLAdmin_Flag_Type_Float                 = @"FLOAT";
NSString * const kGTLRSQLAdmin_Flag_Type_Integer               = @"INTEGER";
NSString * const kGTLRSQLAdmin_Flag_Type_MysqlTimezoneOffset   = @"MYSQL_TIMEZONE_OFFSET";
NSString * const kGTLRSQLAdmin_Flag_Type_None                  = @"NONE";
NSString * const kGTLRSQLAdmin_Flag_Type_RepeatedString        = @"REPEATED_STRING";
NSString * const kGTLRSQLAdmin_Flag_Type_SqlFlagTypeUnspecified = @"SQL_FLAG_TYPE_UNSPECIFIED";
NSString * const kGTLRSQLAdmin_Flag_Type_String                = @"STRING";

// GTLRSQLAdmin_ImportContext.fileType
NSString * const kGTLRSQLAdmin_ImportContext_FileType_Bak      = @"BAK";
NSString * const kGTLRSQLAdmin_ImportContext_FileType_Csv      = @"CSV";
NSString * const kGTLRSQLAdmin_ImportContext_FileType_Sql      = @"SQL";
NSString * const kGTLRSQLAdmin_ImportContext_FileType_SqlFileTypeUnspecified = @"SQL_FILE_TYPE_UNSPECIFIED";

// GTLRSQLAdmin_IpMapping.type
NSString * const kGTLRSQLAdmin_IpMapping_Type_Migrated1stGen   = @"MIGRATED_1ST_GEN";
NSString * const kGTLRSQLAdmin_IpMapping_Type_Outgoing         = @"OUTGOING";
NSString * const kGTLRSQLAdmin_IpMapping_Type_Primary          = @"PRIMARY";
NSString * const kGTLRSQLAdmin_IpMapping_Type_Private          = @"PRIVATE";
NSString * const kGTLRSQLAdmin_IpMapping_Type_SqlIpAddressTypeUnspecified = @"SQL_IP_ADDRESS_TYPE_UNSPECIFIED";

// GTLRSQLAdmin_MaintenanceWindow.updateTrack
NSString * const kGTLRSQLAdmin_MaintenanceWindow_UpdateTrack_Canary = @"canary";
NSString * const kGTLRSQLAdmin_MaintenanceWindow_UpdateTrack_SqlUpdateTrackUnspecified = @"SQL_UPDATE_TRACK_UNSPECIFIED";
NSString * const kGTLRSQLAdmin_MaintenanceWindow_UpdateTrack_Stable = @"stable";

// GTLRSQLAdmin_Operation.operationType
NSString * const kGTLRSQLAdmin_Operation_OperationType_AutoRestart = @"AUTO_RESTART";
NSString * const kGTLRSQLAdmin_Operation_OperationType_Backup  = @"BACKUP";
NSString * const kGTLRSQLAdmin_Operation_OperationType_BackupVolume = @"BACKUP_VOLUME";
NSString * const kGTLRSQLAdmin_Operation_OperationType_Clone   = @"CLONE";
NSString * const kGTLRSQLAdmin_Operation_OperationType_Create  = @"CREATE";
NSString * const kGTLRSQLAdmin_Operation_OperationType_CreateClone = @"CREATE_CLONE";
NSString * const kGTLRSQLAdmin_Operation_OperationType_CreateDatabase = @"CREATE_DATABASE";
NSString * const kGTLRSQLAdmin_Operation_OperationType_CreateReplica = @"CREATE_REPLICA";
NSString * const kGTLRSQLAdmin_Operation_OperationType_CreateUser = @"CREATE_USER";
NSString * const kGTLRSQLAdmin_Operation_OperationType_DeferMaintenance = @"DEFER_MAINTENANCE";
NSString * const kGTLRSQLAdmin_Operation_OperationType_Delete  = @"DELETE";
NSString * const kGTLRSQLAdmin_Operation_OperationType_DeleteBackup = @"DELETE_BACKUP";
NSString * const kGTLRSQLAdmin_Operation_OperationType_DeleteDatabase = @"DELETE_DATABASE";
NSString * const kGTLRSQLAdmin_Operation_OperationType_DeleteUser = @"DELETE_USER";
NSString * const kGTLRSQLAdmin_Operation_OperationType_DeleteVolume = @"DELETE_VOLUME";
NSString * const kGTLRSQLAdmin_Operation_OperationType_DemoteMaster = @"DEMOTE_MASTER";
NSString * const kGTLRSQLAdmin_Operation_OperationType_EnablePrivateIp = @"ENABLE_PRIVATE_IP";
NSString * const kGTLRSQLAdmin_Operation_OperationType_Export  = @"EXPORT";
NSString * const kGTLRSQLAdmin_Operation_OperationType_Failover = @"FAILOVER";
NSString * const kGTLRSQLAdmin_Operation_OperationType_Import  = @"IMPORT";
NSString * const kGTLRSQLAdmin_Operation_OperationType_InjectUser = @"INJECT_USER";
NSString * const kGTLRSQLAdmin_Operation_OperationType_LogCleanup = @"LOG_CLEANUP";
NSString * const kGTLRSQLAdmin_Operation_OperationType_Maintenance = @"MAINTENANCE";
NSString * const kGTLRSQLAdmin_Operation_OperationType_PromoteReplica = @"PROMOTE_REPLICA";
NSString * const kGTLRSQLAdmin_Operation_OperationType_RecreateReplica = @"RECREATE_REPLICA";
NSString * const kGTLRSQLAdmin_Operation_OperationType_RescheduleMaintenance = @"RESCHEDULE_MAINTENANCE";
NSString * const kGTLRSQLAdmin_Operation_OperationType_Restart = @"RESTART";
NSString * const kGTLRSQLAdmin_Operation_OperationType_RestoreVolume = @"RESTORE_VOLUME";
NSString * const kGTLRSQLAdmin_Operation_OperationType_Snapshot = @"SNAPSHOT";
NSString * const kGTLRSQLAdmin_Operation_OperationType_SqlOperationTypeUnspecified = @"SQL_OPERATION_TYPE_UNSPECIFIED";
NSString * const kGTLRSQLAdmin_Operation_OperationType_StartExternalSync = @"START_EXTERNAL_SYNC";
NSString * const kGTLRSQLAdmin_Operation_OperationType_StartReplica = @"START_REPLICA";
NSString * const kGTLRSQLAdmin_Operation_OperationType_StopReplica = @"STOP_REPLICA";
NSString * const kGTLRSQLAdmin_Operation_OperationType_TruncateLog = @"TRUNCATE_LOG";
NSString * const kGTLRSQLAdmin_Operation_OperationType_Update  = @"UPDATE";
NSString * const kGTLRSQLAdmin_Operation_OperationType_UpdateDatabase = @"UPDATE_DATABASE";
NSString * const kGTLRSQLAdmin_Operation_OperationType_UpdateUser = @"UPDATE_USER";

// GTLRSQLAdmin_Operation.status
NSString * const kGTLRSQLAdmin_Operation_Status_Done           = @"DONE";
NSString * const kGTLRSQLAdmin_Operation_Status_Pending        = @"PENDING";
NSString * const kGTLRSQLAdmin_Operation_Status_Running        = @"RUNNING";
NSString * const kGTLRSQLAdmin_Operation_Status_SqlOperationStatusUnspecified = @"SQL_OPERATION_STATUS_UNSPECIFIED";

// GTLRSQLAdmin_PasswordValidationPolicy.complexity
NSString * const kGTLRSQLAdmin_PasswordValidationPolicy_Complexity_ComplexityDefault = @"COMPLEXITY_DEFAULT";
NSString * const kGTLRSQLAdmin_PasswordValidationPolicy_Complexity_ComplexityUnspecified = @"COMPLEXITY_UNSPECIFIED";

// GTLRSQLAdmin_Reschedule.rescheduleType
NSString * const kGTLRSQLAdmin_Reschedule_RescheduleType_Immediate = @"IMMEDIATE";
NSString * const kGTLRSQLAdmin_Reschedule_RescheduleType_NextAvailableWindow = @"NEXT_AVAILABLE_WINDOW";
NSString * const kGTLRSQLAdmin_Reschedule_RescheduleType_RescheduleTypeUnspecified = @"RESCHEDULE_TYPE_UNSPECIFIED";
NSString * const kGTLRSQLAdmin_Reschedule_RescheduleType_SpecificTime = @"SPECIFIC_TIME";

// GTLRSQLAdmin_Settings.activationPolicy
NSString * const kGTLRSQLAdmin_Settings_ActivationPolicy_Always = @"ALWAYS";
NSString * const kGTLRSQLAdmin_Settings_ActivationPolicy_Never = @"NEVER";
NSString * const kGTLRSQLAdmin_Settings_ActivationPolicy_OnDemand = @"ON_DEMAND";
NSString * const kGTLRSQLAdmin_Settings_ActivationPolicy_SqlActivationPolicyUnspecified = @"SQL_ACTIVATION_POLICY_UNSPECIFIED";

// GTLRSQLAdmin_Settings.availabilityType
NSString * const kGTLRSQLAdmin_Settings_AvailabilityType_Regional = @"REGIONAL";
NSString * const kGTLRSQLAdmin_Settings_AvailabilityType_SqlAvailabilityTypeUnspecified = @"SQL_AVAILABILITY_TYPE_UNSPECIFIED";
NSString * const kGTLRSQLAdmin_Settings_AvailabilityType_Zonal = @"ZONAL";

// GTLRSQLAdmin_Settings.connectorEnforcement
NSString * const kGTLRSQLAdmin_Settings_ConnectorEnforcement_ConnectorEnforcementUnspecified = @"CONNECTOR_ENFORCEMENT_UNSPECIFIED";
NSString * const kGTLRSQLAdmin_Settings_ConnectorEnforcement_NotRequired = @"NOT_REQUIRED";
NSString * const kGTLRSQLAdmin_Settings_ConnectorEnforcement_Required = @"REQUIRED";

// GTLRSQLAdmin_Settings.dataDiskType
NSString * const kGTLRSQLAdmin_Settings_DataDiskType_ObsoleteLocalSsd = @"OBSOLETE_LOCAL_SSD";
NSString * const kGTLRSQLAdmin_Settings_DataDiskType_PdHdd     = @"PD_HDD";
NSString * const kGTLRSQLAdmin_Settings_DataDiskType_PdSsd     = @"PD_SSD";
NSString * const kGTLRSQLAdmin_Settings_DataDiskType_SqlDataDiskTypeUnspecified = @"SQL_DATA_DISK_TYPE_UNSPECIFIED";

// GTLRSQLAdmin_Settings.pricingPlan
NSString * const kGTLRSQLAdmin_Settings_PricingPlan_Package    = @"PACKAGE";
NSString * const kGTLRSQLAdmin_Settings_PricingPlan_PerUse     = @"PER_USE";
NSString * const kGTLRSQLAdmin_Settings_PricingPlan_SqlPricingPlanUnspecified = @"SQL_PRICING_PLAN_UNSPECIFIED";

// GTLRSQLAdmin_Settings.replicationType
NSString * const kGTLRSQLAdmin_Settings_ReplicationType_Asynchronous = @"ASYNCHRONOUS";
NSString * const kGTLRSQLAdmin_Settings_ReplicationType_SqlReplicationTypeUnspecified = @"SQL_REPLICATION_TYPE_UNSPECIFIED";
NSString * const kGTLRSQLAdmin_Settings_ReplicationType_Synchronous = @"SYNCHRONOUS";

// GTLRSQLAdmin_SqlExternalSyncSettingError.type
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_BinlogNotEnabled = @"BINLOG_NOT_ENABLED";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_BinlogRetentionSetting = @"BINLOG_RETENTION_SETTING";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_ConnectionFailure = @"CONNECTION_FAILURE";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_IncompatibleDatabaseVersion = @"INCOMPATIBLE_DATABASE_VERSION";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientMaxReplicationSlots = @"INSUFFICIENT_MAX_REPLICATION_SLOTS";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientMaxWalSenders = @"INSUFFICIENT_MAX_WAL_SENDERS";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientMaxWorkerProcesses = @"INSUFFICIENT_MAX_WORKER_PROCESSES";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InsufficientPrivilege = @"INSUFFICIENT_PRIVILEGE";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidDbParam = @"INVALID_DB_PARAM";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidLoggingSetup = @"INVALID_LOGGING_SETUP";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidRdsLogicalReplication = @"INVALID_RDS_LOGICAL_REPLICATION";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidSharedPreloadLibrary = @"INVALID_SHARED_PRELOAD_LIBRARY";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_InvalidWalLevel = @"INVALID_WAL_LEVEL";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_LimitedSupportTables = @"LIMITED_SUPPORT_TABLES";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_NoPglogicalInstalled = @"NO_PGLOGICAL_INSTALLED";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_PglogicalNodeAlreadyExists = @"PGLOGICAL_NODE_ALREADY_EXISTS";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_PrimaryAlreadySetup = @"PRIMARY_ALREADY_SETUP";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_ReplicaAlreadySetup = @"REPLICA_ALREADY_SETUP";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_SqlExternalSyncSettingErrorTypeUnspecified = @"SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_SqlserverAgentNotRunning = @"SQLSERVER_AGENT_NOT_RUNNING";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_SqlserverServernameMismatch = @"SQLSERVER_SERVERNAME_MISMATCH";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedBinlogFormat = @"UNSUPPORTED_BINLOG_FORMAT";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedDefiner = @"UNSUPPORTED_DEFINER";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedExtensions = @"UNSUPPORTED_EXTENSIONS";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedGtidMode = @"UNSUPPORTED_GTID_MODE";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedMigrationType = @"UNSUPPORTED_MIGRATION_TYPE";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedStorageEngine = @"UNSUPPORTED_STORAGE_ENGINE";
NSString * const kGTLRSQLAdmin_SqlExternalSyncSettingError_Type_UnsupportedTableDefinition = @"UNSUPPORTED_TABLE_DEFINITION";

// GTLRSQLAdmin_SqlInstancesStartExternalSyncRequest.syncMode
NSString * const kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncMode_ExternalSyncModeUnspecified = @"EXTERNAL_SYNC_MODE_UNSPECIFIED";
NSString * const kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncMode_Offline = @"OFFLINE";
NSString * const kGTLRSQLAdmin_SqlInstancesStartExternalSyncRequest_SyncMode_Online = @"ONLINE";

// GTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest.syncMode
NSString * const kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncMode_ExternalSyncModeUnspecified = @"EXTERNAL_SYNC_MODE_UNSPECIFIED";
NSString * const kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncMode_Offline = @"OFFLINE";
NSString * const kGTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest_SyncMode_Online = @"ONLINE";

// GTLRSQLAdmin_SqlOutOfDiskReport.sqlOutOfDiskState
NSString * const kGTLRSQLAdmin_SqlOutOfDiskReport_SqlOutOfDiskState_Normal = @"NORMAL";
NSString * const kGTLRSQLAdmin_SqlOutOfDiskReport_SqlOutOfDiskState_SoftShutdown = @"SOFT_SHUTDOWN";
NSString * const kGTLRSQLAdmin_SqlOutOfDiskReport_SqlOutOfDiskState_SqlOutOfDiskStateUnspecified = @"SQL_OUT_OF_DISK_STATE_UNSPECIFIED";

// GTLRSQLAdmin_User.dualPasswordType
NSString * const kGTLRSQLAdmin_User_DualPasswordType_DualPassword = @"DUAL_PASSWORD";
NSString * const kGTLRSQLAdmin_User_DualPasswordType_DualPasswordTypeUnspecified = @"DUAL_PASSWORD_TYPE_UNSPECIFIED";
NSString * const kGTLRSQLAdmin_User_DualPasswordType_NoDualPassword = @"NO_DUAL_PASSWORD";
NSString * const kGTLRSQLAdmin_User_DualPasswordType_NoModifyDualPassword = @"NO_MODIFY_DUAL_PASSWORD";

// GTLRSQLAdmin_User.type
NSString * const kGTLRSQLAdmin_User_Type_BuiltIn               = @"BUILT_IN";
NSString * const kGTLRSQLAdmin_User_Type_CloudIamServiceAccount = @"CLOUD_IAM_SERVICE_ACCOUNT";
NSString * const kGTLRSQLAdmin_User_Type_CloudIamUser          = @"CLOUD_IAM_USER";

// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_AclEntry
//

@implementation GTLRSQLAdmin_AclEntry
@dynamic expirationTime, kind, name, value;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_ApiWarning
//

@implementation GTLRSQLAdmin_ApiWarning
@dynamic code, message, region;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_BackupConfiguration
//

@implementation GTLRSQLAdmin_BackupConfiguration
@dynamic backupRetentionSettings, binaryLogEnabled, enabled, kind, location,
         pointInTimeRecoveryEnabled, replicationLogArchivingEnabled, startTime,
         transactionLogRetentionDays;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_BackupContext
//

@implementation GTLRSQLAdmin_BackupContext
@dynamic backupId, kind;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_BackupRetentionSettings
//

@implementation GTLRSQLAdmin_BackupRetentionSettings
@dynamic retainedBackups, retentionUnit;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_BackupRun
//

@implementation GTLRSQLAdmin_BackupRun
@dynamic backupKind, descriptionProperty, diskEncryptionConfiguration,
         diskEncryptionStatus, endTime, enqueuedTime, error, identifier,
         instance, kind, location, selfLink, startTime, status, timeZone, type,
         windowStartTime;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"identifier" : @"id"
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_BackupRunsListResponse
//

@implementation GTLRSQLAdmin_BackupRunsListResponse
@dynamic items, kind, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRSQLAdmin_BackupRun class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_BinLogCoordinates
//

@implementation GTLRSQLAdmin_BinLogCoordinates
@dynamic binLogFileName, binLogPosition, kind;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_CloneContext
//

@implementation GTLRSQLAdmin_CloneContext
@dynamic allocatedIpRange, binLogCoordinates, databaseNames,
         destinationInstanceName, kind, pitrTimestampMs, pointInTime;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"databaseNames" : [NSString class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_ConnectSettings
//

@implementation GTLRSQLAdmin_ConnectSettings
@dynamic backendType, databaseVersion, ipAddresses, kind, region, serverCaCert;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"ipAddresses" : [GTLRSQLAdmin_IpMapping class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_Database
//

@implementation GTLRSQLAdmin_Database
@dynamic charset, collation, ETag, instance, kind, name, project, selfLink,
         sqlserverDatabaseDetails;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_DatabaseFlags
//

@implementation GTLRSQLAdmin_DatabaseFlags
@dynamic name, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_DatabaseInstance
//

@implementation GTLRSQLAdmin_DatabaseInstance
@dynamic availableMaintenanceVersions, backendType, connectionName, createTime,
         currentDiskSize, databaseInstalledVersion, databaseVersion,
         diskEncryptionConfiguration, diskEncryptionStatus, ETag,
         failoverReplica, gceZone, instanceType, ipAddresses, ipv6Address, kind,
         maintenanceVersion, masterInstanceName, maxDiskSize, name,
         onPremisesConfiguration, outOfDiskReport, project, region,
         replicaConfiguration, replicaNames, rootPassword, satisfiesPzs,
         scheduledMaintenance, secondaryGceZone, selfLink, serverCaCert,
         serviceAccountEmailAddress, settings, state, suspensionReason;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"availableMaintenanceVersions" : [NSString class],
    @"ipAddresses" : [GTLRSQLAdmin_IpMapping class],
    @"replicaNames" : [NSString class],
    @"suspensionReason" : [NSString class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_DatabaseInstance_FailoverReplica
//

@implementation GTLRSQLAdmin_DatabaseInstance_FailoverReplica
@dynamic available, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_DatabasesListResponse
//

@implementation GTLRSQLAdmin_DatabasesListResponse
@dynamic items, kind;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRSQLAdmin_Database class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_DemoteMasterConfiguration
//

@implementation GTLRSQLAdmin_DemoteMasterConfiguration
@dynamic kind, mysqlReplicaConfiguration;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_DemoteMasterContext
//

@implementation GTLRSQLAdmin_DemoteMasterContext
@dynamic kind, masterInstanceName, replicaConfiguration, skipReplicationSetup,
         verifyGtidConsistency;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_DemoteMasterMySqlReplicaConfiguration
//

@implementation GTLRSQLAdmin_DemoteMasterMySqlReplicaConfiguration
@dynamic caCertificate, clientCertificate, clientKey, kind, password, username;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_DenyMaintenancePeriod
//

@implementation GTLRSQLAdmin_DenyMaintenancePeriod
@dynamic endDate, startDate, time;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_DiskEncryptionConfiguration
//

@implementation GTLRSQLAdmin_DiskEncryptionConfiguration
@dynamic kind, kmsKeyName;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_DiskEncryptionStatus
//

@implementation GTLRSQLAdmin_DiskEncryptionStatus
@dynamic kind, kmsKeyVersionName;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_ExportContext
//

@implementation GTLRSQLAdmin_ExportContext
@dynamic bakExportOptions, csvExportOptions, databases, fileType, kind, offload,
         sqlExportOptions, uri;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"databases" : [NSString class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_ExportContext_BakExportOptions
//

@implementation GTLRSQLAdmin_ExportContext_BakExportOptions
@dynamic stripeCount, striped;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_ExportContext_CsvExportOptions
//

@implementation GTLRSQLAdmin_ExportContext_CsvExportOptions
@dynamic escapeCharacter, fieldsTerminatedBy, linesTerminatedBy, quoteCharacter,
         selectQuery;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_ExportContext_SqlExportOptions
//

@implementation GTLRSQLAdmin_ExportContext_SqlExportOptions
@dynamic mysqlExportOptions, schemaOnly, tables;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"tables" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_ExportContext_SqlExportOptions_MysqlExportOptions
//

@implementation GTLRSQLAdmin_ExportContext_SqlExportOptions_MysqlExportOptions
@dynamic masterData;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_FailoverContext
//

@implementation GTLRSQLAdmin_FailoverContext
@dynamic kind, settingsVersion;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_Flag
//

@implementation GTLRSQLAdmin_Flag
@dynamic allowedIntValues, allowedStringValues, appliesTo, inBeta, kind,
         maxValue, minValue, name, requiresRestart, type;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"allowedIntValues" : [NSNumber class],
    @"allowedStringValues" : [NSString class],
    @"appliesTo" : [NSString class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_FlagsListResponse
//

@implementation GTLRSQLAdmin_FlagsListResponse
@dynamic items, kind;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRSQLAdmin_Flag class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_GenerateEphemeralCertRequest
//

@implementation GTLRSQLAdmin_GenerateEphemeralCertRequest
@dynamic accessToken, publicKey, readTime, validDuration;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"accessToken" : @"access_token",
    @"publicKey" : @"public_key"
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_GenerateEphemeralCertResponse
//

@implementation GTLRSQLAdmin_GenerateEphemeralCertResponse
@dynamic ephemeralCert;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_ImportContext
//

@implementation GTLRSQLAdmin_ImportContext
@dynamic bakImportOptions, csvImportOptions, database, fileType, importUser,
         kind, uri;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_ImportContext_BakImportOptions
//

@implementation GTLRSQLAdmin_ImportContext_BakImportOptions
@dynamic encryptionOptions, striped;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_ImportContext_CsvImportOptions
//

@implementation GTLRSQLAdmin_ImportContext_CsvImportOptions
@dynamic columns, escapeCharacter, fieldsTerminatedBy, linesTerminatedBy,
         quoteCharacter, table;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"columns" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_ImportContext_BakImportOptions_EncryptionOptions
//

@implementation GTLRSQLAdmin_ImportContext_BakImportOptions_EncryptionOptions
@dynamic certPath, pvkPassword, pvkPath;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_InsightsConfig
//

@implementation GTLRSQLAdmin_InsightsConfig
@dynamic queryInsightsEnabled, queryPlansPerMinute, queryStringLength,
         recordApplicationTags, recordClientAddress;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_InstanceReference
//

@implementation GTLRSQLAdmin_InstanceReference
@dynamic name, project, region;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_InstancesCloneRequest
//

@implementation GTLRSQLAdmin_InstancesCloneRequest
@dynamic cloneContext;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_InstancesDemoteMasterRequest
//

@implementation GTLRSQLAdmin_InstancesDemoteMasterRequest
@dynamic demoteMasterContext;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_InstancesExportRequest
//

@implementation GTLRSQLAdmin_InstancesExportRequest
@dynamic exportContext;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_InstancesFailoverRequest
//

@implementation GTLRSQLAdmin_InstancesFailoverRequest
@dynamic failoverContext;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_InstancesImportRequest
//

@implementation GTLRSQLAdmin_InstancesImportRequest
@dynamic importContext;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_InstancesListResponse
//

@implementation GTLRSQLAdmin_InstancesListResponse
@dynamic items, kind, nextPageToken, warnings;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRSQLAdmin_DatabaseInstance class],
    @"warnings" : [GTLRSQLAdmin_ApiWarning class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_InstancesListServerCasResponse
//

@implementation GTLRSQLAdmin_InstancesListServerCasResponse
@dynamic activeVersion, certs, kind;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"certs" : [GTLRSQLAdmin_SslCert class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_InstancesRestoreBackupRequest
//

@implementation GTLRSQLAdmin_InstancesRestoreBackupRequest
@dynamic restoreBackupContext;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_InstancesRotateServerCaRequest
//

@implementation GTLRSQLAdmin_InstancesRotateServerCaRequest
@dynamic rotateServerCaContext;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_InstancesTruncateLogRequest
//

@implementation GTLRSQLAdmin_InstancesTruncateLogRequest
@dynamic truncateLogContext;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_IpConfiguration
//

@implementation GTLRSQLAdmin_IpConfiguration
@dynamic allocatedIpRange, authorizedNetworks,
         enablePrivatePathForGoogleCloudServices, ipv4Enabled, privateNetwork,
         requireSsl;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"authorizedNetworks" : [GTLRSQLAdmin_AclEntry class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_IpMapping
//

@implementation GTLRSQLAdmin_IpMapping
@dynamic ipAddress, timeToRetire, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_LocationPreference
//

@implementation GTLRSQLAdmin_LocationPreference
@dynamic followGaeApplication, kind, secondaryZone, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_MaintenanceWindow
//

@implementation GTLRSQLAdmin_MaintenanceWindow
@dynamic day, hour, kind, updateTrack;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_MySqlReplicaConfiguration
//

@implementation GTLRSQLAdmin_MySqlReplicaConfiguration
@dynamic caCertificate, clientCertificate, clientKey, connectRetryInterval,
         dumpFilePath, kind, masterHeartbeatPeriod, password, sslCipher,
         username, verifyServerCertificate;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_MySqlSyncConfig
//

@implementation GTLRSQLAdmin_MySqlSyncConfig
@dynamic initialSyncFlags;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"initialSyncFlags" : [GTLRSQLAdmin_SyncFlags class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_OnPremisesConfiguration
//

@implementation GTLRSQLAdmin_OnPremisesConfiguration
@dynamic caCertificate, clientCertificate, clientKey, dumpFilePath, hostPort,
         kind, password, sourceInstance, username;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_Operation
//

@implementation GTLRSQLAdmin_Operation
@dynamic backupContext, endTime, error, exportContext, importContext,
         insertTime, kind, name, operationType, selfLink, startTime, status,
         targetId, targetLink, targetProject, user;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_OperationError
//

@implementation GTLRSQLAdmin_OperationError
@dynamic code, kind, message;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_OperationErrors
//

@implementation GTLRSQLAdmin_OperationErrors
@dynamic errors, kind;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"errors" : [GTLRSQLAdmin_OperationError class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_OperationsListResponse
//

@implementation GTLRSQLAdmin_OperationsListResponse
@dynamic items, kind, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRSQLAdmin_Operation class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_PasswordStatus
//

@implementation GTLRSQLAdmin_PasswordStatus
@dynamic locked, passwordExpirationTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_PasswordValidationPolicy
//

@implementation GTLRSQLAdmin_PasswordValidationPolicy
@dynamic complexity, disallowUsernameSubstring, enablePasswordPolicy, minLength,
         passwordChangeInterval, reuseInterval;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_ReplicaConfiguration
//

@implementation GTLRSQLAdmin_ReplicaConfiguration
@dynamic failoverTarget, kind, mysqlReplicaConfiguration;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_Reschedule
//

@implementation GTLRSQLAdmin_Reschedule
@dynamic rescheduleType, scheduleTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_RestoreBackupContext
//

@implementation GTLRSQLAdmin_RestoreBackupContext
@dynamic backupRunId, instanceId, kind, project;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_RotateServerCaContext
//

@implementation GTLRSQLAdmin_RotateServerCaContext
@dynamic kind, nextVersion;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_Settings
//

@implementation GTLRSQLAdmin_Settings
@dynamic activationPolicy, activeDirectoryConfig, authorizedGaeApplications,
         availabilityType, backupConfiguration, collation, connectorEnforcement,
         crashSafeReplicationEnabled, databaseFlags, databaseReplicationEnabled,
         dataDiskSizeGb, dataDiskType, deletionProtectionEnabled,
         denyMaintenancePeriods, insightsConfig, ipConfiguration, kind,
         locationPreference, maintenanceWindow, passwordValidationPolicy,
         pricingPlan, replicationType, settingsVersion, sqlServerAuditConfig,
         storageAutoResize, storageAutoResizeLimit, tier, timeZone, userLabels;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"authorizedGaeApplications" : [NSString class],
    @"databaseFlags" : [GTLRSQLAdmin_DatabaseFlags class],
    @"denyMaintenancePeriods" : [GTLRSQLAdmin_DenyMaintenancePeriod class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_Settings_UserLabels
//

@implementation GTLRSQLAdmin_Settings_UserLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SqlActiveDirectoryConfig
//

@implementation GTLRSQLAdmin_SqlActiveDirectoryConfig
@dynamic domain, kind;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SqlExternalSyncSettingError
//

@implementation GTLRSQLAdmin_SqlExternalSyncSettingError
@dynamic detail, kind, type;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SqlInstancesRescheduleMaintenanceRequestBody
//

@implementation GTLRSQLAdmin_SqlInstancesRescheduleMaintenanceRequestBody
@dynamic reschedule;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SqlInstancesStartExternalSyncRequest
//

@implementation GTLRSQLAdmin_SqlInstancesStartExternalSyncRequest
@dynamic mysqlSyncConfig, skipVerification, syncMode;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest
//

@implementation GTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsRequest
@dynamic mysqlSyncConfig, syncMode, verifyConnectionOnly, verifyReplicationOnly;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsResponse
//

@implementation GTLRSQLAdmin_SqlInstancesVerifyExternalSyncSettingsResponse
@dynamic errors, kind, warnings;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"errors" : [GTLRSQLAdmin_SqlExternalSyncSettingError class],
    @"warnings" : [GTLRSQLAdmin_SqlExternalSyncSettingError class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SqlOutOfDiskReport
//

@implementation GTLRSQLAdmin_SqlOutOfDiskReport
@dynamic sqlMinRecommendedIncreaseSizeGb, sqlOutOfDiskState;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SqlScheduledMaintenance
//

@implementation GTLRSQLAdmin_SqlScheduledMaintenance
@dynamic canDefer, canReschedule, scheduleDeadlineTime, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SqlServerAuditConfig
//

@implementation GTLRSQLAdmin_SqlServerAuditConfig
@dynamic bucket, kind, retentionInterval, uploadInterval;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SqlServerDatabaseDetails
//

@implementation GTLRSQLAdmin_SqlServerDatabaseDetails
@dynamic compatibilityLevel, recoveryModel;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SqlServerUserDetails
//

@implementation GTLRSQLAdmin_SqlServerUserDetails
@dynamic disabled, serverRoles;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"serverRoles" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SslCert
//

@implementation GTLRSQLAdmin_SslCert
@dynamic cert, certSerialNumber, commonName, createTime, expirationTime,
         instance, kind, selfLink, sha1Fingerprint;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SslCertDetail
//

@implementation GTLRSQLAdmin_SslCertDetail
@dynamic certInfo, certPrivateKey;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SslCertsCreateEphemeralRequest
//

@implementation GTLRSQLAdmin_SslCertsCreateEphemeralRequest
@dynamic accessToken, publicKey;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"accessToken" : @"access_token",
    @"publicKey" : @"public_key"
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SslCertsInsertRequest
//

@implementation GTLRSQLAdmin_SslCertsInsertRequest
@dynamic commonName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SslCertsInsertResponse
//

@implementation GTLRSQLAdmin_SslCertsInsertResponse
@dynamic clientCert, kind, operation, serverCaCert;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SslCertsListResponse
//

@implementation GTLRSQLAdmin_SslCertsListResponse
@dynamic items, kind;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRSQLAdmin_SslCert class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_SyncFlags
//

@implementation GTLRSQLAdmin_SyncFlags
@dynamic name, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_Tier
//

@implementation GTLRSQLAdmin_Tier
@dynamic DiskQuota, kind, RAM, region, tier;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"region" : [NSString class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_TiersListResponse
//

@implementation GTLRSQLAdmin_TiersListResponse
@dynamic items, kind;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRSQLAdmin_Tier class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_TruncateLogContext
//

@implementation GTLRSQLAdmin_TruncateLogContext
@dynamic kind, logType;

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_User
//

@implementation GTLRSQLAdmin_User
@dynamic dualPasswordType, ETag, host, instance, kind, name, password,
         passwordPolicy, project, sqlserverUserDetails, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_UserPasswordValidationPolicy
//

@implementation GTLRSQLAdmin_UserPasswordValidationPolicy
@dynamic allowedFailedAttempts, enableFailedAttemptsCheck,
         enablePasswordVerification, passwordExpirationDuration, status;
@end


// ----------------------------------------------------------------------------
//
//   GTLRSQLAdmin_UsersListResponse
//

@implementation GTLRSQLAdmin_UsersListResponse
@dynamic items, kind, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"items" : [GTLRSQLAdmin_User class]
  };
  return map;
}

+ (BOOL)isKindValidForClassRegistry {
  // This class has a "kind" property that doesn't appear to be usable to
  // determine what type of object was encoded in the JSON.
  return NO;
}

@end
