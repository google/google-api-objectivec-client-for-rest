// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Apps Script API (script/v1)
// Description:
//   Manages and executes Google Apps Script projects.
// Documentation:
//   https://developers.google.com/apps-script/api/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRScriptObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// metricsGranularity

/**
 *  Represents daily metrics over a period of 7 days.
 *
 *  Value: "DAILY"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptMetricsGranularityDaily;
/**
 *  Default metric granularity used to query no metrics.
 *
 *  Value: "UNSPECIFIED_GRANULARITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptMetricsGranularityUnspecifiedGranularity;
/**
 *  Represents weekly metrics.
 *
 *  Value: "WEEKLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptMetricsGranularityWeekly;

// ----------------------------------------------------------------------------
// scriptProcessFilterStatuses

/**
 *  The process was cancelled.
 *
 *  Value: "CANCELED"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterStatusesCanceled;
/**
 *  The process has completed.
 *
 *  Value: "COMPLETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterStatusesCompleted;
/**
 *  The process is delayed, waiting for quota.
 *
 *  Value: "DELAYED"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterStatusesDelayed;
/**
 *  The process failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterStatusesFailed;
/**
 *  The process has paused.
 *
 *  Value: "PAUSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterStatusesPaused;
/**
 *  Unspecified status.
 *
 *  Value: "PROCESS_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterStatusesProcessStatusUnspecified;
/**
 *  The process is currently running.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterStatusesRunning;
/**
 *  The process timed out.
 *
 *  Value: "TIMED_OUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterStatusesTimedOut;
/**
 *  Process status unknown.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterStatusesUnknown;

// ----------------------------------------------------------------------------
// scriptProcessFilterTypes

/**
 *  The process was started from an add-on entry point.
 *
 *  Value: "ADD_ON"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterTypesAddOn;
/**
 *  The process was started as a task in a batch job.
 *
 *  Value: "BATCH_TASK"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterTypesBatchTask;
/**
 *  The process was started using the Apps Script IDE.
 *
 *  Value: "EDITOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterTypesEditor;
/**
 *  The process was started using the Apps Script API.
 *
 *  Value: "EXECUTION_API"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterTypesExecutionApi;
/**
 *  The process was started from a G Suite menu item.
 *
 *  Value: "MENU"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterTypesMenu;
/**
 *  Unspecified type.
 *
 *  Value: "PROCESS_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterTypesProcessTypeUnspecified;
/**
 *  The process was started from a G Suite simple trigger.
 *
 *  Value: "SIMPLE_TRIGGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterTypesSimpleTrigger;
/**
 *  The process was started from a time-based trigger.
 *
 *  Value: "TIME_DRIVEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterTypesTimeDriven;
/**
 *  The process was started from an event-based trigger.
 *
 *  Value: "TRIGGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterTypesTrigger;
/**
 *  The process was started from a web app entry point.
 *
 *  Value: "WEBAPP"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterTypesWebapp;

// ----------------------------------------------------------------------------
// scriptProcessFilterUserAccessLevels

/**
 *  The user has no access.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterUserAccessLevelsNone;
/**
 *  The user is an owner.
 *
 *  Value: "OWNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterUserAccessLevelsOwner;
/**
 *  The user has read-only access.
 *
 *  Value: "READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterUserAccessLevelsRead;
/**
 *  User access level unspecified
 *
 *  Value: "USER_ACCESS_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterUserAccessLevelsUserAccessLevelUnspecified;
/**
 *  The user has write access.
 *
 *  Value: "WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptScriptProcessFilterUserAccessLevelsWrite;

// ----------------------------------------------------------------------------
// userProcessFilterStatuses

/**
 *  The process was cancelled.
 *
 *  Value: "CANCELED"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterStatusesCanceled;
/**
 *  The process has completed.
 *
 *  Value: "COMPLETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterStatusesCompleted;
/**
 *  The process is delayed, waiting for quota.
 *
 *  Value: "DELAYED"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterStatusesDelayed;
/**
 *  The process failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterStatusesFailed;
/**
 *  The process has paused.
 *
 *  Value: "PAUSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterStatusesPaused;
/**
 *  Unspecified status.
 *
 *  Value: "PROCESS_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterStatusesProcessStatusUnspecified;
/**
 *  The process is currently running.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterStatusesRunning;
/**
 *  The process timed out.
 *
 *  Value: "TIMED_OUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterStatusesTimedOut;
/**
 *  Process status unknown.
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterStatusesUnknown;

// ----------------------------------------------------------------------------
// userProcessFilterTypes

/**
 *  The process was started from an add-on entry point.
 *
 *  Value: "ADD_ON"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterTypesAddOn;
/**
 *  The process was started as a task in a batch job.
 *
 *  Value: "BATCH_TASK"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterTypesBatchTask;
/**
 *  The process was started using the Apps Script IDE.
 *
 *  Value: "EDITOR"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterTypesEditor;
/**
 *  The process was started using the Apps Script API.
 *
 *  Value: "EXECUTION_API"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterTypesExecutionApi;
/**
 *  The process was started from a G Suite menu item.
 *
 *  Value: "MENU"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterTypesMenu;
/**
 *  Unspecified type.
 *
 *  Value: "PROCESS_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterTypesProcessTypeUnspecified;
/**
 *  The process was started from a G Suite simple trigger.
 *
 *  Value: "SIMPLE_TRIGGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterTypesSimpleTrigger;
/**
 *  The process was started from a time-based trigger.
 *
 *  Value: "TIME_DRIVEN"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterTypesTimeDriven;
/**
 *  The process was started from an event-based trigger.
 *
 *  Value: "TRIGGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterTypesTrigger;
/**
 *  The process was started from a web app entry point.
 *
 *  Value: "WEBAPP"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterTypesWebapp;

// ----------------------------------------------------------------------------
// userProcessFilterUserAccessLevels

/**
 *  The user has no access.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterUserAccessLevelsNone;
/**
 *  The user is an owner.
 *
 *  Value: "OWNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterUserAccessLevelsOwner;
/**
 *  The user has read-only access.
 *
 *  Value: "READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterUserAccessLevelsRead;
/**
 *  User access level unspecified
 *
 *  Value: "USER_ACCESS_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterUserAccessLevelsUserAccessLevelUnspecified;
/**
 *  The user has write access.
 *
 *  Value: "WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRScriptUserProcessFilterUserAccessLevelsWrite;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Script query classes.
 */
@interface GTLRScriptQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  List information about processes made by or on behalf of a user, such as
 *  process type and current status.
 *
 *  Method: script.processes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeScriptProcesses
 */
@interface GTLRScriptQuery_ProcessesList : GTLRScriptQuery

/**
 *  The maximum number of returned processes per page of results. Defaults to
 *  50.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The token for continuing a previous list request on the next page. This
 *  should be set to the value of `nextPageToken` from a previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Optional field used to limit returned processes to those originating from
 *  projects with a specific deployment ID.
 */
@property(nonatomic, copy, nullable) NSString *userProcessFilterDeploymentId;

/**
 *  Optional field used to limit returned processes to those that completed on
 *  or before the given timestamp.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *userProcessFilterEndTime;

/**
 *  Optional field used to limit returned processes to those originating from a
 *  script function with the given function name.
 */
@property(nonatomic, copy, nullable) NSString *userProcessFilterFunctionName;

/**
 *  Optional field used to limit returned processes to those originating from
 *  projects with project names containing a specific string.
 */
@property(nonatomic, copy, nullable) NSString *userProcessFilterProjectName;

/**
 *  Optional field used to limit returned processes to those originating from
 *  projects with a specific script ID.
 */
@property(nonatomic, copy, nullable) NSString *userProcessFilterScriptId;

/**
 *  Optional field used to limit returned processes to those that were started
 *  on or after the given timestamp.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *userProcessFilterStartTime;

/**
 *  Optional field used to limit returned processes to those having one of the
 *  specified process statuses.
 *
 *  Likely values:
 *    @arg @c kGTLRScriptUserProcessFilterStatusesProcessStatusUnspecified
 *        Unspecified status. (Value: "PROCESS_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRScriptUserProcessFilterStatusesRunning The process is
 *        currently running. (Value: "RUNNING")
 *    @arg @c kGTLRScriptUserProcessFilterStatusesPaused The process has paused.
 *        (Value: "PAUSED")
 *    @arg @c kGTLRScriptUserProcessFilterStatusesCompleted The process has
 *        completed. (Value: "COMPLETED")
 *    @arg @c kGTLRScriptUserProcessFilterStatusesCanceled The process was
 *        cancelled. (Value: "CANCELED")
 *    @arg @c kGTLRScriptUserProcessFilterStatusesFailed The process failed.
 *        (Value: "FAILED")
 *    @arg @c kGTLRScriptUserProcessFilterStatusesTimedOut The process timed
 *        out. (Value: "TIMED_OUT")
 *    @arg @c kGTLRScriptUserProcessFilterStatusesUnknown Process status
 *        unknown. (Value: "UNKNOWN")
 *    @arg @c kGTLRScriptUserProcessFilterStatusesDelayed The process is
 *        delayed, waiting for quota. (Value: "DELAYED")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *userProcessFilterStatuses;

/**
 *  Optional field used to limit returned processes to those having one of the
 *  specified process types.
 *
 *  Likely values:
 *    @arg @c kGTLRScriptUserProcessFilterTypesProcessTypeUnspecified
 *        Unspecified type. (Value: "PROCESS_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRScriptUserProcessFilterTypesAddOn The process was started
 *        from an add-on entry point. (Value: "ADD_ON")
 *    @arg @c kGTLRScriptUserProcessFilterTypesExecutionApi The process was
 *        started using the Apps Script API. (Value: "EXECUTION_API")
 *    @arg @c kGTLRScriptUserProcessFilterTypesTimeDriven The process was
 *        started from a time-based trigger. (Value: "TIME_DRIVEN")
 *    @arg @c kGTLRScriptUserProcessFilterTypesTrigger The process was started
 *        from an event-based trigger. (Value: "TRIGGER")
 *    @arg @c kGTLRScriptUserProcessFilterTypesWebapp The process was started
 *        from a web app entry point. (Value: "WEBAPP")
 *    @arg @c kGTLRScriptUserProcessFilterTypesEditor The process was started
 *        using the Apps Script IDE. (Value: "EDITOR")
 *    @arg @c kGTLRScriptUserProcessFilterTypesSimpleTrigger The process was
 *        started from a G Suite simple trigger. (Value: "SIMPLE_TRIGGER")
 *    @arg @c kGTLRScriptUserProcessFilterTypesMenu The process was started from
 *        a G Suite menu item. (Value: "MENU")
 *    @arg @c kGTLRScriptUserProcessFilterTypesBatchTask The process was started
 *        as a task in a batch job. (Value: "BATCH_TASK")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *userProcessFilterTypes;

/**
 *  Optional field used to limit returned processes to those having one of the
 *  specified user access levels.
 *
 *  Likely values:
 *    @arg @c kGTLRScriptUserProcessFilterUserAccessLevelsUserAccessLevelUnspecified
 *        User access level unspecified (Value: "USER_ACCESS_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRScriptUserProcessFilterUserAccessLevelsNone The user has no
 *        access. (Value: "NONE")
 *    @arg @c kGTLRScriptUserProcessFilterUserAccessLevelsRead The user has
 *        read-only access. (Value: "READ")
 *    @arg @c kGTLRScriptUserProcessFilterUserAccessLevelsWrite The user has
 *        write access. (Value: "WRITE")
 *    @arg @c kGTLRScriptUserProcessFilterUserAccessLevelsOwner The user is an
 *        owner. (Value: "OWNER")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *userProcessFilterUserAccessLevels;

/**
 *  Fetches a @c GTLRScript_ListUserProcessesResponse.
 *
 *  List information about processes made by or on behalf of a user, such as
 *  process type and current status.
 *
 *  @return GTLRScriptQuery_ProcessesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  List information about a script's executed processes, such as process type
 *  and current status.
 *
 *  Method: script.processes.listScriptProcesses
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeScriptProcesses
 */
@interface GTLRScriptQuery_ProcessesListScriptProcesses : GTLRScriptQuery

/**
 *  The maximum number of returned processes per page of results. Defaults to
 *  50.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The token for continuing a previous list request on the next page. This
 *  should be set to the value of `nextPageToken` from a previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The script ID of the project whose processes are listed. */
@property(nonatomic, copy, nullable) NSString *scriptId;

/**
 *  Optional field used to limit returned processes to those originating from
 *  projects with a specific deployment ID.
 */
@property(nonatomic, copy, nullable) NSString *scriptProcessFilterDeploymentId;

/**
 *  Optional field used to limit returned processes to those that completed on
 *  or before the given timestamp.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scriptProcessFilterEndTime;

/**
 *  Optional field used to limit returned processes to those originating from a
 *  script function with the given function name.
 */
@property(nonatomic, copy, nullable) NSString *scriptProcessFilterFunctionName;

/**
 *  Optional field used to limit returned processes to those that were started
 *  on or after the given timestamp.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *scriptProcessFilterStartTime;

/**
 *  Optional field used to limit returned processes to those having one of the
 *  specified process statuses.
 *
 *  Likely values:
 *    @arg @c kGTLRScriptScriptProcessFilterStatusesProcessStatusUnspecified
 *        Unspecified status. (Value: "PROCESS_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRScriptScriptProcessFilterStatusesRunning The process is
 *        currently running. (Value: "RUNNING")
 *    @arg @c kGTLRScriptScriptProcessFilterStatusesPaused The process has
 *        paused. (Value: "PAUSED")
 *    @arg @c kGTLRScriptScriptProcessFilterStatusesCompleted The process has
 *        completed. (Value: "COMPLETED")
 *    @arg @c kGTLRScriptScriptProcessFilterStatusesCanceled The process was
 *        cancelled. (Value: "CANCELED")
 *    @arg @c kGTLRScriptScriptProcessFilterStatusesFailed The process failed.
 *        (Value: "FAILED")
 *    @arg @c kGTLRScriptScriptProcessFilterStatusesTimedOut The process timed
 *        out. (Value: "TIMED_OUT")
 *    @arg @c kGTLRScriptScriptProcessFilterStatusesUnknown Process status
 *        unknown. (Value: "UNKNOWN")
 *    @arg @c kGTLRScriptScriptProcessFilterStatusesDelayed The process is
 *        delayed, waiting for quota. (Value: "DELAYED")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *scriptProcessFilterStatuses;

/**
 *  Optional field used to limit returned processes to those having one of the
 *  specified process types.
 *
 *  Likely values:
 *    @arg @c kGTLRScriptScriptProcessFilterTypesProcessTypeUnspecified
 *        Unspecified type. (Value: "PROCESS_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRScriptScriptProcessFilterTypesAddOn The process was started
 *        from an add-on entry point. (Value: "ADD_ON")
 *    @arg @c kGTLRScriptScriptProcessFilterTypesExecutionApi The process was
 *        started using the Apps Script API. (Value: "EXECUTION_API")
 *    @arg @c kGTLRScriptScriptProcessFilterTypesTimeDriven The process was
 *        started from a time-based trigger. (Value: "TIME_DRIVEN")
 *    @arg @c kGTLRScriptScriptProcessFilterTypesTrigger The process was started
 *        from an event-based trigger. (Value: "TRIGGER")
 *    @arg @c kGTLRScriptScriptProcessFilterTypesWebapp The process was started
 *        from a web app entry point. (Value: "WEBAPP")
 *    @arg @c kGTLRScriptScriptProcessFilterTypesEditor The process was started
 *        using the Apps Script IDE. (Value: "EDITOR")
 *    @arg @c kGTLRScriptScriptProcessFilterTypesSimpleTrigger The process was
 *        started from a G Suite simple trigger. (Value: "SIMPLE_TRIGGER")
 *    @arg @c kGTLRScriptScriptProcessFilterTypesMenu The process was started
 *        from a G Suite menu item. (Value: "MENU")
 *    @arg @c kGTLRScriptScriptProcessFilterTypesBatchTask The process was
 *        started as a task in a batch job. (Value: "BATCH_TASK")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *scriptProcessFilterTypes;

/**
 *  Optional field used to limit returned processes to those having one of the
 *  specified user access levels.
 *
 *  Likely values:
 *    @arg @c kGTLRScriptScriptProcessFilterUserAccessLevelsUserAccessLevelUnspecified
 *        User access level unspecified (Value: "USER_ACCESS_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRScriptScriptProcessFilterUserAccessLevelsNone The user has no
 *        access. (Value: "NONE")
 *    @arg @c kGTLRScriptScriptProcessFilterUserAccessLevelsRead The user has
 *        read-only access. (Value: "READ")
 *    @arg @c kGTLRScriptScriptProcessFilterUserAccessLevelsWrite The user has
 *        write access. (Value: "WRITE")
 *    @arg @c kGTLRScriptScriptProcessFilterUserAccessLevelsOwner The user is an
 *        owner. (Value: "OWNER")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *scriptProcessFilterUserAccessLevels;

/**
 *  Fetches a @c GTLRScript_ListScriptProcessesResponse.
 *
 *  List information about a script's executed processes, such as process type
 *  and current status.
 *
 *  @return GTLRScriptQuery_ProcessesListScriptProcesses
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Creates a new, empty script project with no script files and a base manifest
 *  file.
 *
 *  Method: script.projects.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeScriptProjects
 */
@interface GTLRScriptQuery_ProjectsCreate : GTLRScriptQuery

/**
 *  Fetches a @c GTLRScript_Project.
 *
 *  Creates a new, empty script project with no script files and a base manifest
 *  file.
 *
 *  @param object The @c GTLRScript_CreateProjectRequest to include in the
 *    query.
 *
 *  @return GTLRScriptQuery_ProjectsCreate
 */
+ (instancetype)queryWithObject:(GTLRScript_CreateProjectRequest *)object;

@end

/**
 *  Creates a deployment of an Apps Script project.
 *
 *  Method: script.projects.deployments.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeScriptDeployments
 */
@interface GTLRScriptQuery_ProjectsDeploymentsCreate : GTLRScriptQuery

/** The script project's Drive ID. */
@property(nonatomic, copy, nullable) NSString *scriptId;

/**
 *  Fetches a @c GTLRScript_Deployment.
 *
 *  Creates a deployment of an Apps Script project.
 *
 *  @param object The @c GTLRScript_DeploymentConfig to include in the query.
 *  @param scriptId The script project's Drive ID.
 *
 *  @return GTLRScriptQuery_ProjectsDeploymentsCreate
 */
+ (instancetype)queryWithObject:(GTLRScript_DeploymentConfig *)object
                       scriptId:(NSString *)scriptId;

@end

/**
 *  Deletes a deployment of an Apps Script project.
 *
 *  Method: script.projects.deployments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeScriptDeployments
 */
@interface GTLRScriptQuery_ProjectsDeploymentsDelete : GTLRScriptQuery

/** The deployment ID to be undeployed. */
@property(nonatomic, copy, nullable) NSString *deploymentId;

/** The script project's Drive ID. */
@property(nonatomic, copy, nullable) NSString *scriptId;

/**
 *  Fetches a @c GTLRScript_Empty.
 *
 *  Deletes a deployment of an Apps Script project.
 *
 *  @param scriptId The script project's Drive ID.
 *  @param deploymentId The deployment ID to be undeployed.
 *
 *  @return GTLRScriptQuery_ProjectsDeploymentsDelete
 */
+ (instancetype)queryWithScriptId:(NSString *)scriptId
                     deploymentId:(NSString *)deploymentId;

@end

/**
 *  Gets a deployment of an Apps Script project.
 *
 *  Method: script.projects.deployments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeScriptDeployments
 *    @c kGTLRAuthScopeScriptDeploymentsReadonly
 */
@interface GTLRScriptQuery_ProjectsDeploymentsGet : GTLRScriptQuery

/** The deployment ID. */
@property(nonatomic, copy, nullable) NSString *deploymentId;

/** The script project's Drive ID. */
@property(nonatomic, copy, nullable) NSString *scriptId;

/**
 *  Fetches a @c GTLRScript_Deployment.
 *
 *  Gets a deployment of an Apps Script project.
 *
 *  @param scriptId The script project's Drive ID.
 *  @param deploymentId The deployment ID.
 *
 *  @return GTLRScriptQuery_ProjectsDeploymentsGet
 */
+ (instancetype)queryWithScriptId:(NSString *)scriptId
                     deploymentId:(NSString *)deploymentId;

@end

/**
 *  Lists the deployments of an Apps Script project.
 *
 *  Method: script.projects.deployments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeScriptDeployments
 *    @c kGTLRAuthScopeScriptDeploymentsReadonly
 */
@interface GTLRScriptQuery_ProjectsDeploymentsList : GTLRScriptQuery

/**
 *  The maximum number of deployments on each returned page. Defaults to 50.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The token for continuing a previous list request on the next page. This
 *  should be set to the value of `nextPageToken` from a previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The script project's Drive ID. */
@property(nonatomic, copy, nullable) NSString *scriptId;

/**
 *  Fetches a @c GTLRScript_ListDeploymentsResponse.
 *
 *  Lists the deployments of an Apps Script project.
 *
 *  @param scriptId The script project's Drive ID.
 *
 *  @return GTLRScriptQuery_ProjectsDeploymentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithScriptId:(NSString *)scriptId;

@end

/**
 *  Updates a deployment of an Apps Script project.
 *
 *  Method: script.projects.deployments.update
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeScriptDeployments
 */
@interface GTLRScriptQuery_ProjectsDeploymentsUpdate : GTLRScriptQuery

/** The deployment ID for this deployment. */
@property(nonatomic, copy, nullable) NSString *deploymentId;

/** The script project's Drive ID. */
@property(nonatomic, copy, nullable) NSString *scriptId;

/**
 *  Fetches a @c GTLRScript_Deployment.
 *
 *  Updates a deployment of an Apps Script project.
 *
 *  @param object The @c GTLRScript_UpdateDeploymentRequest to include in the
 *    query.
 *  @param scriptId The script project's Drive ID.
 *  @param deploymentId The deployment ID for this deployment.
 *
 *  @return GTLRScriptQuery_ProjectsDeploymentsUpdate
 */
+ (instancetype)queryWithObject:(GTLRScript_UpdateDeploymentRequest *)object
                       scriptId:(NSString *)scriptId
                   deploymentId:(NSString *)deploymentId;

@end

/**
 *  Gets a script project's metadata.
 *
 *  Method: script.projects.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeScriptProjects
 *    @c kGTLRAuthScopeScriptProjectsReadonly
 */
@interface GTLRScriptQuery_ProjectsGet : GTLRScriptQuery

/** The script project's Drive ID. */
@property(nonatomic, copy, nullable) NSString *scriptId;

/**
 *  Fetches a @c GTLRScript_Project.
 *
 *  Gets a script project's metadata.
 *
 *  @param scriptId The script project's Drive ID.
 *
 *  @return GTLRScriptQuery_ProjectsGet
 */
+ (instancetype)queryWithScriptId:(NSString *)scriptId;

@end

/**
 *  Gets the content of the script project, including the code source and
 *  metadata for each script file.
 *
 *  Method: script.projects.getContent
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeScriptProjects
 *    @c kGTLRAuthScopeScriptProjectsReadonly
 */
@interface GTLRScriptQuery_ProjectsGetContent : GTLRScriptQuery

/** The script project's Drive ID. */
@property(nonatomic, copy, nullable) NSString *scriptId;

/**
 *  The version number of the project to retrieve. If not provided, the
 *  project's HEAD version is returned.
 */
@property(nonatomic, assign) NSInteger versionNumber;

/**
 *  Fetches a @c GTLRScript_Content.
 *
 *  Gets the content of the script project, including the code source and
 *  metadata for each script file.
 *
 *  @param scriptId The script project's Drive ID.
 *
 *  @return GTLRScriptQuery_ProjectsGetContent
 */
+ (instancetype)queryWithScriptId:(NSString *)scriptId;

@end

/**
 *  Get metrics data for scripts, such as number of executions and active users.
 *
 *  Method: script.projects.getMetrics
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeScriptMetrics
 */
@interface GTLRScriptQuery_ProjectsGetMetrics : GTLRScriptQuery

/**
 *  Optional field indicating a specific deployment to retrieve metrics from.
 */
@property(nonatomic, copy, nullable) NSString *metricsFilterDeploymentId;

/**
 *  Required field indicating what granularity of metrics are returned.
 *
 *  Likely values:
 *    @arg @c kGTLRScriptMetricsGranularityUnspecifiedGranularity Default metric
 *        granularity used to query no metrics. (Value:
 *        "UNSPECIFIED_GRANULARITY")
 *    @arg @c kGTLRScriptMetricsGranularityWeekly Represents weekly metrics.
 *        (Value: "WEEKLY")
 *    @arg @c kGTLRScriptMetricsGranularityDaily Represents daily metrics over a
 *        period of 7 days. (Value: "DAILY")
 */
@property(nonatomic, copy, nullable) NSString *metricsGranularity;

/** Required field indicating the script to get metrics for. */
@property(nonatomic, copy, nullable) NSString *scriptId;

/**
 *  Fetches a @c GTLRScript_Metrics.
 *
 *  Get metrics data for scripts, such as number of executions and active users.
 *
 *  @param scriptId Required field indicating the script to get metrics for.
 *
 *  @return GTLRScriptQuery_ProjectsGetMetrics
 */
+ (instancetype)queryWithScriptId:(NSString *)scriptId;

@end

/**
 *  Updates the content of the specified script project. This content is stored
 *  as the HEAD version, and is used when the script is executed as a trigger,
 *  in the script editor, in add-on preview mode, or as a web app or Apps Script
 *  API in development mode. This clears all the existing files in the project.
 *
 *  Method: script.projects.updateContent
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeScriptProjects
 */
@interface GTLRScriptQuery_ProjectsUpdateContent : GTLRScriptQuery

/** The script project's Drive ID. */
@property(nonatomic, copy, nullable) NSString *scriptId;

/**
 *  Fetches a @c GTLRScript_Content.
 *
 *  Updates the content of the specified script project. This content is stored
 *  as the HEAD version, and is used when the script is executed as a trigger,
 *  in the script editor, in add-on preview mode, or as a web app or Apps Script
 *  API in development mode. This clears all the existing files in the project.
 *
 *  @param object The @c GTLRScript_Content to include in the query.
 *  @param scriptId The script project's Drive ID.
 *
 *  @return GTLRScriptQuery_ProjectsUpdateContent
 */
+ (instancetype)queryWithObject:(GTLRScript_Content *)object
                       scriptId:(NSString *)scriptId;

@end

/**
 *  Creates a new immutable version using the current code, with a unique
 *  version number.
 *
 *  Method: script.projects.versions.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeScriptProjects
 */
@interface GTLRScriptQuery_ProjectsVersionsCreate : GTLRScriptQuery

/** The script project's Drive ID. */
@property(nonatomic, copy, nullable) NSString *scriptId;

/**
 *  Fetches a @c GTLRScript_Version.
 *
 *  Creates a new immutable version using the current code, with a unique
 *  version number.
 *
 *  @param object The @c GTLRScript_Version to include in the query.
 *  @param scriptId The script project's Drive ID.
 *
 *  @return GTLRScriptQuery_ProjectsVersionsCreate
 */
+ (instancetype)queryWithObject:(GTLRScript_Version *)object
                       scriptId:(NSString *)scriptId;

@end

/**
 *  Gets a version of a script project.
 *
 *  Method: script.projects.versions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeScriptProjects
 *    @c kGTLRAuthScopeScriptProjectsReadonly
 */
@interface GTLRScriptQuery_ProjectsVersionsGet : GTLRScriptQuery

/** The script project's Drive ID. */
@property(nonatomic, copy, nullable) NSString *scriptId;

/** The version number. */
@property(nonatomic, assign) NSInteger versionNumber;

/**
 *  Fetches a @c GTLRScript_Version.
 *
 *  Gets a version of a script project.
 *
 *  @param scriptId The script project's Drive ID.
 *  @param versionNumber The version number.
 *
 *  @return GTLRScriptQuery_ProjectsVersionsGet
 */
+ (instancetype)queryWithScriptId:(NSString *)scriptId
                    versionNumber:(NSInteger)versionNumber;

@end

/**
 *  List the versions of a script project.
 *
 *  Method: script.projects.versions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeScriptProjects
 *    @c kGTLRAuthScopeScriptProjectsReadonly
 */
@interface GTLRScriptQuery_ProjectsVersionsList : GTLRScriptQuery

/** The maximum number of versions on each returned page. Defaults to 50. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The token for continuing a previous list request on the next page. This
 *  should be set to the value of `nextPageToken` from a previous response.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** The script project's Drive ID. */
@property(nonatomic, copy, nullable) NSString *scriptId;

/**
 *  Fetches a @c GTLRScript_ListVersionsResponse.
 *
 *  List the versions of a script project.
 *
 *  @param scriptId The script project's Drive ID.
 *
 *  @return GTLRScriptQuery_ProjectsVersionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithScriptId:(NSString *)scriptId;

@end

/**
 *  Runs a function in an Apps Script project. The script project must be
 *  deployed for use with the Apps Script API and the calling application must
 *  share the same Cloud Platform project. This method requires authorization
 *  with an OAuth 2.0 token that includes at least one of the scopes listed in
 *  the [Authorization](#authorization-scopes) section; script projects that do
 *  not require authorization cannot be executed through this API. To find the
 *  correct scopes to include in the authentication token, open the script
 *  project **Overview** page and scroll down to "Project OAuth Scopes." The
 *  error `403, PERMISSION_DENIED: The caller does not have permission`
 *  indicates that the Cloud Platform project used to authorize the request is
 *  not the same as the one used by the script.
 *
 *  Method: script.scripts.run
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeScriptAdminDirectoryGroup
 *    @c kGTLRAuthScopeScriptAdminDirectoryUser
 *    @c kGTLRAuthScopeScriptCalendarFeeds
 *    @c kGTLRAuthScopeScriptDocuments
 *    @c kGTLRAuthScopeScriptDrive
 *    @c kGTLRAuthScopeScriptForms
 *    @c kGTLRAuthScopeScriptFormsCurrentonly
 *    @c kGTLRAuthScopeScriptGroups
 *    @c kGTLRAuthScopeScriptM8Feeds
 *    @c kGTLRAuthScopeScriptMailGoogleCom
 *    @c kGTLRAuthScopeScriptSpreadsheets
 *    @c kGTLRAuthScopeScriptUserinfoEmail
 */
@interface GTLRScriptQuery_ScriptsRun : GTLRScriptQuery

/**
 *  The script ID of the script to be executed. Find the script ID on the
 *  **Project settings** page under "IDs."
 */
@property(nonatomic, copy, nullable) NSString *scriptId;

/**
 *  Fetches a @c GTLRScript_Operation.
 *
 *  Runs a function in an Apps Script project. The script project must be
 *  deployed for use with the Apps Script API and the calling application must
 *  share the same Cloud Platform project. This method requires authorization
 *  with an OAuth 2.0 token that includes at least one of the scopes listed in
 *  the [Authorization](#authorization-scopes) section; script projects that do
 *  not require authorization cannot be executed through this API. To find the
 *  correct scopes to include in the authentication token, open the script
 *  project **Overview** page and scroll down to "Project OAuth Scopes." The
 *  error `403, PERMISSION_DENIED: The caller does not have permission`
 *  indicates that the Cloud Platform project used to authorize the request is
 *  not the same as the one used by the script.
 *
 *  @param object The @c GTLRScript_ExecutionRequest to include in the query.
 *  @param scriptId The script ID of the script to be executed. Find the script
 *    ID on the **Project settings** page under "IDs."
 *
 *  @return GTLRScriptQuery_ScriptsRun
 */
+ (instancetype)queryWithObject:(GTLRScript_ExecutionRequest *)object
                       scriptId:(NSString *)scriptId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
