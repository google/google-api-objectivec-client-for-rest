// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Database Migration API (datamigration/v1)
// Description:
//   Manage Cloud Database Migration Service resources on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/database-migration/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDatabaseMigrationService_AlloyDbConnectionProfile;
@class GTLRDatabaseMigrationService_AlloyDbSettings;
@class GTLRDatabaseMigrationService_AlloyDbSettings_Labels;
@class GTLRDatabaseMigrationService_AuditConfig;
@class GTLRDatabaseMigrationService_AuditLogConfig;
@class GTLRDatabaseMigrationService_Binding;
@class GTLRDatabaseMigrationService_CloudSqlConnectionProfile;
@class GTLRDatabaseMigrationService_CloudSqlSettings;
@class GTLRDatabaseMigrationService_CloudSqlSettings_DatabaseFlags;
@class GTLRDatabaseMigrationService_CloudSqlSettings_UserLabels;
@class GTLRDatabaseMigrationService_ConnectionProfile;
@class GTLRDatabaseMigrationService_ConnectionProfile_Labels;
@class GTLRDatabaseMigrationService_DatabaseType;
@class GTLRDatabaseMigrationService_DumpFlag;
@class GTLRDatabaseMigrationService_DumpFlags;
@class GTLRDatabaseMigrationService_Expr;
@class GTLRDatabaseMigrationService_Location;
@class GTLRDatabaseMigrationService_Location_Labels;
@class GTLRDatabaseMigrationService_Location_Metadata;
@class GTLRDatabaseMigrationService_MachineConfig;
@class GTLRDatabaseMigrationService_MigrationJob;
@class GTLRDatabaseMigrationService_MigrationJob_Labels;
@class GTLRDatabaseMigrationService_MySqlConnectionProfile;
@class GTLRDatabaseMigrationService_Operation;
@class GTLRDatabaseMigrationService_Operation_Metadata;
@class GTLRDatabaseMigrationService_Operation_Response;
@class GTLRDatabaseMigrationService_Policy;
@class GTLRDatabaseMigrationService_PostgreSqlConnectionProfile;
@class GTLRDatabaseMigrationService_PrimaryInstanceSettings;
@class GTLRDatabaseMigrationService_PrimaryInstanceSettings_DatabaseFlags;
@class GTLRDatabaseMigrationService_PrimaryInstanceSettings_Labels;
@class GTLRDatabaseMigrationService_ReverseSshConnectivity;
@class GTLRDatabaseMigrationService_SqlAclEntry;
@class GTLRDatabaseMigrationService_SqlIpConfig;
@class GTLRDatabaseMigrationService_SslConfig;
@class GTLRDatabaseMigrationService_StaticIpConnectivity;
@class GTLRDatabaseMigrationService_Status;
@class GTLRDatabaseMigrationService_Status_Details_Item;
@class GTLRDatabaseMigrationService_UserPassword;
@class GTLRDatabaseMigrationService_VmCreationConfig;
@class GTLRDatabaseMigrationService_VmSelectionConfig;
@class GTLRDatabaseMigrationService_VpcPeeringConnectivity;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_CloudSqlSettings.activationPolicy

/**
 *  The instance is always up and running.
 *
 *  Value: "ALWAYS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_ActivationPolicy_Always;
/**
 *  The instance should never spin up.
 *
 *  Value: "NEVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_ActivationPolicy_Never;
/**
 *  unspecified policy.
 *
 *  Value: "SQL_ACTIVATION_POLICY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_ActivationPolicy_SqlActivationPolicyUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_CloudSqlSettings.databaseVersion

/**
 *  MySQL 5.6.
 *
 *  Value: "MYSQL_5_6"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql56;
/**
 *  MySQL 5.7.
 *
 *  Value: "MYSQL_5_7"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql57;
/**
 *  MySQL 8.0.
 *
 *  Value: "MYSQL_8_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql80;
/**
 *  PostgreSQL 10.
 *
 *  Value: "POSTGRES_10"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres10;
/**
 *  PostgreSQL 11.
 *
 *  Value: "POSTGRES_11"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres11;
/**
 *  PostgreSQL 12.
 *
 *  Value: "POSTGRES_12"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres12;
/**
 *  PostgreSQL 13.
 *
 *  Value: "POSTGRES_13"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres13;
/**
 *  PostgreSQL 14.
 *
 *  Value: "POSTGRES_14"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres14;
/**
 *  PostgreSQL 9.6.
 *
 *  Value: "POSTGRES_9_6"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres96;
/**
 *  Unspecified version.
 *
 *  Value: "SQL_DATABASE_VERSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_SqlDatabaseVersionUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_CloudSqlSettings.dataDiskType

/**
 *  HDD disk.
 *
 *  Value: "PD_HDD"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DataDiskType_PdHdd;
/**
 *  SSD disk.
 *
 *  Value: "PD_SSD"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DataDiskType_PdSsd;
/**
 *  Unspecified.
 *
 *  Value: "SQL_DATA_DISK_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DataDiskType_SqlDataDiskTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_ConnectionProfile.provider

/**
 *  AlloyDB.
 *
 *  Value: "ALLOYDB"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_Provider_Alloydb;
/**
 *  Amazon Aurora.
 *
 *  Value: "AURORA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_Provider_Aurora;
/**
 *  CloudSQL runs the database.
 *
 *  Value: "CLOUDSQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_Provider_Cloudsql;
/**
 *  The database provider is unknown.
 *
 *  Value: "DATABASE_PROVIDER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_Provider_DatabaseProviderUnspecified;
/**
 *  RDS runs the database.
 *
 *  Value: "RDS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_Provider_Rds;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_ConnectionProfile.state

/**
 *  The connection profile is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_State_Creating;
/**
 *  The connection profile has been deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_State_Deleted;
/**
 *  The connection profile is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_State_Deleting;
/**
 *  The connection profile is in draft mode and fully editable.
 *
 *  Value: "DRAFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_State_Draft;
/**
 *  The last action on the connection profile failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_State_Failed;
/**
 *  The connection profile is ready.
 *
 *  Value: "READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_State_Ready;
/**
 *  The state of the connection profile is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_State_StateUnspecified;
/**
 *  The connection profile is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_State_Updating;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_DatabaseType.engine

/**
 *  The source database engine of the migration job is unknown.
 *
 *  Value: "DATABASE_ENGINE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Engine_DatabaseEngineUnspecified;
/**
 *  The source engine is MySQL.
 *
 *  Value: "MYSQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Engine_Mysql;
/**
 *  The source engine is PostgreSQL.
 *
 *  Value: "POSTGRESQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Engine_Postgresql;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_DatabaseType.provider

/**
 *  AlloyDB.
 *
 *  Value: "ALLOYDB"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Provider_Alloydb;
/**
 *  Amazon Aurora.
 *
 *  Value: "AURORA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Provider_Aurora;
/**
 *  CloudSQL runs the database.
 *
 *  Value: "CLOUDSQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Provider_Cloudsql;
/**
 *  The database provider is unknown.
 *
 *  Value: "DATABASE_PROVIDER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Provider_DatabaseProviderUnspecified;
/**
 *  RDS runs the database.
 *
 *  Value: "RDS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Provider_Rds;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_MigrationJob.phase

/**
 *  The migration job is CDC phase.
 *
 *  Value: "CDC"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Phase_Cdc;
/**
 *  The migration job is in the full dump phase.
 *
 *  Value: "FULL_DUMP"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Phase_FullDump;
/**
 *  The phase of the migration job is unknown.
 *
 *  Value: "PHASE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Phase_PhaseUnspecified;
/**
 *  Only RDS flow - the sources writes stopped, waiting for dump to begin
 *
 *  Value: "PREPARING_THE_DUMP"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Phase_PreparingTheDump;
/**
 *  The migration job is running the promote phase.
 *
 *  Value: "PROMOTE_IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Phase_PromoteInProgress;
/**
 *  Only RDS flow - waiting for source writes to stop
 *
 *  Value: "WAITING_FOR_SOURCE_WRITES_TO_STOP"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Phase_WaitingForSourceWritesToStop;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_MigrationJob.state

/**
 *  The migration job has been completed.
 *
 *  Value: "COMPLETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Completed;
/**
 *  The migration job is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Creating;
/**
 *  The migration job has been deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Deleted;
/**
 *  The migration job is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Deleting;
/**
 *  The migration job is in draft mode and no resources are created.
 *
 *  Value: "DRAFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Draft;
/**
 *  The migration job failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Failed;
/**
 *  The migration job is down for maintenance.
 *
 *  Value: "MAINTENANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Maintenance;
/**
 *  The migration job is created and not started.
 *
 *  Value: "NOT_STARTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_NotStarted;
/**
 *  The migration job is restarting.
 *
 *  Value: "RESTARTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Restarting;
/**
 *  The migration job is resuming.
 *
 *  Value: "RESUMING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Resuming;
/**
 *  The migration job is running.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Running;
/**
 *  The migration job is starting.
 *
 *  Value: "STARTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Starting;
/**
 *  The state of the migration job is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_StateUnspecified;
/**
 *  The migration job is currently stopped.
 *
 *  Value: "STOPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Stopped;
/**
 *  The migration job is being stopped.
 *
 *  Value: "STOPPING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Stopping;
/**
 *  The migration job is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Updating;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_MigrationJob.type

/**
 *  The migration job is a continuous migration.
 *
 *  Value: "CONTINUOUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Type_Continuous;
/**
 *  The migration job is a one time migration.
 *
 *  Value: "ONE_TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Type_OneTime;
/**
 *  The type of the migration job is unknown.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_MigrationJobVerificationError.errorCode

/**
 *  We failed to authenticate to one of the connection profile.
 *
 *  Value: "AUTHENTICATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_AuthenticationFailure;
/**
 *  Migration is already running at the time of restart request.
 *
 *  Value: "CANT_RESTART_RUNNING_MIGRATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_CantRestartRunningMigration;
/**
 *  We failed to connect to one of the connection profile.
 *
 *  Value: "CONNECTION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ConnectionFailure;
/**
 *  The types of the source and the destination are incompatible.
 *
 *  Value: "CONNECTION_PROFILE_TYPES_INCOMPATIBILITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ConnectionProfileTypesIncompatibility;
/**
 *  An unknown error occurred
 *
 *  Value: "ERROR_CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ErrorCodeUnspecified;
/**
 *  The value of parameter max_replication_slots is not sufficient.
 *
 *  Value: "INSUFFICIENT_MAX_REPLICATION_SLOTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InsufficientMaxReplicationSlots;
/**
 *  The value of parameter max_wal_senders is not sufficient.
 *
 *  Value: "INSUFFICIENT_MAX_WAL_SENDERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InsufficientMaxWalSenders;
/**
 *  The value of parameter max_worker_processes is not sufficient.
 *
 *  Value: "INSUFFICIENT_MAX_WORKER_PROCESSES"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InsufficientMaxWorkerProcesses;
/**
 *  One of the involved connection profiles has an invalid configuration.
 *
 *  Value: "INVALID_CONNECTION_PROFILE_CONFIG"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InvalidConnectionProfileConfig;
/**
 *  Invalid RDS logical replication.
 *
 *  Value: "INVALID_RDS_LOGICAL_REPLICATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InvalidRdsLogicalReplication;
/**
 *  The value of parameter shared_preload_libraries does not include pglogical.
 *
 *  Value: "INVALID_SHARED_PRELOAD_LIBRARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InvalidSharedPreloadLibrary;
/**
 *  The value of parameter wal_level is not set to logical.
 *
 *  Value: "INVALID_WAL_LEVEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InvalidWalLevel;
/**
 *  No pglogical extension installed on databases, applicable for postgres.
 *
 *  Value: "NO_PGLOGICAL_INSTALLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_NoPglogicalInstalled;
/**
 *  pglogical node already exists on databases, applicable for postgres.
 *
 *  Value: "PGLOGICAL_NODE_ALREADY_EXISTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_PglogicalNodeAlreadyExists;
/**
 *  The source has tables with limited support. E.g. PostgreSQL tables without
 *  primary keys.
 *
 *  Value: "TABLES_WITH_LIMITED_SUPPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_TablesWithLimitedSupport;
/**
 *  The definer is not supported.
 *
 *  Value: "UNSUPPORTED_DEFINER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedDefiner;
/**
 *  Extensions installed are either not supported or having unsupported
 *  versions.
 *
 *  Value: "UNSUPPORTED_EXTENSIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedExtensions;
/**
 *  The gtid_mode is not supported, applicable for MySQL.
 *
 *  Value: "UNSUPPORTED_GTID_MODE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedGtidMode;
/**
 *  Unsupported migration type.
 *
 *  Value: "UNSUPPORTED_MIGRATION_TYPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedMigrationType;
/**
 *  The table definition is not support due to missing primary key or replica
 *  identity.
 *
 *  Value: "UNSUPPORTED_TABLE_DEFINITION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedTableDefinition;
/**
 *  The versions of the source and the destination are incompatible.
 *
 *  Value: "VERSION_INCOMPATIBILITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_VersionIncompatibility;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_PostgreSqlConnectionProfile.networkArchitecture

/**
 *  Instance is in Cloud SQL's new producer network architecture.
 *
 *  Value: "NETWORK_ARCHITECTURE_NEW_CSQL_PRODUCER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PostgreSqlConnectionProfile_NetworkArchitecture_NetworkArchitectureNewCsqlProducer;
/**
 *  Instance is in Cloud SQL's old producer network architecture.
 *
 *  Value: "NETWORK_ARCHITECTURE_OLD_CSQL_PRODUCER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PostgreSqlConnectionProfile_NetworkArchitecture_NetworkArchitectureOldCsqlProducer;
/** Value: "NETWORK_ARCHITECTURE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PostgreSqlConnectionProfile_NetworkArchitecture_NetworkArchitectureUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_SslConfig.type

/**
 *  Both server ('ca_certificate'), and client ('client_key',
 *  'client_certificate') specified.
 *
 *  Value: "SERVER_CLIENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SslConfig_Type_ServerClient;
/**
 *  Only 'ca_certificate' specified.
 *
 *  Value: "SERVER_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SslConfig_Type_ServerOnly;
/**
 *  Unspecified.
 *
 *  Value: "SSL_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SslConfig_Type_SslTypeUnspecified;

/**
 *  Specifies required connection parameters, and the parameters required to
 *  create an AlloyDB destination cluster.
 */
@interface GTLRDatabaseMigrationService_AlloyDbConnectionProfile : GTLRObject

/**
 *  Required. The AlloyDB cluster ID that this connection profile is associated
 *  with.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/** Immutable. Metadata used to create the destination AlloyDB cluster. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_AlloyDbSettings *settings;

@end


/**
 *  Settings for creating an AlloyDB cluster.
 */
@interface GTLRDatabaseMigrationService_AlloyDbSettings : GTLRObject

/**
 *  Required. Input only. Initial user to setup during cluster creation.
 *  Required.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_UserPassword *initialUser;

/**
 *  Labels for the AlloyDB cluster created by DMS. An object containing a list
 *  of 'key', 'value' pairs.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_AlloyDbSettings_Labels *labels;

@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_PrimaryInstanceSettings *primaryInstanceSettings;

/**
 *  Required. The resource link for the VPC network in which cluster resources
 *  are created and from which they are accessible via Private IP. The network
 *  must belong to the same project as the cluster. It is specified in the form:
 *  "projects/{project_number}/global/networks/{network_id}". This is required
 *  to create a cluster.
 */
@property(nonatomic, copy, nullable) NSString *vpcNetwork;

@end


/**
 *  Labels for the AlloyDB cluster created by DMS. An object containing a list
 *  of 'key', 'value' pairs.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_AlloyDbSettings_Labels : GTLRObject
@end


/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRDatabaseMigrationService_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRDatabaseMigrationService_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_AuditLogConfig_LogType_AdminRead
 *        Admin reads. Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRDatabaseMigrationService_AuditLogConfig_LogType_DataRead Data
 *        reads. Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRDatabaseMigrationService_AuditLogConfig_LogType_DataWrite
 *        Data writes. Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRDatabaseMigrationService_AuditLogConfig_LogType_LogTypeUnspecified
 *        Default case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRDatabaseMigrationService_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`:
 *  An email address (plus unique identifier) representing a user that has been
 *  recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. * `domain:{domain}`: The G Suite domain (primary) that
 *  represents all the users of that domain. For example, `google.com` or
 *  `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRDatabaseMigrationService_CancelOperationRequest : GTLRObject
@end


/**
 *  Specifies required connection parameters, and, optionally, the parameters
 *  required to create a Cloud SQL destination database instance.
 */
@interface GTLRDatabaseMigrationService_CloudSqlConnectionProfile : GTLRObject

/**
 *  Output only. The Cloud SQL instance ID that this connection profile is
 *  associated with.
 */
@property(nonatomic, copy, nullable) NSString *cloudSqlId;

/** Output only. The Cloud SQL database instance's private IP. */
@property(nonatomic, copy, nullable) NSString *privateIp;

/** Output only. The Cloud SQL database instance's public IP. */
@property(nonatomic, copy, nullable) NSString *publicIp;

/** Immutable. Metadata used to create the destination Cloud SQL database. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_CloudSqlSettings *settings;

@end


/**
 *  Settings for creating a Cloud SQL database instance.
 */
@interface GTLRDatabaseMigrationService_CloudSqlSettings : GTLRObject

/**
 *  The activation policy specifies when the instance is activated; it is
 *  applicable only when the instance state is 'RUNNABLE'. Valid values:
 *  'ALWAYS': The instance is on, and remains so even in the absence of
 *  connection requests. `NEVER`: The instance is off; it is not activated, even
 *  if a connection request arrives.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_ActivationPolicy_Always
 *        The instance is always up and running. (Value: "ALWAYS")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_ActivationPolicy_Never
 *        The instance should never spin up. (Value: "NEVER")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_ActivationPolicy_SqlActivationPolicyUnspecified
 *        unspecified policy. (Value: "SQL_ACTIVATION_POLICY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *activationPolicy;

/**
 *  [default: ON] If you enable this setting, Cloud SQL checks your available
 *  storage every 30 seconds. If the available storage falls below a threshold
 *  size, Cloud SQL automatically adds additional storage capacity. If the
 *  available storage repeatedly falls below the threshold size, Cloud SQL
 *  continues to add storage until it reaches the maximum of 30 TB.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoStorageIncrease;

/** The KMS key name used for the csql instance. */
@property(nonatomic, copy, nullable) NSString *cmekKeyName;

/** The Cloud SQL default instance level collation. */
@property(nonatomic, copy, nullable) NSString *collation;

/**
 *  The database flags passed to the Cloud SQL instance at startup. An object
 *  containing a list of "key": value pairs. Example: { "name": "wrench",
 *  "mass": "1.3kg", "count": "3" }.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_CloudSqlSettings_DatabaseFlags *databaseFlags;

/**
 *  The database engine type and version.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql56
 *        MySQL 5.6. (Value: "MYSQL_5_6")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql57
 *        MySQL 5.7. (Value: "MYSQL_5_7")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql80
 *        MySQL 8.0. (Value: "MYSQL_8_0")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres10
 *        PostgreSQL 10. (Value: "POSTGRES_10")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres11
 *        PostgreSQL 11. (Value: "POSTGRES_11")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres12
 *        PostgreSQL 12. (Value: "POSTGRES_12")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres13
 *        PostgreSQL 13. (Value: "POSTGRES_13")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres14
 *        PostgreSQL 14. (Value: "POSTGRES_14")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres96
 *        PostgreSQL 9.6. (Value: "POSTGRES_9_6")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_SqlDatabaseVersionUnspecified
 *        Unspecified version. (Value: "SQL_DATABASE_VERSION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *databaseVersion;

/**
 *  The storage capacity available to the database, in GB. The minimum (and
 *  default) size is 10GB.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dataDiskSizeGb;

/**
 *  The type of storage: `PD_SSD` (default) or `PD_HDD`.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DataDiskType_PdHdd
 *        HDD disk. (Value: "PD_HDD")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DataDiskType_PdSsd
 *        SSD disk. (Value: "PD_SSD")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DataDiskType_SqlDataDiskTypeUnspecified
 *        Unspecified. (Value: "SQL_DATA_DISK_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *dataDiskType;

/**
 *  The settings for IP Management. This allows to enable or disable the
 *  instance IP and manage which external networks can connect to the instance.
 *  The IPv4 address cannot be disabled.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SqlIpConfig *ipConfig;

/** Input only. Initial root password. */
@property(nonatomic, copy, nullable) NSString *rootPassword;

/**
 *  Output only. Indicates If this connection profile root password is stored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rootPasswordSet;

/**
 *  The Database Migration Service source connection profile ID, in the format:
 *  `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`
 */
@property(nonatomic, copy, nullable) NSString *sourceId;

/**
 *  The maximum size to which storage capacity can be automatically increased.
 *  The default value is 0, which specifies that there is no limit.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *storageAutoResizeLimit;

/**
 *  The tier (or machine type) for this instance, for example:
 *  `db-n1-standard-1` (MySQL instances) or `db-custom-1-3840` (PostgreSQL
 *  instances). For more information, see [Cloud SQL Instance
 *  Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).
 */
@property(nonatomic, copy, nullable) NSString *tier;

/**
 *  The resource labels for a Cloud SQL instance to use to annotate any related
 *  underlying resources such as Compute Engine VMs. An object containing a list
 *  of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "18kg",
 *  "count": "3" }`.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_CloudSqlSettings_UserLabels *userLabels;

/**
 *  The Google Cloud Platform zone where your Cloud SQL database instance is
 *  located.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  The database flags passed to the Cloud SQL instance at startup. An object
 *  containing a list of "key": value pairs. Example: { "name": "wrench",
 *  "mass": "1.3kg", "count": "3" }.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_CloudSqlSettings_DatabaseFlags : GTLRObject
@end


/**
 *  The resource labels for a Cloud SQL instance to use to annotate any related
 *  underlying resources such as Compute Engine VMs. An object containing a list
 *  of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "18kg",
 *  "count": "3" }`.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_CloudSqlSettings_UserLabels : GTLRObject
@end


/**
 *  A connection profile definition.
 */
@interface GTLRDatabaseMigrationService_ConnectionProfile : GTLRObject

/** An AlloyDB cluster connection profile. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_AlloyDbConnectionProfile *alloydb;

/** A CloudSQL database connection profile. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_CloudSqlConnectionProfile *cloudsql;

/**
 *  Output only. The timestamp when the resource was created. A timestamp in
 *  RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
 *  "2014-10-02T15:01:23.045123456Z".
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The connection profile display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Output only. The error details in case of state FAILED. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Status *error;

/**
 *  The resource labels for connection profile to use to annotate any related
 *  underlying resources such as Compute Engine VMs. An object containing a list
 *  of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg",
 *  "count": "3" }`.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ConnectionProfile_Labels *labels;

/** A MySQL database connection profile. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_MySqlConnectionProfile *mysql;

/**
 *  The name of this connection profile resource in the form of
 *  projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** A PostgreSQL database connection profile. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_PostgreSqlConnectionProfile *postgresql;

/**
 *  The database provider.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_Provider_Alloydb
 *        AlloyDB. (Value: "ALLOYDB")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_Provider_Aurora
 *        Amazon Aurora. (Value: "AURORA")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_Provider_Cloudsql
 *        CloudSQL runs the database. (Value: "CLOUDSQL")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_Provider_DatabaseProviderUnspecified
 *        The database provider is unknown. (Value:
 *        "DATABASE_PROVIDER_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_Provider_Rds RDS
 *        runs the database. (Value: "RDS")
 */
@property(nonatomic, copy, nullable) NSString *provider;

/**
 *  The current connection profile state (e.g. DRAFT, READY, or FAILED).
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_State_Creating The
 *        connection profile is being created. (Value: "CREATING")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_State_Deleted The
 *        connection profile has been deleted. (Value: "DELETED")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_State_Deleting The
 *        connection profile is being deleted. (Value: "DELETING")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_State_Draft The
 *        connection profile is in draft mode and fully editable. (Value:
 *        "DRAFT")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_State_Failed The
 *        last action on the connection profile failed. (Value: "FAILED")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_State_Ready The
 *        connection profile is ready. (Value: "READY")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_State_StateUnspecified
 *        The state of the connection profile is unknown. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_State_Updating The
 *        connection profile is being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. The timestamp when the resource was last updated. A timestamp
 *  in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
 *  "2014-10-02T15:01:23.045123456Z".
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  The resource labels for connection profile to use to annotate any related
 *  underlying resources such as Compute Engine VMs. An object containing a list
 *  of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg",
 *  "count": "3" }`.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_ConnectionProfile_Labels : GTLRObject
@end


/**
 *  A message defining the database engine and provider.
 */
@interface GTLRDatabaseMigrationService_DatabaseType : GTLRObject

/**
 *  The database engine.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Engine_DatabaseEngineUnspecified
 *        The source database engine of the migration job is unknown. (Value:
 *        "DATABASE_ENGINE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Engine_Mysql The source
 *        engine is MySQL. (Value: "MYSQL")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Engine_Postgresql The
 *        source engine is PostgreSQL. (Value: "POSTGRESQL")
 */
@property(nonatomic, copy, nullable) NSString *engine;

/**
 *  The database provider.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Provider_Alloydb
 *        AlloyDB. (Value: "ALLOYDB")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Provider_Aurora Amazon
 *        Aurora. (Value: "AURORA")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Provider_Cloudsql
 *        CloudSQL runs the database. (Value: "CLOUDSQL")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Provider_DatabaseProviderUnspecified
 *        The database provider is unknown. (Value:
 *        "DATABASE_PROVIDER_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Provider_Rds RDS runs
 *        the database. (Value: "RDS")
 */
@property(nonatomic, copy, nullable) NSString *provider;

@end


/**
 *  Dump flag definition.
 */
@interface GTLRDatabaseMigrationService_DumpFlag : GTLRObject

/** The name of the flag */
@property(nonatomic, copy, nullable) NSString *name;

/** The value of the flag. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Dump flags definition.
 */
@interface GTLRDatabaseMigrationService_DumpFlags : GTLRObject

/** The flags for the initial dump. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_DumpFlag *> *dumpFlags;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRDatabaseMigrationService_Empty : GTLRObject
@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRDatabaseMigrationService_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Request message for 'GenerateSshScript' request.
 */
@interface GTLRDatabaseMigrationService_GenerateSshScriptRequest : GTLRObject

/** Required. Bastion VM Instance name to use or to create. */
@property(nonatomic, copy, nullable) NSString *vm;

/** The VM creation configuration */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_VmCreationConfig *vmCreationConfig;

/**
 *  The port that will be open on the bastion host
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *vmPort;

/** The VM selection configuration */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_VmSelectionConfig *vmSelectionConfig;

@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRDatabaseMigrationService_GoogleCloudClouddmsV1OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Response message for 'ListConnectionProfiles' request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "connectionProfiles" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRDatabaseMigrationService_ListConnectionProfilesResponse : GTLRCollectionObject

/**
 *  The response list of connection profiles.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_ConnectionProfile *> *connectionProfiles;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDatabaseMigrationService_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for 'ListMigrationJobs' request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "migrationJobs" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDatabaseMigrationService_ListMigrationJobsResponse : GTLRCollectionObject

/**
 *  The list of migration jobs objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_MigrationJob *> *migrationJobs;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDatabaseMigrationService_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_Operation *> *operations;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRDatabaseMigrationService_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_Location_Metadata : GTLRObject
@end


/**
 *  MachineConfig describes the configuration of a machine.
 */
@interface GTLRDatabaseMigrationService_MachineConfig : GTLRObject

/**
 *  The number of CPU's in the VM instance.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cpuCount;

@end


/**
 *  Represents a Database Migration Service migration job object.
 */
@interface GTLRDatabaseMigrationService_MigrationJob : GTLRObject

/**
 *  Output only. The timestamp when the migration job resource was created. A
 *  timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
 *  "2014-10-02T15:01:23.045123456Z".
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Required. The resource name (URI) of the destination connection profile.
 */
@property(nonatomic, copy, nullable) NSString *destination;

/** The database engine type and provider of the destination. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_DatabaseType *destinationDatabase;

/** The migration job display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The initial dump flags. This field and the "dump_path" field are mutually
 *  exclusive.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_DumpFlags *dumpFlags;

/**
 *  The path to the dump file in Google Cloud Storage, in the format:
 *  (gs://[BUCKET_NAME]/[OBJECT_NAME]). This field and the "dump_flags" field
 *  are mutually exclusive.
 */
@property(nonatomic, copy, nullable) NSString *dumpPath;

/**
 *  Output only. The duration of the migration job (in seconds). A duration in
 *  seconds with up to nine fractional digits, terminated by 's'. Example:
 *  "3.5s".
 */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/**
 *  Output only. If the migration job is completed, the time when it was
 *  completed.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Output only. The error details in case of state FAILED. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Status *error;

/**
 *  The resource labels for migration job to use to annotate any related
 *  underlying resources such as Compute Engine VMs. An object containing a list
 *  of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg",
 *  "count": "3" }`.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_MigrationJob_Labels *labels;

/**
 *  The name (URI) of this migration job resource, in the form of:
 *  projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The current migration job phase.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Phase_Cdc The migration
 *        job is CDC phase. (Value: "CDC")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Phase_FullDump The
 *        migration job is in the full dump phase. (Value: "FULL_DUMP")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Phase_PhaseUnspecified
 *        The phase of the migration job is unknown. (Value:
 *        "PHASE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Phase_PreparingTheDump
 *        Only RDS flow - the sources writes stopped, waiting for dump to begin
 *        (Value: "PREPARING_THE_DUMP")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Phase_PromoteInProgress
 *        The migration job is running the promote phase. (Value:
 *        "PROMOTE_IN_PROGRESS")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Phase_WaitingForSourceWritesToStop
 *        Only RDS flow - waiting for source writes to stop (Value:
 *        "WAITING_FOR_SOURCE_WRITES_TO_STOP")
 */
@property(nonatomic, copy, nullable) NSString *phase;

/**
 *  The details needed to communicate to the source over Reverse SSH tunnel
 *  connectivity.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ReverseSshConnectivity *reverseSshConnectivity;

/** Required. The resource name (URI) of the source connection profile. */
@property(nonatomic, copy, nullable) NSString *source;

/** The database engine type and provider of the source. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_DatabaseType *sourceDatabase;

/**
 *  The current migration job state.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Completed The
 *        migration job has been completed. (Value: "COMPLETED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Creating The
 *        migration job is being created. (Value: "CREATING")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Deleted The
 *        migration job has been deleted. (Value: "DELETED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Deleting The
 *        migration job is being deleted. (Value: "DELETING")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Draft The
 *        migration job is in draft mode and no resources are created. (Value:
 *        "DRAFT")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Failed The
 *        migration job failed. (Value: "FAILED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Maintenance The
 *        migration job is down for maintenance. (Value: "MAINTENANCE")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_NotStarted The
 *        migration job is created and not started. (Value: "NOT_STARTED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Restarting The
 *        migration job is restarting. (Value: "RESTARTING")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Resuming The
 *        migration job is resuming. (Value: "RESUMING")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Running The
 *        migration job is running. (Value: "RUNNING")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Starting The
 *        migration job is starting. (Value: "STARTING")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_StateUnspecified
 *        The state of the migration job is unknown. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Stopped The
 *        migration job is currently stopped. (Value: "STOPPED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Stopping The
 *        migration job is being stopped. (Value: "STOPPING")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Updating The
 *        migration job is being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** static ip connectivity data (default, no additional details needed). */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_StaticIpConnectivity *staticIpConnectivity;

/**
 *  Required. The migration job type.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Type_Continuous The
 *        migration job is a continuous migration. (Value: "CONTINUOUS")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Type_OneTime The
 *        migration job is a one time migration. (Value: "ONE_TIME")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Type_TypeUnspecified
 *        The type of the migration job is unknown. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Output only. The timestamp when the migration job resource was last updated.
 *  A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
 *  "2014-10-02T15:01:23.045123456Z".
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** The details of the VPC network that the source database is located in. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_VpcPeeringConnectivity *vpcPeeringConnectivity;

@end


/**
 *  The resource labels for migration job to use to annotate any related
 *  underlying resources such as Compute Engine VMs. An object containing a list
 *  of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg",
 *  "count": "3" }`.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_MigrationJob_Labels : GTLRObject
@end


/**
 *  Error message of a verification Migration job.
 */
@interface GTLRDatabaseMigrationService_MigrationJobVerificationError : GTLRObject

/**
 *  Output only. An instance of ErrorCode specifying the error that occurred.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_AuthenticationFailure
 *        We failed to authenticate to one of the connection profile. (Value:
 *        "AUTHENTICATION_FAILURE")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_CantRestartRunningMigration
 *        Migration is already running at the time of restart request. (Value:
 *        "CANT_RESTART_RUNNING_MIGRATION")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ConnectionFailure
 *        We failed to connect to one of the connection profile. (Value:
 *        "CONNECTION_FAILURE")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ConnectionProfileTypesIncompatibility
 *        The types of the source and the destination are incompatible. (Value:
 *        "CONNECTION_PROFILE_TYPES_INCOMPATIBILITY")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ErrorCodeUnspecified
 *        An unknown error occurred (Value: "ERROR_CODE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InsufficientMaxReplicationSlots
 *        The value of parameter max_replication_slots is not sufficient.
 *        (Value: "INSUFFICIENT_MAX_REPLICATION_SLOTS")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InsufficientMaxWalSenders
 *        The value of parameter max_wal_senders is not sufficient. (Value:
 *        "INSUFFICIENT_MAX_WAL_SENDERS")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InsufficientMaxWorkerProcesses
 *        The value of parameter max_worker_processes is not sufficient. (Value:
 *        "INSUFFICIENT_MAX_WORKER_PROCESSES")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InvalidConnectionProfileConfig
 *        One of the involved connection profiles has an invalid configuration.
 *        (Value: "INVALID_CONNECTION_PROFILE_CONFIG")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InvalidRdsLogicalReplication
 *        Invalid RDS logical replication. (Value:
 *        "INVALID_RDS_LOGICAL_REPLICATION")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InvalidSharedPreloadLibrary
 *        The value of parameter shared_preload_libraries does not include
 *        pglogical. (Value: "INVALID_SHARED_PRELOAD_LIBRARY")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InvalidWalLevel
 *        The value of parameter wal_level is not set to logical. (Value:
 *        "INVALID_WAL_LEVEL")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_NoPglogicalInstalled
 *        No pglogical extension installed on databases, applicable for
 *        postgres. (Value: "NO_PGLOGICAL_INSTALLED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_PglogicalNodeAlreadyExists
 *        pglogical node already exists on databases, applicable for postgres.
 *        (Value: "PGLOGICAL_NODE_ALREADY_EXISTS")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_TablesWithLimitedSupport
 *        The source has tables with limited support. E.g. PostgreSQL tables
 *        without primary keys. (Value: "TABLES_WITH_LIMITED_SUPPORT")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedDefiner
 *        The definer is not supported. (Value: "UNSUPPORTED_DEFINER")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedExtensions
 *        Extensions installed are either not supported or having unsupported
 *        versions. (Value: "UNSUPPORTED_EXTENSIONS")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedGtidMode
 *        The gtid_mode is not supported, applicable for MySQL. (Value:
 *        "UNSUPPORTED_GTID_MODE")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedMigrationType
 *        Unsupported migration type. (Value: "UNSUPPORTED_MIGRATION_TYPE")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedTableDefinition
 *        The table definition is not support due to missing primary key or
 *        replica identity. (Value: "UNSUPPORTED_TABLE_DEFINITION")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_VersionIncompatibility
 *        The versions of the source and the destination are incompatible.
 *        (Value: "VERSION_INCOMPATIBILITY")
 */
@property(nonatomic, copy, nullable) NSString *errorCode;

/**
 *  Output only. A specific detailed error message, if supplied by the engine.
 */
@property(nonatomic, copy, nullable) NSString *errorDetailMessage;

/**
 *  Output only. A formatted message with further details about the error and a
 *  CTA.
 */
@property(nonatomic, copy, nullable) NSString *errorMessage;

@end


/**
 *  Specifies connection parameters required specifically for MySQL databases.
 */
@interface GTLRDatabaseMigrationService_MySqlConnectionProfile : GTLRObject

/**
 *  If the source is a Cloud SQL database, use this field to provide the Cloud
 *  SQL instance ID of the source.
 */
@property(nonatomic, copy, nullable) NSString *cloudSqlId;

/** Required. The IP or hostname of the source MySQL database. */
@property(nonatomic, copy, nullable) NSString *host;

/**
 *  Required. Input only. The password for the user that Database Migration
 *  Service will be using to connect to the database. This field is not returned
 *  on request, and the value is encrypted when stored in Database Migration
 *  Service.
 */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  Output only. Indicates If this connection profile password is stored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *passwordSet;

/**
 *  Required. The network port of the source MySQL database.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/**
 *  SSL configuration for the destination to connect to the source database.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SslConfig *ssl;

/**
 *  Required. The username that Database Migration Service will use to connect
 *  to the database. The value is encrypted when stored in Database Migration
 *  Service.
 */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRDatabaseMigrationService_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_Operation_Response : GTLRObject
@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRDatabaseMigrationService_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Specifies connection parameters required specifically for PostgreSQL
 *  databases.
 */
@interface GTLRDatabaseMigrationService_PostgreSqlConnectionProfile : GTLRObject

/**
 *  If the source is a Cloud SQL database, use this field to provide the Cloud
 *  SQL instance ID of the source.
 */
@property(nonatomic, copy, nullable) NSString *cloudSqlId;

/** Required. The IP or hostname of the source PostgreSQL database. */
@property(nonatomic, copy, nullable) NSString *host;

/**
 *  Output only. If the source is a Cloud SQL database, this field indicates the
 *  network architecture it's associated with.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_PostgreSqlConnectionProfile_NetworkArchitecture_NetworkArchitectureNewCsqlProducer
 *        Instance is in Cloud SQL's new producer network architecture. (Value:
 *        "NETWORK_ARCHITECTURE_NEW_CSQL_PRODUCER")
 *    @arg @c kGTLRDatabaseMigrationService_PostgreSqlConnectionProfile_NetworkArchitecture_NetworkArchitectureOldCsqlProducer
 *        Instance is in Cloud SQL's old producer network architecture. (Value:
 *        "NETWORK_ARCHITECTURE_OLD_CSQL_PRODUCER")
 *    @arg @c kGTLRDatabaseMigrationService_PostgreSqlConnectionProfile_NetworkArchitecture_NetworkArchitectureUnspecified
 *        Value "NETWORK_ARCHITECTURE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *networkArchitecture;

/**
 *  Required. Input only. The password for the user that Database Migration
 *  Service will be using to connect to the database. This field is not returned
 *  on request, and the value is encrypted when stored in Database Migration
 *  Service.
 */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  Output only. Indicates If this connection profile password is stored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *passwordSet;

/**
 *  Required. The network port of the source PostgreSQL database.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/**
 *  SSL configuration for the destination to connect to the source database.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SslConfig *ssl;

/**
 *  Required. The username that Database Migration Service will use to connect
 *  to the database. The value is encrypted when stored in Database Migration
 *  Service.
 */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  Settings for the cluster's primary instance
 */
@interface GTLRDatabaseMigrationService_PrimaryInstanceSettings : GTLRObject

/**
 *  Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster
 *  and instances. See the AlloyDB documentation for how these can be used.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_PrimaryInstanceSettings_DatabaseFlags *databaseFlags;

/**
 *  Required. The ID of the AlloyDB primary instance. The ID must satisfy the
 *  regex expression "[a-z0-9-]+".
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Labels for the AlloyDB primary instance created by DMS. An object containing
 *  a list of 'key', 'value' pairs.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_PrimaryInstanceSettings_Labels *labels;

/**
 *  Configuration for the machines that host the underlying database engine.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_MachineConfig *machineConfig;

/**
 *  Output only. The private IP address for the Instance. This is the connection
 *  endpoint for an end-user application.
 */
@property(nonatomic, copy, nullable) NSString *privateIp;

@end


/**
 *  Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster
 *  and instances. See the AlloyDB documentation for how these can be used.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_PrimaryInstanceSettings_DatabaseFlags : GTLRObject
@end


/**
 *  Labels for the AlloyDB primary instance created by DMS. An object containing
 *  a list of 'key', 'value' pairs.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_PrimaryInstanceSettings_Labels : GTLRObject
@end


/**
 *  Request message for 'PromoteMigrationJob' request.
 */
@interface GTLRDatabaseMigrationService_PromoteMigrationJobRequest : GTLRObject
@end


/**
 *  Request message for 'RestartMigrationJob' request.
 */
@interface GTLRDatabaseMigrationService_RestartMigrationJobRequest : GTLRObject
@end


/**
 *  Request message for 'ResumeMigrationJob' request.
 */
@interface GTLRDatabaseMigrationService_ResumeMigrationJobRequest : GTLRObject
@end


/**
 *  The details needed to configure a reverse SSH tunnel between the source and
 *  destination databases. These details will be used when calling the
 *  generateSshScript method (see
 *  https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript)
 *  to produce the script that will help set up the reverse SSH tunnel, and to
 *  set up the VPC peering between the Cloud SQL private network and the VPC.
 */
@interface GTLRDatabaseMigrationService_ReverseSshConnectivity : GTLRObject

/**
 *  The name of the virtual machine (Compute Engine) used as the bastion server
 *  for the SSH tunnel.
 */
@property(nonatomic, copy, nullable) NSString *vm;

/**
 *  Required. The IP of the virtual machine (Compute Engine) used as the bastion
 *  server for the SSH tunnel.
 */
@property(nonatomic, copy, nullable) NSString *vmIp;

/**
 *  Required. The forwarding port of the virtual machine (Compute Engine) used
 *  as the bastion server for the SSH tunnel.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *vmPort;

/** The name of the VPC to peer with the Cloud SQL private network. */
@property(nonatomic, copy, nullable) NSString *vpc;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRDatabaseMigrationService_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  An entry for an Access Control list.
 */
@interface GTLRDatabaseMigrationService_SqlAclEntry : GTLRObject

/**
 *  The time when this access control entry expires in [RFC
 *  3339](https://tools.ietf.org/html/rfc3339) format, for example:
 *  `2012-11-15T16:19:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/** A label to identify this entry. */
@property(nonatomic, copy, nullable) NSString *label;

/** Input only. The time-to-leave of this access control entry. */
@property(nonatomic, strong, nullable) GTLRDuration *ttl;

/** The allowlisted value for the access control list. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  IP Management configuration.
 */
@interface GTLRDatabaseMigrationService_SqlIpConfig : GTLRObject

/**
 *  The list of external networks that are allowed to connect to the instance
 *  using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation,
 *  also known as 'slash' notation (e.g. `192.168.100.0/24`).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_SqlAclEntry *> *authorizedNetworks;

/**
 *  Whether the instance should be assigned an IPv4 address or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableIpv4;

/**
 *  The resource link for the VPC network from which the Cloud SQL instance is
 *  accessible for private IP. For example,
 *  `projects/myProject/global/networks/default`. This setting can be updated,
 *  but it cannot be removed after it is set.
 */
@property(nonatomic, copy, nullable) NSString *privateNetwork;

/**
 *  Whether SSL connections over IP should be enforced or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requireSsl;

@end


/**
 *  Response message for 'GenerateSshScript' request.
 */
@interface GTLRDatabaseMigrationService_SshScript : GTLRObject

/** The ssh configuration script. */
@property(nonatomic, copy, nullable) NSString *script;

@end


/**
 *  SSL configuration information.
 */
@interface GTLRDatabaseMigrationService_SslConfig : GTLRObject

/**
 *  Required. Input only. The x509 PEM-encoded certificate of the CA that signed
 *  the source database server's certificate. The replica will use this
 *  certificate to verify it's connecting to the right host.
 */
@property(nonatomic, copy, nullable) NSString *caCertificate;

/**
 *  Input only. The x509 PEM-encoded certificate that will be used by the
 *  replica to authenticate against the source database server.If this field is
 *  used then the 'client_key' field is mandatory.
 */
@property(nonatomic, copy, nullable) NSString *clientCertificate;

/**
 *  Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key
 *  associated with the Client Certificate. If this field is used then the
 *  'client_certificate' field is mandatory.
 */
@property(nonatomic, copy, nullable) NSString *clientKey;

/**
 *  Output only. The ssl config type according to 'client_key',
 *  'client_certificate' and 'ca_certificate'.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_SslConfig_Type_ServerClient Both
 *        server ('ca_certificate'), and client ('client_key',
 *        'client_certificate') specified. (Value: "SERVER_CLIENT")
 *    @arg @c kGTLRDatabaseMigrationService_SslConfig_Type_ServerOnly Only
 *        'ca_certificate' specified. (Value: "SERVER_ONLY")
 *    @arg @c kGTLRDatabaseMigrationService_SslConfig_Type_SslTypeUnspecified
 *        Unspecified. (Value: "SSL_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Request message for 'StartMigrationJob' request.
 */
@interface GTLRDatabaseMigrationService_StartMigrationJobRequest : GTLRObject
@end


/**
 *  The source database will allow incoming connections from the destination
 *  database's public IP. You can retrieve the Cloud SQL instance's public IP
 *  from the Cloud SQL console or using Cloud SQL APIs. No additional
 *  configuration is required.
 */
@interface GTLRDatabaseMigrationService_StaticIpConnectivity : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRDatabaseMigrationService_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRDatabaseMigrationService_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_Status_Details_Item : GTLRObject
@end


/**
 *  Request message for 'StopMigrationJob' request.
 */
@interface GTLRDatabaseMigrationService_StopMigrationJobRequest : GTLRObject
@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRDatabaseMigrationService_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRDatabaseMigrationService_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  The username/password for a database user. Used for specifying initial users
 *  at cluster creation time.
 */
@interface GTLRDatabaseMigrationService_UserPassword : GTLRObject

/** The initial password for the user. */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  Output only. Indicates if the initial_user.password field has been set.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *passwordSet;

/** The database username. */
@property(nonatomic, copy, nullable) NSString *user;

@end


/**
 *  Request message for 'VerifyMigrationJob' request.
 */
@interface GTLRDatabaseMigrationService_VerifyMigrationJobRequest : GTLRObject
@end


/**
 *  VM creation configuration message
 */
@interface GTLRDatabaseMigrationService_VmCreationConfig : GTLRObject

/** The subnet name the vm needs to be created in. */
@property(nonatomic, copy, nullable) NSString *subnet;

/** Required. VM instance machine type to create. */
@property(nonatomic, copy, nullable) NSString *vmMachineType;

/** The Google Cloud Platform zone to create the VM in. */
@property(nonatomic, copy, nullable) NSString *vmZone;

@end


/**
 *  VM selection configuration message
 */
@interface GTLRDatabaseMigrationService_VmSelectionConfig : GTLRObject

/** Required. The Google Cloud Platform zone the VM is located. */
@property(nonatomic, copy, nullable) NSString *vmZone;

@end


/**
 *  The details of the VPC where the source database is located in Google Cloud.
 *  We will use this information to set up the VPC peering connection between
 *  Cloud SQL and this VPC.
 */
@interface GTLRDatabaseMigrationService_VpcPeeringConnectivity : GTLRObject

/** The name of the VPC network to peer with the Cloud SQL private network. */
@property(nonatomic, copy, nullable) NSString *vpc;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
