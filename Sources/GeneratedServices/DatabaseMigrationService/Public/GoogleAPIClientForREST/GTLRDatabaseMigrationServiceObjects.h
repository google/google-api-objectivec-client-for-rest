// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Database Migration API (datamigration/v1)
// Description:
//   Manage Cloud Database Migration Service resources on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/database-migration/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDatabaseMigrationService_AlloyDbConnectionProfile;
@class GTLRDatabaseMigrationService_AlloyDbSettings;
@class GTLRDatabaseMigrationService_AlloyDbSettings_Labels;
@class GTLRDatabaseMigrationService_ApplyHash;
@class GTLRDatabaseMigrationService_ApplyJobDetails;
@class GTLRDatabaseMigrationService_AssignSpecificValue;
@class GTLRDatabaseMigrationService_AuditConfig;
@class GTLRDatabaseMigrationService_AuditLogConfig;
@class GTLRDatabaseMigrationService_AuthorizedNetwork;
@class GTLRDatabaseMigrationService_BackgroundJobLogEntry;
@class GTLRDatabaseMigrationService_Binding;
@class GTLRDatabaseMigrationService_CloudSqlConnectionProfile;
@class GTLRDatabaseMigrationService_CloudSqlSettings;
@class GTLRDatabaseMigrationService_CloudSqlSettings_DatabaseFlags;
@class GTLRDatabaseMigrationService_CloudSqlSettings_UserLabels;
@class GTLRDatabaseMigrationService_ColumnEntity;
@class GTLRDatabaseMigrationService_ColumnEntity_CustomFeatures;
@class GTLRDatabaseMigrationService_ConditionalColumnSetValue;
@class GTLRDatabaseMigrationService_ConditionalColumnSetValue_CustomFeatures;
@class GTLRDatabaseMigrationService_ConnectionProfile;
@class GTLRDatabaseMigrationService_ConnectionProfile_Labels;
@class GTLRDatabaseMigrationService_ConstraintEntity;
@class GTLRDatabaseMigrationService_ConstraintEntity_CustomFeatures;
@class GTLRDatabaseMigrationService_ConversionWorkspace;
@class GTLRDatabaseMigrationService_ConversionWorkspace_GlobalSettings;
@class GTLRDatabaseMigrationService_ConversionWorkspaceInfo;
@class GTLRDatabaseMigrationService_ConvertJobDetails;
@class GTLRDatabaseMigrationService_ConvertRowIdToColumn;
@class GTLRDatabaseMigrationService_DatabaseEngineInfo;
@class GTLRDatabaseMigrationService_DatabaseEntity;
@class GTLRDatabaseMigrationService_DatabaseInstanceEntity;
@class GTLRDatabaseMigrationService_DatabaseInstanceEntity_CustomFeatures;
@class GTLRDatabaseMigrationService_DatabaseType;
@class GTLRDatabaseMigrationService_DataCacheConfig;
@class GTLRDatabaseMigrationService_DoubleComparisonFilter;
@class GTLRDatabaseMigrationService_DumpFlag;
@class GTLRDatabaseMigrationService_DumpFlags;
@class GTLRDatabaseMigrationService_Empty;
@class GTLRDatabaseMigrationService_EncryptionConfig;
@class GTLRDatabaseMigrationService_EntityDdl;
@class GTLRDatabaseMigrationService_EntityIssue;
@class GTLRDatabaseMigrationService_EntityMapping;
@class GTLRDatabaseMigrationService_EntityMappingLogEntry;
@class GTLRDatabaseMigrationService_EntityMove;
@class GTLRDatabaseMigrationService_Expr;
@class GTLRDatabaseMigrationService_FilterTableColumns;
@class GTLRDatabaseMigrationService_ForwardSshTunnelConnectivity;
@class GTLRDatabaseMigrationService_FunctionEntity;
@class GTLRDatabaseMigrationService_FunctionEntity_CustomFeatures;
@class GTLRDatabaseMigrationService_ImportRulesJobDetails;
@class GTLRDatabaseMigrationService_IndexEntity;
@class GTLRDatabaseMigrationService_IndexEntity_CustomFeatures;
@class GTLRDatabaseMigrationService_InstanceNetworkConfig;
@class GTLRDatabaseMigrationService_IntComparisonFilter;
@class GTLRDatabaseMigrationService_Location;
@class GTLRDatabaseMigrationService_Location_Labels;
@class GTLRDatabaseMigrationService_Location_Metadata;
@class GTLRDatabaseMigrationService_MachineConfig;
@class GTLRDatabaseMigrationService_MappingRule;
@class GTLRDatabaseMigrationService_MappingRuleFilter;
@class GTLRDatabaseMigrationService_MaterializedViewEntity;
@class GTLRDatabaseMigrationService_MaterializedViewEntity_CustomFeatures;
@class GTLRDatabaseMigrationService_MigrationJob;
@class GTLRDatabaseMigrationService_MigrationJob_Labels;
@class GTLRDatabaseMigrationService_MultiColumnDatatypeChange;
@class GTLRDatabaseMigrationService_MultiColumnDatatypeChange_CustomFeatures;
@class GTLRDatabaseMigrationService_MultiEntityRename;
@class GTLRDatabaseMigrationService_MySqlConnectionProfile;
@class GTLRDatabaseMigrationService_Operation;
@class GTLRDatabaseMigrationService_Operation_Metadata;
@class GTLRDatabaseMigrationService_Operation_Response;
@class GTLRDatabaseMigrationService_OracleAsmConfig;
@class GTLRDatabaseMigrationService_OracleConnectionProfile;
@class GTLRDatabaseMigrationService_PackageEntity;
@class GTLRDatabaseMigrationService_PackageEntity_CustomFeatures;
@class GTLRDatabaseMigrationService_PerformanceConfig;
@class GTLRDatabaseMigrationService_Policy;
@class GTLRDatabaseMigrationService_Position;
@class GTLRDatabaseMigrationService_PostgreSqlConnectionProfile;
@class GTLRDatabaseMigrationService_PrimaryInstanceSettings;
@class GTLRDatabaseMigrationService_PrimaryInstanceSettings_DatabaseFlags;
@class GTLRDatabaseMigrationService_PrimaryInstanceSettings_Labels;
@class GTLRDatabaseMigrationService_PrivateConnection;
@class GTLRDatabaseMigrationService_PrivateConnection_Labels;
@class GTLRDatabaseMigrationService_PrivateConnectivity;
@class GTLRDatabaseMigrationService_PrivateServiceConnectConnectivity;
@class GTLRDatabaseMigrationService_ReverseSshConnectivity;
@class GTLRDatabaseMigrationService_RoundToScale;
@class GTLRDatabaseMigrationService_RulesFile;
@class GTLRDatabaseMigrationService_SchemaEntity;
@class GTLRDatabaseMigrationService_SchemaEntity_CustomFeatures;
@class GTLRDatabaseMigrationService_SeedJobDetails;
@class GTLRDatabaseMigrationService_SequenceEntity;
@class GTLRDatabaseMigrationService_SequenceEntity_CustomFeatures;
@class GTLRDatabaseMigrationService_SetTablePrimaryKey;
@class GTLRDatabaseMigrationService_SingleColumnChange;
@class GTLRDatabaseMigrationService_SingleColumnChange_CustomFeatures;
@class GTLRDatabaseMigrationService_SingleEntityRename;
@class GTLRDatabaseMigrationService_SinglePackageChange;
@class GTLRDatabaseMigrationService_SourceNumericFilter;
@class GTLRDatabaseMigrationService_SourceSqlChange;
@class GTLRDatabaseMigrationService_SourceTextFilter;
@class GTLRDatabaseMigrationService_SqlAclEntry;
@class GTLRDatabaseMigrationService_SqlIpConfig;
@class GTLRDatabaseMigrationService_SqlServerBackups;
@class GTLRDatabaseMigrationService_SqlServerConnectionProfile;
@class GTLRDatabaseMigrationService_SqlServerDatabaseBackup;
@class GTLRDatabaseMigrationService_SqlServerEncryptionOptions;
@class GTLRDatabaseMigrationService_SqlServerHomogeneousMigrationJobConfig;
@class GTLRDatabaseMigrationService_SslConfig;
@class GTLRDatabaseMigrationService_StaticIpConnectivity;
@class GTLRDatabaseMigrationService_StaticServiceIpConnectivity;
@class GTLRDatabaseMigrationService_Status;
@class GTLRDatabaseMigrationService_Status_Details_Item;
@class GTLRDatabaseMigrationService_StoredProcedureEntity;
@class GTLRDatabaseMigrationService_StoredProcedureEntity_CustomFeatures;
@class GTLRDatabaseMigrationService_SynonymEntity;
@class GTLRDatabaseMigrationService_SynonymEntity_CustomFeatures;
@class GTLRDatabaseMigrationService_TableEntity;
@class GTLRDatabaseMigrationService_TableEntity_CustomFeatures;
@class GTLRDatabaseMigrationService_TriggerEntity;
@class GTLRDatabaseMigrationService_TriggerEntity_CustomFeatures;
@class GTLRDatabaseMigrationService_UDTEntity;
@class GTLRDatabaseMigrationService_UDTEntity_CustomFeatures;
@class GTLRDatabaseMigrationService_UserPassword;
@class GTLRDatabaseMigrationService_ValueListFilter;
@class GTLRDatabaseMigrationService_ValueTransformation;
@class GTLRDatabaseMigrationService_ViewEntity;
@class GTLRDatabaseMigrationService_ViewEntity_CustomFeatures;
@class GTLRDatabaseMigrationService_VmCreationConfig;
@class GTLRDatabaseMigrationService_VmSelectionConfig;
@class GTLRDatabaseMigrationService_VpcPeeringConfig;
@class GTLRDatabaseMigrationService_VpcPeeringConnectivity;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_AlloyDbSettings.databaseVersion

/**
 *  This is an unknown database version.
 *
 *  Value: "DATABASE_VERSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_AlloyDbSettings_DatabaseVersion_DatabaseVersionUnspecified;
/**
 *  The database version is Postgres 14.
 *
 *  Value: "POSTGRES_14"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_AlloyDbSettings_DatabaseVersion_Postgres14;
/**
 *  The database version is Postgres 15.
 *
 *  Value: "POSTGRES_15"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_AlloyDbSettings_DatabaseVersion_Postgres15;
/**
 *  The database version is Postgres 16.
 *
 *  Value: "POSTGRES_16"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_AlloyDbSettings_DatabaseVersion_Postgres16;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_BackgroundJobLogEntry.completionState

/**
 *  Error.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_BackgroundJobLogEntry_CompletionState_Failed;
/**
 *  The status is not specified. This state is used when job is not yet
 *  finished.
 *
 *  Value: "JOB_COMPLETION_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_BackgroundJobLogEntry_CompletionState_JobCompletionStateUnspecified;
/**
 *  Success.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_BackgroundJobLogEntry_CompletionState_Succeeded;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_BackgroundJobLogEntry.jobType

/**
 *  Job to apply the draft tree onto the destination.
 *
 *  Value: "BACKGROUND_JOB_TYPE_APPLY_DESTINATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_BackgroundJobLogEntry_JobType_BackgroundJobTypeApplyDestination;
/**
 *  Job to convert the source database into a draft of the destination database.
 *
 *  Value: "BACKGROUND_JOB_TYPE_CONVERT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_BackgroundJobLogEntry_JobType_BackgroundJobTypeConvert;
/**
 *  Job to import and convert mapping rules from an external source such as an
 *  ora2pg config file.
 *
 *  Value: "BACKGROUND_JOB_TYPE_IMPORT_RULES_FILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_BackgroundJobLogEntry_JobType_BackgroundJobTypeImportRulesFile;
/**
 *  Job to seed from the source database.
 *
 *  Value: "BACKGROUND_JOB_TYPE_SOURCE_SEED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_BackgroundJobLogEntry_JobType_BackgroundJobTypeSourceSeed;
/**
 *  Unspecified background job type.
 *
 *  Value: "BACKGROUND_JOB_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_BackgroundJobLogEntry_JobType_BackgroundJobTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_CloudSqlSettings.activationPolicy

/**
 *  The instance is always up and running.
 *
 *  Value: "ALWAYS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_ActivationPolicy_Always;
/**
 *  The instance should never spin up.
 *
 *  Value: "NEVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_ActivationPolicy_Never;
/**
 *  unspecified policy.
 *
 *  Value: "SQL_ACTIVATION_POLICY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_ActivationPolicy_SqlActivationPolicyUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_CloudSqlSettings.availabilityType

/**
 *  Regional availability instance.
 *
 *  Value: "REGIONAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_AvailabilityType_Regional;
/**
 *  This is an unknown Availability type.
 *
 *  Value: "SQL_AVAILABILITY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_AvailabilityType_SqlAvailabilityTypeUnspecified;
/**
 *  Zonal availablility instance.
 *
 *  Value: "ZONAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_AvailabilityType_Zonal;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_CloudSqlSettings.databaseVersion

/**
 *  MySQL 5.6.
 *
 *  Value: "MYSQL_5_6"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql56;
/**
 *  MySQL 5.7.
 *
 *  Value: "MYSQL_5_7"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql57;
/**
 *  MySQL 8.0.
 *
 *  Value: "MYSQL_8_0"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql80;
/**
 *  The database major version is MySQL 8.0 and the minor version is 18.
 *
 *  Value: "MYSQL_8_0_18"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8018;
/**
 *  The database major version is MySQL 8.0 and the minor version is 26.
 *
 *  Value: "MYSQL_8_0_26"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8026;
/**
 *  The database major version is MySQL 8.0 and the minor version is 27.
 *
 *  Value: "MYSQL_8_0_27"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8027;
/**
 *  The database major version is MySQL 8.0 and the minor version is 28.
 *
 *  Value: "MYSQL_8_0_28"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8028;
/**
 *  The database major version is MySQL 8.0 and the minor version is 30.
 *
 *  Value: "MYSQL_8_0_30"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8030;
/**
 *  The database major version is MySQL 8.0 and the minor version is 31.
 *
 *  Value: "MYSQL_8_0_31"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8031;
/**
 *  The database major version is MySQL 8.0 and the minor version is 32.
 *
 *  Value: "MYSQL_8_0_32"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8032;
/**
 *  The database major version is MySQL 8.0 and the minor version is 33.
 *
 *  Value: "MYSQL_8_0_33"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8033;
/**
 *  The database major version is MySQL 8.0 and the minor version is 34.
 *
 *  Value: "MYSQL_8_0_34"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8034;
/**
 *  The database major version is MySQL 8.0 and the minor version is 35.
 *
 *  Value: "MYSQL_8_0_35"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8035;
/**
 *  The database major version is MySQL 8.0 and the minor version is 36.
 *
 *  Value: "MYSQL_8_0_36"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8036;
/**
 *  The database major version is MySQL 8.0 and the minor version is 37.
 *
 *  Value: "MYSQL_8_0_37"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8037;
/**
 *  MySQL 8.4.
 *
 *  Value: "MYSQL_8_4"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql84;
/**
 *  PostgreSQL 10.
 *
 *  Value: "POSTGRES_10"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres10;
/**
 *  PostgreSQL 11.
 *
 *  Value: "POSTGRES_11"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres11;
/**
 *  PostgreSQL 12.
 *
 *  Value: "POSTGRES_12"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres12;
/**
 *  PostgreSQL 13.
 *
 *  Value: "POSTGRES_13"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres13;
/**
 *  PostgreSQL 14.
 *
 *  Value: "POSTGRES_14"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres14;
/**
 *  PostgreSQL 15.
 *
 *  Value: "POSTGRES_15"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres15;
/**
 *  PostgreSQL 16.
 *
 *  Value: "POSTGRES_16"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres16;
/**
 *  PostgreSQL 9.6.
 *
 *  Value: "POSTGRES_9_6"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres96;
/**
 *  Unspecified version.
 *
 *  Value: "SQL_DATABASE_VERSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_SqlDatabaseVersionUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_CloudSqlSettings.dataDiskType

/**
 *  HDD disk.
 *
 *  Value: "PD_HDD"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DataDiskType_PdHdd;
/**
 *  SSD disk.
 *
 *  Value: "PD_SSD"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DataDiskType_PdSsd;
/**
 *  Unspecified.
 *
 *  Value: "SQL_DATA_DISK_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_DataDiskType_SqlDataDiskTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_CloudSqlSettings.edition

/**
 *  The instance did not specify the edition.
 *
 *  Value: "EDITION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_Edition_EditionUnspecified;
/**
 *  The instance is an enterprise edition.
 *
 *  Value: "ENTERPRISE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_Edition_Enterprise;
/**
 *  The instance is an enterprise plus edition.
 *
 *  Value: "ENTERPRISE_PLUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_CloudSqlSettings_Edition_EnterprisePlus;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_ConnectionProfile.provider

/**
 *  AlloyDB for PostgreSQL is the source instance provider.
 *
 *  Value: "ALLOYDB"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_Provider_Alloydb;
/**
 *  Amazon Aurora is the source instance provider.
 *
 *  Value: "AURORA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_Provider_Aurora;
/**
 *  Cloud SQL is the source instance provider.
 *
 *  Value: "CLOUDSQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_Provider_Cloudsql;
/**
 *  Use this value for on-premise source database instances and ORACLE.
 *
 *  Value: "DATABASE_PROVIDER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_Provider_DatabaseProviderUnspecified;
/**
 *  Amazon RDS is the source instance provider.
 *
 *  Value: "RDS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_Provider_Rds;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_ConnectionProfile.state

/**
 *  The connection profile is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_State_Creating;
/**
 *  The connection profile has been deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_State_Deleted;
/**
 *  The connection profile is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_State_Deleting;
/**
 *  The connection profile is in draft mode and fully editable.
 *
 *  Value: "DRAFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_State_Draft;
/**
 *  The last action on the connection profile failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_State_Failed;
/**
 *  The connection profile is ready.
 *
 *  Value: "READY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_State_Ready;
/**
 *  The state of the connection profile is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_State_StateUnspecified;
/**
 *  The connection profile is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ConnectionProfile_State_Updating;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_DatabaseEngineInfo.engine

/**
 *  The source database engine of the migration job is unknown.
 *
 *  Value: "DATABASE_ENGINE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEngineInfo_Engine_DatabaseEngineUnspecified;
/**
 *  The source engine is MySQL.
 *
 *  Value: "MYSQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEngineInfo_Engine_Mysql;
/**
 *  The source engine is Oracle.
 *
 *  Value: "ORACLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEngineInfo_Engine_Oracle;
/**
 *  The source engine is PostgreSQL.
 *
 *  Value: "POSTGRESQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEngineInfo_Engine_Postgresql;
/**
 *  The source engine is SQL Server.
 *
 *  Value: "SQLSERVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEngineInfo_Engine_Sqlserver;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_DatabaseEntity.entityType

/**
 *  Column.
 *
 *  Value: "DATABASE_ENTITY_TYPE_COLUMN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeColumn;
/**
 *  Constraint.
 *
 *  Value: "DATABASE_ENTITY_TYPE_CONSTRAINT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeConstraint;
/**
 *  Database.
 *
 *  Value: "DATABASE_ENTITY_TYPE_DATABASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeDatabase;
/**
 *  Package.
 *
 *  Value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeDatabasePackage;
/**
 *  Function.
 *
 *  Value: "DATABASE_ENTITY_TYPE_FUNCTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeFunction;
/**
 *  Index.
 *
 *  Value: "DATABASE_ENTITY_TYPE_INDEX"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeIndex;
/**
 *  Materialized View.
 *
 *  Value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeMaterializedView;
/**
 *  Schema.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SCHEMA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeSchema;
/**
 *  Sequence.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SEQUENCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeSequence;
/**
 *  Stored Procedure.
 *
 *  Value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeStoredProcedure;
/**
 *  Synonym.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SYNONYM"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeSynonym;
/**
 *  Table.
 *
 *  Value: "DATABASE_ENTITY_TYPE_TABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeTable;
/**
 *  Trigger.
 *
 *  Value: "DATABASE_ENTITY_TYPE_TRIGGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeTrigger;
/**
 *  UDT.
 *
 *  Value: "DATABASE_ENTITY_TYPE_UDT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeUdt;
/**
 *  Unspecified database entity type.
 *
 *  Value: "DATABASE_ENTITY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeUnspecified;
/**
 *  View.
 *
 *  Value: "DATABASE_ENTITY_TYPE_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeView;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_DatabaseEntity.tree

/**
 *  Tree of entities observed on the destination database.
 *
 *  Value: "DESTINATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_Tree_Destination;
/**
 *  Tree of entities converted from the source tree using the mapping rules.
 *
 *  Value: "DRAFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_Tree_Draft;
/**
 *  Tree of entities loaded from a source database.
 *
 *  Value: "SOURCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_Tree_Source;
/**
 *  Tree type unspecified.
 *
 *  Value: "TREE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseEntity_Tree_TreeTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_DatabaseType.engine

/**
 *  The source database engine of the migration job is unknown.
 *
 *  Value: "DATABASE_ENGINE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Engine_DatabaseEngineUnspecified;
/**
 *  The source engine is MySQL.
 *
 *  Value: "MYSQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Engine_Mysql;
/**
 *  The source engine is Oracle.
 *
 *  Value: "ORACLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Engine_Oracle;
/**
 *  The source engine is PostgreSQL.
 *
 *  Value: "POSTGRESQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Engine_Postgresql;
/**
 *  The source engine is SQL Server.
 *
 *  Value: "SQLSERVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Engine_Sqlserver;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_DatabaseType.provider

/**
 *  AlloyDB for PostgreSQL is the source instance provider.
 *
 *  Value: "ALLOYDB"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Provider_Alloydb;
/**
 *  Amazon Aurora is the source instance provider.
 *
 *  Value: "AURORA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Provider_Aurora;
/**
 *  Cloud SQL is the source instance provider.
 *
 *  Value: "CLOUDSQL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Provider_Cloudsql;
/**
 *  Use this value for on-premise source database instances and ORACLE.
 *
 *  Value: "DATABASE_PROVIDER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Provider_DatabaseProviderUnspecified;
/**
 *  Amazon RDS is the source instance provider.
 *
 *  Value: "RDS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DatabaseType_Provider_Rds;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_DoubleComparisonFilter.valueComparison

/**
 *  Value is larger or equal than the Compare value.
 *
 *  Value: "VALUE_COMPARISON_IF_VALUE_LARGER_EQUAL_THAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DoubleComparisonFilter_ValueComparison_ValueComparisonIfValueLargerEqualThan;
/**
 *  Value is larger than the Compare value.
 *
 *  Value: "VALUE_COMPARISON_IF_VALUE_LARGER_THAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DoubleComparisonFilter_ValueComparison_ValueComparisonIfValueLargerThan;
/**
 *  Value is smaller or equal than the Compare value.
 *
 *  Value: "VALUE_COMPARISON_IF_VALUE_SMALLER_EQUAL_THAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DoubleComparisonFilter_ValueComparison_ValueComparisonIfValueSmallerEqualThan;
/**
 *  Value is smaller than the Compare value.
 *
 *  Value: "VALUE_COMPARISON_IF_VALUE_SMALLER_THAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DoubleComparisonFilter_ValueComparison_ValueComparisonIfValueSmallerThan;
/**
 *  Value comparison unspecified.
 *
 *  Value: "VALUE_COMPARISON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_DoubleComparisonFilter_ValueComparison_ValueComparisonUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_EntityDdl.entityType

/**
 *  Column.
 *
 *  Value: "DATABASE_ENTITY_TYPE_COLUMN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeColumn;
/**
 *  Constraint.
 *
 *  Value: "DATABASE_ENTITY_TYPE_CONSTRAINT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeConstraint;
/**
 *  Database.
 *
 *  Value: "DATABASE_ENTITY_TYPE_DATABASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeDatabase;
/**
 *  Package.
 *
 *  Value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeDatabasePackage;
/**
 *  Function.
 *
 *  Value: "DATABASE_ENTITY_TYPE_FUNCTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeFunction;
/**
 *  Index.
 *
 *  Value: "DATABASE_ENTITY_TYPE_INDEX"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeIndex;
/**
 *  Materialized View.
 *
 *  Value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeMaterializedView;
/**
 *  Schema.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SCHEMA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeSchema;
/**
 *  Sequence.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SEQUENCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeSequence;
/**
 *  Stored Procedure.
 *
 *  Value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeStoredProcedure;
/**
 *  Synonym.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SYNONYM"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeSynonym;
/**
 *  Table.
 *
 *  Value: "DATABASE_ENTITY_TYPE_TABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeTable;
/**
 *  Trigger.
 *
 *  Value: "DATABASE_ENTITY_TYPE_TRIGGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeTrigger;
/**
 *  UDT.
 *
 *  Value: "DATABASE_ENTITY_TYPE_UDT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeUdt;
/**
 *  Unspecified database entity type.
 *
 *  Value: "DATABASE_ENTITY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeUnspecified;
/**
 *  View.
 *
 *  Value: "DATABASE_ENTITY_TYPE_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeView;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_EntityIssue.entityType

/**
 *  Column.
 *
 *  Value: "DATABASE_ENTITY_TYPE_COLUMN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeColumn;
/**
 *  Constraint.
 *
 *  Value: "DATABASE_ENTITY_TYPE_CONSTRAINT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeConstraint;
/**
 *  Database.
 *
 *  Value: "DATABASE_ENTITY_TYPE_DATABASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeDatabase;
/**
 *  Package.
 *
 *  Value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeDatabasePackage;
/**
 *  Function.
 *
 *  Value: "DATABASE_ENTITY_TYPE_FUNCTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeFunction;
/**
 *  Index.
 *
 *  Value: "DATABASE_ENTITY_TYPE_INDEX"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeIndex;
/**
 *  Materialized View.
 *
 *  Value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeMaterializedView;
/**
 *  Schema.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SCHEMA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeSchema;
/**
 *  Sequence.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SEQUENCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeSequence;
/**
 *  Stored Procedure.
 *
 *  Value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeStoredProcedure;
/**
 *  Synonym.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SYNONYM"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeSynonym;
/**
 *  Table.
 *
 *  Value: "DATABASE_ENTITY_TYPE_TABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeTable;
/**
 *  Trigger.
 *
 *  Value: "DATABASE_ENTITY_TYPE_TRIGGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeTrigger;
/**
 *  UDT.
 *
 *  Value: "DATABASE_ENTITY_TYPE_UDT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeUdt;
/**
 *  Unspecified database entity type.
 *
 *  Value: "DATABASE_ENTITY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeUnspecified;
/**
 *  View.
 *
 *  Value: "DATABASE_ENTITY_TYPE_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeView;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_EntityIssue.severity

/**
 *  Error
 *
 *  Value: "ISSUE_SEVERITY_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_Severity_IssueSeverityError;
/**
 *  Info
 *
 *  Value: "ISSUE_SEVERITY_INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_Severity_IssueSeverityInfo;
/**
 *  Unspecified issue severity
 *
 *  Value: "ISSUE_SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_Severity_IssueSeverityUnspecified;
/**
 *  Warning
 *
 *  Value: "ISSUE_SEVERITY_WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_Severity_IssueSeverityWarning;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_EntityIssue.type

/**
 *  Issue originated during the apply process
 *
 *  Value: "ISSUE_TYPE_APPLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_Type_IssueTypeApply;
/**
 *  Issue originated during the convert process
 *
 *  Value: "ISSUE_TYPE_CONVERT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_Type_IssueTypeConvert;
/**
 *  Issue originated from the DDL
 *
 *  Value: "ISSUE_TYPE_DDL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_Type_IssueTypeDdl;
/**
 *  Unspecified issue type.
 *
 *  Value: "ISSUE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityIssue_Type_IssueTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_EntityMapping.draftType

/**
 *  Column.
 *
 *  Value: "DATABASE_ENTITY_TYPE_COLUMN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeColumn;
/**
 *  Constraint.
 *
 *  Value: "DATABASE_ENTITY_TYPE_CONSTRAINT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeConstraint;
/**
 *  Database.
 *
 *  Value: "DATABASE_ENTITY_TYPE_DATABASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeDatabase;
/**
 *  Package.
 *
 *  Value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeDatabasePackage;
/**
 *  Function.
 *
 *  Value: "DATABASE_ENTITY_TYPE_FUNCTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeFunction;
/**
 *  Index.
 *
 *  Value: "DATABASE_ENTITY_TYPE_INDEX"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeIndex;
/**
 *  Materialized View.
 *
 *  Value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeMaterializedView;
/**
 *  Schema.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SCHEMA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeSchema;
/**
 *  Sequence.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SEQUENCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeSequence;
/**
 *  Stored Procedure.
 *
 *  Value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeStoredProcedure;
/**
 *  Synonym.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SYNONYM"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeSynonym;
/**
 *  Table.
 *
 *  Value: "DATABASE_ENTITY_TYPE_TABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeTable;
/**
 *  Trigger.
 *
 *  Value: "DATABASE_ENTITY_TYPE_TRIGGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeTrigger;
/**
 *  UDT.
 *
 *  Value: "DATABASE_ENTITY_TYPE_UDT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeUdt;
/**
 *  Unspecified database entity type.
 *
 *  Value: "DATABASE_ENTITY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeUnspecified;
/**
 *  View.
 *
 *  Value: "DATABASE_ENTITY_TYPE_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeView;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_EntityMapping.sourceType

/**
 *  Column.
 *
 *  Value: "DATABASE_ENTITY_TYPE_COLUMN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeColumn;
/**
 *  Constraint.
 *
 *  Value: "DATABASE_ENTITY_TYPE_CONSTRAINT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeConstraint;
/**
 *  Database.
 *
 *  Value: "DATABASE_ENTITY_TYPE_DATABASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeDatabase;
/**
 *  Package.
 *
 *  Value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeDatabasePackage;
/**
 *  Function.
 *
 *  Value: "DATABASE_ENTITY_TYPE_FUNCTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeFunction;
/**
 *  Index.
 *
 *  Value: "DATABASE_ENTITY_TYPE_INDEX"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeIndex;
/**
 *  Materialized View.
 *
 *  Value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeMaterializedView;
/**
 *  Schema.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SCHEMA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeSchema;
/**
 *  Sequence.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SEQUENCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeSequence;
/**
 *  Stored Procedure.
 *
 *  Value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeStoredProcedure;
/**
 *  Synonym.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SYNONYM"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeSynonym;
/**
 *  Table.
 *
 *  Value: "DATABASE_ENTITY_TYPE_TABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeTable;
/**
 *  Trigger.
 *
 *  Value: "DATABASE_ENTITY_TYPE_TRIGGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeTrigger;
/**
 *  UDT.
 *
 *  Value: "DATABASE_ENTITY_TYPE_UDT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeUdt;
/**
 *  Unspecified database entity type.
 *
 *  Value: "DATABASE_ENTITY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeUnspecified;
/**
 *  View.
 *
 *  Value: "DATABASE_ENTITY_TYPE_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeView;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_ImportMappingRulesRequest.rulesFormat

/**
 *  HarbourBridge session file.
 *
 *  Value: "IMPORT_RULES_FILE_FORMAT_HARBOUR_BRIDGE_SESSION_FILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ImportMappingRulesRequest_RulesFormat_ImportRulesFileFormatHarbourBridgeSessionFile;
/**
 *  Ora2Pg configuration file.
 *
 *  Value: "IMPORT_RULES_FILE_FORMAT_ORATOPG_CONFIG_FILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ImportMappingRulesRequest_RulesFormat_ImportRulesFileFormatOratopgConfigFile;
/**
 *  Unspecified rules format.
 *
 *  Value: "IMPORT_RULES_FILE_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ImportMappingRulesRequest_RulesFormat_ImportRulesFileFormatUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_ImportRulesJobDetails.fileFormat

/**
 *  HarbourBridge session file.
 *
 *  Value: "IMPORT_RULES_FILE_FORMAT_HARBOUR_BRIDGE_SESSION_FILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ImportRulesJobDetails_FileFormat_ImportRulesFileFormatHarbourBridgeSessionFile;
/**
 *  Ora2Pg configuration file.
 *
 *  Value: "IMPORT_RULES_FILE_FORMAT_ORATOPG_CONFIG_FILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ImportRulesJobDetails_FileFormat_ImportRulesFileFormatOratopgConfigFile;
/**
 *  Unspecified rules format.
 *
 *  Value: "IMPORT_RULES_FILE_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ImportRulesJobDetails_FileFormat_ImportRulesFileFormatUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_IntComparisonFilter.valueComparison

/**
 *  Value is larger or equal than the Compare value.
 *
 *  Value: "VALUE_COMPARISON_IF_VALUE_LARGER_EQUAL_THAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_IntComparisonFilter_ValueComparison_ValueComparisonIfValueLargerEqualThan;
/**
 *  Value is larger than the Compare value.
 *
 *  Value: "VALUE_COMPARISON_IF_VALUE_LARGER_THAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_IntComparisonFilter_ValueComparison_ValueComparisonIfValueLargerThan;
/**
 *  Value is smaller or equal than the Compare value.
 *
 *  Value: "VALUE_COMPARISON_IF_VALUE_SMALLER_EQUAL_THAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_IntComparisonFilter_ValueComparison_ValueComparisonIfValueSmallerEqualThan;
/**
 *  Value is smaller than the Compare value.
 *
 *  Value: "VALUE_COMPARISON_IF_VALUE_SMALLER_THAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_IntComparisonFilter_ValueComparison_ValueComparisonIfValueSmallerThan;
/**
 *  Value comparison unspecified.
 *
 *  Value: "VALUE_COMPARISON_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_IntComparisonFilter_ValueComparison_ValueComparisonUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_MappingRule.ruleScope

/**
 *  Column.
 *
 *  Value: "DATABASE_ENTITY_TYPE_COLUMN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeColumn;
/**
 *  Constraint.
 *
 *  Value: "DATABASE_ENTITY_TYPE_CONSTRAINT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeConstraint;
/**
 *  Database.
 *
 *  Value: "DATABASE_ENTITY_TYPE_DATABASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeDatabase;
/**
 *  Package.
 *
 *  Value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeDatabasePackage;
/**
 *  Function.
 *
 *  Value: "DATABASE_ENTITY_TYPE_FUNCTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeFunction;
/**
 *  Index.
 *
 *  Value: "DATABASE_ENTITY_TYPE_INDEX"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeIndex;
/**
 *  Materialized View.
 *
 *  Value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeMaterializedView;
/**
 *  Schema.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SCHEMA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeSchema;
/**
 *  Sequence.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SEQUENCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeSequence;
/**
 *  Stored Procedure.
 *
 *  Value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeStoredProcedure;
/**
 *  Synonym.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SYNONYM"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeSynonym;
/**
 *  Table.
 *
 *  Value: "DATABASE_ENTITY_TYPE_TABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeTable;
/**
 *  Trigger.
 *
 *  Value: "DATABASE_ENTITY_TYPE_TRIGGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeTrigger;
/**
 *  UDT.
 *
 *  Value: "DATABASE_ENTITY_TYPE_UDT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeUdt;
/**
 *  Unspecified database entity type.
 *
 *  Value: "DATABASE_ENTITY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeUnspecified;
/**
 *  View.
 *
 *  Value: "DATABASE_ENTITY_TYPE_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeView;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_MappingRule.state

/**
 *  The rule is logically deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_State_Deleted;
/**
 *  The rule is disabled.
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_State_Disabled;
/**
 *  The rule is enabled.
 *
 *  Value: "ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_State_Enabled;
/**
 *  The state of the mapping rule is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MappingRule_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_MigrationJob.dumpType

/**
 *  If not specified, defaults to LOGICAL
 *
 *  Value: "DUMP_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_DumpType_DumpTypeUnspecified;
/**
 *  Logical dump.
 *
 *  Value: "LOGICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_DumpType_Logical;
/**
 *  Physical file-based dump. Supported for MySQL to CloudSQL for MySQL
 *  migrations only.
 *
 *  Value: "PHYSICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_DumpType_Physical;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_MigrationJob.phase

/**
 *  The migration job is CDC phase.
 *
 *  Value: "CDC"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Phase_Cdc;
/**
 *  The migration job is in the full dump phase.
 *
 *  Value: "FULL_DUMP"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Phase_FullDump;
/**
 *  The phase of the migration job is unknown.
 *
 *  Value: "PHASE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Phase_PhaseUnspecified;
/**
 *  Only RDS flow - the sources writes stopped, waiting for dump to begin
 *
 *  Value: "PREPARING_THE_DUMP"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Phase_PreparingTheDump;
/**
 *  The migration job is running the promote phase.
 *
 *  Value: "PROMOTE_IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Phase_PromoteInProgress;
/**
 *  The migration job is ready to be promoted.
 *
 *  Value: "READY_FOR_PROMOTE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Phase_ReadyForPromote;
/**
 *  Only RDS flow - waiting for source writes to stop
 *
 *  Value: "WAITING_FOR_SOURCE_WRITES_TO_STOP"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Phase_WaitingForSourceWritesToStop;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_MigrationJob.state

/**
 *  The migration job has been completed.
 *
 *  Value: "COMPLETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Completed;
/**
 *  The migration job is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Creating;
/**
 *  The migration job has been deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Deleted;
/**
 *  The migration job is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Deleting;
/**
 *  The migration job is in draft mode and no resources are created.
 *
 *  Value: "DRAFT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Draft;
/**
 *  The migration job failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Failed;
/**
 *  The migration job is down for maintenance.
 *
 *  Value: "MAINTENANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Maintenance;
/**
 *  The migration job is created and not started.
 *
 *  Value: "NOT_STARTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_NotStarted;
/**
 *  The migration job is restarting.
 *
 *  Value: "RESTARTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Restarting;
/**
 *  The migration job is resuming.
 *
 *  Value: "RESUMING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Resuming;
/**
 *  The migration job is running.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Running;
/**
 *  The migration job is starting.
 *
 *  Value: "STARTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Starting;
/**
 *  The state of the migration job is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_StateUnspecified;
/**
 *  The migration job is currently stopped.
 *
 *  Value: "STOPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Stopped;
/**
 *  The migration job is being stopped.
 *
 *  Value: "STOPPING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Stopping;
/**
 *  The migration job is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_State_Updating;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_MigrationJob.type

/**
 *  The migration job is a continuous migration.
 *
 *  Value: "CONTINUOUS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Type_Continuous;
/**
 *  The migration job is a one time migration.
 *
 *  Value: "ONE_TIME"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Type_OneTime;
/**
 *  The type of the migration job is unknown.
 *
 *  Value: "TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJob_Type_TypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_MigrationJobVerificationError.errorCode

/**
 *  We failed to authenticate to one of the connection profile.
 *
 *  Value: "AUTHENTICATION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_AuthenticationFailure;
/**
 *  Migration is already running at the time of restart request.
 *
 *  Value: "CANT_RESTART_RUNNING_MIGRATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_CantRestartRunningMigration;
/**
 *  We failed to connect to one of the connection profile.
 *
 *  Value: "CONNECTION_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ConnectionFailure;
/**
 *  The types of the source and the destination are incompatible.
 *
 *  Value: "CONNECTION_PROFILE_TYPES_INCOMPATIBILITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ConnectionProfileTypesIncompatibility;
/**
 *  An unknown error occurred
 *
 *  Value: "ERROR_CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ErrorCodeUnspecified;
/**
 *  There was an underlying RDBMS error.
 *
 *  Value: "ERROR_RDBMS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ErrorRdbms;
/**
 *  The destination DB contains existing databases that are conflicting with
 *  those in the source DB.
 *
 *  Value: "EXISTING_CONFLICTING_DATABASES"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ExistingConflictingDatabases;
/**
 *  The destination instance contains existing data or user defined entities
 *  (for example databases, tables, or functions). You can only migrate to empty
 *  instances. Clear your destination instance and retry the migration job.
 *
 *  Value: "EXISTING_DATA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ExistingData;
/**
 *  The value of parameter max_replication_slots is not sufficient.
 *
 *  Value: "INSUFFICIENT_MAX_REPLICATION_SLOTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InsufficientMaxReplicationSlots;
/**
 *  The value of parameter max_wal_senders is not sufficient.
 *
 *  Value: "INSUFFICIENT_MAX_WAL_SENDERS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InsufficientMaxWalSenders;
/**
 *  The value of parameter max_worker_processes is not sufficient.
 *
 *  Value: "INSUFFICIENT_MAX_WORKER_PROCESSES"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InsufficientMaxWorkerProcesses;
/**
 *  One of the involved connection profiles has an invalid configuration.
 *
 *  Value: "INVALID_CONNECTION_PROFILE_CONFIG"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InvalidConnectionProfileConfig;
/**
 *  Invalid RDS logical replication.
 *
 *  Value: "INVALID_RDS_LOGICAL_REPLICATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InvalidRdsLogicalReplication;
/**
 *  The value of parameter shared_preload_libraries does not include pglogical.
 *
 *  Value: "INVALID_SHARED_PRELOAD_LIBRARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InvalidSharedPreloadLibrary;
/**
 *  The value of parameter wal_level is not set to logical.
 *
 *  Value: "INVALID_WAL_LEVEL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InvalidWalLevel;
/**
 *  No pglogical extension installed on databases, applicable for postgres.
 *
 *  Value: "NO_PGLOGICAL_INSTALLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_NoPglogicalInstalled;
/**
 *  Insufficient privilege to enable the parallelism configuration.
 *
 *  Value: "PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ParallelImportInsufficientPrivilege;
/**
 *  pglogical node already exists on databases, applicable for postgres.
 *
 *  Value: "PGLOGICAL_NODE_ALREADY_EXISTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_PglogicalNodeAlreadyExists;
/**
 *  The source already has a replication setup.
 *
 *  Value: "SOURCE_ALREADY_SETUP"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_SourceAlreadySetup;
/**
 *  The migration job is configured to use max number of subscriptions to
 *  migrate data from the source to the destination.
 *
 *  Value: "SOURCE_MAX_SUBSCRIPTIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_SourceMaxSubscriptions;
/**
 *  The source DB size in Bytes exceeds a certain threshold. The migration might
 *  require an increase of quota, or might not be supported.
 *
 *  Value: "SOURCE_SIZE_EXCEEDS_THRESHOLD"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_SourceSizeExceedsThreshold;
/**
 *  The source has tables with limited support. E.g. PostgreSQL tables without
 *  primary keys.
 *
 *  Value: "TABLES_WITH_LIMITED_SUPPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_TablesWithLimitedSupport;
/**
 *  The source uses an unsupported Foreign Data Wrapper configuration.
 *
 *  Value: "UNSUPPORTED_DATABASE_FDW_CONFIG"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedDatabaseFdwConfig;
/**
 *  The source uses an unsupported locale.
 *
 *  Value: "UNSUPPORTED_DATABASE_LOCALE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedDatabaseLocale;
/**
 *  The definer is not supported.
 *
 *  Value: "UNSUPPORTED_DEFINER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedDefiner;
/**
 *  Extensions installed are either not supported or having unsupported
 *  versions.
 *
 *  Value: "UNSUPPORTED_EXTENSIONS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedExtensions;
/**
 *  The gtid_mode is not supported, applicable for MySQL.
 *
 *  Value: "UNSUPPORTED_GTID_MODE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedGtidMode;
/**
 *  Unsupported migration type.
 *
 *  Value: "UNSUPPORTED_MIGRATION_TYPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedMigrationType;
/**
 *  The table definition is not support due to missing primary key or replica
 *  identity.
 *
 *  Value: "UNSUPPORTED_TABLE_DEFINITION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedTableDefinition;
/**
 *  The versions of the source and the destination are incompatible.
 *
 *  Value: "VERSION_INCOMPATIBILITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_VersionIncompatibility;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_MultiEntityRename.sourceNameTransformation

/**
 *  Transform to capitalized case.
 *
 *  Value: "ENTITY_NAME_TRANSFORMATION_CAPITALIZED_CASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MultiEntityRename_SourceNameTransformation_EntityNameTransformationCapitalizedCase;
/**
 *  Transform to lower case.
 *
 *  Value: "ENTITY_NAME_TRANSFORMATION_LOWER_CASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MultiEntityRename_SourceNameTransformation_EntityNameTransformationLowerCase;
/**
 *  No transformation.
 *
 *  Value: "ENTITY_NAME_TRANSFORMATION_NO_TRANSFORMATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MultiEntityRename_SourceNameTransformation_EntityNameTransformationNoTransformation;
/**
 *  Entity name transformation unspecified.
 *
 *  Value: "ENTITY_NAME_TRANSFORMATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MultiEntityRename_SourceNameTransformation_EntityNameTransformationUnspecified;
/**
 *  Transform to upper case.
 *
 *  Value: "ENTITY_NAME_TRANSFORMATION_UPPER_CASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_MultiEntityRename_SourceNameTransformation_EntityNameTransformationUpperCase;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_PerformanceConfig.dumpParallelLevel

/**
 *  Unknown dump parallel level. Will be defaulted to OPTIMAL.
 *
 *  Value: "DUMP_PARALLEL_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PerformanceConfig_DumpParallelLevel_DumpParallelLevelUnspecified;
/**
 *  Maximum parallel level.
 *
 *  Value: "MAX"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PerformanceConfig_DumpParallelLevel_Max;
/**
 *  Minimal parallel level.
 *
 *  Value: "MIN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PerformanceConfig_DumpParallelLevel_Min;
/**
 *  Optimal parallel level.
 *
 *  Value: "OPTIMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PerformanceConfig_DumpParallelLevel_Optimal;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_PostgreSqlConnectionProfile.networkArchitecture

/**
 *  Instance is in Cloud SQL's new producer network architecture.
 *
 *  Value: "NETWORK_ARCHITECTURE_NEW_CSQL_PRODUCER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PostgreSqlConnectionProfile_NetworkArchitecture_NetworkArchitectureNewCsqlProducer;
/**
 *  Instance is in Cloud SQL's old producer network architecture.
 *
 *  Value: "NETWORK_ARCHITECTURE_OLD_CSQL_PRODUCER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PostgreSqlConnectionProfile_NetworkArchitecture_NetworkArchitectureOldCsqlProducer;
/** Value: "NETWORK_ARCHITECTURE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PostgreSqlConnectionProfile_NetworkArchitecture_NetworkArchitectureUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_PrivateConnection.state

/**
 *  The private connection has been created with all of its resources.
 *
 *  Value: "CREATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PrivateConnection_State_Created;
/**
 *  The private connection is in creation state - creating resources.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PrivateConnection_State_Creating;
/**
 *  The private connection has been deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PrivateConnection_State_Deleted;
/**
 *  The private connection is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PrivateConnection_State_Deleting;
/**
 *  The private connection creation has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PrivateConnection_State_Failed;
/**
 *  Delete request has failed, resource is in invalid state.
 *
 *  Value: "FAILED_TO_DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PrivateConnection_State_FailedToDelete;
/** Value: "STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_PrivateConnection_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_SourceNumericFilter.numericFilterOption

/**
 *  Numeric filter option that matches all numeric columns.
 *
 *  Value: "NUMERIC_FILTER_OPTION_ALL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SourceNumericFilter_NumericFilterOption_NumericFilterOptionAll;
/**
 *  Numeric filter option that matches columns having numeric datatypes with
 *  specified precision and scale within the limited range of filter.
 *
 *  Value: "NUMERIC_FILTER_OPTION_LIMIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SourceNumericFilter_NumericFilterOption_NumericFilterOptionLimit;
/**
 *  Numeric filter option that matches only the numeric columns with no
 *  precision and scale specified.
 *
 *  Value: "NUMERIC_FILTER_OPTION_LIMITLESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SourceNumericFilter_NumericFilterOption_NumericFilterOptionLimitless;
/**
 *  Numeric filter option unspecified
 *
 *  Value: "NUMERIC_FILTER_OPTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SourceNumericFilter_NumericFilterOption_NumericFilterOptionUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_SslConfig.type

/**
 *  Both server ('ca_certificate'), and client ('client_key',
 *  'client_certificate') specified.
 *
 *  Value: "SERVER_CLIENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SslConfig_Type_ServerClient;
/**
 *  Only 'ca_certificate' specified.
 *
 *  Value: "SERVER_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SslConfig_Type_ServerOnly;
/**
 *  Unspecified.
 *
 *  Value: "SSL_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SslConfig_Type_SslTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_SynonymEntity.sourceType

/**
 *  Column.
 *
 *  Value: "DATABASE_ENTITY_TYPE_COLUMN"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeColumn;
/**
 *  Constraint.
 *
 *  Value: "DATABASE_ENTITY_TYPE_CONSTRAINT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeConstraint;
/**
 *  Database.
 *
 *  Value: "DATABASE_ENTITY_TYPE_DATABASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeDatabase;
/**
 *  Package.
 *
 *  Value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeDatabasePackage;
/**
 *  Function.
 *
 *  Value: "DATABASE_ENTITY_TYPE_FUNCTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeFunction;
/**
 *  Index.
 *
 *  Value: "DATABASE_ENTITY_TYPE_INDEX"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeIndex;
/**
 *  Materialized View.
 *
 *  Value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeMaterializedView;
/**
 *  Schema.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SCHEMA"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeSchema;
/**
 *  Sequence.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SEQUENCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeSequence;
/**
 *  Stored Procedure.
 *
 *  Value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeStoredProcedure;
/**
 *  Synonym.
 *
 *  Value: "DATABASE_ENTITY_TYPE_SYNONYM"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeSynonym;
/**
 *  Table.
 *
 *  Value: "DATABASE_ENTITY_TYPE_TABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeTable;
/**
 *  Trigger.
 *
 *  Value: "DATABASE_ENTITY_TYPE_TRIGGER"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeTrigger;
/**
 *  UDT.
 *
 *  Value: "DATABASE_ENTITY_TYPE_UDT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeUdt;
/**
 *  Unspecified database entity type.
 *
 *  Value: "DATABASE_ENTITY_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeUnspecified;
/**
 *  View.
 *
 *  Value: "DATABASE_ENTITY_TYPE_VIEW"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeView;

// ----------------------------------------------------------------------------
// GTLRDatabaseMigrationService_ValueListFilter.valuePresentList

/**
 *  If the source value is in the supplied list at value_list
 *
 *  Value: "VALUE_PRESENT_IN_LIST_IF_VALUE_LIST"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ValueListFilter_ValuePresentList_ValuePresentInListIfValueList;
/**
 *  If the source value is not in the supplied list at value_list
 *
 *  Value: "VALUE_PRESENT_IN_LIST_IF_VALUE_NOT_LIST"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ValueListFilter_ValuePresentList_ValuePresentInListIfValueNotList;
/**
 *  Value present in list unspecified
 *
 *  Value: "VALUE_PRESENT_IN_LIST_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationService_ValueListFilter_ValuePresentList_ValuePresentInListUnspecified;

/**
 *  Specifies required connection parameters, and the parameters required to
 *  create an AlloyDB destination cluster.
 */
@interface GTLRDatabaseMigrationService_AlloyDbConnectionProfile : GTLRObject

/**
 *  Required. The AlloyDB cluster ID that this connection profile is associated
 *  with.
 */
@property(nonatomic, copy, nullable) NSString *clusterId;

/** Immutable. Metadata used to create the destination AlloyDB cluster. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_AlloyDbSettings *settings;

@end


/**
 *  Settings for creating an AlloyDB cluster.
 */
@interface GTLRDatabaseMigrationService_AlloyDbSettings : GTLRObject

/**
 *  Optional. The database engine major version. This is an optional field. If a
 *  database version is not supplied at cluster creation time, then a default
 *  database version will be used.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_AlloyDbSettings_DatabaseVersion_DatabaseVersionUnspecified
 *        This is an unknown database version. (Value:
 *        "DATABASE_VERSION_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_AlloyDbSettings_DatabaseVersion_Postgres14
 *        The database version is Postgres 14. (Value: "POSTGRES_14")
 *    @arg @c kGTLRDatabaseMigrationService_AlloyDbSettings_DatabaseVersion_Postgres15
 *        The database version is Postgres 15. (Value: "POSTGRES_15")
 *    @arg @c kGTLRDatabaseMigrationService_AlloyDbSettings_DatabaseVersion_Postgres16
 *        The database version is Postgres 16. (Value: "POSTGRES_16")
 */
@property(nonatomic, copy, nullable) NSString *databaseVersion;

/**
 *  Optional. The encryption config can be specified to encrypt the data disks
 *  and other persistent data resources of a cluster with a customer-managed
 *  encryption key (CMEK). When this field is not specified, the cluster will
 *  then use default encryption scheme to protect the user data.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_EncryptionConfig *encryptionConfig;

/**
 *  Required. Input only. Initial user to setup during cluster creation.
 *  Required.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_UserPassword *initialUser;

/**
 *  Labels for the AlloyDB cluster created by DMS. An object containing a list
 *  of 'key', 'value' pairs.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_AlloyDbSettings_Labels *labels;

@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_PrimaryInstanceSettings *primaryInstanceSettings;

/**
 *  Required. The resource link for the VPC network in which cluster resources
 *  are created and from which they are accessible via Private IP. The network
 *  must belong to the same project as the cluster. It is specified in the form:
 *  "projects/{project_number}/global/networks/{network_id}". This is required
 *  to create a cluster.
 */
@property(nonatomic, copy, nullable) NSString *vpcNetwork;

@end


/**
 *  Labels for the AlloyDB cluster created by DMS. An object containing a list
 *  of 'key', 'value' pairs.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_AlloyDbSettings_Labels : GTLRObject
@end


/**
 *  Request message for 'ApplyConversionWorkspace' request.
 */
@interface GTLRDatabaseMigrationService_ApplyConversionWorkspaceRequest : GTLRObject

/**
 *  Optional. Specifies whether the conversion workspace is to be committed
 *  automatically after the apply.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoCommit;

/**
 *  Optional. Fully qualified (Uri) name of the destination connection profile.
 */
@property(nonatomic, copy, nullable) NSString *connectionProfile;

/**
 *  Optional. Only validates the apply process, but doesn't change the
 *  destination database. Only works for PostgreSQL destination connection
 *  profile.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dryRun;

/**
 *  Filter which entities to apply. Leaving this field empty will apply all of
 *  the entities. Supports Google AIP 160 based filtering.
 */
@property(nonatomic, copy, nullable) NSString *filter;

@end


/**
 *  Apply a hash function on the value.
 */
@interface GTLRDatabaseMigrationService_ApplyHash : GTLRObject

/** Optional. Generate UUID from the data's byte array */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Empty *uuidFromBytes;

@end


/**
 *  Details regarding an Apply background job.
 */
@interface GTLRDatabaseMigrationService_ApplyJobDetails : GTLRObject

/** Output only. The connection profile which was used for the apply job. */
@property(nonatomic, copy, nullable) NSString *connectionProfile;

/** Output only. AIP-160 based filter used to specify the entities to apply */
@property(nonatomic, copy, nullable) NSString *filter;

@end


/**
 *  Set to a specific value (value is converted to fit the target data type)
 */
@interface GTLRDatabaseMigrationService_AssignSpecificValue : GTLRObject

/** Required. Specific value to be assigned */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRDatabaseMigrationService_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRDatabaseMigrationService_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_AuditLogConfig_LogType_AdminRead
 *        Admin reads. Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRDatabaseMigrationService_AuditLogConfig_LogType_DataRead Data
 *        reads. Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRDatabaseMigrationService_AuditLogConfig_LogType_DataWrite
 *        Data writes. Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRDatabaseMigrationService_AuditLogConfig_LogType_LogTypeUnspecified
 *        Default case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  AuthorizedNetwork contains metadata for an authorized network.
 */
@interface GTLRDatabaseMigrationService_AuthorizedNetwork : GTLRObject

/** Optional. CIDR range for one authorzied network of the instance. */
@property(nonatomic, copy, nullable) NSString *cidrRange;

@end


/**
 *  Execution log of a background job.
 */
@interface GTLRDatabaseMigrationService_BackgroundJobLogEntry : GTLRObject

/** Output only. Apply job details. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ApplyJobDetails *applyJobDetails;

/**
 *  Output only. Job completion comment, such as how many entities were seeded,
 *  how many warnings were found during conversion, and similar information.
 */
@property(nonatomic, copy, nullable) NSString *completionComment;

/**
 *  Output only. Job completion state, i.e. the final state after the job
 *  completed.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_BackgroundJobLogEntry_CompletionState_Failed
 *        Error. (Value: "FAILED")
 *    @arg @c kGTLRDatabaseMigrationService_BackgroundJobLogEntry_CompletionState_JobCompletionStateUnspecified
 *        The status is not specified. This state is used when job is not yet
 *        finished. (Value: "JOB_COMPLETION_STATE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_BackgroundJobLogEntry_CompletionState_Succeeded
 *        Success. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *completionState;

/** Output only. Convert job details. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ConvertJobDetails *convertJobDetails;

/** The timestamp when the background job was finished. */
@property(nonatomic, strong, nullable) GTLRDateTime *finishTime;

/**
 *  The background job log entry ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Output only. Import rules job details. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ImportRulesJobDetails *importRulesJobDetails;

/**
 *  The type of job that was executed.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_BackgroundJobLogEntry_JobType_BackgroundJobTypeApplyDestination
 *        Job to apply the draft tree onto the destination. (Value:
 *        "BACKGROUND_JOB_TYPE_APPLY_DESTINATION")
 *    @arg @c kGTLRDatabaseMigrationService_BackgroundJobLogEntry_JobType_BackgroundJobTypeConvert
 *        Job to convert the source database into a draft of the destination
 *        database. (Value: "BACKGROUND_JOB_TYPE_CONVERT")
 *    @arg @c kGTLRDatabaseMigrationService_BackgroundJobLogEntry_JobType_BackgroundJobTypeImportRulesFile
 *        Job to import and convert mapping rules from an external source such
 *        as an ora2pg config file. (Value:
 *        "BACKGROUND_JOB_TYPE_IMPORT_RULES_FILE")
 *    @arg @c kGTLRDatabaseMigrationService_BackgroundJobLogEntry_JobType_BackgroundJobTypeSourceSeed
 *        Job to seed from the source database. (Value:
 *        "BACKGROUND_JOB_TYPE_SOURCE_SEED")
 *    @arg @c kGTLRDatabaseMigrationService_BackgroundJobLogEntry_JobType_BackgroundJobTypeUnspecified
 *        Unspecified background job type. (Value:
 *        "BACKGROUND_JOB_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *jobType;

/**
 *  Output only. Whether the client requested the conversion workspace to be
 *  committed after a successful completion of the job.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestAutocommit;

/** Output only. Seed job details. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SeedJobDetails *seedJobDetails;

/** The timestamp when the background job was started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRDatabaseMigrationService_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `domain:{domain}`: The G Suite domain
 *  (primary) that represents all the users of that domain. For example,
 *  `google.com` or `example.com`. *
 *  `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workforce identity pool. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
 *  All workforce identities in a group. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All workforce identities with a specific attribute value. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/
 *  *`: All identities in a workforce identity pool. *
 *  `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workload identity pool. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
 *  A workload identity pool group. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All identities in a workload identity pool with a certain attribute. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/
 *  *`: All identities in a workload identity pool. *
 *  `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. *
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  Deleted single identity in a workforce identity pool. For example,
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM
 *  roles and permissions, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/roles-overview). For a list
 *  of the available pre-defined roles, see
 *  [here](https://cloud.google.com/iam/docs/understanding-roles).
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRDatabaseMigrationService_CancelOperationRequest : GTLRObject
@end


/**
 *  Specifies required connection parameters, and, optionally, the parameters
 *  required to create a Cloud SQL destination database instance.
 */
@interface GTLRDatabaseMigrationService_CloudSqlConnectionProfile : GTLRObject

/**
 *  Output only. The Cloud SQL database instance's additional (outgoing) public
 *  IP. Used when the Cloud SQL database availability type is REGIONAL (i.e.
 *  multiple zones / highly available).
 */
@property(nonatomic, copy, nullable) NSString *additionalPublicIp;

/**
 *  Output only. The Cloud SQL instance ID that this connection profile is
 *  associated with.
 */
@property(nonatomic, copy, nullable) NSString *cloudSqlId;

/** Output only. The Cloud SQL database instance's private IP. */
@property(nonatomic, copy, nullable) NSString *privateIp;

/** Output only. The Cloud SQL database instance's public IP. */
@property(nonatomic, copy, nullable) NSString *publicIp;

/** Immutable. Metadata used to create the destination Cloud SQL database. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_CloudSqlSettings *settings;

@end


/**
 *  Settings for creating a Cloud SQL database instance.
 */
@interface GTLRDatabaseMigrationService_CloudSqlSettings : GTLRObject

/**
 *  The activation policy specifies when the instance is activated; it is
 *  applicable only when the instance state is 'RUNNABLE'. Valid values:
 *  'ALWAYS': The instance is on, and remains so even in the absence of
 *  connection requests. `NEVER`: The instance is off; it is not activated, even
 *  if a connection request arrives.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_ActivationPolicy_Always
 *        The instance is always up and running. (Value: "ALWAYS")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_ActivationPolicy_Never
 *        The instance should never spin up. (Value: "NEVER")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_ActivationPolicy_SqlActivationPolicyUnspecified
 *        unspecified policy. (Value: "SQL_ACTIVATION_POLICY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *activationPolicy;

/**
 *  [default: ON] If you enable this setting, Cloud SQL checks your available
 *  storage every 30 seconds. If the available storage falls below a threshold
 *  size, Cloud SQL automatically adds additional storage capacity. If the
 *  available storage repeatedly falls below the threshold size, Cloud SQL
 *  continues to add storage until it reaches the maximum of 30 TB.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoStorageIncrease;

/**
 *  Optional. Availability type. Potential values: * `ZONAL`: The instance
 *  serves data from only one zone. Outages in that zone affect data
 *  availability. * `REGIONAL`: The instance can serve data from more than one
 *  zone in a region (it is highly available).
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_AvailabilityType_Regional
 *        Regional availability instance. (Value: "REGIONAL")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_AvailabilityType_SqlAvailabilityTypeUnspecified
 *        This is an unknown Availability type. (Value:
 *        "SQL_AVAILABILITY_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_AvailabilityType_Zonal
 *        Zonal availablility instance. (Value: "ZONAL")
 */
@property(nonatomic, copy, nullable) NSString *availabilityType;

/** The KMS key name used for the csql instance. */
@property(nonatomic, copy, nullable) NSString *cmekKeyName;

/** The Cloud SQL default instance level collation. */
@property(nonatomic, copy, nullable) NSString *collation;

/**
 *  The database flags passed to the Cloud SQL instance at startup. An object
 *  containing a list of "key": value pairs. Example: { "name": "wrench",
 *  "mass": "1.3kg", "count": "3" }.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_CloudSqlSettings_DatabaseFlags *databaseFlags;

/**
 *  The database engine type and version. Deprecated. Use database_version_name
 *  instead.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql56
 *        MySQL 5.6. (Value: "MYSQL_5_6")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql57
 *        MySQL 5.7. (Value: "MYSQL_5_7")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql80
 *        MySQL 8.0. (Value: "MYSQL_8_0")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8018
 *        The database major version is MySQL 8.0 and the minor version is 18.
 *        (Value: "MYSQL_8_0_18")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8026
 *        The database major version is MySQL 8.0 and the minor version is 26.
 *        (Value: "MYSQL_8_0_26")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8027
 *        The database major version is MySQL 8.0 and the minor version is 27.
 *        (Value: "MYSQL_8_0_27")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8028
 *        The database major version is MySQL 8.0 and the minor version is 28.
 *        (Value: "MYSQL_8_0_28")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8030
 *        The database major version is MySQL 8.0 and the minor version is 30.
 *        (Value: "MYSQL_8_0_30")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8031
 *        The database major version is MySQL 8.0 and the minor version is 31.
 *        (Value: "MYSQL_8_0_31")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8032
 *        The database major version is MySQL 8.0 and the minor version is 32.
 *        (Value: "MYSQL_8_0_32")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8033
 *        The database major version is MySQL 8.0 and the minor version is 33.
 *        (Value: "MYSQL_8_0_33")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8034
 *        The database major version is MySQL 8.0 and the minor version is 34.
 *        (Value: "MYSQL_8_0_34")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8035
 *        The database major version is MySQL 8.0 and the minor version is 35.
 *        (Value: "MYSQL_8_0_35")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8036
 *        The database major version is MySQL 8.0 and the minor version is 36.
 *        (Value: "MYSQL_8_0_36")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql8037
 *        The database major version is MySQL 8.0 and the minor version is 37.
 *        (Value: "MYSQL_8_0_37")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Mysql84
 *        MySQL 8.4. (Value: "MYSQL_8_4")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres10
 *        PostgreSQL 10. (Value: "POSTGRES_10")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres11
 *        PostgreSQL 11. (Value: "POSTGRES_11")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres12
 *        PostgreSQL 12. (Value: "POSTGRES_12")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres13
 *        PostgreSQL 13. (Value: "POSTGRES_13")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres14
 *        PostgreSQL 14. (Value: "POSTGRES_14")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres15
 *        PostgreSQL 15. (Value: "POSTGRES_15")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres16
 *        PostgreSQL 16. (Value: "POSTGRES_16")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_Postgres96
 *        PostgreSQL 9.6. (Value: "POSTGRES_9_6")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DatabaseVersion_SqlDatabaseVersionUnspecified
 *        Unspecified version. (Value: "SQL_DATABASE_VERSION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *databaseVersion;

/** Optional. The database engine type and version name. */
@property(nonatomic, copy, nullable) NSString *databaseVersionName;

/**
 *  Optional. Data cache is an optional feature available for Cloud SQL for
 *  MySQL Enterprise Plus edition only. For more information on data cache, see
 *  [Data cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in
 *  Cloud SQL documentation.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_DataCacheConfig *dataCacheConfig;

/**
 *  The storage capacity available to the database, in GB. The minimum (and
 *  default) size is 10GB.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dataDiskSizeGb;

/**
 *  The type of storage: `PD_SSD` (default) or `PD_HDD`.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DataDiskType_PdHdd
 *        HDD disk. (Value: "PD_HDD")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DataDiskType_PdSsd
 *        SSD disk. (Value: "PD_SSD")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_DataDiskType_SqlDataDiskTypeUnspecified
 *        Unspecified. (Value: "SQL_DATA_DISK_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *dataDiskType;

/**
 *  Optional. The edition of the given Cloud SQL instance.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_Edition_EditionUnspecified
 *        The instance did not specify the edition. (Value:
 *        "EDITION_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_Edition_Enterprise
 *        The instance is an enterprise edition. (Value: "ENTERPRISE")
 *    @arg @c kGTLRDatabaseMigrationService_CloudSqlSettings_Edition_EnterprisePlus
 *        The instance is an enterprise plus edition. (Value: "ENTERPRISE_PLUS")
 */
@property(nonatomic, copy, nullable) NSString *edition;

/**
 *  The settings for IP Management. This allows to enable or disable the
 *  instance IP and manage which external networks can connect to the instance.
 *  The IPv4 address cannot be disabled.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SqlIpConfig *ipConfig;

/** Input only. Initial root password. */
@property(nonatomic, copy, nullable) NSString *rootPassword;

/**
 *  Output only. Indicates If this connection profile root password is stored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rootPasswordSet;

/**
 *  Optional. The Google Cloud Platform zone where the failover Cloud SQL
 *  database instance is located. Used when the Cloud SQL database availability
 *  type is REGIONAL (i.e. multiple zones / highly available).
 */
@property(nonatomic, copy, nullable) NSString *secondaryZone;

/**
 *  The Database Migration Service source connection profile ID, in the format:
 *  `projects/my_project_name/locations/us-central1/connectionProfiles/connection_profile_ID`
 */
@property(nonatomic, copy, nullable) NSString *sourceId;

/**
 *  The maximum size to which storage capacity can be automatically increased.
 *  The default value is 0, which specifies that there is no limit.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *storageAutoResizeLimit;

/**
 *  The tier (or machine type) for this instance, for example:
 *  `db-n1-standard-1` (MySQL instances) or `db-custom-1-3840` (PostgreSQL
 *  instances). For more information, see [Cloud SQL Instance
 *  Settings](https://cloud.google.com/sql/docs/mysql/instance-settings).
 */
@property(nonatomic, copy, nullable) NSString *tier;

/**
 *  The resource labels for a Cloud SQL instance to use to annotate any related
 *  underlying resources such as Compute Engine VMs. An object containing a list
 *  of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "18kg",
 *  "count": "3" }`.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_CloudSqlSettings_UserLabels *userLabels;

/**
 *  The Google Cloud Platform zone where your Cloud SQL database instance is
 *  located.
 *
 *  Remapped to 'zoneProperty' to avoid NSObject's 'zone'.
 */
@property(nonatomic, copy, nullable) NSString *zoneProperty;

@end


/**
 *  The database flags passed to the Cloud SQL instance at startup. An object
 *  containing a list of "key": value pairs. Example: { "name": "wrench",
 *  "mass": "1.3kg", "count": "3" }.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_CloudSqlSettings_DatabaseFlags : GTLRObject
@end


/**
 *  The resource labels for a Cloud SQL instance to use to annotate any related
 *  underlying resources such as Compute Engine VMs. An object containing a list
 *  of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "18kg",
 *  "count": "3" }`.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_CloudSqlSettings_UserLabels : GTLRObject
@end


/**
 *  Column is not used as an independent entity, it is retrieved as part of a
 *  Table entity.
 */
@interface GTLRDatabaseMigrationService_ColumnEntity : GTLRObject

/**
 *  Is the column of array type.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *array;

/**
 *  If the column is array, of which length.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *arrayLength;

/**
 *  Is the column auto-generated/identity.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoGenerated;

/** Charset override - instead of table level charset. */
@property(nonatomic, copy, nullable) NSString *charset;

/** Collation override - instead of table level collation. */
@property(nonatomic, copy, nullable) NSString *collation;

/** Comment associated with the column. */
@property(nonatomic, copy, nullable) NSString *comment;

/** Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ColumnEntity_CustomFeatures *customFeatures;

/** Column data type. */
@property(nonatomic, copy, nullable) NSString *dataType;

/** Default value of the column. */
@property(nonatomic, copy, nullable) NSString *defaultValue;

/**
 *  Column fractional second precision - used for timestamp based datatypes.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fractionalSecondsPrecision;

/**
 *  Column length - e.g. varchar (50).
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/** Column name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Is the column nullable.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nullable;

/**
 *  Column order in the table.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ordinalPosition;

/**
 *  Column precision - when relevant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precision;

/**
 *  Column scale - when relevant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scale;

/**
 *  Specifies the list of values allowed in the column. Only used for set data
 *  type.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *setValues;

/**
 *  Is the column a UDT.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *udt;

@end


/**
 *  Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_ColumnEntity_CustomFeatures : GTLRObject
@end


/**
 *  Request message for 'CommitConversionWorkspace' request.
 */
@interface GTLRDatabaseMigrationService_CommitConversionWorkspaceRequest : GTLRObject

/** Optional. Optional name of the commit. */
@property(nonatomic, copy, nullable) NSString *commitName;

@end


/**
 *  Options to configure rule type ConditionalColumnSetValue. The rule is used
 *  to transform the data which is being replicated/migrated. The rule filter
 *  field can refer to one or more entities. The rule scope can be one of:
 *  Column.
 */
@interface GTLRDatabaseMigrationService_ConditionalColumnSetValue : GTLRObject

/** Optional. Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ConditionalColumnSetValue_CustomFeatures *customFeatures;

/**
 *  Optional. Optional filter on source column precision and scale. Used for
 *  fixed point numbers such as NUMERIC/NUMBER data types.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SourceNumericFilter *sourceNumericFilter;

/**
 *  Optional. Optional filter on source column length. Used for text based data
 *  types like varchar.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SourceTextFilter *sourceTextFilter;

/** Required. Description of data transformation during migration. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ValueTransformation *valueTransformation;

@end


/**
 *  Optional. Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_ConditionalColumnSetValue_CustomFeatures : GTLRObject
@end


/**
 *  A connection profile definition.
 */
@interface GTLRDatabaseMigrationService_ConnectionProfile : GTLRObject

/** An AlloyDB cluster connection profile. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_AlloyDbConnectionProfile *alloydb;

/** A CloudSQL database connection profile. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_CloudSqlConnectionProfile *cloudsql;

/**
 *  Output only. The timestamp when the resource was created. A timestamp in
 *  RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
 *  "2014-10-02T15:01:23.045123456Z".
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The connection profile display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Output only. The error details in case of state FAILED. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Status *error;

/**
 *  The resource labels for connection profile to use to annotate any related
 *  underlying resources such as Compute Engine VMs. An object containing a list
 *  of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg",
 *  "count": "3" }`.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ConnectionProfile_Labels *labels;

/** A MySQL database connection profile. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_MySqlConnectionProfile *mysql;

/**
 *  The name of this connection profile resource in the form of
 *  projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** An Oracle database connection profile. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_OracleConnectionProfile *oracle;

/** A PostgreSQL database connection profile. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_PostgreSqlConnectionProfile *postgresql;

/**
 *  The database provider.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_Provider_Alloydb
 *        AlloyDB for PostgreSQL is the source instance provider. (Value:
 *        "ALLOYDB")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_Provider_Aurora
 *        Amazon Aurora is the source instance provider. (Value: "AURORA")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_Provider_Cloudsql
 *        Cloud SQL is the source instance provider. (Value: "CLOUDSQL")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_Provider_DatabaseProviderUnspecified
 *        Use this value for on-premise source database instances and ORACLE.
 *        (Value: "DATABASE_PROVIDER_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_Provider_Rds
 *        Amazon RDS is the source instance provider. (Value: "RDS")
 */
@property(nonatomic, copy, nullable) NSString *provider;

/** Connection profile for a SQL Server data source. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SqlServerConnectionProfile *sqlserver;

/**
 *  The current connection profile state (e.g. DRAFT, READY, or FAILED).
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_State_Creating The
 *        connection profile is being created. (Value: "CREATING")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_State_Deleted The
 *        connection profile has been deleted. (Value: "DELETED")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_State_Deleting The
 *        connection profile is being deleted. (Value: "DELETING")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_State_Draft The
 *        connection profile is in draft mode and fully editable. (Value:
 *        "DRAFT")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_State_Failed The
 *        last action on the connection profile failed. (Value: "FAILED")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_State_Ready The
 *        connection profile is ready. (Value: "READY")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_State_StateUnspecified
 *        The state of the connection profile is unknown. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_ConnectionProfile_State_Updating The
 *        connection profile is being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. The timestamp when the resource was last updated. A timestamp
 *  in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
 *  "2014-10-02T15:01:23.045123456Z".
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  The resource labels for connection profile to use to annotate any related
 *  underlying resources such as Compute Engine VMs. An object containing a list
 *  of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg",
 *  "count": "3" }`.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_ConnectionProfile_Labels : GTLRObject
@end


/**
 *  Constraint is not used as an independent entity, it is retrieved as part of
 *  another entity such as Table or View.
 */
@interface GTLRDatabaseMigrationService_ConstraintEntity : GTLRObject

/** Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ConstraintEntity_CustomFeatures *customFeatures;

/** The name of the table constraint. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Reference columns which may be associated with the constraint. For example,
 *  if the constraint is a FOREIGN_KEY, this represents the list of full names
 *  of referenced columns by the foreign key.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *referenceColumns;

/**
 *  Reference table which may be associated with the constraint. For example, if
 *  the constraint is a FOREIGN_KEY, this represents the list of full name of
 *  the referenced table by the foreign key.
 */
@property(nonatomic, copy, nullable) NSString *referenceTable;

/**
 *  Table columns used as part of the Constraint, for example primary key
 *  constraint should list the columns which constitutes the key.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tableColumns;

/**
 *  Table which is associated with the constraint. In case the constraint is
 *  defined on a table, this field is left empty as this information is stored
 *  in parent_name. However, if constraint is defined on a view, this field
 *  stores the table name on which the view is defined.
 */
@property(nonatomic, copy, nullable) NSString *tableName;

/**
 *  Type of constraint, for example unique, primary key, foreign key (currently
 *  only primary key is supported).
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_ConstraintEntity_CustomFeatures : GTLRObject
@end


/**
 *  The main conversion workspace resource entity.
 */
@interface GTLRDatabaseMigrationService_ConversionWorkspace : GTLRObject

/** Output only. The timestamp when the workspace resource was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Required. The destination engine details. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_DatabaseEngineInfo *destination;

/** Optional. The display name for the workspace. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Optional. A generic list of settings for the workspace. The settings are
 *  database pair dependant and can indicate default behavior for the mapping
 *  rules engine or turn on or off specific features. Such examples can be:
 *  convert_foreign_key_to_interleave=true, skip_triggers=false,
 *  ignore_non_table_synonyms=true
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ConversionWorkspace_GlobalSettings *globalSettings;

/**
 *  Output only. Whether the workspace has uncommitted changes (changes which
 *  were made after the workspace was committed).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hasUncommittedChanges;

/** Output only. The latest commit ID. */
@property(nonatomic, copy, nullable) NSString *latestCommitId;

/** Output only. The timestamp when the workspace was committed. */
@property(nonatomic, strong, nullable) GTLRDateTime *latestCommitTime;

/**
 *  Full name of the workspace resource, in the form of:
 *  projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. The source engine details. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_DatabaseEngineInfo *source;

/**
 *  Output only. The timestamp when the workspace resource was last updated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. A generic list of settings for the workspace. The settings are
 *  database pair dependant and can indicate default behavior for the mapping
 *  rules engine or turn on or off specific features. Such examples can be:
 *  convert_foreign_key_to_interleave=true, skip_triggers=false,
 *  ignore_non_table_synonyms=true
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_ConversionWorkspace_GlobalSettings : GTLRObject
@end


/**
 *  A conversion workspace's version.
 */
@interface GTLRDatabaseMigrationService_ConversionWorkspaceInfo : GTLRObject

/** The commit ID of the conversion workspace. */
@property(nonatomic, copy, nullable) NSString *commitId;

/** The resource name (URI) of the conversion workspace. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Request message for 'ConvertConversionWorkspace' request.
 */
@interface GTLRDatabaseMigrationService_ConvertConversionWorkspaceRequest : GTLRObject

/**
 *  Optional. Specifies whether the conversion workspace is to be committed
 *  automatically after the conversion.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoCommit;

/**
 *  Optional. Automatically convert the full entity path for each entity
 *  specified by the filter. For example, if the filter specifies a table, that
 *  table schema (and database if there is one) will also be converted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *convertFullPath;

/**
 *  Optional. Filter the entities to convert. Leaving this field empty will
 *  convert all of the entities. Supports Google AIP-160 style filtering.
 */
@property(nonatomic, copy, nullable) NSString *filter;

@end


/**
 *  Details regarding a Convert background job.
 */
@interface GTLRDatabaseMigrationService_ConvertJobDetails : GTLRObject

/**
 *  Output only. AIP-160 based filter used to specify the entities to convert
 */
@property(nonatomic, copy, nullable) NSString *filter;

@end


/**
 *  Options to configure rule type ConvertROWIDToColumn. The rule is used to add
 *  column rowid to destination tables based on an Oracle rowid
 *  function/property. The rule filter field can refer to one or more entities.
 *  The rule scope can be one of: Table. This rule requires additional filter to
 *  be specified beyond the basic rule filter field, which is whether or not to
 *  work on tables which already have a primary key defined.
 */
@interface GTLRDatabaseMigrationService_ConvertRowIdToColumn : GTLRObject

/**
 *  Required. Only work on tables without primary key defined
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *onlyIfNoPrimaryKey;

@end


/**
 *  The type and version of a source or destination database.
 */
@interface GTLRDatabaseMigrationService_DatabaseEngineInfo : GTLRObject

/**
 *  Required. Engine type.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEngineInfo_Engine_DatabaseEngineUnspecified
 *        The source database engine of the migration job is unknown. (Value:
 *        "DATABASE_ENGINE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEngineInfo_Engine_Mysql The
 *        source engine is MySQL. (Value: "MYSQL")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEngineInfo_Engine_Oracle The
 *        source engine is Oracle. (Value: "ORACLE")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEngineInfo_Engine_Postgresql
 *        The source engine is PostgreSQL. (Value: "POSTGRESQL")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEngineInfo_Engine_Sqlserver
 *        The source engine is SQL Server. (Value: "SQLSERVER")
 */
@property(nonatomic, copy, nullable) NSString *engine;

/** Required. Engine version, for example "12.c.1". */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  The base entity type for all the database related entities. The message
 *  contains the entity name, the name of its parent, the entity type, and the
 *  specific details per entity type.
 */
@interface GTLRDatabaseMigrationService_DatabaseEntity : GTLRObject

/** Database. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_DatabaseInstanceEntity *database;

/** Function. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_FunctionEntity *databaseFunction;

/** Package. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_PackageEntity *databasePackage;

/**
 *  Details about the entity DDL script. Multiple DDL scripts are provided for
 *  child entities such as a table entity will have one DDL for the table with
 *  additional DDLs for each index, constraint and such.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_EntityDdl *> *entityDdl;

/**
 *  The type of the database entity (table, view, index, ...).
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeColumn
 *        Column. (Value: "DATABASE_ENTITY_TYPE_COLUMN")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeConstraint
 *        Constraint. (Value: "DATABASE_ENTITY_TYPE_CONSTRAINT")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeDatabase
 *        Database. (Value: "DATABASE_ENTITY_TYPE_DATABASE")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeDatabasePackage
 *        Package. (Value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeFunction
 *        Function. (Value: "DATABASE_ENTITY_TYPE_FUNCTION")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeIndex
 *        Index. (Value: "DATABASE_ENTITY_TYPE_INDEX")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeMaterializedView
 *        Materialized View. (Value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeSchema
 *        Schema. (Value: "DATABASE_ENTITY_TYPE_SCHEMA")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeSequence
 *        Sequence. (Value: "DATABASE_ENTITY_TYPE_SEQUENCE")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeStoredProcedure
 *        Stored Procedure. (Value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeSynonym
 *        Synonym. (Value: "DATABASE_ENTITY_TYPE_SYNONYM")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeTable
 *        Table. (Value: "DATABASE_ENTITY_TYPE_TABLE")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeTrigger
 *        Trigger. (Value: "DATABASE_ENTITY_TYPE_TRIGGER")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeUdt
 *        UDT. (Value: "DATABASE_ENTITY_TYPE_UDT")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeUnspecified
 *        Unspecified database entity type. (Value:
 *        "DATABASE_ENTITY_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_EntityType_DatabaseEntityTypeView
 *        View. (Value: "DATABASE_ENTITY_TYPE_VIEW")
 */
@property(nonatomic, copy, nullable) NSString *entityType;

/** Details about the various issues found for the entity. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_EntityIssue *> *issues;

/**
 *  Details about entity mappings. For source tree entities, this holds the
 *  draft entities which were generated by the mapping rules. For draft tree
 *  entities, this holds the source entities which were converted to form the
 *  draft entity. Destination entities will have no mapping details.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_EntityMapping *> *mappings;

/** Materialized view. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_MaterializedViewEntity *materializedView;

/** The full name of the parent entity (e.g. schema name). */
@property(nonatomic, copy, nullable) NSString *parentEntity;

/** Schema. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SchemaEntity *schema;

/** Sequence. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SequenceEntity *sequence;

/** The short name (e.g. table name) of the entity. */
@property(nonatomic, copy, nullable) NSString *shortName;

/** Stored procedure. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_StoredProcedureEntity *storedProcedure;

/** Synonym. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SynonymEntity *synonym;

/** Table. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_TableEntity *table;

/**
 *  The type of tree the entity belongs to.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_Tree_Destination Tree
 *        of entities observed on the destination database. (Value:
 *        "DESTINATION")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_Tree_Draft Tree of
 *        entities converted from the source tree using the mapping rules.
 *        (Value: "DRAFT")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_Tree_Source Tree of
 *        entities loaded from a source database. (Value: "SOURCE")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseEntity_Tree_TreeTypeUnspecified
 *        Tree type unspecified. (Value: "TREE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *tree;

/** UDT. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_UDTEntity *udt;

/** View. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ViewEntity *view;

@end


/**
 *  DatabaseInstance acts as a parent entity to other database entities.
 */
@interface GTLRDatabaseMigrationService_DatabaseInstanceEntity : GTLRObject

/** Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_DatabaseInstanceEntity_CustomFeatures *customFeatures;

@end


/**
 *  Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_DatabaseInstanceEntity_CustomFeatures : GTLRObject
@end


/**
 *  A message defining the database engine and provider.
 */
@interface GTLRDatabaseMigrationService_DatabaseType : GTLRObject

/**
 *  The database engine.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Engine_DatabaseEngineUnspecified
 *        The source database engine of the migration job is unknown. (Value:
 *        "DATABASE_ENGINE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Engine_Mysql The source
 *        engine is MySQL. (Value: "MYSQL")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Engine_Oracle The
 *        source engine is Oracle. (Value: "ORACLE")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Engine_Postgresql The
 *        source engine is PostgreSQL. (Value: "POSTGRESQL")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Engine_Sqlserver The
 *        source engine is SQL Server. (Value: "SQLSERVER")
 */
@property(nonatomic, copy, nullable) NSString *engine;

/**
 *  The database provider.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Provider_Alloydb
 *        AlloyDB for PostgreSQL is the source instance provider. (Value:
 *        "ALLOYDB")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Provider_Aurora Amazon
 *        Aurora is the source instance provider. (Value: "AURORA")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Provider_Cloudsql Cloud
 *        SQL is the source instance provider. (Value: "CLOUDSQL")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Provider_DatabaseProviderUnspecified
 *        Use this value for on-premise source database instances and ORACLE.
 *        (Value: "DATABASE_PROVIDER_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_DatabaseType_Provider_Rds Amazon RDS
 *        is the source instance provider. (Value: "RDS")
 */
@property(nonatomic, copy, nullable) NSString *provider;

@end


/**
 *  Data cache is an optional feature available for Cloud SQL for MySQL
 *  Enterprise Plus edition only. For more information on data cache, see [Data
 *  cache overview](https://cloud.google.com/sql/help/mysql-data-cache) in Cloud
 *  SQL documentation.
 */
@interface GTLRDatabaseMigrationService_DataCacheConfig : GTLRObject

/**
 *  Optional. Whether data cache is enabled for the instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dataCacheEnabled;

@end


/**
 *  Request message for 'DemoteDestination' request.
 */
@interface GTLRDatabaseMigrationService_DemoteDestinationRequest : GTLRObject
@end


/**
 *  Response message for 'DescribeConversionWorkspaceRevisions' request.
 */
@interface GTLRDatabaseMigrationService_DescribeConversionWorkspaceRevisionsResponse : GTLRObject

/** The list of conversion workspace revisions. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_ConversionWorkspace *> *revisions;

@end


/**
 *  Response message for 'DescribeDatabaseEntities' request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "databaseEntities" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRDatabaseMigrationService_DescribeDatabaseEntitiesResponse : GTLRCollectionObject

/**
 *  The list of database entities for the conversion workspace.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_DatabaseEntity *> *databaseEntities;

/**
 *  A token which can be sent as `page_token` to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Filter based on relation between source value and compare value of type
 *  double in ConditionalColumnSetValue
 */
@interface GTLRDatabaseMigrationService_DoubleComparisonFilter : GTLRObject

/**
 *  Required. Double compare value to be used
 *
 *  Uses NSNumber of doubleValue.
 */
@property(nonatomic, strong, nullable) NSNumber *value;

/**
 *  Required. Relation between source value and compare value
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_DoubleComparisonFilter_ValueComparison_ValueComparisonIfValueLargerEqualThan
 *        Value is larger or equal than the Compare value. (Value:
 *        "VALUE_COMPARISON_IF_VALUE_LARGER_EQUAL_THAN")
 *    @arg @c kGTLRDatabaseMigrationService_DoubleComparisonFilter_ValueComparison_ValueComparisonIfValueLargerThan
 *        Value is larger than the Compare value. (Value:
 *        "VALUE_COMPARISON_IF_VALUE_LARGER_THAN")
 *    @arg @c kGTLRDatabaseMigrationService_DoubleComparisonFilter_ValueComparison_ValueComparisonIfValueSmallerEqualThan
 *        Value is smaller or equal than the Compare value. (Value:
 *        "VALUE_COMPARISON_IF_VALUE_SMALLER_EQUAL_THAN")
 *    @arg @c kGTLRDatabaseMigrationService_DoubleComparisonFilter_ValueComparison_ValueComparisonIfValueSmallerThan
 *        Value is smaller than the Compare value. (Value:
 *        "VALUE_COMPARISON_IF_VALUE_SMALLER_THAN")
 *    @arg @c kGTLRDatabaseMigrationService_DoubleComparisonFilter_ValueComparison_ValueComparisonUnspecified
 *        Value comparison unspecified. (Value: "VALUE_COMPARISON_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *valueComparison;

@end


/**
 *  Dump flag definition.
 */
@interface GTLRDatabaseMigrationService_DumpFlag : GTLRObject

/** The name of the flag */
@property(nonatomic, copy, nullable) NSString *name;

/** The value of the flag. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Dump flags definition.
 */
@interface GTLRDatabaseMigrationService_DumpFlags : GTLRObject

/** The flags for the initial dump. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_DumpFlag *> *dumpFlags;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRDatabaseMigrationService_Empty : GTLRObject
@end


/**
 *  EncryptionConfig describes the encryption config of a cluster that is
 *  encrypted with a CMEK (customer-managed encryption key).
 */
@interface GTLRDatabaseMigrationService_EncryptionConfig : GTLRObject

/**
 *  The fully-qualified resource name of the KMS key. Each Cloud KMS key is
 *  regionalized and has the following format:
 *  projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

@end


/**
 *  A single DDL statement for a specific entity
 */
@interface GTLRDatabaseMigrationService_EntityDdl : GTLRObject

/** The actual ddl code. */
@property(nonatomic, copy, nullable) NSString *ddl;

/** Type of DDL (Create, Alter). */
@property(nonatomic, copy, nullable) NSString *ddlType;

/** The name of the database entity the ddl refers to. */
@property(nonatomic, copy, nullable) NSString *entity;

/**
 *  The entity type (if the DDL is for a sub entity).
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeColumn
 *        Column. (Value: "DATABASE_ENTITY_TYPE_COLUMN")
 *    @arg @c kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeConstraint
 *        Constraint. (Value: "DATABASE_ENTITY_TYPE_CONSTRAINT")
 *    @arg @c kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeDatabase
 *        Database. (Value: "DATABASE_ENTITY_TYPE_DATABASE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeDatabasePackage
 *        Package. (Value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeFunction
 *        Function. (Value: "DATABASE_ENTITY_TYPE_FUNCTION")
 *    @arg @c kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeIndex
 *        Index. (Value: "DATABASE_ENTITY_TYPE_INDEX")
 *    @arg @c kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeMaterializedView
 *        Materialized View. (Value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW")
 *    @arg @c kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeSchema
 *        Schema. (Value: "DATABASE_ENTITY_TYPE_SCHEMA")
 *    @arg @c kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeSequence
 *        Sequence. (Value: "DATABASE_ENTITY_TYPE_SEQUENCE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeStoredProcedure
 *        Stored Procedure. (Value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeSynonym
 *        Synonym. (Value: "DATABASE_ENTITY_TYPE_SYNONYM")
 *    @arg @c kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeTable
 *        Table. (Value: "DATABASE_ENTITY_TYPE_TABLE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeTrigger
 *        Trigger. (Value: "DATABASE_ENTITY_TYPE_TRIGGER")
 *    @arg @c kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeUdt
 *        UDT. (Value: "DATABASE_ENTITY_TYPE_UDT")
 *    @arg @c kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeUnspecified
 *        Unspecified database entity type. (Value:
 *        "DATABASE_ENTITY_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_EntityDdl_EntityType_DatabaseEntityTypeView
 *        View. (Value: "DATABASE_ENTITY_TYPE_VIEW")
 */
@property(nonatomic, copy, nullable) NSString *entityType;

/** EntityIssues found for this ddl. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *issueId;

@end


/**
 *  Issue related to the entity.
 */
@interface GTLRDatabaseMigrationService_EntityIssue : GTLRObject

/** Error/Warning code */
@property(nonatomic, copy, nullable) NSString *code;

/** The ddl which caused the issue, if relevant. */
@property(nonatomic, copy, nullable) NSString *ddl;

/**
 *  The entity type (if the DDL is for a sub entity).
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeColumn
 *        Column. (Value: "DATABASE_ENTITY_TYPE_COLUMN")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeConstraint
 *        Constraint. (Value: "DATABASE_ENTITY_TYPE_CONSTRAINT")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeDatabase
 *        Database. (Value: "DATABASE_ENTITY_TYPE_DATABASE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeDatabasePackage
 *        Package. (Value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeFunction
 *        Function. (Value: "DATABASE_ENTITY_TYPE_FUNCTION")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeIndex
 *        Index. (Value: "DATABASE_ENTITY_TYPE_INDEX")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeMaterializedView
 *        Materialized View. (Value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeSchema
 *        Schema. (Value: "DATABASE_ENTITY_TYPE_SCHEMA")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeSequence
 *        Sequence. (Value: "DATABASE_ENTITY_TYPE_SEQUENCE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeStoredProcedure
 *        Stored Procedure. (Value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeSynonym
 *        Synonym. (Value: "DATABASE_ENTITY_TYPE_SYNONYM")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeTable
 *        Table. (Value: "DATABASE_ENTITY_TYPE_TABLE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeTrigger
 *        Trigger. (Value: "DATABASE_ENTITY_TYPE_TRIGGER")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeUdt
 *        UDT. (Value: "DATABASE_ENTITY_TYPE_UDT")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeUnspecified
 *        Unspecified database entity type. (Value:
 *        "DATABASE_ENTITY_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_EntityType_DatabaseEntityTypeView
 *        View. (Value: "DATABASE_ENTITY_TYPE_VIEW")
 */
@property(nonatomic, copy, nullable) NSString *entityType;

/**
 *  Unique Issue ID.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Issue detailed message */
@property(nonatomic, copy, nullable) NSString *message;

/** The position of the issue found, if relevant. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Position *position;

/**
 *  Severity of the issue
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_Severity_IssueSeverityError
 *        Error (Value: "ISSUE_SEVERITY_ERROR")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_Severity_IssueSeverityInfo
 *        Info (Value: "ISSUE_SEVERITY_INFO")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_Severity_IssueSeverityUnspecified
 *        Unspecified issue severity (Value: "ISSUE_SEVERITY_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_Severity_IssueSeverityWarning
 *        Warning (Value: "ISSUE_SEVERITY_WARNING")
 */
@property(nonatomic, copy, nullable) NSString *severity;

/**
 *  The type of the issue.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_Type_IssueTypeApply
 *        Issue originated during the apply process (Value: "ISSUE_TYPE_APPLY")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_Type_IssueTypeConvert
 *        Issue originated during the convert process (Value:
 *        "ISSUE_TYPE_CONVERT")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_Type_IssueTypeDdl Issue
 *        originated from the DDL (Value: "ISSUE_TYPE_DDL")
 *    @arg @c kGTLRDatabaseMigrationService_EntityIssue_Type_IssueTypeUnspecified
 *        Unspecified issue type. (Value: "ISSUE_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Details of the mappings of a database entity.
 */
@interface GTLRDatabaseMigrationService_EntityMapping : GTLRObject

/**
 *  Target entity full name. The draft entity can also include a column, index
 *  or constraint using the same naming notation schema.table.column.
 */
@property(nonatomic, copy, nullable) NSString *draftEntity;

/**
 *  Type of draft entity.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeColumn
 *        Column. (Value: "DATABASE_ENTITY_TYPE_COLUMN")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeConstraint
 *        Constraint. (Value: "DATABASE_ENTITY_TYPE_CONSTRAINT")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeDatabase
 *        Database. (Value: "DATABASE_ENTITY_TYPE_DATABASE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeDatabasePackage
 *        Package. (Value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeFunction
 *        Function. (Value: "DATABASE_ENTITY_TYPE_FUNCTION")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeIndex
 *        Index. (Value: "DATABASE_ENTITY_TYPE_INDEX")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeMaterializedView
 *        Materialized View. (Value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeSchema
 *        Schema. (Value: "DATABASE_ENTITY_TYPE_SCHEMA")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeSequence
 *        Sequence. (Value: "DATABASE_ENTITY_TYPE_SEQUENCE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeStoredProcedure
 *        Stored Procedure. (Value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeSynonym
 *        Synonym. (Value: "DATABASE_ENTITY_TYPE_SYNONYM")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeTable
 *        Table. (Value: "DATABASE_ENTITY_TYPE_TABLE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeTrigger
 *        Trigger. (Value: "DATABASE_ENTITY_TYPE_TRIGGER")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeUdt
 *        UDT. (Value: "DATABASE_ENTITY_TYPE_UDT")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeUnspecified
 *        Unspecified database entity type. (Value:
 *        "DATABASE_ENTITY_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_DraftType_DatabaseEntityTypeView
 *        View. (Value: "DATABASE_ENTITY_TYPE_VIEW")
 */
@property(nonatomic, copy, nullable) NSString *draftType;

/**
 *  Entity mapping log entries. Multiple rules can be effective and contribute
 *  changes to a converted entity, such as a rule can handle the entity name,
 *  another rule can handle an entity type. In addition, rules which did not
 *  change the entity are also logged along with the reason preventing them to
 *  do so.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_EntityMappingLogEntry *> *mappingLog;

/**
 *  Source entity full name. The source entity can also be a column, index or
 *  constraint using the same naming notation schema.table.column.
 */
@property(nonatomic, copy, nullable) NSString *sourceEntity;

/**
 *  Type of source entity.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeColumn
 *        Column. (Value: "DATABASE_ENTITY_TYPE_COLUMN")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeConstraint
 *        Constraint. (Value: "DATABASE_ENTITY_TYPE_CONSTRAINT")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeDatabase
 *        Database. (Value: "DATABASE_ENTITY_TYPE_DATABASE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeDatabasePackage
 *        Package. (Value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeFunction
 *        Function. (Value: "DATABASE_ENTITY_TYPE_FUNCTION")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeIndex
 *        Index. (Value: "DATABASE_ENTITY_TYPE_INDEX")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeMaterializedView
 *        Materialized View. (Value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeSchema
 *        Schema. (Value: "DATABASE_ENTITY_TYPE_SCHEMA")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeSequence
 *        Sequence. (Value: "DATABASE_ENTITY_TYPE_SEQUENCE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeStoredProcedure
 *        Stored Procedure. (Value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeSynonym
 *        Synonym. (Value: "DATABASE_ENTITY_TYPE_SYNONYM")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeTable
 *        Table. (Value: "DATABASE_ENTITY_TYPE_TABLE")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeTrigger
 *        Trigger. (Value: "DATABASE_ENTITY_TYPE_TRIGGER")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeUdt
 *        UDT. (Value: "DATABASE_ENTITY_TYPE_UDT")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeUnspecified
 *        Unspecified database entity type. (Value:
 *        "DATABASE_ENTITY_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_EntityMapping_SourceType_DatabaseEntityTypeView
 *        View. (Value: "DATABASE_ENTITY_TYPE_VIEW")
 */
@property(nonatomic, copy, nullable) NSString *sourceType;

@end


/**
 *  A single record of a rule which was used for a mapping.
 */
@interface GTLRDatabaseMigrationService_EntityMappingLogEntry : GTLRObject

/** Comment. */
@property(nonatomic, copy, nullable) NSString *mappingComment;

/** Which rule caused this log entry. */
@property(nonatomic, copy, nullable) NSString *ruleId;

/** Rule revision ID. */
@property(nonatomic, copy, nullable) NSString *ruleRevisionId;

@end


/**
 *  Options to configure rule type EntityMove. The rule is used to move an
 *  entity to a new schema. The rule filter field can refer to one or more
 *  entities. The rule scope can be one of: Table, Column, Constraint, Index,
 *  View, Function, Stored Procedure, Materialized View, Sequence, UDT
 */
@interface GTLRDatabaseMigrationService_EntityMove : GTLRObject

/** Required. The new schema */
@property(nonatomic, copy, nullable) NSString *newSchema NS_RETURNS_NOT_RETAINED;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRDatabaseMigrationService_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Response message for a 'FetchStaticIps' request.
 */
@interface GTLRDatabaseMigrationService_FetchStaticIpsResponse : GTLRObject

/**
 *  A token that can be sent as `page_token` to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** List of static IPs. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *staticIps;

@end


/**
 *  Options to configure rule type FilterTableColumns. The rule is used to
 *  filter the list of columns to include or exclude from a table. The rule
 *  filter field can refer to one entity. The rule scope can be: Table Only one
 *  of the two lists can be specified for the rule.
 */
@interface GTLRDatabaseMigrationService_FilterTableColumns : GTLRObject

/** Optional. List of columns to be excluded for a particular table. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *excludeColumns;

/** Optional. List of columns to be included for a particular table. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *includeColumns;

@end


/**
 *  Forward SSH Tunnel connectivity.
 */
@interface GTLRDatabaseMigrationService_ForwardSshTunnelConnectivity : GTLRObject

/** Required. Hostname for the SSH tunnel. */
@property(nonatomic, copy, nullable) NSString *hostname;

/** Input only. SSH password. */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  Port for the SSH tunnel, default value is 22.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/** Input only. SSH private key. */
@property(nonatomic, copy, nullable) NSString *privateKey;

/** Required. Username for the SSH tunnel. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  Function's parent is a schema.
 */
@interface GTLRDatabaseMigrationService_FunctionEntity : GTLRObject

/** Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_FunctionEntity_CustomFeatures *customFeatures;

/** The SQL code which creates the function. */
@property(nonatomic, copy, nullable) NSString *sqlCode;

@end


/**
 *  Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_FunctionEntity_CustomFeatures : GTLRObject
@end


/**
 *  Request message for 'GenerateSshScript' request.
 */
@interface GTLRDatabaseMigrationService_GenerateSshScriptRequest : GTLRObject

/** Required. Bastion VM Instance name to use or to create. */
@property(nonatomic, copy, nullable) NSString *vm;

/** The VM creation configuration */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_VmCreationConfig *vmCreationConfig;

/**
 *  The port that will be open on the bastion host.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *vmPort;

/** The VM selection configuration */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_VmSelectionConfig *vmSelectionConfig;

@end


/**
 *  Request message for 'GenerateTcpProxyScript' request.
 */
@interface GTLRDatabaseMigrationService_GenerateTcpProxyScriptRequest : GTLRObject

/** Required. The type of the Compute instance that will host the proxy. */
@property(nonatomic, copy, nullable) NSString *vmMachineType;

/** Required. The name of the Compute instance that will host the proxy. */
@property(nonatomic, copy, nullable) NSString *vmName;

/**
 *  Required. The name of the subnet the Compute instance will use for private
 *  connectivity. Must be supplied in the form of
 *  projects/{project}/regions/{region}/subnetworks/{subnetwork}. Note: the
 *  region for the subnet must match the Compute instance region.
 */
@property(nonatomic, copy, nullable) NSString *vmSubnet;

/**
 *  Optional. The Google Cloud Platform zone to create the VM in. The fully
 *  qualified name of the zone must be specified, including the region name, for
 *  example "us-central1-b". If not specified, uses the "-b" zone of the
 *  destination Connection Profile's region.
 */
@property(nonatomic, copy, nullable) NSString *vmZone;

@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRDatabaseMigrationService_GoogleCloudClouddmsV1OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Request message for 'ImportMappingRules' request.
 */
@interface GTLRDatabaseMigrationService_ImportMappingRulesRequest : GTLRObject

/**
 *  Required. Should the conversion workspace be committed automatically after
 *  the import operation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoCommit;

/** Required. One or more rules files. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_RulesFile *> *rulesFiles;

/**
 *  Required. The format of the rules content file.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_ImportMappingRulesRequest_RulesFormat_ImportRulesFileFormatHarbourBridgeSessionFile
 *        HarbourBridge session file. (Value:
 *        "IMPORT_RULES_FILE_FORMAT_HARBOUR_BRIDGE_SESSION_FILE")
 *    @arg @c kGTLRDatabaseMigrationService_ImportMappingRulesRequest_RulesFormat_ImportRulesFileFormatOratopgConfigFile
 *        Ora2Pg configuration file. (Value:
 *        "IMPORT_RULES_FILE_FORMAT_ORATOPG_CONFIG_FILE")
 *    @arg @c kGTLRDatabaseMigrationService_ImportMappingRulesRequest_RulesFormat_ImportRulesFileFormatUnspecified
 *        Unspecified rules format. (Value:
 *        "IMPORT_RULES_FILE_FORMAT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *rulesFormat;

@end


/**
 *  Details regarding an Import Rules background job.
 */
@interface GTLRDatabaseMigrationService_ImportRulesJobDetails : GTLRObject

/**
 *  Output only. The requested file format.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_ImportRulesJobDetails_FileFormat_ImportRulesFileFormatHarbourBridgeSessionFile
 *        HarbourBridge session file. (Value:
 *        "IMPORT_RULES_FILE_FORMAT_HARBOUR_BRIDGE_SESSION_FILE")
 *    @arg @c kGTLRDatabaseMigrationService_ImportRulesJobDetails_FileFormat_ImportRulesFileFormatOratopgConfigFile
 *        Ora2Pg configuration file. (Value:
 *        "IMPORT_RULES_FILE_FORMAT_ORATOPG_CONFIG_FILE")
 *    @arg @c kGTLRDatabaseMigrationService_ImportRulesJobDetails_FileFormat_ImportRulesFileFormatUnspecified
 *        Unspecified rules format. (Value:
 *        "IMPORT_RULES_FILE_FORMAT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *fileFormat;

/** Output only. File names used for the import rules job. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *files;

@end


/**
 *  Index is not used as an independent entity, it is retrieved as part of a
 *  Table entity.
 */
@interface GTLRDatabaseMigrationService_IndexEntity : GTLRObject

/** Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_IndexEntity_CustomFeatures *customFeatures;

/** The name of the index. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Table columns used as part of the Index, for example B-TREE index should
 *  list the columns which constitutes the index.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tableColumns;

/**
 *  For each table_column, mark whether it's sorting order is ascending (false)
 *  or descending (true). If no value is defined, assume all columns are sorted
 *  in ascending order. Otherwise, the number of items must match that of
 *  table_columns with each value specifying the direction of the matched column
 *  by its index.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *tableColumnsDescending;

/** Type of index, for example B-TREE. */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Boolean value indicating whether the index is unique.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *unique;

@end


/**
 *  Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_IndexEntity_CustomFeatures : GTLRObject
@end


/**
 *  Metadata related to instance level network configuration.
 */
@interface GTLRDatabaseMigrationService_InstanceNetworkConfig : GTLRObject

/**
 *  Optional. A list of external network authorized to access this instance.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_AuthorizedNetwork *> *authorizedExternalNetworks;

/**
 *  Optional. Enabling an outbound public IP address to support a database
 *  server sending requests out into the internet.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableOutboundPublicIp;

/**
 *  Optional. Enabling public ip for the instance.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enablePublicIp;

@end


/**
 *  Filter based on relation between source value and compare value of type
 *  integer in ConditionalColumnSetValue
 */
@interface GTLRDatabaseMigrationService_IntComparisonFilter : GTLRObject

/**
 *  Required. Integer compare value to be used
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *value;

/**
 *  Required. Relation between source value and compare value
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_IntComparisonFilter_ValueComparison_ValueComparisonIfValueLargerEqualThan
 *        Value is larger or equal than the Compare value. (Value:
 *        "VALUE_COMPARISON_IF_VALUE_LARGER_EQUAL_THAN")
 *    @arg @c kGTLRDatabaseMigrationService_IntComparisonFilter_ValueComparison_ValueComparisonIfValueLargerThan
 *        Value is larger than the Compare value. (Value:
 *        "VALUE_COMPARISON_IF_VALUE_LARGER_THAN")
 *    @arg @c kGTLRDatabaseMigrationService_IntComparisonFilter_ValueComparison_ValueComparisonIfValueSmallerEqualThan
 *        Value is smaller or equal than the Compare value. (Value:
 *        "VALUE_COMPARISON_IF_VALUE_SMALLER_EQUAL_THAN")
 *    @arg @c kGTLRDatabaseMigrationService_IntComparisonFilter_ValueComparison_ValueComparisonIfValueSmallerThan
 *        Value is smaller than the Compare value. (Value:
 *        "VALUE_COMPARISON_IF_VALUE_SMALLER_THAN")
 *    @arg @c kGTLRDatabaseMigrationService_IntComparisonFilter_ValueComparison_ValueComparisonUnspecified
 *        Value comparison unspecified. (Value: "VALUE_COMPARISON_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *valueComparison;

@end


/**
 *  Response message for 'ListConnectionProfiles' request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "connectionProfiles" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRDatabaseMigrationService_ListConnectionProfilesResponse : GTLRCollectionObject

/**
 *  The response list of connection profiles.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_ConnectionProfile *> *connectionProfiles;

/**
 *  A token which can be sent as `page_token` to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response message for 'ListConversionWorkspaces' request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "conversionWorkspaces" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRDatabaseMigrationService_ListConversionWorkspacesResponse : GTLRCollectionObject

/**
 *  The list of conversion workspace objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_ConversionWorkspace *> *conversionWorkspaces;

/**
 *  A token which can be sent as `page_token` to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDatabaseMigrationService_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for 'ListMappingRulesRequest' request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "mappingRules" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDatabaseMigrationService_ListMappingRulesResponse : GTLRCollectionObject

/**
 *  The list of conversion workspace mapping rules.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_MappingRule *> *mappingRules;

/**
 *  A token which can be sent as `page_token` to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Response message for 'ListMigrationJobs' request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "migrationJobs" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDatabaseMigrationService_ListMigrationJobsResponse : GTLRCollectionObject

/**
 *  The list of migration jobs objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_MigrationJob *> *migrationJobs;

/**
 *  A token which can be sent as `page_token` to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDatabaseMigrationService_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_Operation *> *operations;

@end


/**
 *  Response message for 'ListPrivateConnections' request.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "privateConnections" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRDatabaseMigrationService_ListPrivateConnectionsResponse : GTLRCollectionObject

/**
 *  A token which can be sent as `page_token` to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of private connections.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_PrivateConnection *> *privateConnections;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  A resource that represents a Google Cloud location.
 */
@interface GTLRDatabaseMigrationService_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_Location_Metadata : GTLRObject
@end


/**
 *  MachineConfig describes the configuration of a machine.
 */
@interface GTLRDatabaseMigrationService_MachineConfig : GTLRObject

/**
 *  The number of CPU's in the VM instance.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cpuCount;

@end


/**
 *  Definition of a transformation that is to be applied to a group of entities
 *  in the source schema. Several such transformations can be applied to an
 *  entity sequentially to define the corresponding entity in the target schema.
 */
@interface GTLRDatabaseMigrationService_MappingRule : GTLRObject

/**
 *  Optional. Rule to specify how the data contained in a column should be
 *  transformed (such as trimmed, rounded, etc) provided that the data meets
 *  certain criteria.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ConditionalColumnSetValue *conditionalColumnSetValue;

/**
 *  Optional. Rule to specify how multiple tables should be converted with an
 *  additional rowid column.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ConvertRowIdToColumn *convertRowidColumn;

/** Optional. A human readable name */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Optional. Rule to specify how multiple entities should be relocated into a
 *  different schema.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_EntityMove *entityMove;

/** Required. The rule filter */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_MappingRuleFilter *filter;

/**
 *  Optional. Rule to specify the list of columns to include or exclude from a
 *  table.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_FilterTableColumns *filterTableColumns;

/**
 *  Optional. Rule to specify how multiple columns should be converted to a
 *  different data type.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_MultiColumnDatatypeChange *multiColumnDataTypeChange;

/** Optional. Rule to specify how multiple entities should be renamed. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_MultiEntityRename *multiEntityRename;

/**
 *  Full name of the mapping rule resource, in the form of:
 *  projects/{project}/locations/{location}/conversionWorkspaces/{set}/mappingRule/{rule}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The timestamp that the revision was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *revisionCreateTime;

/**
 *  Output only. The revision ID of the mapping rule. A new revision is
 *  committed whenever the mapping rule is changed in any way. The format is an
 *  8-character hexadecimal string.
 */
@property(nonatomic, copy, nullable) NSString *revisionId;

/**
 *  Required. The order in which the rule is applied. Lower order rules are
 *  applied before higher value rules so they may end up being overridden.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ruleOrder;

/**
 *  Required. The rule scope
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeColumn
 *        Column. (Value: "DATABASE_ENTITY_TYPE_COLUMN")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeConstraint
 *        Constraint. (Value: "DATABASE_ENTITY_TYPE_CONSTRAINT")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeDatabase
 *        Database. (Value: "DATABASE_ENTITY_TYPE_DATABASE")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeDatabasePackage
 *        Package. (Value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeFunction
 *        Function. (Value: "DATABASE_ENTITY_TYPE_FUNCTION")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeIndex
 *        Index. (Value: "DATABASE_ENTITY_TYPE_INDEX")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeMaterializedView
 *        Materialized View. (Value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeSchema
 *        Schema. (Value: "DATABASE_ENTITY_TYPE_SCHEMA")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeSequence
 *        Sequence. (Value: "DATABASE_ENTITY_TYPE_SEQUENCE")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeStoredProcedure
 *        Stored Procedure. (Value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeSynonym
 *        Synonym. (Value: "DATABASE_ENTITY_TYPE_SYNONYM")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeTable
 *        Table. (Value: "DATABASE_ENTITY_TYPE_TABLE")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeTrigger
 *        Trigger. (Value: "DATABASE_ENTITY_TYPE_TRIGGER")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeUdt
 *        UDT. (Value: "DATABASE_ENTITY_TYPE_UDT")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeUnspecified
 *        Unspecified database entity type. (Value:
 *        "DATABASE_ENTITY_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_RuleScope_DatabaseEntityTypeView
 *        View. (Value: "DATABASE_ENTITY_TYPE_VIEW")
 */
@property(nonatomic, copy, nullable) NSString *ruleScope;

/** Optional. Rule to specify the primary key for a table */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SetTablePrimaryKey *setTablePrimaryKey;

/** Optional. Rule to specify how a single column is converted. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SingleColumnChange *singleColumnChange;

/** Optional. Rule to specify how a single entity should be renamed. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SingleEntityRename *singleEntityRename;

/** Optional. Rule to specify how a single package is converted. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SinglePackageChange *singlePackageChange;

/**
 *  Optional. Rule to change the sql code for an entity, for example, function,
 *  procedure.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SourceSqlChange *sourceSqlChange;

/**
 *  Optional. The mapping rule state
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_State_Deleted The rule
 *        is logically deleted. (Value: "DELETED")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_State_Disabled The rule
 *        is disabled. (Value: "DISABLED")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_State_Enabled The rule
 *        is enabled. (Value: "ENABLED")
 *    @arg @c kGTLRDatabaseMigrationService_MappingRule_State_StateUnspecified
 *        The state of the mapping rule is unknown. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  A filter defining the entities that a mapping rule should be applied to.
 *  When more than one field is specified, the rule is applied only to entities
 *  which match all the fields.
 */
@interface GTLRDatabaseMigrationService_MappingRuleFilter : GTLRObject

/**
 *  Optional. The rule should be applied to specific entities defined by their
 *  fully qualified names.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *entities;

/**
 *  Optional. The rule should be applied to entities whose non-qualified name
 *  contains the given string.
 */
@property(nonatomic, copy, nullable) NSString *entityNameContains;

/**
 *  Optional. The rule should be applied to entities whose non-qualified name
 *  starts with the given prefix.
 */
@property(nonatomic, copy, nullable) NSString *entityNamePrefix;

/**
 *  Optional. The rule should be applied to entities whose non-qualified name
 *  ends with the given suffix.
 */
@property(nonatomic, copy, nullable) NSString *entityNameSuffix;

/**
 *  Optional. The rule should be applied to entities whose parent entity (fully
 *  qualified name) matches the given value. For example, if the rule applies to
 *  a table entity, the expected value should be a schema (schema). If the rule
 *  applies to a column or index entity, the expected value can be either a
 *  schema (schema) or a table (schema.table)
 */
@property(nonatomic, copy, nullable) NSString *parentEntity;

@end


/**
 *  MaterializedView's parent is a schema.
 */
@interface GTLRDatabaseMigrationService_MaterializedViewEntity : GTLRObject

/** Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_MaterializedViewEntity_CustomFeatures *customFeatures;

/** The SQL code which creates the view. */
@property(nonatomic, copy, nullable) NSString *sqlCode;

@end


/**
 *  Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_MaterializedViewEntity_CustomFeatures : GTLRObject
@end


/**
 *  Represents a Database Migration Service migration job object.
 */
@interface GTLRDatabaseMigrationService_MigrationJob : GTLRObject

/**
 *  The CMEK (customer-managed encryption key) fully qualified key name used for
 *  the migration job. This field supports all migration jobs types except for:
 *  * Mysql to Mysql (use the cmek field in the cloudsql connection profile
 *  instead). * PostrgeSQL to PostgreSQL (use the cmek field in the cloudsql
 *  connection profile instead). * PostgreSQL to AlloyDB (use the kms_key_name
 *  field in the alloydb connection profile instead). Each Cloud CMEK key has
 *  the following format:
 *  projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME]
 */
@property(nonatomic, copy, nullable) NSString *cmekKeyName;

/** The conversion workspace used by the migration. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ConversionWorkspaceInfo *conversionWorkspace;

/**
 *  Output only. The timestamp when the migration job resource was created. A
 *  timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
 *  "2014-10-02T15:01:23.045123456Z".
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Required. The resource name (URI) of the destination connection profile.
 */
@property(nonatomic, copy, nullable) NSString *destination;

/** The database engine type and provider of the destination. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_DatabaseType *destinationDatabase;

/** The migration job display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  The initial dump flags. This field and the "dump_path" field are mutually
 *  exclusive.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_DumpFlags *dumpFlags;

/**
 *  The path to the dump file in Google Cloud Storage, in the format:
 *  (gs://[BUCKET_NAME]/[OBJECT_NAME]). This field and the "dump_flags" field
 *  are mutually exclusive.
 */
@property(nonatomic, copy, nullable) NSString *dumpPath;

/**
 *  Optional. The type of the data dump. Supported for MySQL to CloudSQL for
 *  MySQL migrations only.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_DumpType_DumpTypeUnspecified
 *        If not specified, defaults to LOGICAL (Value: "DUMP_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_DumpType_Logical
 *        Logical dump. (Value: "LOGICAL")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_DumpType_Physical
 *        Physical file-based dump. Supported for MySQL to CloudSQL for MySQL
 *        migrations only. (Value: "PHYSICAL")
 */
@property(nonatomic, copy, nullable) NSString *dumpType;

/**
 *  Output only. The duration of the migration job (in seconds). A duration in
 *  seconds with up to nine fractional digits, terminated by 's'. Example:
 *  "3.5s".
 */
@property(nonatomic, strong, nullable) GTLRDuration *duration;

/**
 *  Output only. If the migration job is completed, the time when it was
 *  completed.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Output only. The error details in case of state FAILED. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Status *error;

/**
 *  This field can be used to select the entities to migrate as part of the
 *  migration job. It uses AIP-160 notation to select a subset of the entities
 *  configured on the associated conversion-workspace. This field should not be
 *  set on migration-jobs that are not associated with a conversion workspace.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The resource labels for migration job to use to annotate any related
 *  underlying resources such as Compute Engine VMs. An object containing a list
 *  of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg",
 *  "count": "3" }`.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_MigrationJob_Labels *labels;

/**
 *  The name (URI) of this migration job resource, in the form of:
 *  projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Optional. Data dump parallelism settings used by the migration. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_PerformanceConfig *performanceConfig;

/**
 *  Output only. The current migration job phase.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Phase_Cdc The migration
 *        job is CDC phase. (Value: "CDC")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Phase_FullDump The
 *        migration job is in the full dump phase. (Value: "FULL_DUMP")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Phase_PhaseUnspecified
 *        The phase of the migration job is unknown. (Value:
 *        "PHASE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Phase_PreparingTheDump
 *        Only RDS flow - the sources writes stopped, waiting for dump to begin
 *        (Value: "PREPARING_THE_DUMP")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Phase_PromoteInProgress
 *        The migration job is running the promote phase. (Value:
 *        "PROMOTE_IN_PROGRESS")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Phase_ReadyForPromote
 *        The migration job is ready to be promoted. (Value:
 *        "READY_FOR_PROMOTE")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Phase_WaitingForSourceWritesToStop
 *        Only RDS flow - waiting for source writes to stop (Value:
 *        "WAITING_FOR_SOURCE_WRITES_TO_STOP")
 */
@property(nonatomic, copy, nullable) NSString *phase;

/**
 *  The details needed to communicate to the source over Reverse SSH tunnel
 *  connectivity.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ReverseSshConnectivity *reverseSshConnectivity;

/** Required. The resource name (URI) of the source connection profile. */
@property(nonatomic, copy, nullable) NSString *source;

/** The database engine type and provider of the source. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_DatabaseType *sourceDatabase;

/** Optional. Configuration for SQL Server homogeneous migration. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SqlServerHomogeneousMigrationJobConfig *sqlserverHomogeneousMigrationJobConfig;

/**
 *  The current migration job state.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Completed The
 *        migration job has been completed. (Value: "COMPLETED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Creating The
 *        migration job is being created. (Value: "CREATING")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Deleted The
 *        migration job has been deleted. (Value: "DELETED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Deleting The
 *        migration job is being deleted. (Value: "DELETING")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Draft The
 *        migration job is in draft mode and no resources are created. (Value:
 *        "DRAFT")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Failed The
 *        migration job failed. (Value: "FAILED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Maintenance The
 *        migration job is down for maintenance. (Value: "MAINTENANCE")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_NotStarted The
 *        migration job is created and not started. (Value: "NOT_STARTED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Restarting The
 *        migration job is restarting. (Value: "RESTARTING")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Resuming The
 *        migration job is resuming. (Value: "RESUMING")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Running The
 *        migration job is running. (Value: "RUNNING")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Starting The
 *        migration job is starting. (Value: "STARTING")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_StateUnspecified
 *        The state of the migration job is unknown. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Stopped The
 *        migration job is currently stopped. (Value: "STOPPED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Stopping The
 *        migration job is being stopped. (Value: "STOPPING")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_State_Updating The
 *        migration job is being updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** static ip connectivity data (default, no additional details needed). */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_StaticIpConnectivity *staticIpConnectivity;

/**
 *  Required. The migration job type.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Type_Continuous The
 *        migration job is a continuous migration. (Value: "CONTINUOUS")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Type_OneTime The
 *        migration job is a one time migration. (Value: "ONE_TIME")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJob_Type_TypeUnspecified
 *        The type of the migration job is unknown. (Value: "TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Output only. The timestamp when the migration job resource was last updated.
 *  A timestamp in RFC3339 UTC "Zulu" format, accurate to nanoseconds. Example:
 *  "2014-10-02T15:01:23.045123456Z".
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** The details of the VPC network that the source database is located in. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_VpcPeeringConnectivity *vpcPeeringConnectivity;

@end


/**
 *  The resource labels for migration job to use to annotate any related
 *  underlying resources such as Compute Engine VMs. An object containing a list
 *  of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg",
 *  "count": "3" }`.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_MigrationJob_Labels : GTLRObject
@end


/**
 *  Error message of a verification Migration job.
 */
@interface GTLRDatabaseMigrationService_MigrationJobVerificationError : GTLRObject

/**
 *  Output only. An instance of ErrorCode specifying the error that occurred.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_AuthenticationFailure
 *        We failed to authenticate to one of the connection profile. (Value:
 *        "AUTHENTICATION_FAILURE")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_CantRestartRunningMigration
 *        Migration is already running at the time of restart request. (Value:
 *        "CANT_RESTART_RUNNING_MIGRATION")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ConnectionFailure
 *        We failed to connect to one of the connection profile. (Value:
 *        "CONNECTION_FAILURE")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ConnectionProfileTypesIncompatibility
 *        The types of the source and the destination are incompatible. (Value:
 *        "CONNECTION_PROFILE_TYPES_INCOMPATIBILITY")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ErrorCodeUnspecified
 *        An unknown error occurred (Value: "ERROR_CODE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ErrorRdbms
 *        There was an underlying RDBMS error. (Value: "ERROR_RDBMS")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ExistingConflictingDatabases
 *        The destination DB contains existing databases that are conflicting
 *        with those in the source DB. (Value: "EXISTING_CONFLICTING_DATABASES")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ExistingData
 *        The destination instance contains existing data or user defined
 *        entities (for example databases, tables, or functions). You can only
 *        migrate to empty instances. Clear your destination instance and retry
 *        the migration job. (Value: "EXISTING_DATA")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InsufficientMaxReplicationSlots
 *        The value of parameter max_replication_slots is not sufficient.
 *        (Value: "INSUFFICIENT_MAX_REPLICATION_SLOTS")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InsufficientMaxWalSenders
 *        The value of parameter max_wal_senders is not sufficient. (Value:
 *        "INSUFFICIENT_MAX_WAL_SENDERS")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InsufficientMaxWorkerProcesses
 *        The value of parameter max_worker_processes is not sufficient. (Value:
 *        "INSUFFICIENT_MAX_WORKER_PROCESSES")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InvalidConnectionProfileConfig
 *        One of the involved connection profiles has an invalid configuration.
 *        (Value: "INVALID_CONNECTION_PROFILE_CONFIG")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InvalidRdsLogicalReplication
 *        Invalid RDS logical replication. (Value:
 *        "INVALID_RDS_LOGICAL_REPLICATION")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InvalidSharedPreloadLibrary
 *        The value of parameter shared_preload_libraries does not include
 *        pglogical. (Value: "INVALID_SHARED_PRELOAD_LIBRARY")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_InvalidWalLevel
 *        The value of parameter wal_level is not set to logical. (Value:
 *        "INVALID_WAL_LEVEL")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_NoPglogicalInstalled
 *        No pglogical extension installed on databases, applicable for
 *        postgres. (Value: "NO_PGLOGICAL_INSTALLED")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_ParallelImportInsufficientPrivilege
 *        Insufficient privilege to enable the parallelism configuration.
 *        (Value: "PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_PglogicalNodeAlreadyExists
 *        pglogical node already exists on databases, applicable for postgres.
 *        (Value: "PGLOGICAL_NODE_ALREADY_EXISTS")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_SourceAlreadySetup
 *        The source already has a replication setup. (Value:
 *        "SOURCE_ALREADY_SETUP")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_SourceMaxSubscriptions
 *        The migration job is configured to use max number of subscriptions to
 *        migrate data from the source to the destination. (Value:
 *        "SOURCE_MAX_SUBSCRIPTIONS")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_SourceSizeExceedsThreshold
 *        The source DB size in Bytes exceeds a certain threshold. The migration
 *        might require an increase of quota, or might not be supported. (Value:
 *        "SOURCE_SIZE_EXCEEDS_THRESHOLD")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_TablesWithLimitedSupport
 *        The source has tables with limited support. E.g. PostgreSQL tables
 *        without primary keys. (Value: "TABLES_WITH_LIMITED_SUPPORT")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedDatabaseFdwConfig
 *        The source uses an unsupported Foreign Data Wrapper configuration.
 *        (Value: "UNSUPPORTED_DATABASE_FDW_CONFIG")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedDatabaseLocale
 *        The source uses an unsupported locale. (Value:
 *        "UNSUPPORTED_DATABASE_LOCALE")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedDefiner
 *        The definer is not supported. (Value: "UNSUPPORTED_DEFINER")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedExtensions
 *        Extensions installed are either not supported or having unsupported
 *        versions. (Value: "UNSUPPORTED_EXTENSIONS")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedGtidMode
 *        The gtid_mode is not supported, applicable for MySQL. (Value:
 *        "UNSUPPORTED_GTID_MODE")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedMigrationType
 *        Unsupported migration type. (Value: "UNSUPPORTED_MIGRATION_TYPE")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_UnsupportedTableDefinition
 *        The table definition is not support due to missing primary key or
 *        replica identity. (Value: "UNSUPPORTED_TABLE_DEFINITION")
 *    @arg @c kGTLRDatabaseMigrationService_MigrationJobVerificationError_ErrorCode_VersionIncompatibility
 *        The versions of the source and the destination are incompatible.
 *        (Value: "VERSION_INCOMPATIBILITY")
 */
@property(nonatomic, copy, nullable) NSString *errorCode;

/**
 *  Output only. A specific detailed error message, if supplied by the engine.
 */
@property(nonatomic, copy, nullable) NSString *errorDetailMessage;

/**
 *  Output only. A formatted message with further details about the error and a
 *  CTA.
 */
@property(nonatomic, copy, nullable) NSString *errorMessage;

@end


/**
 *  Options to configure rule type MultiColumnDatatypeChange. The rule is used
 *  to change the data type and associated properties of multiple columns at
 *  once. The rule filter field can refer to one or more entities. The rule
 *  scope can be one of:Column. This rule requires additional filters to be
 *  specified beyond the basic rule filter field, which is the source data type,
 *  but the rule supports additional filtering capabilities such as the minimum
 *  and maximum field length. All additional filters which are specified are
 *  required to be met in order for the rule to be applied (logical AND between
 *  the fields).
 */
@interface GTLRDatabaseMigrationService_MultiColumnDatatypeChange : GTLRObject

/** Optional. Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_MultiColumnDatatypeChange_CustomFeatures *customFeatures;

/** Required. New data type. */
@property(nonatomic, copy, nullable) NSString *newDataType NS_RETURNS_NOT_RETAINED;

/**
 *  Optional. Column fractional seconds precision - used only for timestamp
 *  based datatypes - if not specified and relevant uses the source column
 *  fractional seconds precision.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *overrideFractionalSecondsPrecision;

/**
 *  Optional. Column length - e.g. varchar (50) - if not specified and relevant
 *  uses the source column length.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *overrideLength;

/**
 *  Optional. Column precision - when relevant - if not specified and relevant
 *  uses the source column precision.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *overridePrecision;

/**
 *  Optional. Column scale - when relevant - if not specified and relevant uses
 *  the source column scale.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *overrideScale;

/** Required. Filter on source data type. */
@property(nonatomic, copy, nullable) NSString *sourceDataTypeFilter;

/**
 *  Optional. Filter for fixed point number data types such as NUMERIC/NUMBER.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SourceNumericFilter *sourceNumericFilter;

/** Optional. Filter for text-based data types like varchar. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SourceTextFilter *sourceTextFilter;

@end


/**
 *  Optional. Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_MultiColumnDatatypeChange_CustomFeatures : GTLRObject
@end


/**
 *  Options to configure rule type MultiEntityRename. The rule is used to rename
 *  multiple entities. The rule filter field can refer to one or more entities.
 *  The rule scope can be one of: Database, Schema, Table, Column, Constraint,
 *  Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT
 */
@interface GTLRDatabaseMigrationService_MultiEntityRename : GTLRObject

/**
 *  Optional. The pattern used to generate the new entity's name. This pattern
 *  must include the characters '{name}', which will be replaced with the name
 *  of the original entity. For example, the pattern 't_{name}' for an entity
 *  name jobs would be converted to 't_jobs'. If unspecified, the default value
 *  for this field is '{name}'
 */
@property(nonatomic, copy, nullable) NSString *newNamePattern NS_RETURNS_NOT_RETAINED;

/**
 *  Optional. Additional transformation that can be done on the source entity
 *  name before it is being used by the new_name_pattern, for example lower
 *  case. If no transformation is desired, use NO_TRANSFORMATION
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_MultiEntityRename_SourceNameTransformation_EntityNameTransformationCapitalizedCase
 *        Transform to capitalized case. (Value:
 *        "ENTITY_NAME_TRANSFORMATION_CAPITALIZED_CASE")
 *    @arg @c kGTLRDatabaseMigrationService_MultiEntityRename_SourceNameTransformation_EntityNameTransformationLowerCase
 *        Transform to lower case. (Value:
 *        "ENTITY_NAME_TRANSFORMATION_LOWER_CASE")
 *    @arg @c kGTLRDatabaseMigrationService_MultiEntityRename_SourceNameTransformation_EntityNameTransformationNoTransformation
 *        No transformation. (Value:
 *        "ENTITY_NAME_TRANSFORMATION_NO_TRANSFORMATION")
 *    @arg @c kGTLRDatabaseMigrationService_MultiEntityRename_SourceNameTransformation_EntityNameTransformationUnspecified
 *        Entity name transformation unspecified. (Value:
 *        "ENTITY_NAME_TRANSFORMATION_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_MultiEntityRename_SourceNameTransformation_EntityNameTransformationUpperCase
 *        Transform to upper case. (Value:
 *        "ENTITY_NAME_TRANSFORMATION_UPPER_CASE")
 */
@property(nonatomic, copy, nullable) NSString *sourceNameTransformation;

@end


/**
 *  Specifies connection parameters required specifically for MySQL databases.
 */
@interface GTLRDatabaseMigrationService_MySqlConnectionProfile : GTLRObject

/**
 *  If the source is a Cloud SQL database, use this field to provide the Cloud
 *  SQL instance ID of the source.
 */
@property(nonatomic, copy, nullable) NSString *cloudSqlId;

/** Required. The IP or hostname of the source MySQL database. */
@property(nonatomic, copy, nullable) NSString *host;

/**
 *  Required. Input only. The password for the user that Database Migration
 *  Service will be using to connect to the database. This field is not returned
 *  on request, and the value is encrypted when stored in Database Migration
 *  Service.
 */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  Output only. Indicates If this connection profile password is stored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *passwordSet;

/**
 *  Required. The network port of the source MySQL database.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/**
 *  SSL configuration for the destination to connect to the source database.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SslConfig *ssl;

/**
 *  Required. The username that Database Migration Service will use to connect
 *  to the database. The value is encrypted when stored in Database Migration
 *  Service.
 */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRDatabaseMigrationService_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_Operation_Response : GTLRObject
@end


/**
 *  Configuration for Oracle Automatic Storage Management (ASM) connection.
 */
@interface GTLRDatabaseMigrationService_OracleAsmConfig : GTLRObject

/** Required. ASM service name for the Oracle ASM connection. */
@property(nonatomic, copy, nullable) NSString *asmService;

/** Required. Hostname for the Oracle ASM connection. */
@property(nonatomic, copy, nullable) NSString *hostname;

/** Required. Input only. Password for the Oracle ASM connection. */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  Output only. Indicates whether a new password is included in the request.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *passwordSet;

/**
 *  Required. Port for the Oracle ASM connection.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/** Optional. SSL configuration for the Oracle connection. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SslConfig *ssl;

/** Required. Username for the Oracle ASM connection. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  Specifies connection parameters required specifically for Oracle databases.
 */
@interface GTLRDatabaseMigrationService_OracleConnectionProfile : GTLRObject

/** Required. Database service for the Oracle connection. */
@property(nonatomic, copy, nullable) NSString *databaseService;

/** Forward SSH tunnel connectivity. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ForwardSshTunnelConnectivity *forwardSshConnectivity;

/** Required. The IP or hostname of the source Oracle database. */
@property(nonatomic, copy, nullable) NSString *host;

/** Optional. Configuration for Oracle ASM connection. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_OracleAsmConfig *oracleAsmConfig;

/**
 *  Required. Input only. The password for the user that Database Migration
 *  Service will be using to connect to the database. This field is not returned
 *  on request, and the value is encrypted when stored in Database Migration
 *  Service.
 */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  Output only. Indicates whether a new password is included in the request.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *passwordSet;

/**
 *  Required. The network port of the source Oracle database.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/** Private connectivity. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_PrivateConnectivity *privateConnectivity;

/**
 *  SSL configuration for the connection to the source Oracle database. * Only
 *  `SERVER_ONLY` configuration is supported for Oracle SSL. * SSL is supported
 *  for Oracle versions 12 and above.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SslConfig *ssl;

/** Static Service IP connectivity. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_StaticServiceIpConnectivity *staticServiceIpConnectivity;

/**
 *  Required. The username that Database Migration Service will use to connect
 *  to the database. The value is encrypted when stored in Database Migration
 *  Service.
 */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  Package's parent is a schema.
 */
@interface GTLRDatabaseMigrationService_PackageEntity : GTLRObject

/** Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_PackageEntity_CustomFeatures *customFeatures;

/**
 *  The SQL code which creates the package body. If the package specification
 *  has cursors or subprograms, then the package body is mandatory.
 */
@property(nonatomic, copy, nullable) NSString *packageBody;

/** The SQL code which creates the package. */
@property(nonatomic, copy, nullable) NSString *packageSqlCode;

@end


/**
 *  Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_PackageEntity_CustomFeatures : GTLRObject
@end


/**
 *  Performance configuration definition.
 */
@interface GTLRDatabaseMigrationService_PerformanceConfig : GTLRObject

/**
 *  Initial dump parallelism level.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_PerformanceConfig_DumpParallelLevel_DumpParallelLevelUnspecified
 *        Unknown dump parallel level. Will be defaulted to OPTIMAL. (Value:
 *        "DUMP_PARALLEL_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_PerformanceConfig_DumpParallelLevel_Max
 *        Maximum parallel level. (Value: "MAX")
 *    @arg @c kGTLRDatabaseMigrationService_PerformanceConfig_DumpParallelLevel_Min
 *        Minimal parallel level. (Value: "MIN")
 *    @arg @c kGTLRDatabaseMigrationService_PerformanceConfig_DumpParallelLevel_Optimal
 *        Optimal parallel level. (Value: "OPTIMAL")
 */
@property(nonatomic, copy, nullable) NSString *dumpParallelLevel;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** ``` { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
 *  members: - user:mike\@example.com - group:admins\@example.com -
 *  domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 ``` For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRDatabaseMigrationService_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Issue position.
 */
@interface GTLRDatabaseMigrationService_Position : GTLRObject

/**
 *  Issue column number
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *column;

/**
 *  Issue length
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/**
 *  Issue line number
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *line;

/**
 *  Issue offset
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *offset;

@end


/**
 *  Specifies connection parameters required specifically for PostgreSQL
 *  databases.
 */
@interface GTLRDatabaseMigrationService_PostgreSqlConnectionProfile : GTLRObject

/**
 *  Optional. If the destination is an AlloyDB database, use this field to
 *  provide the AlloyDB cluster ID.
 */
@property(nonatomic, copy, nullable) NSString *alloydbClusterId;

/**
 *  If the source is a Cloud SQL database, use this field to provide the Cloud
 *  SQL instance ID of the source.
 */
@property(nonatomic, copy, nullable) NSString *cloudSqlId;

/** Required. The IP or hostname of the source PostgreSQL database. */
@property(nonatomic, copy, nullable) NSString *host;

/**
 *  Output only. If the source is a Cloud SQL database, this field indicates the
 *  network architecture it's associated with.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_PostgreSqlConnectionProfile_NetworkArchitecture_NetworkArchitectureNewCsqlProducer
 *        Instance is in Cloud SQL's new producer network architecture. (Value:
 *        "NETWORK_ARCHITECTURE_NEW_CSQL_PRODUCER")
 *    @arg @c kGTLRDatabaseMigrationService_PostgreSqlConnectionProfile_NetworkArchitecture_NetworkArchitectureOldCsqlProducer
 *        Instance is in Cloud SQL's old producer network architecture. (Value:
 *        "NETWORK_ARCHITECTURE_OLD_CSQL_PRODUCER")
 *    @arg @c kGTLRDatabaseMigrationService_PostgreSqlConnectionProfile_NetworkArchitecture_NetworkArchitectureUnspecified
 *        Value "NETWORK_ARCHITECTURE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *networkArchitecture;

/**
 *  Required. Input only. The password for the user that Database Migration
 *  Service will be using to connect to the database. This field is not returned
 *  on request, and the value is encrypted when stored in Database Migration
 *  Service.
 */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  Output only. Indicates If this connection profile password is stored.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *passwordSet;

/**
 *  Required. The network port of the source PostgreSQL database.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/** Private service connect connectivity. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_PrivateServiceConnectConnectivity *privateServiceConnectConnectivity;

/**
 *  SSL configuration for the destination to connect to the source database.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SslConfig *ssl;

/** Static ip connectivity data (default, no additional details needed). */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_StaticIpConnectivity *staticIpConnectivity;

/**
 *  Required. The username that Database Migration Service will use to connect
 *  to the database. The value is encrypted when stored in Database Migration
 *  Service.
 */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  Settings for the cluster's primary instance
 */
@interface GTLRDatabaseMigrationService_PrimaryInstanceSettings : GTLRObject

/**
 *  Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster
 *  and instances. See the AlloyDB documentation for how these can be used.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_PrimaryInstanceSettings_DatabaseFlags *databaseFlags;

/**
 *  Required. The ID of the AlloyDB primary instance. The ID must satisfy the
 *  regex expression "[a-z0-9-]+".
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** Optional. Metadata related to instance level network configuration. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_InstanceNetworkConfig *instanceNetworkConfig;

/**
 *  Labels for the AlloyDB primary instance created by DMS. An object containing
 *  a list of 'key', 'value' pairs.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_PrimaryInstanceSettings_Labels *labels;

/**
 *  Configuration for the machines that host the underlying database engine.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_MachineConfig *machineConfig;

/**
 *  Output only. All outbound public IP addresses configured for the instance.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *outboundPublicIpAddresses;

/**
 *  Output only. The private IP address for the Instance. This is the connection
 *  endpoint for an end-user application.
 */
@property(nonatomic, copy, nullable) NSString *privateIp;

@end


/**
 *  Database flags to pass to AlloyDB when DMS is creating the AlloyDB cluster
 *  and instances. See the AlloyDB documentation for how these can be used.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_PrimaryInstanceSettings_DatabaseFlags : GTLRObject
@end


/**
 *  Labels for the AlloyDB primary instance created by DMS. An object containing
 *  a list of 'key', 'value' pairs.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_PrimaryInstanceSettings_Labels : GTLRObject
@end


/**
 *  The PrivateConnection resource is used to establish private connectivity
 *  with the customer's network.
 */
@interface GTLRDatabaseMigrationService_PrivateConnection : GTLRObject

/** Output only. The create time of the resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The private connection display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Output only. The error details in case of state FAILED. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Status *error;

/**
 *  The resource labels for private connections to use to annotate any related
 *  underlying resources such as Compute Engine VMs. An object containing a list
 *  of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg",
 *  "count": "3" }`.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_PrivateConnection_Labels *labels;

/** The name of the resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The state of the private connection.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_PrivateConnection_State_Created The
 *        private connection has been created with all of its resources. (Value:
 *        "CREATED")
 *    @arg @c kGTLRDatabaseMigrationService_PrivateConnection_State_Creating The
 *        private connection is in creation state - creating resources. (Value:
 *        "CREATING")
 *    @arg @c kGTLRDatabaseMigrationService_PrivateConnection_State_Deleted The
 *        private connection has been deleted. (Value: "DELETED")
 *    @arg @c kGTLRDatabaseMigrationService_PrivateConnection_State_Deleting The
 *        private connection is being deleted. (Value: "DELETING")
 *    @arg @c kGTLRDatabaseMigrationService_PrivateConnection_State_Failed The
 *        private connection creation has failed. (Value: "FAILED")
 *    @arg @c kGTLRDatabaseMigrationService_PrivateConnection_State_FailedToDelete
 *        Delete request has failed, resource is in invalid state. (Value:
 *        "FAILED_TO_DELETE")
 *    @arg @c kGTLRDatabaseMigrationService_PrivateConnection_State_StateUnspecified
 *        Value "STATE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The last update time of the resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** VPC peering configuration. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_VpcPeeringConfig *vpcPeeringConfig;

@end


/**
 *  The resource labels for private connections to use to annotate any related
 *  underlying resources such as Compute Engine VMs. An object containing a list
 *  of "key": "value" pairs. Example: `{ "name": "wrench", "mass": "1.3kg",
 *  "count": "3" }`.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_PrivateConnection_Labels : GTLRObject
@end


/**
 *  Private Connectivity.
 */
@interface GTLRDatabaseMigrationService_PrivateConnectivity : GTLRObject

/** Required. The resource name (URI) of the private connection. */
@property(nonatomic, copy, nullable) NSString *privateConnection;

@end


/**
 *  [Private Service Connect
 *  connectivity](https://cloud.google.com/vpc/docs/private-service-connect#service-attachments)
 */
@interface GTLRDatabaseMigrationService_PrivateServiceConnectConnectivity : GTLRObject

/**
 *  Required. A service attachment that exposes a database, and has the
 *  following format:
 *  projects/{project}/regions/{region}/serviceAttachments/{service_attachment_name}
 */
@property(nonatomic, copy, nullable) NSString *serviceAttachment;

@end


/**
 *  Request message for 'PromoteMigrationJob' request.
 */
@interface GTLRDatabaseMigrationService_PromoteMigrationJobRequest : GTLRObject
@end


/**
 *  Request message for 'RestartMigrationJob' request.
 */
@interface GTLRDatabaseMigrationService_RestartMigrationJobRequest : GTLRObject

/**
 *  Optional. Restart the migration job without running prior configuration
 *  verification. Defaults to `false`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipValidation;

@end


/**
 *  Request message for 'ResumeMigrationJob' request.
 */
@interface GTLRDatabaseMigrationService_ResumeMigrationJobRequest : GTLRObject

/**
 *  Optional. Resume the migration job without running prior configuration
 *  verification. Defaults to `false`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipValidation;

@end


/**
 *  The details needed to configure a reverse SSH tunnel between the source and
 *  destination databases. These details will be used when calling the
 *  generateSshScript method (see
 *  https://cloud.google.com/database-migration/docs/reference/rest/v1/projects.locations.migrationJobs/generateSshScript)
 *  to produce the script that will help set up the reverse SSH tunnel, and to
 *  set up the VPC peering between the Cloud SQL private network and the VPC.
 */
@interface GTLRDatabaseMigrationService_ReverseSshConnectivity : GTLRObject

/**
 *  The name of the virtual machine (Compute Engine) used as the bastion server
 *  for the SSH tunnel.
 */
@property(nonatomic, copy, nullable) NSString *vm;

/**
 *  Required. The IP of the virtual machine (Compute Engine) used as the bastion
 *  server for the SSH tunnel.
 */
@property(nonatomic, copy, nullable) NSString *vmIp;

/**
 *  Required. The forwarding port of the virtual machine (Compute Engine) used
 *  as the bastion server for the SSH tunnel.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *vmPort;

/** The name of the VPC to peer with the Cloud SQL private network. */
@property(nonatomic, copy, nullable) NSString *vpc;

@end


/**
 *  Request message for 'RollbackConversionWorkspace' request.
 */
@interface GTLRDatabaseMigrationService_RollbackConversionWorkspaceRequest : GTLRObject
@end


/**
 *  This allows the data to change scale, for example if the source is 2 digits
 *  after the decimal point, specify round to scale value = 2. If for example
 *  the value needs to be converted to an integer, use round to scale value = 0.
 */
@interface GTLRDatabaseMigrationService_RoundToScale : GTLRObject

/**
 *  Required. Scale value to be used
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scale;

@end


/**
 *  Details of a single rules file.
 */
@interface GTLRDatabaseMigrationService_RulesFile : GTLRObject

/** Required. The text content of the rules that needs to be converted. */
@property(nonatomic, copy, nullable) NSString *rulesContent;

/**
 *  Required. The filename of the rules that needs to be converted. The filename
 *  is used mainly so that future logs of the import rules job contain it, and
 *  can therefore be searched by it.
 */
@property(nonatomic, copy, nullable) NSString *rulesSourceFilename;

@end


/**
 *  Schema typically has no parent entity, but can have a parent entity
 *  DatabaseInstance (for database engines which support it). For some database
 *  engines, the terms schema and user can be used interchangeably when they
 *  refer to a namespace or a collection of other database entities. Can store
 *  additional information which is schema specific.
 */
@interface GTLRDatabaseMigrationService_SchemaEntity : GTLRObject

/** Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SchemaEntity_CustomFeatures *customFeatures;

@end


/**
 *  Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_SchemaEntity_CustomFeatures : GTLRObject
@end


/**
 *  Response message for 'SearchBackgroundJobs' request.
 */
@interface GTLRDatabaseMigrationService_SearchBackgroundJobsResponse : GTLRObject

/** The list of conversion workspace mapping rules. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_BackgroundJobLogEntry *> *jobs;

@end


/**
 *  Request message for 'SeedConversionWorkspace' request.
 */
@interface GTLRDatabaseMigrationService_SeedConversionWorkspaceRequest : GTLRObject

/**
 *  Should the conversion workspace be committed automatically after the seed
 *  operation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoCommit;

/**
 *  Optional. Fully qualified (Uri) name of the destination connection profile.
 */
@property(nonatomic, copy, nullable) NSString *destinationConnectionProfile;

/** Optional. Fully qualified (Uri) name of the source connection profile. */
@property(nonatomic, copy, nullable) NSString *sourceConnectionProfile;

@end


/**
 *  Details regarding a Seed background job.
 */
@interface GTLRDatabaseMigrationService_SeedJobDetails : GTLRObject

/** Output only. The connection profile which was used for the seed job. */
@property(nonatomic, copy, nullable) NSString *connectionProfile;

@end


/**
 *  Sequence's parent is a schema.
 */
@interface GTLRDatabaseMigrationService_SequenceEntity : GTLRObject

/**
 *  Indicates number of entries to cache / precreate.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cache;

/** Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SequenceEntity_CustomFeatures *customFeatures;

/**
 *  Indicates whether the sequence value should cycle through.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cycle;

/**
 *  Increment value for the sequence.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *increment;

/**
 *  Maximum number for the sequence represented as bytes to accommodate large.
 *  numbers
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *maxValue;

/**
 *  Minimum number for the sequence represented as bytes to accommodate large.
 *  numbers
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *minValue;

/**
 *  Start number for the sequence represented as bytes to accommodate large.
 *  numbers
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *startValue;

@end


/**
 *  Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_SequenceEntity_CustomFeatures : GTLRObject
@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRDatabaseMigrationService_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Options to configure rule type SetTablePrimaryKey. The rule is used to
 *  specify the columns and name to configure/alter the primary key of a table.
 *  The rule filter field can refer to one entity. The rule scope can be one of:
 *  Table.
 */
@interface GTLRDatabaseMigrationService_SetTablePrimaryKey : GTLRObject

/** Optional. Name for the primary key */
@property(nonatomic, copy, nullable) NSString *primaryKey;

/** Required. List of column names for the primary key */
@property(nonatomic, strong, nullable) NSArray<NSString *> *primaryKeyColumns;

@end


/**
 *  Options to configure rule type SingleColumnChange. The rule is used to
 *  change the properties of a column. The rule filter field can refer to one
 *  entity. The rule scope can be one of: Column. When using this rule, if a
 *  field is not specified than the destination column's configuration will be
 *  the same as the one in the source column..
 */
@interface GTLRDatabaseMigrationService_SingleColumnChange : GTLRObject

/**
 *  Optional. Is the column of array type.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *array;

/**
 *  Optional. The length of the array, only relevant if the column type is an
 *  array.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *arrayLength;

/**
 *  Optional. Is the column auto-generated/identity.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *autoGenerated;

/** Optional. Charset override - instead of table level charset. */
@property(nonatomic, copy, nullable) NSString *charset;

/** Optional. Collation override - instead of table level collation. */
@property(nonatomic, copy, nullable) NSString *collation;

/** Optional. Comment associated with the column. */
@property(nonatomic, copy, nullable) NSString *comment;

/** Optional. Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SingleColumnChange_CustomFeatures *customFeatures;

/** Optional. Column data type name. */
@property(nonatomic, copy, nullable) NSString *dataType;

/**
 *  Optional. Column fractional seconds precision - e.g. 2 as in timestamp (2) -
 *  when relevant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fractionalSecondsPrecision;

/**
 *  Optional. Column length - e.g. 50 as in varchar (50) - when relevant.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/**
 *  Optional. Is the column nullable.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nullable;

/**
 *  Optional. Column precision - e.g. 8 as in double (8,2) - when relevant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precision;

/**
 *  Optional. Column scale - e.g. 2 as in double (8,2) - when relevant.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scale;

/** Optional. Specifies the list of values allowed in the column. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *setValues;

/**
 *  Optional. Is the column a UDT (User-defined Type).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *udt;

@end


/**
 *  Optional. Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_SingleColumnChange_CustomFeatures : GTLRObject
@end


/**
 *  Options to configure rule type SingleEntityRename. The rule is used to
 *  rename an entity. The rule filter field can refer to only one entity. The
 *  rule scope can be one of: Database, Schema, Table, Column, Constraint,
 *  Index, View, Function, Stored Procedure, Materialized View, Sequence, UDT,
 *  Synonym
 */
@interface GTLRDatabaseMigrationService_SingleEntityRename : GTLRObject

/** Required. The new name of the destination entity */
@property(nonatomic, copy, nullable) NSString *newName NS_RETURNS_NOT_RETAINED;

@end


/**
 *  Options to configure rule type SinglePackageChange. The rule is used to
 *  alter the sql code for a package entities. The rule filter field can refer
 *  to one entity. The rule scope can be: Package
 */
@interface GTLRDatabaseMigrationService_SinglePackageChange : GTLRObject

/** Optional. Sql code for package body */
@property(nonatomic, copy, nullable) NSString *packageBody;

/** Optional. Sql code for package description */
@property(nonatomic, copy, nullable) NSString *packageDescription;

@end


/**
 *  Filter for fixed point number data types such as NUMERIC/NUMBER
 */
@interface GTLRDatabaseMigrationService_SourceNumericFilter : GTLRObject

/**
 *  Required. Enum to set the option defining the datatypes numeric filter has
 *  to be applied to
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_SourceNumericFilter_NumericFilterOption_NumericFilterOptionAll
 *        Numeric filter option that matches all numeric columns. (Value:
 *        "NUMERIC_FILTER_OPTION_ALL")
 *    @arg @c kGTLRDatabaseMigrationService_SourceNumericFilter_NumericFilterOption_NumericFilterOptionLimit
 *        Numeric filter option that matches columns having numeric datatypes
 *        with specified precision and scale within the limited range of filter.
 *        (Value: "NUMERIC_FILTER_OPTION_LIMIT")
 *    @arg @c kGTLRDatabaseMigrationService_SourceNumericFilter_NumericFilterOption_NumericFilterOptionLimitless
 *        Numeric filter option that matches only the numeric columns with no
 *        precision and scale specified. (Value:
 *        "NUMERIC_FILTER_OPTION_LIMITLESS")
 *    @arg @c kGTLRDatabaseMigrationService_SourceNumericFilter_NumericFilterOption_NumericFilterOptionUnspecified
 *        Numeric filter option unspecified (Value:
 *        "NUMERIC_FILTER_OPTION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *numericFilterOption;

/**
 *  Optional. The filter will match columns with precision smaller than or equal
 *  to this number.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sourceMaxPrecisionFilter;

/**
 *  Optional. The filter will match columns with scale smaller than or equal to
 *  this number.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sourceMaxScaleFilter;

/**
 *  Optional. The filter will match columns with precision greater than or equal
 *  to this number.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sourceMinPrecisionFilter;

/**
 *  Optional. The filter will match columns with scale greater than or equal to
 *  this number.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sourceMinScaleFilter;

@end


/**
 *  Options to configure rule type SourceSqlChange. The rule is used to alter
 *  the sql code for database entities. The rule filter field can refer to one
 *  entity. The rule scope can be: StoredProcedure, Function, Trigger, View
 */
@interface GTLRDatabaseMigrationService_SourceSqlChange : GTLRObject

/**
 *  Required. Sql code for source (stored procedure, function, trigger or view)
 */
@property(nonatomic, copy, nullable) NSString *sqlCode;

@end


/**
 *  Filter for text-based data types like varchar.
 */
@interface GTLRDatabaseMigrationService_SourceTextFilter : GTLRObject

/**
 *  Optional. The filter will match columns with length smaller than or equal to
 *  this number.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sourceMaxLengthFilter;

/**
 *  Optional. The filter will match columns with length greater than or equal to
 *  this number.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sourceMinLengthFilter;

@end


/**
 *  An entry for an Access Control list.
 */
@interface GTLRDatabaseMigrationService_SqlAclEntry : GTLRObject

/**
 *  The time when this access control entry expires in [RFC
 *  3339](https://tools.ietf.org/html/rfc3339) format, for example:
 *  `2012-11-15T16:19:00.094Z`.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/** A label to identify this entry. */
@property(nonatomic, copy, nullable) NSString *label;

/** Input only. The time-to-leave of this access control entry. */
@property(nonatomic, strong, nullable) GTLRDuration *ttl;

/** The allowlisted value for the access control list. */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  IP Management configuration.
 */
@interface GTLRDatabaseMigrationService_SqlIpConfig : GTLRObject

/**
 *  Optional. The name of the allocated IP address range for the private IP
 *  Cloud SQL instance. This name refers to an already allocated IP range
 *  address. If set, the instance IP address will be created in the allocated
 *  range. Note that this IP address range can't be modified after the instance
 *  is created. If you change the VPC when configuring connectivity settings for
 *  the migration job, this field is not relevant.
 */
@property(nonatomic, copy, nullable) NSString *allocatedIpRange;

/**
 *  The list of external networks that are allowed to connect to the instance
 *  using the IP. See https://en.wikipedia.org/wiki/CIDR_notation#CIDR_notation,
 *  also known as 'slash' notation (e.g. `192.168.100.0/24`).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_SqlAclEntry *> *authorizedNetworks;

/**
 *  Whether the instance should be assigned an IPv4 address or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *enableIpv4;

/**
 *  The resource link for the VPC network from which the Cloud SQL instance is
 *  accessible for private IP. For example,
 *  `projects/myProject/global/networks/default`. This setting can be updated,
 *  but it cannot be removed after it is set.
 */
@property(nonatomic, copy, nullable) NSString *privateNetwork;

/**
 *  Whether SSL connections over IP should be enforced or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requireSsl;

@end


/**
 *  Specifies the backup details in Cloud Storage for homogeneous migration to
 *  Cloud SQL for SQL Server.
 */
@interface GTLRDatabaseMigrationService_SqlServerBackups : GTLRObject

/**
 *  Required. The Cloud Storage bucket that stores backups for all replicated
 *  databases.
 */
@property(nonatomic, copy, nullable) NSString *gcsBucket;

/** Optional. Cloud Storage path inside the bucket that stores backups. */
@property(nonatomic, copy, nullable) NSString *gcsPrefix;

@end


/**
 *  Specifies connection parameters required specifically for SQL Server
 *  databases.
 */
@interface GTLRDatabaseMigrationService_SqlServerConnectionProfile : GTLRObject

/**
 *  The backup details in Cloud Storage for homogeneous migration to Cloud SQL
 *  for SQL Server.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SqlServerBackups *backups;

/**
 *  If the source is a Cloud SQL database, use this field to provide the Cloud
 *  SQL instance ID of the source.
 */
@property(nonatomic, copy, nullable) NSString *cloudSqlId;

/** Forward SSH tunnel connectivity. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ForwardSshTunnelConnectivity *forwardSshConnectivity;

/** Required. The IP or hostname of the source SQL Server database. */
@property(nonatomic, copy, nullable) NSString *host;

/**
 *  Required. Input only. The password for the user that Database Migration
 *  Service will be using to connect to the database. This field is not returned
 *  on request, and the value is encrypted when stored in Database Migration
 *  Service.
 */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  Output only. Indicates whether a new password is included in the request.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *passwordSet;

/**
 *  Required. The network port of the source SQL Server database.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/** Private connectivity. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_PrivateConnectivity *privateConnectivity;

/** Private Service Connect connectivity. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_PrivateServiceConnectConnectivity *privateServiceConnectConnectivity;

/**
 *  SSL configuration for the destination to connect to the source database.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SslConfig *ssl;

/** Static IP connectivity data (default, no additional details needed). */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_StaticIpConnectivity *staticIpConnectivity;

/**
 *  Required. The username that Database Migration Service will use to connect
 *  to the database. The value is encrypted when stored in Database Migration
 *  Service.
 */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  Specifies the backup details for a single database in Cloud Storage for
 *  homogeneous migration to Cloud SQL for SQL Server.
 */
@interface GTLRDatabaseMigrationService_SqlServerDatabaseBackup : GTLRObject

/**
 *  Required. Name of a SQL Server database for which to define backup
 *  configuration.
 */
@property(nonatomic, copy, nullable) NSString *database;

/**
 *  Optional. Encryption settings for the database. Required if provided
 *  database backups are encrypted. Encryption settings include path to
 *  certificate, path to certificate private key, and key password.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SqlServerEncryptionOptions *encryptionOptions;

@end


/**
 *  Encryption settings for the SQL Server database.
 */
@interface GTLRDatabaseMigrationService_SqlServerEncryptionOptions : GTLRObject

/** Required. Path to certificate. */
@property(nonatomic, copy, nullable) NSString *certPath;

/** Required. Input only. Private key password. */
@property(nonatomic, copy, nullable) NSString *pvkPassword;

/** Required. Path to certificate private key. */
@property(nonatomic, copy, nullable) NSString *pvkPath;

@end


/**
 *  Configuration for homogeneous migration to Cloud SQL for SQL Server.
 */
@interface GTLRDatabaseMigrationService_SqlServerHomogeneousMigrationJobConfig : GTLRObject

/**
 *  Required. Pattern that describes the default backup naming strategy. The
 *  specified pattern should ensure lexicographical order of backups. The
 *  pattern must define one of the following capture group sets: Capture group
 *  set #1 yy/yyyy - year, 2 or 4 digits mm - month number, 1-12 dd - day of
 *  month, 1-31 hh - hour of day, 00-23 mi - minutes, 00-59 ss - seconds, 00-59
 *  Example: For backup file TestDB_20230802_155400.trn, use pattern:
 *  (?.*)_backup_(?\\d{4})(?\\d{2})(?\\d{2})_(?\\d{2})(?\\d{2})(?\\d{2}).trn
 *  Capture group set #2 timestamp - unix timestamp Example: For backup file
 *  TestDB.1691448254.trn, use pattern: (?.*)\\.(?\\d*).trn or
 *  (?.*)\\.(?\\d*).trn
 */
@property(nonatomic, copy, nullable) NSString *backupFilePattern;

/** Required. Backup details per database in Cloud Storage. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_SqlServerDatabaseBackup *> *databaseBackups;

/**
 *  Optional. Promote databases when ready.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *promoteWhenReady;

/**
 *  Optional. Enable differential backups.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *useDiffBackup;

@end


/**
 *  Response message for 'GenerateSshScript' request.
 */
@interface GTLRDatabaseMigrationService_SshScript : GTLRObject

/** The ssh configuration script. */
@property(nonatomic, copy, nullable) NSString *script;

@end


/**
 *  SSL configuration information.
 */
@interface GTLRDatabaseMigrationService_SslConfig : GTLRObject

/**
 *  Required. Input only. The x509 PEM-encoded certificate of the CA that signed
 *  the source database server's certificate. The replica will use this
 *  certificate to verify it's connecting to the right host.
 */
@property(nonatomic, copy, nullable) NSString *caCertificate;

/**
 *  Input only. The x509 PEM-encoded certificate that will be used by the
 *  replica to authenticate against the source database server.If this field is
 *  used then the 'client_key' field is mandatory.
 */
@property(nonatomic, copy, nullable) NSString *clientCertificate;

/**
 *  Input only. The unencrypted PKCS#1 or PKCS#8 PEM-encoded private key
 *  associated with the Client Certificate. If this field is used then the
 *  'client_certificate' field is mandatory.
 */
@property(nonatomic, copy, nullable) NSString *clientKey;

/**
 *  Output only. The ssl config type according to 'client_key',
 *  'client_certificate' and 'ca_certificate'.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_SslConfig_Type_ServerClient Both
 *        server ('ca_certificate'), and client ('client_key',
 *        'client_certificate') specified. (Value: "SERVER_CLIENT")
 *    @arg @c kGTLRDatabaseMigrationService_SslConfig_Type_ServerOnly Only
 *        'ca_certificate' specified. (Value: "SERVER_ONLY")
 *    @arg @c kGTLRDatabaseMigrationService_SslConfig_Type_SslTypeUnspecified
 *        Unspecified. (Value: "SSL_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Request message for 'StartMigrationJob' request.
 */
@interface GTLRDatabaseMigrationService_StartMigrationJobRequest : GTLRObject

/**
 *  Optional. Start the migration job without running prior configuration
 *  verification. Defaults to `false`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *skipValidation;

@end


/**
 *  The source database will allow incoming connections from the public IP of
 *  the destination database. You can retrieve the public IP of the Cloud SQL
 *  instance from the Cloud SQL console or using Cloud SQL APIs. No additional
 *  configuration is required.
 */
@interface GTLRDatabaseMigrationService_StaticIpConnectivity : GTLRObject
@end


/**
 *  Static IP address connectivity configured on service project.
 */
@interface GTLRDatabaseMigrationService_StaticServiceIpConnectivity : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRDatabaseMigrationService_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRDatabaseMigrationService_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_Status_Details_Item : GTLRObject
@end


/**
 *  Request message for 'StopMigrationJob' request.
 */
@interface GTLRDatabaseMigrationService_StopMigrationJobRequest : GTLRObject
@end


/**
 *  Stored procedure's parent is a schema.
 */
@interface GTLRDatabaseMigrationService_StoredProcedureEntity : GTLRObject

/** Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_StoredProcedureEntity_CustomFeatures *customFeatures;

/** The SQL code which creates the stored procedure. */
@property(nonatomic, copy, nullable) NSString *sqlCode;

@end


/**
 *  Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_StoredProcedureEntity_CustomFeatures : GTLRObject
@end


/**
 *  Synonym's parent is a schema.
 */
@interface GTLRDatabaseMigrationService_SynonymEntity : GTLRObject

/** Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_SynonymEntity_CustomFeatures *customFeatures;

/**
 *  The name of the entity for which the synonym is being created (the source).
 */
@property(nonatomic, copy, nullable) NSString *sourceEntity;

/**
 *  The type of the entity for which the synonym is being created (usually a
 *  table or a sequence).
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeColumn
 *        Column. (Value: "DATABASE_ENTITY_TYPE_COLUMN")
 *    @arg @c kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeConstraint
 *        Constraint. (Value: "DATABASE_ENTITY_TYPE_CONSTRAINT")
 *    @arg @c kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeDatabase
 *        Database. (Value: "DATABASE_ENTITY_TYPE_DATABASE")
 *    @arg @c kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeDatabasePackage
 *        Package. (Value: "DATABASE_ENTITY_TYPE_DATABASE_PACKAGE")
 *    @arg @c kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeFunction
 *        Function. (Value: "DATABASE_ENTITY_TYPE_FUNCTION")
 *    @arg @c kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeIndex
 *        Index. (Value: "DATABASE_ENTITY_TYPE_INDEX")
 *    @arg @c kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeMaterializedView
 *        Materialized View. (Value: "DATABASE_ENTITY_TYPE_MATERIALIZED_VIEW")
 *    @arg @c kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeSchema
 *        Schema. (Value: "DATABASE_ENTITY_TYPE_SCHEMA")
 *    @arg @c kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeSequence
 *        Sequence. (Value: "DATABASE_ENTITY_TYPE_SEQUENCE")
 *    @arg @c kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeStoredProcedure
 *        Stored Procedure. (Value: "DATABASE_ENTITY_TYPE_STORED_PROCEDURE")
 *    @arg @c kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeSynonym
 *        Synonym. (Value: "DATABASE_ENTITY_TYPE_SYNONYM")
 *    @arg @c kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeTable
 *        Table. (Value: "DATABASE_ENTITY_TYPE_TABLE")
 *    @arg @c kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeTrigger
 *        Trigger. (Value: "DATABASE_ENTITY_TYPE_TRIGGER")
 *    @arg @c kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeUdt
 *        UDT. (Value: "DATABASE_ENTITY_TYPE_UDT")
 *    @arg @c kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeUnspecified
 *        Unspecified database entity type. (Value:
 *        "DATABASE_ENTITY_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationService_SynonymEntity_SourceType_DatabaseEntityTypeView
 *        View. (Value: "DATABASE_ENTITY_TYPE_VIEW")
 */
@property(nonatomic, copy, nullable) NSString *sourceType;

@end


/**
 *  Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_SynonymEntity_CustomFeatures : GTLRObject
@end


/**
 *  Table's parent is a schema.
 */
@interface GTLRDatabaseMigrationService_TableEntity : GTLRObject

/** Table columns. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_ColumnEntity *> *columns;

/** Comment associated with the table. */
@property(nonatomic, copy, nullable) NSString *comment;

/** Table constraints. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_ConstraintEntity *> *constraints;

/** Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_TableEntity_CustomFeatures *customFeatures;

/** Table indices. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_IndexEntity *> *indices;

/** Table triggers. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_TriggerEntity *> *triggers;

@end


/**
 *  Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_TableEntity_CustomFeatures : GTLRObject
@end


/**
 *  Response message for 'GenerateTcpProxyScript' request.
 */
@interface GTLRDatabaseMigrationService_TcpProxyScript : GTLRObject

/** The TCP Proxy configuration script. */
@property(nonatomic, copy, nullable) NSString *script;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRDatabaseMigrationService_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRDatabaseMigrationService_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Trigger is not used as an independent entity, it is retrieved as part of a
 *  Table entity.
 */
@interface GTLRDatabaseMigrationService_TriggerEntity : GTLRObject

/** Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_TriggerEntity_CustomFeatures *customFeatures;

/** The name of the trigger. */
@property(nonatomic, copy, nullable) NSString *name;

/** The SQL code which creates the trigger. */
@property(nonatomic, copy, nullable) NSString *sqlCode;

/**
 *  The DML, DDL, or database events that fire the trigger, for example INSERT,
 *  UPDATE.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *triggeringEvents;

/**
 *  Indicates when the trigger fires, for example BEFORE STATEMENT, AFTER EACH
 *  ROW.
 */
@property(nonatomic, copy, nullable) NSString *triggerType;

@end


/**
 *  Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_TriggerEntity_CustomFeatures : GTLRObject
@end


/**
 *  UDT's parent is a schema.
 */
@interface GTLRDatabaseMigrationService_UDTEntity : GTLRObject

/** Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_UDTEntity_CustomFeatures *customFeatures;

/** The SQL code which creates the udt body. */
@property(nonatomic, copy, nullable) NSString *udtBody;

/** The SQL code which creates the udt. */
@property(nonatomic, copy, nullable) NSString *udtSqlCode;

@end


/**
 *  Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_UDTEntity_CustomFeatures : GTLRObject
@end


/**
 *  The username/password for a database user. Used for specifying initial users
 *  at cluster creation time.
 */
@interface GTLRDatabaseMigrationService_UserPassword : GTLRObject

/** The initial password for the user. */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  Output only. Indicates if the initial_user.password field has been set.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *passwordSet;

/** The database username. */
@property(nonatomic, copy, nullable) NSString *user;

@end


/**
 *  A list of values to filter by in ConditionalColumnSetValue
 */
@interface GTLRDatabaseMigrationService_ValueListFilter : GTLRObject

/**
 *  Required. Whether to ignore case when filtering by values. Defaults to false
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreCase;

/**
 *  Required. Indicates whether the filter matches rows with values that are
 *  present in the list or those with values not present in it.
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationService_ValueListFilter_ValuePresentList_ValuePresentInListIfValueList
 *        If the source value is in the supplied list at value_list (Value:
 *        "VALUE_PRESENT_IN_LIST_IF_VALUE_LIST")
 *    @arg @c kGTLRDatabaseMigrationService_ValueListFilter_ValuePresentList_ValuePresentInListIfValueNotList
 *        If the source value is not in the supplied list at value_list (Value:
 *        "VALUE_PRESENT_IN_LIST_IF_VALUE_NOT_LIST")
 *    @arg @c kGTLRDatabaseMigrationService_ValueListFilter_ValuePresentList_ValuePresentInListUnspecified
 *        Value present in list unspecified (Value:
 *        "VALUE_PRESENT_IN_LIST_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *valuePresentList;

/** Required. The list to be used to filter by */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  Description of data transformation during migration as part of the
 *  ConditionalColumnSetValue.
 */
@interface GTLRDatabaseMigrationService_ValueTransformation : GTLRObject

/** Optional. Applies a hash function on the data */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ApplyHash *applyHash;

/**
 *  Optional. Set to max_value - if integer or numeric, will use int.maxvalue,
 *  etc
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Empty *assignMaxValue;

/**
 *  Optional. Set to min_value - if integer or numeric, will use int.minvalue,
 *  etc
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Empty *assignMinValue;

/** Optional. Set to null */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Empty *assignNull;

/**
 *  Optional. Set to a specific value (value is converted to fit the target data
 *  type)
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_AssignSpecificValue *assignSpecificValue;

/**
 *  Optional. Filter on relation between source value and compare value of type
 *  double.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_DoubleComparisonFilter *doubleComparison;

/**
 *  Optional. Filter on relation between source value and compare value of type
 *  integer.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_IntComparisonFilter *intComparison;

/** Optional. Value is null */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_Empty *isNull;

/** Optional. Allows the data to change scale */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_RoundToScale *roundScale;

/** Optional. Value is found in the specified list. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ValueListFilter *valueList;

@end


/**
 *  Request message for 'VerifyMigrationJob' request.
 */
@interface GTLRDatabaseMigrationService_VerifyMigrationJobRequest : GTLRObject

/**
 *  Optional. The changed migration job parameters to verify. It will not update
 *  the migration job.
 */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_MigrationJob *migrationJob;

/**
 *  Optional. Field mask is used to specify the changed fields to be verified.
 *  It will not update the migration job.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  View's parent is a schema.
 */
@interface GTLRDatabaseMigrationService_ViewEntity : GTLRObject

/** View constraints. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatabaseMigrationService_ConstraintEntity *> *constraints;

/** Custom engine specific features. */
@property(nonatomic, strong, nullable) GTLRDatabaseMigrationService_ViewEntity_CustomFeatures *customFeatures;

/** The SQL code which creates the view. */
@property(nonatomic, copy, nullable) NSString *sqlCode;

@end


/**
 *  Custom engine specific features.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatabaseMigrationService_ViewEntity_CustomFeatures : GTLRObject
@end


/**
 *  VM creation configuration message
 */
@interface GTLRDatabaseMigrationService_VmCreationConfig : GTLRObject

/** The subnet name the vm needs to be created in. */
@property(nonatomic, copy, nullable) NSString *subnet;

/** Required. VM instance machine type to create. */
@property(nonatomic, copy, nullable) NSString *vmMachineType;

/** The Google Cloud Platform zone to create the VM in. */
@property(nonatomic, copy, nullable) NSString *vmZone;

@end


/**
 *  VM selection configuration message
 */
@interface GTLRDatabaseMigrationService_VmSelectionConfig : GTLRObject

/** Required. The Google Cloud Platform zone the VM is located. */
@property(nonatomic, copy, nullable) NSString *vmZone;

@end


/**
 *  The VPC peering configuration is used to create VPC peering with the
 *  consumer's VPC.
 */
@interface GTLRDatabaseMigrationService_VpcPeeringConfig : GTLRObject

/** Required. A free subnet for peering. (CIDR of /29) */
@property(nonatomic, copy, nullable) NSString *subnet;

/**
 *  Required. Fully qualified name of the VPC that Database Migration Service
 *  will peer to.
 */
@property(nonatomic, copy, nullable) NSString *vpcName;

@end


/**
 *  The details of the VPC where the source database is located in Google Cloud.
 *  We will use this information to set up the VPC peering connection between
 *  Cloud SQL and this VPC.
 */
@interface GTLRDatabaseMigrationService_VpcPeeringConnectivity : GTLRObject

/** The name of the VPC network to peer with the Cloud SQL private network. */
@property(nonatomic, copy, nullable) NSString *vpc;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
