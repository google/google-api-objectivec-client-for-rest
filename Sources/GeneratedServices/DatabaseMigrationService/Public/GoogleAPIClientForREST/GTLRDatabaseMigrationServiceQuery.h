// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Database Migration API (datamigration/v1)
// Description:
//   Manage Cloud Database Migration Service resources on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/database-migration/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRDatabaseMigrationServiceObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// tree

/**
 *  Unspecified tree type
 *
 *  Value: "DB_TREE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationServiceTreeDbTreeTypeUnspecified;
/**
 *  The destination database tree
 *
 *  Value: "DESTINATION_TREE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationServiceTreeDestinationTree;
/**
 *  The draft database tree
 *
 *  Value: "DRAFT_TREE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationServiceTreeDraftTree;
/**
 *  The source database tree
 *
 *  Value: "SOURCE_TREE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatabaseMigrationServiceTreeSourceTree;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Database Migration Service query classes.
 */
@interface GTLRDatabaseMigrationServiceQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new connection profile in a given project and location.
 *
 *  Method: datamigration.projects.locations.connectionProfiles.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConnectionProfilesCreate : GTLRDatabaseMigrationServiceQuery

/** Required. The connection profile identifier. */
@property(nonatomic, copy, nullable) NSString *connectionProfileId;

/**
 *  Required. The parent, which owns this collection of connection profiles.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. A unique id used to identify the request. If the server receives
 *  two requests with the same id, then the second request will be ignored. It
 *  is recommended to always set this value to a UUID. The id must contain only
 *  letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The
 *  maximum length is 40 characters.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Create the connection profile without validating it. The default
 *  is false. Only supported for Oracle connection profiles.
 */
@property(nonatomic, assign) BOOL skipValidation;

/**
 *  Optional. Only validate the connection profile, but don't create any
 *  resources. The default is false. Only supported for Oracle connection
 *  profiles.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Creates a new connection profile in a given project and location.
 *
 *  @param object The @c GTLRDatabaseMigrationService_ConnectionProfile to
 *    include in the query.
 *  @param parent Required. The parent, which owns this collection of connection
 *    profiles.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConnectionProfilesCreate
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_ConnectionProfile *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Database Migration Service connection profile. A connection
 *  profile can only be deleted if it is not in use by any active migration
 *  jobs.
 *
 *  Method: datamigration.projects.locations.connectionProfiles.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConnectionProfilesDelete : GTLRDatabaseMigrationServiceQuery

/**
 *  In case of force delete, the CloudSQL replica database is also deleted (only
 *  for CloudSQL connection profile).
 */
@property(nonatomic, assign) BOOL force;

/** Required. Name of the connection profile resource to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A unique id used to identify the request. If the server receives two
 *  requests with the same id, then the second request will be ignored. It is
 *  recommended to always set this value to a UUID. The id must contain only
 *  letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The
 *  maximum length is 40 characters.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Deletes a single Database Migration Service connection profile. A connection
 *  profile can only be deleted if it is not in use by any active migration
 *  jobs.
 *
 *  @param name Required. Name of the connection profile resource to delete.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConnectionProfilesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single connection profile.
 *
 *  Method: datamigration.projects.locations.connectionProfiles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConnectionProfilesGet : GTLRDatabaseMigrationServiceQuery

/** Required. Name of the connection profile resource to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_ConnectionProfile.
 *
 *  Gets details of a single connection profile.
 *
 *  @param name Required. Name of the connection profile resource to get.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConnectionProfilesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: datamigration.projects.locations.connectionProfiles.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConnectionProfilesGetIamPolicy : GTLRDatabaseMigrationServiceQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConnectionProfilesGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Retrieves a list of all connection profiles in a given project and location.
 *
 *  Method: datamigration.projects.locations.connectionProfiles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConnectionProfilesList : GTLRDatabaseMigrationServiceQuery

/**
 *  A filter expression that filters connection profiles listed in the response.
 *  The expression must specify the field name, a comparison operator, and the
 *  value that you want to use for filtering. The value must be a string, a
 *  number, or a boolean. The comparison operator must be either =, !=, >, or <.
 *  For example, list connection profiles created this year by specifying
 *  **createTime %gt; 2020-01-01T00:00:00.000000000Z**. You can also filter
 *  nested fields. For example, you could specify **mySql.username =
 *  %lt;my_username%gt;** to list all connection profiles configured to connect
 *  with a specific username.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** A comma-separated list of fields to order results according to. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of connection profiles to return. The service may return
 *  fewer than this value. If unspecified, at most 50 connection profiles will
 *  be returned. The maximum value is 1000; values above 1000 will be coerced to
 *  1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token, received from a previous `ListConnectionProfiles` call.
 *  Provide this to retrieve the subsequent page. When paginating, all other
 *  parameters provided to `ListConnectionProfiles` must match the call that
 *  provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent, which owns this collection of connection profiles.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_ListConnectionProfilesResponse.
 *
 *  Retrieves a list of all connection profiles in a given project and location.
 *
 *  @param parent Required. The parent, which owns this collection of connection
 *    profiles.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConnectionProfilesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Update the configuration of a single connection profile.
 *
 *  Method: datamigration.projects.locations.connectionProfiles.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConnectionProfilesPatch : GTLRDatabaseMigrationServiceQuery

/**
 *  The name of this connection profile resource in the form of
 *  projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. A unique id used to identify the request. If the server receives
 *  two requests with the same id, then the second request will be ignored. It
 *  is recommended to always set this value to a UUID. The id must contain only
 *  letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The
 *  maximum length is 40 characters.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Update the connection profile without validating it. The default
 *  is false. Only supported for Oracle connection profiles.
 */
@property(nonatomic, assign) BOOL skipValidation;

/**
 *  Required. Field mask is used to specify the fields to be overwritten in the
 *  connection profile resource by the update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Optional. Only validate the connection profile, but don't update any
 *  resources. The default is false. Only supported for Oracle connection
 *  profiles.
 */
@property(nonatomic, assign) BOOL validateOnly;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Update the configuration of a single connection profile.
 *
 *  @param object The @c GTLRDatabaseMigrationService_ConnectionProfile to
 *    include in the query.
 *  @param name The name of this connection profile resource in the form of
 *    projects/{project}/locations/{location}/connectionProfiles/{connectionProfile}.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConnectionProfilesPatch
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_ConnectionProfile *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: datamigration.projects.locations.connectionProfiles.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConnectionProfilesSetIamPolicy : GTLRDatabaseMigrationServiceQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRDatabaseMigrationService_SetIamPolicyRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConnectionProfilesSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: datamigration.projects.locations.connectionProfiles.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConnectionProfilesTestIamPermissions : GTLRDatabaseMigrationServiceQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRDatabaseMigrationService_TestIamPermissionsRequest
 *    to include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConnectionProfilesTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Apply draft tree onto a specific destination database
 *
 *  Method: datamigration.projects.locations.conversionWorkspaces.apply
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesApply : GTLRDatabaseMigrationServiceQuery

/**
 *  Required. Name of the conversion workspace resource to apply draft to
 *  destination for. in the form of:
 *  projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Apply draft tree onto a specific destination database
 *
 *  @param object The @c
 *    GTLRDatabaseMigrationService_ApplyConversionWorkspaceRequest to include in
 *    the query.
 *  @param name Required. Name of the conversion workspace resource to apply
 *    draft to destination for. in the form of:
 *    projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesApply
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_ApplyConversionWorkspaceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Marks all the data in the conversion workspace as committed.
 *
 *  Method: datamigration.projects.locations.conversionWorkspaces.commit
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesCommit : GTLRDatabaseMigrationServiceQuery

/** Required. Name of the conversion workspace resource to commit. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Marks all the data in the conversion workspace as committed.
 *
 *  @param object The @c
 *    GTLRDatabaseMigrationService_CommitConversionWorkspaceRequest to include
 *    in the query.
 *  @param name Required. Name of the conversion workspace resource to commit.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesCommit
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_CommitConversionWorkspaceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a draft tree schema for the destination database.
 *
 *  Method: datamigration.projects.locations.conversionWorkspaces.convert
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesConvert : GTLRDatabaseMigrationServiceQuery

/**
 *  Name of the conversion workspace resource to convert in the form of:
 *  projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Creates a draft tree schema for the destination database.
 *
 *  @param object The @c
 *    GTLRDatabaseMigrationService_ConvertConversionWorkspaceRequest to include
 *    in the query.
 *  @param name Name of the conversion workspace resource to convert in the form
 *    of:
 *    projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesConvert
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_ConvertConversionWorkspaceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new conversion workspace in a given project and location.
 *
 *  Method: datamigration.projects.locations.conversionWorkspaces.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesCreate : GTLRDatabaseMigrationServiceQuery

/** Required. The ID of the conversion workspace to create. */
@property(nonatomic, copy, nullable) NSString *conversionWorkspaceId;

/**
 *  Required. The parent, which owns this collection of conversion workspaces.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  A unique id used to identify the request. If the server receives two
 *  requests with the same id, then the second request will be ignored. It is
 *  recommended to always set this value to a UUID. The id must contain only
 *  letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The
 *  maximum length is 40 characters.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Creates a new conversion workspace in a given project and location.
 *
 *  @param object The @c GTLRDatabaseMigrationService_ConversionWorkspace to
 *    include in the query.
 *  @param parent Required. The parent, which owns this collection of conversion
 *    workspaces.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesCreate
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_ConversionWorkspace *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single conversion workspace.
 *
 *  Method: datamigration.projects.locations.conversionWorkspaces.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesDelete : GTLRDatabaseMigrationServiceQuery

/** Required. Name of the conversion workspace resource to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A unique id used to identify the request. If the server receives two
 *  requests with the same id, then the second request will be ignored. It is
 *  recommended to always set this value to a UUID. The id must contain only
 *  letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The
 *  maximum length is 40 characters.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Deletes a single conversion workspace.
 *
 *  @param name Required. Name of the conversion workspace resource to delete.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieves a list of committed revisions of a specific conversion workspace.
 *
 *  Method: datamigration.projects.locations.conversionWorkspaces.describeConversionWorkspaceRevisions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisions : GTLRDatabaseMigrationServiceQuery

/** Optional. Optional filter to request a specific commit id */
@property(nonatomic, copy, nullable) NSString *commitId;

/**
 *  Required. Name of the conversion workspace resource whose revisions are
 *  listed. in the form of:
 *  projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 */
@property(nonatomic, copy, nullable) NSString *conversionWorkspace;

/**
 *  Fetches a @c
 *  GTLRDatabaseMigrationService_DescribeConversionWorkspaceRevisionsResponse.
 *
 *  Retrieves a list of committed revisions of a specific conversion workspace.
 *
 *  @param conversionWorkspace Required. Name of the conversion workspace
 *    resource whose revisions are listed. in the form of:
 *    projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesDescribeConversionWorkspaceRevisions
 */
+ (instancetype)queryWithConversionWorkspace:(NSString *)conversionWorkspace;

@end

/**
 *  Use this method to describe the database entities tree for a specific
 *  conversion workspace and a specific tree type. The DB Entities are not a
 *  resource like conversion workspace or mapping rule, and they can not be
 *  created, updated or deleted like one. Instead they are simple data objects
 *  describing the structure of the client database.
 *
 *  Method: datamigration.projects.locations.conversionWorkspaces.describeDatabaseEntities
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesDescribeDatabaseEntities : GTLRDatabaseMigrationServiceQuery

/**
 *  Request a specific commit id. If not specified, the entities from the latest
 *  commit are returned.
 */
@property(nonatomic, copy, nullable) NSString *commitId;

/**
 *  Required. Name of the conversion workspace resource whose DB entities are
 *  described in the form of:
 *  projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 */
@property(nonatomic, copy, nullable) NSString *conversionWorkspace;

/** Filter the returned entities based on AIP-160 standard */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The maximum number of entities to return. The service may return fewer than
 *  this value.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The nextPageToken value received in the previous call to
 *  conversionWorkspace.describeDatabaseEntities, used in the subsequent request
 *  to retrieve the next page of results. On first call this should be left
 *  blank. When paginating, all other parameters provided to
 *  conversionWorkspace.describeDatabaseEntities must match the call that
 *  provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The tree to fetch
 *
 *  Likely values:
 *    @arg @c kGTLRDatabaseMigrationServiceTreeDbTreeTypeUnspecified Unspecified
 *        tree type (Value: "DB_TREE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRDatabaseMigrationServiceTreeSourceTree The source database
 *        tree (Value: "SOURCE_TREE")
 *    @arg @c kGTLRDatabaseMigrationServiceTreeDraftTree The draft database tree
 *        (Value: "DRAFT_TREE")
 *    @arg @c kGTLRDatabaseMigrationServiceTreeDestinationTree The destination
 *        database tree (Value: "DESTINATION_TREE")
 */
@property(nonatomic, copy, nullable) NSString *tree;

/**
 *  Whether to retrieve the latest committed version of the entities or the
 *  latest version. This field is ignored if a specific commit_id is specified.
 */
@property(nonatomic, assign) BOOL uncommitted;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_DescribeDatabaseEntitiesResponse.
 *
 *  Use this method to describe the database entities tree for a specific
 *  conversion workspace and a specific tree type. The DB Entities are not a
 *  resource like conversion workspace or mapping rule, and they can not be
 *  created, updated or deleted like one. Instead they are simple data objects
 *  describing the structure of the client database.
 *
 *  @param conversionWorkspace Required. Name of the conversion workspace
 *    resource whose DB entities are described in the form of:
 *    projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesDescribeDatabaseEntities
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithConversionWorkspace:(NSString *)conversionWorkspace;

@end

/**
 *  Gets details of a single conversion workspace.
 *
 *  Method: datamigration.projects.locations.conversionWorkspaces.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesGet : GTLRDatabaseMigrationServiceQuery

/** Required. Name of the conversion workspace resource to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_ConversionWorkspace.
 *
 *  Gets details of a single conversion workspace.
 *
 *  @param name Required. Name of the conversion workspace resource to get.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists conversion workspaces in a given project and location.
 *
 *  Method: datamigration.projects.locations.conversionWorkspaces.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesList : GTLRDatabaseMigrationServiceQuery

/**
 *  A filter expression that filters conversion workspaces listed in the
 *  response. The expression must specify the field name, a comparison operator,
 *  and the value that you want to use for filtering. The value must be a
 *  string, a number, or a boolean. The comparison operator must be either =,
 *  !=, >, or <. For example, list conversion workspaces created this year by
 *  specifying **createTime %gt; 2020-01-01T00:00:00.000000000Z.** You can also
 *  filter nested fields. For example, you could specify **source.version =
 *  "12.c.1"** to select all conversion workspaces with source database version
 *  equal to 12.c.1
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  The maximum number of conversion workspaces to return. The service may
 *  return fewer than this value. If unspecified, at most 50 sets will be
 *  returned.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The nextPageToken value received in the previous call to
 *  conversionWorkspaces.list, used in the subsequent request to retrieve the
 *  next page of results. On first call this should be left blank. When
 *  paginating, all other parameters provided to conversionWorkspaces.list must
 *  match the call that provided the page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent, which owns this collection of conversion workspaces.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_ListConversionWorkspacesResponse.
 *
 *  Lists conversion workspaces in a given project and location.
 *
 *  @param parent Required. The parent, which owns this collection of conversion
 *    workspaces.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Imports the mapping rules for a given conversion workspace. Supports various
 *  formats of external rules files.
 *
 *  Method: datamigration.projects.locations.conversionWorkspaces.mappingRules.import
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesMappingRulesImport : GTLRDatabaseMigrationServiceQuery

/**
 *  Required. Name of the conversion workspace resource to import the rules to
 *  in the form of:
 *  projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Imports the mapping rules for a given conversion workspace. Supports various
 *  formats of external rules files.
 *
 *  @param object The @c GTLRDatabaseMigrationService_ImportMappingRulesRequest
 *    to include in the query.
 *  @param parent Required. Name of the conversion workspace resource to import
 *    the rules to in the form of:
 *    projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesMappingRulesImport
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_ImportMappingRulesRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Updates the parameters of a single conversion workspace.
 *
 *  Method: datamigration.projects.locations.conversionWorkspaces.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesPatch : GTLRDatabaseMigrationServiceQuery

/**
 *  Full name of the workspace resource, in the form of:
 *  projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A unique id used to identify the request. If the server receives two
 *  requests with the same id, then the second request will be ignored. It is
 *  recommended to always set this value to a UUID. The id must contain only
 *  letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The
 *  maximum length is 40 characters.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. Field mask is used to specify the fields to be overwritten in the
 *  conversion workspace resource by the update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Updates the parameters of a single conversion workspace.
 *
 *  @param object The @c GTLRDatabaseMigrationService_ConversionWorkspace to
 *    include in the query.
 *  @param name Full name of the workspace resource, in the form of:
 *    projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesPatch
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_ConversionWorkspace *)object
                           name:(NSString *)name;

@end

/**
 *  Rollbacks a conversion workspace to the last committed spanshot.
 *
 *  Method: datamigration.projects.locations.conversionWorkspaces.rollback
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesRollback : GTLRDatabaseMigrationServiceQuery

/** Required. Name of the conversion workspace resource to rollback to. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Rollbacks a conversion workspace to the last committed spanshot.
 *
 *  @param object The @c
 *    GTLRDatabaseMigrationService_RollbackConversionWorkspaceRequest to include
 *    in the query.
 *  @param name Required. Name of the conversion workspace resource to rollback
 *    to.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesRollback
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_RollbackConversionWorkspaceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Use this method to search/list the background jobs for a specific conversion
 *  workspace. The background jobs are not a resource like conversion workspace
 *  or mapping rule, and they can not be created, updated or deleted like one.
 *  Instead they are a way to expose the data plane jobs log.
 *
 *  Method: datamigration.projects.locations.conversionWorkspaces.searchBackgroundJobs
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesSearchBackgroundJobs : GTLRDatabaseMigrationServiceQuery

/**
 *  Optional. If supplied, will only return jobs that completed until (not
 *  including) the given timestamp.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *completedUntilTime;

/**
 *  Required. Name of the conversion workspace resource whos jobs are listed. in
 *  the form of:
 *  projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 */
@property(nonatomic, copy, nullable) NSString *conversionWorkspace;

/**
 *  Optional. The maximum number of jobs to return. The service may return fewer
 *  than this value. If unspecified, at most 100 jobs will be returned. The
 *  maximum value is 100; values above 100 will be coerced to 100.
 */
@property(nonatomic, assign) NSInteger maxSize;

/**
 *  Optional. Whether or not to return just the most recent job per job type
 */
@property(nonatomic, assign) BOOL returnMostRecentPerJobType;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_SearchBackgroundJobsResponse.
 *
 *  Use this method to search/list the background jobs for a specific conversion
 *  workspace. The background jobs are not a resource like conversion workspace
 *  or mapping rule, and they can not be created, updated or deleted like one.
 *  Instead they are a way to expose the data plane jobs log.
 *
 *  @param conversionWorkspace Required. Name of the conversion workspace
 *    resource whos jobs are listed. in the form of:
 *    projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesSearchBackgroundJobs
 */
+ (instancetype)queryWithConversionWorkspace:(NSString *)conversionWorkspace;

@end

/**
 *  Imports a snapshot of the source database into the conversion workspace.
 *
 *  Method: datamigration.projects.locations.conversionWorkspaces.seed
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesSeed : GTLRDatabaseMigrationServiceQuery

/**
 *  Name of the conversion workspace resource to seed with new database
 *  structure. in the form of:
 *  projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Imports a snapshot of the source database into the conversion workspace.
 *
 *  @param object The @c
 *    GTLRDatabaseMigrationService_SeedConversionWorkspaceRequest to include in
 *    the query.
 *  @param name Name of the conversion workspace resource to seed with new
 *    database structure. in the form of:
 *    projects/{project}/locations/{location}/conversionWorkspaces/{conversion_workspace}.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsConversionWorkspacesSeed
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_SeedConversionWorkspaceRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a location.
 *
 *  Method: datamigration.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsGet : GTLRDatabaseMigrationServiceQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: datamigration.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsList : GTLRDatabaseMigrationServiceQuery

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new migration job in a given project and location.
 *
 *  Method: datamigration.projects.locations.migrationJobs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsCreate : GTLRDatabaseMigrationServiceQuery

/** Required. The ID of the instance to create. */
@property(nonatomic, copy, nullable) NSString *migrationJobId;

/** Required. The parent, which owns this collection of migration jobs. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  A unique id used to identify the request. If the server receives two
 *  requests with the same id, then the second request will be ignored. It is
 *  recommended to always set this value to a UUID. The id must contain only
 *  letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The
 *  maximum length is 40 characters.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Creates a new migration job in a given project and location.
 *
 *  @param object The @c GTLRDatabaseMigrationService_MigrationJob to include in
 *    the query.
 *  @param parent Required. The parent, which owns this collection of migration
 *    jobs.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsCreate
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_MigrationJob *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single migration job.
 *
 *  Method: datamigration.projects.locations.migrationJobs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsDelete : GTLRDatabaseMigrationServiceQuery

/**
 *  The destination CloudSQL connection profile is always deleted with the
 *  migration job. In case of force delete, the destination CloudSQL replica
 *  database is also deleted.
 */
@property(nonatomic, assign) BOOL force;

/** Required. Name of the migration job resource to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A unique id used to identify the request. If the server receives two
 *  requests with the same id, then the second request will be ignored. It is
 *  recommended to always set this value to a UUID. The id must contain only
 *  letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The
 *  maximum length is 40 characters.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Deletes a single migration job.
 *
 *  @param name Required. Name of the migration job resource to delete.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Generate a SSH configuration script to configure the reverse SSH
 *  connectivity.
 *
 *  Method: datamigration.projects.locations.migrationJobs.generateSshScript
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsGenerateSshScript : GTLRDatabaseMigrationServiceQuery

/** Name of the migration job resource to generate the SSH script. */
@property(nonatomic, copy, nullable) NSString *migrationJob;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_SshScript.
 *
 *  Generate a SSH configuration script to configure the reverse SSH
 *  connectivity.
 *
 *  @param object The @c GTLRDatabaseMigrationService_GenerateSshScriptRequest
 *    to include in the query.
 *  @param migrationJob Name of the migration job resource to generate the SSH
 *    script.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsGenerateSshScript
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_GenerateSshScriptRequest *)object
                   migrationJob:(NSString *)migrationJob;

@end

/**
 *  Gets details of a single migration job.
 *
 *  Method: datamigration.projects.locations.migrationJobs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsGet : GTLRDatabaseMigrationServiceQuery

/** Required. Name of the migration job resource to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_MigrationJob.
 *
 *  Gets details of a single migration job.
 *
 *  @param name Required. Name of the migration job resource to get.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: datamigration.projects.locations.migrationJobs.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsGetIamPolicy : GTLRDatabaseMigrationServiceQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Lists migration jobs in a given project and location.
 *
 *  Method: datamigration.projects.locations.migrationJobs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsList : GTLRDatabaseMigrationServiceQuery

/**
 *  A filter expression that filters migration jobs listed in the response. The
 *  expression must specify the field name, a comparison operator, and the value
 *  that you want to use for filtering. The value must be a string, a number, or
 *  a boolean. The comparison operator must be either =, !=, >, or <. For
 *  example, list migration jobs created this year by specifying **createTime
 *  %gt; 2020-01-01T00:00:00.000000000Z.** You can also filter nested fields.
 *  For example, you could specify **reverseSshConnectivity.vmIp = "1.2.3.4"**
 *  to select all migration jobs connecting through the specific SSH tunnel
 *  bastion.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Sort the results based on the migration job name. Valid values are: "name",
 *  "name asc", and "name desc".
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  The maximum number of migration jobs to return. The service may return fewer
 *  than this value. If unspecified, at most 50 migration jobs will be returned.
 *  The maximum value is 1000; values above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The nextPageToken value received in the previous call to migrationJobs.list,
 *  used in the subsequent request to retrieve the next page of results. On
 *  first call this should be left blank. When paginating, all other parameters
 *  provided to migrationJobs.list must match the call that provided the page
 *  token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The parent, which owns this collection of migrationJobs. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_ListMigrationJobsResponse.
 *
 *  Lists migration jobs in a given project and location.
 *
 *  @param parent Required. The parent, which owns this collection of
 *    migrationJobs.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the parameters of a single migration job.
 *
 *  Method: datamigration.projects.locations.migrationJobs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsPatch : GTLRDatabaseMigrationServiceQuery

/**
 *  The name (URI) of this migration job resource, in the form of:
 *  projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A unique id used to identify the request. If the server receives two
 *  requests with the same id, then the second request will be ignored. It is
 *  recommended to always set this value to a UUID. The id must contain only
 *  letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The
 *  maximum length is 40 characters.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Required. Field mask is used to specify the fields to be overwritten in the
 *  migration job resource by the update.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Updates the parameters of a single migration job.
 *
 *  @param object The @c GTLRDatabaseMigrationService_MigrationJob to include in
 *    the query.
 *  @param name The name (URI) of this migration job resource, in the form of:
 *    projects/{project}/locations/{location}/migrationJobs/{migrationJob}.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsPatch
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_MigrationJob *)object
                           name:(NSString *)name;

@end

/**
 *  Promote a migration job, stopping replication to the destination and
 *  promoting the destination to be a standalone database.
 *
 *  Method: datamigration.projects.locations.migrationJobs.promote
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsPromote : GTLRDatabaseMigrationServiceQuery

/** Name of the migration job resource to promote. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Promote a migration job, stopping replication to the destination and
 *  promoting the destination to be a standalone database.
 *
 *  @param object The @c GTLRDatabaseMigrationService_PromoteMigrationJobRequest
 *    to include in the query.
 *  @param name Name of the migration job resource to promote.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsPromote
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_PromoteMigrationJobRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Restart a stopped or failed migration job, resetting the destination
 *  instance to its original state and starting the migration process from
 *  scratch.
 *
 *  Method: datamigration.projects.locations.migrationJobs.restart
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsRestart : GTLRDatabaseMigrationServiceQuery

/** Name of the migration job resource to restart. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Restart a stopped or failed migration job, resetting the destination
 *  instance to its original state and starting the migration process from
 *  scratch.
 *
 *  @param object The @c GTLRDatabaseMigrationService_RestartMigrationJobRequest
 *    to include in the query.
 *  @param name Name of the migration job resource to restart.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsRestart
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_RestartMigrationJobRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Resume a migration job that is currently stopped and is resumable (was
 *  stopped during CDC phase).
 *
 *  Method: datamigration.projects.locations.migrationJobs.resume
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsResume : GTLRDatabaseMigrationServiceQuery

/** Name of the migration job resource to resume. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Resume a migration job that is currently stopped and is resumable (was
 *  stopped during CDC phase).
 *
 *  @param object The @c GTLRDatabaseMigrationService_ResumeMigrationJobRequest
 *    to include in the query.
 *  @param name Name of the migration job resource to resume.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsResume
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_ResumeMigrationJobRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: datamigration.projects.locations.migrationJobs.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsSetIamPolicy : GTLRDatabaseMigrationServiceQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRDatabaseMigrationService_SetIamPolicyRequest to
 *    include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Start an already created migration job.
 *
 *  Method: datamigration.projects.locations.migrationJobs.start
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsStart : GTLRDatabaseMigrationServiceQuery

/** Name of the migration job resource to start. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Start an already created migration job.
 *
 *  @param object The @c GTLRDatabaseMigrationService_StartMigrationJobRequest
 *    to include in the query.
 *  @param name Name of the migration job resource to start.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsStart
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_StartMigrationJobRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Stops a running migration job.
 *
 *  Method: datamigration.projects.locations.migrationJobs.stop
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsStop : GTLRDatabaseMigrationServiceQuery

/** Name of the migration job resource to stop. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Stops a running migration job.
 *
 *  @param object The @c GTLRDatabaseMigrationService_StopMigrationJobRequest to
 *    include in the query.
 *  @param name Name of the migration job resource to stop.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsStop
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_StopMigrationJobRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: datamigration.projects.locations.migrationJobs.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsTestIamPermissions : GTLRDatabaseMigrationServiceQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRDatabaseMigrationService_TestIamPermissionsRequest
 *    to include in the query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Verify a migration job, making sure the destination can reach the source and
 *  that all configuration and prerequisites are met.
 *
 *  Method: datamigration.projects.locations.migrationJobs.verify
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsVerify : GTLRDatabaseMigrationServiceQuery

/** Name of the migration job resource to verify. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Verify a migration job, making sure the destination can reach the source and
 *  that all configuration and prerequisites are met.
 *
 *  @param object The @c GTLRDatabaseMigrationService_VerifyMigrationJobRequest
 *    to include in the query.
 *  @param name Name of the migration job resource to verify.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsMigrationJobsVerify
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_VerifyMigrationJobRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: datamigration.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsOperationsCancel : GTLRDatabaseMigrationServiceQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRDatabaseMigrationService_CancelOperationRequest to
 *    include in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: datamigration.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsOperationsDelete : GTLRDatabaseMigrationServiceQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: datamigration.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsOperationsGet : GTLRDatabaseMigrationServiceQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: datamigration.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsOperationsList : GTLRDatabaseMigrationServiceQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new private connection in a given project and location.
 *
 *  Method: datamigration.projects.locations.privateConnections.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsPrivateConnectionsCreate : GTLRDatabaseMigrationServiceQuery

/** Required. The parent that owns the collection of PrivateConnections. */
@property(nonatomic, copy, nullable) NSString *parent;

/** Required. The private connection identifier. */
@property(nonatomic, copy, nullable) NSString *privateConnectionId;

/**
 *  Optional. A unique id used to identify the request. If the server receives
 *  two requests with the same id, then the second request will be ignored. It
 *  is recommended to always set this value to a UUID. The id must contain only
 *  letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The
 *  maximum length is 40 characters.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/** Optional. If set to true, will skip validations. */
@property(nonatomic, assign) BOOL skipValidation;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Creates a new private connection in a given project and location.
 *
 *  @param object The @c GTLRDatabaseMigrationService_PrivateConnection to
 *    include in the query.
 *  @param parent Required. The parent that owns the collection of
 *    PrivateConnections.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsPrivateConnectionsCreate
 */
+ (instancetype)queryWithObject:(GTLRDatabaseMigrationService_PrivateConnection *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Database Migration Service private connection.
 *
 *  Method: datamigration.projects.locations.privateConnections.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsPrivateConnectionsDelete : GTLRDatabaseMigrationServiceQuery

/** Required. The name of the private connection to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. A unique id used to identify the request. If the server receives
 *  two requests with the same id, then the second request will be ignored. It
 *  is recommended to always set this value to a UUID. The id must contain only
 *  letters (a-z, A-Z), numbers (0-9), underscores (_), and hyphens (-). The
 *  maximum length is 40 characters.
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_Operation.
 *
 *  Deletes a single Database Migration Service private connection.
 *
 *  @param name Required. The name of the private connection to delete.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsPrivateConnectionsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single private connection.
 *
 *  Method: datamigration.projects.locations.privateConnections.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsPrivateConnectionsGet : GTLRDatabaseMigrationServiceQuery

/** Required. The name of the private connection to get. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_PrivateConnection.
 *
 *  Gets details of a single private connection.
 *
 *  @param name Required. The name of the private connection to get.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsPrivateConnectionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieves a list of private connections in a given project and location.
 *
 *  Method: datamigration.projects.locations.privateConnections.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeDatabaseMigrationServiceCloudPlatform
 */
@interface GTLRDatabaseMigrationServiceQuery_ProjectsLocationsPrivateConnectionsList : GTLRDatabaseMigrationServiceQuery

/**
 *  A filter expression that filters private connections listed in the response.
 *  The expression must specify the field name, a comparison operator, and the
 *  value that you want to use for filtering. The value must be a string, a
 *  number, or a boolean. The comparison operator must be either =, !=, >, or <.
 *  For example, list private connections created this year by specifying
 *  **createTime %gt; 2021-01-01T00:00:00.000000000Z**.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Order by fields for the result. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Maximum number of private connections to return. If unspecified, at most 50
 *  private connections that will be returned. The maximum value is 1000; values
 *  above 1000 will be coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Page token received from a previous `ListPrivateConnections` call. Provide
 *  this to retrieve the subsequent page. When paginating, all other parameters
 *  provided to `ListPrivateConnections` must match the call that provided the
 *  page token.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The parent that owns the collection of private connections. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRDatabaseMigrationService_ListPrivateConnectionsResponse.
 *
 *  Retrieves a list of private connections in a given project and location.
 *
 *  @param parent Required. The parent that owns the collection of private
 *    connections.
 *
 *  @return GTLRDatabaseMigrationServiceQuery_ProjectsLocationsPrivateConnectionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
