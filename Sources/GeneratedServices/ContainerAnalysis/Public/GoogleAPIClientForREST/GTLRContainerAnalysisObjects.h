// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Container Analysis API (containeranalysis/v1)
// Description:
//   An implementation of the Grafeas API, which stores, and enables querying
//   and retrieval of critical metadata about all of your software artifacts.
// Documentation:
//   https://cloud.google.com/container-analysis/api/reference/rest/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRContainerAnalysis_AliasContext;
@class GTLRContainerAnalysis_AnalysisCompleted;
@class GTLRContainerAnalysis_Artifact;
@class GTLRContainerAnalysis_AttestationNote;
@class GTLRContainerAnalysis_AttestationOccurrence;
@class GTLRContainerAnalysis_BatchCreateNotesRequest_Notes;
@class GTLRContainerAnalysis_Binding;
@class GTLRContainerAnalysis_BuilderConfig;
@class GTLRContainerAnalysis_BuildNote;
@class GTLRContainerAnalysis_BuildOccurrence;
@class GTLRContainerAnalysis_BuildProvenance;
@class GTLRContainerAnalysis_BuildProvenance_BuildOptions;
@class GTLRContainerAnalysis_Category;
@class GTLRContainerAnalysis_CisBenchmark;
@class GTLRContainerAnalysis_CloudRepoSourceContext;
@class GTLRContainerAnalysis_Command;
@class GTLRContainerAnalysis_Completeness;
@class GTLRContainerAnalysis_ComplianceNote;
@class GTLRContainerAnalysis_ComplianceOccurrence;
@class GTLRContainerAnalysis_ComplianceVersion;
@class GTLRContainerAnalysis_CVSS;
@class GTLRContainerAnalysis_CVSSv3;
@class GTLRContainerAnalysis_DeploymentNote;
@class GTLRContainerAnalysis_DeploymentOccurrence;
@class GTLRContainerAnalysis_Detail;
@class GTLRContainerAnalysis_Digest;
@class GTLRContainerAnalysis_DiscoveryNote;
@class GTLRContainerAnalysis_DiscoveryOccurrence;
@class GTLRContainerAnalysis_Distribution;
@class GTLRContainerAnalysis_DSSEAttestationNote;
@class GTLRContainerAnalysis_DSSEAttestationOccurrence;
@class GTLRContainerAnalysis_DSSEHint;
@class GTLRContainerAnalysis_Envelope;
@class GTLRContainerAnalysis_EnvelopeSignature;
@class GTLRContainerAnalysis_Expr;
@class GTLRContainerAnalysis_FileHashes;
@class GTLRContainerAnalysis_Fingerprint;
@class GTLRContainerAnalysis_FixableTotalByDigest;
@class GTLRContainerAnalysis_GerritSourceContext;
@class GTLRContainerAnalysis_GetPolicyOptions;
@class GTLRContainerAnalysis_GitSourceContext;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ApprovalConfig;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ApprovalResult;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Artifacts;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ArtifactsPythonPackage;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Substitutions;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Timing;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildApproval;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptionsPoolOption;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildWarning;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuiltImage;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1FileHashes;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Hash;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1InlineSecret;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1InlineSecret_EnvMap;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1RepoSource;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1RepoSource_Substitutions;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Results;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Secret;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Secret_SecretEnv;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1SecretManagerSecret;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Secrets;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Source;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1SourceProvenance;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1SourceProvenance_FileHashes;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1StorageSource;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1StorageSourceManifest;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1TimeSpan;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1UploadedMavenArtifact;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1UploadedPythonPackage;
@class GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Volume;
@class GTLRContainerAnalysis_GrafeasV1FileLocation;
@class GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder;
@class GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness;
@class GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource;
@class GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource_Digest;
@class GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation;
@class GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation_Environment;
@class GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation_Parameters;
@class GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial;
@class GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial_Digest;
@class GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata;
@class GTLRContainerAnalysis_Hash;
@class GTLRContainerAnalysis_Hint;
@class GTLRContainerAnalysis_Identity;
@class GTLRContainerAnalysis_ImageNote;
@class GTLRContainerAnalysis_ImageOccurrence;
@class GTLRContainerAnalysis_InTotoProvenance;
@class GTLRContainerAnalysis_InTotoStatement;
@class GTLRContainerAnalysis_Jwt;
@class GTLRContainerAnalysis_KnowledgeBase;
@class GTLRContainerAnalysis_Layer;
@class GTLRContainerAnalysis_License;
@class GTLRContainerAnalysis_Location;
@class GTLRContainerAnalysis_Material;
@class GTLRContainerAnalysis_Material_Digest;
@class GTLRContainerAnalysis_Metadata;
@class GTLRContainerAnalysis_NonCompliantFile;
@class GTLRContainerAnalysis_Note;
@class GTLRContainerAnalysis_Occurrence;
@class GTLRContainerAnalysis_PackageIssue;
@class GTLRContainerAnalysis_PackageNote;
@class GTLRContainerAnalysis_PackageOccurrence;
@class GTLRContainerAnalysis_Policy;
@class GTLRContainerAnalysis_ProjectRepoId;
@class GTLRContainerAnalysis_Recipe;
@class GTLRContainerAnalysis_Recipe_Arguments_Item;
@class GTLRContainerAnalysis_Recipe_Environment_Item;
@class GTLRContainerAnalysis_RelatedUrl;
@class GTLRContainerAnalysis_RepoId;
@class GTLRContainerAnalysis_Signature;
@class GTLRContainerAnalysis_SlsaBuilder;
@class GTLRContainerAnalysis_SlsaCompleteness;
@class GTLRContainerAnalysis_SlsaMetadata;
@class GTLRContainerAnalysis_SlsaProvenance;
@class GTLRContainerAnalysis_SlsaProvenanceZeroTwo;
@class GTLRContainerAnalysis_SlsaProvenanceZeroTwo_BuildConfig;
@class GTLRContainerAnalysis_SlsaRecipe;
@class GTLRContainerAnalysis_SlsaRecipe_Arguments;
@class GTLRContainerAnalysis_SlsaRecipe_Environment;
@class GTLRContainerAnalysis_Source;
@class GTLRContainerAnalysis_Source_FileHashes;
@class GTLRContainerAnalysis_SourceContext;
@class GTLRContainerAnalysis_SourceContext_Labels;
@class GTLRContainerAnalysis_Status;
@class GTLRContainerAnalysis_Status_Details_Item;
@class GTLRContainerAnalysis_Subject;
@class GTLRContainerAnalysis_Subject_Digest;
@class GTLRContainerAnalysis_TimeSpan;
@class GTLRContainerAnalysis_UpgradeDistribution;
@class GTLRContainerAnalysis_UpgradeNote;
@class GTLRContainerAnalysis_UpgradeOccurrence;
@class GTLRContainerAnalysis_Version;
@class GTLRContainerAnalysis_Volume;
@class GTLRContainerAnalysis_VulnerabilityNote;
@class GTLRContainerAnalysis_VulnerabilityOccurrence;
@class GTLRContainerAnalysis_WindowsDetail;
@class GTLRContainerAnalysis_WindowsUpdate;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_AliasContext.kind

/**
 *  Git tag.
 *
 *  Value: "FIXED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_AliasContext_Kind_Fixed;
/**
 *  Unknown.
 *
 *  Value: "KIND_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_AliasContext_Kind_KindUnspecified;
/**
 *  Git branch.
 *
 *  Value: "MOVABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_AliasContext_Kind_Movable;
/**
 *  Used to specify non-standard aliases. For example, if a Git repo has a ref
 *  named "refs/foo/bar".
 *
 *  Value: "OTHER"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_AliasContext_Kind_Other;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_BuildStep.status

/**
 *  Build or step was canceled by a user.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_BuildStep_Status_Cancelled;
/**
 *  Build was enqueued for longer than the value of `queue_ttl`.
 *
 *  Value: "EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_BuildStep_Status_Expired;
/**
 *  Build or step failed to complete successfully.
 *
 *  Value: "FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_BuildStep_Status_Failure;
/**
 *  Build or step failed due to an internal cause.
 *
 *  Value: "INTERNAL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_BuildStep_Status_InternalError;
/**
 *  Build has been created and is pending execution and queuing. It has not been
 *  queued.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_BuildStep_Status_Pending;
/**
 *  Build or step is queued; work has not yet begun.
 *
 *  Value: "QUEUED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_BuildStep_Status_Queued;
/**
 *  Build has been received and is being queued.
 *
 *  Value: "QUEUING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_BuildStep_Status_Queuing;
/**
 *  Status of the build is unknown.
 *
 *  Value: "STATUS_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_BuildStep_Status_StatusUnknown;
/**
 *  Build or step finished successfully.
 *
 *  Value: "SUCCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_BuildStep_Status_Success;
/**
 *  Build or step took longer than was allowed.
 *
 *  Value: "TIMEOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_BuildStep_Status_Timeout;
/**
 *  Build or step is being executed.
 *
 *  Value: "WORKING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_BuildStep_Status_Working;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CisBenchmark.severity

/**
 *  Critical severity.
 *
 *  Value: "CRITICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CisBenchmark_Severity_Critical;
/**
 *  High severity.
 *
 *  Value: "HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CisBenchmark_Severity_High;
/**
 *  Low severity.
 *
 *  Value: "LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CisBenchmark_Severity_Low;
/**
 *  Medium severity.
 *
 *  Value: "MEDIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CisBenchmark_Severity_Medium;
/**
 *  Minimal severity.
 *
 *  Value: "MINIMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CisBenchmark_Severity_Minimal;
/**
 *  Unknown.
 *
 *  Value: "SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CisBenchmark_Severity_SeverityUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSS.attackComplexity

/** Value: "ATTACK_COMPLEXITY_HIGH" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_AttackComplexity_AttackComplexityHigh;
/** Value: "ATTACK_COMPLEXITY_LOW" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_AttackComplexity_AttackComplexityLow;
/** Value: "ATTACK_COMPLEXITY_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_AttackComplexity_AttackComplexityUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSS.attackVector

/** Value: "ATTACK_VECTOR_ADJACENT" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_AttackVector_AttackVectorAdjacent;
/** Value: "ATTACK_VECTOR_LOCAL" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_AttackVector_AttackVectorLocal;
/** Value: "ATTACK_VECTOR_NETWORK" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_AttackVector_AttackVectorNetwork;
/** Value: "ATTACK_VECTOR_PHYSICAL" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_AttackVector_AttackVectorPhysical;
/** Value: "ATTACK_VECTOR_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_AttackVector_AttackVectorUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSS.authentication

/** Value: "AUTHENTICATION_MULTIPLE" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_Authentication_AuthenticationMultiple;
/** Value: "AUTHENTICATION_NONE" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_Authentication_AuthenticationNone;
/** Value: "AUTHENTICATION_SINGLE" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_Authentication_AuthenticationSingle;
/** Value: "AUTHENTICATION_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_Authentication_AuthenticationUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSS.availabilityImpact

/** Value: "IMPACT_HIGH" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_AvailabilityImpact_ImpactHigh;
/** Value: "IMPACT_LOW" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_AvailabilityImpact_ImpactLow;
/** Value: "IMPACT_NONE" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_AvailabilityImpact_ImpactNone;
/** Value: "IMPACT_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_AvailabilityImpact_ImpactUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSS.confidentialityImpact

/** Value: "IMPACT_HIGH" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_ConfidentialityImpact_ImpactHigh;
/** Value: "IMPACT_LOW" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_ConfidentialityImpact_ImpactLow;
/** Value: "IMPACT_NONE" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_ConfidentialityImpact_ImpactNone;
/** Value: "IMPACT_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_ConfidentialityImpact_ImpactUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSS.integrityImpact

/** Value: "IMPACT_HIGH" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_IntegrityImpact_ImpactHigh;
/** Value: "IMPACT_LOW" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_IntegrityImpact_ImpactLow;
/** Value: "IMPACT_NONE" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_IntegrityImpact_ImpactNone;
/** Value: "IMPACT_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_IntegrityImpact_ImpactUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSS.privilegesRequired

/** Value: "PRIVILEGES_REQUIRED_HIGH" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_PrivilegesRequired_PrivilegesRequiredHigh;
/** Value: "PRIVILEGES_REQUIRED_LOW" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_PrivilegesRequired_PrivilegesRequiredLow;
/** Value: "PRIVILEGES_REQUIRED_NONE" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_PrivilegesRequired_PrivilegesRequiredNone;
/** Value: "PRIVILEGES_REQUIRED_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_PrivilegesRequired_PrivilegesRequiredUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSS.scope

/** Value: "SCOPE_CHANGED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_Scope_ScopeChanged;
/** Value: "SCOPE_UNCHANGED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_Scope_ScopeUnchanged;
/** Value: "SCOPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_Scope_ScopeUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSS.userInteraction

/** Value: "USER_INTERACTION_NONE" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_UserInteraction_UserInteractionNone;
/** Value: "USER_INTERACTION_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_UserInteraction_UserInteractionRequired;
/** Value: "USER_INTERACTION_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSS_UserInteraction_UserInteractionUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSSv3.attackComplexity

/** Value: "ATTACK_COMPLEXITY_HIGH" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_AttackComplexity_AttackComplexityHigh;
/** Value: "ATTACK_COMPLEXITY_LOW" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_AttackComplexity_AttackComplexityLow;
/** Value: "ATTACK_COMPLEXITY_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_AttackComplexity_AttackComplexityUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSSv3.attackVector

/** Value: "ATTACK_VECTOR_ADJACENT" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_AttackVector_AttackVectorAdjacent;
/** Value: "ATTACK_VECTOR_LOCAL" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_AttackVector_AttackVectorLocal;
/** Value: "ATTACK_VECTOR_NETWORK" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_AttackVector_AttackVectorNetwork;
/** Value: "ATTACK_VECTOR_PHYSICAL" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_AttackVector_AttackVectorPhysical;
/** Value: "ATTACK_VECTOR_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_AttackVector_AttackVectorUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSSv3.availabilityImpact

/** Value: "IMPACT_HIGH" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_AvailabilityImpact_ImpactHigh;
/** Value: "IMPACT_LOW" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_AvailabilityImpact_ImpactLow;
/** Value: "IMPACT_NONE" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_AvailabilityImpact_ImpactNone;
/** Value: "IMPACT_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_AvailabilityImpact_ImpactUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSSv3.confidentialityImpact

/** Value: "IMPACT_HIGH" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_ConfidentialityImpact_ImpactHigh;
/** Value: "IMPACT_LOW" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_ConfidentialityImpact_ImpactLow;
/** Value: "IMPACT_NONE" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_ConfidentialityImpact_ImpactNone;
/** Value: "IMPACT_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_ConfidentialityImpact_ImpactUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSSv3.integrityImpact

/** Value: "IMPACT_HIGH" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_IntegrityImpact_ImpactHigh;
/** Value: "IMPACT_LOW" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_IntegrityImpact_ImpactLow;
/** Value: "IMPACT_NONE" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_IntegrityImpact_ImpactNone;
/** Value: "IMPACT_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_IntegrityImpact_ImpactUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSSv3.privilegesRequired

/** Value: "PRIVILEGES_REQUIRED_HIGH" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_PrivilegesRequired_PrivilegesRequiredHigh;
/** Value: "PRIVILEGES_REQUIRED_LOW" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_PrivilegesRequired_PrivilegesRequiredLow;
/** Value: "PRIVILEGES_REQUIRED_NONE" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_PrivilegesRequired_PrivilegesRequiredNone;
/** Value: "PRIVILEGES_REQUIRED_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_PrivilegesRequired_PrivilegesRequiredUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSSv3.scope

/** Value: "SCOPE_CHANGED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_Scope_ScopeChanged;
/** Value: "SCOPE_UNCHANGED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_Scope_ScopeUnchanged;
/** Value: "SCOPE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_Scope_ScopeUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_CVSSv3.userInteraction

/** Value: "USER_INTERACTION_NONE" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_UserInteraction_UserInteractionNone;
/** Value: "USER_INTERACTION_REQUIRED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_UserInteraction_UserInteractionRequired;
/** Value: "USER_INTERACTION_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_CVSSv3_UserInteraction_UserInteractionUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_DeploymentOccurrence.platform

/**
 *  Custom user-defined platform.
 *
 *  Value: "CUSTOM"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DeploymentOccurrence_Platform_Custom;
/**
 *  Google App Engine: Flexible Environment.
 *
 *  Value: "FLEX"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DeploymentOccurrence_Platform_Flex;
/**
 *  Google Container Engine.
 *
 *  Value: "GKE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DeploymentOccurrence_Platform_Gke;
/**
 *  Unknown.
 *
 *  Value: "PLATFORM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DeploymentOccurrence_Platform_PlatformUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_DiscoveryNote.analysisKind

/**
 *  This represents a logical "role" that can attest to artifacts.
 *
 *  Value: "ATTESTATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Attestation;
/**
 *  The note and occurrence assert build provenance.
 *
 *  Value: "BUILD"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Build;
/**
 *  This represents a Compliance Note
 *
 *  Value: "COMPLIANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Compliance;
/**
 *  The note and occurrence track deployment events.
 *
 *  Value: "DEPLOYMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Deployment;
/**
 *  The note and occurrence track the initial discovery status of a resource.
 *
 *  Value: "DISCOVERY"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Discovery;
/**
 *  This represents a DSSE attestation Note
 *
 *  Value: "DSSE_ATTESTATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_DsseAttestation;
/**
 *  This represents an image basis relationship.
 *
 *  Value: "IMAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Image;
/**
 *  Default value. This value is unused.
 *
 *  Value: "NOTE_KIND_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_NoteKindUnspecified;
/**
 *  This represents a package installed via a package manager.
 *
 *  Value: "PACKAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Package;
/**
 *  This represents an available package upgrade.
 *
 *  Value: "UPGRADE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Upgrade;
/**
 *  The note and occurrence represent a package vulnerability.
 *
 *  Value: "VULNERABILITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Vulnerability;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_DiscoveryOccurrence.analysisStatus

/**
 *  Unknown.
 *
 *  Value: "ANALYSIS_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryOccurrence_AnalysisStatus_AnalysisStatusUnspecified;
/**
 *  Analysis has completed.
 *
 *  Value: "COMPLETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryOccurrence_AnalysisStatus_Complete;
/**
 *  Analysis has finished unsuccessfully, the analysis itself is in a bad state.
 *
 *  Value: "FINISHED_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryOccurrence_AnalysisStatus_FinishedFailed;
/**
 *  Analysis has finished successfully.
 *
 *  Value: "FINISHED_SUCCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryOccurrence_AnalysisStatus_FinishedSuccess;
/**
 *  The resource is known not to be supported.
 *
 *  Value: "FINISHED_UNSUPPORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryOccurrence_AnalysisStatus_FinishedUnsupported;
/**
 *  Resource is known but no action has been taken yet.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryOccurrence_AnalysisStatus_Pending;
/**
 *  Resource is being analyzed.
 *
 *  Value: "SCANNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryOccurrence_AnalysisStatus_Scanning;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_DiscoveryOccurrence.continuousAnalysis

/**
 *  The resource is continuously analyzed.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryOccurrence_ContinuousAnalysis_Active;
/**
 *  Unknown.
 *
 *  Value: "CONTINUOUS_ANALYSIS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryOccurrence_ContinuousAnalysis_ContinuousAnalysisUnspecified;
/**
 *  The resource is ignored for continuous analysis.
 *
 *  Value: "INACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_DiscoveryOccurrence_ContinuousAnalysis_Inactive;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_Distribution.architecture

/**
 *  Unknown architecture.
 *
 *  Value: "ARCHITECTURE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Distribution_Architecture_ArchitectureUnspecified;
/**
 *  X64 architecture.
 *
 *  Value: "X64"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Distribution_Architecture_X64;
/**
 *  X86 architecture.
 *
 *  Value: "X86"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Distribution_Architecture_X86;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_FixableTotalByDigest.severity

/**
 *  Critical severity.
 *
 *  Value: "CRITICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_FixableTotalByDigest_Severity_Critical;
/**
 *  High severity.
 *
 *  Value: "HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_FixableTotalByDigest_Severity_High;
/**
 *  Low severity.
 *
 *  Value: "LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_FixableTotalByDigest_Severity_Low;
/**
 *  Medium severity.
 *
 *  Value: "MEDIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_FixableTotalByDigest_Severity_Medium;
/**
 *  Minimal severity.
 *
 *  Value: "MINIMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_FixableTotalByDigest_Severity_Minimal;
/**
 *  Unknown.
 *
 *  Value: "SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_FixableTotalByDigest_Severity_SeverityUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ApprovalResult.decision

/**
 *  Build is approved.
 *
 *  Value: "APPROVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ApprovalResult_Decision_Approved;
/**
 *  Default enum type. This should not be used.
 *
 *  Value: "DECISION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ApprovalResult_Decision_DecisionUnspecified;
/**
 *  Build is rejected.
 *
 *  Value: "REJECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ApprovalResult_Decision_Rejected;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build.status

/**
 *  Build or step was canceled by a user.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_Cancelled;
/**
 *  Build was enqueued for longer than the value of `queue_ttl`.
 *
 *  Value: "EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_Expired;
/**
 *  Build or step failed to complete successfully.
 *
 *  Value: "FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_Failure;
/**
 *  Build or step failed due to an internal cause.
 *
 *  Value: "INTERNAL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_InternalError;
/**
 *  Build has been created and is pending execution and queuing. It has not been
 *  queued.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_Pending;
/**
 *  Build or step is queued; work has not yet begun.
 *
 *  Value: "QUEUED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_Queued;
/**
 *  Status of the build is unknown.
 *
 *  Value: "STATUS_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_StatusUnknown;
/**
 *  Build or step finished successfully.
 *
 *  Value: "SUCCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_Success;
/**
 *  Build or step took longer than was allowed.
 *
 *  Value: "TIMEOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_Timeout;
/**
 *  Build or step is being executed.
 *
 *  Value: "WORKING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_Working;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildApproval.state

/**
 *  Build approval has been approved.
 *
 *  Value: "APPROVED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildApproval_State_Approved;
/**
 *  Build was cancelled while it was still pending approval.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildApproval_State_Cancelled;
/**
 *  Build approval is pending.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildApproval_State_Pending;
/**
 *  Build approval has been rejected.
 *
 *  Value: "REJECTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildApproval_State_Rejected;
/**
 *  Default enum type. This should not be used.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildApproval_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo.type

/**
 *  Type unspecified
 *
 *  Value: "FAILURE_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo_Type_FailureTypeUnspecified;
/**
 *  The source fetching has failed.
 *
 *  Value: "FETCH_SOURCE_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo_Type_FetchSourceFailed;
/**
 *  Backend logging failures. Should retry.
 *
 *  Value: "LOGGING_FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo_Type_LoggingFailure;
/**
 *  Unable to push the image to the repository.
 *
 *  Value: "PUSH_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo_Type_PushFailed;
/**
 *  Final image not found.
 *
 *  Value: "PUSH_IMAGE_NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo_Type_PushImageNotFound;
/**
 *  Unauthorized push of the final image.
 *
 *  Value: "PUSH_NOT_AUTHORIZED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo_Type_PushNotAuthorized;
/**
 *  A build step has failed.
 *
 *  Value: "USER_BUILD_STEP"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo_Type_UserBuildStep;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions.logging

/**
 *  Build logs are stored in Cloud Logging. Selecting this option will not allow
 *  [logs streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).
 *
 *  Value: "CLOUD_LOGGING_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_CloudLoggingOnly;
/**
 *  Build logs are stored in Cloud Storage.
 *
 *  Value: "GCS_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_GcsOnly;
/**
 *  Build logs are stored in Cloud Logging and Cloud Storage.
 *
 *  Value: "LEGACY"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_Legacy;
/**
 *  The service determines the logging mode. The default is `LEGACY`. Do not
 *  rely on the default logging behavior as it may change in the future.
 *
 *  Value: "LOGGING_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_LoggingUnspecified;
/**
 *  Turn off all logging. No build logs will be captured.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_None;
/**
 *  This option is the same as CLOUD_LOGGING_ONLY.
 *
 *  Value: "STACKDRIVER_ONLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_StackdriverOnly;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions.logStreamingOption

/**
 *  Service may automatically determine build log streaming behavior.
 *
 *  Value: "STREAM_DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_LogStreamingOption_StreamDefault;
/**
 *  Build logs should not be streamed to Google Cloud Storage; they will be
 *  written when the build is completed.
 *
 *  Value: "STREAM_OFF"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_LogStreamingOption_StreamOff;
/**
 *  Build logs should be streamed to Google Cloud Storage.
 *
 *  Value: "STREAM_ON"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_LogStreamingOption_StreamOn;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions.machineType

/**
 *  Highcpu e2 machine with 32 CPUs.
 *
 *  Value: "E2_HIGHCPU_32"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_E2Highcpu32;
/**
 *  Highcpu e2 machine with 8 CPUs.
 *
 *  Value: "E2_HIGHCPU_8"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_E2Highcpu8;
/**
 *  Highcpu machine with 32 CPUs.
 *
 *  Value: "N1_HIGHCPU_32"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_N1Highcpu32;
/**
 *  Highcpu machine with 8 CPUs.
 *
 *  Value: "N1_HIGHCPU_8"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_N1Highcpu8;
/**
 *  Standard machine type.
 *
 *  Value: "UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_Unspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions.requestedVerifyOption

/**
 *  Not a verifiable build (the default).
 *
 *  Value: "NOT_VERIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_RequestedVerifyOption_NotVerified;
/**
 *  Build must be verified.
 *
 *  Value: "VERIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_RequestedVerifyOption_Verified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions.sourceProvenanceHash

/**
 *  Use a md5 hash.
 *
 *  Value: "MD5"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_SourceProvenanceHash_Md5;
/**
 *  No hash requested.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_SourceProvenanceHash_None;
/**
 *  Use a sha256 hash.
 *
 *  Value: "SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_SourceProvenanceHash_Sha256;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions.substitutionOption

/**
 *  Do not fail the build if error in substitutions checks.
 *
 *  Value: "ALLOW_LOOSE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_SubstitutionOption_AllowLoose;
/**
 *  Fails the build if error in substitutions checks, like missing a
 *  substitution in the template or in the map.
 *
 *  Value: "MUST_MATCH"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_SubstitutionOption_MustMatch;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep.status

/**
 *  Build or step was canceled by a user.
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_Cancelled;
/**
 *  Build was enqueued for longer than the value of `queue_ttl`.
 *
 *  Value: "EXPIRED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_Expired;
/**
 *  Build or step failed to complete successfully.
 *
 *  Value: "FAILURE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_Failure;
/**
 *  Build or step failed due to an internal cause.
 *
 *  Value: "INTERNAL_ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_InternalError;
/**
 *  Build has been created and is pending execution and queuing. It has not been
 *  queued.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_Pending;
/**
 *  Build or step is queued; work has not yet begun.
 *
 *  Value: "QUEUED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_Queued;
/**
 *  Status of the build is unknown.
 *
 *  Value: "STATUS_UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_StatusUnknown;
/**
 *  Build or step finished successfully.
 *
 *  Value: "SUCCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_Success;
/**
 *  Build or step took longer than was allowed.
 *
 *  Value: "TIMEOUT"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_Timeout;
/**
 *  Build or step is being executed.
 *
 *  Value: "WORKING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_Working;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildWarning.priority

/**
 *  e.g. alerts that a feature used in the build is pending removal
 *
 *  Value: "ALERT"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildWarning_Priority_Alert;
/**
 *  e.g. deprecation warnings and alternative feature highlights.
 *
 *  Value: "INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildWarning_Priority_Info;
/**
 *  Should not be used.
 *
 *  Value: "PRIORITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildWarning_Priority_PriorityUnspecified;
/**
 *  e.g. automated detection of possible issues with the build.
 *
 *  Value: "WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildWarning_Priority_Warning;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Hash.type

/**
 *  Use a md5 hash.
 *
 *  Value: "MD5"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Hash_Type_Md5;
/**
 *  No hash requested.
 *
 *  Value: "NONE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Hash_Type_None;
/**
 *  Use a sha256 hash.
 *
 *  Value: "SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Hash_Type_Sha256;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_Note.kind

/**
 *  This represents a logical "role" that can attest to artifacts.
 *
 *  Value: "ATTESTATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Note_Kind_Attestation;
/**
 *  The note and occurrence assert build provenance.
 *
 *  Value: "BUILD"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Note_Kind_Build;
/**
 *  This represents a Compliance Note
 *
 *  Value: "COMPLIANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Note_Kind_Compliance;
/**
 *  The note and occurrence track deployment events.
 *
 *  Value: "DEPLOYMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Note_Kind_Deployment;
/**
 *  The note and occurrence track the initial discovery status of a resource.
 *
 *  Value: "DISCOVERY"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Note_Kind_Discovery;
/**
 *  This represents a DSSE attestation Note
 *
 *  Value: "DSSE_ATTESTATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Note_Kind_DsseAttestation;
/**
 *  This represents an image basis relationship.
 *
 *  Value: "IMAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Note_Kind_Image;
/**
 *  Default value. This value is unused.
 *
 *  Value: "NOTE_KIND_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Note_Kind_NoteKindUnspecified;
/**
 *  This represents a package installed via a package manager.
 *
 *  Value: "PACKAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Note_Kind_Package;
/**
 *  This represents an available package upgrade.
 *
 *  Value: "UPGRADE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Note_Kind_Upgrade;
/**
 *  The note and occurrence represent a package vulnerability.
 *
 *  Value: "VULNERABILITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Note_Kind_Vulnerability;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_Occurrence.kind

/**
 *  This represents a logical "role" that can attest to artifacts.
 *
 *  Value: "ATTESTATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Occurrence_Kind_Attestation;
/**
 *  The note and occurrence assert build provenance.
 *
 *  Value: "BUILD"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Occurrence_Kind_Build;
/**
 *  This represents a Compliance Note
 *
 *  Value: "COMPLIANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Occurrence_Kind_Compliance;
/**
 *  The note and occurrence track deployment events.
 *
 *  Value: "DEPLOYMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Occurrence_Kind_Deployment;
/**
 *  The note and occurrence track the initial discovery status of a resource.
 *
 *  Value: "DISCOVERY"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Occurrence_Kind_Discovery;
/**
 *  This represents a DSSE attestation Note
 *
 *  Value: "DSSE_ATTESTATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Occurrence_Kind_DsseAttestation;
/**
 *  This represents an image basis relationship.
 *
 *  Value: "IMAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Occurrence_Kind_Image;
/**
 *  Default value. This value is unused.
 *
 *  Value: "NOTE_KIND_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Occurrence_Kind_NoteKindUnspecified;
/**
 *  This represents a package installed via a package manager.
 *
 *  Value: "PACKAGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Occurrence_Kind_Package;
/**
 *  This represents an available package upgrade.
 *
 *  Value: "UPGRADE"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Occurrence_Kind_Upgrade;
/**
 *  The note and occurrence represent a package vulnerability.
 *
 *  Value: "VULNERABILITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Occurrence_Kind_Vulnerability;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_PackageIssue.effectiveSeverity

/**
 *  Critical severity.
 *
 *  Value: "CRITICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_PackageIssue_EffectiveSeverity_Critical;
/**
 *  High severity.
 *
 *  Value: "HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_PackageIssue_EffectiveSeverity_High;
/**
 *  Low severity.
 *
 *  Value: "LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_PackageIssue_EffectiveSeverity_Low;
/**
 *  Medium severity.
 *
 *  Value: "MEDIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_PackageIssue_EffectiveSeverity_Medium;
/**
 *  Minimal severity.
 *
 *  Value: "MINIMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_PackageIssue_EffectiveSeverity_Minimal;
/**
 *  Unknown.
 *
 *  Value: "SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_PackageIssue_EffectiveSeverity_SeverityUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_PackageNote.architecture

/**
 *  Unknown architecture.
 *
 *  Value: "ARCHITECTURE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_PackageNote_Architecture_ArchitectureUnspecified;
/**
 *  X64 architecture.
 *
 *  Value: "X64"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_PackageNote_Architecture_X64;
/**
 *  X86 architecture.
 *
 *  Value: "X86"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_PackageNote_Architecture_X86;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_PackageOccurrence.architecture

/**
 *  Unknown architecture.
 *
 *  Value: "ARCHITECTURE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_PackageOccurrence_Architecture_ArchitectureUnspecified;
/**
 *  X64 architecture.
 *
 *  Value: "X64"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_PackageOccurrence_Architecture_X64;
/**
 *  X86 architecture.
 *
 *  Value: "X86"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_PackageOccurrence_Architecture_X86;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_Version.kind

/**
 *  A special version representing positive infinity.
 *
 *  Value: "MAXIMUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Version_Kind_Maximum;
/**
 *  A special version representing negative infinity.
 *
 *  Value: "MINIMUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Version_Kind_Minimum;
/**
 *  A standard package version.
 *
 *  Value: "NORMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Version_Kind_Normal;
/**
 *  Unknown.
 *
 *  Value: "VERSION_KIND_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_Version_Kind_VersionKindUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_VulnerabilityNote.cvssVersion

/** Value: "CVSS_VERSION_2" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityNote_CvssVersion_CvssVersion2;
/** Value: "CVSS_VERSION_3" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityNote_CvssVersion_CvssVersion3;
/** Value: "CVSS_VERSION_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityNote_CvssVersion_CvssVersionUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_VulnerabilityNote.severity

/**
 *  Critical severity.
 *
 *  Value: "CRITICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityNote_Severity_Critical;
/**
 *  High severity.
 *
 *  Value: "HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityNote_Severity_High;
/**
 *  Low severity.
 *
 *  Value: "LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityNote_Severity_Low;
/**
 *  Medium severity.
 *
 *  Value: "MEDIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityNote_Severity_Medium;
/**
 *  Minimal severity.
 *
 *  Value: "MINIMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityNote_Severity_Minimal;
/**
 *  Unknown.
 *
 *  Value: "SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityNote_Severity_SeverityUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_VulnerabilityOccurrence.cvssVersion

/** Value: "CVSS_VERSION_2" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityOccurrence_CvssVersion_CvssVersion2;
/** Value: "CVSS_VERSION_3" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityOccurrence_CvssVersion_CvssVersion3;
/** Value: "CVSS_VERSION_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityOccurrence_CvssVersion_CvssVersionUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_VulnerabilityOccurrence.effectiveSeverity

/**
 *  Critical severity.
 *
 *  Value: "CRITICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityOccurrence_EffectiveSeverity_Critical;
/**
 *  High severity.
 *
 *  Value: "HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityOccurrence_EffectiveSeverity_High;
/**
 *  Low severity.
 *
 *  Value: "LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityOccurrence_EffectiveSeverity_Low;
/**
 *  Medium severity.
 *
 *  Value: "MEDIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityOccurrence_EffectiveSeverity_Medium;
/**
 *  Minimal severity.
 *
 *  Value: "MINIMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityOccurrence_EffectiveSeverity_Minimal;
/**
 *  Unknown.
 *
 *  Value: "SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityOccurrence_EffectiveSeverity_SeverityUnspecified;

// ----------------------------------------------------------------------------
// GTLRContainerAnalysis_VulnerabilityOccurrence.severity

/**
 *  Critical severity.
 *
 *  Value: "CRITICAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityOccurrence_Severity_Critical;
/**
 *  High severity.
 *
 *  Value: "HIGH"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityOccurrence_Severity_High;
/**
 *  Low severity.
 *
 *  Value: "LOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityOccurrence_Severity_Low;
/**
 *  Medium severity.
 *
 *  Value: "MEDIUM"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityOccurrence_Severity_Medium;
/**
 *  Minimal severity.
 *
 *  Value: "MINIMAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityOccurrence_Severity_Minimal;
/**
 *  Unknown.
 *
 *  Value: "SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRContainerAnalysis_VulnerabilityOccurrence_Severity_SeverityUnspecified;

/**
 *  An alias to a repo revision.
 */
@interface GTLRContainerAnalysis_AliasContext : GTLRObject

/**
 *  The alias kind.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_AliasContext_Kind_Fixed Git tag. (Value:
 *        "FIXED")
 *    @arg @c kGTLRContainerAnalysis_AliasContext_Kind_KindUnspecified Unknown.
 *        (Value: "KIND_UNSPECIFIED")
 *    @arg @c kGTLRContainerAnalysis_AliasContext_Kind_Movable Git branch.
 *        (Value: "MOVABLE")
 *    @arg @c kGTLRContainerAnalysis_AliasContext_Kind_Other Used to specify
 *        non-standard aliases. For example, if a Git repo has a ref named
 *        "refs/foo/bar". (Value: "OTHER")
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** The alias name. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Indicates which analysis completed successfully. Multiple types of analysis
 *  can be performed on a single resource.
 */
@interface GTLRContainerAnalysis_AnalysisCompleted : GTLRObject

@property(nonatomic, strong, nullable) NSArray<NSString *> *analysisType;

@end


/**
 *  Artifact describes a build product.
 */
@interface GTLRContainerAnalysis_Artifact : GTLRObject

/**
 *  Hash or checksum value of a binary, or Docker Registry 2.0 digest of a
 *  container.
 */
@property(nonatomic, copy, nullable) NSString *checksum;

/**
 *  Artifact ID, if any; for container images, this will be a URL by digest like
 *  `gcr.io/projectID/imagename\@sha256:123456`.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Related artifact names. This may be the path to a binary or jar file, or in
 *  the case of a container build, the name used to push the container image to
 *  Google Container Registry, as presented to `docker push`. Note that a single
 *  Artifact ID can have multiple names, for example if two tags are applied to
 *  one image.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

@end


/**
 *  Note kind that represents a logical attestation "role" or "authority". For
 *  example, an organization might have one `Authority` for "QA" and one for
 *  "build". This note is intended to act strictly as a grouping mechanism for
 *  the attached occurrences (Attestations). This grouping mechanism also
 *  provides a security boundary, since IAM ACLs gate the ability for a
 *  principle to attach an occurrence to a given note. It also provides a single
 *  point of lookup to find all attached attestation occurrences, even if they
 *  don't all live in the same project.
 */
@interface GTLRContainerAnalysis_AttestationNote : GTLRObject

/** Hint hints at the purpose of the attestation authority. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Hint *hint;

@end


/**
 *  Occurrence that represents a single "attestation". The authenticity of an
 *  attestation can be verified using the attached signature. If the verifier
 *  trusts the public key of the signer, then verifying the signature is
 *  sufficient to establish trust. In this circumstance, the authority to which
 *  this attestation is attached is primarily useful for lookup (how to find
 *  this attestation if you already know the authority and artifact to be
 *  verified) and intent (for which authority this attestation was intended to
 *  sign.
 */
@interface GTLRContainerAnalysis_AttestationOccurrence : GTLRObject

/**
 *  One or more JWTs encoding a self-contained attestation. Each JWT encodes the
 *  payload that it verifies within the JWT itself. Verifier implementation
 *  SHOULD ignore the `serialized_payload` field when verifying these JWTs. If
 *  only JWTs are present on this AttestationOccurrence, then the
 *  `serialized_payload` SHOULD be left empty. Each JWT SHOULD encode a claim
 *  specific to the `resource_uri` of this Occurrence, but this is not validated
 *  by Grafeas metadata API implementations. The JWT itself is opaque to
 *  Grafeas.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Jwt *> *jwts;

/**
 *  Required. The serialized payload that is verified by one or more
 *  `signatures`.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *serializedPayload;

/**
 *  One or more signatures over `serialized_payload`. Verifier implementations
 *  should consider this attestation message verified if at least one
 *  `signature` verifies `serialized_payload`. See `Signature` in common.proto
 *  for more details on signature structure and verification.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Signature *> *signatures;

@end


/**
 *  Request to create notes in batch.
 */
@interface GTLRContainerAnalysis_BatchCreateNotesRequest : GTLRObject

/** Required. The notes to create. Max allowed length is 1000. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_BatchCreateNotesRequest_Notes *notes;

@end


/**
 *  Required. The notes to create. Max allowed length is 1000.
 *
 *  @note This class is documented as having more properties of
 *        GTLRContainerAnalysis_Note. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRContainerAnalysis_BatchCreateNotesRequest_Notes : GTLRObject
@end


/**
 *  Response for creating notes in batch.
 */
@interface GTLRContainerAnalysis_BatchCreateNotesResponse : GTLRObject

/** The notes that were created. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Note *> *notes;

@end


/**
 *  Request to create occurrences in batch.
 */
@interface GTLRContainerAnalysis_BatchCreateOccurrencesRequest : GTLRObject

/** Required. The occurrences to create. Max allowed length is 1000. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Occurrence *> *occurrences;

@end


/**
 *  Response for creating occurrences in batch.
 */
@interface GTLRContainerAnalysis_BatchCreateOccurrencesResponse : GTLRObject

/** The occurrences that were created. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Occurrence *> *occurrences;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRContainerAnalysis_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`:
 *  An email address (plus unique identifier) representing a user that has been
 *  recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. * `domain:{domain}`: The G Suite domain (primary) that
 *  represents all the users of that domain. For example, `google.com` or
 *  `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  GTLRContainerAnalysis_BuilderConfig
 */
@interface GTLRContainerAnalysis_BuilderConfig : GTLRObject

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  Note holding the version of the provider's builder and the signature of the
 *  provenance message in the build details occurrence.
 */
@interface GTLRContainerAnalysis_BuildNote : GTLRObject

/** Required. Immutable. Version of the builder which produced this build. */
@property(nonatomic, copy, nullable) NSString *builderVersion;

@end


/**
 *  Details of a build occurrence.
 */
@interface GTLRContainerAnalysis_BuildOccurrence : GTLRObject

/**
 *  Deprecated. See InTotoStatement for the replacement. In-toto Provenance
 *  representation as defined in spec.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_InTotoProvenance *intotoProvenance;

/**
 *  In-toto Statement representation as defined in spec. The intoto_statement
 *  can contain any type of provenance. The serialized payload of the statement
 *  can be stored and signed in the Occurrence's envelope.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_InTotoStatement *intotoStatement;

/** The actual provenance for the build. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_BuildProvenance *provenance;

/**
 *  Serialized JSON representation of the provenance, used in generating the
 *  build signature in the corresponding build note. After verifying the
 *  signature, `provenance_bytes` can be unmarshalled and compared to the
 *  provenance to confirm that it is unchanged. A base64-encoded string
 *  representation of the provenance bytes is used for the signature in order to
 *  interoperate with openssl which expects this format for signature
 *  verification. The serialized form is captured both to avoid ambiguity in how
 *  the provenance is marshalled to json as well to prevent incompatibilities
 *  with future changes.
 */
@property(nonatomic, copy, nullable) NSString *provenanceBytes;

@end


/**
 *  Provenance of a build. Contains all information needed to verify the full
 *  details about the build from source to completion.
 */
@interface GTLRContainerAnalysis_BuildProvenance : GTLRObject

/** Version string of the builder at the time this build was executed. */
@property(nonatomic, copy, nullable) NSString *builderVersion;

/**
 *  Special options applied to this build. This is a catch-all field where build
 *  providers can enter any desired additional details.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_BuildProvenance_BuildOptions *buildOptions;

/** Output of the build. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Artifact *> *builtArtifacts;

/** Commands requested by the build. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Command *> *commands;

/** Time at which the build was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  E-mail address of the user who initiated this build. Note that this was the
 *  user's e-mail address at the time the build was initiated; this address may
 *  not represent the same end-user for all time.
 */
@property(nonatomic, copy, nullable) NSString *creator;

/** Time at which execution of the build was finished. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Required. Unique identifier of the build.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** URI where any logs for this provenance were written. */
@property(nonatomic, copy, nullable) NSString *logsUri;

/** ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Details of the Source input to the build. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Source *sourceProvenance;

/** Time at which execution of the build was started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Trigger identifier if the build was triggered automatically; empty if not.
 */
@property(nonatomic, copy, nullable) NSString *triggerId;

@end


/**
 *  Special options applied to this build. This is a catch-all field where build
 *  providers can enter any desired additional details.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRContainerAnalysis_BuildProvenance_BuildOptions : GTLRObject
@end


/**
 *  A step in the build pipeline. Next ID: 20
 */
@interface GTLRContainerAnalysis_BuildStep : GTLRObject

/**
 *  Allow this build step to fail without failing the entire build if and only
 *  if the exit code is one of the specified codes. If allow_failure is also
 *  specified, this field will take precedence.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *allowExitCodes;

/**
 *  Allow this build step to fail without failing the entire build. If false,
 *  the entire build will fail if this step fails. Otherwise, the build will
 *  succeed, but this step will still have a failure status. Error information
 *  will be reported in the failure_detail field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowFailure;

/**
 *  A list of arguments that will be presented to the step when it is started.
 *  If the image used to run the step's container has an entrypoint, the `args`
 *  are used as arguments to that entrypoint. If the image does not define an
 *  entrypoint, the first element in args is used as the entrypoint, and the
 *  remainder will be used as arguments.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *args;

/**
 *  Working directory to use when running this step's container. If this value
 *  is a relative path, it is relative to the build's working directory. If this
 *  value is absolute, it may be outside the build's working directory, in which
 *  case the contents of the path may not be persisted across build step
 *  executions, unless a `volume` for that path is specified. If the build
 *  specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies
 *  an absolute path, the `RepoSource` `dir` is ignored for the step's
 *  execution.
 */
@property(nonatomic, copy, nullable) NSString *dir;

/**
 *  Entrypoint to be used instead of the build step image's default entrypoint.
 *  If unset, the image's default entrypoint is used.
 */
@property(nonatomic, copy, nullable) NSString *entrypoint;

/**
 *  A list of environment variable definitions to be used when running a step.
 *  The elements are of the form "KEY=VALUE" for the environment variable "KEY"
 *  being given the value "VALUE".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *env;

/**
 *  Output only. Return code from running the step.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exitCode;

/**
 *  Unique identifier for this build step, used in `wait_for` to reference this
 *  build step as a dependency.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Required. The name of the container image that will run this particular
 *  build step. If the image is available in the host's Docker daemon's cache,
 *  it will be run directly. If not, the host will attempt to pull the image
 *  first, using the builder service account's credentials if necessary. The
 *  Docker daemon's cache will already have the latest versions of all of the
 *  officially supported build steps
 *  ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
 *  The Docker daemon will also have cached many of the layers for some popular
 *  images, like "ubuntu", "debian", but they will be refreshed at the time you
 *  attempt to use them. If you built an image in a previous build step, it will
 *  be stored in the host's Docker daemon's cache and is available to use as the
 *  name for a later build step.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Stores timing information for pulling this build step's builder
 *  image only.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_TimeSpan *pullTiming;

/**
 *  A shell script to be executed in the step. When script is provided, the user
 *  cannot specify the entrypoint or args.
 */
@property(nonatomic, copy, nullable) NSString *script;

/**
 *  A list of environment variables which are encrypted using a Cloud Key
 *  Management Service crypto key. These values must be specified in the build's
 *  `Secret`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *secretEnv;

/**
 *  Output only. Status of the build step. At this time, build step status is
 *  only updated on build completion; step status is not updated in real-time as
 *  the build progresses.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_BuildStep_Status_Cancelled Build or step
 *        was canceled by a user. (Value: "CANCELLED")
 *    @arg @c kGTLRContainerAnalysis_BuildStep_Status_Expired Build was enqueued
 *        for longer than the value of `queue_ttl`. (Value: "EXPIRED")
 *    @arg @c kGTLRContainerAnalysis_BuildStep_Status_Failure Build or step
 *        failed to complete successfully. (Value: "FAILURE")
 *    @arg @c kGTLRContainerAnalysis_BuildStep_Status_InternalError Build or
 *        step failed due to an internal cause. (Value: "INTERNAL_ERROR")
 *    @arg @c kGTLRContainerAnalysis_BuildStep_Status_Pending Build has been
 *        created and is pending execution and queuing. It has not been queued.
 *        (Value: "PENDING")
 *    @arg @c kGTLRContainerAnalysis_BuildStep_Status_Queued Build or step is
 *        queued; work has not yet begun. (Value: "QUEUED")
 *    @arg @c kGTLRContainerAnalysis_BuildStep_Status_Queuing Build has been
 *        received and is being queued. (Value: "QUEUING")
 *    @arg @c kGTLRContainerAnalysis_BuildStep_Status_StatusUnknown Status of
 *        the build is unknown. (Value: "STATUS_UNKNOWN")
 *    @arg @c kGTLRContainerAnalysis_BuildStep_Status_Success Build or step
 *        finished successfully. (Value: "SUCCESS")
 *    @arg @c kGTLRContainerAnalysis_BuildStep_Status_Timeout Build or step took
 *        longer than was allowed. (Value: "TIMEOUT")
 *    @arg @c kGTLRContainerAnalysis_BuildStep_Status_Working Build or step is
 *        being executed. (Value: "WORKING")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Time limit for executing this build step. If not defined, the step has no
 *  time limit and will be allowed to continue to run until either it completes
 *  or the build itself times out.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/** Output only. Stores timing information for executing this build step. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_TimeSpan *timing;

/**
 *  List of volumes to mount into the build step. Each volume is created as an
 *  empty volume prior to execution of the build step. Upon completion of the
 *  build, volumes and their contents are discarded. Using a named volume in
 *  only one step is not valid as it is indicative of a build request with an
 *  incorrect configuration.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Volume *> *volumes;

/**
 *  The ID(s) of the step(s) that this build step depends on. This build step
 *  will not start until all the build steps in `wait_for` have completed
 *  successfully. If `wait_for` is empty, this build step will start when all
 *  previous build steps in the `Build.Steps` list have completed successfully.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *waitFor;

@end


/**
 *  The category to which the update belongs.
 */
@interface GTLRContainerAnalysis_Category : GTLRObject

/** The identifier of the category. */
@property(nonatomic, copy, nullable) NSString *categoryId;

/** The localized name of the category. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A compliance check that is a CIS benchmark.
 */
@interface GTLRContainerAnalysis_CisBenchmark : GTLRObject

/**
 *  profileLevel
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *profileLevel;

/**
 *  severity
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CisBenchmark_Severity_Critical Critical
 *        severity. (Value: "CRITICAL")
 *    @arg @c kGTLRContainerAnalysis_CisBenchmark_Severity_High High severity.
 *        (Value: "HIGH")
 *    @arg @c kGTLRContainerAnalysis_CisBenchmark_Severity_Low Low severity.
 *        (Value: "LOW")
 *    @arg @c kGTLRContainerAnalysis_CisBenchmark_Severity_Medium Medium
 *        severity. (Value: "MEDIUM")
 *    @arg @c kGTLRContainerAnalysis_CisBenchmark_Severity_Minimal Minimal
 *        severity. (Value: "MINIMAL")
 *    @arg @c kGTLRContainerAnalysis_CisBenchmark_Severity_SeverityUnspecified
 *        Unknown. (Value: "SEVERITY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *severity;

@end


/**
 *  A CloudRepoSourceContext denotes a particular revision in a Google Cloud
 *  Source Repo.
 */
@interface GTLRContainerAnalysis_CloudRepoSourceContext : GTLRObject

/** An alias, which may be a branch or tag. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_AliasContext *aliasContext;

/** The ID of the repo. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_RepoId *repoId;

/** A revision ID. */
@property(nonatomic, copy, nullable) NSString *revisionId;

@end


/**
 *  Command describes a step performed as part of the build pipeline.
 */
@interface GTLRContainerAnalysis_Command : GTLRObject

/** Command-line arguments used when executing this command. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *args;

/**
 *  Working directory (relative to project source root) used when running this
 *  command.
 */
@property(nonatomic, copy, nullable) NSString *dir;

/** Environment variables set before running this command. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *env;

/**
 *  Optional unique identifier for this command, used in wait_for to reference
 *  this command as a dependency.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Required. Name of the command, as presented on the command line, or if the
 *  command is packaged as a Docker container, as presented to `docker pull`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The ID(s) of the command(s) that this command depends on. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *waitFor;

@end


/**
 *  Indicates that the builder claims certain fields in this message to be
 *  complete.
 */
@interface GTLRContainerAnalysis_Completeness : GTLRObject

/**
 *  If true, the builder claims that recipe.arguments is complete, meaning that
 *  all external inputs are properly captured in the recipe.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *arguments;

/**
 *  If true, the builder claims that recipe.environment is claimed to be
 *  complete.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *environment;

/**
 *  If true, the builder claims that materials are complete, usually through
 *  some controls to prevent network access. Sometimes called "hermetic".
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *materials;

@end


/**
 *  GTLRContainerAnalysis_ComplianceNote
 */
@interface GTLRContainerAnalysis_ComplianceNote : GTLRObject

@property(nonatomic, strong, nullable) GTLRContainerAnalysis_CisBenchmark *cisBenchmark;

/**
 *  A description about this compliance check.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** A rationale for the existence of this compliance check. */
@property(nonatomic, copy, nullable) NSString *rationale;

/** A description of remediation steps if the compliance check fails. */
@property(nonatomic, copy, nullable) NSString *remediation;

/**
 *  Serialized scan instructions with a predefined format.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *scanInstructions;

/** The title that identifies this compliance check. */
@property(nonatomic, copy, nullable) NSString *title;

/** The OS and config versions the benchmark applies to. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_ComplianceVersion *> *version;

@end


/**
 *  An indication that the compliance checks in the associated ComplianceNote
 *  were not satisfied for particular resources or a specified reason.
 */
@interface GTLRContainerAnalysis_ComplianceOccurrence : GTLRObject

@property(nonatomic, copy, nullable) NSString *nonComplianceReason;
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_NonCompliantFile *> *nonCompliantFiles;

@end


/**
 *  Describes the CIS benchmark version that is applicable to a given OS and os
 *  version.
 */
@interface GTLRContainerAnalysis_ComplianceVersion : GTLRObject

/**
 *  The name of the document that defines this benchmark, e.g. "CIS
 *  Container-Optimized OS".
 */
@property(nonatomic, copy, nullable) NSString *benchmarkDocument;

/**
 *  The CPE URI (https://cpe.mitre.org/specification/) this benchmark is
 *  applicable to.
 */
@property(nonatomic, copy, nullable) NSString *cpeUri;

/**
 *  The version of the benchmark. This is set to the version of the OS-specific
 *  CIS document the benchmark is defined in.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Common Vulnerability Scoring System. For details, see
 *  https://www.first.org/cvss/specification-document This is a message we will
 *  try to use for storing various versions of CVSS rather than making a
 *  separate proto for storing a specific version.
 */
@interface GTLRContainerAnalysis_CVSS : GTLRObject

/**
 *  attackComplexity
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSS_AttackComplexity_AttackComplexityHigh
 *        Value "ATTACK_COMPLEXITY_HIGH"
 *    @arg @c kGTLRContainerAnalysis_CVSS_AttackComplexity_AttackComplexityLow
 *        Value "ATTACK_COMPLEXITY_LOW"
 *    @arg @c kGTLRContainerAnalysis_CVSS_AttackComplexity_AttackComplexityUnspecified
 *        Value "ATTACK_COMPLEXITY_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *attackComplexity;

/**
 *  Base Metrics Represents the intrinsic characteristics of a vulnerability
 *  that are constant over time and across user environments.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSS_AttackVector_AttackVectorAdjacent
 *        Value "ATTACK_VECTOR_ADJACENT"
 *    @arg @c kGTLRContainerAnalysis_CVSS_AttackVector_AttackVectorLocal Value
 *        "ATTACK_VECTOR_LOCAL"
 *    @arg @c kGTLRContainerAnalysis_CVSS_AttackVector_AttackVectorNetwork Value
 *        "ATTACK_VECTOR_NETWORK"
 *    @arg @c kGTLRContainerAnalysis_CVSS_AttackVector_AttackVectorPhysical
 *        Value "ATTACK_VECTOR_PHYSICAL"
 *    @arg @c kGTLRContainerAnalysis_CVSS_AttackVector_AttackVectorUnspecified
 *        Value "ATTACK_VECTOR_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *attackVector;

/**
 *  authentication
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSS_Authentication_AuthenticationMultiple
 *        Value "AUTHENTICATION_MULTIPLE"
 *    @arg @c kGTLRContainerAnalysis_CVSS_Authentication_AuthenticationNone
 *        Value "AUTHENTICATION_NONE"
 *    @arg @c kGTLRContainerAnalysis_CVSS_Authentication_AuthenticationSingle
 *        Value "AUTHENTICATION_SINGLE"
 *    @arg @c kGTLRContainerAnalysis_CVSS_Authentication_AuthenticationUnspecified
 *        Value "AUTHENTICATION_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *authentication;

/**
 *  availabilityImpact
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSS_AvailabilityImpact_ImpactHigh Value
 *        "IMPACT_HIGH"
 *    @arg @c kGTLRContainerAnalysis_CVSS_AvailabilityImpact_ImpactLow Value
 *        "IMPACT_LOW"
 *    @arg @c kGTLRContainerAnalysis_CVSS_AvailabilityImpact_ImpactNone Value
 *        "IMPACT_NONE"
 *    @arg @c kGTLRContainerAnalysis_CVSS_AvailabilityImpact_ImpactUnspecified
 *        Value "IMPACT_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *availabilityImpact;

/**
 *  The base score is a function of the base metric scores.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *baseScore;

/**
 *  confidentialityImpact
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSS_ConfidentialityImpact_ImpactHigh Value
 *        "IMPACT_HIGH"
 *    @arg @c kGTLRContainerAnalysis_CVSS_ConfidentialityImpact_ImpactLow Value
 *        "IMPACT_LOW"
 *    @arg @c kGTLRContainerAnalysis_CVSS_ConfidentialityImpact_ImpactNone Value
 *        "IMPACT_NONE"
 *    @arg @c kGTLRContainerAnalysis_CVSS_ConfidentialityImpact_ImpactUnspecified
 *        Value "IMPACT_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *confidentialityImpact;

/**
 *  exploitabilityScore
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exploitabilityScore;

/**
 *  impactScore
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *impactScore;

/**
 *  integrityImpact
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSS_IntegrityImpact_ImpactHigh Value
 *        "IMPACT_HIGH"
 *    @arg @c kGTLRContainerAnalysis_CVSS_IntegrityImpact_ImpactLow Value
 *        "IMPACT_LOW"
 *    @arg @c kGTLRContainerAnalysis_CVSS_IntegrityImpact_ImpactNone Value
 *        "IMPACT_NONE"
 *    @arg @c kGTLRContainerAnalysis_CVSS_IntegrityImpact_ImpactUnspecified
 *        Value "IMPACT_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *integrityImpact;

/**
 *  privilegesRequired
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSS_PrivilegesRequired_PrivilegesRequiredHigh
 *        Value "PRIVILEGES_REQUIRED_HIGH"
 *    @arg @c kGTLRContainerAnalysis_CVSS_PrivilegesRequired_PrivilegesRequiredLow
 *        Value "PRIVILEGES_REQUIRED_LOW"
 *    @arg @c kGTLRContainerAnalysis_CVSS_PrivilegesRequired_PrivilegesRequiredNone
 *        Value "PRIVILEGES_REQUIRED_NONE"
 *    @arg @c kGTLRContainerAnalysis_CVSS_PrivilegesRequired_PrivilegesRequiredUnspecified
 *        Value "PRIVILEGES_REQUIRED_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *privilegesRequired;

/**
 *  scope
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSS_Scope_ScopeChanged Value
 *        "SCOPE_CHANGED"
 *    @arg @c kGTLRContainerAnalysis_CVSS_Scope_ScopeUnchanged Value
 *        "SCOPE_UNCHANGED"
 *    @arg @c kGTLRContainerAnalysis_CVSS_Scope_ScopeUnspecified Value
 *        "SCOPE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *scope;

/**
 *  userInteraction
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSS_UserInteraction_UserInteractionNone
 *        Value "USER_INTERACTION_NONE"
 *    @arg @c kGTLRContainerAnalysis_CVSS_UserInteraction_UserInteractionRequired
 *        Value "USER_INTERACTION_REQUIRED"
 *    @arg @c kGTLRContainerAnalysis_CVSS_UserInteraction_UserInteractionUnspecified
 *        Value "USER_INTERACTION_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *userInteraction;

@end


/**
 *  Common Vulnerability Scoring System version 3. For details, see
 *  https://www.first.org/cvss/specification-document
 */
@interface GTLRContainerAnalysis_CVSSv3 : GTLRObject

/**
 *  attackComplexity
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_AttackComplexity_AttackComplexityHigh
 *        Value "ATTACK_COMPLEXITY_HIGH"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_AttackComplexity_AttackComplexityLow
 *        Value "ATTACK_COMPLEXITY_LOW"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_AttackComplexity_AttackComplexityUnspecified
 *        Value "ATTACK_COMPLEXITY_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *attackComplexity;

/**
 *  Base Metrics Represents the intrinsic characteristics of a vulnerability
 *  that are constant over time and across user environments.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_AttackVector_AttackVectorAdjacent
 *        Value "ATTACK_VECTOR_ADJACENT"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_AttackVector_AttackVectorLocal Value
 *        "ATTACK_VECTOR_LOCAL"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_AttackVector_AttackVectorNetwork
 *        Value "ATTACK_VECTOR_NETWORK"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_AttackVector_AttackVectorPhysical
 *        Value "ATTACK_VECTOR_PHYSICAL"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_AttackVector_AttackVectorUnspecified
 *        Value "ATTACK_VECTOR_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *attackVector;

/**
 *  availabilityImpact
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_AvailabilityImpact_ImpactHigh Value
 *        "IMPACT_HIGH"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_AvailabilityImpact_ImpactLow Value
 *        "IMPACT_LOW"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_AvailabilityImpact_ImpactNone Value
 *        "IMPACT_NONE"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_AvailabilityImpact_ImpactUnspecified
 *        Value "IMPACT_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *availabilityImpact;

/**
 *  The base score is a function of the base metric scores.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *baseScore;

/**
 *  confidentialityImpact
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_ConfidentialityImpact_ImpactHigh
 *        Value "IMPACT_HIGH"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_ConfidentialityImpact_ImpactLow
 *        Value "IMPACT_LOW"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_ConfidentialityImpact_ImpactNone
 *        Value "IMPACT_NONE"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_ConfidentialityImpact_ImpactUnspecified
 *        Value "IMPACT_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *confidentialityImpact;

/**
 *  exploitabilityScore
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exploitabilityScore;

/**
 *  impactScore
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *impactScore;

/**
 *  integrityImpact
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_IntegrityImpact_ImpactHigh Value
 *        "IMPACT_HIGH"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_IntegrityImpact_ImpactLow Value
 *        "IMPACT_LOW"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_IntegrityImpact_ImpactNone Value
 *        "IMPACT_NONE"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_IntegrityImpact_ImpactUnspecified
 *        Value "IMPACT_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *integrityImpact;

/**
 *  privilegesRequired
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_PrivilegesRequired_PrivilegesRequiredHigh
 *        Value "PRIVILEGES_REQUIRED_HIGH"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_PrivilegesRequired_PrivilegesRequiredLow
 *        Value "PRIVILEGES_REQUIRED_LOW"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_PrivilegesRequired_PrivilegesRequiredNone
 *        Value "PRIVILEGES_REQUIRED_NONE"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_PrivilegesRequired_PrivilegesRequiredUnspecified
 *        Value "PRIVILEGES_REQUIRED_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *privilegesRequired;

/**
 *  scope
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_Scope_ScopeChanged Value
 *        "SCOPE_CHANGED"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_Scope_ScopeUnchanged Value
 *        "SCOPE_UNCHANGED"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_Scope_ScopeUnspecified Value
 *        "SCOPE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *scope;

/**
 *  userInteraction
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_UserInteraction_UserInteractionNone
 *        Value "USER_INTERACTION_NONE"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_UserInteraction_UserInteractionRequired
 *        Value "USER_INTERACTION_REQUIRED"
 *    @arg @c kGTLRContainerAnalysis_CVSSv3_UserInteraction_UserInteractionUnspecified
 *        Value "USER_INTERACTION_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *userInteraction;

@end


/**
 *  An artifact that can be deployed in some runtime.
 */
@interface GTLRContainerAnalysis_DeploymentNote : GTLRObject

/** Required. Resource URI for the artifact being deployed. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceUri;

@end


/**
 *  The period during which some deployable was active in a runtime.
 */
@interface GTLRContainerAnalysis_DeploymentOccurrence : GTLRObject

/** Address of the runtime element hosting this deployment. */
@property(nonatomic, copy, nullable) NSString *address;

/** Configuration used to create this deployment. */
@property(nonatomic, copy, nullable) NSString *config;

/** Required. Beginning of the lifetime of this deployment. */
@property(nonatomic, strong, nullable) GTLRDateTime *deployTime;

/**
 *  Platform hosting this deployment.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_DeploymentOccurrence_Platform_Custom Custom
 *        user-defined platform. (Value: "CUSTOM")
 *    @arg @c kGTLRContainerAnalysis_DeploymentOccurrence_Platform_Flex Google
 *        App Engine: Flexible Environment. (Value: "FLEX")
 *    @arg @c kGTLRContainerAnalysis_DeploymentOccurrence_Platform_Gke Google
 *        Container Engine. (Value: "GKE")
 *    @arg @c kGTLRContainerAnalysis_DeploymentOccurrence_Platform_PlatformUnspecified
 *        Unknown. (Value: "PLATFORM_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *platform;

/**
 *  Output only. Resource URI for the artifact being deployed taken from the
 *  deployable field with the same name.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *resourceUri;

/** End of the lifetime of this deployment. */
@property(nonatomic, strong, nullable) GTLRDateTime *undeployTime;

/** Identity of the user that triggered this deployment. */
@property(nonatomic, copy, nullable) NSString *userEmail;

@end


/**
 *  A detail for a distro and package affected by this vulnerability and its
 *  associated fix (if one is available).
 */
@interface GTLRContainerAnalysis_Detail : GTLRObject

/**
 *  Required. The [CPE URI](https://cpe.mitre.org/specification/) this
 *  vulnerability affects.
 */
@property(nonatomic, copy, nullable) NSString *affectedCpeUri;

/** Required. The package this vulnerability affects. */
@property(nonatomic, copy, nullable) NSString *affectedPackage;

/**
 *  The version number at the end of an interval in which this vulnerability
 *  exists. A vulnerability can affect a package between version numbers that
 *  are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and
 *  [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a
 *  specific affected version is provided by a vulnerability database,
 *  affected_version_start and affected_version_end will be the same in that
 *  Detail.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Version *affectedVersionEnd;

/**
 *  The version number at the start of an interval in which this vulnerability
 *  exists. A vulnerability can affect a package between version numbers that
 *  are disjoint sets of intervals (example: [1.0.0-1.1.0], [2.4.6-2.4.8] and
 *  [4.5.6-4.6.8]) each of which will be represented in its own Detail. If a
 *  specific affected version is provided by a vulnerability database,
 *  affected_version_start and affected_version_end will be the same in that
 *  Detail.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Version *affectedVersionStart;

/**
 *  A vendor-specific description of this vulnerability.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The distro recommended [CPE URI](https://cpe.mitre.org/specification/) to
 *  update to that contains a fix for this vulnerability. It is possible for
 *  this to be different from the affected_cpe_uri.
 */
@property(nonatomic, copy, nullable) NSString *fixedCpeUri;

/**
 *  The distro recommended package to update to that contains a fix for this
 *  vulnerability. It is possible for this to be different from the
 *  affected_package.
 */
@property(nonatomic, copy, nullable) NSString *fixedPackage;

/**
 *  The distro recommended version to update to that contains a fix for this
 *  vulnerability. Setting this to VersionKind.MAXIMUM means no such version is
 *  yet available.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Version *fixedVersion;

/**
 *  Whether this detail is obsolete. Occurrences are expected not to point to
 *  obsolete details.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *isObsolete;

/**
 *  The type of package; whether native or non native (e.g., ruby gems, node.js
 *  packages, etc.).
 */
@property(nonatomic, copy, nullable) NSString *packageType;

/** The distro assigned severity of this vulnerability. */
@property(nonatomic, copy, nullable) NSString *severityName;

/** The source from which the information in this Detail was obtained. */
@property(nonatomic, copy, nullable) NSString *source;

/**
 *  The time this information was last changed at the source. This is an
 *  upstream timestamp from the underlying information source - e.g. Ubuntu
 *  security tracker.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *sourceUpdateTime;

/** The name of the vendor of the product. */
@property(nonatomic, copy, nullable) NSString *vendor;

@end


/**
 *  Digest information.
 */
@interface GTLRContainerAnalysis_Digest : GTLRObject

/** `SHA1`, `SHA512` etc. */
@property(nonatomic, copy, nullable) NSString *algo;

/**
 *  Value of the digest.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *digestBytes;

@end


/**
 *  A note that indicates a type of analysis a provider would perform. This note
 *  exists in a provider's project. A `Discovery` occurrence is created in a
 *  consumer's project at the start of analysis.
 */
@interface GTLRContainerAnalysis_DiscoveryNote : GTLRObject

/**
 *  Required. Immutable. The kind of analysis that is handled by this discovery.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Attestation This
 *        represents a logical "role" that can attest to artifacts. (Value:
 *        "ATTESTATION")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Build The note
 *        and occurrence assert build provenance. (Value: "BUILD")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Compliance This
 *        represents a Compliance Note (Value: "COMPLIANCE")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Deployment The
 *        note and occurrence track deployment events. (Value: "DEPLOYMENT")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Discovery The
 *        note and occurrence track the initial discovery status of a resource.
 *        (Value: "DISCOVERY")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_DsseAttestation
 *        This represents a DSSE attestation Note (Value: "DSSE_ATTESTATION")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Image This
 *        represents an image basis relationship. (Value: "IMAGE")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_NoteKindUnspecified
 *        Default value. This value is unused. (Value: "NOTE_KIND_UNSPECIFIED")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Package This
 *        represents a package installed via a package manager. (Value:
 *        "PACKAGE")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Upgrade This
 *        represents an available package upgrade. (Value: "UPGRADE")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryNote_AnalysisKind_Vulnerability
 *        The note and occurrence represent a package vulnerability. (Value:
 *        "VULNERABILITY")
 */
@property(nonatomic, copy, nullable) NSString *analysisKind;

@end


/**
 *  Provides information about the analysis status of a discovered resource.
 */
@interface GTLRContainerAnalysis_DiscoveryOccurrence : GTLRObject

@property(nonatomic, strong, nullable) GTLRContainerAnalysis_AnalysisCompleted *analysisCompleted;

/**
 *  Indicates any errors encountered during analysis of a resource. There could
 *  be 0 or more of these errors.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Status *> *analysisError;

/**
 *  The status of discovery for the resource.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_DiscoveryOccurrence_AnalysisStatus_AnalysisStatusUnspecified
 *        Unknown. (Value: "ANALYSIS_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryOccurrence_AnalysisStatus_Complete
 *        Analysis has completed. (Value: "COMPLETE")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryOccurrence_AnalysisStatus_FinishedFailed
 *        Analysis has finished unsuccessfully, the analysis itself is in a bad
 *        state. (Value: "FINISHED_FAILED")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryOccurrence_AnalysisStatus_FinishedSuccess
 *        Analysis has finished successfully. (Value: "FINISHED_SUCCESS")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryOccurrence_AnalysisStatus_FinishedUnsupported
 *        The resource is known not to be supported. (Value:
 *        "FINISHED_UNSUPPORTED")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryOccurrence_AnalysisStatus_Pending
 *        Resource is known but no action has been taken yet. (Value: "PENDING")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryOccurrence_AnalysisStatus_Scanning
 *        Resource is being analyzed. (Value: "SCANNING")
 */
@property(nonatomic, copy, nullable) NSString *analysisStatus;

/**
 *  When an error is encountered this will contain a LocalizedMessage under
 *  details to show to the user. The LocalizedMessage is output only and
 *  populated by the API.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Status *analysisStatusError;

/**
 *  Output only. The time occurrences related to this discovery occurrence were
 *  archived.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *archiveTime;

/**
 *  Whether the resource is continuously analyzed.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_DiscoveryOccurrence_ContinuousAnalysis_Active
 *        The resource is continuously analyzed. (Value: "ACTIVE")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryOccurrence_ContinuousAnalysis_ContinuousAnalysisUnspecified
 *        Unknown. (Value: "CONTINUOUS_ANALYSIS_UNSPECIFIED")
 *    @arg @c kGTLRContainerAnalysis_DiscoveryOccurrence_ContinuousAnalysis_Inactive
 *        The resource is ignored for continuous analysis. (Value: "INACTIVE")
 */
@property(nonatomic, copy, nullable) NSString *continuousAnalysis;

/** The CPE of the resource being scanned. */
@property(nonatomic, copy, nullable) NSString *cpe;

/** The last time this resource was scanned. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastScanTime;

@end


/**
 *  This represents a particular channel of distribution for a given package.
 *  E.g., Debian's jessie-backports dpkg mirror.
 */
@interface GTLRContainerAnalysis_Distribution : GTLRObject

/**
 *  The CPU architecture for which packages in this distribution channel were
 *  built.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_Distribution_Architecture_ArchitectureUnspecified
 *        Unknown architecture. (Value: "ARCHITECTURE_UNSPECIFIED")
 *    @arg @c kGTLRContainerAnalysis_Distribution_Architecture_X64 X64
 *        architecture. (Value: "X64")
 *    @arg @c kGTLRContainerAnalysis_Distribution_Architecture_X86 X86
 *        architecture. (Value: "X86")
 */
@property(nonatomic, copy, nullable) NSString *architecture;

/**
 *  Required. The cpe_uri in [CPE format](https://cpe.mitre.org/specification/)
 *  denoting the package manager version distributing a package.
 */
@property(nonatomic, copy, nullable) NSString *cpeUri;

/**
 *  The distribution channel-specific description of this package.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  The latest available version of this package in this distribution channel.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Version *latestVersion;

/** A freeform string denoting the maintainer of this package. */
@property(nonatomic, copy, nullable) NSString *maintainer;

/** The distribution channel-specific homepage for this package. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  GTLRContainerAnalysis_DSSEAttestationNote
 */
@interface GTLRContainerAnalysis_DSSEAttestationNote : GTLRObject

/** DSSEHint hints at the purpose of the attestation authority. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_DSSEHint *hint;

@end


/**
 *  Deprecated. Prefer to use a regular Occurrence, and populate the Envelope at
 *  the top level of the Occurrence.
 */
@interface GTLRContainerAnalysis_DSSEAttestationOccurrence : GTLRObject

/**
 *  If doing something security critical, make sure to verify the signatures in
 *  this metadata.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Envelope *envelope;

@property(nonatomic, strong, nullable) GTLRContainerAnalysis_InTotoStatement *statement;

@end


/**
 *  This submessage provides human-readable hints about the purpose of the
 *  authority. Because the name of a note acts as its resource reference, it is
 *  important to disambiguate the canonical name of the Note (which might be a
 *  UUID for security purposes) from "readable" names more suitable for debug
 *  output. Note that these hints should not be used to look up authorities in
 *  security sensitive contexts, such as when looking up attestations to verify.
 */
@interface GTLRContainerAnalysis_DSSEHint : GTLRObject

/**
 *  Required. The human readable name of this attestation authority, for example
 *  "cloudbuild-prod".
 */
@property(nonatomic, copy, nullable) NSString *humanReadableName;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRContainerAnalysis_Empty : GTLRObject
@end


/**
 *  MUST match
 *  https://github.com/secure-systems-lab/dsse/blob/master/envelope.proto. An
 *  authenticated message of arbitrary type.
 */
@interface GTLRContainerAnalysis_Envelope : GTLRObject

/**
 *  payload
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *payload;

@property(nonatomic, copy, nullable) NSString *payloadType;
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_EnvelopeSignature *> *signatures;

@end


/**
 *  GTLRContainerAnalysis_EnvelopeSignature
 */
@interface GTLRContainerAnalysis_EnvelopeSignature : GTLRObject

@property(nonatomic, copy, nullable) NSString *keyid;

/**
 *  sig
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *sig;

@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRContainerAnalysis_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  Container message for hashes of byte content of files, used in source
 *  messages to verify integrity of source input to the build.
 */
@interface GTLRContainerAnalysis_FileHashes : GTLRObject

/** Required. Collection of file hashes. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Hash *> *fileHash;

@end


/**
 *  A set of properties that uniquely identify a given Docker image.
 */
@interface GTLRContainerAnalysis_Fingerprint : GTLRObject

/**
 *  Required. The layer ID of the final layer in the Docker image's v1
 *  representation.
 */
@property(nonatomic, copy, nullable) NSString *v1Name;

/** Required. The ordered list of v2 blobs that represent a given image. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *v2Blob;

/**
 *  Output only. The name of the image's v2 blobs computed via: [bottom] :=
 *  v2_blobbottom := sha256(v2_blob[N] + " " + v2_name[N+1]) Only the name of
 *  the final blob is kept.
 */
@property(nonatomic, copy, nullable) NSString *v2Name;

@end


/**
 *  Per resource and severity counts of fixable and total vulnerabilities.
 */
@interface GTLRContainerAnalysis_FixableTotalByDigest : GTLRObject

/**
 *  The number of fixable vulnerabilities associated with this resource.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fixableCount;

/** The affected resource. */
@property(nonatomic, copy, nullable) NSString *resourceUri;

/**
 *  The severity for this count. SEVERITY_UNSPECIFIED indicates total across all
 *  severities.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_FixableTotalByDigest_Severity_Critical
 *        Critical severity. (Value: "CRITICAL")
 *    @arg @c kGTLRContainerAnalysis_FixableTotalByDigest_Severity_High High
 *        severity. (Value: "HIGH")
 *    @arg @c kGTLRContainerAnalysis_FixableTotalByDigest_Severity_Low Low
 *        severity. (Value: "LOW")
 *    @arg @c kGTLRContainerAnalysis_FixableTotalByDigest_Severity_Medium Medium
 *        severity. (Value: "MEDIUM")
 *    @arg @c kGTLRContainerAnalysis_FixableTotalByDigest_Severity_Minimal
 *        Minimal severity. (Value: "MINIMAL")
 *    @arg @c kGTLRContainerAnalysis_FixableTotalByDigest_Severity_SeverityUnspecified
 *        Unknown. (Value: "SEVERITY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *severity;

/**
 *  The total number of vulnerabilities associated with this resource.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalCount;

@end


/**
 *  A SourceContext referring to a Gerrit project.
 */
@interface GTLRContainerAnalysis_GerritSourceContext : GTLRObject

/** An alias, which may be a branch or tag. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_AliasContext *aliasContext;

/**
 *  The full project name within the host. Projects may be nested, so
 *  "project/subproject" is a valid project name. The "repo name" is the
 *  hostURI/project.
 */
@property(nonatomic, copy, nullable) NSString *gerritProject;

/** The URI of a running Gerrit instance. */
@property(nonatomic, copy, nullable) NSString *hostUri;

/** A revision (commit) ID. */
@property(nonatomic, copy, nullable) NSString *revisionId;

@end


/**
 *  Request message for `GetIamPolicy` method.
 */
@interface GTLRContainerAnalysis_GetIamPolicyRequest : GTLRObject

/**
 *  OPTIONAL: A `GetPolicyOptions` object for specifying options to
 *  `GetIamPolicy`.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GetPolicyOptions *options;

@end


/**
 *  Encapsulates settings provided to GetIamPolicy.
 */
@interface GTLRContainerAnalysis_GetPolicyOptions : GTLRObject

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedPolicyVersion;

@end


/**
 *  A GitSourceContext denotes a particular revision in a third party Git
 *  repository (e.g., GitHub).
 */
@interface GTLRContainerAnalysis_GitSourceContext : GTLRObject

/** Git commit hash. */
@property(nonatomic, copy, nullable) NSString *revisionId;

/** Git repository URL. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  ApprovalConfig describes configuration for manual approval of a build.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ApprovalConfig : GTLRObject

/**
 *  Whether or not approval is needed. If this is set on a build, it will become
 *  pending when created, and will need to be explicitly approved to start.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *approvalRequired;

@end


/**
 *  ApprovalResult describes the decision and associated metadata of a manual
 *  approval of a build.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ApprovalResult : GTLRObject

/** Output only. The time when the approval decision was made. */
@property(nonatomic, strong, nullable) GTLRDateTime *approvalTime;

/**
 *  Output only. Email of the user that called the ApproveBuild API to approve
 *  or reject a build at the time that the API was called.
 */
@property(nonatomic, copy, nullable) NSString *approverAccount;

/** Optional. An optional comment for this manual approval result. */
@property(nonatomic, copy, nullable) NSString *comment;

/**
 *  Required. The decision of this manual approval.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ApprovalResult_Decision_Approved
 *        Build is approved. (Value: "APPROVED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ApprovalResult_Decision_DecisionUnspecified
 *        Default enum type. This should not be used. (Value:
 *        "DECISION_UNSPECIFIED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ApprovalResult_Decision_Rejected
 *        Build is rejected. (Value: "REJECTED")
 */
@property(nonatomic, copy, nullable) NSString *decision;

/**
 *  Optional. An optional URL tied to this manual approval result. This field is
 *  essentially the same as comment, except that it will be rendered by the UI
 *  differently. An example use case is a link to an external job that approved
 *  this Build.
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Artifacts produced by a build that should be uploaded upon successful
 *  completion of all build steps.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Artifacts : GTLRObject

/**
 *  A list of images to be pushed upon the successful completion of all build
 *  steps. The images will be pushed using the builder service account's
 *  credentials. The digests of the pushed images will be stored in the Build
 *  resource's results field. If any of the images fail to be pushed, the build
 *  is marked FAILURE.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *images;

/**
 *  A list of Maven artifacts to be uploaded to Artifact Registry upon
 *  successful completion of all build steps. Artifacts in the workspace
 *  matching specified paths globs will be uploaded to the specified Artifact
 *  Registry repository using the builder service account's credentials. If any
 *  artifacts fail to be pushed, the build is marked FAILURE.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact *> *mavenArtifacts;

/**
 *  A list of objects to be uploaded to Cloud Storage upon successful completion
 *  of all build steps. Files in the workspace matching specified paths globs
 *  will be uploaded to the specified Cloud Storage location using the builder
 *  service account's credentials. The location and generation of the uploaded
 *  objects will be stored in the Build resource's results field. If any objects
 *  fail to be pushed, the build is marked FAILURE.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects *objects;

/**
 *  A list of Python packages to be uploaded to Artifact Registry upon
 *  successful completion of all build steps. The build service account
 *  credentials will be used to perform the upload. If any objects fail to be
 *  pushed, the build is marked FAILURE.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ArtifactsPythonPackage *> *pythonPackages;

@end


/**
 *  Files in the workspace to upload to Cloud Storage upon successful completion
 *  of all build steps.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ArtifactsArtifactObjects : GTLRObject

/**
 *  Cloud Storage bucket and optional object path, in the form
 *  "gs://bucket/path/to/somewhere/". (see [Bucket Name
 *  Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 *  Files in the workspace matching any path pattern will be uploaded to Cloud
 *  Storage with this location as a prefix.
 */
@property(nonatomic, copy, nullable) NSString *location;

/** Path globs used to match files in the build's workspace. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *paths;

/**
 *  Output only. Stores timing information for pushing all artifact objects.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1TimeSpan *timing;

@end


/**
 *  A Maven artifact to upload to Artifact Registry upon successful completion
 *  of all build steps.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ArtifactsMavenArtifact : GTLRObject

/**
 *  Maven `artifactId` value used when uploading the artifact to Artifact
 *  Registry.
 */
@property(nonatomic, copy, nullable) NSString *artifactId;

/**
 *  Maven `groupId` value used when uploading the artifact to Artifact Registry.
 */
@property(nonatomic, copy, nullable) NSString *groupId;

/**
 *  Path to an artifact in the build's workspace to be uploaded to Artifact
 *  Registry. This can be either an absolute path, e.g.
 *  /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from
 *  /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
 */
@property(nonatomic, copy, nullable) NSString *path;

/**
 *  Artifact Registry repository, in the form
 *  "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the
 *  workspace specified by path will be uploaded to Artifact Registry with this
 *  location as a prefix.
 */
@property(nonatomic, copy, nullable) NSString *repository;

/**
 *  Maven `version` value used when uploading the artifact to Artifact Registry.
 */
@property(nonatomic, copy, nullable) NSString *version;

@end


/**
 *  Python package to upload to Artifact Registry upon successful completion of
 *  all build steps. A package can encapsulate multiple objects to be uploaded
 *  to a single repository.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ArtifactsPythonPackage : GTLRObject

/**
 *  Path globs used to match files in the build's workspace. For Python/ Twine,
 *  this is usually `dist/ *`, and sometimes additionally an `.asc` file.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *paths;

/**
 *  Artifact Registry repository, in the form
 *  "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace
 *  matching any path pattern will be uploaded to Artifact Registry with this
 *  location as a prefix.
 */
@property(nonatomic, copy, nullable) NSString *repository;

@end


/**
 *  A build resource in the Cloud Build API. At a high level, a `Build`
 *  describes where to find source code, how to build it (for example, the
 *  builder image to run on the source), and where to store the built artifacts.
 *  Fields can include the following variables, which will be expanded when the
 *  build is created: - $PROJECT_ID: the project ID of the build. -
 *  $PROJECT_NUMBER: the project number of the build. - $LOCATION: the
 *  location/region of the build. - $BUILD_ID: the autogenerated ID of the
 *  build. - $REPO_NAME: the source repository name specified by RepoSource. -
 *  $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag
 *  name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA
 *  specified by RepoSource or resolved from the specified branch or tag. -
 *  $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build : GTLRObject

/**
 *  Output only. Describes this build's approval configuration, status, and
 *  result.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildApproval *approval;

/**
 *  Artifacts produced by the build that should be uploaded upon successful
 *  completion of all build steps.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Artifacts *artifacts;

/** Secrets and secret environment variables. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Secrets *availableSecrets;

/**
 *  Output only. The ID of the `BuildTrigger` that triggered this build, if it
 *  was triggered automatically.
 */
@property(nonatomic, copy, nullable) NSString *buildTriggerId;

/**
 *  Output only. Time at which the request to create the build was received.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Contains information about the build when status=FAILURE. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo *failureInfo;

/**
 *  Output only. Time at which execution of the build was finished. The
 *  difference between finish_time and start_time is the duration of the build's
 *  execution.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *finishTime;

/**
 *  Output only. Unique identifier of the build.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  A list of images to be pushed upon the successful completion of all build
 *  steps. The images are pushed using the builder service account's
 *  credentials. The digests of the pushed images will be stored in the `Build`
 *  resource's results field. If any of the images fail to be pushed, the build
 *  status is marked `FAILURE`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *images;

/**
 *  Google Cloud Storage bucket where logs should be written (see [Bucket Name
 *  Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 *  Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
 */
@property(nonatomic, copy, nullable) NSString *logsBucket;

/** Output only. URL to logs for this build in Google Cloud Console. */
@property(nonatomic, copy, nullable) NSString *logUrl;

/**
 *  Output only. The 'Build' name with format:
 *  `projects/{project}/locations/{location}/builds/{build}`, where {build} is a
 *  unique identifier generated by the service.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Special options for this build. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions *options;

/** Output only. ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/**
 *  TTL in queue for this build. If provided and the build is enqueued longer
 *  than this value, the build will expire and the build status will be
 *  `EXPIRED`. The TTL starts ticking from create_time.
 */
@property(nonatomic, strong, nullable) GTLRDuration *queueTtl;

/** Output only. Results of the build. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Results *results;

/**
 *  Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager
 *  is the recommended technique for managing sensitive data with Cloud Build.
 *  Use `available_secrets` to configure builds to access secrets from Secret
 *  Manager. For instructions, see:
 *  https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Secret *> *secrets;

/**
 *  IAM service account whose credentials will be used at build runtime. Must be
 *  of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can
 *  be email address or uniqueId of the service account.
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/** The location of the source files to build. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Source *source;

/** Output only. A permanent fixed identifier for source. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1SourceProvenance *sourceProvenance;

/** Output only. Time at which execution of the build was started. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

/**
 *  Output only. Status of the build.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_Cancelled
 *        Build or step was canceled by a user. (Value: "CANCELLED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_Expired
 *        Build was enqueued for longer than the value of `queue_ttl`. (Value:
 *        "EXPIRED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_Failure
 *        Build or step failed to complete successfully. (Value: "FAILURE")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_InternalError
 *        Build or step failed due to an internal cause. (Value:
 *        "INTERNAL_ERROR")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_Pending
 *        Build has been created and is pending execution and queuing. It has
 *        not been queued. (Value: "PENDING")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_Queued
 *        Build or step is queued; work has not yet begun. (Value: "QUEUED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_StatusUnknown
 *        Status of the build is unknown. (Value: "STATUS_UNKNOWN")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_Success
 *        Build or step finished successfully. (Value: "SUCCESS")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_Timeout
 *        Build or step took longer than was allowed. (Value: "TIMEOUT")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Status_Working
 *        Build or step is being executed. (Value: "WORKING")
 */
@property(nonatomic, copy, nullable) NSString *status;

/** Output only. Customer-readable message about the current status. */
@property(nonatomic, copy, nullable) NSString *statusDetail;

/** Required. The operations to be performed on the workspace. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep *> *steps;

/** Substitutions data for `Build` resource. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Substitutions *substitutions;

/** Tags for annotation of a `Build`. These are not docker tags. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *tags;

/**
 *  Amount of time that this build should be allowed to run, to second
 *  granularity. If this amount of time elapses, work on the build will cease
 *  and the build status will be `TIMEOUT`. `timeout` starts ticking from
 *  `startTime`. Default time is ten minutes.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/**
 *  Output only. Stores timing information for phases of the build. Valid keys
 *  are: * BUILD: time to execute all build steps. * PUSH: time to push all
 *  artifacts including docker images and non docker artifacts. * FETCHSOURCE:
 *  time to fetch source. * SETUPBUILD: time to set up build. If the build does
 *  not specify source or images, these keys will not be included.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Timing *timing;

/**
 *  Output only. Non-fatal problems encountered during the execution of the
 *  build.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildWarning *> *warnings;

@end


/**
 *  Substitutions data for `Build` resource.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Substitutions : GTLRObject
@end


/**
 *  Output only. Stores timing information for phases of the build. Valid keys
 *  are: * BUILD: time to execute all build steps. * PUSH: time to push all
 *  artifacts including docker images and non docker artifacts. * FETCHSOURCE:
 *  time to fetch source. * SETUPBUILD: time to set up build. If the build does
 *  not specify source or images, these keys will not be included.
 *
 *  @note This class is documented as having more properties of
 *        GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1TimeSpan. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Build_Timing : GTLRObject
@end


/**
 *  BuildApproval describes a build's approval configuration, state, and result.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildApproval : GTLRObject

/** Output only. Configuration for manual approval of this build. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ApprovalConfig *config;

/** Output only. Result of manual approval for this Build. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1ApprovalResult *result;

/**
 *  Output only. The state of this build's approval.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildApproval_State_Approved
 *        Build approval has been approved. (Value: "APPROVED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildApproval_State_Cancelled
 *        Build was cancelled while it was still pending approval. (Value:
 *        "CANCELLED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildApproval_State_Pending
 *        Build approval is pending. (Value: "PENDING")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildApproval_State_Rejected
 *        Build approval has been rejected. (Value: "REJECTED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildApproval_State_StateUnspecified
 *        Default enum type. This should not be used. (Value:
 *        "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  A fatal problem encountered during the execution of the build.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo : GTLRObject

/** Explains the failure issue in more detail using hard-coded text. */
@property(nonatomic, copy, nullable) NSString *detail;

/**
 *  The name of the failure.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo_Type_FailureTypeUnspecified
 *        Type unspecified (Value: "FAILURE_TYPE_UNSPECIFIED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo_Type_FetchSourceFailed
 *        The source fetching has failed. (Value: "FETCH_SOURCE_FAILED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo_Type_LoggingFailure
 *        Backend logging failures. Should retry. (Value: "LOGGING_FAILURE")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo_Type_PushFailed
 *        Unable to push the image to the repository. (Value: "PUSH_FAILED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo_Type_PushImageNotFound
 *        Final image not found. (Value: "PUSH_IMAGE_NOT_FOUND")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo_Type_PushNotAuthorized
 *        Unauthorized push of the final image. (Value: "PUSH_NOT_AUTHORIZED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildFailureInfo_Type_UserBuildStep
 *        A build step has failed. (Value: "USER_BUILD_STEP")
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Optional arguments to enable specific features of builds.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions : GTLRObject

/**
 *  Requested disk size for the VM that runs the build. Note that this is *NOT*
 *  "disk free"; some of the space will be used by the operating system and
 *  build utilities. Also note that this is the minimum disk size that will be
 *  allocated for the build -- the build may run with a larger disk than
 *  requested. At present, the maximum disk size is 1000GB; builds that request
 *  more than the maximum are rejected with an error.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *diskSizeGb;

/**
 *  Option to specify whether or not to apply bash style string operations to
 *  the substitutions. NOTE: this is always enabled for triggered builds and
 *  cannot be overridden in the build configuration file.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *dynamicSubstitutions;

/**
 *  A list of global environment variable definitions that will exist for all
 *  build steps in this build. If a variable is defined in both globally and in
 *  a build step, the variable will use the build step value. The elements are
 *  of the form "KEY=VALUE" for the environment variable "KEY" being given the
 *  value "VALUE".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *env;

/**
 *  Option to specify the logging mode, which determines if and where build logs
 *  are stored.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_CloudLoggingOnly
 *        Build logs are stored in Cloud Logging. Selecting this option will not
 *        allow [logs
 *        streaming](https://cloud.google.com/sdk/gcloud/reference/builds/log).
 *        (Value: "CLOUD_LOGGING_ONLY")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_GcsOnly
 *        Build logs are stored in Cloud Storage. (Value: "GCS_ONLY")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_Legacy
 *        Build logs are stored in Cloud Logging and Cloud Storage. (Value:
 *        "LEGACY")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_LoggingUnspecified
 *        The service determines the logging mode. The default is `LEGACY`. Do
 *        not rely on the default logging behavior as it may change in the
 *        future. (Value: "LOGGING_UNSPECIFIED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_None
 *        Turn off all logging. No build logs will be captured. (Value: "NONE")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_Logging_StackdriverOnly
 *        This option is the same as CLOUD_LOGGING_ONLY. (Value:
 *        "STACKDRIVER_ONLY")
 */
@property(nonatomic, copy, nullable) NSString *logging;

/**
 *  Option to define build log streaming behavior to Google Cloud Storage.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_LogStreamingOption_StreamDefault
 *        Service may automatically determine build log streaming behavior.
 *        (Value: "STREAM_DEFAULT")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_LogStreamingOption_StreamOff
 *        Build logs should not be streamed to Google Cloud Storage; they will
 *        be written when the build is completed. (Value: "STREAM_OFF")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_LogStreamingOption_StreamOn
 *        Build logs should be streamed to Google Cloud Storage. (Value:
 *        "STREAM_ON")
 */
@property(nonatomic, copy, nullable) NSString *logStreamingOption;

/**
 *  Compute Engine machine type on which to run the build.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_E2Highcpu32
 *        Highcpu e2 machine with 32 CPUs. (Value: "E2_HIGHCPU_32")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_E2Highcpu8
 *        Highcpu e2 machine with 8 CPUs. (Value: "E2_HIGHCPU_8")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_N1Highcpu32
 *        Highcpu machine with 32 CPUs. (Value: "N1_HIGHCPU_32")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_N1Highcpu8
 *        Highcpu machine with 8 CPUs. (Value: "N1_HIGHCPU_8")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_MachineType_Unspecified
 *        Standard machine type. (Value: "UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *machineType;

/**
 *  Optional. Specification for execution on a `WorkerPool`. See [running builds
 *  in a private
 *  pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool)
 *  for more information.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptionsPoolOption *pool;

/**
 *  Requested verifiability options.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_RequestedVerifyOption_NotVerified
 *        Not a verifiable build (the default). (Value: "NOT_VERIFIED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_RequestedVerifyOption_Verified
 *        Build must be verified. (Value: "VERIFIED")
 */
@property(nonatomic, copy, nullable) NSString *requestedVerifyOption;

/**
 *  A list of global environment variables, which are encrypted using a Cloud
 *  Key Management Service crypto key. These values must be specified in the
 *  build's `Secret`. These variables will be available to all build steps in
 *  this build.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *secretEnv;

/** Requested hash for SourceProvenance. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sourceProvenanceHash;

/**
 *  Option to specify behavior when there is an error in the substitution
 *  checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and
 *  cannot be overridden in the build configuration file.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_SubstitutionOption_AllowLoose
 *        Do not fail the build if error in substitutions checks. (Value:
 *        "ALLOW_LOOSE")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptions_SubstitutionOption_MustMatch
 *        Fails the build if error in substitutions checks, like missing a
 *        substitution in the template or in the map. (Value: "MUST_MATCH")
 */
@property(nonatomic, copy, nullable) NSString *substitutionOption;

/**
 *  Global list of volumes to mount for ALL build steps Each volume is created
 *  as an empty volume prior to starting the build process. Upon completion of
 *  the build, volumes and their contents are discarded. Global volume names and
 *  paths cannot conflict with the volumes defined a build step. Using a global
 *  volume in a build with only one step is not valid as it is indicative of a
 *  build request with an incorrect configuration.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Volume *> *volumes;

/** This field deprecated; please use `pool.name` instead. */
@property(nonatomic, copy, nullable) NSString *workerPool;

@end


/**
 *  Details about how a build should be executed on a `WorkerPool`. See [running
 *  builds in a private
 *  pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool)
 *  for more information.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildOptionsPoolOption : GTLRObject

/**
 *  The `WorkerPool` resource to execute the build on. You must have
 *  `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format
 *  projects/{project}/locations/{location}/workerPools/{workerPoolId}
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  A step in the build pipeline.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep : GTLRObject

/**
 *  Allow this build step to fail without failing the entire build if and only
 *  if the exit code is one of the specified codes. If allow_failure is also
 *  specified, this field will take precedence.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *allowExitCodes;

/**
 *  Allow this build step to fail without failing the entire build. If false,
 *  the entire build will fail if this step fails. Otherwise, the build will
 *  succeed, but this step will still have a failure status. Error information
 *  will be reported in the failure_detail field.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *allowFailure;

/**
 *  A list of arguments that will be presented to the step when it is started.
 *  If the image used to run the step's container has an entrypoint, the `args`
 *  are used as arguments to that entrypoint. If the image does not define an
 *  entrypoint, the first element in args is used as the entrypoint, and the
 *  remainder will be used as arguments.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *args;

/**
 *  Working directory to use when running this step's container. If this value
 *  is a relative path, it is relative to the build's working directory. If this
 *  value is absolute, it may be outside the build's working directory, in which
 *  case the contents of the path may not be persisted across build step
 *  executions, unless a `volume` for that path is specified. If the build
 *  specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies
 *  an absolute path, the `RepoSource` `dir` is ignored for the step's
 *  execution.
 */
@property(nonatomic, copy, nullable) NSString *dir;

/**
 *  Entrypoint to be used instead of the build step image's default entrypoint.
 *  If unset, the image's default entrypoint is used.
 */
@property(nonatomic, copy, nullable) NSString *entrypoint;

/**
 *  A list of environment variable definitions to be used when running a step.
 *  The elements are of the form "KEY=VALUE" for the environment variable "KEY"
 *  being given the value "VALUE".
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *env;

/**
 *  Output only. Return code from running the step.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *exitCode;

/**
 *  Unique identifier for this build step, used in `wait_for` to reference this
 *  build step as a dependency.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/**
 *  Required. The name of the container image that will run this particular
 *  build step. If the image is available in the host's Docker daemon's cache,
 *  it will be run directly. If not, the host will attempt to pull the image
 *  first, using the builder service account's credentials if necessary. The
 *  Docker daemon's cache will already have the latest versions of all of the
 *  officially supported build steps
 *  ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)).
 *  The Docker daemon will also have cached many of the layers for some popular
 *  images, like "ubuntu", "debian", but they will be refreshed at the time you
 *  attempt to use them. If you built an image in a previous build step, it will
 *  be stored in the host's Docker daemon's cache and is available to use as the
 *  name for a later build step.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Stores timing information for pulling this build step's builder
 *  image only.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1TimeSpan *pullTiming;

/**
 *  A shell script to be executed in the step. When script is provided, the user
 *  cannot specify the entrypoint or args.
 */
@property(nonatomic, copy, nullable) NSString *script;

/**
 *  A list of environment variables which are encrypted using a Cloud Key
 *  Management Service crypto key. These values must be specified in the build's
 *  `Secret`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *secretEnv;

/**
 *  Output only. Status of the build step. At this time, build step status is
 *  only updated on build completion; step status is not updated in real-time as
 *  the build progresses.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_Cancelled
 *        Build or step was canceled by a user. (Value: "CANCELLED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_Expired
 *        Build was enqueued for longer than the value of `queue_ttl`. (Value:
 *        "EXPIRED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_Failure
 *        Build or step failed to complete successfully. (Value: "FAILURE")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_InternalError
 *        Build or step failed due to an internal cause. (Value:
 *        "INTERNAL_ERROR")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_Pending
 *        Build has been created and is pending execution and queuing. It has
 *        not been queued. (Value: "PENDING")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_Queued
 *        Build or step is queued; work has not yet begun. (Value: "QUEUED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_StatusUnknown
 *        Status of the build is unknown. (Value: "STATUS_UNKNOWN")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_Success
 *        Build or step finished successfully. (Value: "SUCCESS")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_Timeout
 *        Build or step took longer than was allowed. (Value: "TIMEOUT")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildStep_Status_Working
 *        Build or step is being executed. (Value: "WORKING")
 */
@property(nonatomic, copy, nullable) NSString *status;

/**
 *  Time limit for executing this build step. If not defined, the step has no
 *  time limit and will be allowed to continue to run until either it completes
 *  or the build itself times out.
 */
@property(nonatomic, strong, nullable) GTLRDuration *timeout;

/** Output only. Stores timing information for executing this build step. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1TimeSpan *timing;

/**
 *  List of volumes to mount into the build step. Each volume is created as an
 *  empty volume prior to execution of the build step. Upon completion of the
 *  build, volumes and their contents are discarded. Using a named volume in
 *  only one step is not valid as it is indicative of a build request with an
 *  incorrect configuration.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Volume *> *volumes;

/**
 *  The ID(s) of the step(s) that this build step depends on. This build step
 *  will not start until all the build steps in `wait_for` have completed
 *  successfully. If `wait_for` is empty, this build step will start when all
 *  previous build steps in the `Build.Steps` list have completed successfully.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *waitFor;

@end


/**
 *  A non-fatal problem encountered during the execution of the build.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildWarning : GTLRObject

/**
 *  The priority for this warning.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildWarning_Priority_Alert
 *        e.g. alerts that a feature used in the build is pending removal
 *        (Value: "ALERT")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildWarning_Priority_Info
 *        e.g. deprecation warnings and alternative feature highlights. (Value:
 *        "INFO")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildWarning_Priority_PriorityUnspecified
 *        Should not be used. (Value: "PRIORITY_UNSPECIFIED")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuildWarning_Priority_Warning
 *        e.g. automated detection of possible issues with the build. (Value:
 *        "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *priority;

/** Explanation of the warning generated. */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  An image built by the pipeline.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuiltImage : GTLRObject

/** Docker Registry 2.0 digest. */
@property(nonatomic, copy, nullable) NSString *digest;

/**
 *  Name used to push the container image to Google Container Registry, as
 *  presented to `docker push`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. Stores timing information for pushing the specified image. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1TimeSpan *pushTiming;

@end


/**
 *  Container message for hashes of byte content of files, used in
 *  SourceProvenance messages to verify integrity of source input to the build.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1FileHashes : GTLRObject

/** Collection of file hashes. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Hash *> *fileHash;

@end


/**
 *  Container message for hash values.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Hash : GTLRObject

/**
 *  The type of hash that was performed.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Hash_Type_Md5 Use
 *        a md5 hash. (Value: "MD5")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Hash_Type_None No
 *        hash requested. (Value: "NONE")
 *    @arg @c kGTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Hash_Type_Sha256
 *        Use a sha256 hash. (Value: "SHA256")
 */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  The hash value.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Pairs a set of secret environment variables mapped to encrypted values with
 *  the Cloud KMS key to use to decrypt the value.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1InlineSecret : GTLRObject

/**
 *  Map of environment variable name to its encrypted value. Secret environment
 *  variables must be unique across all of a build's secrets, and must be used
 *  by at least one build step. Values can be at most 64 KB in size. There can
 *  be at most 100 secret values across all of a build's secrets.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1InlineSecret_EnvMap *envMap;

/**
 *  Resource name of Cloud KMS crypto key to decrypt the encrypted value. In
 *  format: projects/ * /locations/ * /keyRings/ * /cryptoKeys/ *
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

@end


/**
 *  Map of environment variable name to its encrypted value. Secret environment
 *  variables must be unique across all of a build's secrets, and must be used
 *  by at least one build step. Values can be at most 64 KB in size. There can
 *  be at most 100 secret values across all of a build's secrets.
 *
 *  @note This class is documented as having more properties of NSString
 *        (Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *        web-safe format).). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1InlineSecret_EnvMap : GTLRObject
@end


/**
 *  Location of the source in a Google Cloud Source Repository.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1RepoSource : GTLRObject

/**
 *  Regex matching branches to build. The syntax of the regular expressions
 *  accepted is the syntax accepted by RE2 and described at
 *  https://github.com/google/re2/wiki/Syntax
 */
@property(nonatomic, copy, nullable) NSString *branchName;

/** Explicit commit SHA to build. */
@property(nonatomic, copy, nullable) NSString *commitSha;

/**
 *  Directory, relative to the source root, in which to run the build. This must
 *  be a relative path. If a step's `dir` is specified and is an absolute path,
 *  this value is ignored for that step's execution.
 */
@property(nonatomic, copy, nullable) NSString *dir;

/**
 *  Only trigger a build if the revision regex does NOT match the revision
 *  regex.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *invertRegex;

/**
 *  ID of the project that owns the Cloud Source Repository. If omitted, the
 *  project ID requesting the build is assumed.
 */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Name of the Cloud Source Repository. */
@property(nonatomic, copy, nullable) NSString *repoName;

/**
 *  Substitutions to use in a triggered build. Should only be used with
 *  RunBuildTrigger
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1RepoSource_Substitutions *substitutions;

/**
 *  Regex matching tags to build. The syntax of the regular expressions accepted
 *  is the syntax accepted by RE2 and described at
 *  https://github.com/google/re2/wiki/Syntax
 */
@property(nonatomic, copy, nullable) NSString *tagName;

@end


/**
 *  Substitutions to use in a triggered build. Should only be used with
 *  RunBuildTrigger
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1RepoSource_Substitutions : GTLRObject
@end


/**
 *  Artifacts created by the build pipeline.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Results : GTLRObject

/**
 *  Path to the artifact manifest for non-container artifacts uploaded to Cloud
 *  Storage. Only populated when artifacts are uploaded to Cloud Storage.
 */
@property(nonatomic, copy, nullable) NSString *artifactManifest;

/** Time to push all non-container artifacts to Cloud Storage. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1TimeSpan *artifactTiming;

/**
 *  List of build step digests, in the order corresponding to build step
 *  indices.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *buildStepImages;

/**
 *  List of build step outputs, produced by builder images, in the order
 *  corresponding to build step indices. [Cloud
 *  Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can
 *  produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first
 *  4KB of data is stored.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *buildStepOutputs;

/** Container images that were built as a part of the build. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1BuiltImage *> *images;

/** Maven artifacts uploaded to Artifact Registry at the end of the build. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1UploadedMavenArtifact *> *mavenArtifacts;

/**
 *  Number of non-container artifacts uploaded to Cloud Storage. Only populated
 *  when artifacts are uploaded to Cloud Storage.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *numArtifacts;

/** Python artifacts uploaded to Artifact Registry at the end of the build. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1UploadedPythonPackage *> *pythonPackages;

@end


/**
 *  Pairs a set of secret environment variables containing encrypted values with
 *  the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with
 *  `available_secrets` instead of using `kmsKeyName` with `secret`. For
 *  instructions see:
 *  https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Secret : GTLRObject

/** Cloud KMS key name to use to decrypt these envs. */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

/**
 *  Map of environment variable name to its encrypted value. Secret environment
 *  variables must be unique across all of a build's secrets, and must be used
 *  by at least one build step. Values can be at most 64 KB in size. There can
 *  be at most 100 secret values across all of a build's secrets.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Secret_SecretEnv *secretEnv;

@end


/**
 *  Map of environment variable name to its encrypted value. Secret environment
 *  variables must be unique across all of a build's secrets, and must be used
 *  by at least one build step. Values can be at most 64 KB in size. There can
 *  be at most 100 secret values across all of a build's secrets.
 *
 *  @note This class is documented as having more properties of NSString
 *        (Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *        web-safe format).). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Secret_SecretEnv : GTLRObject
@end


/**
 *  Pairs a secret environment variable with a SecretVersion in Secret Manager.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1SecretManagerSecret : GTLRObject

/**
 *  Environment variable name to associate with the secret. Secret environment
 *  variables must be unique across all of a build's secrets, and must be used
 *  by at least one build step.
 */
@property(nonatomic, copy, nullable) NSString *env;

/**
 *  Resource name of the SecretVersion. In format: projects/ * /secrets/ *
 *  /versions/ *
 */
@property(nonatomic, copy, nullable) NSString *versionName;

@end


/**
 *  Secrets and secret environment variables.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Secrets : GTLRObject

/**
 *  Secrets encrypted with KMS key and the associated secret environment
 *  variable.
 *
 *  Remapped to 'inlineProperty' to avoid language reserved word 'inline'.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1InlineSecret *> *inlineProperty;

/** Secrets in Secret Manager and associated secret environment variable. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1SecretManagerSecret *> *secretManager;

@end


/**
 *  Location of the source in a supported storage service.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Source : GTLRObject

/**
 *  If provided, get the source from this location in a Cloud Source Repository.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1RepoSource *repoSource;

/** If provided, get the source from this location in Google Cloud Storage. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1StorageSource *storageSource;

/**
 *  If provided, get the source from this manifest in Google Cloud Storage. This
 *  feature is in Preview; see description
 *  [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1StorageSourceManifest *storageSourceManifest;

@end


/**
 *  Provenance of the source. Ways to find the original source, or verify that
 *  some source was used for this build.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1SourceProvenance : GTLRObject

/**
 *  Output only. Hash(es) of the build source, which can be used to verify that
 *  the original source integrity was maintained in the build. Note that
 *  `FileHashes` will only be populated if `BuildOptions` has requested a
 *  `SourceProvenanceHash`. The keys to this map are file paths used as build
 *  source and the values contain the hash values for those files. If the build
 *  source came in a single package such as a gzipped tarfile (`.tar.gz`), the
 *  `FileHash` will be for the single path to that file.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1SourceProvenance_FileHashes *fileHashes;

/**
 *  A copy of the build's `source.repo_source`, if exists, with any revisions
 *  resolved.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1RepoSource *resolvedRepoSource;

/**
 *  A copy of the build's `source.storage_source`, if exists, with any
 *  generations resolved.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1StorageSource *resolvedStorageSource;

/**
 *  A copy of the build's `source.storage_source_manifest`, if exists, with any
 *  revisions resolved. This feature is in Preview.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1StorageSourceManifest *resolvedStorageSourceManifest;

@end


/**
 *  Output only. Hash(es) of the build source, which can be used to verify that
 *  the original source integrity was maintained in the build. Note that
 *  `FileHashes` will only be populated if `BuildOptions` has requested a
 *  `SourceProvenanceHash`. The keys to this map are file paths used as build
 *  source and the values contain the hash values for those files. If the build
 *  source came in a single package such as a gzipped tarfile (`.tar.gz`), the
 *  `FileHash` will be for the single path to that file.
 *
 *  @note This class is documented as having more properties of
 *        GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1FileHashes. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1SourceProvenance_FileHashes : GTLRObject
@end


/**
 *  Location of the source in an archive file in Google Cloud Storage.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1StorageSource : GTLRObject

/**
 *  Google Cloud Storage bucket containing the source (see [Bucket Name
 *  Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Google Cloud Storage generation for the object. If the generation is
 *  omitted, the latest generation will be used.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  Google Cloud Storage object containing the source. This object must be a
 *  zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to
 *  build.
 */
@property(nonatomic, copy, nullable) NSString *object;

@end


/**
 *  Location of the source manifest in Google Cloud Storage. This feature is in
 *  Preview; see description
 *  [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1StorageSourceManifest : GTLRObject

/**
 *  Google Cloud Storage bucket containing the source manifest (see [Bucket Name
 *  Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
 */
@property(nonatomic, copy, nullable) NSString *bucket;

/**
 *  Google Cloud Storage generation for the object. If the generation is
 *  omitted, the latest generation will be used.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *generation;

/**
 *  Google Cloud Storage object containing the source manifest. This object must
 *  be a JSON file.
 */
@property(nonatomic, copy, nullable) NSString *object;

@end


/**
 *  Start and end times for a build execution phase.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1TimeSpan : GTLRObject

/** End of time span. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Start of time span. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  A Maven artifact uploaded using the MavenArtifact directive.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1UploadedMavenArtifact : GTLRObject

/** Hash types and values of the Maven Artifact. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1FileHashes *fileHashes;

/**
 *  Output only. Stores timing information for pushing the specified artifact.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1TimeSpan *pushTiming;

/** URI of the uploaded artifact. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Artifact uploaded using the PythonPackage directive.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1UploadedPythonPackage : GTLRObject

/** Hash types and values of the Python Artifact. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1FileHashes *fileHashes;

/**
 *  Output only. Stores timing information for pushing the specified artifact.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1TimeSpan *pushTiming;

/** URI of the uploaded artifact. */
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  Volume describes a Docker container volume which is mounted into build steps
 *  in order to persist files across build step execution.
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsCloudbuildV1Volume : GTLRObject

/**
 *  Name of the volume to mount. Volume names must be unique per build step and
 *  must be valid names for Docker volumes. Each named volume must be used by at
 *  least two build steps.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Path at which to mount the volume. Paths must be absolute and cannot
 *  conflict with other volume paths on the same build step or with certain
 *  reserved volume paths.
 */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  Metadata for all operations used and required for all operations that
 *  created by Container Analysis Providers
 */
@interface GTLRContainerAnalysis_GoogleDevtoolsContaineranalysisV1alpha1OperationMetadata : GTLRObject

/** Output only. The time this operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The time that this operation was marked completed or failed.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

@end


/**
 *  Indicates the location at which a package was found.
 */
@interface GTLRContainerAnalysis_GrafeasV1FileLocation : GTLRObject

/**
 *  For jars that are contained inside .war files, this filepath can indicate
 *  the path to war file combined with the path to jar file.
 */
@property(nonatomic, copy, nullable) NSString *filePath;

@end


/**
 *  Identifies the entity that executed the recipe, which is trusted to have
 *  correctly performed the operation and populated this provenance.
 */
@interface GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder : GTLRObject

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  Indicates that the builder claims certain fields in this message to be
 *  complete.
 */
@interface GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness : GTLRObject

/**
 *  environment
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *environment;

/**
 *  materials
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *materials;

/**
 *  parameters
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *parameters;

@end


/**
 *  Describes where the config file that kicked off the build came from. This is
 *  effectively a pointer to the source where buildConfig came from.
 */
@interface GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource : GTLRObject

@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource_Digest *digest;
@property(nonatomic, copy, nullable) NSString *entryPoint;
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource_Digest
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource_Digest : GTLRObject
@end


/**
 *  Identifies the event that kicked off the build.
 */
@interface GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation : GTLRObject

@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaConfigSource *configSource;
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation_Environment *environment;
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation_Parameters *parameters;

@end


/**
 *  GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation_Environment
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation_Environment : GTLRObject
@end


/**
 *  GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation_Parameters
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation_Parameters : GTLRObject
@end


/**
 *  The collection of artifacts that influenced the build including sources,
 *  dependencies, build tools, base images, and so on.
 */
@interface GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial : GTLRObject

@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial_Digest *digest;
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial_Digest
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial_Digest : GTLRObject
@end


/**
 *  Other properties of the build.
 */
@interface GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata : GTLRObject

@property(nonatomic, strong, nullable) GTLRDateTime *buildFinishedOn;
@property(nonatomic, copy, nullable) NSString *buildInvocationId;
@property(nonatomic, strong, nullable) GTLRDateTime *buildStartedOn;
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaCompleteness *completeness;

/**
 *  reproducible
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reproducible;

@end


/**
 *  Container message for hash values.
 */
@interface GTLRContainerAnalysis_Hash : GTLRObject

/** Required. The type of hash that was performed, e.g. "SHA-256". */
@property(nonatomic, copy, nullable) NSString *type;

/**
 *  Required. The hash value.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  This submessage provides human-readable hints about the purpose of the
 *  authority. Because the name of a note acts as its resource reference, it is
 *  important to disambiguate the canonical name of the Note (which might be a
 *  UUID for security purposes) from "readable" names more suitable for debug
 *  output. Note that these hints should not be used to look up authorities in
 *  security sensitive contexts, such as when looking up attestations to verify.
 */
@interface GTLRContainerAnalysis_Hint : GTLRObject

/**
 *  Required. The human readable name of this attestation authority, for example
 *  "qa".
 */
@property(nonatomic, copy, nullable) NSString *humanReadableName;

@end


/**
 *  The unique identifier of the update.
 */
@interface GTLRContainerAnalysis_Identity : GTLRObject

/**
 *  The revision number of the update.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *revision;

/** The revision independent identifier of the update. */
@property(nonatomic, copy, nullable) NSString *updateId;

@end


/**
 *  Basis describes the base image portion (Note) of the DockerImage
 *  relationship. Linked occurrences are derived from this or an equivalent
 *  image via: FROM Or an equivalent reference, e.g., a tag of the resource_url.
 */
@interface GTLRContainerAnalysis_ImageNote : GTLRObject

/** Required. Immutable. The fingerprint of the base image. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Fingerprint *fingerprint;

/**
 *  Required. Immutable. The resource_url for the resource representing the
 *  basis of associated occurrence images.
 */
@property(nonatomic, copy, nullable) NSString *resourceUrl;

@end


/**
 *  Details of the derived image portion of the DockerImage relationship. This
 *  image would be produced from a Dockerfile with FROM .
 */
@interface GTLRContainerAnalysis_ImageOccurrence : GTLRObject

/**
 *  Output only. This contains the base image URL for the derived image
 *  occurrence.
 */
@property(nonatomic, copy, nullable) NSString *baseResourceUrl;

/**
 *  Output only. The number of layers by which this image differs from the
 *  associated image basis.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *distance;

/** Required. The fingerprint of the derived image. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Fingerprint *fingerprint;

/**
 *  This contains layer-specific metadata, if populated it has length "distance"
 *  and is ordered with [distance] being the layer immediately following the
 *  base image and [1] being the final layer.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Layer *> *layerInfo;

@end


/**
 *  GTLRContainerAnalysis_InTotoProvenance
 */
@interface GTLRContainerAnalysis_InTotoProvenance : GTLRObject

/** required */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_BuilderConfig *builderConfig;

/**
 *  The collection of artifacts that influenced the build including sources,
 *  dependencies, build tools, base images, and so on. This is considered to be
 *  incomplete unless metadata.completeness.materials is true. Unset or null is
 *  equivalent to empty.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *materials;

@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Metadata *metadata;

/**
 *  Identifies the configuration used for the build. When combined with
 *  materials, this SHOULD fully describe the build, such that re-running this
 *  recipe results in bit-for-bit identical output (if the build is
 *  reproducible). required
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Recipe *recipe;

@end


/**
 *  Spec defined at
 *  https://github.com/in-toto/attestation/tree/main/spec#statement The
 *  serialized InTotoStatement will be stored as Envelope.payload.
 *  Envelope.payloadType is always "application/vnd.in-toto+json".
 */
@interface GTLRContainerAnalysis_InTotoStatement : GTLRObject

/** Always `https://in-toto.io/Statement/v0.1`. */
@property(nonatomic, copy, nullable) NSString *xType;

/** `https://slsa.dev/provenance/v0.1` for SlsaProvenance. */
@property(nonatomic, copy, nullable) NSString *predicateType;

@property(nonatomic, strong, nullable) GTLRContainerAnalysis_InTotoProvenance *provenance;
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_SlsaProvenance *slsaProvenance;
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_SlsaProvenanceZeroTwo *slsaProvenanceZeroTwo;
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Subject *> *subject;

@end


/**
 *  GTLRContainerAnalysis_Jwt
 */
@interface GTLRContainerAnalysis_Jwt : GTLRObject

/**
 *  The compact encoding of a JWS, which is always three base64 encoded strings
 *  joined by periods. For details, see:
 *  https://tools.ietf.org/html/rfc7515.html#section-3.1
 */
@property(nonatomic, copy, nullable) NSString *compactJwt;

@end


/**
 *  GTLRContainerAnalysis_KnowledgeBase
 */
@interface GTLRContainerAnalysis_KnowledgeBase : GTLRObject

/** The KB name (generally of the form KB[0-9]+ (e.g., KB123456)). */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  A link to the KB in the [Windows update catalog]
 *  (https://www.catalog.update.microsoft.com/).
 */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  Layer holds metadata specific to a layer of a Docker image.
 */
@interface GTLRContainerAnalysis_Layer : GTLRObject

/** The recovered arguments to the Dockerfile directive. */
@property(nonatomic, copy, nullable) NSString *arguments;

/**
 *  Required. The recovered Dockerfile directive used to construct this layer.
 *  See https://docs.docker.com/engine/reference/builder/ for more information.
 */
@property(nonatomic, copy, nullable) NSString *directive;

@end


/**
 *  License information.
 */
@interface GTLRContainerAnalysis_License : GTLRObject

/** Comments */
@property(nonatomic, copy, nullable) NSString *comments;

/**
 *  Often a single license can be used to represent the licensing terms.
 *  Sometimes it is necessary to include a choice of one or more licenses or
 *  some combination of license identifiers. Examples: "LGPL-2.1-only OR MIT",
 *  "LGPL-2.1-only AND MIT", "GPL-2.0-or-later WITH Bison-exception-2.2".
 */
@property(nonatomic, copy, nullable) NSString *expression;

@end


/**
 *  Response for listing occurrences for a note.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "occurrences" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRContainerAnalysis_ListNoteOccurrencesResponse : GTLRCollectionObject

/** Token to provide to skip to a particular spot in the list. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The occurrences attached to the specified note.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Occurrence *> *occurrences;

@end


/**
 *  Response for listing notes.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "notes" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRContainerAnalysis_ListNotesResponse : GTLRCollectionObject

/**
 *  The next pagination token in the list response. It should be used as
 *  `page_token` for the following request. An empty value means no more
 *  results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The notes requested.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Note *> *notes;

@end


/**
 *  Response for listing occurrences.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "occurrences" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRContainerAnalysis_ListOccurrencesResponse : GTLRCollectionObject

/**
 *  The next pagination token in the list response. It should be used as
 *  `page_token` for the following request. An empty value means no more
 *  results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  The occurrences requested.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Occurrence *> *occurrences;

@end


/**
 *  An occurrence of a particular package installation found within a system's
 *  filesystem. E.g., glibc was found in `/var/lib/dpkg/status`.
 */
@interface GTLRContainerAnalysis_Location : GTLRObject

/**
 *  Deprecated. The CPE URI in [CPE
 *  format](https://cpe.mitre.org/specification/)
 */
@property(nonatomic, copy, nullable) NSString *cpeUri;

/** The path from which we gathered that this package/version is installed. */
@property(nonatomic, copy, nullable) NSString *path;

/** Deprecated. The version installed at this location. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Version *version;

@end


/**
 *  GTLRContainerAnalysis_Material
 */
@interface GTLRContainerAnalysis_Material : GTLRObject

@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Material_Digest *digest;
@property(nonatomic, copy, nullable) NSString *uri;

@end


/**
 *  GTLRContainerAnalysis_Material_Digest
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRContainerAnalysis_Material_Digest : GTLRObject
@end


/**
 *  Other properties of the build.
 */
@interface GTLRContainerAnalysis_Metadata : GTLRObject

/** The timestamp of when the build completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *buildFinishedOn;

/**
 *  Identifies the particular build invocation, which can be useful for finding
 *  associated logs or other ad-hoc analysis. The value SHOULD be globally
 *  unique, per in-toto Provenance spec.
 */
@property(nonatomic, copy, nullable) NSString *buildInvocationId;

/** The timestamp of when the build started. */
@property(nonatomic, strong, nullable) GTLRDateTime *buildStartedOn;

/**
 *  Indicates that the builder claims certain fields in this message to be
 *  complete.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Completeness *completeness;

/**
 *  If true, the builder claims that running the recipe on materials will
 *  produce bit-for-bit identical output.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reproducible;

@end


/**
 *  Details about files that caused a compliance check to fail. display_command
 *  is a single command that can be used to display a list of non compliant
 *  files. When there is no such command, we can also iterate a list of non
 *  compliant file using 'path'.
 */
@interface GTLRContainerAnalysis_NonCompliantFile : GTLRObject

/** Command to display the non-compliant files. */
@property(nonatomic, copy, nullable) NSString *displayCommand;

/** Empty if `display_command` is set. */
@property(nonatomic, copy, nullable) NSString *path;

/** Explains why a file is non compliant for a CIS check. */
@property(nonatomic, copy, nullable) NSString *reason;

@end


/**
 *  A type of analysis that can be done for a resource.
 */
@interface GTLRContainerAnalysis_Note : GTLRObject

/** A note describing an attestation role. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_AttestationNote *attestation;

/** A note describing build provenance for a verifiable build. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_BuildNote *build;

/** A note describing a compliance check. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_ComplianceNote *compliance;

/**
 *  Output only. The time this note was created. This field can be used as a
 *  filter in list requests.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** A note describing something that can be deployed. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_DeploymentNote *deployment;

/** A note describing the initial analysis of a resource. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_DiscoveryNote *discovery;

/** A note describing a dsse attestation note. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_DSSEAttestationNote *dsseAttestation;

/** Time of expiration for this note. Empty if note does not expire. */
@property(nonatomic, strong, nullable) GTLRDateTime *expirationTime;

/** A note describing a base image. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_ImageNote *image;

/**
 *  Output only. The type of analysis. This field can be used as a filter in
 *  list requests.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_Note_Kind_Attestation This represents a
 *        logical "role" that can attest to artifacts. (Value: "ATTESTATION")
 *    @arg @c kGTLRContainerAnalysis_Note_Kind_Build The note and occurrence
 *        assert build provenance. (Value: "BUILD")
 *    @arg @c kGTLRContainerAnalysis_Note_Kind_Compliance This represents a
 *        Compliance Note (Value: "COMPLIANCE")
 *    @arg @c kGTLRContainerAnalysis_Note_Kind_Deployment The note and
 *        occurrence track deployment events. (Value: "DEPLOYMENT")
 *    @arg @c kGTLRContainerAnalysis_Note_Kind_Discovery The note and occurrence
 *        track the initial discovery status of a resource. (Value: "DISCOVERY")
 *    @arg @c kGTLRContainerAnalysis_Note_Kind_DsseAttestation This represents a
 *        DSSE attestation Note (Value: "DSSE_ATTESTATION")
 *    @arg @c kGTLRContainerAnalysis_Note_Kind_Image This represents an image
 *        basis relationship. (Value: "IMAGE")
 *    @arg @c kGTLRContainerAnalysis_Note_Kind_NoteKindUnspecified Default
 *        value. This value is unused. (Value: "NOTE_KIND_UNSPECIFIED")
 *    @arg @c kGTLRContainerAnalysis_Note_Kind_Package This represents a package
 *        installed via a package manager. (Value: "PACKAGE")
 *    @arg @c kGTLRContainerAnalysis_Note_Kind_Upgrade This represents an
 *        available package upgrade. (Value: "UPGRADE")
 *    @arg @c kGTLRContainerAnalysis_Note_Kind_Vulnerability The note and
 *        occurrence represent a package vulnerability. (Value: "VULNERABILITY")
 */
@property(nonatomic, copy, nullable) NSString *kind;

/** A detailed description of this note. */
@property(nonatomic, copy, nullable) NSString *longDescription;

/**
 *  Output only. The name of the note in the form of
 *  `projects/[PROVIDER_ID]/notes/[NOTE_ID]`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** A note describing a package hosted by various package managers. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_PackageNote *package;

/** Other notes related to this note. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *relatedNoteNames;

/** URLs associated with this note. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_RelatedUrl *> *relatedUrl;

/** A one sentence description of this note. */
@property(nonatomic, copy, nullable) NSString *shortDescription;

/**
 *  Output only. The time this note was last updated. This field can be used as
 *  a filter in list requests.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** A note describing available package upgrades. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_UpgradeNote *upgrade;

/** A note describing a package vulnerability. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_VulnerabilityNote *vulnerability;

@end


/**
 *  An instance of an analysis type that has been found on a resource.
 */
@interface GTLRContainerAnalysis_Occurrence : GTLRObject

/** Describes an attestation of an artifact. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_AttestationOccurrence *attestation;

/** Describes a verifiable build. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_BuildOccurrence *build;

/** Describes a compliance violation on a linked resource. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_ComplianceOccurrence *compliance;

/** Output only. The time this occurrence was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Describes the deployment of an artifact on a runtime. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_DeploymentOccurrence *deployment;

/** Describes when a resource was discovered. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_DiscoveryOccurrence *discovery;

/** Describes an attestation of an artifact using dsse. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_DSSEAttestationOccurrence *dsseAttestation;

/** https://github.com/secure-systems-lab/dsse */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Envelope *envelope;

/**
 *  Describes how this resource derives from the basis in the associated note.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_ImageOccurrence *image;

/**
 *  Output only. This explicitly denotes which of the occurrence details are
 *  specified. This field can be used as a filter in list requests.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_Occurrence_Kind_Attestation This represents
 *        a logical "role" that can attest to artifacts. (Value: "ATTESTATION")
 *    @arg @c kGTLRContainerAnalysis_Occurrence_Kind_Build The note and
 *        occurrence assert build provenance. (Value: "BUILD")
 *    @arg @c kGTLRContainerAnalysis_Occurrence_Kind_Compliance This represents
 *        a Compliance Note (Value: "COMPLIANCE")
 *    @arg @c kGTLRContainerAnalysis_Occurrence_Kind_Deployment The note and
 *        occurrence track deployment events. (Value: "DEPLOYMENT")
 *    @arg @c kGTLRContainerAnalysis_Occurrence_Kind_Discovery The note and
 *        occurrence track the initial discovery status of a resource. (Value:
 *        "DISCOVERY")
 *    @arg @c kGTLRContainerAnalysis_Occurrence_Kind_DsseAttestation This
 *        represents a DSSE attestation Note (Value: "DSSE_ATTESTATION")
 *    @arg @c kGTLRContainerAnalysis_Occurrence_Kind_Image This represents an
 *        image basis relationship. (Value: "IMAGE")
 *    @arg @c kGTLRContainerAnalysis_Occurrence_Kind_NoteKindUnspecified Default
 *        value. This value is unused. (Value: "NOTE_KIND_UNSPECIFIED")
 *    @arg @c kGTLRContainerAnalysis_Occurrence_Kind_Package This represents a
 *        package installed via a package manager. (Value: "PACKAGE")
 *    @arg @c kGTLRContainerAnalysis_Occurrence_Kind_Upgrade This represents an
 *        available package upgrade. (Value: "UPGRADE")
 *    @arg @c kGTLRContainerAnalysis_Occurrence_Kind_Vulnerability The note and
 *        occurrence represent a package vulnerability. (Value: "VULNERABILITY")
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Output only. The name of the occurrence in the form of
 *  `projects/[PROJECT_ID]/occurrences/[OCCURRENCE_ID]`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Immutable. The analysis note associated with this occurrence, in
 *  the form of `projects/[PROVIDER_ID]/notes/[NOTE_ID]`. This field can be used
 *  as a filter in list requests.
 */
@property(nonatomic, copy, nullable) NSString *noteName;

/** Describes the installation of a package on the linked resource. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_PackageOccurrence *package;

/** A description of actions that can be taken to remedy the note. */
@property(nonatomic, copy, nullable) NSString *remediation;

/**
 *  Required. Immutable. A URI that represents the resource for which the
 *  occurrence applies. For example,
 *  `https://gcr.io/project/image\@sha256:123abc` for a Docker image.
 */
@property(nonatomic, copy, nullable) NSString *resourceUri;

/** Output only. The time this occurrence was last updated. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** Describes an available package upgrade on the linked resource. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_UpgradeOccurrence *upgrade;

/** Describes a security vulnerability. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_VulnerabilityOccurrence *vulnerability;

@end


/**
 *  A detail for a distro and package this vulnerability occurrence was found in
 *  and its associated fix (if one is available).
 */
@interface GTLRContainerAnalysis_PackageIssue : GTLRObject

/**
 *  Required. The [CPE URI](https://cpe.mitre.org/specification/) this
 *  vulnerability was found in.
 */
@property(nonatomic, copy, nullable) NSString *affectedCpeUri;

/** Required. The package this vulnerability was found in. */
@property(nonatomic, copy, nullable) NSString *affectedPackage;

/**
 *  Required. The version of the package that is installed on the resource
 *  affected by this vulnerability.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Version *affectedVersion;

/**
 *  Output only. The distro or language system assigned severity for this
 *  vulnerability when that is available and note provider assigned severity
 *  when it is not available.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_PackageIssue_EffectiveSeverity_Critical
 *        Critical severity. (Value: "CRITICAL")
 *    @arg @c kGTLRContainerAnalysis_PackageIssue_EffectiveSeverity_High High
 *        severity. (Value: "HIGH")
 *    @arg @c kGTLRContainerAnalysis_PackageIssue_EffectiveSeverity_Low Low
 *        severity. (Value: "LOW")
 *    @arg @c kGTLRContainerAnalysis_PackageIssue_EffectiveSeverity_Medium
 *        Medium severity. (Value: "MEDIUM")
 *    @arg @c kGTLRContainerAnalysis_PackageIssue_EffectiveSeverity_Minimal
 *        Minimal severity. (Value: "MINIMAL")
 *    @arg @c kGTLRContainerAnalysis_PackageIssue_EffectiveSeverity_SeverityUnspecified
 *        Unknown. (Value: "SEVERITY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *effectiveSeverity;

/** The location at which this package was found. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_GrafeasV1FileLocation *> *fileLocation;

/**
 *  Output only. Whether a fix is available for this package.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fixAvailable;

/**
 *  The [CPE URI](https://cpe.mitre.org/specification/) this vulnerability was
 *  fixed in. It is possible for this to be different from the affected_cpe_uri.
 */
@property(nonatomic, copy, nullable) NSString *fixedCpeUri;

/**
 *  The package this vulnerability was fixed in. It is possible for this to be
 *  different from the affected_package.
 */
@property(nonatomic, copy, nullable) NSString *fixedPackage;

/**
 *  Required. The version of the package this vulnerability was fixed in.
 *  Setting this to VersionKind.MAXIMUM means no fix is yet available.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Version *fixedVersion;

/** The type of package (e.g. OS, MAVEN, GO). */
@property(nonatomic, copy, nullable) NSString *packageType;

@end


/**
 *  PackageNote represents a particular package version.
 */
@interface GTLRContainerAnalysis_PackageNote : GTLRObject

/**
 *  The CPU architecture for which packages in this distribution channel were
 *  built. Architecture will be blank for language packages.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_PackageNote_Architecture_ArchitectureUnspecified
 *        Unknown architecture. (Value: "ARCHITECTURE_UNSPECIFIED")
 *    @arg @c kGTLRContainerAnalysis_PackageNote_Architecture_X64 X64
 *        architecture. (Value: "X64")
 *    @arg @c kGTLRContainerAnalysis_PackageNote_Architecture_X86 X86
 *        architecture. (Value: "X86")
 */
@property(nonatomic, copy, nullable) NSString *architecture;

/**
 *  The cpe_uri in [CPE format](https://cpe.mitre.org/specification/) denoting
 *  the package manager version distributing a package. The cpe_uri will be
 *  blank for language packages.
 */
@property(nonatomic, copy, nullable) NSString *cpeUri;

/**
 *  The description of this package.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Hash value, typically a file digest, that allows unique identification a
 *  specific package.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Digest *> *digest;

/** Deprecated. The various channels by which a package is distributed. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Distribution *> *distribution;

/** Licenses that have been declared by the authors of the package. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_License *license;

/** A freeform text denoting the maintainer of this package. */
@property(nonatomic, copy, nullable) NSString *maintainer;

/** Required. Immutable. The name of the package. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The type of package; whether native or non native (e.g., ruby gems, node.js
 *  packages, etc.).
 */
@property(nonatomic, copy, nullable) NSString *packageType;

/** The homepage for this package. */
@property(nonatomic, copy, nullable) NSString *url;

/** The version of the package. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Version *version;

@end


/**
 *  Details on how a particular software package was installed on a system.
 */
@interface GTLRContainerAnalysis_PackageOccurrence : GTLRObject

/**
 *  Output only. The CPU architecture for which packages in this distribution
 *  channel were built. Architecture will be blank for language packages.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_PackageOccurrence_Architecture_ArchitectureUnspecified
 *        Unknown architecture. (Value: "ARCHITECTURE_UNSPECIFIED")
 *    @arg @c kGTLRContainerAnalysis_PackageOccurrence_Architecture_X64 X64
 *        architecture. (Value: "X64")
 *    @arg @c kGTLRContainerAnalysis_PackageOccurrence_Architecture_X86 X86
 *        architecture. (Value: "X86")
 */
@property(nonatomic, copy, nullable) NSString *architecture;

/**
 *  Output only. The cpe_uri in [CPE
 *  format](https://cpe.mitre.org/specification/) denoting the package manager
 *  version distributing a package. The cpe_uri will be blank for language
 *  packages.
 */
@property(nonatomic, copy, nullable) NSString *cpeUri;

/** Licenses that have been declared by the authors of the package. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_License *license;

/**
 *  All of the places within the filesystem versions of this package have been
 *  found.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Location *> *location;

/** Required. Output only. The name of the installed package. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The type of package; whether native or non native (e.g., ruby
 *  gems, node.js packages, etc.).
 */
@property(nonatomic, copy, nullable) NSString *packageType;

/** Output only. The version of the package. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Version *version;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRContainerAnalysis_Policy : GTLRObject

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  Selects a repo using a Google Cloud Platform project ID (e.g.,
 *  winged-cargo-31) and a repo name within that project.
 */
@interface GTLRContainerAnalysis_ProjectRepoId : GTLRObject

/** The ID of the project. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** The name of the repo. Leave empty for the default repo. */
@property(nonatomic, copy, nullable) NSString *repoName;

@end


/**
 *  Steps taken to build the artifact. For a TaskRun, typically each container
 *  corresponds to one step in the recipe.
 */
@interface GTLRContainerAnalysis_Recipe : GTLRObject

/**
 *  Collection of all external inputs that influenced the build on top of
 *  recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe
 *  type were "make", then this might be the flags passed to make aside from the
 *  target, which is captured in recipe.entryPoint. Since the arguments field
 *  can greatly vary in structure, depending on the builder and recipe type,
 *  this is of form "Any".
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Recipe_Arguments_Item *> *arguments;

/**
 *  Index in materials containing the recipe steps that are not implied by
 *  recipe.type. For example, if the recipe type were "make", then this would
 *  point to the source containing the Makefile, not the make program itself.
 *  Set to -1 if the recipe doesn't come from a material, as zero is default
 *  unset value for int64.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *definedInMaterial;

/**
 *  String identifying the entry point into the build. This is often a path to a
 *  configuration file and/or a target label within that file. The syntax and
 *  meaning are defined by recipe.type. For example, if the recipe type were
 *  "make", then this would reference the directory in which to run make as well
 *  as which target to use.
 */
@property(nonatomic, copy, nullable) NSString *entryPoint;

/**
 *  Any other builder-controlled inputs necessary for correctly evaluating the
 *  recipe. Usually only needed for reproducing the build but not evaluated as
 *  part of policy. Since the environment field can greatly vary in structure,
 *  depending on the builder and recipe type, this is of form "Any".
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Recipe_Environment_Item *> *environment;

/**
 *  URI indicating what type of recipe was performed. It determines the meaning
 *  of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  GTLRContainerAnalysis_Recipe_Arguments_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRContainerAnalysis_Recipe_Arguments_Item : GTLRObject
@end


/**
 *  GTLRContainerAnalysis_Recipe_Environment_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRContainerAnalysis_Recipe_Environment_Item : GTLRObject
@end


/**
 *  Metadata for any related URL information.
 */
@interface GTLRContainerAnalysis_RelatedUrl : GTLRObject

/** Label to describe usage of the URL. */
@property(nonatomic, copy, nullable) NSString *label;

/** Specific URL associated with the resource. */
@property(nonatomic, copy, nullable) NSString *url;

@end


/**
 *  A unique identifier for a Cloud Repo.
 */
@interface GTLRContainerAnalysis_RepoId : GTLRObject

/** A combination of a project ID and a repo name. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_ProjectRepoId *projectRepoId;

/** A server-assigned, globally unique identifier. */
@property(nonatomic, copy, nullable) NSString *uid;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRContainerAnalysis_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Policy *policy;

@end


/**
 *  Verifiers (e.g. Kritis implementations) MUST verify signatures with respect
 *  to the trust anchors defined in policy (e.g. a Kritis policy). Typically
 *  this means that the verifier has been configured with a map from
 *  `public_key_id` to public key material (and any required parameters, e.g.
 *  signing algorithm). In particular, verification implementations MUST NOT
 *  treat the signature `public_key_id` as anything more than a key lookup hint.
 *  The `public_key_id` DOES NOT validate or authenticate a public key; it only
 *  provides a mechanism for quickly selecting a public key ALREADY CONFIGURED
 *  on the verifier through a trusted channel. Verification implementations MUST
 *  reject signatures in any of the following circumstances: * The
 *  `public_key_id` is not recognized by the verifier. * The public key that
 *  `public_key_id` refers to does not verify the signature with respect to the
 *  payload. The `signature` contents SHOULD NOT be "attached" (where the
 *  payload is included with the serialized `signature` bytes). Verifiers MUST
 *  ignore any "attached" payload and only verify signatures with respect to
 *  explicitly provided payload (e.g. a `payload` field on the proto message
 *  that holds this Signature, or the canonical serialization of the proto
 *  message that holds this signature).
 */
@interface GTLRContainerAnalysis_Signature : GTLRObject

/**
 *  The identifier for the public key that verifies this signature. * The
 *  `public_key_id` is required. * The `public_key_id` SHOULD be an RFC3986
 *  conformant URI. * When possible, the `public_key_id` SHOULD be an immutable
 *  reference, such as a cryptographic digest. Examples of valid
 *  `public_key_id`s: OpenPGP V4 public key fingerprint: *
 *  "openpgp4fpr:74FAF3B861BDA0870C7B6DEF607E48D2A663AEEA" See
 *  https://www.iana.org/assignments/uri-schemes/prov/openpgp4fpr for more
 *  details on this scheme. RFC6920 digest-named SubjectPublicKeyInfo (digest of
 *  the DER serialization): *
 *  "ni:///sha-256;cD9o9Cq6LG3jD0iKXqEi_vdjJGecm_iXkbqVoScViaU" *
 *  "nih:///sha-256;703f68f42aba2c6de30f488a5ea122fef76324679c9bf89791ba95a1271589a5"
 */
@property(nonatomic, copy, nullable) NSString *publicKeyId;

/**
 *  The content of the signature, an opaque bytestring. The payload that this
 *  signature verifies MUST be unambiguously provided with the Signature during
 *  verification. A wrapper message might provide the payload explicitly.
 *  Alternatively, a message might have a canonical serialization that can
 *  always be unambiguously computed to derive the payload.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *signature;

@end


/**
 *  GTLRContainerAnalysis_SlsaBuilder
 */
@interface GTLRContainerAnalysis_SlsaBuilder : GTLRObject

/**
 *  identifier
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

@end


/**
 *  Indicates that the builder claims certain fields in this message to be
 *  complete.
 */
@interface GTLRContainerAnalysis_SlsaCompleteness : GTLRObject

/**
 *  If true, the builder claims that recipe.arguments is complete, meaning that
 *  all external inputs are properly captured in the recipe.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *arguments;

/**
 *  If true, the builder claims that recipe.environment is claimed to be
 *  complete.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *environment;

/**
 *  If true, the builder claims that materials are complete, usually through
 *  some controls to prevent network access. Sometimes called "hermetic".
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *materials;

@end


/**
 *  Other properties of the build.
 */
@interface GTLRContainerAnalysis_SlsaMetadata : GTLRObject

/** The timestamp of when the build completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *buildFinishedOn;

/**
 *  Identifies the particular build invocation, which can be useful for finding
 *  associated logs or other ad-hoc analysis. The value SHOULD be globally
 *  unique, per in-toto Provenance spec.
 */
@property(nonatomic, copy, nullable) NSString *buildInvocationId;

/** The timestamp of when the build started. */
@property(nonatomic, strong, nullable) GTLRDateTime *buildStartedOn;

/**
 *  Indicates that the builder claims certain fields in this message to be
 *  complete.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_SlsaCompleteness *completeness;

/**
 *  If true, the builder claims that running the recipe on materials will
 *  produce bit-for-bit identical output.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reproducible;

@end


/**
 *  GTLRContainerAnalysis_SlsaProvenance
 */
@interface GTLRContainerAnalysis_SlsaProvenance : GTLRObject

/** required */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_SlsaBuilder *builder;

/**
 *  The collection of artifacts that influenced the build including sources,
 *  dependencies, build tools, base images, and so on. This is considered to be
 *  incomplete unless metadata.completeness.materials is true. Unset or null is
 *  equivalent to empty.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Material *> *materials;

@property(nonatomic, strong, nullable) GTLRContainerAnalysis_SlsaMetadata *metadata;

/**
 *  Identifies the configuration used for the build. When combined with
 *  materials, this SHOULD fully describe the build, such that re-running this
 *  recipe results in bit-for-bit identical output (if the build is
 *  reproducible). required
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_SlsaRecipe *recipe;

@end


/**
 *  See full explanation of fields at slsa.dev/provenance/v0.2.
 */
@interface GTLRContainerAnalysis_SlsaProvenanceZeroTwo : GTLRObject

@property(nonatomic, strong, nullable) GTLRContainerAnalysis_SlsaProvenanceZeroTwo_BuildConfig *buildConfig;
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaBuilder *builder;
@property(nonatomic, copy, nullable) NSString *buildType;
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaInvocation *invocation;
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaMaterial *> *materials;
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GrafeasV1SlsaProvenanceZeroTwoSlsaMetadata *metadata;

@end


/**
 *  GTLRContainerAnalysis_SlsaProvenanceZeroTwo_BuildConfig
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRContainerAnalysis_SlsaProvenanceZeroTwo_BuildConfig : GTLRObject
@end


/**
 *  Steps taken to build the artifact. For a TaskRun, typically each container
 *  corresponds to one step in the recipe.
 */
@interface GTLRContainerAnalysis_SlsaRecipe : GTLRObject

/**
 *  Collection of all external inputs that influenced the build on top of
 *  recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe
 *  type were "make", then this might be the flags passed to make aside from the
 *  target, which is captured in recipe.entryPoint. Depending on the recipe
 *  Type, the structure may be different.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_SlsaRecipe_Arguments *arguments;

/**
 *  Index in materials containing the recipe steps that are not implied by
 *  recipe.type. For example, if the recipe type were "make", then this would
 *  point to the source containing the Makefile, not the make program itself.
 *  Set to -1 if the recipe doesn't come from a material, as zero is default
 *  unset value for int64.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *definedInMaterial;

/**
 *  String identifying the entry point into the build. This is often a path to a
 *  configuration file and/or a target label within that file. The syntax and
 *  meaning are defined by recipe.type. For example, if the recipe type were
 *  "make", then this would reference the directory in which to run make as well
 *  as which target to use.
 */
@property(nonatomic, copy, nullable) NSString *entryPoint;

/**
 *  Any other builder-controlled inputs necessary for correctly evaluating the
 *  recipe. Usually only needed for reproducing the build but not evaluated as
 *  part of policy. Depending on the recipe Type, the structure may be
 *  different.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_SlsaRecipe_Environment *environment;

/**
 *  URI indicating what type of recipe was performed. It determines the meaning
 *  of recipe.entryPoint, recipe.arguments, recipe.environment, and materials.
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Collection of all external inputs that influenced the build on top of
 *  recipe.definedInMaterial and recipe.entryPoint. For example, if the recipe
 *  type were "make", then this might be the flags passed to make aside from the
 *  target, which is captured in recipe.entryPoint. Depending on the recipe
 *  Type, the structure may be different.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRContainerAnalysis_SlsaRecipe_Arguments : GTLRObject
@end


/**
 *  Any other builder-controlled inputs necessary for correctly evaluating the
 *  recipe. Usually only needed for reproducing the build but not evaluated as
 *  part of policy. Depending on the recipe Type, the structure may be
 *  different.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRContainerAnalysis_SlsaRecipe_Environment : GTLRObject
@end


/**
 *  Source describes the location of the source used for the build.
 */
@interface GTLRContainerAnalysis_Source : GTLRObject

/**
 *  If provided, some of the source code used for the build may be found in
 *  these locations, in the case where the source repository had multiple
 *  remotes or submodules. This list will not include the context specified in
 *  the context field.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_SourceContext *> *additionalContexts;

/**
 *  If provided, the input binary artifacts for the build came from this
 *  location.
 */
@property(nonatomic, copy, nullable) NSString *artifactStorageSourceUri;

/**
 *  If provided, the source code used for the build came from this location.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_SourceContext *context;

/**
 *  Hash(es) of the build source, which can be used to verify that the original
 *  source integrity was maintained in the build. The keys to this map are file
 *  paths used as build source and the values contain the hash values for those
 *  files. If the build source came in a single package such as a gzipped
 *  tarfile (.tar.gz), the FileHash will be for the single path to that file.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Source_FileHashes *fileHashes;

@end


/**
 *  Hash(es) of the build source, which can be used to verify that the original
 *  source integrity was maintained in the build. The keys to this map are file
 *  paths used as build source and the values contain the hash values for those
 *  files. If the build source came in a single package such as a gzipped
 *  tarfile (.tar.gz), the FileHash will be for the single path to that file.
 *
 *  @note This class is documented as having more properties of
 *        GTLRContainerAnalysis_FileHashes. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRContainerAnalysis_Source_FileHashes : GTLRObject
@end


/**
 *  A SourceContext is a reference to a tree of files. A SourceContext together
 *  with a path point to a unique revision of a single file or directory.
 */
@interface GTLRContainerAnalysis_SourceContext : GTLRObject

/** A SourceContext referring to a revision in a Google Cloud Source Repo. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_CloudRepoSourceContext *cloudRepo;

/** A SourceContext referring to a Gerrit project. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GerritSourceContext *gerrit;

/** A SourceContext referring to any third party Git repo (e.g., GitHub). */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_GitSourceContext *git;

/** Labels with user defined metadata. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_SourceContext_Labels *labels;

@end


/**
 *  Labels with user defined metadata.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRContainerAnalysis_SourceContext_Labels : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRContainerAnalysis_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRContainerAnalysis_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRContainerAnalysis_Status_Details_Item : GTLRObject
@end


/**
 *  GTLRContainerAnalysis_Subject
 */
@interface GTLRContainerAnalysis_Subject : GTLRObject

/**
 *  `"": ""` Algorithms can be e.g. sha256, sha512 See
 *  https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Subject_Digest *digest;

@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  `"": ""` Algorithms can be e.g. sha256, sha512 See
 *  https://github.com/in-toto/attestation/blob/main/spec/field_types.md#DigestSet
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRContainerAnalysis_Subject_Digest : GTLRObject
@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRContainerAnalysis_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRContainerAnalysis_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Start and end times for a build execution phase. Next ID: 3
 */
@interface GTLRContainerAnalysis_TimeSpan : GTLRObject

/** End of time span. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Start of time span. */
@property(nonatomic, strong, nullable) GTLRDateTime *startTime;

@end


/**
 *  The Upgrade Distribution represents metadata about the Upgrade for each
 *  operating system (CPE). Some distributions have additional metadata around
 *  updates, classifying them into various categories and severities.
 */
@interface GTLRContainerAnalysis_UpgradeDistribution : GTLRObject

/**
 *  The operating system classification of this Upgrade, as specified by the
 *  upstream operating system upgrade feed. For Windows the classification is
 *  one of the category_ids listed at
 *  https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ff357803(v=vs.85)
 */
@property(nonatomic, copy, nullable) NSString *classification;

/**
 *  Required - The specific operating system this metadata applies to. See
 *  https://cpe.mitre.org/specification/.
 */
@property(nonatomic, copy, nullable) NSString *cpeUri;

/** The cve tied to this Upgrade. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *cve;

/** The severity as specified by the upstream operating system. */
@property(nonatomic, copy, nullable) NSString *severity;

@end


/**
 *  An Upgrade Note represents a potential upgrade of a package to a given
 *  version. For each package version combination (i.e. bash 4.0, bash 4.1, bash
 *  4.1.2), there will be an Upgrade Note. For Windows, windows_update field
 *  represents the information related to the update.
 */
@interface GTLRContainerAnalysis_UpgradeNote : GTLRObject

/** Metadata about the upgrade for each specific operating system. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_UpgradeDistribution *> *distributions;

/** Required for non-Windows OS. The package this Upgrade is for. */
@property(nonatomic, copy, nullable) NSString *package;

/**
 *  Required for non-Windows OS. The version of the package in machine + human
 *  readable form.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Version *version;

/**
 *  Required for Windows OS. Represents the metadata about the Windows update.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_WindowsUpdate *windowsUpdate;

@end


/**
 *  An Upgrade Occurrence represents that a specific resource_url could install
 *  a specific upgrade. This presence is supplied via local sources (i.e. it is
 *  present in the mirror and the running system has noticed its availability).
 *  For Windows, both distribution and windows_update contain information for
 *  the Windows update.
 */
@interface GTLRContainerAnalysis_UpgradeOccurrence : GTLRObject

/**
 *  Metadata about the upgrade for available for the specific operating system
 *  for the resource_url. This allows efficient filtering, as well as making it
 *  easier to use the occurrence.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_UpgradeDistribution *distribution;

/** Required for non-Windows OS. The package this Upgrade is for. */
@property(nonatomic, copy, nullable) NSString *package;

/**
 *  Required for non-Windows OS. The version of the package in a machine + human
 *  readable form.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Version *parsedVersion;

/**
 *  Required for Windows OS. Represents the metadata about the Windows update.
 */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_WindowsUpdate *windowsUpdate;

@end


/**
 *  Version contains structured information about the version of a package.
 */
@interface GTLRContainerAnalysis_Version : GTLRObject

/**
 *  Used to correct mistakes in the version numbering scheme.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *epoch;

/**
 *  Human readable version string. This string is of the form :- and is only set
 *  when kind is NORMAL.
 */
@property(nonatomic, copy, nullable) NSString *fullName;

/**
 *  Whether this version is specifying part of an inclusive range. Grafeas does
 *  not have the capability to specify version ranges; instead we have fields
 *  that specify start version and end versions. At times this is insufficient -
 *  we also need to specify whether the version is included in the range or is
 *  excluded from the range. This boolean is expected to be set to true when the
 *  version is included in a range.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *inclusive;

/**
 *  Required. Distinguishes between sentinel MIN/MAX versions and normal
 *  versions.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_Version_Kind_Maximum A special version
 *        representing positive infinity. (Value: "MAXIMUM")
 *    @arg @c kGTLRContainerAnalysis_Version_Kind_Minimum A special version
 *        representing negative infinity. (Value: "MINIMUM")
 *    @arg @c kGTLRContainerAnalysis_Version_Kind_Normal A standard package
 *        version. (Value: "NORMAL")
 *    @arg @c kGTLRContainerAnalysis_Version_Kind_VersionKindUnspecified
 *        Unknown. (Value: "VERSION_KIND_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *kind;

/**
 *  Required only when version kind is NORMAL. The main part of the version
 *  name.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** The iteration of the package build from the above version. */
@property(nonatomic, copy, nullable) NSString *revision;

@end


/**
 *  Volume describes a Docker container volume which is mounted into build steps
 *  in order to persist files across build step execution. Next ID: 3
 */
@interface GTLRContainerAnalysis_Volume : GTLRObject

/**
 *  Name of the volume to mount. Volume names must be unique per build step and
 *  must be valid names for Docker volumes. Each named volume must be used by at
 *  least two build steps.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Path at which to mount the volume. Paths must be absolute and cannot
 *  conflict with other volume paths on the same build step or with certain
 *  reserved volume paths.
 */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  A security vulnerability that can be found in resources.
 */
@interface GTLRContainerAnalysis_VulnerabilityNote : GTLRObject

/**
 *  The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10
 *  where 0 indicates low severity and 10 indicates high severity.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cvssScore;

/** The full description of the CVSSv3 for this vulnerability. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_CVSSv3 *cvssV3;

/**
 *  CVSS version used to populate cvss_score and severity.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityNote_CvssVersion_CvssVersion2
 *        Value "CVSS_VERSION_2"
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityNote_CvssVersion_CvssVersion3
 *        Value "CVSS_VERSION_3"
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityNote_CvssVersion_CvssVersionUnspecified
 *        Value "CVSS_VERSION_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *cvssVersion;

/**
 *  Details of all known distros and packages affected by this vulnerability.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Detail *> *details;

/**
 *  The note provider assigned severity of this vulnerability.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityNote_Severity_Critical
 *        Critical severity. (Value: "CRITICAL")
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityNote_Severity_High High
 *        severity. (Value: "HIGH")
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityNote_Severity_Low Low
 *        severity. (Value: "LOW")
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityNote_Severity_Medium Medium
 *        severity. (Value: "MEDIUM")
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityNote_Severity_Minimal Minimal
 *        severity. (Value: "MINIMAL")
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityNote_Severity_SeverityUnspecified
 *        Unknown. (Value: "SEVERITY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *severity;

/**
 *  The time this information was last changed at the source. This is an
 *  upstream timestamp from the underlying information source - e.g. Ubuntu
 *  security tracker.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *sourceUpdateTime;

/**
 *  Windows details get their own format because the information format and
 *  model don't match a normal detail. Specifically Windows updates are done as
 *  patches, thus Windows vulnerabilities really are a missing package, rather
 *  than a package being at an incorrect version.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_WindowsDetail *> *windowsDetails;

@end


/**
 *  An occurrence of a severity vulnerability on a resource.
 */
@interface GTLRContainerAnalysis_VulnerabilityOccurrence : GTLRObject

/**
 *  Output only. The CVSS score of this vulnerability. CVSS score is on a scale
 *  of 0 - 10 where 0 indicates low severity and 10 indicates high severity.
 *
 *  Uses NSNumber of floatValue.
 */
@property(nonatomic, strong, nullable) NSNumber *cvssScore;

/** The cvss v3 score for the vulnerability. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_CVSS *cvssv3;

/**
 *  Output only. CVSS version used to populate cvss_score and severity.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityOccurrence_CvssVersion_CvssVersion2
 *        Value "CVSS_VERSION_2"
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityOccurrence_CvssVersion_CvssVersion3
 *        Value "CVSS_VERSION_3"
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityOccurrence_CvssVersion_CvssVersionUnspecified
 *        Value "CVSS_VERSION_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *cvssVersion;

/**
 *  The distro assigned severity for this vulnerability when it is available,
 *  otherwise this is the note provider assigned severity. When there are
 *  multiple PackageIssues for this vulnerability, they can have different
 *  effective severities because some might be provided by the distro while
 *  others are provided by the language ecosystem for a language pack. For this
 *  reason, it is advised to use the effective severity on the PackageIssue
 *  level. In the case where multiple PackageIssues have differing effective
 *  severities, this field should be the highest severity for any of the
 *  PackageIssues.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityOccurrence_EffectiveSeverity_Critical
 *        Critical severity. (Value: "CRITICAL")
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityOccurrence_EffectiveSeverity_High
 *        High severity. (Value: "HIGH")
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityOccurrence_EffectiveSeverity_Low
 *        Low severity. (Value: "LOW")
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityOccurrence_EffectiveSeverity_Medium
 *        Medium severity. (Value: "MEDIUM")
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityOccurrence_EffectiveSeverity_Minimal
 *        Minimal severity. (Value: "MINIMAL")
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityOccurrence_EffectiveSeverity_SeverityUnspecified
 *        Unknown. (Value: "SEVERITY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *effectiveSeverity;

/**
 *  Output only. Whether at least one of the affected packages has a fix
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fixAvailable;

/** Output only. A detailed description of this vulnerability. */
@property(nonatomic, copy, nullable) NSString *longDescription;

/**
 *  Required. The set of affected locations and their fixes (if available)
 *  within the associated resource.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_PackageIssue *> *packageIssue;

/** Output only. URLs related to this vulnerability. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_RelatedUrl *> *relatedUrls;

/**
 *  Output only. The note provider assigned severity of this vulnerability.
 *
 *  Likely values:
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityOccurrence_Severity_Critical
 *        Critical severity. (Value: "CRITICAL")
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityOccurrence_Severity_High High
 *        severity. (Value: "HIGH")
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityOccurrence_Severity_Low Low
 *        severity. (Value: "LOW")
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityOccurrence_Severity_Medium
 *        Medium severity. (Value: "MEDIUM")
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityOccurrence_Severity_Minimal
 *        Minimal severity. (Value: "MINIMAL")
 *    @arg @c kGTLRContainerAnalysis_VulnerabilityOccurrence_Severity_SeverityUnspecified
 *        Unknown. (Value: "SEVERITY_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *severity;

/** Output only. A one sentence description of this vulnerability. */
@property(nonatomic, copy, nullable) NSString *shortDescription;

/**
 *  The type of package; whether native or non native (e.g., ruby gems, node.js
 *  packages, etc.).
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A summary of how many vulnerability occurrences there are per resource and
 *  severity type.
 */
@interface GTLRContainerAnalysis_VulnerabilityOccurrencesSummary : GTLRObject

/**
 *  A listing by resource of the number of fixable and total vulnerabilities.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_FixableTotalByDigest *> *counts;

@end


/**
 *  GTLRContainerAnalysis_WindowsDetail
 */
@interface GTLRContainerAnalysis_WindowsDetail : GTLRObject

/**
 *  Required. The [CPE URI](https://cpe.mitre.org/specification/) this
 *  vulnerability affects.
 */
@property(nonatomic, copy, nullable) NSString *cpeUri;

/**
 *  The description of this vulnerability.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Required. The names of the KBs which have hotfixes to mitigate this
 *  vulnerability. Note that there may be multiple hotfixes (and thus multiple
 *  KBs) that mitigate a given vulnerability. Currently any listed KBs presence
 *  is considered a fix.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_KnowledgeBase *> *fixingKbs;

/** Required. The name of this vulnerability. */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Windows Update represents the metadata about the update for the Windows
 *  operating system. The fields in this message come from the Windows Update
 *  API documented at
 *  https://docs.microsoft.com/en-us/windows/win32/api/wuapi/nn-wuapi-iupdate.
 */
@interface GTLRContainerAnalysis_WindowsUpdate : GTLRObject

/** The list of categories to which the update belongs. */
@property(nonatomic, strong, nullable) NSArray<GTLRContainerAnalysis_Category *> *categories;

/**
 *  The localized description of the update.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Required - The unique identifier for the update. */
@property(nonatomic, strong, nullable) GTLRContainerAnalysis_Identity *identity;

/**
 *  The Microsoft Knowledge Base article IDs that are associated with the
 *  update.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *kbArticleIds;

/** The last published timestamp of the update. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastPublishedTimestamp;

/** The hyperlink to the support information for the update. */
@property(nonatomic, copy, nullable) NSString *supportUrl;

/** The localized title of the update. */
@property(nonatomic, copy, nullable) NSString *title;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
