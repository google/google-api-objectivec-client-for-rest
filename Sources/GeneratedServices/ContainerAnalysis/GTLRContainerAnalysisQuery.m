// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Container Analysis API (containeranalysis/v1)
// Description:
//   An implementation of the Grafeas API, which stores, and enables querying
//   and retrieval of critical metadata about all of your software artifacts.
// Documentation:
//   https://cloud.google.com/container-analysis/api/reference/rest/

#import <GoogleAPIClientForREST/GTLRContainerAnalysisQuery.h>

@implementation GTLRContainerAnalysisQuery

@dynamic fields;

@end

@implementation GTLRContainerAnalysisQuery_ProjectsNotesBatchCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRContainerAnalysis_BatchCreateNotesRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/notes:batchCreate";
  GTLRContainerAnalysisQuery_ProjectsNotesBatchCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRContainerAnalysis_BatchCreateNotesResponse class];
  query.loggingName = @"containeranalysis.projects.notes.batchCreate";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsNotesCreate

@dynamic noteId, parent;

+ (instancetype)queryWithObject:(GTLRContainerAnalysis_Note *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/notes";
  GTLRContainerAnalysisQuery_ProjectsNotesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRContainerAnalysis_Note class];
  query.loggingName = @"containeranalysis.projects.notes.create";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsNotesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRContainerAnalysisQuery_ProjectsNotesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRContainerAnalysis_Empty class];
  query.loggingName = @"containeranalysis.projects.notes.delete";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsNotesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRContainerAnalysisQuery_ProjectsNotesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRContainerAnalysis_Note class];
  query.loggingName = @"containeranalysis.projects.notes.get";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsNotesGetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRContainerAnalysis_GetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRContainerAnalysisQuery_ProjectsNotesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRContainerAnalysis_Policy class];
  query.loggingName = @"containeranalysis.projects.notes.getIamPolicy";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsNotesList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/notes";
  GTLRContainerAnalysisQuery_ProjectsNotesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRContainerAnalysis_ListNotesResponse class];
  query.loggingName = @"containeranalysis.projects.notes.list";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsNotesOccurrencesList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/occurrences";
  GTLRContainerAnalysisQuery_ProjectsNotesOccurrencesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRContainerAnalysis_ListNoteOccurrencesResponse class];
  query.loggingName = @"containeranalysis.projects.notes.occurrences.list";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsNotesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRContainerAnalysis_Note *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRContainerAnalysisQuery_ProjectsNotesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRContainerAnalysis_Note class];
  query.loggingName = @"containeranalysis.projects.notes.patch";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsNotesSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRContainerAnalysis_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRContainerAnalysisQuery_ProjectsNotesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRContainerAnalysis_Policy class];
  query.loggingName = @"containeranalysis.projects.notes.setIamPolicy";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsNotesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRContainerAnalysis_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRContainerAnalysisQuery_ProjectsNotesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRContainerAnalysis_TestIamPermissionsResponse class];
  query.loggingName = @"containeranalysis.projects.notes.testIamPermissions";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsOccurrencesBatchCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRContainerAnalysis_BatchCreateOccurrencesRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/occurrences:batchCreate";
  GTLRContainerAnalysisQuery_ProjectsOccurrencesBatchCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRContainerAnalysis_BatchCreateOccurrencesResponse class];
  query.loggingName = @"containeranalysis.projects.occurrences.batchCreate";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsOccurrencesCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRContainerAnalysis_Occurrence *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/occurrences";
  GTLRContainerAnalysisQuery_ProjectsOccurrencesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRContainerAnalysis_Occurrence class];
  query.loggingName = @"containeranalysis.projects.occurrences.create";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsOccurrencesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRContainerAnalysisQuery_ProjectsOccurrencesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRContainerAnalysis_Empty class];
  query.loggingName = @"containeranalysis.projects.occurrences.delete";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsOccurrencesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRContainerAnalysisQuery_ProjectsOccurrencesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRContainerAnalysis_Occurrence class];
  query.loggingName = @"containeranalysis.projects.occurrences.get";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsOccurrencesGetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRContainerAnalysis_GetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRContainerAnalysisQuery_ProjectsOccurrencesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRContainerAnalysis_Policy class];
  query.loggingName = @"containeranalysis.projects.occurrences.getIamPolicy";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsOccurrencesGetNotes

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/notes";
  GTLRContainerAnalysisQuery_ProjectsOccurrencesGetNotes *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRContainerAnalysis_Note class];
  query.loggingName = @"containeranalysis.projects.occurrences.getNotes";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsOccurrencesGetVulnerabilitySummary

@dynamic filter, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/occurrences:vulnerabilitySummary";
  GTLRContainerAnalysisQuery_ProjectsOccurrencesGetVulnerabilitySummary *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRContainerAnalysis_VulnerabilityOccurrencesSummary class];
  query.loggingName = @"containeranalysis.projects.occurrences.getVulnerabilitySummary";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsOccurrencesList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/occurrences";
  GTLRContainerAnalysisQuery_ProjectsOccurrencesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRContainerAnalysis_ListOccurrencesResponse class];
  query.loggingName = @"containeranalysis.projects.occurrences.list";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsOccurrencesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRContainerAnalysis_Occurrence *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRContainerAnalysisQuery_ProjectsOccurrencesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRContainerAnalysis_Occurrence class];
  query.loggingName = @"containeranalysis.projects.occurrences.patch";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsOccurrencesSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRContainerAnalysis_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRContainerAnalysisQuery_ProjectsOccurrencesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRContainerAnalysis_Policy class];
  query.loggingName = @"containeranalysis.projects.occurrences.setIamPolicy";
  return query;
}

@end

@implementation GTLRContainerAnalysisQuery_ProjectsOccurrencesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRContainerAnalysis_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRContainerAnalysisQuery_ProjectsOccurrencesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRContainerAnalysis_TestIamPermissionsResponse class];
  query.loggingName = @"containeranalysis.projects.occurrences.testIamPermissions";
  return query;
}

@end
