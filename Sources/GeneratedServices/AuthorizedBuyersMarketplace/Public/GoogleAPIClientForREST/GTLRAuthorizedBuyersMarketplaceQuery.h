// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Authorized Buyers Marketplace API (authorizedbuyersmarketplace/v1)
// Description:
//   The Authorized Buyers Marketplace API lets buyers programmatically discover
//   inventory; propose, retrieve and negotiate deals with publishers.
// Documentation:
//   https://developers.google.com/authorized-buyers/apis/marketplace/reference/rest/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRAuthorizedBuyersMarketplaceObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Authorized Buyers Marketplace query classes.
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Lists finalized deals. Use the URL path
 *  "/v1/buyers/{accountId}/finalizedDeals" to list finalized deals for the
 *  current buyer and its clients. Bidders can use the URL path
 *  "/v1/bidders/{accountId}/finalizedDeals" to list finalized deals for the
 *  bidder, its buyers and all their clients.
 *
 *  Method: authorizedbuyersmarketplace.bidders.finalizedDeals.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BiddersFinalizedDealsList : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Optional query string using the [Cloud API list filtering
 *  syntax](https://developers.google.com/authorized-buyers/apis/guides/v2/list-filters)
 *  Supported columns for filtering are: * deal.displayName * deal.dealType *
 *  deal.createTime * deal.updateTime * deal.flightStartTime *
 *  deal.flightEndTime * dealServingStatus
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  An optional query string to sort finalized deals using the [Cloud API
 *  sorting
 *  syntax](https://cloud.google.com/apis/design/design_patterns#sorting_order).
 *  If no sort order is specified, results will be returned in an arbitrary
 *  order. Supported columns for sorting are: * deal.displayName *
 *  deal.createTime * deal.updateTime * deal.flightStartTime *
 *  deal.flightEndTime * rtbMetrics.bidRequests7Days * rtbMetrics.bids7Days *
 *  rtbMetrics.adImpressions7Days * rtbMetrics.bidRate7Days *
 *  rtbMetrics.filteredBidRate7Days * rtbMetrics.mustBidRateCurrentMonth
 *  Example: 'deal.displayName, deal.updateTime desc'
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  requested more than 500, the server will return 500 results per page. If
 *  unspecified, the server will pick a default page size of 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The page token as returned from ListFinalizedDealsResponse. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The buyer to list the finalized deals for, in the format:
 *  `buyers/{accountId}`. When used to list finalized deals for a bidder, its
 *  buyers and clients, in the format `bidders/{accountId}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_ListFinalizedDealsResponse.
 *
 *  Lists finalized deals. Use the URL path
 *  "/v1/buyers/{accountId}/finalizedDeals" to list finalized deals for the
 *  current buyer and its clients. Bidders can use the URL path
 *  "/v1/bidders/{accountId}/finalizedDeals" to list finalized deals for the
 *  bidder, its buyers and all their clients.
 *
 *  @param parent Required. The buyer to list the finalized deals for, in the
 *    format: `buyers/{accountId}`. When used to list finalized deals for a
 *    bidder, its buyers and clients, in the format `bidders/{accountId}`.
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BiddersFinalizedDealsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets an auction package given its name.
 *
 *  Method: authorizedbuyersmarketplace.buyers.auctionPackages.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersAuctionPackagesGet : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Required. Name of auction package to get. Format:
 *  `buyers/{accountId}/auctionPackages/{auctionPackageId}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_AuctionPackage.
 *
 *  Gets an auction package given its name.
 *
 *  @param name Required. Name of auction package to get. Format:
 *    `buyers/{accountId}/auctionPackages/{auctionPackageId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersAuctionPackagesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  List the auction packages subscribed by a buyer and its clients.
 *
 *  Method: authorizedbuyersmarketplace.buyers.auctionPackages.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersAuctionPackagesList : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Requested page size. The server may return fewer results than requested. Max
 *  allowed page size is 500.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The page token as returned. ListAuctionPackagesResponse.nextPageToken */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of the parent buyer that can access the auction package.
 *  Format: `buyers/{accountId}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_ListAuctionPackagesResponse.
 *
 *  List the auction packages subscribed by a buyer and its clients.
 *
 *  @param parent Required. Name of the parent buyer that can access the auction
 *    package. Format: `buyers/{accountId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersAuctionPackagesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Subscribe to the auction package for the specified buyer. Once subscribed,
 *  the bidder will receive a call out for inventory matching the auction
 *  package targeting criteria with the auction package deal ID and the
 *  specified buyer.
 *
 *  Method: authorizedbuyersmarketplace.buyers.auctionPackages.subscribe
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersAuctionPackagesSubscribe : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Required. Name of the auction package. Format:
 *  `buyers/{accountId}/auctionPackages/{auctionPackageId}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_AuctionPackage.
 *
 *  Subscribe to the auction package for the specified buyer. Once subscribed,
 *  the bidder will receive a call out for inventory matching the auction
 *  package targeting criteria with the auction package deal ID and the
 *  specified buyer.
 *
 *  @param object The @c
 *    GTLRAuthorizedBuyersMarketplace_SubscribeAuctionPackageRequest to include
 *    in the query.
 *  @param name Required. Name of the auction package. Format:
 *    `buyers/{accountId}/auctionPackages/{auctionPackageId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersAuctionPackagesSubscribe
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_SubscribeAuctionPackageRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Subscribe the specified clients of the buyer to the auction package. If a
 *  client in the list does not belong to the buyer, an error response will be
 *  returned, and all of the following clients in the list will not be
 *  subscribed. Subscribing an already subscribed client will have no effect.
 *
 *  Method: authorizedbuyersmarketplace.buyers.auctionPackages.subscribeClients
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersAuctionPackagesSubscribeClients : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Required. Name of the auction package. Format:
 *  `buyers/{accountId}/auctionPackages/{auctionPackageId}`
 */
@property(nonatomic, copy, nullable) NSString *auctionPackage;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_AuctionPackage.
 *
 *  Subscribe the specified clients of the buyer to the auction package. If a
 *  client in the list does not belong to the buyer, an error response will be
 *  returned, and all of the following clients in the list will not be
 *  subscribed. Subscribing an already subscribed client will have no effect.
 *
 *  @param object The @c GTLRAuthorizedBuyersMarketplace_SubscribeClientsRequest
 *    to include in the query.
 *  @param auctionPackage Required. Name of the auction package. Format:
 *    `buyers/{accountId}/auctionPackages/{auctionPackageId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersAuctionPackagesSubscribeClients
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_SubscribeClientsRequest *)object
                 auctionPackage:(NSString *)auctionPackage;

@end

/**
 *  Unsubscribe from the auction package for the specified buyer. Once
 *  unsubscribed, the bidder will no longer receive a call out for the auction
 *  package deal ID and the specified buyer.
 *
 *  Method: authorizedbuyersmarketplace.buyers.auctionPackages.unsubscribe
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersAuctionPackagesUnsubscribe : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Required. Name of the auction package. Format:
 *  `buyers/{accountId}/auctionPackages/{auctionPackageId}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_AuctionPackage.
 *
 *  Unsubscribe from the auction package for the specified buyer. Once
 *  unsubscribed, the bidder will no longer receive a call out for the auction
 *  package deal ID and the specified buyer.
 *
 *  @param object The @c
 *    GTLRAuthorizedBuyersMarketplace_UnsubscribeAuctionPackageRequest to
 *    include in the query.
 *  @param name Required. Name of the auction package. Format:
 *    `buyers/{accountId}/auctionPackages/{auctionPackageId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersAuctionPackagesUnsubscribe
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_UnsubscribeAuctionPackageRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Unsubscribe from the auction package for the specified clients of the buyer.
 *  Unsubscribing a client that is not subscribed will have no effect.
 *
 *  Method: authorizedbuyersmarketplace.buyers.auctionPackages.unsubscribeClients
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersAuctionPackagesUnsubscribeClients : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Required. Name of the auction package. Format:
 *  `buyers/{accountId}/auctionPackages/{auctionPackageId}`
 */
@property(nonatomic, copy, nullable) NSString *auctionPackage;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_AuctionPackage.
 *
 *  Unsubscribe from the auction package for the specified clients of the buyer.
 *  Unsubscribing a client that is not subscribed will have no effect.
 *
 *  @param object The @c
 *    GTLRAuthorizedBuyersMarketplace_UnsubscribeClientsRequest to include in
 *    the query.
 *  @param auctionPackage Required. Name of the auction package. Format:
 *    `buyers/{accountId}/auctionPackages/{auctionPackageId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersAuctionPackagesUnsubscribeClients
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_UnsubscribeClientsRequest *)object
                 auctionPackage:(NSString *)auctionPackage;

@end

/**
 *  Activates an existing client. The state of the client will be updated to
 *  "ACTIVE". This method has no effect if the client is already in "ACTIVE"
 *  state.
 *
 *  Method: authorizedbuyersmarketplace.buyers.clients.activate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsActivate : GTLRAuthorizedBuyersMarketplaceQuery

/** Required. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}` */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_Client.
 *
 *  Activates an existing client. The state of the client will be updated to
 *  "ACTIVE". This method has no effect if the client is already in "ACTIVE"
 *  state.
 *
 *  @param object The @c GTLRAuthorizedBuyersMarketplace_ActivateClientRequest
 *    to include in the query.
 *  @param name Required. Format:
 *    `buyers/{buyerAccountId}/clients/{clientAccountId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsActivate
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_ActivateClientRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new client.
 *
 *  Method: authorizedbuyersmarketplace.buyers.clients.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsCreate : GTLRAuthorizedBuyersMarketplaceQuery

/** Required. The name of the buyer. Format: `buyers/{accountId}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_Client.
 *
 *  Creates a new client.
 *
 *  @param object The @c GTLRAuthorizedBuyersMarketplace_Client to include in
 *    the query.
 *  @param parent Required. The name of the buyer. Format: `buyers/{accountId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsCreate
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_Client *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deactivates an existing client. The state of the client will be updated to
 *  "INACTIVE". This method has no effect if the client is already in "INACTIVE"
 *  state.
 *
 *  Method: authorizedbuyersmarketplace.buyers.clients.deactivate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsDeactivate : GTLRAuthorizedBuyersMarketplaceQuery

/** Required. Format: `buyers/{buyerAccountId}/clients/{clientAccountId}` */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_Client.
 *
 *  Deactivates an existing client. The state of the client will be updated to
 *  "INACTIVE". This method has no effect if the client is already in "INACTIVE"
 *  state.
 *
 *  @param object The @c GTLRAuthorizedBuyersMarketplace_DeactivateClientRequest
 *    to include in the query.
 *  @param name Required. Format:
 *    `buyers/{buyerAccountId}/clients/{clientAccountId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsDeactivate
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_DeactivateClientRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets a client with a given resource name.
 *
 *  Method: authorizedbuyersmarketplace.buyers.clients.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsGet : GTLRAuthorizedBuyersMarketplaceQuery

/** Required. Format: `buyers/{accountId}/clients/{clientAccountId}` */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_Client.
 *
 *  Gets a client with a given resource name.
 *
 *  @param name Required. Format: `buyers/{accountId}/clients/{clientAccountId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all the clients for the current buyer.
 *
 *  Method: authorizedbuyersmarketplace.buyers.clients.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsList : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Query string using the [Filtering
 *  Syntax](https://developers.google.com/authorized-buyers/apis/guides/v2/list-filters)
 *  Supported fields for filtering are: * partnerClientId Use this field to
 *  filter the clients by the partnerClientId. For example, if the
 *  partnerClientId of the client is "1234", the value of this field should be
 *  `partnerClientId = "1234"`, in order to get only the client whose
 *  partnerClientId is "1234" in the response.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Requested page size. If left blank, a default page size of 500 will be
 *  applied.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListClientsResponse.nextPageToken returned from the
 *  previous call to the list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. The name of the buyer. Format: `buyers/{accountId}` */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_ListClientsResponse.
 *
 *  Lists all the clients for the current buyer.
 *
 *  @param parent Required. The name of the buyer. Format: `buyers/{accountId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates an existing client.
 *
 *  Method: authorizedbuyersmarketplace.buyers.clients.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsPatch : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Output only. The resource name of the client. Format:
 *  `buyers/{accountId}/clients/{clientAccountId}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  List of fields to be updated. If empty or unspecified, the service will
 *  update all fields populated in the update request excluding the output only
 *  fields and primitive fields with default value. Note that explicit field
 *  mask is required in order to reset a primitive field back to its default
 *  value, for example, false for boolean fields, 0 for integer fields. A
 *  special field mask consisting of a single path "*" can be used to indicate
 *  full replacement(the equivalent of PUT method), updatable fields unset or
 *  unspecified in the input will be cleared or set to default value. Output
 *  only fields will be ignored regardless of the value of updateMask.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_Client.
 *
 *  Updates an existing client.
 *
 *  @param object The @c GTLRAuthorizedBuyersMarketplace_Client to include in
 *    the query.
 *  @param name Output only. The resource name of the client. Format:
 *    `buyers/{accountId}/clients/{clientAccountId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsPatch
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_Client *)object
                           name:(NSString *)name;

@end

/**
 *  Activates an existing client user. The state of the client user will be
 *  updated from "INACTIVE" to "ACTIVE". This method has no effect if the client
 *  user is already in "ACTIVE" state. An error will be returned if the client
 *  user to activate is still in "INVITED" state.
 *
 *  Method: authorizedbuyersmarketplace.buyers.clients.users.activate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsUsersActivate : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Required. Format:
 *  `buyers/{buyerAccountId}/clients/{clientAccountId}/clientUsers/{userId}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_ClientUser.
 *
 *  Activates an existing client user. The state of the client user will be
 *  updated from "INACTIVE" to "ACTIVE". This method has no effect if the client
 *  user is already in "ACTIVE" state. An error will be returned if the client
 *  user to activate is still in "INVITED" state.
 *
 *  @param object The @c
 *    GTLRAuthorizedBuyersMarketplace_ActivateClientUserRequest to include in
 *    the query.
 *  @param name Required. Format:
 *    `buyers/{buyerAccountId}/clients/{clientAccountId}/clientUsers/{userId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsUsersActivate
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_ActivateClientUserRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new client user in "INVITED" state. An email invitation will be
 *  sent to the new user, once accepted the user will become active.
 *
 *  Method: authorizedbuyersmarketplace.buyers.clients.users.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsUsersCreate : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Required. The name of the client. Format:
 *  `buyers/{accountId}/clients/{clientAccountId}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_ClientUser.
 *
 *  Creates a new client user in "INVITED" state. An email invitation will be
 *  sent to the new user, once accepted the user will become active.
 *
 *  @param object The @c GTLRAuthorizedBuyersMarketplace_ClientUser to include
 *    in the query.
 *  @param parent Required. The name of the client. Format:
 *    `buyers/{accountId}/clients/{clientAccountId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsUsersCreate
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_ClientUser *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deactivates an existing client user. The state of the client user will be
 *  updated from "ACTIVE" to "INACTIVE". This method has no effect if the client
 *  user is already in "INACTIVE" state. An error will be returned if the client
 *  user to deactivate is still in "INVITED" state.
 *
 *  Method: authorizedbuyersmarketplace.buyers.clients.users.deactivate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsUsersDeactivate : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Required. Format:
 *  `buyers/{buyerAccountId}/clients/{clientAccountId}/clientUsers/{userId}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_ClientUser.
 *
 *  Deactivates an existing client user. The state of the client user will be
 *  updated from "ACTIVE" to "INACTIVE". This method has no effect if the client
 *  user is already in "INACTIVE" state. An error will be returned if the client
 *  user to deactivate is still in "INVITED" state.
 *
 *  @param object The @c
 *    GTLRAuthorizedBuyersMarketplace_DeactivateClientUserRequest to include in
 *    the query.
 *  @param name Required. Format:
 *    `buyers/{buyerAccountId}/clients/{clientAccountId}/clientUsers/{userId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsUsersDeactivate
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_DeactivateClientUserRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes an existing client user. The client user will lose access to the
 *  Authorized Buyers UI. Note that if a client user is deleted, the user's
 *  access to the UI can't be restored unless a new client user is created and
 *  activated.
 *
 *  Method: authorizedbuyersmarketplace.buyers.clients.users.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsUsersDelete : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Required. Format:
 *  `buyers/{buyerAccountId}/clients/{clientAccountId}/clientUsers/{userId}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_Empty.
 *
 *  Deletes an existing client user. The client user will lose access to the
 *  Authorized Buyers UI. Note that if a client user is deleted, the user's
 *  access to the UI can't be restored unless a new client user is created and
 *  activated.
 *
 *  @param name Required. Format:
 *    `buyers/{buyerAccountId}/clients/{clientAccountId}/clientUsers/{userId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsUsersDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Retrieves an existing client user.
 *
 *  Method: authorizedbuyersmarketplace.buyers.clients.users.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsUsersGet : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Required. Format:
 *  `buyers/{buyerAccountId}/clients/{clientAccountId}/clientUsers/{userId}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_ClientUser.
 *
 *  Retrieves an existing client user.
 *
 *  @param name Required. Format:
 *    `buyers/{buyerAccountId}/clients/{clientAccountId}/clientUsers/{userId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsUsersGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all client users for a specified client.
 *
 *  Method: authorizedbuyersmarketplace.buyers.clients.users.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsUsersList : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Requested page size. If left blank, a default page size of 500 will be
 *  applied.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A token identifying a page of results the server should return. Typically,
 *  this is the value of ListClientUsersResponse.nextPageToken returned from the
 *  previous call to the list method.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the client. Format:
 *  `buyers/{buyerAccountId}/clients/{clientAccountId}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_ListClientUsersResponse.
 *
 *  Lists all client users for a specified client.
 *
 *  @param parent Required. The name of the client. Format:
 *    `buyers/{buyerAccountId}/clients/{clientAccountId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersClientsUsersList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Add creative to be used in the bidding process for a finalized deal. For
 *  programmatic guaranteed deals, it's recommended that you associate at least
 *  one approved creative with the deal before calling SetReadyToServe, to help
 *  reduce the number of bid responses filtered because they don't contain
 *  approved creatives. Creatives successfully added to a deal can be found in
 *  the Realtime-bidding Creatives API creative.deal_ids. This method only
 *  applies to programmatic guaranteed deals. Maximum number of 1000 creatives
 *  can be added to a finalized deal.
 *
 *  Method: authorizedbuyersmarketplace.buyers.finalizedDeals.addCreative
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersFinalizedDealsAddCreative : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Required. Name of the finalized deal in the format of:
 *  `buyers/{accountId}/finalizedDeals/{dealId}`
 */
@property(nonatomic, copy, nullable) NSString *deal;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_FinalizedDeal.
 *
 *  Add creative to be used in the bidding process for a finalized deal. For
 *  programmatic guaranteed deals, it's recommended that you associate at least
 *  one approved creative with the deal before calling SetReadyToServe, to help
 *  reduce the number of bid responses filtered because they don't contain
 *  approved creatives. Creatives successfully added to a deal can be found in
 *  the Realtime-bidding Creatives API creative.deal_ids. This method only
 *  applies to programmatic guaranteed deals. Maximum number of 1000 creatives
 *  can be added to a finalized deal.
 *
 *  @param object The @c GTLRAuthorizedBuyersMarketplace_AddCreativeRequest to
 *    include in the query.
 *  @param deal Required. Name of the finalized deal in the format of:
 *    `buyers/{accountId}/finalizedDeals/{dealId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersFinalizedDealsAddCreative
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_AddCreativeRequest *)object
                           deal:(NSString *)deal;

@end

/**
 *  Gets a finalized deal given its name.
 *
 *  Method: authorizedbuyersmarketplace.buyers.finalizedDeals.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersFinalizedDealsGet : GTLRAuthorizedBuyersMarketplaceQuery

/** Required. Format: `buyers/{accountId}/finalizedDeals/{dealId}` */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_FinalizedDeal.
 *
 *  Gets a finalized deal given its name.
 *
 *  @param name Required. Format: `buyers/{accountId}/finalizedDeals/{dealId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersFinalizedDealsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists finalized deals. Use the URL path
 *  "/v1/buyers/{accountId}/finalizedDeals" to list finalized deals for the
 *  current buyer and its clients. Bidders can use the URL path
 *  "/v1/bidders/{accountId}/finalizedDeals" to list finalized deals for the
 *  bidder, its buyers and all their clients.
 *
 *  Method: authorizedbuyersmarketplace.buyers.finalizedDeals.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersFinalizedDealsList : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Optional query string using the [Cloud API list filtering
 *  syntax](https://developers.google.com/authorized-buyers/apis/guides/v2/list-filters)
 *  Supported columns for filtering are: * deal.displayName * deal.dealType *
 *  deal.createTime * deal.updateTime * deal.flightStartTime *
 *  deal.flightEndTime * dealServingStatus
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  An optional query string to sort finalized deals using the [Cloud API
 *  sorting
 *  syntax](https://cloud.google.com/apis/design/design_patterns#sorting_order).
 *  If no sort order is specified, results will be returned in an arbitrary
 *  order. Supported columns for sorting are: * deal.displayName *
 *  deal.createTime * deal.updateTime * deal.flightStartTime *
 *  deal.flightEndTime * rtbMetrics.bidRequests7Days * rtbMetrics.bids7Days *
 *  rtbMetrics.adImpressions7Days * rtbMetrics.bidRate7Days *
 *  rtbMetrics.filteredBidRate7Days * rtbMetrics.mustBidRateCurrentMonth
 *  Example: 'deal.displayName, deal.updateTime desc'
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  requested more than 500, the server will return 500 results per page. If
 *  unspecified, the server will pick a default page size of 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The page token as returned from ListFinalizedDealsResponse. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The buyer to list the finalized deals for, in the format:
 *  `buyers/{accountId}`. When used to list finalized deals for a bidder, its
 *  buyers and clients, in the format `bidders/{accountId}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_ListFinalizedDealsResponse.
 *
 *  Lists finalized deals. Use the URL path
 *  "/v1/buyers/{accountId}/finalizedDeals" to list finalized deals for the
 *  current buyer and its clients. Bidders can use the URL path
 *  "/v1/bidders/{accountId}/finalizedDeals" to list finalized deals for the
 *  bidder, its buyers and all their clients.
 *
 *  @param parent Required. The buyer to list the finalized deals for, in the
 *    format: `buyers/{accountId}`. When used to list finalized deals for a
 *    bidder, its buyers and clients, in the format `bidders/{accountId}`.
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersFinalizedDealsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Pauses serving of the given finalized deal. This call only pauses the
 *  serving status, and does not affect other fields of the finalized deal.
 *  Calling this method for an already paused deal has no effect. This method
 *  only applies to programmatic guaranteed deals.
 *
 *  Method: authorizedbuyersmarketplace.buyers.finalizedDeals.pause
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersFinalizedDealsPause : GTLRAuthorizedBuyersMarketplaceQuery

/** Required. Format: `buyers/{accountId}/finalizedDeals/{dealId}` */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_FinalizedDeal.
 *
 *  Pauses serving of the given finalized deal. This call only pauses the
 *  serving status, and does not affect other fields of the finalized deal.
 *  Calling this method for an already paused deal has no effect. This method
 *  only applies to programmatic guaranteed deals.
 *
 *  @param object The @c
 *    GTLRAuthorizedBuyersMarketplace_PauseFinalizedDealRequest to include in
 *    the query.
 *  @param name Required. Format: `buyers/{accountId}/finalizedDeals/{dealId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersFinalizedDealsPause
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_PauseFinalizedDealRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Resumes serving of the given finalized deal. Calling this method for an
 *  running deal has no effect. If a deal is initially paused by the seller,
 *  calling this method will not resume serving of the deal until the seller
 *  also resumes the deal. This method only applies to programmatic guaranteed
 *  deals.
 *
 *  Method: authorizedbuyersmarketplace.buyers.finalizedDeals.resume
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersFinalizedDealsResume : GTLRAuthorizedBuyersMarketplaceQuery

/** Required. Format: `buyers/{accountId}/finalizedDeals/{dealId}` */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_FinalizedDeal.
 *
 *  Resumes serving of the given finalized deal. Calling this method for an
 *  running deal has no effect. If a deal is initially paused by the seller,
 *  calling this method will not resume serving of the deal until the seller
 *  also resumes the deal. This method only applies to programmatic guaranteed
 *  deals.
 *
 *  @param object The @c
 *    GTLRAuthorizedBuyersMarketplace_ResumeFinalizedDealRequest to include in
 *    the query.
 *  @param name Required. Format: `buyers/{accountId}/finalizedDeals/{dealId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersFinalizedDealsResume
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_ResumeFinalizedDealRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Sets the given finalized deal as ready to serve. By default, deals are set
 *  as ready to serve as soon as they're finalized. If you want to opt out of
 *  the default behavior, and manually indicate that deals are ready to serve,
 *  ask your Technical Account Manager to add you to the allowlist. If you
 *  choose to use this method, finalized deals belonging to the bidder and its
 *  child seats don't start serving until after you call `setReadyToServe`, and
 *  after the deals become active. For example, you can use this method to delay
 *  receiving bid requests until your creative is ready. This method only
 *  applies to programmatic guaranteed deals.
 *
 *  Method: authorizedbuyersmarketplace.buyers.finalizedDeals.setReadyToServe
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersFinalizedDealsSetReadyToServe : GTLRAuthorizedBuyersMarketplaceQuery

/** Required. Format: `buyers/{accountId}/finalizedDeals/{dealId}` */
@property(nonatomic, copy, nullable) NSString *deal;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_FinalizedDeal.
 *
 *  Sets the given finalized deal as ready to serve. By default, deals are set
 *  as ready to serve as soon as they're finalized. If you want to opt out of
 *  the default behavior, and manually indicate that deals are ready to serve,
 *  ask your Technical Account Manager to add you to the allowlist. If you
 *  choose to use this method, finalized deals belonging to the bidder and its
 *  child seats don't start serving until after you call `setReadyToServe`, and
 *  after the deals become active. For example, you can use this method to delay
 *  receiving bid requests until your creative is ready. This method only
 *  applies to programmatic guaranteed deals.
 *
 *  @param object The @c GTLRAuthorizedBuyersMarketplace_SetReadyToServeRequest
 *    to include in the query.
 *  @param deal Required. Format: `buyers/{accountId}/finalizedDeals/{dealId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersFinalizedDealsSetReadyToServe
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_SetReadyToServeRequest *)object
                           deal:(NSString *)deal;

@end

/**
 *  Accepts the proposal at the given revision number. If the revision number in
 *  the request is behind the latest from the server, an error message will be
 *  returned. This call updates the Proposal.state from
 *  `BUYER_ACCEPTANCE_REQUESTED` to `FINALIZED`; it has no side effect if the
 *  Proposal.state is already `FINALIZED` and throws exception if the
 *  Proposal.state is not either `BUYER_ACCEPTANCE_REQUESTED` or `FINALIZED`.
 *  Accepting a proposal means the buyer understands and accepts the
 *  Proposal.terms_and_conditions proposed by the seller.
 *
 *  Method: authorizedbuyersmarketplace.buyers.proposals.accept
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsAccept : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Name of the proposal. Format: `buyers/{accountId}/proposals/{proposalId}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_Proposal.
 *
 *  Accepts the proposal at the given revision number. If the revision number in
 *  the request is behind the latest from the server, an error message will be
 *  returned. This call updates the Proposal.state from
 *  `BUYER_ACCEPTANCE_REQUESTED` to `FINALIZED`; it has no side effect if the
 *  Proposal.state is already `FINALIZED` and throws exception if the
 *  Proposal.state is not either `BUYER_ACCEPTANCE_REQUESTED` or `FINALIZED`.
 *  Accepting a proposal means the buyer understands and accepts the
 *  Proposal.terms_and_conditions proposed by the seller.
 *
 *  @param object The @c GTLRAuthorizedBuyersMarketplace_AcceptProposalRequest
 *    to include in the query.
 *  @param name Name of the proposal. Format:
 *    `buyers/{accountId}/proposals/{proposalId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsAccept
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_AcceptProposalRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a note for this proposal and sends to the seller.
 *
 *  Method: authorizedbuyersmarketplace.buyers.proposals.addNote
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsAddNote : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Name of the proposal. Format: `buyers/{accountId}/proposals/{proposalId}`
 */
@property(nonatomic, copy, nullable) NSString *proposal;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_Proposal.
 *
 *  Creates a note for this proposal and sends to the seller.
 *
 *  @param object The @c GTLRAuthorizedBuyersMarketplace_AddNoteRequest to
 *    include in the query.
 *  @param proposal Name of the proposal. Format:
 *    `buyers/{accountId}/proposals/{proposalId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsAddNote
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_AddNoteRequest *)object
                       proposal:(NSString *)proposal;

@end

/**
 *  Cancels an ongoing negotiation on a proposal. This does not cancel or end
 *  serving for the deals if the proposal has been finalized. If the proposal
 *  has not been finalized before, calling this method will set the
 *  Proposal.state to `TERMINATED` and increment the Proposal.proposal_revision.
 *  If the proposal has been finalized before and is under renegotiation now,
 *  calling this method will reset the Proposal.state to `FINALIZED` and
 *  increment the Proposal.proposal_revision. This method does not support
 *  private auction proposals whose Proposal.deal_type is 'PRIVATE_AUCTION'.
 *
 *  Method: authorizedbuyersmarketplace.buyers.proposals.cancelNegotiation
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsCancelNegotiation : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Name of the proposal. Format: `buyers/{accountId}/proposals/{proposalId}`
 */
@property(nonatomic, copy, nullable) NSString *proposal;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_Proposal.
 *
 *  Cancels an ongoing negotiation on a proposal. This does not cancel or end
 *  serving for the deals if the proposal has been finalized. If the proposal
 *  has not been finalized before, calling this method will set the
 *  Proposal.state to `TERMINATED` and increment the Proposal.proposal_revision.
 *  If the proposal has been finalized before and is under renegotiation now,
 *  calling this method will reset the Proposal.state to `FINALIZED` and
 *  increment the Proposal.proposal_revision. This method does not support
 *  private auction proposals whose Proposal.deal_type is 'PRIVATE_AUCTION'.
 *
 *  @param object The @c
 *    GTLRAuthorizedBuyersMarketplace_CancelNegotiationRequest to include in the
 *    query.
 *  @param proposal Name of the proposal. Format:
 *    `buyers/{accountId}/proposals/{proposalId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsCancelNegotiation
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_CancelNegotiationRequest *)object
                       proposal:(NSString *)proposal;

@end

/**
 *  Batch updates multiple deals in the same proposal.
 *
 *  Method: authorizedbuyersmarketplace.buyers.proposals.deals.batchUpdate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsDealsBatchUpdate : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Required. The name of the proposal containing the deals to batch update.
 *  Format: buyers/{accountId}/proposals/{proposalId}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_BatchUpdateDealsResponse.
 *
 *  Batch updates multiple deals in the same proposal.
 *
 *  @param object The @c GTLRAuthorizedBuyersMarketplace_BatchUpdateDealsRequest
 *    to include in the query.
 *  @param parent Required. The name of the proposal containing the deals to
 *    batch update. Format: buyers/{accountId}/proposals/{proposalId}
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsDealsBatchUpdate
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_BatchUpdateDealsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets a deal given its name. The deal is returned at its head revision.
 *
 *  Method: authorizedbuyersmarketplace.buyers.proposals.deals.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsDealsGet : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Required. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_Deal.
 *
 *  Gets a deal given its name. The deal is returned at its head revision.
 *
 *  @param name Required. Format:
 *    buyers/{accountId}/proposals/{proposalId}/deals/{dealId}
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsDealsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists all deals in a proposal. To retrieve only the finalized revision deals
 *  regardless if a deal is being renegotiated, see the FinalizedDeals resource.
 *
 *  Method: authorizedbuyersmarketplace.buyers.proposals.deals.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsDealsList : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  requested more than 500, the server will return 500 results per page. If
 *  unspecified, the server will pick a default page size of 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The page token as returned from ListDealsResponse. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The name of the proposal containing the deals to retrieve. Format:
 *  buyers/{accountId}/proposals/{proposalId}
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_ListDealsResponse.
 *
 *  Lists all deals in a proposal. To retrieve only the finalized revision deals
 *  regardless if a deal is being renegotiated, see the FinalizedDeals resource.
 *
 *  @param parent Required. The name of the proposal containing the deals to
 *    retrieve. Format: buyers/{accountId}/proposals/{proposalId}
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsDealsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the given deal at the buyer known revision number. If the server
 *  revision has advanced since the passed-in proposal.proposal_revision an
 *  ABORTED error message will be returned. The revision number is incremented
 *  by the server whenever the proposal or its constituent deals are updated.
 *  Note: The revision number is kept at a proposal level. The buyer of the API
 *  is expected to keep track of the revision number after the last update
 *  operation and send it in as part of the next update request. This way, if
 *  there are further changes on the server (for example, seller making new
 *  updates), then the server can detect conflicts and reject the proposed
 *  changes.
 *
 *  Method: authorizedbuyersmarketplace.buyers.proposals.deals.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsDealsPatch : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Immutable. The unique identifier of the deal. Auto-generated by the server
 *  when a deal is created. Format:
 *  buyers/{accountId}/proposals/{proposalId}/deals/{dealId}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  List of fields to be updated. If empty or unspecified, the service will
 *  update all fields populated in the update request excluding the output only
 *  fields and primitive fields with default value. Note that explicit field
 *  mask is required in order to reset a primitive field back to its default
 *  value, for example, false for boolean fields, 0 for integer fields. A
 *  special field mask consisting of a single path "*" can be used to indicate
 *  full replacement(the equivalent of PUT method), updatable fields unset or
 *  unspecified in the input will be cleared or set to default value. Output
 *  only fields will be ignored regardless of the value of updateMask.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_Deal.
 *
 *  Updates the given deal at the buyer known revision number. If the server
 *  revision has advanced since the passed-in proposal.proposal_revision an
 *  ABORTED error message will be returned. The revision number is incremented
 *  by the server whenever the proposal or its constituent deals are updated.
 *  Note: The revision number is kept at a proposal level. The buyer of the API
 *  is expected to keep track of the revision number after the last update
 *  operation and send it in as part of the next update request. This way, if
 *  there are further changes on the server (for example, seller making new
 *  updates), then the server can detect conflicts and reject the proposed
 *  changes.
 *
 *  @param object The @c GTLRAuthorizedBuyersMarketplace_Deal to include in the
 *    query.
 *  @param name Immutable. The unique identifier of the deal. Auto-generated by
 *    the server when a deal is created. Format:
 *    buyers/{accountId}/proposals/{proposalId}/deals/{dealId}
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsDealsPatch
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_Deal *)object
                           name:(NSString *)name;

@end

/**
 *  Gets a proposal using its name. The proposal is returned at most recent
 *  revision. revision.
 *
 *  Method: authorizedbuyersmarketplace.buyers.proposals.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsGet : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Required. Name of the proposal. Format:
 *  `buyers/{accountId}/proposals/{proposalId}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_Proposal.
 *
 *  Gets a proposal using its name. The proposal is returned at most recent
 *  revision. revision.
 *
 *  @param name Required. Name of the proposal. Format:
 *    `buyers/{accountId}/proposals/{proposalId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists proposals. A filter expression (list filter syntax) may be specified
 *  to filter the results. This will not list finalized versions of proposals
 *  that are being renegotiated; to retrieve these use the finalizedProposals
 *  resource.
 *
 *  Method: authorizedbuyersmarketplace.buyers.proposals.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsList : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Optional query string using the [Cloud API list filtering
 *  syntax](https://developers.google.com/authorized-buyers/apis/guides/v2/list-filters)
 *  Supported columns for filtering are: * displayName * dealType * updateTime *
 *  state
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  unspecified, the server will put a size of 500.
 */
@property(nonatomic, assign) NSInteger pageSize;

/** The page token as returned from ListProposalsResponse. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Parent that owns the collection of proposals Format:
 *  `buyers/{accountId}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_ListProposalsResponse.
 *
 *  Lists proposals. A filter expression (list filter syntax) may be specified
 *  to filter the results. This will not list finalized versions of proposals
 *  that are being renegotiated; to retrieve these use the finalizedProposals
 *  resource.
 *
 *  @param parent Required. Parent that owns the collection of proposals Format:
 *    `buyers/{accountId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates the proposal at the given revision number. If the revision number in
 *  the request is behind the latest from the server, an error message will be
 *  returned. See FieldMask for how to use FieldMask. Only fields specified in
 *  the UpdateProposalRequest.update_mask will be updated; Fields noted as
 *  'Immutable' or 'Output only' yet specified in the
 *  UpdateProposalRequest.update_mask will be ignored and left unchanged.
 *  Updating a private auction proposal is not allowed and will result in an
 *  error.
 *
 *  Method: authorizedbuyersmarketplace.buyers.proposals.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsPatch : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Immutable. The name of the proposal serving as a unique identifier. Format:
 *  buyers/{accountId}/proposals/{proposalId}
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  List of fields to be updated. If empty or unspecified, the service will
 *  update all fields populated in the update request excluding the output only
 *  fields and primitive fields with default value. Note that explicit field
 *  mask is required in order to reset a primitive field back to its default
 *  value, for example, false for boolean fields, 0 for integer fields. A
 *  special field mask consisting of a single path "*" can be used to indicate
 *  full replacement(the equivalent of PUT method), updatable fields unset or
 *  unspecified in the input will be cleared or set to default value. Output
 *  only fields will be ignored regardless of the value of updateMask.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_Proposal.
 *
 *  Updates the proposal at the given revision number. If the revision number in
 *  the request is behind the latest from the server, an error message will be
 *  returned. See FieldMask for how to use FieldMask. Only fields specified in
 *  the UpdateProposalRequest.update_mask will be updated; Fields noted as
 *  'Immutable' or 'Output only' yet specified in the
 *  UpdateProposalRequest.update_mask will be ignored and left unchanged.
 *  Updating a private auction proposal is not allowed and will result in an
 *  error.
 *
 *  @param object The @c GTLRAuthorizedBuyersMarketplace_Proposal to include in
 *    the query.
 *  @param name Immutable. The name of the proposal serving as a unique
 *    identifier. Format: buyers/{accountId}/proposals/{proposalId}
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsPatch
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_Proposal *)object
                           name:(NSString *)name;

@end

/**
 *  Sends a request for proposal (RFP) to a publisher to initiate the
 *  negotiation regarding certain inventory. In the RFP, buyers can specify the
 *  deal type, deal terms, start and end dates, targeting, and a message to the
 *  publisher. Once the RFP is sent, a proposal in `SELLER_REVIEW_REQUESTED`
 *  state will be created and returned in the response. The publisher may review
 *  your request and respond with detailed deals in the proposal.
 *
 *  Method: authorizedbuyersmarketplace.buyers.proposals.sendRfp
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsSendRfp : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Required. The current buyer who is sending the RFP in the format:
 *  `buyers/{accountId}`.
 */
@property(nonatomic, copy, nullable) NSString *buyer;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_Proposal.
 *
 *  Sends a request for proposal (RFP) to a publisher to initiate the
 *  negotiation regarding certain inventory. In the RFP, buyers can specify the
 *  deal type, deal terms, start and end dates, targeting, and a message to the
 *  publisher. Once the RFP is sent, a proposal in `SELLER_REVIEW_REQUESTED`
 *  state will be created and returned in the response. The publisher may review
 *  your request and respond with detailed deals in the proposal.
 *
 *  @param object The @c GTLRAuthorizedBuyersMarketplace_SendRfpRequest to
 *    include in the query.
 *  @param buyer Required. The current buyer who is sending the RFP in the
 *    format: `buyers/{accountId}`.
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersProposalsSendRfp
 */
+ (instancetype)queryWithObject:(GTLRAuthorizedBuyersMarketplace_SendRfpRequest *)object
                          buyer:(NSString *)buyer;

@end

/**
 *  Gets the requested publisher profile by name.
 *
 *  Method: authorizedbuyersmarketplace.buyers.publisherProfiles.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersPublisherProfilesGet : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Required. Name of the publisher profile. Format:
 *  `buyers/{buyerId}/publisherProfiles/{publisherProfileId}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_PublisherProfile.
 *
 *  Gets the requested publisher profile by name.
 *
 *  @param name Required. Name of the publisher profile. Format:
 *    `buyers/{buyerId}/publisherProfiles/{publisherProfileId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersPublisherProfilesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists publisher profiles. The returned publisher profiles aren't in any
 *  defined order. The order of the results might change. A new publisher
 *  profile can appear in any place in the list of returned results.
 *
 *  Method: authorizedbuyersmarketplace.buyers.publisherProfiles.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeAuthorizedBuyersMarketplaceAuthorizedBuyersMarketplace
 */
@interface GTLRAuthorizedBuyersMarketplaceQuery_BuyersPublisherProfilesList : GTLRAuthorizedBuyersMarketplaceQuery

/**
 *  Optional query string using the [Cloud API list filtering]
 *  (https://developers.google.com/authorized-buyers/apis/guides/v2/list-filters)
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  Requested page size. The server may return fewer results than requested. If
 *  requested more than 500, the server will return 500 results per page. If
 *  unspecified, the server will pick a default page size of 100.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The page token as returned from a previous ListPublisherProfilesResponse.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Parent that owns the collection of publisher profiles Format:
 *  `buyers/{buyerId}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRAuthorizedBuyersMarketplace_ListPublisherProfilesResponse.
 *
 *  Lists publisher profiles. The returned publisher profiles aren't in any
 *  defined order. The order of the results might change. A new publisher
 *  profile can appear in any place in the list of returned results.
 *
 *  @param parent Required. Parent that owns the collection of publisher
 *    profiles Format: `buyers/{buyerId}`
 *
 *  @return GTLRAuthorizedBuyersMarketplaceQuery_BuyersPublisherProfilesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
