// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Storage Batch Operations API (storagebatchoperations/v1)
// Documentation:
//   https://cloud.google.com/storage/docs/batch-operations/overview

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRStorageBatchOperationsObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Storage Batch Operations query classes.
 */
@interface GTLRStorageBatchOperationsQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets information about a location.
 *
 *  Method: storagebatchoperations.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageBatchOperationsCloudPlatform
 */
@interface GTLRStorageBatchOperationsQuery_ProjectsLocationsGet : GTLRStorageBatchOperationsQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRStorageBatchOperations_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRStorageBatchOperationsQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Cancels a batch job.
 *
 *  Method: storagebatchoperations.projects.locations.jobs.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageBatchOperationsCloudPlatform
 */
@interface GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsCancel : GTLRStorageBatchOperationsQuery

/**
 *  Required. The `name` of the job to cancel. Format:
 *  projects/{project_id}/locations/global/jobs/{job_id}.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRStorageBatchOperations_CancelJobResponse.
 *
 *  Cancels a batch job.
 *
 *  @param object The @c GTLRStorageBatchOperations_CancelJobRequest to include
 *    in the query.
 *  @param name Required. The `name` of the job to cancel. Format:
 *    projects/{project_id}/locations/global/jobs/{job_id}.
 *
 *  @return GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsCancel
 */
+ (instancetype)queryWithObject:(GTLRStorageBatchOperations_CancelJobRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a batch job.
 *
 *  Method: storagebatchoperations.projects.locations.jobs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageBatchOperationsCloudPlatform
 */
@interface GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsCreate : GTLRStorageBatchOperationsQuery

/**
 *  Required. The optional `job_id` for this Job . If not specified, an id is
 *  generated. `job_id` should be no more than 128 characters and must include
 *  only characters available in DNS names, as defined by RFC-1123.
 */
@property(nonatomic, copy, nullable) NSString *jobId;

/** Required. Value for parent. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID in case you need to retry your request. Requests with same
 *  `request_id` will be ignored for at least 60 minutes since the first
 *  request. The request ID must be a valid UUID with the exception that zero
 *  UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRStorageBatchOperations_Operation.
 *
 *  Creates a batch job.
 *
 *  @param object The @c GTLRStorageBatchOperations_Job to include in the query.
 *  @param parent Required. Value for parent.
 *
 *  @return GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsCreate
 */
+ (instancetype)queryWithObject:(GTLRStorageBatchOperations_Job *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a batch job.
 *
 *  Method: storagebatchoperations.projects.locations.jobs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageBatchOperationsCloudPlatform
 */
@interface GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsDelete : GTLRStorageBatchOperationsQuery

/**
 *  Required. The `name` of the job to delete. Format:
 *  projects/{project_id}/locations/global/jobs/{job_id} .
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID in case you need to retry your request. Requests with same
 *  `request_id` will be ignored for at least 60 minutes since the first
 *  request. The request ID must be a valid UUID with the exception that zero
 *  UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRStorageBatchOperations_Empty.
 *
 *  Deletes a batch job.
 *
 *  @param name Required. The `name` of the job to delete. Format:
 *    projects/{project_id}/locations/global/jobs/{job_id} .
 *
 *  @return GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a batch job.
 *
 *  Method: storagebatchoperations.projects.locations.jobs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageBatchOperationsCloudPlatform
 */
@interface GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsGet : GTLRStorageBatchOperationsQuery

/**
 *  Required. `name` of the job to retrieve. Format:
 *  projects/{project_id}/locations/global/jobs/{job_id} .
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRStorageBatchOperations_Job.
 *
 *  Gets a batch job.
 *
 *  @param name Required. `name` of the job to retrieve. Format:
 *    projects/{project_id}/locations/global/jobs/{job_id} .
 *
 *  @return GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Jobs in a given project.
 *
 *  Method: storagebatchoperations.projects.locations.jobs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageBatchOperationsCloudPlatform
 */
@interface GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsList : GTLRStorageBatchOperationsQuery

/** Optional. Filters results as defined by https://google.aip.dev/160. */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Field to sort by. Supported fields are name, create_time. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Optional. The list page size. default page size is 100. */
@property(nonatomic, assign) NSInteger pageSize;

/** Optional. The list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/** Required. Format: projects/{project_id}/locations/global. */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRStorageBatchOperations_ListJobsResponse.
 *
 *  Lists Jobs in a given project.
 *
 *  @param parent Required. Format: projects/{project_id}/locations/global.
 *
 *  @return GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: storagebatchoperations.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageBatchOperationsCloudPlatform
 */
@interface GTLRStorageBatchOperationsQuery_ProjectsLocationsList : GTLRStorageBatchOperationsQuery

/**
 *  Optional. A list of extra location types that should be used as conditions
 *  for controlling the visibility of the locations.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *extraLocationTypes;

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRStorageBatchOperations_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRStorageBatchOperationsQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: storagebatchoperations.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageBatchOperationsCloudPlatform
 */
@interface GTLRStorageBatchOperationsQuery_ProjectsLocationsOperationsCancel : GTLRStorageBatchOperationsQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRStorageBatchOperations_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of `1`, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRStorageBatchOperations_CancelOperationRequest to
 *    include in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRStorageBatchOperationsQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRStorageBatchOperations_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: storagebatchoperations.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageBatchOperationsCloudPlatform
 */
@interface GTLRStorageBatchOperationsQuery_ProjectsLocationsOperationsDelete : GTLRStorageBatchOperationsQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRStorageBatchOperations_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRStorageBatchOperationsQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: storagebatchoperations.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageBatchOperationsCloudPlatform
 */
@interface GTLRStorageBatchOperationsQuery_ProjectsLocationsOperationsGet : GTLRStorageBatchOperationsQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRStorageBatchOperations_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRStorageBatchOperationsQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: storagebatchoperations.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeStorageBatchOperationsCloudPlatform
 */
@interface GTLRStorageBatchOperationsQuery_ProjectsLocationsOperationsList : GTLRStorageBatchOperationsQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRStorageBatchOperations_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRStorageBatchOperationsQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
