// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Storage Batch Operations API (storagebatchoperations/v1)
// Documentation:
//   https://cloud.google.com/storage/docs/batch-operations/overview

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRStorageBatchOperations_Bucket;
@class GTLRStorageBatchOperations_BucketList;
@class GTLRStorageBatchOperations_Counters;
@class GTLRStorageBatchOperations_DeleteObject;
@class GTLRStorageBatchOperations_ErrorLogEntry;
@class GTLRStorageBatchOperations_ErrorSummary;
@class GTLRStorageBatchOperations_Job;
@class GTLRStorageBatchOperations_Location;
@class GTLRStorageBatchOperations_Location_Labels;
@class GTLRStorageBatchOperations_Location_Metadata;
@class GTLRStorageBatchOperations_LoggingConfig;
@class GTLRStorageBatchOperations_Manifest;
@class GTLRStorageBatchOperations_Operation;
@class GTLRStorageBatchOperations_Operation_Metadata;
@class GTLRStorageBatchOperations_Operation_Response;
@class GTLRStorageBatchOperations_PrefixList;
@class GTLRStorageBatchOperations_PutMetadata;
@class GTLRStorageBatchOperations_PutMetadata_CustomMetadata;
@class GTLRStorageBatchOperations_PutObjectHold;
@class GTLRStorageBatchOperations_RewriteObject;
@class GTLRStorageBatchOperations_Status;
@class GTLRStorageBatchOperations_Status_Details_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRStorageBatchOperations_ErrorSummary.errorCode

/**
 *  The operation was aborted, typically due to a concurrency issue such as a
 *  sequencer check failure or transaction abort. See the guidelines above for
 *  deciding between `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`. HTTP
 *  Mapping: 409 Conflict
 *
 *  Value: "ABORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_Aborted;
/**
 *  The entity that a client attempted to create (e.g., file or directory)
 *  already exists. HTTP Mapping: 409 Conflict
 *
 *  Value: "ALREADY_EXISTS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_AlreadyExists;
/**
 *  The operation was cancelled, typically by the caller. HTTP Mapping: 499
 *  Client Closed Request
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_Cancelled;
/**
 *  Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal Server
 *  Error
 *
 *  Value: "DATA_LOSS"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_DataLoss;
/**
 *  The deadline expired before the operation could complete. For operations
 *  that change the state of the system, this error may be returned even if the
 *  operation has completed successfully. For example, a successful response
 *  from a server could have been delayed long enough for the deadline to
 *  expire. HTTP Mapping: 504 Gateway Timeout
 *
 *  Value: "DEADLINE_EXCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_DeadlineExceeded;
/**
 *  The operation was rejected because the system is not in a state required for
 *  the operation's execution. For example, the directory to be deleted is
 *  non-empty, an rmdir operation is applied to a non-directory, etc. Service
 *  implementors can use the following guidelines to decide between
 *  `FAILED_PRECONDITION`, `ABORTED`, and `UNAVAILABLE`: (a) Use `UNAVAILABLE`
 *  if the client can retry just the failing call. (b) Use `ABORTED` if the
 *  client should retry at a higher level. For example, when a client-specified
 *  test-and-set fails, indicating the client should restart a read-modify-write
 *  sequence. (c) Use `FAILED_PRECONDITION` if the client should not retry until
 *  the system state has been explicitly fixed. For example, if an "rmdir" fails
 *  because the directory is non-empty, `FAILED_PRECONDITION` should be returned
 *  since the client should not retry unless the files are deleted from the
 *  directory. HTTP Mapping: 400 Bad Request
 *
 *  Value: "FAILED_PRECONDITION"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_FailedPrecondition;
/**
 *  Internal errors. This means that some invariants expected by the underlying
 *  system have been broken. This error code is reserved for serious errors.
 *  HTTP Mapping: 500 Internal Server Error
 *
 *  Value: "INTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_Internal;
/**
 *  The client specified an invalid argument. Note that this differs from
 *  `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are
 *  problematic regardless of the state of the system (e.g., a malformed file
 *  name). HTTP Mapping: 400 Bad Request
 *
 *  Value: "INVALID_ARGUMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_InvalidArgument;
/**
 *  Some requested entity (e.g., file or directory) was not found. Note to
 *  server developers: if a request is denied for an entire class of users, such
 *  as gradual feature rollout or undocumented allowlist, `NOT_FOUND` may be
 *  used. If a request is denied for some users within a class of users, such as
 *  user-based access control, `PERMISSION_DENIED` must be used. HTTP Mapping:
 *  404 Not Found
 *
 *  Value: "NOT_FOUND"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_NotFound;
/**
 *  Not an error; returned on success. HTTP Mapping: 200 OK
 *
 *  Value: "OK"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_Ok;
/**
 *  The operation was attempted past the valid range. E.g., seeking or reading
 *  past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a problem
 *  that may be fixed if the system state changes. For example, a 32-bit file
 *  system will generate `INVALID_ARGUMENT` if asked to read at an offset that
 *  is not in the range [0,2^32-1], but it will generate `OUT_OF_RANGE` if asked
 *  to read from an offset past the current file size. There is a fair bit of
 *  overlap between `FAILED_PRECONDITION` and `OUT_OF_RANGE`. We recommend using
 *  `OUT_OF_RANGE` (the more specific error) when it applies so that callers who
 *  are iterating through a space can easily look for an `OUT_OF_RANGE` error to
 *  detect when they are done. HTTP Mapping: 400 Bad Request
 *
 *  Value: "OUT_OF_RANGE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_OutOfRange;
/**
 *  The caller does not have permission to execute the specified operation.
 *  `PERMISSION_DENIED` must not be used for rejections caused by exhausting
 *  some resource (use `RESOURCE_EXHAUSTED` instead for those errors).
 *  `PERMISSION_DENIED` must not be used if the caller can not be identified
 *  (use `UNAUTHENTICATED` instead for those errors). This error code does not
 *  imply the request is valid or the requested entity exists or satisfies other
 *  pre-conditions. HTTP Mapping: 403 Forbidden
 *
 *  Value: "PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_PermissionDenied;
/**
 *  Some resource has been exhausted, perhaps a per-user quota, or perhaps the
 *  entire file system is out of space. HTTP Mapping: 429 Too Many Requests
 *
 *  Value: "RESOURCE_EXHAUSTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_ResourceExhausted;
/**
 *  The request does not have valid authentication credentials for the
 *  operation. HTTP Mapping: 401 Unauthorized
 *
 *  Value: "UNAUTHENTICATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_Unauthenticated;
/**
 *  The service is currently unavailable. This is most likely a transient
 *  condition, which can be corrected by retrying with a backoff. Note that it
 *  is not always safe to retry non-idempotent operations. See the guidelines
 *  above for deciding between `FAILED_PRECONDITION`, `ABORTED`, and
 *  `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable
 *
 *  Value: "UNAVAILABLE"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_Unavailable;
/**
 *  The operation is not implemented or is not supported/enabled in this
 *  service. HTTP Mapping: 501 Not Implemented
 *
 *  Value: "UNIMPLEMENTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_Unimplemented;
/**
 *  Unknown error. For example, this error may be returned when a `Status` value
 *  received from another address space belongs to an error space that is not
 *  known in this address space. Also errors raised by APIs that do not return
 *  enough error information may be converted to this error. HTTP Mapping: 500
 *  Internal Server Error
 *
 *  Value: "UNKNOWN"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_Unknown;

// ----------------------------------------------------------------------------
// GTLRStorageBatchOperations_Job.state

/**
 *  Cancelled by the user.
 *
 *  Value: "CANCELED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_Job_State_Canceled;
/**
 *  Terminated due to an unrecoverable failure.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_Job_State_Failed;
/**
 *  In progress.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_Job_State_Running;
/**
 *  Default value. This value is unused.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_Job_State_StateUnspecified;
/**
 *  Completed successfully.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_Job_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRStorageBatchOperations_LoggingConfig.logActions

/**
 *  Illegal value, to avoid allowing a default.
 *
 *  Value: "LOGGABLE_ACTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_LoggingConfig_LogActions_LoggableActionUnspecified;
/**
 *  The corresponding transform action in this job.
 *
 *  Value: "TRANSFORM"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_LoggingConfig_LogActions_Transform;

// ----------------------------------------------------------------------------
// GTLRStorageBatchOperations_LoggingConfig.logActionStates

/**
 *  `LoggableAction` terminated in an error state. `FAILED` actions are logged
 *  as ERROR.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_LoggingConfig_LogActionStates_Failed;
/**
 *  Illegal value, to avoid allowing a default.
 *
 *  Value: "LOGGABLE_ACTION_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_LoggingConfig_LogActionStates_LoggableActionStateUnspecified;
/**
 *  `LoggableAction` completed successfully. `SUCCEEDED` actions are logged as
 *  INFO.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_LoggingConfig_LogActionStates_Succeeded;

// ----------------------------------------------------------------------------
// GTLRStorageBatchOperations_PutObjectHold.eventBasedHold

/**
 *  Default value, Object hold status will not be changed.
 *
 *  Value: "HOLD_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_PutObjectHold_EventBasedHold_HoldStatusUnspecified;
/**
 *  Places the hold.
 *
 *  Value: "SET"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_PutObjectHold_EventBasedHold_Set;
/**
 *  Releases the hold.
 *
 *  Value: "UNSET"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_PutObjectHold_EventBasedHold_Unset;

// ----------------------------------------------------------------------------
// GTLRStorageBatchOperations_PutObjectHold.temporaryHold

/**
 *  Default value, Object hold status will not be changed.
 *
 *  Value: "HOLD_STATUS_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_PutObjectHold_TemporaryHold_HoldStatusUnspecified;
/**
 *  Places the hold.
 *
 *  Value: "SET"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_PutObjectHold_TemporaryHold_Set;
/**
 *  Releases the hold.
 *
 *  Value: "UNSET"
 */
FOUNDATION_EXTERN NSString * const kGTLRStorageBatchOperations_PutObjectHold_TemporaryHold_Unset;

/**
 *  Describes configuration of a single bucket and its objects to be
 *  transformed.
 */
@interface GTLRStorageBatchOperations_Bucket : GTLRObject

/** Required. Bucket name for the objects to be transformed. */
@property(nonatomic, copy, nullable) NSString *bucket;

/** Specifies objects in a manifest file. */
@property(nonatomic, strong, nullable) GTLRStorageBatchOperations_Manifest *manifest;

/** Specifies objects matching a prefix set. */
@property(nonatomic, strong, nullable) GTLRStorageBatchOperations_PrefixList *prefixList;

@end


/**
 *  Describes list of buckets and their objects to be transformed.
 */
@interface GTLRStorageBatchOperations_BucketList : GTLRObject

/**
 *  Required. List of buckets and their objects to be transformed. Currently,
 *  only one bucket configuration is supported. If multiple buckets are
 *  specified, an error will be returned.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageBatchOperations_Bucket *> *buckets;

@end


/**
 *  Message for Job to Cancel
 */
@interface GTLRStorageBatchOperations_CancelJobRequest : GTLRObject

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID in case you need to retry your request. Requests with same
 *  `request_id` will be ignored for at least 60 minutes since the first
 *  request. The request ID must be a valid UUID with the exception that zero
 *  UUID is not supported (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

@end


/**
 *  Message for response to cancel Job.
 */
@interface GTLRStorageBatchOperations_CancelJobResponse : GTLRObject
@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRStorageBatchOperations_CancelOperationRequest : GTLRObject
@end


/**
 *  Describes details about the progress of the job.
 */
@interface GTLRStorageBatchOperations_Counters : GTLRObject

/**
 *  Output only. Number of objects failed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *failedObjectCount;

/**
 *  Output only. Number of objects completed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *succeededObjectCount;

/**
 *  Output only. Number of objects listed.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *totalObjectCount;

@end


/**
 *  Describes options to delete an object.
 */
@interface GTLRStorageBatchOperations_DeleteObject : GTLRObject

/**
 *  Required. Controls deletion behavior when versioning is enabled for the
 *  object's bucket. If true both live and noncurrent objects will be
 *  permanently deleted. Otherwise live objects in versioned buckets will become
 *  noncurrent and objects that were already noncurrent will be skipped. This
 *  setting doesn't have any impact on the Soft Delete feature. All objects
 *  deleted by this service can be be restored for the duration of the Soft
 *  Delete retention duration if enabled. If enabled and the manifest doesn't
 *  specify an object's generation, a GetObjectMetadata call (a Class B
 *  operation) will be made to determine the live object generation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *permanentObjectDeletionEnabled;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRStorageBatchOperations_Empty : GTLRObject
@end


/**
 *  An entry describing an error that has occurred.
 */
@interface GTLRStorageBatchOperations_ErrorLogEntry : GTLRObject

/**
 *  Optional. Output only. At most 5 error log entries are recorded for a given
 *  error code for a job.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *errorDetails;

/** Required. Output only. Object URL. e.g. gs://my_bucket/object.txt */
@property(nonatomic, copy, nullable) NSString *objectUri;

@end


/**
 *  A summary of errors by error code, plus a count and sample error log
 *  entries.
 */
@interface GTLRStorageBatchOperations_ErrorSummary : GTLRObject

/**
 *  Required. The canonical error code.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_Aborted The
 *        operation was aborted, typically due to a concurrency issue such as a
 *        sequencer check failure or transaction abort. See the guidelines above
 *        for deciding between `FAILED_PRECONDITION`, `ABORTED`, and
 *        `UNAVAILABLE`. HTTP Mapping: 409 Conflict (Value: "ABORTED")
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_AlreadyExists
 *        The entity that a client attempted to create (e.g., file or directory)
 *        already exists. HTTP Mapping: 409 Conflict (Value: "ALREADY_EXISTS")
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_Cancelled The
 *        operation was cancelled, typically by the caller. HTTP Mapping: 499
 *        Client Closed Request (Value: "CANCELLED")
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_DataLoss
 *        Unrecoverable data loss or corruption. HTTP Mapping: 500 Internal
 *        Server Error (Value: "DATA_LOSS")
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_DeadlineExceeded
 *        The deadline expired before the operation could complete. For
 *        operations that change the state of the system, this error may be
 *        returned even if the operation has completed successfully. For
 *        example, a successful response from a server could have been delayed
 *        long enough for the deadline to expire. HTTP Mapping: 504 Gateway
 *        Timeout (Value: "DEADLINE_EXCEEDED")
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_FailedPrecondition
 *        The operation was rejected because the system is not in a state
 *        required for the operation's execution. For example, the directory to
 *        be deleted is non-empty, an rmdir operation is applied to a
 *        non-directory, etc. Service implementors can use the following
 *        guidelines to decide between `FAILED_PRECONDITION`, `ABORTED`, and
 *        `UNAVAILABLE`: (a) Use `UNAVAILABLE` if the client can retry just the
 *        failing call. (b) Use `ABORTED` if the client should retry at a higher
 *        level. For example, when a client-specified test-and-set fails,
 *        indicating the client should restart a read-modify-write sequence. (c)
 *        Use `FAILED_PRECONDITION` if the client should not retry until the
 *        system state has been explicitly fixed. For example, if an "rmdir"
 *        fails because the directory is non-empty, `FAILED_PRECONDITION` should
 *        be returned since the client should not retry unless the files are
 *        deleted from the directory. HTTP Mapping: 400 Bad Request (Value:
 *        "FAILED_PRECONDITION")
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_Internal
 *        Internal errors. This means that some invariants expected by the
 *        underlying system have been broken. This error code is reserved for
 *        serious errors. HTTP Mapping: 500 Internal Server Error (Value:
 *        "INTERNAL")
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_InvalidArgument
 *        The client specified an invalid argument. Note that this differs from
 *        `FAILED_PRECONDITION`. `INVALID_ARGUMENT` indicates arguments that are
 *        problematic regardless of the state of the system (e.g., a malformed
 *        file name). HTTP Mapping: 400 Bad Request (Value: "INVALID_ARGUMENT")
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_NotFound Some
 *        requested entity (e.g., file or directory) was not found. Note to
 *        server developers: if a request is denied for an entire class of
 *        users, such as gradual feature rollout or undocumented allowlist,
 *        `NOT_FOUND` may be used. If a request is denied for some users within
 *        a class of users, such as user-based access control,
 *        `PERMISSION_DENIED` must be used. HTTP Mapping: 404 Not Found (Value:
 *        "NOT_FOUND")
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_Ok Not an
 *        error; returned on success. HTTP Mapping: 200 OK (Value: "OK")
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_OutOfRange The
 *        operation was attempted past the valid range. E.g., seeking or reading
 *        past end-of-file. Unlike `INVALID_ARGUMENT`, this error indicates a
 *        problem that may be fixed if the system state changes. For example, a
 *        32-bit file system will generate `INVALID_ARGUMENT` if asked to read
 *        at an offset that is not in the range [0,2^32-1], but it will generate
 *        `OUT_OF_RANGE` if asked to read from an offset past the current file
 *        size. There is a fair bit of overlap between `FAILED_PRECONDITION` and
 *        `OUT_OF_RANGE`. We recommend using `OUT_OF_RANGE` (the more specific
 *        error) when it applies so that callers who are iterating through a
 *        space can easily look for an `OUT_OF_RANGE` error to detect when they
 *        are done. HTTP Mapping: 400 Bad Request (Value: "OUT_OF_RANGE")
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_PermissionDenied
 *        The caller does not have permission to execute the specified
 *        operation. `PERMISSION_DENIED` must not be used for rejections caused
 *        by exhausting some resource (use `RESOURCE_EXHAUSTED` instead for
 *        those errors). `PERMISSION_DENIED` must not be used if the caller can
 *        not be identified (use `UNAUTHENTICATED` instead for those errors).
 *        This error code does not imply the request is valid or the requested
 *        entity exists or satisfies other pre-conditions. HTTP Mapping: 403
 *        Forbidden (Value: "PERMISSION_DENIED")
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_ResourceExhausted
 *        Some resource has been exhausted, perhaps a per-user quota, or perhaps
 *        the entire file system is out of space. HTTP Mapping: 429 Too Many
 *        Requests (Value: "RESOURCE_EXHAUSTED")
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_Unauthenticated
 *        The request does not have valid authentication credentials for the
 *        operation. HTTP Mapping: 401 Unauthorized (Value: "UNAUTHENTICATED")
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_Unavailable The
 *        service is currently unavailable. This is most likely a transient
 *        condition, which can be corrected by retrying with a backoff. Note
 *        that it is not always safe to retry non-idempotent operations. See the
 *        guidelines above for deciding between `FAILED_PRECONDITION`,
 *        `ABORTED`, and `UNAVAILABLE`. HTTP Mapping: 503 Service Unavailable
 *        (Value: "UNAVAILABLE")
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_Unimplemented
 *        The operation is not implemented or is not supported/enabled in this
 *        service. HTTP Mapping: 501 Not Implemented (Value: "UNIMPLEMENTED")
 *    @arg @c kGTLRStorageBatchOperations_ErrorSummary_ErrorCode_Unknown Unknown
 *        error. For example, this error may be returned when a `Status` value
 *        received from another address space belongs to an error space that is
 *        not known in this address space. Also errors raised by APIs that do
 *        not return enough error information may be converted to this error.
 *        HTTP Mapping: 500 Internal Server Error (Value: "UNKNOWN")
 */
@property(nonatomic, copy, nullable) NSString *errorCode;

/**
 *  Required. Number of errors encountered per `error_code`.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *errorCount;

/** Required. Sample error logs. */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageBatchOperations_ErrorLogEntry *> *errorLogEntries;

@end


/**
 *  The Storage Batch Operations Job description.
 */
@interface GTLRStorageBatchOperations_Job : GTLRObject

/** Specifies a list of buckets and their objects to be transformed. */
@property(nonatomic, strong, nullable) GTLRStorageBatchOperations_BucketList *bucketList;

/** Output only. The time that the job was completed. */
@property(nonatomic, strong, nullable) GTLRDateTime *completeTime;

/** Output only. Information about the progress of the job. */
@property(nonatomic, strong, nullable) GTLRStorageBatchOperations_Counters *counters;

/** Output only. The time that the job was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Delete objects. */
@property(nonatomic, strong, nullable) GTLRStorageBatchOperations_DeleteObject *deleteObject;

/**
 *  Optional. A description provided by the user for the job. Its max length is
 *  1024 bytes when Unicode-encoded.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. Summarizes errors encountered with sample error log entries.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageBatchOperations_ErrorSummary *> *errorSummaries;

/** Optional. Logging configuration. */
@property(nonatomic, strong, nullable) GTLRStorageBatchOperations_LoggingConfig *loggingConfig;

/**
 *  Identifier. The resource name of the Job. job_id is unique within the
 *  project, that is either set by the customer or defined by the service.
 *  Format: projects/{project}/locations/global/jobs/{job_id} . For example:
 *  "projects/123456/locations/global/jobs/job01".
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Updates object metadata. Allows updating fixed-key and custom metadata and
 *  fixed-key metadata i.e. Cache-Control, Content-Disposition,
 *  Content-Encoding, Content-Language, Content-Type, Custom-Time.
 */
@property(nonatomic, strong, nullable) GTLRStorageBatchOperations_PutMetadata *putMetadata;

/** Changes object hold status. */
@property(nonatomic, strong, nullable) GTLRStorageBatchOperations_PutObjectHold *putObjectHold;

/** Rewrite the object and updates metadata like KMS key. */
@property(nonatomic, strong, nullable) GTLRStorageBatchOperations_RewriteObject *rewriteObject;

/** Output only. The time that the job was scheduled. */
@property(nonatomic, strong, nullable) GTLRDateTime *scheduleTime;

/**
 *  Output only. State of the job.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageBatchOperations_Job_State_Canceled Cancelled by the
 *        user. (Value: "CANCELED")
 *    @arg @c kGTLRStorageBatchOperations_Job_State_Failed Terminated due to an
 *        unrecoverable failure. (Value: "FAILED")
 *    @arg @c kGTLRStorageBatchOperations_Job_State_Running In progress. (Value:
 *        "RUNNING")
 *    @arg @c kGTLRStorageBatchOperations_Job_State_StateUnspecified Default
 *        value. This value is unused. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRStorageBatchOperations_Job_State_Succeeded Completed
 *        successfully. (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Message for response to listing Jobs
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "jobs" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRStorageBatchOperations_ListJobsResponse : GTLRCollectionObject

/**
 *  A list of storage batch jobs.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageBatchOperations_Job *> *jobs;

/** A token identifying a page of results. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRStorageBatchOperations_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageBatchOperations_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRStorageBatchOperations_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageBatchOperations_Operation *> *operations;

@end


/**
 *  A resource that represents a Google Cloud location.
 */
@interface GTLRStorageBatchOperations_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRStorageBatchOperations_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRStorageBatchOperations_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRStorageBatchOperations_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRStorageBatchOperations_Location_Metadata : GTLRObject
@end


/**
 *  Specifies the Cloud Logging behavior.
 */
@interface GTLRStorageBatchOperations_LoggingConfig : GTLRObject

/** Required. Specifies the actions to be logged. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *logActions;

/**
 *  Required. States in which Action are logged.If empty, no logs are generated.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *logActionStates;

@end


/**
 *  Describes list of objects to be transformed.
 */
@interface GTLRStorageBatchOperations_Manifest : GTLRObject

/**
 *  Required. `manifest_location` must contain the manifest source file that is
 *  a CSV file in a Google Cloud Storage bucket. Each row in the file must
 *  include the object details i.e. BucketId and Name. Generation may optionally
 *  be specified. When it is not specified the live object is acted upon.
 *  `manifest_location` should either be 1) An absolute path to the object in
 *  the format of `gs://bucket_name/path/file_name.csv`. 2) An absolute path
 *  with a single wildcard character in the file name, for example
 *  `gs://bucket_name/path/file_name*.csv`. If manifest location is specified
 *  with a wildcard, objects in all manifest files matching the pattern will be
 *  acted upon.
 */
@property(nonatomic, copy, nullable) NSString *manifestLocation;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRStorageBatchOperations_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRStorageBatchOperations_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRStorageBatchOperations_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRStorageBatchOperations_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRStorageBatchOperations_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRStorageBatchOperations_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRStorageBatchOperations_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Output only. The Job associated with the operation. */
@property(nonatomic, strong, nullable) GTLRStorageBatchOperations_Job *job;

/**
 *  Output only. The unique operation resource name. Format:
 *  projects/{project}/locations/global/operations/{operation}.
 */
@property(nonatomic, copy, nullable) NSString *operation;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have been cancelled successfully have
 *  google.longrunning.Operation.error value with a google.rpc.Status.code of 1,
 *  corresponding to `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

@end


/**
 *  Describes prefixes of objects to be transformed.
 */
@interface GTLRStorageBatchOperations_PrefixList : GTLRObject

/**
 *  Optional. Include prefixes of the objects to be transformed. * Supports full
 *  object name * Supports prefix of the object name * Wildcards are not
 *  supported * Supports empty string for all objects in a bucket.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *includedObjectPrefixes;

@end


/**
 *  Describes options for object metadata update.
 */
@interface GTLRStorageBatchOperations_PutMetadata : GTLRObject

/**
 *  Optional. Updates objects Cache-Control fixed metadata. Unset values will be
 *  ignored. Set empty values to clear the metadata. Additionally, the value for
 *  Custom-Time cannot decrease. Refer to documentation in
 *  https://cloud.google.com/storage/docs/metadata#caching_data.
 */
@property(nonatomic, copy, nullable) NSString *cacheControl;

/**
 *  Optional. Updates objects Content-Disposition fixed metadata. Unset values
 *  will be ignored. Set empty values to clear the metadata. Refer
 *  https://cloud.google.com/storage/docs/metadata#content-disposition for
 *  additional documentation.
 */
@property(nonatomic, copy, nullable) NSString *contentDisposition;

/**
 *  Optional. Updates objects Content-Encoding fixed metadata. Unset values will
 *  be ignored. Set empty values to clear the metadata. Refer to documentation
 *  in https://cloud.google.com/storage/docs/metadata#content-encoding.
 */
@property(nonatomic, copy, nullable) NSString *contentEncoding;

/**
 *  Optional. Updates objects Content-Language fixed metadata. Refer to ISO
 *  639-1 language codes for typical values of this metadata. Max length 100
 *  characters. Unset values will be ignored. Set empty values to clear the
 *  metadata. Refer to documentation in
 *  https://cloud.google.com/storage/docs/metadata#content-language.
 */
@property(nonatomic, copy, nullable) NSString *contentLanguage;

/**
 *  Optional. Updates objects Content-Type fixed metadata. Unset values will be
 *  ignored. Set empty values to clear the metadata. Refer to documentation in
 *  https://cloud.google.com/storage/docs/metadata#content-type
 */
@property(nonatomic, copy, nullable) NSString *contentType;

/**
 *  Optional. Updates objects custom metadata. Adds or sets individual custom
 *  metadata key value pairs on objects. Keys that are set with empty custom
 *  metadata values will have its value cleared. Existing custom metadata not
 *  specified with this flag is not changed. Refer to documentation in
 *  https://cloud.google.com/storage/docs/metadata#custom-metadata
 */
@property(nonatomic, strong, nullable) GTLRStorageBatchOperations_PutMetadata_CustomMetadata *customMetadata;

/**
 *  Optional. Updates objects Custom-Time fixed metadata. Unset values will be
 *  ignored. Set empty values to clear the metadata. Refer to documentation in
 *  https://cloud.google.com/storage/docs/metadata#custom-time.
 */
@property(nonatomic, copy, nullable) NSString *customTime;

@end


/**
 *  Optional. Updates objects custom metadata. Adds or sets individual custom
 *  metadata key value pairs on objects. Keys that are set with empty custom
 *  metadata values will have its value cleared. Existing custom metadata not
 *  specified with this flag is not changed. Refer to documentation in
 *  https://cloud.google.com/storage/docs/metadata#custom-metadata
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRStorageBatchOperations_PutMetadata_CustomMetadata : GTLRObject
@end


/**
 *  Describes options to update object hold.
 */
@interface GTLRStorageBatchOperations_PutObjectHold : GTLRObject

/**
 *  Required. Updates object event based holds state. When object event based
 *  hold is set, object cannot be deleted or replaced. Resets object's time in
 *  the bucket for the purposes of the retention period.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageBatchOperations_PutObjectHold_EventBasedHold_HoldStatusUnspecified
 *        Default value, Object hold status will not be changed. (Value:
 *        "HOLD_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRStorageBatchOperations_PutObjectHold_EventBasedHold_Set
 *        Places the hold. (Value: "SET")
 *    @arg @c kGTLRStorageBatchOperations_PutObjectHold_EventBasedHold_Unset
 *        Releases the hold. (Value: "UNSET")
 */
@property(nonatomic, copy, nullable) NSString *eventBasedHold;

/**
 *  Required. Updates object temporary holds state. When object temporary hold
 *  is set, object cannot be deleted or replaced.
 *
 *  Likely values:
 *    @arg @c kGTLRStorageBatchOperations_PutObjectHold_TemporaryHold_HoldStatusUnspecified
 *        Default value, Object hold status will not be changed. (Value:
 *        "HOLD_STATUS_UNSPECIFIED")
 *    @arg @c kGTLRStorageBatchOperations_PutObjectHold_TemporaryHold_Set Places
 *        the hold. (Value: "SET")
 *    @arg @c kGTLRStorageBatchOperations_PutObjectHold_TemporaryHold_Unset
 *        Releases the hold. (Value: "UNSET")
 */
@property(nonatomic, copy, nullable) NSString *temporaryHold;

@end


/**
 *  Describes options for object rewrite.
 */
@interface GTLRStorageBatchOperations_RewriteObject : GTLRObject

/**
 *  Required. Resource name of the Cloud KMS key that will be used to encrypt
 *  the object. The Cloud KMS key must be located in same location as the
 *  object. Refer to
 *  https://cloud.google.com/storage/docs/encryption/using-customer-managed-keys#add-object-key
 *  for additional documentation. Format:
 *  projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}
 *  For example:
 *  "projects/123456/locations/us-central1/keyRings/my-keyring/cryptoKeys/my-key".
 *  The object will be rewritten and set with the specified KMS key.
 */
@property(nonatomic, copy, nullable) NSString *kmsKey;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRStorageBatchOperations_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRStorageBatchOperations_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRStorageBatchOperations_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRStorageBatchOperations_Status_Details_Item : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
