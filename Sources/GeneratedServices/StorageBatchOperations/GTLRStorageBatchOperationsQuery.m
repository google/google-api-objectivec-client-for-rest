// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Storage Batch Operations API (storagebatchoperations/v1)
// Documentation:
//   https://cloud.google.com/storage/docs/batch-operations/overview

#import <GoogleAPIClientForREST/GTLRStorageBatchOperationsQuery.h>

@implementation GTLRStorageBatchOperationsQuery

@dynamic fields;

@end

@implementation GTLRStorageBatchOperationsQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRStorageBatchOperationsQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRStorageBatchOperations_Location class];
  query.loggingName = @"storagebatchoperations.projects.locations.get";
  return query;
}

@end

@implementation GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRStorageBatchOperations_CancelJobRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRStorageBatchOperations_CancelJobResponse class];
  query.loggingName = @"storagebatchoperations.projects.locations.jobs.cancel";
  return query;
}

@end

@implementation GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsCreate

@dynamic jobId, parent, requestId;

+ (instancetype)queryWithObject:(GTLRStorageBatchOperations_Job *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/jobs";
  GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRStorageBatchOperations_Operation class];
  query.loggingName = @"storagebatchoperations.projects.locations.jobs.create";
  return query;
}

@end

@implementation GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRStorageBatchOperations_Empty class];
  query.loggingName = @"storagebatchoperations.projects.locations.jobs.delete";
  return query;
}

@end

@implementation GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRStorageBatchOperations_Job class];
  query.loggingName = @"storagebatchoperations.projects.locations.jobs.get";
  return query;
}

@end

@implementation GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/jobs";
  GTLRStorageBatchOperationsQuery_ProjectsLocationsJobsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRStorageBatchOperations_ListJobsResponse class];
  query.loggingName = @"storagebatchoperations.projects.locations.jobs.list";
  return query;
}

@end

@implementation GTLRStorageBatchOperationsQuery_ProjectsLocationsList

@dynamic extraLocationTypes, filter, name, pageSize, pageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"extraLocationTypes" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRStorageBatchOperationsQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRStorageBatchOperations_ListLocationsResponse class];
  query.loggingName = @"storagebatchoperations.projects.locations.list";
  return query;
}

@end

@implementation GTLRStorageBatchOperationsQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRStorageBatchOperations_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRStorageBatchOperationsQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRStorageBatchOperations_Empty class];
  query.loggingName = @"storagebatchoperations.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRStorageBatchOperationsQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRStorageBatchOperationsQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRStorageBatchOperations_Empty class];
  query.loggingName = @"storagebatchoperations.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRStorageBatchOperationsQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRStorageBatchOperationsQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRStorageBatchOperations_Operation class];
  query.loggingName = @"storagebatchoperations.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRStorageBatchOperationsQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRStorageBatchOperationsQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRStorageBatchOperations_ListOperationsResponse class];
  query.loggingName = @"storagebatchoperations.projects.locations.operations.list";
  return query;
}

@end
