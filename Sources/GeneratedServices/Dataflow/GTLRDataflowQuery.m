// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Dataflow API (dataflow/v1b3)
// Description:
//   Manages Google Cloud Dataflow projects on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/dataflow

#import <GoogleAPIClientForREST/GTLRDataflowQuery.h>

// ----------------------------------------------------------------------------
// Constants

// filter
NSString * const kGTLRDataflowFilterActive     = @"ACTIVE";
NSString * const kGTLRDataflowFilterAll        = @"ALL";
NSString * const kGTLRDataflowFilterTerminated = @"TERMINATED";
NSString * const kGTLRDataflowFilterUnknown    = @"UNKNOWN";

// minimumImportance
NSString * const kGTLRDataflowMinimumImportanceJobMessageBasic = @"JOB_MESSAGE_BASIC";
NSString * const kGTLRDataflowMinimumImportanceJobMessageDebug = @"JOB_MESSAGE_DEBUG";
NSString * const kGTLRDataflowMinimumImportanceJobMessageDetailed = @"JOB_MESSAGE_DETAILED";
NSString * const kGTLRDataflowMinimumImportanceJobMessageError = @"JOB_MESSAGE_ERROR";
NSString * const kGTLRDataflowMinimumImportanceJobMessageImportanceUnknown = @"JOB_MESSAGE_IMPORTANCE_UNKNOWN";
NSString * const kGTLRDataflowMinimumImportanceJobMessageWarning = @"JOB_MESSAGE_WARNING";

// view
NSString * const kGTLRDataflowViewJobViewAll         = @"JOB_VIEW_ALL";
NSString * const kGTLRDataflowViewJobViewDescription = @"JOB_VIEW_DESCRIPTION";
NSString * const kGTLRDataflowViewJobViewSummary     = @"JOB_VIEW_SUMMARY";
NSString * const kGTLRDataflowViewJobViewUnknown     = @"JOB_VIEW_UNKNOWN";
NSString * const kGTLRDataflowViewMetadataOnly       = @"METADATA_ONLY";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRDataflowQuery

@dynamic fields;

@end

@implementation GTLRDataflowQuery_ProjectsDeleteSnapshots

@dynamic location, projectId, snapshotId;

+ (instancetype)queryWithProjectId:(NSString *)projectId {
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/snapshots";
  GTLRDataflowQuery_ProjectsDeleteSnapshots *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRDataflow_DeleteSnapshotResponse class];
  query.loggingName = @"dataflow.projects.deleteSnapshots";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsAggregated

@dynamic filter, location, name, pageSize, pageToken, projectId, view;

+ (instancetype)queryWithProjectId:(NSString *)projectId {
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs:aggregated";
  GTLRDataflowQuery_ProjectsJobsAggregated *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRDataflow_ListJobsResponse class];
  query.loggingName = @"dataflow.projects.jobs.aggregated";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsCreate

@dynamic location, projectId, replaceJobId, view;

+ (instancetype)queryWithObject:(GTLRDataflow_Job *)object
                      projectId:(NSString *)projectId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs";
  GTLRDataflowQuery_ProjectsJobsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRDataflow_Job class];
  query.loggingName = @"dataflow.projects.jobs.create";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsDebugGetConfig

@dynamic jobId, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_GetDebugConfigRequest *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}/debug/getConfig";
  GTLRDataflowQuery_ProjectsJobsDebugGetConfig *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_GetDebugConfigResponse class];
  query.loggingName = @"dataflow.projects.jobs.debug.getConfig";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsDebugSendCapture

@dynamic jobId, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_SendDebugCaptureRequest *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}/debug/sendCapture";
  GTLRDataflowQuery_ProjectsJobsDebugSendCapture *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_SendDebugCaptureResponse class];
  query.loggingName = @"dataflow.projects.jobs.debug.sendCapture";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsGet

@dynamic jobId, location, projectId, view;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                             jobId:(NSString *)jobId {
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}";
  GTLRDataflowQuery_ProjectsJobsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_Job class];
  query.loggingName = @"dataflow.projects.jobs.get";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsGetMetrics

@dynamic jobId, location, projectId, startTime;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                             jobId:(NSString *)jobId {
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}/metrics";
  GTLRDataflowQuery_ProjectsJobsGetMetrics *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_JobMetrics class];
  query.loggingName = @"dataflow.projects.jobs.getMetrics";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsList

@dynamic filter, location, name, pageSize, pageToken, projectId, view;

+ (instancetype)queryWithProjectId:(NSString *)projectId {
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs";
  GTLRDataflowQuery_ProjectsJobsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRDataflow_ListJobsResponse class];
  query.loggingName = @"dataflow.projects.jobs.list";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsMessagesList

@dynamic endTime, jobId, location, minimumImportance, pageSize, pageToken,
         projectId, startTime;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                             jobId:(NSString *)jobId {
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}/messages";
  GTLRDataflowQuery_ProjectsJobsMessagesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_ListJobMessagesResponse class];
  query.loggingName = @"dataflow.projects.jobs.messages.list";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsSnapshot

@dynamic jobId, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_SnapshotJobRequest *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}:snapshot";
  GTLRDataflowQuery_ProjectsJobsSnapshot *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_Snapshot class];
  query.loggingName = @"dataflow.projects.jobs.snapshot";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsUpdate

@dynamic jobId, location, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_Job *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}";
  GTLRDataflowQuery_ProjectsJobsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_Job class];
  query.loggingName = @"dataflow.projects.jobs.update";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsWorkItemsLease

@dynamic jobId, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_LeaseWorkItemRequest *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}/workItems:lease";
  GTLRDataflowQuery_ProjectsJobsWorkItemsLease *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_LeaseWorkItemResponse class];
  query.loggingName = @"dataflow.projects.jobs.workItems.lease";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsJobsWorkItemsReportStatus

@dynamic jobId, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_ReportWorkItemStatusRequest *)object
                      projectId:(NSString *)projectId
                          jobId:(NSString *)jobId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/jobs/{jobId}/workItems:reportStatus";
  GTLRDataflowQuery_ProjectsJobsWorkItemsReportStatus *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_ReportWorkItemStatusResponse class];
  query.loggingName = @"dataflow.projects.jobs.workItems.reportStatus";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsFlexTemplatesLaunch

@dynamic location, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_LaunchFlexTemplateRequest *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/flexTemplates:launch";
  GTLRDataflowQuery_ProjectsLocationsFlexTemplatesLaunch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.location = location;
  query.expectedObjectClass = [GTLRDataflow_LaunchFlexTemplateResponse class];
  query.loggingName = @"dataflow.projects.locations.flexTemplates.launch";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsJobsCreate

@dynamic location, projectId, replaceJobId, view;

+ (instancetype)queryWithObject:(GTLRDataflow_Job *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/jobs";
  GTLRDataflowQuery_ProjectsLocationsJobsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.location = location;
  query.expectedObjectClass = [GTLRDataflow_Job class];
  query.loggingName = @"dataflow.projects.locations.jobs.create";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsJobsDebugGetConfig

@dynamic jobId, location, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_GetDebugConfigRequest *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location
                          jobId:(NSString *)jobId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/getConfig";
  GTLRDataflowQuery_ProjectsLocationsJobsDebugGetConfig *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.location = location;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_GetDebugConfigResponse class];
  query.loggingName = @"dataflow.projects.locations.jobs.debug.getConfig";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsJobsDebugSendCapture

@dynamic jobId, location, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_SendDebugCaptureRequest *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location
                          jobId:(NSString *)jobId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/debug/sendCapture";
  GTLRDataflowQuery_ProjectsLocationsJobsDebugSendCapture *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.location = location;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_SendDebugCaptureResponse class];
  query.loggingName = @"dataflow.projects.locations.jobs.debug.sendCapture";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsJobsGet

@dynamic jobId, location, projectId, view;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location
                             jobId:(NSString *)jobId {
  NSArray *pathParams = @[
    @"jobId", @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}";
  GTLRDataflowQuery_ProjectsLocationsJobsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.location = location;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_Job class];
  query.loggingName = @"dataflow.projects.locations.jobs.get";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsJobsGetExecutionDetails

@dynamic jobId, location, pageSize, pageToken, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location
                             jobId:(NSString *)jobId {
  NSArray *pathParams = @[
    @"jobId", @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/executionDetails";
  GTLRDataflowQuery_ProjectsLocationsJobsGetExecutionDetails *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.location = location;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_JobExecutionDetails class];
  query.loggingName = @"dataflow.projects.locations.jobs.getExecutionDetails";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsJobsGetMetrics

@dynamic jobId, location, projectId, startTime;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location
                             jobId:(NSString *)jobId {
  NSArray *pathParams = @[
    @"jobId", @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/metrics";
  GTLRDataflowQuery_ProjectsLocationsJobsGetMetrics *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.location = location;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_JobMetrics class];
  query.loggingName = @"dataflow.projects.locations.jobs.getMetrics";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsJobsList

@dynamic filter, location, name, pageSize, pageToken, projectId, view;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location {
  NSArray *pathParams = @[
    @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/jobs";
  GTLRDataflowQuery_ProjectsLocationsJobsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.location = location;
  query.expectedObjectClass = [GTLRDataflow_ListJobsResponse class];
  query.loggingName = @"dataflow.projects.locations.jobs.list";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsJobsMessagesList

@dynamic endTime, jobId, location, minimumImportance, pageSize, pageToken,
         projectId, startTime;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location
                             jobId:(NSString *)jobId {
  NSArray *pathParams = @[
    @"jobId", @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/messages";
  GTLRDataflowQuery_ProjectsLocationsJobsMessagesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.location = location;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_ListJobMessagesResponse class];
  query.loggingName = @"dataflow.projects.locations.jobs.messages.list";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsJobsSnapshot

@dynamic jobId, location, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_SnapshotJobRequest *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location
                          jobId:(NSString *)jobId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}:snapshot";
  GTLRDataflowQuery_ProjectsLocationsJobsSnapshot *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.location = location;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_Snapshot class];
  query.loggingName = @"dataflow.projects.locations.jobs.snapshot";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsJobsSnapshotsList

@dynamic jobId, location, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location
                             jobId:(NSString *)jobId {
  NSArray *pathParams = @[
    @"jobId", @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/snapshots";
  GTLRDataflowQuery_ProjectsLocationsJobsSnapshotsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.location = location;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_ListSnapshotsResponse class];
  query.loggingName = @"dataflow.projects.locations.jobs.snapshots.list";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsJobsStagesGetExecutionDetails

@dynamic endTime, jobId, location, pageSize, pageToken, projectId, stageId,
         startTime;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location
                             jobId:(NSString *)jobId
                           stageId:(NSString *)stageId {
  NSArray *pathParams = @[
    @"jobId", @"location", @"projectId", @"stageId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/stages/{stageId}/executionDetails";
  GTLRDataflowQuery_ProjectsLocationsJobsStagesGetExecutionDetails *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.location = location;
  query.jobId = jobId;
  query.stageId = stageId;
  query.expectedObjectClass = [GTLRDataflow_StageExecutionDetails class];
  query.loggingName = @"dataflow.projects.locations.jobs.stages.getExecutionDetails";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsJobsUpdate

@dynamic jobId, location, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_Job *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location
                          jobId:(NSString *)jobId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}";
  GTLRDataflowQuery_ProjectsLocationsJobsUpdate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PUT"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.location = location;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_Job class];
  query.loggingName = @"dataflow.projects.locations.jobs.update";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsJobsWorkItemsLease

@dynamic jobId, location, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_LeaseWorkItemRequest *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location
                          jobId:(NSString *)jobId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:lease";
  GTLRDataflowQuery_ProjectsLocationsJobsWorkItemsLease *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.location = location;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_LeaseWorkItemResponse class];
  query.loggingName = @"dataflow.projects.locations.jobs.workItems.lease";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsJobsWorkItemsReportStatus

@dynamic jobId, location, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_ReportWorkItemStatusRequest *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location
                          jobId:(NSString *)jobId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"jobId", @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/jobs/{jobId}/workItems:reportStatus";
  GTLRDataflowQuery_ProjectsLocationsJobsWorkItemsReportStatus *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.location = location;
  query.jobId = jobId;
  query.expectedObjectClass = [GTLRDataflow_ReportWorkItemStatusResponse class];
  query.loggingName = @"dataflow.projects.locations.jobs.workItems.reportStatus";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsSnapshotsDelete

@dynamic location, projectId, snapshotId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location
                        snapshotId:(NSString *)snapshotId {
  NSArray *pathParams = @[
    @"location", @"projectId", @"snapshotId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}";
  GTLRDataflowQuery_ProjectsLocationsSnapshotsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.location = location;
  query.snapshotId = snapshotId;
  query.expectedObjectClass = [GTLRDataflow_DeleteSnapshotResponse class];
  query.loggingName = @"dataflow.projects.locations.snapshots.delete";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsSnapshotsGet

@dynamic location, projectId, snapshotId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location
                        snapshotId:(NSString *)snapshotId {
  NSArray *pathParams = @[
    @"location", @"projectId", @"snapshotId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/snapshots/{snapshotId}";
  GTLRDataflowQuery_ProjectsLocationsSnapshotsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.location = location;
  query.snapshotId = snapshotId;
  query.expectedObjectClass = [GTLRDataflow_Snapshot class];
  query.loggingName = @"dataflow.projects.locations.snapshots.get";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsSnapshotsList

@dynamic jobId, location, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location {
  NSArray *pathParams = @[
    @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/snapshots";
  GTLRDataflowQuery_ProjectsLocationsSnapshotsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.location = location;
  query.expectedObjectClass = [GTLRDataflow_ListSnapshotsResponse class];
  query.loggingName = @"dataflow.projects.locations.snapshots.list";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsSqlValidate

@dynamic location, projectId, query;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location {
  NSArray *pathParams = @[
    @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/sql:validate";
  GTLRDataflowQuery_ProjectsLocationsSqlValidate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.location = location;
  query.expectedObjectClass = [GTLRDataflow_ValidateResponse class];
  query.loggingName = @"dataflow.projects.locations.sql.validate";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsTemplatesCreate

@dynamic location, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_CreateJobFromTemplateRequest *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/templates";
  GTLRDataflowQuery_ProjectsLocationsTemplatesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.location = location;
  query.expectedObjectClass = [GTLRDataflow_Job class];
  query.loggingName = @"dataflow.projects.locations.templates.create";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsTemplatesGet

@dynamic gcsPath, location, projectId, view;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                          location:(NSString *)location {
  NSArray *pathParams = @[
    @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/templates:get";
  GTLRDataflowQuery_ProjectsLocationsTemplatesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.location = location;
  query.expectedObjectClass = [GTLRDataflow_GetTemplateResponse class];
  query.loggingName = @"dataflow.projects.locations.templates.get";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsTemplatesLaunch

@dynamic dynamicTemplateGcsPath, dynamicTemplateStagingLocation, gcsPath,
         location, projectId, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"dynamicTemplateGcsPath" : @"dynamicTemplate.gcsPath",
    @"dynamicTemplateStagingLocation" : @"dynamicTemplate.stagingLocation"
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRDataflow_LaunchTemplateParameters *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/templates:launch";
  GTLRDataflowQuery_ProjectsLocationsTemplatesLaunch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.location = location;
  query.expectedObjectClass = [GTLRDataflow_LaunchTemplateResponse class];
  query.loggingName = @"dataflow.projects.locations.templates.launch";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsLocationsWorkerMessages

@dynamic location, projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_SendWorkerMessagesRequest *)object
                      projectId:(NSString *)projectId
                       location:(NSString *)location {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[
    @"location", @"projectId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/locations/{location}/WorkerMessages";
  GTLRDataflowQuery_ProjectsLocationsWorkerMessages *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.location = location;
  query.expectedObjectClass = [GTLRDataflow_SendWorkerMessagesResponse class];
  query.loggingName = @"dataflow.projects.locations.workerMessages";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsSnapshotsGet

@dynamic location, projectId, snapshotId;

+ (instancetype)queryWithProjectId:(NSString *)projectId
                        snapshotId:(NSString *)snapshotId {
  NSArray *pathParams = @[
    @"projectId", @"snapshotId"
  ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/snapshots/{snapshotId}";
  GTLRDataflowQuery_ProjectsSnapshotsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.snapshotId = snapshotId;
  query.expectedObjectClass = [GTLRDataflow_Snapshot class];
  query.loggingName = @"dataflow.projects.snapshots.get";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsSnapshotsList

@dynamic jobId, location, projectId;

+ (instancetype)queryWithProjectId:(NSString *)projectId {
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/snapshots";
  GTLRDataflowQuery_ProjectsSnapshotsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRDataflow_ListSnapshotsResponse class];
  query.loggingName = @"dataflow.projects.snapshots.list";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsTemplatesCreate

@dynamic projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_CreateJobFromTemplateRequest *)object
                      projectId:(NSString *)projectId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/templates";
  GTLRDataflowQuery_ProjectsTemplatesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRDataflow_Job class];
  query.loggingName = @"dataflow.projects.templates.create";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsTemplatesGet

@dynamic gcsPath, location, projectId, view;

+ (instancetype)queryWithProjectId:(NSString *)projectId {
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/templates:get";
  GTLRDataflowQuery_ProjectsTemplatesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRDataflow_GetTemplateResponse class];
  query.loggingName = @"dataflow.projects.templates.get";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsTemplatesLaunch

@dynamic dynamicTemplateGcsPath, dynamicTemplateStagingLocation, gcsPath,
         location, projectId, validateOnly;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"dynamicTemplateGcsPath" : @"dynamicTemplate.gcsPath",
    @"dynamicTemplateStagingLocation" : @"dynamicTemplate.stagingLocation"
  };
  return map;
}

+ (instancetype)queryWithObject:(GTLRDataflow_LaunchTemplateParameters *)object
                      projectId:(NSString *)projectId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/templates:launch";
  GTLRDataflowQuery_ProjectsTemplatesLaunch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRDataflow_LaunchTemplateResponse class];
  query.loggingName = @"dataflow.projects.templates.launch";
  return query;
}

@end

@implementation GTLRDataflowQuery_ProjectsWorkerMessages

@dynamic projectId;

+ (instancetype)queryWithObject:(GTLRDataflow_SendWorkerMessagesRequest *)object
                      projectId:(NSString *)projectId {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"projectId" ];
  NSString *pathURITemplate = @"v1b3/projects/{projectId}/WorkerMessages";
  GTLRDataflowQuery_ProjectsWorkerMessages *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.projectId = projectId;
  query.expectedObjectClass = [GTLRDataflow_SendWorkerMessagesResponse class];
  query.loggingName = @"dataflow.projects.workerMessages";
  return query;
}

@end
