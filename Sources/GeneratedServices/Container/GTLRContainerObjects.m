// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Kubernetes Engine API (container/v1)
// Description:
//   Builds and manages container-based applications, powered by the open source
//   Kubernetes technology.
// Documentation:
//   https://cloud.google.com/container-engine/

#import <GoogleAPIClientForREST/GTLRContainerObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRContainer_BinaryAuthorization.evaluationMode
NSString * const kGTLRContainer_BinaryAuthorization_EvaluationMode_Disabled = @"DISABLED";
NSString * const kGTLRContainer_BinaryAuthorization_EvaluationMode_EvaluationModeUnspecified = @"EVALUATION_MODE_UNSPECIFIED";
NSString * const kGTLRContainer_BinaryAuthorization_EvaluationMode_ProjectSingletonPolicyEnforce = @"PROJECT_SINGLETON_POLICY_ENFORCE";

// GTLRContainer_BlueGreenInfo.phase
NSString * const kGTLRContainer_BlueGreenInfo_Phase_CordoningBluePool = @"CORDONING_BLUE_POOL";
NSString * const kGTLRContainer_BlueGreenInfo_Phase_CreatingGreenPool = @"CREATING_GREEN_POOL";
NSString * const kGTLRContainer_BlueGreenInfo_Phase_DeletingBluePool = @"DELETING_BLUE_POOL";
NSString * const kGTLRContainer_BlueGreenInfo_Phase_DrainingBluePool = @"DRAINING_BLUE_POOL";
NSString * const kGTLRContainer_BlueGreenInfo_Phase_NodePoolSoaking = @"NODE_POOL_SOAKING";
NSString * const kGTLRContainer_BlueGreenInfo_Phase_PhaseUnspecified = @"PHASE_UNSPECIFIED";
NSString * const kGTLRContainer_BlueGreenInfo_Phase_RollbackStarted = @"ROLLBACK_STARTED";
NSString * const kGTLRContainer_BlueGreenInfo_Phase_UpdateStarted = @"UPDATE_STARTED";

// GTLRContainer_CloudRunConfig.loadBalancerType
NSString * const kGTLRContainer_CloudRunConfig_LoadBalancerType_LoadBalancerTypeExternal = @"LOAD_BALANCER_TYPE_EXTERNAL";
NSString * const kGTLRContainer_CloudRunConfig_LoadBalancerType_LoadBalancerTypeInternal = @"LOAD_BALANCER_TYPE_INTERNAL";
NSString * const kGTLRContainer_CloudRunConfig_LoadBalancerType_LoadBalancerTypeUnspecified = @"LOAD_BALANCER_TYPE_UNSPECIFIED";

// GTLRContainer_Cluster.status
NSString * const kGTLRContainer_Cluster_Status_Degraded        = @"DEGRADED";
NSString * const kGTLRContainer_Cluster_Status_Error           = @"ERROR";
NSString * const kGTLRContainer_Cluster_Status_Provisioning    = @"PROVISIONING";
NSString * const kGTLRContainer_Cluster_Status_Reconciling     = @"RECONCILING";
NSString * const kGTLRContainer_Cluster_Status_Running         = @"RUNNING";
NSString * const kGTLRContainer_Cluster_Status_StatusUnspecified = @"STATUS_UNSPECIFIED";
NSString * const kGTLRContainer_Cluster_Status_Stopping        = @"STOPPING";

// GTLRContainer_ClusterAutoscaling.autoscalingProfile
NSString * const kGTLRContainer_ClusterAutoscaling_AutoscalingProfile_Balanced = @"BALANCED";
NSString * const kGTLRContainer_ClusterAutoscaling_AutoscalingProfile_OptimizeUtilization = @"OPTIMIZE_UTILIZATION";
NSString * const kGTLRContainer_ClusterAutoscaling_AutoscalingProfile_ProfileUnspecified = @"PROFILE_UNSPECIFIED";

// GTLRContainer_ClusterUpdate.desiredDatapathProvider
NSString * const kGTLRContainer_ClusterUpdate_DesiredDatapathProvider_AdvancedDatapath = @"ADVANCED_DATAPATH";
NSString * const kGTLRContainer_ClusterUpdate_DesiredDatapathProvider_DatapathProviderUnspecified = @"DATAPATH_PROVIDER_UNSPECIFIED";
NSString * const kGTLRContainer_ClusterUpdate_DesiredDatapathProvider_LegacyDatapath = @"LEGACY_DATAPATH";

// GTLRContainer_ClusterUpdate.desiredPrivateIpv6GoogleAccess
NSString * const kGTLRContainer_ClusterUpdate_DesiredPrivateIpv6GoogleAccess_PrivateIpv6GoogleAccessBidirectional = @"PRIVATE_IPV6_GOOGLE_ACCESS_BIDIRECTIONAL";
NSString * const kGTLRContainer_ClusterUpdate_DesiredPrivateIpv6GoogleAccess_PrivateIpv6GoogleAccessDisabled = @"PRIVATE_IPV6_GOOGLE_ACCESS_DISABLED";
NSString * const kGTLRContainer_ClusterUpdate_DesiredPrivateIpv6GoogleAccess_PrivateIpv6GoogleAccessToGoogle = @"PRIVATE_IPV6_GOOGLE_ACCESS_TO_GOOGLE";
NSString * const kGTLRContainer_ClusterUpdate_DesiredPrivateIpv6GoogleAccess_PrivateIpv6GoogleAccessUnspecified = @"PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED";

// GTLRContainer_DatabaseEncryption.state
NSString * const kGTLRContainer_DatabaseEncryption_State_Decrypted = @"DECRYPTED";
NSString * const kGTLRContainer_DatabaseEncryption_State_Encrypted = @"ENCRYPTED";
NSString * const kGTLRContainer_DatabaseEncryption_State_Unknown = @"UNKNOWN";

// GTLRContainer_DNSConfig.clusterDns
NSString * const kGTLRContainer_DNSConfig_ClusterDns_CloudDns  = @"CLOUD_DNS";
NSString * const kGTLRContainer_DNSConfig_ClusterDns_PlatformDefault = @"PLATFORM_DEFAULT";
NSString * const kGTLRContainer_DNSConfig_ClusterDns_ProviderUnspecified = @"PROVIDER_UNSPECIFIED";

// GTLRContainer_DNSConfig.clusterDnsScope
NSString * const kGTLRContainer_DNSConfig_ClusterDnsScope_DnsScopeUnspecified = @"DNS_SCOPE_UNSPECIFIED";
NSString * const kGTLRContainer_DNSConfig_ClusterDnsScope_VpcScope = @"VPC_SCOPE";

// GTLRContainer_Filter.eventType
NSString * const kGTLRContainer_Filter_EventType_EventTypeUnspecified = @"EVENT_TYPE_UNSPECIFIED";
NSString * const kGTLRContainer_Filter_EventType_SecurityBulletinEvent = @"SECURITY_BULLETIN_EVENT";
NSString * const kGTLRContainer_Filter_EventType_UpgradeAvailableEvent = @"UPGRADE_AVAILABLE_EVENT";
NSString * const kGTLRContainer_Filter_EventType_UpgradeEvent  = @"UPGRADE_EVENT";

// GTLRContainer_GatewayAPIConfig.channel
NSString * const kGTLRContainer_GatewayAPIConfig_Channel_ChannelDisabled = @"CHANNEL_DISABLED";
NSString * const kGTLRContainer_GatewayAPIConfig_Channel_ChannelExperimental = @"CHANNEL_EXPERIMENTAL";
NSString * const kGTLRContainer_GatewayAPIConfig_Channel_ChannelStandard = @"CHANNEL_STANDARD";
NSString * const kGTLRContainer_GatewayAPIConfig_Channel_ChannelUnspecified = @"CHANNEL_UNSPECIFIED";

// GTLRContainer_GPUSharingConfig.gpuSharingStrategy
NSString * const kGTLRContainer_GPUSharingConfig_GpuSharingStrategy_GpuSharingStrategyUnspecified = @"GPU_SHARING_STRATEGY_UNSPECIFIED";
NSString * const kGTLRContainer_GPUSharingConfig_GpuSharingStrategy_TimeSharing = @"TIME_SHARING";

// GTLRContainer_IPAllocationPolicy.ipv6AccessType
NSString * const kGTLRContainer_IPAllocationPolicy_Ipv6AccessType_External = @"EXTERNAL";
NSString * const kGTLRContainer_IPAllocationPolicy_Ipv6AccessType_Internal = @"INTERNAL";
NSString * const kGTLRContainer_IPAllocationPolicy_Ipv6AccessType_Ipv6AccessTypeUnspecified = @"IPV6_ACCESS_TYPE_UNSPECIFIED";

// GTLRContainer_IPAllocationPolicy.stackType
NSString * const kGTLRContainer_IPAllocationPolicy_StackType_Ipv4 = @"IPV4";
NSString * const kGTLRContainer_IPAllocationPolicy_StackType_Ipv4Ipv6 = @"IPV4_IPV6";
NSString * const kGTLRContainer_IPAllocationPolicy_StackType_StackTypeUnspecified = @"STACK_TYPE_UNSPECIFIED";

// GTLRContainer_LinuxNodeConfig.cgroupMode
NSString * const kGTLRContainer_LinuxNodeConfig_CgroupMode_CgroupModeUnspecified = @"CGROUP_MODE_UNSPECIFIED";
NSString * const kGTLRContainer_LinuxNodeConfig_CgroupMode_CgroupModeV1 = @"CGROUP_MODE_V1";
NSString * const kGTLRContainer_LinuxNodeConfig_CgroupMode_CgroupModeV2 = @"CGROUP_MODE_V2";

// GTLRContainer_LoggingComponentConfig.enableComponents
NSString * const kGTLRContainer_LoggingComponentConfig_EnableComponents_Apiserver = @"APISERVER";
NSString * const kGTLRContainer_LoggingComponentConfig_EnableComponents_ComponentUnspecified = @"COMPONENT_UNSPECIFIED";
NSString * const kGTLRContainer_LoggingComponentConfig_EnableComponents_ControllerManager = @"CONTROLLER_MANAGER";
NSString * const kGTLRContainer_LoggingComponentConfig_EnableComponents_Scheduler = @"SCHEDULER";
NSString * const kGTLRContainer_LoggingComponentConfig_EnableComponents_SystemComponents = @"SYSTEM_COMPONENTS";
NSString * const kGTLRContainer_LoggingComponentConfig_EnableComponents_Workloads = @"WORKLOADS";

// GTLRContainer_LoggingVariantConfig.variant
NSString * const kGTLRContainer_LoggingVariantConfig_Variant_Default = @"DEFAULT";
NSString * const kGTLRContainer_LoggingVariantConfig_Variant_MaxThroughput = @"MAX_THROUGHPUT";
NSString * const kGTLRContainer_LoggingVariantConfig_Variant_VariantUnspecified = @"VARIANT_UNSPECIFIED";

// GTLRContainer_MaintenanceExclusionOptions.scope
NSString * const kGTLRContainer_MaintenanceExclusionOptions_Scope_NoMinorOrNodeUpgrades = @"NO_MINOR_OR_NODE_UPGRADES";
NSString * const kGTLRContainer_MaintenanceExclusionOptions_Scope_NoMinorUpgrades = @"NO_MINOR_UPGRADES";
NSString * const kGTLRContainer_MaintenanceExclusionOptions_Scope_NoUpgrades = @"NO_UPGRADES";

// GTLRContainer_MonitoringComponentConfig.enableComponents
NSString * const kGTLRContainer_MonitoringComponentConfig_EnableComponents_Apiserver = @"APISERVER";
NSString * const kGTLRContainer_MonitoringComponentConfig_EnableComponents_ComponentUnspecified = @"COMPONENT_UNSPECIFIED";
NSString * const kGTLRContainer_MonitoringComponentConfig_EnableComponents_ControllerManager = @"CONTROLLER_MANAGER";
NSString * const kGTLRContainer_MonitoringComponentConfig_EnableComponents_Scheduler = @"SCHEDULER";
NSString * const kGTLRContainer_MonitoringComponentConfig_EnableComponents_SystemComponents = @"SYSTEM_COMPONENTS";

// GTLRContainer_NetworkConfig.datapathProvider
NSString * const kGTLRContainer_NetworkConfig_DatapathProvider_AdvancedDatapath = @"ADVANCED_DATAPATH";
NSString * const kGTLRContainer_NetworkConfig_DatapathProvider_DatapathProviderUnspecified = @"DATAPATH_PROVIDER_UNSPECIFIED";
NSString * const kGTLRContainer_NetworkConfig_DatapathProvider_LegacyDatapath = @"LEGACY_DATAPATH";

// GTLRContainer_NetworkConfig.privateIpv6GoogleAccess
NSString * const kGTLRContainer_NetworkConfig_PrivateIpv6GoogleAccess_PrivateIpv6GoogleAccessBidirectional = @"PRIVATE_IPV6_GOOGLE_ACCESS_BIDIRECTIONAL";
NSString * const kGTLRContainer_NetworkConfig_PrivateIpv6GoogleAccess_PrivateIpv6GoogleAccessDisabled = @"PRIVATE_IPV6_GOOGLE_ACCESS_DISABLED";
NSString * const kGTLRContainer_NetworkConfig_PrivateIpv6GoogleAccess_PrivateIpv6GoogleAccessToGoogle = @"PRIVATE_IPV6_GOOGLE_ACCESS_TO_GOOGLE";
NSString * const kGTLRContainer_NetworkConfig_PrivateIpv6GoogleAccess_PrivateIpv6GoogleAccessUnspecified = @"PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED";

// GTLRContainer_NetworkPerformanceConfig.totalEgressBandwidthTier
NSString * const kGTLRContainer_NetworkPerformanceConfig_TotalEgressBandwidthTier_Tier1 = @"TIER_1";
NSString * const kGTLRContainer_NetworkPerformanceConfig_TotalEgressBandwidthTier_TierUnspecified = @"TIER_UNSPECIFIED";

// GTLRContainer_NetworkPolicy.provider
NSString * const kGTLRContainer_NetworkPolicy_Provider_Calico  = @"CALICO";
NSString * const kGTLRContainer_NetworkPolicy_Provider_ProviderUnspecified = @"PROVIDER_UNSPECIFIED";

// GTLRContainer_NodePool.status
NSString * const kGTLRContainer_NodePool_Status_Error          = @"ERROR";
NSString * const kGTLRContainer_NodePool_Status_Provisioning   = @"PROVISIONING";
NSString * const kGTLRContainer_NodePool_Status_Reconciling    = @"RECONCILING";
NSString * const kGTLRContainer_NodePool_Status_Running        = @"RUNNING";
NSString * const kGTLRContainer_NodePool_Status_RunningWithError = @"RUNNING_WITH_ERROR";
NSString * const kGTLRContainer_NodePool_Status_StatusUnspecified = @"STATUS_UNSPECIFIED";
NSString * const kGTLRContainer_NodePool_Status_Stopping       = @"STOPPING";

// GTLRContainer_NodePoolAutoscaling.locationPolicy
NSString * const kGTLRContainer_NodePoolAutoscaling_LocationPolicy_Any = @"ANY";
NSString * const kGTLRContainer_NodePoolAutoscaling_LocationPolicy_Balanced = @"BALANCED";
NSString * const kGTLRContainer_NodePoolAutoscaling_LocationPolicy_LocationPolicyUnspecified = @"LOCATION_POLICY_UNSPECIFIED";

// GTLRContainer_NodeTaint.effect
NSString * const kGTLRContainer_NodeTaint_Effect_EffectUnspecified = @"EFFECT_UNSPECIFIED";
NSString * const kGTLRContainer_NodeTaint_Effect_NoExecute     = @"NO_EXECUTE";
NSString * const kGTLRContainer_NodeTaint_Effect_NoSchedule    = @"NO_SCHEDULE";
NSString * const kGTLRContainer_NodeTaint_Effect_PreferNoSchedule = @"PREFER_NO_SCHEDULE";

// GTLRContainer_Operation.operationType
NSString * const kGTLRContainer_Operation_OperationType_AutoRepairNodes = @"AUTO_REPAIR_NODES";
NSString * const kGTLRContainer_Operation_OperationType_AutoUpgradeNodes = @"AUTO_UPGRADE_NODES";
NSString * const kGTLRContainer_Operation_OperationType_CreateCluster = @"CREATE_CLUSTER";
NSString * const kGTLRContainer_Operation_OperationType_CreateNodePool = @"CREATE_NODE_POOL";
NSString * const kGTLRContainer_Operation_OperationType_DeleteCluster = @"DELETE_CLUSTER";
NSString * const kGTLRContainer_Operation_OperationType_DeleteNodePool = @"DELETE_NODE_POOL";
NSString * const kGTLRContainer_Operation_OperationType_RepairCluster = @"REPAIR_CLUSTER";
NSString * const kGTLRContainer_Operation_OperationType_SetLabels = @"SET_LABELS";
NSString * const kGTLRContainer_Operation_OperationType_SetMaintenancePolicy = @"SET_MAINTENANCE_POLICY";
NSString * const kGTLRContainer_Operation_OperationType_SetMasterAuth = @"SET_MASTER_AUTH";
NSString * const kGTLRContainer_Operation_OperationType_SetNetworkPolicy = @"SET_NETWORK_POLICY";
NSString * const kGTLRContainer_Operation_OperationType_SetNodePoolManagement = @"SET_NODE_POOL_MANAGEMENT";
NSString * const kGTLRContainer_Operation_OperationType_SetNodePoolSize = @"SET_NODE_POOL_SIZE";
NSString * const kGTLRContainer_Operation_OperationType_TypeUnspecified = @"TYPE_UNSPECIFIED";
NSString * const kGTLRContainer_Operation_OperationType_UpdateCluster = @"UPDATE_CLUSTER";
NSString * const kGTLRContainer_Operation_OperationType_UpgradeMaster = @"UPGRADE_MASTER";
NSString * const kGTLRContainer_Operation_OperationType_UpgradeNodes = @"UPGRADE_NODES";

// GTLRContainer_Operation.status
NSString * const kGTLRContainer_Operation_Status_Aborting      = @"ABORTING";
NSString * const kGTLRContainer_Operation_Status_Done          = @"DONE";
NSString * const kGTLRContainer_Operation_Status_Pending       = @"PENDING";
NSString * const kGTLRContainer_Operation_Status_Running       = @"RUNNING";
NSString * const kGTLRContainer_Operation_Status_StatusUnspecified = @"STATUS_UNSPECIFIED";

// GTLRContainer_OperationProgress.status
NSString * const kGTLRContainer_OperationProgress_Status_Aborting = @"ABORTING";
NSString * const kGTLRContainer_OperationProgress_Status_Done  = @"DONE";
NSString * const kGTLRContainer_OperationProgress_Status_Pending = @"PENDING";
NSString * const kGTLRContainer_OperationProgress_Status_Running = @"RUNNING";
NSString * const kGTLRContainer_OperationProgress_Status_StatusUnspecified = @"STATUS_UNSPECIFIED";

// GTLRContainer_ReleaseChannel.channel
NSString * const kGTLRContainer_ReleaseChannel_Channel_Rapid   = @"RAPID";
NSString * const kGTLRContainer_ReleaseChannel_Channel_Regular = @"REGULAR";
NSString * const kGTLRContainer_ReleaseChannel_Channel_Stable  = @"STABLE";
NSString * const kGTLRContainer_ReleaseChannel_Channel_Unspecified = @"UNSPECIFIED";

// GTLRContainer_ReleaseChannelConfig.channel
NSString * const kGTLRContainer_ReleaseChannelConfig_Channel_Rapid = @"RAPID";
NSString * const kGTLRContainer_ReleaseChannelConfig_Channel_Regular = @"REGULAR";
NSString * const kGTLRContainer_ReleaseChannelConfig_Channel_Stable = @"STABLE";
NSString * const kGTLRContainer_ReleaseChannelConfig_Channel_Unspecified = @"UNSPECIFIED";

// GTLRContainer_ReservationAffinity.consumeReservationType
NSString * const kGTLRContainer_ReservationAffinity_ConsumeReservationType_AnyReservation = @"ANY_RESERVATION";
NSString * const kGTLRContainer_ReservationAffinity_ConsumeReservationType_NoReservation = @"NO_RESERVATION";
NSString * const kGTLRContainer_ReservationAffinity_ConsumeReservationType_SpecificReservation = @"SPECIFIC_RESERVATION";
NSString * const kGTLRContainer_ReservationAffinity_ConsumeReservationType_Unspecified = @"UNSPECIFIED";

// GTLRContainer_SandboxConfig.type
NSString * const kGTLRContainer_SandboxConfig_Type_Gvisor      = @"GVISOR";
NSString * const kGTLRContainer_SandboxConfig_Type_Unspecified = @"UNSPECIFIED";

// GTLRContainer_SetMasterAuthRequest.action
NSString * const kGTLRContainer_SetMasterAuthRequest_Action_GeneratePassword = @"GENERATE_PASSWORD";
NSString * const kGTLRContainer_SetMasterAuthRequest_Action_SetPassword = @"SET_PASSWORD";
NSString * const kGTLRContainer_SetMasterAuthRequest_Action_SetUsername = @"SET_USERNAME";
NSString * const kGTLRContainer_SetMasterAuthRequest_Action_Unknown = @"UNKNOWN";

// GTLRContainer_StatusCondition.canonicalCode
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_Aborted = @"ABORTED";
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_AlreadyExists = @"ALREADY_EXISTS";
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_Cancelled = @"CANCELLED";
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_DataLoss = @"DATA_LOSS";
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_DeadlineExceeded = @"DEADLINE_EXCEEDED";
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_FailedPrecondition = @"FAILED_PRECONDITION";
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_Internal = @"INTERNAL";
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_InvalidArgument = @"INVALID_ARGUMENT";
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_NotFound = @"NOT_FOUND";
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_Ok = @"OK";
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_OutOfRange = @"OUT_OF_RANGE";
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_PermissionDenied = @"PERMISSION_DENIED";
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_ResourceExhausted = @"RESOURCE_EXHAUSTED";
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_Unauthenticated = @"UNAUTHENTICATED";
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_Unavailable = @"UNAVAILABLE";
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_Unimplemented = @"UNIMPLEMENTED";
NSString * const kGTLRContainer_StatusCondition_CanonicalCode_Unknown = @"UNKNOWN";

// GTLRContainer_StatusCondition.code
NSString * const kGTLRContainer_StatusCondition_Code_CaExpiring = @"CA_EXPIRING";
NSString * const kGTLRContainer_StatusCondition_Code_CloudKmsKeyError = @"CLOUD_KMS_KEY_ERROR";
NSString * const kGTLRContainer_StatusCondition_Code_GceQuotaExceeded = @"GCE_QUOTA_EXCEEDED";
NSString * const kGTLRContainer_StatusCondition_Code_GceStockout = @"GCE_STOCKOUT";
NSString * const kGTLRContainer_StatusCondition_Code_GkeServiceAccountDeleted = @"GKE_SERVICE_ACCOUNT_DELETED";
NSString * const kGTLRContainer_StatusCondition_Code_SetByOperator = @"SET_BY_OPERATOR";
NSString * const kGTLRContainer_StatusCondition_Code_Unknown   = @"UNKNOWN";

// GTLRContainer_UpgradeAvailableEvent.resourceType
NSString * const kGTLRContainer_UpgradeAvailableEvent_ResourceType_Master = @"MASTER";
NSString * const kGTLRContainer_UpgradeAvailableEvent_ResourceType_NodePool = @"NODE_POOL";
NSString * const kGTLRContainer_UpgradeAvailableEvent_ResourceType_UpgradeResourceTypeUnspecified = @"UPGRADE_RESOURCE_TYPE_UNSPECIFIED";

// GTLRContainer_UpgradeEvent.resourceType
NSString * const kGTLRContainer_UpgradeEvent_ResourceType_Master = @"MASTER";
NSString * const kGTLRContainer_UpgradeEvent_ResourceType_NodePool = @"NODE_POOL";
NSString * const kGTLRContainer_UpgradeEvent_ResourceType_UpgradeResourceTypeUnspecified = @"UPGRADE_RESOURCE_TYPE_UNSPECIFIED";

// GTLRContainer_UpgradeSettings.strategy
NSString * const kGTLRContainer_UpgradeSettings_Strategy_BlueGreen = @"BLUE_GREEN";
NSString * const kGTLRContainer_UpgradeSettings_Strategy_NodePoolUpdateStrategyUnspecified = @"NODE_POOL_UPDATE_STRATEGY_UNSPECIFIED";
NSString * const kGTLRContainer_UpgradeSettings_Strategy_Surge = @"SURGE";

// GTLRContainer_UsableSubnetworkSecondaryRange.status
NSString * const kGTLRContainer_UsableSubnetworkSecondaryRange_Status_InUseManagedPod = @"IN_USE_MANAGED_POD";
NSString * const kGTLRContainer_UsableSubnetworkSecondaryRange_Status_InUseService = @"IN_USE_SERVICE";
NSString * const kGTLRContainer_UsableSubnetworkSecondaryRange_Status_InUseShareablePod = @"IN_USE_SHAREABLE_POD";
NSString * const kGTLRContainer_UsableSubnetworkSecondaryRange_Status_Unknown = @"UNKNOWN";
NSString * const kGTLRContainer_UsableSubnetworkSecondaryRange_Status_Unused = @"UNUSED";

// GTLRContainer_WorkloadMetadataConfig.mode
NSString * const kGTLRContainer_WorkloadMetadataConfig_Mode_GceMetadata = @"GCE_METADATA";
NSString * const kGTLRContainer_WorkloadMetadataConfig_Mode_GkeMetadata = @"GKE_METADATA";
NSString * const kGTLRContainer_WorkloadMetadataConfig_Mode_ModeUnspecified = @"MODE_UNSPECIFIED";

// ----------------------------------------------------------------------------
//
//   GTLRContainer_AcceleratorConfig
//

@implementation GTLRContainer_AcceleratorConfig
@dynamic acceleratorCount, acceleratorType, gpuPartitionSize, gpuSharingConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_AddonsConfig
//

@implementation GTLRContainer_AddonsConfig
@dynamic cloudRunConfig, configConnectorConfig, dnsCacheConfig,
         gcePersistentDiskCsiDriverConfig, gcpFilestoreCsiDriverConfig,
         gkeBackupAgentConfig, horizontalPodAutoscaling, httpLoadBalancing,
         kubernetesDashboard, networkPolicyConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_AdvancedMachineFeatures
//

@implementation GTLRContainer_AdvancedMachineFeatures
@dynamic threadsPerCore;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_AuthenticatorGroupsConfig
//

@implementation GTLRContainer_AuthenticatorGroupsConfig
@dynamic enabled, securityGroup;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_Autopilot
//

@implementation GTLRContainer_Autopilot
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_AutoprovisioningNodePoolDefaults
//

@implementation GTLRContainer_AutoprovisioningNodePoolDefaults
@dynamic bootDiskKmsKey, diskSizeGb, diskType, imageType, management,
         minCpuPlatform, oauthScopes, serviceAccount, shieldedInstanceConfig,
         upgradeSettings;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"oauthScopes" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_AutoUpgradeOptions
//

@implementation GTLRContainer_AutoUpgradeOptions
@dynamic autoUpgradeStartTime, descriptionProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_BigQueryDestination
//

@implementation GTLRContainer_BigQueryDestination
@dynamic datasetId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_BinaryAuthorization
//

@implementation GTLRContainer_BinaryAuthorization
@dynamic enabled, evaluationMode;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_BlueGreenInfo
//

@implementation GTLRContainer_BlueGreenInfo
@dynamic blueInstanceGroupUrls, bluePoolDeletionStartTime,
         greenInstanceGroupUrls, greenPoolVersion, phase;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"blueInstanceGroupUrls" : [NSString class],
    @"greenInstanceGroupUrls" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_BlueGreenSettings
//

@implementation GTLRContainer_BlueGreenSettings
@dynamic nodePoolSoakDuration, standardRolloutPolicy;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_CancelOperationRequest
//

@implementation GTLRContainer_CancelOperationRequest
@dynamic name, operationId, projectId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_CidrBlock
//

@implementation GTLRContainer_CidrBlock
@dynamic cidrBlock, displayName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ClientCertificateConfig
//

@implementation GTLRContainer_ClientCertificateConfig
@dynamic issueClientCertificate;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_CloudRunConfig
//

@implementation GTLRContainer_CloudRunConfig
@dynamic disabled, loadBalancerType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_Cluster
//

@implementation GTLRContainer_Cluster
@dynamic addonsConfig, authenticatorGroupsConfig, autopilot, autoscaling,
         binaryAuthorization, clusterIpv4Cidr, conditions, confidentialNodes,
         costManagementConfig, createTime, currentMasterVersion,
         currentNodeCount, currentNodeVersion, databaseEncryption,
         defaultMaxPodsConstraint, descriptionProperty, enableKubernetesAlpha,
         enableTpu, endpoint, expireTime, identifier, identityServiceConfig,
         initialClusterVersion, initialNodeCount, instanceGroupUrls,
         ipAllocationPolicy, labelFingerprint, legacyAbac, location, locations,
         loggingConfig, loggingService, maintenancePolicy, masterAuth,
         masterAuthorizedNetworksConfig, meshCertificates, monitoringConfig,
         monitoringService, name, network, networkConfig, networkPolicy,
         nodeConfig, nodeIpv4CidrSize, nodePoolAutoConfig, nodePoolDefaults,
         nodePools, notificationConfig, privateClusterConfig, releaseChannel,
         resourceLabels, resourceUsageExportConfig, selfLink, servicesIpv4Cidr,
         shieldedNodes, status, statusMessage, subnetwork, tpuIpv4CidrBlock,
         verticalPodAutoscaling, workloadIdentityConfig, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"descriptionProperty" : @"description",
    @"identifier" : @"id",
    @"zoneProperty" : @"zone"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"conditions" : [GTLRContainer_StatusCondition class],
    @"instanceGroupUrls" : [NSString class],
    @"locations" : [NSString class],
    @"nodePools" : [GTLRContainer_NodePool class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_Cluster_ResourceLabels
//

@implementation GTLRContainer_Cluster_ResourceLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ClusterAutoscaling
//

@implementation GTLRContainer_ClusterAutoscaling
@dynamic autoprovisioningLocations, autoprovisioningNodePoolDefaults,
         autoscalingProfile, enableNodeAutoprovisioning, resourceLimits;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"autoprovisioningLocations" : [NSString class],
    @"resourceLimits" : [GTLRContainer_ResourceLimit class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ClusterUpdate
//

@implementation GTLRContainer_ClusterUpdate
@dynamic desiredAddonsConfig, desiredAuthenticatorGroupsConfig,
         desiredBinaryAuthorization, desiredClusterAutoscaling,
         desiredCostManagementConfig, desiredDatabaseEncryption,
         desiredDatapathProvider, desiredDefaultSnatStatus, desiredDnsConfig,
         desiredEnablePrivateEndpoint, desiredGatewayApiConfig,
         desiredGcfsConfig, desiredIdentityServiceConfig, desiredImageType,
         desiredIntraNodeVisibilityConfig, desiredL4ilbSubsettingConfig,
         desiredLocations, desiredLoggingConfig, desiredLoggingService,
         desiredMasterAuthorizedNetworksConfig, desiredMasterVersion,
         desiredMeshCertificates, desiredMonitoringConfig,
         desiredMonitoringService, desiredNodePoolAutoConfigNetworkTags,
         desiredNodePoolAutoscaling, desiredNodePoolId,
         desiredNodePoolLoggingConfig, desiredNodeVersion,
         desiredNotificationConfig, desiredPrivateClusterConfig,
         desiredPrivateIpv6GoogleAccess, desiredReleaseChannel,
         desiredResourceUsageExportConfig, desiredServiceExternalIpsConfig,
         desiredShieldedNodes, desiredVerticalPodAutoscaling,
         desiredWorkloadIdentityConfig;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"desiredLocations" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_CompleteIPRotationRequest
//

@implementation GTLRContainer_CompleteIPRotationRequest
@dynamic clusterId, name, projectId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_CompleteNodePoolUpgradeRequest
//

@implementation GTLRContainer_CompleteNodePoolUpgradeRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ConfidentialNodes
//

@implementation GTLRContainer_ConfidentialNodes
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ConfigConnectorConfig
//

@implementation GTLRContainer_ConfigConnectorConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ConsumptionMeteringConfig
//

@implementation GTLRContainer_ConsumptionMeteringConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_CostManagementConfig
//

@implementation GTLRContainer_CostManagementConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_CreateClusterRequest
//

@implementation GTLRContainer_CreateClusterRequest
@dynamic cluster, parent, projectId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_CreateNodePoolRequest
//

@implementation GTLRContainer_CreateNodePoolRequest
@dynamic clusterId, nodePool, parent, projectId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_DailyMaintenanceWindow
//

@implementation GTLRContainer_DailyMaintenanceWindow
@dynamic duration, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_DatabaseEncryption
//

@implementation GTLRContainer_DatabaseEncryption
@dynamic keyName, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_DefaultSnatStatus
//

@implementation GTLRContainer_DefaultSnatStatus
@dynamic disabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_DnsCacheConfig
//

@implementation GTLRContainer_DnsCacheConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_DNSConfig
//

@implementation GTLRContainer_DNSConfig
@dynamic clusterDns, clusterDnsDomain, clusterDnsScope;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_Empty
//

@implementation GTLRContainer_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_Filter
//

@implementation GTLRContainer_Filter
@dynamic eventType;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"eventType" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_GatewayAPIConfig
//

@implementation GTLRContainer_GatewayAPIConfig
@dynamic channel;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_GcePersistentDiskCsiDriverConfig
//

@implementation GTLRContainer_GcePersistentDiskCsiDriverConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_GcfsConfig
//

@implementation GTLRContainer_GcfsConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_GcpFilestoreCsiDriverConfig
//

@implementation GTLRContainer_GcpFilestoreCsiDriverConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_GetJSONWebKeysResponse
//

@implementation GTLRContainer_GetJSONWebKeysResponse
@dynamic cacheHeader, keys;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"keys" : [GTLRContainer_Jwk class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_GetOpenIDConfigResponse
//

@implementation GTLRContainer_GetOpenIDConfigResponse
@dynamic cacheHeader, claimsSupported, grantTypes,
         idTokenSigningAlgValuesSupported, issuer, jwksUri,
         responseTypesSupported, subjectTypesSupported;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  NSDictionary<NSString *, NSString *> *map = @{
    @"claimsSupported" : @"claims_supported",
    @"grantTypes" : @"grant_types",
    @"idTokenSigningAlgValuesSupported" : @"id_token_signing_alg_values_supported",
    @"jwksUri" : @"jwks_uri",
    @"responseTypesSupported" : @"response_types_supported",
    @"subjectTypesSupported" : @"subject_types_supported"
  };
  return map;
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"claims_supported" : [NSString class],
    @"grant_types" : [NSString class],
    @"id_token_signing_alg_values_supported" : [NSString class],
    @"response_types_supported" : [NSString class],
    @"subject_types_supported" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_GkeBackupAgentConfig
//

@implementation GTLRContainer_GkeBackupAgentConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_GPUSharingConfig
//

@implementation GTLRContainer_GPUSharingConfig
@dynamic gpuSharingStrategy, maxSharedClientsPerGpu;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_HorizontalPodAutoscaling
//

@implementation GTLRContainer_HorizontalPodAutoscaling
@dynamic disabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_HttpCacheControlResponseHeader
//

@implementation GTLRContainer_HttpCacheControlResponseHeader
@dynamic age, directive, expires;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_HttpLoadBalancing
//

@implementation GTLRContainer_HttpLoadBalancing
@dynamic disabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_IdentityServiceConfig
//

@implementation GTLRContainer_IdentityServiceConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ILBSubsettingConfig
//

@implementation GTLRContainer_ILBSubsettingConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_IntraNodeVisibilityConfig
//

@implementation GTLRContainer_IntraNodeVisibilityConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_IPAllocationPolicy
//

@implementation GTLRContainer_IPAllocationPolicy
@dynamic clusterIpv4Cidr, clusterIpv4CidrBlock, clusterSecondaryRangeName,
         createSubnetwork, ipv6AccessType, nodeIpv4Cidr, nodeIpv4CidrBlock,
         servicesIpv4Cidr, servicesIpv4CidrBlock, servicesSecondaryRangeName,
         stackType, subnetworkName, tpuIpv4CidrBlock, useIpAliases, useRoutes;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_Jwk
//

@implementation GTLRContainer_Jwk
@dynamic alg, crv, e, kid, kty, n, use, x, y;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_KubernetesDashboard
//

@implementation GTLRContainer_KubernetesDashboard
@dynamic disabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_LegacyAbac
//

@implementation GTLRContainer_LegacyAbac
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_LinuxNodeConfig
//

@implementation GTLRContainer_LinuxNodeConfig
@dynamic cgroupMode, sysctls;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_LinuxNodeConfig_Sysctls
//

@implementation GTLRContainer_LinuxNodeConfig_Sysctls

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ListClustersResponse
//

@implementation GTLRContainer_ListClustersResponse
@dynamic clusters, missingZones;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"clusters" : [GTLRContainer_Cluster class],
    @"missingZones" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ListNodePoolsResponse
//

@implementation GTLRContainer_ListNodePoolsResponse
@dynamic nodePools;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"nodePools" : [GTLRContainer_NodePool class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ListOperationsResponse
//

@implementation GTLRContainer_ListOperationsResponse
@dynamic missingZones, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"missingZones" : [NSString class],
    @"operations" : [GTLRContainer_Operation class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ListUsableSubnetworksResponse
//

@implementation GTLRContainer_ListUsableSubnetworksResponse
@dynamic nextPageToken, subnetworks;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"subnetworks" : [GTLRContainer_UsableSubnetwork class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"subnetworks";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_LoggingComponentConfig
//

@implementation GTLRContainer_LoggingComponentConfig
@dynamic enableComponents;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"enableComponents" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_LoggingConfig
//

@implementation GTLRContainer_LoggingConfig
@dynamic componentConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_LoggingVariantConfig
//

@implementation GTLRContainer_LoggingVariantConfig
@dynamic variant;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_MaintenanceExclusionOptions
//

@implementation GTLRContainer_MaintenanceExclusionOptions
@dynamic scope;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_MaintenancePolicy
//

@implementation GTLRContainer_MaintenancePolicy
@dynamic resourceVersion, window;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_MaintenanceWindow
//

@implementation GTLRContainer_MaintenanceWindow
@dynamic dailyMaintenanceWindow, maintenanceExclusions, recurringWindow;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_MaintenanceWindow_MaintenanceExclusions
//

@implementation GTLRContainer_MaintenanceWindow_MaintenanceExclusions

+ (Class)classForAdditionalProperties {
  return [GTLRContainer_TimeWindow class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ManagedPrometheusConfig
//

@implementation GTLRContainer_ManagedPrometheusConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_MasterAuth
//

@implementation GTLRContainer_MasterAuth
@dynamic clientCertificate, clientCertificateConfig, clientKey,
         clusterCaCertificate, password, username;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_MasterAuthorizedNetworksConfig
//

@implementation GTLRContainer_MasterAuthorizedNetworksConfig
@dynamic cidrBlocks, enabled, gcpPublicCidrsAccessEnabled;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"cidrBlocks" : [GTLRContainer_CidrBlock class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_MaxPodsConstraint
//

@implementation GTLRContainer_MaxPodsConstraint
@dynamic maxPodsPerNode;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_MeshCertificates
//

@implementation GTLRContainer_MeshCertificates
@dynamic enableCertificates;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_Metric
//

@implementation GTLRContainer_Metric
@dynamic doubleValue, intValue, name, stringValue;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_MonitoringComponentConfig
//

@implementation GTLRContainer_MonitoringComponentConfig
@dynamic enableComponents;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"enableComponents" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_MonitoringConfig
//

@implementation GTLRContainer_MonitoringConfig
@dynamic componentConfig, managedPrometheusConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NetworkConfig
//

@implementation GTLRContainer_NetworkConfig
@dynamic datapathProvider, defaultSnatStatus, dnsConfig,
         enableIntraNodeVisibility, enableL4ilbSubsetting, gatewayApiConfig,
         network, privateIpv6GoogleAccess, serviceExternalIpsConfig, subnetwork;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NetworkPerformanceConfig
//

@implementation GTLRContainer_NetworkPerformanceConfig
@dynamic totalEgressBandwidthTier;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NetworkPolicy
//

@implementation GTLRContainer_NetworkPolicy
@dynamic enabled, provider;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NetworkPolicyConfig
//

@implementation GTLRContainer_NetworkPolicyConfig
@dynamic disabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NetworkTags
//

@implementation GTLRContainer_NetworkTags
@dynamic tags;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"tags" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodeConfig
//

@implementation GTLRContainer_NodeConfig
@dynamic accelerators, advancedMachineFeatures, bootDiskKmsKey,
         confidentialNodes, diskSizeGb, diskType, gcfsConfig, gvnic, imageType,
         kubeletConfig, labels, linuxNodeConfig, localSsdCount, loggingConfig,
         machineType, metadata, minCpuPlatform, nodeGroup, oauthScopes,
         preemptible, reservationAffinity, resourceLabels, sandboxConfig,
         serviceAccount, shieldedInstanceConfig, spot, tags, taints,
         workloadMetadataConfig;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"accelerators" : [GTLRContainer_AcceleratorConfig class],
    @"oauthScopes" : [NSString class],
    @"tags" : [NSString class],
    @"taints" : [GTLRContainer_NodeTaint class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodeConfig_Labels
//

@implementation GTLRContainer_NodeConfig_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodeConfig_Metadata
//

@implementation GTLRContainer_NodeConfig_Metadata

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodeConfig_ResourceLabels
//

@implementation GTLRContainer_NodeConfig_ResourceLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodeConfigDefaults
//

@implementation GTLRContainer_NodeConfigDefaults
@dynamic gcfsConfig, loggingConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodeKubeletConfig
//

@implementation GTLRContainer_NodeKubeletConfig
@dynamic cpuCfsQuota, cpuCfsQuotaPeriod, cpuManagerPolicy, podPidsLimit;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodeLabels
//

@implementation GTLRContainer_NodeLabels
@dynamic labels;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodeLabels_Labels
//

@implementation GTLRContainer_NodeLabels_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodeManagement
//

@implementation GTLRContainer_NodeManagement
@dynamic autoRepair, autoUpgrade, upgradeOptions;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodeNetworkConfig
//

@implementation GTLRContainer_NodeNetworkConfig
@dynamic createPodRange, enablePrivateNodes, networkPerformanceConfig,
         podIpv4CidrBlock, podRange;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodePool
//

@implementation GTLRContainer_NodePool
@dynamic autoscaling, conditions, config, initialNodeCount, instanceGroupUrls,
         locations, management, maxPodsConstraint, name, networkConfig,
         podIpv4CidrSize, selfLink, status, statusMessage, updateInfo,
         upgradeSettings, version;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"conditions" : [GTLRContainer_StatusCondition class],
    @"instanceGroupUrls" : [NSString class],
    @"locations" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodePoolAutoConfig
//

@implementation GTLRContainer_NodePoolAutoConfig
@dynamic networkTags;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodePoolAutoscaling
//

@implementation GTLRContainer_NodePoolAutoscaling
@dynamic autoprovisioned, enabled, locationPolicy, maxNodeCount, minNodeCount,
         totalMaxNodeCount, totalMinNodeCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodePoolDefaults
//

@implementation GTLRContainer_NodePoolDefaults
@dynamic nodeConfigDefaults;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodePoolLoggingConfig
//

@implementation GTLRContainer_NodePoolLoggingConfig
@dynamic variantConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodeTaint
//

@implementation GTLRContainer_NodeTaint
@dynamic effect, key, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NodeTaints
//

@implementation GTLRContainer_NodeTaints
@dynamic taints;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"taints" : [GTLRContainer_NodeTaint class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_NotificationConfig
//

@implementation GTLRContainer_NotificationConfig
@dynamic pubsub;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_Operation
//

@implementation GTLRContainer_Operation
@dynamic clusterConditions, detail, endTime, error, location, name,
         nodepoolConditions, operationType, progress, selfLink, startTime,
         status, statusMessage, targetLink, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"clusterConditions" : [GTLRContainer_StatusCondition class],
    @"nodepoolConditions" : [GTLRContainer_StatusCondition class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_OperationProgress
//

@implementation GTLRContainer_OperationProgress
@dynamic metrics, name, stages, status;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metrics" : [GTLRContainer_Metric class],
    @"stages" : [GTLRContainer_OperationProgress class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_PrivateClusterConfig
//

@implementation GTLRContainer_PrivateClusterConfig
@dynamic enablePrivateEndpoint, enablePrivateNodes, masterGlobalAccessConfig,
         masterIpv4CidrBlock, peeringName, privateEndpoint,
         privateEndpointSubnetwork, publicEndpoint;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_PrivateClusterMasterGlobalAccessConfig
//

@implementation GTLRContainer_PrivateClusterMasterGlobalAccessConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_PubSub
//

@implementation GTLRContainer_PubSub
@dynamic enabled, filter, topic;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_RecurringTimeWindow
//

@implementation GTLRContainer_RecurringTimeWindow
@dynamic recurrence, window;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ReleaseChannel
//

@implementation GTLRContainer_ReleaseChannel
@dynamic channel;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ReleaseChannelConfig
//

@implementation GTLRContainer_ReleaseChannelConfig
@dynamic channel, defaultVersion, validVersions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"validVersions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ReservationAffinity
//

@implementation GTLRContainer_ReservationAffinity
@dynamic consumeReservationType, key, values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"values" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ResourceLabels
//

@implementation GTLRContainer_ResourceLabels
@dynamic labels;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ResourceLabels_Labels
//

@implementation GTLRContainer_ResourceLabels_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ResourceLimit
//

@implementation GTLRContainer_ResourceLimit
@dynamic maximum, minimum, resourceType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ResourceUsageExportConfig
//

@implementation GTLRContainer_ResourceUsageExportConfig
@dynamic bigqueryDestination, consumptionMeteringConfig,
         enableNetworkEgressMetering;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_RollbackNodePoolUpgradeRequest
//

@implementation GTLRContainer_RollbackNodePoolUpgradeRequest
@dynamic clusterId, name, nodePoolId, projectId, respectPdb, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_SandboxConfig
//

@implementation GTLRContainer_SandboxConfig
@dynamic type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_SecurityBulletinEvent
//

@implementation GTLRContainer_SecurityBulletinEvent
@dynamic affectedSupportedMinors, briefDescription, bulletinId, bulletinUri,
         cveIds, manualStepsRequired, patchedVersions, resourceTypeAffected,
         severity, suggestedUpgradeTarget;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"affectedSupportedMinors" : [NSString class],
    @"cveIds" : [NSString class],
    @"patchedVersions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ServerConfig
//

@implementation GTLRContainer_ServerConfig
@dynamic channels, defaultClusterVersion, defaultImageType, validImageTypes,
         validMasterVersions, validNodeVersions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"channels" : [GTLRContainer_ReleaseChannelConfig class],
    @"validImageTypes" : [NSString class],
    @"validMasterVersions" : [NSString class],
    @"validNodeVersions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ServiceExternalIPsConfig
//

@implementation GTLRContainer_ServiceExternalIPsConfig
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_SetAddonsConfigRequest
//

@implementation GTLRContainer_SetAddonsConfigRequest
@dynamic addonsConfig, clusterId, name, projectId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_SetLabelsRequest
//

@implementation GTLRContainer_SetLabelsRequest
@dynamic clusterId, labelFingerprint, name, projectId, resourceLabels,
         zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_SetLabelsRequest_ResourceLabels
//

@implementation GTLRContainer_SetLabelsRequest_ResourceLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_SetLegacyAbacRequest
//

@implementation GTLRContainer_SetLegacyAbacRequest
@dynamic clusterId, enabled, name, projectId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_SetLocationsRequest
//

@implementation GTLRContainer_SetLocationsRequest
@dynamic clusterId, locations, name, projectId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"locations" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_SetLoggingServiceRequest
//

@implementation GTLRContainer_SetLoggingServiceRequest
@dynamic clusterId, loggingService, name, projectId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_SetMaintenancePolicyRequest
//

@implementation GTLRContainer_SetMaintenancePolicyRequest
@dynamic clusterId, maintenancePolicy, name, projectId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_SetMasterAuthRequest
//

@implementation GTLRContainer_SetMasterAuthRequest
@dynamic action, clusterId, name, projectId, update, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_SetMonitoringServiceRequest
//

@implementation GTLRContainer_SetMonitoringServiceRequest
@dynamic clusterId, monitoringService, name, projectId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_SetNetworkPolicyRequest
//

@implementation GTLRContainer_SetNetworkPolicyRequest
@dynamic clusterId, name, networkPolicy, projectId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_SetNodePoolAutoscalingRequest
//

@implementation GTLRContainer_SetNodePoolAutoscalingRequest
@dynamic autoscaling, clusterId, name, nodePoolId, projectId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_SetNodePoolManagementRequest
//

@implementation GTLRContainer_SetNodePoolManagementRequest
@dynamic clusterId, management, name, nodePoolId, projectId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_SetNodePoolSizeRequest
//

@implementation GTLRContainer_SetNodePoolSizeRequest
@dynamic clusterId, name, nodeCount, nodePoolId, projectId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ShieldedInstanceConfig
//

@implementation GTLRContainer_ShieldedInstanceConfig
@dynamic enableIntegrityMonitoring, enableSecureBoot;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_ShieldedNodes
//

@implementation GTLRContainer_ShieldedNodes
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_StandardRolloutPolicy
//

@implementation GTLRContainer_StandardRolloutPolicy
@dynamic batchNodeCount, batchPercentage, batchSoakDuration;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_StartIPRotationRequest
//

@implementation GTLRContainer_StartIPRotationRequest
@dynamic clusterId, name, projectId, rotateCredentials, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_Status
//

@implementation GTLRContainer_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRContainer_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_Status_Details_Item
//

@implementation GTLRContainer_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_StatusCondition
//

@implementation GTLRContainer_StatusCondition
@dynamic canonicalCode, code, message;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_TimeWindow
//

@implementation GTLRContainer_TimeWindow
@dynamic endTime, maintenanceExclusionOptions, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_UpdateClusterRequest
//

@implementation GTLRContainer_UpdateClusterRequest
@dynamic clusterId, name, projectId, update, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_UpdateInfo
//

@implementation GTLRContainer_UpdateInfo
@dynamic blueGreenInfo;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_UpdateMasterRequest
//

@implementation GTLRContainer_UpdateMasterRequest
@dynamic clusterId, masterVersion, name, projectId, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_UpdateNodePoolRequest
//

@implementation GTLRContainer_UpdateNodePoolRequest
@dynamic clusterId, confidentialNodes, gcfsConfig, gvnic, imageType,
         kubeletConfig, labels, linuxNodeConfig, locations, loggingConfig, name,
         nodeNetworkConfig, nodePoolId, nodeVersion, projectId, resourceLabels,
         tags, taints, upgradeSettings, workloadMetadataConfig, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"locations" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_UpgradeAvailableEvent
//

@implementation GTLRContainer_UpgradeAvailableEvent
@dynamic releaseChannel, resource, resourceType, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_UpgradeEvent
//

@implementation GTLRContainer_UpgradeEvent
@dynamic currentVersion, operation, operationStartTime, resource, resourceType,
         targetVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_UpgradeSettings
//

@implementation GTLRContainer_UpgradeSettings
@dynamic blueGreenSettings, maxSurge, maxUnavailable, strategy;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_UsableSubnetwork
//

@implementation GTLRContainer_UsableSubnetwork
@dynamic ipCidrRange, network, secondaryIpRanges, statusMessage, subnetwork;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"secondaryIpRanges" : [GTLRContainer_UsableSubnetworkSecondaryRange class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_UsableSubnetworkSecondaryRange
//

@implementation GTLRContainer_UsableSubnetworkSecondaryRange
@dynamic ipCidrRange, rangeName, status;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_VerticalPodAutoscaling
//

@implementation GTLRContainer_VerticalPodAutoscaling
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_VirtualNIC
//

@implementation GTLRContainer_VirtualNIC
@dynamic enabled;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_WorkloadIdentityConfig
//

@implementation GTLRContainer_WorkloadIdentityConfig
@dynamic workloadPool;
@end


// ----------------------------------------------------------------------------
//
//   GTLRContainer_WorkloadMetadataConfig
//

@implementation GTLRContainer_WorkloadMetadataConfig
@dynamic mode;
@end
