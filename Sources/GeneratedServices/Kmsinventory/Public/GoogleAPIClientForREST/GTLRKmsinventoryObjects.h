// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   KMS Inventory API (kmsinventory/v1)
// Documentation:
//   https://cloud.google.com/kms/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRKmsinventory_GoogleCloudKmsInventoryV1ProtectedResource;
@class GTLRKmsinventory_GoogleCloudKmsInventoryV1ProtectedResource_Labels;
@class GTLRKmsinventory_GoogleCloudKmsInventoryV1ProtectedResourcesSummary_CloudProducts;
@class GTLRKmsinventory_GoogleCloudKmsInventoryV1ProtectedResourcesSummary_Locations;
@class GTLRKmsinventory_GoogleCloudKmsInventoryV1ProtectedResourcesSummary_ResourceTypes;
@class GTLRKmsinventory_GoogleCloudKmsV1CryptoKey;
@class GTLRKmsinventory_GoogleCloudKmsV1CryptoKey_Labels;
@class GTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion;
@class GTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate;
@class GTLRKmsinventory_GoogleCloudKmsV1ExternalProtectionLevelOptions;
@class GTLRKmsinventory_GoogleCloudKmsV1KeyOperationAttestation;
@class GTLRKmsinventory_GoogleCloudKmsV1KeyOperationAttestationCertificateChains;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRKmsinventory_GoogleCloudKmsV1CryptoKey.purpose

/**
 *  CryptoKeys with this purpose may be used with AsymmetricDecrypt and
 *  GetPublicKey.
 *
 *  Value: "ASYMMETRIC_DECRYPT"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKey_Purpose_AsymmetricDecrypt;
/**
 *  CryptoKeys with this purpose may be used with AsymmetricSign and
 *  GetPublicKey.
 *
 *  Value: "ASYMMETRIC_SIGN"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKey_Purpose_AsymmetricSign;
/**
 *  Not specified.
 *
 *  Value: "CRYPTO_KEY_PURPOSE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKey_Purpose_CryptoKeyPurposeUnspecified;
/**
 *  CryptoKeys with this purpose may be used with Encrypt and Decrypt.
 *
 *  Value: "ENCRYPT_DECRYPT"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKey_Purpose_EncryptDecrypt;
/**
 *  CryptoKeys with this purpose may be used with MacSign.
 *
 *  Value: "MAC"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKey_Purpose_Mac;

// ----------------------------------------------------------------------------
// GTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion.algorithm

/**
 *  Not specified.
 *
 *  Value: "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_CryptoKeyVersionAlgorithmUnspecified;
/**
 *  ECDSA on the NIST P-256 curve with a SHA256 digest.
 *
 *  Value: "EC_SIGN_P256_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_EcSignP256Sha256;
/**
 *  ECDSA on the NIST P-384 curve with a SHA384 digest.
 *
 *  Value: "EC_SIGN_P384_SHA384"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_EcSignP384Sha384;
/**
 *  ECDSA on the non-NIST secp256k1 curve. This curve is only supported for HSM
 *  protection level.
 *
 *  Value: "EC_SIGN_SECP256K1_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_EcSignSecp256k1Sha256;
/**
 *  Algorithm representing symmetric encryption by an external key manager.
 *
 *  Value: "EXTERNAL_SYMMETRIC_ENCRYPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_ExternalSymmetricEncryption;
/**
 *  Creates symmetric encryption keys.
 *
 *  Value: "GOOGLE_SYMMETRIC_ENCRYPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_GoogleSymmetricEncryption;
/**
 *  HMAC-SHA1 signing with a 160 bit key.
 *
 *  Value: "HMAC_SHA1"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_HmacSha1;
/**
 *  HMAC-SHA224 signing with a 224 bit key.
 *
 *  Value: "HMAC_SHA224"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_HmacSha224;
/**
 *  HMAC-SHA256 signing with a 256 bit key.
 *
 *  Value: "HMAC_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_HmacSha256;
/**
 *  HMAC-SHA384 signing with a 384 bit key.
 *
 *  Value: "HMAC_SHA384"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_HmacSha384;
/**
 *  HMAC-SHA512 signing with a 512 bit key.
 *
 *  Value: "HMAC_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_HmacSha512;
/**
 *  RSAES-OAEP 2048 bit key with a SHA1 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_2048_SHA1"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaDecryptOaep2048Sha1;
/**
 *  RSAES-OAEP 2048 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaDecryptOaep2048Sha256;
/**
 *  RSAES-OAEP 3072 bit key with a SHA1 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_3072_SHA1"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaDecryptOaep3072Sha1;
/**
 *  RSAES-OAEP 3072 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaDecryptOaep3072Sha256;
/**
 *  RSAES-OAEP 4096 bit key with a SHA1 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_4096_SHA1"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaDecryptOaep4096Sha1;
/**
 *  RSAES-OAEP 4096 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaDecryptOaep4096Sha256;
/**
 *  RSAES-OAEP 4096 bit key with a SHA512 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaDecryptOaep4096Sha512;
/**
 *  RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignPkcs12048Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignPkcs13072Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignPkcs14096Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignPkcs14096Sha512;
/**
 *  RSASSA-PSS 2048 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignPss2048Sha256;
/**
 *  RSASSA-PSS 3072 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignPss3072Sha256;
/**
 *  RSASSA-PSS 4096 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignPss4096Sha256;
/**
 *  RSASSA-PSS 4096 bit key with a SHA512 digest.
 *
 *  Value: "RSA_SIGN_PSS_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignPss4096Sha512;
/**
 *  RSASSA-PKCS1-v1_5 signing without encoding, with a 2048 bit key.
 *
 *  Value: "RSA_SIGN_RAW_PKCS1_2048"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignRawPkcs12048;
/**
 *  RSASSA-PKCS1-v1_5 signing without encoding, with a 3072 bit key.
 *
 *  Value: "RSA_SIGN_RAW_PKCS1_3072"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignRawPkcs13072;
/**
 *  RSASSA-PKCS1-v1_5 signing without encoding, with a 4096 bit key.
 *
 *  Value: "RSA_SIGN_RAW_PKCS1_4096"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignRawPkcs14096;

// ----------------------------------------------------------------------------
// GTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion.protectionLevel

/**
 *  Crypto operations are performed by an external key manager.
 *
 *  Value: "EXTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_ProtectionLevel_External;
/**
 *  Crypto operations are performed in an EKM-over-VPC backend.
 *
 *  Value: "EXTERNAL_VPC"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_ProtectionLevel_ExternalVpc;
/**
 *  Crypto operations are performed in a Hardware Security Module.
 *
 *  Value: "HSM"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_ProtectionLevel_Hsm;
/**
 *  Not specified.
 *
 *  Value: "PROTECTION_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_ProtectionLevel_ProtectionLevelUnspecified;
/**
 *  Crypto operations are performed in software.
 *
 *  Value: "SOFTWARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_ProtectionLevel_Software;

// ----------------------------------------------------------------------------
// GTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion.state

/**
 *  Not specified.
 *
 *  Value: "CRYPTO_KEY_VERSION_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_State_CryptoKeyVersionStateUnspecified;
/**
 *  This version is destroyed, and the key material is no longer stored. This
 *  version may only become ENABLED again if this version is reimport_eligible
 *  and the original key material is reimported with a call to
 *  KeyManagementService.ImportCryptoKeyVersion.
 *
 *  Value: "DESTROYED"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_State_Destroyed;
/**
 *  This version is scheduled for destruction, and will be destroyed soon. Call
 *  RestoreCryptoKeyVersion to put it back into the DISABLED state.
 *
 *  Value: "DESTROY_SCHEDULED"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_State_DestroyScheduled;
/**
 *  This version may not be used, but the key material is still available, and
 *  the version can be placed back into the ENABLED state.
 *
 *  Value: "DISABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_State_Disabled;
/**
 *  This version may be used for cryptographic operations.
 *
 *  Value: "ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_State_Enabled;
/**
 *  This version was not imported successfully. It may not be used, enabled,
 *  disabled, or destroyed. The submitted key material has been discarded.
 *  Additional details can be found in CryptoKeyVersion.import_failure_reason.
 *
 *  Value: "IMPORT_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_State_ImportFailed;
/**
 *  This version is still being generated. It may not be used, enabled,
 *  disabled, or destroyed yet. Cloud KMS will automatically mark this version
 *  ENABLED as soon as the version is ready.
 *
 *  Value: "PENDING_GENERATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_State_PendingGeneration;
/**
 *  This version is still being imported. It may not be used, enabled, disabled,
 *  or destroyed yet. Cloud KMS will automatically mark this version ENABLED as
 *  soon as the version is ready.
 *
 *  Value: "PENDING_IMPORT"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_State_PendingImport;

// ----------------------------------------------------------------------------
// GTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate.algorithm

/**
 *  Not specified.
 *
 *  Value: "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_CryptoKeyVersionAlgorithmUnspecified;
/**
 *  ECDSA on the NIST P-256 curve with a SHA256 digest.
 *
 *  Value: "EC_SIGN_P256_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_EcSignP256Sha256;
/**
 *  ECDSA on the NIST P-384 curve with a SHA384 digest.
 *
 *  Value: "EC_SIGN_P384_SHA384"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_EcSignP384Sha384;
/**
 *  ECDSA on the non-NIST secp256k1 curve. This curve is only supported for HSM
 *  protection level.
 *
 *  Value: "EC_SIGN_SECP256K1_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_EcSignSecp256k1Sha256;
/**
 *  Algorithm representing symmetric encryption by an external key manager.
 *
 *  Value: "EXTERNAL_SYMMETRIC_ENCRYPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_ExternalSymmetricEncryption;
/**
 *  Creates symmetric encryption keys.
 *
 *  Value: "GOOGLE_SYMMETRIC_ENCRYPTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_GoogleSymmetricEncryption;
/**
 *  HMAC-SHA1 signing with a 160 bit key.
 *
 *  Value: "HMAC_SHA1"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_HmacSha1;
/**
 *  HMAC-SHA224 signing with a 224 bit key.
 *
 *  Value: "HMAC_SHA224"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_HmacSha224;
/**
 *  HMAC-SHA256 signing with a 256 bit key.
 *
 *  Value: "HMAC_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_HmacSha256;
/**
 *  HMAC-SHA384 signing with a 384 bit key.
 *
 *  Value: "HMAC_SHA384"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_HmacSha384;
/**
 *  HMAC-SHA512 signing with a 512 bit key.
 *
 *  Value: "HMAC_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_HmacSha512;
/**
 *  RSAES-OAEP 2048 bit key with a SHA1 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_2048_SHA1"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep2048Sha1;
/**
 *  RSAES-OAEP 2048 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep2048Sha256;
/**
 *  RSAES-OAEP 3072 bit key with a SHA1 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_3072_SHA1"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep3072Sha1;
/**
 *  RSAES-OAEP 3072 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep3072Sha256;
/**
 *  RSAES-OAEP 4096 bit key with a SHA1 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_4096_SHA1"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep4096Sha1;
/**
 *  RSAES-OAEP 4096 bit key with a SHA256 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep4096Sha256;
/**
 *  RSAES-OAEP 4096 bit key with a SHA512 digest.
 *
 *  Value: "RSA_DECRYPT_OAEP_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep4096Sha512;
/**
 *  RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignPkcs12048Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignPkcs13072Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignPkcs14096Sha256;
/**
 *  RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest.
 *
 *  Value: "RSA_SIGN_PKCS1_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignPkcs14096Sha512;
/**
 *  RSASSA-PSS 2048 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_2048_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignPss2048Sha256;
/**
 *  RSASSA-PSS 3072 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_3072_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignPss3072Sha256;
/**
 *  RSASSA-PSS 4096 bit key with a SHA256 digest.
 *
 *  Value: "RSA_SIGN_PSS_4096_SHA256"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignPss4096Sha256;
/**
 *  RSASSA-PSS 4096 bit key with a SHA512 digest.
 *
 *  Value: "RSA_SIGN_PSS_4096_SHA512"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignPss4096Sha512;
/**
 *  RSASSA-PKCS1-v1_5 signing without encoding, with a 2048 bit key.
 *
 *  Value: "RSA_SIGN_RAW_PKCS1_2048"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignRawPkcs12048;
/**
 *  RSASSA-PKCS1-v1_5 signing without encoding, with a 3072 bit key.
 *
 *  Value: "RSA_SIGN_RAW_PKCS1_3072"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignRawPkcs13072;
/**
 *  RSASSA-PKCS1-v1_5 signing without encoding, with a 4096 bit key.
 *
 *  Value: "RSA_SIGN_RAW_PKCS1_4096"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignRawPkcs14096;

// ----------------------------------------------------------------------------
// GTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate.protectionLevel

/**
 *  Crypto operations are performed by an external key manager.
 *
 *  Value: "EXTERNAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_ProtectionLevel_External;
/**
 *  Crypto operations are performed in an EKM-over-VPC backend.
 *
 *  Value: "EXTERNAL_VPC"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_ProtectionLevel_ExternalVpc;
/**
 *  Crypto operations are performed in a Hardware Security Module.
 *
 *  Value: "HSM"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_ProtectionLevel_Hsm;
/**
 *  Not specified.
 *
 *  Value: "PROTECTION_LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_ProtectionLevel_ProtectionLevelUnspecified;
/**
 *  Crypto operations are performed in software.
 *
 *  Value: "SOFTWARE"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_ProtectionLevel_Software;

// ----------------------------------------------------------------------------
// GTLRKmsinventory_GoogleCloudKmsV1KeyOperationAttestation.format

/**
 *  Not specified.
 *
 *  Value: "ATTESTATION_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1KeyOperationAttestation_Format_AttestationFormatUnspecified;
/**
 *  Cavium HSM attestation compressed with gzip. Note that this format is
 *  defined by Cavium and subject to change at any time. See
 *  https://www.marvell.com/products/security-solutions/nitrox-hs-adapters/software-key-attestation.html.
 *
 *  Value: "CAVIUM_V1_COMPRESSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1KeyOperationAttestation_Format_CaviumV1Compressed;
/**
 *  Cavium HSM attestation V2 compressed with gzip. This is a new format
 *  introduced in Cavium's version 3.2-08.
 *
 *  Value: "CAVIUM_V2_COMPRESSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRKmsinventory_GoogleCloudKmsV1KeyOperationAttestation_Format_CaviumV2Compressed;

/**
 *  Response message for KeyDashboardService.ListCryptoKeys.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "cryptoKeys" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRKmsinventory_GoogleCloudKmsInventoryV1ListCryptoKeysResponse : GTLRCollectionObject

/**
 *  The list of CryptoKeys.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRKmsinventory_GoogleCloudKmsV1CryptoKey *> *cryptoKeys;

/**
 *  The page token returned from the previous response if the next page is
 *  desired.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Metadata about a resource protected by a Cloud KMS key.
 */
@interface GTLRKmsinventory_GoogleCloudKmsInventoryV1ProtectedResource : GTLRObject

/** The Cloud product that owns the resource. Example: `compute` */
@property(nonatomic, copy, nullable) NSString *cloudProduct;

/**
 *  Output only. The time at which this resource was created. The granularity is
 *  in seconds. Timestamp.nanos will always be 0.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  The name of the Cloud KMS
 *  [CryptoKeyVersion](https://cloud.google.com/kms/docs/reference/rest/v1/projects.locations.keyRings.cryptoKeys.cryptoKeyVersions?hl=en)
 *  used to protect this resource via CMEK. This field may be empty if the Cloud
 *  product owning the resource does not provide key version data to Asset
 *  Inventory.
 */
@property(nonatomic, copy, nullable) NSString *cryptoKeyVersion;

/** A key-value pair of the resource's labels (v1) to their values. */
@property(nonatomic, strong, nullable) GTLRKmsinventory_GoogleCloudKmsInventoryV1ProtectedResource_Labels *labels;

/**
 *  Location can be `global`, regional like `us-east1`, or zonal like
 *  `us-west1-b`.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  The full resource name of the resource. Example:
 *  `//compute.googleapis.com/projects/my_project_123/zones/zone1/instances/instance1`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Format: `projects/{PROJECT_NUMBER}`. */
@property(nonatomic, copy, nullable) NSString *project;

/** The ID of the project that owns the resource. */
@property(nonatomic, copy, nullable) NSString *projectId;

/** Example: `compute.googleapis.com/Disk` */
@property(nonatomic, copy, nullable) NSString *resourceType;

@end


/**
 *  A key-value pair of the resource's labels (v1) to their values.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRKmsinventory_GoogleCloudKmsInventoryV1ProtectedResource_Labels : GTLRObject
@end


/**
 *  Aggregate information about the resources protected by a Cloud KMS key in
 *  the same Cloud organization as the key.
 */
@interface GTLRKmsinventory_GoogleCloudKmsInventoryV1ProtectedResourcesSummary : GTLRObject

/** The number of resources protected by the key grouped by Cloud product. */
@property(nonatomic, strong, nullable) GTLRKmsinventory_GoogleCloudKmsInventoryV1ProtectedResourcesSummary_CloudProducts *cloudProducts;

/** The number of resources protected by the key grouped by region. */
@property(nonatomic, strong, nullable) GTLRKmsinventory_GoogleCloudKmsInventoryV1ProtectedResourcesSummary_Locations *locations;

/**
 *  The full name of the ProtectedResourcesSummary resource. Example:
 *  projects/test-project/locations/us/keyRings/test-keyring/cryptoKeys/test-key/protectedResourcesSummary
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The number of distinct Cloud projects in the same Cloud organization as the
 *  key that have resources protected by the key.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *projectCount;

/**
 *  The total number of protected resources in the same Cloud organization as
 *  the key.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *resourceCount;

/** The number of resources protected by the key grouped by resource type. */
@property(nonatomic, strong, nullable) GTLRKmsinventory_GoogleCloudKmsInventoryV1ProtectedResourcesSummary_ResourceTypes *resourceTypes;

@end


/**
 *  The number of resources protected by the key grouped by Cloud product.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of longLongValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRKmsinventory_GoogleCloudKmsInventoryV1ProtectedResourcesSummary_CloudProducts : GTLRObject
@end


/**
 *  The number of resources protected by the key grouped by region.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of longLongValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRKmsinventory_GoogleCloudKmsInventoryV1ProtectedResourcesSummary_Locations : GTLRObject
@end


/**
 *  The number of resources protected by the key grouped by resource type.
 *
 *  @note This class is documented as having more properties of NSNumber (Uses
 *        NSNumber of longLongValue.). Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRKmsinventory_GoogleCloudKmsInventoryV1ProtectedResourcesSummary_ResourceTypes : GTLRObject
@end


/**
 *  Response message for KeyTrackingService.SearchProtectedResources.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "protectedResources" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRKmsinventory_GoogleCloudKmsInventoryV1SearchProtectedResourcesResponse : GTLRCollectionObject

/**
 *  A token that can be sent as `page_token` to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  Protected resources for this page.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRKmsinventory_GoogleCloudKmsInventoryV1ProtectedResource *> *protectedResources;

@end


/**
 *  A CryptoKey represents a logical key that can be used for cryptographic
 *  operations. A CryptoKey is made up of zero or more versions, which represent
 *  the actual key material used in cryptographic operations.
 */
@interface GTLRKmsinventory_GoogleCloudKmsV1CryptoKey : GTLRObject

/** Output only. The time at which this CryptoKey was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Immutable. The resource name of the backend environment where the key
 *  material for all CryptoKeyVersions associated with this CryptoKey reside and
 *  where all related cryptographic operations are performed. Only applicable if
 *  CryptoKeyVersions have a ProtectionLevel of EXTERNAL_VPC, with the resource
 *  name in the format `projects/ * /locations/ * /ekmConnections/ *`. Note,
 *  this list is non-exhaustive and may apply to additional ProtectionLevels in
 *  the future.
 */
@property(nonatomic, copy, nullable) NSString *cryptoKeyBackend;

/**
 *  Immutable. The period of time that versions of this key spend in the
 *  DESTROY_SCHEDULED state before transitioning to DESTROYED. If not specified
 *  at creation time, the default duration is 24 hours.
 */
@property(nonatomic, strong, nullable) GTLRDuration *destroyScheduledDuration;

/**
 *  Immutable. Whether this key may contain imported versions only.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *importOnly;

/**
 *  Labels with user-defined metadata. For more information, see [Labeling
 *  Keys](https://cloud.google.com/kms/docs/labeling-keys).
 */
@property(nonatomic, strong, nullable) GTLRKmsinventory_GoogleCloudKmsV1CryptoKey_Labels *labels;

/**
 *  Output only. The resource name for this CryptoKey in the format `projects/ *
 *  /locations/ * /keyRings/ * /cryptoKeys/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  At next_rotation_time, the Key Management Service will automatically: 1.
 *  Create a new version of this CryptoKey. 2. Mark the new version as primary.
 *  Key rotations performed manually via CreateCryptoKeyVersion and
 *  UpdateCryptoKeyPrimaryVersion do not affect next_rotation_time. Keys with
 *  purpose ENCRYPT_DECRYPT support automatic rotation. For other keys, this
 *  field must be omitted.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *nextRotationTime;

/**
 *  Output only. A copy of the "primary" CryptoKeyVersion that will be used by
 *  Encrypt when this CryptoKey is given in EncryptRequest.name. The CryptoKey's
 *  primary version can be updated via UpdateCryptoKeyPrimaryVersion. Keys with
 *  purpose ENCRYPT_DECRYPT may have a primary. For other keys, this field will
 *  be omitted.
 */
@property(nonatomic, strong, nullable) GTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion *primary;

/**
 *  Immutable. The immutable purpose of this CryptoKey.
 *
 *  Likely values:
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKey_Purpose_AsymmetricDecrypt
 *        CryptoKeys with this purpose may be used with AsymmetricDecrypt and
 *        GetPublicKey. (Value: "ASYMMETRIC_DECRYPT")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKey_Purpose_AsymmetricSign
 *        CryptoKeys with this purpose may be used with AsymmetricSign and
 *        GetPublicKey. (Value: "ASYMMETRIC_SIGN")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKey_Purpose_CryptoKeyPurposeUnspecified
 *        Not specified. (Value: "CRYPTO_KEY_PURPOSE_UNSPECIFIED")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKey_Purpose_EncryptDecrypt
 *        CryptoKeys with this purpose may be used with Encrypt and Decrypt.
 *        (Value: "ENCRYPT_DECRYPT")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKey_Purpose_Mac CryptoKeys
 *        with this purpose may be used with MacSign. (Value: "MAC")
 */
@property(nonatomic, copy, nullable) NSString *purpose;

/**
 *  next_rotation_time will be advanced by this period when the service
 *  automatically rotates a key. Must be at least 24 hours and at most 876,000
 *  hours. If rotation_period is set, next_rotation_time must also be set. Keys
 *  with purpose ENCRYPT_DECRYPT support automatic rotation. For other keys,
 *  this field must be omitted.
 */
@property(nonatomic, strong, nullable) GTLRDuration *rotationPeriod;

/**
 *  A template describing settings for new CryptoKeyVersion instances. The
 *  properties of new CryptoKeyVersion instances created by either
 *  CreateCryptoKeyVersion or auto-rotation are controlled by this template.
 */
@property(nonatomic, strong, nullable) GTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate *versionTemplate;

@end


/**
 *  Labels with user-defined metadata. For more information, see [Labeling
 *  Keys](https://cloud.google.com/kms/docs/labeling-keys).
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRKmsinventory_GoogleCloudKmsV1CryptoKey_Labels : GTLRObject
@end


/**
 *  A CryptoKeyVersion represents an individual cryptographic key, and the
 *  associated key material. An ENABLED version can be used for cryptographic
 *  operations. For security reasons, the raw cryptographic key material
 *  represented by a CryptoKeyVersion can never be viewed or exported. It can
 *  only be used to encrypt, decrypt, or sign data when an authorized user or
 *  application invokes Cloud KMS.
 */
@interface GTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion : GTLRObject

/**
 *  Output only. The CryptoKeyVersionAlgorithm that this CryptoKeyVersion
 *  supports.
 *
 *  Likely values:
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_CryptoKeyVersionAlgorithmUnspecified
 *        Not specified. (Value: "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_EcSignP256Sha256
 *        ECDSA on the NIST P-256 curve with a SHA256 digest. (Value:
 *        "EC_SIGN_P256_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_EcSignP384Sha384
 *        ECDSA on the NIST P-384 curve with a SHA384 digest. (Value:
 *        "EC_SIGN_P384_SHA384")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_EcSignSecp256k1Sha256
 *        ECDSA on the non-NIST secp256k1 curve. This curve is only supported
 *        for HSM protection level. (Value: "EC_SIGN_SECP256K1_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_ExternalSymmetricEncryption
 *        Algorithm representing symmetric encryption by an external key
 *        manager. (Value: "EXTERNAL_SYMMETRIC_ENCRYPTION")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_GoogleSymmetricEncryption
 *        Creates symmetric encryption keys. (Value:
 *        "GOOGLE_SYMMETRIC_ENCRYPTION")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_HmacSha1
 *        HMAC-SHA1 signing with a 160 bit key. (Value: "HMAC_SHA1")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_HmacSha224
 *        HMAC-SHA224 signing with a 224 bit key. (Value: "HMAC_SHA224")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_HmacSha256
 *        HMAC-SHA256 signing with a 256 bit key. (Value: "HMAC_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_HmacSha384
 *        HMAC-SHA384 signing with a 384 bit key. (Value: "HMAC_SHA384")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_HmacSha512
 *        HMAC-SHA512 signing with a 512 bit key. (Value: "HMAC_SHA512")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaDecryptOaep2048Sha1
 *        RSAES-OAEP 2048 bit key with a SHA1 digest. (Value:
 *        "RSA_DECRYPT_OAEP_2048_SHA1")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaDecryptOaep2048Sha256
 *        RSAES-OAEP 2048 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_2048_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaDecryptOaep3072Sha1
 *        RSAES-OAEP 3072 bit key with a SHA1 digest. (Value:
 *        "RSA_DECRYPT_OAEP_3072_SHA1")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaDecryptOaep3072Sha256
 *        RSAES-OAEP 3072 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_3072_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaDecryptOaep4096Sha1
 *        RSAES-OAEP 4096 bit key with a SHA1 digest. (Value:
 *        "RSA_DECRYPT_OAEP_4096_SHA1")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaDecryptOaep4096Sha256
 *        RSAES-OAEP 4096 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_4096_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaDecryptOaep4096Sha512
 *        RSAES-OAEP 4096 bit key with a SHA512 digest. (Value:
 *        "RSA_DECRYPT_OAEP_4096_SHA512")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignPkcs12048Sha256
 *        RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_2048_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignPkcs13072Sha256
 *        RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_3072_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignPkcs14096Sha256
 *        RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_4096_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignPkcs14096Sha512
 *        RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest. (Value:
 *        "RSA_SIGN_PKCS1_4096_SHA512")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignPss2048Sha256
 *        RSASSA-PSS 2048 bit key with a SHA256 digest. (Value:
 *        "RSA_SIGN_PSS_2048_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignPss3072Sha256
 *        RSASSA-PSS 3072 bit key with a SHA256 digest. (Value:
 *        "RSA_SIGN_PSS_3072_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignPss4096Sha256
 *        RSASSA-PSS 4096 bit key with a SHA256 digest. (Value:
 *        "RSA_SIGN_PSS_4096_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignPss4096Sha512
 *        RSASSA-PSS 4096 bit key with a SHA512 digest. (Value:
 *        "RSA_SIGN_PSS_4096_SHA512")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignRawPkcs12048
 *        RSASSA-PKCS1-v1_5 signing without encoding, with a 2048 bit key.
 *        (Value: "RSA_SIGN_RAW_PKCS1_2048")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignRawPkcs13072
 *        RSASSA-PKCS1-v1_5 signing without encoding, with a 3072 bit key.
 *        (Value: "RSA_SIGN_RAW_PKCS1_3072")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_Algorithm_RsaSignRawPkcs14096
 *        RSASSA-PKCS1-v1_5 signing without encoding, with a 4096 bit key.
 *        (Value: "RSA_SIGN_RAW_PKCS1_4096")
 */
@property(nonatomic, copy, nullable) NSString *algorithm;

/**
 *  Output only. Statement that was generated and signed by the HSM at key
 *  creation time. Use this statement to verify attributes of the key as stored
 *  on the HSM, independently of Google. Only provided for key versions with
 *  protection_level HSM.
 */
@property(nonatomic, strong, nullable) GTLRKmsinventory_GoogleCloudKmsV1KeyOperationAttestation *attestation;

/** Output only. The time at which this CryptoKeyVersion was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The time this CryptoKeyVersion's key material was destroyed.
 *  Only present if state is DESTROYED.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *destroyEventTime;

/**
 *  Output only. The time this CryptoKeyVersion's key material is scheduled for
 *  destruction. Only present if state is DESTROY_SCHEDULED.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *destroyTime;

/**
 *  ExternalProtectionLevelOptions stores a group of additional fields for
 *  configuring a CryptoKeyVersion that are specific to the EXTERNAL protection
 *  level and EXTERNAL_VPC protection levels.
 */
@property(nonatomic, strong, nullable) GTLRKmsinventory_GoogleCloudKmsV1ExternalProtectionLevelOptions *externalProtectionLevelOptions;

/**
 *  Output only. The time this CryptoKeyVersion's key material was generated.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *generateTime;

/**
 *  Output only. The root cause of the most recent import failure. Only present
 *  if state is IMPORT_FAILED.
 */
@property(nonatomic, copy, nullable) NSString *importFailureReason;

/**
 *  Output only. The name of the ImportJob used in the most recent import of
 *  this CryptoKeyVersion. Only present if the underlying key material was
 *  imported.
 */
@property(nonatomic, copy, nullable) NSString *importJob;

/**
 *  Output only. The time at which this CryptoKeyVersion's key material was most
 *  recently imported.
 */
@property(nonatomic, strong, nullable) GTLRDateTime *importTime;

/**
 *  Output only. The resource name for this CryptoKeyVersion in the format
 *  `projects/ * /locations/ * /keyRings/ * /cryptoKeys/ * /cryptoKeyVersions/
 *  *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The ProtectionLevel describing how crypto operations are
 *  performed with this CryptoKeyVersion.
 *
 *  Likely values:
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_ProtectionLevel_External
 *        Crypto operations are performed by an external key manager. (Value:
 *        "EXTERNAL")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_ProtectionLevel_ExternalVpc
 *        Crypto operations are performed in an EKM-over-VPC backend. (Value:
 *        "EXTERNAL_VPC")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_ProtectionLevel_Hsm
 *        Crypto operations are performed in a Hardware Security Module. (Value:
 *        "HSM")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_ProtectionLevel_ProtectionLevelUnspecified
 *        Not specified. (Value: "PROTECTION_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_ProtectionLevel_Software
 *        Crypto operations are performed in software. (Value: "SOFTWARE")
 */
@property(nonatomic, copy, nullable) NSString *protectionLevel;

/**
 *  Output only. Whether or not this key version is eligible for reimport, by
 *  being specified as a target in
 *  ImportCryptoKeyVersionRequest.crypto_key_version.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reimportEligible;

/**
 *  The current state of the CryptoKeyVersion.
 *
 *  Likely values:
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_State_CryptoKeyVersionStateUnspecified
 *        Not specified. (Value: "CRYPTO_KEY_VERSION_STATE_UNSPECIFIED")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_State_Destroyed
 *        This version is destroyed, and the key material is no longer stored.
 *        This version may only become ENABLED again if this version is
 *        reimport_eligible and the original key material is reimported with a
 *        call to KeyManagementService.ImportCryptoKeyVersion. (Value:
 *        "DESTROYED")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_State_DestroyScheduled
 *        This version is scheduled for destruction, and will be destroyed soon.
 *        Call RestoreCryptoKeyVersion to put it back into the DISABLED state.
 *        (Value: "DESTROY_SCHEDULED")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_State_Disabled
 *        This version may not be used, but the key material is still available,
 *        and the version can be placed back into the ENABLED state. (Value:
 *        "DISABLED")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_State_Enabled
 *        This version may be used for cryptographic operations. (Value:
 *        "ENABLED")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_State_ImportFailed
 *        This version was not imported successfully. It may not be used,
 *        enabled, disabled, or destroyed. The submitted key material has been
 *        discarded. Additional details can be found in
 *        CryptoKeyVersion.import_failure_reason. (Value: "IMPORT_FAILED")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_State_PendingGeneration
 *        This version is still being generated. It may not be used, enabled,
 *        disabled, or destroyed yet. Cloud KMS will automatically mark this
 *        version ENABLED as soon as the version is ready. (Value:
 *        "PENDING_GENERATION")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersion_State_PendingImport
 *        This version is still being imported. It may not be used, enabled,
 *        disabled, or destroyed yet. Cloud KMS will automatically mark this
 *        version ENABLED as soon as the version is ready. (Value:
 *        "PENDING_IMPORT")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  A CryptoKeyVersionTemplate specifies the properties to use when creating a
 *  new CryptoKeyVersion, either manually with CreateCryptoKeyVersion or
 *  automatically as a result of auto-rotation.
 */
@interface GTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate : GTLRObject

/**
 *  Required. Algorithm to use when creating a CryptoKeyVersion based on this
 *  template. For backwards compatibility, GOOGLE_SYMMETRIC_ENCRYPTION is
 *  implied if both this field is omitted and CryptoKey.purpose is
 *  ENCRYPT_DECRYPT.
 *
 *  Likely values:
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_CryptoKeyVersionAlgorithmUnspecified
 *        Not specified. (Value: "CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_EcSignP256Sha256
 *        ECDSA on the NIST P-256 curve with a SHA256 digest. (Value:
 *        "EC_SIGN_P256_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_EcSignP384Sha384
 *        ECDSA on the NIST P-384 curve with a SHA384 digest. (Value:
 *        "EC_SIGN_P384_SHA384")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_EcSignSecp256k1Sha256
 *        ECDSA on the non-NIST secp256k1 curve. This curve is only supported
 *        for HSM protection level. (Value: "EC_SIGN_SECP256K1_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_ExternalSymmetricEncryption
 *        Algorithm representing symmetric encryption by an external key
 *        manager. (Value: "EXTERNAL_SYMMETRIC_ENCRYPTION")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_GoogleSymmetricEncryption
 *        Creates symmetric encryption keys. (Value:
 *        "GOOGLE_SYMMETRIC_ENCRYPTION")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_HmacSha1
 *        HMAC-SHA1 signing with a 160 bit key. (Value: "HMAC_SHA1")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_HmacSha224
 *        HMAC-SHA224 signing with a 224 bit key. (Value: "HMAC_SHA224")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_HmacSha256
 *        HMAC-SHA256 signing with a 256 bit key. (Value: "HMAC_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_HmacSha384
 *        HMAC-SHA384 signing with a 384 bit key. (Value: "HMAC_SHA384")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_HmacSha512
 *        HMAC-SHA512 signing with a 512 bit key. (Value: "HMAC_SHA512")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep2048Sha1
 *        RSAES-OAEP 2048 bit key with a SHA1 digest. (Value:
 *        "RSA_DECRYPT_OAEP_2048_SHA1")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep2048Sha256
 *        RSAES-OAEP 2048 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_2048_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep3072Sha1
 *        RSAES-OAEP 3072 bit key with a SHA1 digest. (Value:
 *        "RSA_DECRYPT_OAEP_3072_SHA1")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep3072Sha256
 *        RSAES-OAEP 3072 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_3072_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep4096Sha1
 *        RSAES-OAEP 4096 bit key with a SHA1 digest. (Value:
 *        "RSA_DECRYPT_OAEP_4096_SHA1")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep4096Sha256
 *        RSAES-OAEP 4096 bit key with a SHA256 digest. (Value:
 *        "RSA_DECRYPT_OAEP_4096_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaDecryptOaep4096Sha512
 *        RSAES-OAEP 4096 bit key with a SHA512 digest. (Value:
 *        "RSA_DECRYPT_OAEP_4096_SHA512")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignPkcs12048Sha256
 *        RSASSA-PKCS1-v1_5 with a 2048 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_2048_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignPkcs13072Sha256
 *        RSASSA-PKCS1-v1_5 with a 3072 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_3072_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignPkcs14096Sha256
 *        RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA256 digest. (Value:
 *        "RSA_SIGN_PKCS1_4096_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignPkcs14096Sha512
 *        RSASSA-PKCS1-v1_5 with a 4096 bit key and a SHA512 digest. (Value:
 *        "RSA_SIGN_PKCS1_4096_SHA512")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignPss2048Sha256
 *        RSASSA-PSS 2048 bit key with a SHA256 digest. (Value:
 *        "RSA_SIGN_PSS_2048_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignPss3072Sha256
 *        RSASSA-PSS 3072 bit key with a SHA256 digest. (Value:
 *        "RSA_SIGN_PSS_3072_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignPss4096Sha256
 *        RSASSA-PSS 4096 bit key with a SHA256 digest. (Value:
 *        "RSA_SIGN_PSS_4096_SHA256")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignPss4096Sha512
 *        RSASSA-PSS 4096 bit key with a SHA512 digest. (Value:
 *        "RSA_SIGN_PSS_4096_SHA512")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignRawPkcs12048
 *        RSASSA-PKCS1-v1_5 signing without encoding, with a 2048 bit key.
 *        (Value: "RSA_SIGN_RAW_PKCS1_2048")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignRawPkcs13072
 *        RSASSA-PKCS1-v1_5 signing without encoding, with a 3072 bit key.
 *        (Value: "RSA_SIGN_RAW_PKCS1_3072")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_Algorithm_RsaSignRawPkcs14096
 *        RSASSA-PKCS1-v1_5 signing without encoding, with a 4096 bit key.
 *        (Value: "RSA_SIGN_RAW_PKCS1_4096")
 */
@property(nonatomic, copy, nullable) NSString *algorithm;

/**
 *  ProtectionLevel to use when creating a CryptoKeyVersion based on this
 *  template. Immutable. Defaults to SOFTWARE.
 *
 *  Likely values:
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_ProtectionLevel_External
 *        Crypto operations are performed by an external key manager. (Value:
 *        "EXTERNAL")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_ProtectionLevel_ExternalVpc
 *        Crypto operations are performed in an EKM-over-VPC backend. (Value:
 *        "EXTERNAL_VPC")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_ProtectionLevel_Hsm
 *        Crypto operations are performed in a Hardware Security Module. (Value:
 *        "HSM")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_ProtectionLevel_ProtectionLevelUnspecified
 *        Not specified. (Value: "PROTECTION_LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1CryptoKeyVersionTemplate_ProtectionLevel_Software
 *        Crypto operations are performed in software. (Value: "SOFTWARE")
 */
@property(nonatomic, copy, nullable) NSString *protectionLevel;

@end


/**
 *  ExternalProtectionLevelOptions stores a group of additional fields for
 *  configuring a CryptoKeyVersion that are specific to the EXTERNAL protection
 *  level and EXTERNAL_VPC protection levels.
 */
@interface GTLRKmsinventory_GoogleCloudKmsV1ExternalProtectionLevelOptions : GTLRObject

/**
 *  The path to the external key material on the EKM when using EkmConnection
 *  e.g., "v0/my/key". Set this field instead of external_key_uri when using an
 *  EkmConnection.
 */
@property(nonatomic, copy, nullable) NSString *ekmConnectionKeyPath;

/** The URI for an external resource that this CryptoKeyVersion represents. */
@property(nonatomic, copy, nullable) NSString *externalKeyUri;

@end


/**
 *  Contains an HSM-generated attestation about a key operation. For more
 *  information, see [Verifying attestations]
 *  (https://cloud.google.com/kms/docs/attest-key).
 */
@interface GTLRKmsinventory_GoogleCloudKmsV1KeyOperationAttestation : GTLRObject

/** Output only. The certificate chains needed to validate the attestation */
@property(nonatomic, strong, nullable) GTLRKmsinventory_GoogleCloudKmsV1KeyOperationAttestationCertificateChains *certChains;

/**
 *  Output only. The attestation data provided by the HSM when the key operation
 *  was performed.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *content;

/**
 *  Output only. The format of the attestation data.
 *
 *  Likely values:
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1KeyOperationAttestation_Format_AttestationFormatUnspecified
 *        Not specified. (Value: "ATTESTATION_FORMAT_UNSPECIFIED")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1KeyOperationAttestation_Format_CaviumV1Compressed
 *        Cavium HSM attestation compressed with gzip. Note that this format is
 *        defined by Cavium and subject to change at any time. See
 *        https://www.marvell.com/products/security-solutions/nitrox-hs-adapters/software-key-attestation.html.
 *        (Value: "CAVIUM_V1_COMPRESSED")
 *    @arg @c kGTLRKmsinventory_GoogleCloudKmsV1KeyOperationAttestation_Format_CaviumV2Compressed
 *        Cavium HSM attestation V2 compressed with gzip. This is a new format
 *        introduced in Cavium's version 3.2-08. (Value: "CAVIUM_V2_COMPRESSED")
 */
@property(nonatomic, copy, nullable) NSString *format;

@end


/**
 *  Certificate chains needed to verify the attestation. Certificates in chains
 *  are PEM-encoded and are ordered based on
 *  https://tools.ietf.org/html/rfc5246#section-7.4.2.
 */
@interface GTLRKmsinventory_GoogleCloudKmsV1KeyOperationAttestationCertificateChains : GTLRObject

/** Cavium certificate chain corresponding to the attestation. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *caviumCerts;

/** Google card certificate chain corresponding to the attestation. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *googleCardCerts;

/** Google partition certificate chain corresponding to the attestation. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *googlePartitionCerts;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
