// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   BigQuery Data Transfer API (bigquerydatatransfer/v1)
// Description:
//   Schedule queries or transfer external data from SaaS applications to Google
//   BigQuery on a regular basis.
// Documentation:
//   https://cloud.google.com/bigquery-transfer/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRBigQueryDataTransferObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// messageTypes

/**
 *  Error message.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryDataTransferMessageTypesError;
/**
 *  Informational message.
 *
 *  Value: "INFO"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryDataTransferMessageTypesInfo;
/**
 *  No severity specified.
 *
 *  Value: "MESSAGE_SEVERITY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryDataTransferMessageTypesMessageSeverityUnspecified;
/**
 *  Warning message.
 *
 *  Value: "WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryDataTransferMessageTypesWarning;

// ----------------------------------------------------------------------------
// runAttempt

/**
 *  Only latest run per day should be returned.
 *
 *  Value: "LATEST"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryDataTransferRunAttemptLatest;
/**
 *  All runs should be returned.
 *
 *  Value: "RUN_ATTEMPT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryDataTransferRunAttemptRunAttemptUnspecified;

// ----------------------------------------------------------------------------
// states

/**
 *  Data transfer is cancelled (6).
 *
 *  Value: "CANCELLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryDataTransferStatesCancelled;
/**
 *  Data transfer failed (5).
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryDataTransferStatesFailed;
/**
 *  Data transfer is scheduled and is waiting to be picked up by data transfer
 *  backend (2).
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryDataTransferStatesPending;
/**
 *  Data transfer is in progress (3).
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryDataTransferStatesRunning;
/**
 *  Data transfer completed successfully (4).
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryDataTransferStatesSucceeded;
/**
 *  State placeholder (0).
 *
 *  Value: "TRANSFER_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRBigQueryDataTransferStatesTransferStateUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other BigQuery Data Transfer query classes.
 */
@interface GTLRBigQueryDataTransferQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Returns true if valid credentials exist for the given data source and
 *  requesting user.
 *
 *  Method: bigquerydatatransfer.projects.dataSources.checkValidCreds
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsDataSourcesCheckValidCreds : GTLRBigQueryDataTransferQuery

/**
 *  Required. The data source in the form:
 *  `projects/{project_id}/dataSources/{data_source_id}` or
 *  `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_CheckValidCredsResponse.
 *
 *  Returns true if valid credentials exist for the given data source and
 *  requesting user.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_CheckValidCredsRequest to
 *    include in the query.
 *  @param name Required. The data source in the form:
 *    `projects/{project_id}/dataSources/{data_source_id}` or
 *    `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsDataSourcesCheckValidCreds
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_CheckValidCredsRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Retrieves a supported data source and returns its settings.
 *
 *  Method: bigquerydatatransfer.projects.dataSources.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsDataSourcesGet : GTLRBigQueryDataTransferQuery

/**
 *  Required. The field will contain name of the resource requested, for
 *  example: `projects/{project_id}/dataSources/{data_source_id}` or
 *  `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_DataSource.
 *
 *  Retrieves a supported data source and returns its settings.
 *
 *  @param name Required. The field will contain name of the resource requested,
 *    for example: `projects/{project_id}/dataSources/{data_source_id}` or
 *    `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsDataSourcesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists supported data sources and returns their settings.
 *
 *  Method: bigquerydatatransfer.projects.dataSources.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsDataSourcesList : GTLRBigQueryDataTransferQuery

/** Page size. The default page size is the maximum value of 1000 results. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Pagination token, which can be used to request a specific page of
 *  `ListDataSourcesRequest` list results. For multiple-page results,
 *  `ListDataSourcesResponse` outputs a `next_page` token, which can be used as
 *  the `page_token` value to request the next page of list results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The BigQuery project id for which data sources should be returned.
 *  Must be in the form: `projects/{project_id}` or
 *  `projects/{project_id}/locations/{location_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListDataSourcesResponse.
 *
 *  Lists supported data sources and returns their settings.
 *
 *  @param parent Required. The BigQuery project id for which data sources
 *    should be returned. Must be in the form: `projects/{project_id}` or
 *    `projects/{project_id}/locations/{location_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsDataSourcesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Enroll data sources in a user project. This allows users to create transfer
 *  configurations for these data sources. They will also appear in the
 *  ListDataSources RPC and as such, will appear in the [BigQuery
 *  UI](https://console.cloud.google.com/bigquery), and the documents can be
 *  found in the public guide for [BigQuery Web
 *  UI](https://cloud.google.com/bigquery/bigquery-web-ui) and [Data Transfer
 *  Service](https://cloud.google.com/bigquery/docs/working-with-transfers).
 *
 *  Method: bigquerydatatransfer.projects.enrollDataSources
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsEnrollDataSources : GTLRBigQueryDataTransferQuery

/** The name of the project resource in the form: `projects/{project_id}` */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_Empty.
 *
 *  Enroll data sources in a user project. This allows users to create transfer
 *  configurations for these data sources. They will also appear in the
 *  ListDataSources RPC and as such, will appear in the [BigQuery
 *  UI](https://console.cloud.google.com/bigquery), and the documents can be
 *  found in the public guide for [BigQuery Web
 *  UI](https://cloud.google.com/bigquery/bigquery-web-ui) and [Data Transfer
 *  Service](https://cloud.google.com/bigquery/docs/working-with-transfers).
 *
 *  @param object The @c GTLRBigQueryDataTransfer_EnrollDataSourcesRequest to
 *    include in the query.
 *  @param name The name of the project resource in the form:
 *    `projects/{project_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsEnrollDataSources
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_EnrollDataSourcesRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Returns true if valid credentials exist for the given data source and
 *  requesting user.
 *
 *  Method: bigquerydatatransfer.projects.locations.dataSources.checkValidCreds
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesCheckValidCreds : GTLRBigQueryDataTransferQuery

/**
 *  Required. The data source in the form:
 *  `projects/{project_id}/dataSources/{data_source_id}` or
 *  `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_CheckValidCredsResponse.
 *
 *  Returns true if valid credentials exist for the given data source and
 *  requesting user.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_CheckValidCredsRequest to
 *    include in the query.
 *  @param name Required. The data source in the form:
 *    `projects/{project_id}/dataSources/{data_source_id}` or
 *    `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesCheckValidCreds
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_CheckValidCredsRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Retrieves a supported data source and returns its settings.
 *
 *  Method: bigquerydatatransfer.projects.locations.dataSources.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesGet : GTLRBigQueryDataTransferQuery

/**
 *  Required. The field will contain name of the resource requested, for
 *  example: `projects/{project_id}/dataSources/{data_source_id}` or
 *  `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_DataSource.
 *
 *  Retrieves a supported data source and returns its settings.
 *
 *  @param name Required. The field will contain name of the resource requested,
 *    for example: `projects/{project_id}/dataSources/{data_source_id}` or
 *    `projects/{project_id}/locations/{location_id}/dataSources/{data_source_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists supported data sources and returns their settings.
 *
 *  Method: bigquerydatatransfer.projects.locations.dataSources.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesList : GTLRBigQueryDataTransferQuery

/** Page size. The default page size is the maximum value of 1000 results. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Pagination token, which can be used to request a specific page of
 *  `ListDataSourcesRequest` list results. For multiple-page results,
 *  `ListDataSourcesResponse` outputs a `next_page` token, which can be used as
 *  the `page_token` value to request the next page of list results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The BigQuery project id for which data sources should be returned.
 *  Must be in the form: `projects/{project_id}` or
 *  `projects/{project_id}/locations/{location_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListDataSourcesResponse.
 *
 *  Lists supported data sources and returns their settings.
 *
 *  @param parent Required. The BigQuery project id for which data sources
 *    should be returned. Must be in the form: `projects/{project_id}` or
 *    `projects/{project_id}/locations/{location_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsDataSourcesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Enroll data sources in a user project. This allows users to create transfer
 *  configurations for these data sources. They will also appear in the
 *  ListDataSources RPC and as such, will appear in the [BigQuery
 *  UI](https://console.cloud.google.com/bigquery), and the documents can be
 *  found in the public guide for [BigQuery Web
 *  UI](https://cloud.google.com/bigquery/bigquery-web-ui) and [Data Transfer
 *  Service](https://cloud.google.com/bigquery/docs/working-with-transfers).
 *
 *  Method: bigquerydatatransfer.projects.locations.enrollDataSources
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsEnrollDataSources : GTLRBigQueryDataTransferQuery

/** The name of the project resource in the form: `projects/{project_id}` */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_Empty.
 *
 *  Enroll data sources in a user project. This allows users to create transfer
 *  configurations for these data sources. They will also appear in the
 *  ListDataSources RPC and as such, will appear in the [BigQuery
 *  UI](https://console.cloud.google.com/bigquery), and the documents can be
 *  found in the public guide for [BigQuery Web
 *  UI](https://cloud.google.com/bigquery/bigquery-web-ui) and [Data Transfer
 *  Service](https://cloud.google.com/bigquery/docs/working-with-transfers).
 *
 *  @param object The @c GTLRBigQueryDataTransfer_EnrollDataSourcesRequest to
 *    include in the query.
 *  @param name The name of the project resource in the form:
 *    `projects/{project_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsEnrollDataSources
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_EnrollDataSourcesRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a location.
 *
 *  Method: bigquerydatatransfer.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsGet : GTLRBigQueryDataTransferQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: bigquerydatatransfer.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsList : GTLRBigQueryDataTransferQuery

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a new data transfer configuration.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsCreate : GTLRBigQueryDataTransferQuery

/**
 *  Optional OAuth2 authorization code to use with this transfer configuration.
 *  This is required only if `transferConfig.dataSourceId` is 'youtube_channel'
 *  and new credentials are needed, as indicated by `CheckValidCreds`. In order
 *  to obtain authorization_code, make a request to the following URL:
 *  https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=authorization_code&client_id=client_id&scope=data_source_scopes
 *  * The client_id is the OAuth client_id of the a data source as returned by
 *  ListDataSources method. * data_source_scopes are the scopes returned by
 *  ListDataSources method. Note that this should not be set when
 *  `service_account_name` is used to create the transfer config.
 */
@property(nonatomic, copy, nullable) NSString *authorizationCode;

/**
 *  Required. The BigQuery project id where the transfer configuration should be
 *  created. Must be in the format projects/{project_id}/locations/{location_id}
 *  or projects/{project_id}. If specified location and location of the
 *  destination bigquery dataset do not match - the request will fail.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional service account name. If this field is set, the transfer config
 *  will be created with this service account's credentials. It requires that
 *  the requesting user calling this API has permissions to act as this service
 *  account. Note that not all data sources support service account credentials
 *  when creating a transfer config. For the latest list of data sources, read
 *  about [using service
 *  accounts](https://cloud.google.com/bigquery-transfer/docs/use-service-accounts).
 */
@property(nonatomic, copy, nullable) NSString *serviceAccountName;

/**
 *  Optional version info. This is required only if
 *  `transferConfig.dataSourceId` is not 'youtube_channel' and new credentials
 *  are needed, as indicated by `CheckValidCreds`. In order to obtain version
 *  info, make a request to the following URL:
 *  https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=version_info&client_id=client_id&scope=data_source_scopes
 *  * The client_id is the OAuth client_id of the a data source as returned by
 *  ListDataSources method. * data_source_scopes are the scopes returned by
 *  ListDataSources method. Note that this should not be set when
 *  `service_account_name` is used to create the transfer config.
 */
@property(nonatomic, copy, nullable) NSString *versionInfo;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_TransferConfig.
 *
 *  Creates a new data transfer configuration.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_TransferConfig to include in
 *    the query.
 *  @param parent Required. The BigQuery project id where the transfer
 *    configuration should be created. Must be in the format
 *    projects/{project_id}/locations/{location_id} or projects/{project_id}. If
 *    specified location and location of the destination bigquery dataset do not
 *    match - the request will fail.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_TransferConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a data transfer configuration, including any associated transfer
 *  runs and logs.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsDelete : GTLRBigQueryDataTransferQuery

/**
 *  Required. The field will contain name of the resource requested, for
 *  example: `projects/{project_id}/transferConfigs/{config_id}` or
 *  `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_Empty.
 *
 *  Deletes a data transfer configuration, including any associated transfer
 *  runs and logs.
 *
 *  @param name Required. The field will contain name of the resource requested,
 *    for example: `projects/{project_id}/transferConfigs/{config_id}` or
 *    `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about a data transfer config.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsGet : GTLRBigQueryDataTransferQuery

/**
 *  Required. The field will contain name of the resource requested, for
 *  example: `projects/{project_id}/transferConfigs/{config_id}` or
 *  `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_TransferConfig.
 *
 *  Returns information about a data transfer config.
 *
 *  @param name Required. The field will contain name of the resource requested,
 *    for example: `projects/{project_id}/transferConfigs/{config_id}` or
 *    `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about all transfer configs owned by a project in the
 *  specified location.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsList : GTLRBigQueryDataTransferQuery

/**
 *  When specified, only configurations of requested data sources are returned.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dataSourceIds;

/** Page size. The default page size is the maximum value of 1000 results. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Pagination token, which can be used to request a specific page of
 *  `ListTransfersRequest` list results. For multiple-page results,
 *  `ListTransfersResponse` outputs a `next_page` token, which can be used as
 *  the `page_token` value to request the next page of list results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The BigQuery project id for which transfer configs should be
 *  returned: `projects/{project_id}` or
 *  `projects/{project_id}/locations/{location_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListTransferConfigsResponse.
 *
 *  Returns information about all transfer configs owned by a project in the
 *  specified location.
 *
 *  @param parent Required. The BigQuery project id for which transfer configs
 *    should be returned: `projects/{project_id}` or
 *    `projects/{project_id}/locations/{location_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a data transfer configuration. All fields must be set, even if they
 *  are not updated.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsPatch : GTLRBigQueryDataTransferQuery

/**
 *  Optional OAuth2 authorization code to use with this transfer configuration.
 *  This is required only if `transferConfig.dataSourceId` is 'youtube_channel'
 *  and new credentials are needed, as indicated by `CheckValidCreds`. In order
 *  to obtain authorization_code, make a request to the following URL:
 *  https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=authorization_code&client_id=client_id&scope=data_source_scopes
 *  * The client_id is the OAuth client_id of the a data source as returned by
 *  ListDataSources method. * data_source_scopes are the scopes returned by
 *  ListDataSources method. Note that this should not be set when
 *  `service_account_name` is used to update the transfer config.
 */
@property(nonatomic, copy, nullable) NSString *authorizationCode;

/**
 *  The resource name of the transfer config. Transfer config names have the
 *  form `projects/{project_id}/locations/{region}/transferConfigs/{config_id}`.
 *  Where `config_id` is usually a uuid, even though it is not guaranteed or
 *  required. The name is ignored when creating a transfer config.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional service account name. If this field is set, the transfer config
 *  will be created with this service account's credentials. It requires that
 *  the requesting user calling this API has permissions to act as this service
 *  account. Note that not all data sources support service account credentials
 *  when creating a transfer config. For the latest list of data sources, read
 *  about [using service
 *  accounts](https://cloud.google.com/bigquery-transfer/docs/use-service-accounts).
 */
@property(nonatomic, copy, nullable) NSString *serviceAccountName;

/**
 *  Required. Required list of fields to be updated in this request.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Optional version info. This is required only if
 *  `transferConfig.dataSourceId` is not 'youtube_channel' and new credentials
 *  are needed, as indicated by `CheckValidCreds`. In order to obtain version
 *  info, make a request to the following URL:
 *  https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=version_info&client_id=client_id&scope=data_source_scopes
 *  * The client_id is the OAuth client_id of the a data source as returned by
 *  ListDataSources method. * data_source_scopes are the scopes returned by
 *  ListDataSources method. Note that this should not be set when
 *  `service_account_name` is used to update the transfer config.
 */
@property(nonatomic, copy, nullable) NSString *versionInfo;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_TransferConfig.
 *
 *  Updates a data transfer configuration. All fields must be set, even if they
 *  are not updated.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_TransferConfig to include in
 *    the query.
 *  @param name The resource name of the transfer config. Transfer config names
 *    have the form
 *    `projects/{project_id}/locations/{region}/transferConfigs/{config_id}`.
 *    Where `config_id` is usually a uuid, even though it is not guaranteed or
 *    required. The name is ignored when creating a transfer config.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_TransferConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes the specified transfer run.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.runs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsDelete : GTLRBigQueryDataTransferQuery

/**
 *  Required. The field will contain name of the resource requested, for
 *  example: `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
 *  or
 *  `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_Empty.
 *
 *  Deletes the specified transfer run.
 *
 *  @param name Required. The field will contain name of the resource requested,
 *    for example:
 *    `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
 *    `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about the particular transfer run.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.runs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsGet : GTLRBigQueryDataTransferQuery

/**
 *  Required. The field will contain name of the resource requested, for
 *  example: `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
 *  or
 *  `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_TransferRun.
 *
 *  Returns information about the particular transfer run.
 *
 *  @param name Required. The field will contain name of the resource requested,
 *    for example:
 *    `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
 *    `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about running and completed transfer runs.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.runs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsList : GTLRBigQueryDataTransferQuery

/** Page size. The default page size is the maximum value of 1000 results. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Pagination token, which can be used to request a specific page of
 *  `ListTransferRunsRequest` list results. For multiple-page results,
 *  `ListTransferRunsResponse` outputs a `next_page` token, which can be used as
 *  the `page_token` value to request the next page of list results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of transfer configuration for which transfer runs should be
 *  retrieved. Format of transfer configuration resource name is:
 *  `projects/{project_id}/transferConfigs/{config_id}` or
 *  `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Indicates how run attempts are to be pulled.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransferRunAttemptRunAttemptUnspecified All runs
 *        should be returned. (Value: "RUN_ATTEMPT_UNSPECIFIED")
 *    @arg @c kGTLRBigQueryDataTransferRunAttemptLatest Only latest run per day
 *        should be returned. (Value: "LATEST")
 */
@property(nonatomic, copy, nullable) NSString *runAttempt;

/**
 *  When specified, only transfer runs with requested states are returned.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransferStatesTransferStateUnspecified State
 *        placeholder (0). (Value: "TRANSFER_STATE_UNSPECIFIED")
 *    @arg @c kGTLRBigQueryDataTransferStatesPending Data transfer is scheduled
 *        and is waiting to be picked up by data transfer backend (2). (Value:
 *        "PENDING")
 *    @arg @c kGTLRBigQueryDataTransferStatesRunning Data transfer is in
 *        progress (3). (Value: "RUNNING")
 *    @arg @c kGTLRBigQueryDataTransferStatesSucceeded Data transfer completed
 *        successfully (4). (Value: "SUCCEEDED")
 *    @arg @c kGTLRBigQueryDataTransferStatesFailed Data transfer failed (5).
 *        (Value: "FAILED")
 *    @arg @c kGTLRBigQueryDataTransferStatesCancelled Data transfer is
 *        cancelled (6). (Value: "CANCELLED")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *states;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListTransferRunsResponse.
 *
 *  Returns information about running and completed transfer runs.
 *
 *  @param parent Required. Name of transfer configuration for which transfer
 *    runs should be retrieved. Format of transfer configuration resource name
 *    is: `projects/{project_id}/transferConfigs/{config_id}` or
 *    `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Returns log messages for the transfer run.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.runs.transferLogs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsTransferLogsList : GTLRBigQueryDataTransferQuery

/**
 *  Message types to return. If not populated - INFO, WARNING and ERROR messages
 *  are returned.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransferMessageTypesMessageSeverityUnspecified No
 *        severity specified. (Value: "MESSAGE_SEVERITY_UNSPECIFIED")
 *    @arg @c kGTLRBigQueryDataTransferMessageTypesInfo Informational message.
 *        (Value: "INFO")
 *    @arg @c kGTLRBigQueryDataTransferMessageTypesWarning Warning message.
 *        (Value: "WARNING")
 *    @arg @c kGTLRBigQueryDataTransferMessageTypesError Error message. (Value:
 *        "ERROR")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *messageTypes;

/** Page size. The default page size is the maximum value of 1000 results. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Pagination token, which can be used to request a specific page of
 *  `ListTransferLogsRequest` list results. For multiple-page results,
 *  `ListTransferLogsResponse` outputs a `next_page` token, which can be used as
 *  the `page_token` value to request the next page of list results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Transfer run name in the form:
 *  `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
 *  `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListTransferLogsResponse.
 *
 *  Returns log messages for the transfer run.
 *
 *  @param parent Required. Transfer run name in the form:
 *    `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
 *    `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsRunsTransferLogsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates transfer runs for a time range [start_time, end_time]. For each date
 *  - or whatever granularity the data source supports - in the range, one
 *  transfer run is created. Note that runs are created per UTC time in the time
 *  range. DEPRECATED: use StartManualTransferRuns instead.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.scheduleRuns
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsScheduleRuns : GTLRBigQueryDataTransferQuery

/**
 *  Required. Transfer configuration name in the form:
 *  `projects/{project_id}/transferConfigs/{config_id}` or
 *  `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ScheduleTransferRunsResponse.
 *
 *  Creates transfer runs for a time range [start_time, end_time]. For each date
 *  - or whatever granularity the data source supports - in the range, one
 *  transfer run is created. Note that runs are created per UTC time in the time
 *  range. DEPRECATED: use StartManualTransferRuns instead.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_ScheduleTransferRunsRequest to
 *    include in the query.
 *  @param parent Required. Transfer configuration name in the form:
 *    `projects/{project_id}/transferConfigs/{config_id}` or
 *    `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsScheduleRuns
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_ScheduleTransferRunsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Start manual transfer runs to be executed now with schedule_time equal to
 *  current time. The transfer runs can be created for a time range where the
 *  run_time is between start_time (inclusive) and end_time (exclusive), or for
 *  a specific run_time.
 *
 *  Method: bigquerydatatransfer.projects.locations.transferConfigs.startManualRuns
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsStartManualRuns : GTLRBigQueryDataTransferQuery

/**
 *  Transfer configuration name in the form:
 *  `projects/{project_id}/transferConfigs/{config_id}` or
 *  `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_StartManualTransferRunsResponse.
 *
 *  Start manual transfer runs to be executed now with schedule_time equal to
 *  current time. The transfer runs can be created for a time range where the
 *  run_time is between start_time (inclusive) and end_time (exclusive), or for
 *  a specific run_time.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_StartManualTransferRunsRequest
 *    to include in the query.
 *  @param parent Transfer configuration name in the form:
 *    `projects/{project_id}/transferConfigs/{config_id}` or
 *    `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsLocationsTransferConfigsStartManualRuns
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_StartManualTransferRunsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Creates a new data transfer configuration.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsCreate : GTLRBigQueryDataTransferQuery

/**
 *  Optional OAuth2 authorization code to use with this transfer configuration.
 *  This is required only if `transferConfig.dataSourceId` is 'youtube_channel'
 *  and new credentials are needed, as indicated by `CheckValidCreds`. In order
 *  to obtain authorization_code, make a request to the following URL:
 *  https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=authorization_code&client_id=client_id&scope=data_source_scopes
 *  * The client_id is the OAuth client_id of the a data source as returned by
 *  ListDataSources method. * data_source_scopes are the scopes returned by
 *  ListDataSources method. Note that this should not be set when
 *  `service_account_name` is used to create the transfer config.
 */
@property(nonatomic, copy, nullable) NSString *authorizationCode;

/**
 *  Required. The BigQuery project id where the transfer configuration should be
 *  created. Must be in the format projects/{project_id}/locations/{location_id}
 *  or projects/{project_id}. If specified location and location of the
 *  destination bigquery dataset do not match - the request will fail.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional service account name. If this field is set, the transfer config
 *  will be created with this service account's credentials. It requires that
 *  the requesting user calling this API has permissions to act as this service
 *  account. Note that not all data sources support service account credentials
 *  when creating a transfer config. For the latest list of data sources, read
 *  about [using service
 *  accounts](https://cloud.google.com/bigquery-transfer/docs/use-service-accounts).
 */
@property(nonatomic, copy, nullable) NSString *serviceAccountName;

/**
 *  Optional version info. This is required only if
 *  `transferConfig.dataSourceId` is not 'youtube_channel' and new credentials
 *  are needed, as indicated by `CheckValidCreds`. In order to obtain version
 *  info, make a request to the following URL:
 *  https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=version_info&client_id=client_id&scope=data_source_scopes
 *  * The client_id is the OAuth client_id of the a data source as returned by
 *  ListDataSources method. * data_source_scopes are the scopes returned by
 *  ListDataSources method. Note that this should not be set when
 *  `service_account_name` is used to create the transfer config.
 */
@property(nonatomic, copy, nullable) NSString *versionInfo;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_TransferConfig.
 *
 *  Creates a new data transfer configuration.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_TransferConfig to include in
 *    the query.
 *  @param parent Required. The BigQuery project id where the transfer
 *    configuration should be created. Must be in the format
 *    projects/{project_id}/locations/{location_id} or projects/{project_id}. If
 *    specified location and location of the destination bigquery dataset do not
 *    match - the request will fail.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_TransferConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a data transfer configuration, including any associated transfer
 *  runs and logs.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsDelete : GTLRBigQueryDataTransferQuery

/**
 *  Required. The field will contain name of the resource requested, for
 *  example: `projects/{project_id}/transferConfigs/{config_id}` or
 *  `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_Empty.
 *
 *  Deletes a data transfer configuration, including any associated transfer
 *  runs and logs.
 *
 *  @param name Required. The field will contain name of the resource requested,
 *    for example: `projects/{project_id}/transferConfigs/{config_id}` or
 *    `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about a data transfer config.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsGet : GTLRBigQueryDataTransferQuery

/**
 *  Required. The field will contain name of the resource requested, for
 *  example: `projects/{project_id}/transferConfigs/{config_id}` or
 *  `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_TransferConfig.
 *
 *  Returns information about a data transfer config.
 *
 *  @param name Required. The field will contain name of the resource requested,
 *    for example: `projects/{project_id}/transferConfigs/{config_id}` or
 *    `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about all transfer configs owned by a project in the
 *  specified location.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsList : GTLRBigQueryDataTransferQuery

/**
 *  When specified, only configurations of requested data sources are returned.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dataSourceIds;

/** Page size. The default page size is the maximum value of 1000 results. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Pagination token, which can be used to request a specific page of
 *  `ListTransfersRequest` list results. For multiple-page results,
 *  `ListTransfersResponse` outputs a `next_page` token, which can be used as
 *  the `page_token` value to request the next page of list results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The BigQuery project id for which transfer configs should be
 *  returned: `projects/{project_id}` or
 *  `projects/{project_id}/locations/{location_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListTransferConfigsResponse.
 *
 *  Returns information about all transfer configs owned by a project in the
 *  specified location.
 *
 *  @param parent Required. The BigQuery project id for which transfer configs
 *    should be returned: `projects/{project_id}` or
 *    `projects/{project_id}/locations/{location_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a data transfer configuration. All fields must be set, even if they
 *  are not updated.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsPatch : GTLRBigQueryDataTransferQuery

/**
 *  Optional OAuth2 authorization code to use with this transfer configuration.
 *  This is required only if `transferConfig.dataSourceId` is 'youtube_channel'
 *  and new credentials are needed, as indicated by `CheckValidCreds`. In order
 *  to obtain authorization_code, make a request to the following URL:
 *  https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=authorization_code&client_id=client_id&scope=data_source_scopes
 *  * The client_id is the OAuth client_id of the a data source as returned by
 *  ListDataSources method. * data_source_scopes are the scopes returned by
 *  ListDataSources method. Note that this should not be set when
 *  `service_account_name` is used to update the transfer config.
 */
@property(nonatomic, copy, nullable) NSString *authorizationCode;

/**
 *  The resource name of the transfer config. Transfer config names have the
 *  form `projects/{project_id}/locations/{region}/transferConfigs/{config_id}`.
 *  Where `config_id` is usually a uuid, even though it is not guaranteed or
 *  required. The name is ignored when creating a transfer config.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional service account name. If this field is set, the transfer config
 *  will be created with this service account's credentials. It requires that
 *  the requesting user calling this API has permissions to act as this service
 *  account. Note that not all data sources support service account credentials
 *  when creating a transfer config. For the latest list of data sources, read
 *  about [using service
 *  accounts](https://cloud.google.com/bigquery-transfer/docs/use-service-accounts).
 */
@property(nonatomic, copy, nullable) NSString *serviceAccountName;

/**
 *  Required. Required list of fields to be updated in this request.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Optional version info. This is required only if
 *  `transferConfig.dataSourceId` is not 'youtube_channel' and new credentials
 *  are needed, as indicated by `CheckValidCreds`. In order to obtain version
 *  info, make a request to the following URL:
 *  https://www.gstatic.com/bigquerydatatransfer/oauthz/auth?redirect_uri=urn:ietf:wg:oauth:2.0:oob&response_type=version_info&client_id=client_id&scope=data_source_scopes
 *  * The client_id is the OAuth client_id of the a data source as returned by
 *  ListDataSources method. * data_source_scopes are the scopes returned by
 *  ListDataSources method. Note that this should not be set when
 *  `service_account_name` is used to update the transfer config.
 */
@property(nonatomic, copy, nullable) NSString *versionInfo;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_TransferConfig.
 *
 *  Updates a data transfer configuration. All fields must be set, even if they
 *  are not updated.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_TransferConfig to include in
 *    the query.
 *  @param name The resource name of the transfer config. Transfer config names
 *    have the form
 *    `projects/{project_id}/locations/{region}/transferConfigs/{config_id}`.
 *    Where `config_id` is usually a uuid, even though it is not guaranteed or
 *    required. The name is ignored when creating a transfer config.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsPatch
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_TransferConfig *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes the specified transfer run.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.runs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsDelete : GTLRBigQueryDataTransferQuery

/**
 *  Required. The field will contain name of the resource requested, for
 *  example: `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
 *  or
 *  `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_Empty.
 *
 *  Deletes the specified transfer run.
 *
 *  @param name Required. The field will contain name of the resource requested,
 *    for example:
 *    `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
 *    `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about the particular transfer run.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.runs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsGet : GTLRBigQueryDataTransferQuery

/**
 *  Required. The field will contain name of the resource requested, for
 *  example: `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}`
 *  or
 *  `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_TransferRun.
 *
 *  Returns information about the particular transfer run.
 *
 *  @param name Required. The field will contain name of the resource requested,
 *    for example:
 *    `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
 *    `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Returns information about running and completed transfer runs.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.runs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsList : GTLRBigQueryDataTransferQuery

/** Page size. The default page size is the maximum value of 1000 results. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Pagination token, which can be used to request a specific page of
 *  `ListTransferRunsRequest` list results. For multiple-page results,
 *  `ListTransferRunsResponse` outputs a `next_page` token, which can be used as
 *  the `page_token` value to request the next page of list results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Name of transfer configuration for which transfer runs should be
 *  retrieved. Format of transfer configuration resource name is:
 *  `projects/{project_id}/transferConfigs/{config_id}` or
 *  `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Indicates how run attempts are to be pulled.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransferRunAttemptRunAttemptUnspecified All runs
 *        should be returned. (Value: "RUN_ATTEMPT_UNSPECIFIED")
 *    @arg @c kGTLRBigQueryDataTransferRunAttemptLatest Only latest run per day
 *        should be returned. (Value: "LATEST")
 */
@property(nonatomic, copy, nullable) NSString *runAttempt;

/**
 *  When specified, only transfer runs with requested states are returned.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransferStatesTransferStateUnspecified State
 *        placeholder (0). (Value: "TRANSFER_STATE_UNSPECIFIED")
 *    @arg @c kGTLRBigQueryDataTransferStatesPending Data transfer is scheduled
 *        and is waiting to be picked up by data transfer backend (2). (Value:
 *        "PENDING")
 *    @arg @c kGTLRBigQueryDataTransferStatesRunning Data transfer is in
 *        progress (3). (Value: "RUNNING")
 *    @arg @c kGTLRBigQueryDataTransferStatesSucceeded Data transfer completed
 *        successfully (4). (Value: "SUCCEEDED")
 *    @arg @c kGTLRBigQueryDataTransferStatesFailed Data transfer failed (5).
 *        (Value: "FAILED")
 *    @arg @c kGTLRBigQueryDataTransferStatesCancelled Data transfer is
 *        cancelled (6). (Value: "CANCELLED")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *states;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListTransferRunsResponse.
 *
 *  Returns information about running and completed transfer runs.
 *
 *  @param parent Required. Name of transfer configuration for which transfer
 *    runs should be retrieved. Format of transfer configuration resource name
 *    is: `projects/{project_id}/transferConfigs/{config_id}` or
 *    `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Returns log messages for the transfer run.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.runs.transferLogs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatformReadOnly
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsTransferLogsList : GTLRBigQueryDataTransferQuery

/**
 *  Message types to return. If not populated - INFO, WARNING and ERROR messages
 *  are returned.
 *
 *  Likely values:
 *    @arg @c kGTLRBigQueryDataTransferMessageTypesMessageSeverityUnspecified No
 *        severity specified. (Value: "MESSAGE_SEVERITY_UNSPECIFIED")
 *    @arg @c kGTLRBigQueryDataTransferMessageTypesInfo Informational message.
 *        (Value: "INFO")
 *    @arg @c kGTLRBigQueryDataTransferMessageTypesWarning Warning message.
 *        (Value: "WARNING")
 *    @arg @c kGTLRBigQueryDataTransferMessageTypesError Error message. (Value:
 *        "ERROR")
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *messageTypes;

/** Page size. The default page size is the maximum value of 1000 results. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Pagination token, which can be used to request a specific page of
 *  `ListTransferLogsRequest` list results. For multiple-page results,
 *  `ListTransferLogsResponse` outputs a `next_page` token, which can be used as
 *  the `page_token` value to request the next page of list results.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. Transfer run name in the form:
 *  `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
 *  `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ListTransferLogsResponse.
 *
 *  Returns log messages for the transfer run.
 *
 *  @param parent Required. Transfer run name in the form:
 *    `projects/{project_id}/transferConfigs/{config_id}/runs/{run_id}` or
 *    `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}/runs/{run_id}`
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsRunsTransferLogsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates transfer runs for a time range [start_time, end_time]. For each date
 *  - or whatever granularity the data source supports - in the range, one
 *  transfer run is created. Note that runs are created per UTC time in the time
 *  range. DEPRECATED: use StartManualTransferRuns instead.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.scheduleRuns
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsScheduleRuns : GTLRBigQueryDataTransferQuery

/**
 *  Required. Transfer configuration name in the form:
 *  `projects/{project_id}/transferConfigs/{config_id}` or
 *  `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_ScheduleTransferRunsResponse.
 *
 *  Creates transfer runs for a time range [start_time, end_time]. For each date
 *  - or whatever granularity the data source supports - in the range, one
 *  transfer run is created. Note that runs are created per UTC time in the time
 *  range. DEPRECATED: use StartManualTransferRuns instead.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_ScheduleTransferRunsRequest to
 *    include in the query.
 *  @param parent Required. Transfer configuration name in the form:
 *    `projects/{project_id}/transferConfigs/{config_id}` or
 *    `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsScheduleRuns
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_ScheduleTransferRunsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Start manual transfer runs to be executed now with schedule_time equal to
 *  current time. The transfer runs can be created for a time range where the
 *  run_time is between start_time (inclusive) and end_time (exclusive), or for
 *  a specific run_time.
 *
 *  Method: bigquerydatatransfer.projects.transferConfigs.startManualRuns
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeBigQueryDataTransferBigquery
 *    @c kGTLRAuthScopeBigQueryDataTransferCloudPlatform
 */
@interface GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsStartManualRuns : GTLRBigQueryDataTransferQuery

/**
 *  Transfer configuration name in the form:
 *  `projects/{project_id}/transferConfigs/{config_id}` or
 *  `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRBigQueryDataTransfer_StartManualTransferRunsResponse.
 *
 *  Start manual transfer runs to be executed now with schedule_time equal to
 *  current time. The transfer runs can be created for a time range where the
 *  run_time is between start_time (inclusive) and end_time (exclusive), or for
 *  a specific run_time.
 *
 *  @param object The @c GTLRBigQueryDataTransfer_StartManualTransferRunsRequest
 *    to include in the query.
 *  @param parent Transfer configuration name in the form:
 *    `projects/{project_id}/transferConfigs/{config_id}` or
 *    `projects/{project_id}/locations/{location_id}/transferConfigs/{config_id}`.
 *
 *  @return GTLRBigQueryDataTransferQuery_ProjectsTransferConfigsStartManualRuns
 */
+ (instancetype)queryWithObject:(GTLRBigQueryDataTransfer_StartManualTransferRunsRequest *)object
                         parent:(NSString *)parent;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
