// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Certificate Manager API (certificatemanager/v1)
// Documentation:
//   https://cloud.google.com/certificate-manager

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRCertificateManager_AuthorizationAttemptInfo;
@class GTLRCertificateManager_Certificate;
@class GTLRCertificateManager_Certificate_Labels;
@class GTLRCertificateManager_CertificateAuthorityConfig;
@class GTLRCertificateManager_CertificateAuthorityServiceConfig;
@class GTLRCertificateManager_CertificateIssuanceConfig;
@class GTLRCertificateManager_CertificateIssuanceConfig_Labels;
@class GTLRCertificateManager_CertificateMap;
@class GTLRCertificateManager_CertificateMap_Labels;
@class GTLRCertificateManager_CertificateMapEntry;
@class GTLRCertificateManager_CertificateMapEntry_Labels;
@class GTLRCertificateManager_DnsAuthorization;
@class GTLRCertificateManager_DnsAuthorization_Labels;
@class GTLRCertificateManager_DnsResourceRecord;
@class GTLRCertificateManager_GclbTarget;
@class GTLRCertificateManager_IpConfig;
@class GTLRCertificateManager_Location;
@class GTLRCertificateManager_Location_Labels;
@class GTLRCertificateManager_Location_Metadata;
@class GTLRCertificateManager_ManagedCertificate;
@class GTLRCertificateManager_Operation;
@class GTLRCertificateManager_Operation_Metadata;
@class GTLRCertificateManager_Operation_Response;
@class GTLRCertificateManager_ProvisioningIssue;
@class GTLRCertificateManager_SelfManagedCertificate;
@class GTLRCertificateManager_Status;
@class GTLRCertificateManager_Status_Details_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRCertificateManager_AuthorizationAttemptInfo.failureReason

/**
 *  Certificate issuance forbidden by an explicit CAA record for the domain or a
 *  failure to check CAA records for the domain.
 *
 *  Value: "CAA"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_AuthorizationAttemptInfo_FailureReason_Caa;
/**
 *  There was a problem with the user's DNS or load balancer configuration for
 *  this domain.
 *
 *  Value: "CONFIG"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_AuthorizationAttemptInfo_FailureReason_Config;
/** Value: "FAILURE_REASON_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_AuthorizationAttemptInfo_FailureReason_FailureReasonUnspecified;
/**
 *  Reached a CA or internal rate-limit for the domain, e.g. for certificates
 *  per top-level private domain.
 *
 *  Value: "RATE_LIMITED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_AuthorizationAttemptInfo_FailureReason_RateLimited;

// ----------------------------------------------------------------------------
// GTLRCertificateManager_AuthorizationAttemptInfo.state

/**
 *  A managed certificate can be provisioned, no issues for this domain.
 *
 *  Value: "AUTHORIZED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_AuthorizationAttemptInfo_State_Authorized;
/**
 *  Certificate provisioning for this domain is under way. GCP will attempt to
 *  authorize the domain.
 *
 *  Value: "AUTHORIZING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_AuthorizationAttemptInfo_State_Authorizing;
/**
 *  Attempt to authorize the domain failed. This prevents the Managed
 *  Certificate from being issued. See `failure_reason` and `details` fields for
 *  more information.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_AuthorizationAttemptInfo_State_Failed;
/** Value: "STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_AuthorizationAttemptInfo_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCertificateManager_Certificate.scope

/**
 *  Certificates with default scope are served from core Google data centers. If
 *  unsure, choose this option.
 *
 *  Value: "DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_Certificate_Scope_Default;
/**
 *  Certificates with scope EDGE_CACHE are special-purposed certificates, served
 *  from non-core Google data centers.
 *
 *  Value: "EDGE_CACHE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_Certificate_Scope_EdgeCache;

// ----------------------------------------------------------------------------
// GTLRCertificateManager_CertificateIssuanceConfig.keyAlgorithm

/**
 *  Specifies ECDSA with curve P256.
 *
 *  Value: "ECDSA_P256"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_CertificateIssuanceConfig_KeyAlgorithm_EcdsaP256;
/**
 *  Unspecified key algorithm.
 *
 *  Value: "KEY_ALGORITHM_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_CertificateIssuanceConfig_KeyAlgorithm_KeyAlgorithmUnspecified;
/**
 *  Specifies RSA with a 2048-bit modulus.
 *
 *  Value: "RSA_2048"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_CertificateIssuanceConfig_KeyAlgorithm_Rsa2048;

// ----------------------------------------------------------------------------
// GTLRCertificateManager_CertificateMapEntry.matcher

/**
 *  A matcher has't been recognized.
 *
 *  Value: "MATCHER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_CertificateMapEntry_Matcher_MatcherUnspecified;
/**
 *  A primary certificate that is served when SNI wasn't specified in the
 *  request or SNI couldn't be found in the map.
 *
 *  Value: "PRIMARY"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_CertificateMapEntry_Matcher_Primary;

// ----------------------------------------------------------------------------
// GTLRCertificateManager_CertificateMapEntry.state

/**
 *  The configuration is serving.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_CertificateMapEntry_State_Active;
/**
 *  Update is in progress. Some frontends may serve this configuration.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_CertificateMapEntry_State_Pending;
/**
 *  The status is undefined.
 *
 *  Value: "SERVING_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_CertificateMapEntry_State_ServingStateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCertificateManager_ManagedCertificate.state

/**
 *  The certificate management is working, and a certificate has been
 *  provisioned.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_ManagedCertificate_State_Active;
/**
 *  Multiple certificate provisioning attempts failed and Certificate Manager
 *  gave up. To try again, delete and create a new managed Certificate resource.
 *  For details see the `provisioning_issue` field.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_ManagedCertificate_State_Failed;
/**
 *  Certificate Manager attempts to provision or renew the certificate. If the
 *  process takes longer than expected, consult the `provisioning_issue` field.
 *
 *  Value: "PROVISIONING"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_ManagedCertificate_State_Provisioning;
/** Value: "STATE_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_ManagedCertificate_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRCertificateManager_ProvisioningIssue.reason

/**
 *  Certificate provisioning failed due to an issue with one or more of the
 *  domains on the certificate. For details of which domains failed, consult the
 *  `authorization_attempt_info` field.
 *
 *  Value: "AUTHORIZATION_ISSUE"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_ProvisioningIssue_Reason_AuthorizationIssue;
/**
 *  Exceeded Certificate Authority quotas or internal rate limits of the system.
 *  Provisioning may take longer to complete.
 *
 *  Value: "RATE_LIMITED"
 */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_ProvisioningIssue_Reason_RateLimited;
/** Value: "REASON_UNSPECIFIED" */
FOUNDATION_EXTERN NSString * const kGTLRCertificateManager_ProvisioningIssue_Reason_ReasonUnspecified;

/**
 *  State of the latest attempt to authorize a domain for certificate issuance.
 */
@interface GTLRCertificateManager_AuthorizationAttemptInfo : GTLRObject

/**
 *  Output only. Human readable explanation for reaching the state. Provided to
 *  help address the configuration issues. Not guaranteed to be stable. For
 *  programmatic access use FailureReason enum.
 */
@property(nonatomic, copy, nullable) NSString *details;

/** Domain name of the authorization attempt. */
@property(nonatomic, copy, nullable) NSString *domain;

/**
 *  Output only. Reason for failure of the authorization attempt for the domain.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateManager_AuthorizationAttemptInfo_FailureReason_Caa
 *        Certificate issuance forbidden by an explicit CAA record for the
 *        domain or a failure to check CAA records for the domain. (Value:
 *        "CAA")
 *    @arg @c kGTLRCertificateManager_AuthorizationAttemptInfo_FailureReason_Config
 *        There was a problem with the user's DNS or load balancer configuration
 *        for this domain. (Value: "CONFIG")
 *    @arg @c kGTLRCertificateManager_AuthorizationAttemptInfo_FailureReason_FailureReasonUnspecified
 *        Value "FAILURE_REASON_UNSPECIFIED"
 *    @arg @c kGTLRCertificateManager_AuthorizationAttemptInfo_FailureReason_RateLimited
 *        Reached a CA or internal rate-limit for the domain, e.g. for
 *        certificates per top-level private domain. (Value: "RATE_LIMITED")
 */
@property(nonatomic, copy, nullable) NSString *failureReason;

/**
 *  Output only. State of the domain for managed certificate issuance.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateManager_AuthorizationAttemptInfo_State_Authorized
 *        A managed certificate can be provisioned, no issues for this domain.
 *        (Value: "AUTHORIZED")
 *    @arg @c kGTLRCertificateManager_AuthorizationAttemptInfo_State_Authorizing
 *        Certificate provisioning for this domain is under way. GCP will
 *        attempt to authorize the domain. (Value: "AUTHORIZING")
 *    @arg @c kGTLRCertificateManager_AuthorizationAttemptInfo_State_Failed
 *        Attempt to authorize the domain failed. This prevents the Managed
 *        Certificate from being issued. See `failure_reason` and `details`
 *        fields for more information. (Value: "FAILED")
 *    @arg @c kGTLRCertificateManager_AuthorizationAttemptInfo_State_StateUnspecified
 *        Value "STATE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRCertificateManager_CancelOperationRequest : GTLRObject
@end


/**
 *  Defines TLS certificate.
 */
@interface GTLRCertificateManager_Certificate : GTLRObject

/** Output only. The creation timestamp of a Certificate. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  One or more paragraphs of text description of a certificate.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Output only. The expiry timestamp of a Certificate. */
@property(nonatomic, strong, nullable) GTLRDateTime *expireTime;

/** Set of labels associated with a Certificate. */
@property(nonatomic, strong, nullable) GTLRCertificateManager_Certificate_Labels *labels;

/** If set, contains configuration and state of a managed certificate. */
@property(nonatomic, strong, nullable) GTLRCertificateManager_ManagedCertificate *managed;

/**
 *  A user-defined name of the certificate. Certificate names must be unique
 *  globally and match pattern `projects/ * /locations/ * /certificates/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The PEM-encoded certificate chain. */
@property(nonatomic, copy, nullable) NSString *pemCertificate;

/**
 *  Output only. The list of Subject Alternative Names of dnsName type defined
 *  in the certificate (see RFC 5280 4.2.1.6). Managed certificates that haven't
 *  been provisioned yet have this field populated with a value of the
 *  managed.domains field.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *sanDnsnames;

/**
 *  Immutable. The scope of the certificate.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateManager_Certificate_Scope_Default Certificates
 *        with default scope are served from core Google data centers. If
 *        unsure, choose this option. (Value: "DEFAULT")
 *    @arg @c kGTLRCertificateManager_Certificate_Scope_EdgeCache Certificates
 *        with scope EDGE_CACHE are special-purposed certificates, served from
 *        non-core Google data centers. (Value: "EDGE_CACHE")
 */
@property(nonatomic, copy, nullable) NSString *scope;

/** If set, defines data of a self-managed certificate. */
@property(nonatomic, strong, nullable) GTLRCertificateManager_SelfManagedCertificate *selfManaged;

/** Output only. The last update timestamp of a Certificate. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Set of labels associated with a Certificate.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCertificateManager_Certificate_Labels : GTLRObject
@end


/**
 *  The CA that issues the workload certificate. It includes CA address, type,
 *  authentication to CA service, etc.
 */
@interface GTLRCertificateManager_CertificateAuthorityConfig : GTLRObject

/** Defines a CertificateAuthorityServiceConfig. */
@property(nonatomic, strong, nullable) GTLRCertificateManager_CertificateAuthorityServiceConfig *certificateAuthorityServiceConfig;

@end


/**
 *  Contains information required to contact CA service.
 */
@interface GTLRCertificateManager_CertificateAuthorityServiceConfig : GTLRObject

/**
 *  Required. A CA pool resource used to issue a certificate. The CA pool string
 *  has a relative resource path following the form
 *  "projects/{project}/locations/{location}/caPools/{ca_pool}".
 */
@property(nonatomic, copy, nullable) NSString *caPool;

@end


/**
 *  CertificateIssuanceConfig specifies how to issue and manage a certificate.
 */
@interface GTLRCertificateManager_CertificateIssuanceConfig : GTLRObject

/**
 *  Required. The CA that issues the workload certificate. It includes the CA
 *  address, type, authentication to CA service, etc.
 */
@property(nonatomic, strong, nullable) GTLRCertificateManager_CertificateAuthorityConfig *certificateAuthorityConfig;

/** Output only. The creation timestamp of a CertificateIssuanceConfig. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  One or more paragraphs of text description of a CertificateIssuanceConfig.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Required. The key algorithm to use when generating the private key.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateManager_CertificateIssuanceConfig_KeyAlgorithm_EcdsaP256
 *        Specifies ECDSA with curve P256. (Value: "ECDSA_P256")
 *    @arg @c kGTLRCertificateManager_CertificateIssuanceConfig_KeyAlgorithm_KeyAlgorithmUnspecified
 *        Unspecified key algorithm. (Value: "KEY_ALGORITHM_UNSPECIFIED")
 *    @arg @c kGTLRCertificateManager_CertificateIssuanceConfig_KeyAlgorithm_Rsa2048
 *        Specifies RSA with a 2048-bit modulus. (Value: "RSA_2048")
 */
@property(nonatomic, copy, nullable) NSString *keyAlgorithm;

/** Set of labels associated with a CertificateIssuanceConfig. */
@property(nonatomic, strong, nullable) GTLRCertificateManager_CertificateIssuanceConfig_Labels *labels;

/** Required. Workload certificate lifetime requested. */
@property(nonatomic, strong, nullable) GTLRDuration *lifetime;

/**
 *  A user-defined name of the certificate issuance config.
 *  CertificateIssuanceConfig names must be unique globally and match pattern
 *  `projects/ * /locations/ * /certificateIssuanceConfigs/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. Specifies the percentage of elapsed time of the certificate
 *  lifetime to wait before renewing the certificate. Must be a number between
 *  1-99, inclusive.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *rotationWindowPercentage;

/** Output only. The last update timestamp of a CertificateIssuanceConfig. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Set of labels associated with a CertificateIssuanceConfig.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCertificateManager_CertificateIssuanceConfig_Labels : GTLRObject
@end


/**
 *  Defines a collection of certificate configurations.
 */
@interface GTLRCertificateManager_CertificateMap : GTLRObject

/** Output only. The creation timestamp of a Certificate Map. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  One or more paragraphs of text description of a certificate map.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. A list of GCLB targets which use this Certificate Map. A Target
 *  Proxy is only present on this list if it's attached to a Forwarding Rule.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateManager_GclbTarget *> *gclbTargets;

/** Set of labels associated with a Certificate Map. */
@property(nonatomic, strong, nullable) GTLRCertificateManager_CertificateMap_Labels *labels;

/**
 *  A user-defined name of the Certificate Map. Certificate Map names must be
 *  unique globally and match pattern `projects/ * /locations/ *
 *  /certificateMaps/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The update timestamp of a Certificate Map. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Set of labels associated with a Certificate Map.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCertificateManager_CertificateMap_Labels : GTLRObject
@end


/**
 *  Defines a certificate map entry.
 */
@interface GTLRCertificateManager_CertificateMapEntry : GTLRObject

/**
 *  A set of Certificates defines for the given `hostname`. There can be defined
 *  up to fifteen certificates in each Certificate Map Entry. Each certificate
 *  must match pattern `projects/ * /locations/ * /certificates/ *`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *certificates;

/** Output only. The creation timestamp of a Certificate Map Entry. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  One or more paragraphs of text description of a certificate map entry.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  A Hostname (FQDN, e.g. `example.com`) or a wildcard hostname expression
 *  (`*.example.com`) for a set of hostnames with common suffix. Used as Server
 *  Name Indication (SNI) for selecting a proper certificate.
 */
@property(nonatomic, copy, nullable) NSString *hostname;

/** Set of labels associated with a Certificate Map Entry. */
@property(nonatomic, strong, nullable) GTLRCertificateManager_CertificateMapEntry_Labels *labels;

/**
 *  A predefined matcher for particular cases, other than SNI selection.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateManager_CertificateMapEntry_Matcher_MatcherUnspecified
 *        A matcher has't been recognized. (Value: "MATCHER_UNSPECIFIED")
 *    @arg @c kGTLRCertificateManager_CertificateMapEntry_Matcher_Primary A
 *        primary certificate that is served when SNI wasn't specified in the
 *        request or SNI couldn't be found in the map. (Value: "PRIMARY")
 */
@property(nonatomic, copy, nullable) NSString *matcher;

/**
 *  A user-defined name of the Certificate Map Entry. Certificate Map Entry
 *  names must be unique globally and match pattern `projects/ * /locations/ *
 *  /certificateMaps/ * /certificateMapEntries/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. A serving state of this Certificate Map Entry.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateManager_CertificateMapEntry_State_Active The
 *        configuration is serving. (Value: "ACTIVE")
 *    @arg @c kGTLRCertificateManager_CertificateMapEntry_State_Pending Update
 *        is in progress. Some frontends may serve this configuration. (Value:
 *        "PENDING")
 *    @arg @c kGTLRCertificateManager_CertificateMapEntry_State_ServingStateUnspecified
 *        The status is undefined. (Value: "SERVING_STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The update timestamp of a Certificate Map Entry. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Set of labels associated with a Certificate Map Entry.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCertificateManager_CertificateMapEntry_Labels : GTLRObject
@end


/**
 *  A DnsAuthorization resource describes a way to perform domain authorization
 *  for certificate issuance.
 */
@interface GTLRCertificateManager_DnsAuthorization : GTLRObject

/** Output only. The creation timestamp of a DnsAuthorization. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  One or more paragraphs of text description of a DnsAuthorization.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Output only. DNS Resource Record that needs to be added to DNS
 *  configuration.
 */
@property(nonatomic, strong, nullable) GTLRCertificateManager_DnsResourceRecord *dnsResourceRecord;

/**
 *  Required. Immutable. A domain which is being authorized. A DnsAuthorization
 *  resource covers a single domain and its wildcard, e.g. authorization for
 *  `example.com` can be used to issue certificates for `example.com` and
 *  `*.example.com`.
 */
@property(nonatomic, copy, nullable) NSString *domain;

/** Set of labels associated with a DnsAuthorization. */
@property(nonatomic, strong, nullable) GTLRCertificateManager_DnsAuthorization_Labels *labels;

/**
 *  A user-defined name of the dns authorization. DnsAuthorization names must be
 *  unique globally and match pattern `projects/ * /locations/ *
 *  /dnsAuthorizations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The last update timestamp of a DnsAuthorization. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Set of labels associated with a DnsAuthorization.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCertificateManager_DnsAuthorization_Labels : GTLRObject
@end


/**
 *  The structure describing the DNS Resource Record that needs to be added to
 *  DNS configuration for the authorization to be usable by certificate.
 */
@interface GTLRCertificateManager_DnsResourceRecord : GTLRObject

/** Output only. Data of the DNS Resource Record. */
@property(nonatomic, copy, nullable) NSString *data;

/**
 *  Output only. Fully qualified name of the DNS Resource Record. e.g.
 *  `_acme-challenge.example.com`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Type of the DNS Resource Record. Currently always set to
 *  "CNAME".
 */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRCertificateManager_Empty : GTLRObject
@end


/**
 *  Describes a Target Proxy which uses this Certificate Map.
 */
@interface GTLRCertificateManager_GclbTarget : GTLRObject

/**
 *  Output only. IP configurations for this Target Proxy where the Certificate
 *  Map is serving.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateManager_IpConfig *> *ipConfigs;

/**
 *  Output only. This field returns the resource name in the following format:
 *  `//compute.googleapis.com/projects/ * /global/targetHttpsProxies/ *`.
 */
@property(nonatomic, copy, nullable) NSString *targetHttpsProxy;

/**
 *  Output only. This field returns the resource name in the following format:
 *  `//compute.googleapis.com/projects/ * /global/targetSslProxies/ *`.
 */
@property(nonatomic, copy, nullable) NSString *targetSslProxy;

@end


/**
 *  Defines IP configuration where this Certificate Map is serving.
 */
@interface GTLRCertificateManager_IpConfig : GTLRObject

/** Output only. An external IP address. */
@property(nonatomic, copy, nullable) NSString *ipAddress;

/**
 *  Output only. Ports.
 *
 *  Uses NSNumber of unsignedIntValue.
 */
@property(nonatomic, strong, nullable) NSArray<NSNumber *> *ports;

@end


/**
 *  Response for the `ListCertificateIssuanceConfigs` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "certificateIssuanceConfigs" property. If returned as the result
 *        of a query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRCertificateManager_ListCertificateIssuanceConfigsResponse : GTLRCollectionObject

/**
 *  A list of certificate configs for the parent resource.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateManager_CertificateIssuanceConfig *> *certificateIssuanceConfigs;

/**
 *  If there might be more results than those appearing in this response, then
 *  `next_page_token` is included. To get the next set of results, call this
 *  method again using the value of `next_page_token` as `page_token`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response for the `ListCertificateMapEntries` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "certificateMapEntries" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRCertificateManager_ListCertificateMapEntriesResponse : GTLRCollectionObject

/**
 *  A list of certificate map entries for the parent resource.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateManager_CertificateMapEntry *> *certificateMapEntries;

/**
 *  If there might be more results than those appearing in this response, then
 *  `next_page_token` is included. To get the next set of results, call this
 *  method again using the value of `next_page_token` as `page_token`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response for the `ListCertificateMaps` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "certificateMaps" property. If returned as the result of a query,
 *        it should support automatic pagination (when @c shouldFetchNextPages
 *        is enabled).
 */
@interface GTLRCertificateManager_ListCertificateMapsResponse : GTLRCollectionObject

/**
 *  A list of certificate maps for the parent resource.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateManager_CertificateMap *> *certificateMaps;

/**
 *  If there might be more results than those appearing in this response, then
 *  `next_page_token` is included. To get the next set of results, call this
 *  method again using the value of `next_page_token` as `page_token`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response for the `ListCertificates` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "certificates" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCertificateManager_ListCertificatesResponse : GTLRCollectionObject

/**
 *  A list of certificates for the parent resource.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateManager_Certificate *> *certificates;

/**
 *  If there might be more results than those appearing in this response, then
 *  `next_page_token` is included. To get the next set of results, call this
 *  method again using the value of `next_page_token` as `page_token`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** A list of locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response for the `ListDnsAuthorizations` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "dnsAuthorizations" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRCertificateManager_ListDnsAuthorizationsResponse : GTLRCollectionObject

/**
 *  A list of dns authorizations for the parent resource.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateManager_DnsAuthorization *> *dnsAuthorizations;

/**
 *  If there might be more results than those appearing in this response, then
 *  `next_page_token` is included. To get the next set of results, call this
 *  method again using the value of `next_page_token` as `page_token`.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCertificateManager_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateManager_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRCertificateManager_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateManager_Operation *> *operations;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRCertificateManager_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRCertificateManager_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRCertificateManager_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRCertificateManager_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCertificateManager_Location_Metadata : GTLRObject
@end


/**
 *  Configuration and state of a Managed Certificate. Certificate Manager
 *  provisions and renews Managed Certificates automatically, for as long as
 *  it's authorized to do so.
 */
@interface GTLRCertificateManager_ManagedCertificate : GTLRObject

/**
 *  Output only. Detailed state of the latest authorization attempt for each
 *  domain specified for managed certificate resource.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateManager_AuthorizationAttemptInfo *> *authorizationAttemptInfo;

/**
 *  Immutable. Authorizations that will be used for performing domain
 *  authorization.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *dnsAuthorizations;

/**
 *  Immutable. The domains for which a managed SSL certificate will be
 *  generated. Wildcard domains are only supported with DNS challenge
 *  resolution.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *domains;

/**
 *  Immutable. The resource name for a CertificateIssuanceConfig used to
 *  configure private PKI certificates in the format `projects/ * /locations/ *
 *  /certificateIssuanceConfigs/ *`. If this field is not set, the certificates
 *  will instead be publicly signed as documented at
 *  https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.
 */
@property(nonatomic, copy, nullable) NSString *issuanceConfig;

/**
 *  Output only. Information about issues with provisioning a Managed
 *  Certificate.
 */
@property(nonatomic, strong, nullable) GTLRCertificateManager_ProvisioningIssue *provisioningIssue;

/**
 *  Output only. State of the managed certificate resource.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateManager_ManagedCertificate_State_Active The
 *        certificate management is working, and a certificate has been
 *        provisioned. (Value: "ACTIVE")
 *    @arg @c kGTLRCertificateManager_ManagedCertificate_State_Failed Multiple
 *        certificate provisioning attempts failed and Certificate Manager gave
 *        up. To try again, delete and create a new managed Certificate
 *        resource. For details see the `provisioning_issue` field. (Value:
 *        "FAILED")
 *    @arg @c kGTLRCertificateManager_ManagedCertificate_State_Provisioning
 *        Certificate Manager attempts to provision or renew the certificate. If
 *        the process takes longer than expected, consult the
 *        `provisioning_issue` field. (Value: "PROVISIONING")
 *    @arg @c kGTLRCertificateManager_ManagedCertificate_State_StateUnspecified
 *        Value "STATE_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRCertificateManager_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRCertificateManager_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRCertificateManager_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRCertificateManager_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCertificateManager_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCertificateManager_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation. Output only.
 */
@interface GTLRCertificateManager_OperationMetadata : GTLRObject

/** API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Identifies whether the user has requested cancellation of the operation.
 *  Operations that have successfully been cancelled have Operation.error value
 *  with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/** Server-defined resource path for the target of the operation. */
@property(nonatomic, copy, nullable) NSString *target;

/** Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Information about issues with provisioning a Managed Certificate.
 */
@interface GTLRCertificateManager_ProvisioningIssue : GTLRObject

/**
 *  Output only. Human readable explanation about the issue. Provided to help
 *  address the configuration issues. Not guaranteed to be stable. For
 *  programmatic access use Reason enum.
 */
@property(nonatomic, copy, nullable) NSString *details;

/**
 *  Output only. Reason for provisioning failures.
 *
 *  Likely values:
 *    @arg @c kGTLRCertificateManager_ProvisioningIssue_Reason_AuthorizationIssue
 *        Certificate provisioning failed due to an issue with one or more of
 *        the domains on the certificate. For details of which domains failed,
 *        consult the `authorization_attempt_info` field. (Value:
 *        "AUTHORIZATION_ISSUE")
 *    @arg @c kGTLRCertificateManager_ProvisioningIssue_Reason_RateLimited
 *        Exceeded Certificate Authority quotas or internal rate limits of the
 *        system. Provisioning may take longer to complete. (Value:
 *        "RATE_LIMITED")
 *    @arg @c kGTLRCertificateManager_ProvisioningIssue_Reason_ReasonUnspecified
 *        Value "REASON_UNSPECIFIED"
 */
@property(nonatomic, copy, nullable) NSString *reason;

@end


/**
 *  Certificate data for a SelfManaged Certificate. SelfManaged Certificates are
 *  uploaded by the user. Updating such certificates before they expire remains
 *  the user's responsibility.
 */
@interface GTLRCertificateManager_SelfManagedCertificate : GTLRObject

/**
 *  Input only. The PEM-encoded certificate chain. Leaf certificate comes first,
 *  followed by intermediate ones if any.
 */
@property(nonatomic, copy, nullable) NSString *pemCertificate;

/** Input only. The PEM-encoded private key of the leaf certificate. */
@property(nonatomic, copy, nullable) NSString *pemPrivateKey;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRCertificateManager_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRCertificateManager_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRCertificateManager_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRCertificateManager_Status_Details_Item : GTLRObject
@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
