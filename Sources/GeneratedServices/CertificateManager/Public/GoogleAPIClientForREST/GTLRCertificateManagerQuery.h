// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Certificate Manager API (certificatemanager/v1)
// Documentation:
//   https://cloud.google.com/certificate-manager

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRCertificateManagerObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Certificate Manager query classes.
 */
@interface GTLRCertificateManagerQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a new CertificateIssuanceConfig in a given project and location.
 *
 *  Method: certificatemanager.projects.locations.certificateIssuanceConfigs.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificateIssuanceConfigsCreate : GTLRCertificateManagerQuery

/** Required. A user-provided name of the certificate config. */
@property(nonatomic, copy, nullable) NSString *certificateIssuanceConfigId;

/**
 *  Required. The parent resource of the certificate issuance config. Must be in
 *  the format `projects/ * /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCertificateManager_Operation.
 *
 *  Creates a new CertificateIssuanceConfig in a given project and location.
 *
 *  @param object The @c GTLRCertificateManager_CertificateIssuanceConfig to
 *    include in the query.
 *  @param parent Required. The parent resource of the certificate issuance
 *    config. Must be in the format `projects/ * /locations/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificateIssuanceConfigsCreate
 */
+ (instancetype)queryWithObject:(GTLRCertificateManager_CertificateIssuanceConfig *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single CertificateIssuanceConfig.
 *
 *  Method: certificatemanager.projects.locations.certificateIssuanceConfigs.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificateIssuanceConfigsDelete : GTLRCertificateManagerQuery

/**
 *  Required. A name of the certificate issuance config to delete. Must be in
 *  the format `projects/ * /locations/ * /certificateIssuanceConfigs/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateManager_Operation.
 *
 *  Deletes a single CertificateIssuanceConfig.
 *
 *  @param name Required. A name of the certificate issuance config to delete.
 *    Must be in the format `projects/ * /locations/ *
 *    /certificateIssuanceConfigs/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificateIssuanceConfigsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single CertificateIssuanceConfig.
 *
 *  Method: certificatemanager.projects.locations.certificateIssuanceConfigs.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificateIssuanceConfigsGet : GTLRCertificateManagerQuery

/**
 *  Required. A name of the certificate issuance config to describe. Must be in
 *  the format `projects/ * /locations/ * /certificateIssuanceConfigs/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateManager_CertificateIssuanceConfig.
 *
 *  Gets details of a single CertificateIssuanceConfig.
 *
 *  @param name Required. A name of the certificate issuance config to describe.
 *    Must be in the format `projects/ * /locations/ *
 *    /certificateIssuanceConfigs/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificateIssuanceConfigsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists CertificateIssuanceConfigs in a given project and location.
 *
 *  Method: certificatemanager.projects.locations.certificateIssuanceConfigs.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificateIssuanceConfigsList : GTLRCertificateManagerQuery

/** Filter expression to restrict the Certificates Configs returned. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  A list of Certificate Config field names used to specify the order of the
 *  returned results. The default sorting order is ascending. To specify
 *  descending order for a field, add a suffix " desc".
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Maximum number of certificate configs to return per call. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListCertificateIssuanceConfigsResponse`.
 *  Indicates that this is a continuation of a prior
 *  `ListCertificateIssuanceConfigs` call, and that the system should return the
 *  next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The project and location from which the certificate should be
 *  listed, specified in the format `projects/ * /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCertificateManager_ListCertificateIssuanceConfigsResponse.
 *
 *  Lists CertificateIssuanceConfigs in a given project and location.
 *
 *  @param parent Required. The project and location from which the certificate
 *    should be listed, specified in the format `projects/ * /locations/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificateIssuanceConfigsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Creates a new CertificateMapEntry in a given project and location.
 *
 *  Method: certificatemanager.projects.locations.certificateMaps.certificateMapEntries.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsCertificateMapEntriesCreate : GTLRCertificateManagerQuery

/** Required. A user-provided name of the certificate map entry. */
@property(nonatomic, copy, nullable) NSString *certificateMapEntryId;

/**
 *  Required. The parent resource of the certificate map entry. Must be in the
 *  format `projects/ * /locations/ * /certificateMaps/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCertificateManager_Operation.
 *
 *  Creates a new CertificateMapEntry in a given project and location.
 *
 *  @param object The @c GTLRCertificateManager_CertificateMapEntry to include
 *    in the query.
 *  @param parent Required. The parent resource of the certificate map entry.
 *    Must be in the format `projects/ * /locations/ * /certificateMaps/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsCertificateMapEntriesCreate
 */
+ (instancetype)queryWithObject:(GTLRCertificateManager_CertificateMapEntry *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single CertificateMapEntry.
 *
 *  Method: certificatemanager.projects.locations.certificateMaps.certificateMapEntries.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsCertificateMapEntriesDelete : GTLRCertificateManagerQuery

/**
 *  Required. A name of the certificate map entry to delete. Must be in the
 *  format `projects/ * /locations/ * /certificateMaps/ *
 *  /certificateMapEntries/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateManager_Operation.
 *
 *  Deletes a single CertificateMapEntry.
 *
 *  @param name Required. A name of the certificate map entry to delete. Must be
 *    in the format `projects/ * /locations/ * /certificateMaps/ *
 *    /certificateMapEntries/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsCertificateMapEntriesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single CertificateMapEntry.
 *
 *  Method: certificatemanager.projects.locations.certificateMaps.certificateMapEntries.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsCertificateMapEntriesGet : GTLRCertificateManagerQuery

/**
 *  Required. A name of the certificate map entry to describe. Must be in the
 *  format `projects/ * /locations/ * /certificateMaps/ *
 *  /certificateMapEntries/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateManager_CertificateMapEntry.
 *
 *  Gets details of a single CertificateMapEntry.
 *
 *  @param name Required. A name of the certificate map entry to describe. Must
 *    be in the format `projects/ * /locations/ * /certificateMaps/ *
 *    /certificateMapEntries/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsCertificateMapEntriesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists CertificateMapEntries in a given project and location.
 *
 *  Method: certificatemanager.projects.locations.certificateMaps.certificateMapEntries.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsCertificateMapEntriesList : GTLRCertificateManagerQuery

/** Filter expression to restrict the returned Certificate Map Entries. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  A list of Certificate Map Entry field names used to specify the order of the
 *  returned results. The default sorting order is ascending. To specify
 *  descending order for a field, add a suffix " desc".
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Maximum number of certificate map entries to return. The service may return
 *  fewer than this value. If unspecified, at most 50 certificate map entries
 *  will be returned. The maximum value is 1000; values above 1000 will be
 *  coerced to 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListCertificateMapEntriesResponse`.
 *  Indicates that this is a continuation of a prior `ListCertificateMapEntries`
 *  call, and that the system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The project, location and certificate map from which the
 *  certificate map entries should be listed, specified in the format `projects/
 *  * /locations/ * /certificateMaps/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCertificateManager_ListCertificateMapEntriesResponse.
 *
 *  Lists CertificateMapEntries in a given project and location.
 *
 *  @param parent Required. The project, location and certificate map from which
 *    the certificate map entries should be listed, specified in the format
 *    `projects/ * /locations/ * /certificateMaps/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsCertificateMapEntriesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a CertificateMapEntry.
 *
 *  Method: certificatemanager.projects.locations.certificateMaps.certificateMapEntries.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsCertificateMapEntriesPatch : GTLRCertificateManagerQuery

/**
 *  A user-defined name of the Certificate Map Entry. Certificate Map Entry
 *  names must be unique globally and match pattern `projects/ * /locations/ *
 *  /certificateMaps/ * /certificateMapEntries/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The update mask applies to the resource. For the `FieldMask`
 *  definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCertificateManager_Operation.
 *
 *  Updates a CertificateMapEntry.
 *
 *  @param object The @c GTLRCertificateManager_CertificateMapEntry to include
 *    in the query.
 *  @param name A user-defined name of the Certificate Map Entry. Certificate
 *    Map Entry names must be unique globally and match pattern `projects/ *
 *    /locations/ * /certificateMaps/ * /certificateMapEntries/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsCertificateMapEntriesPatch
 */
+ (instancetype)queryWithObject:(GTLRCertificateManager_CertificateMapEntry *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new CertificateMap in a given project and location.
 *
 *  Method: certificatemanager.projects.locations.certificateMaps.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsCreate : GTLRCertificateManagerQuery

/** Required. A user-provided name of the certificate map. */
@property(nonatomic, copy, nullable) NSString *certificateMapId;

/**
 *  Required. The parent resource of the certificate map. Must be in the format
 *  `projects/ * /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCertificateManager_Operation.
 *
 *  Creates a new CertificateMap in a given project and location.
 *
 *  @param object The @c GTLRCertificateManager_CertificateMap to include in the
 *    query.
 *  @param parent Required. The parent resource of the certificate map. Must be
 *    in the format `projects/ * /locations/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsCreate
 */
+ (instancetype)queryWithObject:(GTLRCertificateManager_CertificateMap *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single CertificateMap. A Certificate Map can't be deleted if it
 *  contains Certificate Map Entries. Remove all the entries from the map before
 *  calling this method.
 *
 *  Method: certificatemanager.projects.locations.certificateMaps.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsDelete : GTLRCertificateManagerQuery

/**
 *  Required. A name of the certificate map to delete. Must be in the format
 *  `projects/ * /locations/ * /certificateMaps/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateManager_Operation.
 *
 *  Deletes a single CertificateMap. A Certificate Map can't be deleted if it
 *  contains Certificate Map Entries. Remove all the entries from the map before
 *  calling this method.
 *
 *  @param name Required. A name of the certificate map to delete. Must be in
 *    the format `projects/ * /locations/ * /certificateMaps/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single CertificateMap.
 *
 *  Method: certificatemanager.projects.locations.certificateMaps.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsGet : GTLRCertificateManagerQuery

/**
 *  Required. A name of the certificate map to describe. Must be in the format
 *  `projects/ * /locations/ * /certificateMaps/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateManager_CertificateMap.
 *
 *  Gets details of a single CertificateMap.
 *
 *  @param name Required. A name of the certificate map to describe. Must be in
 *    the format `projects/ * /locations/ * /certificateMaps/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists CertificateMaps in a given project and location.
 *
 *  Method: certificatemanager.projects.locations.certificateMaps.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsList : GTLRCertificateManagerQuery

/** Filter expression to restrict the Certificates Maps returned. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  A list of Certificate Map field names used to specify the order of the
 *  returned results. The default sorting order is ascending. To specify
 *  descending order for a field, add a suffix " desc".
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Maximum number of certificate maps to return per call. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListCertificateMapsResponse`. Indicates that
 *  this is a continuation of a prior `ListCertificateMaps` call, and that the
 *  system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The project and location from which the certificate maps should be
 *  listed, specified in the format `projects/ * /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCertificateManager_ListCertificateMapsResponse.
 *
 *  Lists CertificateMaps in a given project and location.
 *
 *  @param parent Required. The project and location from which the certificate
 *    maps should be listed, specified in the format `projects/ * /locations/
 *    *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a CertificateMap.
 *
 *  Method: certificatemanager.projects.locations.certificateMaps.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsPatch : GTLRCertificateManagerQuery

/**
 *  A user-defined name of the Certificate Map. Certificate Map names must be
 *  unique globally and match pattern `projects/ * /locations/ *
 *  /certificateMaps/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The update mask applies to the resource. For the `FieldMask`
 *  definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCertificateManager_Operation.
 *
 *  Updates a CertificateMap.
 *
 *  @param object The @c GTLRCertificateManager_CertificateMap to include in the
 *    query.
 *  @param name A user-defined name of the Certificate Map. Certificate Map
 *    names must be unique globally and match pattern `projects/ * /locations/ *
 *    /certificateMaps/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificateMapsPatch
 */
+ (instancetype)queryWithObject:(GTLRCertificateManager_CertificateMap *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new Certificate in a given project and location.
 *
 *  Method: certificatemanager.projects.locations.certificates.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificatesCreate : GTLRCertificateManagerQuery

/** Required. A user-provided name of the certificate. */
@property(nonatomic, copy, nullable) NSString *certificateId;

/**
 *  Required. The parent resource of the certificate. Must be in the format
 *  `projects/ * /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCertificateManager_Operation.
 *
 *  Creates a new Certificate in a given project and location.
 *
 *  @param object The @c GTLRCertificateManager_Certificate to include in the
 *    query.
 *  @param parent Required. The parent resource of the certificate. Must be in
 *    the format `projects/ * /locations/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificatesCreate
 */
+ (instancetype)queryWithObject:(GTLRCertificateManager_Certificate *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single Certificate.
 *
 *  Method: certificatemanager.projects.locations.certificates.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificatesDelete : GTLRCertificateManagerQuery

/**
 *  Required. A name of the certificate to delete. Must be in the format
 *  `projects/ * /locations/ * /certificates/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateManager_Operation.
 *
 *  Deletes a single Certificate.
 *
 *  @param name Required. A name of the certificate to delete. Must be in the
 *    format `projects/ * /locations/ * /certificates/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificatesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single Certificate.
 *
 *  Method: certificatemanager.projects.locations.certificates.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificatesGet : GTLRCertificateManagerQuery

/**
 *  Required. A name of the certificate to describe. Must be in the format
 *  `projects/ * /locations/ * /certificates/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateManager_Certificate.
 *
 *  Gets details of a single Certificate.
 *
 *  @param name Required. A name of the certificate to describe. Must be in the
 *    format `projects/ * /locations/ * /certificates/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificatesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Certificates in a given project and location.
 *
 *  Method: certificatemanager.projects.locations.certificates.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificatesList : GTLRCertificateManagerQuery

/** Filter expression to restrict the Certificates returned. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  A list of Certificate field names used to specify the order of the returned
 *  results. The default sorting order is ascending. To specify descending order
 *  for a field, add a suffix " desc".
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Maximum number of certificates to return per call. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListCertificatesResponse`. Indicates that
 *  this is a continuation of a prior `ListCertificates` call, and that the
 *  system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The project and location from which the certificate should be
 *  listed, specified in the format `projects/ * /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCertificateManager_ListCertificatesResponse.
 *
 *  Lists Certificates in a given project and location.
 *
 *  @param parent Required. The project and location from which the certificate
 *    should be listed, specified in the format `projects/ * /locations/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificatesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a Certificate.
 *
 *  Method: certificatemanager.projects.locations.certificates.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsCertificatesPatch : GTLRCertificateManagerQuery

/**
 *  A user-defined name of the certificate. Certificate names must be unique
 *  globally and match pattern `projects/ * /locations/ * /certificates/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The update mask applies to the resource. For the `FieldMask`
 *  definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCertificateManager_Operation.
 *
 *  Updates a Certificate.
 *
 *  @param object The @c GTLRCertificateManager_Certificate to include in the
 *    query.
 *  @param name A user-defined name of the certificate. Certificate names must
 *    be unique globally and match pattern `projects/ * /locations/ *
 *    /certificates/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsCertificatesPatch
 */
+ (instancetype)queryWithObject:(GTLRCertificateManager_Certificate *)object
                           name:(NSString *)name;

@end

/**
 *  Creates a new DnsAuthorization in a given project and location.
 *
 *  Method: certificatemanager.projects.locations.dnsAuthorizations.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsDnsAuthorizationsCreate : GTLRCertificateManagerQuery

/** Required. A user-provided name of the dns authorization. */
@property(nonatomic, copy, nullable) NSString *dnsAuthorizationId;

/**
 *  Required. The parent resource of the dns authorization. Must be in the
 *  format `projects/ * /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCertificateManager_Operation.
 *
 *  Creates a new DnsAuthorization in a given project and location.
 *
 *  @param object The @c GTLRCertificateManager_DnsAuthorization to include in
 *    the query.
 *  @param parent Required. The parent resource of the dns authorization. Must
 *    be in the format `projects/ * /locations/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsDnsAuthorizationsCreate
 */
+ (instancetype)queryWithObject:(GTLRCertificateManager_DnsAuthorization *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a single DnsAuthorization.
 *
 *  Method: certificatemanager.projects.locations.dnsAuthorizations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsDnsAuthorizationsDelete : GTLRCertificateManagerQuery

/**
 *  Required. A name of the dns authorization to delete. Must be in the format
 *  `projects/ * /locations/ * /dnsAuthorizations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateManager_Operation.
 *
 *  Deletes a single DnsAuthorization.
 *
 *  @param name Required. A name of the dns authorization to delete. Must be in
 *    the format `projects/ * /locations/ * /dnsAuthorizations/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsDnsAuthorizationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets details of a single DnsAuthorization.
 *
 *  Method: certificatemanager.projects.locations.dnsAuthorizations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsDnsAuthorizationsGet : GTLRCertificateManagerQuery

/**
 *  Required. A name of the dns authorization to describe. Must be in the format
 *  `projects/ * /locations/ * /dnsAuthorizations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateManager_DnsAuthorization.
 *
 *  Gets details of a single DnsAuthorization.
 *
 *  @param name Required. A name of the dns authorization to describe. Must be
 *    in the format `projects/ * /locations/ * /dnsAuthorizations/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsDnsAuthorizationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists DnsAuthorizations in a given project and location.
 *
 *  Method: certificatemanager.projects.locations.dnsAuthorizations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsDnsAuthorizationsList : GTLRCertificateManagerQuery

/** Filter expression to restrict the Dns Authorizations returned. */
@property(nonatomic, copy, nullable) NSString *filter;

/**
 *  A list of Dns Authorization field names used to specify the order of the
 *  returned results. The default sorting order is ascending. To specify
 *  descending order for a field, add a suffix " desc".
 */
@property(nonatomic, copy, nullable) NSString *orderBy;

/** Maximum number of dns authorizations to return per call. */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  The value returned by the last `ListDnsAuthorizationsResponse`. Indicates
 *  that this is a continuation of a prior `ListDnsAuthorizations` call, and
 *  that the system should return the next page of data.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The project and location from which the dns authorizations should
 *  be listed, specified in the format `projects/ * /locations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRCertificateManager_ListDnsAuthorizationsResponse.
 *
 *  Lists DnsAuthorizations in a given project and location.
 *
 *  @param parent Required. The project and location from which the dns
 *    authorizations should be listed, specified in the format `projects/ *
 *    /locations/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsDnsAuthorizationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Updates a DnsAuthorization.
 *
 *  Method: certificatemanager.projects.locations.dnsAuthorizations.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsDnsAuthorizationsPatch : GTLRCertificateManagerQuery

/**
 *  A user-defined name of the dns authorization. DnsAuthorization names must be
 *  unique globally and match pattern `projects/ * /locations/ *
 *  /dnsAuthorizations/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Required. The update mask applies to the resource. For the `FieldMask`
 *  definition, see
 *  https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRCertificateManager_Operation.
 *
 *  Updates a DnsAuthorization.
 *
 *  @param object The @c GTLRCertificateManager_DnsAuthorization to include in
 *    the query.
 *  @param name A user-defined name of the dns authorization. DnsAuthorization
 *    names must be unique globally and match pattern `projects/ * /locations/ *
 *    /dnsAuthorizations/ *`.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsDnsAuthorizationsPatch
 */
+ (instancetype)queryWithObject:(GTLRCertificateManager_DnsAuthorization *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a location.
 *
 *  Method: certificatemanager.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsGet : GTLRCertificateManagerQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateManager_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: certificatemanager.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsList : GTLRCertificateManagerQuery

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCertificateManager_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: certificatemanager.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsOperationsCancel : GTLRCertificateManagerQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateManager_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRCertificateManager_CancelOperationRequest to
 *    include in the query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRCertificateManager_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: certificatemanager.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsOperationsDelete : GTLRCertificateManagerQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateManager_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: certificatemanager.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsOperationsGet : GTLRCertificateManagerQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRCertificateManager_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  Method: certificatemanager.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeCertificateManagerCloudPlatform
 */
@interface GTLRCertificateManagerQuery_ProjectsLocationsOperationsList : GTLRCertificateManagerQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRCertificateManager_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`. NOTE: the
 *  `name` binding allows API services to override the binding to use different
 *  resource name schemes, such as `users/ * /operations`. To override the
 *  binding, API services can add a binding such as `"/v1/{name=users/
 *  *}/operations"` to their service configuration. For backwards compatibility,
 *  the default name includes the operations collection id, however overriding
 *  users must ensure the name binding is the parent resource, without the
 *  operations collection id.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRCertificateManagerQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
