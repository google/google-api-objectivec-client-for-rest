// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Dataproc API (dataproc/v1)
// Description:
//   Manages Hadoop-based clusters and jobs on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/dataproc/

#import <GoogleAPIClientForREST/GTLRDataprocObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRDataproc_AnalyzeOperationMetadata.analyzedWorkloadType
NSString * const kGTLRDataproc_AnalyzeOperationMetadata_AnalyzedWorkloadType_Batch = @"BATCH";
NSString * const kGTLRDataproc_AnalyzeOperationMetadata_AnalyzedWorkloadType_WorkloadTypeUnspecified = @"WORKLOAD_TYPE_UNSPECIFIED";

// GTLRDataproc_ApplicationInfo.applicationContextIngestionStatus
NSString * const kGTLRDataproc_ApplicationInfo_ApplicationContextIngestionStatus_ApplicationContextIngestionStatusCompleted = @"APPLICATION_CONTEXT_INGESTION_STATUS_COMPLETED";
NSString * const kGTLRDataproc_ApplicationInfo_ApplicationContextIngestionStatus_ApplicationContextIngestionStatusUnspecified = @"APPLICATION_CONTEXT_INGESTION_STATUS_UNSPECIFIED";

// GTLRDataproc_ApplicationInfo.quantileDataStatus
NSString * const kGTLRDataproc_ApplicationInfo_QuantileDataStatus_QuantileDataStatusCompleted = @"QUANTILE_DATA_STATUS_COMPLETED";
NSString * const kGTLRDataproc_ApplicationInfo_QuantileDataStatus_QuantileDataStatusFailed = @"QUANTILE_DATA_STATUS_FAILED";
NSString * const kGTLRDataproc_ApplicationInfo_QuantileDataStatus_QuantileDataStatusUnspecified = @"QUANTILE_DATA_STATUS_UNSPECIFIED";

// GTLRDataproc_AutotuningConfig.scenarios
NSString * const kGTLRDataproc_AutotuningConfig_Scenarios_BroadcastHashJoin = @"BROADCAST_HASH_JOIN";
NSString * const kGTLRDataproc_AutotuningConfig_Scenarios_Memory = @"MEMORY";
NSString * const kGTLRDataproc_AutotuningConfig_Scenarios_Scaling = @"SCALING";
NSString * const kGTLRDataproc_AutotuningConfig_Scenarios_ScenarioUnspecified = @"SCENARIO_UNSPECIFIED";

// GTLRDataproc_Batch.state
NSString * const kGTLRDataproc_Batch_State_Cancelled        = @"CANCELLED";
NSString * const kGTLRDataproc_Batch_State_Cancelling       = @"CANCELLING";
NSString * const kGTLRDataproc_Batch_State_Failed           = @"FAILED";
NSString * const kGTLRDataproc_Batch_State_Pending          = @"PENDING";
NSString * const kGTLRDataproc_Batch_State_Running          = @"RUNNING";
NSString * const kGTLRDataproc_Batch_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRDataproc_Batch_State_Succeeded        = @"SUCCEEDED";

// GTLRDataproc_BatchOperationMetadata.operationType
NSString * const kGTLRDataproc_BatchOperationMetadata_OperationType_Batch = @"BATCH";
NSString * const kGTLRDataproc_BatchOperationMetadata_OperationType_BatchOperationTypeUnspecified = @"BATCH_OPERATION_TYPE_UNSPECIFIED";

// GTLRDataproc_ClusterOperationStatus.state
NSString * const kGTLRDataproc_ClusterOperationStatus_State_Done = @"DONE";
NSString * const kGTLRDataproc_ClusterOperationStatus_State_Pending = @"PENDING";
NSString * const kGTLRDataproc_ClusterOperationStatus_State_Running = @"RUNNING";
NSString * const kGTLRDataproc_ClusterOperationStatus_State_Unknown = @"UNKNOWN";

// GTLRDataproc_ClusterStatus.state
NSString * const kGTLRDataproc_ClusterStatus_State_Creating    = @"CREATING";
NSString * const kGTLRDataproc_ClusterStatus_State_Deleting    = @"DELETING";
NSString * const kGTLRDataproc_ClusterStatus_State_Error       = @"ERROR";
NSString * const kGTLRDataproc_ClusterStatus_State_ErrorDueToUpdate = @"ERROR_DUE_TO_UPDATE";
NSString * const kGTLRDataproc_ClusterStatus_State_Repairing   = @"REPAIRING";
NSString * const kGTLRDataproc_ClusterStatus_State_Running     = @"RUNNING";
NSString * const kGTLRDataproc_ClusterStatus_State_Starting    = @"STARTING";
NSString * const kGTLRDataproc_ClusterStatus_State_Stopped     = @"STOPPED";
NSString * const kGTLRDataproc_ClusterStatus_State_Stopping    = @"STOPPING";
NSString * const kGTLRDataproc_ClusterStatus_State_Unknown     = @"UNKNOWN";
NSString * const kGTLRDataproc_ClusterStatus_State_Updating    = @"UPDATING";

// GTLRDataproc_ClusterStatus.substate
NSString * const kGTLRDataproc_ClusterStatus_Substate_StaleStatus = @"STALE_STATUS";
NSString * const kGTLRDataproc_ClusterStatus_Substate_Unhealthy = @"UNHEALTHY";
NSString * const kGTLRDataproc_ClusterStatus_Substate_Unspecified = @"UNSPECIFIED";

// GTLRDataproc_ClusterToRepair.clusterRepairAction
NSString * const kGTLRDataproc_ClusterToRepair_ClusterRepairAction_ClusterRepairActionUnspecified = @"CLUSTER_REPAIR_ACTION_UNSPECIFIED";
NSString * const kGTLRDataproc_ClusterToRepair_ClusterRepairAction_RepairErrorDueToUpdateCluster = @"REPAIR_ERROR_DUE_TO_UPDATE_CLUSTER";

// GTLRDataproc_DiagnoseClusterRequest.tarballAccess
NSString * const kGTLRDataproc_DiagnoseClusterRequest_TarballAccess_GoogleCloudSupport = @"GOOGLE_CLOUD_SUPPORT";
NSString * const kGTLRDataproc_DiagnoseClusterRequest_TarballAccess_GoogleDataprocDiagnose = @"GOOGLE_DATAPROC_DIAGNOSE";
NSString * const kGTLRDataproc_DiagnoseClusterRequest_TarballAccess_TarballAccessUnspecified = @"TARBALL_ACCESS_UNSPECIFIED";

// GTLRDataproc_GceClusterConfig.privateIpv6GoogleAccess
NSString * const kGTLRDataproc_GceClusterConfig_PrivateIpv6GoogleAccess_Bidirectional = @"BIDIRECTIONAL";
NSString * const kGTLRDataproc_GceClusterConfig_PrivateIpv6GoogleAccess_InheritFromSubnetwork = @"INHERIT_FROM_SUBNETWORK";
NSString * const kGTLRDataproc_GceClusterConfig_PrivateIpv6GoogleAccess_Outbound = @"OUTBOUND";
NSString * const kGTLRDataproc_GceClusterConfig_PrivateIpv6GoogleAccess_PrivateIpv6GoogleAccessUnspecified = @"PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED";

// GTLRDataproc_GkeNodePoolTarget.roles
NSString * const kGTLRDataproc_GkeNodePoolTarget_Roles_Controller = @"CONTROLLER";
NSString * const kGTLRDataproc_GkeNodePoolTarget_Roles_Default = @"DEFAULT";
NSString * const kGTLRDataproc_GkeNodePoolTarget_Roles_RoleUnspecified = @"ROLE_UNSPECIFIED";
NSString * const kGTLRDataproc_GkeNodePoolTarget_Roles_SparkDriver = @"SPARK_DRIVER";
NSString * const kGTLRDataproc_GkeNodePoolTarget_Roles_SparkExecutor = @"SPARK_EXECUTOR";

// GTLRDataproc_InstanceGroupConfig.preemptibility
NSString * const kGTLRDataproc_InstanceGroupConfig_Preemptibility_NonPreemptible = @"NON_PREEMPTIBLE";
NSString * const kGTLRDataproc_InstanceGroupConfig_Preemptibility_PreemptibilityUnspecified = @"PREEMPTIBILITY_UNSPECIFIED";
NSString * const kGTLRDataproc_InstanceGroupConfig_Preemptibility_Preemptible = @"PREEMPTIBLE";
NSString * const kGTLRDataproc_InstanceGroupConfig_Preemptibility_Spot = @"SPOT";

// GTLRDataproc_JobData.status
NSString * const kGTLRDataproc_JobData_Status_JobExecutionStatusFailed = @"JOB_EXECUTION_STATUS_FAILED";
NSString * const kGTLRDataproc_JobData_Status_JobExecutionStatusRunning = @"JOB_EXECUTION_STATUS_RUNNING";
NSString * const kGTLRDataproc_JobData_Status_JobExecutionStatusSucceeded = @"JOB_EXECUTION_STATUS_SUCCEEDED";
NSString * const kGTLRDataproc_JobData_Status_JobExecutionStatusUnknown = @"JOB_EXECUTION_STATUS_UNKNOWN";
NSString * const kGTLRDataproc_JobData_Status_JobExecutionStatusUnspecified = @"JOB_EXECUTION_STATUS_UNSPECIFIED";

// GTLRDataproc_JobStatus.state
NSString * const kGTLRDataproc_JobStatus_State_AttemptFailure  = @"ATTEMPT_FAILURE";
NSString * const kGTLRDataproc_JobStatus_State_Cancelled       = @"CANCELLED";
NSString * const kGTLRDataproc_JobStatus_State_CancelPending   = @"CANCEL_PENDING";
NSString * const kGTLRDataproc_JobStatus_State_CancelStarted   = @"CANCEL_STARTED";
NSString * const kGTLRDataproc_JobStatus_State_Done            = @"DONE";
NSString * const kGTLRDataproc_JobStatus_State_Error           = @"ERROR";
NSString * const kGTLRDataproc_JobStatus_State_Pending         = @"PENDING";
NSString * const kGTLRDataproc_JobStatus_State_Running         = @"RUNNING";
NSString * const kGTLRDataproc_JobStatus_State_SetupDone       = @"SETUP_DONE";
NSString * const kGTLRDataproc_JobStatus_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRDataproc_JobStatus.substate
NSString * const kGTLRDataproc_JobStatus_Substate_Queued      = @"QUEUED";
NSString * const kGTLRDataproc_JobStatus_Substate_StaleStatus = @"STALE_STATUS";
NSString * const kGTLRDataproc_JobStatus_Substate_Submitted   = @"SUBMITTED";
NSString * const kGTLRDataproc_JobStatus_Substate_Unspecified = @"UNSPECIFIED";

// GTLRDataproc_JupyterConfig.kernel
NSString * const kGTLRDataproc_JupyterConfig_Kernel_KernelUnspecified = @"KERNEL_UNSPECIFIED";
NSString * const kGTLRDataproc_JupyterConfig_Kernel_Python     = @"PYTHON";
NSString * const kGTLRDataproc_JupyterConfig_Kernel_Scala      = @"SCALA";

// GTLRDataproc_LoggingConfig_DriverLogLevels.driverLogLevel
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_All = @"ALL";
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Debug = @"DEBUG";
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Error = @"ERROR";
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Fatal = @"FATAL";
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Info = @"INFO";
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_LevelUnspecified = @"LEVEL_UNSPECIFIED";
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Off = @"OFF";
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Trace = @"TRACE";
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Warn = @"WARN";

// GTLRDataproc_Metric.metricSource
NSString * const kGTLRDataproc_Metric_MetricSource_Flink       = @"FLINK";
NSString * const kGTLRDataproc_Metric_MetricSource_Hdfs        = @"HDFS";
NSString * const kGTLRDataproc_Metric_MetricSource_Hivemetastore = @"HIVEMETASTORE";
NSString * const kGTLRDataproc_Metric_MetricSource_Hiveserver2 = @"HIVESERVER2";
NSString * const kGTLRDataproc_Metric_MetricSource_MetricSourceUnspecified = @"METRIC_SOURCE_UNSPECIFIED";
NSString * const kGTLRDataproc_Metric_MetricSource_MonitoringAgentDefaults = @"MONITORING_AGENT_DEFAULTS";
NSString * const kGTLRDataproc_Metric_MetricSource_Spark       = @"SPARK";
NSString * const kGTLRDataproc_Metric_MetricSource_SparkHistoryServer = @"SPARK_HISTORY_SERVER";
NSString * const kGTLRDataproc_Metric_MetricSource_Yarn        = @"YARN";

// GTLRDataproc_NodeGroup.roles
NSString * const kGTLRDataproc_NodeGroup_Roles_Driver          = @"DRIVER";
NSString * const kGTLRDataproc_NodeGroup_Roles_RoleUnspecified = @"ROLE_UNSPECIFIED";

// GTLRDataproc_NodeGroupOperationMetadata.operationType
NSString * const kGTLRDataproc_NodeGroupOperationMetadata_OperationType_Create = @"CREATE";
NSString * const kGTLRDataproc_NodeGroupOperationMetadata_OperationType_Delete = @"DELETE";
NSString * const kGTLRDataproc_NodeGroupOperationMetadata_OperationType_NodeGroupOperationTypeUnspecified = @"NODE_GROUP_OPERATION_TYPE_UNSPECIFIED";
NSString * const kGTLRDataproc_NodeGroupOperationMetadata_OperationType_Repair = @"REPAIR";
NSString * const kGTLRDataproc_NodeGroupOperationMetadata_OperationType_Resize = @"RESIZE";
NSString * const kGTLRDataproc_NodeGroupOperationMetadata_OperationType_Start = @"START";
NSString * const kGTLRDataproc_NodeGroupOperationMetadata_OperationType_Stop = @"STOP";
NSString * const kGTLRDataproc_NodeGroupOperationMetadata_OperationType_Update = @"UPDATE";
NSString * const kGTLRDataproc_NodeGroupOperationMetadata_OperationType_UpdateLabels = @"UPDATE_LABELS";

// GTLRDataproc_NodePool.repairAction
NSString * const kGTLRDataproc_NodePool_RepairAction_Delete    = @"DELETE";
NSString * const kGTLRDataproc_NodePool_RepairAction_RepairActionUnspecified = @"REPAIR_ACTION_UNSPECIFIED";

// GTLRDataproc_RddOperationNode.outputDeterministicLevel
NSString * const kGTLRDataproc_RddOperationNode_OutputDeterministicLevel_DeterministicLevelDeterminate = @"DETERMINISTIC_LEVEL_DETERMINATE";
NSString * const kGTLRDataproc_RddOperationNode_OutputDeterministicLevel_DeterministicLevelIndeterminate = @"DETERMINISTIC_LEVEL_INDETERMINATE";
NSString * const kGTLRDataproc_RddOperationNode_OutputDeterministicLevel_DeterministicLevelUnordered = @"DETERMINISTIC_LEVEL_UNORDERED";
NSString * const kGTLRDataproc_RddOperationNode_OutputDeterministicLevel_DeterministicLevelUnspecified = @"DETERMINISTIC_LEVEL_UNSPECIFIED";

// GTLRDataproc_RepairNodeGroupRequest.repairAction
NSString * const kGTLRDataproc_RepairNodeGroupRequest_RepairAction_RepairActionUnspecified = @"REPAIR_ACTION_UNSPECIFIED";
NSString * const kGTLRDataproc_RepairNodeGroupRequest_RepairAction_Replace = @"REPLACE";

// GTLRDataproc_ReservationAffinity.consumeReservationType
NSString * const kGTLRDataproc_ReservationAffinity_ConsumeReservationType_AnyReservation = @"ANY_RESERVATION";
NSString * const kGTLRDataproc_ReservationAffinity_ConsumeReservationType_NoReservation = @"NO_RESERVATION";
NSString * const kGTLRDataproc_ReservationAffinity_ConsumeReservationType_SpecificReservation = @"SPECIFIC_RESERVATION";
NSString * const kGTLRDataproc_ReservationAffinity_ConsumeReservationType_TypeUnspecified = @"TYPE_UNSPECIFIED";

// GTLRDataproc_Session.state
NSString * const kGTLRDataproc_Session_State_Active           = @"ACTIVE";
NSString * const kGTLRDataproc_Session_State_Creating         = @"CREATING";
NSString * const kGTLRDataproc_Session_State_Failed           = @"FAILED";
NSString * const kGTLRDataproc_Session_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRDataproc_Session_State_Terminated       = @"TERMINATED";
NSString * const kGTLRDataproc_Session_State_Terminating      = @"TERMINATING";

// GTLRDataproc_SessionOperationMetadata.operationType
NSString * const kGTLRDataproc_SessionOperationMetadata_OperationType_Create = @"CREATE";
NSString * const kGTLRDataproc_SessionOperationMetadata_OperationType_Delete = @"DELETE";
NSString * const kGTLRDataproc_SessionOperationMetadata_OperationType_SessionOperationTypeUnspecified = @"SESSION_OPERATION_TYPE_UNSPECIFIED";
NSString * const kGTLRDataproc_SessionOperationMetadata_OperationType_Terminate = @"TERMINATE";

// GTLRDataproc_SessionStateHistory.state
NSString * const kGTLRDataproc_SessionStateHistory_State_Active = @"ACTIVE";
NSString * const kGTLRDataproc_SessionStateHistory_State_Creating = @"CREATING";
NSString * const kGTLRDataproc_SessionStateHistory_State_Failed = @"FAILED";
NSString * const kGTLRDataproc_SessionStateHistory_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRDataproc_SessionStateHistory_State_Terminated = @"TERMINATED";
NSString * const kGTLRDataproc_SessionStateHistory_State_Terminating = @"TERMINATING";

// GTLRDataproc_SoftwareConfig.optionalComponents
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Anaconda = @"ANACONDA";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_ComponentUnspecified = @"COMPONENT_UNSPECIFIED";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Docker = @"DOCKER";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Druid = @"DRUID";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Flink = @"FLINK";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Hbase = @"HBASE";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_HiveWebhcat = @"HIVE_WEBHCAT";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Hudi = @"HUDI";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Iceberg = @"ICEBERG";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Jupyter = @"JUPYTER";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Presto = @"PRESTO";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Ranger = @"RANGER";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Solr = @"SOLR";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Trino = @"TRINO";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Zeppelin = @"ZEPPELIN";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Zookeeper = @"ZOOKEEPER";

// GTLRDataproc_SqlExecutionUiData_Jobs.job
NSString * const kGTLRDataproc_SqlExecutionUiData_Jobs_Job_JobExecutionStatusFailed = @"JOB_EXECUTION_STATUS_FAILED";
NSString * const kGTLRDataproc_SqlExecutionUiData_Jobs_Job_JobExecutionStatusRunning = @"JOB_EXECUTION_STATUS_RUNNING";
NSString * const kGTLRDataproc_SqlExecutionUiData_Jobs_Job_JobExecutionStatusSucceeded = @"JOB_EXECUTION_STATUS_SUCCEEDED";
NSString * const kGTLRDataproc_SqlExecutionUiData_Jobs_Job_JobExecutionStatusUnknown = @"JOB_EXECUTION_STATUS_UNKNOWN";
NSString * const kGTLRDataproc_SqlExecutionUiData_Jobs_Job_JobExecutionStatusUnspecified = @"JOB_EXECUTION_STATUS_UNSPECIFIED";

// GTLRDataproc_StageData.status
NSString * const kGTLRDataproc_StageData_Status_StageStatusActive = @"STAGE_STATUS_ACTIVE";
NSString * const kGTLRDataproc_StageData_Status_StageStatusComplete = @"STAGE_STATUS_COMPLETE";
NSString * const kGTLRDataproc_StageData_Status_StageStatusFailed = @"STAGE_STATUS_FAILED";
NSString * const kGTLRDataproc_StageData_Status_StageStatusPending = @"STAGE_STATUS_PENDING";
NSString * const kGTLRDataproc_StageData_Status_StageStatusSkipped = @"STAGE_STATUS_SKIPPED";
NSString * const kGTLRDataproc_StageData_Status_StageStatusUnspecified = @"STAGE_STATUS_UNSPECIFIED";

// GTLRDataproc_StateHistory.state
NSString * const kGTLRDataproc_StateHistory_State_Cancelled    = @"CANCELLED";
NSString * const kGTLRDataproc_StateHistory_State_Cancelling   = @"CANCELLING";
NSString * const kGTLRDataproc_StateHistory_State_Failed       = @"FAILED";
NSString * const kGTLRDataproc_StateHistory_State_Pending      = @"PENDING";
NSString * const kGTLRDataproc_StateHistory_State_Running      = @"RUNNING";
NSString * const kGTLRDataproc_StateHistory_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRDataproc_StateHistory_State_Succeeded    = @"SUCCEEDED";

// GTLRDataproc_WorkflowMetadata.state
NSString * const kGTLRDataproc_WorkflowMetadata_State_Done    = @"DONE";
NSString * const kGTLRDataproc_WorkflowMetadata_State_Pending = @"PENDING";
NSString * const kGTLRDataproc_WorkflowMetadata_State_Running = @"RUNNING";
NSString * const kGTLRDataproc_WorkflowMetadata_State_Unknown = @"UNKNOWN";

// GTLRDataproc_WorkflowNode.state
NSString * const kGTLRDataproc_WorkflowNode_State_Blocked      = @"BLOCKED";
NSString * const kGTLRDataproc_WorkflowNode_State_Completed    = @"COMPLETED";
NSString * const kGTLRDataproc_WorkflowNode_State_Failed       = @"FAILED";
NSString * const kGTLRDataproc_WorkflowNode_State_NodeStateUnspecified = @"NODE_STATE_UNSPECIFIED";
NSString * const kGTLRDataproc_WorkflowNode_State_Runnable     = @"RUNNABLE";
NSString * const kGTLRDataproc_WorkflowNode_State_Running      = @"RUNNING";

// GTLRDataproc_YarnApplication.state
NSString * const kGTLRDataproc_YarnApplication_State_Accepted  = @"ACCEPTED";
NSString * const kGTLRDataproc_YarnApplication_State_Failed    = @"FAILED";
NSString * const kGTLRDataproc_YarnApplication_State_Finished  = @"FINISHED";
NSString * const kGTLRDataproc_YarnApplication_State_Killed    = @"KILLED";
NSString * const kGTLRDataproc_YarnApplication_State_New       = @"NEW";
NSString * const kGTLRDataproc_YarnApplication_State_NewSaving = @"NEW_SAVING";
NSString * const kGTLRDataproc_YarnApplication_State_Running   = @"RUNNING";
NSString * const kGTLRDataproc_YarnApplication_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRDataproc_YarnApplication_State_Submitted = @"SUBMITTED";

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdeprecated-implementations"

// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AcceleratorConfig
//

@implementation GTLRDataproc_AcceleratorConfig
@dynamic acceleratorCount, acceleratorTypeUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AccessSessionSparkApplicationEnvironmentInfoResponse
//

@implementation GTLRDataproc_AccessSessionSparkApplicationEnvironmentInfoResponse
@dynamic applicationEnvironmentInfo;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AccessSessionSparkApplicationJobResponse
//

@implementation GTLRDataproc_AccessSessionSparkApplicationJobResponse
@dynamic jobData;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AccessSessionSparkApplicationResponse
//

@implementation GTLRDataproc_AccessSessionSparkApplicationResponse
@dynamic application;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AccessSessionSparkApplicationSqlQueryResponse
//

@implementation GTLRDataproc_AccessSessionSparkApplicationSqlQueryResponse
@dynamic executionData;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AccessSessionSparkApplicationSqlSparkPlanGraphResponse
//

@implementation GTLRDataproc_AccessSessionSparkApplicationSqlSparkPlanGraphResponse
@dynamic sparkPlanGraph;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AccessSessionSparkApplicationStageAttemptResponse
//

@implementation GTLRDataproc_AccessSessionSparkApplicationStageAttemptResponse
@dynamic stageData;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AccessSessionSparkApplicationStageRddOperationGraphResponse
//

@implementation GTLRDataproc_AccessSessionSparkApplicationStageRddOperationGraphResponse
@dynamic rddOperationGraph;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AccessSparkApplicationEnvironmentInfoResponse
//

@implementation GTLRDataproc_AccessSparkApplicationEnvironmentInfoResponse
@dynamic applicationEnvironmentInfo;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AccessSparkApplicationJobResponse
//

@implementation GTLRDataproc_AccessSparkApplicationJobResponse
@dynamic jobData;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AccessSparkApplicationResponse
//

@implementation GTLRDataproc_AccessSparkApplicationResponse
@dynamic application;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AccessSparkApplicationSqlQueryResponse
//

@implementation GTLRDataproc_AccessSparkApplicationSqlQueryResponse
@dynamic executionData;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AccessSparkApplicationSqlSparkPlanGraphResponse
//

@implementation GTLRDataproc_AccessSparkApplicationSqlSparkPlanGraphResponse
@dynamic sparkPlanGraph;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AccessSparkApplicationStageAttemptResponse
//

@implementation GTLRDataproc_AccessSparkApplicationStageAttemptResponse
@dynamic stageData;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AccessSparkApplicationStageRddOperationGraphResponse
//

@implementation GTLRDataproc_AccessSparkApplicationStageRddOperationGraphResponse
@dynamic rddOperationGraph;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AccumulableInfo
//

@implementation GTLRDataproc_AccumulableInfo
@dynamic accumullableInfoId, name, update, value;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AnalyzeBatchRequest
//

@implementation GTLRDataproc_AnalyzeBatchRequest
@dynamic requestId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AnalyzeOperationMetadata
//

@implementation GTLRDataproc_AnalyzeOperationMetadata
@dynamic analyzedWorkloadName, analyzedWorkloadType, analyzedWorkloadUuid,
         createTime, descriptionProperty, doneTime, labels, warnings;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"warnings" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AnalyzeOperationMetadata_Labels
//

@implementation GTLRDataproc_AnalyzeOperationMetadata_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ApplicationAttemptInfo
//

@implementation GTLRDataproc_ApplicationAttemptInfo
@dynamic appSparkVersion, attemptId, completed, durationMillis, endTime,
         lastUpdated, sparkUser, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ApplicationEnvironmentInfo
//

@implementation GTLRDataproc_ApplicationEnvironmentInfo
@dynamic classpathEntries, hadoopProperties, metricsProperties,
         resourceProfiles, runtime, sparkProperties, systemProperties;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"resourceProfiles" : [GTLRDataproc_ResourceProfileInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ApplicationEnvironmentInfo_ClasspathEntries
//

@implementation GTLRDataproc_ApplicationEnvironmentInfo_ClasspathEntries

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ApplicationEnvironmentInfo_HadoopProperties
//

@implementation GTLRDataproc_ApplicationEnvironmentInfo_HadoopProperties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ApplicationEnvironmentInfo_MetricsProperties
//

@implementation GTLRDataproc_ApplicationEnvironmentInfo_MetricsProperties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ApplicationEnvironmentInfo_SparkProperties
//

@implementation GTLRDataproc_ApplicationEnvironmentInfo_SparkProperties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ApplicationEnvironmentInfo_SystemProperties
//

@implementation GTLRDataproc_ApplicationEnvironmentInfo_SystemProperties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ApplicationInfo
//

@implementation GTLRDataproc_ApplicationInfo
@dynamic applicationContextIngestionStatus, applicationId, attempts,
         coresGranted, coresPerExecutor, maxCores, memoryPerExecutorMb, name,
         quantileDataStatus;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"attempts" : [GTLRDataproc_ApplicationAttemptInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AppSummary
//

@implementation GTLRDataproc_AppSummary
@dynamic numCompletedJobs, numCompletedStages;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AutoscalingConfig
//

@implementation GTLRDataproc_AutoscalingConfig
@dynamic policyUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AutoscalingPolicy
//

@implementation GTLRDataproc_AutoscalingPolicy
@dynamic basicAlgorithm, identifier, labels, name, secondaryWorkerConfig,
         workerConfig;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AutoscalingPolicy_Labels
//

@implementation GTLRDataproc_AutoscalingPolicy_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AutotuningConfig
//

@implementation GTLRDataproc_AutotuningConfig
@dynamic scenarios;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"scenarios" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AuxiliaryNodeGroup
//

@implementation GTLRDataproc_AuxiliaryNodeGroup
@dynamic nodeGroup, nodeGroupId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AuxiliaryServicesConfig
//

@implementation GTLRDataproc_AuxiliaryServicesConfig
@dynamic metastoreConfig, sparkHistoryServerConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_BasicAutoscalingAlgorithm
//

@implementation GTLRDataproc_BasicAutoscalingAlgorithm
@dynamic cooldownPeriod, sparkStandaloneConfig, yarnConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_BasicYarnAutoscalingConfig
//

@implementation GTLRDataproc_BasicYarnAutoscalingConfig
@dynamic gracefulDecommissionTimeout, scaleDownFactor,
         scaleDownMinWorkerFraction, scaleUpFactor, scaleUpMinWorkerFraction;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Batch
//

@implementation GTLRDataproc_Batch
@dynamic createTime, creator, environmentConfig, labels, name, operation,
         pysparkBatch, runtimeConfig, runtimeInfo, sparkBatch, sparkRBatch,
         sparkSqlBatch, state, stateHistory, stateMessage, stateTime, uuid;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"stateHistory" : [GTLRDataproc_StateHistory class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Batch_Labels
//

@implementation GTLRDataproc_Batch_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_BatchOperationMetadata
//

@implementation GTLRDataproc_BatchOperationMetadata
@dynamic batch, batchUuid, createTime, descriptionProperty, doneTime, labels,
         operationType, warnings;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"warnings" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_BatchOperationMetadata_Labels
//

@implementation GTLRDataproc_BatchOperationMetadata_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Binding
//

@implementation GTLRDataproc_Binding
@dynamic condition, members, role;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"members" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_CancelJobRequest
//

@implementation GTLRDataproc_CancelJobRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Cluster
//

@implementation GTLRDataproc_Cluster
@dynamic clusterName, clusterUuid, config, labels, metrics, projectId, status,
         statusHistory, virtualClusterConfig;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statusHistory" : [GTLRDataproc_ClusterStatus class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Cluster_Labels
//

@implementation GTLRDataproc_Cluster_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterConfig
//

@implementation GTLRDataproc_ClusterConfig
@dynamic autoscalingConfig, auxiliaryNodeGroups, configBucket,
         dataprocMetricConfig, encryptionConfig, endpointConfig,
         gceClusterConfig, gkeClusterConfig, initializationActions,
         lifecycleConfig, masterConfig, metastoreConfig, secondaryWorkerConfig,
         securityConfig, softwareConfig, tempBucket, workerConfig;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auxiliaryNodeGroups" : [GTLRDataproc_AuxiliaryNodeGroup class],
    @"initializationActions" : [GTLRDataproc_NodeInitializationAction class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterMetrics
//

@implementation GTLRDataproc_ClusterMetrics
@dynamic hdfsMetrics, yarnMetrics;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterMetrics_HdfsMetrics
//

@implementation GTLRDataproc_ClusterMetrics_HdfsMetrics

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterMetrics_YarnMetrics
//

@implementation GTLRDataproc_ClusterMetrics_YarnMetrics

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterOperation
//

@implementation GTLRDataproc_ClusterOperation
@dynamic done, error, operationId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterOperationMetadata
//

@implementation GTLRDataproc_ClusterOperationMetadata
@dynamic childOperationIds, clusterName, clusterUuid, descriptionProperty,
         labels, operationType, status, statusHistory, warnings;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"childOperationIds" : [NSString class],
    @"statusHistory" : [GTLRDataproc_ClusterOperationStatus class],
    @"warnings" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterOperationMetadata_Labels
//

@implementation GTLRDataproc_ClusterOperationMetadata_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterOperationStatus
//

@implementation GTLRDataproc_ClusterOperationStatus
@dynamic details, innerState, state, stateStartTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterSelector
//

@implementation GTLRDataproc_ClusterSelector
@dynamic clusterLabels, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterSelector_ClusterLabels
//

@implementation GTLRDataproc_ClusterSelector_ClusterLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterStatus
//

@implementation GTLRDataproc_ClusterStatus
@dynamic detail, state, stateStartTime, substate;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterToRepair
//

@implementation GTLRDataproc_ClusterToRepair
@dynamic clusterRepairAction;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ConfidentialInstanceConfig
//

@implementation GTLRDataproc_ConfidentialInstanceConfig
@dynamic enableConfidentialCompute;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ConsolidatedExecutorSummary
//

@implementation GTLRDataproc_ConsolidatedExecutorSummary
@dynamic activeTasks, completedTasks, count, diskUsed, failedTasks, isExcluded,
         maxMemory, memoryMetrics, memoryUsed, rddBlocks, totalCores,
         totalDurationMillis, totalGcTimeMillis, totalInputBytes,
         totalShuffleRead, totalShuffleWrite, totalTasks;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_DiagnoseClusterRequest
//

@implementation GTLRDataproc_DiagnoseClusterRequest
@dynamic diagnosisInterval, job, jobs, tarballAccess, tarballGcsDir,
         yarnApplicationId, yarnApplicationIds;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jobs" : [NSString class],
    @"yarnApplicationIds" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_DiagnoseClusterResults
//

@implementation GTLRDataproc_DiagnoseClusterResults
@dynamic outputUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_DiskConfig
//

@implementation GTLRDataproc_DiskConfig
@dynamic bootDiskProvisionedIops, bootDiskProvisionedThroughput, bootDiskSizeGb,
         bootDiskType, localSsdInterface, numLocalSsds;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_DriverSchedulingConfig
//

@implementation GTLRDataproc_DriverSchedulingConfig
@dynamic memoryMb, vcores;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Empty
//

@implementation GTLRDataproc_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_EncryptionConfig
//

@implementation GTLRDataproc_EncryptionConfig
@dynamic gcePdKmsKeyName, kmsKey;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_EndpointConfig
//

@implementation GTLRDataproc_EndpointConfig
@dynamic enableHttpPortAccess, httpPorts;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_EndpointConfig_HttpPorts
//

@implementation GTLRDataproc_EndpointConfig_HttpPorts

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_EnvironmentConfig
//

@implementation GTLRDataproc_EnvironmentConfig
@dynamic executionConfig, peripheralsConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ExecutionConfig
//

@implementation GTLRDataproc_ExecutionConfig
@dynamic idleTtl, kmsKey, networkTags, networkUri, serviceAccount,
         stagingBucket, subnetworkUri, ttl;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"networkTags" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ExecutorMetrics
//

@implementation GTLRDataproc_ExecutorMetrics
@dynamic metrics;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ExecutorMetrics_Metrics
//

@implementation GTLRDataproc_ExecutorMetrics_Metrics

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ExecutorMetricsDistributions
//

@implementation GTLRDataproc_ExecutorMetricsDistributions
@dynamic diskBytesSpilled, failedTasks, inputBytes, inputRecords, killedTasks,
         memoryBytesSpilled, outputBytes, outputRecords, peakMemoryMetrics,
         quantiles, shuffleRead, shuffleReadRecords, shuffleWrite,
         shuffleWriteRecords, succeededTasks, taskTimeMillis;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"diskBytesSpilled" : [NSNumber class],
    @"failedTasks" : [NSNumber class],
    @"inputBytes" : [NSNumber class],
    @"inputRecords" : [NSNumber class],
    @"killedTasks" : [NSNumber class],
    @"memoryBytesSpilled" : [NSNumber class],
    @"outputBytes" : [NSNumber class],
    @"outputRecords" : [NSNumber class],
    @"quantiles" : [NSNumber class],
    @"shuffleRead" : [NSNumber class],
    @"shuffleReadRecords" : [NSNumber class],
    @"shuffleWrite" : [NSNumber class],
    @"shuffleWriteRecords" : [NSNumber class],
    @"succeededTasks" : [NSNumber class],
    @"taskTimeMillis" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ExecutorPeakMetricsDistributions
//

@implementation GTLRDataproc_ExecutorPeakMetricsDistributions
@dynamic executorMetrics, quantiles;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"executorMetrics" : [GTLRDataproc_ExecutorMetrics class],
    @"quantiles" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ExecutorResourceRequest
//

@implementation GTLRDataproc_ExecutorResourceRequest
@dynamic amount, discoveryScript, resourceName, vendor;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ExecutorStageSummary
//

@implementation GTLRDataproc_ExecutorStageSummary
@dynamic diskBytesSpilled, executorId, failedTasks, inputBytes, inputRecords,
         isExcludedForStage, killedTasks, memoryBytesSpilled, outputBytes,
         outputRecords, peakMemoryMetrics, shuffleRead, shuffleReadRecords,
         shuffleWrite, shuffleWriteRecords, stageAttemptId, stageId,
         succeededTasks, taskTimeMillis;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ExecutorSummary
//

@implementation GTLRDataproc_ExecutorSummary
@dynamic activeTasks, addTime, attributes, completedTasks, diskUsed,
         excludedInStages, executorId, executorLogs, failedTasks, hostPort,
         isActive, isExcluded, maxMemory, maxTasks, memoryMetrics, memoryUsed,
         peakMemoryMetrics, rddBlocks, removeReason, removeTime,
         resourceProfileId, resources, totalCores, totalDurationMillis,
         totalGcTimeMillis, totalInputBytes, totalShuffleRead,
         totalShuffleWrite, totalTasks;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"excludedInStages" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ExecutorSummary_Attributes
//

@implementation GTLRDataproc_ExecutorSummary_Attributes

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ExecutorSummary_ExecutorLogs
//

@implementation GTLRDataproc_ExecutorSummary_ExecutorLogs

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ExecutorSummary_Resources
//

@implementation GTLRDataproc_ExecutorSummary_Resources

+ (Class)classForAdditionalProperties {
  return [GTLRDataproc_ResourceInformation class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Expr
//

@implementation GTLRDataproc_Expr
@dynamic descriptionProperty, expression, location, title;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_FlinkJob
//

@implementation GTLRDataproc_FlinkJob
@dynamic args, jarFileUris, loggingConfig, mainClass, mainJarFileUri,
         properties, savepointUri;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"args" : [NSString class],
    @"jarFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_FlinkJob_Properties
//

@implementation GTLRDataproc_FlinkJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GceClusterConfig
//

@implementation GTLRDataproc_GceClusterConfig
@dynamic confidentialInstanceConfig, internalIpOnly, metadata, networkUri,
         nodeGroupAffinity, privateIpv6GoogleAccess, reservationAffinity,
         serviceAccount, serviceAccountScopes, shieldedInstanceConfig,
         subnetworkUri, tags, zoneUri;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"serviceAccountScopes" : [NSString class],
    @"tags" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GceClusterConfig_Metadata
//

@implementation GTLRDataproc_GceClusterConfig_Metadata

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GetIamPolicyRequest
//

@implementation GTLRDataproc_GetIamPolicyRequest
@dynamic options;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GetPolicyOptions
//

@implementation GTLRDataproc_GetPolicyOptions
@dynamic requestedPolicyVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GkeClusterConfig
//

@implementation GTLRDataproc_GkeClusterConfig
@dynamic gkeClusterTarget, namespacedGkeDeploymentTarget, nodePoolTarget;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"nodePoolTarget" : [GTLRDataproc_GkeNodePoolTarget class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GkeNodeConfig
//

@implementation GTLRDataproc_GkeNodeConfig
@dynamic accelerators, bootDiskKmsKey, localSsdCount, machineType,
         minCpuPlatform, preemptible, spot;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"accelerators" : [GTLRDataproc_GkeNodePoolAcceleratorConfig class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GkeNodePoolAcceleratorConfig
//

@implementation GTLRDataproc_GkeNodePoolAcceleratorConfig
@dynamic acceleratorCount, acceleratorType, gpuPartitionSize;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GkeNodePoolAutoscalingConfig
//

@implementation GTLRDataproc_GkeNodePoolAutoscalingConfig
@dynamic maxNodeCount, minNodeCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GkeNodePoolConfig
//

@implementation GTLRDataproc_GkeNodePoolConfig
@dynamic autoscaling, config, locations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"locations" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GkeNodePoolTarget
//

@implementation GTLRDataproc_GkeNodePoolTarget
@dynamic nodePool, nodePoolConfig, roles;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"roles" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig
//

@implementation GTLRDataproc_GoogleCloudDataprocV1WorkflowTemplateEncryptionConfig
@dynamic kmsKey;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_HadoopJob
//

@implementation GTLRDataproc_HadoopJob
@dynamic archiveUris, args, fileUris, jarFileUris, loggingConfig, mainClass,
         mainJarFileUri, properties;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"archiveUris" : [NSString class],
    @"args" : [NSString class],
    @"fileUris" : [NSString class],
    @"jarFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_HadoopJob_Properties
//

@implementation GTLRDataproc_HadoopJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_HiveJob
//

@implementation GTLRDataproc_HiveJob
@dynamic continueOnFailure, jarFileUris, properties, queryFileUri, queryList,
         scriptVariables;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jarFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_HiveJob_Properties
//

@implementation GTLRDataproc_HiveJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_HiveJob_ScriptVariables
//

@implementation GTLRDataproc_HiveJob_ScriptVariables

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_IdentityConfig
//

@implementation GTLRDataproc_IdentityConfig
@dynamic userServiceAccountMapping;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_IdentityConfig_UserServiceAccountMapping
//

@implementation GTLRDataproc_IdentityConfig_UserServiceAccountMapping

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InjectCredentialsRequest
//

@implementation GTLRDataproc_InjectCredentialsRequest
@dynamic clusterUuid, credentialsCiphertext;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InputMetrics
//

@implementation GTLRDataproc_InputMetrics
@dynamic bytesRead, recordsRead;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InputQuantileMetrics
//

@implementation GTLRDataproc_InputQuantileMetrics
@dynamic bytesRead, recordsRead;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InstanceFlexibilityPolicy
//

@implementation GTLRDataproc_InstanceFlexibilityPolicy
@dynamic instanceSelectionList, instanceSelectionResults, provisioningModelMix;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"instanceSelectionList" : [GTLRDataproc_InstanceSelection class],
    @"instanceSelectionResults" : [GTLRDataproc_InstanceSelectionResult class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InstanceGroupAutoscalingPolicyConfig
//

@implementation GTLRDataproc_InstanceGroupAutoscalingPolicyConfig
@dynamic maxInstances, minInstances, weight;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InstanceGroupConfig
//

@implementation GTLRDataproc_InstanceGroupConfig
@dynamic accelerators, diskConfig, imageUri, instanceFlexibilityPolicy,
         instanceNames, instanceReferences, isPreemptible, machineTypeUri,
         managedGroupConfig, minCpuPlatform, minNumInstances, numInstances,
         preemptibility, startupConfig;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"accelerators" : [GTLRDataproc_AcceleratorConfig class],
    @"instanceNames" : [NSString class],
    @"instanceReferences" : [GTLRDataproc_InstanceReference class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InstanceReference
//

@implementation GTLRDataproc_InstanceReference
@dynamic instanceId, instanceName, publicEciesKey, publicKey;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InstanceSelection
//

@implementation GTLRDataproc_InstanceSelection
@dynamic machineTypes, rank;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"machineTypes" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InstanceSelectionResult
//

@implementation GTLRDataproc_InstanceSelectionResult
@dynamic machineType, vmCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InstantiateWorkflowTemplateRequest
//

@implementation GTLRDataproc_InstantiateWorkflowTemplateRequest
@dynamic parameters, requestId, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InstantiateWorkflowTemplateRequest_Parameters
//

@implementation GTLRDataproc_InstantiateWorkflowTemplateRequest_Parameters

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Interval
//

@implementation GTLRDataproc_Interval
@dynamic endTime, startTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Job
//

@implementation GTLRDataproc_Job
@dynamic done, driverControlFilesUri, driverOutputResourceUri,
         driverSchedulingConfig, flinkJob, hadoopJob, hiveJob, jobUuid, labels,
         pigJob, placement, prestoJob, pysparkJob, reference, scheduling,
         sparkJob, sparkRJob, sparkSqlJob, status, statusHistory, trinoJob,
         yarnApplications;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statusHistory" : [GTLRDataproc_JobStatus class],
    @"yarnApplications" : [GTLRDataproc_YarnApplication class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Job_Labels
//

@implementation GTLRDataproc_Job_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_JobData
//

@implementation GTLRDataproc_JobData
@dynamic completionTime, descriptionProperty, jobGroup, jobId, killTasksSummary,
         name, numActiveStages, numActiveTasks, numCompletedIndices,
         numCompletedStages, numCompletedTasks, numFailedStages, numFailedTasks,
         numKilledTasks, numSkippedStages, numSkippedTasks, numTasks,
         skippedStages, sqlExecutionId, stageIds, status, submissionTime;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"skippedStages" : [NSNumber class],
    @"stageIds" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_JobData_KillTasksSummary
//

@implementation GTLRDataproc_JobData_KillTasksSummary

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_JobMetadata
//

@implementation GTLRDataproc_JobMetadata
@dynamic jobId, operationType, startTime, status;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_JobPlacement
//

@implementation GTLRDataproc_JobPlacement
@dynamic clusterLabels, clusterName, clusterUuid;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_JobPlacement_ClusterLabels
//

@implementation GTLRDataproc_JobPlacement_ClusterLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_JobReference
//

@implementation GTLRDataproc_JobReference
@dynamic jobId, projectId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_JobScheduling
//

@implementation GTLRDataproc_JobScheduling
@dynamic maxFailuresPerHour, maxFailuresTotal;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_JobsSummary
//

@implementation GTLRDataproc_JobsSummary
@dynamic activeJobs, applicationId, attempts, completedJobs, failedJobs,
         schedulingMode;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"attempts" : [GTLRDataproc_ApplicationAttemptInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_JobStatus
//

@implementation GTLRDataproc_JobStatus
@dynamic details, state, stateStartTime, substate;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_JupyterConfig
//

@implementation GTLRDataproc_JupyterConfig
@dynamic displayName, kernel;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_KerberosConfig
//

@implementation GTLRDataproc_KerberosConfig
@dynamic crossRealmTrustAdminServer, crossRealmTrustKdc, crossRealmTrustRealm,
         crossRealmTrustSharedPasswordUri, enableKerberos, kdcDbKeyUri,
         keyPasswordUri, keystorePasswordUri, keystoreUri, kmsKeyUri, realm,
         rootPrincipalPasswordUri, tgtLifetimeHours, truststorePasswordUri,
         truststoreUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_KubernetesClusterConfig
//

@implementation GTLRDataproc_KubernetesClusterConfig
@dynamic gkeClusterConfig, kubernetesNamespace, kubernetesSoftwareConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_KubernetesSoftwareConfig
//

@implementation GTLRDataproc_KubernetesSoftwareConfig
@dynamic componentVersion, properties;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_KubernetesSoftwareConfig_ComponentVersion
//

@implementation GTLRDataproc_KubernetesSoftwareConfig_ComponentVersion

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_KubernetesSoftwareConfig_Properties
//

@implementation GTLRDataproc_KubernetesSoftwareConfig_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_LifecycleConfig
//

@implementation GTLRDataproc_LifecycleConfig
@dynamic autoDeleteTime, autoDeleteTtl, idleDeleteTtl, idleStartTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ListAutoscalingPoliciesResponse
//

@implementation GTLRDataproc_ListAutoscalingPoliciesResponse
@dynamic nextPageToken, policies;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"policies" : [GTLRDataproc_AutoscalingPolicy class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"policies";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ListBatchesResponse
//

@implementation GTLRDataproc_ListBatchesResponse
@dynamic batches, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"batches" : [GTLRDataproc_Batch class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"batches";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ListClustersResponse
//

@implementation GTLRDataproc_ListClustersResponse
@dynamic clusters, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"clusters" : [GTLRDataproc_Cluster class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"clusters";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ListJobsResponse
//

@implementation GTLRDataproc_ListJobsResponse
@dynamic jobs, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jobs" : [GTLRDataproc_Job class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"jobs";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ListOperationsResponse
//

@implementation GTLRDataproc_ListOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRDataproc_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ListSessionsResponse
//

@implementation GTLRDataproc_ListSessionsResponse
@dynamic nextPageToken, sessions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sessions" : [GTLRDataproc_Session class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sessions";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ListSessionTemplatesResponse
//

@implementation GTLRDataproc_ListSessionTemplatesResponse
@dynamic nextPageToken, sessionTemplates;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sessionTemplates" : [GTLRDataproc_SessionTemplate class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sessionTemplates";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ListWorkflowTemplatesResponse
//

@implementation GTLRDataproc_ListWorkflowTemplatesResponse
@dynamic nextPageToken, templates, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"templates" : [GTLRDataproc_WorkflowTemplate class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"templates";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_LoggingConfig
//

@implementation GTLRDataproc_LoggingConfig
@dynamic driverLogLevels;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_LoggingConfig_DriverLogLevels
//

@implementation GTLRDataproc_LoggingConfig_DriverLogLevels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ManagedCluster
//

@implementation GTLRDataproc_ManagedCluster
@dynamic clusterName, config, labels;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ManagedCluster_Labels
//

@implementation GTLRDataproc_ManagedCluster_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ManagedGroupConfig
//

@implementation GTLRDataproc_ManagedGroupConfig
@dynamic instanceGroupManagerName, instanceGroupManagerUri,
         instanceTemplateName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_MemoryMetrics
//

@implementation GTLRDataproc_MemoryMetrics
@dynamic totalOffHeapStorageMemory, totalOnHeapStorageMemory,
         usedOffHeapStorageMemory, usedOnHeapStorageMemory;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_MetastoreConfig
//

@implementation GTLRDataproc_MetastoreConfig
@dynamic dataprocMetastoreService;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Metric
//

@implementation GTLRDataproc_Metric
@dynamic metricOverrides, metricSource;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metricOverrides" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_MetricConfig
//

@implementation GTLRDataproc_MetricConfig
@dynamic metrics;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metrics" : [GTLRDataproc_Metric class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_NamespacedGkeDeploymentTarget
//

@implementation GTLRDataproc_NamespacedGkeDeploymentTarget
@dynamic clusterNamespace, targetGkeCluster;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_NodeGroup
//

@implementation GTLRDataproc_NodeGroup
@dynamic labels, name, nodeGroupConfig, roles;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"roles" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_NodeGroup_Labels
//

@implementation GTLRDataproc_NodeGroup_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_NodeGroupAffinity
//

@implementation GTLRDataproc_NodeGroupAffinity
@dynamic nodeGroupUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_NodeGroupOperationMetadata
//

@implementation GTLRDataproc_NodeGroupOperationMetadata
@dynamic clusterUuid, descriptionProperty, labels, nodeGroupId, operationType,
         status, statusHistory, warnings;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statusHistory" : [GTLRDataproc_ClusterOperationStatus class],
    @"warnings" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_NodeGroupOperationMetadata_Labels
//

@implementation GTLRDataproc_NodeGroupOperationMetadata_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_NodeInitializationAction
//

@implementation GTLRDataproc_NodeInitializationAction
@dynamic executableFile, executionTimeout;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_NodePool
//

@implementation GTLRDataproc_NodePool
@dynamic identifier, instanceNames, repairAction;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"instanceNames" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Operation
//

@implementation GTLRDataproc_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Operation_Metadata
//

@implementation GTLRDataproc_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Operation_Response
//

@implementation GTLRDataproc_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_OrderedJob
//

@implementation GTLRDataproc_OrderedJob
@dynamic flinkJob, hadoopJob, hiveJob, labels, pigJob, prerequisiteStepIds,
         prestoJob, pysparkJob, scheduling, sparkJob, sparkRJob, sparkSqlJob,
         stepId, trinoJob;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"prerequisiteStepIds" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_OrderedJob_Labels
//

@implementation GTLRDataproc_OrderedJob_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_OutputMetrics
//

@implementation GTLRDataproc_OutputMetrics
@dynamic bytesWritten, recordsWritten;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_OutputQuantileMetrics
//

@implementation GTLRDataproc_OutputQuantileMetrics
@dynamic bytesWritten, recordsWritten;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ParameterValidation
//

@implementation GTLRDataproc_ParameterValidation
@dynamic regex, values;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PeripheralsConfig
//

@implementation GTLRDataproc_PeripheralsConfig
@dynamic metastoreService, sparkHistoryServerConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PigJob
//

@implementation GTLRDataproc_PigJob
@dynamic continueOnFailure, jarFileUris, loggingConfig, properties,
         queryFileUri, queryList, scriptVariables;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jarFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PigJob_Properties
//

@implementation GTLRDataproc_PigJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PigJob_ScriptVariables
//

@implementation GTLRDataproc_PigJob_ScriptVariables

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Policy
//

@implementation GTLRDataproc_Policy
@dynamic bindings, ETag, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bindings" : [GTLRDataproc_Binding class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PoolData
//

@implementation GTLRDataproc_PoolData
@dynamic name, stageIds;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"stageIds" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PrestoJob
//

@implementation GTLRDataproc_PrestoJob
@dynamic clientTags, continueOnFailure, loggingConfig, outputFormat, properties,
         queryFileUri, queryList;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"clientTags" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PrestoJob_Properties
//

@implementation GTLRDataproc_PrestoJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ProcessSummary
//

@implementation GTLRDataproc_ProcessSummary
@dynamic addTime, hostPort, isActive, processId, processLogs, removeTime,
         totalCores;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ProcessSummary_ProcessLogs
//

@implementation GTLRDataproc_ProcessSummary_ProcessLogs

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ProvisioningModelMix
//

@implementation GTLRDataproc_ProvisioningModelMix
@dynamic standardCapacityBase, standardCapacityPercentAboveBase;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PyPiRepositoryConfig
//

@implementation GTLRDataproc_PyPiRepositoryConfig
@dynamic pypiRepository;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PySparkBatch
//

@implementation GTLRDataproc_PySparkBatch
@dynamic archiveUris, args, fileUris, jarFileUris, mainPythonFileUri,
         pythonFileUris;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"archiveUris" : [NSString class],
    @"args" : [NSString class],
    @"fileUris" : [NSString class],
    @"jarFileUris" : [NSString class],
    @"pythonFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PySparkJob
//

@implementation GTLRDataproc_PySparkJob
@dynamic archiveUris, args, fileUris, jarFileUris, loggingConfig,
         mainPythonFileUri, properties, pythonFileUris;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"archiveUris" : [NSString class],
    @"args" : [NSString class],
    @"fileUris" : [NSString class],
    @"jarFileUris" : [NSString class],
    @"pythonFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PySparkJob_Properties
//

@implementation GTLRDataproc_PySparkJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Quantiles
//

@implementation GTLRDataproc_Quantiles
@dynamic count, maximum, minimum, percentile25, percentile50, percentile75, sum;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_QueryList
//

@implementation GTLRDataproc_QueryList
@dynamic queries;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"queries" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RddDataDistribution
//

@implementation GTLRDataproc_RddDataDistribution
@dynamic address, diskUsed, memoryRemaining, memoryUsed, offHeapMemoryRemaining,
         offHeapMemoryUsed, onHeapMemoryRemaining, onHeapMemoryUsed;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RddOperationCluster
//

@implementation GTLRDataproc_RddOperationCluster
@dynamic childClusters, childNodes, name, rddClusterId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"childClusters" : [GTLRDataproc_RddOperationCluster class],
    @"childNodes" : [GTLRDataproc_RddOperationNode class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RddOperationEdge
//

@implementation GTLRDataproc_RddOperationEdge
@dynamic fromId, toId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RddOperationGraph
//

@implementation GTLRDataproc_RddOperationGraph
@dynamic edges, incomingEdges, outgoingEdges, rootCluster, stageId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"edges" : [GTLRDataproc_RddOperationEdge class],
    @"incomingEdges" : [GTLRDataproc_RddOperationEdge class],
    @"outgoingEdges" : [GTLRDataproc_RddOperationEdge class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RddOperationNode
//

@implementation GTLRDataproc_RddOperationNode
@dynamic barrier, cached, callsite, name, nodeId, outputDeterministicLevel;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RddPartitionInfo
//

@implementation GTLRDataproc_RddPartitionInfo
@dynamic blockName, diskUsed, executors, memoryUsed, storageLevel;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"executors" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RddStorageInfo
//

@implementation GTLRDataproc_RddStorageInfo
@dynamic dataDistribution, diskUsed, memoryUsed, name, numCachedPartitions,
         numPartitions, partitions, rddStorageId, storageLevel;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"dataDistribution" : [GTLRDataproc_RddDataDistribution class],
    @"partitions" : [GTLRDataproc_RddPartitionInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RegexValidation
//

@implementation GTLRDataproc_RegexValidation
@dynamic regexes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"regexes" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RepairClusterRequest
//

@implementation GTLRDataproc_RepairClusterRequest
@dynamic cluster, clusterUuid, gracefulDecommissionTimeout, nodePools,
         parentOperationId, requestId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"nodePools" : [GTLRDataproc_NodePool class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RepairNodeGroupRequest
//

@implementation GTLRDataproc_RepairNodeGroupRequest
@dynamic instanceNames, repairAction, requestId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"instanceNames" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RepositoryConfig
//

@implementation GTLRDataproc_RepositoryConfig
@dynamic pypiRepositoryConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ReservationAffinity
//

@implementation GTLRDataproc_ReservationAffinity
@dynamic consumeReservationType, key, values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"values" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ResizeNodeGroupRequest
//

@implementation GTLRDataproc_ResizeNodeGroupRequest
@dynamic gracefulDecommissionTimeout, parentOperationId, requestId, size;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ResourceInformation
//

@implementation GTLRDataproc_ResourceInformation
@dynamic addresses, name;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"addresses" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ResourceProfileInfo
//

@implementation GTLRDataproc_ResourceProfileInfo
@dynamic executorResources, resourceProfileId, taskResources;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ResourceProfileInfo_ExecutorResources
//

@implementation GTLRDataproc_ResourceProfileInfo_ExecutorResources

+ (Class)classForAdditionalProperties {
  return [GTLRDataproc_ExecutorResourceRequest class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ResourceProfileInfo_TaskResources
//

@implementation GTLRDataproc_ResourceProfileInfo_TaskResources

+ (Class)classForAdditionalProperties {
  return [GTLRDataproc_TaskResourceRequest class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RuntimeConfig
//

@implementation GTLRDataproc_RuntimeConfig
@dynamic autotuningConfig, cohort, containerImage, properties, repositoryConfig,
         version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RuntimeConfig_Properties
//

@implementation GTLRDataproc_RuntimeConfig_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RuntimeInfo
//

@implementation GTLRDataproc_RuntimeInfo
@dynamic approximateUsage, currentUsage, diagnosticOutputUri, endpoints,
         outputUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RuntimeInfo_Endpoints
//

@implementation GTLRDataproc_RuntimeInfo_Endpoints

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SearchSessionSparkApplicationExecutorsResponse
//

@implementation GTLRDataproc_SearchSessionSparkApplicationExecutorsResponse
@dynamic nextPageToken, sparkApplicationExecutors;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkApplicationExecutors" : [GTLRDataproc_ExecutorSummary class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sparkApplicationExecutors";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SearchSessionSparkApplicationExecutorStageSummaryResponse
//

@implementation GTLRDataproc_SearchSessionSparkApplicationExecutorStageSummaryResponse
@dynamic nextPageToken, sparkApplicationStageExecutors;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkApplicationStageExecutors" : [GTLRDataproc_ExecutorStageSummary class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sparkApplicationStageExecutors";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SearchSessionSparkApplicationJobsResponse
//

@implementation GTLRDataproc_SearchSessionSparkApplicationJobsResponse
@dynamic nextPageToken, sparkApplicationJobs;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkApplicationJobs" : [GTLRDataproc_JobData class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sparkApplicationJobs";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SearchSessionSparkApplicationSqlQueriesResponse
//

@implementation GTLRDataproc_SearchSessionSparkApplicationSqlQueriesResponse
@dynamic nextPageToken, sparkApplicationSqlQueries;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkApplicationSqlQueries" : [GTLRDataproc_SqlExecutionUiData class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sparkApplicationSqlQueries";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SearchSessionSparkApplicationsResponse
//

@implementation GTLRDataproc_SearchSessionSparkApplicationsResponse
@dynamic nextPageToken, sparkApplications;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkApplications" : [GTLRDataproc_SparkApplication class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sparkApplications";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SearchSessionSparkApplicationStageAttemptsResponse
//

@implementation GTLRDataproc_SearchSessionSparkApplicationStageAttemptsResponse
@dynamic nextPageToken, sparkApplicationStageAttempts;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkApplicationStageAttempts" : [GTLRDataproc_StageData class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sparkApplicationStageAttempts";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SearchSessionSparkApplicationStageAttemptTasksResponse
//

@implementation GTLRDataproc_SearchSessionSparkApplicationStageAttemptTasksResponse
@dynamic nextPageToken, sparkApplicationStageAttemptTasks;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkApplicationStageAttemptTasks" : [GTLRDataproc_TaskData class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sparkApplicationStageAttemptTasks";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SearchSessionSparkApplicationStagesResponse
//

@implementation GTLRDataproc_SearchSessionSparkApplicationStagesResponse
@dynamic nextPageToken, sparkApplicationStages;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkApplicationStages" : [GTLRDataproc_StageData class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sparkApplicationStages";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SearchSparkApplicationExecutorsResponse
//

@implementation GTLRDataproc_SearchSparkApplicationExecutorsResponse
@dynamic nextPageToken, sparkApplicationExecutors;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkApplicationExecutors" : [GTLRDataproc_ExecutorSummary class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sparkApplicationExecutors";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SearchSparkApplicationExecutorStageSummaryResponse
//

@implementation GTLRDataproc_SearchSparkApplicationExecutorStageSummaryResponse
@dynamic nextPageToken, sparkApplicationStageExecutors;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkApplicationStageExecutors" : [GTLRDataproc_ExecutorStageSummary class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sparkApplicationStageExecutors";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SearchSparkApplicationJobsResponse
//

@implementation GTLRDataproc_SearchSparkApplicationJobsResponse
@dynamic nextPageToken, sparkApplicationJobs;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkApplicationJobs" : [GTLRDataproc_JobData class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sparkApplicationJobs";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SearchSparkApplicationSqlQueriesResponse
//

@implementation GTLRDataproc_SearchSparkApplicationSqlQueriesResponse
@dynamic nextPageToken, sparkApplicationSqlQueries;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkApplicationSqlQueries" : [GTLRDataproc_SqlExecutionUiData class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sparkApplicationSqlQueries";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SearchSparkApplicationsResponse
//

@implementation GTLRDataproc_SearchSparkApplicationsResponse
@dynamic nextPageToken, sparkApplications;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkApplications" : [GTLRDataproc_SparkApplication class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sparkApplications";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SearchSparkApplicationStageAttemptsResponse
//

@implementation GTLRDataproc_SearchSparkApplicationStageAttemptsResponse
@dynamic nextPageToken, sparkApplicationStageAttempts;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkApplicationStageAttempts" : [GTLRDataproc_StageData class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sparkApplicationStageAttempts";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SearchSparkApplicationStageAttemptTasksResponse
//

@implementation GTLRDataproc_SearchSparkApplicationStageAttemptTasksResponse
@dynamic nextPageToken, sparkApplicationStageAttemptTasks;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkApplicationStageAttemptTasks" : [GTLRDataproc_TaskData class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sparkApplicationStageAttemptTasks";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SearchSparkApplicationStagesResponse
//

@implementation GTLRDataproc_SearchSparkApplicationStagesResponse
@dynamic nextPageToken, sparkApplicationStages;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkApplicationStages" : [GTLRDataproc_StageData class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"sparkApplicationStages";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SecurityConfig
//

@implementation GTLRDataproc_SecurityConfig
@dynamic identityConfig, kerberosConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Session
//

@implementation GTLRDataproc_Session
@dynamic createTime, creator, environmentConfig, jupyterSession, labels, name,
         runtimeConfig, runtimeInfo, sessionTemplate, sparkConnectSession,
         state, stateHistory, stateMessage, stateTime, user, uuid;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"stateHistory" : [GTLRDataproc_SessionStateHistory class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Session_Labels
//

@implementation GTLRDataproc_Session_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SessionOperationMetadata
//

@implementation GTLRDataproc_SessionOperationMetadata
@dynamic createTime, descriptionProperty, doneTime, labels, operationType,
         session, sessionUuid, warnings;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"warnings" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SessionOperationMetadata_Labels
//

@implementation GTLRDataproc_SessionOperationMetadata_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SessionStateHistory
//

@implementation GTLRDataproc_SessionStateHistory
@dynamic state, stateMessage, stateStartTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SessionTemplate
//

@implementation GTLRDataproc_SessionTemplate
@dynamic createTime, creator, descriptionProperty, environmentConfig,
         jupyterSession, labels, name, runtimeConfig, sparkConnectSession,
         updateTime, uuid;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SessionTemplate_Labels
//

@implementation GTLRDataproc_SessionTemplate_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SetIamPolicyRequest
//

@implementation GTLRDataproc_SetIamPolicyRequest
@dynamic policy;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ShieldedInstanceConfig
//

@implementation GTLRDataproc_ShieldedInstanceConfig
@dynamic enableIntegrityMonitoring, enableSecureBoot, enableVtpm;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ShufflePushReadMetrics
//

@implementation GTLRDataproc_ShufflePushReadMetrics
@dynamic corruptMergedBlockChunks, localMergedBlocksFetched,
         localMergedBytesRead, localMergedChunksFetched,
         mergedFetchFallbackCount, remoteMergedBlocksFetched,
         remoteMergedBytesRead, remoteMergedChunksFetched,
         remoteMergedReqsDuration;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ShufflePushReadQuantileMetrics
//

@implementation GTLRDataproc_ShufflePushReadQuantileMetrics
@dynamic corruptMergedBlockChunks, localMergedBlocksFetched,
         localMergedBytesRead, localMergedChunksFetched,
         mergedFetchFallbackCount, remoteMergedBlocksFetched,
         remoteMergedBytesRead, remoteMergedChunksFetched,
         remoteMergedReqsDuration;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ShuffleReadMetrics
//

@implementation GTLRDataproc_ShuffleReadMetrics
@dynamic fetchWaitTimeMillis, localBlocksFetched, localBytesRead, recordsRead,
         remoteBlocksFetched, remoteBytesRead, remoteBytesReadToDisk,
         remoteReqsDuration, shufflePushReadMetrics;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ShuffleReadQuantileMetrics
//

@implementation GTLRDataproc_ShuffleReadQuantileMetrics
@dynamic fetchWaitTimeMillis, localBlocksFetched, readBytes, readRecords,
         remoteBlocksFetched, remoteBytesRead, remoteBytesReadToDisk,
         remoteReqsDuration, shufflePushReadMetrics, totalBlocksFetched;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ShuffleWriteMetrics
//

@implementation GTLRDataproc_ShuffleWriteMetrics
@dynamic bytesWritten, recordsWritten, writeTimeNanos;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ShuffleWriteQuantileMetrics
//

@implementation GTLRDataproc_ShuffleWriteQuantileMetrics
@dynamic writeBytes, writeRecords, writeTimeNanos;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SinkProgress
//

@implementation GTLRDataproc_SinkProgress
@dynamic descriptionProperty, metrics, numOutputRows;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SinkProgress_Metrics
//

@implementation GTLRDataproc_SinkProgress_Metrics

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SoftwareConfig
//

@implementation GTLRDataproc_SoftwareConfig
@dynamic imageVersion, optionalComponents, properties;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"optionalComponents" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SoftwareConfig_Properties
//

@implementation GTLRDataproc_SoftwareConfig_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SourceProgress
//

@implementation GTLRDataproc_SourceProgress
@dynamic descriptionProperty, endOffset, inputRowsPerSecond, latestOffset,
         metrics, numInputRows, processedRowsPerSecond, startOffset;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SourceProgress_Metrics
//

@implementation GTLRDataproc_SourceProgress_Metrics

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkApplication
//

@implementation GTLRDataproc_SparkApplication
@dynamic application, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkBatch
//

@implementation GTLRDataproc_SparkBatch
@dynamic archiveUris, args, fileUris, jarFileUris, mainClass, mainJarFileUri;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"archiveUris" : [NSString class],
    @"args" : [NSString class],
    @"fileUris" : [NSString class],
    @"jarFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkConnectConfig
//

@implementation GTLRDataproc_SparkConnectConfig
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkHistoryServerConfig
//

@implementation GTLRDataproc_SparkHistoryServerConfig
@dynamic dataprocCluster;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkJob
//

@implementation GTLRDataproc_SparkJob
@dynamic archiveUris, args, fileUris, jarFileUris, loggingConfig, mainClass,
         mainJarFileUri, properties;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"archiveUris" : [NSString class],
    @"args" : [NSString class],
    @"fileUris" : [NSString class],
    @"jarFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkJob_Properties
//

@implementation GTLRDataproc_SparkJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkPlanGraph
//

@implementation GTLRDataproc_SparkPlanGraph
@dynamic edges, executionId, nodes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"edges" : [GTLRDataproc_SparkPlanGraphEdge class],
    @"nodes" : [GTLRDataproc_SparkPlanGraphNodeWrapper class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkPlanGraphCluster
//

@implementation GTLRDataproc_SparkPlanGraphCluster
@dynamic desc, metrics, name, nodes, sparkPlanGraphClusterId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metrics" : [GTLRDataproc_SqlPlanMetric class],
    @"nodes" : [GTLRDataproc_SparkPlanGraphNodeWrapper class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkPlanGraphEdge
//

@implementation GTLRDataproc_SparkPlanGraphEdge
@dynamic fromId, toId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkPlanGraphNode
//

@implementation GTLRDataproc_SparkPlanGraphNode
@dynamic desc, metrics, name, sparkPlanGraphNodeId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metrics" : [GTLRDataproc_SqlPlanMetric class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkPlanGraphNodeWrapper
//

@implementation GTLRDataproc_SparkPlanGraphNodeWrapper
@dynamic cluster, node;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkRBatch
//

@implementation GTLRDataproc_SparkRBatch
@dynamic archiveUris, args, fileUris, mainRFileUri;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"archiveUris" : [NSString class],
    @"args" : [NSString class],
    @"fileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkRJob
//

@implementation GTLRDataproc_SparkRJob
@dynamic archiveUris, args, fileUris, loggingConfig, mainRFileUri, properties;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"archiveUris" : [NSString class],
    @"args" : [NSString class],
    @"fileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkRJob_Properties
//

@implementation GTLRDataproc_SparkRJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkRuntimeInfo
//

@implementation GTLRDataproc_SparkRuntimeInfo
@dynamic javaHome, javaVersion, scalaVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkSqlBatch
//

@implementation GTLRDataproc_SparkSqlBatch
@dynamic jarFileUris, queryFileUri, queryVariables;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jarFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkSqlBatch_QueryVariables
//

@implementation GTLRDataproc_SparkSqlBatch_QueryVariables

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkSqlJob
//

@implementation GTLRDataproc_SparkSqlJob
@dynamic jarFileUris, loggingConfig, properties, queryFileUri, queryList,
         scriptVariables;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jarFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkSqlJob_Properties
//

@implementation GTLRDataproc_SparkSqlJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkSqlJob_ScriptVariables
//

@implementation GTLRDataproc_SparkSqlJob_ScriptVariables

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkStandaloneAutoscalingConfig
//

@implementation GTLRDataproc_SparkStandaloneAutoscalingConfig
@dynamic gracefulDecommissionTimeout, removeOnlyIdleWorkers, scaleDownFactor,
         scaleDownMinWorkerFraction, scaleUpFactor, scaleUpMinWorkerFraction;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkWrapperObject
//

@implementation GTLRDataproc_SparkWrapperObject
@dynamic applicationEnvironmentInfo, applicationId, applicationInfo, appSummary,
         eventTimestamp, executorStageSummary, executorSummary, jobData,
         poolData, processSummary, rddOperationGraph, rddStorageInfo,
         resourceProfileInfo, sparkPlanGraph, speculationStageSummary,
         sqlExecutionUiData, stageData, streamBlockData, streamingQueryData,
         streamingQueryProgress, taskData;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SpeculationStageSummary
//

@implementation GTLRDataproc_SpeculationStageSummary
@dynamic numActiveTasks, numCompletedTasks, numFailedTasks, numKilledTasks,
         numTasks, stageAttemptId, stageId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SqlExecutionUiData
//

@implementation GTLRDataproc_SqlExecutionUiData
@dynamic completionTime, descriptionProperty, details, errorMessage,
         executionId, jobs, metrics, metricValues, metricValuesIsNull,
         modifiedConfigs, physicalPlanDescription, rootExecutionId, stages,
         submissionTime;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metrics" : [GTLRDataproc_SqlPlanMetric class],
    @"stages" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SqlExecutionUiData_Jobs
//

@implementation GTLRDataproc_SqlExecutionUiData_Jobs

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SqlExecutionUiData_MetricValues
//

@implementation GTLRDataproc_SqlExecutionUiData_MetricValues

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SqlExecutionUiData_ModifiedConfigs
//

@implementation GTLRDataproc_SqlExecutionUiData_ModifiedConfigs

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SqlPlanMetric
//

@implementation GTLRDataproc_SqlPlanMetric
@dynamic accumulatorId, metricType, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StageAttemptTasksSummary
//

@implementation GTLRDataproc_StageAttemptTasksSummary
@dynamic applicationId, numFailedTasks, numKilledTasks, numPendingTasks,
         numRunningTasks, numSuccessTasks, numTasks, stageAttemptId, stageId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StageData
//

@implementation GTLRDataproc_StageData
@dynamic accumulatorUpdates, completionTime, descriptionProperty, details,
         executorMetricsDistributions, executorSummary, failureReason,
         firstTaskLaunchedTime, isShufflePushEnabled, jobIds,
         killedTasksSummary, locality, name, numActiveTasks,
         numCompletedIndices, numCompleteTasks, numFailedTasks, numKilledTasks,
         numTasks, parentStageIds, peakExecutorMetrics, rddIds,
         resourceProfileId, schedulingPool, shuffleMergersCount,
         speculationSummary, stageAttemptId, stageId, stageMetrics, status,
         submissionTime, taskQuantileMetrics, tasks;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"accumulatorUpdates" : [GTLRDataproc_AccumulableInfo class],
    @"jobIds" : [NSNumber class],
    @"parentStageIds" : [NSNumber class],
    @"rddIds" : [NSNumber class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StageData_ExecutorSummary
//

@implementation GTLRDataproc_StageData_ExecutorSummary

+ (Class)classForAdditionalProperties {
  return [GTLRDataproc_ExecutorStageSummary class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StageData_KilledTasksSummary
//

@implementation GTLRDataproc_StageData_KilledTasksSummary

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StageData_Locality
//

@implementation GTLRDataproc_StageData_Locality

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StageData_Tasks
//

@implementation GTLRDataproc_StageData_Tasks

+ (Class)classForAdditionalProperties {
  return [GTLRDataproc_TaskData class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StageInputMetrics
//

@implementation GTLRDataproc_StageInputMetrics
@dynamic bytesRead, recordsRead;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StageMetrics
//

@implementation GTLRDataproc_StageMetrics
@dynamic diskBytesSpilled, executorCpuTimeNanos,
         executorDeserializeCpuTimeNanos, executorDeserializeTimeMillis,
         executorRunTimeMillis, jvmGcTimeMillis, memoryBytesSpilled,
         peakExecutionMemoryBytes, resultSerializationTimeMillis, resultSize,
         stageInputMetrics, stageOutputMetrics, stageShuffleReadMetrics,
         stageShuffleWriteMetrics;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StageOutputMetrics
//

@implementation GTLRDataproc_StageOutputMetrics
@dynamic bytesWritten, recordsWritten;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StageShufflePushReadMetrics
//

@implementation GTLRDataproc_StageShufflePushReadMetrics
@dynamic corruptMergedBlockChunks, localMergedBlocksFetched,
         localMergedBytesRead, localMergedChunksFetched,
         mergedFetchFallbackCount, remoteMergedBlocksFetched,
         remoteMergedBytesRead, remoteMergedChunksFetched,
         remoteMergedReqsDuration;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StageShuffleReadMetrics
//

@implementation GTLRDataproc_StageShuffleReadMetrics
@dynamic bytesRead, fetchWaitTimeMillis, localBlocksFetched, localBytesRead,
         recordsRead, remoteBlocksFetched, remoteBytesRead,
         remoteBytesReadToDisk, remoteReqsDuration, stageShufflePushReadMetrics;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StageShuffleWriteMetrics
//

@implementation GTLRDataproc_StageShuffleWriteMetrics
@dynamic bytesWritten, recordsWritten, writeTimeNanos;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StagesSummary
//

@implementation GTLRDataproc_StagesSummary
@dynamic applicationId, numActiveStages, numCompletedStages, numFailedStages,
         numPendingStages, numSkippedStages;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StartClusterRequest
//

@implementation GTLRDataproc_StartClusterRequest
@dynamic clusterUuid, requestId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StartupConfig
//

@implementation GTLRDataproc_StartupConfig
@dynamic requiredRegistrationFraction;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StateHistory
//

@implementation GTLRDataproc_StateHistory
@dynamic state, stateMessage, stateStartTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StateOperatorProgress
//

@implementation GTLRDataproc_StateOperatorProgress
@dynamic allRemovalsTimeMs, allUpdatesTimeMs, commitTimeMs, customMetrics,
         memoryUsedBytes, numRowsDroppedByWatermark, numRowsRemoved,
         numRowsTotal, numRowsUpdated, numShufflePartitions,
         numStateStoreInstances, operatorName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StateOperatorProgress_CustomMetrics
//

@implementation GTLRDataproc_StateOperatorProgress_CustomMetrics

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Status
//

@implementation GTLRDataproc_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRDataproc_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Status_Details_Item
//

@implementation GTLRDataproc_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StopClusterRequest
//

@implementation GTLRDataproc_StopClusterRequest
@dynamic clusterUuid, requestId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StreamBlockData
//

@implementation GTLRDataproc_StreamBlockData
@dynamic deserialized, diskSize, executorId, hostPort, memSize, name,
         storageLevel, useDisk, useMemory;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StreamingQueryData
//

@implementation GTLRDataproc_StreamingQueryData
@dynamic endTimestamp, exception, isActive, name, runId, startTimestamp,
         streamingQueryId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StreamingQueryProgress
//

@implementation GTLRDataproc_StreamingQueryProgress
@dynamic batchDuration, batchId, durationMillis, eventTime, name,
         observedMetrics, runId, sink, sources, stateOperators,
         streamingQueryProgressId, timestamp;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sources" : [GTLRDataproc_SourceProgress class],
    @"stateOperators" : [GTLRDataproc_StateOperatorProgress class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StreamingQueryProgress_DurationMillis
//

@implementation GTLRDataproc_StreamingQueryProgress_DurationMillis

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StreamingQueryProgress_EventTime
//

@implementation GTLRDataproc_StreamingQueryProgress_EventTime

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StreamingQueryProgress_ObservedMetrics
//

@implementation GTLRDataproc_StreamingQueryProgress_ObservedMetrics

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SubmitJobRequest
//

@implementation GTLRDataproc_SubmitJobRequest
@dynamic job, requestId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SummarizeSessionSparkApplicationExecutorsResponse
//

@implementation GTLRDataproc_SummarizeSessionSparkApplicationExecutorsResponse
@dynamic activeExecutorSummary, applicationId, deadExecutorSummary,
         totalExecutorSummary;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SummarizeSessionSparkApplicationJobsResponse
//

@implementation GTLRDataproc_SummarizeSessionSparkApplicationJobsResponse
@dynamic jobsSummary;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SummarizeSessionSparkApplicationStageAttemptTasksResponse
//

@implementation GTLRDataproc_SummarizeSessionSparkApplicationStageAttemptTasksResponse
@dynamic stageAttemptTasksSummary;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SummarizeSessionSparkApplicationStagesResponse
//

@implementation GTLRDataproc_SummarizeSessionSparkApplicationStagesResponse
@dynamic stagesSummary;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SummarizeSparkApplicationExecutorsResponse
//

@implementation GTLRDataproc_SummarizeSparkApplicationExecutorsResponse
@dynamic activeExecutorSummary, applicationId, deadExecutorSummary,
         totalExecutorSummary;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SummarizeSparkApplicationJobsResponse
//

@implementation GTLRDataproc_SummarizeSparkApplicationJobsResponse
@dynamic jobsSummary;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SummarizeSparkApplicationStageAttemptTasksResponse
//

@implementation GTLRDataproc_SummarizeSparkApplicationStageAttemptTasksResponse
@dynamic stageAttemptTasksSummary;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SummarizeSparkApplicationStagesResponse
//

@implementation GTLRDataproc_SummarizeSparkApplicationStagesResponse
@dynamic stagesSummary;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_TaskData
//

@implementation GTLRDataproc_TaskData
@dynamic accumulatorUpdates, attempt, durationMillis, errorMessage, executorId,
         executorLogs, gettingResultTimeMillis, hasMetrics, host, index,
         launchTime, partitionId, resultFetchStart, schedulerDelayMillis,
         speculative, stageAttemptId, stageId, status, taskId, taskLocality,
         taskMetrics;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"accumulatorUpdates" : [GTLRDataproc_AccumulableInfo class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_TaskData_ExecutorLogs
//

@implementation GTLRDataproc_TaskData_ExecutorLogs

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_TaskMetrics
//

@implementation GTLRDataproc_TaskMetrics
@dynamic diskBytesSpilled, executorCpuTimeNanos,
         executorDeserializeCpuTimeNanos, executorDeserializeTimeMillis,
         executorRunTimeMillis, inputMetrics, jvmGcTimeMillis,
         memoryBytesSpilled, outputMetrics, peakExecutionMemoryBytes,
         resultSerializationTimeMillis, resultSize, shuffleReadMetrics,
         shuffleWriteMetrics;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_TaskQuantileMetrics
//

@implementation GTLRDataproc_TaskQuantileMetrics
@dynamic diskBytesSpilled, durationMillis, executorCpuTimeNanos,
         executorDeserializeCpuTimeNanos, executorDeserializeTimeMillis,
         executorRunTimeMillis, gettingResultTimeMillis, inputMetrics,
         jvmGcTimeMillis, memoryBytesSpilled, outputMetrics,
         peakExecutionMemoryBytes, resultSerializationTimeMillis, resultSize,
         schedulerDelayMillis, shuffleReadMetrics, shuffleWriteMetrics;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_TaskResourceRequest
//

@implementation GTLRDataproc_TaskResourceRequest
@dynamic amount, resourceName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_TemplateParameter
//

@implementation GTLRDataproc_TemplateParameter
@dynamic descriptionProperty, fields, name, validation;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fields" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_TerminateSessionRequest
//

@implementation GTLRDataproc_TerminateSessionRequest
@dynamic requestId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_TestIamPermissionsRequest
//

@implementation GTLRDataproc_TestIamPermissionsRequest
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_TestIamPermissionsResponse
//

@implementation GTLRDataproc_TestIamPermissionsResponse
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_TrinoJob
//

@implementation GTLRDataproc_TrinoJob
@dynamic clientTags, continueOnFailure, loggingConfig, outputFormat, properties,
         queryFileUri, queryList;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"clientTags" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_TrinoJob_Properties
//

@implementation GTLRDataproc_TrinoJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_UsageMetrics
//

@implementation GTLRDataproc_UsageMetrics
@dynamic acceleratorType, milliAcceleratorSeconds, milliDcuSeconds,
         shuffleStorageGbSeconds;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_UsageSnapshot
//

@implementation GTLRDataproc_UsageSnapshot
@dynamic acceleratorType, milliAccelerator, milliDcu, milliDcuPremium,
         shuffleStorageGb, shuffleStorageGbPremium, snapshotTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ValueValidation
//

@implementation GTLRDataproc_ValueValidation
@dynamic values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"values" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_VirtualClusterConfig
//

@implementation GTLRDataproc_VirtualClusterConfig
@dynamic auxiliaryServicesConfig, kubernetesClusterConfig, stagingBucket;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WorkflowGraph
//

@implementation GTLRDataproc_WorkflowGraph
@dynamic nodes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"nodes" : [GTLRDataproc_WorkflowNode class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WorkflowMetadata
//

@implementation GTLRDataproc_WorkflowMetadata
@dynamic clusterName, clusterUuid, createCluster, dagEndTime, dagStartTime,
         dagTimeout, deleteCluster, endTime, graph, parameters, startTime,
         state, templateProperty, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"templateProperty" : @"template" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WorkflowMetadata_Parameters
//

@implementation GTLRDataproc_WorkflowMetadata_Parameters

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WorkflowNode
//

@implementation GTLRDataproc_WorkflowNode
@dynamic error, jobId, prerequisiteStepIds, state, stepId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"prerequisiteStepIds" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WorkflowTemplate
//

@implementation GTLRDataproc_WorkflowTemplate
@dynamic createTime, dagTimeout, encryptionConfig, identifier, jobs, labels,
         name, parameters, placement, updateTime, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jobs" : [GTLRDataproc_OrderedJob class],
    @"parameters" : [GTLRDataproc_TemplateParameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WorkflowTemplate_Labels
//

@implementation GTLRDataproc_WorkflowTemplate_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WorkflowTemplatePlacement
//

@implementation GTLRDataproc_WorkflowTemplatePlacement
@dynamic clusterSelector, managedCluster;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WriteSessionSparkApplicationContextRequest
//

@implementation GTLRDataproc_WriteSessionSparkApplicationContextRequest
@dynamic parent, sparkWrapperObjects;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkWrapperObjects" : [GTLRDataproc_SparkWrapperObject class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WriteSessionSparkApplicationContextResponse
//

@implementation GTLRDataproc_WriteSessionSparkApplicationContextResponse
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WriteSparkApplicationContextRequest
//

@implementation GTLRDataproc_WriteSparkApplicationContextRequest
@dynamic parent, sparkWrapperObjects;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sparkWrapperObjects" : [GTLRDataproc_SparkWrapperObject class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WriteSparkApplicationContextResponse
//

@implementation GTLRDataproc_WriteSparkApplicationContextResponse
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_YarnApplication
//

@implementation GTLRDataproc_YarnApplication
@dynamic name, progress, state, trackingUrl;
@end

#pragma clang diagnostic pop
