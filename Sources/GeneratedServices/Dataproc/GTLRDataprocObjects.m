// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud Dataproc API (dataproc/v1)
// Description:
//   Manages Hadoop-based clusters and jobs on Google Cloud Platform.
// Documentation:
//   https://cloud.google.com/dataproc/

#import <GoogleAPIClientForREST/GTLRDataprocObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRDataproc_Batch.state
NSString * const kGTLRDataproc_Batch_State_Cancelled        = @"CANCELLED";
NSString * const kGTLRDataproc_Batch_State_Cancelling       = @"CANCELLING";
NSString * const kGTLRDataproc_Batch_State_Failed           = @"FAILED";
NSString * const kGTLRDataproc_Batch_State_Pending          = @"PENDING";
NSString * const kGTLRDataproc_Batch_State_Running          = @"RUNNING";
NSString * const kGTLRDataproc_Batch_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRDataproc_Batch_State_Succeeded        = @"SUCCEEDED";

// GTLRDataproc_BatchOperationMetadata.operationType
NSString * const kGTLRDataproc_BatchOperationMetadata_OperationType_Batch = @"BATCH";
NSString * const kGTLRDataproc_BatchOperationMetadata_OperationType_BatchOperationTypeUnspecified = @"BATCH_OPERATION_TYPE_UNSPECIFIED";

// GTLRDataproc_ClusterOperationStatus.state
NSString * const kGTLRDataproc_ClusterOperationStatus_State_Done = @"DONE";
NSString * const kGTLRDataproc_ClusterOperationStatus_State_Pending = @"PENDING";
NSString * const kGTLRDataproc_ClusterOperationStatus_State_Running = @"RUNNING";
NSString * const kGTLRDataproc_ClusterOperationStatus_State_Unknown = @"UNKNOWN";

// GTLRDataproc_ClusterStatus.state
NSString * const kGTLRDataproc_ClusterStatus_State_Creating    = @"CREATING";
NSString * const kGTLRDataproc_ClusterStatus_State_Deleting    = @"DELETING";
NSString * const kGTLRDataproc_ClusterStatus_State_Error       = @"ERROR";
NSString * const kGTLRDataproc_ClusterStatus_State_ErrorDueToUpdate = @"ERROR_DUE_TO_UPDATE";
NSString * const kGTLRDataproc_ClusterStatus_State_Repairing   = @"REPAIRING";
NSString * const kGTLRDataproc_ClusterStatus_State_Running     = @"RUNNING";
NSString * const kGTLRDataproc_ClusterStatus_State_Starting    = @"STARTING";
NSString * const kGTLRDataproc_ClusterStatus_State_Stopped     = @"STOPPED";
NSString * const kGTLRDataproc_ClusterStatus_State_Stopping    = @"STOPPING";
NSString * const kGTLRDataproc_ClusterStatus_State_Unknown     = @"UNKNOWN";
NSString * const kGTLRDataproc_ClusterStatus_State_Updating    = @"UPDATING";

// GTLRDataproc_ClusterStatus.substate
NSString * const kGTLRDataproc_ClusterStatus_Substate_StaleStatus = @"STALE_STATUS";
NSString * const kGTLRDataproc_ClusterStatus_Substate_Unhealthy = @"UNHEALTHY";
NSString * const kGTLRDataproc_ClusterStatus_Substate_Unspecified = @"UNSPECIFIED";

// GTLRDataproc_GceClusterConfig.privateIpv6GoogleAccess
NSString * const kGTLRDataproc_GceClusterConfig_PrivateIpv6GoogleAccess_Bidirectional = @"BIDIRECTIONAL";
NSString * const kGTLRDataproc_GceClusterConfig_PrivateIpv6GoogleAccess_InheritFromSubnetwork = @"INHERIT_FROM_SUBNETWORK";
NSString * const kGTLRDataproc_GceClusterConfig_PrivateIpv6GoogleAccess_Outbound = @"OUTBOUND";
NSString * const kGTLRDataproc_GceClusterConfig_PrivateIpv6GoogleAccess_PrivateIpv6GoogleAccessUnspecified = @"PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED";

// GTLRDataproc_GkeNodePoolTarget.roles
NSString * const kGTLRDataproc_GkeNodePoolTarget_Roles_Controller = @"CONTROLLER";
NSString * const kGTLRDataproc_GkeNodePoolTarget_Roles_Default = @"DEFAULT";
NSString * const kGTLRDataproc_GkeNodePoolTarget_Roles_RoleUnspecified = @"ROLE_UNSPECIFIED";
NSString * const kGTLRDataproc_GkeNodePoolTarget_Roles_SparkDriver = @"SPARK_DRIVER";
NSString * const kGTLRDataproc_GkeNodePoolTarget_Roles_SparkExecutor = @"SPARK_EXECUTOR";

// GTLRDataproc_InstanceGroupConfig.preemptibility
NSString * const kGTLRDataproc_InstanceGroupConfig_Preemptibility_NonPreemptible = @"NON_PREEMPTIBLE";
NSString * const kGTLRDataproc_InstanceGroupConfig_Preemptibility_PreemptibilityUnspecified = @"PREEMPTIBILITY_UNSPECIFIED";
NSString * const kGTLRDataproc_InstanceGroupConfig_Preemptibility_Preemptible = @"PREEMPTIBLE";
NSString * const kGTLRDataproc_InstanceGroupConfig_Preemptibility_Spot = @"SPOT";

// GTLRDataproc_JobStatus.state
NSString * const kGTLRDataproc_JobStatus_State_AttemptFailure  = @"ATTEMPT_FAILURE";
NSString * const kGTLRDataproc_JobStatus_State_Cancelled       = @"CANCELLED";
NSString * const kGTLRDataproc_JobStatus_State_CancelPending   = @"CANCEL_PENDING";
NSString * const kGTLRDataproc_JobStatus_State_CancelStarted   = @"CANCEL_STARTED";
NSString * const kGTLRDataproc_JobStatus_State_Done            = @"DONE";
NSString * const kGTLRDataproc_JobStatus_State_Error           = @"ERROR";
NSString * const kGTLRDataproc_JobStatus_State_Pending         = @"PENDING";
NSString * const kGTLRDataproc_JobStatus_State_Running         = @"RUNNING";
NSString * const kGTLRDataproc_JobStatus_State_SetupDone       = @"SETUP_DONE";
NSString * const kGTLRDataproc_JobStatus_State_StateUnspecified = @"STATE_UNSPECIFIED";

// GTLRDataproc_JobStatus.substate
NSString * const kGTLRDataproc_JobStatus_Substate_Queued      = @"QUEUED";
NSString * const kGTLRDataproc_JobStatus_Substate_StaleStatus = @"STALE_STATUS";
NSString * const kGTLRDataproc_JobStatus_Substate_Submitted   = @"SUBMITTED";
NSString * const kGTLRDataproc_JobStatus_Substate_Unspecified = @"UNSPECIFIED";

// GTLRDataproc_LoggingConfig_DriverLogLevels.driverLogLevel
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_All = @"ALL";
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Debug = @"DEBUG";
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Error = @"ERROR";
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Fatal = @"FATAL";
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Info = @"INFO";
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_LevelUnspecified = @"LEVEL_UNSPECIFIED";
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Off = @"OFF";
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Trace = @"TRACE";
NSString * const kGTLRDataproc_LoggingConfig_DriverLogLevels_DriverLogLevel_Warn = @"WARN";

// GTLRDataproc_Metric.metricSource
NSString * const kGTLRDataproc_Metric_MetricSource_Hdfs        = @"HDFS";
NSString * const kGTLRDataproc_Metric_MetricSource_Hiveserver2 = @"HIVESERVER2";
NSString * const kGTLRDataproc_Metric_MetricSource_MetricSourceUnspecified = @"METRIC_SOURCE_UNSPECIFIED";
NSString * const kGTLRDataproc_Metric_MetricSource_MonitoringAgentDefaults = @"MONITORING_AGENT_DEFAULTS";
NSString * const kGTLRDataproc_Metric_MetricSource_Spark       = @"SPARK";
NSString * const kGTLRDataproc_Metric_MetricSource_SparkHistoryServer = @"SPARK_HISTORY_SERVER";
NSString * const kGTLRDataproc_Metric_MetricSource_Yarn        = @"YARN";

// GTLRDataproc_NodeGroupOperationMetadata.operationType
NSString * const kGTLRDataproc_NodeGroupOperationMetadata_OperationType_Create = @"CREATE";
NSString * const kGTLRDataproc_NodeGroupOperationMetadata_OperationType_Delete = @"DELETE";
NSString * const kGTLRDataproc_NodeGroupOperationMetadata_OperationType_NodeGroupOperationTypeUnspecified = @"NODE_GROUP_OPERATION_TYPE_UNSPECIFIED";
NSString * const kGTLRDataproc_NodeGroupOperationMetadata_OperationType_Resize = @"RESIZE";
NSString * const kGTLRDataproc_NodeGroupOperationMetadata_OperationType_Update = @"UPDATE";

// GTLRDataproc_NodePool.repairAction
NSString * const kGTLRDataproc_NodePool_RepairAction_Delete    = @"DELETE";
NSString * const kGTLRDataproc_NodePool_RepairAction_RepairActionUnspecified = @"REPAIR_ACTION_UNSPECIFIED";

// GTLRDataproc_ReservationAffinity.consumeReservationType
NSString * const kGTLRDataproc_ReservationAffinity_ConsumeReservationType_AnyReservation = @"ANY_RESERVATION";
NSString * const kGTLRDataproc_ReservationAffinity_ConsumeReservationType_NoReservation = @"NO_RESERVATION";
NSString * const kGTLRDataproc_ReservationAffinity_ConsumeReservationType_SpecificReservation = @"SPECIFIC_RESERVATION";
NSString * const kGTLRDataproc_ReservationAffinity_ConsumeReservationType_TypeUnspecified = @"TYPE_UNSPECIFIED";

// GTLRDataproc_SessionOperationMetadata.operationType
NSString * const kGTLRDataproc_SessionOperationMetadata_OperationType_Create = @"CREATE";
NSString * const kGTLRDataproc_SessionOperationMetadata_OperationType_Delete = @"DELETE";
NSString * const kGTLRDataproc_SessionOperationMetadata_OperationType_SessionOperationTypeUnspecified = @"SESSION_OPERATION_TYPE_UNSPECIFIED";
NSString * const kGTLRDataproc_SessionOperationMetadata_OperationType_Terminate = @"TERMINATE";

// GTLRDataproc_SoftwareConfig.optionalComponents
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Anaconda = @"ANACONDA";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_ComponentUnspecified = @"COMPONENT_UNSPECIFIED";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Docker = @"DOCKER";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Druid = @"DRUID";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Flink = @"FLINK";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Hbase = @"HBASE";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_HiveWebhcat = @"HIVE_WEBHCAT";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Jupyter = @"JUPYTER";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Presto = @"PRESTO";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Ranger = @"RANGER";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Solr = @"SOLR";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Zeppelin = @"ZEPPELIN";
NSString * const kGTLRDataproc_SoftwareConfig_OptionalComponents_Zookeeper = @"ZOOKEEPER";

// GTLRDataproc_StateHistory.state
NSString * const kGTLRDataproc_StateHistory_State_Cancelled    = @"CANCELLED";
NSString * const kGTLRDataproc_StateHistory_State_Cancelling   = @"CANCELLING";
NSString * const kGTLRDataproc_StateHistory_State_Failed       = @"FAILED";
NSString * const kGTLRDataproc_StateHistory_State_Pending      = @"PENDING";
NSString * const kGTLRDataproc_StateHistory_State_Running      = @"RUNNING";
NSString * const kGTLRDataproc_StateHistory_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRDataproc_StateHistory_State_Succeeded    = @"SUCCEEDED";

// GTLRDataproc_WorkflowMetadata.state
NSString * const kGTLRDataproc_WorkflowMetadata_State_Done    = @"DONE";
NSString * const kGTLRDataproc_WorkflowMetadata_State_Pending = @"PENDING";
NSString * const kGTLRDataproc_WorkflowMetadata_State_Running = @"RUNNING";
NSString * const kGTLRDataproc_WorkflowMetadata_State_Unknown = @"UNKNOWN";

// GTLRDataproc_WorkflowNode.state
NSString * const kGTLRDataproc_WorkflowNode_State_Blocked      = @"BLOCKED";
NSString * const kGTLRDataproc_WorkflowNode_State_Completed    = @"COMPLETED";
NSString * const kGTLRDataproc_WorkflowNode_State_Failed       = @"FAILED";
NSString * const kGTLRDataproc_WorkflowNode_State_NodeStateUnspecified = @"NODE_STATE_UNSPECIFIED";
NSString * const kGTLRDataproc_WorkflowNode_State_Runnable     = @"RUNNABLE";
NSString * const kGTLRDataproc_WorkflowNode_State_Running      = @"RUNNING";

// GTLRDataproc_YarnApplication.state
NSString * const kGTLRDataproc_YarnApplication_State_Accepted  = @"ACCEPTED";
NSString * const kGTLRDataproc_YarnApplication_State_Failed    = @"FAILED";
NSString * const kGTLRDataproc_YarnApplication_State_Finished  = @"FINISHED";
NSString * const kGTLRDataproc_YarnApplication_State_Killed    = @"KILLED";
NSString * const kGTLRDataproc_YarnApplication_State_New       = @"NEW";
NSString * const kGTLRDataproc_YarnApplication_State_NewSaving = @"NEW_SAVING";
NSString * const kGTLRDataproc_YarnApplication_State_Running   = @"RUNNING";
NSString * const kGTLRDataproc_YarnApplication_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRDataproc_YarnApplication_State_Submitted = @"SUBMITTED";

// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AcceleratorConfig
//

@implementation GTLRDataproc_AcceleratorConfig
@dynamic acceleratorCount, acceleratorTypeUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AutoscalingConfig
//

@implementation GTLRDataproc_AutoscalingConfig
@dynamic policyUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AutoscalingPolicy
//

@implementation GTLRDataproc_AutoscalingPolicy
@dynamic basicAlgorithm, identifier, labels, name, secondaryWorkerConfig,
         workerConfig;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AutoscalingPolicy_Labels
//

@implementation GTLRDataproc_AutoscalingPolicy_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_AuxiliaryServicesConfig
//

@implementation GTLRDataproc_AuxiliaryServicesConfig
@dynamic metastoreConfig, sparkHistoryServerConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_BasicAutoscalingAlgorithm
//

@implementation GTLRDataproc_BasicAutoscalingAlgorithm
@dynamic cooldownPeriod, sparkStandaloneConfig, yarnConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_BasicYarnAutoscalingConfig
//

@implementation GTLRDataproc_BasicYarnAutoscalingConfig
@dynamic gracefulDecommissionTimeout, scaleDownFactor,
         scaleDownMinWorkerFraction, scaleUpFactor, scaleUpMinWorkerFraction;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Batch
//

@implementation GTLRDataproc_Batch
@dynamic createTime, creator, environmentConfig, labels, name, operation,
         pysparkBatch, runtimeConfig, runtimeInfo, sparkBatch, sparkRBatch,
         sparkSqlBatch, state, stateHistory, stateMessage, stateTime, uuid;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"stateHistory" : [GTLRDataproc_StateHistory class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Batch_Labels
//

@implementation GTLRDataproc_Batch_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_BatchOperationMetadata
//

@implementation GTLRDataproc_BatchOperationMetadata
@dynamic batch, batchUuid, createTime, descriptionProperty, doneTime, labels,
         operationType, warnings;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"warnings" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_BatchOperationMetadata_Labels
//

@implementation GTLRDataproc_BatchOperationMetadata_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Binding
//

@implementation GTLRDataproc_Binding
@dynamic condition, members, role;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"members" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_CancelJobRequest
//

@implementation GTLRDataproc_CancelJobRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Cluster
//

@implementation GTLRDataproc_Cluster
@dynamic clusterName, clusterUuid, config, labels, metrics, projectId, status,
         statusHistory, virtualClusterConfig;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statusHistory" : [GTLRDataproc_ClusterStatus class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Cluster_Labels
//

@implementation GTLRDataproc_Cluster_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterConfig
//

@implementation GTLRDataproc_ClusterConfig
@dynamic autoscalingConfig, configBucket, dataprocMetricConfig,
         encryptionConfig, endpointConfig, gceClusterConfig, gkeClusterConfig,
         initializationActions, lifecycleConfig, masterConfig, metastoreConfig,
         secondaryWorkerConfig, securityConfig, softwareConfig, tempBucket,
         workerConfig;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"initializationActions" : [GTLRDataproc_NodeInitializationAction class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterMetrics
//

@implementation GTLRDataproc_ClusterMetrics
@dynamic hdfsMetrics, yarnMetrics;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterMetrics_HdfsMetrics
//

@implementation GTLRDataproc_ClusterMetrics_HdfsMetrics

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterMetrics_YarnMetrics
//

@implementation GTLRDataproc_ClusterMetrics_YarnMetrics

+ (Class)classForAdditionalProperties {
  return [NSNumber class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterOperation
//

@implementation GTLRDataproc_ClusterOperation
@dynamic done, error, operationId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterOperationMetadata
//

@implementation GTLRDataproc_ClusterOperationMetadata
@dynamic childOperationIds, clusterName, clusterUuid, descriptionProperty,
         labels, operationType, status, statusHistory, warnings;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"childOperationIds" : [NSString class],
    @"statusHistory" : [GTLRDataproc_ClusterOperationStatus class],
    @"warnings" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterOperationMetadata_Labels
//

@implementation GTLRDataproc_ClusterOperationMetadata_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterOperationStatus
//

@implementation GTLRDataproc_ClusterOperationStatus
@dynamic details, innerState, state, stateStartTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterSelector
//

@implementation GTLRDataproc_ClusterSelector
@dynamic clusterLabels, zoneProperty;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"zoneProperty" : @"zone" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterSelector_ClusterLabels
//

@implementation GTLRDataproc_ClusterSelector_ClusterLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ClusterStatus
//

@implementation GTLRDataproc_ClusterStatus
@dynamic detail, state, stateStartTime, substate;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ConfidentialInstanceConfig
//

@implementation GTLRDataproc_ConfidentialInstanceConfig
@dynamic enableConfidentialCompute;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_DiagnoseClusterRequest
//

@implementation GTLRDataproc_DiagnoseClusterRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_DiagnoseClusterResults
//

@implementation GTLRDataproc_DiagnoseClusterResults
@dynamic outputUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_DiskConfig
//

@implementation GTLRDataproc_DiskConfig
@dynamic bootDiskSizeGb, bootDiskType, localSsdInterface, numLocalSsds;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Empty
//

@implementation GTLRDataproc_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_EncryptionConfig
//

@implementation GTLRDataproc_EncryptionConfig
@dynamic gcePdKmsKeyName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_EndpointConfig
//

@implementation GTLRDataproc_EndpointConfig
@dynamic enableHttpPortAccess, httpPorts;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_EndpointConfig_HttpPorts
//

@implementation GTLRDataproc_EndpointConfig_HttpPorts

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_EnvironmentConfig
//

@implementation GTLRDataproc_EnvironmentConfig
@dynamic executionConfig, peripheralsConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ExecutionConfig
//

@implementation GTLRDataproc_ExecutionConfig
@dynamic idleTtl, kmsKey, networkTags, networkUri, serviceAccount,
         subnetworkUri;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"networkTags" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Expr
//

@implementation GTLRDataproc_Expr
@dynamic descriptionProperty, expression, location, title;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GceClusterConfig
//

@implementation GTLRDataproc_GceClusterConfig
@dynamic confidentialInstanceConfig, internalIpOnly, metadata, networkUri,
         nodeGroupAffinity, privateIpv6GoogleAccess, reservationAffinity,
         serviceAccount, serviceAccountScopes, shieldedInstanceConfig,
         subnetworkUri, tags, zoneUri;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"serviceAccountScopes" : [NSString class],
    @"tags" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GceClusterConfig_Metadata
//

@implementation GTLRDataproc_GceClusterConfig_Metadata

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GetIamPolicyRequest
//

@implementation GTLRDataproc_GetIamPolicyRequest
@dynamic options;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GetPolicyOptions
//

@implementation GTLRDataproc_GetPolicyOptions
@dynamic requestedPolicyVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GkeClusterConfig
//

@implementation GTLRDataproc_GkeClusterConfig
@dynamic gkeClusterTarget, namespacedGkeDeploymentTarget, nodePoolTarget;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"nodePoolTarget" : [GTLRDataproc_GkeNodePoolTarget class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GkeNodeConfig
//

@implementation GTLRDataproc_GkeNodeConfig
@dynamic accelerators, bootDiskKmsKey, localSsdCount, machineType,
         minCpuPlatform, preemptible, spot;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"accelerators" : [GTLRDataproc_GkeNodePoolAcceleratorConfig class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GkeNodePoolAcceleratorConfig
//

@implementation GTLRDataproc_GkeNodePoolAcceleratorConfig
@dynamic acceleratorCount, acceleratorType, gpuPartitionSize;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GkeNodePoolAutoscalingConfig
//

@implementation GTLRDataproc_GkeNodePoolAutoscalingConfig
@dynamic maxNodeCount, minNodeCount;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GkeNodePoolConfig
//

@implementation GTLRDataproc_GkeNodePoolConfig
@dynamic autoscaling, config, locations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"locations" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_GkeNodePoolTarget
//

@implementation GTLRDataproc_GkeNodePoolTarget
@dynamic nodePool, nodePoolConfig, roles;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"roles" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_HadoopJob
//

@implementation GTLRDataproc_HadoopJob
@dynamic archiveUris, args, fileUris, jarFileUris, loggingConfig, mainClass,
         mainJarFileUri, properties;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"archiveUris" : [NSString class],
    @"args" : [NSString class],
    @"fileUris" : [NSString class],
    @"jarFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_HadoopJob_Properties
//

@implementation GTLRDataproc_HadoopJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_HiveJob
//

@implementation GTLRDataproc_HiveJob
@dynamic continueOnFailure, jarFileUris, properties, queryFileUri, queryList,
         scriptVariables;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jarFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_HiveJob_Properties
//

@implementation GTLRDataproc_HiveJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_HiveJob_ScriptVariables
//

@implementation GTLRDataproc_HiveJob_ScriptVariables

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_IdentityConfig
//

@implementation GTLRDataproc_IdentityConfig
@dynamic userServiceAccountMapping;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_IdentityConfig_UserServiceAccountMapping
//

@implementation GTLRDataproc_IdentityConfig_UserServiceAccountMapping

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InjectCredentialsRequest
//

@implementation GTLRDataproc_InjectCredentialsRequest
@dynamic clusterUuid, credentialsCiphertext;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InstanceGroupAutoscalingPolicyConfig
//

@implementation GTLRDataproc_InstanceGroupAutoscalingPolicyConfig
@dynamic maxInstances, minInstances, weight;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InstanceGroupConfig
//

@implementation GTLRDataproc_InstanceGroupConfig
@dynamic accelerators, diskConfig, imageUri, instanceNames, instanceReferences,
         isPreemptible, machineTypeUri, managedGroupConfig, minCpuPlatform,
         numInstances, preemptibility;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"accelerators" : [GTLRDataproc_AcceleratorConfig class],
    @"instanceNames" : [NSString class],
    @"instanceReferences" : [GTLRDataproc_InstanceReference class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InstanceReference
//

@implementation GTLRDataproc_InstanceReference
@dynamic instanceId, instanceName, publicEciesKey, publicKey;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InstantiateWorkflowTemplateRequest
//

@implementation GTLRDataproc_InstantiateWorkflowTemplateRequest
@dynamic parameters, requestId, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_InstantiateWorkflowTemplateRequest_Parameters
//

@implementation GTLRDataproc_InstantiateWorkflowTemplateRequest_Parameters

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Job
//

@implementation GTLRDataproc_Job
@dynamic done, driverControlFilesUri, driverOutputResourceUri, hadoopJob,
         hiveJob, jobUuid, labels, pigJob, placement, prestoJob, pysparkJob,
         reference, scheduling, sparkJob, sparkRJob, sparkSqlJob, status,
         statusHistory, trinoJob, yarnApplications;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statusHistory" : [GTLRDataproc_JobStatus class],
    @"yarnApplications" : [GTLRDataproc_YarnApplication class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Job_Labels
//

@implementation GTLRDataproc_Job_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_JobMetadata
//

@implementation GTLRDataproc_JobMetadata
@dynamic jobId, operationType, startTime, status;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_JobPlacement
//

@implementation GTLRDataproc_JobPlacement
@dynamic clusterLabels, clusterName, clusterUuid;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_JobPlacement_ClusterLabels
//

@implementation GTLRDataproc_JobPlacement_ClusterLabels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_JobReference
//

@implementation GTLRDataproc_JobReference
@dynamic jobId, projectId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_JobScheduling
//

@implementation GTLRDataproc_JobScheduling
@dynamic maxFailuresPerHour, maxFailuresTotal;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_JobStatus
//

@implementation GTLRDataproc_JobStatus
@dynamic details, state, stateStartTime, substate;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_KerberosConfig
//

@implementation GTLRDataproc_KerberosConfig
@dynamic crossRealmTrustAdminServer, crossRealmTrustKdc, crossRealmTrustRealm,
         crossRealmTrustSharedPasswordUri, enableKerberos, kdcDbKeyUri,
         keyPasswordUri, keystorePasswordUri, keystoreUri, kmsKeyUri, realm,
         rootPrincipalPasswordUri, tgtLifetimeHours, truststorePasswordUri,
         truststoreUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_KubernetesClusterConfig
//

@implementation GTLRDataproc_KubernetesClusterConfig
@dynamic gkeClusterConfig, kubernetesNamespace, kubernetesSoftwareConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_KubernetesSoftwareConfig
//

@implementation GTLRDataproc_KubernetesSoftwareConfig
@dynamic componentVersion, properties;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_KubernetesSoftwareConfig_ComponentVersion
//

@implementation GTLRDataproc_KubernetesSoftwareConfig_ComponentVersion

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_KubernetesSoftwareConfig_Properties
//

@implementation GTLRDataproc_KubernetesSoftwareConfig_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_LifecycleConfig
//

@implementation GTLRDataproc_LifecycleConfig
@dynamic autoDeleteTime, autoDeleteTtl, idleDeleteTtl, idleStartTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ListAutoscalingPoliciesResponse
//

@implementation GTLRDataproc_ListAutoscalingPoliciesResponse
@dynamic nextPageToken, policies;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"policies" : [GTLRDataproc_AutoscalingPolicy class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"policies";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ListBatchesResponse
//

@implementation GTLRDataproc_ListBatchesResponse
@dynamic batches, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"batches" : [GTLRDataproc_Batch class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"batches";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ListClustersResponse
//

@implementation GTLRDataproc_ListClustersResponse
@dynamic clusters, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"clusters" : [GTLRDataproc_Cluster class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"clusters";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ListJobsResponse
//

@implementation GTLRDataproc_ListJobsResponse
@dynamic jobs, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jobs" : [GTLRDataproc_Job class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"jobs";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ListOperationsResponse
//

@implementation GTLRDataproc_ListOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRDataproc_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ListWorkflowTemplatesResponse
//

@implementation GTLRDataproc_ListWorkflowTemplatesResponse
@dynamic nextPageToken, templates;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"templates" : [GTLRDataproc_WorkflowTemplate class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"templates";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_LoggingConfig
//

@implementation GTLRDataproc_LoggingConfig
@dynamic driverLogLevels;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_LoggingConfig_DriverLogLevels
//

@implementation GTLRDataproc_LoggingConfig_DriverLogLevels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ManagedCluster
//

@implementation GTLRDataproc_ManagedCluster
@dynamic clusterName, config, labels;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ManagedCluster_Labels
//

@implementation GTLRDataproc_ManagedCluster_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ManagedGroupConfig
//

@implementation GTLRDataproc_ManagedGroupConfig
@dynamic instanceGroupManagerName, instanceTemplateName;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_MetastoreConfig
//

@implementation GTLRDataproc_MetastoreConfig
@dynamic dataprocMetastoreService;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Metric
//

@implementation GTLRDataproc_Metric
@dynamic metricOverrides, metricSource;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metricOverrides" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_MetricConfig
//

@implementation GTLRDataproc_MetricConfig
@dynamic metrics;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"metrics" : [GTLRDataproc_Metric class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_NamespacedGkeDeploymentTarget
//

@implementation GTLRDataproc_NamespacedGkeDeploymentTarget
@dynamic clusterNamespace, targetGkeCluster;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_NodeGroupAffinity
//

@implementation GTLRDataproc_NodeGroupAffinity
@dynamic nodeGroupUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_NodeGroupOperationMetadata
//

@implementation GTLRDataproc_NodeGroupOperationMetadata
@dynamic clusterUuid, descriptionProperty, labels, nodeGroupId, operationType,
         status, statusHistory, warnings;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"statusHistory" : [GTLRDataproc_ClusterOperationStatus class],
    @"warnings" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_NodeGroupOperationMetadata_Labels
//

@implementation GTLRDataproc_NodeGroupOperationMetadata_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_NodeInitializationAction
//

@implementation GTLRDataproc_NodeInitializationAction
@dynamic executableFile, executionTimeout;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_NodePool
//

@implementation GTLRDataproc_NodePool
@dynamic identifier, instanceNames, repairAction;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"instanceNames" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Operation
//

@implementation GTLRDataproc_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Operation_Metadata
//

@implementation GTLRDataproc_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Operation_Response
//

@implementation GTLRDataproc_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_OrderedJob
//

@implementation GTLRDataproc_OrderedJob
@dynamic hadoopJob, hiveJob, labels, pigJob, prerequisiteStepIds, prestoJob,
         pysparkJob, scheduling, sparkJob, sparkRJob, sparkSqlJob, stepId,
         trinoJob;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"prerequisiteStepIds" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_OrderedJob_Labels
//

@implementation GTLRDataproc_OrderedJob_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ParameterValidation
//

@implementation GTLRDataproc_ParameterValidation
@dynamic regex, values;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PeripheralsConfig
//

@implementation GTLRDataproc_PeripheralsConfig
@dynamic metastoreService, sparkHistoryServerConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PigJob
//

@implementation GTLRDataproc_PigJob
@dynamic continueOnFailure, jarFileUris, loggingConfig, properties,
         queryFileUri, queryList, scriptVariables;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jarFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PigJob_Properties
//

@implementation GTLRDataproc_PigJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PigJob_ScriptVariables
//

@implementation GTLRDataproc_PigJob_ScriptVariables

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Policy
//

@implementation GTLRDataproc_Policy
@dynamic bindings, ETag, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"bindings" : [GTLRDataproc_Binding class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PrestoJob
//

@implementation GTLRDataproc_PrestoJob
@dynamic clientTags, continueOnFailure, loggingConfig, outputFormat, properties,
         queryFileUri, queryList;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"clientTags" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PrestoJob_Properties
//

@implementation GTLRDataproc_PrestoJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PySparkBatch
//

@implementation GTLRDataproc_PySparkBatch
@dynamic archiveUris, args, fileUris, jarFileUris, mainPythonFileUri,
         pythonFileUris;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"archiveUris" : [NSString class],
    @"args" : [NSString class],
    @"fileUris" : [NSString class],
    @"jarFileUris" : [NSString class],
    @"pythonFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PySparkJob
//

@implementation GTLRDataproc_PySparkJob
@dynamic archiveUris, args, fileUris, jarFileUris, loggingConfig,
         mainPythonFileUri, properties, pythonFileUris;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"archiveUris" : [NSString class],
    @"args" : [NSString class],
    @"fileUris" : [NSString class],
    @"jarFileUris" : [NSString class],
    @"pythonFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_PySparkJob_Properties
//

@implementation GTLRDataproc_PySparkJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_QueryList
//

@implementation GTLRDataproc_QueryList
@dynamic queries;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"queries" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RegexValidation
//

@implementation GTLRDataproc_RegexValidation
@dynamic regexes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"regexes" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RepairClusterRequest
//

@implementation GTLRDataproc_RepairClusterRequest
@dynamic clusterUuid, gracefulDecommissionTimeout, nodePools, parentOperationId,
         requestId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"nodePools" : [GTLRDataproc_NodePool class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ReservationAffinity
//

@implementation GTLRDataproc_ReservationAffinity
@dynamic consumeReservationType, key, values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"values" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RuntimeConfig
//

@implementation GTLRDataproc_RuntimeConfig
@dynamic containerImage, properties, version;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RuntimeConfig_Properties
//

@implementation GTLRDataproc_RuntimeConfig_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RuntimeInfo
//

@implementation GTLRDataproc_RuntimeInfo
@dynamic approximateUsage, diagnosticOutputUri, endpoints, outputUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_RuntimeInfo_Endpoints
//

@implementation GTLRDataproc_RuntimeInfo_Endpoints

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SecurityConfig
//

@implementation GTLRDataproc_SecurityConfig
@dynamic identityConfig, kerberosConfig;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SessionOperationMetadata
//

@implementation GTLRDataproc_SessionOperationMetadata
@dynamic createTime, descriptionProperty, doneTime, labels, operationType,
         session, sessionUuid, warnings;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"warnings" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SessionOperationMetadata_Labels
//

@implementation GTLRDataproc_SessionOperationMetadata_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SetIamPolicyRequest
//

@implementation GTLRDataproc_SetIamPolicyRequest
@dynamic policy;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ShieldedInstanceConfig
//

@implementation GTLRDataproc_ShieldedInstanceConfig
@dynamic enableIntegrityMonitoring, enableSecureBoot, enableVtpm;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SoftwareConfig
//

@implementation GTLRDataproc_SoftwareConfig
@dynamic imageVersion, optionalComponents, properties;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"optionalComponents" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SoftwareConfig_Properties
//

@implementation GTLRDataproc_SoftwareConfig_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkBatch
//

@implementation GTLRDataproc_SparkBatch
@dynamic archiveUris, args, fileUris, jarFileUris, mainClass, mainJarFileUri;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"archiveUris" : [NSString class],
    @"args" : [NSString class],
    @"fileUris" : [NSString class],
    @"jarFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkHistoryServerConfig
//

@implementation GTLRDataproc_SparkHistoryServerConfig
@dynamic dataprocCluster;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkJob
//

@implementation GTLRDataproc_SparkJob
@dynamic archiveUris, args, fileUris, jarFileUris, loggingConfig, mainClass,
         mainJarFileUri, properties;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"archiveUris" : [NSString class],
    @"args" : [NSString class],
    @"fileUris" : [NSString class],
    @"jarFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkJob_Properties
//

@implementation GTLRDataproc_SparkJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkRBatch
//

@implementation GTLRDataproc_SparkRBatch
@dynamic archiveUris, args, fileUris, mainRFileUri;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"archiveUris" : [NSString class],
    @"args" : [NSString class],
    @"fileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkRJob
//

@implementation GTLRDataproc_SparkRJob
@dynamic archiveUris, args, fileUris, loggingConfig, mainRFileUri, properties;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"archiveUris" : [NSString class],
    @"args" : [NSString class],
    @"fileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkRJob_Properties
//

@implementation GTLRDataproc_SparkRJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkSqlBatch
//

@implementation GTLRDataproc_SparkSqlBatch
@dynamic jarFileUris, queryFileUri, queryVariables;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jarFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkSqlBatch_QueryVariables
//

@implementation GTLRDataproc_SparkSqlBatch_QueryVariables

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkSqlJob
//

@implementation GTLRDataproc_SparkSqlJob
@dynamic jarFileUris, loggingConfig, properties, queryFileUri, queryList,
         scriptVariables;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jarFileUris" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkSqlJob_Properties
//

@implementation GTLRDataproc_SparkSqlJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkSqlJob_ScriptVariables
//

@implementation GTLRDataproc_SparkSqlJob_ScriptVariables

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SparkStandaloneAutoscalingConfig
//

@implementation GTLRDataproc_SparkStandaloneAutoscalingConfig
@dynamic gracefulDecommissionTimeout, scaleDownFactor,
         scaleDownMinWorkerFraction, scaleUpFactor, scaleUpMinWorkerFraction;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StartClusterRequest
//

@implementation GTLRDataproc_StartClusterRequest
@dynamic clusterUuid, requestId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StateHistory
//

@implementation GTLRDataproc_StateHistory
@dynamic state, stateMessage, stateStartTime;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Status
//

@implementation GTLRDataproc_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRDataproc_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_Status_Details_Item
//

@implementation GTLRDataproc_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_StopClusterRequest
//

@implementation GTLRDataproc_StopClusterRequest
@dynamic clusterUuid, requestId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_SubmitJobRequest
//

@implementation GTLRDataproc_SubmitJobRequest
@dynamic job, requestId;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_TemplateParameter
//

@implementation GTLRDataproc_TemplateParameter
@dynamic descriptionProperty, fields, name, validation;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fields" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_TestIamPermissionsRequest
//

@implementation GTLRDataproc_TestIamPermissionsRequest
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_TestIamPermissionsResponse
//

@implementation GTLRDataproc_TestIamPermissionsResponse
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_TrinoJob
//

@implementation GTLRDataproc_TrinoJob
@dynamic clientTags, continueOnFailure, loggingConfig, outputFormat, properties,
         queryFileUri, queryList;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"clientTags" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_TrinoJob_Properties
//

@implementation GTLRDataproc_TrinoJob_Properties

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_UsageMetrics
//

@implementation GTLRDataproc_UsageMetrics
@dynamic milliDcuSeconds, shuffleStorageGbSeconds;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_ValueValidation
//

@implementation GTLRDataproc_ValueValidation
@dynamic values;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"values" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_VirtualClusterConfig
//

@implementation GTLRDataproc_VirtualClusterConfig
@dynamic auxiliaryServicesConfig, kubernetesClusterConfig, stagingBucket;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WorkflowGraph
//

@implementation GTLRDataproc_WorkflowGraph
@dynamic nodes;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"nodes" : [GTLRDataproc_WorkflowNode class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WorkflowMetadata
//

@implementation GTLRDataproc_WorkflowMetadata
@dynamic clusterName, clusterUuid, createCluster, dagEndTime, dagStartTime,
         dagTimeout, deleteCluster, endTime, graph, parameters, startTime,
         state, templateProperty, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"templateProperty" : @"template" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WorkflowMetadata_Parameters
//

@implementation GTLRDataproc_WorkflowMetadata_Parameters

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WorkflowNode
//

@implementation GTLRDataproc_WorkflowNode
@dynamic error, jobId, prerequisiteStepIds, state, stepId;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"prerequisiteStepIds" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WorkflowTemplate
//

@implementation GTLRDataproc_WorkflowTemplate
@dynamic createTime, dagTimeout, identifier, jobs, labels, name, parameters,
         placement, updateTime, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"jobs" : [GTLRDataproc_OrderedJob class],
    @"parameters" : [GTLRDataproc_TemplateParameter class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WorkflowTemplate_Labels
//

@implementation GTLRDataproc_WorkflowTemplate_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_WorkflowTemplatePlacement
//

@implementation GTLRDataproc_WorkflowTemplatePlacement
@dynamic clusterSelector, managedCluster;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDataproc_YarnApplication
//

@implementation GTLRDataproc_YarnApplication
@dynamic name, progress, state, trackingUrl;
@end
