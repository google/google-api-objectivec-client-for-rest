// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Datastream API (datastream/v1)
// Documentation:
//   https://cloud.google.com/datastream/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDatastream_AvroFileFormat;
@class GTLRDatastream_BackfillAllStrategy;
@class GTLRDatastream_BackfillJob;
@class GTLRDatastream_BackfillNoneStrategy;
@class GTLRDatastream_BigQueryDestinationConfig;
@class GTLRDatastream_BigQueryProfile;
@class GTLRDatastream_ConnectionProfile;
@class GTLRDatastream_ConnectionProfile_Labels;
@class GTLRDatastream_DatasetTemplate;
@class GTLRDatastream_DestinationConfig;
@class GTLRDatastream_DropLargeObjects;
@class GTLRDatastream_Error;
@class GTLRDatastream_Error_Details;
@class GTLRDatastream_ForwardSshTunnelConnectivity;
@class GTLRDatastream_GcsDestinationConfig;
@class GTLRDatastream_GcsProfile;
@class GTLRDatastream_JsonFileFormat;
@class GTLRDatastream_Location;
@class GTLRDatastream_Location_Labels;
@class GTLRDatastream_Location_Metadata;
@class GTLRDatastream_MysqlColumn;
@class GTLRDatastream_MysqlDatabase;
@class GTLRDatastream_MysqlObjectIdentifier;
@class GTLRDatastream_MysqlProfile;
@class GTLRDatastream_MysqlRdbms;
@class GTLRDatastream_MysqlSourceConfig;
@class GTLRDatastream_MysqlSslConfig;
@class GTLRDatastream_MysqlTable;
@class GTLRDatastream_Operation;
@class GTLRDatastream_Operation_Metadata;
@class GTLRDatastream_Operation_Response;
@class GTLRDatastream_OracleColumn;
@class GTLRDatastream_OracleObjectIdentifier;
@class GTLRDatastream_OracleProfile;
@class GTLRDatastream_OracleProfile_ConnectionAttributes;
@class GTLRDatastream_OracleRdbms;
@class GTLRDatastream_OracleSchema;
@class GTLRDatastream_OracleSourceConfig;
@class GTLRDatastream_OracleTable;
@class GTLRDatastream_PostgresqlColumn;
@class GTLRDatastream_PostgresqlObjectIdentifier;
@class GTLRDatastream_PostgresqlProfile;
@class GTLRDatastream_PostgresqlRdbms;
@class GTLRDatastream_PostgresqlSchema;
@class GTLRDatastream_PostgresqlSourceConfig;
@class GTLRDatastream_PostgresqlTable;
@class GTLRDatastream_PrivateConnection;
@class GTLRDatastream_PrivateConnection_Labels;
@class GTLRDatastream_PrivateConnectivity;
@class GTLRDatastream_Route;
@class GTLRDatastream_Route_Labels;
@class GTLRDatastream_SingleTargetDataset;
@class GTLRDatastream_SourceConfig;
@class GTLRDatastream_SourceHierarchyDatasets;
@class GTLRDatastream_SourceObjectIdentifier;
@class GTLRDatastream_StaticServiceIpConnectivity;
@class GTLRDatastream_Status;
@class GTLRDatastream_Status_Details_Item;
@class GTLRDatastream_Stream;
@class GTLRDatastream_Stream_Labels;
@class GTLRDatastream_StreamLargeObjects;
@class GTLRDatastream_StreamObject;
@class GTLRDatastream_Validation;
@class GTLRDatastream_ValidationMessage;
@class GTLRDatastream_ValidationMessage_Metadata;
@class GTLRDatastream_ValidationResult;
@class GTLRDatastream_VpcPeeringConfig;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRDatastream_BackfillJob.state

/**
 *  Backfill job is running.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_BackfillJob_State_Active;
/**
 *  Backfill completed successfully.
 *
 *  Value: "COMPLETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_BackfillJob_State_Completed;
/**
 *  Backfill job failed (due to an error).
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_BackfillJob_State_Failed;
/**
 *  Backfill job was never started for the stream object (stream has backfill
 *  strategy defined as manual or object was explicitly excluded from automatic
 *  backfill).
 *
 *  Value: "NOT_STARTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_BackfillJob_State_NotStarted;
/**
 *  Backfill job will start pending available resources.
 *
 *  Value: "PENDING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_BackfillJob_State_Pending;
/**
 *  Default value.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_BackfillJob_State_StateUnspecified;
/**
 *  Backfill job stopped (next job run will start from beginning).
 *
 *  Value: "STOPPED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_BackfillJob_State_Stopped;
/**
 *  Backfill job failed since the table structure is currently unsupported for
 *  backfill.
 *
 *  Value: "UNSUPPORTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_BackfillJob_State_Unsupported;

// ----------------------------------------------------------------------------
// GTLRDatastream_BackfillJob.trigger

/**
 *  Object backfill job was triggered automatically according to the stream's
 *  backfill strategy.
 *
 *  Value: "AUTOMATIC"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_BackfillJob_Trigger_Automatic;
/**
 *  Object backfill job was triggered manually using the dedicated API.
 *
 *  Value: "MANUAL"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_BackfillJob_Trigger_Manual;
/**
 *  Default value.
 *
 *  Value: "TRIGGER_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_BackfillJob_Trigger_TriggerUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatastream_JsonFileFormat.compression

/**
 *  Gzip compression.
 *
 *  Value: "GZIP"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_JsonFileFormat_Compression_Gzip;
/**
 *  Unspecified json file compression.
 *
 *  Value: "JSON_COMPRESSION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_JsonFileFormat_Compression_JsonCompressionUnspecified;
/**
 *  Do not compress JSON file.
 *
 *  Value: "NO_COMPRESSION"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_JsonFileFormat_Compression_NoCompression;

// ----------------------------------------------------------------------------
// GTLRDatastream_JsonFileFormat.schemaFileFormat

/**
 *  Avro schema format.
 *
 *  Value: "AVRO_SCHEMA_FILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_JsonFileFormat_SchemaFileFormat_AvroSchemaFile;
/**
 *  Do not attach schema file.
 *
 *  Value: "NO_SCHEMA_FILE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_JsonFileFormat_SchemaFileFormat_NoSchemaFile;
/**
 *  Unspecified schema file format.
 *
 *  Value: "SCHEMA_FILE_FORMAT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_JsonFileFormat_SchemaFileFormat_SchemaFileFormatUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatastream_PrivateConnection.state

/**
 *  The private connection has been created with all of its resources.
 *
 *  Value: "CREATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_PrivateConnection_State_Created;
/**
 *  The private connection is in creation state - creating resources.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_PrivateConnection_State_Creating;
/**
 *  The private connection is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_PrivateConnection_State_Deleting;
/**
 *  The private connection creation has failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_PrivateConnection_State_Failed;
/**
 *  Delete request has failed, resource is in invalid state.
 *
 *  Value: "FAILED_TO_DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_PrivateConnection_State_FailedToDelete;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_PrivateConnection_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatastream_Stream.state

/**
 *  The Stream is no longer reading new events, but still writing events in the
 *  buffer.
 *
 *  Value: "DRAINING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_Stream_State_Draining;
/**
 *  The stream is experiencing an error that is preventing data from being
 *  streamed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_Stream_State_Failed;
/**
 *  The stream has experienced a terminal failure.
 *
 *  Value: "FAILED_PERMANENTLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_Stream_State_FailedPermanently;
/**
 *  The stream is in maintenance mode. Updates are rejected on the resource in
 *  this state.
 *
 *  Value: "MAINTENANCE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_Stream_State_Maintenance;
/**
 *  The stream has been created but has not yet started streaming data.
 *
 *  Value: "NOT_STARTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_Stream_State_NotStarted;
/**
 *  The stream is paused.
 *
 *  Value: "PAUSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_Stream_State_Paused;
/**
 *  The stream is running.
 *
 *  Value: "RUNNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_Stream_State_Running;
/**
 *  The stream is starting, but not yet running.
 *
 *  Value: "STARTING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_Stream_State_Starting;
/**
 *  Unspecified stream state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_Stream_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatastream_Validation.state

/**
 *  Validation failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_Validation_State_Failed;
/**
 *  Validation did not execute.
 *
 *  Value: "NOT_EXECUTED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_Validation_State_NotExecuted;
/**
 *  Validation passed.
 *
 *  Value: "PASSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_Validation_State_Passed;
/**
 *  Unspecified state.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_Validation_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRDatastream_ValidationMessage.level

/**
 *  Definitely cause issues with the Stream.
 *
 *  Value: "ERROR"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_ValidationMessage_Level_Error;
/**
 *  Unspecified level.
 *
 *  Value: "LEVEL_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_ValidationMessage_Level_LevelUnspecified;
/**
 *  Potentially cause issues with the Stream.
 *
 *  Value: "WARNING"
 */
FOUNDATION_EXTERN NSString * const kGTLRDatastream_ValidationMessage_Level_Warning;

/**
 *  AVRO file format configuration.
 */
@interface GTLRDatastream_AvroFileFormat : GTLRObject
@end


/**
 *  Backfill strategy to automatically backfill the Stream's objects. Specific
 *  objects can be excluded.
 */
@interface GTLRDatastream_BackfillAllStrategy : GTLRObject

/** MySQL data source objects to avoid backfilling. */
@property(nonatomic, strong, nullable) GTLRDatastream_MysqlRdbms *mysqlExcludedObjects;

/** Oracle data source objects to avoid backfilling. */
@property(nonatomic, strong, nullable) GTLRDatastream_OracleRdbms *oracleExcludedObjects;

/** PostgreSQL data source objects to avoid backfilling. */
@property(nonatomic, strong, nullable) GTLRDatastream_PostgresqlRdbms *postgresqlExcludedObjects;

@end


/**
 *  Represents a backfill job on a specific stream object.
 */
@interface GTLRDatastream_BackfillJob : GTLRObject

/** Output only. Errors which caused the backfill job to fail. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_Error *> *errors;

/** Output only. Backfill job's end time. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastEndTime;

/** Output only. Backfill job's start time. */
@property(nonatomic, strong, nullable) GTLRDateTime *lastStartTime;

/**
 *  Backfill job state.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastream_BackfillJob_State_Active Backfill job is running.
 *        (Value: "ACTIVE")
 *    @arg @c kGTLRDatastream_BackfillJob_State_Completed Backfill completed
 *        successfully. (Value: "COMPLETED")
 *    @arg @c kGTLRDatastream_BackfillJob_State_Failed Backfill job failed (due
 *        to an error). (Value: "FAILED")
 *    @arg @c kGTLRDatastream_BackfillJob_State_NotStarted Backfill job was
 *        never started for the stream object (stream has backfill strategy
 *        defined as manual or object was explicitly excluded from automatic
 *        backfill). (Value: "NOT_STARTED")
 *    @arg @c kGTLRDatastream_BackfillJob_State_Pending Backfill job will start
 *        pending available resources. (Value: "PENDING")
 *    @arg @c kGTLRDatastream_BackfillJob_State_StateUnspecified Default value.
 *        (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRDatastream_BackfillJob_State_Stopped Backfill job stopped
 *        (next job run will start from beginning). (Value: "STOPPED")
 *    @arg @c kGTLRDatastream_BackfillJob_State_Unsupported Backfill job failed
 *        since the table structure is currently unsupported for backfill.
 *        (Value: "UNSUPPORTED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Backfill job's triggering reason.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastream_BackfillJob_Trigger_Automatic Object backfill job
 *        was triggered automatically according to the stream's backfill
 *        strategy. (Value: "AUTOMATIC")
 *    @arg @c kGTLRDatastream_BackfillJob_Trigger_Manual Object backfill job was
 *        triggered manually using the dedicated API. (Value: "MANUAL")
 *    @arg @c kGTLRDatastream_BackfillJob_Trigger_TriggerUnspecified Default
 *        value. (Value: "TRIGGER_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *trigger;

@end


/**
 *  Backfill strategy to disable automatic backfill for the Stream's objects.
 */
@interface GTLRDatastream_BackfillNoneStrategy : GTLRObject
@end


/**
 *  GTLRDatastream_BigQueryDestinationConfig
 */
@interface GTLRDatastream_BigQueryDestinationConfig : GTLRObject

/**
 *  The guaranteed data freshness (in seconds) when querying tables created by
 *  the stream. Editing this field will only affect new tables created in the
 *  future, but existing tables will not be impacted. Lower values mean that
 *  queries will return fresher data, but may result in higher cost.
 */
@property(nonatomic, strong, nullable) GTLRDuration *dataFreshness;

/** Single destination dataset. */
@property(nonatomic, strong, nullable) GTLRDatastream_SingleTargetDataset *singleTargetDataset;

/** Source hierarchy datasets. */
@property(nonatomic, strong, nullable) GTLRDatastream_SourceHierarchyDatasets *sourceHierarchyDatasets;

@end


/**
 *  BigQuery warehouse profile.
 */
@interface GTLRDatastream_BigQueryProfile : GTLRObject
@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRDatastream_CancelOperationRequest : GTLRObject
@end


/**
 *  A set of reusable connection configurations to be used as a source or
 *  destination for a stream.
 */
@interface GTLRDatastream_ConnectionProfile : GTLRObject

/** BigQuery Connection Profile configuration. */
@property(nonatomic, strong, nullable) GTLRDatastream_BigQueryProfile *bigqueryProfile;

/** Output only. The create time of the resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Required. Display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Forward SSH tunnel connectivity. */
@property(nonatomic, strong, nullable) GTLRDatastream_ForwardSshTunnelConnectivity *forwardSshConnectivity;

/** Cloud Storage ConnectionProfile configuration. */
@property(nonatomic, strong, nullable) GTLRDatastream_GcsProfile *gcsProfile;

/** Labels. */
@property(nonatomic, strong, nullable) GTLRDatastream_ConnectionProfile_Labels *labels;

/** MySQL ConnectionProfile configuration. */
@property(nonatomic, strong, nullable) GTLRDatastream_MysqlProfile *mysqlProfile;

/** Output only. The resource's name. */
@property(nonatomic, copy, nullable) NSString *name;

/** Oracle ConnectionProfile configuration. */
@property(nonatomic, strong, nullable) GTLRDatastream_OracleProfile *oracleProfile;

/** PostgreSQL Connection Profile configuration. */
@property(nonatomic, strong, nullable) GTLRDatastream_PostgresqlProfile *postgresqlProfile;

/** Private connectivity. */
@property(nonatomic, strong, nullable) GTLRDatastream_PrivateConnectivity *privateConnectivity;

/** Static Service IP connectivity. */
@property(nonatomic, strong, nullable) GTLRDatastream_StaticServiceIpConnectivity *staticServiceIpConnectivity;

/** Output only. The update time of the resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatastream_ConnectionProfile_Labels : GTLRObject
@end


/**
 *  Dataset template used for dynamic dataset creation.
 */
@interface GTLRDatastream_DatasetTemplate : GTLRObject

/**
 *  If supplied, every created dataset will have its name prefixed by the
 *  provided value. The prefix and name will be separated by an underscore. i.e.
 *  _.
 */
@property(nonatomic, copy, nullable) NSString *datasetIdPrefix;

/**
 *  Describes the Cloud KMS encryption key that will be used to protect
 *  destination BigQuery table. The BigQuery Service Account associated with
 *  your project requires access to this encryption key. i.e.
 *  projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}.
 *  See https://cloud.google.com/bigquery/docs/customer-managed-encryption for
 *  more information.
 */
@property(nonatomic, copy, nullable) NSString *kmsKeyName;

/**
 *  Required. The geographic location where the dataset should reside. See
 *  https://cloud.google.com/bigquery/docs/locations for supported locations.
 */
@property(nonatomic, copy, nullable) NSString *location;

@end


/**
 *  The configuration of the stream destination.
 */
@interface GTLRDatastream_DestinationConfig : GTLRObject

/** BigQuery destination configuration. */
@property(nonatomic, strong, nullable) GTLRDatastream_BigQueryDestinationConfig *bigqueryDestinationConfig;

/**
 *  Required. Destination connection profile resource. Format:
 *  `projects/{project}/locations/{location}/connectionProfiles/{name}`
 */
@property(nonatomic, copy, nullable) NSString *destinationConnectionProfile;

/** A configuration for how data should be loaded to Cloud Storage. */
@property(nonatomic, strong, nullable) GTLRDatastream_GcsDestinationConfig *gcsDestinationConfig;

@end


/**
 *  Request message for 'discover' ConnectionProfile request.
 */
@interface GTLRDatastream_DiscoverConnectionProfileRequest : GTLRObject

/** An ad-hoc connection profile configuration. */
@property(nonatomic, strong, nullable) GTLRDatastream_ConnectionProfile *connectionProfile;

/** A reference to an existing connection profile. */
@property(nonatomic, copy, nullable) NSString *connectionProfileName;

/**
 *  Whether to retrieve the full hierarchy of data objects (TRUE) or only the
 *  current level (FALSE).
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fullHierarchy;

/**
 *  The number of hierarchy levels below the current level to be retrieved.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *hierarchyDepth;

/** MySQL RDBMS to enrich with child data objects and metadata. */
@property(nonatomic, strong, nullable) GTLRDatastream_MysqlRdbms *mysqlRdbms;

/** Oracle RDBMS to enrich with child data objects and metadata. */
@property(nonatomic, strong, nullable) GTLRDatastream_OracleRdbms *oracleRdbms;

/** PostgreSQL RDBMS to enrich with child data objects and metadata. */
@property(nonatomic, strong, nullable) GTLRDatastream_PostgresqlRdbms *postgresqlRdbms;

@end


/**
 *  Response from a discover request.
 */
@interface GTLRDatastream_DiscoverConnectionProfileResponse : GTLRObject

/** Enriched MySQL RDBMS object. */
@property(nonatomic, strong, nullable) GTLRDatastream_MysqlRdbms *mysqlRdbms;

/** Enriched Oracle RDBMS object. */
@property(nonatomic, strong, nullable) GTLRDatastream_OracleRdbms *oracleRdbms;

/** Enriched PostgreSQL RDBMS object. */
@property(nonatomic, strong, nullable) GTLRDatastream_PostgresqlRdbms *postgresqlRdbms;

@end


/**
 *  Configuration to drop large object values.
 */
@interface GTLRDatastream_DropLargeObjects : GTLRObject
@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRDatastream_Empty : GTLRObject
@end


/**
 *  Represent a user-facing Error.
 */
@interface GTLRDatastream_Error : GTLRObject

/** Additional information about the error. */
@property(nonatomic, strong, nullable) GTLRDatastream_Error_Details *details;

/** The time when the error occurred. */
@property(nonatomic, strong, nullable) GTLRDateTime *errorTime;

/**
 *  A unique identifier for this specific error, allowing it to be traced
 *  throughout the system in logs and API responses.
 */
@property(nonatomic, copy, nullable) NSString *errorUuid;

/** A message containing more information about the error that occurred. */
@property(nonatomic, copy, nullable) NSString *message;

/** A title that explains the reason for the error. */
@property(nonatomic, copy, nullable) NSString *reason;

@end


/**
 *  Additional information about the error.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatastream_Error_Details : GTLRObject
@end


/**
 *  Response message for a 'FetchStaticIps' response.
 */
@interface GTLRDatastream_FetchStaticIpsResponse : GTLRObject

/**
 *  A token that can be sent as `page_token` to retrieve the next page. If this
 *  field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** list of static ips by account */
@property(nonatomic, strong, nullable) NSArray<NSString *> *staticIps;

@end


/**
 *  Forward SSH Tunnel connectivity.
 */
@interface GTLRDatastream_ForwardSshTunnelConnectivity : GTLRObject

/** Required. Hostname for the SSH tunnel. */
@property(nonatomic, copy, nullable) NSString *hostname;

/** Input only. SSH password. */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  Port for the SSH tunnel, default value is 22.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/** Input only. SSH private key. */
@property(nonatomic, copy, nullable) NSString *privateKey;

/** Required. Username for the SSH tunnel. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  Google Cloud Storage destination configuration
 */
@interface GTLRDatastream_GcsDestinationConfig : GTLRObject

/** AVRO file format configuration. */
@property(nonatomic, strong, nullable) GTLRDatastream_AvroFileFormat *avroFileFormat;

/**
 *  The maximum duration for which new events are added before a file is closed
 *  and a new file is created.
 */
@property(nonatomic, strong, nullable) GTLRDuration *fileRotationInterval;

/**
 *  The maximum file size to be saved in the bucket.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *fileRotationMb;

/** JSON file format configuration. */
@property(nonatomic, strong, nullable) GTLRDatastream_JsonFileFormat *jsonFileFormat;

/** Path inside the Cloud Storage bucket to write data to. */
@property(nonatomic, copy, nullable) NSString *path;

@end


/**
 *  Cloud Storage bucket profile.
 */
@interface GTLRDatastream_GcsProfile : GTLRObject

/** Required. The Cloud Storage bucket name. */
@property(nonatomic, copy, nullable) NSString *bucket;

/** The root path inside the Cloud Storage bucket. */
@property(nonatomic, copy, nullable) NSString *rootPath;

@end


/**
 *  JSON file format configuration.
 */
@interface GTLRDatastream_JsonFileFormat : GTLRObject

/**
 *  Compression of the loaded JSON file.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastream_JsonFileFormat_Compression_Gzip Gzip compression.
 *        (Value: "GZIP")
 *    @arg @c kGTLRDatastream_JsonFileFormat_Compression_JsonCompressionUnspecified
 *        Unspecified json file compression. (Value:
 *        "JSON_COMPRESSION_UNSPECIFIED")
 *    @arg @c kGTLRDatastream_JsonFileFormat_Compression_NoCompression Do not
 *        compress JSON file. (Value: "NO_COMPRESSION")
 */
@property(nonatomic, copy, nullable) NSString *compression;

/**
 *  The schema file format along JSON data files.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastream_JsonFileFormat_SchemaFileFormat_AvroSchemaFile
 *        Avro schema format. (Value: "AVRO_SCHEMA_FILE")
 *    @arg @c kGTLRDatastream_JsonFileFormat_SchemaFileFormat_NoSchemaFile Do
 *        not attach schema file. (Value: "NO_SCHEMA_FILE")
 *    @arg @c kGTLRDatastream_JsonFileFormat_SchemaFileFormat_SchemaFileFormatUnspecified
 *        Unspecified schema file format. (Value:
 *        "SCHEMA_FILE_FORMAT_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *schemaFileFormat;

@end


/**
 *  Response message for listing connection profiles.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "connectionProfiles" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRDatastream_ListConnectionProfilesResponse : GTLRCollectionObject

/**
 *  List of connection profiles.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_ConnectionProfile *> *connectionProfiles;

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDatastream_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDatastream_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_Operation *> *operations;

@end


/**
 *  Response containing a list of private connection configurations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "privateConnections" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRDatastream_ListPrivateConnectionsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of private connectivity configurations.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_PrivateConnection *> *privateConnections;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Route list response.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "routes" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDatastream_ListRoutesResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of Routes.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_Route *> *routes;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Response containing the objects for a stream.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "streamObjects" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDatastream_ListStreamObjectsResponse : GTLRCollectionObject

/** A token, which can be sent as `page_token` to retrieve the next page. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of stream objects.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_StreamObject *> *streamObjects;

@end


/**
 *  Response message for listing streams.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "streams" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDatastream_ListStreamsResponse : GTLRCollectionObject

/**
 *  A token, which can be sent as `page_token` to retrieve the next page. If
 *  this field is omitted, there are no subsequent pages.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of streams
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_Stream *> *streams;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRDatastream_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRDatastream_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRDatastream_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatastream_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatastream_Location_Metadata : GTLRObject
@end


/**
 *  Request for looking up a specific stream object by its source object
 *  identifier.
 */
@interface GTLRDatastream_LookupStreamObjectRequest : GTLRObject

/** Required. The source object identifier which maps to the stream object. */
@property(nonatomic, strong, nullable) GTLRDatastream_SourceObjectIdentifier *sourceObjectIdentifier;

@end


/**
 *  MySQL Column.
 */
@interface GTLRDatastream_MysqlColumn : GTLRObject

/** Column collation. */
@property(nonatomic, copy, nullable) NSString *collation;

/** Column name. */
@property(nonatomic, copy, nullable) NSString *column;

/**
 *  The MySQL data type. Full data types list can be found here:
 *  https://dev.mysql.com/doc/refman/8.0/en/data-types.html
 */
@property(nonatomic, copy, nullable) NSString *dataType;

/**
 *  Column length.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/**
 *  Whether or not the column can accept a null value.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nullable;

/**
 *  The ordinal position of the column in the table.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ordinalPosition;

/**
 *  Whether or not the column represents a primary key.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *primaryKey;

@end


/**
 *  MySQL database.
 */
@interface GTLRDatastream_MysqlDatabase : GTLRObject

/** Database name. */
@property(nonatomic, copy, nullable) NSString *database;

/** Tables in the database. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_MysqlTable *> *mysqlTables;

@end


/**
 *  Mysql data source object identifier.
 */
@interface GTLRDatastream_MysqlObjectIdentifier : GTLRObject

/** Required. The database name. */
@property(nonatomic, copy, nullable) NSString *database;

/** Required. The table name. */
@property(nonatomic, copy, nullable) NSString *table;

@end


/**
 *  MySQL database profile.
 */
@interface GTLRDatastream_MysqlProfile : GTLRObject

/** Required. Hostname for the MySQL connection. */
@property(nonatomic, copy, nullable) NSString *hostname;

/** Required. Input only. Password for the MySQL connection. */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  Port for the MySQL connection, default value is 3306.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/** SSL configuration for the MySQL connection. */
@property(nonatomic, strong, nullable) GTLRDatastream_MysqlSslConfig *sslConfig;

/** Required. Username for the MySQL connection. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  MySQL database structure
 */
@interface GTLRDatastream_MysqlRdbms : GTLRObject

/** Mysql databases on the server */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_MysqlDatabase *> *mysqlDatabases;

@end


/**
 *  MySQL source configuration
 */
@interface GTLRDatastream_MysqlSourceConfig : GTLRObject

/** MySQL objects to exclude from the stream. */
@property(nonatomic, strong, nullable) GTLRDatastream_MysqlRdbms *excludeObjects;

/** MySQL objects to retrieve from the source. */
@property(nonatomic, strong, nullable) GTLRDatastream_MysqlRdbms *includeObjects;

/**
 *  Maximum number of concurrent CDC tasks. The number should be non negative.
 *  If not set (or set to 0), the system's default value will be used.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxConcurrentCdcTasks;

@end


/**
 *  MySQL SSL configuration information.
 */
@interface GTLRDatastream_MysqlSslConfig : GTLRObject

/**
 *  Input only. PEM-encoded certificate of the CA that signed the source
 *  database server's certificate.
 */
@property(nonatomic, copy, nullable) NSString *caCertificate;

/**
 *  Output only. Indicates whether the ca_certificate field is set.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *caCertificateSet;

/**
 *  Input only. PEM-encoded certificate that will be used by the replica to
 *  authenticate against the source database server. If this field is used then
 *  the 'client_key' and the 'ca_certificate' fields are mandatory.
 */
@property(nonatomic, copy, nullable) NSString *clientCertificate;

/**
 *  Output only. Indicates whether the client_certificate field is set.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *clientCertificateSet;

/**
 *  Input only. PEM-encoded private key associated with the Client Certificate.
 *  If this field is used then the 'client_certificate' and the 'ca_certificate'
 *  fields are mandatory.
 */
@property(nonatomic, copy, nullable) NSString *clientKey;

/**
 *  Output only. Indicates whether the client_key field is set.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *clientKeySet;

@end


/**
 *  MySQL table.
 */
@interface GTLRDatastream_MysqlTable : GTLRObject

/**
 *  MySQL columns in the database. When unspecified as part of include/exclude
 *  objects, includes/excludes everything.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_MysqlColumn *> *mysqlColumns;

/** Table name. */
@property(nonatomic, copy, nullable) NSString *table;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRDatastream_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRDatastream_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRDatastream_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRDatastream_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatastream_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatastream_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRDatastream_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Results of executed validations if there are any. */
@property(nonatomic, strong, nullable) GTLRDatastream_ValidationResult *validationResult;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  Oracle Column.
 */
@interface GTLRDatastream_OracleColumn : GTLRObject

/** Column name. */
@property(nonatomic, copy, nullable) NSString *column;

/** The Oracle data type. */
@property(nonatomic, copy, nullable) NSString *dataType;

/** Column encoding. */
@property(nonatomic, copy, nullable) NSString *encoding;

/**
 *  Column length.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/**
 *  Whether or not the column can accept a null value.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nullable;

/**
 *  The ordinal position of the column in the table.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ordinalPosition;

/**
 *  Column precision.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precision;

/**
 *  Whether or not the column represents a primary key.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *primaryKey;

/**
 *  Column scale.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scale;

@end


/**
 *  Oracle data source object identifier.
 */
@interface GTLRDatastream_OracleObjectIdentifier : GTLRObject

/** Required. The schema name. */
@property(nonatomic, copy, nullable) NSString *schema;

/** Required. The table name. */
@property(nonatomic, copy, nullable) NSString *table;

@end


/**
 *  Oracle database profile.
 */
@interface GTLRDatastream_OracleProfile : GTLRObject

/** Connection string attributes */
@property(nonatomic, strong, nullable) GTLRDatastream_OracleProfile_ConnectionAttributes *connectionAttributes;

/** Required. Database for the Oracle connection. */
@property(nonatomic, copy, nullable) NSString *databaseService;

/** Required. Hostname for the Oracle connection. */
@property(nonatomic, copy, nullable) NSString *hostname;

/** Required. Password for the Oracle connection. */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  Port for the Oracle connection, default value is 1521.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/** Required. Username for the Oracle connection. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  Connection string attributes
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatastream_OracleProfile_ConnectionAttributes : GTLRObject
@end


/**
 *  Oracle database structure.
 */
@interface GTLRDatastream_OracleRdbms : GTLRObject

/** Oracle schemas/databases in the database server. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_OracleSchema *> *oracleSchemas;

@end


/**
 *  Oracle schema.
 */
@interface GTLRDatastream_OracleSchema : GTLRObject

/** Tables in the schema. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_OracleTable *> *oracleTables;

/** Schema name. */
@property(nonatomic, copy, nullable) NSString *schema;

@end


/**
 *  Oracle data source configuration
 */
@interface GTLRDatastream_OracleSourceConfig : GTLRObject

/** Drop large object values. */
@property(nonatomic, strong, nullable) GTLRDatastream_DropLargeObjects *dropLargeObjects;

/** Oracle objects to exclude from the stream. */
@property(nonatomic, strong, nullable) GTLRDatastream_OracleRdbms *excludeObjects;

/** Oracle objects to include in the stream. */
@property(nonatomic, strong, nullable) GTLRDatastream_OracleRdbms *includeObjects;

/**
 *  Maximum number of concurrent CDC tasks. The number should be non negative.
 *  If not set (or set to 0), the system's default value will be used.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *maxConcurrentCdcTasks;

/**
 *  Stream large object values. NOTE: This feature is currently experimental.
 */
@property(nonatomic, strong, nullable) GTLRDatastream_StreamLargeObjects *streamLargeObjects;

@end


/**
 *  Oracle table.
 */
@interface GTLRDatastream_OracleTable : GTLRObject

/**
 *  Oracle columns in the schema. When unspecified as part of include/exclude
 *  objects, includes/excludes everything.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_OracleColumn *> *oracleColumns;

/** Table name. */
@property(nonatomic, copy, nullable) NSString *table;

@end


/**
 *  PostgreSQL Column.
 */
@interface GTLRDatastream_PostgresqlColumn : GTLRObject

/** Column name. */
@property(nonatomic, copy, nullable) NSString *column;

/** The PostgreSQL data type. */
@property(nonatomic, copy, nullable) NSString *dataType;

/**
 *  Column length.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *length;

/**
 *  Whether or not the column can accept a null value.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *nullable;

/**
 *  The ordinal position of the column in the table.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ordinalPosition;

/**
 *  Column precision.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *precision;

/**
 *  Whether or not the column represents a primary key.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *primaryKey;

/**
 *  Column scale.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *scale;

@end


/**
 *  PostgreSQL data source object identifier.
 */
@interface GTLRDatastream_PostgresqlObjectIdentifier : GTLRObject

/** Required. The schema name. */
@property(nonatomic, copy, nullable) NSString *schema;

/** Required. The table name. */
@property(nonatomic, copy, nullable) NSString *table;

@end


/**
 *  PostgreSQL database profile.
 */
@interface GTLRDatastream_PostgresqlProfile : GTLRObject

/** Required. Database for the PostgreSQL connection. */
@property(nonatomic, copy, nullable) NSString *database;

/** Required. Hostname for the PostgreSQL connection. */
@property(nonatomic, copy, nullable) NSString *hostname;

/** Required. Password for the PostgreSQL connection. */
@property(nonatomic, copy, nullable) NSString *password;

/**
 *  Port for the PostgreSQL connection, default value is 5432.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *port;

/** Required. Username for the PostgreSQL connection. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  PostgreSQL database structure.
 */
@interface GTLRDatastream_PostgresqlRdbms : GTLRObject

/** PostgreSQL schemas in the database server. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_PostgresqlSchema *> *postgresqlSchemas;

@end


/**
 *  PostgreSQL schema.
 */
@interface GTLRDatastream_PostgresqlSchema : GTLRObject

/** Tables in the schema. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_PostgresqlTable *> *postgresqlTables;

/** Schema name. */
@property(nonatomic, copy, nullable) NSString *schema;

@end


/**
 *  PostgreSQL data source configuration
 */
@interface GTLRDatastream_PostgresqlSourceConfig : GTLRObject

/** PostgreSQL objects to exclude from the stream. */
@property(nonatomic, strong, nullable) GTLRDatastream_PostgresqlRdbms *excludeObjects;

/** PostgreSQL objects to include in the stream. */
@property(nonatomic, strong, nullable) GTLRDatastream_PostgresqlRdbms *includeObjects;

/**
 *  Required. The name of the publication that includes the set of all tables
 *  that are defined in the stream's include_objects.
 */
@property(nonatomic, copy, nullable) NSString *publication;

/**
 *  Required. Immutable. The name of the logical replication slot that's
 *  configured with the pgoutput plugin.
 */
@property(nonatomic, copy, nullable) NSString *replicationSlot;

@end


/**
 *  PostgreSQL table.
 */
@interface GTLRDatastream_PostgresqlTable : GTLRObject

/**
 *  PostgreSQL columns in the schema. When unspecified as part of
 *  include/exclude objects, includes/excludes everything.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_PostgresqlColumn *> *postgresqlColumns;

/** Table name. */
@property(nonatomic, copy, nullable) NSString *table;

@end


/**
 *  The PrivateConnection resource is used to establish private connectivity
 *  between Datastream and a customer's network.
 */
@interface GTLRDatastream_PrivateConnection : GTLRObject

/** Output only. The create time of the resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Required. Display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Output only. In case of error, the details of the error in a user-friendly
 *  format.
 */
@property(nonatomic, strong, nullable) GTLRDatastream_Error *error;

/** Labels. */
@property(nonatomic, strong, nullable) GTLRDatastream_PrivateConnection_Labels *labels;

/** Output only. The resource's name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The state of the Private Connection.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastream_PrivateConnection_State_Created The private
 *        connection has been created with all of its resources. (Value:
 *        "CREATED")
 *    @arg @c kGTLRDatastream_PrivateConnection_State_Creating The private
 *        connection is in creation state - creating resources. (Value:
 *        "CREATING")
 *    @arg @c kGTLRDatastream_PrivateConnection_State_Deleting The private
 *        connection is being deleted. (Value: "DELETING")
 *    @arg @c kGTLRDatastream_PrivateConnection_State_Failed The private
 *        connection creation has failed. (Value: "FAILED")
 *    @arg @c kGTLRDatastream_PrivateConnection_State_FailedToDelete Delete
 *        request has failed, resource is in invalid state. (Value:
 *        "FAILED_TO_DELETE")
 *    @arg @c kGTLRDatastream_PrivateConnection_State_StateUnspecified
 *        Unspecified state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The update time of the resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** VPC Peering Config. */
@property(nonatomic, strong, nullable) GTLRDatastream_VpcPeeringConfig *vpcPeeringConfig;

@end


/**
 *  Labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatastream_PrivateConnection_Labels : GTLRObject
@end


/**
 *  Private Connectivity
 */
@interface GTLRDatastream_PrivateConnectivity : GTLRObject

/**
 *  Required. A reference to a private connection resource. Format:
 *  `projects/{project}/locations/{location}/privateConnections/{name}`
 */
@property(nonatomic, copy, nullable) NSString *privateConnection;

@end


/**
 *  The route resource is the child of the private connection resource, used for
 *  defining a route for a private connection.
 */
@interface GTLRDatastream_Route : GTLRObject

/** Output only. The create time of the resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Required. Destination address for connection */
@property(nonatomic, copy, nullable) NSString *destinationAddress;

/**
 *  Destination port for connection
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *destinationPort;

/** Required. Display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Labels. */
@property(nonatomic, strong, nullable) GTLRDatastream_Route_Labels *labels;

/** Output only. The resource's name. */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. The update time of the resource. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatastream_Route_Labels : GTLRObject
@end


/**
 *  A single target dataset to which all data will be streamed.
 */
@interface GTLRDatastream_SingleTargetDataset : GTLRObject

@property(nonatomic, copy, nullable) NSString *datasetId;

@end


/**
 *  The configuration of the stream source.
 */
@interface GTLRDatastream_SourceConfig : GTLRObject

/** MySQL data source configuration. */
@property(nonatomic, strong, nullable) GTLRDatastream_MysqlSourceConfig *mysqlSourceConfig;

/** Oracle data source configuration. */
@property(nonatomic, strong, nullable) GTLRDatastream_OracleSourceConfig *oracleSourceConfig;

/** PostgreSQL data source configuration. */
@property(nonatomic, strong, nullable) GTLRDatastream_PostgresqlSourceConfig *postgresqlSourceConfig;

/**
 *  Required. Source connection profile resoource. Format:
 *  `projects/{project}/locations/{location}/connectionProfiles/{name}`
 */
@property(nonatomic, copy, nullable) NSString *sourceConnectionProfile;

@end


/**
 *  Destination datasets are created so that hierarchy of the destination data
 *  objects matches the source hierarchy.
 */
@interface GTLRDatastream_SourceHierarchyDatasets : GTLRObject

@property(nonatomic, strong, nullable) GTLRDatastream_DatasetTemplate *datasetTemplate;

@end


/**
 *  Represents an identifier of an object in the data source.
 */
@interface GTLRDatastream_SourceObjectIdentifier : GTLRObject

/** Mysql data source object identifier. */
@property(nonatomic, strong, nullable) GTLRDatastream_MysqlObjectIdentifier *mysqlIdentifier;

/** Oracle data source object identifier. */
@property(nonatomic, strong, nullable) GTLRDatastream_OracleObjectIdentifier *oracleIdentifier;

/** PostgreSQL data source object identifier. */
@property(nonatomic, strong, nullable) GTLRDatastream_PostgresqlObjectIdentifier *postgresqlIdentifier;

@end


/**
 *  Request for manually initiating a backfill job for a specific stream object.
 */
@interface GTLRDatastream_StartBackfillJobRequest : GTLRObject
@end


/**
 *  Response for manually initiating a backfill job for a specific stream
 *  object.
 */
@interface GTLRDatastream_StartBackfillJobResponse : GTLRObject

/** The stream object resource a backfill job was started for. */
@property(nonatomic, strong, nullable) GTLRDatastream_StreamObject *object;

@end


/**
 *  Static IP address connectivity.
 */
@interface GTLRDatastream_StaticServiceIpConnectivity : GTLRObject
@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRDatastream_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRDatastream_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDatastream_Status_Details_Item : GTLRObject
@end


/**
 *  Request for manually stopping a running backfill job for a specific stream
 *  object.
 */
@interface GTLRDatastream_StopBackfillJobRequest : GTLRObject
@end


/**
 *  Response for manually stop a backfill job for a specific stream object.
 */
@interface GTLRDatastream_StopBackfillJobResponse : GTLRObject

/** The stream object resource the backfill job was stopped for. */
@property(nonatomic, strong, nullable) GTLRDatastream_StreamObject *object;

@end


/**
 *  A resource representing streaming data from a source to a destination.
 */
@interface GTLRDatastream_Stream : GTLRObject

/**
 *  Automatically backfill objects included in the stream source configuration.
 *  Specific objects can be excluded.
 */
@property(nonatomic, strong, nullable) GTLRDatastream_BackfillAllStrategy *backfillAll;

/** Do not automatically backfill any objects. */
@property(nonatomic, strong, nullable) GTLRDatastream_BackfillNoneStrategy *backfillNone;

/** Output only. The creation time of the stream. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Immutable. A reference to a KMS encryption key. If provided, it will be used
 *  to encrypt the data. If left blank, data will be encrypted using an internal
 *  Stream-specific encryption key provisioned through KMS.
 */
@property(nonatomic, copy, nullable) NSString *customerManagedEncryptionKey;

/** Required. Destination connection profile configuration. */
@property(nonatomic, strong, nullable) GTLRDatastream_DestinationConfig *destinationConfig;

/** Required. Display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Output only. Errors on the Stream. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_Error *> *errors;

/** Labels. */
@property(nonatomic, strong, nullable) GTLRDatastream_Stream_Labels *labels;

/** Output only. The stream's name. */
@property(nonatomic, copy, nullable) NSString *name;

/** Required. Source connection profile configuration. */
@property(nonatomic, strong, nullable) GTLRDatastream_SourceConfig *sourceConfig;

/**
 *  The state of the stream.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastream_Stream_State_Draining The Stream is no longer
 *        reading new events, but still writing events in the buffer. (Value:
 *        "DRAINING")
 *    @arg @c kGTLRDatastream_Stream_State_Failed The stream is experiencing an
 *        error that is preventing data from being streamed. (Value: "FAILED")
 *    @arg @c kGTLRDatastream_Stream_State_FailedPermanently The stream has
 *        experienced a terminal failure. (Value: "FAILED_PERMANENTLY")
 *    @arg @c kGTLRDatastream_Stream_State_Maintenance The stream is in
 *        maintenance mode. Updates are rejected on the resource in this state.
 *        (Value: "MAINTENANCE")
 *    @arg @c kGTLRDatastream_Stream_State_NotStarted The stream has been
 *        created but has not yet started streaming data. (Value: "NOT_STARTED")
 *    @arg @c kGTLRDatastream_Stream_State_Paused The stream is paused. (Value:
 *        "PAUSED")
 *    @arg @c kGTLRDatastream_Stream_State_Running The stream is running.
 *        (Value: "RUNNING")
 *    @arg @c kGTLRDatastream_Stream_State_Starting The stream is starting, but
 *        not yet running. (Value: "STARTING")
 *    @arg @c kGTLRDatastream_Stream_State_StateUnspecified Unspecified stream
 *        state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. The last update time of the stream. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Labels.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatastream_Stream_Labels : GTLRObject
@end


/**
 *  Configuration to stream large object values.
 */
@interface GTLRDatastream_StreamLargeObjects : GTLRObject
@end


/**
 *  A specific stream object (e.g a specific DB table).
 */
@interface GTLRDatastream_StreamObject : GTLRObject

/** The latest backfill job that was initiated for the stream object. */
@property(nonatomic, strong, nullable) GTLRDatastream_BackfillJob *backfillJob;

/** Output only. The creation time of the object. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Required. Display name. */
@property(nonatomic, copy, nullable) NSString *displayName;

/** Output only. Active errors on the object. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_Error *> *errors;

/** Output only. The object resource's name. */
@property(nonatomic, copy, nullable) NSString *name;

/** The object identifier in the data source. */
@property(nonatomic, strong, nullable) GTLRDatastream_SourceObjectIdentifier *sourceObject;

/** Output only. The last update time of the object. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  A validation to perform on a stream.
 */
@interface GTLRDatastream_Validation : GTLRObject

/** A custom code identifying this validation. */
@property(nonatomic, copy, nullable) NSString *code;

/**
 *  A short description of the validation.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/** Messages reflecting the validation results. */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_ValidationMessage *> *message;

/**
 *  Validation execution status.
 *
 *  Likely values:
 *    @arg @c kGTLRDatastream_Validation_State_Failed Validation failed. (Value:
 *        "FAILED")
 *    @arg @c kGTLRDatastream_Validation_State_NotExecuted Validation did not
 *        execute. (Value: "NOT_EXECUTED")
 *    @arg @c kGTLRDatastream_Validation_State_Passed Validation passed. (Value:
 *        "PASSED")
 *    @arg @c kGTLRDatastream_Validation_State_StateUnspecified Unspecified
 *        state. (Value: "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

@end


/**
 *  Represent user-facing validation result message.
 */
@interface GTLRDatastream_ValidationMessage : GTLRObject

/** A custom code identifying this specific message. */
@property(nonatomic, copy, nullable) NSString *code;

/**
 *  Message severity level (warning or error).
 *
 *  Likely values:
 *    @arg @c kGTLRDatastream_ValidationMessage_Level_Error Definitely cause
 *        issues with the Stream. (Value: "ERROR")
 *    @arg @c kGTLRDatastream_ValidationMessage_Level_LevelUnspecified
 *        Unspecified level. (Value: "LEVEL_UNSPECIFIED")
 *    @arg @c kGTLRDatastream_ValidationMessage_Level_Warning Potentially cause
 *        issues with the Stream. (Value: "WARNING")
 */
@property(nonatomic, copy, nullable) NSString *level;

/** The result of the validation. */
@property(nonatomic, copy, nullable) NSString *message;

/** Additional metadata related to the result. */
@property(nonatomic, strong, nullable) GTLRDatastream_ValidationMessage_Metadata *metadata;

@end


/**
 *  Additional metadata related to the result.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDatastream_ValidationMessage_Metadata : GTLRObject
@end


/**
 *  Contains the current validation results.
 */
@interface GTLRDatastream_ValidationResult : GTLRObject

/**
 *  A list of validations (includes both executed as well as not executed
 *  validations).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDatastream_Validation *> *validations;

@end


/**
 *  The VPC Peering configuration is used to create VPC peering between
 *  Datastream and the consumer's VPC.
 */
@interface GTLRDatastream_VpcPeeringConfig : GTLRObject

/** Required. A free subnet for peering. (CIDR of /29) */
@property(nonatomic, copy, nullable) NSString *subnet;

/**
 *  Required. Fully qualified name of the VPC that Datastream will peer to.
 *  Format: `projects/{project}/global/{networks}/{name}`
 */
@property(nonatomic, copy, nullable) NSString *vpc;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
