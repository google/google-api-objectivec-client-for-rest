// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Infrastructure Manager API (config/v1)
// Description:
//   Creates and manages Google Cloud Platform resources and infrastructure.
// Documentation:
//   https://cloud.google.com/infrastructure-manager/docs

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRConfig_ApplyResults;
@class GTLRConfig_ApplyResults_Outputs;
@class GTLRConfig_AuditConfig;
@class GTLRConfig_AuditLogConfig;
@class GTLRConfig_Binding;
@class GTLRConfig_Deployment;
@class GTLRConfig_Deployment_Annotations;
@class GTLRConfig_Deployment_Labels;
@class GTLRConfig_DeploymentOperationMetadata;
@class GTLRConfig_Expr;
@class GTLRConfig_GitSource;
@class GTLRConfig_Location;
@class GTLRConfig_Location_Labels;
@class GTLRConfig_Location_Metadata;
@class GTLRConfig_Operation;
@class GTLRConfig_Operation_Metadata;
@class GTLRConfig_Operation_Response;
@class GTLRConfig_Policy;
@class GTLRConfig_Preview;
@class GTLRConfig_Preview_Annotations;
@class GTLRConfig_Preview_Labels;
@class GTLRConfig_PreviewArtifacts;
@class GTLRConfig_PreviewOperationMetadata;
@class GTLRConfig_PreviewResult;
@class GTLRConfig_Resource;
@class GTLRConfig_Resource_CaiAssets;
@class GTLRConfig_ResourceCAIInfo;
@class GTLRConfig_ResourceTerraformInfo;
@class GTLRConfig_Revision;
@class GTLRConfig_Status;
@class GTLRConfig_Status_Details_Item;
@class GTLRConfig_TerraformBlueprint;
@class GTLRConfig_TerraformBlueprint_InputValues;
@class GTLRConfig_TerraformError;
@class GTLRConfig_TerraformOutput;
@class GTLRConfig_TerraformVariable;
@class GTLRConfig_TerraformVersion;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRConfig_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRConfig_Deployment.errorCode

/**
 *  Cloud Storage bucket creation failed due to an issue unrelated to
 *  permissions.
 *
 *  Value: "BUCKET_CREATION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_ErrorCode_BucketCreationFailed;
/**
 *  Cloud Storage bucket creation failed due to a permission issue.
 *
 *  Value: "BUCKET_CREATION_PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_ErrorCode_BucketCreationPermissionDenied;
/**
 *  Cloud Build failed due to a permission issue.
 *
 *  Value: "CLOUD_BUILD_PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_ErrorCode_CloudBuildPermissionDenied;
/**
 *  Cloud Build job associated with a deployment deletion could not be started.
 *
 *  Value: "DELETE_BUILD_API_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_ErrorCode_DeleteBuildApiFailed;
/**
 *  Cloud Build job associated with a deployment deletion was started but
 *  failed.
 *
 *  Value: "DELETE_BUILD_RUN_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_ErrorCode_DeleteBuildRunFailed;
/**
 *  No error code was specified.
 *
 *  Value: "ERROR_CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_ErrorCode_ErrorCodeUnspecified;
/**
 *  The revision failed. See Revision for more details.
 *
 *  Value: "REVISION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_ErrorCode_RevisionFailed;

// ----------------------------------------------------------------------------
// GTLRConfig_Deployment.lockState

/**
 *  The deployment is locked.
 *
 *  Value: "LOCKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_LockState_Locked;
/**
 *  The deployment has failed to lock.
 *
 *  Value: "LOCK_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_LockState_LockFailed;
/**
 *  The deployment is being locked.
 *
 *  Value: "LOCKING"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_LockState_Locking;
/**
 *  The default value. This value is used if the lock state is omitted.
 *
 *  Value: "LOCK_STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_LockState_LockStateUnspecified;
/**
 *  The deployment is unlocked.
 *
 *  Value: "UNLOCKED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_LockState_Unlocked;
/**
 *  The deployment has failed to unlock.
 *
 *  Value: "UNLOCK_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_LockState_UnlockFailed;
/**
 *  The deployment is being unlocked.
 *
 *  Value: "UNLOCKING"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_LockState_Unlocking;

// ----------------------------------------------------------------------------
// GTLRConfig_Deployment.quotaValidation

/**
 *  Enable computing quotas for resources in terraform configuration files to
 *  get visibility on resources with insufficient quotas.
 *
 *  Value: "ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_QuotaValidation_Enabled;
/**
 *  Enforce quota checks so deployment fails if there isn't sufficient quotas
 *  available to deploy resources in terraform configuration files.
 *
 *  Value: "ENFORCED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_QuotaValidation_Enforced;
/**
 *  The default value. QuotaValidation on terraform configuration files will be
 *  disabled in this case.
 *
 *  Value: "QUOTA_VALIDATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_QuotaValidation_QuotaValidationUnspecified;

// ----------------------------------------------------------------------------
// GTLRConfig_Deployment.state

/**
 *  The deployment is healthy.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_State_Active;
/**
 *  The deployment is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_State_Creating;
/**
 *  The deployment has been deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_State_Deleted;
/**
 *  The deployment is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_State_Deleting;
/**
 *  The deployment has encountered an unexpected error.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_State_Failed;
/**
 *  The default value. This value is used if the state is omitted.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_State_StateUnspecified;
/**
 *  The deployment is no longer being actively reconciled. This may be the
 *  result of recovering the project after deletion.
 *
 *  Value: "SUSPENDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_State_Suspended;
/**
 *  The deployment is being updated.
 *
 *  Value: "UPDATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Deployment_State_Updating;

// ----------------------------------------------------------------------------
// GTLRConfig_DeploymentOperationMetadata.step

/**
 *  Unspecified deployment step
 *
 *  Value: "DEPLOYMENT_STEP_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_DeploymentOperationMetadata_Step_DeploymentStepUnspecified;
/**
 *  Downloading the blueprint onto the Google Cloud Storage bucket
 *
 *  Value: "DOWNLOADING_BLUEPRINT"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_DeploymentOperationMetadata_Step_DownloadingBlueprint;
/**
 *  Operation failed
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_DeploymentOperationMetadata_Step_Failed;
/**
 *  Infra Manager is creating a Google Cloud Storage bucket to store artifacts
 *  and metadata about the deployment and revision
 *
 *  Value: "PREPARING_STORAGE_BUCKET"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_DeploymentOperationMetadata_Step_PreparingStorageBucket;
/**
 *  Running quota validation
 *
 *  Value: "RUNNING_QUOTA_VALIDATION"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_DeploymentOperationMetadata_Step_RunningQuotaValidation;
/**
 *  Actuating resources using Terraform using `terraform apply`
 *
 *  Value: "RUNNING_TF_APPLY"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_DeploymentOperationMetadata_Step_RunningTfApply;
/**
 *  Destroying resources using Terraform using `terraform destroy`
 *
 *  Value: "RUNNING_TF_DESTROY"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_DeploymentOperationMetadata_Step_RunningTfDestroy;
/**
 *  Initializing Terraform using `terraform init`
 *
 *  Value: "RUNNING_TF_INIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_DeploymentOperationMetadata_Step_RunningTfInit;
/**
 *  Running `terraform plan`
 *
 *  Value: "RUNNING_TF_PLAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_DeploymentOperationMetadata_Step_RunningTfPlan;
/**
 *  Validating the uploaded TF state file when unlocking a deployment
 *
 *  Value: "RUNNING_TF_VALIDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_DeploymentOperationMetadata_Step_RunningTfValidate;
/**
 *  Operation was successful
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_DeploymentOperationMetadata_Step_Succeeded;
/**
 *  Unlocking a deployment
 *
 *  Value: "UNLOCKING_DEPLOYMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_DeploymentOperationMetadata_Step_UnlockingDeployment;
/**
 *  Validating the provided repository.
 *
 *  Value: "VALIDATING_REPOSITORY"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_DeploymentOperationMetadata_Step_ValidatingRepository;

// ----------------------------------------------------------------------------
// GTLRConfig_Preview.errorCode

/**
 *  Cloud Storage bucket failed for a non-permissions-related issue.
 *
 *  Value: "BUCKET_CREATION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_ErrorCode_BucketCreationFailed;
/**
 *  Cloud Storage bucket failed to create due to a permissions issue.
 *
 *  Value: "BUCKET_CREATION_PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_ErrorCode_BucketCreationPermissionDenied;
/**
 *  Cloud Build failed due to a permissions issue.
 *
 *  Value: "CLOUD_BUILD_PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_ErrorCode_CloudBuildPermissionDenied;
/**
 *  Acquiring lock on provided deployment reference failed.
 *
 *  Value: "DEPLOYMENT_LOCK_ACQUIRE_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_ErrorCode_DeploymentLockAcquireFailed;
/**
 *  No error code was specified.
 *
 *  Value: "ERROR_CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_ErrorCode_ErrorCodeUnspecified;
/**
 *  Preview encountered an error when trying to access Cloud Build API.
 *
 *  Value: "PREVIEW_BUILD_API_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_ErrorCode_PreviewBuildApiFailed;
/**
 *  Preview created a build but build failed and logs were generated.
 *
 *  Value: "PREVIEW_BUILD_RUN_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_ErrorCode_PreviewBuildRunFailed;

// ----------------------------------------------------------------------------
// GTLRConfig_Preview.previewMode

/**
 *  DEFAULT mode generates an execution plan for reconciling current resource
 *  state into expected resource state.
 *
 *  Value: "DEFAULT"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_PreviewMode_Default;
/**
 *  DELETE mode generates as execution plan for destroying current resources.
 *
 *  Value: "DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_PreviewMode_Delete;
/**
 *  Unspecified policy, default mode will be used.
 *
 *  Value: "PREVIEW_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_PreviewMode_PreviewModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRConfig_Preview.state

/**
 *  The preview is being applied.
 *
 *  Value: "APPLYING"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_State_Applying;
/**
 *  The preview is being created.
 *
 *  Value: "CREATING"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_State_Creating;
/**
 *  The preview has been deleted.
 *
 *  Value: "DELETED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_State_Deleted;
/**
 *  The preview is being deleted.
 *
 *  Value: "DELETING"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_State_Deleting;
/**
 *  The preview has encountered an unexpected error.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_State_Failed;
/**
 *  The preview is stale. A preview can become stale if a revision has been
 *  applied after this preview was created.
 *
 *  Value: "STALE"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_State_Stale;
/**
 *  The default value. This value is used if the state is unknown.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_State_StateUnspecified;
/**
 *  The preview has succeeded.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Preview_State_Succeeded;

// ----------------------------------------------------------------------------
// GTLRConfig_PreviewOperationMetadata.step

/**
 *  Downloading the blueprint onto the Google Cloud Storage bucket.
 *
 *  Value: "DOWNLOADING_BLUEPRINT"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_PreviewOperationMetadata_Step_DownloadingBlueprint;
/**
 *  Operation failed.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_PreviewOperationMetadata_Step_Failed;
/**
 *  Fetching a deployment.
 *
 *  Value: "FETCHING_DEPLOYMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_PreviewOperationMetadata_Step_FetchingDeployment;
/**
 *  Locking a deployment.
 *
 *  Value: "LOCKING_DEPLOYMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_PreviewOperationMetadata_Step_LockingDeployment;
/**
 *  Infra Manager is creating a Google Cloud Storage bucket to store artifacts
 *  and metadata about the preview.
 *
 *  Value: "PREPARING_STORAGE_BUCKET"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_PreviewOperationMetadata_Step_PreparingStorageBucket;
/**
 *  Unspecified preview step.
 *
 *  Value: "PREVIEW_STEP_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_PreviewOperationMetadata_Step_PreviewStepUnspecified;
/**
 *  Initializing Terraform using `terraform init`.
 *
 *  Value: "RUNNING_TF_INIT"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_PreviewOperationMetadata_Step_RunningTfInit;
/**
 *  Running `terraform plan`.
 *
 *  Value: "RUNNING_TF_PLAN"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_PreviewOperationMetadata_Step_RunningTfPlan;
/**
 *  Operation was successful.
 *
 *  Value: "SUCCEEDED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_PreviewOperationMetadata_Step_Succeeded;
/**
 *  Unlocking a deployment.
 *
 *  Value: "UNLOCKING_DEPLOYMENT"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_PreviewOperationMetadata_Step_UnlockingDeployment;
/**
 *  Validating the provided repository.
 *
 *  Value: "VALIDATING_REPOSITORY"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_PreviewOperationMetadata_Step_ValidatingRepository;

// ----------------------------------------------------------------------------
// GTLRConfig_Resource.intent

/**
 *  Infra Manager will create this Resource.
 *
 *  Value: "CREATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Resource_Intent_Create;
/**
 *  Infra Manager will delete this Resource.
 *
 *  Value: "DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Resource_Intent_Delete;
/**
 *  The default value. This value is used if the intent is omitted.
 *
 *  Value: "INTENT_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Resource_Intent_IntentUnspecified;
/**
 *  Infra Manager will destroy and recreate this Resource.
 *
 *  Value: "RECREATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Resource_Intent_Recreate;
/**
 *  Infra Manager will leave this Resource untouched.
 *
 *  Value: "UNCHANGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Resource_Intent_Unchanged;
/**
 *  Infra Manager will update this Resource.
 *
 *  Value: "UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Resource_Intent_Update;

// ----------------------------------------------------------------------------
// GTLRConfig_Resource.state

/**
 *  Resource failed to reconcile.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Resource_State_Failed;
/**
 *  Resource is actively reconciling into the intended state.
 *
 *  Value: "IN_PROGRESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Resource_State_InProgress;
/**
 *  Resource has been planned for reconcile.
 *
 *  Value: "PLANNED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Resource_State_Planned;
/**
 *  Resource has reconciled to intended state.
 *
 *  Value: "RECONCILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Resource_State_Reconciled;
/**
 *  The default value. This value is used if the state is omitted.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Resource_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRConfig_Revision.action

/**
 *  The default value. This value is used if the action is omitted.
 *
 *  Value: "ACTION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Revision_Action_ActionUnspecified;
/**
 *  The revision was generated by creating a deployment.
 *
 *  Value: "CREATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Revision_Action_Create;
/**
 *  The revision was deleted.
 *
 *  Value: "DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Revision_Action_Delete;
/**
 *  The revision was generated by updating a deployment.
 *
 *  Value: "UPDATE"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Revision_Action_Update;

// ----------------------------------------------------------------------------
// GTLRConfig_Revision.errorCode

/**
 *  Cloud Build job associated with creating or updating a deployment could not
 *  be started.
 *
 *  Value: "APPLY_BUILD_API_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Revision_ErrorCode_ApplyBuildApiFailed;
/**
 *  Cloud Build job associated with creating or updating a deployment was
 *  started but failed.
 *
 *  Value: "APPLY_BUILD_RUN_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Revision_ErrorCode_ApplyBuildRunFailed;
/**
 *  Cloud Build failed due to a permission issue.
 *
 *  Value: "CLOUD_BUILD_PERMISSION_DENIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Revision_ErrorCode_CloudBuildPermissionDenied;
/**
 *  No error code was specified.
 *
 *  Value: "ERROR_CODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Revision_ErrorCode_ErrorCodeUnspecified;
/**
 *  quota validation failed for one or more resources in terraform configuration
 *  files.
 *
 *  Value: "QUOTA_VALIDATION_FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Revision_ErrorCode_QuotaValidationFailed;

// ----------------------------------------------------------------------------
// GTLRConfig_Revision.quotaValidation

/**
 *  Enable computing quotas for resources in terraform configuration files to
 *  get visibility on resources with insufficient quotas.
 *
 *  Value: "ENABLED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Revision_QuotaValidation_Enabled;
/**
 *  Enforce quota checks so deployment fails if there isn't sufficient quotas
 *  available to deploy resources in terraform configuration files.
 *
 *  Value: "ENFORCED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Revision_QuotaValidation_Enforced;
/**
 *  The default value. QuotaValidation on terraform configuration files will be
 *  disabled in this case.
 *
 *  Value: "QUOTA_VALIDATION_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Revision_QuotaValidation_QuotaValidationUnspecified;

// ----------------------------------------------------------------------------
// GTLRConfig_Revision.state

/**
 *  The revision was applied successfully.
 *
 *  Value: "APPLIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Revision_State_Applied;
/**
 *  The revision is being applied.
 *
 *  Value: "APPLYING"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Revision_State_Applying;
/**
 *  The revision could not be applied successfully.
 *
 *  Value: "FAILED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Revision_State_Failed;
/**
 *  The default value. This value is used if the state is omitted.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_Revision_State_StateUnspecified;

// ----------------------------------------------------------------------------
// GTLRConfig_TerraformVersion.state

/**
 *  The version is actively supported.
 *
 *  Value: "ACTIVE"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_TerraformVersion_State_Active;
/**
 *  The version is deprecated.
 *
 *  Value: "DEPRECATED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_TerraformVersion_State_Deprecated;
/**
 *  The version is obsolete.
 *
 *  Value: "OBSOLETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_TerraformVersion_State_Obsolete;
/**
 *  The default value. This value is used if the state is omitted.
 *
 *  Value: "STATE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfig_TerraformVersion_State_StateUnspecified;

/**
 *  Outputs and artifacts from applying a deployment.
 */
@interface GTLRConfig_ApplyResults : GTLRObject

/**
 *  Location of artifacts (e.g. logs) in Google Cloud Storage. Format:
 *  `gs://{bucket}/{object}`
 */
@property(nonatomic, copy, nullable) NSString *artifacts;

/**
 *  Location of a blueprint copy and other manifests in Google Cloud Storage.
 *  Format: `gs://{bucket}/{object}`
 */
@property(nonatomic, copy, nullable) NSString *content;

/** Map of output name to output info. */
@property(nonatomic, strong, nullable) GTLRConfig_ApplyResults_Outputs *outputs;

@end


/**
 *  Map of output name to output info.
 *
 *  @note This class is documented as having more properties of
 *        GTLRConfig_TerraformOutput. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRConfig_ApplyResults_Outputs : GTLRObject
@end


/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRConfig_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRConfig_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRConfig_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_AuditLogConfig_LogType_AdminRead Admin reads. Example:
 *        CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRConfig_AuditLogConfig_LogType_DataRead Data reads. Example:
 *        CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRConfig_AuditLogConfig_LogType_DataWrite Data writes. Example:
 *        CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRConfig_AuditLogConfig_LogType_LogTypeUnspecified Default
 *        case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRConfig_Binding : GTLRObject

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRConfig_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `domain:{domain}`: The G Suite domain
 *  (primary) that represents all the users of that domain. For example,
 *  `google.com` or `example.com`. *
 *  `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workforce identity pool. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`:
 *  All workforce identities in a group. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All workforce identities with a specific attribute value. *
 *  `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/
 *  *`: All identities in a workforce identity pool. *
 *  `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`:
 *  A single identity in a workload identity pool. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`:
 *  A workload identity pool group. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`:
 *  All identities in a workload identity pool with a certain attribute. *
 *  `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/
 *  *`: All identities in a workload identity pool. *
 *  `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique
 *  identifier) representing a user that has been recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. *
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`:
 *  Deleted single identity in a workforce identity pool. For example,
 *  `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`. For an overview of the IAM
 *  roles and permissions, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/roles-overview). For a list
 *  of the available pre-defined roles, see
 *  [here](https://cloud.google.com/iam/docs/understanding-roles).
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRConfig_CancelOperationRequest : GTLRObject
@end


/**
 *  A request to delete a state file passed to a 'DeleteStatefile' call.
 */
@interface GTLRConfig_DeleteStatefileRequest : GTLRObject

/**
 *  Required. Lock ID of the lock file to verify that the user who is deleting
 *  the state file previously locked the Deployment.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lockId;

@end


/**
 *  A Deployment is a group of resources and configs managed and provisioned by
 *  Infra Manager.
 */
@interface GTLRConfig_Deployment : GTLRObject

/**
 *  Optional. Arbitrary key-value metadata storage e.g. to help client tools
 *  identify deployments during automation. See
 *  https://google.aip.dev/148#annotations for details on format and size
 *  limitations.
 */
@property(nonatomic, strong, nullable) GTLRConfig_Deployment_Annotations *annotations;

/**
 *  Optional. User-defined location of Cloud Build logs and artifacts in Google
 *  Cloud Storage. Format: `gs://{bucket}/{folder}` A default bucket will be
 *  bootstrapped if the field is not set or empty. Default bucket format:
 *  `gs://--blueprint-config` Constraints: - The bucket needs to be in the same
 *  project as the deployment - The path cannot be within the path of
 *  `gcs_source` - The field cannot be updated, including changing its presence
 */
@property(nonatomic, copy, nullable) NSString *artifactsGcsBucket;

/** Output only. Time when the deployment was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. Cloud Build instance UUID associated with deleting this
 *  deployment.
 */
@property(nonatomic, copy, nullable) NSString *deleteBuild;

/**
 *  Output only. Location of Cloud Build logs in Google Cloud Storage, populated
 *  when deleting this deployment. Format: `gs://{bucket}/{object}`.
 */
@property(nonatomic, copy, nullable) NSString *deleteLogs;

/** Output only. Location of artifacts from a DeleteDeployment operation. */
@property(nonatomic, strong, nullable) GTLRConfig_ApplyResults *deleteResults;

/**
 *  Output only. Error code describing errors that may have occurred.
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_Deployment_ErrorCode_BucketCreationFailed Cloud
 *        Storage bucket creation failed due to an issue unrelated to
 *        permissions. (Value: "BUCKET_CREATION_FAILED")
 *    @arg @c kGTLRConfig_Deployment_ErrorCode_BucketCreationPermissionDenied
 *        Cloud Storage bucket creation failed due to a permission issue.
 *        (Value: "BUCKET_CREATION_PERMISSION_DENIED")
 *    @arg @c kGTLRConfig_Deployment_ErrorCode_CloudBuildPermissionDenied Cloud
 *        Build failed due to a permission issue. (Value:
 *        "CLOUD_BUILD_PERMISSION_DENIED")
 *    @arg @c kGTLRConfig_Deployment_ErrorCode_DeleteBuildApiFailed Cloud Build
 *        job associated with a deployment deletion could not be started.
 *        (Value: "DELETE_BUILD_API_FAILED")
 *    @arg @c kGTLRConfig_Deployment_ErrorCode_DeleteBuildRunFailed Cloud Build
 *        job associated with a deployment deletion was started but failed.
 *        (Value: "DELETE_BUILD_RUN_FAILED")
 *    @arg @c kGTLRConfig_Deployment_ErrorCode_ErrorCodeUnspecified No error
 *        code was specified. (Value: "ERROR_CODE_UNSPECIFIED")
 *    @arg @c kGTLRConfig_Deployment_ErrorCode_RevisionFailed The revision
 *        failed. See Revision for more details. (Value: "REVISION_FAILED")
 */
@property(nonatomic, copy, nullable) NSString *errorCode;

/**
 *  Output only. Location of Terraform error logs in Google Cloud Storage.
 *  Format: `gs://{bucket}/{object}`.
 */
@property(nonatomic, copy, nullable) NSString *errorLogs;

/**
 *  By default, Infra Manager will return a failure when Terraform encounters a
 *  409 code (resource conflict error) during actuation. If this flag is set to
 *  true, Infra Manager will instead attempt to automatically import the
 *  resource into the Terraform state (for supported resource types) and
 *  continue actuation. Not all resource types are supported, refer to
 *  documentation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *importExistingResources;

/** User-defined metadata for the deployment. */
@property(nonatomic, strong, nullable) GTLRConfig_Deployment_Labels *labels;

/**
 *  Output only. Revision name that was most recently applied. Format:
 *  `projects/{project}/locations/{location}/deployments/{deployment}/
 *  revisions/{revision}`
 */
@property(nonatomic, copy, nullable) NSString *latestRevision;

/**
 *  Output only. Current lock state of the deployment.
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_Deployment_LockState_Locked The deployment is locked.
 *        (Value: "LOCKED")
 *    @arg @c kGTLRConfig_Deployment_LockState_LockFailed The deployment has
 *        failed to lock. (Value: "LOCK_FAILED")
 *    @arg @c kGTLRConfig_Deployment_LockState_Locking The deployment is being
 *        locked. (Value: "LOCKING")
 *    @arg @c kGTLRConfig_Deployment_LockState_LockStateUnspecified The default
 *        value. This value is used if the lock state is omitted. (Value:
 *        "LOCK_STATE_UNSPECIFIED")
 *    @arg @c kGTLRConfig_Deployment_LockState_Unlocked The deployment is
 *        unlocked. (Value: "UNLOCKED")
 *    @arg @c kGTLRConfig_Deployment_LockState_UnlockFailed The deployment has
 *        failed to unlock. (Value: "UNLOCK_FAILED")
 *    @arg @c kGTLRConfig_Deployment_LockState_Unlocking The deployment is being
 *        unlocked. (Value: "UNLOCKING")
 */
@property(nonatomic, copy, nullable) NSString *lockState;

/**
 *  Resource name of the deployment. Format:
 *  `projects/{project}/locations/{location}/deployments/{deployment}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Input to control quota checks for resources in terraform
 *  configuration files. There are limited resources on which quota validation
 *  applies.
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_Deployment_QuotaValidation_Enabled Enable computing
 *        quotas for resources in terraform configuration files to get
 *        visibility on resources with insufficient quotas. (Value: "ENABLED")
 *    @arg @c kGTLRConfig_Deployment_QuotaValidation_Enforced Enforce quota
 *        checks so deployment fails if there isn't sufficient quotas available
 *        to deploy resources in terraform configuration files. (Value:
 *        "ENFORCED")
 *    @arg @c kGTLRConfig_Deployment_QuotaValidation_QuotaValidationUnspecified
 *        The default value. QuotaValidation on terraform configuration files
 *        will be disabled in this case. (Value: "QUOTA_VALIDATION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *quotaValidation;

/**
 *  Optional. User-specified Service Account (SA) credentials to be used when
 *  actuating resources. Format:
 *  `projects/{projectID}/serviceAccounts/{serviceAccount}`
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Output only. Current state of the deployment.
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_Deployment_State_Active The deployment is healthy.
 *        (Value: "ACTIVE")
 *    @arg @c kGTLRConfig_Deployment_State_Creating The deployment is being
 *        created. (Value: "CREATING")
 *    @arg @c kGTLRConfig_Deployment_State_Deleted The deployment has been
 *        deleted. (Value: "DELETED")
 *    @arg @c kGTLRConfig_Deployment_State_Deleting The deployment is being
 *        deleted. (Value: "DELETING")
 *    @arg @c kGTLRConfig_Deployment_State_Failed The deployment has encountered
 *        an unexpected error. (Value: "FAILED")
 *    @arg @c kGTLRConfig_Deployment_State_StateUnspecified The default value.
 *        This value is used if the state is omitted. (Value:
 *        "STATE_UNSPECIFIED")
 *    @arg @c kGTLRConfig_Deployment_State_Suspended The deployment is no longer
 *        being actively reconciled. This may be the result of recovering the
 *        project after deletion. (Value: "SUSPENDED")
 *    @arg @c kGTLRConfig_Deployment_State_Updating The deployment is being
 *        updated. (Value: "UPDATING")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. Additional information regarding the current state. */
@property(nonatomic, copy, nullable) NSString *stateDetail;

/**
 *  A blueprint described using Terraform's HashiCorp Configuration Language as
 *  a root module.
 */
@property(nonatomic, strong, nullable) GTLRConfig_TerraformBlueprint *terraformBlueprint;

/**
 *  Output only. Errors encountered when deleting this deployment. Errors are
 *  truncated to 10 entries, see `delete_results` and `error_logs` for full
 *  details.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRConfig_TerraformError *> *tfErrors;

/**
 *  Output only. The current Terraform version set on the deployment. It is in
 *  the format of "Major.Minor.Patch", for example, "1.3.10".
 */
@property(nonatomic, copy, nullable) NSString *tfVersion;

/**
 *  Optional. The user-specified Terraform version constraint. Example:
 *  "=1.3.10".
 */
@property(nonatomic, copy, nullable) NSString *tfVersionConstraint;

/** Output only. Time when the deployment was last modified. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Optional. The user-specified Cloud Build worker pool resource in which the
 *  Cloud Build job will execute. Format:
 *  `projects/{project}/locations/{location}/workerPools/{workerPoolId}`. If
 *  this field is unspecified, the default Cloud Build worker pool will be used.
 */
@property(nonatomic, copy, nullable) NSString *workerPool;

@end


/**
 *  Optional. Arbitrary key-value metadata storage e.g. to help client tools
 *  identify deployments during automation. See
 *  https://google.aip.dev/148#annotations for details on format and size
 *  limitations.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRConfig_Deployment_Annotations : GTLRObject
@end


/**
 *  User-defined metadata for the deployment.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRConfig_Deployment_Labels : GTLRObject
@end


/**
 *  Ephemeral metadata content describing the state of a deployment operation.
 */
@interface GTLRConfig_DeploymentOperationMetadata : GTLRObject

/** Outputs and artifacts from applying a deployment. */
@property(nonatomic, strong, nullable) GTLRConfig_ApplyResults *applyResults;

/** Output only. Cloud Build instance UUID associated with this operation. */
@property(nonatomic, copy, nullable) NSString *build;

/**
 *  Output only. Location of Deployment operations logs in
 *  `gs://{bucket}/{object}` format.
 */
@property(nonatomic, copy, nullable) NSString *logs;

/**
 *  The current step the deployment operation is running.
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_DeploymentOperationMetadata_Step_DeploymentStepUnspecified
 *        Unspecified deployment step (Value: "DEPLOYMENT_STEP_UNSPECIFIED")
 *    @arg @c kGTLRConfig_DeploymentOperationMetadata_Step_DownloadingBlueprint
 *        Downloading the blueprint onto the Google Cloud Storage bucket (Value:
 *        "DOWNLOADING_BLUEPRINT")
 *    @arg @c kGTLRConfig_DeploymentOperationMetadata_Step_Failed Operation
 *        failed (Value: "FAILED")
 *    @arg @c kGTLRConfig_DeploymentOperationMetadata_Step_PreparingStorageBucket
 *        Infra Manager is creating a Google Cloud Storage bucket to store
 *        artifacts and metadata about the deployment and revision (Value:
 *        "PREPARING_STORAGE_BUCKET")
 *    @arg @c kGTLRConfig_DeploymentOperationMetadata_Step_RunningQuotaValidation
 *        Running quota validation (Value: "RUNNING_QUOTA_VALIDATION")
 *    @arg @c kGTLRConfig_DeploymentOperationMetadata_Step_RunningTfApply
 *        Actuating resources using Terraform using `terraform apply` (Value:
 *        "RUNNING_TF_APPLY")
 *    @arg @c kGTLRConfig_DeploymentOperationMetadata_Step_RunningTfDestroy
 *        Destroying resources using Terraform using `terraform destroy` (Value:
 *        "RUNNING_TF_DESTROY")
 *    @arg @c kGTLRConfig_DeploymentOperationMetadata_Step_RunningTfInit
 *        Initializing Terraform using `terraform init` (Value:
 *        "RUNNING_TF_INIT")
 *    @arg @c kGTLRConfig_DeploymentOperationMetadata_Step_RunningTfPlan Running
 *        `terraform plan` (Value: "RUNNING_TF_PLAN")
 *    @arg @c kGTLRConfig_DeploymentOperationMetadata_Step_RunningTfValidate
 *        Validating the uploaded TF state file when unlocking a deployment
 *        (Value: "RUNNING_TF_VALIDATE")
 *    @arg @c kGTLRConfig_DeploymentOperationMetadata_Step_Succeeded Operation
 *        was successful (Value: "SUCCEEDED")
 *    @arg @c kGTLRConfig_DeploymentOperationMetadata_Step_UnlockingDeployment
 *        Unlocking a deployment (Value: "UNLOCKING_DEPLOYMENT")
 *    @arg @c kGTLRConfig_DeploymentOperationMetadata_Step_ValidatingRepository
 *        Validating the provided repository. (Value: "VALIDATING_REPOSITORY")
 */
@property(nonatomic, copy, nullable) NSString *step;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRConfig_Empty : GTLRObject
@end


/**
 *  A request to export a state file passed to a 'ExportDeploymentStatefile'
 *  call.
 */
@interface GTLRConfig_ExportDeploymentStatefileRequest : GTLRObject

/**
 *  Optional. If this flag is set to true, the exported deployment state file
 *  will be the draft state. This will enable the draft file to be validated
 *  before copying it over to the working state on unlock.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *draft;

@end


/**
 *  A request to export preview results.
 */
@interface GTLRConfig_ExportPreviewResultRequest : GTLRObject
@end


/**
 *  A response to `ExportPreviewResult` call. Contains preview results.
 */
@interface GTLRConfig_ExportPreviewResultResponse : GTLRObject

/** Output only. Signed URLs for accessing the plan files. */
@property(nonatomic, strong, nullable) GTLRConfig_PreviewResult *result;

@end


/**
 *  A request to export a state file passed to a 'ExportRevisionStatefile' call.
 */
@interface GTLRConfig_ExportRevisionStatefileRequest : GTLRObject
@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRConfig_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  A set of files in a Git repository.
 */
@interface GTLRConfig_GitSource : GTLRObject

/**
 *  Optional. Subdirectory inside the repository. Example: 'staging/my-package'
 */
@property(nonatomic, copy, nullable) NSString *directory;

/** Optional. Git reference (e.g. branch or tag). */
@property(nonatomic, copy, nullable) NSString *ref;

/**
 *  Optional. Repository URL. Example:
 *  'https://github.com/kubernetes/examples.git'
 */
@property(nonatomic, copy, nullable) NSString *repo;

@end


/**
 *  A request to import a state file passed to a 'ImportStatefile' call.
 */
@interface GTLRConfig_ImportStatefileRequest : GTLRObject

/**
 *  Required. Lock ID of the lock file to verify that the user who is importing
 *  the state file previously locked the Deployment.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lockId;

@end


/**
 *  GTLRConfig_ListDeploymentsResponse
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "deployments" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRConfig_ListDeploymentsResponse : GTLRCollectionObject

/**
 *  List of Deployments.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRConfig_Deployment *> *deployments;

/**
 *  Token to be supplied to the next ListDeployments request via `page_token` to
 *  obtain the next set of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRConfig_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRConfig_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRConfig_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRConfig_Operation *> *operations;

@end


/**
 *  A response to a `ListPreviews` call. Contains a list of Previews.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "previews" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRConfig_ListPreviewsResponse : GTLRCollectionObject

/**
 *  Token to be supplied to the next ListPreviews request via `page_token` to
 *  obtain the next set of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of Previewss.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRConfig_Preview *> *previews;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  A response to a 'ListResources' call. Contains a list of Resources.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "resources" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRConfig_ListResourcesResponse : GTLRCollectionObject

/**
 *  A token to request the next page of resources from the 'ListResources'
 *  method. The value of an empty string means that there are no more resources
 *  to return.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of Resourcess.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRConfig_Resource *> *resources;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  A response to a 'ListRevisions' call. Contains a list of Revisions.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "revisions" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRConfig_ListRevisionsResponse : GTLRCollectionObject

/**
 *  A token to request the next page of resources from the 'ListRevisions'
 *  method. The value of an empty string means that there are no more resources
 *  to return.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of Revisions.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRConfig_Revision *> *revisions;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for the `ListTerraformVersions` method.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "terraformVersions" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRConfig_ListTerraformVersionsResponse : GTLRCollectionObject

/**
 *  Token to be supplied to the next ListTerraformVersions request via
 *  `page_token` to obtain the next set of results.
 */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  List of TerraformVersions.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRConfig_TerraformVersion *> *terraformVersions;

/** Unreachable resources, if any. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  A resource that represents a Google Cloud location.
 */
@interface GTLRConfig_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRConfig_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRConfig_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRConfig_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRConfig_Location_Metadata : GTLRObject
@end


/**
 *  A request to lock a deployment passed to a 'LockDeployment' call.
 */
@interface GTLRConfig_LockDeploymentRequest : GTLRObject
@end


/**
 *  Details about the lock which locked the deployment.
 */
@interface GTLRConfig_LockInfo : GTLRObject

/** Time that the lock was taken. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Extra information to store with the lock, provided by the caller. */
@property(nonatomic, copy, nullable) NSString *info;

/**
 *  Unique ID for the lock to be overridden with generation ID in the backend.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lockId;

/** Terraform operation, provided by the caller. */
@property(nonatomic, copy, nullable) NSString *operation;

/** Terraform version */
@property(nonatomic, copy, nullable) NSString *version;

/** user\@hostname when available */
@property(nonatomic, copy, nullable) NSString *who;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRConfig_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRConfig_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRConfig_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRConfig_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRConfig_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRConfig_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRConfig_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. Time when the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. Metadata about the deployment operation state. */
@property(nonatomic, strong, nullable) GTLRConfig_DeploymentOperationMetadata *deploymentMetadata;

/** Output only. Time when the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/** Output only. Metadata about the preview operation state. */
@property(nonatomic, strong, nullable) GTLRConfig_PreviewOperationMetadata *previewMetadata;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have successfully been cancelled have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** ``` { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: -
 *  members: - user:mike\@example.com - group:admins\@example.com -
 *  domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 ``` For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRConfig_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRConfig_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRConfig_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  A preview represents a set of actions Infra Manager would perform to move
 *  the resources towards the desired state as specified in the configuration.
 */
@interface GTLRConfig_Preview : GTLRObject

/**
 *  Optional. Arbitrary key-value metadata storage e.g. to help client tools
 *  identifiy preview during automation. See
 *  https://google.aip.dev/148#annotations for details on format and size
 *  limitations.
 */
@property(nonatomic, strong, nullable) GTLRConfig_Preview_Annotations *annotations;

/**
 *  Optional. User-defined location of Cloud Build logs, artifacts, and in
 *  Google Cloud Storage. Format: `gs://{bucket}/{folder}` A default bucket will
 *  be bootstrapped if the field is not set or empty Default Bucket Format:
 *  `gs://--blueprint-config` Constraints: - The bucket needs to be in the same
 *  project as the deployment - The path cannot be within the path of
 *  `gcs_source` If omitted and deployment resource ref provided has
 *  artifacts_gcs_bucket defined, that artifact bucket is used.
 */
@property(nonatomic, copy, nullable) NSString *artifactsGcsBucket;

/** Output only. Cloud Build instance UUID associated with this preview. */
@property(nonatomic, copy, nullable) NSString *build;

/** Output only. Time the preview was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. Optional deployment reference. If specified, the preview will be
 *  performed using the provided deployment's current state and use any relevant
 *  fields from the deployment unless explicitly specified in the preview create
 *  request.
 */
@property(nonatomic, copy, nullable) NSString *deployment;

/**
 *  Output only. Code describing any errors that may have occurred.
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_Preview_ErrorCode_BucketCreationFailed Cloud Storage
 *        bucket failed for a non-permissions-related issue. (Value:
 *        "BUCKET_CREATION_FAILED")
 *    @arg @c kGTLRConfig_Preview_ErrorCode_BucketCreationPermissionDenied Cloud
 *        Storage bucket failed to create due to a permissions issue. (Value:
 *        "BUCKET_CREATION_PERMISSION_DENIED")
 *    @arg @c kGTLRConfig_Preview_ErrorCode_CloudBuildPermissionDenied Cloud
 *        Build failed due to a permissions issue. (Value:
 *        "CLOUD_BUILD_PERMISSION_DENIED")
 *    @arg @c kGTLRConfig_Preview_ErrorCode_DeploymentLockAcquireFailed
 *        Acquiring lock on provided deployment reference failed. (Value:
 *        "DEPLOYMENT_LOCK_ACQUIRE_FAILED")
 *    @arg @c kGTLRConfig_Preview_ErrorCode_ErrorCodeUnspecified No error code
 *        was specified. (Value: "ERROR_CODE_UNSPECIFIED")
 *    @arg @c kGTLRConfig_Preview_ErrorCode_PreviewBuildApiFailed Preview
 *        encountered an error when trying to access Cloud Build API. (Value:
 *        "PREVIEW_BUILD_API_FAILED")
 *    @arg @c kGTLRConfig_Preview_ErrorCode_PreviewBuildRunFailed Preview
 *        created a build but build failed and logs were generated. (Value:
 *        "PREVIEW_BUILD_RUN_FAILED")
 */
@property(nonatomic, copy, nullable) NSString *errorCode;

/**
 *  Output only. Link to tf-error.ndjson file, which contains the full list of
 *  the errors encountered during a Terraform preview. Format:
 *  `gs://{bucket}/{object}`.
 */
@property(nonatomic, copy, nullable) NSString *errorLogs;

/** Output only. Additional information regarding the current state. */
@property(nonatomic, strong, nullable) GTLRConfig_Status *errorStatus;

/** Optional. User-defined labels for the preview. */
@property(nonatomic, strong, nullable) GTLRConfig_Preview_Labels *labels;

/**
 *  Output only. Location of preview logs in `gs://{bucket}/{object}` format.
 */
@property(nonatomic, copy, nullable) NSString *logs;

/**
 *  Identifier. Resource name of the preview. Resource name can be user provided
 *  or server generated ID if unspecified. Format:
 *  `projects/{project}/locations/{location}/previews/{preview}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. Artifacts from preview. */
@property(nonatomic, strong, nullable) GTLRConfig_PreviewArtifacts *previewArtifacts;

/**
 *  Optional. Current mode of preview.
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_Preview_PreviewMode_Default DEFAULT mode generates an
 *        execution plan for reconciling current resource state into expected
 *        resource state. (Value: "DEFAULT")
 *    @arg @c kGTLRConfig_Preview_PreviewMode_Delete DELETE mode generates as
 *        execution plan for destroying current resources. (Value: "DELETE")
 *    @arg @c kGTLRConfig_Preview_PreviewMode_PreviewModeUnspecified Unspecified
 *        policy, default mode will be used. (Value: "PREVIEW_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *previewMode;

/**
 *  Optional. User-specified Service Account (SA) credentials to be used when
 *  previewing resources. Format:
 *  `projects/{projectID}/serviceAccounts/{serviceAccount}`
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Output only. Current state of the preview.
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_Preview_State_Applying The preview is being applied.
 *        (Value: "APPLYING")
 *    @arg @c kGTLRConfig_Preview_State_Creating The preview is being created.
 *        (Value: "CREATING")
 *    @arg @c kGTLRConfig_Preview_State_Deleted The preview has been deleted.
 *        (Value: "DELETED")
 *    @arg @c kGTLRConfig_Preview_State_Deleting The preview is being deleted.
 *        (Value: "DELETING")
 *    @arg @c kGTLRConfig_Preview_State_Failed The preview has encountered an
 *        unexpected error. (Value: "FAILED")
 *    @arg @c kGTLRConfig_Preview_State_Stale The preview is stale. A preview
 *        can become stale if a revision has been applied after this preview was
 *        created. (Value: "STALE")
 *    @arg @c kGTLRConfig_Preview_State_StateUnspecified The default value. This
 *        value is used if the state is unknown. (Value: "STATE_UNSPECIFIED")
 *    @arg @c kGTLRConfig_Preview_State_Succeeded The preview has succeeded.
 *        (Value: "SUCCEEDED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** The terraform blueprint to preview. */
@property(nonatomic, strong, nullable) GTLRConfig_TerraformBlueprint *terraformBlueprint;

/**
 *  Output only. Summary of errors encountered during Terraform preview. It has
 *  a size limit of 10, i.e. only top 10 errors will be summarized here.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRConfig_TerraformError *> *tfErrors;

/**
 *  Output only. The current Terraform version set on the preview. It is in the
 *  format of "Major.Minor.Patch", for example, "1.3.10".
 */
@property(nonatomic, copy, nullable) NSString *tfVersion;

/**
 *  Optional. The user-specified Terraform version constraint. Example:
 *  "=1.3.10".
 */
@property(nonatomic, copy, nullable) NSString *tfVersionConstraint;

/**
 *  Optional. The user-specified Worker Pool resource in which the Cloud Build
 *  job will execute. Format
 *  projects/{project}/locations/{location}/workerPools/{workerPoolId} If this
 *  field is unspecified, the default Cloud Build worker pool will be used. If
 *  omitted and deployment resource ref provided has worker_pool defined, that
 *  worker pool is used.
 */
@property(nonatomic, copy, nullable) NSString *workerPool;

@end


/**
 *  Optional. Arbitrary key-value metadata storage e.g. to help client tools
 *  identifiy preview during automation. See
 *  https://google.aip.dev/148#annotations for details on format and size
 *  limitations.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRConfig_Preview_Annotations : GTLRObject
@end


/**
 *  Optional. User-defined labels for the preview.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRConfig_Preview_Labels : GTLRObject
@end


/**
 *  Artifacts created by preview.
 */
@interface GTLRConfig_PreviewArtifacts : GTLRObject

/**
 *  Output only. Location of artifacts in Google Cloud Storage. Format:
 *  `gs://{bucket}/{object}`
 */
@property(nonatomic, copy, nullable) NSString *artifacts;

/**
 *  Output only. Location of a blueprint copy and other content in Google Cloud
 *  Storage. Format: `gs://{bucket}/{object}`
 */
@property(nonatomic, copy, nullable) NSString *content;

@end


/**
 *  Ephemeral metadata content describing the state of a preview operation.
 */
@interface GTLRConfig_PreviewOperationMetadata : GTLRObject

/** Output only. Cloud Build instance UUID associated with this preview. */
@property(nonatomic, copy, nullable) NSString *build;

/**
 *  Output only. Location of preview logs in `gs://{bucket}/{object}` format.
 */
@property(nonatomic, copy, nullable) NSString *logs;

/** Artifacts from preview. */
@property(nonatomic, strong, nullable) GTLRConfig_PreviewArtifacts *previewArtifacts;

/**
 *  The current step the preview operation is running.
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_PreviewOperationMetadata_Step_DownloadingBlueprint
 *        Downloading the blueprint onto the Google Cloud Storage bucket.
 *        (Value: "DOWNLOADING_BLUEPRINT")
 *    @arg @c kGTLRConfig_PreviewOperationMetadata_Step_Failed Operation failed.
 *        (Value: "FAILED")
 *    @arg @c kGTLRConfig_PreviewOperationMetadata_Step_FetchingDeployment
 *        Fetching a deployment. (Value: "FETCHING_DEPLOYMENT")
 *    @arg @c kGTLRConfig_PreviewOperationMetadata_Step_LockingDeployment
 *        Locking a deployment. (Value: "LOCKING_DEPLOYMENT")
 *    @arg @c kGTLRConfig_PreviewOperationMetadata_Step_PreparingStorageBucket
 *        Infra Manager is creating a Google Cloud Storage bucket to store
 *        artifacts and metadata about the preview. (Value:
 *        "PREPARING_STORAGE_BUCKET")
 *    @arg @c kGTLRConfig_PreviewOperationMetadata_Step_PreviewStepUnspecified
 *        Unspecified preview step. (Value: "PREVIEW_STEP_UNSPECIFIED")
 *    @arg @c kGTLRConfig_PreviewOperationMetadata_Step_RunningTfInit
 *        Initializing Terraform using `terraform init`. (Value:
 *        "RUNNING_TF_INIT")
 *    @arg @c kGTLRConfig_PreviewOperationMetadata_Step_RunningTfPlan Running
 *        `terraform plan`. (Value: "RUNNING_TF_PLAN")
 *    @arg @c kGTLRConfig_PreviewOperationMetadata_Step_Succeeded Operation was
 *        successful. (Value: "SUCCEEDED")
 *    @arg @c kGTLRConfig_PreviewOperationMetadata_Step_UnlockingDeployment
 *        Unlocking a deployment. (Value: "UNLOCKING_DEPLOYMENT")
 *    @arg @c kGTLRConfig_PreviewOperationMetadata_Step_ValidatingRepository
 *        Validating the provided repository. (Value: "VALIDATING_REPOSITORY")
 */
@property(nonatomic, copy, nullable) NSString *step;

@end


/**
 *  Contains a signed Cloud Storage URLs.
 */
@interface GTLRConfig_PreviewResult : GTLRObject

/** Output only. Plan binary signed URL */
@property(nonatomic, copy, nullable) NSString *binarySignedUri;

/** Output only. Plan JSON signed URL */
@property(nonatomic, copy, nullable) NSString *jsonSignedUri;

@end


/**
 *  Resource represents a Google Cloud Platform resource actuated by IM.
 *  Resources are child resources of Revisions.
 */
@interface GTLRConfig_Resource : GTLRObject

/**
 *  Output only. Map of Cloud Asset Inventory (CAI) type to CAI info (e.g. CAI
 *  ID). CAI type format follows
 *  https://cloud.google.com/asset-inventory/docs/supported-asset-types
 */
@property(nonatomic, strong, nullable) GTLRConfig_Resource_CaiAssets *caiAssets;

/**
 *  Output only. Intent of the resource.
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_Resource_Intent_Create Infra Manager will create this
 *        Resource. (Value: "CREATE")
 *    @arg @c kGTLRConfig_Resource_Intent_Delete Infra Manager will delete this
 *        Resource. (Value: "DELETE")
 *    @arg @c kGTLRConfig_Resource_Intent_IntentUnspecified The default value.
 *        This value is used if the intent is omitted. (Value:
 *        "INTENT_UNSPECIFIED")
 *    @arg @c kGTLRConfig_Resource_Intent_Recreate Infra Manager will destroy
 *        and recreate this Resource. (Value: "RECREATE")
 *    @arg @c kGTLRConfig_Resource_Intent_Unchanged Infra Manager will leave
 *        this Resource untouched. (Value: "UNCHANGED")
 *    @arg @c kGTLRConfig_Resource_Intent_Update Infra Manager will update this
 *        Resource. (Value: "UPDATE")
 */
@property(nonatomic, copy, nullable) NSString *intent;

/**
 *  Output only. Resource name. Format:
 *  `projects/{project}/locations/{location}/deployments/{deployment}/revisions/{revision}/resources/{resource}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Current state of the resource.
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_Resource_State_Failed Resource failed to reconcile.
 *        (Value: "FAILED")
 *    @arg @c kGTLRConfig_Resource_State_InProgress Resource is actively
 *        reconciling into the intended state. (Value: "IN_PROGRESS")
 *    @arg @c kGTLRConfig_Resource_State_Planned Resource has been planned for
 *        reconcile. (Value: "PLANNED")
 *    @arg @c kGTLRConfig_Resource_State_Reconciled Resource has reconciled to
 *        intended state. (Value: "RECONCILED")
 *    @arg @c kGTLRConfig_Resource_State_StateUnspecified The default value.
 *        This value is used if the state is omitted. (Value:
 *        "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/**
 *  Output only. Terraform-specific info if this resource was created using
 *  Terraform.
 */
@property(nonatomic, strong, nullable) GTLRConfig_ResourceTerraformInfo *terraformInfo;

@end


/**
 *  Output only. Map of Cloud Asset Inventory (CAI) type to CAI info (e.g. CAI
 *  ID). CAI type format follows
 *  https://cloud.google.com/asset-inventory/docs/supported-asset-types
 *
 *  @note This class is documented as having more properties of
 *        GTLRConfig_ResourceCAIInfo. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRConfig_Resource_CaiAssets : GTLRObject
@end


/**
 *  CAI info of a Resource.
 */
@interface GTLRConfig_ResourceCAIInfo : GTLRObject

/**
 *  CAI resource name in the format following
 *  https://cloud.google.com/apis/design/resource_names#full_resource_name
 */
@property(nonatomic, copy, nullable) NSString *fullResourceName;

@end


/**
 *  Terraform info of a Resource.
 */
@interface GTLRConfig_ResourceTerraformInfo : GTLRObject

/**
 *  TF resource address that uniquely identifies this resource within this
 *  deployment.
 */
@property(nonatomic, copy, nullable) NSString *address;

/**
 *  ID attribute of the TF resource
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 */
@property(nonatomic, copy, nullable) NSString *identifier;

/** TF resource type */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  A child resource of a Deployment generated by a 'CreateDeployment' or
 *  'UpdateDeployment' call. Each Revision contains metadata pertaining to a
 *  snapshot of a particular Deployment.
 */
@interface GTLRConfig_Revision : GTLRObject

/**
 *  Output only. The action which created this revision
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_Revision_Action_ActionUnspecified The default value.
 *        This value is used if the action is omitted. (Value:
 *        "ACTION_UNSPECIFIED")
 *    @arg @c kGTLRConfig_Revision_Action_Create The revision was generated by
 *        creating a deployment. (Value: "CREATE")
 *    @arg @c kGTLRConfig_Revision_Action_Delete The revision was deleted.
 *        (Value: "DELETE")
 *    @arg @c kGTLRConfig_Revision_Action_Update The revision was generated by
 *        updating a deployment. (Value: "UPDATE")
 */
@property(nonatomic, copy, nullable) NSString *action;

/** Output only. Outputs and artifacts from applying a deployment. */
@property(nonatomic, strong, nullable) GTLRConfig_ApplyResults *applyResults;

/** Output only. Cloud Build instance UUID associated with this revision. */
@property(nonatomic, copy, nullable) NSString *build;

/** Output only. Time when the revision was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. Code describing any errors that may have occurred.
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_Revision_ErrorCode_ApplyBuildApiFailed Cloud Build job
 *        associated with creating or updating a deployment could not be
 *        started. (Value: "APPLY_BUILD_API_FAILED")
 *    @arg @c kGTLRConfig_Revision_ErrorCode_ApplyBuildRunFailed Cloud Build job
 *        associated with creating or updating a deployment was started but
 *        failed. (Value: "APPLY_BUILD_RUN_FAILED")
 *    @arg @c kGTLRConfig_Revision_ErrorCode_CloudBuildPermissionDenied Cloud
 *        Build failed due to a permission issue. (Value:
 *        "CLOUD_BUILD_PERMISSION_DENIED")
 *    @arg @c kGTLRConfig_Revision_ErrorCode_ErrorCodeUnspecified No error code
 *        was specified. (Value: "ERROR_CODE_UNSPECIFIED")
 *    @arg @c kGTLRConfig_Revision_ErrorCode_QuotaValidationFailed quota
 *        validation failed for one or more resources in terraform configuration
 *        files. (Value: "QUOTA_VALIDATION_FAILED")
 */
@property(nonatomic, copy, nullable) NSString *errorCode;

/**
 *  Output only. Location of Terraform error logs in Google Cloud Storage.
 *  Format: `gs://{bucket}/{object}`.
 */
@property(nonatomic, copy, nullable) NSString *errorLogs;

/**
 *  Output only. By default, Infra Manager will return a failure when Terraform
 *  encounters a 409 code (resource conflict error) during actuation. If this
 *  flag is set to true, Infra Manager will instead attempt to automatically
 *  import the resource into the Terraform state (for supported resource types)
 *  and continue actuation. Not all resource types are supported, refer to
 *  documentation.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *importExistingResources;

/**
 *  Output only. Location of Revision operation logs in `gs://{bucket}/{object}`
 *  format.
 */
@property(nonatomic, copy, nullable) NSString *logs;

/**
 *  Revision name. Format:
 *  `projects/{project}/locations/{location}/deployments/{deployment}/
 *  revisions/{revision}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. Input to control quota checks for resources in terraform
 *  configuration files. There are limited resources on which quota validation
 *  applies.
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_Revision_QuotaValidation_Enabled Enable computing
 *        quotas for resources in terraform configuration files to get
 *        visibility on resources with insufficient quotas. (Value: "ENABLED")
 *    @arg @c kGTLRConfig_Revision_QuotaValidation_Enforced Enforce quota checks
 *        so deployment fails if there isn't sufficient quotas available to
 *        deploy resources in terraform configuration files. (Value: "ENFORCED")
 *    @arg @c kGTLRConfig_Revision_QuotaValidation_QuotaValidationUnspecified
 *        The default value. QuotaValidation on terraform configuration files
 *        will be disabled in this case. (Value: "QUOTA_VALIDATION_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *quotaValidation;

/**
 *  Output only. Cloud Storage path containing quota validation results. This
 *  field is set when a user sets Deployment.quota_validation field to ENABLED
 *  or ENFORCED. Format: `gs://{bucket}/{object}`.
 */
@property(nonatomic, copy, nullable) NSString *quotaValidationResults;

/**
 *  Output only. User-specified Service Account (SA) to be used as credential to
 *  manage resources. Format:
 *  `projects/{projectID}/serviceAccounts/{serviceAccount}`
 */
@property(nonatomic, copy, nullable) NSString *serviceAccount;

/**
 *  Output only. Current state of the revision.
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_Revision_State_Applied The revision was applied
 *        successfully. (Value: "APPLIED")
 *    @arg @c kGTLRConfig_Revision_State_Applying The revision is being applied.
 *        (Value: "APPLYING")
 *    @arg @c kGTLRConfig_Revision_State_Failed The revision could not be
 *        applied successfully. (Value: "FAILED")
 *    @arg @c kGTLRConfig_Revision_State_StateUnspecified The default value.
 *        This value is used if the state is omitted. (Value:
 *        "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. Additional info regarding the current state. */
@property(nonatomic, copy, nullable) NSString *stateDetail;

/**
 *  Output only. A blueprint described using Terraform's HashiCorp Configuration
 *  Language as a root module.
 */
@property(nonatomic, strong, nullable) GTLRConfig_TerraformBlueprint *terraformBlueprint;

/**
 *  Output only. Errors encountered when creating or updating this deployment.
 *  Errors are truncated to 10 entries, see `delete_results` and `error_logs`
 *  for full details.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRConfig_TerraformError *> *tfErrors;

/**
 *  Output only. The version of Terraform used to create the Revision. It is in
 *  the format of "Major.Minor.Patch", for example, "1.3.10".
 */
@property(nonatomic, copy, nullable) NSString *tfVersion;

/**
 *  Output only. The user-specified Terraform version constraint. Example:
 *  "=1.3.10".
 */
@property(nonatomic, copy, nullable) NSString *tfVersionConstraint;

/** Output only. Time when the revision was last modified. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/**
 *  Output only. The user-specified Cloud Build worker pool resource in which
 *  the Cloud Build job will execute. Format:
 *  `projects/{project}/locations/{location}/workerPools/{workerPoolId}`. If
 *  this field is unspecified, the default Cloud Build worker pool will be used.
 */
@property(nonatomic, copy, nullable) NSString *workerPool;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRConfig_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRConfig_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  Contains info about a Terraform state file
 */
@interface GTLRConfig_Statefile : GTLRObject

/**
 *  Output only. Cloud Storage signed URI used for downloading or uploading the
 *  state file.
 */
@property(nonatomic, copy, nullable) NSString *signedUri;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRConfig_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRConfig_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRConfig_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRConfig_Status_Details_Item : GTLRObject
@end


/**
 *  TerraformBlueprint describes the source of a Terraform root module which
 *  describes the resources and configs to be deployed.
 */
@interface GTLRConfig_TerraformBlueprint : GTLRObject

/**
 *  Required. URI of an object in Google Cloud Storage. Format:
 *  `gs://{bucket}/{object}` URI may also specify an object version for zipped
 *  objects. Format: `gs://{bucket}/{object}#{version}`
 */
@property(nonatomic, copy, nullable) NSString *gcsSource;

/** Required. URI of a public Git repo. */
@property(nonatomic, strong, nullable) GTLRConfig_GitSource *gitSource;

/** Input variable values for the Terraform blueprint. */
@property(nonatomic, strong, nullable) GTLRConfig_TerraformBlueprint_InputValues *inputValues;

@end


/**
 *  Input variable values for the Terraform blueprint.
 *
 *  @note This class is documented as having more properties of
 *        GTLRConfig_TerraformVariable. Use @c -additionalJSONKeys and @c
 *        -additionalPropertyForName: to get the list of properties and then
 *        fetch them; or @c -additionalProperties to fetch them all at once.
 */
@interface GTLRConfig_TerraformBlueprint_InputValues : GTLRObject
@end


/**
 *  Errors encountered during actuation using Terraform
 */
@interface GTLRConfig_TerraformError : GTLRObject

/** Original error response from underlying Google API, if available. */
@property(nonatomic, strong, nullable) GTLRConfig_Status *error;

/** A human-readable error description. */
@property(nonatomic, copy, nullable) NSString *errorDescription;

/**
 *  HTTP response code returned from Google Cloud Platform APIs when Terraform
 *  fails to provision the resource. If unset or 0, no HTTP response code was
 *  returned by Terraform.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *httpResponseCode;

/**
 *  Address of the resource associated with the error, e.g.
 *  `google_compute_network.vpc_network`.
 */
@property(nonatomic, copy, nullable) NSString *resourceAddress;

@end


/**
 *  Describes a Terraform output.
 */
@interface GTLRConfig_TerraformOutput : GTLRObject

/**
 *  Identifies whether Terraform has set this output as a potential sensitive
 *  value.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *sensitive;

/**
 *  Value of output.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id value;

@end


/**
 *  A Terraform input variable.
 */
@interface GTLRConfig_TerraformVariable : GTLRObject

/**
 *  Input variable value.
 *
 *  Can be any valid JSON type.
 */
@property(nonatomic, strong, nullable) id inputValue;

@end


/**
 *  A TerraformVersion represents the support state the corresponding Terraform
 *  version.
 */
@interface GTLRConfig_TerraformVersion : GTLRObject

/** Output only. When the version is deprecated. */
@property(nonatomic, strong, nullable) GTLRDateTime *deprecateTime;

/**
 *  Identifier. The version name is in the format:
 *  'projects/{project_id}/locations/{location}/terraformVersions/{terraform_version}'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/** Output only. When the version is obsolete. */
@property(nonatomic, strong, nullable) GTLRDateTime *obsoleteTime;

/**
 *  Output only. The state of the version, ACTIVE, DEPRECATED or OBSOLETE.
 *
 *  Likely values:
 *    @arg @c kGTLRConfig_TerraformVersion_State_Active The version is actively
 *        supported. (Value: "ACTIVE")
 *    @arg @c kGTLRConfig_TerraformVersion_State_Deprecated The version is
 *        deprecated. (Value: "DEPRECATED")
 *    @arg @c kGTLRConfig_TerraformVersion_State_Obsolete The version is
 *        obsolete. (Value: "OBSOLETE")
 *    @arg @c kGTLRConfig_TerraformVersion_State_StateUnspecified The default
 *        value. This value is used if the state is omitted. (Value:
 *        "STATE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *state;

/** Output only. When the version is supported. */
@property(nonatomic, strong, nullable) GTLRDateTime *supportTime;

@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRConfig_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRConfig_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  A request to unlock a state file passed to a 'UnlockDeployment' call.
 */
@interface GTLRConfig_UnlockDeploymentRequest : GTLRObject

/**
 *  Required. Lock ID of the lock file to be unlocked.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *lockId;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
