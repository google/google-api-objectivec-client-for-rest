// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Infrastructure Manager API (config/v1)
// Description:
//   Creates and manages Google Cloud Platform resources and infrastructure.
// Documentation:
//   https://cloud.google.com/infrastructure-manager/docs

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRConfigObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// deletePolicy

/**
 *  Abandons resources and only deletes the deployment and its metadata.
 *
 *  Value: "ABANDON"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfigDeletePolicyAbandon;
/**
 *  Deletes resources actuated by the deployment.
 *
 *  Value: "DELETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfigDeletePolicyDelete;
/**
 *  Unspecified policy, resources will be deleted.
 *
 *  Value: "DELETE_POLICY_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRConfigDeletePolicyDeletePolicyUnspecified;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other Config query classes.
 */
@interface GTLRConfigQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Creates a Deployment.
 *
 *  Method: config.projects.locations.deployments.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsCreate : GTLRConfigQuery

/** Required. The Deployment ID. */
@property(nonatomic, copy, nullable) NSString *deploymentId;

/**
 *  Required. The parent in whose context the Deployment is created. The parent
 *  value is in the format: 'projects/{project_id}/locations/{location}'.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRConfig_Operation.
 *
 *  Creates a Deployment.
 *
 *  @param object The @c GTLRConfig_Deployment to include in the query.
 *  @param parent Required. The parent in whose context the Deployment is
 *    created. The parent value is in the format:
 *    'projects/{project_id}/locations/{location}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsCreate
 */
+ (instancetype)queryWithObject:(GTLRConfig_Deployment *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Deployment.
 *
 *  Method: config.projects.locations.deployments.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsDelete : GTLRConfigQuery

/**
 *  Optional. Policy on how resources actuated by the deployment should be
 *  deleted. If unspecified, the default behavior is to delete the underlying
 *  resources.
 *
 *  Likely values:
 *    @arg @c kGTLRConfigDeletePolicyDeletePolicyUnspecified Unspecified policy,
 *        resources will be deleted. (Value: "DELETE_POLICY_UNSPECIFIED")
 *    @arg @c kGTLRConfigDeletePolicyDelete Deletes resources actuated by the
 *        deployment. (Value: "DELETE")
 *    @arg @c kGTLRConfigDeletePolicyAbandon Abandons resources and only deletes
 *        the deployment and its metadata. (Value: "ABANDON")
 */
@property(nonatomic, copy, nullable) NSString *deletePolicy;

/**
 *  Optional. If set to true, any revisions for this deployment will also be
 *  deleted. (Otherwise, the request will only work if the deployment has no
 *  revisions.)
 */
@property(nonatomic, assign) BOOL force;

/**
 *  Required. The name of the Deployment in the format:
 *  'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRConfig_Operation.
 *
 *  Deletes a Deployment.
 *
 *  @param name Required. The name of the Deployment in the format:
 *    'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Deletes Terraform state file in a given deployment.
 *
 *  Method: config.projects.locations.deployments.deleteState
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsDeleteState : GTLRConfigQuery

/**
 *  Required. The name of the deployment in the format:
 *  'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRConfig_Empty.
 *
 *  Deletes Terraform state file in a given deployment.
 *
 *  @param object The @c GTLRConfig_DeleteStatefileRequest to include in the
 *    query.
 *  @param name Required. The name of the deployment in the format:
 *    'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsDeleteState
 */
+ (instancetype)queryWithObject:(GTLRConfig_DeleteStatefileRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Exports the lock info on a locked deployment.
 *
 *  Method: config.projects.locations.deployments.exportLock
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsExportLock : GTLRConfigQuery

/**
 *  Required. The name of the deployment in the format:
 *  'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRConfig_LockInfo.
 *
 *  Exports the lock info on a locked deployment.
 *
 *  @param name Required. The name of the deployment in the format:
 *    'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsExportLock
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Exports Terraform state file from a given deployment.
 *
 *  Method: config.projects.locations.deployments.exportState
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsExportState : GTLRConfigQuery

/**
 *  Required. The parent in whose context the statefile is listed. The parent
 *  value is in the format:
 *  'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRConfig_Statefile.
 *
 *  Exports Terraform state file from a given deployment.
 *
 *  @param object The @c GTLRConfig_ExportDeploymentStatefileRequest to include
 *    in the query.
 *  @param parent Required. The parent in whose context the statefile is listed.
 *    The parent value is in the format:
 *    'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsExportState
 */
+ (instancetype)queryWithObject:(GTLRConfig_ExportDeploymentStatefileRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets details about a Deployment.
 *
 *  Method: config.projects.locations.deployments.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsGet : GTLRConfigQuery

/**
 *  Required. The name of the deployment. Format:
 *  'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRConfig_Deployment.
 *
 *  Gets details about a Deployment.
 *
 *  @param name Required. The name of the deployment. Format:
 *    'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  Method: config.projects.locations.deployments.getIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsGetIamPolicy : GTLRConfigQuery

/**
 *  Optional. The maximum policy version that will be used to format the policy.
 *  Valid values are 0, 1, and 3. Requests specifying an invalid value will be
 *  rejected. Requests for policies with any conditional role bindings must
 *  specify version 3. Policies with no conditional role bindings may specify
 *  any valid value or leave the field unset. The policy in the response might
 *  use the policy version that you specified, or it might use a lower policy
 *  version. For example, if you specify version 3, but the policy has no
 *  conditional role bindings, the response uses version 1. To learn which
 *  resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, assign) NSInteger optionsRequestedPolicyVersion;

/**
 *  REQUIRED: The resource for which the policy is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRConfig_Policy.
 *
 *  Gets the access control policy for a resource. Returns an empty policy if
 *  the resource exists and does not have a policy set.
 *
 *  @param resource REQUIRED: The resource for which the policy is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsGetIamPolicy
 */
+ (instancetype)queryWithResource:(NSString *)resource;

@end

/**
 *  Imports Terraform state file in a given deployment. The state file does not
 *  take effect until the Deployment has been unlocked.
 *
 *  Method: config.projects.locations.deployments.importState
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsImportState : GTLRConfigQuery

/**
 *  Required. The parent in whose context the statefile is listed. The parent
 *  value is in the format:
 *  'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRConfig_Statefile.
 *
 *  Imports Terraform state file in a given deployment. The state file does not
 *  take effect until the Deployment has been unlocked.
 *
 *  @param object The @c GTLRConfig_ImportStatefileRequest to include in the
 *    query.
 *  @param parent Required. The parent in whose context the statefile is listed.
 *    The parent value is in the format:
 *    'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsImportState
 */
+ (instancetype)queryWithObject:(GTLRConfig_ImportStatefileRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Lists Deployments in a given project and location.
 *
 *  Method: config.projects.locations.deployments.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsList : GTLRConfigQuery

/**
 *  Lists the Deployments that match the filter expression. A filter expression
 *  filters the resources listed in the response. The expression must be of the
 *  form '{field} {operator} {value}' where operators: '<', '>', '<=', '>=',
 *  '!=', '=', ':' are supported (colon ':' represents a HAS operator which is
 *  roughly synonymous with equality). {field} can refer to a proto or JSON
 *  field, or a synthetic field. Field names can be camelCase or snake_case.
 *  Examples: - Filter by name: name =
 *  "projects/foo/locations/us-central1/deployments/bar - Filter by labels: -
 *  Resources that have a key called 'foo' labels.foo:* - Resources that have a
 *  key called 'foo' whose value is 'bar' labels.foo = bar - Filter by state: -
 *  Deployments in CREATING state. state=CREATING
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Field to use to sort the list. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  When requesting a page of resources, 'page_size' specifies number of
 *  resources to return. If unspecified, at most 500 will be returned. The
 *  maximum value is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned by previous call to 'ListDeployments' which specifies the
 *  position in the list from where to continue listing the resources.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent in whose context the Deployments are listed. The parent
 *  value is in the format: 'projects/{project_id}/locations/{location}'.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRConfig_ListDeploymentsResponse.
 *
 *  Lists Deployments in a given project and location.
 *
 *  @param parent Required. The parent in whose context the Deployments are
 *    listed. The parent value is in the format:
 *    'projects/{project_id}/locations/{location}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Locks a deployment.
 *
 *  Method: config.projects.locations.deployments.lock
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsLock : GTLRConfigQuery

/**
 *  Required. The name of the deployment in the format:
 *  'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRConfig_Operation.
 *
 *  Locks a deployment.
 *
 *  @param object The @c GTLRConfig_LockDeploymentRequest to include in the
 *    query.
 *  @param name Required. The name of the deployment in the format:
 *    'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsLock
 */
+ (instancetype)queryWithObject:(GTLRConfig_LockDeploymentRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Updates a Deployment.
 *
 *  Method: config.projects.locations.deployments.patch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsPatch : GTLRConfigQuery

/**
 *  Resource name of the deployment. Format:
 *  `projects/{project}/locations/{location}/deployments/{deployment}`
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Optional. Field mask used to specify the fields to be overwritten in the
 *  Deployment resource by the update. The fields specified in the update_mask
 *  are relative to the resource, not the full request. A field will be
 *  overwritten if it is in the mask. If the user does not provide a mask then
 *  all fields will be overwritten.
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

/**
 *  Fetches a @c GTLRConfig_Operation.
 *
 *  Updates a Deployment.
 *
 *  @param object The @c GTLRConfig_Deployment to include in the query.
 *  @param name Resource name of the deployment. Format:
 *    `projects/{project}/locations/{location}/deployments/{deployment}`
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsPatch
 */
+ (instancetype)queryWithObject:(GTLRConfig_Deployment *)object
                           name:(NSString *)name;

@end

/**
 *  Exports Terraform state file from a given revision.
 *
 *  Method: config.projects.locations.deployments.revisions.exportState
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsExportState : GTLRConfigQuery

/**
 *  Required. The parent in whose context the statefile is listed. The parent
 *  value is in the format:
 *  'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRConfig_Statefile.
 *
 *  Exports Terraform state file from a given revision.
 *
 *  @param object The @c GTLRConfig_ExportRevisionStatefileRequest to include in
 *    the query.
 *  @param parent Required. The parent in whose context the statefile is listed.
 *    The parent value is in the format:
 *    'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsExportState
 */
+ (instancetype)queryWithObject:(GTLRConfig_ExportRevisionStatefileRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets details about a Revision.
 *
 *  Method: config.projects.locations.deployments.revisions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsGet : GTLRConfigQuery

/**
 *  Required. The name of the Revision in the format:
 *  'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRConfig_Revision.
 *
 *  Gets details about a Revision.
 *
 *  @param name Required. The name of the Revision in the format:
 *    'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Revisions of a deployment.
 *
 *  Method: config.projects.locations.deployments.revisions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsList : GTLRConfigQuery

/**
 *  Lists the Revisions that match the filter expression. A filter expression
 *  filters the resources listed in the response. The expression must be of the
 *  form '{field} {operator} {value}' where operators: '<', '>', '<=', '>=',
 *  '!=', '=', ':' are supported (colon ':' represents a HAS operator which is
 *  roughly synonymous with equality). {field} can refer to a proto or JSON
 *  field, or a synthetic field. Field names can be camelCase or snake_case.
 *  Examples: - Filter by name: name =
 *  "projects/foo/locations/us-central1/deployments/dep/revisions/bar - Filter
 *  by labels: - Resources that have a key called 'foo' labels.foo:* - Resources
 *  that have a key called 'foo' whose value is 'bar' labels.foo = bar - Filter
 *  by state: - Revisions in CREATING state. state=CREATING
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Field to use to sort the list. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  When requesting a page of resources, `page_size` specifies number of
 *  resources to return. If unspecified, at most 500 will be returned. The
 *  maximum value is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned by previous call to 'ListRevisions' which specifies the
 *  position in the list from where to continue listing the resources.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent in whose context the Revisions are listed. The parent
 *  value is in the format:
 *  'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRConfig_ListRevisionsResponse.
 *
 *  Lists Revisions of a deployment.
 *
 *  @param parent Required. The parent in whose context the Revisions are
 *    listed. The parent value is in the format:
 *    'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets details about a Resource deployed by Infra Manager.
 *
 *  Method: config.projects.locations.deployments.revisions.resources.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsResourcesGet : GTLRConfigQuery

/**
 *  Required. The name of the Resource in the format:
 *  'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}/resource/{resource}'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRConfig_Resource.
 *
 *  Gets details about a Resource deployed by Infra Manager.
 *
 *  @param name Required. The name of the Resource in the format:
 *    'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}/resource/{resource}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsResourcesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Resources in a given revision.
 *
 *  Method: config.projects.locations.deployments.revisions.resources.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsResourcesList : GTLRConfigQuery

/**
 *  Lists the Resources that match the filter expression. A filter expression
 *  filters the resources listed in the response. The expression must be of the
 *  form '{field} {operator} {value}' where operators: '<', '>', '<=', '>=',
 *  '!=', '=', ':' are supported (colon ':' represents a HAS operator which is
 *  roughly synonymous with equality). {field} can refer to a proto or JSON
 *  field, or a synthetic field. Field names can be camelCase or snake_case.
 *  Examples: - Filter by name: name =
 *  "projects/foo/locations/us-central1/deployments/dep/revisions/bar/resources/baz
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Field to use to sort the list. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  When requesting a page of resources, 'page_size' specifies number of
 *  resources to return. If unspecified, at most 500 will be returned. The
 *  maximum value is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Token returned by previous call to 'ListResources' which specifies the
 *  position in the list from where to continue listing the resources.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent in whose context the Resources are listed. The parent
 *  value is in the format:
 *  'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRConfig_ListResourcesResponse.
 *
 *  Lists Resources in a given revision.
 *
 *  @param parent Required. The parent in whose context the Resources are
 *    listed. The parent value is in the format:
 *    'projects/{project_id}/locations/{location}/deployments/{deployment}/revisions/{revision}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsResourcesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  Method: config.projects.locations.deployments.setIamPolicy
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsSetIamPolicy : GTLRConfigQuery

/**
 *  REQUIRED: The resource for which the policy is being specified. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRConfig_Policy.
 *
 *  Sets the access control policy on the specified resource. Replaces any
 *  existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and
 *  `PERMISSION_DENIED` errors.
 *
 *  @param object The @c GTLRConfig_SetIamPolicyRequest to include in the query.
 *  @param resource REQUIRED: The resource for which the policy is being
 *    specified. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsSetIamPolicy
 */
+ (instancetype)queryWithObject:(GTLRConfig_SetIamPolicyRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  Method: config.projects.locations.deployments.testIamPermissions
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsTestIamPermissions : GTLRConfigQuery

/**
 *  REQUIRED: The resource for which the policy detail is being requested. See
 *  [Resource names](https://cloud.google.com/apis/design/resource_names) for
 *  the appropriate value for this field.
 */
@property(nonatomic, copy, nullable) NSString *resource;

/**
 *  Fetches a @c GTLRConfig_TestIamPermissionsResponse.
 *
 *  Returns permissions that a caller has on the specified resource. If the
 *  resource does not exist, this will return an empty set of permissions, not a
 *  `NOT_FOUND` error. Note: This operation is designed to be used for building
 *  permission-aware UIs and command-line tools, not for authorization checking.
 *  This operation may "fail open" without warning.
 *
 *  @param object The @c GTLRConfig_TestIamPermissionsRequest to include in the
 *    query.
 *  @param resource REQUIRED: The resource for which the policy detail is being
 *    requested. See [Resource
 *    names](https://cloud.google.com/apis/design/resource_names) for the
 *    appropriate value for this field.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsTestIamPermissions
 */
+ (instancetype)queryWithObject:(GTLRConfig_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource;

@end

/**
 *  Unlocks a locked deployment.
 *
 *  Method: config.projects.locations.deployments.unlock
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsDeploymentsUnlock : GTLRConfigQuery

/**
 *  Required. The name of the deployment in the format:
 *  'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRConfig_Operation.
 *
 *  Unlocks a locked deployment.
 *
 *  @param object The @c GTLRConfig_UnlockDeploymentRequest to include in the
 *    query.
 *  @param name Required. The name of the deployment in the format:
 *    'projects/{project_id}/locations/{location}/deployments/{deployment}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsDeploymentsUnlock
 */
+ (instancetype)queryWithObject:(GTLRConfig_UnlockDeploymentRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Gets information about a location.
 *
 *  Method: config.projects.locations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsGet : GTLRConfigQuery

/** Resource name for the location. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRConfig_Location.
 *
 *  Gets information about a location.
 *
 *  @param name Resource name for the location.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists information about the supported locations for this service.
 *
 *  Method: config.projects.locations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsList : GTLRConfigQuery

/**
 *  A filter to narrow down results to a preferred subset. The filtering
 *  language accepts strings like `"displayName=tokyo"`, and is documented in
 *  more detail in [AIP-160](https://google.aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The resource that owns the locations collection, if applicable. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The maximum number of results to return. If not set, the service selects a
 *  default.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  A page token received from the `next_page_token` field in the response. Send
 *  that page token to receive the subsequent page.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRConfig_ListLocationsResponse.
 *
 *  Lists information about the supported locations for this service.
 *
 *  @param name The resource that owns the locations collection, if applicable.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Method: config.projects.locations.operations.cancel
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsOperationsCancel : GTLRConfigQuery

/** The name of the operation resource to be cancelled. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRConfig_Empty.
 *
 *  Starts asynchronous cancellation on a long-running operation. The server
 *  makes a best effort to cancel the operation, but success is not guaranteed.
 *  If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or
 *  other methods to check whether the cancellation succeeded or whether the
 *  operation completed despite cancellation. On successful cancellation, the
 *  operation is not deleted; instead, it becomes an operation with an
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  @param object The @c GTLRConfig_CancelOperationRequest to include in the
 *    query.
 *  @param name The name of the operation resource to be cancelled.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsOperationsCancel
 */
+ (instancetype)queryWithObject:(GTLRConfig_CancelOperationRequest *)object
                           name:(NSString *)name;

@end

/**
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  Method: config.projects.locations.operations.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsOperationsDelete : GTLRConfigQuery

/** The name of the operation resource to be deleted. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRConfig_Empty.
 *
 *  Deletes a long-running operation. This method indicates that the client is
 *  no longer interested in the operation result. It does not cancel the
 *  operation. If the server doesn't support this method, it returns
 *  `google.rpc.Code.UNIMPLEMENTED`.
 *
 *  @param name The name of the operation resource to be deleted.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsOperationsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  Method: config.projects.locations.operations.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsOperationsGet : GTLRConfigQuery

/** The name of the operation resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRConfig_Operation.
 *
 *  Gets the latest state of a long-running operation. Clients can use this
 *  method to poll the operation result at intervals as recommended by the API
 *  service.
 *
 *  @param name The name of the operation resource.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsOperationsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  Method: config.projects.locations.operations.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsOperationsList : GTLRConfigQuery

/** The standard list filter. */
@property(nonatomic, copy, nullable) NSString *filter;

/** The name of the operation's parent resource. */
@property(nonatomic, copy, nullable) NSString *name;

/** The standard list page size. */
@property(nonatomic, assign) NSInteger pageSize;

/** The standard list page token. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRConfig_ListOperationsResponse.
 *
 *  Lists operations that match the specified filter in the request. If the
 *  server doesn't support this method, it returns `UNIMPLEMENTED`.
 *
 *  @param name The name of the operation's parent resource.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsOperationsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Creates a Preview.
 *
 *  Method: config.projects.locations.previews.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsPreviewsCreate : GTLRConfigQuery

/**
 *  Required. The parent in whose context the Preview is created. The parent
 *  value is in the format: 'projects/{project_id}/locations/{location}'.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/** Optional. The preview ID. */
@property(nonatomic, copy, nullable) NSString *previewId;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes since the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRConfig_Operation.
 *
 *  Creates a Preview.
 *
 *  @param object The @c GTLRConfig_Preview to include in the query.
 *  @param parent Required. The parent in whose context the Preview is created.
 *    The parent value is in the format:
 *    'projects/{project_id}/locations/{location}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsPreviewsCreate
 */
+ (instancetype)queryWithObject:(GTLRConfig_Preview *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes a Preview.
 *
 *  Method: config.projects.locations.previews.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsPreviewsDelete : GTLRConfigQuery

/**
 *  Required. The name of the Preview in the format:
 *  'projects/{project_id}/locations/{location}/previews/{preview}'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Optional. An optional request ID to identify requests. Specify a unique
 *  request ID so that if you must retry your request, the server will know to
 *  ignore the request if it has already been completed. The server will
 *  guarantee that for at least 60 minutes after the first request. For example,
 *  consider a situation where you make an initial request and the request times
 *  out. If you make the request again with the same request ID, the server can
 *  check if original operation with the same request ID was received, and if
 *  so, will ignore the second request. This prevents clients from accidentally
 *  creating duplicate commitments. The request ID must be a valid UUID with the
 *  exception that zero UUID is not supported
 *  (00000000-0000-0000-0000-000000000000).
 */
@property(nonatomic, copy, nullable) NSString *requestId;

/**
 *  Fetches a @c GTLRConfig_Operation.
 *
 *  Deletes a Preview.
 *
 *  @param name Required. The name of the Preview in the format:
 *    'projects/{project_id}/locations/{location}/previews/{preview}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsPreviewsDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Export Preview results.
 *
 *  Method: config.projects.locations.previews.export
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsPreviewsExport : GTLRConfigQuery

/**
 *  Required. The preview whose results should be exported. The preview value is
 *  in the format:
 *  'projects/{project_id}/locations/{location}/previews/{preview}'.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRConfig_ExportPreviewResultResponse.
 *
 *  Export Preview results.
 *
 *  @param object The @c GTLRConfig_ExportPreviewResultRequest to include in the
 *    query.
 *  @param parent Required. The preview whose results should be exported. The
 *    preview value is in the format:
 *    'projects/{project_id}/locations/{location}/previews/{preview}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsPreviewsExport
 */
+ (instancetype)queryWithObject:(GTLRConfig_ExportPreviewResultRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Gets details about a Preview.
 *
 *  Method: config.projects.locations.previews.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsPreviewsGet : GTLRConfigQuery

/**
 *  Required. The name of the preview. Format:
 *  'projects/{project_id}/locations/{location}/previews/{preview}'.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRConfig_Preview.
 *
 *  Gets details about a Preview.
 *
 *  @param name Required. The name of the preview. Format:
 *    'projects/{project_id}/locations/{location}/previews/{preview}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsPreviewsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists Previews in a given project and location.
 *
 *  Method: config.projects.locations.previews.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsPreviewsList : GTLRConfigQuery

/**
 *  Optional. Lists the Deployments that match the filter expression. A filter
 *  expression filters the resources listed in the response. The expression must
 *  be of the form '{field} {operator} {value}' where operators: '<', '>', '<=',
 *  '>=', '!=', '=', ':' are supported (colon ':' represents a HAS operator
 *  which is roughly synonymous with equality). {field} can refer to a proto or
 *  JSON field, or a synthetic field. Field names can be camelCase or
 *  snake_case. Examples: - Filter by name: name =
 *  "projects/foo/locations/us-central1/deployments/bar - Filter by labels: -
 *  Resources that have a key called 'foo' labels.foo:* - Resources that have a
 *  key called 'foo' whose value is 'bar' labels.foo = bar - Filter by state: -
 *  Deployments in CREATING state. state=CREATING
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Field to use to sort the list. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. When requesting a page of resources, 'page_size' specifies number
 *  of resources to return. If unspecified, at most 500 will be returned. The
 *  maximum value is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. Token returned by previous call to 'ListDeployments' which
 *  specifies the position in the list from where to continue listing the
 *  resources.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent in whose context the Previews are listed. The parent
 *  value is in the format: 'projects/{project_id}/locations/{location}'.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRConfig_ListPreviewsResponse.
 *
 *  Lists Previews in a given project and location.
 *
 *  @param parent Required. The parent in whose context the Previews are listed.
 *    The parent value is in the format:
 *    'projects/{project_id}/locations/{location}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsPreviewsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

/**
 *  Gets details about a TerraformVersion.
 *
 *  Method: config.projects.locations.terraformVersions.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsTerraformVersionsGet : GTLRConfigQuery

/**
 *  Required. The name of the TerraformVersion. Format:
 *  'projects/{project_id}/locations/{location}/terraformVersions/{terraform_version}'
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRConfig_TerraformVersion.
 *
 *  Gets details about a TerraformVersion.
 *
 *  @param name Required. The name of the TerraformVersion. Format:
 *    'projects/{project_id}/locations/{location}/terraformVersions/{terraform_version}'
 *
 *  @return GTLRConfigQuery_ProjectsLocationsTerraformVersionsGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists TerraformVersions in a given project and location.
 *
 *  Method: config.projects.locations.terraformVersions.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeConfigCloudPlatform
 */
@interface GTLRConfigQuery_ProjectsLocationsTerraformVersionsList : GTLRConfigQuery

/**
 *  Optional. Lists the TerraformVersions that match the filter expression. A
 *  filter expression filters the resources listed in the response. The
 *  expression must be of the form '{field} {operator} {value}' where operators:
 *  '<', '>', '<=', '>=', '!=', '=', ':' are supported (colon ':' represents a
 *  HAS operator which is roughly synonymous with equality). {field} can refer
 *  to a proto or JSON field, or a synthetic field. Field names can be camelCase
 *  or snake_case.
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** Optional. Field to use to sort the list. */
@property(nonatomic, copy, nullable) NSString *orderBy;

/**
 *  Optional. When requesting a page of resources, 'page_size' specifies number
 *  of resources to return. If unspecified, at most 500 will be returned. The
 *  maximum value is 1000.
 */
@property(nonatomic, assign) NSInteger pageSize;

/**
 *  Optional. Token returned by previous call to 'ListTerraformVersions' which
 *  specifies the position in the list from where to continue listing the
 *  resources.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Required. The parent in whose context the TerraformVersions are listed. The
 *  parent value is in the format: 'projects/{project_id}/locations/{location}'.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRConfig_ListTerraformVersionsResponse.
 *
 *  Lists TerraformVersions in a given project and location.
 *
 *  @param parent Required. The parent in whose context the TerraformVersions
 *    are listed. The parent value is in the format:
 *    'projects/{project_id}/locations/{location}'.
 *
 *  @return GTLRConfigQuery_ProjectsLocationsTerraformVersionsList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithParent:(NSString *)parent;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
