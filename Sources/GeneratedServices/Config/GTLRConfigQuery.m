// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Infrastructure Manager API (config/v1)
// Description:
//   Creates and manages Google Cloud Platform resources and infrastructure.
// Documentation:
//   https://cloud.google.com/infrastructure-manager/docs

#import <GoogleAPIClientForREST/GTLRConfigQuery.h>

// ----------------------------------------------------------------------------
// Constants

// deletePolicy
NSString * const kGTLRConfigDeletePolicyAbandon                = @"ABANDON";
NSString * const kGTLRConfigDeletePolicyDelete                 = @"DELETE";
NSString * const kGTLRConfigDeletePolicyDeletePolicyUnspecified = @"DELETE_POLICY_UNSPECIFIED";

// ----------------------------------------------------------------------------
// Query Classes
//

@implementation GTLRConfigQuery

@dynamic fields;

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsCreate

@dynamic deploymentId, parent, requestId;

+ (instancetype)queryWithObject:(GTLRConfig_Deployment *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/deployments";
  GTLRConfigQuery_ProjectsLocationsDeploymentsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRConfig_Operation class];
  query.loggingName = @"config.projects.locations.deployments.create";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsDelete

@dynamic deletePolicy, force, name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConfigQuery_ProjectsLocationsDeploymentsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_Operation class];
  query.loggingName = @"config.projects.locations.deployments.delete";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsDeleteState

@dynamic name;

+ (instancetype)queryWithObject:(GTLRConfig_DeleteStatefileRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:deleteState";
  GTLRConfigQuery_ProjectsLocationsDeploymentsDeleteState *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_Empty class];
  query.loggingName = @"config.projects.locations.deployments.deleteState";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsExportLock

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:exportLock";
  GTLRConfigQuery_ProjectsLocationsDeploymentsExportLock *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_LockInfo class];
  query.loggingName = @"config.projects.locations.deployments.exportLock";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsExportState

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRConfig_ExportDeploymentStatefileRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}:exportState";
  GTLRConfigQuery_ProjectsLocationsDeploymentsExportState *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRConfig_Statefile class];
  query.loggingName = @"config.projects.locations.deployments.exportState";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConfigQuery_ProjectsLocationsDeploymentsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_Deployment class];
  query.loggingName = @"config.projects.locations.deployments.get";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRConfigQuery_ProjectsLocationsDeploymentsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRConfig_Policy class];
  query.loggingName = @"config.projects.locations.deployments.getIamPolicy";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsImportState

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRConfig_ImportStatefileRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}:importState";
  GTLRConfigQuery_ProjectsLocationsDeploymentsImportState *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRConfig_Statefile class];
  query.loggingName = @"config.projects.locations.deployments.importState";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/deployments";
  GTLRConfigQuery_ProjectsLocationsDeploymentsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRConfig_ListDeploymentsResponse class];
  query.loggingName = @"config.projects.locations.deployments.list";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsLock

@dynamic name;

+ (instancetype)queryWithObject:(GTLRConfig_LockDeploymentRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:lock";
  GTLRConfigQuery_ProjectsLocationsDeploymentsLock *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_Operation class];
  query.loggingName = @"config.projects.locations.deployments.lock";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsPatch

@dynamic name, requestId, updateMask;

+ (instancetype)queryWithObject:(GTLRConfig_Deployment *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConfigQuery_ProjectsLocationsDeploymentsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_Operation class];
  query.loggingName = @"config.projects.locations.deployments.patch";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsExportState

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRConfig_ExportRevisionStatefileRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}:exportState";
  GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsExportState *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRConfig_Statefile class];
  query.loggingName = @"config.projects.locations.deployments.revisions.exportState";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_Revision class];
  query.loggingName = @"config.projects.locations.deployments.revisions.get";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/revisions";
  GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRConfig_ListRevisionsResponse class];
  query.loggingName = @"config.projects.locations.deployments.revisions.list";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsResourcesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsResourcesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_Resource class];
  query.loggingName = @"config.projects.locations.deployments.revisions.resources.get";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsResourcesList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/resources";
  GTLRConfigQuery_ProjectsLocationsDeploymentsRevisionsResourcesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRConfig_ListResourcesResponse class];
  query.loggingName = @"config.projects.locations.deployments.revisions.resources.list";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRConfig_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRConfigQuery_ProjectsLocationsDeploymentsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRConfig_Policy class];
  query.loggingName = @"config.projects.locations.deployments.setIamPolicy";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRConfig_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRConfigQuery_ProjectsLocationsDeploymentsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRConfig_TestIamPermissionsResponse class];
  query.loggingName = @"config.projects.locations.deployments.testIamPermissions";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsDeploymentsUnlock

@dynamic name;

+ (instancetype)queryWithObject:(GTLRConfig_UnlockDeploymentRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:unlock";
  GTLRConfigQuery_ProjectsLocationsDeploymentsUnlock *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_Operation class];
  query.loggingName = @"config.projects.locations.deployments.unlock";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConfigQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_Location class];
  query.loggingName = @"config.projects.locations.get";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRConfigQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_ListLocationsResponse class];
  query.loggingName = @"config.projects.locations.list";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRConfig_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRConfigQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_Empty class];
  query.loggingName = @"config.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConfigQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_Empty class];
  query.loggingName = @"config.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConfigQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_Operation class];
  query.loggingName = @"config.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRConfigQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_ListOperationsResponse class];
  query.loggingName = @"config.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsPreviewsCreate

@dynamic parent, previewId, requestId;

+ (instancetype)queryWithObject:(GTLRConfig_Preview *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/previews";
  GTLRConfigQuery_ProjectsLocationsPreviewsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRConfig_Operation class];
  query.loggingName = @"config.projects.locations.previews.create";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsPreviewsDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConfigQuery_ProjectsLocationsPreviewsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_Operation class];
  query.loggingName = @"config.projects.locations.previews.delete";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsPreviewsExport

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRConfig_ExportPreviewResultRequest *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}:export";
  GTLRConfigQuery_ProjectsLocationsPreviewsExport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRConfig_ExportPreviewResultResponse class];
  query.loggingName = @"config.projects.locations.previews.export";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsPreviewsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConfigQuery_ProjectsLocationsPreviewsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_Preview class];
  query.loggingName = @"config.projects.locations.previews.get";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsPreviewsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/previews";
  GTLRConfigQuery_ProjectsLocationsPreviewsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRConfig_ListPreviewsResponse class];
  query.loggingName = @"config.projects.locations.previews.list";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsTerraformVersionsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRConfigQuery_ProjectsLocationsTerraformVersionsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConfig_TerraformVersion class];
  query.loggingName = @"config.projects.locations.terraformVersions.get";
  return query;
}

@end

@implementation GTLRConfigQuery_ProjectsLocationsTerraformVersionsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/terraformVersions";
  GTLRConfigQuery_ProjectsLocationsTerraformVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRConfig_ListTerraformVersionsResponse class];
  query.loggingName = @"config.projects.locations.terraformVersions.list";
  return query;
}

@end
