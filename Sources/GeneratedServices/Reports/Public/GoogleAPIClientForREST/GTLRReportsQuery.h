// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Admin SDK API (admin/reports_v1)
// Description:
//   Admin SDK lets administrators of enterprise domains to view and manage
//   resources like user, groups etc. It also provides audit and usage reports
//   of domain.
// Documentation:
//   https://developers.google.com/admin-sdk/

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRReportsObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the query classes' properties below.

// ----------------------------------------------------------------------------
// applicationName

/**
 *  The Google Workspace Access Transparency activity reports return information
 *  about different types of Access Transparency activity events.
 *
 *  Value: "access_transparency"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameAccessTransparency;
/**
 *  The Admin console application's activity reports return account information
 *  about different types of administrator activity events.
 *
 *  Value: "admin"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameAdmin;
/**
 *  The Google Calendar application's activity reports return information about
 *  various Calendar activity events.
 *
 *  Value: "calendar"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameCalendar;
/**
 *  The Chat activity reports return information about various Chat activity
 *  events.
 *
 *  Value: "chat"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameChat;
/**
 *  The Chrome activity reports return information about Chrome browser and
 *  Chrome OS events.
 *
 *  Value: "chrome"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameChrome;
/**
 *  The Context-aware access activity reports return information about users'
 *  access denied events due to Context-aware access rules.
 *
 *  Value: "context_aware_access"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameContextAwareAccess;
/**
 *  The Data Studio activity reports return information about various types of
 *  Data Studio activity events.
 *
 *  Value: "data_studio"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameDataStudio;
/** Value: "drive" */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameDrive;
/**
 *  The Google Cloud Platform application's activity reports return information
 *  about various GCP activity events.
 *
 *  Value: "gcp"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameGcp;
/**
 *  The Google+ application's activity reports return information about various
 *  Google+ activity events.
 *
 *  Value: "gplus"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameGplus;
/**
 *  The Google Groups application's activity reports return information about
 *  various Groups activity events.
 *
 *  Value: "groups"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameGroups;
/**
 *  The Enterprise Groups activity reports return information about various
 *  Enterprise group activity events.
 *
 *  Value: "groups_enterprise"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameGroupsEnterprise;
/**
 *  The Jamboard activity reports return information about various Jamboard
 *  activity events.
 *
 *  Value: "jamboard"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameJamboard;
/**
 *  The Keep application's activity reports return information about various
 *  Google Keep activity events. The Keep activity report is only available for
 *  Google Workspace Business and Enterprise customers.
 *
 *  Value: "keep"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameKeep;
/**
 *  The Login application's activity reports return account information about
 *  different types of Login activity events.
 *
 *  Value: "login"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameLogin;
/**
 *  The Meet Audit activity report returns information about different types of
 *  Meet Audit activity events.
 *
 *  Value: "meet"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameMeet;
/**
 *  The Device Audit activity report returns information about different types
 *  of Device Audit activity events.
 *
 *  Value: "mobile"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameMobile;
/**
 *  The Rules activity report returns information about different types of Rules
 *  activity events.
 *
 *  Value: "rules"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameRules;
/**
 *  The SAML activity report returns information about different types of SAML
 *  activity events.
 *
 *  Value: "saml"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameSaml;
/**
 *  The Token application's activity reports return account information about
 *  different types of Token activity events.
 *
 *  Value: "token"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameToken;
/**
 *  The User Accounts application's activity reports return account information
 *  about different types of User Accounts activity events.
 *
 *  Value: "user_accounts"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsApplicationNameUserAccounts;

// ----------------------------------------------------------------------------
// entityType

/**
 *  Returns a report on Google+ communities.
 *
 *  Value: "gplus_communities"
 */
FOUNDATION_EXTERN NSString * const kGTLRReportsEntityTypeGplusCommunities;

// ----------------------------------------------------------------------------
// Query Classes
//

/**
 *  Parent class for other reports query classes.
 */
@interface GTLRReportsQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Retrieves a list of activities for a specific customer's account and
 *  application such as the Admin console application or the Google Drive
 *  application. For more information, see the guides for administrator and
 *  Google Drive activity reports. For more information about the activity
 *  report's parameters, see the activity parameters reference guides.
 *
 *  Method: reports.activities.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeReportsReportsAuditReadonly
 */
@interface GTLRReportsQuery_ActivitiesList : GTLRReportsQuery

/**
 *  The Internet Protocol (IP) Address of host where the event was performed.
 *  This is an additional way to filter a report's summary using the IP address
 *  of the user whose activity is being reported. This IP address may or may not
 *  reflect the user's physical location. For example, the IP address can be the
 *  user's proxy server's address or a virtual private network (VPN) address.
 *  This parameter supports both IPv4 and IPv6 address versions.
 */
@property(nonatomic, copy, nullable) NSString *actorIpAddress;

/**
 *  Application name for which the events are to be retrieved.
 *
 *  Likely values:
 *    @arg @c kGTLRReportsApplicationNameAccessTransparency The Google Workspace
 *        Access Transparency activity reports return information about
 *        different types of Access Transparency activity events. (Value:
 *        "access_transparency")
 *    @arg @c kGTLRReportsApplicationNameAdmin The Admin console application's
 *        activity reports return account information about different types of
 *        administrator activity events. (Value: "admin")
 *    @arg @c kGTLRReportsApplicationNameCalendar The Google Calendar
 *        application's activity reports return information about various
 *        Calendar activity events. (Value: "calendar")
 *    @arg @c kGTLRReportsApplicationNameChat The Chat activity reports return
 *        information about various Chat activity events. (Value: "chat")
 *    @arg @c kGTLRReportsApplicationNameDrive The Google Drive application's
 *        activity reports return information about various Google Drive
 *        activity events. The Drive activity report is only available for
 *        Google Workspace Business and Enterprise customers. (Value: "drive")
 *    @arg @c kGTLRReportsApplicationNameGcp The Google Cloud Platform
 *        application's activity reports return information about various GCP
 *        activity events. (Value: "gcp")
 *    @arg @c kGTLRReportsApplicationNameGplus The Google+ application's
 *        activity reports return information about various Google+ activity
 *        events. (Value: "gplus")
 *    @arg @c kGTLRReportsApplicationNameGroups The Google Groups application's
 *        activity reports return information about various Groups activity
 *        events. (Value: "groups")
 *    @arg @c kGTLRReportsApplicationNameGroupsEnterprise The Enterprise Groups
 *        activity reports return information about various Enterprise group
 *        activity events. (Value: "groups_enterprise")
 *    @arg @c kGTLRReportsApplicationNameJamboard The Jamboard activity reports
 *        return information about various Jamboard activity events. (Value:
 *        "jamboard")
 *    @arg @c kGTLRReportsApplicationNameLogin The Login application's activity
 *        reports return account information about different types of Login
 *        activity events. (Value: "login")
 *    @arg @c kGTLRReportsApplicationNameMeet The Meet Audit activity report
 *        returns information about different types of Meet Audit activity
 *        events. (Value: "meet")
 *    @arg @c kGTLRReportsApplicationNameMobile The Device Audit activity report
 *        returns information about different types of Device Audit activity
 *        events. (Value: "mobile")
 *    @arg @c kGTLRReportsApplicationNameRules The Rules activity report returns
 *        information about different types of Rules activity events. (Value:
 *        "rules")
 *    @arg @c kGTLRReportsApplicationNameSaml The SAML activity report returns
 *        information about different types of SAML activity events. (Value:
 *        "saml")
 *    @arg @c kGTLRReportsApplicationNameToken The Token application's activity
 *        reports return account information about different types of Token
 *        activity events. (Value: "token")
 *    @arg @c kGTLRReportsApplicationNameUserAccounts The User Accounts
 *        application's activity reports return account information about
 *        different types of User Accounts activity events. (Value:
 *        "user_accounts")
 *    @arg @c kGTLRReportsApplicationNameContextAwareAccess The Context-aware
 *        access activity reports return information about users' access denied
 *        events due to Context-aware access rules. (Value:
 *        "context_aware_access")
 *    @arg @c kGTLRReportsApplicationNameChrome The Chrome activity reports
 *        return information about Chrome browser and Chrome OS events. (Value:
 *        "chrome")
 *    @arg @c kGTLRReportsApplicationNameDataStudio The Data Studio activity
 *        reports return information about various types of Data Studio activity
 *        events. (Value: "data_studio")
 *    @arg @c kGTLRReportsApplicationNameKeep The Keep application's activity
 *        reports return information about various Google Keep activity events.
 *        The Keep activity report is only available for Google Workspace
 *        Business and Enterprise customers. (Value: "keep")
 */
@property(nonatomic, copy, nullable) NSString *applicationName;

/** The unique ID of the customer to retrieve data for. */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Sets the end of the range of time shown in the report. The date is in the
 *  RFC 3339 format, for example 2010-10-28T10:26:35.000Z. The default value is
 *  the approximate time of the API request. An API report has three basic time
 *  concepts: - *Date of the API's request for a report*: When the API created
 *  and retrieved the report. - *Report's start time*: The beginning of the
 *  timespan shown in the report. The `startTime` must be before the `endTime`
 *  (if specified) and the current time when the request is made, or the API
 *  returns an error. - *Report's end time*: The end of the timespan shown in
 *  the report. For example, the timespan of events summarized in a report can
 *  start in April and end in May. The report itself can be requested in August.
 *  If the `endTime` is not specified, the report returns all activities from
 *  the `startTime` until the current time or the most recent 180 days if the
 *  `startTime` is more than 180 days in the past.
 */
@property(nonatomic, copy, nullable) NSString *endTime;

/**
 *  The name of the event being queried by the API. Each `eventName` is related
 *  to a specific Google Workspace service or feature which the API organizes
 *  into types of events. An example is the Google Calendar events in the Admin
 *  console application's reports. The Calendar Settings `type` structure has
 *  all of the Calendar `eventName` activities reported by the API. When an
 *  administrator changes a Calendar setting, the API reports this activity in
 *  the Calendar Settings `type` and `eventName` parameters. For more
 *  information about `eventName` query strings and parameters, see the list of
 *  event names for various applications above in `applicationName`.
 */
@property(nonatomic, copy, nullable) NSString *eventName;

/**
 *  The `filters` query string is a comma-separated list composed of event
 *  parameters manipulated by relational operators. Event parameters are in the
 *  form `{parameter1 name}{relational operator}{parameter1 value},{parameter2
 *  name}{relational operator}{parameter2 value},...` These event parameters are
 *  associated with a specific `eventName`. An empty report is returned if the
 *  request's parameter doesn't belong to the `eventName`. For more information
 *  about the available `eventName` fields for each application and their
 *  associated parameters, go to the [ApplicationName](#applicationname) table,
 *  then click through to the Activity Events page in the Appendix for the
 *  application you want. In the following Drive activity examples, the returned
 *  list consists of all `edit` events where the `doc_id` parameter value
 *  matches the conditions defined by the relational operator. In the first
 *  example, the request returns all edited documents with a `doc_id` value
 *  equal to `12345`. In the second example, the report returns any edited
 *  documents where the `doc_id` value is not equal to `98765`. The `<>`
 *  operator is URL-encoded in the request's query string (`%3C%3E`): ```
 *  GET...&eventName=edit&filters=doc_id==12345
 *  GET...&eventName=edit&filters=doc_id%3C%3E98765 ``` A `filters` query
 *  supports these relational operators: * `==`—'equal to'. * `<>`—'not equal
 *  to'. Must be URL-encoded (%3C%3E). * `<`—'less than'. Must be URL-encoded
 *  (%3C). * `<=`—'less than or equal to'. Must be URL-encoded (%3C=). *
 *  `>`—'greater than'. Must be URL-encoded (%3E). * `>=`—'greater than or equal
 *  to'. Must be URL-encoded (%3E=). **Note:** The API doesn't accept multiple
 *  values of the same parameter. If a parameter is supplied more than once in
 *  the API request, the API only accepts the last value of that parameter. In
 *  addition, if an invalid parameter is supplied in the API request, the API
 *  ignores that parameter and returns the response corresponding to the
 *  remaining valid parameters. If no parameters are requested, all parameters
 *  are returned.
 */
@property(nonatomic, copy, nullable) NSString *filters;

/**
 *  Comma separated group ids (obfuscated) on which user activities are
 *  filtered, i.e. the response will contain activities for only those users
 *  that are a part of at least one of the group ids mentioned here. Format:
 *  "id:abc123,id:xyz456"
 */
@property(nonatomic, copy, nullable) NSString *groupIdFilter;

/**
 *  Determines how many activity records are shown on each response page. For
 *  example, if the request sets `maxResults=1` and the report has two
 *  activities, the report has two pages. The response's `nextPageToken`
 *  property has the token to the second page. The `maxResults` query string is
 *  optional in the request. The default value is 1000.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 1..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  ID of the organizational unit to report on. Activity records will be shown
 *  only for users who belong to the specified organizational unit. Data before
 *  Dec 17, 2018 doesn't appear in the filtered results.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitID;

/**
 *  The token to specify next page. A report with multiple pages has a
 *  `nextPageToken` property in the response. In your follow-on request getting
 *  the next page of the report, enter the `nextPageToken` value in the
 *  `pageToken` query string.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Sets the beginning of the range of time shown in the report. The date is in
 *  the RFC 3339 format, for example 2010-10-28T10:26:35.000Z. The report
 *  returns all activities from `startTime` until `endTime`. The `startTime`
 *  must be before the `endTime` (if specified) and the current time when the
 *  request is made, or the API returns an error.
 */
@property(nonatomic, copy, nullable) NSString *startTime;

/**
 *  Represents the profile ID or the user email for which the data should be
 *  filtered. Can be `all` for all information, or `userKey` for a user's unique
 *  Google Workspace profile ID or their primary email address. Must not be a
 *  deleted user. For a deleted user, call `users.list` in Directory API with
 *  `showDeleted=true`, then use the returned `ID` as the `userKey`.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRReports_Activities.
 *
 *  Retrieves a list of activities for a specific customer's account and
 *  application such as the Admin console application or the Google Drive
 *  application. For more information, see the guides for administrator and
 *  Google Drive activity reports. For more information about the activity
 *  report's parameters, see the activity parameters reference guides.
 *
 *  @param userKey Represents the profile ID or the user email for which the
 *    data should be filtered. Can be `all` for all information, or `userKey`
 *    for a user's unique Google Workspace profile ID or their primary email
 *    address. Must not be a deleted user. For a deleted user, call `users.list`
 *    in Directory API with `showDeleted=true`, then use the returned `ID` as
 *    the `userKey`.
 *  @param applicationName Application name for which the events are to be
 *    retrieved.
 *
 *  Likely values for @c applicationName:
 *    @arg @c kGTLRReportsApplicationNameAccessTransparency The Google Workspace
 *        Access Transparency activity reports return information about
 *        different types of Access Transparency activity events. (Value:
 *        "access_transparency")
 *    @arg @c kGTLRReportsApplicationNameAdmin The Admin console application's
 *        activity reports return account information about different types of
 *        administrator activity events. (Value: "admin")
 *    @arg @c kGTLRReportsApplicationNameCalendar The Google Calendar
 *        application's activity reports return information about various
 *        Calendar activity events. (Value: "calendar")
 *    @arg @c kGTLRReportsApplicationNameChat The Chat activity reports return
 *        information about various Chat activity events. (Value: "chat")
 *    @arg @c kGTLRReportsApplicationNameDrive The Google Drive application's
 *        activity reports return information about various Google Drive
 *        activity events. The Drive activity report is only available for
 *        Google Workspace Business and Enterprise customers. (Value: "drive")
 *    @arg @c kGTLRReportsApplicationNameGcp The Google Cloud Platform
 *        application's activity reports return information about various GCP
 *        activity events. (Value: "gcp")
 *    @arg @c kGTLRReportsApplicationNameGplus The Google+ application's
 *        activity reports return information about various Google+ activity
 *        events. (Value: "gplus")
 *    @arg @c kGTLRReportsApplicationNameGroups The Google Groups application's
 *        activity reports return information about various Groups activity
 *        events. (Value: "groups")
 *    @arg @c kGTLRReportsApplicationNameGroupsEnterprise The Enterprise Groups
 *        activity reports return information about various Enterprise group
 *        activity events. (Value: "groups_enterprise")
 *    @arg @c kGTLRReportsApplicationNameJamboard The Jamboard activity reports
 *        return information about various Jamboard activity events. (Value:
 *        "jamboard")
 *    @arg @c kGTLRReportsApplicationNameLogin The Login application's activity
 *        reports return account information about different types of Login
 *        activity events. (Value: "login")
 *    @arg @c kGTLRReportsApplicationNameMeet The Meet Audit activity report
 *        returns information about different types of Meet Audit activity
 *        events. (Value: "meet")
 *    @arg @c kGTLRReportsApplicationNameMobile The Device Audit activity report
 *        returns information about different types of Device Audit activity
 *        events. (Value: "mobile")
 *    @arg @c kGTLRReportsApplicationNameRules The Rules activity report returns
 *        information about different types of Rules activity events. (Value:
 *        "rules")
 *    @arg @c kGTLRReportsApplicationNameSaml The SAML activity report returns
 *        information about different types of SAML activity events. (Value:
 *        "saml")
 *    @arg @c kGTLRReportsApplicationNameToken The Token application's activity
 *        reports return account information about different types of Token
 *        activity events. (Value: "token")
 *    @arg @c kGTLRReportsApplicationNameUserAccounts The User Accounts
 *        application's activity reports return account information about
 *        different types of User Accounts activity events. (Value:
 *        "user_accounts")
 *    @arg @c kGTLRReportsApplicationNameContextAwareAccess The Context-aware
 *        access activity reports return information about users' access denied
 *        events due to Context-aware access rules. (Value:
 *        "context_aware_access")
 *    @arg @c kGTLRReportsApplicationNameChrome The Chrome activity reports
 *        return information about Chrome browser and Chrome OS events. (Value:
 *        "chrome")
 *    @arg @c kGTLRReportsApplicationNameDataStudio The Data Studio activity
 *        reports return information about various types of Data Studio activity
 *        events. (Value: "data_studio")
 *    @arg @c kGTLRReportsApplicationNameKeep The Keep application's activity
 *        reports return information about various Google Keep activity events.
 *        The Keep activity report is only available for Google Workspace
 *        Business and Enterprise customers. (Value: "keep")
 *
 *  @return GTLRReportsQuery_ActivitiesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey
                 applicationName:(NSString *)applicationName;

@end

/**
 *  Start receiving notifications for account activities. For more information,
 *  see Receiving Push Notifications.
 *
 *  Method: reports.activities.watch
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeReportsReportsAuditReadonly
 */
@interface GTLRReportsQuery_ActivitiesWatch : GTLRReportsQuery

/**
 *  The Internet Protocol (IP) Address of host where the event was performed.
 *  This is an additional way to filter a report's summary using the IP address
 *  of the user whose activity is being reported. This IP address may or may not
 *  reflect the user's physical location. For example, the IP address can be the
 *  user's proxy server's address or a virtual private network (VPN) address.
 *  This parameter supports both IPv4 and IPv6 address versions.
 */
@property(nonatomic, copy, nullable) NSString *actorIpAddress;

/**
 *  Application name for which the events are to be retrieved.
 *
 *  Likely values:
 *    @arg @c kGTLRReportsApplicationNameAccessTransparency The Google Workspace
 *        Access Transparency activity reports return information about
 *        different types of Access Transparency activity events. (Value:
 *        "access_transparency")
 *    @arg @c kGTLRReportsApplicationNameAdmin The Admin console application's
 *        activity reports return account information about different types of
 *        administrator activity events. (Value: "admin")
 *    @arg @c kGTLRReportsApplicationNameCalendar The Google Calendar
 *        application's activity reports return information about various
 *        Calendar activity events. (Value: "calendar")
 *    @arg @c kGTLRReportsApplicationNameChat The Chat activity reports return
 *        information about various Chat activity events. (Value: "chat")
 *    @arg @c kGTLRReportsApplicationNameDrive The Google Drive application's
 *        activity reports return information about various Google Drive
 *        activity events. The Drive activity report is only available for
 *        Google Workspace Business and Google Workspace Enterprise customers.
 *        (Value: "drive")
 *    @arg @c kGTLRReportsApplicationNameGcp The Google Cloud Platform
 *        application's activity reports return information about various GCP
 *        activity events. (Value: "gcp")
 *    @arg @c kGTLRReportsApplicationNameGplus The Google+ application's
 *        activity reports return information about various Google+ activity
 *        events. (Value: "gplus")
 *    @arg @c kGTLRReportsApplicationNameGroups The Google Groups application's
 *        activity reports return information about various Groups activity
 *        events. (Value: "groups")
 *    @arg @c kGTLRReportsApplicationNameGroupsEnterprise The Enterprise Groups
 *        activity reports return information about various Enterprise group
 *        activity events. (Value: "groups_enterprise")
 *    @arg @c kGTLRReportsApplicationNameJamboard The Jamboard activity reports
 *        return information about various Jamboard activity events. (Value:
 *        "jamboard")
 *    @arg @c kGTLRReportsApplicationNameLogin The Login application's activity
 *        reports return account information about different types of Login
 *        activity events. (Value: "login")
 *    @arg @c kGTLRReportsApplicationNameMeet The Meet Audit activity report
 *        returns information about different types of Meet Audit activity
 *        events. (Value: "meet")
 *    @arg @c kGTLRReportsApplicationNameMobile The Device Audit activity report
 *        returns information about different types of Device Audit activity
 *        events. (Value: "mobile")
 *    @arg @c kGTLRReportsApplicationNameRules The Rules activity report returns
 *        information about different types of Rules activity events. (Value:
 *        "rules")
 *    @arg @c kGTLRReportsApplicationNameSaml The SAML activity report returns
 *        information about different types of SAML activity events. (Value:
 *        "saml")
 *    @arg @c kGTLRReportsApplicationNameToken The Token application's activity
 *        reports return account information about different types of Token
 *        activity events. (Value: "token")
 *    @arg @c kGTLRReportsApplicationNameUserAccounts The User Accounts
 *        application's activity reports return account information about
 *        different types of User Accounts activity events. (Value:
 *        "user_accounts")
 *    @arg @c kGTLRReportsApplicationNameContextAwareAccess The Context-aware
 *        access activity reports return information about users' access denied
 *        events due to Context-aware access rules. (Value:
 *        "context_aware_access")
 *    @arg @c kGTLRReportsApplicationNameChrome The Chrome activity reports
 *        return information about Chrome browser and Chrome OS events. (Value:
 *        "chrome")
 *    @arg @c kGTLRReportsApplicationNameDataStudio The Data Studio activity
 *        reports return information about various types of Data Studio activity
 *        events. (Value: "data_studio")
 *    @arg @c kGTLRReportsApplicationNameKeep The Keep application's activity
 *        reports return information about various Google Keep activity events.
 *        The Keep activity report is only available for Google Workspace
 *        Business and Enterprise customers. (Value: "keep")
 */
@property(nonatomic, copy, nullable) NSString *applicationName;

/** The unique ID of the customer to retrieve data for. */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Sets the end of the range of time shown in the report. The date is in the
 *  RFC 3339 format, for example 2010-10-28T10:26:35.000Z. The default value is
 *  the approximate time of the API request. An API report has three basic time
 *  concepts: - *Date of the API's request for a report*: When the API created
 *  and retrieved the report. - *Report's start time*: The beginning of the
 *  timespan shown in the report. The `startTime` must be before the `endTime`
 *  (if specified) and the current time when the request is made, or the API
 *  returns an error. - *Report's end time*: The end of the timespan shown in
 *  the report. For example, the timespan of events summarized in a report can
 *  start in April and end in May. The report itself can be requested in August.
 *  If the `endTime` is not specified, the report returns all activities from
 *  the `startTime` until the current time or the most recent 180 days if the
 *  `startTime` is more than 180 days in the past.
 */
@property(nonatomic, copy, nullable) NSString *endTime;

/**
 *  The name of the event being queried by the API. Each `eventName` is related
 *  to a specific Google Workspace service or feature which the API organizes
 *  into types of events. An example is the Google Calendar events in the Admin
 *  console application's reports. The Calendar Settings `type` structure has
 *  all of the Calendar `eventName` activities reported by the API. When an
 *  administrator changes a Calendar setting, the API reports this activity in
 *  the Calendar Settings `type` and `eventName` parameters. For more
 *  information about `eventName` query strings and parameters, see the list of
 *  event names for various applications above in `applicationName`.
 */
@property(nonatomic, copy, nullable) NSString *eventName;

/**
 *  The `filters` query string is a comma-separated list composed of event
 *  parameters manipulated by relational operators. Event parameters are in the
 *  form `{parameter1 name}{relational operator}{parameter1 value},{parameter2
 *  name}{relational operator}{parameter2 value},...` These event parameters are
 *  associated with a specific `eventName`. An empty report is returned if the
 *  request's parameter doesn't belong to the `eventName`. For more information
 *  about the available `eventName` fields for each application and their
 *  associated parameters, go to the [ApplicationName](#applicationname) table,
 *  then click through to the Activity Events page in the Appendix for the
 *  application you want. In the following Drive activity examples, the returned
 *  list consists of all `edit` events where the `doc_id` parameter value
 *  matches the conditions defined by the relational operator. In the first
 *  example, the request returns all edited documents with a `doc_id` value
 *  equal to `12345`. In the second example, the report returns any edited
 *  documents where the `doc_id` value is not equal to `98765`. The `<>`
 *  operator is URL-encoded in the request's query string (`%3C%3E`): ```
 *  GET...&eventName=edit&filters=doc_id==12345
 *  GET...&eventName=edit&filters=doc_id%3C%3E98765 ``` A `filters` query
 *  supports these relational operators: * `==`—'equal to'. * `<>`—'not equal
 *  to'. Must be URL-encoded (%3C%3E). * `<`—'less than'. Must be URL-encoded
 *  (%3C). * `<=`—'less than or equal to'. Must be URL-encoded (%3C=). *
 *  `>`—'greater than'. Must be URL-encoded (%3E). * `>=`—'greater than or equal
 *  to'. Must be URL-encoded (%3E=). **Note:** The API doesn't accept multiple
 *  values of the same parameter. If a parameter is supplied more than once in
 *  the API request, the API only accepts the last value of that parameter. In
 *  addition, if an invalid parameter is supplied in the API request, the API
 *  ignores that parameter and returns the response corresponding to the
 *  remaining valid parameters. If no parameters are requested, all parameters
 *  are returned.
 */
@property(nonatomic, copy, nullable) NSString *filters;

/**
 *  Comma separated group ids (obfuscated) on which user activities are
 *  filtered, i.e. the response will contain activities for only those users
 *  that are a part of at least one of the group ids mentioned here. Format:
 *  "id:abc123,id:xyz456"
 */
@property(nonatomic, copy, nullable) NSString *groupIdFilter;

/**
 *  Determines how many activity records are shown on each response page. For
 *  example, if the request sets `maxResults=1` and the report has two
 *  activities, the report has two pages. The response's `nextPageToken`
 *  property has the token to the second page. The `maxResults` query string is
 *  optional in the request. The default value is 1000.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 1..1000).
 */
@property(nonatomic, assign) NSInteger maxResults;

/**
 *  ID of the organizational unit to report on. Activity records will be shown
 *  only for users who belong to the specified organizational unit. Data before
 *  Dec 17, 2018 doesn't appear in the filtered results.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitID;

/**
 *  The token to specify next page. A report with multiple pages has a
 *  `nextPageToken` property in the response. In your follow-on request getting
 *  the next page of the report, enter the `nextPageToken` value in the
 *  `pageToken` query string.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Sets the beginning of the range of time shown in the report. The date is in
 *  the RFC 3339 format, for example 2010-10-28T10:26:35.000Z. The report
 *  returns all activities from `startTime` until `endTime`. The `startTime`
 *  must be before the `endTime` (if specified) and the current time when the
 *  request is made, or the API returns an error.
 */
@property(nonatomic, copy, nullable) NSString *startTime;

/**
 *  Represents the profile ID or the user email for which the data should be
 *  filtered. Can be `all` for all information, or `userKey` for a user's unique
 *  Google Workspace profile ID or their primary email address. Must not be a
 *  deleted user. For a deleted user, call `users.list` in Directory API with
 *  `showDeleted=true`, then use the returned `ID` as the `userKey`.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRReports_Channel.
 *
 *  Start receiving notifications for account activities. For more information,
 *  see Receiving Push Notifications.
 *
 *  @param object The @c GTLRReports_Channel to include in the query.
 *  @param userKey Represents the profile ID or the user email for which the
 *    data should be filtered. Can be `all` for all information, or `userKey`
 *    for a user's unique Google Workspace profile ID or their primary email
 *    address. Must not be a deleted user. For a deleted user, call `users.list`
 *    in Directory API with `showDeleted=true`, then use the returned `ID` as
 *    the `userKey`.
 *  @param applicationName Application name for which the events are to be
 *    retrieved.
 *
 *  Likely values for @c applicationName:
 *    @arg @c kGTLRReportsApplicationNameAccessTransparency The Google Workspace
 *        Access Transparency activity reports return information about
 *        different types of Access Transparency activity events. (Value:
 *        "access_transparency")
 *    @arg @c kGTLRReportsApplicationNameAdmin The Admin console application's
 *        activity reports return account information about different types of
 *        administrator activity events. (Value: "admin")
 *    @arg @c kGTLRReportsApplicationNameCalendar The Google Calendar
 *        application's activity reports return information about various
 *        Calendar activity events. (Value: "calendar")
 *    @arg @c kGTLRReportsApplicationNameChat The Chat activity reports return
 *        information about various Chat activity events. (Value: "chat")
 *    @arg @c kGTLRReportsApplicationNameDrive The Google Drive application's
 *        activity reports return information about various Google Drive
 *        activity events. The Drive activity report is only available for
 *        Google Workspace Business and Google Workspace Enterprise customers.
 *        (Value: "drive")
 *    @arg @c kGTLRReportsApplicationNameGcp The Google Cloud Platform
 *        application's activity reports return information about various GCP
 *        activity events. (Value: "gcp")
 *    @arg @c kGTLRReportsApplicationNameGplus The Google+ application's
 *        activity reports return information about various Google+ activity
 *        events. (Value: "gplus")
 *    @arg @c kGTLRReportsApplicationNameGroups The Google Groups application's
 *        activity reports return information about various Groups activity
 *        events. (Value: "groups")
 *    @arg @c kGTLRReportsApplicationNameGroupsEnterprise The Enterprise Groups
 *        activity reports return information about various Enterprise group
 *        activity events. (Value: "groups_enterprise")
 *    @arg @c kGTLRReportsApplicationNameJamboard The Jamboard activity reports
 *        return information about various Jamboard activity events. (Value:
 *        "jamboard")
 *    @arg @c kGTLRReportsApplicationNameLogin The Login application's activity
 *        reports return account information about different types of Login
 *        activity events. (Value: "login")
 *    @arg @c kGTLRReportsApplicationNameMeet The Meet Audit activity report
 *        returns information about different types of Meet Audit activity
 *        events. (Value: "meet")
 *    @arg @c kGTLRReportsApplicationNameMobile The Device Audit activity report
 *        returns information about different types of Device Audit activity
 *        events. (Value: "mobile")
 *    @arg @c kGTLRReportsApplicationNameRules The Rules activity report returns
 *        information about different types of Rules activity events. (Value:
 *        "rules")
 *    @arg @c kGTLRReportsApplicationNameSaml The SAML activity report returns
 *        information about different types of SAML activity events. (Value:
 *        "saml")
 *    @arg @c kGTLRReportsApplicationNameToken The Token application's activity
 *        reports return account information about different types of Token
 *        activity events. (Value: "token")
 *    @arg @c kGTLRReportsApplicationNameUserAccounts The User Accounts
 *        application's activity reports return account information about
 *        different types of User Accounts activity events. (Value:
 *        "user_accounts")
 *    @arg @c kGTLRReportsApplicationNameContextAwareAccess The Context-aware
 *        access activity reports return information about users' access denied
 *        events due to Context-aware access rules. (Value:
 *        "context_aware_access")
 *    @arg @c kGTLRReportsApplicationNameChrome The Chrome activity reports
 *        return information about Chrome browser and Chrome OS events. (Value:
 *        "chrome")
 *    @arg @c kGTLRReportsApplicationNameDataStudio The Data Studio activity
 *        reports return information about various types of Data Studio activity
 *        events. (Value: "data_studio")
 *    @arg @c kGTLRReportsApplicationNameKeep The Keep application's activity
 *        reports return information about various Google Keep activity events.
 *        The Keep activity report is only available for Google Workspace
 *        Business and Enterprise customers. (Value: "keep")
 *
 *  @return GTLRReportsQuery_ActivitiesWatch
 */
+ (instancetype)queryWithObject:(GTLRReports_Channel *)object
                        userKey:(NSString *)userKey
                applicationName:(NSString *)applicationName;

@end

/**
 *  Stop watching resources through this channel.
 *
 *  Method: admin.channels.stop
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeReportsReportsAuditReadonly
 */
@interface GTLRReportsQuery_ChannelsStop : GTLRReportsQuery

/**
 *  Upon successful completion, the callback's object and error parameters will
 *  be nil. This query does not fetch an object.
 *
 *  Stop watching resources through this channel.
 *
 *  @param object The @c GTLRReports_Channel to include in the query.
 *
 *  @return GTLRReportsQuery_ChannelsStop
 */
+ (instancetype)queryWithObject:(GTLRReports_Channel *)object;

@end

/**
 *  Retrieves a report which is a collection of properties and statistics for a
 *  specific customer's account. For more information, see the Customers Usage
 *  Report guide. For more information about the customer report's parameters,
 *  see the Customers Usage parameters reference guides.
 *
 *  Method: reports.customerUsageReports.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeReportsReportsUsageReadonly
 */
@interface GTLRReportsQuery_CustomerUsageReportsGet : GTLRReportsQuery

/** The unique ID of the customer to retrieve data for. */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Represents the date the usage occurred. The timestamp is in the ISO 8601
 *  format, yyyy-mm-dd. We recommend you use your account's time zone for this.
 */
@property(nonatomic, copy, nullable) NSString *date;

/**
 *  Token to specify next page. A report with multiple pages has a
 *  `nextPageToken` property in the response. For your follow-on requests
 *  getting all of the report's pages, enter the `nextPageToken` value in the
 *  `pageToken` query string.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The `parameters` query string is a comma-separated list of event parameters
 *  that refine a report's results. The parameter is associated with a specific
 *  application. The application values for the Customers usage report include
 *  `accounts`, `app_maker`, `apps_scripts`, `calendar`, `classroom`, `cros`,
 *  `docs`, `gmail`, `gplus`, `device_management`, `meet`, and `sites`. A
 *  `parameters` query string is in the CSV form of `app_name1:param_name1,
 *  app_name2:param_name2`. *Note:* The API doesn't accept multiple values of a
 *  parameter. If a particular parameter is supplied more than once in the API
 *  request, the API only accepts the last value of that request parameter. In
 *  addition, if an invalid request parameter is supplied in the API request,
 *  the API ignores that request parameter and returns the response
 *  corresponding to the remaining valid request parameters. An example of an
 *  invalid request parameter is one that does not belong to the application. If
 *  no parameters are requested, all parameters are returned.
 */
@property(nonatomic, copy, nullable) NSString *parameters;

/**
 *  Fetches a @c GTLRReports_UsageReports.
 *
 *  Retrieves a report which is a collection of properties and statistics for a
 *  specific customer's account. For more information, see the Customers Usage
 *  Report guide. For more information about the customer report's parameters,
 *  see the Customers Usage parameters reference guides.
 *
 *  @param date Represents the date the usage occurred. The timestamp is in the
 *    ISO 8601 format, yyyy-mm-dd. We recommend you use your account's time zone
 *    for this.
 *
 *  @return GTLRReportsQuery_CustomerUsageReportsGet
 */
+ (instancetype)queryWithDate:(NSString *)date;

@end

/**
 *  Retrieves a report which is a collection of properties and statistics for
 *  entities used by users within the account. For more information, see the
 *  Entities Usage Report guide. For more information about the entities
 *  report's parameters, see the Entities Usage parameters reference guides.
 *
 *  Method: reports.entityUsageReports.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeReportsReportsUsageReadonly
 */
@interface GTLRReportsQuery_EntityUsageReportsGet : GTLRReportsQuery

/** The unique ID of the customer to retrieve data for. */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Represents the date the usage occurred. The timestamp is in the ISO 8601
 *  format, yyyy-mm-dd. We recommend you use your account's time zone for this.
 */
@property(nonatomic, copy, nullable) NSString *date;

/**
 *  Represents the key of the object to filter the data with. It is a string
 *  which can take the value `all` to get activity events for all users, or any
 *  other value for an app-specific entity. For details on how to obtain the
 *  `entityKey` for a particular `entityType`, see the Entities Usage parameters
 *  reference guides.
 */
@property(nonatomic, copy, nullable) NSString *entityKey;

/**
 *  Represents the type of entity for the report.
 *
 *  Likely values:
 *    @arg @c kGTLRReportsEntityTypeGplusCommunities Returns a report on Google+
 *        communities. (Value: "gplus_communities")
 */
@property(nonatomic, copy, nullable) NSString *entityType;

/**
 *  The `filters` query string is a comma-separated list of an application's
 *  event parameters where the parameter's value is manipulated by a relational
 *  operator. The `filters` query string includes the name of the application
 *  whose usage is returned in the report. The application values for the
 *  Entities usage report include `accounts`, `docs`, and `gmail`. Filters are
 *  in the form `[application name]:parameter name[parameter value],...`. In
 *  this example, the `<>` 'not equal to' operator is URL-encoded in the
 *  request's query string (%3C%3E): GET
 *  https://www.googleapis.com/admin/reports/v1/usage/gplus_communities/all/dates/2017-12-01
 *  ?parameters=gplus:community_name,gplus:num_total_members
 *  &filters=gplus:num_total_members%3C%3E0 The relational operators include: -
 *  `==` - 'equal to'. - `<>` - 'not equal to'. It is URL-encoded (%3C%3E). -
 *  `<` - 'less than'. It is URL-encoded (%3C). - `<=` - 'less than or equal
 *  to'. It is URL-encoded (%3C=). - `>` - 'greater than'. It is URL-encoded
 *  (%3E). - `>=` - 'greater than or equal to'. It is URL-encoded (%3E=).
 *  Filters can only be applied to numeric parameters.
 */
@property(nonatomic, copy, nullable) NSString *filters;

/**
 *  Determines how many activity records are shown on each response page. For
 *  example, if the request sets `maxResults=1` and the report has two
 *  activities, the report has two pages. The response's `nextPageToken`
 *  property has the token to the second page.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 1..1000).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  Token to specify next page. A report with multiple pages has a
 *  `nextPageToken` property in the response. In your follow-on request getting
 *  the next page of the report, enter the `nextPageToken` value in the
 *  `pageToken` query string.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The `parameters` query string is a comma-separated list of event parameters
 *  that refine a report's results. The parameter is associated with a specific
 *  application. The application values for the Entities usage report are only
 *  `gplus`. A `parameter` query string is in the CSV form of
 *  `[app_name1:param_name1], [app_name2:param_name2]...`. *Note:* The API
 *  doesn't accept multiple values of a parameter. If a particular parameter is
 *  supplied more than once in the API request, the API only accepts the last
 *  value of that request parameter. In addition, if an invalid request
 *  parameter is supplied in the API request, the API ignores that request
 *  parameter and returns the response corresponding to the remaining valid
 *  request parameters. An example of an invalid request parameter is one that
 *  does not belong to the application. If no parameters are requested, all
 *  parameters are returned.
 */
@property(nonatomic, copy, nullable) NSString *parameters;

/**
 *  Fetches a @c GTLRReports_UsageReports.
 *
 *  Retrieves a report which is a collection of properties and statistics for
 *  entities used by users within the account. For more information, see the
 *  Entities Usage Report guide. For more information about the entities
 *  report's parameters, see the Entities Usage parameters reference guides.
 *
 *  @param entityType Represents the type of entity for the report.
 *  @param entityKey Represents the key of the object to filter the data with.
 *    It is a string which can take the value `all` to get activity events for
 *    all users, or any other value for an app-specific entity. For details on
 *    how to obtain the `entityKey` for a particular `entityType`, see the
 *    Entities Usage parameters reference guides.
 *  @param date Represents the date the usage occurred. The timestamp is in the
 *    ISO 8601 format, yyyy-mm-dd. We recommend you use your account's time zone
 *    for this.
 *
 *  Likely values for @c entityType:
 *    @arg @c kGTLRReportsEntityTypeGplusCommunities Returns a report on Google+
 *        communities. (Value: "gplus_communities")
 *
 *  @return GTLRReportsQuery_EntityUsageReportsGet
 */
+ (instancetype)queryWithEntityType:(NSString *)entityType
                          entityKey:(NSString *)entityKey
                               date:(NSString *)date;

@end

/**
 *  Retrieves a report which is a collection of properties and statistics for a
 *  set of users with the account. For more information, see the User Usage
 *  Report guide. For more information about the user report's parameters, see
 *  the Users Usage parameters reference guides.
 *
 *  Method: reports.userUsageReport.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeReportsReportsUsageReadonly
 */
@interface GTLRReportsQuery_UserUsageReportGet : GTLRReportsQuery

/** The unique ID of the customer to retrieve data for. */
@property(nonatomic, copy, nullable) NSString *customerId;

/**
 *  Represents the date the usage occurred. The timestamp is in the ISO 8601
 *  format, yyyy-mm-dd. We recommend you use your account's time zone for this.
 */
@property(nonatomic, copy, nullable) NSString *date;

/**
 *  The `filters` query string is a comma-separated list of an application's
 *  event parameters where the parameter's value is manipulated by a relational
 *  operator. The `filters` query string includes the name of the application
 *  whose usage is returned in the report. The application values for the Users
 *  Usage Report include `accounts`, `docs`, and `gmail`. Filters are in the
 *  form `[application name]:parameter name[parameter value],...`. In this
 *  example, the `<>` 'not equal to' operator is URL-encoded in the request's
 *  query string (%3C%3E): GET
 *  https://www.googleapis.com/admin/reports/v1/usage/users/all/dates/2013-03-03
 *  ?parameters=accounts:last_login_time
 *  &filters=accounts:last_login_time%3C%3E2010-10-28T10:26:35.000Z The
 *  relational operators include: - `==` - 'equal to'. - `<>` - 'not equal to'.
 *  It is URL-encoded (%3C%3E). - `<` - 'less than'. It is URL-encoded (%3C). -
 *  `<=` - 'less than or equal to'. It is URL-encoded (%3C=). - `>` - 'greater
 *  than'. It is URL-encoded (%3E). - `>=` - 'greater than or equal to'. It is
 *  URL-encoded (%3E=).
 */
@property(nonatomic, copy, nullable) NSString *filters;

/**
 *  Comma separated group ids (obfuscated) on which user activities are
 *  filtered, i.e. the response will contain activities for only those users
 *  that are a part of at least one of the group ids mentioned here. Format:
 *  "id:abc123,id:xyz456"
 */
@property(nonatomic, copy, nullable) NSString *groupIdFilter;

/**
 *  Determines how many activity records are shown on each response page. For
 *  example, if the request sets `maxResults=1` and the report has two
 *  activities, the report has two pages. The response's `nextPageToken`
 *  property has the token to the second page. The `maxResults` query string is
 *  optional.
 *
 *  @note If not set, the documented server-side default will be 1000 (from the
 *        range 1..1000).
 */
@property(nonatomic, assign) NSUInteger maxResults;

/**
 *  ID of the organizational unit to report on. User activity will be shown only
 *  for users who belong to the specified organizational unit. Data before Dec
 *  17, 2018 doesn't appear in the filtered results.
 */
@property(nonatomic, copy, nullable) NSString *orgUnitID;

/**
 *  Token to specify next page. A report with multiple pages has a
 *  `nextPageToken` property in the response. In your follow-on request getting
 *  the next page of the report, enter the `nextPageToken` value in the
 *  `pageToken` query string.
 */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  The `parameters` query string is a comma-separated list of event parameters
 *  that refine a report's results. The parameter is associated with a specific
 *  application. The application values for the Customers Usage report include
 *  `accounts`, `app_maker`, `apps_scripts`, `calendar`, `classroom`, `cros`,
 *  `docs`, `gmail`, `gplus`, `device_management`, `meet`, and `sites`. A
 *  `parameters` query string is in the CSV form of `app_name1:param_name1,
 *  app_name2:param_name2`. *Note:* The API doesn't accept multiple values of a
 *  parameter. If a particular parameter is supplied more than once in the API
 *  request, the API only accepts the last value of that request parameter. In
 *  addition, if an invalid request parameter is supplied in the API request,
 *  the API ignores that request parameter and returns the response
 *  corresponding to the remaining valid request parameters. An example of an
 *  invalid request parameter is one that does not belong to the application. If
 *  no parameters are requested, all parameters are returned.
 */
@property(nonatomic, copy, nullable) NSString *parameters;

/**
 *  Represents the profile ID or the user email for which the data should be
 *  filtered. Can be `all` for all information, or `userKey` for a user's unique
 *  Google Workspace profile ID or their primary email address. Must not be a
 *  deleted user. For a deleted user, call `users.list` in Directory API with
 *  `showDeleted=true`, then use the returned `ID` as the `userKey`.
 */
@property(nonatomic, copy, nullable) NSString *userKey;

/**
 *  Fetches a @c GTLRReports_UsageReports.
 *
 *  Retrieves a report which is a collection of properties and statistics for a
 *  set of users with the account. For more information, see the User Usage
 *  Report guide. For more information about the user report's parameters, see
 *  the Users Usage parameters reference guides.
 *
 *  @param userKey Represents the profile ID or the user email for which the
 *    data should be filtered. Can be `all` for all information, or `userKey`
 *    for a user's unique Google Workspace profile ID or their primary email
 *    address. Must not be a deleted user. For a deleted user, call `users.list`
 *    in Directory API with `showDeleted=true`, then use the returned `ID` as
 *    the `userKey`.
 *  @param date Represents the date the usage occurred. The timestamp is in the
 *    ISO 8601 format, yyyy-mm-dd. We recommend you use your account's time zone
 *    for this.
 *
 *  @return GTLRReportsQuery_UserUsageReportGet
 */
+ (instancetype)queryWithUserKey:(NSString *)userKey
                            date:(NSString *)date;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
