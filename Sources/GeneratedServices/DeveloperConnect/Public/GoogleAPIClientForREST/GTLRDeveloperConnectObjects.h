// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Developer Connect API (developerconnect/v1)
// Description:
//   Connect third-party source code management to Google
// Documentation:
//   http://cloud.google.com/developer-connect/docs/overview

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRDeveloperConnect_Connection;
@class GTLRDeveloperConnect_Connection_Annotations;
@class GTLRDeveloperConnect_Connection_Labels;
@class GTLRDeveloperConnect_CryptoKeyConfig;
@class GTLRDeveloperConnect_GitHubConfig;
@class GTLRDeveloperConnect_GitHubEnterpriseConfig;
@class GTLRDeveloperConnect_GitLabConfig;
@class GTLRDeveloperConnect_GitLabEnterpriseConfig;
@class GTLRDeveloperConnect_GitRepositoryLink;
@class GTLRDeveloperConnect_GitRepositoryLink_Annotations;
@class GTLRDeveloperConnect_GitRepositoryLink_Labels;
@class GTLRDeveloperConnect_Installation;
@class GTLRDeveloperConnect_InstallationState;
@class GTLRDeveloperConnect_LinkableGitRepository;
@class GTLRDeveloperConnect_Location;
@class GTLRDeveloperConnect_Location_Labels;
@class GTLRDeveloperConnect_Location_Metadata;
@class GTLRDeveloperConnect_OAuthCredential;
@class GTLRDeveloperConnect_Operation;
@class GTLRDeveloperConnect_Operation_Metadata;
@class GTLRDeveloperConnect_Operation_Response;
@class GTLRDeveloperConnect_ServiceDirectoryConfig;
@class GTLRDeveloperConnect_Status;
@class GTLRDeveloperConnect_Status_Details_Item;
@class GTLRDeveloperConnect_UserCredential;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRDeveloperConnect_GitHubConfig.githubApp

/**
 *  The Developer Connect GitHub Application.
 *
 *  Value: "DEVELOPER_CONNECT"
 */
FOUNDATION_EXTERN NSString * const kGTLRDeveloperConnect_GitHubConfig_GithubApp_DeveloperConnect;
/**
 *  The Firebase GitHub Application.
 *
 *  Value: "FIREBASE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDeveloperConnect_GitHubConfig_GithubApp_Firebase;
/**
 *  GitHub App not specified.
 *
 *  Value: "GIT_HUB_APP_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDeveloperConnect_GitHubConfig_GithubApp_GitHubAppUnspecified;

// ----------------------------------------------------------------------------
// GTLRDeveloperConnect_InstallationState.stage

/**
 *  Installation process has been completed.
 *
 *  Value: "COMPLETE"
 */
FOUNDATION_EXTERN NSString * const kGTLRDeveloperConnect_InstallationState_Stage_Complete;
/**
 *  Only for GitHub Enterprise. An App creation has been requested. The user
 *  needs to confirm the creation in their GitHub enterprise host.
 *
 *  Value: "PENDING_CREATE_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRDeveloperConnect_InstallationState_Stage_PendingCreateApp;
/**
 *  User needs to follow the link to install the GitHub (or Enterprise) App.
 *
 *  Value: "PENDING_INSTALL_APP"
 */
FOUNDATION_EXTERN NSString * const kGTLRDeveloperConnect_InstallationState_Stage_PendingInstallApp;
/**
 *  User needs to authorize the GitHub (or Enterprise) App via OAuth.
 *
 *  Value: "PENDING_USER_OAUTH"
 */
FOUNDATION_EXTERN NSString * const kGTLRDeveloperConnect_InstallationState_Stage_PendingUserOauth;
/**
 *  No stage specified.
 *
 *  Value: "STAGE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRDeveloperConnect_InstallationState_Stage_StageUnspecified;

/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRDeveloperConnect_CancelOperationRequest : GTLRObject
@end


/**
 *  Message describing Connection object
 */
@interface GTLRDeveloperConnect_Connection : GTLRObject

/** Optional. Allows clients to store small amounts of arbitrary data. */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_Connection_Annotations *annotations;

/** Output only. [Output only] Create timestamp */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Optional. The crypto key configuration. This field is used by the
 *  Customer-Managed Encryption Keys (CMEK) feature.
 */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_CryptoKeyConfig *cryptoKeyConfig;

/** Output only. [Output only] Delete timestamp */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/**
 *  Optional. If disabled is set to true, functionality is disabled for this
 *  connection. Repository based API methods and webhooks processing for
 *  repositories in this connection will be disabled.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *disabled;

/**
 *  Optional. This checksum is computed by the server based on the value of
 *  other fields, and may be sent on update and delete requests to ensure the
 *  client has an up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Configuration for connections to github.com. */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_GitHubConfig *githubConfig;

/** Configuration for connections to an instance of GitHub Enterprise. */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_GitHubEnterpriseConfig *githubEnterpriseConfig;

/** Configuration for connections to gitlab.com. */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_GitLabConfig *gitlabConfig;

/** Configuration for connections to an instance of GitLab Enterprise. */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_GitLabEnterpriseConfig *gitlabEnterpriseConfig;

/** Output only. Installation state of the Connection. */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_InstallationState *installationState;

/** Optional. Labels as key value pairs */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_Connection_Labels *labels;

/**
 *  Identifier. The resource name of the connection, in the format
 *  `projects/{project}/locations/{location}/connections/{connection_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Set to true when the connection is being set up or updated in
 *  the background.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/**
 *  Output only. A system-assigned unique identifier for a the
 *  GitRepositoryLink.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. [Output only] Update timestamp */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  Optional. Allows clients to store small amounts of arbitrary data.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDeveloperConnect_Connection_Annotations : GTLRObject
@end


/**
 *  Optional. Labels as key value pairs
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDeveloperConnect_Connection_Labels : GTLRObject
@end


/**
 *  The crypto key configuration. This field is used by the Customer-managed
 *  encryption keys (CMEK) feature.
 */
@interface GTLRDeveloperConnect_CryptoKeyConfig : GTLRObject

/**
 *  Required. The name of the key which is used to encrypt/decrypt customer
 *  data. For key in Cloud KMS, the key should be in the format of `projects/ *
 *  /locations/ * /keyRings/ * /cryptoKeys/ *`.
 */
@property(nonatomic, copy, nullable) NSString *keyReference;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRDeveloperConnect_Empty : GTLRObject
@end


/**
 *  Response of fetching github installations.
 */
@interface GTLRDeveloperConnect_FetchGitHubInstallationsResponse : GTLRObject

/**
 *  List of installations available to the OAuth user (for github.com) or all
 *  the installations (for GitHub enterprise).
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDeveloperConnect_Installation *> *installations;

@end


/**
 *  Response for fetching git refs.
 */
@interface GTLRDeveloperConnect_FetchGitRefsResponse : GTLRObject

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Name of the refs fetched. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *refNames;

@end


/**
 *  Response message for FetchLinkableGitRepositories.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "linkableGitRepositories" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRDeveloperConnect_FetchLinkableGitRepositoriesResponse : GTLRCollectionObject

/**
 *  The git repositories that can be linked to the connection.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDeveloperConnect_LinkableGitRepository *> *linkableGitRepositories;

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  Message for fetching SCM read token.
 */
@interface GTLRDeveloperConnect_FetchReadTokenRequest : GTLRObject
@end


/**
 *  Message for responding to get read token.
 */
@interface GTLRDeveloperConnect_FetchReadTokenResponse : GTLRObject

/** Expiration timestamp. Can be empty if unknown or non-expiring. */
@property(nonatomic, strong, nullable) GTLRDateTime *expirationTime;

/**
 *  The git_username to specify when making a git clone with the token. For
 *  example, for GitHub GitRepositoryLinks, this would be "x-access-token"
 */
@property(nonatomic, copy, nullable) NSString *gitUsername;

/** The token content. */
@property(nonatomic, copy, nullable) NSString *token;

@end


/**
 *  Message for fetching SCM read/write token.
 */
@interface GTLRDeveloperConnect_FetchReadWriteTokenRequest : GTLRObject
@end


/**
 *  Message for responding to get read/write token.
 */
@interface GTLRDeveloperConnect_FetchReadWriteTokenResponse : GTLRObject

/** Expiration timestamp. Can be empty if unknown or non-expiring. */
@property(nonatomic, strong, nullable) GTLRDateTime *expirationTime;

/**
 *  The git_username to specify when making a git clone with the token. For
 *  example, for GitHub GitRepositoryLinks, this would be "x-access-token"
 */
@property(nonatomic, copy, nullable) NSString *gitUsername;

/** The token content. */
@property(nonatomic, copy, nullable) NSString *token;

@end


/**
 *  Configuration for connections to github.com.
 */
@interface GTLRDeveloperConnect_GitHubConfig : GTLRObject

/**
 *  Optional. GitHub App installation id.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *appInstallationId;

/**
 *  Optional. OAuth credential of the account that authorized the GitHub App. It
 *  is recommended to use a robot account instead of a human user account. The
 *  OAuth token must be tied to the GitHub App of this config.
 */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_OAuthCredential *authorizerCredential;

/**
 *  Required. Immutable. The GitHub Application that was installed to the GitHub
 *  user or organization.
 *
 *  Likely values:
 *    @arg @c kGTLRDeveloperConnect_GitHubConfig_GithubApp_DeveloperConnect The
 *        Developer Connect GitHub Application. (Value: "DEVELOPER_CONNECT")
 *    @arg @c kGTLRDeveloperConnect_GitHubConfig_GithubApp_Firebase The Firebase
 *        GitHub Application. (Value: "FIREBASE")
 *    @arg @c kGTLRDeveloperConnect_GitHubConfig_GithubApp_GitHubAppUnspecified
 *        GitHub App not specified. (Value: "GIT_HUB_APP_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *githubApp;

/**
 *  Output only. The URI to navigate to in order to manage the installation
 *  associated with this GitHubConfig.
 */
@property(nonatomic, copy, nullable) NSString *installationUri;

@end


/**
 *  Configuration for connections to an instance of GitHub Enterprise.
 */
@interface GTLRDeveloperConnect_GitHubEnterpriseConfig : GTLRObject

/**
 *  Optional. ID of the GitHub App created from the manifest.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *appId;

/**
 *  Optional. ID of the installation of the GitHub App.
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *appInstallationId;

/** Output only. The URL-friendly name of the GitHub App. */
@property(nonatomic, copy, nullable) NSString *appSlug;

/** Required. The URI of the GitHub Enterprise host this connection is for. */
@property(nonatomic, copy, nullable) NSString *hostUri;

/**
 *  Output only. The URI to navigate to in order to manage the installation
 *  associated with this GitHubEnterpriseConfig.
 */
@property(nonatomic, copy, nullable) NSString *installationUri;

/**
 *  Optional. SecretManager resource containing the private key of the GitHub
 *  App, formatted as `projects/ * /secrets/ * /versions/ *`.
 */
@property(nonatomic, copy, nullable) NSString *privateKeySecretVersion;

/** Output only. GitHub Enterprise version installed at the host_uri. */
@property(nonatomic, copy, nullable) NSString *serverVersion;

/**
 *  Optional. Configuration for using Service Directory to privately connect to
 *  a GitHub Enterprise server. This should only be set if the GitHub Enterprise
 *  server is hosted on-premises and not reachable by public internet. If this
 *  field is left empty, calls to the GitHub Enterprise server will be made over
 *  the public internet.
 */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_ServiceDirectoryConfig *serviceDirectoryConfig;

/** Optional. SSL certificate to use for requests to GitHub Enterprise. */
@property(nonatomic, copy, nullable) NSString *sslCaCertificate;

/**
 *  Optional. SecretManager resource containing the webhook secret of the GitHub
 *  App, formatted as `projects/ * /secrets/ * /versions/ *`.
 */
@property(nonatomic, copy, nullable) NSString *webhookSecretSecretVersion;

@end


/**
 *  Configuration for connections to gitlab.com.
 */
@interface GTLRDeveloperConnect_GitLabConfig : GTLRObject

/**
 *  Required. A GitLab personal access token with the minimum `api` scope access
 *  and a minimum role of `maintainer`. The GitLab Projects visible to this
 *  Personal Access Token will control which Projects Developer Connect has
 *  access to.
 */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_UserCredential *authorizerCredential;

/**
 *  Required. A GitLab personal access token with the minimum `read_api` scope
 *  access and a minimum role of `reporter`. The GitLab Projects visible to this
 *  Personal Access Token will control which Projects Developer Connect has
 *  access to.
 */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_UserCredential *readAuthorizerCredential;

/**
 *  Required. Immutable. SecretManager resource containing the webhook secret of
 *  a GitLab project, formatted as `projects/ * /secrets/ * /versions/ *`. This
 *  is used to validate webhooks.
 */
@property(nonatomic, copy, nullable) NSString *webhookSecretSecretVersion;

@end


/**
 *  Configuration for connections to an instance of GitLab Enterprise.
 */
@interface GTLRDeveloperConnect_GitLabEnterpriseConfig : GTLRObject

/**
 *  Required. A GitLab personal access token with the minimum `api` scope access
 *  and a minimum role of `maintainer`. The GitLab Projects visible to this
 *  Personal Access Token will control which Projects Developer Connect has
 *  access to.
 */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_UserCredential *authorizerCredential;

/** Required. The URI of the GitLab Enterprise host this connection is for. */
@property(nonatomic, copy, nullable) NSString *hostUri;

/**
 *  Required. A GitLab personal access token with the minimum `read_api` scope
 *  access and a minimum role of `reporter`. The GitLab Projects visible to this
 *  Personal Access Token will control which Projects Developer Connect has
 *  access to.
 */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_UserCredential *readAuthorizerCredential;

/**
 *  Output only. Version of the GitLab Enterprise server running on the
 *  `host_uri`.
 */
@property(nonatomic, copy, nullable) NSString *serverVersion;

/**
 *  Optional. Configuration for using Service Directory to privately connect to
 *  a GitLab Enterprise instance. This should only be set if the GitLab
 *  Enterprise server is hosted on-premises and not reachable by public
 *  internet. If this field is left empty, calls to the GitLab Enterprise server
 *  will be made over the public internet.
 */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_ServiceDirectoryConfig *serviceDirectoryConfig;

/**
 *  Optional. SSL Certificate Authority certificate to use for requests to
 *  GitLab Enterprise instance.
 */
@property(nonatomic, copy, nullable) NSString *sslCaCertificate;

/**
 *  Required. Immutable. SecretManager resource containing the webhook secret of
 *  a GitLab project, formatted as `projects/ * /secrets/ * /versions/ *`. This
 *  is used to validate webhooks.
 */
@property(nonatomic, copy, nullable) NSString *webhookSecretSecretVersion;

@end


/**
 *  Message describing the GitRepositoryLink object
 */
@interface GTLRDeveloperConnect_GitRepositoryLink : GTLRObject

/** Optional. Allows clients to store small amounts of arbitrary data. */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_GitRepositoryLink_Annotations *annotations;

/** Required. Git Clone URI. */
@property(nonatomic, copy, nullable) NSString *cloneUri;

/** Output only. [Output only] Create timestamp */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. [Output only] Delete timestamp */
@property(nonatomic, strong, nullable) GTLRDateTime *deleteTime;

/**
 *  Optional. This checksum is computed by the server based on the value of
 *  other fields, and may be sent on update and delete requests to ensure the
 *  client has an up-to-date value before proceeding.
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/** Optional. Labels as key value pairs */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_GitRepositoryLink_Labels *labels;

/**
 *  Identifier. Resource name of the repository, in the format `projects/ *
 *  /locations/ * /connections/ * /gitRepositoryLinks/ *`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. Set to true when the connection is being set up or updated in
 *  the background.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *reconciling;

/**
 *  Output only. A system-assigned unique identifier for a the
 *  GitRepositoryLink.
 */
@property(nonatomic, copy, nullable) NSString *uid;

/** Output only. [Output only] Update timestamp */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

/** Output only. External ID of the webhook created for the repository. */
@property(nonatomic, copy, nullable) NSString *webhookId;

@end


/**
 *  Optional. Allows clients to store small amounts of arbitrary data.
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDeveloperConnect_GitRepositoryLink_Annotations : GTLRObject
@end


/**
 *  Optional. Labels as key value pairs
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDeveloperConnect_GitRepositoryLink_Labels : GTLRObject
@end


/**
 *  Represents an installation of the GitHub App.
 */
@interface GTLRDeveloperConnect_Installation : GTLRObject

/**
 *  ID of the installation in GitHub.
 *
 *  identifier property maps to 'id' in JSON (to avoid Objective C's 'id').
 *
 *  Uses NSNumber of longLongValue.
 */
@property(nonatomic, strong, nullable) NSNumber *identifier;

/** Name of the GitHub user or organization that owns this installation. */
@property(nonatomic, copy, nullable) NSString *name;

/** Either "user" or "organization". */
@property(nonatomic, copy, nullable) NSString *type;

@end


/**
 *  Describes stage and necessary actions to be taken by the user to complete
 *  the installation. Used for GitHub and GitHub Enterprise based connections.
 */
@interface GTLRDeveloperConnect_InstallationState : GTLRObject

/**
 *  Output only. Link to follow for next action. Empty string if the
 *  installation is already complete.
 */
@property(nonatomic, copy, nullable) NSString *actionUri;

/**
 *  Output only. Message of what the user should do next to continue the
 *  installation. Empty string if the installation is already complete.
 */
@property(nonatomic, copy, nullable) NSString *message;

/**
 *  Output only. Current step of the installation process.
 *
 *  Likely values:
 *    @arg @c kGTLRDeveloperConnect_InstallationState_Stage_Complete
 *        Installation process has been completed. (Value: "COMPLETE")
 *    @arg @c kGTLRDeveloperConnect_InstallationState_Stage_PendingCreateApp
 *        Only for GitHub Enterprise. An App creation has been requested. The
 *        user needs to confirm the creation in their GitHub enterprise host.
 *        (Value: "PENDING_CREATE_APP")
 *    @arg @c kGTLRDeveloperConnect_InstallationState_Stage_PendingInstallApp
 *        User needs to follow the link to install the GitHub (or Enterprise)
 *        App. (Value: "PENDING_INSTALL_APP")
 *    @arg @c kGTLRDeveloperConnect_InstallationState_Stage_PendingUserOauth
 *        User needs to authorize the GitHub (or Enterprise) App via OAuth.
 *        (Value: "PENDING_USER_OAUTH")
 *    @arg @c kGTLRDeveloperConnect_InstallationState_Stage_StageUnspecified No
 *        stage specified. (Value: "STAGE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *stage;

@end


/**
 *  LinkableGitRepository represents a git repository that can be linked to a
 *  connection.
 */
@interface GTLRDeveloperConnect_LinkableGitRepository : GTLRObject

/** The clone uri of the repository. */
@property(nonatomic, copy, nullable) NSString *cloneUri;

@end


/**
 *  Message for response to listing Connections
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "connections" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDeveloperConnect_ListConnectionsResponse : GTLRCollectionObject

/**
 *  The list of Connection
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDeveloperConnect_Connection *> *connections;

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  Message for response to listing GitRepositoryLinks
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "gitRepositoryLinks" property. If returned as the result of a
 *        query, it should support automatic pagination (when @c
 *        shouldFetchNextPages is enabled).
 */
@interface GTLRDeveloperConnect_ListGitRepositoryLinksResponse : GTLRCollectionObject

/**
 *  The list of GitRepositoryLinks
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDeveloperConnect_GitRepositoryLink *> *gitRepositoryLinks;

/** A token identifying a page of results the server should return. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/** Locations that could not be reached. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *unreachable;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDeveloperConnect_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDeveloperConnect_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRDeveloperConnect_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDeveloperConnect_Operation *> *operations;

@end


/**
 *  A resource that represents a Google Cloud location.
 */
@interface GTLRDeveloperConnect_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRDeveloperConnect_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDeveloperConnect_Location_Metadata : GTLRObject
@end


/**
 *  Represents an OAuth token of the account that authorized the Connection, and
 *  associated metadata.
 */
@interface GTLRDeveloperConnect_OAuthCredential : GTLRObject

/**
 *  Required. A SecretManager resource containing the OAuth token that
 *  authorizes the connection. Format: `projects/ * /secrets/ * /versions/ *`.
 */
@property(nonatomic, copy, nullable) NSString *oauthTokenSecretVersion;

/** Output only. The username associated with this token. */
@property(nonatomic, copy, nullable) NSString *username;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRDeveloperConnect_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRDeveloperConnect_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDeveloperConnect_Operation_Metadata : GTLRObject
@end


/**
 *  The normal, successful response of the operation. If the original method
 *  returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDeveloperConnect_Operation_Response : GTLRObject
@end


/**
 *  Represents the metadata of the long-running operation.
 */
@interface GTLRDeveloperConnect_OperationMetadata : GTLRObject

/** Output only. API version used to start the operation. */
@property(nonatomic, copy, nullable) NSString *apiVersion;

/** Output only. The time the operation was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/** Output only. The time the operation finished running. */
@property(nonatomic, strong, nullable) GTLRDateTime *endTime;

/**
 *  Output only. Identifies whether the user has requested cancellation of the
 *  operation. Operations that have been cancelled successfully have
 *  Operation.error value with a google.rpc.Status.code of 1, corresponding to
 *  `Code.CANCELLED`.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *requestedCancellation;

/** Output only. Human-readable status of the operation, if any. */
@property(nonatomic, copy, nullable) NSString *statusMessage;

/**
 *  Output only. Server-defined resource path for the target of the operation.
 */
@property(nonatomic, copy, nullable) NSString *target;

/** Output only. Name of the verb executed by the operation. */
@property(nonatomic, copy, nullable) NSString *verb;

@end


/**
 *  ServiceDirectoryConfig represents Service Directory configuration for a
 *  connection.
 */
@interface GTLRDeveloperConnect_ServiceDirectoryConfig : GTLRObject

/**
 *  Required. The Service Directory service name. Format:
 *  projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRDeveloperConnect_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRDeveloperConnect_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRDeveloperConnect_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRDeveloperConnect_Status_Details_Item : GTLRObject
@end


/**
 *  Represents a personal access token that authorized the Connection, and
 *  associated metadata.
 */
@interface GTLRDeveloperConnect_UserCredential : GTLRObject

/** Output only. The username associated with this token. */
@property(nonatomic, copy, nullable) NSString *username;

/**
 *  Required. A SecretManager resource containing the user token that authorizes
 *  the Developer Connect connection. Format: `projects/ * /secrets/ *
 *  /versions/ *`.
 */
@property(nonatomic, copy, nullable) NSString *userTokenSecretVersion;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
