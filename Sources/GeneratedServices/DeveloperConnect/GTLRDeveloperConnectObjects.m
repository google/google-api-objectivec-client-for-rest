// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Developer Connect API (developerconnect/v1)
// Description:
//   Connect third-party source code management to Google
// Documentation:
//   http://cloud.google.com/developer-connect/docs/overview

#import <GoogleAPIClientForREST/GTLRDeveloperConnectObjects.h>

// ----------------------------------------------------------------------------
// Constants

// GTLRDeveloperConnect_GitHubConfig.githubApp
NSString * const kGTLRDeveloperConnect_GitHubConfig_GithubApp_DeveloperConnect = @"DEVELOPER_CONNECT";
NSString * const kGTLRDeveloperConnect_GitHubConfig_GithubApp_Firebase = @"FIREBASE";
NSString * const kGTLRDeveloperConnect_GitHubConfig_GithubApp_GitHubAppUnspecified = @"GIT_HUB_APP_UNSPECIFIED";

// GTLRDeveloperConnect_InstallationState.stage
NSString * const kGTLRDeveloperConnect_InstallationState_Stage_Complete = @"COMPLETE";
NSString * const kGTLRDeveloperConnect_InstallationState_Stage_PendingCreateApp = @"PENDING_CREATE_APP";
NSString * const kGTLRDeveloperConnect_InstallationState_Stage_PendingInstallApp = @"PENDING_INSTALL_APP";
NSString * const kGTLRDeveloperConnect_InstallationState_Stage_PendingUserOauth = @"PENDING_USER_OAUTH";
NSString * const kGTLRDeveloperConnect_InstallationState_Stage_StageUnspecified = @"STAGE_UNSPECIFIED";

// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_CancelOperationRequest
//

@implementation GTLRDeveloperConnect_CancelOperationRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_Connection
//

@implementation GTLRDeveloperConnect_Connection
@dynamic annotations, createTime, cryptoKeyConfig, deleteTime, disabled, ETag,
         githubConfig, githubEnterpriseConfig, gitlabConfig,
         gitlabEnterpriseConfig, installationState, labels, name, reconciling,
         uid, updateTime;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_Connection_Annotations
//

@implementation GTLRDeveloperConnect_Connection_Annotations

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_Connection_Labels
//

@implementation GTLRDeveloperConnect_Connection_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_CryptoKeyConfig
//

@implementation GTLRDeveloperConnect_CryptoKeyConfig
@dynamic keyReference;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_Empty
//

@implementation GTLRDeveloperConnect_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_FetchGitHubInstallationsResponse
//

@implementation GTLRDeveloperConnect_FetchGitHubInstallationsResponse
@dynamic installations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"installations" : [GTLRDeveloperConnect_Installation class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_FetchGitRefsResponse
//

@implementation GTLRDeveloperConnect_FetchGitRefsResponse
@dynamic nextPageToken, refNames;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"refNames" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_FetchLinkableGitRepositoriesResponse
//

@implementation GTLRDeveloperConnect_FetchLinkableGitRepositoriesResponse
@dynamic linkableGitRepositories, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"linkableGitRepositories" : [GTLRDeveloperConnect_LinkableGitRepository class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"linkableGitRepositories";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_FetchReadTokenRequest
//

@implementation GTLRDeveloperConnect_FetchReadTokenRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_FetchReadTokenResponse
//

@implementation GTLRDeveloperConnect_FetchReadTokenResponse
@dynamic expirationTime, gitUsername, token;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_FetchReadWriteTokenRequest
//

@implementation GTLRDeveloperConnect_FetchReadWriteTokenRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_FetchReadWriteTokenResponse
//

@implementation GTLRDeveloperConnect_FetchReadWriteTokenResponse
@dynamic expirationTime, gitUsername, token;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_GitHubConfig
//

@implementation GTLRDeveloperConnect_GitHubConfig
@dynamic appInstallationId, authorizerCredential, githubApp, installationUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_GitHubEnterpriseConfig
//

@implementation GTLRDeveloperConnect_GitHubEnterpriseConfig
@dynamic appId, appInstallationId, appSlug, hostUri, installationUri,
         privateKeySecretVersion, serverVersion, serviceDirectoryConfig,
         sslCaCertificate, webhookSecretSecretVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_GitLabConfig
//

@implementation GTLRDeveloperConnect_GitLabConfig
@dynamic authorizerCredential, readAuthorizerCredential,
         webhookSecretSecretVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_GitLabEnterpriseConfig
//

@implementation GTLRDeveloperConnect_GitLabEnterpriseConfig
@dynamic authorizerCredential, hostUri, readAuthorizerCredential, serverVersion,
         serviceDirectoryConfig, sslCaCertificate, webhookSecretSecretVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_GitRepositoryLink
//

@implementation GTLRDeveloperConnect_GitRepositoryLink
@dynamic annotations, cloneUri, createTime, deleteTime, ETag, labels, name,
         reconciling, uid, updateTime, webhookId;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_GitRepositoryLink_Annotations
//

@implementation GTLRDeveloperConnect_GitRepositoryLink_Annotations

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_GitRepositoryLink_Labels
//

@implementation GTLRDeveloperConnect_GitRepositoryLink_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_Installation
//

@implementation GTLRDeveloperConnect_Installation
@dynamic identifier, name, type;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"identifier" : @"id" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_InstallationState
//

@implementation GTLRDeveloperConnect_InstallationState
@dynamic actionUri, message, stage;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_LinkableGitRepository
//

@implementation GTLRDeveloperConnect_LinkableGitRepository
@dynamic cloneUri;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_ListConnectionsResponse
//

@implementation GTLRDeveloperConnect_ListConnectionsResponse
@dynamic connections, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"connections" : [GTLRDeveloperConnect_Connection class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"connections";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_ListGitRepositoryLinksResponse
//

@implementation GTLRDeveloperConnect_ListGitRepositoryLinksResponse
@dynamic gitRepositoryLinks, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"gitRepositoryLinks" : [GTLRDeveloperConnect_GitRepositoryLink class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"gitRepositoryLinks";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_ListLocationsResponse
//

@implementation GTLRDeveloperConnect_ListLocationsResponse
@dynamic locations, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"locations" : [GTLRDeveloperConnect_Location class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"locations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_ListOperationsResponse
//

@implementation GTLRDeveloperConnect_ListOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRDeveloperConnect_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_Location
//

@implementation GTLRDeveloperConnect_Location
@dynamic displayName, labels, locationId, metadata, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_Location_Labels
//

@implementation GTLRDeveloperConnect_Location_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_Location_Metadata
//

@implementation GTLRDeveloperConnect_Location_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_OAuthCredential
//

@implementation GTLRDeveloperConnect_OAuthCredential
@dynamic oauthTokenSecretVersion, username;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_Operation
//

@implementation GTLRDeveloperConnect_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_Operation_Metadata
//

@implementation GTLRDeveloperConnect_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_Operation_Response
//

@implementation GTLRDeveloperConnect_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_OperationMetadata
//

@implementation GTLRDeveloperConnect_OperationMetadata
@dynamic apiVersion, createTime, endTime, requestedCancellation, statusMessage,
         target, verb;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_ServiceDirectoryConfig
//

@implementation GTLRDeveloperConnect_ServiceDirectoryConfig
@dynamic service;
@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_Status
//

@implementation GTLRDeveloperConnect_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRDeveloperConnect_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_Status_Details_Item
//

@implementation GTLRDeveloperConnect_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRDeveloperConnect_UserCredential
//

@implementation GTLRDeveloperConnect_UserCredential
@dynamic username, userTokenSecretVersion;
@end
