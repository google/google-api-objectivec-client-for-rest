// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Analytics Data API (analyticsdata/v1beta)
// Description:
//   Accesses report data in Google Analytics.
// Documentation:
//   https://developers.google.com/analytics/devguides/reporting/data/v1/

#import <GoogleAPIClientForREST/GTLRAnalyticsDataQuery.h>

@implementation GTLRAnalyticsDataQuery

@dynamic fields;

@end

@implementation GTLRAnalyticsDataQuery_PropertiesBatchRunPivotReports

@dynamic property;

+ (instancetype)queryWithObject:(GTLRAnalyticsData_BatchRunPivotReportsRequest *)object
                       property:(NSString *)property {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"property" ];
  NSString *pathURITemplate = @"v1beta/{+property}:batchRunPivotReports";
  GTLRAnalyticsDataQuery_PropertiesBatchRunPivotReports *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.property = property;
  query.expectedObjectClass = [GTLRAnalyticsData_BatchRunPivotReportsResponse class];
  query.loggingName = @"analyticsdata.properties.batchRunPivotReports";
  return query;
}

@end

@implementation GTLRAnalyticsDataQuery_PropertiesBatchRunReports

@dynamic property;

+ (instancetype)queryWithObject:(GTLRAnalyticsData_BatchRunReportsRequest *)object
                       property:(NSString *)property {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"property" ];
  NSString *pathURITemplate = @"v1beta/{+property}:batchRunReports";
  GTLRAnalyticsDataQuery_PropertiesBatchRunReports *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.property = property;
  query.expectedObjectClass = [GTLRAnalyticsData_BatchRunReportsResponse class];
  query.loggingName = @"analyticsdata.properties.batchRunReports";
  return query;
}

@end

@implementation GTLRAnalyticsDataQuery_PropertiesCheckCompatibility

@dynamic property;

+ (instancetype)queryWithObject:(GTLRAnalyticsData_CheckCompatibilityRequest *)object
                       property:(NSString *)property {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"property" ];
  NSString *pathURITemplate = @"v1beta/{+property}:checkCompatibility";
  GTLRAnalyticsDataQuery_PropertiesCheckCompatibility *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.property = property;
  query.expectedObjectClass = [GTLRAnalyticsData_CheckCompatibilityResponse class];
  query.loggingName = @"analyticsdata.properties.checkCompatibility";
  return query;
}

@end

@implementation GTLRAnalyticsDataQuery_PropertiesGetMetadata

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1beta/{+name}";
  GTLRAnalyticsDataQuery_PropertiesGetMetadata *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRAnalyticsData_Metadata class];
  query.loggingName = @"analyticsdata.properties.getMetadata";
  return query;
}

@end

@implementation GTLRAnalyticsDataQuery_PropertiesRunPivotReport

@dynamic property;

+ (instancetype)queryWithObject:(GTLRAnalyticsData_RunPivotReportRequest *)object
                       property:(NSString *)property {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"property" ];
  NSString *pathURITemplate = @"v1beta/{+property}:runPivotReport";
  GTLRAnalyticsDataQuery_PropertiesRunPivotReport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.property = property;
  query.expectedObjectClass = [GTLRAnalyticsData_RunPivotReportResponse class];
  query.loggingName = @"analyticsdata.properties.runPivotReport";
  return query;
}

@end

@implementation GTLRAnalyticsDataQuery_PropertiesRunRealtimeReport

@dynamic property;

+ (instancetype)queryWithObject:(GTLRAnalyticsData_RunRealtimeReportRequest *)object
                       property:(NSString *)property {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"property" ];
  NSString *pathURITemplate = @"v1beta/{+property}:runRealtimeReport";
  GTLRAnalyticsDataQuery_PropertiesRunRealtimeReport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.property = property;
  query.expectedObjectClass = [GTLRAnalyticsData_RunRealtimeReportResponse class];
  query.loggingName = @"analyticsdata.properties.runRealtimeReport";
  return query;
}

@end

@implementation GTLRAnalyticsDataQuery_PropertiesRunReport

@dynamic property;

+ (instancetype)queryWithObject:(GTLRAnalyticsData_RunReportRequest *)object
                       property:(NSString *)property {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"property" ];
  NSString *pathURITemplate = @"v1beta/{+property}:runReport";
  GTLRAnalyticsDataQuery_PropertiesRunReport *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.property = property;
  query.expectedObjectClass = [GTLRAnalyticsData_RunReportResponse class];
  query.loggingName = @"analyticsdata.properties.runReport";
  return query;
}

@end
