// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Service Directory API (servicedirectory/v1)
// Description:
//   Service Directory is a platform for discovering, publishing, and connecting
//   services.
// Documentation:
//   https://cloud.google.com/service-directory

#import <GoogleAPIClientForREST/GTLRServiceDirectoryQuery.h>

@implementation GTLRServiceDirectoryQuery

@dynamic fields;

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRServiceDirectoryQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRServiceDirectory_Location class];
  query.loggingName = @"servicedirectory.projects.locations.get";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRServiceDirectoryQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRServiceDirectory_ListLocationsResponse class];
  query.loggingName = @"servicedirectory.projects.locations.list";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesCreate

@dynamic namespaceId, parent;

+ (instancetype)queryWithObject:(GTLRServiceDirectory_Namespace *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/namespaces";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRServiceDirectory_Namespace class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.create";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRServiceDirectory_Empty class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.delete";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRServiceDirectory_Namespace class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.get";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesGetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRServiceDirectory_GetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRServiceDirectory_Policy class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.getIamPolicy";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/namespaces";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRServiceDirectory_ListNamespacesResponse class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.list";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRServiceDirectory_Namespace *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRServiceDirectory_Namespace class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.patch";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesCreate

@dynamic parent, serviceId;

+ (instancetype)queryWithObject:(GTLRServiceDirectory_Service *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/services";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRServiceDirectory_Service class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.services.create";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRServiceDirectory_Empty class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.services.delete";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsCreate

@dynamic endpointId, parent;

+ (instancetype)queryWithObject:(GTLRServiceDirectory_Endpoint *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/endpoints";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRServiceDirectory_Endpoint class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.services.endpoints.create";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRServiceDirectory_Empty class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.services.endpoints.delete";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRServiceDirectory_Endpoint class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.services.endpoints.get";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/endpoints";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRServiceDirectory_ListEndpointsResponse class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.services.endpoints.list";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRServiceDirectory_Endpoint *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesEndpointsPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRServiceDirectory_Endpoint class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.services.endpoints.patch";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRServiceDirectory_Service class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.services.get";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesGetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRServiceDirectory_GetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRServiceDirectory_Policy class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.services.getIamPolicy";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/services";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRServiceDirectory_ListServicesResponse class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.services.list";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesPatch

@dynamic name, updateMask;

+ (instancetype)queryWithObject:(GTLRServiceDirectory_Service *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRServiceDirectory_Service class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.services.patch";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesResolve

@dynamic name;

+ (instancetype)queryWithObject:(GTLRServiceDirectory_ResolveServiceRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:resolve";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesResolve *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRServiceDirectory_ResolveServiceResponse class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.services.resolve";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRServiceDirectory_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRServiceDirectory_Policy class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.services.setIamPolicy";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRServiceDirectory_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesServicesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRServiceDirectory_TestIamPermissionsResponse class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.services.testIamPermissions";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRServiceDirectory_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRServiceDirectory_Policy class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.setIamPolicy";
  return query;
}

@end

@implementation GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRServiceDirectory_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRServiceDirectoryQuery_ProjectsLocationsNamespacesTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRServiceDirectory_TestIamPermissionsResponse class];
  query.loggingName = @"servicedirectory.projects.locations.namespaces.testIamPermissions";
  return query;
}

@end
