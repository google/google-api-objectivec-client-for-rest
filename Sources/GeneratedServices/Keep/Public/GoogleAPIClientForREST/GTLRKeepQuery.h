// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Keep API (keep/v1)
// Description:
//   The Google Keep API is used in an enterprise environment to manage Google
//   Keep content and resolve issues identified by cloud security software.
// Documentation:
//   https://developers.google.com/keep/api

#import <GoogleAPIClientForREST/GTLRQuery.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

#import "GTLRKeepObjects.h"

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

/**
 *  Parent class for other Keep query classes.
 */
@interface GTLRKeepQuery : GTLRQuery

/** Selector specifying which fields to include in a partial response. */
@property(nonatomic, copy, nullable) NSString *fields;

@end

/**
 *  Gets an attachment. To download attachment media via REST requires the
 *  alt=media query parameter. Returns a 400 bad request error if attachment
 *  media is not available in the requested MIME type.
 *
 *  Method: keep.media.download
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeKeep
 *    @c kGTLRAuthScopeKeepReadonly
 */
@interface GTLRKeepQuery_MediaDownload : GTLRKeepQuery

/**
 *  The IANA MIME type format requested. The requested MIME type must be one
 *  specified in the attachment.mime_type. Required when downloading attachment
 *  media and ignored otherwise.
 */
@property(nonatomic, copy, nullable) NSString *mimeType;

/** Required. The name of the attachment. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRKeep_Attachment.
 *
 *  Gets an attachment. To download attachment media via REST requires the
 *  alt=media query parameter. Returns a 400 bad request error if attachment
 *  media is not available in the requested MIME type.
 *
 *  @param name Required. The name of the attachment.
 *
 *  @return GTLRKeepQuery_MediaDownload
 */
+ (instancetype)queryWithName:(NSString *)name;

/**
 *  Fetches the requested resource data as a @c GTLRDataObject.
 *
 *  Gets an attachment. To download attachment media via REST requires the
 *  alt=media query parameter. Returns a 400 bad request error if attachment
 *  media is not available in the requested MIME type.
 *
 *  @param name Required. The name of the attachment.
 *
 *  @return GTLRKeepQuery_MediaDownload
 */
+ (instancetype)queryForMediaWithName:(NSString *)name;

@end

/**
 *  Creates a new note.
 *
 *  Method: keep.notes.create
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeKeep
 */
@interface GTLRKeepQuery_NotesCreate : GTLRKeepQuery

/**
 *  Fetches a @c GTLRKeep_Note.
 *
 *  Creates a new note.
 *
 *  @param object The @c GTLRKeep_Note to include in the query.
 *
 *  @return GTLRKeepQuery_NotesCreate
 */
+ (instancetype)queryWithObject:(GTLRKeep_Note *)object;

@end

/**
 *  Deletes a note. Caller must have the `OWNER` role on the note to delete.
 *  Deleting a note removes the resource immediately and cannot be undone. Any
 *  collaborators will lose access to the note.
 *
 *  Method: keep.notes.delete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeKeep
 */
@interface GTLRKeepQuery_NotesDelete : GTLRKeepQuery

/** Required. Name of the note to delete. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRKeep_Empty.
 *
 *  Deletes a note. Caller must have the `OWNER` role on the note to delete.
 *  Deleting a note removes the resource immediately and cannot be undone. Any
 *  collaborators will lose access to the note.
 *
 *  @param name Required. Name of the note to delete.
 *
 *  @return GTLRKeepQuery_NotesDelete
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Gets a note.
 *
 *  Method: keep.notes.get
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeKeep
 *    @c kGTLRAuthScopeKeepReadonly
 */
@interface GTLRKeepQuery_NotesGet : GTLRKeepQuery

/** Required. Name of the resource. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Fetches a @c GTLRKeep_Note.
 *
 *  Gets a note.
 *
 *  @param name Required. Name of the resource.
 *
 *  @return GTLRKeepQuery_NotesGet
 */
+ (instancetype)queryWithName:(NSString *)name;

@end

/**
 *  Lists notes. Every list call returns a page of results with `page_size` as
 *  the upper bound of returned items. A `page_size` of zero allows the server
 *  to choose the upper bound. The ListNotesResponse contains at most
 *  `page_size` entries. If there are more things left to list, it provides a
 *  `next_page_token` value. (Page tokens are opaque values.) To get the next
 *  page of results, copy the result's `next_page_token` into the next request's
 *  `page_token`. Repeat until the `next_page_token` returned with a page of
 *  results is empty. ListNotes return consistent results in the face of
 *  concurrent changes, or signals that it cannot with an ABORTED error.
 *
 *  Method: keep.notes.list
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeKeep
 *    @c kGTLRAuthScopeKeepReadonly
 */
@interface GTLRKeepQuery_NotesList : GTLRKeepQuery

/**
 *  Filter for list results. If no filter is supplied, the `trashed` filter is
 *  applied by default. Valid fields to filter by are: `create_time`,
 *  `update_time`, `trash_time`, and `trashed`. Filter syntax follows the
 *  [Google AIP filtering spec](https://aip.dev/160).
 */
@property(nonatomic, copy, nullable) NSString *filter;

/** The maximum number of results to return. */
@property(nonatomic, assign) NSInteger pageSize;

/** The previous page's `next_page_token` field. */
@property(nonatomic, copy, nullable) NSString *pageToken;

/**
 *  Fetches a @c GTLRKeep_ListNotesResponse.
 *
 *  Lists notes. Every list call returns a page of results with `page_size` as
 *  the upper bound of returned items. A `page_size` of zero allows the server
 *  to choose the upper bound. The ListNotesResponse contains at most
 *  `page_size` entries. If there are more things left to list, it provides a
 *  `next_page_token` value. (Page tokens are opaque values.) To get the next
 *  page of results, copy the result's `next_page_token` into the next request's
 *  `page_token`. Repeat until the `next_page_token` returned with a page of
 *  results is empty. ListNotes return consistent results in the face of
 *  concurrent changes, or signals that it cannot with an ABORTED error.
 *
 *  @return GTLRKeepQuery_NotesList
 *
 *  @note Automatic pagination will be done when @c shouldFetchNextPages is
 *        enabled. See @c shouldFetchNextPages on @c GTLRService for more
 *        information.
 */
+ (instancetype)query;

@end

/**
 *  Creates one or more permissions on the note. Only permissions with the
 *  `WRITER` role may be created. If adding any permission fails, then the
 *  entire request fails and no changes are made.
 *
 *  Method: keep.notes.permissions.batchCreate
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeKeep
 */
@interface GTLRKeepQuery_NotesPermissionsBatchCreate : GTLRKeepQuery

/**
 *  The parent resource shared by all Permissions being created. Format:
 *  `notes/{note}` If this is set, the parent field in the CreatePermission
 *  messages must either be empty or match this field.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRKeep_BatchCreatePermissionsResponse.
 *
 *  Creates one or more permissions on the note. Only permissions with the
 *  `WRITER` role may be created. If adding any permission fails, then the
 *  entire request fails and no changes are made.
 *
 *  @param object The @c GTLRKeep_BatchCreatePermissionsRequest to include in
 *    the query.
 *  @param parent The parent resource shared by all Permissions being created.
 *    Format: `notes/{note}` If this is set, the parent field in the
 *    CreatePermission messages must either be empty or match this field.
 *
 *  @return GTLRKeepQuery_NotesPermissionsBatchCreate
 */
+ (instancetype)queryWithObject:(GTLRKeep_BatchCreatePermissionsRequest *)object
                         parent:(NSString *)parent;

@end

/**
 *  Deletes one or more permissions on the note. The specified entities will
 *  immediately lose access. A permission with the `OWNER` role can't be
 *  removed. If removing a permission fails, then the entire request fails and
 *  no changes are made. Returns a 400 bad request error if a specified
 *  permission does not exist on the note.
 *
 *  Method: keep.notes.permissions.batchDelete
 *
 *  Authorization scope(s):
 *    @c kGTLRAuthScopeKeep
 */
@interface GTLRKeepQuery_NotesPermissionsBatchDelete : GTLRKeepQuery

/**
 *  The parent resource shared by all permissions being deleted. Format:
 *  `notes/{note}` If this is set, the parent of all of the permissions
 *  specified in the DeletePermissionRequest messages must match this field.
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Fetches a @c GTLRKeep_Empty.
 *
 *  Deletes one or more permissions on the note. The specified entities will
 *  immediately lose access. A permission with the `OWNER` role can't be
 *  removed. If removing a permission fails, then the entire request fails and
 *  no changes are made. Returns a 400 bad request error if a specified
 *  permission does not exist on the note.
 *
 *  @param object The @c GTLRKeep_BatchDeletePermissionsRequest to include in
 *    the query.
 *  @param parent The parent resource shared by all permissions being deleted.
 *    Format: `notes/{note}` If this is set, the parent of all of the
 *    permissions specified in the DeletePermissionRequest messages must match
 *    this field.
 *
 *  @return GTLRKeepQuery_NotesPermissionsBatchDelete
 */
+ (instancetype)queryWithObject:(GTLRKeep_BatchDeletePermissionsRequest *)object
                         parent:(NSString *)parent;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
