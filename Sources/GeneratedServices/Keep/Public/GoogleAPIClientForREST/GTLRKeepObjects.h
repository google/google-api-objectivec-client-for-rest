// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Google Keep API (keep/v1)
// Description:
//   The Google Keep API is used in an enterprise environment to manage Google
//   Keep content and resolve issues identified by cloud security software.
// Documentation:
//   https://developers.google.com/keep/api

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRKeep_Attachment;
@class GTLRKeep_CreatePermissionRequest;
@class GTLRKeep_Family;
@class GTLRKeep_Group;
@class GTLRKeep_ListContent;
@class GTLRKeep_ListItem;
@class GTLRKeep_Note;
@class GTLRKeep_Permission;
@class GTLRKeep_Section;
@class GTLRKeep_TextContent;
@class GTLRKeep_User;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRKeep_Permission.role

/**
 *  A role granting full access. This role cannot be added or removed. Defined
 *  by the creator of the note.
 *
 *  Value: "OWNER"
 */
FOUNDATION_EXTERN NSString * const kGTLRKeep_Permission_Role_Owner;
/**
 *  An undefined role.
 *
 *  Value: "ROLE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRKeep_Permission_Role_RoleUnspecified;
/**
 *  A role granting the ability to contribute content and modify note
 *  permissions.
 *
 *  Value: "WRITER"
 */
FOUNDATION_EXTERN NSString * const kGTLRKeep_Permission_Role_Writer;

/**
 *  An attachment to a note.
 */
@interface GTLRKeep_Attachment : GTLRObject

/** The MIME types (IANA media types) in which the attachment is available. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *mimeType;

/** The resource name; */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  The request to add one or more permissions on the note. Currently, only the
 *  `WRITER` role may be specified. If adding a permission fails, then the
 *  entire request fails and no changes are made.
 */
@interface GTLRKeep_BatchCreatePermissionsRequest : GTLRObject

/** The request message specifying the resources to create. */
@property(nonatomic, strong, nullable) NSArray<GTLRKeep_CreatePermissionRequest *> *requests;

@end


/**
 *  The response for creating permissions on a note.
 */
@interface GTLRKeep_BatchCreatePermissionsResponse : GTLRObject

/** Permissions created. */
@property(nonatomic, strong, nullable) NSArray<GTLRKeep_Permission *> *permissions;

@end


/**
 *  The request to remove one or more permissions from a note. A permission with
 *  the `OWNER` role can't be removed. If removing a permission fails, then the
 *  entire request fails and no changes are made. Returns a 400 bad request
 *  error if a specified permission does not exist on the note.
 */
@interface GTLRKeep_BatchDeletePermissionsRequest : GTLRObject

/**
 *  Required. The names of the permissions to delete. Format:
 *  `notes/{note}/permissions/{permission}`
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *names;

@end


/**
 *  The request to add a single permission on the note.
 */
@interface GTLRKeep_CreatePermissionRequest : GTLRObject

/**
 *  Required. The parent note where this permission will be created. Format:
 *  `notes/{note}`
 */
@property(nonatomic, copy, nullable) NSString *parent;

/**
 *  Required. The permission to create. One of Permission.email, User.email or
 *  Group.email must be supplied.
 */
@property(nonatomic, strong, nullable) GTLRKeep_Permission *permission;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRKeep_Empty : GTLRObject
@end


/**
 *  Describes a single Google Family.
 */
@interface GTLRKeep_Family : GTLRObject
@end


/**
 *  Describes a single Group.
 */
@interface GTLRKeep_Group : GTLRObject

/** The group email. */
@property(nonatomic, copy, nullable) NSString *email;

@end


/**
 *  The list of items for a single list note.
 */
@interface GTLRKeep_ListContent : GTLRObject

/** The items in the list. The number of items must be less than 1,000. */
@property(nonatomic, strong, nullable) NSArray<GTLRKeep_ListItem *> *listItems;

@end


/**
 *  A single list item in a note's list.
 */
@interface GTLRKeep_ListItem : GTLRObject

/**
 *  Whether this item has been checked off or not.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *checked;

/**
 *  If set, list of list items nested under this list item. Only one level of
 *  nesting is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRKeep_ListItem *> *childListItems;

/** The text of this item. Length must be less than 1,000 characters. */
@property(nonatomic, strong, nullable) GTLRKeep_TextContent *text;

@end


/**
 *  The response when listing a page of notes.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "notes" property. If returned as the result of a query, it should
 *        support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRKeep_ListNotesResponse : GTLRCollectionObject

/** Next page's `page_token` field. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A page of notes.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRKeep_Note *> *notes;

@end


/**
 *  A single note.
 */
@interface GTLRKeep_Note : GTLRObject

/** Output only. The attachments attached to this note. */
@property(nonatomic, strong, nullable) NSArray<GTLRKeep_Attachment *> *attachments;

/** The body of the note. */
@property(nonatomic, strong, nullable) GTLRKeep_Section *body;

/** Output only. When this note was created. */
@property(nonatomic, strong, nullable) GTLRDateTime *createTime;

/**
 *  Output only. The resource name of this note. See general note on identifiers
 *  in KeepService.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Output only. The list of permissions set on the note. Contains at least one
 *  entry for the note owner.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRKeep_Permission *> *permissions;

/** The title of the note. Length must be less than 1,000 characters. */
@property(nonatomic, copy, nullable) NSString *title;

/**
 *  Output only. `true` if this note has been trashed. If trashed, the note is
 *  eventually deleted.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *trashed;

/**
 *  Output only. When this note was trashed. If `trashed`, the note is
 *  eventually deleted. If the note is not trashed, this field is not set (and
 *  the trashed field is `false`).
 */
@property(nonatomic, strong, nullable) GTLRDateTime *trashTime;

/** Output only. When this note was last modified. */
@property(nonatomic, strong, nullable) GTLRDateTime *updateTime;

@end


/**
 *  A single permission on the note. Associates a `member` with a `role`.
 */
@interface GTLRKeep_Permission : GTLRObject

/**
 *  Output only. Whether this member has been deleted. If the member is
 *  recovered, this value is set to false and the recovered member retains the
 *  role on the note.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *deleted;

/**
 *  The email associated with the member. If set on create, the `email` field in
 *  the `User` or `Group` message must either be empty or match this field. On
 *  read, may be unset if the member does not have an associated email.
 */
@property(nonatomic, copy, nullable) NSString *email;

/** Output only. The Google Family to which this role applies. */
@property(nonatomic, strong, nullable) GTLRKeep_Family *family;

/** Output only. The group to which this role applies. */
@property(nonatomic, strong, nullable) GTLRKeep_Group *group;

/** Output only. The resource name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The role granted by this permission. The role determines the entityâ€™s
 *  ability to read, write, and share notes.
 *
 *  Likely values:
 *    @arg @c kGTLRKeep_Permission_Role_Owner A role granting full access. This
 *        role cannot be added or removed. Defined by the creator of the note.
 *        (Value: "OWNER")
 *    @arg @c kGTLRKeep_Permission_Role_RoleUnspecified An undefined role.
 *        (Value: "ROLE_UNSPECIFIED")
 *    @arg @c kGTLRKeep_Permission_Role_Writer A role granting the ability to
 *        contribute content and modify note permissions. (Value: "WRITER")
 */
@property(nonatomic, copy, nullable) NSString *role;

/** Output only. The user to whom this role applies. */
@property(nonatomic, strong, nullable) GTLRKeep_User *user;

@end


/**
 *  The content of the note.
 */
@interface GTLRKeep_Section : GTLRObject

/** Used if this section's content is a list. */
@property(nonatomic, strong, nullable) GTLRKeep_ListContent *list;

/**
 *  Used if this section's content is a block of text. The length of the text
 *  content must be less than 20,000 characters.
 */
@property(nonatomic, strong, nullable) GTLRKeep_TextContent *text;

@end


/**
 *  The block of text for a single text section or list item.
 */
@interface GTLRKeep_TextContent : GTLRObject

/**
 *  The text of the note. The limits on this vary with the specific field using
 *  this type.
 */
@property(nonatomic, copy, nullable) NSString *text;

@end


/**
 *  Describes a single user.
 */
@interface GTLRKeep_User : GTLRObject

/** The user's email. */
@property(nonatomic, copy, nullable) NSString *email;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
