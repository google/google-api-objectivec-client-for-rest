// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Game Services API (gameservices/v1)
// Description:
//   Deploy and manage infrastructure for global multiplayer gaming experiences.
// Documentation:
//   https://cloud.google.com/solutions/gaming/

#import <GoogleAPIClientForREST/GTLRObject.h>

#if GTLR_RUNTIME_VERSION != 3000
#error This file was generated by a different version of ServiceGenerator which is incompatible with this GTLR library source.
#endif

@class GTLRGameServices_AuditConfig;
@class GTLRGameServices_AuditLogConfig;
@class GTLRGameServices_AuthorizationLoggingOptions;
@class GTLRGameServices_Binding;
@class GTLRGameServices_CloudAuditOptions;
@class GTLRGameServices_Condition;
@class GTLRGameServices_CounterOptions;
@class GTLRGameServices_CustomField;
@class GTLRGameServices_DataAccessOptions;
@class GTLRGameServices_Expr;
@class GTLRGameServices_Location;
@class GTLRGameServices_Location_Labels;
@class GTLRGameServices_Location_Metadata;
@class GTLRGameServices_LogConfig;
@class GTLRGameServices_Operation;
@class GTLRGameServices_Operation_Metadata;
@class GTLRGameServices_Operation_Response;
@class GTLRGameServices_Policy;
@class GTLRGameServices_Rule;
@class GTLRGameServices_Status;
@class GTLRGameServices_Status_Details_Item;

// Generated comments include content from the discovery document; avoid them
// causing warnings since clang's checks are some what arbitrary.
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"

NS_ASSUME_NONNULL_BEGIN

// ----------------------------------------------------------------------------
// Constants - For some of the classes' properties below.

// ----------------------------------------------------------------------------
// GTLRGameServices_AuditLogConfig.logType

/**
 *  Admin reads. Example: CloudIAM getIamPolicy
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_AuditLogConfig_LogType_AdminRead;
/**
 *  Data reads. Example: CloudSQL Users list
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_AuditLogConfig_LogType_DataRead;
/**
 *  Data writes. Example: CloudSQL Users create
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_AuditLogConfig_LogType_DataWrite;
/**
 *  Default case. Should never be this.
 *
 *  Value: "LOG_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_AuditLogConfig_LogType_LogTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRGameServices_AuthorizationLoggingOptions.permissionType

/**
 *  A read of admin (meta) data.
 *
 *  Value: "ADMIN_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_AuthorizationLoggingOptions_PermissionType_AdminRead;
/**
 *  A write of admin (meta) data.
 *
 *  Value: "ADMIN_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_AuthorizationLoggingOptions_PermissionType_AdminWrite;
/**
 *  A read of standard data.
 *
 *  Value: "DATA_READ"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_AuthorizationLoggingOptions_PermissionType_DataRead;
/**
 *  A write of standard data.
 *
 *  Value: "DATA_WRITE"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_AuthorizationLoggingOptions_PermissionType_DataWrite;
/**
 *  Default. Should not be used.
 *
 *  Value: "PERMISSION_TYPE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_AuthorizationLoggingOptions_PermissionType_PermissionTypeUnspecified;

// ----------------------------------------------------------------------------
// GTLRGameServices_CloudAuditOptions.logName

/**
 *  Corresponds to "cloudaudit.googleapis.com/activity"
 *
 *  Value: "ADMIN_ACTIVITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_CloudAuditOptions_LogName_AdminActivity;
/**
 *  Corresponds to "cloudaudit.googleapis.com/data_access"
 *
 *  Value: "DATA_ACCESS"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_CloudAuditOptions_LogName_DataAccess;
/**
 *  Default. Should not be used.
 *
 *  Value: "UNSPECIFIED_LOG_NAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_CloudAuditOptions_LogName_UnspecifiedLogName;

// ----------------------------------------------------------------------------
// GTLRGameServices_Condition.iam

/**
 *  An approver (distinct from the requester) that has authorized this request.
 *  When used with IN, the condition indicates that one of the approvers
 *  associated with the request matches the specified principal, or is a member
 *  of the specified group. Approvers can only grant additional access, and are
 *  thus only used in a strictly positive context (e.g. ALLOW/IN or
 *  DENY/NOT_IN).
 *
 *  Value: "APPROVER"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Iam_Approver;
/**
 *  The principal (even if an authority selector is present), which must only be
 *  used for attribution, not authorization.
 *
 *  Value: "ATTRIBUTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Iam_Attribution;
/**
 *  Either principal or (if present) authority selector.
 *
 *  Value: "AUTHORITY"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Iam_Authority;
/**
 *  What type of credentials have been supplied with this request. String values
 *  should match enum names from security_loas_l2.CredentialsType - currently,
 *  only CREDS_TYPE_EMERGENCY is supported. It is not permitted to grant access
 *  based on the *absence* of a credentials type, so the conditions can only be
 *  used in a "positive" context (e.g., ALLOW/IN or DENY/NOT_IN).
 *
 *  Value: "CREDENTIALS_TYPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Iam_CredentialsType;
/**
 *  EXPERIMENTAL -- DO NOT USE. The conditions can only be used in a "positive"
 *  context (e.g., ALLOW/IN or DENY/NOT_IN).
 *
 *  Value: "CREDS_ASSERTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Iam_CredsAssertion;
/**
 *  What types of justifications have been supplied with this request. String
 *  values should match enum names from security.credentials.JustificationType,
 *  e.g. "MANUAL_STRING". It is not permitted to grant access based on the
 *  *absence* of a justification, so justification conditions can only be used
 *  in a "positive" context (e.g., ALLOW/IN or DENY/NOT_IN). Multiple
 *  justifications, e.g., a Buganizer ID and a manually-entered reason, are
 *  normal and supported.
 *
 *  Value: "JUSTIFICATION_TYPE"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Iam_JustificationType;
/**
 *  Default non-attribute.
 *
 *  Value: "NO_ATTR"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Iam_NoAttr;
/**
 *  Any of the security realms in the IAMContext (go/security-realms). When used
 *  with IN, the condition indicates "any of the request's realms match one of
 *  the given values; with NOT_IN, "none of the realms match any of the given
 *  values". Note that a value can be: - 'self:campus' (i.e., clients that are
 *  in the same campus) - 'self:metro' (i.e., clients that are in the same
 *  metro) - 'self:cloud-region' (i.e., allow connections from clients that are
 *  in the same cloud region) - 'self:prod-region' (i.e., allow connections from
 *  clients that are in the same prod region) - 'guardians' (i.e., allow
 *  connections from its guardian realms. See
 *  go/security-realms-glossary#guardian for more information.) - 'self'
 *  [DEPRECATED] (i.e., allow connections from clients that are in the same
 *  security realm, which is currently but not guaranteed to be campus-sized) -
 *  a realm (e.g., 'campus-abc') - a realm group (e.g.,
 *  'realms-for-borg-cell-xx', see: go/realm-groups) A match is determined by a
 *  realm group membership check performed by a RealmAclRep object
 *  (go/realm-acl-howto). It is not permitted to grant access based on the
 *  *absence* of a realm, so realm conditions can only be used in a "positive"
 *  context (e.g., ALLOW/IN or DENY/NOT_IN).
 *
 *  Value: "SECURITY_REALM"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Iam_SecurityRealm;

// ----------------------------------------------------------------------------
// GTLRGameServices_Condition.op

/**
 *  Subject is discharged
 *
 *  Value: "DISCHARGED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Op_Discharged;
/**
 *  DEPRECATED. Use IN instead.
 *
 *  Value: "EQUALS"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Op_Equals;
/**
 *  The condition is true if the subject (or any element of it if it is a set)
 *  matches any of the supplied values.
 *
 *  Value: "IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Op_In;
/**
 *  Default no-op.
 *
 *  Value: "NO_OP"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Op_NoOp;
/**
 *  DEPRECATED. Use NOT_IN instead.
 *
 *  Value: "NOT_EQUALS"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Op_NotEquals;
/**
 *  The condition is true if the subject (or every element of it if it is a set)
 *  matches none of the supplied values.
 *
 *  Value: "NOT_IN"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Op_NotIn;

// ----------------------------------------------------------------------------
// GTLRGameServices_Condition.sys

/**
 *  IP address of the caller
 *
 *  Value: "IP"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Sys_Ip;
/**
 *  Resource name
 *
 *  Value: "NAME"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Sys_Name;
/**
 *  Default non-attribute type
 *
 *  Value: "NO_ATTR"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Sys_NoAttr;
/**
 *  Region of the resource
 *
 *  Value: "REGION"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Sys_Region;
/**
 *  Service name
 *
 *  Value: "SERVICE"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Condition_Sys_Service;

// ----------------------------------------------------------------------------
// GTLRGameServices_DataAccessOptions.logMode

/**
 *  The application's operation in the context of which this authorization check
 *  is being made may only be performed if it is successfully logged to Gin. For
 *  instance, the authorization library may satisfy this obligation by emitting
 *  a partial log entry at authorization check time and only returning ALLOW to
 *  the application if it succeeds. If a matching Rule has this directive, but
 *  the client has not indicated that it will honor such requirements, then the
 *  IAM check will result in authorization failure by setting
 *  CheckPolicyResponse.success=false.
 *
 *  Value: "LOG_FAIL_CLOSED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_DataAccessOptions_LogMode_LogFailClosed;
/**
 *  Client is not required to write a partial Gin log immediately after the
 *  authorization check. If client chooses to write one and it fails, client may
 *  either fail open (allow the operation to continue) or fail closed (handle as
 *  a DENY outcome).
 *
 *  Value: "LOG_MODE_UNSPECIFIED"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_DataAccessOptions_LogMode_LogModeUnspecified;

// ----------------------------------------------------------------------------
// GTLRGameServices_Rule.action

/**
 *  Matching 'Entries' grant access.
 *
 *  Value: "ALLOW"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Rule_Action_Allow;
/**
 *  Matching 'Entries' grant access and the caller promises to log the request
 *  per the returned log_configs.
 *
 *  Value: "ALLOW_WITH_LOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Rule_Action_AllowWithLog;
/**
 *  Matching 'Entries' deny access.
 *
 *  Value: "DENY"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Rule_Action_Deny;
/**
 *  Matching 'Entries' deny access and the caller promises to log the request
 *  per the returned log_configs.
 *
 *  Value: "DENY_WITH_LOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Rule_Action_DenyWithLog;
/**
 *  Matching 'Entries' tell IAM.Check callers to generate logs.
 *
 *  Value: "LOG"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Rule_Action_Log;
/**
 *  Default no action.
 *
 *  Value: "NO_ACTION"
 */
FOUNDATION_EXTERN NSString * const kGTLRGameServices_Rule_Action_NoAction;

/**
 *  Specifies the audit configuration for a service. The configuration
 *  determines which permission types are logged, and what identities, if any,
 *  are exempted from logging. An AuditConfig must have one or more
 *  AuditLogConfigs. If there are AuditConfigs for both `allServices` and a
 *  specific service, the union of the two AuditConfigs is used for that
 *  service: the log_types specified in each AuditConfig are enabled, and the
 *  exempted_members in each AuditLogConfig are exempted. Example Policy with
 *  multiple AuditConfigs: { "audit_configs": [ { "service": "allServices",
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type":
 *  "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com",
 *  "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type":
 *  "DATA_WRITE", "exempted_members": [ "user:aliya\@example.com" ] } ] } ] }
 *  For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ
 *  logging. It also exempts `jose\@example.com` from DATA_READ logging, and
 *  `aliya\@example.com` from DATA_WRITE logging.
 */
@interface GTLRGameServices_AuditConfig : GTLRObject

/** The configuration for logging of each type of permission. */
@property(nonatomic, strong, nullable) NSArray<GTLRGameServices_AuditLogConfig *> *auditLogConfigs;

/**
 *  Specifies a service that will be enabled for audit logging. For example,
 *  `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a
 *  special value that covers all services.
 */
@property(nonatomic, copy, nullable) NSString *service;

@end


/**
 *  Provides the configuration for logging a type of permissions. Example: {
 *  "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [
 *  "user:jose\@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables
 *  'DATA_READ' and 'DATA_WRITE' logging, while exempting jose\@example.com from
 *  DATA_READ logging.
 */
@interface GTLRGameServices_AuditLogConfig : GTLRObject

/**
 *  Specifies the identities that do not cause logging for this type of
 *  permission. Follows the same format of Binding.members.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *exemptedMembers;

/**
 *  ignoreChildExemptions
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *ignoreChildExemptions;

/**
 *  The log type that this config enables.
 *
 *  Likely values:
 *    @arg @c kGTLRGameServices_AuditLogConfig_LogType_AdminRead Admin reads.
 *        Example: CloudIAM getIamPolicy (Value: "ADMIN_READ")
 *    @arg @c kGTLRGameServices_AuditLogConfig_LogType_DataRead Data reads.
 *        Example: CloudSQL Users list (Value: "DATA_READ")
 *    @arg @c kGTLRGameServices_AuditLogConfig_LogType_DataWrite Data writes.
 *        Example: CloudSQL Users create (Value: "DATA_WRITE")
 *    @arg @c kGTLRGameServices_AuditLogConfig_LogType_LogTypeUnspecified
 *        Default case. Should never be this. (Value: "LOG_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logType;

@end


/**
 *  Authorization-related information used by Cloud Audit Logging.
 */
@interface GTLRGameServices_AuthorizationLoggingOptions : GTLRObject

/**
 *  The type of the permission that was checked.
 *
 *  Likely values:
 *    @arg @c kGTLRGameServices_AuthorizationLoggingOptions_PermissionType_AdminRead
 *        A read of admin (meta) data. (Value: "ADMIN_READ")
 *    @arg @c kGTLRGameServices_AuthorizationLoggingOptions_PermissionType_AdminWrite
 *        A write of admin (meta) data. (Value: "ADMIN_WRITE")
 *    @arg @c kGTLRGameServices_AuthorizationLoggingOptions_PermissionType_DataRead
 *        A read of standard data. (Value: "DATA_READ")
 *    @arg @c kGTLRGameServices_AuthorizationLoggingOptions_PermissionType_DataWrite
 *        A write of standard data. (Value: "DATA_WRITE")
 *    @arg @c kGTLRGameServices_AuthorizationLoggingOptions_PermissionType_PermissionTypeUnspecified
 *        Default. Should not be used. (Value: "PERMISSION_TYPE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *permissionType;

@end


/**
 *  Associates `members`, or principals, with a `role`.
 */
@interface GTLRGameServices_Binding : GTLRObject

@property(nonatomic, copy, nullable) NSString *bindingId;

/**
 *  The condition that is associated with this binding. If the condition
 *  evaluates to `true`, then this binding applies to the current request. If
 *  the condition evaluates to `false`, then this binding does not apply to the
 *  current request. However, a different role binding might grant the same role
 *  to one or more of the principals in this binding. To learn which resources
 *  support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 */
@property(nonatomic, strong, nullable) GTLRGameServices_Expr *condition;

/**
 *  Specifies the principals requesting access for a Google Cloud resource.
 *  `members` can have the following values: * `allUsers`: A special identifier
 *  that represents anyone who is on the internet; with or without a Google
 *  account. * `allAuthenticatedUsers`: A special identifier that represents
 *  anyone who is authenticated with a Google account or a service account. Does
 *  not include identities that come from external identity providers (IdPs)
 *  through identity federation. * `user:{emailid}`: An email address that
 *  represents a specific Google account. For example, `alice\@example.com` . *
 *  `serviceAccount:{emailid}`: An email address that represents a Google
 *  service account. For example, `my-other-app\@appspot.gserviceaccount.com`. *
 *  `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An
 *  identifier for a [Kubernetes service
 *  account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts).
 *  For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. *
 *  `group:{emailid}`: An email address that represents a Google group. For
 *  example, `admins\@example.com`. * `deleted:user:{emailid}?uid={uniqueid}`:
 *  An email address (plus unique identifier) representing a user that has been
 *  recently deleted. For example,
 *  `alice\@example.com?uid=123456789012345678901`. If the user is recovered,
 *  this value reverts to `user:{emailid}` and the recovered user retains the
 *  role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An
 *  email address (plus unique identifier) representing a service account that
 *  has been recently deleted. For example,
 *  `my-other-app\@appspot.gserviceaccount.com?uid=123456789012345678901`. If
 *  the service account is undeleted, this value reverts to
 *  `serviceAccount:{emailid}` and the undeleted service account retains the
 *  role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email
 *  address (plus unique identifier) representing a Google group that has been
 *  recently deleted. For example,
 *  `admins\@example.com?uid=123456789012345678901`. If the group is recovered,
 *  this value reverts to `group:{emailid}` and the recovered group retains the
 *  role in the binding. * `domain:{domain}`: The G Suite domain (primary) that
 *  represents all the users of that domain. For example, `google.com` or
 *  `example.com`.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *members;

/**
 *  Role that is assigned to the list of `members`, or principals. For example,
 *  `roles/viewer`, `roles/editor`, or `roles/owner`.
 */
@property(nonatomic, copy, nullable) NSString *role;

@end


/**
 *  The request message for Operations.CancelOperation.
 */
@interface GTLRGameServices_CancelOperationRequest : GTLRObject
@end


/**
 *  Write a Cloud Audit log
 */
@interface GTLRGameServices_CloudAuditOptions : GTLRObject

/** Information used by the Cloud Audit Logging pipeline. */
@property(nonatomic, strong, nullable) GTLRGameServices_AuthorizationLoggingOptions *authorizationLoggingOptions;

/**
 *  The log_name to populate in the Cloud Audit Record.
 *
 *  Likely values:
 *    @arg @c kGTLRGameServices_CloudAuditOptions_LogName_AdminActivity
 *        Corresponds to "cloudaudit.googleapis.com/activity" (Value:
 *        "ADMIN_ACTIVITY")
 *    @arg @c kGTLRGameServices_CloudAuditOptions_LogName_DataAccess Corresponds
 *        to "cloudaudit.googleapis.com/data_access" (Value: "DATA_ACCESS")
 *    @arg @c kGTLRGameServices_CloudAuditOptions_LogName_UnspecifiedLogName
 *        Default. Should not be used. (Value: "UNSPECIFIED_LOG_NAME")
 */
@property(nonatomic, copy, nullable) NSString *logName;

@end


/**
 *  A condition to be met.
 */
@interface GTLRGameServices_Condition : GTLRObject

/**
 *  Trusted attributes supplied by the IAM system.
 *
 *  Likely values:
 *    @arg @c kGTLRGameServices_Condition_Iam_Approver An approver (distinct
 *        from the requester) that has authorized this request. When used with
 *        IN, the condition indicates that one of the approvers associated with
 *        the request matches the specified principal, or is a member of the
 *        specified group. Approvers can only grant additional access, and are
 *        thus only used in a strictly positive context (e.g. ALLOW/IN or
 *        DENY/NOT_IN). (Value: "APPROVER")
 *    @arg @c kGTLRGameServices_Condition_Iam_Attribution The principal (even if
 *        an authority selector is present), which must only be used for
 *        attribution, not authorization. (Value: "ATTRIBUTION")
 *    @arg @c kGTLRGameServices_Condition_Iam_Authority Either principal or (if
 *        present) authority selector. (Value: "AUTHORITY")
 *    @arg @c kGTLRGameServices_Condition_Iam_CredentialsType What type of
 *        credentials have been supplied with this request. String values should
 *        match enum names from security_loas_l2.CredentialsType - currently,
 *        only CREDS_TYPE_EMERGENCY is supported. It is not permitted to grant
 *        access based on the *absence* of a credentials type, so the conditions
 *        can only be used in a "positive" context (e.g., ALLOW/IN or
 *        DENY/NOT_IN). (Value: "CREDENTIALS_TYPE")
 *    @arg @c kGTLRGameServices_Condition_Iam_CredsAssertion EXPERIMENTAL -- DO
 *        NOT USE. The conditions can only be used in a "positive" context
 *        (e.g., ALLOW/IN or DENY/NOT_IN). (Value: "CREDS_ASSERTION")
 *    @arg @c kGTLRGameServices_Condition_Iam_JustificationType What types of
 *        justifications have been supplied with this request. String values
 *        should match enum names from security.credentials.JustificationType,
 *        e.g. "MANUAL_STRING". It is not permitted to grant access based on the
 *        *absence* of a justification, so justification conditions can only be
 *        used in a "positive" context (e.g., ALLOW/IN or DENY/NOT_IN). Multiple
 *        justifications, e.g., a Buganizer ID and a manually-entered reason,
 *        are normal and supported. (Value: "JUSTIFICATION_TYPE")
 *    @arg @c kGTLRGameServices_Condition_Iam_NoAttr Default non-attribute.
 *        (Value: "NO_ATTR")
 *    @arg @c kGTLRGameServices_Condition_Iam_SecurityRealm Any of the security
 *        realms in the IAMContext (go/security-realms). When used with IN, the
 *        condition indicates "any of the request's realms match one of the
 *        given values; with NOT_IN, "none of the realms match any of the given
 *        values". Note that a value can be: - 'self:campus' (i.e., clients that
 *        are in the same campus) - 'self:metro' (i.e., clients that are in the
 *        same metro) - 'self:cloud-region' (i.e., allow connections from
 *        clients that are in the same cloud region) - 'self:prod-region' (i.e.,
 *        allow connections from clients that are in the same prod region) -
 *        'guardians' (i.e., allow connections from its guardian realms. See
 *        go/security-realms-glossary#guardian for more information.) - 'self'
 *        [DEPRECATED] (i.e., allow connections from clients that are in the
 *        same security realm, which is currently but not guaranteed to be
 *        campus-sized) - a realm (e.g., 'campus-abc') - a realm group (e.g.,
 *        'realms-for-borg-cell-xx', see: go/realm-groups) A match is determined
 *        by a realm group membership check performed by a RealmAclRep object
 *        (go/realm-acl-howto). It is not permitted to grant access based on the
 *        *absence* of a realm, so realm conditions can only be used in a
 *        "positive" context (e.g., ALLOW/IN or DENY/NOT_IN). (Value:
 *        "SECURITY_REALM")
 */
@property(nonatomic, copy, nullable) NSString *iam;

/**
 *  An operator to apply the subject with.
 *
 *  Likely values:
 *    @arg @c kGTLRGameServices_Condition_Op_Discharged Subject is discharged
 *        (Value: "DISCHARGED")
 *    @arg @c kGTLRGameServices_Condition_Op_Equals DEPRECATED. Use IN instead.
 *        (Value: "EQUALS")
 *    @arg @c kGTLRGameServices_Condition_Op_In The condition is true if the
 *        subject (or any element of it if it is a set) matches any of the
 *        supplied values. (Value: "IN")
 *    @arg @c kGTLRGameServices_Condition_Op_NoOp Default no-op. (Value:
 *        "NO_OP")
 *    @arg @c kGTLRGameServices_Condition_Op_NotEquals DEPRECATED. Use NOT_IN
 *        instead. (Value: "NOT_EQUALS")
 *    @arg @c kGTLRGameServices_Condition_Op_NotIn The condition is true if the
 *        subject (or every element of it if it is a set) matches none of the
 *        supplied values. (Value: "NOT_IN")
 */
@property(nonatomic, copy, nullable) NSString *op;

/** Trusted attributes discharged by the service. */
@property(nonatomic, copy, nullable) NSString *svc;

/**
 *  Trusted attributes supplied by any service that owns resources and uses the
 *  IAM system for access control.
 *
 *  Likely values:
 *    @arg @c kGTLRGameServices_Condition_Sys_Ip IP address of the caller
 *        (Value: "IP")
 *    @arg @c kGTLRGameServices_Condition_Sys_Name Resource name (Value: "NAME")
 *    @arg @c kGTLRGameServices_Condition_Sys_NoAttr Default non-attribute type
 *        (Value: "NO_ATTR")
 *    @arg @c kGTLRGameServices_Condition_Sys_Region Region of the resource
 *        (Value: "REGION")
 *    @arg @c kGTLRGameServices_Condition_Sys_Service Service name (Value:
 *        "SERVICE")
 */
@property(nonatomic, copy, nullable) NSString *sys;

/** The objects of the condition. */
@property(nonatomic, strong, nullable) NSArray<NSString *> *values;

@end


/**
 *  Increment a streamz counter with the specified metric and field names.
 *  Metric names should start with a '/', generally be lowercase-only, and end
 *  in "_count". Field names should not contain an initial slash. The actual
 *  exported metric names will have "/iam/policy" prepended. Field names
 *  correspond to IAM request parameters and field values are their respective
 *  values. Supported field names: - "authority", which is "[token]" if
 *  IAMContext.token is present, otherwise the value of
 *  IAMContext.authority_selector if present, and otherwise a representation of
 *  IAMContext.principal; or - "iam_principal", a representation of
 *  IAMContext.principal even if a token or authority selector is present; or -
 *  "" (empty string), resulting in a counter with no fields. Examples: counter
 *  { metric: "/debug_access_count" field: "iam_principal" } ==> increment
 *  counter /iam/policy/debug_access_count {iam_principal=[value of
 *  IAMContext.principal]}
 */
@interface GTLRGameServices_CounterOptions : GTLRObject

/** Custom fields. */
@property(nonatomic, strong, nullable) NSArray<GTLRGameServices_CustomField *> *customFields;

/** The field value to attribute. */
@property(nonatomic, copy, nullable) NSString *field;

/** The metric to update. */
@property(nonatomic, copy, nullable) NSString *metric;

@end


/**
 *  Custom fields. These can be used to create a counter with arbitrary
 *  field/value pairs. See: go/rpcsp-custom-fields.
 */
@interface GTLRGameServices_CustomField : GTLRObject

/** Name is the field name. */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  Value is the field value. It is important that in contrast to the
 *  CounterOptions.field, the value here is a constant that is not derived from
 *  the IAMContext.
 */
@property(nonatomic, copy, nullable) NSString *value;

@end


/**
 *  Write a Data Access (Gin) log
 */
@interface GTLRGameServices_DataAccessOptions : GTLRObject

/**
 *  logMode
 *
 *  Likely values:
 *    @arg @c kGTLRGameServices_DataAccessOptions_LogMode_LogFailClosed The
 *        application's operation in the context of which this authorization
 *        check is being made may only be performed if it is successfully logged
 *        to Gin. For instance, the authorization library may satisfy this
 *        obligation by emitting a partial log entry at authorization check time
 *        and only returning ALLOW to the application if it succeeds. If a
 *        matching Rule has this directive, but the client has not indicated
 *        that it will honor such requirements, then the IAM check will result
 *        in authorization failure by setting CheckPolicyResponse.success=false.
 *        (Value: "LOG_FAIL_CLOSED")
 *    @arg @c kGTLRGameServices_DataAccessOptions_LogMode_LogModeUnspecified
 *        Client is not required to write a partial Gin log immediately after
 *        the authorization check. If client chooses to write one and it fails,
 *        client may either fail open (allow the operation to continue) or fail
 *        closed (handle as a DENY outcome). (Value: "LOG_MODE_UNSPECIFIED")
 */
@property(nonatomic, copy, nullable) NSString *logMode;

@end


/**
 *  A generic empty message that you can re-use to avoid defining duplicated
 *  empty messages in your APIs. A typical example is to use it as the request
 *  or the response type of an API method. For instance: service Foo { rpc
 *  Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
 */
@interface GTLRGameServices_Empty : GTLRObject
@end


/**
 *  Represents a textual expression in the Common Expression Language (CEL)
 *  syntax. CEL is a C-like expression language. The syntax and semantics of CEL
 *  are documented at https://github.com/google/cel-spec. Example (Comparison):
 *  title: "Summary size limit" description: "Determines if a summary is less
 *  than 100 chars" expression: "document.summary.size() < 100" Example
 *  (Equality): title: "Requestor is owner" description: "Determines if
 *  requestor is the document owner" expression: "document.owner ==
 *  request.auth.claims.email" Example (Logic): title: "Public documents"
 *  description: "Determine whether the document should be publicly visible"
 *  expression: "document.type != 'private' && document.type != 'internal'"
 *  Example (Data Manipulation): title: "Notification string" description:
 *  "Create a notification string with a timestamp." expression: "'New message
 *  received at ' + string(document.create_time)" The exact variables and
 *  functions that may be referenced within an expression are determined by the
 *  service that evaluates it. See the service documentation for additional
 *  information.
 */
@interface GTLRGameServices_Expr : GTLRObject

/**
 *  Optional. Description of the expression. This is a longer text which
 *  describes the expression, e.g. when hovered over it in a UI.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  Textual representation of an expression in Common Expression Language
 *  syntax.
 */
@property(nonatomic, copy, nullable) NSString *expression;

/**
 *  Optional. String indicating the location of the expression for error
 *  reporting, e.g. a file name and a position in the file.
 */
@property(nonatomic, copy, nullable) NSString *location;

/**
 *  Optional. Title for the expression, i.e. a short string describing its
 *  purpose. This can be used e.g. in UIs which allow to enter the expression.
 */
@property(nonatomic, copy, nullable) NSString *title;

@end


/**
 *  The response message for Locations.ListLocations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "locations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGameServices_ListLocationsResponse : GTLRCollectionObject

/**
 *  A list of locations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGameServices_Location *> *locations;

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

@end


/**
 *  The response message for Operations.ListOperations.
 *
 *  @note This class supports NSFastEnumeration and indexed subscripting over
 *        its "operations" property. If returned as the result of a query, it
 *        should support automatic pagination (when @c shouldFetchNextPages is
 *        enabled).
 */
@interface GTLRGameServices_ListOperationsResponse : GTLRCollectionObject

/** The standard List next-page token. */
@property(nonatomic, copy, nullable) NSString *nextPageToken;

/**
 *  A list of operations that matches the specified filter in the request.
 *
 *  @note This property is used to support NSFastEnumeration and indexed
 *        subscripting on this class.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGameServices_Operation *> *operations;

@end


/**
 *  A resource that represents Google Cloud Platform location.
 */
@interface GTLRGameServices_Location : GTLRObject

/**
 *  The friendly name for this location, typically a nearby city name. For
 *  example, "Tokyo".
 */
@property(nonatomic, copy, nullable) NSString *displayName;

/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 */
@property(nonatomic, strong, nullable) GTLRGameServices_Location_Labels *labels;

/** The canonical id for this location. For example: `"us-east1"`. */
@property(nonatomic, copy, nullable) NSString *locationId;

/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 */
@property(nonatomic, strong, nullable) GTLRGameServices_Location_Metadata *metadata;

/**
 *  Resource name for the location, which may vary between implementations. For
 *  example: `"projects/example-project/locations/us-east1"`
 */
@property(nonatomic, copy, nullable) NSString *name;

@end


/**
 *  Cross-service attributes for the location. For example
 *  {"cloud.googleapis.com/region": "us-east1"}
 *
 *  @note This class is documented as having more properties of NSString. Use @c
 *        -additionalJSONKeys and @c -additionalPropertyForName: to get the list
 *        of properties and then fetch them; or @c -additionalProperties to
 *        fetch them all at once.
 */
@interface GTLRGameServices_Location_Labels : GTLRObject
@end


/**
 *  Service-specific metadata. For example the available capacity at the given
 *  location.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRGameServices_Location_Metadata : GTLRObject
@end


/**
 *  Specifies what kind of log the caller must write
 */
@interface GTLRGameServices_LogConfig : GTLRObject

/** Cloud audit options. */
@property(nonatomic, strong, nullable) GTLRGameServices_CloudAuditOptions *cloudAudit;

/** Counter options. */
@property(nonatomic, strong, nullable) GTLRGameServices_CounterOptions *counter;

/** Data access options. */
@property(nonatomic, strong, nullable) GTLRGameServices_DataAccessOptions *dataAccess;

@end


/**
 *  This resource represents a long-running operation that is the result of a
 *  network API call.
 */
@interface GTLRGameServices_Operation : GTLRObject

/**
 *  If the value is `false`, it means the operation is still in progress. If
 *  `true`, the operation is completed, and either `error` or `response` is
 *  available.
 *
 *  Uses NSNumber of boolValue.
 */
@property(nonatomic, strong, nullable) NSNumber *done;

/** The error result of the operation in case of failure or cancellation. */
@property(nonatomic, strong, nullable) GTLRGameServices_Status *error;

/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 */
@property(nonatomic, strong, nullable) GTLRGameServices_Operation_Metadata *metadata;

/**
 *  The server-assigned name, which is only unique within the same service that
 *  originally returns it. If you use the default HTTP mapping, the `name`
 *  should be a resource name ending with `operations/{unique_id}`.
 */
@property(nonatomic, copy, nullable) NSString *name;

/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 */
@property(nonatomic, strong, nullable) GTLRGameServices_Operation_Response *response;

@end


/**
 *  Service-specific metadata associated with the operation. It typically
 *  contains progress information and common metadata such as create time. Some
 *  services might not provide such metadata. Any method that returns a
 *  long-running operation should document the metadata type, if any.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRGameServices_Operation_Metadata : GTLRObject
@end


/**
 *  The normal response of the operation in case of success. If the original
 *  method returns no data on success, such as `Delete`, the response is
 *  `google.protobuf.Empty`. If the original method is standard
 *  `Get`/`Create`/`Update`, the response should be the resource. For other
 *  methods, the response should have the type `XxxResponse`, where `Xxx` is the
 *  original method name. For example, if the original method name is
 *  `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRGameServices_Operation_Response : GTLRObject
@end


/**
 *  An Identity and Access Management (IAM) policy, which specifies access
 *  controls for Google Cloud resources. A `Policy` is a collection of
 *  `bindings`. A `binding` binds one or more `members`, or principals, to a
 *  single `role`. Principals can be user accounts, service accounts, Google
 *  groups, and domains (such as G Suite). A `role` is a named list of
 *  permissions; each `role` can be an IAM predefined role or a user-created
 *  custom role. For some types of Google Cloud resources, a `binding` can also
 *  specify a `condition`, which is a logical expression that allows access to a
 *  resource only if the expression evaluates to `true`. A condition can add
 *  constraints based on attributes of the request, the resource, or both. To
 *  learn which resources support conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *  **JSON example:** { "bindings": [ { "role":
 *  "roles/resourcemanager.organizationAdmin", "members": [
 *  "user:mike\@example.com", "group:admins\@example.com", "domain:google.com",
 *  "serviceAccount:my-project-id\@appspot.gserviceaccount.com" ] }, { "role":
 *  "roles/resourcemanager.organizationViewer", "members": [
 *  "user:eve\@example.com" ], "condition": { "title": "expirable access",
 *  "description": "Does not grant access after Sep 2020", "expression":
 *  "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag":
 *  "BwWWja0YfJA=", "version": 3 } **YAML example:** bindings: - members: -
 *  user:mike\@example.com - group:admins\@example.com - domain:google.com -
 *  serviceAccount:my-project-id\@appspot.gserviceaccount.com role:
 *  roles/resourcemanager.organizationAdmin - members: - user:eve\@example.com
 *  role: roles/resourcemanager.organizationViewer condition: title: expirable
 *  access description: Does not grant access after Sep 2020 expression:
 *  request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA=
 *  version: 3 For a description of IAM and its features, see the [IAM
 *  documentation](https://cloud.google.com/iam/docs/).
 */
@interface GTLRGameServices_Policy : GTLRObject

/** Specifies cloud audit logging configuration for this policy. */
@property(nonatomic, strong, nullable) NSArray<GTLRGameServices_AuditConfig *> *auditConfigs;

/**
 *  Associates a list of `members`, or principals, with a `role`. Optionally,
 *  may specify a `condition` that determines how and when the `bindings` are
 *  applied. Each of the `bindings` must contain at least one principal. The
 *  `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of
 *  these principals can be Google groups. Each occurrence of a principal counts
 *  towards these limits. For example, if the `bindings` grant 50 different
 *  roles to `user:alice\@example.com`, and not to any other principal, then you
 *  can add another 1,450 principals to the `bindings` in the `Policy`.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGameServices_Binding *> *bindings;

/**
 *  `etag` is used for optimistic concurrency control as a way to help prevent
 *  simultaneous updates of a policy from overwriting each other. It is strongly
 *  suggested that systems make use of the `etag` in the read-modify-write cycle
 *  to perform policy updates in order to avoid race conditions: An `etag` is
 *  returned in the response to `getIamPolicy`, and systems are expected to put
 *  that etag in the request to `setIamPolicy` to ensure that their change will
 *  be applied to the same version of the policy. **Important:** If you use IAM
 *  Conditions, you must include the `etag` field whenever you call
 *  `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a
 *  version `3` policy with a version `1` policy, and all of the conditions in
 *  the version `3` policy are lost.
 *
 *  Contains encoded binary data; GTLRBase64 can encode/decode (probably
 *  web-safe format).
 */
@property(nonatomic, copy, nullable) NSString *ETag;

/**
 *  If more than one rule is specified, the rules are applied in the following
 *  manner: - All matching LOG rules are always applied. - If any
 *  DENY/DENY_WITH_LOG rule matches, permission is denied. Logging will be
 *  applied if one or more matching rule requires logging. - Otherwise, if any
 *  ALLOW/ALLOW_WITH_LOG rule matches, permission is granted. Logging will be
 *  applied if one or more matching rule requires logging. - Otherwise, if no
 *  rule applies, permission is denied.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGameServices_Rule *> *rules;

/**
 *  Specifies the format of the policy. Valid values are `0`, `1`, and `3`.
 *  Requests that specify an invalid value are rejected. Any operation that
 *  affects conditional role bindings must specify version `3`. This requirement
 *  applies to the following operations: * Getting a policy that includes a
 *  conditional role binding * Adding a conditional role binding to a policy *
 *  Changing a conditional role binding in a policy * Removing any role binding,
 *  with or without a condition, from a policy that includes conditions
 *  **Important:** If you use IAM Conditions, you must include the `etag` field
 *  whenever you call `setIamPolicy`. If you omit this field, then IAM allows
 *  you to overwrite a version `3` policy with a version `1` policy, and all of
 *  the conditions in the version `3` policy are lost. If a policy does not
 *  include any conditions, operations on that policy may specify any valid
 *  version or leave the field unset. To learn which resources support
 *  conditions in their IAM policies, see the [IAM
 *  documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *version;

@end


/**
 *  A rule to be applied in a Policy.
 */
@interface GTLRGameServices_Rule : GTLRObject

/**
 *  Required
 *
 *  Likely values:
 *    @arg @c kGTLRGameServices_Rule_Action_Allow Matching 'Entries' grant
 *        access. (Value: "ALLOW")
 *    @arg @c kGTLRGameServices_Rule_Action_AllowWithLog Matching 'Entries'
 *        grant access and the caller promises to log the request per the
 *        returned log_configs. (Value: "ALLOW_WITH_LOG")
 *    @arg @c kGTLRGameServices_Rule_Action_Deny Matching 'Entries' deny access.
 *        (Value: "DENY")
 *    @arg @c kGTLRGameServices_Rule_Action_DenyWithLog Matching 'Entries' deny
 *        access and the caller promises to log the request per the returned
 *        log_configs. (Value: "DENY_WITH_LOG")
 *    @arg @c kGTLRGameServices_Rule_Action_Log Matching 'Entries' tell
 *        IAM.Check callers to generate logs. (Value: "LOG")
 *    @arg @c kGTLRGameServices_Rule_Action_NoAction Default no action. (Value:
 *        "NO_ACTION")
 */
@property(nonatomic, copy, nullable) NSString *action;

/**
 *  Additional restrictions that must be met. All conditions must pass for the
 *  rule to match.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGameServices_Condition *> *conditions;

/**
 *  Human-readable description of the rule.
 *
 *  Remapped to 'descriptionProperty' to avoid NSObject's 'description'.
 */
@property(nonatomic, copy, nullable) NSString *descriptionProperty;

/**
 *  If one or more 'in' clauses are specified, the rule matches if the
 *  PRINCIPAL/AUTHORITY_SELECTOR is in at least one of these entries.
 *
 *  Remapped to 'inProperty' to avoid language reserved word 'in'.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *inProperty;

/**
 *  The config returned to callers of CheckPolicy for any entries that match the
 *  LOG action.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGameServices_LogConfig *> *logConfig;

/**
 *  If one or more 'not_in' clauses are specified, the rule matches if the
 *  PRINCIPAL/AUTHORITY_SELECTOR is in none of the entries. The format for in
 *  and not_in entries can be found at in the Local IAM documentation (see
 *  go/local-iam#features).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *notIn;

/**
 *  A permission is a string of form '..' (e.g., 'storage.buckets.list'). A
 *  value of '*' matches all permissions, and a verb part of '*' (e.g.,
 *  'storage.buckets.*') matches all verbs.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Request message for `SetIamPolicy` method.
 */
@interface GTLRGameServices_SetIamPolicyRequest : GTLRObject

/**
 *  REQUIRED: The complete policy to be applied to the `resource`. The size of
 *  the policy is limited to a few 10s of KB. An empty policy is a valid policy
 *  but certain Google Cloud services (such as Projects) might reject them.
 */
@property(nonatomic, strong, nullable) GTLRGameServices_Policy *policy;

/**
 *  OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only
 *  the fields in the mask will be modified. If no mask is provided, the
 *  following default mask is used: `paths: "bindings, etag"`
 *
 *  String format is a comma-separated list of fields.
 */
@property(nonatomic, copy, nullable) NSString *updateMask;

@end


/**
 *  The `Status` type defines a logical error model that is suitable for
 *  different programming environments, including REST APIs and RPC APIs. It is
 *  used by [gRPC](https://github.com/grpc). Each `Status` message contains
 *  three pieces of data: error code, error message, and error details. You can
 *  find out more about this error model and how to work with it in the [API
 *  Design Guide](https://cloud.google.com/apis/design/errors).
 */
@interface GTLRGameServices_Status : GTLRObject

/**
 *  The status code, which should be an enum value of google.rpc.Code.
 *
 *  Uses NSNumber of intValue.
 */
@property(nonatomic, strong, nullable) NSNumber *code;

/**
 *  A list of messages that carry the error details. There is a common set of
 *  message types for APIs to use.
 */
@property(nonatomic, strong, nullable) NSArray<GTLRGameServices_Status_Details_Item *> *details;

/**
 *  A developer-facing error message, which should be in English. Any
 *  user-facing error message should be localized and sent in the
 *  google.rpc.Status.details field, or localized by the client.
 */
@property(nonatomic, copy, nullable) NSString *message;

@end


/**
 *  GTLRGameServices_Status_Details_Item
 *
 *  @note This class is documented as having more properties of any valid JSON
 *        type. Use @c -additionalJSONKeys and @c -additionalPropertyForName: to
 *        get the list of properties and then fetch them; or @c
 *        -additionalProperties to fetch them all at once.
 */
@interface GTLRGameServices_Status_Details_Item : GTLRObject
@end


/**
 *  Request message for `TestIamPermissions` method.
 */
@interface GTLRGameServices_TestIamPermissionsRequest : GTLRObject

/**
 *  The set of permissions to check for the `resource`. Permissions with
 *  wildcards (such as `*` or `storage.*`) are not allowed. For more information
 *  see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end


/**
 *  Response message for `TestIamPermissions` method.
 */
@interface GTLRGameServices_TestIamPermissionsResponse : GTLRObject

/**
 *  A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
 */
@property(nonatomic, strong, nullable) NSArray<NSString *> *permissions;

@end

NS_ASSUME_NONNULL_END

#pragma clang diagnostic pop
