// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Cloud IDS API (ids/v1)
// Description:
//   Cloud IDS (Cloud Intrusion Detection System) detects malware, spyware,
//   command-and-control attacks, and other network-based threats. Its security
//   efficacy is industry leading, built with Palo Alto Networks technologies.
//   When you use this product, your organization name and consumption levels
//   will be shared with Palo Alto Networks.
// Documentation:
//   https://cloud.google.com/

#import <GoogleAPIClientForREST/GTLRIDSQuery.h>

@implementation GTLRIDSQuery

@dynamic fields;

@end

@implementation GTLRIDSQuery_ProjectsLocationsEndpointsCreate

@dynamic endpointId, parent, requestId;

+ (instancetype)queryWithObject:(GTLRIDS_Endpoint *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/endpoints";
  GTLRIDSQuery_ProjectsLocationsEndpointsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRIDS_Operation class];
  query.loggingName = @"ids.projects.locations.endpoints.create";
  return query;
}

@end

@implementation GTLRIDSQuery_ProjectsLocationsEndpointsDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRIDSQuery_ProjectsLocationsEndpointsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRIDS_Operation class];
  query.loggingName = @"ids.projects.locations.endpoints.delete";
  return query;
}

@end

@implementation GTLRIDSQuery_ProjectsLocationsEndpointsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRIDSQuery_ProjectsLocationsEndpointsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRIDS_Endpoint class];
  query.loggingName = @"ids.projects.locations.endpoints.get";
  return query;
}

@end

@implementation GTLRIDSQuery_ProjectsLocationsEndpointsGetIamPolicy

@dynamic optionsRequestedPolicyVersion, resource;

+ (NSDictionary<NSString *, NSString *> *)parameterNameMap {
  return @{ @"optionsRequestedPolicyVersion" : @"options.requestedPolicyVersion" };
}

+ (instancetype)queryWithResource:(NSString *)resource {
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:getIamPolicy";
  GTLRIDSQuery_ProjectsLocationsEndpointsGetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.resource = resource;
  query.expectedObjectClass = [GTLRIDS_Policy class];
  query.loggingName = @"ids.projects.locations.endpoints.getIamPolicy";
  return query;
}

@end

@implementation GTLRIDSQuery_ProjectsLocationsEndpointsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/endpoints";
  GTLRIDSQuery_ProjectsLocationsEndpointsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRIDS_ListEndpointsResponse class];
  query.loggingName = @"ids.projects.locations.endpoints.list";
  return query;
}

@end

@implementation GTLRIDSQuery_ProjectsLocationsEndpointsSetIamPolicy

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRIDS_SetIamPolicyRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:setIamPolicy";
  GTLRIDSQuery_ProjectsLocationsEndpointsSetIamPolicy *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRIDS_Policy class];
  query.loggingName = @"ids.projects.locations.endpoints.setIamPolicy";
  return query;
}

@end

@implementation GTLRIDSQuery_ProjectsLocationsEndpointsTestIamPermissions

@dynamic resource;

+ (instancetype)queryWithObject:(GTLRIDS_TestIamPermissionsRequest *)object
                       resource:(NSString *)resource {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"resource" ];
  NSString *pathURITemplate = @"v1/{+resource}:testIamPermissions";
  GTLRIDSQuery_ProjectsLocationsEndpointsTestIamPermissions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.resource = resource;
  query.expectedObjectClass = [GTLRIDS_TestIamPermissionsResponse class];
  query.loggingName = @"ids.projects.locations.endpoints.testIamPermissions";
  return query;
}

@end

@implementation GTLRIDSQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRIDSQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRIDS_Location class];
  query.loggingName = @"ids.projects.locations.get";
  return query;
}

@end

@implementation GTLRIDSQuery_ProjectsLocationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLRIDSQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRIDS_ListLocationsResponse class];
  query.loggingName = @"ids.projects.locations.list";
  return query;
}

@end

@implementation GTLRIDSQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLRIDS_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLRIDSQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRIDS_Empty class];
  query.loggingName = @"ids.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLRIDSQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRIDSQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRIDS_Empty class];
  query.loggingName = @"ids.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLRIDSQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLRIDSQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRIDS_Operation class];
  query.loggingName = @"ids.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLRIDSQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLRIDSQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRIDS_ListOperationsResponse class];
  query.loggingName = @"ids.projects.locations.operations.list";
  return query;
}

@end
