// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Connectors API (connectors/v2)
// Description:
//   Enables users to create and manage connections to Google Cloud services and
//   third-party business applications using the Connectors interface.
// Documentation:
//   https://cloud.google.com/apigee/docs/api-platform/connectors/about-connectors

#import <GoogleAPIClientForREST/GTLRConnectorsQuery.h>

@implementation GTLRConnectorsQuery

@dynamic fields;

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsActionsExecute

@dynamic name;

+ (instancetype)queryWithObject:(GTLRConnectors_ExecuteActionRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}:execute";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsActionsExecute *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_ExecuteActionResponse class];
  query.loggingName = @"connectors.projects.locations.connections.actions.execute";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsActionsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/actions";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsActionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRConnectors_ListActionsResponse class];
  query.loggingName = @"connectors.projects.locations.connections.actions.list";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsEntityTypesEntitiesCreate

@dynamic parent;

+ (instancetype)queryWithObject:(GTLRConnectors_Entity *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/entities";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsEntityTypesEntitiesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLRConnectors_Entity class];
  query.loggingName = @"connectors.projects.locations.connections.entityTypes.entities.create";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsEntityTypesEntitiesDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsEntityTypesEntitiesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_Empty class];
  query.loggingName = @"connectors.projects.locations.connections.entityTypes.entities.delete";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsEntityTypesEntitiesDeleteEntitiesWithConditions

@dynamic conditions, entityType;

+ (instancetype)queryWithEntityType:(NSString *)entityType {
  NSArray *pathParams = @[ @"entityType" ];
  NSString *pathURITemplate = @"v2/{+entityType}/entities:deleteEntitiesWithConditions";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsEntityTypesEntitiesDeleteEntitiesWithConditions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.entityType = entityType;
  query.expectedObjectClass = [GTLRConnectors_Empty class];
  query.loggingName = @"connectors.projects.locations.connections.entityTypes.entities.deleteEntitiesWithConditions";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsEntityTypesEntitiesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsEntityTypesEntitiesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_Entity class];
  query.loggingName = @"connectors.projects.locations.connections.entityTypes.entities.get";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsEntityTypesEntitiesList

@dynamic conditions, pageSize, pageToken, parent, sortBy;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"sortBy" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/entities";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsEntityTypesEntitiesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRConnectors_ListEntitiesResponse class];
  query.loggingName = @"connectors.projects.locations.connections.entityTypes.entities.list";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsEntityTypesEntitiesPatch

@dynamic name;

+ (instancetype)queryWithObject:(GTLRConnectors_Entity *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v2/{+name}";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsEntityTypesEntitiesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLRConnectors_Entity class];
  query.loggingName = @"connectors.projects.locations.connections.entityTypes.entities.patch";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsEntityTypesEntitiesUpdateEntitiesWithConditions

@dynamic conditions, entityType;

+ (instancetype)queryWithObject:(GTLRConnectors_Entity *)object
                     entityType:(NSString *)entityType {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"entityType" ];
  NSString *pathURITemplate = @"v2/{+entityType}/entities:updateEntitiesWithConditions";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsEntityTypesEntitiesUpdateEntitiesWithConditions *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.entityType = entityType;
  query.expectedObjectClass = [GTLRConnectors_UpdateEntitiesWithConditionsResponse class];
  query.loggingName = @"connectors.projects.locations.connections.entityTypes.entities.updateEntitiesWithConditions";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsEntityTypesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v2/{+parent}/entityTypes";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsEntityTypesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLRConnectors_ListEntityTypesResponse class];
  query.loggingName = @"connectors.projects.locations.connections.entityTypes.list";
  return query;
}

@end

@implementation GTLRConnectorsQuery_ProjectsLocationsConnectionsExecuteSqlQuery

@dynamic connection;

+ (instancetype)queryWithObject:(GTLRConnectors_ExecuteSqlQueryRequest *)object
                     connection:(NSString *)connection {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"connection" ];
  NSString *pathURITemplate = @"v2/{+connection}:executeSqlQuery";
  GTLRConnectorsQuery_ProjectsLocationsConnectionsExecuteSqlQuery *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.connection = connection;
  query.expectedObjectClass = [GTLRConnectors_ExecuteSqlQueryResponse class];
  query.loggingName = @"connectors.projects.locations.connections.executeSqlQuery";
  return query;
}

@end
