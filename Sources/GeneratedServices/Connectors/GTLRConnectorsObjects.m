// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Connectors API (connectors/v1)
// Description:
//   Enables users to create and manage connections to Google Cloud services and
//   third-party business applications using the Connectors interface.
// Documentation:
//   https://cloud.google.com/apigee/docs/api-platform/connectors/about-connectors

#import "GTLRConnectorsObjects.h"

// ----------------------------------------------------------------------------
// Constants

// GTLRConnectors_AuditLogConfig.logType
NSString * const kGTLRConnectors_AuditLogConfig_LogType_AdminRead = @"ADMIN_READ";
NSString * const kGTLRConnectors_AuditLogConfig_LogType_DataRead = @"DATA_READ";
NSString * const kGTLRConnectors_AuditLogConfig_LogType_DataWrite = @"DATA_WRITE";
NSString * const kGTLRConnectors_AuditLogConfig_LogType_LogTypeUnspecified = @"LOG_TYPE_UNSPECIFIED";

// GTLRConnectors_AuthConfig.authType
NSString * const kGTLRConnectors_AuthConfig_AuthType_AuthTypeUnspecified = @"AUTH_TYPE_UNSPECIFIED";
NSString * const kGTLRConnectors_AuthConfig_AuthType_Oauth2ClientCredentials = @"OAUTH2_CLIENT_CREDENTIALS";
NSString * const kGTLRConnectors_AuthConfig_AuthType_Oauth2JwtBearer = @"OAUTH2_JWT_BEARER";
NSString * const kGTLRConnectors_AuthConfig_AuthType_UserPassword = @"USER_PASSWORD";

// GTLRConnectors_AuthConfigTemplate.authType
NSString * const kGTLRConnectors_AuthConfigTemplate_AuthType_AuthTypeUnspecified = @"AUTH_TYPE_UNSPECIFIED";
NSString * const kGTLRConnectors_AuthConfigTemplate_AuthType_Oauth2ClientCredentials = @"OAUTH2_CLIENT_CREDENTIALS";
NSString * const kGTLRConnectors_AuthConfigTemplate_AuthType_Oauth2JwtBearer = @"OAUTH2_JWT_BEARER";
NSString * const kGTLRConnectors_AuthConfigTemplate_AuthType_UserPassword = @"USER_PASSWORD";

// GTLRConnectors_ConfigVariableTemplate.valueType
NSString * const kGTLRConnectors_ConfigVariableTemplate_ValueType_Bool = @"BOOL";
NSString * const kGTLRConnectors_ConfigVariableTemplate_ValueType_Int = @"INT";
NSString * const kGTLRConnectors_ConfigVariableTemplate_ValueType_Secret = @"SECRET";
NSString * const kGTLRConnectors_ConfigVariableTemplate_ValueType_String = @"STRING";
NSString * const kGTLRConnectors_ConfigVariableTemplate_ValueType_ValueTypeUnspecified = @"VALUE_TYPE_UNSPECIFIED";

// GTLRConnectors_ConnectionStatus.state
NSString * const kGTLRConnectors_ConnectionStatus_State_Active = @"ACTIVE";
NSString * const kGTLRConnectors_ConnectionStatus_State_Creating = @"CREATING";
NSString * const kGTLRConnectors_ConnectionStatus_State_Deleting = @"DELETING";
NSString * const kGTLRConnectors_ConnectionStatus_State_Error  = @"ERROR";
NSString * const kGTLRConnectors_ConnectionStatus_State_Inactive = @"INACTIVE";
NSString * const kGTLRConnectors_ConnectionStatus_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRConnectors_ConnectionStatus_State_Updating = @"UPDATING";

// GTLRConnectors_Connector.launchStage
NSString * const kGTLRConnectors_Connector_LaunchStage_Deprecated = @"DEPRECATED";
NSString * const kGTLRConnectors_Connector_LaunchStage_Ga      = @"GA";
NSString * const kGTLRConnectors_Connector_LaunchStage_LaunchStageUnspecified = @"LAUNCH_STAGE_UNSPECIFIED";
NSString * const kGTLRConnectors_Connector_LaunchStage_Preview = @"PREVIEW";

// GTLRConnectors_ConnectorVersion.launchStage
NSString * const kGTLRConnectors_ConnectorVersion_LaunchStage_Deprecated = @"DEPRECATED";
NSString * const kGTLRConnectors_ConnectorVersion_LaunchStage_Ga = @"GA";
NSString * const kGTLRConnectors_ConnectorVersion_LaunchStage_LaunchStageUnspecified = @"LAUNCH_STAGE_UNSPECIFIED";
NSString * const kGTLRConnectors_ConnectorVersion_LaunchStage_Preview = @"PREVIEW";

// GTLRConnectors_Field.dataType
NSString * const kGTLRConnectors_Field_DataType_DataTypeArray  = @"DATA_TYPE_ARRAY";
NSString * const kGTLRConnectors_Field_DataType_DataTypeBigint = @"DATA_TYPE_BIGINT";
NSString * const kGTLRConnectors_Field_DataType_DataTypeBinary = @"DATA_TYPE_BINARY";
NSString * const kGTLRConnectors_Field_DataType_DataTypeBit    = @"DATA_TYPE_BIT";
NSString * const kGTLRConnectors_Field_DataType_DataTypeBlob   = @"DATA_TYPE_BLOB";
NSString * const kGTLRConnectors_Field_DataType_DataTypeBoolean = @"DATA_TYPE_BOOLEAN";
NSString * const kGTLRConnectors_Field_DataType_DataTypeChar   = @"DATA_TYPE_CHAR";
NSString * const kGTLRConnectors_Field_DataType_DataTypeClob   = @"DATA_TYPE_CLOB";
NSString * const kGTLRConnectors_Field_DataType_DataTypeDatalink = @"DATA_TYPE_DATALINK";
NSString * const kGTLRConnectors_Field_DataType_DataTypeDate   = @"DATA_TYPE_DATE";
NSString * const kGTLRConnectors_Field_DataType_DataTypeDatetime = @"DATA_TYPE_DATETIME";
NSString * const kGTLRConnectors_Field_DataType_DataTypeDecimal = @"DATA_TYPE_DECIMAL";
NSString * const kGTLRConnectors_Field_DataType_DataTypeDistinct = @"DATA_TYPE_DISTINCT";
NSString * const kGTLRConnectors_Field_DataType_DataTypeDouble = @"DATA_TYPE_DOUBLE";
NSString * const kGTLRConnectors_Field_DataType_DataTypeFloat  = @"DATA_TYPE_FLOAT";
NSString * const kGTLRConnectors_Field_DataType_DataTypeInt    = @"DATA_TYPE_INT";
NSString * const kGTLRConnectors_Field_DataType_DataTypeInteger = @"DATA_TYPE_INTEGER";
NSString * const kGTLRConnectors_Field_DataType_DataTypeJavaObject = @"DATA_TYPE_JAVA_OBJECT";
NSString * const kGTLRConnectors_Field_DataType_DataTypeLong   = @"DATA_TYPE_LONG";
NSString * const kGTLRConnectors_Field_DataType_DataTypeLongnvarchar = @"DATA_TYPE_LONGNVARCHAR";
NSString * const kGTLRConnectors_Field_DataType_DataTypeLongvarbinary = @"DATA_TYPE_LONGVARBINARY";
NSString * const kGTLRConnectors_Field_DataType_DataTypeLongvarchar = @"DATA_TYPE_LONGVARCHAR";
NSString * const kGTLRConnectors_Field_DataType_DataTypeNchar  = @"DATA_TYPE_NCHAR";
NSString * const kGTLRConnectors_Field_DataType_DataTypeNclob  = @"DATA_TYPE_NCLOB";
NSString * const kGTLRConnectors_Field_DataType_DataTypeNull   = @"DATA_TYPE_NULL";
NSString * const kGTLRConnectors_Field_DataType_DataTypeNumeric = @"DATA_TYPE_NUMERIC";
NSString * const kGTLRConnectors_Field_DataType_DataTypeNvarchar = @"DATA_TYPE_NVARCHAR";
NSString * const kGTLRConnectors_Field_DataType_DataTypeOther  = @"DATA_TYPE_OTHER";
NSString * const kGTLRConnectors_Field_DataType_DataTypeReal   = @"DATA_TYPE_REAL";
NSString * const kGTLRConnectors_Field_DataType_DataTypeRef    = @"DATA_TYPE_REF";
NSString * const kGTLRConnectors_Field_DataType_DataTypeRefCursor = @"DATA_TYPE_REF_CURSOR";
NSString * const kGTLRConnectors_Field_DataType_DataTypeRowid  = @"DATA_TYPE_ROWID";
NSString * const kGTLRConnectors_Field_DataType_DataTypeSmallint = @"DATA_TYPE_SMALLINT";
NSString * const kGTLRConnectors_Field_DataType_DataTypeSqlxml = @"DATA_TYPE_SQLXML";
NSString * const kGTLRConnectors_Field_DataType_DataTypeString = @"DATA_TYPE_STRING";
NSString * const kGTLRConnectors_Field_DataType_DataTypeStruct = @"DATA_TYPE_STRUCT";
NSString * const kGTLRConnectors_Field_DataType_DataTypeTime   = @"DATA_TYPE_TIME";
NSString * const kGTLRConnectors_Field_DataType_DataTypeTimestamp = @"DATA_TYPE_TIMESTAMP";
NSString * const kGTLRConnectors_Field_DataType_DataTypeTimestampWithTimezone = @"DATA_TYPE_TIMESTAMP_WITH_TIMEZONE";
NSString * const kGTLRConnectors_Field_DataType_DataTypeTimeWithTimezone = @"DATA_TYPE_TIME_WITH_TIMEZONE";
NSString * const kGTLRConnectors_Field_DataType_DataTypeTinyint = @"DATA_TYPE_TINYINT";
NSString * const kGTLRConnectors_Field_DataType_DataTypeUnspecified = @"DATA_TYPE_UNSPECIFIED";
NSString * const kGTLRConnectors_Field_DataType_DataTypeUuid   = @"DATA_TYPE_UUID";
NSString * const kGTLRConnectors_Field_DataType_DataTypeVarbinary = @"DATA_TYPE_VARBINARY";
NSString * const kGTLRConnectors_Field_DataType_DataTypeVarchar = @"DATA_TYPE_VARCHAR";

// GTLRConnectors_InputParameter.dataType
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeArray = @"DATA_TYPE_ARRAY";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeBigint = @"DATA_TYPE_BIGINT";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeBinary = @"DATA_TYPE_BINARY";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeBit = @"DATA_TYPE_BIT";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeBlob = @"DATA_TYPE_BLOB";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeBoolean = @"DATA_TYPE_BOOLEAN";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeChar = @"DATA_TYPE_CHAR";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeClob = @"DATA_TYPE_CLOB";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeDatalink = @"DATA_TYPE_DATALINK";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeDate = @"DATA_TYPE_DATE";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeDatetime = @"DATA_TYPE_DATETIME";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeDecimal = @"DATA_TYPE_DECIMAL";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeDistinct = @"DATA_TYPE_DISTINCT";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeDouble = @"DATA_TYPE_DOUBLE";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeFloat = @"DATA_TYPE_FLOAT";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeInt = @"DATA_TYPE_INT";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeInteger = @"DATA_TYPE_INTEGER";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeJavaObject = @"DATA_TYPE_JAVA_OBJECT";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeLong = @"DATA_TYPE_LONG";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeLongnvarchar = @"DATA_TYPE_LONGNVARCHAR";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeLongvarbinary = @"DATA_TYPE_LONGVARBINARY";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeLongvarchar = @"DATA_TYPE_LONGVARCHAR";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeNchar = @"DATA_TYPE_NCHAR";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeNclob = @"DATA_TYPE_NCLOB";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeNull = @"DATA_TYPE_NULL";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeNumeric = @"DATA_TYPE_NUMERIC";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeNvarchar = @"DATA_TYPE_NVARCHAR";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeOther = @"DATA_TYPE_OTHER";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeReal = @"DATA_TYPE_REAL";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeRef = @"DATA_TYPE_REF";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeRefCursor = @"DATA_TYPE_REF_CURSOR";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeRowid = @"DATA_TYPE_ROWID";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeSmallint = @"DATA_TYPE_SMALLINT";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeSqlxml = @"DATA_TYPE_SQLXML";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeString = @"DATA_TYPE_STRING";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeStruct = @"DATA_TYPE_STRUCT";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeTime = @"DATA_TYPE_TIME";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeTimestamp = @"DATA_TYPE_TIMESTAMP";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeTimestampWithTimezone = @"DATA_TYPE_TIMESTAMP_WITH_TIMEZONE";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeTimeWithTimezone = @"DATA_TYPE_TIME_WITH_TIMEZONE";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeTinyint = @"DATA_TYPE_TINYINT";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeUnspecified = @"DATA_TYPE_UNSPECIFIED";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeUuid = @"DATA_TYPE_UUID";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeVarbinary = @"DATA_TYPE_VARBINARY";
NSString * const kGTLRConnectors_InputParameter_DataType_DataTypeVarchar = @"DATA_TYPE_VARCHAR";

// GTLRConnectors_Provider.launchStage
NSString * const kGTLRConnectors_Provider_LaunchStage_Deprecated = @"DEPRECATED";
NSString * const kGTLRConnectors_Provider_LaunchStage_Ga       = @"GA";
NSString * const kGTLRConnectors_Provider_LaunchStage_LaunchStageUnspecified = @"LAUNCH_STAGE_UNSPECIFIED";
NSString * const kGTLRConnectors_Provider_LaunchStage_Preview  = @"PREVIEW";

// GTLRConnectors_Resource.type
NSString * const kGTLRConnectors_Resource_Type_GcpProject      = @"GCP_PROJECT";
NSString * const kGTLRConnectors_Resource_Type_GcpResource     = @"GCP_RESOURCE";
NSString * const kGTLRConnectors_Resource_Type_GcpSecretmanagerSecret = @"GCP_SECRETMANAGER_SECRET";
NSString * const kGTLRConnectors_Resource_Type_GcpSecretmanagerSecretVersion = @"GCP_SECRETMANAGER_SECRET_VERSION";
NSString * const kGTLRConnectors_Resource_Type_TypeUnspecified = @"TYPE_UNSPECIFIED";

// GTLRConnectors_ResultMetadata.dataType
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeArray = @"DATA_TYPE_ARRAY";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeBigint = @"DATA_TYPE_BIGINT";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeBinary = @"DATA_TYPE_BINARY";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeBit = @"DATA_TYPE_BIT";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeBlob = @"DATA_TYPE_BLOB";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeBoolean = @"DATA_TYPE_BOOLEAN";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeChar = @"DATA_TYPE_CHAR";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeClob = @"DATA_TYPE_CLOB";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeDatalink = @"DATA_TYPE_DATALINK";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeDate = @"DATA_TYPE_DATE";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeDatetime = @"DATA_TYPE_DATETIME";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeDecimal = @"DATA_TYPE_DECIMAL";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeDistinct = @"DATA_TYPE_DISTINCT";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeDouble = @"DATA_TYPE_DOUBLE";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeFloat = @"DATA_TYPE_FLOAT";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeInt = @"DATA_TYPE_INT";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeInteger = @"DATA_TYPE_INTEGER";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeJavaObject = @"DATA_TYPE_JAVA_OBJECT";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeLong = @"DATA_TYPE_LONG";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeLongnvarchar = @"DATA_TYPE_LONGNVARCHAR";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeLongvarbinary = @"DATA_TYPE_LONGVARBINARY";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeLongvarchar = @"DATA_TYPE_LONGVARCHAR";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeNchar = @"DATA_TYPE_NCHAR";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeNclob = @"DATA_TYPE_NCLOB";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeNull = @"DATA_TYPE_NULL";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeNumeric = @"DATA_TYPE_NUMERIC";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeNvarchar = @"DATA_TYPE_NVARCHAR";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeOther = @"DATA_TYPE_OTHER";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeReal = @"DATA_TYPE_REAL";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeRef = @"DATA_TYPE_REF";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeRefCursor = @"DATA_TYPE_REF_CURSOR";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeRowid = @"DATA_TYPE_ROWID";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeSmallint = @"DATA_TYPE_SMALLINT";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeSqlxml = @"DATA_TYPE_SQLXML";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeString = @"DATA_TYPE_STRING";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeStruct = @"DATA_TYPE_STRUCT";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeTime = @"DATA_TYPE_TIME";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeTimestamp = @"DATA_TYPE_TIMESTAMP";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeTimestampWithTimezone = @"DATA_TYPE_TIMESTAMP_WITH_TIMEZONE";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeTimeWithTimezone = @"DATA_TYPE_TIME_WITH_TIMEZONE";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeTinyint = @"DATA_TYPE_TINYINT";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeUnspecified = @"DATA_TYPE_UNSPECIFIED";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeUuid = @"DATA_TYPE_UUID";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeVarbinary = @"DATA_TYPE_VARBINARY";
NSString * const kGTLRConnectors_ResultMetadata_DataType_DataTypeVarchar = @"DATA_TYPE_VARCHAR";

// GTLRConnectors_RoleGrant.principal
NSString * const kGTLRConnectors_RoleGrant_Principal_ConnectorSa = @"CONNECTOR_SA";
NSString * const kGTLRConnectors_RoleGrant_Principal_PrincipalUnspecified = @"PRINCIPAL_UNSPECIFIED";

// GTLRConnectors_RuntimeConfig.state
NSString * const kGTLRConnectors_RuntimeConfig_State_Activating = @"ACTIVATING";
NSString * const kGTLRConnectors_RuntimeConfig_State_Active    = @"ACTIVE";
NSString * const kGTLRConnectors_RuntimeConfig_State_Creating  = @"CREATING";
NSString * const kGTLRConnectors_RuntimeConfig_State_Deleting  = @"DELETING";
NSString * const kGTLRConnectors_RuntimeConfig_State_Inactive  = @"INACTIVE";
NSString * const kGTLRConnectors_RuntimeConfig_State_StateUnspecified = @"STATE_UNSPECIFIED";
NSString * const kGTLRConnectors_RuntimeConfig_State_Updating  = @"UPDATING";

// GTLRConnectors_Source.sourceType
NSString * const kGTLRConnectors_Source_SourceType_ConfigVariable = @"CONFIG_VARIABLE";
NSString * const kGTLRConnectors_Source_SourceType_SourceTypeUnspecified = @"SOURCE_TYPE_UNSPECIFIED";

// ----------------------------------------------------------------------------
//
//   GTLRConnectors_AuditConfig
//

@implementation GTLRConnectors_AuditConfig
@dynamic auditLogConfigs, service;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditLogConfigs" : [GTLRConnectors_AuditLogConfig class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_AuditLogConfig
//

@implementation GTLRConnectors_AuditLogConfig
@dynamic exemptedMembers, logType;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"exemptedMembers" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_AuthConfig
//

@implementation GTLRConnectors_AuthConfig
@dynamic additionalVariables, authType, oauth2ClientCredentials,
         oauth2JwtBearer, userPassword;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"additionalVariables" : [GTLRConnectors_ConfigVariable class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_AuthConfigTemplate
//

@implementation GTLRConnectors_AuthConfigTemplate
@dynamic authType, configVariableTemplates;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"configVariableTemplates" : [GTLRConnectors_ConfigVariableTemplate class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Binding
//

@implementation GTLRConnectors_Binding
@dynamic condition, members, role;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"members" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_CancelOperationRequest
//

@implementation GTLRConnectors_CancelOperationRequest
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ConfigVariable
//

@implementation GTLRConnectors_ConfigVariable
@dynamic boolValue, intValue, key, secretValue, stringValue;
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ConfigVariableTemplate
//

@implementation GTLRConnectors_ConfigVariableTemplate
@dynamic descriptionProperty, displayName, key, required, roleGrant,
         validationRegex, valueType;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Connection
//

@implementation GTLRConnectors_Connection
@dynamic authConfig, configVariables, connectorVersion, createTime,
         descriptionProperty, egressBackends, envoyImageLocation, imageLocation,
         labels, lockConfig, name, serviceAccount, serviceDirectory, status,
         suspended, updateTime;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"configVariables" : [GTLRConnectors_ConfigVariable class],
    @"egressBackends" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Connection_Labels
//

@implementation GTLRConnectors_Connection_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ConnectionSchemaMetadata
//

@implementation GTLRConnectors_ConnectionSchemaMetadata
@dynamic actions, entities;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"actions" : [NSString class],
    @"entities" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ConnectionStatus
//

@implementation GTLRConnectors_ConnectionStatus
@dynamic descriptionProperty, state, status;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Connector
//

@implementation GTLRConnectors_Connector
@dynamic createTime, descriptionProperty, displayName, documentationUri,
         externalUri, labels, launchStage, name, updateTime, webAssetsLocation;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Connector_Labels
//

@implementation GTLRConnectors_Connector_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ConnectorVersion
//

@implementation GTLRConnectors_ConnectorVersion
@dynamic authConfigTemplates, configVariableTemplates, createTime, displayName,
         egressControlConfig, labels, launchStage, name, releaseVersion,
         roleGrant, roleGrants, supportedRuntimeFeatures, updateTime;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"authConfigTemplates" : [GTLRConnectors_AuthConfigTemplate class],
    @"configVariableTemplates" : [GTLRConnectors_ConfigVariableTemplate class],
    @"roleGrants" : [GTLRConnectors_RoleGrant class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ConnectorVersion_Labels
//

@implementation GTLRConnectors_ConnectorVersion_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_EgressControlConfig
//

@implementation GTLRConnectors_EgressControlConfig
@dynamic backends, extractionRules;
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Empty
//

@implementation GTLRConnectors_Empty
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Expr
//

@implementation GTLRConnectors_Expr
@dynamic descriptionProperty, expression, location, title;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ExtractionRule
//

@implementation GTLRConnectors_ExtractionRule
@dynamic extractionRegex, source;
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ExtractionRules
//

@implementation GTLRConnectors_ExtractionRules
@dynamic extractionRule;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"extractionRule" : [GTLRConnectors_ExtractionRule class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Field
//

@implementation GTLRConnectors_Field
@dynamic additionalDetails, dataType, defaultValue, descriptionProperty, field,
         key, nullable, readonly;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Field_AdditionalDetails
//

@implementation GTLRConnectors_Field_AdditionalDetails

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_InputParameter
//

@implementation GTLRConnectors_InputParameter
@dynamic dataType, defaultValue, descriptionProperty, nullable, parameter;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_JwtClaims
//

@implementation GTLRConnectors_JwtClaims
@dynamic audience, issuer, subject;
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ListConnectionsResponse
//

@implementation GTLRConnectors_ListConnectionsResponse
@dynamic connections, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"connections" : [GTLRConnectors_Connection class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"connections";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ListConnectorsResponse
//

@implementation GTLRConnectors_ListConnectorsResponse
@dynamic connectors, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"connectors" : [GTLRConnectors_Connector class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"connectors";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ListConnectorVersionsResponse
//

@implementation GTLRConnectors_ListConnectorVersionsResponse
@dynamic connectorVersions, nextPageToken, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"connectorVersions" : [GTLRConnectors_ConnectorVersion class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"connectorVersions";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ListLocationsResponse
//

@implementation GTLRConnectors_ListLocationsResponse
@dynamic locations, nextPageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"locations" : [GTLRConnectors_Location class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"locations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ListOperationsResponse
//

@implementation GTLRConnectors_ListOperationsResponse
@dynamic nextPageToken, operations;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"operations" : [GTLRConnectors_Operation class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"operations";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ListProvidersResponse
//

@implementation GTLRConnectors_ListProvidersResponse
@dynamic nextPageToken, providers, unreachable;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"providers" : [GTLRConnectors_Provider class],
    @"unreachable" : [NSString class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"providers";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ListRuntimeActionSchemasResponse
//

@implementation GTLRConnectors_ListRuntimeActionSchemasResponse
@dynamic nextPageToken, runtimeActionSchemas;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"runtimeActionSchemas" : [GTLRConnectors_RuntimeActionSchema class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"runtimeActionSchemas";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ListRuntimeEntitySchemasResponse
//

@implementation GTLRConnectors_ListRuntimeEntitySchemasResponse
@dynamic nextPageToken, runtimeEntitySchemas;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"runtimeEntitySchemas" : [GTLRConnectors_RuntimeEntitySchema class]
  };
  return map;
}

+ (NSString *)collectionItemsKey {
  return @"runtimeEntitySchemas";
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Location
//

@implementation GTLRConnectors_Location
@dynamic displayName, labels, locationId, metadata, name;
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Location_Labels
//

@implementation GTLRConnectors_Location_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Location_Metadata
//

@implementation GTLRConnectors_Location_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_LockConfig
//

@implementation GTLRConnectors_LockConfig
@dynamic locked, reason;
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Oauth2ClientCredentials
//

@implementation GTLRConnectors_Oauth2ClientCredentials
@dynamic clientId, clientSecret;
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Oauth2JwtBearer
//

@implementation GTLRConnectors_Oauth2JwtBearer
@dynamic clientKey, jwtClaims;
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Operation
//

@implementation GTLRConnectors_Operation
@dynamic done, error, metadata, name, response;
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Operation_Metadata
//

@implementation GTLRConnectors_Operation_Metadata

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Operation_Response
//

@implementation GTLRConnectors_Operation_Response

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_OperationMetadata
//

@implementation GTLRConnectors_OperationMetadata
@dynamic apiVersion, createTime, endTime, requestedCancellation, statusMessage,
         target, verb;
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Policy
//

@implementation GTLRConnectors_Policy
@dynamic auditConfigs, bindings, ETag, version;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"ETag" : @"etag" };
}

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"auditConfigs" : [GTLRConnectors_AuditConfig class],
    @"bindings" : [GTLRConnectors_Binding class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Provider
//

@implementation GTLRConnectors_Provider
@dynamic createTime, descriptionProperty, displayName, documentationUri,
         externalUri, labels, launchStage, name, updateTime, webAssetsLocation;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Provider_Labels
//

@implementation GTLRConnectors_Provider_Labels

+ (Class)classForAdditionalProperties {
  return [NSString class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Resource
//

@implementation GTLRConnectors_Resource
@dynamic pathTemplate, type;
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_ResultMetadata
//

@implementation GTLRConnectors_ResultMetadata
@dynamic dataType, descriptionProperty, field;

+ (NSDictionary<NSString *, NSString *> *)propertyToJSONKeyMap {
  return @{ @"descriptionProperty" : @"description" };
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_RoleGrant
//

@implementation GTLRConnectors_RoleGrant
@dynamic helperTextTemplate, principal, resource, roles;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"roles" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_RuntimeActionSchema
//

@implementation GTLRConnectors_RuntimeActionSchema
@dynamic action, inputParameters, resultMetadata;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"inputParameters" : [GTLRConnectors_InputParameter class],
    @"resultMetadata" : [GTLRConnectors_ResultMetadata class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_RuntimeConfig
//

@implementation GTLRConnectors_RuntimeConfig
@dynamic conndSubscription, conndTopic, controlPlaneSubscription,
         controlPlaneTopic, locationId, runtimeEndpoint, schemaGcsBucket,
         serviceDirectory, state;
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_RuntimeEntitySchema
//

@implementation GTLRConnectors_RuntimeEntitySchema
@dynamic entity, fields;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"fields" : [GTLRConnectors_Field class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Secret
//

@implementation GTLRConnectors_Secret
@dynamic secretVersion;
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_SetIamPolicyRequest
//

@implementation GTLRConnectors_SetIamPolicyRequest
@dynamic policy, updateMask;
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Source
//

@implementation GTLRConnectors_Source
@dynamic fieldId, sourceType;
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Status
//

@implementation GTLRConnectors_Status
@dynamic code, details, message;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"details" : [GTLRConnectors_Status_Details_Item class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_Status_Details_Item
//

@implementation GTLRConnectors_Status_Details_Item

+ (Class)classForAdditionalProperties {
  return [NSObject class];
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_SupportedRuntimeFeatures
//

@implementation GTLRConnectors_SupportedRuntimeFeatures
@dynamic actionApis, entityApis, sqlQuery;
@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_TestIamPermissionsRequest
//

@implementation GTLRConnectors_TestIamPermissionsRequest
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_TestIamPermissionsResponse
//

@implementation GTLRConnectors_TestIamPermissionsResponse
@dynamic permissions;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"permissions" : [NSString class]
  };
  return map;
}

@end


// ----------------------------------------------------------------------------
//
//   GTLRConnectors_UserPassword
//

@implementation GTLRConnectors_UserPassword
@dynamic password, username;
@end
